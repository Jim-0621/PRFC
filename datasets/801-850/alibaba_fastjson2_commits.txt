File: core/src/main/java/com/alibaba/fastjson2/util/IOUtils.java
Patch:
@@ -1717,7 +1717,7 @@ public static short getShortLE(byte[] bytes, int offset) {
 
     public static boolean isUTF8BOM(byte[] bytes, int off) {
         // EF BB BF
-        return ((getIntLE(bytes, 0)) & 0xFFFFFF) == 0xBFBBEF;
+        return ((getIntLE(bytes, off)) & 0xFFFFFF) == 0xBFBBEF;
     }
 
     public static int getIntBE(byte[] bytes, int offset) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -477,7 +477,7 @@ private void writeString0(char[] chars, int coff, int strlen) {
 
             off = this.off;
         } else {
-            ascii = isASCII(chars, coff, strlen);
+            ascii = isLatin1(chars, coff, strlen);
         }
 
         int minCapacity = (ascii ? strlen : strlen * 3) + off + 6;

File: core/src/test/java/com/alibaba/fastjson2/util/IOUtilsTest.java
Patch:
@@ -427,7 +427,7 @@ public void convEndian() throws Throwable {
     public void test_isASCII() {
         char[] chars = new char[] {'0', '1', '2', '3', '4', '5', '6', 0x80};
         long v = UNSAFE.getLong(chars, ARRAY_CHAR_BASE_OFFSET);
-        assertTrue(IOUtils.isASCII(chars, 0, 4));
-        assertTrue(IOUtils.isASCII(chars, 4, 4));
+        assertTrue(IOUtils.isLatin1(chars, 0, 4));
+        assertTrue(IOUtils.isLatin1(chars, 4, 4));
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/write/ObjectWriterProviderTest.java
Patch:
@@ -150,8 +150,8 @@ public void testWriterProxy() throws InterruptedException {
     public static class Bean {
     }
 
-    public static class BeanMethodInterceptor
-            implements MethodInterceptor {
+    public static class BeanMethodInterceptor implements MethodInterceptor {
+
         @Override
         public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
             return methodProxy.invokeSuper(o, objects);

File: core/src/test/java/com/alibaba/fastjson2/write/ObjectWriterProviderTest.java
Patch:
@@ -150,8 +150,8 @@ public void testWriterProxy() throws InterruptedException {
     public static class Bean {
     }
 
-    public static class BeanMethodInterceptor implements MethodInterceptor {
-
+    public static class BeanMethodInterceptor
+            implements MethodInterceptor {
         @Override
         public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
             return methodProxy.invokeSuper(o, objects);

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayParseStringTest.java
Patch:
@@ -14,7 +14,7 @@ public static void fastjson2() {
             }
             long millis = System.currentTimeMillis() - start;
             System.out.println("fastjson2 millis : " + millis);
-            // zulu8.70.0.23 : 5569 5630 4435
+            // zulu8.70.0.23 : 5569 5630 4435 4199 3851
             // zulu11.64.19 : 5022 5033 3754
             // zulu17.42.19 : 5377 5193 5222 5154 5116 5083 4987 4079
         }

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayParseUTF8BytesTest.java
Patch:
@@ -13,7 +13,7 @@ public static void fastjson2() {
             }
             long millis = System.currentTimeMillis() - start;
             System.out.println("fastjson2 millis : " + millis);
-            // zulu8.62.0.19 : 703 746 710 706 700 682 717 698 526 500 474
+            // zulu8.62.0.19 : 703 746 710 706 700 682 717 698 526 500 474 445
             // zulu11.52.13 : 579 565 552 541 554 553 554 538 420 424 434
             // zulu17.40.19 : 600 604 597 593 578 567 447 420
         }
@@ -63,8 +63,8 @@ public static void jackson() throws Exception {
     }
 
     public static void main(String[] args) throws Exception {
-//        fastjson2();
-        fastjson2_features();
+        fastjson2();
+//        fastjson2_features();
 //        dsljson();
 //        jackson();
     }

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayWriteStringTest.java
Patch:
@@ -16,7 +16,7 @@ public static void fastjson2() {
             System.out.println("fastjson2 millis : " + millis);
             // zulu8.70.0.23 : 3001 2795
             // zulu11.62.17 : 3288 2549
-            // zulu17.32.13 : 3305 2909 2503
+            // zulu17.32.13 : 3305 2909 2503 2353
             // zulu17.40.91_vec : 2527 2536
         }
     }

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/jjb/ClientsWriteUTF8BytesTest.java
Patch:
@@ -40,7 +40,7 @@ public static void fastjson2() {
             long millis = System.currentTimeMillis() - start;
             System.out.println("ClientsWriteUTF8Bytes-fastjson2 millis : " + millis);
             // zulu8.70.0.23 : 1533 1493 1374 1353
-            // zulu17.40.19 : 1419 1361 1356 1356 1317 1224 1212 1202 1182 979
+            // zulu17.40.19 : 1419 1361 1356 1356 1317 1224 1212 1202 1182 979 949
             // zulu17.40.19_vec : 1116
             // zulu17.40.19_reflect : 1427
         }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -2169,9 +2169,8 @@ public static JSONArray parseArray(String str) {
                 JSONFactory.getDefaultObjectReaderProvider(),
                 DEFAULT_PARSER_FEATURE
         );
-        JSONReader reader = JSONReader.of(str, context);
 
-        try {
+        try (JSONReader reader = JSONReader.of(str, context)) {
             if (reader.nextIfNullOrEmptyString()) {
                 return null;
             }

File: core/src/test/java/com/alibaba/fastjson2/JSONFactoryTest.java
Patch:
@@ -26,6 +26,8 @@ public void contextJSONPathCompiler() {
     @Test
     public void test1() {
         JSONFactory.setUseJacksonAnnotation(false);
+        JSONFactory.setUseGsonAnnotation(false);
+        assertFalse(JSONFactory.isUseGsonAnnotation());
         assertFalse(JSONFactory.isUseJacksonAnnotation());
         JSONFactory.setUseJacksonAnnotation(true);
         JSONFactory.setUseGsonAnnotation(true);

File: core/src/test/java/com/alibaba/fastjson2/JSONFactoryTest.java
Patch:
@@ -28,6 +28,7 @@ public void test1() {
         JSONFactory.setUseJacksonAnnotation(false);
         assertFalse(JSONFactory.isUseJacksonAnnotation());
         JSONFactory.setUseJacksonAnnotation(true);
+        JSONFactory.setUseGsonAnnotation(true);
         assertTrue(JSONFactory.isUseJacksonAnnotation());
 
         ObjectWriterProvider provider = JSONFactory.getDefaultObjectWriterProvider();

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -878,7 +878,7 @@ static JSONPathFilter.Operator parseOperator(JSONReader jsonReader) {
             case '=':
                 jsonReader.next();
                 if (jsonReader.ch == '~') {
-                    jsonReader.next();
+                    jsonReader.nextWithoutComment();
                     operator = JSONPathFilter.Operator.REG_MATCH;
                 } else if (jsonReader.ch == '=') {
                     jsonReader.next();

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderTest1.java
Patch:
@@ -943,20 +943,20 @@ public void test_readLocalDateTimeX() {
     @Test
     public void test_readPattern() {
         for (JSONReader jsonReader : TestUtils.createJSONReaders4("1 /abc/")) {
-            jsonReader.next();
+            jsonReader.nextWithoutComment();
             assertEquals("abc", jsonReader.readPattern());
             assertEquals(JSONReader.EOI, jsonReader.ch);
             assertFalse(jsonReader.comma);
         }
         for (JSONReader jsonReader : TestUtils.createJSONReaders4("1 /abc/ , ")) {
-            jsonReader.next();
+            jsonReader.nextWithoutComment();
             assertEquals("abc", jsonReader.readPattern());
             assertEquals(JSONReader.EOI, jsonReader.ch);
             assertTrue(jsonReader.comma);
         }
 
         for (JSONReader jsonReader : TestUtils.createJSONReaders4("1 /abc/ , 1")) {
-            jsonReader.next();
+            jsonReader.nextWithoutComment();
             assertEquals("abc", jsonReader.readPattern());
             assertEquals('1', jsonReader.ch);
             assertTrue(jsonReader.comma);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -617,8 +617,10 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
             String key;
             if (entryKey == null) {
                 key = null;
+            } else if (entryKey instanceof String) {
+                key = (String) entryKey;
             } else {
-                key = entryKey.toString();
+                key = JSON.toJSONString(entryKey, jsonWriter.getContext());
             }
 
             if (refDetect) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -523,7 +523,6 @@ public void writeStringLatin1(byte[] value) {
     }
 
     static boolean containsEscaped(long data, long quote) {
-        // c == quote || c == '\\' || c < ' '
         /*
           for (int i = 0; i < 8; ++i) {
             byte c = (byte) data;

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/jjb/ClientsWriteUTF8BytesTest.java
Patch:
@@ -98,8 +98,8 @@ public static void jackson() throws Exception {
     }
 
     public static void main(String[] args) throws Exception {
-//        fastjson2();
-        wast();
+        fastjson2();
+//        wast();
 //        jsonb();
 //        jsonb_beanToArray();
 //        fastjson2_str();

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/jjb/ClientsParseUTF8BytesTest.java
Patch:
@@ -13,7 +13,7 @@ public static void fastjson2() {
             }
             long millis = System.currentTimeMillis() - start;
             System.out.println("fastjson2 millis : " + millis);
-            // zulu17.40.19 : 2417
+            // zulu17.40.19 : 2417 2236 2139 1985
             // oracle-jdk-17.0.6 :
             // oracle-jdk-17.0.6_vec :
             // oracle-jdk-17.0.6_reflect : 3566 3513 3476

File: core/src/test/java/com/alibaba/fastjson2/DoubleTest.java
Patch:
@@ -213,6 +213,8 @@ public void test_str_value() {
 
     @Test
     public void test_str_array2() {
+//        assertEquals(0.0, JSON.parseObject("0.0", Double.class));
+        assertEquals(-2.147483648E9, JSON.parseObject("-2.147483648E9", Double.class));
         double[] primitiveValues = new double[values.length];
         for (int i = 0; i < values.length; i++) {
             if (values[i] == null) {

File: core/src/test/java/com/alibaba/fastjson2/issues_1800/Issue1821.java
Patch:
@@ -49,7 +49,7 @@ public void test() {
                         new TypeReference<List<Float>>() {})
         );
         assertThrows(
-                NumberFormatException.class, () -> JSON.parseObject(
+                JSONException.class, () -> JSON.parseObject(
                         str0,
                         new TypeReference<List<Double>>() {})
         );
@@ -150,7 +150,7 @@ public void test() {
                         new TypeReference<List<Float>>() {})
         );
         assertThrows(
-                NumberFormatException.class, () -> JSON.parseObject(
+                JSONException.class, () -> JSON.parseObject(
                         str2,
                         new TypeReference<List<Double>>() {})
         );

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -265,7 +265,7 @@ public <T> ObjectReader<T> createObjectReader(
                 }
 
                 Class fieldClass = fieldReader.fieldClass;
-                if (!Modifier.isPublic(fieldClass.getModifiers())) {
+                if (fieldClass != null && !Modifier.isPublic(fieldClass.getModifiers())) {
                     match = false;
                     break;
                 }

File: core/src/test/java/com/alibaba/fastjson2/issues_1500/Issue1543_1544.java
Patch:
@@ -19,7 +19,7 @@ public void testMap() {
             JSON.toJSONString(map);
         } catch (Exception e) {
             assertTrue(e instanceof JSONException);
-            assertEquals("level too large : 2048", e.getMessage());
+            assertEquals("level too large : 2049", e.getMessage());
         }
     }
 
@@ -30,8 +30,9 @@ public void testList() {
         try {
             JSON.toJSONString(list);
         } catch (Exception e) {
+            e.printStackTrace();
             assertTrue(e instanceof JSONException);
-            assertEquals("level too large : 2048", e.getMessage());
+            assertEquals("level too large : 2049", e.getMessage());
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -175,6 +175,9 @@ protected FieldWriter creteFieldWriter(
                 }
             }
         }
+        if (fieldInfo.ordinal == 0 && fieldName.equals(beanInfo.typeKey)) {
+            fieldInfo.ordinal = -1;
+        }
 
         if (beanInfo.includes != null && beanInfo.includes.length > 0) {
             boolean match = false;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -878,7 +878,7 @@ public final void writeString(final char[] chars, int stroff, int strlen) {
     }
 
     protected final void writeStringEscaped(byte[] values) {
-        int minCapacity = off + values.length * 4 + 2;
+        int minCapacity = off + values.length * 6 + 2;
         if (minCapacity >= this.bytes.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -878,7 +878,7 @@ public final void writeString(final char[] chars, int stroff, int strlen) {
     }
 
     protected final void writeStringEscaped(byte[] values) {
-        int minCapacity = off + values.length * 4 + 2;
+        int minCapacity = off + values.length * 6 + 2;
         if (minCapacity >= this.bytes.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVWriterUTF16.java
Patch:
@@ -114,7 +114,7 @@ public void writeString(final String str) {
                 char ch = str.charAt(i);
                 if (ch == ',') {
                     comma = true;
-                } else if (ch == '"') {
+                } else if (ch == '"' || ch == '\n' || ch == '\r') {
                     escapeCount++;
                 }
             }
@@ -123,7 +123,7 @@ public void writeString(final String str) {
             }
         }
 
-        if (escapeCount == 0) {
+        if (escapeCount == 0 && !comma) {
             if (len + off >= chars.length) {
                 flush();
                 if (len > chars.length) {

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVWriterUTF8.java
Patch:
@@ -160,7 +160,7 @@ public void writeString(byte[] utf8) {
             for (byte ch : utf8) {
                 if (ch == ',') {
                     comma = true;
-                } else if (ch == '"') {
+                } else if (ch == '"' || ch == '\n' || ch == '\r') {
                     escapeCount++;
                 }
             }
@@ -169,7 +169,7 @@ public void writeString(byte[] utf8) {
             }
         }
 
-        if (escapeCount == 0) {
+        if (escapeCount == 0 && !comma) {
             writeRaw(utf8);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -726,6 +726,9 @@ private void applyFeatures(FieldInfo fieldInfo, Enum[] features) {
                     case "WriteBigDecimalAsPlain":
                         fieldInfo.features |= JSONWriter.Feature.WriteBigDecimalAsPlain.mask;
                         break;
+                    case "DisableCircularReferenceDetect":
+                        fieldInfo.features |= FieldInfo.DISABLE_REFERENCE_DETECT;
+                        break;
                     default:
                         break;
                 }

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegment.java
Patch:
@@ -1285,10 +1285,7 @@ public void accept(JSONReader jsonReader, JSONPath.Context context) {
                     context.value = values;
                 }
                 context.eval = true;
-                return;
             }
-
-            throw new JSONException("TODO");
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -3859,7 +3859,9 @@ static Object toJSON(Object object, JSONWriter.Feature... features) {
                 JSONFactory.createWriteContext() : JSONFactory.createWriteContext(features);
         Class<?> valueClass = object.getClass();
         ObjectWriter<?> objectWriter = writeContext.getObjectWriter(valueClass, valueClass);
-        if (objectWriter instanceof ObjectWriterAdapter && !writeContext.isEnabled(JSONWriter.Feature.ReferenceDetection)) {
+        if (objectWriter instanceof ObjectWriterAdapter
+                && !writeContext.isEnabled(JSONWriter.Feature.ReferenceDetection)
+                && (objectWriter.getFeatures() & JSONWriter.Feature.WriteClassName.mask) == 0) {
             ObjectWriterAdapter objectWriterAdapter = (ObjectWriterAdapter) objectWriter;
             return objectWriterAdapter.toJSONObject(object, writeContext.features);
         }

File: extension-solon/src/test/java/com/alibaba/fastjson2/support/solon/test/config/test0/QuickConfigTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.noear.solon.test.SolonTest;
 
 import java.util.Date;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 /**
@@ -26,7 +26,7 @@ public class QuickConfigTest {
     public void hello2() throws Throwable {
         UserDo userDo = new UserDo();
 
-        Map<String, Object> data = new HashMap<>();
+        Map<String, Object> data = new LinkedHashMap<>();
         data.put("time", new Date(1673861993477L));
         data.put("long", 12L);
         data.put("int", 12);

File: extension-solon/src/test/java/com/alibaba/fastjson2/support/solon/test/config/test1/QuickConfigTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.noear.solon.test.SolonTest;
 
 import java.util.Date;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 /**
@@ -26,7 +26,7 @@ public class QuickConfigTest {
     public void hello2() throws Throwable {
         UserDo userDo = new UserDo();
 
-        Map<String, Object> data = new HashMap<>();
+        Map<String, Object> data = new LinkedHashMap<>();
         data.put("time", new Date(1673861993477L));
         data.put("long", 12L);
         data.put("int", 12);

File: extension-solon/src/test/java/com/alibaba/fastjson2/support/solon/test/config/test1/QuickConfigTest2.java
Patch:
@@ -10,7 +10,7 @@
 import org.noear.solon.test.SolonTest;
 
 import java.util.Date;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 /**
@@ -26,7 +26,7 @@ public class QuickConfigTest2 {
     public void hello2() throws Throwable {
         UserDo userDo = new UserDo();
 
-        Map<String, Object> data = new HashMap<>();
+        Map<String, Object> data = new LinkedHashMap<>();
         data.put("time", new Date(1673861993477L));
         data.put("long", 12L);
         data.put("int", 12);

File: extension-solon/src/test/java/com/alibaba/fastjson2/support/solon/test/config/test2/QuickConfigTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.noear.solon.test.SolonTest;
 
 import java.util.Date;
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -28,7 +27,7 @@ public class QuickConfigTest {
     public void hello2() throws Throwable {
         UserDo userDo = new UserDo();
 
-        Map<String, Object> data = new HashMap<>();
+        Map<String, Object> data = new LinkedHashMap<>();
         data.put("time", new Date(1673861993477L));
         data.put("long", 12L);
         data.put("int", 12);

File: codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/primitives/DateTypeTest.java
Patch:
@@ -4,11 +4,14 @@
 import com.alibaba.fastjson2.annotation.JSONCompiled;
 import org.junit.jupiter.api.Test;
 
+import java.util.TimeZone;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class DateTypeTest {
     @Test
     public void test() {
+        TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
         Bean bean = new Bean();
         bean.v01 = new java.util.Date();
         bean.v02 = java.util.Calendar.getInstance();

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/DateWrite.java
Patch:
@@ -78,7 +78,7 @@ public void formatYYYYMMDDHHMMSS19(Blackhole bh) throws Throwable {
     static String formatYYYYMMDDHHMMSS19(ZoneId zoneId, Date date) throws Throwable {
         long millis = date.getTime();
 
-        final int SECONDS_PER_DAY = 60 * 60 * 24;
+        final long SECONDS_PER_DAY = 60 * 60 * 24;
 
         long epochSecond = Math.floorDiv(millis, 1000L);
         int offsetTotalSeconds;
@@ -90,8 +90,8 @@ static String formatYYYYMMDDHHMMSS19(ZoneId zoneId, Date date) throws Throwable
         }
 
         long localSecond = epochSecond + offsetTotalSeconds;
-        long localEpochDay = Math.floorDiv(localSecond, (long) SECONDS_PER_DAY);
-        int secsOfDay = (int) Math.floorMod(localSecond, (long) SECONDS_PER_DAY);
+        long localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);
+        int secsOfDay = (int) Math.floorMod(localSecond, SECONDS_PER_DAY);
         int year, month, dayOfMonth;
         {
             final int DAYS_PER_CYCLE = 146097;

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVWriter.java
Patch:
@@ -226,7 +226,7 @@ public void writeBigInteger(BigInteger value) {
     public final void writeDate(long millis) {
         ZoneId zoneId = this.zoneId;
 
-        final int SECONDS_PER_DAY = 60 * 60 * 24;
+        final long SECONDS_PER_DAY = 60 * 60 * 24;
         long epochSecond = Math.floorDiv(millis, 1000L);
         int offsetTotalSeconds;
         if (zoneId == DateUtils.SHANGHAI_ZONE_ID || zoneId.getRules() == DateUtils.SHANGHAI_ZONE_RULES) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -707,7 +707,7 @@ public void writeDate(JSONWriter jsonWriter, boolean writeFieldName, long millis
             return;
         }
 
-        final int SECONDS_PER_DAY = 60 * 60 * 24;
+        final long SECONDS_PER_DAY = 60 * 60 * 24;
 
         JSONWriter.Context ctx = jsonWriter.context;
         if (isDateFormatMillis() || ctx.isDateFormatMillis()) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -121,7 +121,7 @@ public void writeDate(JSONWriter jsonWriter, long timeMillis) {
             return;
         }
 
-        final int SECONDS_PER_DAY = 60 * 60 * 24;
+        final long SECONDS_PER_DAY = 60 * 60 * 24;
 
         JSONWriter.Context ctx = jsonWriter.context;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDate.java
Patch:
@@ -111,7 +111,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         if (dateFormat == null) {
-            final int SECONDS_PER_DAY = 60 * 60 * 24;
+            final long SECONDS_PER_DAY = 60 * 60 * 24;
 
             long epochSecond = Math.floorDiv(millis, 1000L);
             int offsetTotalSeconds;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInstant.java
Patch:
@@ -43,7 +43,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         boolean yyyyMMddhhmmss19 = this.yyyyMMddhhmmss19 || (context.isFormatyyyyMMddhhmmss19() && this.format == null);
         if (yyyyMMddhhmmss14 || yyyyMMddhhmmss19 || yyyyMMdd8 || yyyyMMdd10) {
-            final int SECONDS_PER_DAY = 60 * 60 * 24;
+            final long SECONDS_PER_DAY = 60 * 60 * 24;
             ZoneId zoneId = context.getZoneId();
             long epochSecond = instant.getEpochSecond();
             int offsetTotalSeconds;

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -984,7 +984,6 @@ public byte[] toJSONBBytes(JSONWriter.Feature... features) {
      * @param type specify the {@link Type} to be converted
      * @since 2.0.4
      */
-    @SuppressWarnings("unchecked")
     public <T> T to(Type type) {
         return to(type, 0L);
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONBDump.java
Patch:
@@ -15,7 +15,6 @@
 import static com.alibaba.fastjson2.JSONB.Constants.*;
 import static com.alibaba.fastjson2.JSONB.typeName;
 import static com.alibaba.fastjson2.util.JDKUtils.*;
-import static com.alibaba.fastjson2.util.JDKUtils.BIG_ENDIAN;
 
 final class JSONBDump {
     static Charset GB18030;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderLocalDateTime.java
Patch:
@@ -59,7 +59,7 @@ public boolean supportAcceptType(Class valueClass) {
     @Override
     public void readFieldValue(JSONReader jsonReader, Object object) {
         // 若使用的是JSONReaderJSONB则使用JSONReaderJSONB定义的时间反序列化方法
-        LocalDateTime date = null;
+        LocalDateTime date;
         if (jsonReader.jsonb) {
             date = (LocalDateTime) dateReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
         } else {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapField.java
Patch:
@@ -68,7 +68,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     array,
                     arrayToMapKey,
                     namingStrategy,
-                    JSONFactory.getObjectReader(valueType, this.features | features),
+                    JSONFactory.getObjectReader(valueType, features),
                     arrayToMapDuplicateHandler);
             accept(object, map);
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -133,7 +133,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     array,
                     arrayToMapKey,
                     namingStrategy,
-                    JSONFactory.getObjectReader(valueType, this.features | features),
+                    JSONFactory.getObjectReader(valueType, features),
                     arrayToMapDuplicateHandler);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapMethod.java
Patch:
@@ -70,7 +70,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     array,
                     arrayToMapKey,
                     namingStrategy,
-                    JSONFactory.getObjectReader(valueType, this.features | features),
+                    JSONFactory.getObjectReader(valueType, features),
                     arrayToMapDuplicateHandler);
             accept(object, map);
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapMethodReadOnly.java
Patch:
@@ -118,7 +118,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     array,
                     arrayToMapKey,
                     namingStrategy,
-                    JSONFactory.getObjectReader(valueType, this.features | features),
+                    JSONFactory.getObjectReader(valueType, features),
                     arrayToMapDuplicateHandler);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderNumberFunc.java
Patch:
@@ -34,7 +34,7 @@ public void accept(T object, Object value) {
         }
 
         if (value instanceof Boolean) {
-            value = ((Boolean) value).booleanValue() ? 1 : 0;
+            value = (Boolean) value ? 1 : 0;
         }
 
         function.accept(object, (V) value);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -436,7 +436,7 @@ protected final FieldReader getFieldReaderUL(long hashCode, JSONReader jsonReade
         if (fieldReader == null
                 && jsonReader.isSupportSmartMatch(this.features | features)) {
             long hashCodeL = jsonReader.getNameHashCodeLCase();
-            fieldReader = getFieldReaderLCase(hashCodeL == hashCode ? hashCode : hashCodeL);
+            fieldReader = getFieldReaderLCase(hashCodeL);
         }
         return fieldReader;
     }
@@ -446,7 +446,7 @@ protected final void readFieldValue(long hashCode, JSONReader jsonReader, long f
         if (fieldReader == null
                 && jsonReader.isSupportSmartMatch(this.features | features)) {
             long hashCodeL = jsonReader.getNameHashCodeLCase();
-            fieldReader = getFieldReaderLCase(hashCodeL == hashCode ? hashCode : hashCodeL);
+            fieldReader = getFieldReaderLCase(hashCodeL);
         }
 
         if (fieldReader != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -562,8 +562,7 @@ void getBeanInfo1x(BeanInfo beanInfo, Annotation annotation) {
             });
         }
 
-        private void processBuilder(BeanInfo beanInfo, Class result) {
-            Class<?> builderClass = result;
+        private void processBuilder(BeanInfo beanInfo, Class builderClass) {
             if (builderClass != void.class && builderClass != Void.class) {
                 beanInfo.builder = builderClass;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -16,7 +16,6 @@ public final class ObjectReaderImplListStr
         implements ObjectReader {
     final Class listType;
     final Class instanceType;
-    Object listSingleton;
 
     public ObjectReaderImplListStr(Class listType, Class instanceType) {
         this.listType = listType;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -44,7 +44,7 @@ public static ObjectReader of(Type fieldType, Class mapType, long features) {
         Function builder = null;
         Class instanceType = mapType;
 
-        if ("".equals(instanceType.getSimpleName())) {
+        if (instanceType.getSimpleName().isEmpty()) {
             instanceType = mapType.getSuperclass();
             if (fieldType == null) {
                 fieldType = mapType.getGenericSuperclass();

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVWriter.java
Patch:
@@ -237,8 +237,8 @@ public final void writeDate(long millis) {
         }
 
         long localSecond = epochSecond + offsetTotalSeconds;
-        long localEpochDay = Math.floorDiv(localSecond, (long) SECONDS_PER_DAY);
-        int secsOfDay = (int) Math.floorMod(localSecond, (long) SECONDS_PER_DAY);
+        long localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);
+        int secsOfDay = (int) Math.floorMod(localSecond, SECONDS_PER_DAY);
         int year, month, dayOfMonth;
         {
             final int DAYS_PER_CYCLE = 146097;

File: core/src/main/java/com/alibaba/fastjson2/util/FDBigInteger.java
Patch:
@@ -267,14 +267,13 @@ public FDBigInteger leftShift(int shift) {
                     int prev = data[idx];
                     int hi = prev >>> anticount;
                     int[] result = data;
-                    int[] src = data;
                     if (hi != 0) {
                         if (nWords == data.length) {
                             this.data = result = new int[nWords + 1];
                         }
                         result[nWords++] = hi;
                     }
-                    leftShift(src, idx, result, bitcount, anticount, prev);
+                    leftShift(data, idx, result, bitcount, anticount, prev);
                 }
             }
             this.nWords = nWords;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -729,8 +729,8 @@ public void writeDate(JSONWriter jsonWriter, boolean writeFieldName, long millis
                     .getOffset(instant);
 
             long localSecond = epochSecond + offset.getTotalSeconds();
-            long localEpochDay = Math.floorDiv(localSecond, (long) SECONDS_PER_DAY);
-            int secsOfDay = (int) Math.floorMod(localSecond, (long) SECONDS_PER_DAY);
+            long localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);
+            int secsOfDay = (int) Math.floorMod(localSecond, SECONDS_PER_DAY);
             int year, month, dayOfMonth;
             {
                 final int DAYS_PER_CYCLE = 146097;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -154,8 +154,8 @@ public void writeDate(JSONWriter jsonWriter, long timeMillis) {
             }
 
             long localSecond = epochSecond + offsetTotalSeconds;
-            long localEpochDay = Math.floorDiv(localSecond, (long) SECONDS_PER_DAY);
-            int secsOfDay = (int) Math.floorMod(localSecond, (long) SECONDS_PER_DAY);
+            long localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);
+            int secsOfDay = (int) Math.floorMod(localSecond, SECONDS_PER_DAY);
             int year, month, dayOfMonth;
             {
                 final int DAYS_PER_CYCLE = 146097;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -1088,7 +1088,7 @@ private void gwListJSONB(
         int REF_PATH = mwc.var("REF_PATH");
 
         boolean listSimple = false;
-        Type itemType = null;
+        Type itemType;
         Class itemClass = null;
         if (fieldType instanceof ParameterizedType) {
             ParameterizedType parameterizedType = (ParameterizedType) fieldType;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDate.java
Patch:
@@ -123,8 +123,8 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             }
 
             long localSecond = epochSecond + offsetTotalSeconds;
-            long localEpochDay = Math.floorDiv(localSecond, (long) SECONDS_PER_DAY);
-            int secsOfDay = (int) Math.floorMod(localSecond, (long) SECONDS_PER_DAY);
+            long localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);
+            int secsOfDay = (int) Math.floorMod(localSecond, SECONDS_PER_DAY);
             int year, month, dayOfMonth;
             {
                 final int DAYS_PER_CYCLE = 146097;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDouble.java
Patch:
@@ -22,7 +22,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             return;
         }
 
-        double value = ((Double) object).doubleValue();
+        double value = (Double) object;
         if ((features & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0) {
             jsonWriter.writeString(value);
         } else {
@@ -51,7 +51,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             return;
         }
 
-        double value = ((Double) object).doubleValue();
+        double value = (Double) object;
         if ((features & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0) {
             jsonWriter.writeString(value);
             return;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplFloat.java
Patch:
@@ -22,7 +22,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             return;
         }
 
-        float value = ((Float) object).floatValue();
+        float value = (Float) object;
         if ((features & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0) {
             jsonWriter.writeString(value);
         } else {
@@ -43,7 +43,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             return;
         }
 
-        float value = ((Float) object).floatValue();
+        float value = (Float) object;
         if ((features & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0) {
             jsonWriter.writeString(value);
             return;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInstant.java
Patch:
@@ -54,8 +54,8 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             }
 
             long localSecond = epochSecond + offsetTotalSeconds;
-            long localEpochDay = Math.floorDiv(localSecond, (long) SECONDS_PER_DAY);
-            int secsOfDay = (int) Math.floorMod(localSecond, (long) SECONDS_PER_DAY);
+            long localEpochDay = Math.floorDiv(localSecond, SECONDS_PER_DAY);
+            int secsOfDay = (int) Math.floorMod(localSecond, SECONDS_PER_DAY);
             int year, month, dayOfMonth;
             {
                 final int DAYS_PER_CYCLE = 146097;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64Array.java
Patch:
@@ -42,7 +42,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 continue;
             }
 
-            long longValue = item.longValue();
+            long longValue = item;
             if (writeAsString) {
                 jsonWriter.writeString(longValue);
             } else {
@@ -74,7 +74,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
                 continue;
             }
 
-            long longValue = item.longValue();
+            long longValue = item;
             if (writeAsString) {
                 jsonWriter.writeString(longValue);
             } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplList.java
Patch:
@@ -376,9 +376,8 @@ private List getList(Object object) {
         } else if (object instanceof Iterable) {
             final Iterable items = (Iterable) object;
             List list = items instanceof Collection ? new ArrayList(((Collection<?>) items).size()) : new ArrayList();
-            Iterator iterator = items.iterator();
-            while (iterator.hasNext()) {
-                list.add(iterator.next());
+            for (Object item : items) {
+                list.add(item);
             }
             return list;
         } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -619,9 +619,8 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
                 key = entryKey.toString();
             }
 
-            String refPath = null;
             if (refDetect) {
-                refPath = jsonWriter.setPath(key, value);
+                String refPath = jsonWriter.setPath(key, value);
                 if (refPath != null) {
                     jsonWriter.writeName(key);
                     jsonWriter.writeColon();

File: core/src/test/java/com/alibaba/fastjson2/dubbo/DubboTest4.java
Patch:
@@ -221,8 +221,8 @@ public void test6() {
         byte[] jsonbBytes = JSONB.toBytes(ex, writerFeatures);
         UncheckedIOException ex1 = (UncheckedIOException) JSONB.parseObject(jsonbBytes, Object.class, readerFeatures);
 
-        assertEquals(ex.getMessage(), ex1.getMessage());
-        assertEquals(ex.getCause().getMessage(), ex1.getCause().getMessage());
+        assertNull(ex.getMessage(), "Expected original message to be null");
+        assertEquals(ex.getCause() != null ? ex.getCause().getMessage() : null, ex1.getCause() != null ? ex1.getCause().getMessage() : null);
     }
 
     @Test

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentName.java
Patch:
@@ -378,7 +378,7 @@ public void set(JSONPath.Context context, Object value) {
                 ObjectReader objectReader = provider.getObjectReader(item.getClass());
                 FieldReader fieldReader = objectReader.getFieldReader(nameHashCode);
                 if (fieldReader != null) {
-                    fieldReader.accept(item, null);
+                    fieldReader.accept(item, value);
                 }
             }
             return;

File: test-jdk17/src/test/java/com/alibaba/fastjson2/issues/Issue3104.java
Patch:
@@ -26,6 +26,6 @@ public void test() {
         String json = JSON.toJSONString(new Transform("zhangsan", "lisi"));
         assertEquals("{\"bridge\":{\"from\":\"zhangsan\",\"to\":\"lisi\"}}", json);
         Transform transform = JSON.parseObject(json, Transform.class);
-        System.out.println(transform);
+        assertEquals(json, JSON.toJSONString(transform));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/codec/FieldInfo.java
Patch:
@@ -21,6 +21,7 @@ public class FieldInfo {
     public static final long DISABLE_AUTO_TYPE = 1L << 59;
     public static final long DISABLE_JSONB = 1L << 60;
     public static final long BACKR_EFERENCE = 1L << 61;
+    public static final long RECORD = 1L << 62;
 
     public String fieldName;
     public String format;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -927,7 +927,9 @@ public <T> FieldWriter<T> createFieldWriter(
             fieldName = BeanUtils.getterName(method, false, null);
         }
 
-        Field field = BeanUtils.getField(objectType, method);
+        Field field = (features & FieldInfo.RECORD) != 0
+                ? null
+                : BeanUtils.getField(objectType, method);
 
         if (fieldClass == boolean.class || fieldClass == Boolean.class) {
             return new FieldWriterBoolMethod(fieldName, ordinal, features, format, label, field, method, fieldClass);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -179,7 +179,8 @@ public ObjectWriter createObjectWriter(
             beanFeatures &= ~JSONWriter.Feature.WriteClassName.mask;
         }
 
-        long writerFieldFeatures = features | beanFeatures;
+        boolean record = BeanUtils.isRecord(objectClass);
+        long writerFieldFeatures = features | beanFeatures | (record ? FieldInfo.RECORD : 0);
         final boolean fieldBased = ((writerFieldFeatures & JSONWriter.Feature.FieldBased.mask) != 0 && !objectClass.isInterface())
                 || !beanInfo.alphabetic;
 
@@ -190,8 +191,6 @@ public ObjectWriter createObjectWriter(
             return super.createObjectWriter(objectClass, features, provider);
         }
 
-        boolean record = BeanUtils.isRecord(objectClass);
-
         List<FieldWriter> fieldWriters;
         Map<String, FieldWriter> fieldWriterMap = new LinkedHashMap<>();
         if (!fieldBased || record) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -3032,7 +3032,9 @@ private <T> int genReadFieldValue(
 
             if (list) {
                 Class itemClass = TypeUtils.getMapping(itemType);
-                if (itemClass != null && Collection.class.isAssignableFrom(itemClass)) {
+                if (itemClass != null
+                        && (Collection.class.isAssignableFrom(itemClass) || !Modifier.isPublic(itemClass.getModifiers()))
+                ) {
                     list = false;
                 }
             }

File: core/src/test/java/com/alibaba/fastjson2/issues_2600/Issue2672.java
Patch:
@@ -5,17 +5,17 @@
 import com.alibaba.fastjson2.filter.PropertyPreFilter;
 import org.junit.jupiter.api.Test;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Issue2672 {
     @Test
     public void test() {
-        Map<String, Object> map = new HashMap<>();
-        map.put("k", "v");
+        Map<String, Object> map = new LinkedHashMap<>();
         map.put("selfRef", map);
+        map.put("k", "v");
         assertEquals("{\"selfRef\":{\"$ref\":\"..\"},\"k\":\"v\"}",
                 JSON.toJSONString(map, JSONWriter.Feature.ReferenceDetection));
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONPath.java
Patch:
@@ -106,6 +106,9 @@ public static boolean remove(Object root, String path) {
     }
 
     public static boolean contains(Object rootObject, String path) {
+        if (rootObject == null) {
+            return false;
+        }
         com.alibaba.fastjson2.JSONPath jsonPath = com.alibaba.fastjson2.JSONPath.of(path);
         return jsonPath.contains(rootObject);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -180,7 +180,8 @@ public ObjectWriter createObjectWriter(
         }
 
         long writerFieldFeatures = features | beanFeatures;
-        final boolean fieldBased = (writerFieldFeatures & JSONWriter.Feature.FieldBased.mask) != 0 && !objectClass.isInterface();
+        final boolean fieldBased = ((writerFieldFeatures & JSONWriter.Feature.FieldBased.mask) != 0 && !objectClass.isInterface())
+                || !beanInfo.alphabetic;
 
         if (Throwable.class.isAssignableFrom(objectClass)
                 || BeanUtils.isExtendedMap(objectClass)

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -65,7 +65,8 @@ public void accept(T object, Object value) {
         if ("java.util.Collections$UnmodifiableRandomAccessList".equals(name)
                 || "java.util.Arrays$ArrayList".equals(name)
                 || "java.util.Collections$SingletonList".equals(name)
-                || name.startsWith("java.util.ImmutableCollections$")) {
+                || name.startsWith("java.util.ImmutableCollections$")
+                || name.startsWith("java.util.Collections$Unmodifiable")) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -360,7 +360,7 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
 
                 Object fieldValue = valueMap.get(fieldReader.fieldNameHash);
                 if (fieldValue != null) {
-                    if (paramReader != null) {
+                    if (paramReader != null && (paramReader.fieldName == null || fieldReader.fieldName == null || !paramReader.fieldName.equals(fieldReader.fieldName))) {
                         continue;
                     }
                     fieldReader.accept(object, fieldValue);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -2446,6 +2446,7 @@ public void skipValue() {
             case BC_TIMESTAMP_MINUTES:
             case BC_FLOAT:
             case BC_INT64_INT:
+            case BC_LOCAL_DATE:
                 offset += 4;
                 return;
             case BC_FLOAT_INT:

File: core/src/test/java/com/alibaba/fastjson2/JSONTest.java
Patch:
@@ -1209,6 +1209,7 @@ public void isValid1() {
         assertFalse(JSON.isValid("{", JSONReader.Feature.AllowUnQuotedFieldNames));
         assertFalse(JSON.isValid("\"", JSONReader.Feature.AllowUnQuotedFieldNames));
         assertFalse(JSON.isValid("'", JSONReader.Feature.AllowUnQuotedFieldNames));
+        assertFalse(JSON.isValid("'", JSONReader.Feature.DisableSingleQuote));
     }
 
     @Test

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2265,6 +2265,9 @@ public Map<String, Object> readObject() {
                     name = getNumber();
                 } else {
                     name = readFieldNameUnquote();
+                    if (name == null || name.equals("")) {
+                        throw new JSONException(info("illegal input"));
+                    }
                 }
                 nextIfMatch(':');
             }

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -1125,6 +1125,7 @@ private static boolean isJSONField(AnnotatedElement element) {
                 case "com.fasterxml.jackson.annotation.JsonValue":
                 case "com.fasterxml.jackson.annotation.JsonRawValue":
                 case "com.fasterxml.jackson.annotation.JsonProperty":
+                case "com.fasterxml.jackson.annotation.JsonUnwrapped":
                     if (JSONFactory.isUseJacksonAnnotation()) {
                         return true;
                     }

File: core/src/test/java/com/alibaba/fastjson2/issues_2800/Issue2851.java
Patch:
@@ -11,7 +11,6 @@
 public class Issue2851 {
     @Test
     public void test() {
-
         List<String> list = Arrays.asList("").subList(0, 1);
         byte[] bytes = JSONB.toBytes(list, JSONWriter.Feature.WriteClassName);
         JSONReader.AutoTypeBeforeHandler autoTypeFilter = JSONReader.autoTypeFilter("java.util.");

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -174,6 +174,7 @@ public static ObjectReader of(Type type, Class listClass, long features) {
                     instanceClass = TreeSet.class;
                     builder = (Function<NavigableSet, NavigableSet>) Collections::synchronizedNavigableSet;
                     break;
+                case "java.util.RandomAccessSubList":
                 case "java.util.AbstractList$RandomAccessSubList":
                     instanceClass = ArrayList.class;
                     break;

File: core/src/test/java/com/alibaba/fastjson2/issues_2800/Issue2851.java
Patch:
@@ -11,9 +11,10 @@
 public class Issue2851 {
     @Test
     public void test() {
+
         List<String> list = Arrays.asList("").subList(0, 1);
         byte[] bytes = JSONB.toBytes(list, JSONWriter.Feature.WriteClassName);
-        JSONReader.AutoTypeBeforeHandler autoTypeFilter = JSONReader.autoTypeFilter("java.util.AbstractList");
+        JSONReader.AutoTypeBeforeHandler autoTypeFilter = JSONReader.autoTypeFilter("java.util.");
         JSONReader.Context context = JSONFactory.createReadContext();
         context.config(autoTypeFilter);
         List<String> parsed = (List<String>) JSONB.parse(bytes, context);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -174,6 +174,9 @@ public static ObjectReader of(Type type, Class listClass, long features) {
                     instanceClass = TreeSet.class;
                     builder = (Function<NavigableSet, NavigableSet>) Collections::synchronizedNavigableSet;
                     break;
+                case "java.util.AbstractList$RandomAccessSubList":
+                    instanceClass = ArrayList.class;
+                    break;
                 default:
                     instanceClass = listClass;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -2432,6 +2432,8 @@ public void skipValue() {
             case BC_STR_ASCII_FIX_0:
             case BC_FALSE:
             case BC_TRUE:
+            case BC_DOUBLE_NUM_0:
+            case BC_DOUBLE_NUM_1:
                 return;
             case BC_INT8:
                 offset++;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/SqlTimestampTest.java
Patch:
@@ -15,6 +15,7 @@ public class SqlTimestampTest {
     public void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
         JSON.defaultLocale = Locale.CHINA;
+        TimeZone.setDefault(JSON.defaultTimeZone);
     }
 
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest11_reader.java
Patch:
@@ -21,6 +21,7 @@ public class DateFieldTest11_reader {
     protected void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
         JSON.defaultLocale = Locale.CHINA;
+        TimeZone.setDefault(JSON.defaultTimeZone);
     }
 
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest9.java
Patch:
@@ -15,6 +15,7 @@ public class DateFieldTest9 {
     protected void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
         JSON.defaultLocale = Locale.CHINA;
+        TimeZone.setDefault(JSON.defaultTimeZone);
     }
 
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_tz.java
Patch:
@@ -17,6 +17,7 @@ public class DateTest_tz {
     protected void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
         JSON.defaultLocale = Locale.CHINA;
+        TimeZone.setDefault(JSON.defaultTimeZone);
     }
 
     @Test

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -1339,6 +1339,8 @@ public static Field getField(Class objectClass, Method method) {
                     } else if (fieldName.regionMatches(0, methodName, prefix, fieldNameLength)) {
                         fields[1] = field;
                     }
+                } else if (boolean.class == field.getType() && methodName.equals(fieldName)) {
+                    fields[0] = field;
                 }
             });
         }

File: core/src/main/moditect/module-info.java
Patch:
@@ -1,7 +1,6 @@
 // https://www.oracle.com/corporate/features/understanding-java-9-modules.html
 
 open module com.alibaba.fastjson2 {
-    requires transitive fastjson;
     requires transitive jdk.unsupported;
     requires java.management;
 

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -46,6 +46,7 @@ public class BeanInfo {
     public String objectWriterFieldName;
     public String objectReaderFieldName;
     public Class<? extends JSONReader.AutoTypeBeforeHandler> autoTypeBeforeHandler;
+    public String rootName;
 
     public BeanInfo() {
         if (JSONFactory.isDisableAutoType()) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -184,6 +184,7 @@ public ObjectWriter createObjectWriter(
 
         if (Throwable.class.isAssignableFrom(objectClass)
                 || BeanUtils.isExtendedMap(objectClass)
+                || beanInfo.rootName != null
         ) {
             return super.createObjectWriter(objectClass, features, provider);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -4319,6 +4319,7 @@ public void setDateFormat(String format) {
                         hasDay = true;
                         hasHour = true;
                         break;
+                    case "yyyyMMdd":
                     case "yyyy-MM-dd":
                         formatyyyyMMdd8 = true;
                         hasDay = true;

File: core/src/test/java/com/alibaba/fastjson2/issues_2100/Issue2175/Index.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.issues_2100;
+package com.alibaba.fastjson2.issues_2100.Issue2175;
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONReader;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4070,17 +4070,17 @@ public final void readNumber0() {
         if (ch == 'L' || ch == 'F' || ch == 'D' || ch == 'B' || ch == 'S') {
             switch (ch) {
                 case 'B':
-                    if (!intOverflow) {
+                    if (!intOverflow && valueType != JSON_TYPE_DEC) {
                         valueType = JSON_TYPE_INT8;
                     }
                     break;
                 case 'S':
-                    if (!intOverflow) {
+                    if (!intOverflow && valueType != JSON_TYPE_DEC) {
                         valueType = JSON_TYPE_INT16;
                     }
                     break;
                 case 'L':
-                    if (offset - start < 19) {
+                    if (offset - start < 19 && valueType != JSON_TYPE_DEC) {
                         valueType = JSON_TYPE_INT64;
                     }
                     break;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5535,17 +5535,17 @@ public final void readNumber0() {
         if (ch == 'L' || ch == 'F' || ch == 'D' || ch == 'B' || ch == 'S') {
             switch (ch) {
                 case 'B':
-                    if (!intOverflow) {
+                    if (!intOverflow && valueType != JSON_TYPE_DEC) {
                         valueType = JSON_TYPE_INT8;
                     }
                     break;
                 case 'S':
-                    if (!intOverflow) {
+                    if (!intOverflow && valueType != JSON_TYPE_DEC) {
                         valueType = JSON_TYPE_INT16;
                     }
                     break;
                 case 'L':
-                    if (offset - start < 19) {
+                    if (offset - start < 19 && valueType != JSON_TYPE_DEC) {
                         valueType = JSON_TYPE_INT64;
                     }
                     break;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/v2issues/Issue2640.java
Patch:
@@ -5,7 +5,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-public class IssueIssue2640 {
+public class Issue2640 {
     @Test
     public void test() {
         Object val = "#";

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -1482,10 +1482,10 @@ public static <T> T cast(Object obj, Class<T> targetClass, ObjectReaderProvider
                 if (obj instanceof Integer) {
                     int intValue = (Integer) obj;
                     return (T) ((ObjectReaderImplEnum) objectReader).of(intValue);
-                } else {
-                    JSONReader jsonReader = JSONReader.of(JSON.toJSONString(obj));
-                    return (T) objectReader.readObject(jsonReader, null, null, 0);
                 }
+            } else {
+                JSONReader jsonReader = JSONReader.of(JSON.toJSONString(obj));
+                return (T) objectReader.readObject(jsonReader, targetClass, null, 0);
             }
         }
 

File: core/src/test/java/com/alibaba/fastjson2/issues_2700/Issue2712.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.issues_2600;
+package com.alibaba.fastjson2.issues_2700;
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONWriter;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -2247,6 +2247,8 @@ private void gwFieldValueList(
             mw.visitVarInsn(Opcodes.ASTORE, REF_PATH);
             mw.visitJumpInsn(Opcodes.IFNULL, endDetect_);
 
+            gwFieldName(mwc, fieldWriter, i);
+
             mw.visitVarInsn(Opcodes.ALOAD, JSON_WRITER);
             mw.visitVarInsn(Opcodes.ALOAD, REF_PATH);
             mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_WRITER, "writeReference", METHOD_DESC_WRITE_REFERENCE, false);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -739,7 +739,7 @@ private static void isWriteTypeInfo(
             int FEILD_FEATURE,
             Label notWriteType
     ) {
-        if ((objectFeatures & JSONWriter.Feature.WriteClassName.mask) == 0) {
+        if ((objectFeatures & JSONWriter.Feature.WriteClassName.mask) == 0 || (objectFeatures & NotWriteRootClassName.mask) != 0) {
             mw.visitVarInsn(Opcodes.ALOAD, OBJECT);
             mw.visitJumpInsn(Opcodes.IFNULL, notWriteType);
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -127,7 +127,7 @@ public static ObjectReader of(Type fieldType, Class mapType, long features) {
         switch (instanceTypeName) {
             case "com.alibaba.fastjson.JSONObject":
                 builder = createObjectSupplier(instanceType);
-                instanceType = HashMap.class;
+//                instanceType = HashMap.class;//?为什么
                 break;
             case "com.google.common.collect.RegularImmutableMap":
                 builder = GuavaSupport.immutableMapConverter();

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/LiuchanTest.java
Patch:
@@ -11,7 +11,7 @@ public class LiuchanTest {
     @Test
     public void test4() {
         Object a = JSON.parseObject("{\"@type\":\"com.alibaba.fastjson.JSONObject\",\"success\":true}",
-                new TypeReference<Map<String, Object>>(){}//, Feature.DisableSpecialKeyDetect
+                new TypeReference<Map<String, Object>>(){}, Feature.SupportAutoType
         );
         assertEquals(com.alibaba.fastjson.JSONObject.class, a.getClass());
     }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONPath_2.java
Patch:
@@ -188,13 +188,14 @@ public void test_path_offset() {
                 + "                        6,\n"
                 + "                        7\n"
                 + "                    ]\n"
-                + "                },\n"
+                + "                }\n"
                 + "            ]\n"
-                + "        },\n"
+                + "        }\n"
                 + "    },\n"
                 + "    \"msg\":\"\",\n"
                 + "    \"status\":\"1\"\n"
                 + "}\n";
+        System.out.println(content);
         JSONPath path = JSONPath.of("$.status");
         assertEquals(path.extract(JSONReader.of(content)), "1");
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -441,7 +441,7 @@ protected void acceptAny(T object, Object fieldValue, long features) {
         }
 
         Object typedFieldValue;
-        if (fieldValue == null || fieldType == fieldValue.getClass()) {
+        if (fieldValue == null || fieldType == fieldValue.getClass() || fieldType == Object.class) {
             typedFieldValue = fieldValue;
         } else {
             if (fieldValue instanceof JSONObject) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -268,7 +268,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                         // ignored
                     }
                 }
-            } else if (intValues != null && jsonReader.isString()) {
+            } else if (intValues != null && jsonReader.isInt()) {
                 int intValue = jsonReader.readInt32Value();
                 for (int i = 0; i < intValues.length; i++) {
                     if (intValues[i] == intValue) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -624,6 +624,7 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
                 refPath = jsonWriter.setPath(key, value);
                 if (refPath != null) {
                     jsonWriter.writeName(key);
+                    jsonWriter.writeColon();
                     jsonWriter.writeReference(refPath);
                     jsonWriter.popPath(value);
                     continue;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -299,7 +299,7 @@ public Object createInstance(Collection collection, long features) {
                 if (itemObjectReader == null) {
                     itemObjectReader = provider.getObjectReader(itemType);
                 }
-                value = itemObjectReader.createInstance((JSONObject) value, features);
+                value = itemObjectReader.createInstance((Map) value, features);
             } else if (valueClass != itemType) {
                 Function typeConvert = provider.getTypeConvert(valueClass, itemType);
                 if (typeConvert != null) {

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSingle.java
Patch:
@@ -11,7 +11,9 @@ class JSONPathSingle
     JSONPathSingle(JSONPathSegment segment, String path, Feature... features) {
         super(path, features);
         this.segment = segment;
-        this.ref = segment instanceof JSONPathSegmentIndex || segment instanceof JSONPathSegmentName;
+        this.ref = segment instanceof JSONPathSegmentIndex
+                || segment instanceof JSONPathSegmentName
+                || segment instanceof JSONPathSegment.SelfSegment;
 
         boolean extractSupport = true;
         if (segment instanceof JSONPathSegment.EvalSegment) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -447,7 +447,7 @@ protected void acceptAny(T object, Object fieldValue, long features) {
                     String fieldValueJson = JSON.toJSONString(fieldValue);
                     typedFieldValue = initReader.readObject(JSONReader.of(fieldValueJson), fieldType, fieldName, features);
                 } else {
-                    typedFieldValue = TypeUtils.cast(fieldValue, fieldClass, provider);
+                    typedFieldValue = TypeUtils.cast(fieldValue, fieldType, provider);
                 }
             } else {
                 if (autoCast) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1035,7 +1035,9 @@ private void processJacksonJsonProperty(FieldInfo fieldInfo, Annotation annotati
                     switch (name) {
                         case "value": {
                             String value = (String) result;
-                            if (!value.isEmpty()) {
+                            if (!value.isEmpty()
+                                    && (fieldInfo.fieldName == null || fieldInfo.fieldName.isEmpty())
+                            ) {
                                 fieldInfo.fieldName = value;
                             }
                             break;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -548,7 +548,9 @@ private void processJacksonJsonProperty(FieldInfo fieldInfo, Annotation annotati
                     switch (name) {
                         case "value":
                             String value = (String) result;
-                            if (!value.isEmpty()) {
+                            if (!value.isEmpty()
+                                    && (fieldInfo.fieldName == null || fieldInfo.fieldName.isEmpty())
+                            ) {
                                 fieldInfo.fieldName = value;
                             }
                             break;

File: core/src/main/java/com/alibaba/fastjson2/codec/FieldInfo.java
Patch:
@@ -19,6 +19,7 @@ public class FieldInfo {
     public static final long DISABLE_ARRAY_MAPPING = 1L << 58;
     public static final long DISABLE_AUTO_TYPE = 1L << 59;
     public static final long DISABLE_JSONB = 1L << 60;
+    public static final long BACKR_EFERENCE = 1L << 61;
 
     public String fieldName;
     public String format;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -923,7 +923,6 @@ private void processAnnotation(FieldInfo fieldInfo, Annotation[] annotations) {
                         processJSONField1x(fieldInfo, annotation);
                         break;
                     case "com.fasterxml.jackson.annotation.JsonProperty":
-                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonProperty":
                         if (useJacksonAnnotation) {
                             processJacksonJsonProperty(fieldInfo, annotation);
                         }
@@ -939,7 +938,6 @@ private void processAnnotation(FieldInfo fieldInfo, Annotation[] annotations) {
                         }
                         break;
                     case "com.fasterxml.jackson.annotation.JsonAlias":
-                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonAlias":
                         if (useJacksonAnnotation) {
                             processJacksonJsonAlias(fieldInfo, annotation);
                         }

File: core/src/test/java/com/alibaba/fastjson2/WriterFeatureTest.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicIntegerArray;
 
+import static com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
 import static com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -48,12 +49,13 @@ public void test_0() {
         }
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void test_1() {
         JSONWriter.Feature[] values = JSONWriter.Feature.values();
         int bits = 0;
         for (int i = 0; i < values.length; i++) {
-            if (values[i] == WriteMapNullValue) {
+            if (values[i] == WriteMapNullValue || values[i] == NotWriteEmptyArray) {
                 continue;
             }
             assertEquals(1L << bits, values[i].mask);

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -1325,7 +1325,7 @@ public <T> T getObject(String key, Class<T> type, JSONReader.Feature... features
 
         if (value instanceof Collection) {
             ObjectReader<T> objectReader = provider.getObjectReader(type, fieldBased);
-            return objectReader.createInstance((Collection) value);
+            return objectReader.createInstance((Collection) value, features);
         }
 
         Class clazz = TypeUtils.getMapping(type);
@@ -1411,7 +1411,7 @@ public <T> T getObject(String key, Type type, JSONReader.Feature... features) {
 
         if (value instanceof Collection) {
             ObjectReader<T> objectReader = provider.getObjectReader(type, fieldBased);
-            return objectReader.createInstance((Collection) value);
+            return objectReader.createInstance((Collection) value, features);
         }
 
         if (type instanceof Class) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -438,7 +438,7 @@ protected void acceptAny(T object, Object fieldValue, long features) {
                         : new JSONReader.Feature[0];
                 typedFieldValue = ((JSONObject) fieldValue).to(fieldType, toFeatures);
             } else if (fieldValue instanceof JSONArray) {
-                typedFieldValue = ((JSONArray) fieldValue).to(fieldType);
+                typedFieldValue = ((JSONArray) fieldValue).to(fieldType, features);
             } else if ((features == 0 || features == JSONReader.Feature.SupportSmartMatch.mask) // default or fastjson 1.x default
                     && !fieldClass.isInstance(fieldValue) && format == null
             ) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderList.java
Patch:
@@ -58,7 +58,7 @@ public Collection<V> createList(JSONReader.Context context) {
             return new ArrayList<>();
         }
 
-        return (Collection<V>) getObjectReader(context).createInstance();
+        return (Collection<V>) getObjectReader(context).createInstance(features);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayReader.java
Patch:
@@ -20,7 +20,7 @@ public ObjectArrayReader() {
     }
 
     @Override
-    public Object[] createInstance(Collection collection) {
+    public Object[] createInstance(Collection collection, long features) {
         Object[] array = new Object[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayReaderMultiType.java
Patch:
@@ -103,7 +103,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         return new Object[types.length];
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -357,7 +357,7 @@ protected void initDefaultValue(T object) {
         }
     }
 
-    public T createInstance(Collection collection) {
+    public T createInstance(Collection collection, long features) {
         T object = createInstance(0L);
         int index = 0;
         for (Object fieldValue : collection) {
@@ -632,7 +632,7 @@ typeName, getObjectClass(), features2
             }
         }
 
-        T object = createInstance(0L);
+        T object = createInstance(features);
 
         if (extraFieldReader == null
                 && (features2 & (JSONReader.Feature.SupportSmartMatch.mask | JSONReader.Feature.ErrorOnUnknownProperties.mask)) == 0
@@ -652,7 +652,7 @@ typeName, getObjectClass(), features2
                             && fieldValue instanceof JSONArray
                     ) {
                         ObjectReader objectReader = fieldReader.getObjectReader(provider);
-                        Object fieldValueList = objectReader.createInstance((JSONArray) fieldValue);
+                        Object fieldValueList = objectReader.createInstance((JSONArray) fieldValue, features);
                         fieldReader.accept(object, fieldValueList);
                         continue;
                     } else if (fieldValue instanceof JSONObject

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleArray.java
Patch:
@@ -85,7 +85,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         Double[] array = new Double[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleValueArray.java
Patch:
@@ -97,7 +97,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         double[] array = new double[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatArray.java
Patch:
@@ -85,7 +85,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         Float[] array = new Float[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatValueArray.java
Patch:
@@ -95,7 +95,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         float[] array = new float[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16Array.java
Patch:
@@ -22,7 +22,7 @@ class ObjectReaderImplInt16Array
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         Short[] array = new Short[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16ValueArray.java
Patch:
@@ -98,7 +98,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         short[] array = new short[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32Array.java
Patch:
@@ -22,7 +22,7 @@ public final class ObjectReaderImplInt32Array
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         Integer[] array = new Integer[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32ValueArray.java
Patch:
@@ -101,7 +101,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         int[] array = new int[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64Array.java
Patch:
@@ -22,7 +22,7 @@ public final class ObjectReaderImplInt64Array
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         Long[] array = new Long[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64ValueArray.java
Patch:
@@ -41,7 +41,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         long[] array = new long[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8Array.java
Patch:
@@ -133,7 +133,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         Byte[] array = new Byte[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8ValueArray.java
Patch:
@@ -123,7 +123,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         byte[] bytes = new byte[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -240,7 +240,7 @@ public Function getBuildFunction() {
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         int size = collection.size();
 
         if (size == 0 && (listClass == List.class)) {
@@ -272,7 +272,7 @@ public Object createInstance(Collection collection) {
                 if (itemObjectReader == null) {
                     itemObjectReader = provider.getObjectReader(itemType);
                 }
-                value = itemObjectReader.createInstance((JSONObject) value, 0L);
+                value = itemObjectReader.createInstance((JSONObject) value, features);
             } else if (valueClass != itemType) {
                 Function typeConvert = provider.getTypeConvert(valueClass, itemType);
                 if (typeConvert != null) {
@@ -287,7 +287,7 @@ public Object createInstance(Collection collection) {
                     if (itemObjectReader == null) {
                         itemObjectReader = provider.getObjectReader(itemType);
                     }
-                    value = itemObjectReader.createInstance((Collection) value);
+                    value = itemObjectReader.createInstance((Collection) value, features);
                 } else if (itemClass.isInstance(value)) {
                     // skip
                 } else if (Enum.class.isAssignableFrom(itemClass)) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListInt64.java
Patch:
@@ -43,8 +43,8 @@ public Object createInstance(long features) {
     }
 
     @Override
-    public Object createInstance(Collection collection) {
-        Collection list = (Collection) createInstance(0);
+    public Object createInstance(Collection collection, long features) {
+        Collection list = (Collection) createInstance(features);
         for (Object item : collection) {
             list.add(TypeUtils.toLong(item));
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -40,7 +40,7 @@ public Object createInstance(long features) {
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         if (listType.isInstance(collection)) {
             boolean typeMatch = true;
             for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -107,7 +107,7 @@ public Object createInstance(Map input, long features) {
                         valueObjectReader = provider.getObjectReader(valueType);
                     }
                     try {
-                        value = valueObjectReader.createInstance((JSONArray) value);
+                        value = valueObjectReader.createInstance((JSONArray) value, features);
                     } catch (Exception ignored) {
                         // ignored
                     }
@@ -127,7 +127,7 @@ public Object createInstance(Map input, long features) {
                     if (valueObjectReader == null) {
                         valueObjectReader = provider.getObjectReader(valueType);
                     }
-                    value = valueObjectReader.createInstance((Collection) value);
+                    value = valueObjectReader.createInstance((Collection) value, features);
                 } else {
                     if (!valueClass.isInstance(value)) {
                         throw new JSONException("can not convert from " + valueClass + " to " + valueType);
@@ -193,7 +193,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
         } else {
             object = instanceType == HashMap.class
                     ? new HashMap<>()
-                    : (Map) createInstance();
+                    : (Map) createInstance(features);
         }
 
         for (int i = 0; ; ++i) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplNumberArray.java
Patch:
@@ -62,7 +62,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         Number[] array = new Number[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -25,7 +25,7 @@ public Object createInstance(long features) {
         return new JSONObject();
     }
 
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         return collection;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplString.java
Patch:
@@ -35,7 +35,7 @@ public Object createInstance(Map map, long features) {
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         if (collection == null) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplStringArray.java
Patch:
@@ -16,7 +16,7 @@ public final class ObjectReaderImplStringArray
     }
 
     @Override
-    public Object createInstance(Collection collection) {
+    public Object createInstance(Collection collection, long features) {
         String[] array = new String[collection.size()];
         int i = 0;
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -398,7 +398,7 @@ public T readFromCSV(JSONReader jsonReader, Type fieldType, Object fieldName, lo
         return createInstanceNoneDefaultConstructor(valueMap);
     }
 
-    public T createInstance(Collection collection) {
+    public T createInstance(Collection collection, long features) {
         int index = 0;
 
         ObjectReaderProvider provider = JSONFactory.getDefaultObjectReaderProvider();

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/Fastjson1xReaderModule.java
Patch:
@@ -40,7 +40,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         }
 
         @Override
-        public Object createInstance(Collection collection) {
+        public Object createInstance(Collection collection, long features) {
             return Collections.emptyList();
         }
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -119,7 +119,7 @@ public final long readFieldNameHashCode() {
             if (ch == '[' && nameBegin > 0 && (preFieldName = getFieldName()) != null) {
                 errorMsg = "illegal fieldName input " + ch + ", previous fieldName " + preFieldName;
             } else {
-                errorMsg = "illegal fieldName input" + ch;
+                errorMsg = "illegal fieldName input " + ch;
             }
 
             throw new JSONException(info(errorMsg));

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -817,7 +817,7 @@ public Object readAny() {
                                 autoTypeObjectReader = context.getObjectReaderAutoType(typeName, null);
 
                                 if (autoTypeObjectReader == null) {
-                                    throw new JSONException("auotype not support : " + typeName + ", offset " + offset + "/" + bytes.length);
+                                    throw new JSONException("autoType not support : " + typeName + ", offset " + offset + "/" + bytes.length);
                                 }
                             }
 
@@ -1399,7 +1399,7 @@ ObjectReader checkAutoTypeWithHandler(
     }
 
     void autoTypeError() {
-        throw new JSONException("auotype not support : " + getString());
+        throw new JSONException("autoType not support : " + getString());
     }
 
     private ObjectReader getObjectReaderContext(

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderList.java
Patch:
@@ -233,7 +233,7 @@ public ObjectReader checkObjectAutoType(JSONReader jsonReader) {
             }
 
             if (autoTypeObjectReader == null) {
-                throw new JSONException(jsonReader.info("auotype not support : " + jsonReader.getString()));
+                throw new JSONException(jsonReader.info("autoType not support : " + jsonReader.getString()));
             }
 
             return autoTypeObjectReader;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayTypedReader.java
Patch:
@@ -98,7 +98,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
                 if (jsonReader.isSupportAutoType(features)) {
                     ObjectReader autoTypeObjectReader = jsonReader.getObjectReaderAutoType(typeHash, objectClass, features);
                     if (autoTypeObjectReader == null) {
-                        throw new JSONException(jsonReader.info("auotype not support : " + jsonReader.getString()));
+                        throw new JSONException(jsonReader.info("autoType not support : " + jsonReader.getString()));
                     }
 
                     return autoTypeObjectReader.readObject(jsonReader, fieldType, fieldName, features);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader.java
Patch:
@@ -207,7 +207,7 @@ default T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldNam
                     reader = context.getObjectReaderAutoType(typeName, null);
 
                     if (reader == null) {
-                        throw new JSONException(jsonReader.info("No suitable ObjectReader found for" + typeName));
+                        throw new JSONException(jsonReader.info("No suitable ObjectReader found for " + typeName));
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -164,7 +164,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
                     autoTypeObjectReader = context.getObjectReaderAutoType(typeName, null);
 
                     if (autoTypeObjectReader == null) {
-                        throw new JSONException(jsonReader.info("auotype not support : " + typeName));
+                        throw new JSONException(jsonReader.info("autoType not support : " + typeName));
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -239,7 +239,7 @@ public Object autoType(JSONReader jsonReader, Class expectClass, long features)
                 if (expectClass == objectClass) {
                     autoTypeObjectReader = this;
                 } else {
-                    throw new JSONException(jsonReader.info("auotype not support : " + typeName));
+                    throw new JSONException(jsonReader.info("autoType not support : " + typeName));
                 }
             }
         }
@@ -480,7 +480,7 @@ protected T autoType(JSONReader jsonReader) {
             autoTypeObjectReader = context.getObjectReaderAutoType(typeName, null);
 
             if (autoTypeObjectReader == null) {
-                throw new JSONException(jsonReader.info("auotype not support : " + typeName));
+                throw new JSONException(jsonReader.info("autoType not support : " + typeName));
             }
         }
 
@@ -528,7 +528,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
                     autoTypeObjectReader = context.getObjectReaderAutoType(typeName, null);
 
                     if (autoTypeObjectReader == null) {
-                        throw new JSONException(jsonReader.info("auotype not support : " + typeName));
+                        throw new JSONException(jsonReader.info("autoType not support : " + typeName));
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -230,7 +230,7 @@ private JSONException notMatchError() {
     }
 
     private JSONException auotypeError(JSONReader jsonReader) {
-        return new JSONException(jsonReader.info("auotype not support"));
+        return new JSONException(jsonReader.info("autoType not support"));
     }
 
     protected void initDefaultValue(T object) {
@@ -352,7 +352,7 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
                     );
 
                     if (reader == null) {
-                        throw new JSONException(jsonReader.info("No suitable ObjectReader found for" + typeName));
+                        throw new JSONException(jsonReader.info("No suitable ObjectReader found for " + typeName));
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderInterface.java
Patch:
@@ -63,7 +63,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
                     autoTypeObjectReader = context.getObjectReaderAutoType(typeName, null);
 
                     if (autoTypeObjectReader == null) {
-                        throw new JSONException(jsonReader.info("auotype not support : " + typeName));
+                        throw new JSONException(jsonReader.info("autoType not support : " + typeName));
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -130,7 +130,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
                         autoTypeObjectReader = context.getObjectReaderAutoType(typeName, objectClass);
 
                         if (autoTypeObjectReader == null) {
-                            throw new JSONException(jsonReader.info("auotype not support : " + typeName));
+                            throw new JSONException(jsonReader.info("autoType not support : " + typeName));
                         }
                     }
 

File: extension/src/test/java/com/alibaba/fastjson2/codegen/ObjectReaderGen.java
Patch:
@@ -263,7 +263,7 @@ private void genReadObject() {
         println("\t\t\t\t\tautoTypeObjectReader = context.getObjectReaderAutoType(typeName, " + className(objectClass) + ".class);");
         println();
         println("\t\t\t\t\tif (autoTypeObjectReader == null) {");
-        println("\t\t\t\t\t\tthrow new JSONException(\"auotype not support : \" + typeName);");
+        println("\t\t\t\t\t\tthrow new JSONException(\"autoType not support : \" + typeName);");
         println("\t\t\t\t\t}");
         println("\t\t\t\t}");
         println();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFromLong.java
Patch:
@@ -21,7 +21,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
         }
 
         return creator.apply(
-                jsonReader.readInt32Value()
+                jsonReader.readInt64Value()
         );
     }
 
@@ -32,7 +32,7 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
         }
 
         return creator.apply(
-                jsonReader.readInt32Value()
+                jsonReader.readInt64Value()
         );
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentIndex.java
Patch:
@@ -70,7 +70,7 @@ public void eval(JSONPath.Context context) {
             return;
         }
 
-        if ((object instanceof SortedSet || object instanceof LinkedHashSet)
+        if ((object instanceof SortedSet || object instanceof LinkedHashSet || object instanceof Queue)
                 || (index == 0 && object instanceof Collection && ((Collection<?>) object).size() == 1)
         ) {
             Collection collection = (Collection) object;

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentIndex.java
Patch:
@@ -477,9 +477,7 @@ public void accept(JSONReader jsonReader, JSONPath.Context context) {
         for (int i = 0; jsonReader.ch != EOI; ++i) {
             if (jsonReader.ch == ']') {
                 jsonReader.next();
-                if (i == 0) {
-                    context.eval = true;
-                }
+                context.eval = true;
                 break;
             }
 

File: codegen/src/main/java/com/alibaba/fastjson2/internal/processor/JSONCompiledAnnotationProcessor.java
Patch:
@@ -885,7 +885,7 @@ private JCTree.JCMethodDecl genWrite(
         writeBody.append(contextFeaturesVar);
 
         JCTree.JCUnary unary = unary(JCTree.Tag.NOT, field(jsonWriterIdent, "useSingleQuote"));
-        JCTree.JCBinary binary = binary(JCTree.Tag.EQ, binary(JCTree.Tag.BITOR, literal(TypeTag.LONG, UnquoteFieldName.mask), literal(TypeTag.LONG, UseSingleQuotes.mask)), literal(0));
+        JCTree.JCBinary binary = binary(JCTree.Tag.NE, binary(JCTree.Tag.BITOR, literal(TypeTag.LONG, UnquoteFieldName.mask), literal(TypeTag.LONG, UseSingleQuotes.mask)), literal(0));
         JCTree.JCVariableDecl quoteVar = defVar(Flags.PARAMETER, "quote", type(TypeTag.BOOLEAN), binary(JCTree.Tag.AND, unary, binary));
         JCTree.JCIdent quoteIdent = ident(quoteVar.name);
         writeBody.append(quoteVar);

File: core/src/test/java/com/alibaba/fastjson2/util/BeanUtilsTest.java
Patch:
@@ -303,8 +303,10 @@ public void buildIgnores() {
                 "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor",
                 "sun.nio.ch.FileChannelImpl",
                 "java.io.InputStream",
+                "java.util.concurrent.locks.Lock",
                 "java.util.concurrent.locks.ReentrantLock",
-                "java.security.ProtectionDomain"
+                "java.security.ProtectionDomain",
+                "java.lang.ref.ReferenceQueue"
         };
 
         long[] hashCodes = new long[names.length];

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1993,7 +1993,7 @@ public void read(Map object, long features) {
 
             Object name;
             if (match || typeRedirect) {
-                if (ch >= '1' && ch <= '9') {
+                if ((ch >= '0' && ch <= '9') || ch == '-') {
                     name = null;
                 } else {
                     name = readFieldName();

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5945,7 +5945,7 @@ public final void readNull() {
     @Override
     public final int getStringLength() {
         if (ch != '"' && ch != '\'') {
-            throw new JSONException("string length only support string input");
+            throw new JSONException("string length only support string input " + ch);
         }
         final char quote = ch;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/v2issues/Issue2477.java
Patch:
@@ -13,8 +13,8 @@ public class Issue2477 {
     @Test
     public void jsonTest() {
         Map<String, Object> map = new LinkedHashMap<>();
-        map.put("startDate", LocalDate.of(2019,7, 14));
-        map.put("endDate", LocalDate.of(2019,8, 14));
+        map.put("startDate", LocalDate.of(2019, 7, 14));
+        map.put("endDate", LocalDate.of(2019, 8, 14));
         assertEquals("{\"startDate\":\"2019-07-14\",\"endDate\":\"2019-08-14\"}", JSON.toJSONString(map));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONValidator.java
Patch:
@@ -34,7 +34,7 @@ public boolean validate() {
         try {
             firstChar = jsonReader.current();
             jsonReader.skipValue();
-        } catch (JSONException error) {
+        } catch (JSONException | ArrayIndexOutOfBoundsException error) {
             return validateResult = false;
         } finally {
             jsonReader.close();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplBoolean.java
Patch:
@@ -23,7 +23,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         boolean value = (Boolean) object;
-        if ((features & WriteNonStringValueAsString.mask) != 0) {
+        if ((jsonWriter.getFeatures(features) & WriteNonStringValueAsString.mask) != 0) {
             jsonWriter.writeString(value);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -262,7 +262,6 @@ public void getBeanInfo(BeanInfo beanInfo, Class<?> objectClass) {
                         getBeanInfo1x(beanInfo, annotation);
                         break;
                     case "com.fasterxml.jackson.annotation.JsonTypeInfo":
-                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonTypeInfo":
                         if (useJacksonAnnotation) {
                             processJacksonJsonTypeInfo(beanInfo, annotation);
                         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -439,7 +439,9 @@ protected void acceptAny(T object, Object fieldValue, long features) {
                 typedFieldValue = ((JSONObject) fieldValue).to(fieldType, toFeatures);
             } else if (fieldValue instanceof JSONArray) {
                 typedFieldValue = ((JSONArray) fieldValue).to(fieldType);
-            } else if (features == 0 && !fieldClass.isInstance(fieldValue) && format == null) {
+            } else if ((features == 0 || features == JSONReader.Feature.SupportSmartMatch.mask) // default or fastjson 1.x default
+                    && !fieldClass.isInstance(fieldValue) && format == null
+            ) {
                 ObjectReader initReader = getInitReader();
                 if (initReader != null) {
                     String fieldValueJson = JSON.toJSONString(fieldValue);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -360,6 +360,9 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
 
                 Object fieldValue = valueMap.get(fieldReader.fieldNameHash);
                 if (fieldValue != null) {
+                    if (paramReader != null) {
+                        continue;
+                    }
                     fieldReader.accept(object, fieldValue);
                 }
             }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONPath.java
Patch:
@@ -50,6 +50,9 @@ public static <T> T read(String json, String path, Type clazz) {
     }
 
     public static Object eval(Object rootObject, String path) {
+        if (rootObject instanceof String) {
+            return com.alibaba.fastjson2.JSONPath.eval((String) rootObject, path);
+        }
         com.alibaba.fastjson2.JSONPath jsonPath = com.alibaba.fastjson2.JSONPath.of(path);
         return jsonPath.eval(rootObject);
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONPath.java
Patch:
@@ -77,6 +77,8 @@ public static Object extract(String json, String path) {
         Object result = jsonPath.extract(jsonReader);
         if (result instanceof com.alibaba.fastjson2.JSONArray) {
             result = new com.alibaba.fastjson.JSONArray((com.alibaba.fastjson2.JSONArray) result);
+        } else if (result instanceof com.alibaba.fastjson2.JSONObject) {
+            result = new com.alibaba.fastjson.JSONObject((com.alibaba.fastjson2.JSONObject) result);
         }
         return result;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -123,7 +123,7 @@ public Object createInstance(Map input, long features) {
                     } catch (Exception ignored) {
                         // ignored
                     }
-                } else if (value instanceof Collection) {
+                } else if (value instanceof Collection && !multiValue) {
                     if (valueObjectReader == null) {
                         valueObjectReader = provider.getObjectReader(valueType);
                     }

File: core/src/main/moditect/module-info.java
Patch:
@@ -1,8 +1,8 @@
 // https://www.oracle.com/corporate/features/understanding-java-9-modules.html
 
 open module com.alibaba.fastjson2 {
-    requires transitive fastjson
-    requires transitive jdk.unsupported
+    requires transitive fastjson;
+    requires transitive jdk.unsupported;
     requires java.management;
 
     exports com.alibaba.fastjson2;

File: core/src/main/moditect/module-info.java
Patch:
@@ -2,7 +2,7 @@
 
 open module com.alibaba.fastjson2 {
     requires transitive fastjson
-    requires transitive jdk.unsupported;
+    requires transitive jdk.unsupported
     requires java.management;
 
     exports com.alibaba.fastjson2;

File: core/src/main/moditect/module-info.java
Patch:
@@ -1,6 +1,7 @@
 // https://www.oracle.com/corporate/features/understanding-java-9-modules.html
 
 open module com.alibaba.fastjson2 {
+    requires transitive fastjson
     requires transitive jdk.unsupported;
     requires java.management;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK8.java
Patch:
@@ -2,8 +2,7 @@
 
 import com.alibaba.fastjson2.util.JDKUtils;
 
-import static com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
-import static com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
+import static com.alibaba.fastjson2.JSONWriter.Feature.*;
 
 final class JSONWriterUTF16JDK8
         extends JSONWriterUTF16 {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK8UF.java
Patch:
@@ -2,8 +2,7 @@
 
 import com.alibaba.fastjson2.util.JDKUtils;
 
-import static com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
-import static com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
+import static com.alibaba.fastjson2.JSONWriter.Feature.*;
 import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 public final class JSONWriterUTF16JDK8UF

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -775,7 +775,7 @@ public Object readAny() {
                         return readArray();
                     }
 
-                    throw new JSONException("auoType not support , offset " + offset + "/" + bytes.length);
+                    throw new JSONException("autoType not support , offset " + offset + "/" + bytes.length);
                 }
 
                 ObjectReader autoTypeObjectReader = context.getObjectReaderAutoType(typeHash);
@@ -784,7 +784,7 @@ public Object readAny() {
                     autoTypeObjectReader = context.getObjectReaderAutoType(typeName, null);
 
                     if (autoTypeObjectReader == null) {
-                        throw new JSONException("auoType not support : " + typeName + ", offset " + offset + "/" + bytes.length);
+                        throw new JSONException("autoType not support : " + typeName + ", offset " + offset + "/" + bytes.length);
                     }
                 }
                 return autoTypeObjectReader.readJSONBObject(this, null, null, 0);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -223,7 +223,7 @@ public void apply(Consumer<FieldReader> fieldReaderConsumer) {
         }
     }
 
-    public Object auoType(JSONReader jsonReader, Class expectClass, long features) {
+    public Object autoType(JSONReader jsonReader, Class expectClass, long features) {
         long typeHash = jsonReader.readTypeHashCode();
         JSONReader.Context context = jsonReader.getContext();
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -1712,7 +1712,7 @@ private <T> void genMethodReadObject(
             mw.visitVarInsn(Opcodes.ALOAD, THIS);
             mw.visitFieldInsn(Opcodes.GETFIELD, classNameType, "objectClass", "Ljava/lang/Class;");
             mw.visitVarInsn(Opcodes.LLOAD, FEATURES);
-            mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_OBJECT_READER_ADAPTER, "auoType", "(" + ASMUtils.desc(JSONReader.class) + "Ljava/lang/Class;J)Ljava/lang/Object;", false);
+            mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_OBJECT_READER_ADAPTER, "autoType", "(" + ASMUtils.desc(JSONReader.class) + "Ljava/lang/Class;J)Ljava/lang/Object;", false);
             mw.visitInsn(Opcodes.ARETURN);
 
             mw.visitLabel(noneAutoType_);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderException.java
Patch:
@@ -365,7 +365,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
                     autoTypeObjectReader = context.getObjectReaderAutoType(typeName, null);
 
                     if (autoTypeObjectReader == null) {
-                        throw new JSONException("auoType not support : " + typeName + ", offset " + jsonReader.getOffset());
+                        throw new JSONException("autoType not support : " + typeName + ", offset " + jsonReader.getOffset());
                     }
                 }
                 return (T) autoTypeObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, 0);

File: core/src/test/java/com/alibaba/fastjson2/fieldbased/Case1.java
Patch:
@@ -65,7 +65,7 @@ public void test_jsonb_arrayMapping() {
     }
 
     @Test
-    public void test_jsonb_arrayMapping_auoType() {
+    public void test_jsonb_arrayMapping_autoType() {
         Bean bean = new Bean();
         bean.userId = 101;
         bean.UserId = 102;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -527,7 +527,8 @@ void getBeanInfo1x(BeanInfo beanInfo, Annotation annotation) {
                         case "autoTypeBeforeHandler":
                         case "autoTypeCheckHandler": {
                             Class<?> autoTypeCheckHandler = (Class) result;
-                            if (JSONReader.AutoTypeBeforeHandler.class.isAssignableFrom(autoTypeCheckHandler)) {
+                            if (autoTypeCheckHandler != JSONReader.AutoTypeBeforeHandler.class
+                                    && JSONReader.AutoTypeBeforeHandler.class.isAssignableFrom(autoTypeCheckHandler)) {
                                 beanInfo.autoTypeBeforeHandler = (Class<JSONReader.AutoTypeBeforeHandler>) autoTypeCheckHandler;
                             }
                             break;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -775,7 +775,7 @@ public ObjectReader getObjectReader(Type objectType, Filter filter, boolean fiel
                 ? cacheFieldBasedFilter.getOrDefault(objectType, new HashSet<>())
                 : cacheFilter.getOrDefault(objectType, new HashSet<>());
         if (!filters.isEmpty()) {
-            cleanup((Class)objectType);
+            cleanup((Class) objectType);
         }
         filters.add(filter);
         if (fieldBased) {

File: core/src/test/java/com/alibaba/fastjson2/issues_2400/Issue2478.java
Patch:
@@ -31,4 +31,3 @@ public static class User {
         private String lastName;
     }
 }
-

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -818,7 +818,7 @@ static <T> T parseObject(
 
         final JSONReader.Context context = JSONFactory.createReadContext(filter, features);
         boolean fieldBased = (context.features & JSONReader.Feature.FieldBased.mask) != 0;
-        ObjectReader<T> objectReader = context.provider.getObjectReader(clazz, fieldBased);
+        ObjectReader<T> objectReader = context.provider.getObjectReader(clazz, filter, fieldBased);
 
         try (JSONReader reader = JSONReader.of(text, context)) {
             if (reader.nextIfNull()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -99,10 +99,12 @@ public static ObjectReader of(Type fieldType, Class mapType, long features) {
             ParameterizedType parameterizedType = (ParameterizedType) fieldType;
 
             Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
-            if (actualTypeArguments.length == 2 && !"org.springframework.util.LinkedMultiValueMap".equals(instanceType.getName())) {
+            if (actualTypeArguments.length == 2) {
                 Type keyType = actualTypeArguments[0];
                 Type valueType = actualTypeArguments[1];
 
+                boolean multiValueMap = "org.springframework.util.LinkedMultiValueMap".equals(instanceType.getName());
+
                 if (keyType == String.class && valueType == String.class && builder == null) {
                     return new ObjectReaderImplMapString(mapType, instanceType, features);
                 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -852,7 +852,6 @@ private ObjectReader getObjectReaderInternal(Type objectType, boolean fieldBased
                         }
                     }
                 } catch (Exception ignored) {
-                    ignored.printStackTrace();
                     // ignored
                 }
             }

File: codegen/src/main/java/com/alibaba/fastjson2/internal/processor/JSONCompiledAnnotationProcessor.java
Patch:
@@ -93,10 +93,10 @@ static String findConverterName(StructInfo structInfo) {
         int dotIndex = structInfo.binaryName.lastIndexOf('.');
         String className = structInfo.binaryName.substring(dotIndex + 1);
         if (dotIndex == -1) {
-            return className + "_FASTJOSNReader";
+            return className + "_FASTJSONReader";
         }
         String packageName = structInfo.binaryName.substring(0, dotIndex);
-        return packageName + '.' + className + "_FASTJOSNReader";
+        return packageName + '.' + className + "_FASTJSONReader";
     }
 
     private static void buildCode(

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterProvider.java
Patch:
@@ -358,6 +358,8 @@ private ObjectWriter getObjectWriterInternal(Type objectType, Class objectClass,
                     case "springfox.documentation.spring.web.json.Json":
                     case "cn.hutool.json.JSONArray":
                     case "cn.hutool.json.JSONObject":
+                    case "cn.hutool.core.map.CaseInsensitiveMap":
+                    case "cn.hutool.core.map.CaseInsensitiveLinkedMap":
                         fieldBased = false;
                         break;
                     default:

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -1313,7 +1313,7 @@ public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
                 return externalObjectWriter;
             }
 
-            BeanInfo beanInfo = new BeanInfo();
+            BeanInfo beanInfo = provider.createBeanInfo();
             Class mixIn = provider.getMixIn(clazz);
             if (mixIn != null) {
                 annotationProcessor.getBeanInfo(beanInfo, mixIn);
@@ -1499,7 +1499,7 @@ private ObjectWriter createEnumWriter(Class enumClass) {
             }
         }
 
-        BeanInfo beanInfo = new BeanInfo();
+        BeanInfo beanInfo = provider.createBeanInfo();
 
         Class[] interfaces = enumClass.getInterfaces();
         for (int i = 0; i < interfaces.length; i++) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -304,7 +304,7 @@ public ObjectWriter createObjectWriter(
             final long features,
             final ObjectWriterProvider provider
     ) {
-        BeanInfo beanInfo = new BeanInfo();
+        BeanInfo beanInfo = provider.createBeanInfo();
         beanInfo.readerFeatures |= FieldInfo.JIT;
 
         provider.getBeanInfo(beanInfo, objectClass);
@@ -813,7 +813,7 @@ public <T> FieldWriter<T> createFieldWriter(
         }
 
         if (fieldClass.isEnum()) {
-            BeanInfo beanInfo = new BeanInfo();
+            BeanInfo beanInfo = provider.createBeanInfo();
             provider.getBeanInfo(beanInfo, fieldClass);
 
             boolean writeEnumAsJavaBean = beanInfo.writeEnumAsJavaBean;
@@ -1189,10 +1189,10 @@ public <T, V> FieldWriter<T> createFieldWriter(
         }
 
         if (fieldClass.isEnum()) {
-            BeanInfo beanInfo = new BeanInfo();
             if (provider == null) {
                 provider = JSONFactory.getDefaultObjectWriterProvider();
             }
+            BeanInfo beanInfo = provider.createBeanInfo();
             provider.getBeanInfo(beanInfo, fieldClass);
 
             boolean writeEnumAsJavaBean = beanInfo.writeEnumAsJavaBean;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -1383,7 +1383,7 @@ public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
                 return ObjectWriterImplInstant.INSTANCE;
             }
 
-            if (Duration.class == clazz) {
+            if (Duration.class == clazz || Period.class == clazz) {
                 return ObjectWriterImplToString.INSTANCE;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -130,7 +130,7 @@ public static Map<String, Object> paths(Object javaObject) {
         return paths;
     }
 
-    void paths(Map<Object, String> values, Map<String, Object> paths, String parent, Object javaObject) {
+    void paths(Map<Object, String> values, Map paths, String parent, Object javaObject) {
         if (javaObject == null) {
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderPrimitive.java
Patch:
@@ -20,7 +20,7 @@ public Class getObjectClass() {
 
     @Override
     public T createInstance(long features) {
-        throw new JSONException("UnsupportedOperation");
+        throw new JSONException("createInstance not supported " + objectClass.getName());
     }
 
     @Override

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/QiuqiuTest.java
Patch:
@@ -17,7 +17,7 @@ public class QiuqiuTest {
     public void test() {
         CsiObject csiObject = new CsiObject();
         JSONPath.set(csiObject, "$.csiLive[0].id", "123");
-        assertEquals("{\"csiLive\":[{\"id\":\"123\"}]}", JSON.toJSONString(csiObject));
+        assertEquals("{\"csiLive\":[{\"id\":123}]}", JSON.toJSONString(csiObject));
     }
 
     @Data

File: codegen/src/main/java/com/alibaba/fastjson2/internal/processor/JSONCompiledAnnotationProcessor.java
Patch:
@@ -823,8 +823,8 @@ private static void genRead243(
                 Block.IfStmt nextIfMatchStmt = label.ifStmt(nextIfMatch);
                 genReadFieldValue(nextIfMatchStmt, fieldReaderIndex, info, fieldReader, jsonReader, object, forLabel, false);
                 nextIfMatchStmt.continueStmt(forLabel);
-                label.breakStmt();
             }
+            label.breakStmt();
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -3179,7 +3179,7 @@ public final void writeString(int value) {
 
     @Override
     public final void writeString(long value) {
-        boolean writeAsString = (context.features & WriteNonStringValueAsString.mask) == 0;
+        boolean writeAsString = (context.features & (WriteNonStringValueAsString.mask | WriteLongAsString.mask)) == 0;
         if (writeAsString) {
             writeQuote();
         }

File: core/src/main/java/com/alibaba/fastjson2/filter/SimplePropertyPreFilter.java
Patch:
@@ -59,7 +59,7 @@ public boolean process(JSONWriter writer, Object source, String name) {
         }
 
         if (clazz != null && !clazz.isInstance(source)) {
-            return excludes.size() != 0 && includes.isEmpty() && maxLevel == 0;
+            return true;
         }
 
         if (this.excludes.contains(name)) {

File: core/src/test/java/com/alibaba/fastjson2/filter/FilterTest.java
Patch:
@@ -82,7 +82,7 @@ public void test_5() {
     public void test_6() {
         SimplePropertyPreFilter filter = new SimplePropertyPreFilter(JSONArray.class);
         assertNotNull(filter.getClazz());
-        assertEquals("{}",
+        assertEquals("{\"value\":{\"id\":123,\"name\":\"DataWorks\"}}",
                 JSON.toJSONString(
                         new JSONObject()
                                 .fluentPut("value",

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16.java
Patch:
@@ -21,7 +21,7 @@ abstract class FieldWriterInt16<T>
     }
 
     protected final void writeInt16(JSONWriter jsonWriter, short value) {
-        boolean writeNonStringValueAsString = (jsonWriter.getFeatures() & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0;
+        boolean writeNonStringValueAsString = (jsonWriter.getFeatures(features) & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0;
         if (writeNonStringValueAsString) {
             writeFieldName(jsonWriter);
             jsonWriter.writeString(Short.toString(value));

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8.java
Patch:
@@ -21,7 +21,7 @@ abstract class FieldWriterInt8<T>
     }
 
     protected final void writeInt8(JSONWriter jsonWriter, byte value) {
-        boolean writeNonStringValueAsString = (jsonWriter.getFeatures() & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0;
+        boolean writeNonStringValueAsString = (features & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0;
         if (writeNonStringValueAsString) {
             writeFieldName(jsonWriter);
             jsonWriter.writeString(Byte.toString(value));

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterArrayFinal.java
Patch:
@@ -147,7 +147,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
                 }
             }
 
-            itemObjectWriter.writeJSONB(jsonWriter, item, i, this.itemClass, 0);
+            itemObjectWriter.writeJSONB(jsonWriter, item, i, this.itemClass, features);
 
             if (refDetect) {
                 jsonWriter.popPath(item);

File: core/src/test/java/com/alibaba/fastjson2/util/BeanUtilsTest.java
Patch:
@@ -302,7 +302,8 @@ public void buildIgnores() {
                 "org.apache.commons.collections.functors.ChainedTransformer",
                 "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor",
                 "sun.nio.ch.FileChannelImpl",
-                "java.io.InputStream"
+                "java.io.InputStream",
+                "java.util.concurrent.locks.ReentrantLock"
         };
 
         long[] hashCodes = new long[names.length];

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMapEntry.java
Patch:
@@ -24,7 +24,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         Object key = entry.getKey();
         long contextFeatures = jsonWriter.context.getFeatures();
         if ((contextFeatures & (WriteNonStringKeyAsString.mask | BrowserCompatible.mask)) != 0) {
-            jsonWriter.writeAny(key.toString());
+            jsonWriter.writeAny(key == null ? "null" : key.toString());
         } else {
             jsonWriter.writeAny(key);
         }
@@ -43,7 +43,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         Object key = entry.getKey();
         long contextFeatures = jsonWriter.context.getFeatures();
         if ((contextFeatures & (WriteNonStringKeyAsString.mask | BrowserCompatible.mask)) != 0) {
-            jsonWriter.writeAny(key.toString());
+            jsonWriter.writeAny(key == null ? "null" : key.toString());
         } else {
             jsonWriter.writeAny(key);
         }

File: core/src/test/java/com/alibaba/fastjson2/issues_2400/Issue2430.java
Patch:
@@ -15,9 +15,9 @@ public class Issue2430 {
     void test() {
         Map.Entry<Integer, Integer> entry = new AbstractMap.SimpleEntry<>(1, 2);
         String jsonString = JSON.toJSONString(entry, JSONWriter.Feature.WriteNonStringKeyAsString);
-        assertEquals("{\"1\": 2}", jsonString);
+        assertEquals("{\"1\":2}", jsonString);
         jsonString = JSON.toJSONString(entry, JSONWriter.Feature.BrowserCompatible);
-        assertEquals("{\"1\": 2}", jsonString);
+        assertEquals("{\"1\":2}", jsonString);
         jsonString = JSONB.toJSONString(JSONB.toBytes(entry, JSONWriter.Feature.WriteNonStringKeyAsString));
         assertEquals("[\n" +
                 "\t\"1\",\n" +

File: core/src/test/java/com/alibaba/fastjson2/issues_2400/Issue2430.java
Patch:
@@ -15,9 +15,9 @@ public class Issue2430 {
     void test() {
         Map.Entry<Integer, Integer> entry = new AbstractMap.SimpleEntry<>(1, 2);
         String jsonString = JSON.toJSONString(entry, JSONWriter.Feature.WriteNonStringKeyAsString);
-        assertEquals("{\"1\": 2}",jsonString);
+        assertEquals("{\"1\": 2}", jsonString);
         jsonString = JSON.toJSONString(entry, JSONWriter.Feature.BrowserCompatible);
-        assertEquals("{\"1\": 2}",jsonString);
+        assertEquals("{\"1\": 2}", jsonString);
         jsonString = JSONB.toJSONString(JSONB.toBytes(entry, JSONWriter.Feature.WriteNonStringKeyAsString));
         assertEquals("[\n" +
                 "\t\"1\",\n" +

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMapEntry.java
Patch:
@@ -44,7 +44,8 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             jsonWriter.writeAny(entry.getKey().toString());
         } else {
             jsonWriter.writeAny(entry.getKey());
-        }        jsonWriter.writeColon();
+        }
+        jsonWriter.writeColon();
         jsonWriter.writeAny(entry.getValue());
         jsonWriter.endObject();
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1651,7 +1651,7 @@ public final void writeName5Raw(long name) {
     @Override
     public final void writeName6Raw(long name) {
         int off = this.off;
-        int minCapacity = off + 10 + indent;
+        int minCapacity = off + 11 + indent;
         if (minCapacity >= this.chars.length) {
             ensureCapacity(minCapacity);
         }
@@ -1674,7 +1674,7 @@ public final void writeName6Raw(long name) {
     @Override
     public final void writeName7Raw(long name) {
         int off = this.off;
-        int minCapacity = off + 10 + indent;
+        int minCapacity = off + 12 + indent;
         if (minCapacity >= this.chars.length) {
             ensureCapacity(minCapacity);
         }
@@ -1698,7 +1698,7 @@ public final void writeName7Raw(long name) {
     @Override
     public final void writeName8Raw(long name) {
         int off = this.off;
-        int minCapacity = off + 10 + indent;
+        int minCapacity = off + 13 + indent;
         if (minCapacity >= this.chars.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -304,6 +304,8 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
             } else {
                 object = new HashMap<>();
             }
+        } else if (instanceType == EnumMap.class && keyType instanceof Class) {
+            object = new EnumMap((Class) keyType);
         } else {
             object = (Map) createInstance(contextFeatures);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -3355,7 +3355,7 @@ public String readFieldName() {
                                 + (((long) bytes[nameBegin + 10]) << 32)
                                 + (((long) bytes[nameBegin + 9]) << 24)
                                 + (((long) bytes[nameBegin + 8]) << 16)
-                                + (((long) bytes[nameBegin + 8]) << 8)
+                                + (((long) bytes[nameBegin + 7]) << 8)
                                 + ((long) bytes[nameBegin + 6]);
                         break;
                     case 15:

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -269,10 +269,10 @@ public static void declaredFields(Class objectClass, Consumer<Field> fieldConsum
             if (allMatch) {
                 fields = declaredFields;
             } else {
+                boolean isEnum = Enum.class.isAssignableFrom(objectClass);
                 List<Field> list = new ArrayList<>(declaredFields.length);
                 for (Field field : declaredFields) {
-                    int modifiers = field.getModifiers();
-                    if (Modifier.isStatic(modifiers)) {
+                    if (!isEnum && Modifier.isStatic(field.getModifiers())) {
                         continue;
                     }
                     list.add(field);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -345,7 +345,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 }
             } else {
                 if (index == 0
-                        && jsonReader.isEnabled(JSONReader.Feature.SupportAutoType)
+                        && (jsonReader.isEnabled(JSONReader.Feature.SupportAutoType) || jsonReader.getContext().getContextAutoTypeBeforeHandler() != null)
                         && jsonReader.current() == '"'
                         && !(keyType instanceof Class && Enum.class.isAssignableFrom((Class) keyType))
                 ) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -983,7 +983,7 @@ public <T> ObjectReader<T> createObjectReader(
                 constructor.setAccessible(true);
                 return (ObjectReader<T>) constructor.newInstance();
             } catch (InstantiationException | IllegalAccessException | NoSuchMethodException |
-                     InvocationTargetException e) {
+                    InvocationTargetException e) {
                 throw new JSONException("create deserializer error", e);
             }
         }
@@ -2611,7 +2611,7 @@ public <T> FieldReader<T> createFieldReader(
 
         if (field != null) {
             String objectClassName = objectClass.getName();
-            if (!objectClassName.startsWith("java.lang") && !objectClassName.startsWith("java.time")) {
+            if (!objectClassName.startsWith("java.lang") && !objectClassName.startsWith("java.time") && !field.getDeclaringClass().getName().startsWith("java.lang") && !field.getDeclaringClass().getName().startsWith("java.time")) {
                 field.setAccessible(true);
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -1637,7 +1637,7 @@ boolean record = BeanUtils.isRecord(objectClass);
             if (!record) {
                 BeanUtils.declaredFields(objectClass, field -> {
                     fieldInfo.init();
-                    fieldInfo.ignore = (field.getModifiers() & Modifier.PUBLIC) == 0;
+                    fieldInfo.ignore = (field.getModifiers() & Modifier.PUBLIC) == 0 && ((beanFeatures & JSONReader.Feature.FieldBased.mask) == 0);
                     fieldInfo.features |= beanFeatures;
                     fieldInfo.format = beanFormat;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -583,8 +583,9 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
         Map map = (Map) object;
 
         features |= jsonWriter.getFeatures();
-        if ((features & JSONWriter.Feature.MapSortField.mask) != 0) {
-            if (!(map instanceof SortedMap) && map.getClass() != LinkedHashMap.class) {
+        if ((features & (MapSortField.mask | SortMapEntriesByKeys.mask)) != 0) {
+            if (!(map instanceof SortedMap)
+                    && (map.getClass() != LinkedHashMap.class || (features & SortMapEntriesByKeys.mask) != 0)) {
                 map = new TreeMap<>(map);
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -182,11 +182,11 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         if (ch == '[') {
             jsonReader.next();
             while (!jsonReader.nextIfArrayEnd()) {
-                String str = jsonReader.readString();
-                if (str == null) {
+                String item = jsonReader.readString();
+                if (item == null && list instanceof SortedSet) {
                     continue;
                 }
-                list.add(str);
+                list.add(item);
             }
         } else if (ch == '"' || ch == '\'' || ch == '{') {
             String str = jsonReader.readString();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -353,7 +353,9 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
                         }
                         break;
                     case "com.google.gson.annotations.SerializedName":
-                        processGsonSerializedName(fieldInfo, annotation);
+                        if (JSONFactory.isUseGsonAnnotation()) {
+                            processGsonSerializedName(fieldInfo, annotation);
+                        }
                         break;
                     default:
                         break;

File: codegen/src/main/java/com/alibaba/fastjson2/internal/processor/CodeGenUtils.java
Patch:
@@ -326,6 +326,9 @@ public static void getFieldInfo(FieldInfo fieldInfo, JSONField jsonField, boolea
 
         for (JSONReader.Feature feature : jsonField.deserializeFeatures()) {
             fieldInfo.features |= feature.mask;
+            if (fieldInfo.ignore && feature == JSONReader.Feature.FieldBased) {
+                fieldInfo.ignore = false;
+            }
         }
 
         int ordinal = jsonField.ordinal();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1200,6 +1200,9 @@ private void getFieldInfo(FieldInfo fieldInfo, JSONField jsonField) {
 
             for (JSONReader.Feature feature : jsonField.deserializeFeatures()) {
                 fieldInfo.features |= feature.mask;
+                if (fieldInfo.ignore && feature == JSONReader.Feature.FieldBased) {
+                    fieldInfo.ignore = false;
+                }
             }
 
             int ordinal = jsonField.ordinal();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterProvider.java
Patch:
@@ -356,6 +356,7 @@ private ObjectWriter getObjectWriterInternal(Type objectType, Class objectClass,
             switch (className) {
                 case "springfox.documentation.spring.web.json.Json":
                 case "cn.hutool.json.JSONArray":
+                case "cn.hutool.json.JSONObject":
                     fieldBased = false;
                     break;
                 default:

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -4060,7 +4060,7 @@ static <T> T copy(T object, JSONWriter.Feature... features) {
         }
 
         boolean fieldBased = false, beanToArray = false;
-        long featuresValue = 0;
+        long featuresValue = JSONFactory.defaultReaderFeatures;
         for (int i = 0; i < features.length; i++) {
             JSONWriter.Feature feature = features[i];
             featuresValue |= feature.mask;
@@ -4137,7 +4137,7 @@ static <T> T copyTo(Object object, Class<T> targetClass, JSONWriter.Feature... f
         Class<?> objectClass = object.getClass();
 
         boolean fieldBased = false, beanToArray = false;
-        long featuresValue = 0;
+        long featuresValue = JSONFactory.defaultReaderFeatures;
         for (int i = 0; i < features.length; i++) {
             JSONWriter.Feature feature = features[i];
             featuresValue |= feature.mask;

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -1179,7 +1179,7 @@ public <T> T to(Function<JSONObject, T> function) {
      */
     @SuppressWarnings("unchecked")
     public <T> T to(Type type, JSONReader.Feature... features) {
-        long featuresValue = 0L;
+        long featuresValue = JSONFactory.defaultReaderFeatures;
         boolean fieldBased = false;
         for (JSONReader.Feature feature : features) {
             if (feature == JSONReader.Feature.FieldBased) {
@@ -1227,7 +1227,7 @@ public <T> T to(TypeReference<T> typeReference, JSONReader.Feature... features)
      */
     @SuppressWarnings("unchecked")
     public <T> T to(Class<T> clazz, JSONReader.Feature... features) {
-        long featuresValue = 0L;
+        long featuresValue = JSONFactory.defaultReaderFeatures;
         boolean fieldBased = false;
         for (JSONReader.Feature feature : features) {
             if (feature == JSONReader.Feature.FieldBased) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -853,7 +853,7 @@ void ensureCapacity(int minCapacity) {
                 newCapacity = minCapacity;
             }
             if (newCapacity > maxArraySize) {
-                throw new OutOfMemoryError();
+                throw new OutOfMemoryError("try enabling LargeObject feature instead");
             }
 
             // minCapacity is usually close to size, so this is a win:

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1970,7 +1970,7 @@ final void ensureCapacity(int minCapacity) {
                 newCapacity = minCapacity;
             }
             if (newCapacity - maxArraySize > 0) {
-                throw new OutOfMemoryError();
+                throw new OutOfMemoryError("try enabling LargeObject feature instead");
             }
 
             // minCapacity is usually close to size, so this is a win:

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -1996,7 +1996,7 @@ final void ensureCapacity(int minCapacity) {
                 newCapacity = minCapacity;
             }
             if (newCapacity - maxArraySize > 0) {
-                throw new OutOfMemoryError();
+                throw new OutOfMemoryError("try enabling LargeObject feature instead");
             }
 
             // minCapacity is usually close to size, so this is a win:

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -1498,7 +1498,7 @@ public static <T> T cast(Object obj, Class<T> targetClass, ObjectReaderProvider
             ObjectReader objectReader = JSONFactory
                     .getDefaultObjectReaderProvider()
                     .getObjectReader(targetClass);
-            return (T) objectReader.readObject(jsonReader, null, null, 0);
+            return (T) objectReader.readObject(jsonReader, targetClass, null, 0);
         }
 
         if (obj instanceof Collection) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFunc.java
Patch:
@@ -3,6 +3,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
+import java.util.Locale;
 import java.util.concurrent.atomic.AtomicIntegerArray;
 import java.util.concurrent.atomic.AtomicLongArray;
 import java.util.concurrent.atomic.AtomicReferenceArray;
@@ -18,14 +19,15 @@ final class FieldWriterObjectFunc<T>
             int ordinal,
             long features,
             String format,
+            Locale locale,
             String label,
             Type fieldType,
             Class fieldClass,
             Field field,
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, locale, label, fieldType, fieldClass, field, method);
         this.function = function;
         isArray = fieldClass == AtomicIntegerArray.class
                 || fieldClass == AtomicLongArray.class

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectMethod.java
Patch:
@@ -6,6 +6,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
+import java.util.Locale;
 
 class FieldWriterObjectMethod<T>
         extends FieldWriterObject<T> {
@@ -14,13 +15,14 @@ protected FieldWriterObjectMethod(
             int ordinal,
             long features,
             String format,
+            Locale locale,
             String label,
             Type fieldType,
             Class fieldClass,
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, locale, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -331,6 +331,7 @@ boolean record = BeanUtils.isRecord(objectClass);
                                 fieldInfo.ordinal,
                                 fieldInfo.features,
                                 fieldInfo.format,
+                                fieldInfo.locale,
                                 fieldInfo.label,
                                 method,
                                 writeUsingWriter

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalField.java
Patch:
@@ -19,7 +19,7 @@ final class FieldReaderBigDecimalField<T>
             BigDecimal defaultValue,
             JSONSchema schema, Field field
     ) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerField.java
Patch:
@@ -20,7 +20,7 @@ final class FieldReaderBigIntegerField<T>
             JSONSchema schema,
             Field field
     ) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolField.java
Patch:
@@ -19,7 +19,7 @@ final class FieldReaderBoolField<T>
             JSONSchema schema,
             Field field
     ) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueField.java
Patch:
@@ -20,7 +20,7 @@ final class FieldReaderBoolValueField<T>
             JSONSchema schema,
             Field field
     ) {
-        super(fieldName, boolean.class, boolean.class, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, boolean.class, boolean.class, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueField.java
Patch:
@@ -17,7 +17,7 @@ final class FieldReaderCharValueField<T>
             JSONSchema schema,
             Field field
     ) {
-        super(fieldName, char.class, char.class, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, char.class, char.class, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionFieldReadOnly.java
Patch:
@@ -21,7 +21,7 @@ final class FieldReaderCollectionFieldReadOnly<T>
             JSONSchema schema,
             Field field
     ) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, schema, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, null, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleField.java
Patch:
@@ -19,7 +19,7 @@ final class FieldReaderDoubleField<T>
             JSONSchema schema,
             Field field
     ) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueField.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderDoubleValueField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderDoubleValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Double defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatField.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderFloatField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderFloatField(String fieldName, Class fieldType, int ordinal, long features, String format, Float defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueField.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderFloatValueField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderFloatValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Float defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Field.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderInt16Field<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt16Field(String fieldName, Class fieldType, int ordinal, long features, String format, Short defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16ValueField.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderInt16ValueField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt16ValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Short defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Field.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderInt32Field<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt32Field(String fieldName, Class fieldType, int ordinal, long features, String format, Integer defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueArrayFinalField.java
Patch:
@@ -9,7 +9,7 @@
 final class FieldReaderInt32ValueArrayFinalField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt32ValueArrayFinalField(String fieldName, Class fieldType, int ordinal, long features, String format, int[] defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueField.java
Patch:
@@ -11,7 +11,7 @@
 class FieldReaderInt32ValueField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt32ValueField(String fieldName, Class fieldType, int ordinal, String format, Integer defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Field.java
Patch:
@@ -19,7 +19,7 @@ final class FieldReaderInt64Field<T>
             JSONSchema schema,
             Field field
     ) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueArrayFinalField.java
Patch:
@@ -9,7 +9,7 @@
 final class FieldReaderInt64ValueArrayFinalField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt64ValueArrayFinalField(String fieldName, Class fieldType, int ordinal, long features, String format, long[] defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueField.java
Patch:
@@ -11,7 +11,7 @@
 class FieldReaderInt64ValueField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt64ValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Long defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Field.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderInt8Field<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt8Field(String fieldName, Class fieldType, int ordinal, long features, String format, Byte defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueField.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldReaderInt8ValueField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderInt8ValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Byte defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -12,7 +12,7 @@
 class FieldReaderMapFieldReadOnly<T>
         extends FieldReaderObjectField<T> {
     FieldReaderMapFieldReadOnly(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, schema, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, null, schema, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -11,6 +11,7 @@
 import java.lang.reflect.Type;
 import java.time.LocalDate;
 import java.time.format.DateTimeFormatter;
+import java.util.Locale;
 import java.util.Map;
 
 import static com.alibaba.fastjson2.util.DateUtils.DEFAULT_ZONE_ID;
@@ -25,6 +26,7 @@ class FieldReaderObjectField<T>
             int ordinal,
             long features,
             String format,
+            Locale locale,
             Object defaultValue,
             JSONSchema schema,
             Field field
@@ -35,7 +37,7 @@ class FieldReaderObjectField<T>
                 ordinal,
                 features,
                 format,
-                null,
+                locale,
                 defaultValue,
                 schema,
                 null,

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringField.java
Patch:
@@ -13,7 +13,7 @@ class FieldReaderStringField<T>
     final boolean emptyToNull;
 
     FieldReaderStringField(String fieldName, Class fieldType, int ordinal, long features, String format, String defaultValue, JSONSchema schema, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
+        super(fieldName, fieldType, fieldType, ordinal, features, format, null, defaultValue, schema, field);
         trim = "trim".equals(format) || (features & JSONReader.Feature.TrimString.mask) != 0;
         emptyToNull = (features & JSONReader.Feature.EmptyStringAsNull.mask) != 0;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -2613,7 +2613,7 @@ public <T> FieldReader<T> createFieldReader(
         }
 
         if (initReader != null) {
-            FieldReaderObjectField fieldReader = new FieldReaderObjectField(fieldName, fieldType, fieldClass, ordinal, features | FieldInfo.READ_USING_MASK, format, defaultValue, jsonSchema, field);
+            FieldReaderObjectField fieldReader = new FieldReaderObjectField(fieldName, fieldType, fieldClass, ordinal, features | FieldInfo.READ_USING_MASK, format, locale, defaultValue, jsonSchema, field);
             fieldReader.initReader = initReader;
             return fieldReader;
         }
@@ -2832,6 +2832,7 @@ public <T> FieldReader<T> createFieldReader(
                     ordinal,
                     features,
                     format,
+                    locale,
                     defaultValue,
                     jsonSchema,
                     field);
@@ -2849,7 +2850,7 @@ public <T> FieldReader<T> createFieldReader(
             return new FieldReaderInstant(fieldName, fieldType, fieldClass, ordinal, features, format, locale, defaultValue, jsonSchema, field, null, null);
         }
 
-        return new FieldReaderObjectField(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, jsonSchema, field);
+        return new FieldReaderObjectField(fieldName, fieldType, fieldClass, ordinal, features, format, locale, defaultValue, jsonSchema, field);
     }
 
     public <T, V> FieldReader createFieldReader(

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -30,6 +30,7 @@ public abstract class FieldWriter<T>
     public final long features;
     public final int ordinal;
     public final String format;
+    public final Locale locale;
     public final DecimalFormat decimalFormat;
     public final String label;
     public final Field field;
@@ -66,6 +67,7 @@ public abstract class FieldWriter<T>
             int ordinal,
             long features,
             String format,
+            Locale locale,
             String label,
             Type fieldType,
             Class fieldClass,
@@ -79,6 +81,7 @@ public abstract class FieldWriter<T>
         this.fieldName = name;
         this.ordinal = ordinal;
         this.format = format;
+        this.locale = locale;
         this.label = label;
         this.hashCode = Fnv.hashCode64(name);
         this.features = features;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalField.java
Patch:
@@ -15,7 +15,7 @@ final class FieldWriterBigDecimalField<T>
             String label,
             Field field
     ) {
-        super(name, ordinal, features, format, label, BigDecimal.class, BigDecimal.class, field, null);
+        super(name, ordinal, features, format, null, label, BigDecimal.class, BigDecimal.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalFunc.java
Patch:
@@ -21,7 +21,7 @@ final class FieldWriterBigDecimalFunc<T>
             Method method,
             Function<T, BigDecimal> function
     ) {
-        super(fieldName, ordinal, features, format, label, BigDecimal.class, BigDecimal.class, null, method);
+        super(fieldName, ordinal, features, format, null, label, BigDecimal.class, BigDecimal.class, null, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalMethod.java
Patch:
@@ -19,7 +19,7 @@ final class FieldWriterBigDecimalMethod<T>
             Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, label, BigDecimal.class, BigDecimal.class, null, method);
+        super(fieldName, ordinal, features, format, null, label, BigDecimal.class, BigDecimal.class, null, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntField.java
Patch:
@@ -15,7 +15,7 @@ final class FieldWriterBigIntField<T>
             String label,
             Field field
     ) {
-        super(name, ordinal, features, format, label, BigInteger.class, BigInteger.class, field, null);
+        super(name, ordinal, features, format, null, label, BigInteger.class, BigInteger.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntFunc.java
Patch:
@@ -21,7 +21,7 @@ final class FieldWriterBigIntFunc<T>
             Method method,
             Function<T, BigInteger> function
     ) {
-        super(fieldName, ordinal, features, format, label, BigInteger.class, BigInteger.class, null, method);
+        super(fieldName, ordinal, features, format, null, label, BigInteger.class, BigInteger.class, null, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolean.java
Patch:
@@ -29,7 +29,7 @@ abstract class FieldWriterBoolean
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
         {
             byte[] bytes = Arrays.copyOf(nameWithColonUTF8, nameWithColonUTF8.length + 4);
             bytes[nameWithColonUTF8.length] = 't';

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharMethod.java
Patch:
@@ -21,7 +21,7 @@ final class FieldWriterCharMethod<T>
             Method method,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, field, method);
+        super(fieldName, ordinal, features, format, null, label, fieldClass, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValField.java
Patch:
@@ -17,7 +17,7 @@ final class FieldWriterCharValField<T>
             String label,
             Field field
     ) {
-        super(name, ordinal, features, format, label, char.class, char.class, field, null);
+        super(name, ordinal, features, format, null, label, char.class, char.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValFunc.java
Patch:
@@ -20,7 +20,7 @@ final class FieldWriterCharValFunc
             Method method,
             ToCharFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, char.class, char.class, field, method);
+        super(fieldName, ordinal, features, format, null, label, char.class, char.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -32,7 +32,7 @@ protected FieldWriterDate(
             Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(fieldName, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
 
         boolean formatMillis = false, formatISO8601 = false, formatUnixTime = false;
         boolean formatyyyyMMdd8 = false, formatyyyyMMddhhmmss14 = false, formatyyyyMMddhhmmss19 = false;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleField.java
Patch:
@@ -17,7 +17,7 @@ protected FieldWriterDoubleField(
             String label,
             Field field
     ) {
-        super(name, ordinal, features, format, label, Double.class, Double.class, field, null);
+        super(name, ordinal, features, format, null, label, Double.class, Double.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleFunc.java
Patch:
@@ -20,7 +20,7 @@ final class FieldWriterDoubleFunc<T>
             Method method,
             Function<T, Double> function
     ) {
-        super(fieldName, ordinal, features, format, label, Double.class, Double.class, field, method);
+        super(fieldName, ordinal, features, format, null, label, Double.class, Double.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleMethod.java
Patch:
@@ -21,7 +21,7 @@ protected FieldWriterDoubleMethod(
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValField.java
Patch:
@@ -10,7 +10,7 @@
 final class FieldWriterDoubleValField<T>
         extends FieldWriter<T> {
     FieldWriterDoubleValField(String name, int ordinal, String format, String label, Field field) {
-        super(name, ordinal, 0, format, label, double.class, double.class, field, null);
+        super(name, ordinal, 0, format, null, label, double.class, double.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValueFunc.java
Patch:
@@ -20,7 +20,7 @@ final class FieldWriterDoubleValueFunc
             Method method,
             ToDoubleFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, double.class, double.class, field, method);
+        super(fieldName, ordinal, features, format, null, label, double.class, double.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnum.java
Patch:
@@ -36,7 +36,7 @@ protected FieldWriterEnum(
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, enumClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, enumClass, field, method);
 
         this.enumType = enumClass;
         this.enumConstants = enumClass.getEnumConstants();

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatField.java
Patch:
@@ -17,7 +17,7 @@ protected FieldWriterFloatField(
             String label,
             Field field
     ) {
-        super(name, ordinal, features, format, label, Float.class, Float.class, field, null);
+        super(name, ordinal, features, format, null, label, Float.class, Float.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatFunc.java
Patch:
@@ -20,7 +20,7 @@ final class FieldWriterFloatFunc<T>
             Method method,
             Function<T, Float> function
     ) {
-        super(fieldName, ordinal, features, format, label, Float.class, Float.class, field, method);
+        super(fieldName, ordinal, features, format, null, label, Float.class, Float.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatMethod.java
Patch:
@@ -21,7 +21,7 @@ protected FieldWriterFloatMethod(
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValField.java
Patch:
@@ -17,7 +17,7 @@ final class FieldWriterFloatValField<T>
             String label,
             Field field
     ) {
-        super(name, ordinal, features, format, label, float.class, float.class, field, null);
+        super(name, ordinal, features, format, null, label, float.class, float.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValueFunc.java
Patch:
@@ -20,7 +20,7 @@ final class FieldWriterFloatValueFunc
             Method method,
             ToFloatFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, float.class, float.class, field, method);
+        super(fieldName, ordinal, features, format, null, label, float.class, float.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16.java
Patch:
@@ -17,7 +17,7 @@ abstract class FieldWriterInt16<T>
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldClass, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldClass, fieldClass, field, method);
     }
 
     protected final void writeInt16(JSONWriter jsonWriter, short value) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32.java
Patch:
@@ -23,7 +23,7 @@ protected FieldWriterInt32(
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
         toString = (features & WriteNonStringValueAsString.mask) != 0
                 || "string".equals(format);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64.java
Patch:
@@ -22,7 +22,7 @@ abstract class FieldWriterInt64<T>
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldClass, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldClass, fieldClass, field, method);
         browserCompatible = (features & JSONWriter.Feature.BrowserCompatible.mask) != 0;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8.java
Patch:
@@ -17,7 +17,7 @@ abstract class FieldWriterInt8<T>
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldClass, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldClass, fieldClass, field, method);
     }
 
     protected final void writeInt8(JSONWriter jsonWriter, byte value) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterList.java
Patch:
@@ -32,7 +32,7 @@ abstract class FieldWriterList<T>
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
 
         this.itemType = itemType == null ? Object.class : itemType;
         if (this.itemType instanceof Class) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListStrFunc.java
Patch:
@@ -26,7 +26,7 @@ final class FieldWriterListStrFunc<T>
             Type fieldType,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(fieldName, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -37,13 +37,14 @@ protected FieldWriterObject(
             int ordinal,
             long features,
             String format,
+            Locale locale,
             String label,
             Type fieldType,
             Class fieldClass,
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, locale, label, fieldType, fieldClass, field, method);
         this.unwrapped = (features & FieldInfo.UNWRAPPED_MASK) != 0;
 
         if (fieldClass == Currency.class) {
@@ -144,7 +145,7 @@ private ObjectWriter getObjectWriterVoid(JSONWriter jsonWriter, Class valueClass
         }
 
         if (formattedWriter == null) {
-            formattedWriter = FieldWriter.getObjectWriter(fieldType, fieldClass, format, null, valueClass);
+            formattedWriter = FieldWriter.getObjectWriter(fieldType, fieldClass, format, locale, valueClass);
         }
 
         if (formattedWriter == null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayField.java
Patch:
@@ -26,7 +26,7 @@ final class FieldWriterObjectArrayField<T>
             Class fieldClass,
             Field field
     ) {
-        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, field, null);
+        super(fieldName, ordinal, features, format, null, label, fieldType, fieldClass, field, null);
         this.itemType = itemType;
         if (itemType instanceof Class) {
             itemClass = (Class) itemType;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayMethod.java
Patch:
@@ -30,7 +30,7 @@ final class FieldWriterObjectArrayMethod<T>
             Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(fieldName, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
         this.itemType = itemType;
         if (itemType instanceof Class) {
             itemClass = (Class) itemType;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFinal.java
Patch:
@@ -26,7 +26,7 @@ protected FieldWriterObjectFinal(
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
         this.fieldType = fieldType;
         this.fieldClass = fieldClass;
         this.refDetect = !ObjectWriterProvider.isNotReferenceDetect(fieldClass);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFunc.java
Patch:
@@ -25,7 +25,7 @@ final class FieldWriterObjectFunc<T>
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
         this.function = function;
         isArray = fieldClass == AtomicIntegerArray.class
                 || fieldClass == AtomicLongArray.class

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectMethod.java
Patch:
@@ -20,7 +20,7 @@ protected FieldWriterObjectMethod(
             Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
+        super(name, ordinal, features, format, null, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringField.java
Patch:
@@ -14,7 +14,7 @@ final class FieldWriterStringField<T>
             String label,
             Field field
     ) {
-        super(fieldName, ordinal, features, format, label, String.class, String.class, field, null);
+        super(fieldName, ordinal, features, format, null, label, String.class, String.class, field, null);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringFunc.java
Patch:
@@ -24,7 +24,7 @@ final class FieldWriterStringFunc<T>
             Method method,
             Function<T, String> function
     ) {
-        super(fieldName, ordinal, features, format, label, String.class, String.class, field, method);
+        super(fieldName, ordinal, features, format, null, label, String.class, String.class, field, method);
         this.function = function;
         this.symbol = "symbol".equals(format);
         this.trim = "trim".equals(format);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringMethod.java
Patch:
@@ -18,7 +18,7 @@ final class FieldWriterStringMethod<T>
             Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, label, String.class, String.class, field, method);
+        super(fieldName, ordinal, features, format, null, label, String.class, String.class, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -1227,7 +1227,7 @@ public String readReference() {
         throw new JSONException("reference not support input " + error(type));
     }
 
-    public boolean readReference(List list, int i) {
+    public boolean readReference(Collection list, int i) {
         if (bytes[offset] != BC_REFERENCE) {
             return false;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderList.java
Patch:
@@ -97,7 +97,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     break;
                 }
 
-                if (jsonReader.readReference((List) list, i)) {
+                if (jsonReader.readReference(list, i)) {
                     continue;
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -217,6 +217,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {
                 Class<?> serializer = jsonType.serializer();
                 if (ObjectWriter.class.isAssignableFrom(serializer)) {
                     beanInfo.serializer = serializer;
+                    beanInfo.writeEnumAsJavaBean = true;
                 }
 
                 Class<? extends Filter>[] serializeFilters = jsonType.serializeFilters();

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -4294,7 +4294,7 @@ public static boolean isJavaScriptSupport(long i) {
     }
 
     public static boolean isJavaScriptSupport(BigDecimal i) {
-        return i.compareTo(DECIMAL_JAVASCRIPT_LOW) >= 0 && i.compareTo(DECIMAL_JAVASCRIPT_HIGH) <= 0;
+        return i.precision() >= 16 && isJavaScriptSupport(i.unscaledValue());
     }
 
     public static boolean isJavaScriptSupport(BigInteger i) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplList.java
Patch:
@@ -192,7 +192,6 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             } else if (itemClass == previousClass) {
                 itemObjectWriter = previousObjectWriter;
             } else {
-
                 if (itemClass == JSONObject.class) {
                     itemObjectWriter = ObjectWriterImplMap.INSTANCE;
                 } else if (itemClass == CLASS_JSON_OBJECT_1x) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplList.java
Patch:
@@ -192,7 +192,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             } else if (itemClass == previousClass) {
                 itemObjectWriter = previousObjectWriter;
             } else {
-//                refDetect = jsonWriter.isRefDetect();
+                refDetect = jsonWriter.isRefDetect();
 
                 if (itemClass == JSONObject.class) {
                     itemObjectWriter = ObjectWriterImplMap.INSTANCE;

File: core/src/test/java/com/alibaba/fastjson2/issues_2200/Issue2279.java
Patch:
@@ -17,7 +17,7 @@ public void test01() {
         byte[] bytes = JSONB.toBytes(result, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ErrorOnNoneSerializable, JSONWriter.Feature.ReferenceDetection, JSONWriter.Feature.WriteNulls, JSONWriter.Feature.NotWriteDefaultValue, JSONWriter.Feature.NotWriteHashMapArrayListClassName, JSONWriter.Feature.WriteNameAsSymbol);
         ParameterizedTypeImpl parameterizedType = new ParameterizedTypeImpl(Map.class, Integer.class, new ParameterizedTypeImpl(List.class, Integer.class));
         Map<Integer, List<Integer>> o = JSONB.parseObject(bytes, parameterizedType);
-        Integer i = o.get(1).get(0);
+        Integer i = o.get(2).get(0);
         Assert.assertEquals(-1, (int) i);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues_2200/Issue2279.java
Patch:
@@ -18,6 +18,6 @@ public void test01() {
         ParameterizedTypeImpl parameterizedType = new ParameterizedTypeImpl(Map.class, Integer.class, new ParameterizedTypeImpl(List.class, Integer.class));
         Map<Integer, List<Integer>> o = JSONB.parseObject(bytes, parameterizedType);
         Integer i = o.get(1).get(0);
-        Assert.assertEquals(-1,(int) i);
+        Assert.assertEquals(-1, (int) i);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -187,6 +187,7 @@ public final String setPath(int index, Object object) {
         if ((context.features & ReferenceDetection.mask) == 0
                 || object == Collections.EMPTY_LIST
                 || object == Collections.EMPTY_SET
+                || (object != null && ObjectWriterProvider.isNotReferenceDetect(object.getClass()))
         ) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplList.java
Patch:
@@ -192,7 +192,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             } else if (itemClass == previousClass) {
                 itemObjectWriter = previousObjectWriter;
             } else {
-                refDetect = jsonWriter.isRefDetect();
+//                refDetect = jsonWriter.isRefDetect();
 
                 if (itemClass == JSONObject.class) {
                     itemObjectWriter = ObjectWriterImplMap.INSTANCE;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -576,7 +576,7 @@ protected <T> ObjectReader<T> createObjectReaderWithCreator(
                 provider.getFieldInfo(methodFieldInfo, objectClass, method);
                 String methodFieldName = methodFieldInfo.fieldName;
                 if (methodFieldName == null) {
-                    methodFieldName = BeanUtils.getterName(method, PropertyNamingStrategy.CamelCase.name());
+                    methodFieldName = BeanUtils.getterName(method, beanInfo.kotlin, PropertyNamingStrategy.CamelCase.name());
                 }
 
                 if (methodFieldInfo.readUsing != null && finalFieldName.equals(methodFieldName)
@@ -1416,7 +1416,7 @@ protected void createFieldReader(
             if (methodName.startsWith("set")) {
                 fieldName = BeanUtils.setterName(methodName, namingStrategy);
             } else {
-                fieldName = BeanUtils.getterName(method, namingStrategy);
+                fieldName = BeanUtils.getterName(method, beanInfo.kotlin, namingStrategy);
             }
 
             char c0 = '\0', c1;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -774,7 +774,7 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
                     && beanInfo.creatorConstructor != null
                     && beanInfo.createParameterNames != null
             ) {
-                String fieldName = BeanUtils.getterName(method, null);
+                String fieldName = BeanUtils.getterName(method, beanInfo.kotlin, null);
                 for (int i = 0; i < beanInfo.createParameterNames.length; i++) {
                     if (fieldName.equals(beanInfo.createParameterNames[i])) {
                         Annotation[][] creatorConsParamAnnotations

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -584,7 +584,7 @@ protected static String getFieldName(
             if (record) {
                 fieldName = method.getName();
             } else {
-                fieldName = BeanUtils.getterName(method, beanInfo.namingStrategy);
+                fieldName = BeanUtils.getterName(method, beanInfo.kotlin, beanInfo.namingStrategy);
 
                 Field field;
                 if ((provider.userDefineMask & NAME_COMPATIBLE_WITH_FILED) != 0
@@ -871,7 +871,7 @@ public <T> FieldWriter<T> createFieldWriter(
         }
 
         if (fieldName == null) {
-            fieldName = BeanUtils.getterName(method, null);
+            fieldName = BeanUtils.getterName(method, false, null);
         }
 
         Field field = BeanUtils.getField(objectType, method);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -2524,6 +2524,9 @@ public <T> FieldReader<T> createFieldReader(
             Field field,
             ObjectReader initReader
     ) {
+        if (defaultValue instanceof String && fieldClass.isEnum()) {
+            defaultValue = Enum.valueOf(fieldClass, (String) defaultValue);
+        }
         if (defaultValue != null && defaultValue.getClass() != fieldClass) {
             ObjectReaderProvider provider = JSONFactory
                     .getDefaultObjectReaderProvider();

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest37_MapBean.java
Patch:
@@ -37,7 +37,7 @@ public void test_1() throws Exception {
 
         JSONB.dump(bytes);
 
-        assertEquals(144, bytes.length);
+        assertEquals(186, bytes.length);
         // 142 200 202 216 141 151 144
 
         Bean bean2 = (Bean) JSONB.parseObject(

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -1647,7 +1647,7 @@ boolean record = BeanUtils.isRecord(objectClass);
             }
 
             Class mixIn = provider.getMixIn(objectClass);
-            BeanUtils.setters(objectClass, mixIn, method -> {
+            BeanUtils.setters(objectClass, beanInfo, mixIn, method -> {
                 fieldInfo.init();
                 fieldInfo.features |= beanFeatures;
                 fieldInfo.format = beanFormat;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -365,9 +365,9 @@ public final String readReference() {
         if (chars == null || chars.length < length) {
             chars = new char[Math.max(length, 8192)];
         }
-        str.getChars(offset, length, chars, 0);
+        str.getChars(offset, offset + length, chars, 0);
 
-        this.str = str;
+        this.str = offset == 0 ? str : null;
         this.chars = chars;
         this.offset = 0;
         this.length = length;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -126,6 +126,7 @@ protected void processExtra(JSONReader jsonReader, Object object) {
         if ((jsonReader.features(features) & JSONReader.Feature.ErrorOnUnknownProperties.mask) != 0) {
             throw new JSONException("Unknown Property " + jsonReader.getFieldName());
         }
+
         jsonReader.skipValue();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -279,7 +279,9 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
                 }
                 continue;
             }
-
+            if (jsonReader.nextIfNull()) {
+                continue;
+            }
             FieldReader fieldReader = getFieldReader(hashCode);
             FieldReader paramReader = paramFieldReaderMap.get(hashCode);
             if (paramReader != null

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -767,7 +767,7 @@ public void writeStringUTF16(byte[] value) {
         this.off = off + strlen;
     }
 
-    private boolean tryWriteStringUTF16(byte[] value) {
+    protected boolean tryWriteStringUTF16(byte[] value) {
         int check_cnt = 128;
         if (check_cnt > value.length) {
             check_cnt = value.length;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOffsetDateTime.java
Patch:
@@ -40,7 +40,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
 
         if (jsonReader.isInt()) {
             long millis = jsonReader.readInt64Value();
-            if (formatUnixTime) {
+            if (formatUnixTime || context.isFormatUnixTime()) {
                 millis *= 1000;
             }
 
@@ -81,7 +81,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                     LocalDate.of(1970, 1, 1),
                     LocalTime.parse(str, formatter),
                     zoneId
-            );
+            ).toOffsetDateTime();
         }
         LocalDateTime ldt = LocalDateTime.parse(str, formatter);
         return OffsetDateTime.of(ldt, zoneId.getRules().getOffset(ldt));

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONFieldTest.java
Patch:
@@ -40,7 +40,7 @@ public void test_format_iso8601_method() {
         ObjectWriterCreator[] creators = TestUtils.writerCreators();
 
         VO_Method vo = new VO_Method();
-        vo.date = 0;
+        vo.date = 1000;
 
         for (ObjectWriterCreator creator : creators) {
             ObjectWriter<VO_Method> objectWriter = creator
@@ -51,9 +51,9 @@ public void test_format_iso8601_method() {
 
             int rawOffset = TimeZone.getDefault().getRawOffset();
             if (rawOffset == 0) {
-                assertEquals("{\"date\":\"1970-01-01T00:00:00Z\"}", jsonWriter.toString());
+                assertEquals("{\"date\":\"1970-01-01T00:00:01Z\"}", jsonWriter.toString());
             } else {
-                assertEquals("{\"date\":\"1970-01-01T08:00:00+08:00\"}", jsonWriter.toString());
+                assertEquals("{\"date\":\"1970-01-01T08:00:01+08:00\"}", jsonWriter.toString());
             }
         }
     }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue389.java
Patch:
@@ -29,7 +29,9 @@ public void test() {
         assertNull(JSON.parse(""));
         assertNull(JSON.parse((String) null, JSONReader.Feature.SupportSmartMatch));
         assertNull(JSON.parse("", JSONReader.Feature.SupportSmartMatch));
-        assertNull(JSON.parse(null, (JSONReader.Context) null));
+        assertNull(JSON.parse((String) null, (JSONReader.Context) null));
+        assertNull(JSON.parse((InputStream) null, null));
+        assertNull(JSON.parseObject(null, StandardCharsets.ISO_8859_1, null));
         assertNull(JSON.parse("", (JSONReader.Context) null));
 
         assertNull(JSON.parse((byte[]) null));

File: core/src/main/java/com/alibaba/fastjson2/util/JDKUtils.java
Patch:
@@ -69,16 +69,16 @@ public class JDKUtils {
     static final AtomicInteger reflectErrorCount = new AtomicInteger();
 
     static {
-        Unsafe unsafe = null;
-        long offset = -1, charOffset = -1;
+        Unsafe unsafe;
+        long offset, charOffset;
         try {
             Field theUnsafeField = Unsafe.class.getDeclaredField("theUnsafe");
             theUnsafeField.setAccessible(true);
             unsafe = (Unsafe) theUnsafeField.get(null);
             offset = unsafe.arrayBaseOffset(byte[].class);
             charOffset = unsafe.arrayBaseOffset(char[].class);
         } catch (Throwable e) {
-            initErrorLast = e;
+            throw new JSONException("init unsafe error");
         }
 
         UNSAFE = unsafe;

File: core/src/main/java/com/alibaba/fastjson2/codec/DateTimeCodec.java
Patch:
@@ -20,6 +20,7 @@ public abstract class DateTimeCodec {
     protected final boolean yyyyMMddhhmmss14;
     protected final boolean yyyyMMdd10;
     protected final boolean yyyyMMdd8;
+    protected final boolean useSimpleDateFormat;
 
     DateTimeFormatter dateFormatter;
 
@@ -39,6 +40,7 @@ public DateTimeCodec(String format, Locale locale) {
         this.yyyyMMddhhmm16 = "yyyy-MM-dd HH:mm".equals(format);
         this.yyyyMMdd10 = "yyyy-MM-dd".equals(format);
         this.yyyyMMdd8 = "yyyyMMdd".equals(format);
+        this.useSimpleDateFormat = "yyyy-MM-dd'T'HH:mm:ssXXX".equals(format);
 
         boolean formatUnixTime = false, formatISO8601 = false, formatMillis = false, hasDay = false, hasHour = false;
         if (format != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -2888,6 +2888,7 @@ private <T> int genReadFieldValue(
             }
 
             boolean list = List.class.isAssignableFrom(fieldClass)
+                    && fieldReader.getInitReader() == null
                     && !fieldClass.getName().startsWith("com.google.common.collect.Immutable");
 
             if (list) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -216,8 +216,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                         value = jsonReader.readBoolValue();
                         break;
                     case 'n':
-                        jsonReader.readNull();
-                        value = null;
+                        value = jsonReader.readNullOrNewDate();
                         break;
                     case 'S':
                         if (jsonReader.nextIfSet()) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1831,7 +1831,7 @@ public final void writeInt64(long i) {
     @Override
     public final void writeInt64(Long i) {
         if (i == null) {
-            writeNumberNull();
+            writeInt64Null();
         } else {
             writeInt64(i.longValue());
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -2335,7 +2335,7 @@ private void gwInt64(
         gwFieldName(mwc, fieldWriter, i);
 
         mw.visitVarInsn(Opcodes.ALOAD, JSON_WRITER);
-        mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_WRITER, "writeNumberNull", "()V", false);
+        mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_WRITER, "writeInt64Null", "()V", false);
 
         mw.visitJumpInsn(Opcodes.GOTO, endIfNull_);
 

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -56,6 +56,7 @@ public abstract class BeanUtils {
             1616814008855344660L,
             2164749833121980361L,
             3724195282986200606L,
+            3742915795806478647L,
             3977020351318456359L,
             4882459834864833642L,
             7981148566008458638L,
@@ -869,7 +870,7 @@ boolean record = isRecord(objectClass);
             }
 
             Class<?> returnClass = method.getReturnType();
-            if (returnClass == Void.class) {
+            if (returnClass == Void.class || ignore(returnClass)) {
                 continue;
             }
 

File: core/src/test/java/com/alibaba/fastjson2/util/BeanUtilsTest.java
Patch:
@@ -301,7 +301,8 @@ public void buildIgnores() {
                 "org.apache.xalan.xsltc.trax.TransformerFactoryImpl",
                 "org.apache.commons.collections.functors.ChainedTransformer",
                 "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor",
-                "sun.nio.ch.FileChannelImpl"
+                "sun.nio.ch.FileChannelImpl",
+                "java.io.InputStream"
         };
 
         long[] hashCodes = new long[names.length];

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -6468,10 +6468,10 @@ public final boolean readBoolValue() {
 
     @Override
     public final String info(String message) {
-        int line = 1, column = 1;
+        int line = 1, column = 0;
         for (int i = 0; i < offset & i < end; i++, column++) {
             if (chars[i] == '\n') {
-                column = 1;
+                column = 0;
                 line++;
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -8850,10 +8850,10 @@ public final boolean readBoolValue() {
 
     @Override
     public final String info(String message) {
-        int line = 1, column = 1;
+        int line = 1, column = 0;
         for (int i = 0; i < offset && i < end; i++, column++) {
             if (bytes[i] == '\n') {
-                column = 1;
+                column = 0;
                 line++;
             }
         }

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderInfoTest.java
Patch:
@@ -25,7 +25,7 @@ public void test0() {
         assertTrue(error.getMessage().contains("offset 33"));
         assertTrue(error.getMessage().contains("character {"));
         assertTrue(error.getMessage().contains("line 3"));
-        assertTrue(error.getMessage().contains("column 19"));
+        assertTrue(error.getMessage().contains("column 18"));
     }
 
     @Test
@@ -46,6 +46,6 @@ public void testUTF8() {
         assertTrue(error.getMessage().contains("offset 33"));
         assertTrue(error.getMessage().contains("character {"));
         assertTrue(error.getMessage().contains("line 3"));
-        assertTrue(error.getMessage().contains("column 19"));
+        assertTrue(error.getMessage().contains("column 18"));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderList.java
Patch:
@@ -139,7 +139,9 @@ public void readFieldValue(JSONReader jsonReader, T object) {
     public Object readFieldValue(JSONReader jsonReader) {
         if (jsonReader.jsonb) {
             int entryCnt = jsonReader.startArray();
-
+            if (entryCnt == -1) {
+                return null;
+            }
             Object[] array = new Object[entryCnt];
             ObjectReader itemObjectReader
                     = getItemObjectReader(

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterAdapter.java
Patch:
@@ -643,7 +643,8 @@ public JSONObject toJSONObject(T object, long features) {
             if (fieldValue != null) {
                 String fieldValueClassName = fieldValue.getClass().getName();
                 if (Collection.class.isAssignableFrom(fieldClass)
-                        && (fieldValueClassName.startsWith("java.util.ImmutableCollections$") || fieldValueClassName.startsWith("java.util.Collections$"))
+                        && fieldValue.getClass() != JSONObject.class
+                        && !fieldValueClassName.equals("com.alibaba.fastjson.JSONObject")
                 ) {
                     Collection collection = (Collection) fieldValue;
                     JSONArray array = new JSONArray(collection.size());

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader.java
Patch:
@@ -11,6 +11,7 @@
 @SuppressWarnings({"rawtypes", "unchecked"})
 public interface ObjectReader<T> {
     long HASH_TYPE = Fnv.hashCode64("@type");
+    String VALUE_NAME = "@value";
 
     /**
      * @return {@link T}

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -179,7 +179,7 @@ protected final ObjectReader checkAutoType0(JSONReader jsonReader, long features
                 String typeName = jsonReader.getString();
                 filterClass = autoTypeFilter.apply(typeName, expectClass, features);
 
-                if (!expectClass.isAssignableFrom(filterClass)) {
+                if (filterClass != null && !expectClass.isAssignableFrom(filterClass)) {
                     if ((jsonReader.features(features) & IgnoreAutoTypeNotMatch.mask) == 0) {
                         throw notMatchError();
                     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -36,6 +36,9 @@ public ObjectReaderImplEnum(
     ) {
         this.enumClass = enumClass;
         this.createMethod = createMethod;
+        if (valueField instanceof AccessibleObject) {
+            ((AccessibleObject) valueField).setAccessible(true);
+        }
         this.valueField = valueField;
         Type valueFieldType = null;
         if (valueField instanceof Field) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -588,7 +588,8 @@ public boolean sameTo(FieldReader other) {
     }
 
     public boolean belongTo(Class clazz) {
-        return (this.field != null && this.field.getDeclaringClass() == clazz) || (this.method != null && this.method.getDeclaringClass() == clazz);
+        return (this.field != null && this.field.getDeclaringClass() == clazz)
+                || (this.method != null && this.method.getDeclaringClass().isAssignableFrom(clazz));
     }
 
     private String getActualFieldName(FieldReader fieldReader) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2112,6 +2112,9 @@ public void read(Map object, long features) {
                     if ((context.features & Feature.NonStringKeyAsString.mask) != 0) {
                         name = name.toString();
                     }
+                    if (comma) {
+                        throw new JSONException(info("syntax error, illegal key-value"));
+                    }
                 } else {
                     if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0) {
                         name = readFieldNameUnquote();

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -3492,12 +3492,12 @@ static Object toJSON(Object object, JSONWriter.Feature... features) {
         ObjectWriter<?> objectWriter = writeContext.getObjectWriter(valueClass, valueClass);
         if (objectWriter instanceof ObjectWriterAdapter && !writeContext.isEnabled(JSONWriter.Feature.ReferenceDetection)) {
             ObjectWriterAdapter objectWriterAdapter = (ObjectWriterAdapter) objectWriter;
-            return objectWriterAdapter.toJSONObject(object);
+            return objectWriterAdapter.toJSONObject(object,writeContext.features);
         }
 
         String str;
         try (JSONWriter writer = JSONWriter.of(writeContext)) {
-            objectWriter.write(writer, object, null, null, 0);
+            objectWriter.write(writer, object, null, null, writeContext.features);
             str = writer.toString();
         } catch (NullPointerException | NumberFormatException ex) {
             throw new JSONException("toJSONString error", ex);

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -491,7 +491,8 @@ public static <T> T parseObject(String str, Class<T> objectClass, ParseProcess p
 
     @SuppressWarnings("unchecked")
     public static <T> T parseObject(String str, TypeReference<T> typeReference, Feature... features) {
-        return (T) parseObject(str, typeReference.getType(), features);
+        Type type = typeReference != null ? typeReference.getType() : Object.class;
+        return (T) parseObject(str, type, features);
     }
 
     public static <T> T parseObject(String input, Type clazz, int featureValues, Feature... features) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONObject.java
Patch:
@@ -253,6 +253,9 @@ public <T> T getObject(String key, Class<T> clazz, Feature... features) {
 
     public <T> T getObject(String key, TypeReference typeReference) {
         Object obj = map.get(key);
+        if (obj == null) {
+            return null;
+        }
         if (typeReference == null) {
             return (T) obj;
         }

File: core/src/test/java/com/alibaba/fastjson2/issues_2100/Issue2145.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 
 public class Issue2145 {
-
     @Test
     public void test() {
         String testJson = "{\"key2\": [null, null, null, null, null, null]}";

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -227,7 +227,7 @@ public final boolean isReference() {
             ch = chars[offset];
         }
 
-        if (ch != quote) {
+        if (ch != quote || (offset + 1 < end && chars[offset + 1] == '#')) {
             return false;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -8632,7 +8632,7 @@ public boolean isReference() {
             ch = bytes[offset];
         }
 
-        if (ch != quote) {
+        if (ch != quote || (offset + 1 < end && bytes[offset + 1] == '#')) {
             return false;
         }
 

File: core/src/test/java/com/alibaba/fastjson2/issues_2100/Issue2128.java
Patch:
@@ -11,7 +11,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Issue2128 {
-
     @Test
     public void testWithUTF8() {
         String str = "{\"amt\":-22.1400000000000005684341886080801486968994140625}";

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4745,10 +4745,12 @@ public final void readNumber0() {
 
         if (intOverflow) {
             int numStart = negative ? start : start - 1;
-
             int numDigits = scale > 0 ? offset - 2 - numStart : offset - 1 - numStart;
             if (numDigits > 38) {
                 valueType = JSON_TYPE_BIG_DEC;
+                if (negative) {
+                    numStart--;
+                }
                 stringValue = new String(chars, numStart, offset - 1 - numStart);
             } else {
                 bigInt(chars, numStart, offset - 1);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -6414,6 +6414,9 @@ public final void readNumber0() {
             int numDigits = scale > 0 ? offset - 2 - numStart : offset - 1 - numStart;
             if (numDigits > 38) {
                 valueType = JSON_TYPE_BIG_DEC;
+                if (negative) {
+                    numStart--;
+                }
                 stringValue = new String(bytes, numStart, offset - 1 - numStart);
             } else {
                 bigInt(bytes, numStart, offset - 1);

File: extension/src/main/moditect/module-info.java
Patch:
@@ -1,6 +1,6 @@
 // https://www.oracle.com/corporate/features/understanding-java-9-modules.html
 
-open module com.alibaba.fastjson2 {
+open module com.alibaba.fastjson2.extension {
     requires transitive jdk.unsupported;
     requires java.management;
     requires com.alibaba.fastjson2;

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2347,8 +2347,7 @@ public Map<String, Object> readObject() {
                     val = readBoolValue();
                     break;
                 case 'n':
-                    readNull();
-                    val = null;
+                    val = readNullOrNewDate();
                     break;
                 case '/':
                     skipComment();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -374,7 +374,7 @@ boolean record = BeanUtils.isRecord(objectClass);
 
                 Class mixIn = provider.getMixIn(objectClass);
 
-                BeanUtils.getters(objectClass, mixIn, method -> {
+                BeanUtils.getters(objectClass, mixIn, beanInfo.kotlin, method -> {
                     fieldInfo.init();
                     fieldInfo.features = writerFieldFeatures;
                     fieldInfo.format = beanInfo.format;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -230,7 +230,7 @@ boolean record = BeanUtils.isRecord(objectClass);
                 }
 
                 Class mixIn = provider.getMixIn(objectClass);
-                BeanUtils.getters(objectClass, mixIn, method -> {
+                BeanUtils.getters(objectClass, mixIn, beanInfo.kotlin, method -> {
                     fieldInfo.init();
                     fieldInfo.features |= writerFieldFeatures;
                     fieldInfo.format = beanInfo.format;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -847,7 +847,7 @@ static ObjectWriter getObjectWriter(
     ) {
         if (Map.class.isAssignableFrom(valueClass)) {
             if (fieldClass.isAssignableFrom(valueClass)) {
-                return ObjectWriterImplMap.of(fieldType, valueClass);
+                return ObjectWriterImplMap.of(fieldType, format, valueClass);
             } else {
                 return ObjectWriterImplMap.of(valueClass);
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -105,7 +105,7 @@ public static ObjectReader of(Type type, Class listClass, long features) {
             instanceClass = ArrayList.class;
             builder = (Object obj) -> Collections.singletonList(((List) obj).get(0));
         } else if (listClass == CLASS_ARRAYS_LIST) {
-            instanceClass = ArrayList.class;
+            instanceClass = CLASS_ARRAYS_LIST;
             builder = (Object obj) -> Arrays.asList(((List) obj).toArray());
         } else if (listClass == CLASS_UNMODIFIABLE_COLLECTION) {
             instanceClass = ArrayList.class;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1286,6 +1286,7 @@ private void getCreator(BeanInfo beanInfo, Class<?> objectClass, Constructor con
 
             switch (annotationType.getName()) {
                 case "com.alibaba.fastjson.annotation.JSONCreator":
+                case "com.alibaba.fastjson2.annotation.JSONCreator":
                     creatorMethod = true;
                     BeanUtils.annotationMethods(annotationType, m1 -> {
                         try {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1284,7 +1284,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
         boolean writeAsString = isWriteAsString(value, features);
 
         int off = this.off;
-        int minCapacity = off + precision + 7;
+        int minCapacity = off + precision + value.scale() + 7;
         if (minCapacity >= chars.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -2781,7 +2781,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
         boolean writeAsString = isWriteAsString(value, features);
 
         int off = this.off;
-        int minCapacity = off + precision + 7;
+        int minCapacity = off + precision + value.scale() + 7;
         if (minCapacity >= bytes.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -564,6 +564,7 @@ final char char1(int c) {
             case '(':
             case ')':
             case '_':
+            case ',':
                 return (char) c;
             default:
                 throw new JSONException(info("unclosed.str '\\" + (char) c));

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -1240,6 +1240,7 @@ public final long readFieldNameHashCodeUnquote() {
                         case '=':
                         case '@':
                         case ':':
+                        case ',':
                             break;
                         default:
                             ch = char1(ch);
@@ -1973,6 +1974,7 @@ public final String getFieldName() {
                     case '=':
                     case '@':
                     case ':':
+                    case ',':
                         break;
                     default:
                         c = char1(c);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -2071,6 +2071,7 @@ public String toString() {
                                 case '\\':
                                 case '"':
                                 case '\'':
+                                case ',':
                                     if (off + 1 >= buf.length) {
                                         int newCapacity = buf.length + (buf.length >> 1);
                                         buf = Arrays.copyOf(buf, newCapacity);
@@ -2184,6 +2185,7 @@ public String toString() {
                                 case '\\':
                                 case '"':
                                 case '\'':
+                                case ',':
                                     if (off + 1 >= buf.length) {
                                         int newCapacity = buf.length + (buf.length >> 1);
                                         buf = Arrays.copyOf(buf, newCapacity);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -6136,7 +6136,7 @@ public String readString() {
                         }
                         chars[i] = (char) c;
                         offset++;
-                    } else if (c == '"') {
+                    } else if (c == quote) {
                         break;
                     } else {
                         if (c >= 0) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/JSONSerializer.java
Patch:
@@ -121,7 +121,7 @@ public final void write(Object object) {
 
     public final void writeAs(Object object, Class type) {
         ObjectWriter objectWriter = raw.getObjectWriter(type);
-        objectWriter.write(raw, 0);
+        objectWriter.write(raw, object);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -581,7 +581,9 @@ public static JSONPath of(
                     JSONPathMulti multi = (JSONPathMulti) path;
                     if (multi.segments.size() == 3) {
                         JSONPathSegment three = multi.segments.get(2);
-                        if (!(three instanceof JSONPathSegmentName)) {
+                        if (multi.segments.get(0) instanceof JSONPathSegment.AllSegment
+                                || multi.segments.get(1) instanceof JSONPathSegment.AllSegment
+                                || !(three instanceof JSONPathSegmentName)) {
                             allThreeName = false;
                         }
                     } else {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4313,6 +4313,7 @@ public final void skipValue() {
                 }
                 break;
             }
+            case '\'':
             case '"': {
                 skipString();
                 break;

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue273.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.lang.reflect.Type;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.TreeMap;
 
@@ -14,7 +15,7 @@
 public class Issue273 {
     @Test
     public void test() {
-        Map<Integer, Long> map0 = new HashMap<>();
+        Map<Integer, Long> map0 = new LinkedHashMap<>();
         map0.put(1, 111L);
         map0.put(2, 222L);
         String json = JSON.toJSONString(map0);

File: core/src/test/java/com/alibaba/fastjson2/jackson_support/JsonIncludeTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.jupiter.api.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -26,7 +27,7 @@ public void test1() throws Exception {
         Bean1 bean = new Bean1();
         bean.id = 101;
         String str = new ObjectMapper().writeValueAsString(bean);
-        assertEquals("{\"id\":101,\"name\":null}", str);
+        JSONAssert.assertEquals("{\"id\":101,\"name\":null}", str, true);
     }
 
     @JsonInclude

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1177_2.java
Patch:
@@ -4,11 +4,10 @@
 import com.alibaba.fastjson2.JSONPath;
 import com.alibaba.fastjson2.TypeReference;
 import org.junit.jupiter.api.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
 import java.util.Map;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
 /**
  * Created by wenshao on 05/05/2017.
  */
@@ -22,7 +21,7 @@ public void test_for_issue() throws Exception {
         String jsonpath = "$..x";
         String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
-        assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject));
+        JSONAssert.assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject), true);
     }
 
     public static class Model {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2100/Issue2182.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Multimap;
 import org.junit.jupiter.api.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -18,11 +19,11 @@ public void test_for_issue() throws Exception {
         multimap.put("user", "user.delete");
 
         String json = JSON.toJSONString(multimap);
-        assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json);
+        JSONAssert.assertEquals("{\"admin\":[\"admin.create\",\"admin.update\",\"admin.delete\"],\"user\":[\"user.create\",\"user.delete\"]}", json, true);
 
         ArrayListMultimap multimap1 = JSON.parseObject(json, ArrayListMultimap.class);
 
         assertEquals(multimap.size(), multimap1.size());
-        assertEquals(json, JSON.toJSONString(multimap1));
+        JSONAssert.assertEquals(json, JSON.toJSONString(multimap1), true);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/writer/ObjectWriterSetTest.java
Patch:
@@ -3,18 +3,18 @@
 import com.alibaba.fastjson2.JSON;
 import org.junit.jupiter.api.Test;
 
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Set;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ObjectWriterSetTest {
     @Test
     public void testJsonbSet() {
-        Set<Integer> set = new HashSet<Integer>();
+        Set<Integer> set = new LinkedHashSet<Integer>();
         set.add(1);
         set.add(null);
         String str = JSON.toJSONString(set);
-        assertEquals(str, "[null,1]");
+        assertEquals(str, "[1,null]");
     }
 }

File: extension/src/test/java/com/alibaba/fastjson2/geo/FeatureCollectionTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.support.geo.FeatureCollection;
 import com.alibaba.fastjson2.support.geo.Geometry;
 import org.junit.jupiter.api.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -62,9 +63,9 @@ public void test_geo() throws Exception {
         Geometry geometry = JSON.parseObject(str, Geometry.class);
         assertEquals(FeatureCollection.class, geometry.getClass());
 
-        assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry));
+        JSONAssert.assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry), true);
 
         String str2 = JSON.toJSONString(geometry);
-        assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)));
+        JSONAssert.assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), true);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -221,7 +221,7 @@ public static void declaredFields(Class objectClass, Consumer<Field> fieldConsum
             return;
         }
 
-        if (ignore(objectClass) || objectClass.getName().contains("$$Lambda$")) {
+        if (ignore(objectClass) || objectClass.getName().contains("$$Lambda")) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -2897,7 +2897,7 @@ private <T> int genReadFieldValue(
                 }
             }
 
-            if (list && !BeanUtils.hasPublicDefaultConstructor(fieldClass)) {
+            if (list && !fieldClass.isInterface() && !BeanUtils.hasPublicDefaultConstructor(fieldClass)) {
                 list = false;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -221,7 +221,7 @@ public static void declaredFields(Class objectClass, Consumer<Field> fieldConsum
             return;
         }
 
-        if (ignore(objectClass)) {
+        if (ignore(objectClass) || objectClass.getName().contains("$$Lambda$")) {
             return;
         }
 

File: core/src/test/java/com/alibaba/fastjson2/issues_2000/Issue2044.java
Patch:
@@ -58,6 +58,5 @@ public class User1
             implements Serializable {
         private static final long serialVersionUID = 8295348195732708179L;
         private String name;
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/geo/FeatureCollectionTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.support.geo.FeatureCollection;
 import com.alibaba.fastjson.support.geo.Geometry;
 import org.junit.jupiter.api.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -62,9 +63,9 @@ public void test_geo() {
         Geometry geometry = JSON.parseObject(str, Geometry.class);
         assertEquals(FeatureCollection.class, geometry.getClass());
 
-        assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry));
+        JSONAssert.assertEquals("{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Point\",\"coordinates\":[102.0,0.5]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"0.0\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102.0,0.0],[103.0,1.0],[104.0,0.0],[105.0,1.0]]}},{\"type\":\"Feature\",\"properties\":{\"prop1\":\"{\\\"this\\\":\\\"that\\\"}\",\"prop0\":\"value0\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}]}", JSON.toJSONString(geometry), true);
 
         String str2 = JSON.toJSONString(geometry);
-        assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)));
+        JSONAssert.assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)), true);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1363.java
Patch:
@@ -3,11 +3,11 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONCreator;
 import org.junit.jupiter.api.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
@@ -26,7 +26,7 @@ public void test_for_issue() throws Exception {
         String jsonStr = JSON.toJSONString(b);
         System.out.println(jsonStr);
         DataSimpleVO obj = JSON.parseObject(jsonStr, DataSimpleVO.class);
-        assertEquals(jsonStr, JSON.toJSONString(obj));
+        JSONAssert.assertEquals(jsonStr, JSON.toJSONString(obj), true);
     }
 
     @Test
@@ -43,7 +43,7 @@ public void test_for_issue_1() throws Exception {
         DataSimpleVO obj = JSON.parseObject(jsonStr, DataSimpleVO.class);
         System.out.println(obj.toString());
         assertNotNull(obj.value1);
-        assertEquals(jsonStr, JSON.toJSONString(obj));
+        JSONAssert.assertEquals(jsonStr, JSON.toJSONString(obj), true);
     }
 
     public static class DataSimpleVO {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1900/Issue1972.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.JSONPath;
 import org.junit.jupiter.api.Test;
+import org.skyscreamer.jsonassert.JSONAssert;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -23,6 +24,6 @@ public void test_for_issue() {
         jsonObject.put("a", a);
         JSONPath.arrayAdd(jsonObject, "$.a.b[?(@.c = '2018-04')].d", obj);
 
-        assertEquals("{\"a\":{\"b\":{\"c\":\"2018-04\",\"d\":[123]}}}", jsonObject.toString());
+        JSONAssert.assertEquals("{\"a\":{\"b\":{\"c\":\"2018-04\",\"d\":[123]}}}", jsonObject.toString(),true);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/jsonp/JSONPParseTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.JSONPObject;
+import com.alibaba.fastjson.serializer.SerializerFeature;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -23,7 +24,7 @@ public void test_f() throws Exception {
         assertEquals(1, param.get("id"));
         assertEquals("idonans", param.get("name"));
 
-        String json = JSON.toJSONString(jsonpObject);
-        assertEquals("callback({\"name\":\"idonans\",\"id\":1})", json);
+        String json = JSON.toJSONString(jsonpObject, SerializerFeature.MapSortField);
+        assertEquals("callback({\"id\":1,\"name\":\"idonans\"})", json);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/jsonp/JSONPParseTest1.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.JSONPObject;
+import com.alibaba.fastjson.serializer.SerializerFeature;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -23,7 +24,7 @@ public void test_f() throws Exception {
         assertEquals(1, param.get("id"));
         assertEquals("idonans", param.get("name"));
 
-        String json = JSON.toJSONString(jsonpObject);
-        assertEquals("callback({\"name\":\"idonans\",\"id\":1})", json);
+        String json = JSON.toJSONString(jsonpObject, SerializerFeature.MapSortField);
+        assertEquals("callback({\"id\":1,\"name\":\"idonans\"})", json);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1177_2.java
Patch:
@@ -6,6 +6,7 @@
 import com.alibaba.fastjson.TypeReference;
 import org.junit.jupiter.api.Test;
 
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -17,7 +18,7 @@ public class Issue1177_2 {
     @Test
     public void test_for_issue() throws Exception {
         String text = "{\"a\":{\"x\":\"y\"},\"b\":{\"x\":\"y\"}}";
-        Map<String, Model> jsonObject = JSONObject.parseObject(text, new TypeReference<Map<String, Model>>() {
+        Map<String, Model> jsonObject = JSONObject.parseObject(text, new TypeReference<LinkedHashMap<String, Model>>() {
         }.getType());
         System.out.println(JSON.toJSONString(jsonObject));
         String jsonpath = "$..x";

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2400/Issue2447.java
Patch:
@@ -30,8 +30,8 @@ public void test_for_issue2() {
         vo.properties.put("longitude", 127);
 
         Object obj = JSON.toJSON(vo);
-        String text = JSON.toJSONString(obj, SerializerFeature.SortField);
-        assertEquals("{\"latitude\":37,\"id\":123,\"longitude\":127}", text);
+        String text = JSON.toJSONString(obj, SerializerFeature.SortField, SerializerFeature.MapSortField);
+        assertEquals("{\"id\":123,\"latitude\":37,\"longitude\":127}", text);
     }
 
     public static class VO {

File: core/src/test/java/com/alibaba/fastjson2/issues_2000/BlooddonationqueryVO.java
Patch:
@@ -35,5 +35,3 @@ public static class DataListEntiy {
         private String donateTime;
     }
 }
-
-

File: core/src/test/java/com/alibaba/fastjson2/issues_2000/Issue2012.java
Patch:
@@ -18,4 +18,3 @@ public void test() {
         assertEquals("{\"beginTime\":\"2022-11-13\",\"cardNo\":\"123\",\"cardType\":\"身份证\",\"endTime\":\"2023-11-13\",\"name\":\"xxx\"}", JSON.toJSONString(blooddonationqueryVO));
     }
 }
-

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -74,7 +74,7 @@ public abstract class JSON
     }
 
     static final Supplier<List> arraySupplier = JSONArray::new;
-    static final Supplier<Map> defaultSupplier = JSONObject::new;
+    static final Supplier<Map> defaultSupplier = JSONObject.Creator.INSTANCE;
     static final Supplier<Map> orderedSupplier = () -> new JSONObject(true);
 
     static {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -2265,10 +2265,11 @@ public <T> FieldReader createFieldReaderMethod(
             }
         }
 
-        if (fieldClass == List.class
+        boolean list = fieldClass == List.class
                 || fieldClass == ArrayList.class
                 || fieldClass == LinkedList.class
-        ) {
+                || "cn.hutool.json.JSONArray".equals(fieldClass.getName());
+        if (list) {
             if (fieldTypeResolved instanceof ParameterizedType) {
                 ParameterizedType parameterizedType = (ParameterizedType) fieldTypeResolved;
                 Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2626,7 +2626,7 @@ public List readArray() {
                     skipComment();
                     continue;
                 default:
-                    throw new JSONException("TODO : " + ch);
+                    throw new JSONException(info());
             }
 
             if (i == 0) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -82,7 +82,9 @@ public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {
             for (int i = 0; i < annotations.length; i++) {
                 Annotation annotation = annotations[i];
                 Class annotationType = annotation.annotationType();
-                jsonType = findAnnotation(annotation, JSONType.class);
+                if (jsonType == null) {
+                    jsonType = findAnnotation(annotation, JSONType.class);
+                }
                 if (jsonType == annotation) {
                     continue;
                 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -4470,7 +4470,7 @@ private LocalDate readLocalDate0(int type) {
                 default:
                     if (bytes[offset + len] == 'Z') {
                         ZonedDateTime zdt = readZonedDateTime();
-                        return zdt.toLocalDate();
+                        return zdt.toInstant().atZone(context.getZoneId()).toLocalDate();
                     }
                     break;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -6179,7 +6179,7 @@ protected final LocalDateTime readLocalDateTimeX(int len) {
         LocalDateTime ldt;
         if (chars[offset + len - 1] == 'Z') {
             ZonedDateTime zdt = DateUtils.parseZonedDateTime(chars, offset, len);
-            ldt = zdt.toLocalDateTime();
+            ldt = zdt.toInstant().atZone(context.getZoneId()).toLocalDateTime();
         } else {
             ldt = DateUtils.parseLocalDateTimeX(chars, offset, len);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -7736,7 +7736,7 @@ protected final LocalDateTime readLocalDateTimeX(int len) {
         LocalDateTime ldt;
         if (bytes[offset + len - 1] == 'Z') {
             ZonedDateTime zdt = DateUtils.parseZonedDateTime(bytes, offset, len);
-            ldt = zdt.toLocalDateTime();
+            ldt = zdt.toInstant().atZone(context.getZoneId()).toLocalDateTime();
         } else {
             ldt = DateUtils.parseLocalDateTimeX(bytes, offset, len);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentIndex.java
Patch:
@@ -477,6 +477,9 @@ public void accept(JSONReader jsonReader, JSONPath.Context context) {
         for (int i = 0; jsonReader.ch != EOI; ++i) {
             if (jsonReader.ch == ']') {
                 jsonReader.next();
+                if (i == 0) {
+                    context.eval = true;
+                }
                 break;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -3005,7 +3005,7 @@ public final Number getNumber() {
                 return decimal;
             }
             case JSON_TYPE_BIG_DEC: {
-                if (scale > 0) {
+                if (scale != 0) {
                     return toBigDecimal(stringValue);
                 } else {
                     return new BigInteger(stringValue);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -75,7 +75,8 @@ public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
             return getObjectWriterVoid(jsonWriter, valueClass);
         } else {
             boolean typeMatch = initValueClass == valueClass
-                    || (initValueClass == Map.class && initValueClass.isAssignableFrom(valueClass));
+                    || (initValueClass == Map.class && initValueClass.isAssignableFrom(valueClass))
+                    || (initValueClass == List.class && initValueClass.isAssignableFrom(valueClass));
             if (!typeMatch && initValueClass.isPrimitive()) {
                 typeMatch = typeMatch(initValueClass, valueClass);
             }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONPath.java
Patch:
@@ -54,6 +54,7 @@ public static Object eval(Object rootObject, String path) {
 
     public static boolean set(Object rootObject, String path, Object value) {
         com.alibaba.fastjson2.JSONPath jsonPath = com.alibaba.fastjson2.JSONPath.of(path);
+        jsonPath.setReaderContext(JSON.createReadContext(JSON.DEFAULT_PARSER_FEATURE));
         jsonPath.set(rootObject, value);
         return true;
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSingleName.java
Patch:
@@ -154,7 +154,7 @@ public void set(Object rootObject, Object value) {
             }
             fieldReader.accept(rootObject, value);
         } else if (objectReader instanceof ObjectReaderBean) {
-            objectReader.acceptExtra(rootObject, name, value);
+            objectReader.acceptExtra(rootObject, name, value, 0);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -605,7 +605,7 @@ typeName, getObjectClass(), features | getFeatures()
         T object = createInstance(0L);
 
         if (extraFieldReader == null
-                && ((features | this.features) & JSONReader.Feature.SupportSmartMatch.mask) == 0
+                && ((features | this.features) & (JSONReader.Feature.SupportSmartMatch.mask | JSONReader.Feature.ErrorOnUnknownProperties.mask)) == 0
         ) {
             for (int i = 0; i < fieldReaders.length; i++) {
                 FieldReader fieldReader = fieldReaders[i];
@@ -645,7 +645,7 @@ typeName, getObjectClass(), features | getFeatures()
 
                 FieldReader fieldReader = getFieldReader(entryKey);
                 if (fieldReader == null) {
-                    acceptExtra(object, entryKey, entry.getValue());
+                    acceptExtra(object, entryKey, entry.getValue(), features);
                     continue;
                 }
 

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/EishayFuryParse.java
Patch:
@@ -30,6 +30,7 @@ public class EishayFuryParse {
 
     static io.fury.ThreadSafeFury fury = io.fury.Fury.builder()
             .withLanguage(io.fury.config.Language.JAVA)
+            .requireClassRegistration(false)
             .withRefTracking(true)
             .buildThreadSafeFury();
 
@@ -45,7 +46,7 @@ public class EishayFuryParse {
                     EishayFuryWrite.features
             );
 
-            furyBytes = fury.serialize(mc);
+            furyBytes = fury.serializeJavaObject(mc);
         } catch (Throwable ex) {
             ex.printStackTrace();
         }

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/EishayFuryWrite.java
Patch:
@@ -22,6 +22,7 @@ public class EishayFuryWrite {
 
     static io.fury.ThreadSafeFury fury = io.fury.Fury.builder()
             .withLanguage(io.fury.config.Language.JAVA)
+            .requireClassRegistration(false)
             .withRefTracking(true)
             .buildThreadSafeFury();
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/JSONPResponseBodyAdvice.java
Patch:
@@ -24,7 +24,6 @@
  * in order to be serialized into jsonp format.
  * </p>
  * <p>
- * <p>
  * url: /path/to/your/api?<b>callback=functionName</b>
  * </p>
  *

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVReaderUTF8.java
Patch:
@@ -332,7 +332,7 @@ public Object[] readLineValues(boolean strings) {
                 Object value;
                 if (quote) {
                     if (escapeCount == 0) {
-                        if (type == null || type == String.class || type == Object.class) {
+                        if (type == null || type == String.class || type == Object.class || strings) {
                             value = new String(buf, valueStart + 1, valueSize, charset);
                         } else {
                             try {
@@ -412,7 +412,7 @@ public Object[] readLineValues(boolean strings) {
             Object value;
             if (quote) {
                 if (escapeCount == 0) {
-                    if (type == null || type == String.class || type == Object.class) {
+                    if (type == null || type == String.class || type == Object.class || strings) {
                         value = new String(buf, valueStart + 1, valueSize, charset);
                     } else {
                         try {
@@ -432,7 +432,7 @@ public Object[] readLineValues(boolean strings) {
                         }
                     }
 
-                    if (type == null || type == String.class || type == Object.class) {
+                    if (type == null || type == String.class || type == Object.class || strings) {
                         value = new String(bytes, 0, bytes.length, charset);
                     } else {
                         try {

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/Compatible1xTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.fastjson.JSON;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 public class Compatible1xTest {
     @Test

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/EishayTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.android.eishay.MediaContent;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 public class EishayTest {
     static final String str = "{\"images\": [{\n" +

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/Issue715.java
Patch:
@@ -4,7 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 public class Issue715 {
     @Test

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/IssueIssue1349.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 import java.util.Date;
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/JSONTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.fastjson2.android;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 import static org.junit.Assert.*;
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/UnsafeTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.fastjson2.android;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 import static org.junit.Assert.*;
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/UnsafeUtilsTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.fastjson2.android;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 import java.lang.reflect.Field;
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/ValueTest.java
Patch:
@@ -6,7 +6,7 @@
 import com.alibaba.fastjson2.annotation.JSONCreator;
 import com.alibaba.fastjson2.annotation.JSONField;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 public class ValueTest {
     @Test

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.concurrent.atomic.*;
 import java.util.function.Consumer;
 
+import static com.alibaba.fastjson2.util.JDKUtils.ANDROID_SDK_INT;
 import static com.alibaba.fastjson2.util.JDKUtils.JVM_VERSION;
 
 /**
@@ -61,7 +62,7 @@ public abstract class BeanUtils {
     };
 
     public static String[] getRecordFieldNames(Class<?> recordType) {
-        if (JVM_VERSION < 14) {
+        if (JVM_VERSION < 14 && ANDROID_SDK_INT < 33) {
             return new String[0];
         }
 

File: core/src/test/java/com/alibaba/fastjson2/issues_1500/Issue1567.java
Patch:
@@ -24,7 +24,7 @@ void toJavaList() {
         User user = first.get();
         assertEquals("1001", user.getId());
         // name 或者nickname会为null， 之前用的版本2.0.25是没问题的
-        assertNull(user.getName());
+        assertEquals("Jack", user.getName());
         assertEquals("Jack", user.getNickname());
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4806,10 +4806,12 @@ public final void readNumber0() {
                     }
                 }
             } else if (ch == '{' && quote == 0) {
+                valid = true;
                 this.complex = readObject();
                 valueType = JSON_TYPE_OBJECT;
                 return;
             } else if (ch == '[' && quote == 0) {
+                valid = true;
                 this.complex = readArray();
                 valueType = JSON_TYPE_ARRAY;
                 return;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -3703,13 +3703,15 @@ public final float readFloatValue() {
                     }
                 }
             } else if (ch == '{' && quote == 0) {
+                valid = true;
                 Map<String, Object> obj = readObject();
                 if (!obj.isEmpty()) {
                     throw new JSONException(info());
                 }
                 value = true;
                 wasNull = true;
             } else if (ch == '[' && quote == 0) {
+                valid = true;
                 List array = readArray();
                 if (!array.isEmpty()) {
                     throw new JSONException(info());

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -3388,13 +3388,15 @@ public final double readDoubleValue() {
                     }
                 }
             } else if (ch == '{' && quote == 0) {
+                valid = true;
                 Map<String, Object> obj = readObject();
                 if (!obj.isEmpty()) {
                     throw new JSONException(info());
                 }
                 value = true;
                 wasNull = true;
             } else if (ch == '[' && quote == 0) {
+                valid = true;
                 List array = readArray();
                 if (!array.isEmpty()) {
                     throw new JSONException(info());

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -4631,13 +4631,15 @@ public final double readDoubleValue() {
                     }
                 }
             } else if (ch == '{' && quote == 0) {
+                valid = true;
                 Map<String, Object> obj = readObject();
                 if (!obj.isEmpty()) {
                     throw new JSONException(info());
                 }
                 value = true;
                 wasNull = true;
             } else if (ch == '[' && quote == 0) {
+                valid = true;
                 List array = readArray();
                 if (!array.isEmpty()) {
                     throw new JSONException(info());

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -441,7 +441,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
             list = entryCnt > 0 ? new ArrayList(entryCnt) : new ArrayList();
         } else if (listType == JSONArray.class) {
             list = entryCnt > 0 ? new JSONArray(entryCnt) : new JSONArray();
-        } else if (listType == HashSet.class) {
+        } else if (listType == Set.class || listType == HashSet.class) {
             list = new HashSet();
         } else if (listType == LinkedHashSet.class) {
             list = new LinkedHashSet();

File: core/src/test/java/com/alibaba/fastjson2/issues_1800/Issue1861.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.jupiter.api.Test;
 
 import javax.validation.Valid;
+
 import java.time.OffsetDateTime;
 import java.util.Map;
 
@@ -33,7 +34,7 @@ public void setMyData1(MyData1 myData1) {
 
     public class MyData1 {
         @JsonProperty("myData2")
-        private @Valid Map<String, MyData2> myData2 = null;
+        private @Valid Map<String, MyData2> myData2;
 
         public Map<String, MyData2> getMyData2() {
             return myData2;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -1076,7 +1076,7 @@ public List readArray() {
                 offset += 3;
                 value = int3;
             } else if (valueType == BC_INT32) {
-                int int32Value = UNSAFE.getInt(bytes, ARRAY_BYTE_BASE_OFFSET + offset);
+                int int32Value = UNSAFE.getInt(bytes, ARRAY_BYTE_BASE_OFFSET + offset + 1);
                 offset += 5;
                 value = BIG_ENDIAN ? int32Value : Integer.reverseBytes(int32Value);
             } else if (valueType == BC_REFERENCE) {

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVReaderUTF16.java
Patch:
@@ -398,10 +398,10 @@ public Object[] readLineValues(boolean strings) {
             valueSize++;
         }
 
-        if (valueSize > 0) {
+        Object value;
+        if (valueSize > 0 || quote) {
             Type type = types != null && columnIndex < types.length ? types[columnIndex] : null;
 
-            Object value;
             if (quote) {
                 if (escapeCount == 0) {
                     if (type == null || type == String.class || type == Object.class || strings) {

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVReaderUTF8.java
Patch:
@@ -406,7 +406,7 @@ public Object[] readLineValues(boolean strings) {
             valueSize++;
         }
 
-        if (valueSize > 0) {
+        if (valueSize > 0 || quote) {
             Type type = types != null && columnIndex < types.length ? types[columnIndex] : null;
 
             Object value;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -236,7 +236,7 @@ public Object createInstance(Collection collection) {
         int size = collection.size();
 
         if (size == 0 && (listClass == List.class)) {
-            Collection list = Collections.emptyList();
+            Collection list = new ArrayList();
             if (builder != null) {
                 return builder.apply(list);
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -669,6 +669,7 @@ public void writeString(List<String> list) {
                 String str = list.get(i);
                 if (str == null) {
                     writeNull();
+                    continue;
                 }
                 int coder = STRING_CODER.applyAsInt(str);
                 if (coder != LATIN) {

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/EishayParseBinaryArrayMapping.java
Patch:
@@ -78,7 +78,7 @@ public class EishayParseBinaryArrayMapping {
         }
     }
 
-    @Benchmark
+//    @Benchmark
     public void fury(Blackhole bh) {
         bh.consume(
                 fury.deserializeJavaObject(furyBytes, MediaContent.class)

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/EishayWriteBinaryArrayMapping.java
Patch:
@@ -68,7 +68,7 @@ public int furySize() {
         return fury.serialize(mediaContent).length;
     }
 
-    @Benchmark
+//    @Benchmark
     public void fury(Blackhole bh) {
         bh.consume(
                 fury.serialize(mediaContent)

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -2216,7 +2216,7 @@ public final void writeListInt64(List<Long> values) {
 
             long v = item;
             boolean writeAsString = nonStringAsString
-                    || (browserCompatible && v <= 9007199254740991L && v >= -9007199254740991L);
+                    || (browserCompatible && (v > 9007199254740991L || v < -9007199254740991L));
             if (writeAsString) {
                 bytes[off++] = (byte) this.quote;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -677,8 +677,8 @@ public void writeString(List<String> list) {
                     break;
                 }
                 int strlen = str.length();
-                if (off + strlen + 3 > bytes.length) {
-                    ensureCapacity(off + strlen + 3);
+                if (off + strlen + 6 > bytes.length) {
+                    ensureCapacity(off + strlen + 6);
                 }
                 if (strlen <= STR_ASCII_FIX_LEN) {
                     bytes[off++] = (byte) (strlen + BC_STR_ASCII_FIX_MIN);

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -1386,8 +1386,10 @@ public static String[] toStringArray(Object object) {
     }
 
     public static <T> T cast(Object obj, Type type) {
-        ObjectReaderProvider provider = JSONFactory.getDefaultObjectReaderProvider();
+        return cast(obj, type, JSONFactory.getDefaultObjectReaderProvider());
+    }
 
+    public static <T> T cast(Object obj, Type type, ObjectReaderProvider provider) {
         if (type instanceof Class) {
             return (T) cast(obj, (Class) type, provider);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -677,8 +677,8 @@ public void writeString(List<String> list) {
                     break;
                 }
                 int strlen = str.length();
-                if (strlen + 3 > bytes.length) {
-                    ensureCapacity(strlen + 3);
+                if (off + strlen + 3 > bytes.length) {
+                    ensureCapacity(off + strlen + 3);
                 }
                 if (strlen <= STR_ASCII_FIX_LEN) {
                     bytes[off++] = (byte) (strlen + BC_STR_ASCII_FIX_MIN);

File: codegen/src/main/java/com/alibaba/fastjson2/internal/processor/JSONBaseAnnotationProcessor.java
Patch:
@@ -7,6 +7,7 @@
 import java.lang.reflect.Method;
 import java.util.Set;
 
+import static com.alibaba.fastjson2.internal.processor.JavacTreeUtils.unwrapProcessingEnv;
 import static com.alibaba.fastjson2.util.JDKUtils.JVM_VERSION;
 import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
@@ -23,7 +24,7 @@ public class JSONBaseAnnotationProcessor
     @Override
     public synchronized void init(ProcessingEnvironment processingEnv) {
         addOpensSinceJava9();
-        super.init(processingEnv);
+        super.init(unwrapProcessingEnv(processingEnv));
     }
 
     @Override

File: codegen/src/main/java/com/alibaba/fastjson2/internal/processor/JSONCompiledAnnotationProcessor.java
Patch:
@@ -27,6 +27,7 @@
 import static com.alibaba.fastjson2.internal.codegen.Opcodes.*;
 import static com.alibaba.fastjson2.internal.processor.CodeGenUtils.fieldObjectReader;
 import static com.alibaba.fastjson2.internal.processor.CodeGenUtils.fieldReader;
+import static com.alibaba.fastjson2.internal.processor.JavacTreeUtils.unwrapProcessingEnv;
 import static com.alibaba.fastjson2.util.JDKUtils.ARRAY_BYTE_BASE_OFFSET;
 import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
@@ -42,7 +43,7 @@ public class JSONCompiledAnnotationProcessor
         extends AbstractProcessor {
     @Override
     public synchronized void init(ProcessingEnvironment processingEnv) {
-        super.init(processingEnv);
+        super.init(unwrapProcessingEnv(processingEnv));
     }
 
     @Override

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/Eishay.java
Patch:
@@ -17,7 +17,8 @@ public static void main(String[] args) throws RunnerException {
                 .exclude(EishayParseStringNoneCache.class.getName())
                 .exclude(EishayWriteStringNoneCache.class.getName())
                 .exclude(EishayWriteStringTree1x.class.getName())
-                .exclude(EishayFury.class.getName())
+                .exclude(EishayFuryParse.class.getName())
+                .exclude(EishayFuryWrite.class.getName())
                 .mode(Mode.Throughput)
                 .timeUnit(TimeUnit.MILLISECONDS)
                 .warmupIterations(3)

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueField.java
Patch:
@@ -10,10 +10,8 @@
 
 class FieldReaderInt32ValueField<T>
         extends FieldReaderObjectField<T> {
-    final long fieldOffset;
     FieldReaderInt32ValueField(String fieldName, Class fieldType, int ordinal, String format, Integer defaultValue, JSONSchema schema, Field field) {
         super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, schema, field);
-        fieldOffset = UNSAFE.objectFieldOffset(field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueField.java
Patch:
@@ -10,10 +10,8 @@
 
 class FieldReaderInt64ValueField<T>
         extends FieldReaderObjectField<T> {
-    final long fieldOffset;
     FieldReaderInt64ValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Long defaultValue, JSONSchema schema, Field field) {
         super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
-        fieldOffset = UNSAFE.objectFieldOffset(field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -11,8 +11,6 @@
 
 final class FieldReaderListField<T>
         extends FieldReaderList<T, Object> {
-    final long fieldOffset;
-
     FieldReaderListField(
             String fieldName,
             Type fieldType,
@@ -42,7 +40,6 @@ final class FieldReaderListField<T>
                 field,
                 null
         );
-        fieldOffset = UNSAFE.objectFieldOffset(field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringField.java
Patch:
@@ -10,12 +10,10 @@
 class FieldReaderStringField<T>
         extends FieldReaderObjectField<T> {
     final boolean trim;
-    final long fieldOffset;
 
     FieldReaderStringField(String fieldName, Class fieldType, int ordinal, long features, String format, String defaultValue, JSONSchema schema, Field field) {
         super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, schema, field);
         trim = "trim".equals(format) || (features & JSONReader.Feature.TrimString.mask) != 0;
-        fieldOffset = UNSAFE.objectFieldOffset(field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -236,7 +236,7 @@ public <T> ObjectReader<T> createObjectReader(
             }
         }
 
-        if (fieldBased && objectClass.isInterface()) {
+        if (fieldBased && (objectClass.isInterface() || BeanUtils.isRecord(objectClass))) {
             fieldBased = false;
         }
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/Compatible1xTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.fastjson.JSON;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class Compatible1xTest {
     @Test

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/EishayTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.android.eishay.MediaContent;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class EishayTest {
     static final String str = "{\"images\": [{\n" +

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/Issue715.java
Patch:
@@ -4,7 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class Issue715 {
     @Test

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/IssueIssue1349.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Date;
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/JSONTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.fastjson2.android;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.Assert.*;
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/UnsafeTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.fastjson2.android;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.Assert.*;
 
@@ -12,4 +12,4 @@ public void test() throws ClassNotFoundException {
         assertEquals("sun.misc.Unsafe", c.getCanonicalName());
     }
 
-}
\ No newline at end of file
+}

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/UnsafeUtilsTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.fastjson2.android;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 

File: android-test/app/src/androidTest/java/com/alibaba/fastjson2/android/ValueTest.java
Patch:
@@ -6,7 +6,7 @@
 import com.alibaba.fastjson2.annotation.JSONCreator;
 import com.alibaba.fastjson2.annotation.JSONField;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ValueTest {
     @Test

File: core/src/test/java/com/alibaba/fastjson2/features/BrowserSecureTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.fastjson2.features;
 
 import com.alibaba.fastjson2.JSONWriter;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue828.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * @author Rongzhen Yan

File: core/src/test/java/com/alibaba/fastjson2/issues_1000/Issue1401.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONWriter;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;

File: core/src/test/java/com/alibaba/fastjson2/issues_1000/Issue1413.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.fastjson2.issues_1000;
 
 import com.alibaba.fastjson2.JSON;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: core/src/test/java/com/alibaba/fastjson2/issues_1500/Issue1562.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
 import lombok.Data;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: core/src/test/java/com/alibaba/fastjson2/issues_1500/Issue1563.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.fastjson2.issues_1500;
 
 import com.alibaba.fastjson2.JSON;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.Iterator;

File: core/src/test/java/com/alibaba/fastjson2/issues_1600/Issue1603.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.JSONWriter;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: example-spring6-test/src/test/java/com/alibaba/fastjson2/example/spring6test/WebFluxTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.fastjson2.example.spring6test.codec.Fastjson2Codec;
 import com.alibaba.fastjson2.example.spring6test.entity.WebFluxMockBean;
 import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.web.reactive.function.client.WebClient;
 import org.springframework.web.reactive.function.client.support.WebClientAdapter;
 import org.springframework.web.service.invoker.HttpServiceProxyFactory;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/mixins/MixinAPITest.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
 import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MixinAPITest {
     static class BaseClass {

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSingle.java
Patch:
@@ -18,6 +18,8 @@ class JSONPathSingle
             extractSupport = false;
         } else if (segment instanceof JSONPathSegmentIndex && ((JSONPathSegmentIndex) segment).index < 0) {
             extractSupport = false;
+        } else if (segment instanceof JSONPathSegment.CycleNameSegment && ((JSONPathSegment.CycleNameSegment) segment).shouldRecursive()) {
+            extractSupport = false;
         }
         this.extractSupport = extractSupport;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -796,6 +796,9 @@ private ObjectReader getObjectReaderInternal(Type objectType, boolean fieldBased
                         return rawClassReader;
                     }
                 }
+                if (typeArguments.length == 1 && ArrayList.class.isAssignableFrom(rawClass)) {
+                    return ObjectReaderImplList.of(objectType, rawClass, 0);
+                }
             }
         }
 

File: extension-spring5/src/test/java/com/alibaba/fastjson2/spring/FastJsonHttpMessageConverterUnitTest.java
Patch:
@@ -73,11 +73,11 @@ public void testContentLengthHeader() throws Exception {
         assertTrue(messageConverter.canWrite(VO.class, VO.class, MediaType.APPLICATION_JSON));
 
         messageConverter.setSupportedMediaTypes(Arrays
-            .asList(new MediaType[]{MediaType.APPLICATION_JSON}));
+                .asList(new MediaType[] {MediaType.APPLICATION_JSON}));
         assertEquals(1, messageConverter.getSupportedMediaTypes().size());
 
         Method method = FastJsonHttpMessageConverter.class.getDeclaredMethod(
-            "supports", Class.class);
+                "supports", Class.class);
         method.setAccessible(true);
         method.invoke(messageConverter, int.class);
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -5378,6 +5378,9 @@ public final UUID readUUID() {
         }
 
         String str = readString();
+        if (str.isEmpty()) {
+            return null;
+        }
         return UUID.fromString(str);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -7993,6 +7993,9 @@ public final UUID readUUID() {
         }
 
         String str = readString();
+        if (str.isEmpty()) {
+            return null;
+        }
         return UUID.fromString(str);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/util/JDKUtils.java
Patch:
@@ -73,8 +73,8 @@ public class JDKUtils {
             Field theUnsafeField = Unsafe.class.getDeclaredField("theUnsafe");
             theUnsafeField.setAccessible(true);
             unsafe = (Unsafe) theUnsafeField.get(null);
-            offset = Unsafe.ARRAY_BYTE_BASE_OFFSET;
-            charOffset = Unsafe.ARRAY_CHAR_BASE_OFFSET;
+            offset = unsafe.arrayBaseOffset(byte[].class);
+            charOffset = unsafe.arrayBaseOffset(char[].class);
         } catch (Throwable ignored) {
             // ignored
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -542,7 +542,7 @@ protected final void writeStringEscapeUTF16(byte[] str) {
         final char[] chars = this.chars;
         chars[off++] = quote;
         for (int i = 0; i < strlen; i += 2) {
-            char ch = UNSAFE.getChar(str, (long) Unsafe.ARRAY_CHAR_BASE_OFFSET + i);
+            char ch = UNSAFE.getChar(str, (long) Unsafe.ARRAY_BYTE_BASE_OFFSET + i);
             switch (ch) {
                 case '"':
                 case '\'':
@@ -2757,7 +2757,7 @@ public void writeBool(boolean value) {
             if (!value) {
                 chars[off++] = 'f';
             }
-            UNSAFE.putLong(chars, ARRAY_BYTE_BASE_OFFSET + (off << 1), value ? TRUE_64 : ALSE_64);
+            UNSAFE.putLong(chars, ARRAY_CHAR_BASE_OFFSET + (off << 1), value ? TRUE_64 : ALSE_64);
             off += 4;
         }
         this.off = off;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -1940,7 +1940,7 @@ public final void writeListInt32(List<Integer> values) {
             }
             Number item = values.get(i);
             if (item == null) {
-                UNSAFE.putInt(off, ARRAY_BYTE_BASE_OFFSET, NULL_32);
+                UNSAFE.putInt(bytes, ARRAY_BYTE_BASE_OFFSET + off, NULL_32);
                 off += 4;
                 continue;
             }
@@ -2024,7 +2024,7 @@ public final void writeListInt64(List<Long> values) {
             }
             Long item = values.get(i);
             if (item == null) {
-                UNSAFE.putInt(off, ARRAY_BYTE_BASE_OFFSET, NULL_32);
+                UNSAFE.putInt(bytes, ARRAY_BYTE_BASE_OFFSET + off, NULL_32);
                 off += 4;
                 continue;
             }

File: core/src/main/java/com/alibaba/fastjson2/util/DoubleToDecimal.java
Patch:
@@ -729,7 +729,7 @@ public static int toString(double v, char[] chars, int off, boolean json) {
 
         int index = off;
         if (json) {
-            UNSAFE.putLong(chars, ARRAY_BYTE_BASE_OFFSET + (index << 1), NULL_64);
+            UNSAFE.putLong(chars, ARRAY_CHAR_BASE_OFFSET + (index << 1), NULL_64);
             index += 4;
         } else if (t != 0) {
             chars[index] = 'N';

File: core/src/main/java/com/alibaba/fastjson2/util/IOUtils.java
Patch:
@@ -365,7 +365,7 @@ public static int writeDecimal(char[] buf, int off, long unscaledVal, int scale)
                     buf[off + 1] = (char) (rem + '0');
                     return off + 2;
                 } else if (scale == 2) {
-                    UNSAFE.putInt(buf, ARRAY_BYTE_BASE_OFFSET + ((off + 1) << 1), PACKED_DIGITS_UTF16[(int) rem]);
+                    UNSAFE.putInt(buf, ARRAY_CHAR_BASE_OFFSET + ((off + 1) << 1), PACKED_DIGITS_UTF16[(int) rem]);
                     return off + 3;
                 } else if (scale == 3) {
                     long v = DIGITS_K_64[(int) rem];
@@ -1334,15 +1334,15 @@ public static void putInt(byte[] buf, int pos, int v) {
     public static void putInt(char[] buf, int pos, int v) {
         UNSAFE.putInt(
                 buf,
-                ARRAY_BYTE_BASE_OFFSET + (pos << 1),
+                ARRAY_CHAR_BASE_OFFSET + (pos << 1),
                 BIG_ENDIAN ? Integer.reverseBytes(v) : v
         );
     }
 
     public static void putLong(char[] buf, int pos, long v) {
         UNSAFE.putLong(
                 buf,
-                ARRAY_BYTE_BASE_OFFSET + (pos << 1),
+                ARRAY_CHAR_BASE_OFFSET + (pos << 1),
                 BIG_ENDIAN ? Long.reverseBytes(v) : v
         );
     }

File: core/src/main/java/com/alibaba/fastjson2/util/DateUtils.java
Patch:
@@ -10778,9 +10778,8 @@ public static String formatYMDHMS19(LocalDateTime ldt) {
         }
 
         char[] chars = new char[19];
-        byte[] bytes = new byte[19];
-        IOUtils.writeLocalDate(bytes, 0, year, month, dayOfMonth);
-        bytes[10] = ' ';
+        IOUtils.writeLocalDate(chars, 0, year, month, dayOfMonth);
+        chars[10] = ' ';
         IOUtils.writeLocalTime(chars, 11, hour, minute, second);
         if (STRING_CREATOR_JDK8 != null) {
             return STRING_CREATOR_JDK8.apply(chars, Boolean.TRUE);

File: codegen/src/test/java/com/alibaba/fastjson2/internal/processor/APTTest0.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 
 public class APTTest0 {
-    @org.junit.jupiter.api.Test
+//    @org.junit.jupiter.api.Test
     public void test() throws Exception {
         Path dir = new File("/Users/wenshao/Work/git/fastjson2/codegen/target/generated-sources")
                 .toPath();

File: codegen/src/test/java/com/alibaba/fastjson2/internal/processor/eishay/APTImageTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.List;
 
 public class APTImageTest {
-    @org.junit.jupiter.api.Test
+//    @org.junit.jupiter.api.Test
     public void test() throws Exception {
         Path dir = new File("/Users/wenshao/Work/git/fastjson2/codegen/target/generated-sources")
                 .toPath();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1792,7 +1792,7 @@ public final void writeListInt64(List<Long> values) {
 
             long v = item.longValue();
             boolean writeAsString = nonStringAsString
-                    || (browserCompatible && v <= 9007199254740991L && v >= -9007199254740991L);
+                    || (browserCompatible && !(v <= 9007199254740991L && v >= -9007199254740991L));
             if (writeAsString) {
                 chars[off++] = this.quote;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -2263,7 +2263,7 @@ public final String readFieldName() {
                             && (c7 & 0xFF) == c7
                             && (c8 & 0xFF) == c8
                             && (c9 & 0xFF) == c9) {
-                        nameValue0 = c1 << 8
+                        nameValue0 = (c1 << 8)
                                 + c0;
                         nameValue1
                                 = (((long) c9) << 56)
@@ -2300,7 +2300,7 @@ public final String readFieldName() {
                             && (c9 & 0xFF) == c9
                             && (c10 & 0xFF) == c10) {
                         nameValue0
-                                = c2 << 16
+                                = (c2 << 16)
                                 + (c1 << 8)
                                 + c0;
                         nameValue1

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -2340,7 +2340,7 @@ public final String readFieldName() {
                             && (c10 & 0xFF) == c10
                             && (c11 & 0xFF) == c11) {
                         nameValue0
-                                = c3 << 24
+                                = (c3 << 24)
                                 + (c2 << 16)
                                 + (c1 << 8)
                                 + c0;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -424,7 +424,7 @@ protected void acceptAny(T object, Object fieldValue, long features) {
                 ObjectReader initReader = getInitReader();
                 if (initReader != null) {
                     String fieldValueJson = JSON.toJSONString(fieldValue);
-                    typedFieldValue = initReader.readObject(JSONReader.of(fieldValueJson), null, null, features);
+                    typedFieldValue = initReader.readObject(JSONReader.of(fieldValueJson), fieldType, fieldName, features);
                 } else {
                     typedFieldValue = TypeUtils.cast(fieldValue, fieldClass, provider);
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.math.BigDecimal;
 import java.util.function.Function;
@@ -16,6 +17,7 @@ final class FieldWriterBigDecimalFunc<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, BigDecimal> function
     ) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.math.BigDecimal;
@@ -15,6 +16,7 @@ final class FieldWriterBigDecimalMethod<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method
     ) {
         super(fieldName, ordinal, features, format, label, BigDecimal.class, BigDecimal.class, null, method);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.math.BigInteger;
 import java.util.function.Function;
@@ -16,6 +17,7 @@ final class FieldWriterBigIntFunc<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, BigInteger> function
     ) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolMethod.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONException;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -13,10 +14,11 @@ final class FieldWriterBoolMethod
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolVal.java
Patch:
@@ -36,7 +36,7 @@ public boolean write(JSONWriter jsonWriter, Object object) {
 
         if (!value) {
             long features = this.features | jsonWriter.getFeatures();
-            if ((features & JSONWriter.Feature.NotWriteDefaultValue.mask) != 0) {
+            if (defaultValue == null && (features & JSONWriter.Feature.NotWriteDefaultValue.mask) != 0) {
                 return false;
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolValFunc.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Predicate;
 
@@ -13,10 +14,11 @@ final class FieldWriterBoolValFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Predicate function
     ) {
-        super(fieldName, ordinal, features, format, label, Boolean.class, Boolean.class, null, method);
+        super(fieldName, ordinal, features, format, label, Boolean.class, Boolean.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBooleanFunc.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -13,10 +14,11 @@ final class FieldWriterBooleanFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function function
     ) {
-        super(fieldName, ordinal, features, format, label, Boolean.class, Boolean.class, null, method);
+        super(fieldName, ordinal, features, format, label, Boolean.class, Boolean.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCalendarFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.Calendar;
 import java.util.function.Function;
@@ -16,10 +17,11 @@ final class FieldWriterCalendarFunc<T>
             long features,
             String dateTimeFormat,
             String label,
+            Field field,
             Method method,
             Function<T, Calendar> function
     ) {
-        super(fieldName, ordinal, features, dateTimeFormat, label, Calendar.class, Calendar.class, null, method);
+        super(fieldName, ordinal, features, dateTimeFormat, label, Calendar.class, Calendar.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -14,10 +15,11 @@ final class FieldWriterCharMethod<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValFunc.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.function.ToCharFunction;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 
 final class FieldWriterCharValFunc
@@ -15,10 +16,11 @@ final class FieldWriterCharValFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             ToCharFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, char.class, char.class, null, method);
+        super(fieldName, ordinal, features, format, label, char.class, char.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.Date;
 import java.util.function.Function;
@@ -16,10 +17,11 @@ final class FieldWriterDateFunc<T>
             long features,
             String dateTimeFormat,
             String label,
+            Field field,
             Method method,
             Function<T, Date> function
     ) {
-        super(fieldName, ordinal, features, dateTimeFormat, label, Date.class, Date.class, null, method);
+        super(fieldName, ordinal, features, dateTimeFormat, label, Date.class, Date.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Date;
@@ -16,9 +17,10 @@ final class FieldWriterDateMethod<T>
             String format,
             String label,
             Class fieldClass,
+            Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -15,10 +16,11 @@ final class FieldWriterDoubleFunc<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, Double> function
     ) {
-        super(fieldName, ordinal, features, format, label, Double.class, Double.class, null, method);
+        super(fieldName, ordinal, features, format, label, Double.class, Double.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -17,9 +18,10 @@ protected FieldWriterDoubleMethod(
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValueFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.ToDoubleFunction;
 
@@ -15,10 +16,11 @@ final class FieldWriterDoubleValueFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             ToDoubleFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, double.class, double.class, null, method);
+        super(fieldName, ordinal, features, format, label, double.class, double.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumFunc.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.function.Function;
@@ -16,10 +17,11 @@ final class FieldWriterEnumFunc
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -15,9 +16,10 @@ final class FieldWriterEnumMethod
             String format,
             String label,
             Class fieldType,
+            Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldType, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldType, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -15,10 +16,11 @@ final class FieldWriterFloatFunc<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, Float> function
     ) {
-        super(fieldName, ordinal, features, format, label, Float.class, Float.class, null, method);
+        super(fieldName, ordinal, features, format, label, Float.class, Float.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -17,9 +18,10 @@ protected FieldWriterFloatMethod(
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValueFunc.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.function.ToFloatFunction;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 
 final class FieldWriterFloatValueFunc
@@ -15,10 +16,11 @@ final class FieldWriterFloatValueFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             ToFloatFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, float.class, float.class, null, method);
+        super(fieldName, ordinal, features, format, label, float.class, float.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Func.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt16Func<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, Short> function
     ) {
-        super(fieldName, ordinal, features, format, label, Short.class, null, method);
+        super(fieldName, ordinal, features, format, label, Short.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Method.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONException;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt16Method<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValFunc.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.function.ToShortFunction;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 
 final class FieldWriterInt16ValFunc
@@ -15,10 +16,11 @@ final class FieldWriterInt16ValFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             ToShortFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, short.class, null, method);
+        super(fieldName, ordinal, features, format, label, short.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Func.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt32Func<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, Integer> function
     ) {
-        super(fieldName, ordinal, features, format, label, Integer.class, Integer.class, null, method);
+        super(fieldName, ordinal, features, format, label, Integer.class, Integer.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Method.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONException;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt32Method<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32ValFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.ToIntFunction;
 
@@ -15,10 +16,11 @@ final class FieldWriterInt32ValFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             ToIntFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, int.class, int.class, null, method);
+        super(fieldName, ordinal, features, format, label, int.class, int.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Func.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt64Func<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, Long> function
     ) {
-        super(fieldName, ordinal, features, format, label, Long.class, null, method);
+        super(fieldName, ordinal, features, format, label, Long.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Method.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONException;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt64Method<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64ValFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.ToLongFunction;
 
@@ -15,10 +16,11 @@ final class FieldWriterInt64ValFunc<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             ToLongFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, long.class, null, method);
+        super(fieldName, ordinal, features, format, label, long.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Func.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt8Func<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, Byte> function
     ) {
-        super(fieldName, ordinal, features, format, label, Byte.class, null, method);
+        super(fieldName, ordinal, features, format, label, Byte.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Method.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONException;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -13,10 +14,11 @@ final class FieldWriterInt8Method
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValFunc.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.function.ToByteFunction;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 
 final class FieldWriterInt8ValFunc
@@ -15,10 +16,11 @@ final class FieldWriterInt8ValFunc
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             ToByteFunction function
     ) {
-        super(fieldName, ordinal, features, format, label, byte.class, null, method);
+        super(fieldName, ordinal, features, format, label, byte.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.List;
@@ -20,12 +21,13 @@ final class FieldWriterListFunc<T>
             String format,
             String label,
             Type itemType,
+            Field field,
             Method method,
             Function<T, List> function,
             Type fieldType,
             Class fieldClass
     ) {
-        super(fieldName, itemType, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(fieldName, itemType, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -19,11 +20,12 @@ final class FieldWriterListMethod<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Type fieldType,
             Class fieldClass
     ) {
-        super(fieldName, itemType, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(fieldName, itemType, ordinal, features, format, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListStrFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.List;
@@ -19,12 +20,13 @@ final class FieldWriterListStrFunc<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, List> function,
             Type fieldType,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterLocalDateFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.time.LocalDate;
@@ -19,10 +20,11 @@ final class FieldWriterLocalDateFunc<T>
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.ToLongFunction;
 
@@ -14,10 +15,11 @@ final class FieldWriterMillisFunc<T>
             long features,
             String dateTimeFormat,
             String label,
+            Field field,
             Method method,
             ToLongFunction function
     ) {
-        super(fieldName, ordinal, features, dateTimeFormat, label, long.class, long.class, null, method);
+        super(fieldName, ordinal, features, dateTimeFormat, label, long.class, long.class, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -15,9 +16,10 @@ final class FieldWriterMillisMethod<T>
             String dateTimeFormat,
             String label,
             Class fieldClass,
+            Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, dateTimeFormat, label, fieldClass, fieldClass, null, method);
+        super(fieldName, ordinal, features, dateTimeFormat, label, fieldClass, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayMethod.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.util.TypeUtils;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -26,9 +27,10 @@ final class FieldWriterObjectArrayMethod<T>
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(fieldName, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.itemType = itemType;
         if (itemType instanceof Class) {
             itemClass = (Class) itemType;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFunc.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.concurrent.atomic.AtomicIntegerArray;
@@ -20,10 +21,11 @@ final class FieldWriterObjectFunc<T>
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
         isArray = fieldClass == AtomicIntegerArray.class
                 || fieldClass == AtomicLongArray.class

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFuncFinal.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.writer;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.concurrent.atomic.AtomicIntegerArray;
@@ -20,10 +21,11 @@ final class FieldWriterObjectFuncFinal<T>
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
         isArray = fieldClass == AtomicIntegerArray.class
                 || fieldClass == AtomicLongArray.class

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectMethod.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONException;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -16,9 +17,10 @@ protected FieldWriterObjectMethod(
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterOffsetDateTimeFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.time.OffsetDateTime;
@@ -19,10 +20,11 @@ final class FieldWriterOffsetDateTimeFunc<T>
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringFunc.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.codec.FieldInfo;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.function.Function;
 
@@ -19,10 +20,11 @@ final class FieldWriterStringFunc<T>
             long features,
             String format,
             String label,
+            Field field,
             Method method,
             Function<T, String> function
     ) {
-        super(fieldName, ordinal, features, format, label, String.class, String.class, null, method);
+        super(fieldName, ordinal, features, format, label, String.class, String.class, field, method);
         this.function = function;
         this.symbol = "symbol".equals(format);
         this.trim = "trim".equals(format);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringMethod.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -14,9 +15,10 @@ final class FieldWriterStringMethod<T>
             String format,
             String label,
             long features,
+            Field field,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, label, String.class, String.class, null, method);
+        super(fieldName, ordinal, features, format, label, String.class, String.class, field, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterUUIDFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONWriter;
 
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.UUID;
@@ -19,10 +20,11 @@ final class FieldWriterUUIDFunc<T>
             String label,
             Type fieldType,
             Class fieldClass,
+            Field field,
             Method method,
             Function function
     ) {
-        super(name, ordinal, features, format, label, fieldType, fieldClass, null, method);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field, method);
         this.function = function;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriters.java
Patch:
@@ -67,6 +67,7 @@ public static <T> ObjectWriter ofToInt(ToIntFunction function) {
                         null,
                         null,
                         null,
+                        null,
                         function
                 )
         );
@@ -81,6 +82,7 @@ public static <T> ObjectWriter ofToLong(ToLongFunction function) {
                         null,
                         null,
                         null,
+                        null,
                         function
                 )
         );

File: core/src/test/java/com/alibaba/fastjson2/filter/ContextValueFilterTest.java
Patch:
@@ -7,8 +7,7 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class ContextValueFilterTest {
     @Test
@@ -63,7 +62,8 @@ public void test1() throws Exception {
         assertEquals(int.class, context.getFieldClass());
         assertEquals(int.class, context.getFieldType());
         assertEquals(Bean1.class.getMethod("getId"), context.getMethod());
-        assertEquals(null, context.getField());
+        assertNotNull(context.getField());
+        assertNotNull("id", context.getField().getName());
         assertEquals("userId", context.getAnnotation(JSONField.class).name());
         assertEquals(null, context.getFormat());
         assertEquals(null, context.getLabel());

File: core/src/test/java/com/alibaba/fastjson2/issues_1700/Issue1713.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.issuse_1700;
+package com.alibaba.fastjson2.issues_1700;
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.filter.ContextNameFilter;

File: core/src/main/java/com/alibaba/fastjson2/util/KotlinUtils.java
Patch:
@@ -15,7 +15,7 @@
  * @since 2.0.39
  */
 public class KotlinUtils {
-    public final static int STATE;
+    public static final int STATE;
 
     static {
         int state = 0;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1315,7 +1315,7 @@ static void putLong(char[] buf, int off, int b0, int b1) {
         long v = HEX256[b0 & 0xff] | (((long) HEX256[b1 & 0xff]) << 32);
         UNSAFE.putLong(
                 buf,
-                ARRAY_BYTE_BASE_OFFSET + (off << 1),
+                ARRAY_CHAR_BASE_OFFSET + (off << 1),
                 BIG_ENDIAN ? Long.reverseBytes(v << 8) : v
         );
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -18,6 +18,7 @@
 
 public final class ObjectReaderImplMap
         implements ObjectReader {
+    static final Function ENUM_MAP_BUILDER = e -> new EnumMap((Map) e);
     static Function UNSAFE_OBJECT_CREATOR;
     static final Class CLASS_SINGLETON_MAP = Collections.singletonMap(1, 1).getClass();
     static final Class CLASS_EMPTY_MAP = Collections.EMPTY_MAP.getClass();
@@ -171,7 +172,7 @@ public static ObjectReader of(Type fieldType, Class mapType, long features) {
                     };
                 } else if (mapType == EnumMap.class) {
                     instanceType = LinkedHashMap.class;
-                    builder = e -> new EnumMap((Map) e);
+                    builder = ENUM_MAP_BUILDER;
                 }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -169,6 +169,9 @@ public static ObjectReader of(Type fieldType, Class mapType, long features) {
                         Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();
                         return Collections.singletonMap(entry.getKey(), entry.getValue());
                     };
+                } else if (mapType == EnumMap.class) {
+                    instanceType = LinkedHashMap.class;
+                    builder = e -> new EnumMap((Map) e);
                 }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -111,7 +111,6 @@ public void startArray(Object array, int size) {
             writeTypeName(array.getClass().getName());
         }
 
-        level++;
         int off = this.off;
         if (off == bytes.length) {
             ensureCapacity(off + 1);
@@ -128,7 +127,6 @@ public void startArray(Object array, int size) {
 
     @Override
     public void startArray(int size) {
-        level++;
         int off = this.off;
         if (off == bytes.length) {
             ensureCapacity(off + 1);
@@ -183,7 +181,6 @@ public void writeStringNull() {
 
     @Override
     public void endArray() {
-        level--;
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -15,6 +15,7 @@
 import java.math.BigInteger;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.time.ZoneId;
 import java.util.*;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 import java.util.function.Function;
@@ -40,9 +41,11 @@ public static String getProperty(String key) {
 
     static long defaultReaderFeatures;
     static String defaultReaderFormat;
+    static ZoneId defaultReaderZoneId;
 
     static long defaultWriterFeatures;
     static String defaultWriterFormat;
+    static ZoneId defaultWriterZoneId;
 
     static Supplier<Map> defaultObjectSupplier;
     static Supplier<List> defaultArraySupplier;

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/DecodeASCIIBenchmarkJDK8.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.benchmark;
 
-import com.alibaba.fastjson2.util.UnsafeUtils;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.Mode;
 import org.openjdk.jmh.runner.Runner;
@@ -13,6 +12,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static com.alibaba.fastjson2.util.JDKUtils.STRING_CREATOR_JDK8;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 public class DecodeASCIIBenchmarkJDK8 {
     static byte[] utf8Bytes = new byte[128];
@@ -22,7 +22,7 @@ public class DecodeASCIIBenchmarkJDK8 {
     static {
         try {
             Field valueField = String.class.getDeclaredField("value");
-            valueFieldOffset = UnsafeUtils.objectFieldOffset(valueField);
+            valueFieldOffset = UNSAFE.objectFieldOffset(valueField);
         } catch (Throwable e) {
             e.printStackTrace();
         }

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/DecodeUTF8BenchmarkJDK17.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.benchmark;
 
 import com.alibaba.fastjson2.util.IOUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.Mode;
 import org.openjdk.jmh.runner.Runner;
@@ -19,6 +18,7 @@
 import java.util.function.BiFunction;
 
 import static com.alibaba.fastjson2.util.JDKUtils.JVM_VERSION;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 public class DecodeUTF8BenchmarkJDK17 {
     static byte[] utf8Bytes = "01234567890ABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwzyz"
@@ -29,7 +29,7 @@ public class DecodeUTF8BenchmarkJDK17 {
     static {
         try {
             Field valueField = String.class.getDeclaredField("value");
-            valueFieldOffset = UnsafeUtils.objectFieldOffset(valueField);
+            valueFieldOffset = UNSAFE.objectFieldOffset(valueField);
             stringCreator = getStringCreatorJDK17();
         } catch (Throwable e) {
             e.printStackTrace();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -511,7 +511,7 @@ public static JSONWriter of() {
         } else {
             if (INCUBATOR_VECTOR_WRITER_CREATOR_UTF16 != null) {
                 jsonWriter = INCUBATOR_VECTOR_WRITER_CREATOR_UTF16.apply(writeContext);
-            } else if (FIELD_STRING_VALUE != null && STRING_CODER != null && STRING_VALUE != null && UNSAFE_SUPPORT) {
+            } else if (FIELD_STRING_VALUE != null && STRING_CODER != null && STRING_VALUE != null) {
                 jsonWriter = new JSONWriterUTF16JDK9UF(writeContext);
             } else {
                 jsonWriter = new JSONWriterUTF16(writeContext);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.IOUtils;
 import com.alibaba.fastjson2.util.JDKUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 import com.alibaba.fastjson2.writer.ObjectWriter;
 
 import java.io.IOException;
@@ -1635,7 +1634,7 @@ public void writeDecimal(BigDecimal value, long features, DecimalFormat format)
         int scale = value.scale();
 
         if (precision < 19 && FIELD_DECIMAL_INT_COMPACT_OFFSET != -1) {
-            long intCompact = UnsafeUtils.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET);
+            long intCompact = UNSAFE.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET);
             if (scale == 0) {
                 ensureCapacity(off + 1);
                 this.bytes[off++] = BC_DECIMAL_LONG;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -18,7 +18,7 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.*;
 import static com.alibaba.fastjson2.util.IOUtils.*;
 import static com.alibaba.fastjson2.util.JDKUtils.FIELD_DECIMAL_INT_COMPACT_OFFSET;
-import static com.alibaba.fastjson2.util.UnsafeUtils.UNSAFE;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 class JSONWriterUTF16
         extends JSONWriter {
@@ -1265,7 +1265,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
         if (precision < 19
                 && (scale = value.scale()) >= 0
                 && FIELD_DECIMAL_INT_COMPACT_OFFSET != -1
-                && (unscaleValue = UnsafeUtils.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET)) != Long.MIN_VALUE
+                && (unscaleValue = UNSAFE.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET)) != Long.MIN_VALUE
                 && !asPlain
         ) {
             off = IOUtils.writeDecimal(chars, off, unscaleValue, scale);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK8UF.java
Patch:
@@ -1,10 +1,10 @@
 package com.alibaba.fastjson2;
 
 import com.alibaba.fastjson2.util.JDKUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import static com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
 import static com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 public final class JSONWriterUTF16JDK8UF
         extends JSONWriterUTF16 {
@@ -21,7 +21,7 @@ public void writeString(String str) {
 
         boolean browserSecure = (context.features & BrowserSecure.mask) != 0;
         boolean escapeNoneAscii = (context.features & EscapeNoneAscii.mask) != 0;
-        char[] value = (char[]) UnsafeUtils.UNSAFE.getObject(str, JDKUtils.FIELD_STRING_VALUE_OFFSET);
+        char[] value = (char[]) UNSAFE.getObject(str, JDKUtils.FIELD_STRING_VALUE_OFFSET);
         final int strlen = value.length;
 
         boolean escape = false;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK9UF.java
Patch:
@@ -5,7 +5,7 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
 import static com.alibaba.fastjson2.util.JDKUtils.STRING_CODER;
 import static com.alibaba.fastjson2.util.JDKUtils.STRING_VALUE;
-import static com.alibaba.fastjson2.util.UnsafeUtils.UNSAFE;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 final class JSONWriterUTF16JDK9UF
         extends JSONWriterUTF16 {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -17,6 +17,7 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.*;
 import static com.alibaba.fastjson2.util.IOUtils.*;
 import static com.alibaba.fastjson2.util.JDKUtils.FIELD_DECIMAL_INT_COMPACT_OFFSET;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 class JSONWriterUTF8
         extends JSONWriter {
@@ -2365,7 +2366,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
         if (precision < 19
                 && (scale = value.scale()) >= 0
                 && FIELD_DECIMAL_INT_COMPACT_OFFSET != -1
-                && (unscaleValue = UnsafeUtils.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET)) != Long.MIN_VALUE
+                && (unscaleValue = UNSAFE.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET)) != Long.MIN_VALUE
                 && !asPlain
         ) {
             off = IOUtils.writeDecimal(bytes, off, unscaleValue, scale);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueField.java
Patch:
@@ -4,10 +4,11 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
 import com.alibaba.fastjson2.util.TypeUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldReaderBoolValueField<T>
         extends FieldReaderObjectField<T> {
     FieldReaderBoolValueField(
@@ -68,7 +69,7 @@ public void accept(T object, boolean value) {
         }
 
         if (fieldOffset != -1) {
-            UnsafeUtils.putBoolean(object, fieldOffset, value);
+            UNSAFE.putBoolean(object, fieldOffset, value);
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDate.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
 import com.alibaba.fastjson2.util.DateUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -17,6 +16,8 @@
 import java.util.Locale;
 import java.util.function.BiConsumer;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldReaderDate<T>
         extends FieldReaderDateTimeCodec<T> {
     final BiConsumer<T, Date> function;
@@ -83,7 +84,7 @@ protected void accept(T object, Date value) {
         }
 
         if (fieldOffset != -1) {
-            UnsafeUtils.putObject(object, fieldOffset, value);
+            UNSAFE.putObject(object, fieldOffset, value);
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInstant.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
 import com.alibaba.fastjson2.util.DateUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -17,6 +16,8 @@
 import java.util.Locale;
 import java.util.function.BiConsumer;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 public final class FieldReaderInstant<T>
         extends FieldReaderDateTimeCodec<T> {
     final BiConsumer<T, Instant> function;
@@ -146,7 +147,7 @@ protected void accept(T object, Instant instant) {
         }
 
         if (fieldOffset != -1) {
-            UnsafeUtils.putObject(object, fieldOffset, instant);
+            UNSAFE.putObject(object, fieldOffset, instant);
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderLocalDateTime.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
 import com.alibaba.fastjson2.util.DateUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -16,6 +15,8 @@
 import java.util.Locale;
 import java.util.function.BiConsumer;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 public final class FieldReaderLocalDateTime<T>
         extends FieldReaderDateTimeCodec<T> {
     final BiConsumer<T, ZonedDateTime> function;
@@ -139,7 +140,7 @@ public void accept(Object object, LocalDateTime value) {
         }
 
         if (fieldOffset != -1) {
-            UnsafeUtils.putObject(object, fieldOffset, value);
+            UNSAFE.putObject(object, fieldOffset, value);
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObject.java
Patch:
@@ -16,6 +16,8 @@
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 public class FieldReaderObject<T>
         extends FieldReader<T> {
     protected ObjectReader initReader;
@@ -269,7 +271,7 @@ public void accept(T object, Object value) {
             } else if (method != null) {
                 method.invoke(object, value);
             } else {
-                field.set(object, value);
+                UNSAFE.putObject(object, fieldOffset, value);
             }
         } catch (Exception e) {
             throw new JSONException("set " + (function != null ? super.toString() : fieldName) + " error", e);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderZonedDateTime.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -16,6 +15,7 @@
 import java.util.function.BiConsumer;
 
 import static com.alibaba.fastjson2.util.DateUtils.DEFAULT_ZONE_ID;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 public class FieldReaderZonedDateTime<T>
         extends FieldReaderDateTimeCodec<T> {
@@ -151,7 +151,7 @@ protected void accept(T object, ZonedDateTime zdt) {
         }
 
         if (fieldOffset != -1) {
-            UnsafeUtils.putObject(object, fieldOffset, zdt);
+            UNSAFE.putObject(object, fieldOffset, zdt);
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/util/DynamicClassLoader.java
Patch:
@@ -83,7 +83,7 @@ public class DynamicClassLoader
                 ObjectWriter11.class,
                 ObjectWriter12.class,
                 ObjectWriterAdapter.class,
-                UnsafeUtils.class,
+                JDKUtils.class,
                 TypeUtils.class,
                 DateUtils.class,
                 PropertyNamingStrategy.class,

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.function.*;
 
 import static com.alibaba.fastjson2.util.JDKUtils.FIELD_DECIMAL_INT_COMPACT_OFFSET;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 import static java.lang.invoke.MethodType.methodType;
 
 public class TypeUtils {
@@ -1902,7 +1903,7 @@ public static boolean isInteger(BigDecimal decimal) {
         int precision = decimal.precision();
         if (precision < 20) {
             if (FIELD_DECIMAL_INT_COMPACT_OFFSET != -1) {
-                long intCompact = UnsafeUtils.getLong(decimal, FIELD_DECIMAL_INT_COMPACT_OFFSET);
+                long intCompact = UNSAFE.getLong(decimal, FIELD_DECIMAL_INT_COMPACT_OFFSET);
                 switch (scale) {
                     case 1:
                         return intCompact % 10 == 0;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolValField.java
Patch:
@@ -1,10 +1,11 @@
 package com.alibaba.fastjson2.writer;
 
 import com.alibaba.fastjson2.JSONException;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterBoolValField
         extends FieldWriterBoolVal {
     FieldWriterBoolValField(
@@ -32,7 +33,7 @@ public boolean getFieldValueBoolean(Object object) {
         try {
             boolean value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getBoolean(object, fieldOffset);
+                value = UNSAFE.getBoolean(object, fieldOffset);
             } else {
                 value = field.getBoolean(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterCharValField<T>
         extends FieldWriter<T> {
     FieldWriterCharValField(
@@ -32,7 +33,7 @@ public char getFieldValueChar(Object object) {
         try {
             char value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getChar(object, fieldOffset);
+                value = UNSAFE.getChar(object, fieldOffset);
             } else {
                 value = field.getChar(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 class FieldWriterDoubleField<T>
         extends FieldWriter<T> {
     protected FieldWriterDoubleField(
@@ -28,7 +29,7 @@ public Object getFieldValue(Object object) {
         try {
             Object value;
             if (fieldOffset != -1 && !fieldClass.isPrimitive()) {
-                value = UnsafeUtils.getObject(object, fieldOffset);
+                value = UNSAFE.getObject(object, fieldOffset);
             } else {
                 value = field.get(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterDoubleValField<T>
         extends FieldWriter<T> {
     FieldWriterDoubleValField(String name, int ordinal, String format, String label, Field field) {
@@ -25,7 +26,7 @@ public double getFieldValueDouble(Object object) {
         try {
             double value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getDouble(object, fieldOffset);
+                value = UNSAFE.getDouble(object, fieldOffset);
             } else {
                 value = field.getDouble(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 class FieldWriterFloatField<T>
         extends FieldWriter<T> {
     protected FieldWriterFloatField(
@@ -28,7 +29,7 @@ public Object getFieldValue(Object object) {
         try {
             Object value;
             if (fieldOffset != -1 && !fieldClass.isPrimitive()) {
-                value = UnsafeUtils.getObject(object, fieldOffset);
+                value = UNSAFE.getObject(object, fieldOffset);
             } else {
                 value = field.get(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterFloatValField<T>
         extends FieldWriter<T> {
     FieldWriterFloatValField(
@@ -32,7 +33,7 @@ public float getFieldValueFloat(T object) {
         try {
             float value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getFloat(object, fieldOffset);
+                value = UNSAFE.getFloat(object, fieldOffset);
             } else {
                 value = field.getFloat(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterInt16ValField<T>
         extends FieldWriterInt16<T> {
     FieldWriterInt16ValField(
@@ -32,7 +33,7 @@ public short getFieldValueShort(T object) {
         try {
             short value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getShort(object, fieldOffset);
+                value = UNSAFE.getShort(object, fieldOffset);
             } else {
                 value = field.getShort(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Val.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterInt32Val<T>
         extends FieldWriterInt32<T> {
     FieldWriterInt32Val(
@@ -32,7 +33,7 @@ public int getFieldValueInt(T object) {
         try {
             int value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getInt(object, fieldOffset);
+                value = UNSAFE.getInt(object, fieldOffset);
             } else {
                 value = field.getInt(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64ValField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterInt64ValField<T>
         extends FieldWriterInt64<T> {
     FieldWriterInt64ValField(
@@ -32,7 +33,7 @@ public long getFieldLong(T object) {
         try {
             long value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getLong(object, fieldOffset);
+                value = UNSAFE.getLong(object, fieldOffset);
             } else {
                 value = field.getLong(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterInt8ValField<T>
         extends FieldWriterInt8<T> {
     FieldWriterInt8ValField(
@@ -32,7 +33,7 @@ public byte getFieldValueByte(T object) {
         try {
             byte value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getByte(object, fieldOffset);
+                value = UNSAFE.getByte(object, fieldOffset);
             } else {
                 value = field.getByte(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisField.java
Patch:
@@ -2,10 +2,11 @@
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.lang.reflect.Field;
 
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
+
 final class FieldWriterMillisField<T>
         extends FieldWriterDate<T> {
     FieldWriterMillisField(String fieldName,
@@ -31,7 +32,7 @@ public long getFieldLong(T object) {
         try {
             long value;
             if (fieldOffset != -1) {
-                value = UnsafeUtils.getLong(object, fieldOffset);
+                value = UNSAFE.getLong(object, fieldOffset);
             } else {
                 value = field.getLong(object);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASMUtils.java
Patch:
@@ -1,9 +1,9 @@
 package com.alibaba.fastjson2.writer;
 
-import com.alibaba.fastjson2.util.UnsafeUtils;
+import com.alibaba.fastjson2.util.JDKUtils;
 
 import static com.alibaba.fastjson2.internal.asm.ASMUtils.type;
 
 final class ObjectWriterCreatorASMUtils {
-    static final String TYPE_UNSAFE_UTILS = type(UnsafeUtils.class);
+    static final String TYPE_UNSAFE_UTILS = type(JDKUtils.class);
 }

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderJSONBUFTest.java
Patch:
@@ -36,7 +36,7 @@ public void test() {
 
         {
             JSONReader.Context context = JSONFactory.createReadContext();
-            JSONReaderJSONB jsonReader = new JSONReaderJSONBUF(
+            JSONReaderJSONB jsonReader = new JSONReaderJSONB(
                     context,
                     jsonbBytes,
                     0,

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterTest.java
Patch:
@@ -1205,7 +1205,7 @@ static JSONObject parseObject(byte[] jsonbBytes) {
 
     static JSONObject parseObjectUF(byte[] jsonbBytes) {
         JSONReader.Context context = new JSONReader.Context(JSONFactory.getDefaultObjectReaderProvider());
-        JSONReader reader = new JSONReaderJSONBUF(
+        JSONReader reader = new JSONReaderJSONB(
                 context,
                 jsonbBytes,
                 0,
@@ -1234,7 +1234,7 @@ static <T> T parseObjectUF(byte[] jsonbBytes, Class<T> objectClass, JSONReader.F
         JSONReader.Context context = new JSONReader.Context(JSONFactory.getDefaultObjectReaderProvider());
         context.config(features);
 
-        JSONReader reader = new JSONReaderJSONBUF(
+        JSONReader reader = new JSONReaderJSONB(
                 context,
                 jsonbBytes,
                 0,

File: core/src/test/java/com/alibaba/fastjson2/util/XxHash64.java
Patch:
@@ -7,7 +7,7 @@
 import java.nio.charset.StandardCharsets;
 import java.time.Instant;
 
-import static com.alibaba.fastjson2.util.UnsafeUtils.UNSAFE;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 import static java.lang.Long.rotateLeft;
 import static java.lang.Math.min;
 import static sun.misc.Unsafe.ARRAY_BYTE_BASE_OFFSET;

File: extension/src/main/java/com/alibaba/fastjson2/support/csv/ArrowUtils.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.util.DateUtils;
 import com.alibaba.fastjson2.util.JDKUtils;
 import com.alibaba.fastjson2.util.TypeUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 import org.apache.arrow.memory.ArrowBuf;
 import org.apache.arrow.vector.*;
 
@@ -407,7 +406,7 @@ public static void setDecimal(DecimalVector vector, int row, BigDecimal decimal)
         }
         int precision = decimal.precision();
         if (precision < 19 && FIELD_DECIMAL_INT_COMPACT_OFFSET != -1) {
-            long unscaleValue = UnsafeUtils.getLong(decimal, FIELD_DECIMAL_INT_COMPACT_OFFSET);
+            long unscaleValue = UNSAFE.getLong(decimal, FIELD_DECIMAL_INT_COMPACT_OFFSET);
             if (unscaleValue != Long.MIN_VALUE) {
                 BitVectorHelper.setBit(vector.getValidityBuffer(), row);
                 ArrowBuf dataBuffer = vector.getDataBuffer();

File: incubator-vector/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16Vector.java
Patch:
@@ -10,7 +10,7 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
 import static com.alibaba.fastjson2.util.JDKUtils.STRING_CODER;
 import static com.alibaba.fastjson2.util.JDKUtils.STRING_VALUE;
-import static com.alibaba.fastjson2.util.UnsafeUtils.UNSAFE;
+import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE;
 
 final class JSONWriterUTF16Vector
         extends JSONWriterUTF16 {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -826,7 +826,7 @@ public <T> List<T> toJavaList(Class<T> clazz) {
         for (Object item : this) {
             T classItem;
             if (item instanceof Map) {
-                classItem = (T) objectReader.createInstance((Map) item, 0L);
+                classItem = (T) objectReader.createInstance((Map) item, JSONReader.Feature.SupportSmartMatch.mask);
             } else {
                 if (item == null || item.getClass() == clazz) {
                     list.add((T) item);

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONObject.java
Patch:
@@ -1008,7 +1008,7 @@ public <T> T toJavaObject(Class<T> clazz) {
 
         ObjectReaderProvider provider = JSONFactory.getDefaultObjectReaderProvider();
         ObjectReader objectReader = provider.getObjectReader(clazz);
-        return (T) objectReader.createInstance(this, 0L);
+        return (T) objectReader.createInstance(this, JSONReader.Feature.SupportSmartMatch.mask);
     }
 
     public <T> T toJavaObject(Class<T> clazz, ParserConfig config, int features) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -163,7 +163,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
                 if (autoTypeObjectReader != this) {
                     return autoTypeObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
                 }
-            } else {
+            } else if (jsonReader.isEnabled(JSONReader.Feature.ErrorOnNotSupportAutoType)) {
                 throw new JSONException(jsonReader.info("not support enumType : " + jsonReader.getString()));
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -364,11 +364,11 @@ public Object createInstance(long features) {
 
     @Override
     public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
-        ObjectReader objectReader = jsonReader.checkAutoType(this.listClass, 0, features);
         if (jsonReader.nextIfNull()) {
             return null;
         }
 
+        ObjectReader objectReader = jsonReader.checkAutoType(this.listClass, 0, features);
         Function builder = this.builder;
         Class listType = this.instanceType;
         if (objectReader != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -248,7 +248,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
                 value = jsonReader.readAny();
             } else {
                 ObjectReader autoTypeValueReader = jsonReader.checkAutoType(valueClass, 0, features);
-                if (autoTypeValueReader != null) {
+                if (autoTypeValueReader != null && autoTypeValueReader != this) {
                     value = autoTypeValueReader.readJSONBObject(jsonReader, valueType, name, features);
                 } else {
                     if (valueObjectReader == null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -311,7 +311,9 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
 
         if (type == BC_TYPED_ANY) {
             ObjectReader autoTypeObjectReader = jsonReader.checkAutoType(Object.class, 0, features);
-            return autoTypeObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
+            if (autoTypeObjectReader != null) {
+                return autoTypeObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
+            }
         }
 
         if (type == BC_NULL) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -80,7 +80,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
 
         if (type == BC_TYPED_ANY) {
             ObjectReader objectReader = jsonReader.checkAutoType(this.objectClass, typeNameHash, this.features | features);
-            if (objectReader != this) {
+            if (objectReader != null && objectReader != this) {
                 return (T) objectReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -2300,6 +2300,7 @@ public final void writeOffsetDateTime(OffsetDateTime dateTime) {
             chars[off++] = 'Z';
         } else {
             zoneId.getChars(0, zoneIdLength, chars, off);
+            off += zoneIdLength;
         }
         chars[off] = quote;
         this.off = off + 1;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -2193,6 +2193,7 @@ public final void writeOffsetDateTime(OffsetDateTime dateTime) {
             bytes[off++] = 'Z';
         } else {
             zoneId.getBytes(0, zoneIdLength, bytes, off);
+            off += zoneIdLength;
         }
         bytes[off] = (byte) quote;
         this.off = off + 1;

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -54,9 +54,10 @@ public abstract class BeanUtils {
             1616814008855344660L,
             2164749833121980361L,
             3724195282986200606L,
+            3977020351318456359L, // sun.nio.ch.FileChannelImpl
             4882459834864833642L,
             7981148566008458638L,
-            8344106065386396833L
+            8344106065386396833L,
     };
 
     public static String[] getRecordFieldNames(Class<?> recordType) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -2102,6 +2102,8 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
                 return JodaSupport.createLocalDateTimeReader((Class) type);
             case "org.joda.time.Instant":
                 return JodaSupport.createInstantReader((Class) type);
+            case "org.joda.time.DateTime":
+                return new ObjectReaderImplZonedDateTime(new JodaSupport.DateTimeFromZDT());
             case "javax.money.CurrencyUnit":
                 return MoneySupport.createCurrencyUnitReader();
             case "javax.money.MonetaryAmount":

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -963,6 +963,8 @@ ObjectWriter getExternalObjectWriter(String className, Class objectClass) {
                 return JodaSupport.createLocalDateWriter(objectClass, null);
             case "org.joda.time.LocalDateTime":
                 return JodaSupport.createLocalDateTimeWriter(objectClass, null);
+            case "org.joda.time.DateTime":
+                return new ObjectWriterImplZonedDateTime(null, null, new JodaSupport.DateTime2ZDT());
             default:
                 if (JdbcSupport.isClob(objectClass)) {
                     return JdbcSupport.createClobWriter(objectClass);

File: core/src/test/java/com/alibaba/fastjson2/issues_1600/Issue1603.java
Patch:
@@ -6,14 +6,13 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 public class Issue1603 {
     @Test
     public void test() {
         String text = "{\"deviceId\":\"16584\",\"srcAddress\":\"109.55.156.215\",\"ssssss\":null}";
         JSONObject jsonObject = JSON.parseObject(text);
         byte[] jsonBytes = JSON.toJSONBytes(jsonObject);
         String s = new String(jsonBytes);
-        assertEquals("{\"deviceId\":\"16584\",\"srcAddress\":\"109.55.156.215\"}",s);
+        assertEquals("{\"deviceId\":\"16584\",\"srcAddress\":\"109.55.156.215\"}", s);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues_1600/issue1603.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class issue1603 {
     @Test
-    public void test(){
+    public void test() {
         JSONObject jsonObject = JSON.parseObject("{\"deviceId\":\"16584\",\"srcAddress\":\"109.55.156.215\",\"ssssss\":null}");
         byte[] jsonBytes = JSON.toJSONBytes(jsonObject);
         System.out.println(new String(jsonBytes));

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -2419,7 +2419,9 @@ public final void write(JSONObject map) {
                 if (off == bytes.length) {
                     ensureCapacity(off + 1);
                 }
-                bytes[off++] = ',';
+                if (entry.getValue() != null) {
+                    bytes[off++] = ',';
+                }
             }
 
             Object value = entry.getValue();

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegment.java
Patch:
@@ -1106,6 +1106,7 @@ public void eval(JSONPath.Context context) {
     static final class CycleNameSegment
             extends JSONPathSegment {
         static final long HASH_STAR = Fnv.hashCode64("*");
+        static final long HASH_EMPTY = Fnv.hashCode64("");
         final String name;
         final long nameHashCode;
 
@@ -1134,7 +1135,7 @@ public void eval(JSONPath.Context context) {
             List values = new JSONArray();
 
             Consumer action;
-            if (nameHashCode == HASH_STAR && "*".equals(name)) {
+            if (nameHashCode == HASH_STAR || nameHashCode == HASH_EMPTY) {
                 action = new MapRecursive(context, values, 0);
             } else {
                 action = new MapLoop(context, values);
@@ -1249,7 +1250,7 @@ public MapRecursive(JSONPath.Context context, List values, int level) {
 
             @Override
             public void accept(Object value) {
-                if (level > maxLevel) {
+                if (level >= maxLevel) {
                     throw new JSONException("level too large");
                 } else {
                     if (value instanceof Map) {

File: codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/primitives/DateTypeTest.java
Patch:
@@ -27,7 +27,7 @@ public void test() {
         Bean bean1 = JSON.parseObject(str, Bean.class);
         assertEquals(bean.v01, bean1.v01);
         assertEquals(bean.v02, bean1.v02);
-        assertEquals(bean.v03.getTime(), bean1.v03.getTime());
+        assertEquals(bean.v03.getYear(), bean1.v03.getYear());
         assertEquals(bean.v04.getTime(), bean1.v04.getTime());
         assertEquals(bean.v05, bean1.v05);
         assertEquals(bean.v06, bean1.v06);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -91,7 +91,7 @@ public final void startObject() {
         startObject = true;
 
         int off = this.off;
-        int minCapacity = off + (pretty ? 2 + indent : 1);
+        int minCapacity = off + (pretty ? 3 + indent : 1);
         if (minCapacity >= chars.length) {
             ensureCapacity(minCapacity);
         }
@@ -160,7 +160,7 @@ public final void startArray() {
 
         level++;
         int off = this.off;
-        int minCapacity = off + (pretty ? 2 + indent : 1);
+        int minCapacity = off + (pretty ? 3 + indent : 1);
         if (minCapacity >= chars.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/test/java/com/alibaba/fastjson2/issues_1500/Issue1568.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.issues_1500;
 
-import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONB;
 import org.junit.jupiter.api.Test;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONBDump.java
Patch:
@@ -124,7 +124,7 @@ private void dumpAny() {
                                 ((long) (bytes[offset]) << 56);
                 offset += 8;
                 jsonWriter.writeInt64(int64Value);
-                jsonWriter.writeInt64(int64Value);
+
                 return;
             }
             case BC_BIGINT: {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -985,7 +985,7 @@ public <T> FieldWriter<T> createFieldWriter(
             return new FieldWriterStringMethod(fieldName, ordinal, format, label, features, method);
         }
 
-        if (fieldClass == List.class) {
+        if (fieldClass == List.class || fieldClass == Iterable.class) {
             Type itemType = null;
             if (fieldType instanceof ParameterizedType) {
                 itemType = ((ParameterizedType) fieldType).getActualTypeArguments()[0];

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -194,7 +194,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
             if (fieldType instanceof ParameterizedType) {
                 Type rawType = ((ParameterizedType) fieldType).getRawType();
                 if (List.class.isAssignableFrom((Class<?>) rawType)) {
-                    throw new JSONException(this.getClass().getSimpleName() + "s parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
+                    throw new JSONException(this.getClass().getSimpleName() + " parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
                 }
             }
         }
@@ -266,7 +266,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
             if (fieldType instanceof ParameterizedType) {
                 Type rawType = ((ParameterizedType) fieldType).getRawType();
                 if (List.class.isAssignableFrom((Class<?>) rawType)) {
-                    throw new JSONException(this.getClass().getSimpleName() + "s parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
+                    throw new JSONException(this.getClass().getSimpleName() + " parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
                 }
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum2X4.java
Patch:
@@ -133,7 +133,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
             if (fieldType instanceof ParameterizedType) {
                 Type rawType = ((ParameterizedType) fieldType).getRawType();
                 if (List.class.isAssignableFrom((Class<?>) rawType)) {
-                    throw new JSONException(this.getClass().getSimpleName() + "s parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
+                    throw new JSONException(this.getClass().getSimpleName() + " parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
                 }
             }
         }
@@ -178,7 +178,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
             if (fieldType instanceof ParameterizedType) {
                 Type rawType = ((ParameterizedType) fieldType).getRawType();
                 if (List.class.isAssignableFrom((Class<?>) rawType)) {
-                    throw new JSONException(this.getClass().getSimpleName() + "s parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
+                    throw new JSONException(this.getClass().getSimpleName() + " parses error, JSONReader not forward when field type belongs to collection to avoid OOM");
                 }
             }
         }

File: core/src/test/java/com/alibaba/fastjson2/issues_1500/Issue1545.java
Patch:
@@ -43,7 +43,6 @@ public class FieldPerm {
         private PermMode mode;
 
         public enum PermMode {
-
             READ,
 
             WRITE,

File: core/src/test/java/com/alibaba/fastjson2/issues_1500/Issue1545.java
Patch:
@@ -38,7 +38,6 @@ public class ApproveActionConfig {
 
     @Data
     public class FieldPerm {
-
         private String fieldId;
 
         private PermMode mode;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -187,6 +187,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
                 fieldValue = getEnumByHashCode(nameHash);
             }
         }
+        failFastIfNecessary(fieldValue, fieldType, this.getClass().getSimpleName());
         return fieldValue;
     }
 
@@ -248,6 +249,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 throw new JSONException(jsonReader.info("parse enum error, class " + enumClass.getName() + ", value " + strVal));
             }
         }
+        failFastIfNecessary(fieldValue, fieldType, this.getClass().getSimpleName());
         return fieldValue;
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum2X4.java
Patch:
@@ -125,6 +125,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
                 }
             }
         }
+        failFastIfNecessary(fieldValue, fieldType, this.getClass().getSimpleName());
         return fieldValue;
     }
 
@@ -159,6 +160,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 }
             }
         }
+        failFastIfNecessary(fieldValue, fieldType, this.getClass().getSimpleName());
         return fieldValue;
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -2039,8 +2039,9 @@ static <T> void parseObject(
         int cacheIndex = System.identityHashCode(Thread.currentThread()) & (CACHE_ITEMS.length - 1);
         final CacheItem cacheItem = CACHE_ITEMS[cacheIndex];
         byte[] bytes = BYTES_UPDATER.getAndSet(cacheItem, null);
+        int bufferSize = 512 * 1024;
         if (bytes == null) {
-            bytes = new byte[8192];
+            bytes = new byte[bufferSize];
         }
 
         int offset = 0, start = 0, end;
@@ -2090,7 +2091,7 @@ static <T> void parseObject(
                         start = 0;
                         offset = len;
                     } else {
-                        bytes = Arrays.copyOf(bytes, bytes.length + 8192);
+                        bytes = Arrays.copyOf(bytes, bytes.length + bufferSize);
                     }
                 }
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -54,8 +54,9 @@ class JSONReaderJSONB
         int cacheIndex = System.identityHashCode(Thread.currentThread()) & (CACHE_ITEMS.length - 1);
         cacheItem = CACHE_ITEMS[cacheIndex];
         byte[] bytes = BYTES_UPDATER.getAndSet(cacheItem, null);
+        int bufferSize = ctx.getBufferSize();
         if (bytes == null) {
-            bytes = new byte[8192];
+            bytes = new byte[bufferSize];
         }
 
         int off = 0;
@@ -68,7 +69,7 @@ class JSONReaderJSONB
                 off += n;
 
                 if (off == bytes.length) {
-                    bytes = Arrays.copyOf(bytes, bytes.length + 8192);
+                    bytes = Arrays.copyOf(bytes, bytes.length + bufferSize);
                 }
             }
         } catch (IOException ioe) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -377,8 +377,9 @@ public final String readReference() {
         final int cacheIndex = System.identityHashCode(Thread.currentThread()) & (CACHE_ITEMS.length - 1);
         final CacheItem cacheItem = CACHE_ITEMS[cacheIndex];
         byte[] bytes = BYTES_UPDATER.getAndSet(cacheItem, null);
+        int bufferSize = ctx.getBufferSize();
         if (bytes == null) {
-            bytes = new byte[8192];
+            bytes = new byte[bufferSize];
         }
 
         char[] chars;
@@ -392,7 +393,7 @@ public final String readReference() {
                 off += n;
 
                 if (off == bytes.length) {
-                    bytes = Arrays.copyOf(bytes, bytes.length + 8192);
+                    bytes = Arrays.copyOf(bytes, bytes.length + bufferSize);
                 }
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -39,8 +39,9 @@ class JSONReaderUTF8
         int cacheIndex = System.identityHashCode(Thread.currentThread()) & (CACHE_ITEMS.length - 1);
         cacheItem = CACHE_ITEMS[cacheIndex];
         byte[] bytes = BYTES_UPDATER.getAndSet(cacheItem, null);
+        int bufferSize = ctx.getBufferSize();
         if (bytes == null) {
-            bytes = new byte[8192];
+            bytes = new byte[bufferSize];
         }
 
         int off = 0;
@@ -53,7 +54,7 @@ class JSONReaderUTF8
                 off += n;
 
                 if (off == bytes.length) {
-                    bytes = Arrays.copyOf(bytes, bytes.length + 8192);
+                    bytes = Arrays.copyOf(bytes, bytes.length + bufferSize);
                 }
             }
         } catch (IOException ioe) {

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -209,7 +209,7 @@ public NameCacheEntry2(String name, long value0, long value1) {
             String property = System.getProperty("fastjson2.readerVector");
             if (property != null) {
                 property = property.trim();
-                if (property == null || property.isEmpty()) {
+                if (property.isEmpty()) {
                     property = properties.getProperty("fastjson2.readerVector");
                     if (property != null) {
                         property = property.trim();

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -1576,7 +1576,6 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                 } else {
                     Class<?> declaringClass = method.getDeclaringClass();
                     if (declaringClass.isInterface()
-                            && method.getParameterCount() == 0
                             && !Modifier.isAbstract(method.getModifiers())
                             && !ANDROID
                             && !GRAAL
@@ -1600,7 +1599,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                 }
             }
 
-            if (value != null && !returnType.isInstance(value)) {
+            if (!returnType.isInstance(value)) {
                 Function typeConvert = JSONFactory
                         .getDefaultObjectReaderProvider()
                         .getTypeConvert(

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentIndex.java
Patch:
@@ -126,8 +126,8 @@ public void eval(JSONPath.Context context) {
         if (object instanceof JSONPath.Sequence) {
             List sequence = ((JSONPath.Sequence) object).values;
             JSONArray values = new JSONArray(sequence.size());
-            for (int i = 0; i < sequence.size(); i++) {
-                context.value = sequence.get(i);
+            for (Object o : sequence) {
+                context.value = o;
                 JSONPath.Context itemContext = new JSONPath.Context(context.path, context, context.current, context.next, context.readerFeatures);
                 eval(itemContext);
                 values.add(itemContext.value);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1312,12 +1312,11 @@ public void write(Map map) {
                 write0(',');
             }
 
-            Map.Entry next = o;
             writeAny(
-                    next.getKey());
+                    o.getKey());
             write0(':');
             writeAny(
-                    next.getValue());
+                    o.getValue());
 
             first = false;
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -448,7 +448,7 @@ public void writeString(final char[] chars, final int off, final int len) {
         if (ascii) {
             if (len <= STR_ASCII_FIX_LEN) {
                 bytes[this.off++] = (byte) (len + BC_STR_ASCII_FIX_MIN);
-            } else if (len >= INT32_BYTE_MIN && len <= INT32_BYTE_MAX) {
+            } else if (len <= INT32_BYTE_MAX) {
                 bytes[this.off++] = BC_STR_ASCII;
                 bytes[this.off++] = (byte) (BC_INT32_BYTE_ZERO + (len >> 8));
                 bytes[this.off++] = (byte) (len);
@@ -671,7 +671,7 @@ public void writeString(List<String> list) {
                 int strlen = str.length();
                 if (strlen <= STR_ASCII_FIX_LEN) {
                     bytes[off++] = (byte) (strlen + BC_STR_ASCII_FIX_MIN);
-                } else if (strlen >= INT32_BYTE_MIN && strlen <= INT32_BYTE_MAX) {
+                } else if (strlen <= INT32_BYTE_MAX) {
                     bytes[off++] = BC_STR_ASCII;
                     bytes[off++] = (byte) (BC_INT32_BYTE_ZERO + (strlen >> 8));
                     bytes[off++] = (byte) (strlen);
@@ -1194,7 +1194,7 @@ public void writeEnum(Enum e) {
             writeString(e.name());
         } else {
             int val = e.ordinal();
-            if (val >= BC_INT32_NUM_MIN && val <= BC_INT32_NUM_MAX) {
+            if (val <= BC_INT32_NUM_MAX) {
                 if (off == bytes.length) {
                     ensureCapacity(off + 1);
                 }

File: core/src/main/java/com/alibaba/fastjson2/SymbolTable.java
Patch:
@@ -16,8 +16,7 @@ public final class SymbolTable {
     private final long[] hashCodesOrigin;
 
     public SymbolTable(String... input) {
-        Set<String> set = new TreeSet<>();
-        set.addAll(Arrays.asList(input));
+        Set<String> set = new TreeSet<>(Arrays.asList(input));
         names = new String[set.size()];
         Iterator<String> it = set.iterator();
 

File: core/src/main/java/com/alibaba/fastjson2/TypeReference.java
Patch:
@@ -53,7 +53,7 @@ public TypeReference() {
      * @throws NullPointerException If the {@link Type} is null
      */
     @SuppressWarnings("unchecked")
-    private TypeReference(Type type, boolean raw) {
+    private TypeReference(Type type) {
         if (type == null) {
             throw new NullPointerException();
         }
@@ -226,7 +226,7 @@ public T toJavaObject(JSONObject object, JSONReader.Feature... features) {
      * @param type specify the {@link Type} to be converted
      */
     public static TypeReference<?> get(Type type) {
-        return new TypeReference<Object>(type, true) {
+        return new TypeReference<Object>(type) {
             // nothing
         };
     }

File: core/src/main/java/com/alibaba/fastjson2/internal/asm/ByteVector.java
Patch:
@@ -235,9 +235,8 @@ public void putUTF8(final String stringValue) {
      * @param stringValue the String to encode.
      * @param offset the index of the first character to encode. The previous characters are supposed
      * to have already been encoded, using only one byte per character.
-     * @return this byte vector.
      */
-    final ByteVector encodeUtf8(final String stringValue, final int offset) {
+    final void encodeUtf8(final String stringValue, final int offset) {
         int charLength = stringValue.length();
         int byteLength = offset;
         for (int i = offset; i < charLength; ++i) {
@@ -277,7 +276,6 @@ final ByteVector encodeUtf8(final String stringValue, final int offset) {
             }
         }
         length = currentLength;
-        return this;
     }
 
     /**

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -73,7 +73,7 @@ public void accept(T object, Object value) {
         Collection values = (Collection) value;
         for (Object item : values) {
             if (item == null) {
-                collection.add(item);
+                collection.add(null);
                 continue;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -146,9 +146,7 @@ public final ObjectReader checkAutoType(JSONReader jsonReader, Class expectClass
                     }
                 }
 
-                if (filterClass != null) {
-                    return context.getObjectReader(filterClass);
-                }
+                return context.getObjectReader(filterClass);
             }
 
             ObjectReader autoTypeObjectReader = jsonReader.getObjectReaderAutoType(typeHash, expectClass, features);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderException.java
Patch:
@@ -367,7 +367,6 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
     }
 
     private Throwable createObject(String message, Throwable cause) {
-        Throwable object = null;
         try {
             if (constructorMessageCause != null) {
                 if (cause != null && message != null) {
@@ -412,6 +411,6 @@ private Throwable createObject(String message, Throwable cause) {
             throw new JSONException("create Exception error, class " + objectClass.getName() + ", " + e.getMessage(), e);
         }
 
-        return object;
+        return null;
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -957,7 +957,7 @@ public ObjectReader getObjectReader(Type objectType, boolean fieldBased) {
         Class<?> objectClass = TypeUtils.getMapping(objectType);
 
         String className = objectClass.getName();
-        if (objectReader == null && !fieldBased) {
+        if (!fieldBased) {
             if (className.equals("com.google.common.collect.ArrayListMultimap")) {
                 objectReader = ObjectReaderImplMap.of(null, objectClass, 0);
             }

File: core/src/main/java/com/alibaba/fastjson2/schema/JSONSchema.java
Patch:
@@ -323,9 +323,7 @@ public static JSONSchema of(JSONObject input, JSONSchema parent) {
                         return new AnyOf(input, parent);
                     }
 
-                    if (oneOf) {
-                        return new OneOf(input, parent);
-                    }
+                    return new OneOf(input, parent);
                 }
                 JSONSchema[] items = new JSONSchema[count];
                 int index = 0;

File: core/src/main/java/com/alibaba/fastjson2/schema/NumberSchema.java
Patch:
@@ -181,9 +181,7 @@ public ValidateResult validate(long value) {
                     return new ValidateResult(false, exclusiveMinimum ? "exclusiveMinimum not match, expect >= %s, but %s" : "minimum not match, expect >= %s, but %s", minimum, value);
                 }
             } else {
-                if (decimalValue == null) {
-                    decimalValue = BigDecimal.valueOf(value);
-                }
+                decimalValue = BigDecimal.valueOf(value);
                 if (exclusiveMinimum
                         ? minimum.compareTo(decimalValue) >= 0
                         : minimum.compareTo(decimalValue) > 0) {

File: core/src/main/java/com/alibaba/fastjson2/schema/ValidateResult.java
Patch:
@@ -33,7 +33,7 @@ public boolean isSuccess() {
 
     public String getMessage() {
         if (message == null) {
-            if (format != null && args != null && args.length > 0) {
+            if (format != null && args.length > 0) {
                 String s = String.format(format, args);
                 if (cause != null) {
                     s += "; " + cause.getMessage();

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVReaderUTF8.java
Patch:
@@ -247,9 +247,6 @@ Object readValue(byte[] bytes, int off, int len, Type type) {
         }
 
         if (type == Float.class) {
-            if (len == 0) {
-                return null;
-            }
             return TypeUtils.parseFloat(bytes, off, len);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/util/FDBigInteger.java
Patch:
@@ -481,7 +481,7 @@ public FDBigInteger rightInplaceSub(FDBigInteger subtrahend) {
         int sIndex = 0;
         long borrow = 0L;
         for (; sIndex < offsetDiff; sIndex++) {
-            long diff = 0L - (sData[sIndex] & 0XFFFFFFFFL) + borrow;
+            long diff = -(sData[sIndex] & 0XFFFFFFFFL) + borrow;
             sData[sIndex] = (int) diff;
             borrow = diff >> 32; // signed shift
         }

File: core/src/main/java/com/alibaba/fastjson2/util/MapMultiValueType.java
Patch:
@@ -45,13 +45,13 @@ public static <T extends Map> MapMultiValueType<T> of(
             String name,
             Type type
     ) {
-        return new MapMultiValueType<T>(mapType, name, type);
+        return new MapMultiValueType<>(mapType, name, type);
     }
 
     public static <T extends Map> MapMultiValueType<T> of(
             Class<T> mapType,
             Map<String, Type> types
     ) {
-        return new MapMultiValueType<T>(mapType, types);
+        return new MapMultiValueType<>(mapType, types);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringField.java
Patch:
@@ -28,7 +28,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
                 return false;
             }
 
-            if (value == null && (features & (JSONWriter.Feature.NullAsDefaultValue.mask | JSONWriter.Feature.WriteNullStringAsEmpty.mask)) != 0) {
+            if ((features & (JSONWriter.Feature.NullAsDefaultValue.mask | JSONWriter.Feature.WriteNullStringAsEmpty.mask)) != 0) {
                 writeFieldName(jsonWriter);
                 jsonWriter.writeString("");
                 return true;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCalendar.java
Patch:
@@ -47,7 +47,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             return;
         }
 
-        if (format == null && (format == null && ctx.isDateFormatMillis())) {
+        if (format == null && ctx.isDateFormatMillis()) {
             jsonWriter.writeInt64(millis);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt16ValueArray.java
Patch:
@@ -46,7 +46,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         short[] shorts;
-        if (function != null && object != null) {
+        if (function != null) {
             shorts = function.apply(object);
         } else {
             shorts = (short[]) object;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt32ValueArray.java
Patch:
@@ -31,7 +31,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         }
 
         int[] array;
-        if (function != null && object != null) {
+        if (function != null) {
             array = function.apply(object);
         } else {
             array = (int[]) object;
@@ -48,7 +48,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         int[] array;
-        if (function != null && object != null) {
+        if (function != null) {
             array = function.apply(object);
         } else {
             array = (int[]) object;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64.java
Patch:
@@ -42,8 +42,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         ) {
             long contextFeatures = jsonWriter.getFeatures();
             if ((contextFeatures & WriteClassName.mask) == 0) {
-                boolean writeAsString = (contextFeatures & (WriteNonStringValueAsString.mask | WriteLongAsString.mask)) != 0
-                        || ((contextFeatures & BrowserCompatible.mask) != 0 && (i > 9007199254740991L || i < -9007199254740991L));
+                boolean writeAsString = (contextFeatures & (WriteNonStringValueAsString.mask | WriteLongAsString.mask)) != 0;
                 if (!writeAsString) {
                     jsonWriter.writeRaw('L');
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64ValueArray.java
Patch:
@@ -34,7 +34,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         }
 
         long[] array;
-        if (function != null && object != null) {
+        if (function != null) {
             array = function.apply(object);
         } else {
             array = (long[]) object;
@@ -57,7 +57,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         long[] array;
-        if (function != null && object != null) {
+        if (function != null) {
             array = function.apply(object);
         } else {
             array = (long[]) object;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8ValueArray.java
Patch:
@@ -54,7 +54,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         byte[] bytes;
-        if (function != null && object != null) {
+        if (function != null) {
             bytes = function.apply(object);
         } else {
             bytes = (byte[]) object;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -594,12 +594,12 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
                 continue;
             }
 
-            Object enryKey = entry.getKey();
+            Object entryKey = entry.getKey();
             String key;
-            if (enryKey == null) {
+            if (entryKey == null) {
                 key = null;
             } else {
-                key = enryKey.toString();
+                key = entryKey.toString();
             }
 
             if (propertyPreFilter != null) {

File: core/src/main/java/com/alibaba/fastjson2/stream/StreamReader.java
Patch:
@@ -546,7 +546,8 @@ public <T> Stream<T> stream() {
         return StreamSupport.stream(new StreamReaderSpliterator(this), false);
     }
 
-    public static class StreamReaderSpliterator<T> implements Spliterator<T> {
+    private static class StreamReaderSpliterator<T>
+            implements Spliterator<T> {
         private final StreamReader<T> streamReader;
 
         public StreamReaderSpliterator(StreamReader streamReader) {

File: core/src/main/java/com/alibaba/fastjson2/stream/StreamReader.java
Patch:
@@ -547,7 +547,6 @@ public <T> Stream<T> stream() {
     }
 
     public static class StreamReaderSpliterator<T> implements Spliterator<T> {
-
         private final StreamReader<T> streamReader;
 
         public StreamReaderSpliterator(StreamReader streamReader) {
@@ -580,7 +579,7 @@ public long estimateSize() {
 
         @Override
         public int characteristics() {
-            return ORDERED + NONNULL+ IMMUTABLE;
+            return ORDERED + NONNULL + IMMUTABLE;
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -77,6 +77,7 @@ public void writeAny(Object value) {
 
     @Override
     public void startObject() {
+        super.checkLevel(level);
         level++;
         int off = this.off;
         if (off == bytes.length) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -83,6 +83,7 @@ public final void writeColon() {
 
     @Override
     public final void startObject() {
+        super.checkLevel(level);
         level++;
         startObject = true;
 
@@ -150,6 +151,7 @@ public final void writeComma() {
 
     @Override
     public final void startArray() {
+        super.checkLevel(level);
         level++;
         int off = this.off;
         int minCapacity = off + (pretty ? 2 + indent : 1);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -178,6 +178,7 @@ public final void writeColon() {
 
     @Override
     public final void startObject() {
+        super.checkLevel(level);
         level++;
         startObject = true;
 
@@ -245,6 +246,7 @@ public final void writeComma() {
 
     @Override
     public final void startArray() {
+        super.checkLevel(level);
         level++;
         int off = this.off;
         int minCapacity = off + (pretty ? 2 + indent : 1);

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterUTF16Test.java
Patch:
@@ -104,7 +104,7 @@ public void write0() {
 
     @Test
     public void startObject() {
-        final int COUNT = 100_000;
+        final int COUNT = 2048;
         JSONWriterUTF16 jsonWriter = new JSONWriterUTF16(JSONFactory.createWriteContext());
         for (int i = 0; i < COUNT; i++) {
             jsonWriter.startObject();
@@ -132,7 +132,7 @@ public void endObject() {
 
     @Test
     public void startArray() {
-        final int COUNT = 100_000;
+        final int COUNT = 2048;
         JSONWriterUTF16 jsonWriter = new JSONWriterUTF16(JSONFactory.createWriteContext());
         for (int i = 0; i < COUNT; i++) {
             jsonWriter.startArray();

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterUTF8Test.java
Patch:
@@ -160,7 +160,7 @@ public void write0() {
 
     @Test
     public void startObject() {
-        final int COUNT = 100_000;
+        final int COUNT = 2048;
         JSONWriterUTF8 jsonWriter = new JSONWriterUTF8(JSONFactory.createWriteContext());
         for (int i = 0; i < COUNT; i++) {
             jsonWriter.startObject();
@@ -188,7 +188,7 @@ public void endObject() {
 
     @Test
     public void startArray() {
-        final int COUNT = 100_000;
+        final int COUNT = 2048;
         JSONWriterUTF8 jsonWriter = new JSONWriterUTF8(JSONFactory.createWriteContext());
         for (int i = 0; i < COUNT; i++) {
             jsonWriter.startArray();

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -2361,7 +2361,7 @@ public final String readFieldName() {
                         }
                         NAME_CACHE2[indexMask] = new NameCacheEntry2(name, nameValue0, nameValue1);
                         return name;
-                    } else if (entry.value0 == nameValue0 && entry.value0 == nameValue1) {
+                    } else if (entry.value0 == nameValue0 && entry.value1 == nameValue1) {
                         return entry.name;
                     }
                 } else {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1499,7 +1499,7 @@ public final void writeRaw(char c0, char c1) {
     @Override
     public final void writeNameRaw(char[] name) {
         int off = this.off;
-        int minCapacity = off + name.length + 1;
+        int minCapacity = off + name.length + 2 + indent;
         if (minCapacity >= this.chars.length) {
             ensureCapacity(minCapacity);
         }
@@ -1522,7 +1522,7 @@ public final void writeNameRaw(char[] name) {
 
     @Override
     public final void writeNameRaw(char[] chars, int off, int len) {
-        int minCapacity = this.off + len + 1;
+        int minCapacity = this.off + len + 2 + indent;
         if (minCapacity >= this.chars.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -1513,7 +1513,7 @@ public final void writeRaw(byte[] bytes) {
     @Override
     public final void writeNameRaw(byte[] name) {
         int off = this.off;
-        int minCapacity = off + name.length + (pretty ? 2 + indent : 1);
+        int minCapacity = off + name.length + 2 + indent;
         if (minCapacity >= this.bytes.length) {
             ensureCapacity(minCapacity);
         }
@@ -1565,7 +1565,7 @@ public final void writeRaw(char c0, char c1) {
 
     @Override
     public final void writeNameRaw(byte[] bytes, int off, int len) {
-        int minCapacity = this.off + len + 1;
+        int minCapacity = this.off + len + 2 + indent;
         if (minCapacity >= this.bytes.length) {
             ensureCapacity(minCapacity);
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCalendar.java
Patch:
@@ -100,7 +100,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         }
 
         long millis = jsonReader.readInt64Value();
-        if (formatUnixTime) {
+        if (formatUnixTime || jsonReader.getContext().isFormatUnixTime()) {
             millis *= 1000;
         }
 

File: core/src/test/java/com/alibaba/fastjson2/date/CalendarFieldTest.java
Patch:
@@ -143,7 +143,7 @@ public void test_3() {
         assertEquals("{\"value\":1654686106}", str);
 
         Bean bean1 = JSON.parseObject(str, Bean.class, "unixtime");
-        assertEquals(1654686106, bean1.value.getTime().getTime());
+        assertEquals(1654686106000L, bean1.value.getTime().getTime());
     }
 
     public static class Bean {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/StringToAny.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.function.impl;
 
+import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONArray;
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.util.DateUtils;
@@ -76,6 +77,8 @@ public Object apply(Object from) {
         if (targetClass == Collections.class || targetClass == List.class || targetClass == JSONArray.class) {
             if ("[]".equals(str)) {
                 return new JSONArray();
+            } else {
+                return JSON.parseObject(str, targetClass);
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -86,7 +86,7 @@ private Object readDate(JSONReader jsonReader) {
             return null;
         }
 
-        if ((formatUnixTime || formatUnixTime) && jsonReader.isString()) {
+        if ((formatUnixTime || formatMillis) && jsonReader.isString()) {
             millis = jsonReader.readInt64Value();
             if (formatUnixTime) {
                 millis *= 1000L;

File: core/src/test/java/com/alibaba/fastjson2/support/sql/JdbcTimeTest.java
Patch:
@@ -61,7 +61,7 @@ public void test_timestamp() {
 
     @Test
     public void test_timestamp_nano() {
-        LocalDateTime now = LocalDateTime.now();
+        LocalDateTime now = LocalDateTime.of(2023, 6, 4, 12, 58, 54, 6);
         Timestamp ts = Timestamp.valueOf(now);
 
         {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -48,7 +48,7 @@ public final class ObjectWriterImplMap
 
     final boolean jsonObject1; // fastjson 1 JSONObject
     final Field jsonObject1InnerMap;
-    long jsonObject1InnerMapOffset = -1;
+    final long jsonObject1InnerMapOffset;
 
     final char[] typeInfoUTF16;
     final byte[] typeInfoUTF8;
@@ -78,6 +78,7 @@ public ObjectWriterImplMap(Type keyType, Type valueType, Class objectClass, Type
         jsonObject1 = "JO1".equals(typeName);
         this.jsonbTypeInfo = JSONB.toBytes(typeName);
         this.typeNameHash = Fnv.hashCode64(typeName);
+        long jsonObject1InnerMapOffset = -1;
         if (jsonObject1) {
             jsonObject1InnerMap = BeanUtils.getDeclaredField(objectClass, "map");
             if (jsonObject1InnerMap != null) {
@@ -89,6 +90,7 @@ public ObjectWriterImplMap(Type keyType, Type valueType, Class objectClass, Type
         } else {
             jsonObject1InnerMap = null;
         }
+        this.jsonObject1InnerMapOffset = jsonObject1InnerMapOffset;
     }
 
     public static ObjectWriterImplMap of(Class objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -30,7 +30,6 @@
 import static com.alibaba.fastjson2.JSONReader.EOI;
 import static com.alibaba.fastjson2.JSONReader.Feature.IgnoreCheckClose;
 import static com.alibaba.fastjson2.JSONReader.Feature.UseNativeObject;
-import static com.alibaba.fastjson2.util.JDKUtils.*;
 
 public interface JSON {
     /**
@@ -879,7 +878,7 @@ static <T> T parseObject(String text, TypeReference<T> typeReference, JSONReader
             if (reader.ch != EOI && (reader.context.features & IgnoreCheckClose.mask) == 0) {
                 throw new JSONException(reader.info("input not end"));
             }
-            return (T) object;
+            return object;
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONBDump.java
Patch:
@@ -32,7 +32,7 @@ final class JSONBDump {
 
     String lastReference;
 
-    JSONWriter jsonWriter;
+    final JSONWriter jsonWriter;
     final SymbolTable symbolTable;
 
     final Map<Integer, String> symbols = new HashMap<>();

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -1002,12 +1002,12 @@ public BigDecimal getBigDecimal(String key) {
             }
 
             if (value instanceof Float) {
-                float floatValue = ((Float) value).floatValue();
+                float floatValue = (Float) value;
                 return toBigDecimal(floatValue);
             }
 
             if (value instanceof Double) {
-                double doubleValue = ((Double) value).doubleValue();
+                double doubleValue = (Double) value;
                 return toBigDecimal(doubleValue);
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONPObject.java
Patch:
@@ -6,7 +6,7 @@
 public class JSONPObject {
     private String function;
 
-    private final List<Object> parameters = new ArrayList<Object>();
+    private final List<Object> parameters = new ArrayList<>();
 
     public JSONPObject() {
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONPathMulti.java
Patch:
@@ -20,8 +20,7 @@ final class JSONPathMulti
 
         boolean extractSupport = true;
         boolean ref = true;
-        for (int i = 0, l = segments.size(); i < l; i++) {
-            JSONPathSegment segment = segments.get(i);
+        for (JSONPathSegment segment : segments) {
             if (segment instanceof JSONPathSegmentIndex) {
                 if (((JSONPathSegmentIndex) segment).index < 0) {
                     extractSupport = false;

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentName.java
Patch:
@@ -259,8 +259,8 @@ public void eval(JSONPath.Context context) {
         if (object instanceof JSONPath.Sequence) {
             List sequence = ((JSONPath.Sequence) object).values;
             JSONArray values = new JSONArray(sequence.size());
-            for (int i = 0; i < sequence.size(); i++) {
-                context.value = sequence.get(i);
+            for (Object o : sequence) {
+                context.value = o;
                 JSONPath.Context itemContext = new JSONPath.Context(context.path, context, context.current, context.next, context.readerFeatures);
                 eval(itemContext);
                 Object val = itemContext.value;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -795,7 +795,7 @@ public final long getNameHashCodeLCase() {
         }
 
         long hashCode = Fnv.MAGIC_HASH_CODE;
-        for (; offset < end; ) {
+        while (offset < end) {
             int c = bytes[offset];
 
             if (c == '\\') {
@@ -1294,7 +1294,6 @@ protected final void readString0() {
         int valueLength;
         valueEscape = false;
 
-        _for:
         for (int i = 0; ; ++i) {
             int c = bytes[offset];
             if (c == '\\') {
@@ -1318,7 +1317,7 @@ protected final void readString0() {
 
             if (c == quote) {
                 valueLength = i;
-                break _for;
+                break;
             }
             offset++;
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONBUF.java
Patch:
@@ -383,7 +383,7 @@ public long readFieldNameHashCode() {
             strlen = readLength();
             strBegin = offset;
         } else {
-            StringBuffer message = new StringBuffer()
+            StringBuilder message = new StringBuilder()
                     .append("fieldName not support input type ")
                     .append(typeName(strtype));
             if (strtype == BC_REFERENCE) {

File: core/src/main/java/com/alibaba/fastjson2/JSONValidator.java
Patch:
@@ -5,10 +5,9 @@ public enum Type {
         Object, Array, Value
     }
 
-    private JSONReader jsonReader;
+    private final JSONReader jsonReader;
     private Boolean validateResult;
     private Type type;
-    private char firstChar;
 
     protected JSONValidator(JSONReader jsonReader) {
         this.jsonReader = jsonReader;
@@ -31,9 +30,9 @@ public boolean validate() {
             return validateResult;
         }
 
+        char firstChar;
         try {
             firstChar = jsonReader.current();
-
             jsonReader.skipValue();
         } catch (JSONException error) {
             return validateResult = false;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK8.java
Patch:
@@ -29,8 +29,7 @@ public void writeString(String str) {
         final int strlen = value.length;
 
         boolean escape = false;
-        for (int i = 0; i < strlen; i++) {
-            char c0 = value[i];
+        for (char c0 : value) {
             if (c0 == quote || c0 == '\\' || c0 < ' '
                     || (browserSecure && (c0 == '<' || c0 == '>' || c0 == '(' || c0 == ')'))
                     || (escapeNoneAscii && c0 > 0x007F)

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK8UF.java
Patch:
@@ -25,8 +25,7 @@ public void writeString(String str) {
         final int strlen = value.length;
 
         boolean escape = false;
-        for (int i = 0; i < strlen; i++) {
-            char c0 = value[i];
+        for (char c0 : value) {
             if (c0 == quote || c0 == '\\' || c0 < ' '
                     || (browserSecure && (c0 == '<' || c0 == '>' || c0 == '(' || c0 == ')'))
                     || (escapeNoneAscii && c0 > 0x007F)

File: core/src/main/java/com/alibaba/fastjson2/SymbolTable.java
Patch:
@@ -17,9 +17,7 @@ public final class SymbolTable {
 
     public SymbolTable(String... input) {
         Set<String> set = new TreeSet<>();
-        for (String name : input) {
-            set.add(name);
-        }
+        set.addAll(Arrays.asList(input));
         names = new String[set.size()];
         Iterator<String> it = set.iterator();
 

File: core/src/main/java/com/alibaba/fastjson2/filter/ContextAutoTypeBeforeHandler.java
Patch:
@@ -189,9 +189,7 @@ public ContextAutoTypeBeforeHandler(boolean includeBasic, String... acceptNames)
                     "javax.validation.ValidationException",
                     "javax.validation.NoProviderFoundException"
             };
-            for (String basicType : basicTypeNames) {
-                nameSet.add(basicType);
-            }
+            nameSet.addAll(Arrays.asList(basicTypeNames));
         }
 
         for (String name : acceptNames) {

File: core/src/main/java/com/alibaba/fastjson2/filter/SimplePropertyPreFilter.java
Patch:
@@ -8,8 +8,8 @@
 public class SimplePropertyPreFilter
         implements PropertyPreFilter {
     private final Class<?> clazz;
-    private final Set<String> includes = new HashSet<String>();
-    private final Set<String> excludes = new HashSet<String>();
+    private final Set<String> includes = new HashSet<>();
+    private final Set<String> excludes = new HashSet<>();
     private int maxLevel;
 
     public SimplePropertyPreFilter(String... properties) {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToBigDecimal.java
Patch:
@@ -19,7 +19,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? BigDecimal.ONE : BigDecimal.ZERO;
+            return (Boolean) o ? BigDecimal.ONE : BigDecimal.ZERO;
         }
 
         if (o instanceof Byte

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToBigInteger.java
Patch:
@@ -17,7 +17,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? BigInteger.ONE : BigInteger.ZERO;
+            return (Boolean) o ? BigInteger.ONE : BigInteger.ZERO;
         }
 
         if (o instanceof Byte

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToByte.java
Patch:
@@ -19,7 +19,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? (byte) 1 : (byte) 0;
+            return (Boolean) o ? (byte) 1 : (byte) 0;
         }
 
         if (o instanceof Number) {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToDouble.java
Patch:
@@ -21,7 +21,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? 1D : 0D;
+            return (Boolean) o ? 1D : 0D;
         }
 
         if (o instanceof Number) {
@@ -40,8 +40,7 @@ public Object apply(Object o) {
         if (o instanceof List) {
             List list = (List) o;
             JSONArray array = new JSONArray(list.size());
-            for (int i = 0; i < list.size(); i++) {
-                Object item = list.get(i);
+            for (Object item : list) {
                 array.add(apply(item));
             }
             return array;

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToFloat.java
Patch:
@@ -19,7 +19,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? 1F : 0F;
+            return (Boolean) o ? 1F : 0F;
         }
 
         if (o instanceof Number) {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToInteger.java
Patch:
@@ -19,7 +19,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? 1 : 0;
+            return (Boolean) o ? 1 : 0;
         }
 
         if (o instanceof Number) {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToLong.java
Patch:
@@ -19,7 +19,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? 1L : 0L;
+            return (Boolean) o ? 1L : 0L;
         }
 
         if (o instanceof Number) {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToNumber.java
Patch:
@@ -19,7 +19,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? 1 : 0;
+            return (Boolean) o ? 1 : 0;
         }
 
         if (o instanceof Number) {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToShort.java
Patch:
@@ -19,7 +19,7 @@ public Object apply(Object o) {
         }
 
         if (o instanceof Boolean) {
-            return ((Boolean) o).booleanValue() ? (short) 1 : (short) 0;
+            return (Boolean) o ? (short) 1 : (short) 0;
         }
 
         if (o instanceof Number) {

File: core/src/main/java/com/alibaba/fastjson2/internal/asm/ASMUtils.java
Patch:
@@ -83,8 +83,8 @@ public class ASMUtils {
 
     static final Map<MethodInfo, String[]> paramMapping = new HashMap<>();
 
-    static Map<Class, String> descMapping = new HashMap<>();
-    static Map<Class, String> typeMapping = new HashMap<>();
+    static final Map<Class, String> descMapping = new HashMap<>();
+    static final Map<Class, String> typeMapping = new HashMap<>();
 
     static {
         paramMapping.put(

File: core/src/main/java/com/alibaba/fastjson2/internal/asm/Edge.java
Patch:
@@ -46,7 +46,7 @@ final class Edge {
     /**
      * The next edge in the list of outgoing edges of a basic block. See {@link Label#outgoingEdges}.
      */
-    Edge nextEdge;
+    final Edge nextEdge;
 
     /**
      * Constructs a new Edge.

File: core/src/main/java/com/alibaba/fastjson2/internal/asm/MethodWriter.java
Patch:
@@ -34,7 +34,7 @@
  * @author Eugene Kuleshov
  */
 public final class MethodWriter {
-    protected MethodWriter mv;
+    MethodWriter mv;
 
     /**
      * Where the constants used in this MethodWriter must be stored.
@@ -93,7 +93,7 @@ public final class MethodWriter {
      * The first basic block of the method. The next ones (in bytecode offset order) can be accessed
      * with the {@link Label#nextBasicBlock} field.
      */
-    private Label firstBasicBlock;
+    private final Label firstBasicBlock;
 
     /**
      * The last basic block of the method (in bytecode offset order). This field is updated each time

File: core/src/main/java/com/alibaba/fastjson2/internal/asm/Opcodes.java
Patch:
@@ -43,7 +43,7 @@ public interface Opcodes {
     // Java ClassFile versions (the minor version is stored in the 16 most significant bits, and the
     // major version in the 16 least significant bits).
 
-    int V1_8 = 0 << 16 | 52;
+    int V1_8 = 52;
 
     // Access flags values, defined in
     int ACC_PUBLIC = 0x0001; // class, field, method

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -87,8 +87,8 @@ public FieldReader(
         if (fieldOffset == -1 && field != null && method == null) {
             try {
                 field.setAccessible(true);
-            } catch (Throwable ignored) {
-                JDKUtils.setReflectErrorLast(ignored);
+            } catch (Throwable e) {
+                JDKUtils.setReflectErrorLast(e);
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInstant.java
Patch:
@@ -53,13 +53,13 @@ public final class FieldReaderInstant<T>
     }
 
     @Override
-    public final void readFieldValue(JSONReader jsonReader, T object) {
+    public void readFieldValue(JSONReader jsonReader, T object) {
         Instant date = (Instant) dateReader.readObject(jsonReader, fieldType, fieldName, features);
         accept(object, date);
     }
 
     @Override
-    public final void readFieldValueJSONB(JSONReader jsonReader, T object) {
+    public void readFieldValueJSONB(JSONReader jsonReader, T object) {
         Instant instant = jsonReader.readInstant();
         accept(object, instant);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderLocalDateTime.java
Patch:
@@ -56,7 +56,7 @@ public boolean supportAcceptType(Class valueClass) {
     }
 
     @Override
-    public final void readFieldValue(JSONReader jsonReader, Object object) {
+    public void readFieldValue(JSONReader jsonReader, Object object) {
         LocalDateTime date = (LocalDateTime) dateReader.readObject(jsonReader, fieldType, fieldName, features);
         accept(object, date);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -286,13 +286,13 @@ final void acceptPrimitive(T object, Object value) {
             }
         } else if (fieldClass == char.class) {
             if (value instanceof Character) {
-                char charValue = ((Character) value).charValue();
+                char charValue = (Character) value;
                 accept(object, charValue);
                 return;
             }
         } else if (fieldClass == boolean.class) {
             if (value instanceof Boolean) {
-                boolean booleanValue = ((Boolean) value).booleanValue();
+                boolean booleanValue = (Boolean) value;
                 accept(object, booleanValue);
                 return;
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFunc.java
Patch:
@@ -46,6 +46,6 @@ public void accept(T object, Object value) {
             schema.assertValidate(value);
         }
 
-        function.accept(object, (V) value);
+        function.accept(object, value);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStackTrace.java
Patch:
@@ -7,7 +7,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.Locale;
 import java.util.function.BiConsumer;
 
@@ -42,8 +41,7 @@ public void accept(Object object, Object value) {
             Collection collection = (Collection) value;
 
             int nullCount = 0;
-            for (Iterator it = collection.iterator(); it.hasNext(); ) {
-                Object item = it.next();
+            for (Object item : collection) {
                 if (item == null) {
                     nullCount++;
                 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayReaderMultiType.java
Patch:
@@ -104,7 +104,6 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
 
     @Override
     public Object createInstance(Collection collection) {
-        Object[] array = new Object[types.length];
-        return array;
+        return new Object[types.length];
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBigDecimal.java
Patch:
@@ -10,7 +10,7 @@
 
 final class ObjectReaderImplBigDecimal
         extends ObjectReaderPrimitive {
-    private Function converter = new ToBigDecimal();
+    private final Function converter = new ToBigDecimal();
     static final ObjectReaderImplBigDecimal INSTANCE = new ObjectReaderImplBigDecimal(null);
 
     final Function<BigDecimal, Object> function;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOptionalDouble.java
Patch:
@@ -19,7 +19,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
         if (value == null) {
             return OptionalDouble.empty();
         }
-        return OptionalDouble.of(value.doubleValue());
+        return OptionalDouble.of(value);
     }
 
     @Override
@@ -28,6 +28,6 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         if (value == null) {
             return OptionalDouble.empty();
         }
-        return OptionalDouble.of(value.doubleValue());
+        return OptionalDouble.of(value);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOptionalInt.java
Patch:
@@ -19,7 +19,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
         if (integer == null) {
             return OptionalInt.empty();
         }
-        return OptionalInt.of(integer.intValue());
+        return OptionalInt.of(integer);
     }
 
     @Override
@@ -28,6 +28,6 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         if (integer == null) {
             return OptionalInt.empty();
         }
-        return OptionalInt.of(integer.intValue());
+        return OptionalInt.of(integer);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOptionalLong.java
Patch:
@@ -19,7 +19,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
         if (integer == null) {
             return OptionalLong.empty();
         }
-        return OptionalLong.of(integer.longValue());
+        return OptionalLong.of(integer);
     }
 
     @Override
@@ -28,6 +28,6 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         if (integer == null) {
             return OptionalLong.empty();
         }
-        return OptionalLong.of(integer.longValue());
+        return OptionalLong.of(integer);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderInterface.java
Patch:
@@ -92,7 +92,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
             }
         }
 
-        object = (T) TypeUtils.newProxyInstance(objectClass, jsonObject);
+        object = TypeUtils.newProxyInstance(objectClass, jsonObject);
         if (schema != null) {
             schema.assertValidate(object);
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaders.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson2.function.*;
 import com.alibaba.fastjson2.util.TypeUtils;
 
-import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.math.BigDecimal;
 import java.util.ArrayList;
@@ -98,11 +97,11 @@ public static <T> ObjectReader<T> objectReader(
     }
 
     public static FieldReader fieldReader(String fieldName, Class fieldClass) {
-        return ObjectReaderCreator.INSTANCE.createFieldReader(null, fieldName, fieldClass, fieldClass, (Method) null);
+        return ObjectReaderCreator.INSTANCE.createFieldReader(null, fieldName, fieldClass, fieldClass, null);
     }
 
     public static FieldReader fieldReader(String fieldName, Type fieldType, Class fieldClass) {
-        return ObjectReaderCreator.INSTANCE.createFieldReader(null, fieldName, fieldType, fieldClass, (Method) null);
+        return ObjectReaderCreator.INSTANCE.createFieldReader(null, fieldName, fieldType, fieldClass, null);
     }
 
     public static <T> FieldReader fieldReaderBool(String fieldName, ObjBoolConsumer<T> function) {

File: core/src/main/java/com/alibaba/fastjson2/schema/AllOf.java
Patch:
@@ -27,7 +27,7 @@ public AllOf(JSONObject input, JSONSchema parent) {
 
             Object item = items.get(i);
             if (item instanceof Boolean) {
-                itemSchema = ((Boolean) item).booleanValue() ? Any.INSTANCE : Any.NOT_ANY;
+                itemSchema = (Boolean) item ? Any.INSTANCE : Any.NOT_ANY;
             } else {
                 JSONObject itemObject = (JSONObject) item;
                 if (!itemObject.containsKey("type") && type != null) {
@@ -71,8 +71,7 @@ public Type getType() {
 
     @Override
     public ValidateResult validate(Object value) {
-        for (int i = 0; i < items.length; i++) {
-            JSONSchema item = items[i];
+        for (JSONSchema item : items) {
             ValidateResult result = item.validate(value);
             if (!result.isSuccess()) {
                 return result;

File: core/src/main/java/com/alibaba/fastjson2/schema/AnyOf.java
Patch:
@@ -24,7 +24,7 @@ public AnyOf(JSONObject input, JSONSchema parent) {
         for (int i = 0; i < this.items.length; i++) {
             Object item = items.get(i);
             if (item instanceof Boolean) {
-                this.items[i] = ((Boolean) item).booleanValue() ? Any.INSTANCE : Any.NOT_ANY;
+                this.items[i] = (Boolean) item ? Any.INSTANCE : Any.NOT_ANY;
             } else {
                 this.items[i] = JSONSchema.of((JSONObject) item, parent);
             }

File: core/src/main/java/com/alibaba/fastjson2/schema/EnumSchema.java
Patch:
@@ -9,7 +9,7 @@
 
 final class EnumSchema
         extends JSONSchema {
-    Set<Object> items;
+    final Set<Object> items;
 
     EnumSchema(Object... items) {
         super(null, null);
@@ -59,7 +59,7 @@ public ValidateResult validate(Object value) {
         }
 
         if (value instanceof Long) {
-            long longValue = ((Long) value).longValue();
+            long longValue = (Long) value;
             if (longValue >= Integer.MIN_VALUE && longValue <= Integer.MAX_VALUE) {
                 value = (int) longValue;
             }

File: core/src/main/java/com/alibaba/fastjson2/schema/Not.java
Patch:
@@ -35,8 +35,7 @@ public ValidateResult validate(Object value) {
         }
 
         if (types != null) {
-            for (int i = 0; i < types.length; i++) {
-                Type type = types[i];
+            for (Type type : types) {
                 switch (type) {
                     case String:
                         if (value instanceof String) {
@@ -92,7 +91,7 @@ public ValidateResult validate(Object value) {
         }
 
         if (result != null) {
-            return result.booleanValue() ? FAIL_NOT : SUCCESS;
+            return result ? FAIL_NOT : SUCCESS;
         }
 
         return SUCCESS;

File: core/src/main/java/com/alibaba/fastjson2/schema/OneOf.java
Patch:
@@ -24,7 +24,7 @@ public OneOf(JSONObject input, JSONSchema parent) {
         for (int i = 0; i < this.items.length; i++) {
             Object item = items.get(i);
             if (item instanceof Boolean) {
-                this.items[i] = ((Boolean) item).booleanValue() ? Any.INSTANCE : Any.NOT_ANY;
+                this.items[i] = (Boolean) item ? Any.INSTANCE : Any.NOT_ANY;
             } else {
                 this.items[i] = JSONSchema.of((JSONObject) item, parent);
             }

File: core/src/main/java/com/alibaba/fastjson2/stream/JSONStreamReaderUTF16.java
Patch:
@@ -12,8 +12,8 @@
 public class JSONStreamReaderUTF16
         extends JSONStreamReader {
     char[] buf;
-    Reader input;
-    JSONReader.Context context;
+    final Reader input;
+    final JSONReader.Context context;
 
     JSONStreamReaderUTF16(Reader input, ObjectReaderAdapter objectReader) {
         super(objectReader);

File: core/src/main/java/com/alibaba/fastjson2/stream/JSONStreamReaderUTF8.java
Patch:
@@ -13,9 +13,9 @@
 class JSONStreamReaderUTF8
         extends JSONStreamReader {
     byte[] buf;
-    InputStream input;
+    final InputStream input;
     final Charset charset;
-    JSONReader.Context context;
+    final JSONReader.Context context;
 
     JSONStreamReaderUTF8(InputStream input, Charset charset, Type[] types) {
         super(types);

File: core/src/main/java/com/alibaba/fastjson2/stream/StreamReader.java
Patch:
@@ -189,7 +189,7 @@ public void stat(char[] bytes, int off, int len) {
                 boolean checkDate = false;
                 int sub = 0, slash = 0, colon = 0, dot = 0, nums = 0;
                 for (int i = off; i < end; i++) {
-                    char ch = (char) bytes[i];
+                    char ch = bytes[i];
                     switch (ch) {
                         case '-':
                             sub++;

File: core/src/main/java/com/alibaba/fastjson2/support/LambdaMiscCodec.java
Patch:
@@ -13,7 +13,6 @@
 import java.util.function.*;
 
 import static com.alibaba.fastjson2.util.TypeUtils.*;
-import static com.alibaba.fastjson2.util.TypeUtils.METHOD_TYPE_OBJECT_LONG;
 
 public class LambdaMiscCodec {
     static volatile boolean hppcError;

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVReaderUTF8.java
Patch:
@@ -637,7 +637,7 @@ public final void afterRow(int row) {
         }
     }
 
-    protected void readAll(ByteArrayValueConsumer consumer, int maxRows) {
+    private void readAll(ByteArrayValueConsumer consumer, int maxRows) {
         consumer.start();
 
         for (int r = 0; r < maxRows || maxRows < 0; ++r) {

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVWriterUTF16.java
Patch:
@@ -33,7 +33,7 @@ final class CSVWriterUTF16
         this.chars = new char[1024 * 64];
     }
 
-    protected void writeDirect(char[] bytes, int off, int len) {
+    void writeDirect(char[] bytes, int off, int len) {
         try {
             out.write(bytes, off, len);
         } catch (IOException e) {

File: core/src/main/java/com/alibaba/fastjson2/util/DateUtils.java
Patch:
@@ -5868,7 +5868,6 @@ static ZonedDateTime parseZonedDateTime16(byte[] str, int off, ZoneId defaultZon
         char c10 = (char) str[off + 10];
         char c13 = (char) str[off + 13];
 
-
         char y0, y1, y2, y3, m0, m1, d0, d1;
         if (c4 == '-' && c7 == '-' && (c10 == '+' || c10 == '-') && c13 == ':') {
             y0 = c0;
@@ -10346,7 +10345,7 @@ public static String formatYMDHMS19(Date date, ZoneId zoneId) {
 
             long zeroDay = localEpochDay + DAYS_0000_TO_1970;
             // find the march-based year
-            zeroDay -= 60;  // adjust to 0000-03-01 so leap day is at end of four year cycle
+            zeroDay -= 60;  // adjust to 0000-03-01 so leap day is at end of four-year cycle
             long adjust = 0;
             if (zeroDay < 0) {
                 // adjust negative years to positive for calculation
@@ -10510,7 +10509,7 @@ public static String formatYMD8(long timeMillis, ZoneId zoneId) {
 
             long zeroDay = localEpochDay + DAYS_0000_TO_1970;
             // find the march-based year
-            zeroDay -= 60;  // adjust to 0000-03-01 so leap day is at end of four year cycle
+            zeroDay -= 60;  // adjust to 0000-03-01 so leap day is at end of four-year cycle
             long adjust = 0;
             if (zeroDay < 0) {
                 // adjust negative years to positive for calculation

File: core/src/main/java/com/alibaba/fastjson2/util/FDBigInteger.java
Patch:
@@ -460,12 +460,11 @@ public FDBigInteger rightInplaceSub(FDBigInteger subtrahend) {
         int subLen = subtrahend.nWords;
         int minLen = minuend.nWords;
         if (offsetDiff < 0) {
-            int rLen = minLen;
-            if (rLen < sData.length) {
+            if (minLen < sData.length) {
                 System.arraycopy(sData, 0, sData, -offsetDiff, subLen);
                 Arrays.fill(sData, 0, -offsetDiff, 0);
             } else {
-                int[] r = new int[rLen];
+                int[] r = new int[minLen];
                 System.arraycopy(sData, 0, r, -offsetDiff, subLen);
                 subtrahend.data = sData = r;
             }

File: core/src/main/java/com/alibaba/fastjson2/util/Fnv.java
Patch:
@@ -74,8 +74,8 @@ public static long hashCode64(String... names) {
 
         long hashCode = MAGIC_HASH_CODE;
 
-        for (int i = 0; i < names.length; ++i) {
-            long h = hashCode64(names[i]);
+        for (String name : names) {
+            long h = hashCode64(name);
             hashCode ^= h;
             hashCode *= MAGIC_PRIME;
         }

File: core/src/main/java/com/alibaba/fastjson2/util/JdbcSupport.java
Patch:
@@ -275,7 +275,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
     static class TimeWriter
             extends DateTimeCodec
             implements ObjectWriter {
-        public static TimeWriter INSTANCE = new TimeWriter(null);
+        public static final TimeWriter INSTANCE = new TimeWriter(null);
 
         public TimeWriter(String format) {
             super(format);

File: core/src/main/java/com/alibaba/fastjson2/util/ParameterizedTypeImpl.java
Patch:
@@ -7,6 +7,7 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.Arrays;
+import java.util.Objects;
 
 @JSONType(deserializeFeatures = JSONReader.Feature.SupportAutoType, typeName = "java.lang.reflect.ParameterizedType")
 public class ParameterizedTypeImpl
@@ -58,10 +59,10 @@ public boolean equals(Object o) {
         if (!Arrays.equals(actualTypeArguments, that.actualTypeArguments)) {
             return false;
         }
-        if (ownerType != null ? !ownerType.equals(that.ownerType) : that.ownerType != null) {
+        if (!Objects.equals(ownerType, that.ownerType)) {
             return false;
         }
-        return rawType != null ? rawType.equals(that.rawType) : that.rawType == null;
+        return Objects.equals(rawType, that.rawType);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalField.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterBigDecimalField<T>
         extends FieldWriter<T> {
-    protected FieldWriterBigDecimalField(
+    FieldWriterBigDecimalField(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalFunc.java
Patch:
@@ -10,7 +10,7 @@ final class FieldWriterBigDecimalFunc<T>
         extends FieldWriter<T> {
     final Function<T, BigDecimal> function;
 
-    protected FieldWriterBigDecimalFunc(
+    FieldWriterBigDecimalFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalMethod.java
Patch:
@@ -9,7 +9,7 @@
 
 final class FieldWriterBigDecimalMethod<T>
         extends FieldWriter<T> {
-    protected FieldWriterBigDecimalMethod(
+    FieldWriterBigDecimalMethod(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntField.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterBigIntField<T>
         extends FieldWriter<T> {
-    protected FieldWriterBigIntField(
+    FieldWriterBigIntField(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolMethod.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterBoolMethod
         extends FieldWriterBoolean {
-    protected FieldWriterBoolMethod(
+    FieldWriterBoolMethod(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolValField.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterBoolValField
         extends FieldWriterBoolVal {
-    protected FieldWriterBoolValField(
+    FieldWriterBoolValField(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolValFunc.java
Patch:
@@ -7,7 +7,7 @@ final class FieldWriterBoolValFunc
         extends FieldWriterBoolVal {
     final Predicate function;
 
-    protected FieldWriterBoolValFunc(
+    FieldWriterBoolValFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolean.java
Patch:
@@ -171,7 +171,7 @@ public boolean write(JSONWriter jsonWriter, Object object) {
         }
 
         if (fieldClass == boolean.class
-                && !value.booleanValue()
+                && !value
                 && (jsonWriter.getFeatures(features) & JSONWriter.Feature.NotWriteDefaultValue.mask) != 0
         ) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBooleanFunc.java
Patch:
@@ -7,7 +7,7 @@ final class FieldWriterBooleanFunc
         extends FieldWriterBoolean {
     final Function function;
 
-    protected FieldWriterBooleanFunc(
+    FieldWriterBooleanFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharMethod.java
Patch:
@@ -8,7 +8,7 @@
 
 final class FieldWriterCharMethod<T>
         extends FieldWriter<T> {
-    protected FieldWriterCharMethod(
+    FieldWriterCharMethod(
             String fieldName,
             int ordinal,
             long features,
@@ -38,7 +38,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
             return;
         }
 
-        jsonWriter.writeChar(value.charValue());
+        jsonWriter.writeChar(value);
     }
 
     @Override
@@ -50,7 +50,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         }
 
         writeFieldName(jsonWriter);
-        jsonWriter.writeChar(value.charValue());
+        jsonWriter.writeChar(value);
         return true;
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateField.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterDateField<T>
         extends FieldWriterDate<T> {
-    protected FieldWriterDateField(
+    FieldWriterDateField(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateFunc.java
Patch:
@@ -8,9 +8,9 @@
 
 final class FieldWriterDateFunc<T>
         extends FieldWriterDate<T> {
-    Function<T, Date> function;
+    final Function<T, Date> function;
 
-    protected FieldWriterDateFunc(
+    FieldWriterDateFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateMethod.java
Patch:
@@ -9,7 +9,7 @@
 
 final class FieldWriterDateMethod<T>
         extends FieldWriterDate<T> {
-    protected FieldWriterDateMethod(
+    FieldWriterDateMethod(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleField.java
Patch:
@@ -56,7 +56,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         writeFieldName(jsonWriter);
 
-        double doubleValue = value.doubleValue();
+        double doubleValue = value;
         if (decimalFormat != null) {
             jsonWriter.writeDouble(doubleValue, decimalFormat);
         } else {
@@ -73,7 +73,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         if (value == null) {
             jsonWriter.writeNumberNull();
         } else {
-            double doubleValue = value.doubleValue();
+            double doubleValue = value;
             if (decimalFormat != null) {
                 jsonWriter.writeDouble(doubleValue, decimalFormat);
             } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleFunc.java
Patch:
@@ -9,7 +9,7 @@ final class FieldWriterDoubleFunc<T>
         extends FieldWriter<T> {
     final Function<T, Double> function;
 
-    protected FieldWriterDoubleFunc(
+    FieldWriterDoubleFunc(
             String fieldName,
             int ordinal,
             long features,
@@ -33,7 +33,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         if (value == null) {
             jsonWriter.writeNumberNull();
         } else {
-            double doubleValue = value.doubleValue();
+            double doubleValue = value;
             if (decimalFormat != null) {
                 jsonWriter.writeDouble(doubleValue, decimalFormat);
             } else {
@@ -68,7 +68,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         writeFieldName(jsonWriter);
 
-        double doubleValue = value.doubleValue();
+        double doubleValue = value;
         if (decimalFormat != null) {
             jsonWriter.writeDouble(doubleValue, decimalFormat);
         } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleMethod.java
Patch:
@@ -48,7 +48,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         if (value == null) {
             jsonWriter.writeNumberNull();
         } else {
-            double doubleValue = value.doubleValue();
+            double doubleValue = value;
             if (decimalFormat != null) {
                 jsonWriter.writeDouble(doubleValue, decimalFormat);
             } else {
@@ -66,7 +66,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         if (value == null) {
             jsonWriter.writeNumberNull();
         } else {
-            double doubleValue = value.doubleValue();
+            double doubleValue = value;
             if (decimalFormat != null) {
                 jsonWriter.writeDouble(doubleValue, decimalFormat);
             } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValueFunc.java
Patch:
@@ -9,7 +9,7 @@ final class FieldWriterDoubleValueFunc
         extends FieldWriter {
     final ToDoubleFunction function;
 
-    protected FieldWriterDoubleValueFunc(
+    FieldWriterDoubleValueFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnum.java
Patch:
@@ -201,7 +201,7 @@ public final void writeEnum(JSONWriter jsonWriter, Enum e) {
             final boolean usingOrdinal = (features & JSONWriter.Feature.WriteEnumUsingOrdinal.mask) != 0;
             boolean unquoteName = (features & JSONWriter.Feature.UnquoteFieldName.mask) != 0;
             final boolean utf8 = jsonWriter.utf8;
-            final boolean utf16 = jsonWriter.utf8 ? false : jsonWriter.utf16;
+            final boolean utf16 = !jsonWriter.utf8 && jsonWriter.utf16;
             final int ordinal = e.ordinal();
 
             if (usingOrdinal) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumFunc.java
Patch:
@@ -8,7 +8,7 @@ final class FieldWriterEnumFunc
         extends FieldWriterEnum {
     final Function function;
 
-    protected FieldWriterEnumFunc(
+    FieldWriterEnumFunc(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumMethod.java
Patch:
@@ -8,7 +8,7 @@
 
 final class FieldWriterEnumMethod
         extends FieldWriterEnum {
-    protected FieldWriterEnumMethod(
+    FieldWriterEnumMethod(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatField.java
Patch:
@@ -55,7 +55,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         writeFieldName(jsonWriter);
 
-        float floatValue = value.floatValue();
+        float floatValue = value;
         if (decimalFormat != null) {
             jsonWriter.writeFloat(floatValue, decimalFormat);
         } else {
@@ -72,7 +72,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         if (value == null) {
             jsonWriter.writeNumberNull();
         } else {
-            float floatValue = value.floatValue();
+            float floatValue = value;
             if (decimalFormat != null) {
                 jsonWriter.writeFloat(floatValue, decimalFormat);
             } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatFunc.java
Patch:
@@ -9,7 +9,7 @@ final class FieldWriterFloatFunc<T>
         extends FieldWriter<T> {
     final Function<T, Float> function;
 
-    protected FieldWriterFloatFunc(
+    FieldWriterFloatFunc(
             String fieldName,
             int ordinal,
             long features,
@@ -33,7 +33,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         if (value == null) {
             jsonWriter.writeNumberNull();
         } else {
-            float floatValue = value.floatValue();
+            float floatValue = value;
             if (decimalFormat != null) {
                 jsonWriter.writeFloat(floatValue, decimalFormat);
             } else {
@@ -67,7 +67,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         }
 
         writeFieldName(jsonWriter);
-        float floatValue = value.floatValue();
+        float floatValue = value;
         if (decimalFormat != null) {
             jsonWriter.writeFloat(floatValue, decimalFormat);
         } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatMethod.java
Patch:
@@ -57,7 +57,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         writeFieldName(jsonWriter);
 
-        float floatValue = value.floatValue();
+        float floatValue = value;
         if (decimalFormat != null) {
             jsonWriter.writeFloat(floatValue, decimalFormat);
         } else {
@@ -73,7 +73,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         if (value == null) {
             jsonWriter.writeNumberNull();
         } else {
-            float floatValue = value.floatValue();
+            float floatValue = value;
             if (decimalFormat != null) {
                 jsonWriter.writeFloat(floatValue, decimalFormat);
             } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValueFunc.java
Patch:
@@ -9,7 +9,7 @@ final class FieldWriterFloatValueFunc
         extends FieldWriter {
     final ToFloatFunction function;
 
-    protected FieldWriterFloatValueFunc(
+    FieldWriterFloatValueFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16.java
Patch:
@@ -65,7 +65,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
             jsonWriter.writeNumberNull();
             return;
         }
-        jsonWriter.writeInt32(value.shortValue());
+        jsonWriter.writeInt32(value);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Func.java
Patch:
@@ -7,7 +7,7 @@ final class FieldWriterInt16Func<T>
         extends FieldWriterInt16<T> {
     final Function<T, Short> function;
 
-    protected FieldWriterInt16Func(
+    FieldWriterInt16Func(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Method.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterInt16Method<T>
         extends FieldWriterInt16<T> {
-    protected FieldWriterInt16Method(
+    FieldWriterInt16Method(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Func.java
Patch:
@@ -7,7 +7,7 @@ final class FieldWriterInt32Func<T>
         extends FieldWriterInt32<T> {
     final Function<T, Integer> function;
 
-    protected FieldWriterInt32Func(
+    FieldWriterInt32Func(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32ValFunc.java
Patch:
@@ -9,7 +9,7 @@ final class FieldWriterInt32ValFunc
         extends FieldWriterInt32 {
     final ToIntFunction function;
 
-    protected FieldWriterInt32ValFunc(
+    FieldWriterInt32ValFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Func.java
Patch:
@@ -7,7 +7,7 @@ final class FieldWriterInt64Func<T>
         extends FieldWriterInt64<T> {
     final Function<T, Long> function;
 
-    protected FieldWriterInt64Func(
+    FieldWriterInt64Func(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Method.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterInt64Method<T>
         extends FieldWriterInt64<T> {
-    protected FieldWriterInt64Method(
+    FieldWriterInt64Method(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64ValFunc.java
Patch:
@@ -9,7 +9,7 @@ final class FieldWriterInt64ValFunc<T>
         extends FieldWriterInt64<T> {
     final ToLongFunction function;
 
-    protected FieldWriterInt64ValFunc(
+    FieldWriterInt64ValFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8.java
Patch:
@@ -64,6 +64,6 @@ public void writeValue(JSONWriter jsonWriter, T object) {
             jsonWriter.writeNumberNull();
             return;
         }
-        jsonWriter.writeInt32(value.byteValue());
+        jsonWriter.writeInt32(value);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Method.java
Patch:
@@ -7,7 +7,7 @@
 
 final class FieldWriterInt8Method
         extends FieldWriterInt8 {
-    protected FieldWriterInt8Method(
+    FieldWriterInt8Method(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValFunc.java
Patch:
@@ -9,7 +9,7 @@ final class FieldWriterInt8ValFunc
         extends FieldWriterInt8 {
     final ToByteFunction function;
 
-    protected FieldWriterInt8ValFunc(
+    FieldWriterInt8ValFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterList.java
Patch:
@@ -51,7 +51,7 @@ abstract class FieldWriterList<T>
         } else {
             itemClass = TypeUtils.getMapping(itemType);
         }
-        this.itemClassNotReferenceDetect = itemClass == null ? false : ObjectWriterProvider.isNotReferenceDetect(itemClass);
+        this.itemClassNotReferenceDetect = itemClass != null && ObjectWriterProvider.isNotReferenceDetect(itemClass);
 
         if (format != null) {
             if (itemClass == Date.class) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListField.java
Patch:
@@ -10,7 +10,7 @@
 
 final class FieldWriterListField<T>
         extends FieldWriterList<T> {
-    protected FieldWriterListField(
+    FieldWriterListField(
             String fieldName,
             Type itemType,
             int ordinal,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListMethod.java
Patch:
@@ -12,7 +12,7 @@
 
 final class FieldWriterListMethod<T>
         extends FieldWriterList<T> {
-    protected FieldWriterListMethod(
+    FieldWriterListMethod(
             String fieldName,
             Type itemType,
             int ordinal,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListStrFunc.java
Patch:
@@ -13,7 +13,7 @@ final class FieldWriterListStrFunc<T>
         extends FieldWriter<T> {
     final Function<T, List> function;
 
-    protected FieldWriterListStrFunc(
+    FieldWriterListStrFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterLocalDateFunc.java
Patch:
@@ -11,7 +11,7 @@ final class FieldWriterLocalDateFunc<T>
         extends FieldWriterObjectFinal<T> {
     final Function function;
 
-    protected FieldWriterLocalDateFunc(
+    FieldWriterLocalDateFunc(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayField.java
Patch:
@@ -15,7 +15,7 @@ final class FieldWriterObjectArrayField<T>
     final Type itemType;
     final Class itemClass;
     ObjectWriter itemObjectWriter;
-    protected FieldWriterObjectArrayField(
+    FieldWriterObjectArrayField(
             String fieldName,
             Type itemType,
             int ordinal,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayMethod.java
Patch:
@@ -17,7 +17,7 @@ final class FieldWriterObjectArrayMethod<T>
     final Class itemClass;
     ObjectWriter itemObjectWriter;
 
-    protected FieldWriterObjectArrayMethod(
+    FieldWriterObjectArrayMethod(
             String fieldName,
             Type itemType,
             int ordinal,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFinal.java
Patch:
@@ -13,7 +13,7 @@ abstract class FieldWriterObjectFinal<T>
     final Type fieldType;
     final Class fieldClass;
     volatile ObjectWriter objectWriter;
-    boolean refDetect;
+    final boolean refDetect;
 
     protected FieldWriterObjectFinal(
             String name,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFunc.java
Patch:
@@ -12,7 +12,7 @@ final class FieldWriterObjectFunc<T>
     final Function function;
     final boolean isArray;
 
-    protected FieldWriterObjectFunc(
+    FieldWriterObjectFunc(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFuncFinal.java
Patch:
@@ -12,7 +12,7 @@ final class FieldWriterObjectFuncFinal<T>
     final Function function;
     final boolean isArray;
 
-    protected FieldWriterObjectFuncFinal(
+    FieldWriterObjectFuncFinal(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterOffsetDateTimeFunc.java
Patch:
@@ -11,7 +11,7 @@ final class FieldWriterOffsetDateTimeFunc<T>
         extends FieldWriterObjectFinal<T> {
     final Function function;
 
-    protected FieldWriterOffsetDateTimeFunc(
+    FieldWriterOffsetDateTimeFunc(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringField.java
Patch:
@@ -6,7 +6,7 @@
 
 final class FieldWriterStringField<T>
         extends FieldWriter<T> {
-    protected FieldWriterStringField(
+    FieldWriterStringField(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringFunc.java
Patch:
@@ -8,12 +8,12 @@
 
 final class FieldWriterStringFunc<T>
         extends FieldWriter<T> {
-    Function<T, String> function;
+    final Function<T, String> function;
     final boolean symbol;
     final boolean trim;
     final boolean raw;
 
-    protected FieldWriterStringFunc(
+    FieldWriterStringFunc(
             String fieldName,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterUUIDFunc.java
Patch:
@@ -11,7 +11,7 @@ final class FieldWriterUUIDFunc<T>
         extends FieldWriterObjectFinal<T> {
     final Function function;
 
-    protected FieldWriterUUIDFunc(
+    FieldWriterUUIDFunc(
             String name,
             int ordinal,
             long features,

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterArrayFinal.java
Patch:
@@ -20,13 +20,13 @@ final class ObjectWriterArrayFinal
     final Class itemClass;
     volatile ObjectWriter itemObjectWriter;
     public final DecimalFormat format;
-    public boolean refDetect;
+    public final boolean refDetect;
 
     public ObjectWriterArrayFinal(Class itemClass, DecimalFormat format) {
         this.itemClass = itemClass;
         this.format = format;
 
-        String typeName = '[' + TypeUtils.getTypeName((Class) itemClass);
+        String typeName = '[' + TypeUtils.getTypeName(itemClass);
         typeNameBytes = JSONB.toBytes(typeName);
         typeNameHash = Fnv.hashCode64(typeName);
         refDetect = !ObjectWriterProvider.isNotReferenceDetect(itemClass);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -34,7 +34,7 @@
 public class ObjectWriterCreator {
     public static final ObjectWriterCreator INSTANCE = new ObjectWriterCreator();
 
-    static Map<Class, LambdaInfo> lambdaMapping = new HashMap<>();
+    static final Map<Class, LambdaInfo> lambdaMapping = new HashMap<>();
 
     static {
         lambdaMapping.put(boolean.class, new LambdaInfo(boolean.class, Predicate.class, "test"));
@@ -47,7 +47,7 @@ public class ObjectWriterCreator {
         lambdaMapping.put(double.class, new LambdaInfo(double.class, ToDoubleFunction.class, "applyAsDouble"));
     }
 
-    protected AtomicInteger jitErrorCount = new AtomicInteger();
+    protected final AtomicInteger jitErrorCount = new AtomicInteger();
     protected volatile Throwable jitErrorLast;
 
     public ObjectWriterCreator() {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterException.java
Patch:
@@ -44,8 +44,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             writeTypeInfo(jsonWriter);
         }
 
-        for (int i = 0, size = fieldWriters.size(); i < size; ++i) {
-            FieldWriter fieldWriter = fieldWriters.get(i);
+        for (FieldWriter fieldWriter : fieldWriters) {
             fieldWriter.write(jsonWriter, object);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImpDecimalArray.java
Patch:
@@ -54,8 +54,8 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         BigDecimal[] array = (BigDecimal[]) object;
 
         jsonWriter.startArray(array.length);
-        for (int i = 0; i < array.length; i++) {
-            jsonWriter.writeDecimal(array[i], 0, null);
+        for (BigDecimal bigDecimal : array) {
+            jsonWriter.writeDecimal(bigDecimal, 0, null);
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplBoolean.java
Patch:
@@ -14,7 +14,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             jsonWriter.writeBooleanNull();
             return;
         }
-        jsonWriter.writeBool(((Boolean) object).booleanValue());
+        jsonWriter.writeBool((Boolean) object);
     }
 
     @Override
@@ -23,6 +23,6 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             jsonWriter.writeBooleanNull();
             return;
         }
-        jsonWriter.writeBool(((Boolean) object).booleanValue());
+        jsonWriter.writeBool((Boolean) object);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCollection.java
Patch:
@@ -148,12 +148,12 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         ObjectWriter previousObjectWriter = null;
         jsonWriter.startArray();
         int i = 0;
-        for (Iterator it = iterable.iterator(); it.hasNext(); ) {
+        for (Object o : iterable) {
             if (i != 0) {
                 jsonWriter.writeComma();
             }
 
-            Object item = it.next();
+            Object item = o;
             if (item == null) {
                 jsonWriter.writeNull();
                 i++;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDouble.java
Patch:
@@ -21,7 +21,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             jsonWriter.writeNull();
             return;
         }
-        jsonWriter.writeDouble(((Double) object).doubleValue());
+        jsonWriter.writeDouble((Double) object);
     }
 
     @Override
@@ -37,7 +37,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             return;
         }
 
-        jsonWriter.writeDouble(((Double) object).doubleValue());
+        jsonWriter.writeDouble((Double) object);
         if (((jsonWriter.getFeatures() | features) & JSONWriter.Feature.WriteClassName.mask) != 0
                 && fieldType != Double.class && fieldType != double.class) {
             jsonWriter.writeRaw('D');

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplEnum.java
Patch:
@@ -24,7 +24,7 @@ final class ObjectWriterImplEnum<E extends Enum<E>>
     final long[] hashCodes;
 
     byte[][] jsonbNames;
-    String[] annotationNames;
+    final String[] annotationNames;
 
     public ObjectWriterImplEnum(
             Class defineClass,

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt16.java
Patch:
@@ -15,7 +15,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             return;
         }
 
-        short shortValue = ((Short) object).shortValue();
+        short shortValue = (Short) object;
         jsonWriter.writeInt16(shortValue);
     }
 
@@ -25,7 +25,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             jsonWriter.writeNumberNull();
             return;
         }
-        short shortValue = ((Short) object).shortValue();
+        short shortValue = (Short) object;
         jsonWriter.writeInt32(shortValue);
         if (((jsonWriter.getFeatures() | features) & JSONWriter.Feature.WriteClassName.mask) != 0
                 && fieldType != Short.class && fieldType != short.class) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt16ValueArray.java
Patch:
@@ -33,8 +33,8 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         }
 
         jsonWriter.startArray(shorts.length);
-        for (int i = 0; i < shorts.length; i++) {
-            jsonWriter.writeInt32(shorts[i]);
+        for (short aShort : shorts) {
+            jsonWriter.writeInt32(aShort);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt32.java
Patch:
@@ -14,7 +14,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             jsonWriter.writeNumberNull();
             return;
         }
-        jsonWriter.writeInt32(((Integer) object).intValue());
+        jsonWriter.writeInt32((Integer) object);
     }
 
     @Override
@@ -23,6 +23,6 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             jsonWriter.writeNumberNull();
             return;
         }
-        jsonWriter.writeInt32(((Integer) object).intValue());
+        jsonWriter.writeInt32((Integer) object);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt32Array.java
Patch:
@@ -59,8 +59,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         Integer[] array = (Integer[]) object;
 
         jsonWriter.startArray(array.length);
-        for (int i = 0; i < array.length; i++) {
-            Integer item = array[i];
+        for (Integer item : array) {
             if (item == null) {
                 jsonWriter.writeNull();
                 continue;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64.java
Patch:
@@ -23,7 +23,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             return;
         }
 
-        long longValue = ((Long) object).longValue();
+        long longValue = (Long) object;
         jsonWriter.writeInt64(longValue);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64Array.java
Patch:
@@ -40,7 +40,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 jsonWriter.writeNull();
                 continue;
             }
-            jsonWriter.writeInt64(item.longValue());
+            jsonWriter.writeInt64(item);
         }
         jsonWriter.endArray();
     }
@@ -59,8 +59,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         Long[] array = (Long[]) object;
 
         jsonWriter.startArray(array.length);
-        for (int i = 0; i < array.length; i++) {
-            Long item = array[i];
+        for (Long item : array) {
             if (item == null) {
                 jsonWriter.writeNull();
                 continue;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8.java
Patch:
@@ -15,7 +15,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             return;
         }
 
-        byte byteValue = ((Byte) object).byteValue();
+        byte byteValue = (Byte) object;
         jsonWriter.writeInt8(byteValue);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8Array.java
Patch:
@@ -49,8 +49,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
 
         Byte[] array = (Byte[]) object;
         jsonWriter.startArray(array.length);
-        for (int i = 0; i < array.length; i++) {
-            Byte value = array[i];
+        for (Byte value : array) {
             if (value == null) {
                 jsonWriter.writeNull();
             } else {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplString.java
Patch:
@@ -6,7 +6,7 @@
 
 final class ObjectWriterImplString
         extends ObjectWriterPrimitiveImpl {
-    static ObjectWriterImplString INSTANCE = new ObjectWriterImplString();
+    static final ObjectWriterImplString INSTANCE = new ObjectWriterImplString();
 
     @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplStringArray.java
Patch:
@@ -38,8 +38,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         String[] list = (String[]) object;
 
         jsonWriter.startArray(list.length);
-        for (int i = 0; i < list.length; i++) {
-            String item = list[i];
+        for (String item : list) {
             if (item == null) {
                 if (jsonWriter.isEnabled(JSONWriter.Feature.NullAsDefaultValue.mask | JSONWriter.Feature.WriteNullStringAsEmpty.mask)) {
                     jsonWriter.writeString("");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriters.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.function.*;
 
 public class ObjectWriters {
-    static ObjectWriterCreator INSTANCE = ObjectWriterCreator.INSTANCE;
+    static final ObjectWriterCreator INSTANCE = ObjectWriterCreator.INSTANCE;
 
     public static ObjectWriter ofReflect(Class objectType) {
         return ObjectWriterCreator.INSTANCE.createObjectWriter(objectType);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOffsetDateTime.java
Patch:
@@ -26,7 +26,7 @@ public ObjectReaderImplOffsetDateTime(String format, Locale locale) {
 
     @Override
     public Class getObjectClass() {
-        return ZonedDateTime.class;
+        return OffsetDateTime.class;
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -835,7 +835,7 @@ public byte[] getBytes(String key) {
             return (byte[]) value;
         }
         if (value instanceof String) {
-            return IOUtils.decodeBase64((String) value);
+            return Base64.getDecoder().decode((String) value);
         }
         throw new JSONException("can not cast to byte[], value : " + value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -1625,7 +1625,7 @@ private <T> void genMethodReadObject(
         if ((readerFeatures & JSONReader.Feature.SupportAutoType.mask) == 0) {
             mw.visitVarInsn(Opcodes.ALOAD, JSON_READER);
             mw.visitVarInsn(Opcodes.LLOAD, FEATURES);
-            mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "isSupportAutoType", "(J)Z", false);
+            mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "isSupportAutoTypeOrHandler", "(J)Z", false);
             mw.visitJumpInsn(Opcodes.IFEQ, noneAutoType_);
         }
 

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/jjb/ClientsWriteUTF8Bytes.java
Patch:
@@ -26,6 +26,7 @@ public class ClientsWriteUTF8Bytes {
     static final ObjectMapper mapper = new ObjectMapper();
     static final Gson gson = new Gson();
     static final DslJson<Object> dslJson = new DslJson<>(Settings.withRuntime().includeServiceLoader());
+    static final ThreadLocal<ByteArrayOutputStream> bytesOutLocal = ThreadLocal.withInitial(() -> new ByteArrayOutputStream());
 
     static {
         try {
@@ -45,7 +46,8 @@ public void fastjson2(Blackhole bh) {
 
     @Benchmark
     public void dsljson(Blackhole bh) throws IOException {
-        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
+        ByteArrayOutputStream bytesOut = bytesOutLocal.get();
+        bytesOut.reset();
         dslJson.serialize(clients, bytesOut);
         byte[] bytes = bytesOut.toByteArray();
         bh.consume(bytes);

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/jjb/ClientsWriteUTF8Bytes.java
Patch:
@@ -26,7 +26,6 @@ public class ClientsWriteUTF8Bytes {
     static final ObjectMapper mapper = new ObjectMapper();
     static final Gson gson = new Gson();
     static final DslJson<Object> dslJson = new DslJson<>(Settings.withRuntime().includeServiceLoader());
-    static ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
 
     static {
         try {
@@ -46,7 +45,7 @@ public void fastjson2(Blackhole bh) {
 
     @Benchmark
     public void dsljson(Blackhole bh) throws IOException {
-        bytesOut.reset();
+        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
         dslJson.serialize(clients, bytesOut);
         byte[] bytes = bytesOut.toByteArray();
         bh.consume(bytes);

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/jjb/UsersWriteUTF8Bytes.java
Patch:
@@ -26,7 +26,6 @@ public class UsersWriteUTF8Bytes {
     static final ObjectMapper mapper = new ObjectMapper();
     static final Gson gson = new Gson();
     static final DslJson<Object> dslJson = new DslJson<>(Settings.withRuntime().includeServiceLoader());
-    static ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
 
     static {
         try {
@@ -46,7 +45,7 @@ public void fastjson2(Blackhole bh) {
 
     @Benchmark
     public void dsljson(Blackhole bh) throws IOException {
-        bytesOut.reset();
+        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
         dslJson.serialize(users, bytesOut);
         byte[] bytes = bytesOut.toByteArray();
         bh.consume(bytes);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -1990,10 +1990,10 @@ public final void writeDateYYYMMDD10(int year, int month, int dayOfMonth) {
         bytes[off++] = (byte) quote;
         write4(year, bytes, off);
         off += 4;
-        bytes[off + 5] = '-';
+        bytes[off++] = '-';
         write2(month, bytes, off);
         off += 2;
-        bytes[off + 8] = '-';
+        bytes[off++] = '-';
         write2(dayOfMonth, bytes, off);
         off += 2;
         bytes[off++] = (byte) quote;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -2753,7 +2753,7 @@ protected ObjectReader createEnumReader(
 
         Enum[] ordinalEnums = (Enum[]) objectClass.getEnumConstants();
 
-        Map<Long, Enum> enumMap = new HashMap();
+        Map<Long, Enum> enumMap = new LinkedHashMap<>();
         for (int i = 0; ordinalEnums != null && i < ordinalEnums.length; ++i) {
             Enum e = ordinalEnums[i];
             String name = e.name();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -998,7 +998,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
                 && precision >= 16
                 && (value.compareTo(LOW) < 0 || value.compareTo(HIGH) > 0);
 
-        int minCapacity = off + precision + 4;
+        int minCapacity = off + precision + 7;
         if (minCapacity > chars.length) {
             ensureCapacity(minCapacity);
         }
@@ -1010,6 +1010,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
         long unscaleValue;
         if ((features & Feature.WriteBigDecimalAsPlain.mask) != 0) {
             if (precision < 19
+                    && value.scale() >= 0
                     && FIELD_DECIMAL_INT_COMPACT_OFFSET != -1
                     && (unscaleValue = UnsafeUtils.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET)) != Long.MIN_VALUE
             ) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -2317,7 +2317,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
                 && precision >= 16
                 && (value.compareTo(LOW) < 0 || value.compareTo(HIGH) > 0);
 
-        int minCapacity = off + precision + 4;
+        int minCapacity = off + precision + 7;
         if (minCapacity > bytes.length) {
             ensureCapacity(minCapacity);
         }
@@ -2329,6 +2329,7 @@ public final void writeDecimal(BigDecimal value, long features, DecimalFormat fo
         long unscaleValue;
         if ((features & Feature.WriteBigDecimalAsPlain.mask) != 0) {
             if (precision < 19
+                    && value.scale() >= 0
                     && FIELD_DECIMAL_INT_COMPACT_OFFSET != -1
                     && (unscaleValue = UnsafeUtils.getLong(value, FIELD_DECIMAL_INT_COMPACT_OFFSET)) != Long.MIN_VALUE
             ) {

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVWriterUTF16.java
Patch:
@@ -237,7 +237,7 @@ public void writeDecimal(long unscaledVal, int scale) {
             return;
         }
 
-        if (unscaledVal == Long.MIN_VALUE || scale >= 20) {
+        if (unscaledVal == Long.MIN_VALUE || scale >= 20 || scale < 0) {
             writeDecimal(BigDecimal.valueOf(unscaledVal, scale));
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/support/csv/CSVWriterUTF8.java
Patch:
@@ -243,7 +243,7 @@ public void writeDecimal(long unscaledVal, int scale) {
             return;
         }
 
-        if (unscaledVal == Long.MIN_VALUE || scale >= 20) {
+        if (unscaledVal == Long.MIN_VALUE || scale >= 20 || scale < 0) {
             writeDecimal(BigDecimal.valueOf(unscaledVal, scale));
             return;
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/NamingTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson;
 
+import com.alibaba.fastjson.util.TypeUtils;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -10,6 +11,7 @@ public void test() {
         Bean bean = new Bean();
         bean.oAuth = "abc";
 
+        TypeUtils.compatibleWithFieldName = false;
         assertEquals("{\"oAuth\":\"abc\"}", JSON.toJSONString(bean));
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1478.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson.issue_1400;
 
 import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.util.TypeUtils;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -11,6 +12,7 @@ public void test_for_issue() throws Exception {
         Model model = new Model();
         model.md5 = "xxx";
 
+        TypeUtils.compatibleWithFieldName = false;
         String json = JSON.toJSONString(model);
         assertEquals("{\"mD5\":\"xxx\"}", json);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -381,7 +381,9 @@ boolean record = BeanUtils.isRecord(objectClass);
                     });
                 }
 
-                BeanUtils.getters(objectClass, method -> {
+                Class mixIn = provider.getMixIn(objectClass);
+
+                BeanUtils.getters(objectClass, mixIn, method -> {
                     fieldInfo.init();
                     fieldInfo.features = writerFieldFeatures;
                     fieldInfo.format = beanInfo.format;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -165,6 +165,7 @@ public ObjectWriter createObjectWriter(
 
         BeanInfo beanInfo = new BeanInfo();
         provider.getBeanInfo(beanInfo, objectClass);
+        Class mixIn = provider.getMixIn(objectClass);
 
         if (beanInfo.serializer != null && ObjectWriter.class.isAssignableFrom(beanInfo.serializer)) {
             try {
@@ -251,7 +252,7 @@ boolean record = BeanUtils.isRecord(objectClass);
                     });
                 }
 
-                BeanUtils.getters(objectClass, method -> {
+                BeanUtils.getters(objectClass, mixIn, method -> {
                     fieldInfo.init();
                     fieldInfo.features |= writerFieldFeatures;
                     fieldInfo.format = beanInfo.format;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -477,9 +477,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
             FieldReader fieldReader = getFieldReader(hash);
             if (fieldReader == null && jsonReader.isSupportSmartMatch(features | this.features)) {
                 long nameHashCodeLCase = jsonReader.getNameHashCodeLCase();
-                if (nameHashCodeLCase != hash) {
-                    fieldReader = getFieldReaderLCase(nameHashCodeLCase);
-                }
+                fieldReader = getFieldReaderLCase(nameHashCodeLCase);
             }
             if (fieldReader == null) {
                 processExtra(jsonReader, object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderInterface.java
Patch:
@@ -82,9 +82,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
             FieldReader fieldReader = getFieldReader(hash);
             if (fieldReader == null && jsonReader.isSupportSmartMatch(features | this.features)) {
                 long nameHashCodeLCase = jsonReader.getNameHashCodeLCase();
-                if (nameHashCodeLCase != hash) {
-                    fieldReader = getFieldReaderLCase(nameHashCodeLCase);
-                }
+                fieldReader = getFieldReaderLCase(nameHashCodeLCase);
             }
             if (fieldReader == null) {
                 jsonObject.put(jsonReader.getFieldName(), jsonReader.readAny());

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -281,9 +281,7 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
 
             if (fieldReader == null && (featuresAll & JSONReader.Feature.SupportSmartMatch.mask) != 0) {
                 long hashCodeLCase = jsonReader.getNameHashCodeLCase();
-                if (hashCodeLCase != hashCode) {
-                    fieldReader = getFieldReaderLCase(hashCodeLCase);
-                }
+                fieldReader = getFieldReaderLCase(hashCodeLCase);
             }
 
             if (fieldReader == null) {

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -1198,7 +1198,8 @@ public static Field getField(Class objectClass, Method method) {
             declaredFields(objectClass, field -> {
                 String fieldName = field.getName();
                 int fieldNameLength = fieldName.length();
-                if (fieldNameLength == len - prefix && field.getType() == type) {
+                if (fieldNameLength == len - prefix
+                        && (field.getType() == type || type.isAssignableFrom(field.getType()))) {
                     if (c0 >= 'A' && c0 <= 'Z' && (c0 + 32) == fieldName.charAt(0)
                             && fieldName.regionMatches(1, methodName, prefix + 1, fieldNameLength - 1)
                     ) {

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -15,6 +15,7 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.time.Instant;
+import java.time.temporal.TemporalAccessor;
 import java.util.*;
 import java.util.function.Function;
 
@@ -237,7 +238,8 @@ public String getString(int index) {
                 || value instanceof Character
                 || value instanceof Number
                 || value instanceof UUID
-                || value instanceof Enum) {
+                || value instanceof Enum
+                || value instanceof TemporalAccessor) {
             return value.toString();
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -19,6 +19,7 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.time.Instant;
+import java.time.temporal.TemporalAccessor;
 import java.util.*;
 import java.util.function.Consumer;
 import java.util.function.Function;
@@ -319,7 +320,8 @@ public String getString(String key) {
                 || value instanceof Character
                 || value instanceof Number
                 || value instanceof UUID
-                || value instanceof Enum) {
+                || value instanceof Enum
+                || value instanceof TemporalAccessor) {
             return value.toString();
         }
 

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -1003,7 +1003,7 @@ && findAnnotation(method, JSONField.class) == null) {
                     String annotationTypeName = annotationType.getName();
                     switch (annotationTypeName) {
                         case "com.alibaba.fastjson.annotation.JSONField":
-                        case "com.alibaba.fastjson.annotation2.JSONField":
+                        case "com.alibaba.fastjson2.annotation.JSONField":
                             nameMatch = true;
                             break;
                         case "com.fasterxml.jackson.annotation.JsonValue":

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -35,7 +35,8 @@
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 import java.util.function.Supplier;
 
-public abstract class JSON {
+public abstract class JSON
+        implements JSONAware {
     private static TimeZone DEFAULT_TIME_ZONE = TimeZone.getDefault();
     public static final String VERSION = com.alibaba.fastjson2.JSON.VERSION;
     static final Cache CACHE = new Cache();

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/EishayParseUTF8Bytes.java
Patch:
@@ -18,7 +18,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
-import java.util.HashMap;
 import java.util.concurrent.TimeUnit;
 
 public class EishayParseUTF8Bytes {
@@ -60,7 +59,7 @@ public void gson(Blackhole bh) throws Exception {
         bh.consume(gson
                 .fromJson(
                         new String(utf8Bytes, 0, utf8Bytes.length, StandardCharsets.UTF_8),
-                        HashMap.class)
+                        MediaContent.class)
         );
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -3281,7 +3281,7 @@ static boolean isValid(byte[] bytes, int offset, int length, Charset charset) {
      * {@link JSONObject}. Returns {@code null} if received object is {@code null}
      *
      * @param object the specified object to be converted
-     * @return {@link JSONArray} or {@link JSONObject} or {@link null}
+     * @return {@link JSONArray} or {@link JSONObject} or {@code null}
      */
     static Object toJSON(Object object) {
         return toJSON(object, (JSONWriter.Feature[]) null);
@@ -3293,7 +3293,7 @@ static Object toJSON(Object object) {
      *
      * @param object the specified object to be converted
      * @param features the specified features is applied to serialization
-     * @return {@link JSONArray} or {@link JSONObject} or {@link null}
+     * @return {@link JSONArray} or {@link JSONObject} or {@code null}
      */
     @SuppressWarnings({"unchecked", "rawtypes"})
     static Object toJSON(Object object, JSONWriter.Feature... features) {

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -2817,7 +2817,6 @@ static String toJSONString(Object object, String format, Filter[] filters, JSONW
         }
     }
 
-
     /**
      * Serializes the specified object to the json byte array
      *

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -31,6 +31,7 @@ public final class ObjectReaderImplMap
 
     final Type fieldType;
     final Class mapType;
+    final long mapTypeHash;
     final Class instanceType;
     final long features;
     final Function builder;
@@ -161,6 +162,7 @@ public static ObjectReader of(Type fieldType, Class mapType, long features) {
     ObjectReaderImplMap(Type fieldType, Class mapType, Class instanceType, long features, Function builder) {
         this.fieldType = fieldType;
         this.mapType = mapType;
+        this.mapTypeHash = Fnv.hashCode64(TypeUtils.getTypeName(mapType));
         this.instanceType = instanceType;
         this.features = features;
         this.builder = builder;
@@ -256,7 +258,7 @@ public FieldReader getFieldReader(long hashCode) {
 
     @Override
     public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName1, long features) {
-        ObjectReader objectReader = jsonReader.checkAutoType(mapType, 0, this.features | features);
+        ObjectReader objectReader = jsonReader.checkAutoType(mapType, mapTypeHash, this.features | features);
         if (objectReader != null && objectReader != this) {
             return objectReader.readJSONBObject(jsonReader, fieldType, fieldName1, features);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -2583,7 +2583,7 @@ public final void writeString(final char[] chars) {
         boolean special = false;
         for (int i = 0; i < chars.length; ++i) {
             char c = chars[i];
-            if (c == '\\' || c == quote) {
+            if (c == '\\' || c == quote || c < ' ') {
                 special = true;
                 break;
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCollection.java
Patch:
@@ -159,14 +159,12 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 i++;
                 continue;
             }
-            
+
             Class<?> itemClass = item.getClass();
             ObjectWriter itemObjectWriter;
             if (itemClass == previousClass) {
                 itemObjectWriter = previousObjectWriter;
             } else {
-                Class<?> itemClass = item.getClass();
-                ObjectWriter itemObjectWriter;
                 if (itemClass == previousClass) {
                     itemObjectWriter = previousObjectWriter;
                 } else {

File: core/src/main/java/com/alibaba/fastjson2/stream/StreamReader.java
Patch:
@@ -141,7 +141,7 @@ public void stat(char[] bytes, int off, int len) {
             boolean nonAscii = false;
             for (int i = off; i < end; i++) {
                 char b = bytes[i];
-                if (b < 0) {
+                if (b > 0x7F) {
                     nonAscii = true;
                     break;
                 }
@@ -157,7 +157,7 @@ public void stat(char[] bytes, int off, int len) {
 
             int precision = len;
             if (TypeUtils.isNumber(bytes, off, len)) {
-                char ch = (char) bytes[off];
+                char ch = bytes[off];
                 if (ch == '+' || ch == '-') {
                     precision--;
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCollection.java
Patch:
@@ -156,6 +156,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             Object item = it.next();
             if (item == null) {
                 jsonWriter.writeNull();
+                i++;
                 continue;
             }
             Class<?> itemClass = item.getClass();

File: core/src/test/java/com/alibaba/fastjson2/issues_1000/Issue1401.java
Patch:
@@ -30,7 +30,7 @@ public Map<Object, Object> getMap() {
     @Test
     public void test() {
         Bean bean = new Bean();
-        assertEquals("{\"map\":{0:\"Test\",\"null\":-1,\"-9223372036854775808\":\"-9223372036854775808\",\"9223372036854775807\":\"9223372036854775807\",2020:2021,2022:2023}}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible));
+        assertEquals("{\"map\":{\"0\":\"Test\",\"null\":-1,\"-9223372036854775808\":\"-9223372036854775808\",\"9223372036854775807\":\"9223372036854775807\",\"2020\":2021,\"2022\":2023}}", JSON.toJSONString(bean, JSONWriter.Feature.BrowserCompatible));
         assertEquals("{\"map\":{\"0\":\"Test\",\"null\":-1,\"-9223372036854775808\":-9223372036854775808,\"9223372036854775807\":9223372036854775807,\"2020\":2021,\"2022\":2023}}", JSON.toJSONString(bean, JSONWriter.Feature.WriteNonStringKeyAsString));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -40,7 +40,10 @@ public static String getProperty(String key) {
     }
 
     static long defaultReaderFeatures;
+    static String defaultReaderFormat;
+
     static long defaultWriterFeatures;
+    static String defaultWriterFormat;
 
     static Supplier<Map> defaultObjectSupplier;
     static Supplier<List> defaultArraySupplier;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16ValueArray.java
Patch:
@@ -14,7 +14,7 @@
 class ObjectReaderImplInt16ValueArray
         extends ObjectReaderPrimitive {
     static final ObjectReaderImplInt16ValueArray INSTANCE = new ObjectReaderImplInt16ValueArray(null);
-    static final long TYPE_HASH = Fnv.hashCode64("[S");
+    static final long HASH_TYPE = Fnv.hashCode64("[S");
 
     final Function<short[], Object> builder;
 
@@ -80,7 +80,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
     public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfMatch(JSONB.Constants.BC_TYPED_ANY)) {
             long typeHashCode = jsonReader.readTypeHashCode();
-            if (typeHashCode != TYPE_HASH) {
+            if (typeHashCode != HASH_TYPE && typeHashCode != ObjectReaderImplInt16Array.HASH_TYPE) {
                 throw new JSONException("not support autoType : " + jsonReader.getString());
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32ValueArray.java
Patch:
@@ -14,7 +14,7 @@
 final class ObjectReaderImplInt32ValueArray
         extends ObjectReaderPrimitive {
     static final ObjectReaderImplInt32ValueArray INSTANCE = new ObjectReaderImplInt32ValueArray(int[].class, null);
-    static final long TYPE_HASH = Fnv.hashCode64("[I");
+    static final long HASH_TYPE = Fnv.hashCode64("[I");
 
     final Function<int[], Object> builder;
 
@@ -83,7 +83,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
     public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfMatch(JSONB.Constants.BC_TYPED_ANY)) {
             long typeHashCode = jsonReader.readTypeHashCode();
-            if (typeHashCode != TYPE_HASH) {
+            if (typeHashCode != HASH_TYPE && typeHashCode != ObjectReaderImplInt32Array.HASH_TYPE) {
                 throw new JSONException("not support autoType : " + jsonReader.getString());
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONField.java
Patch:
@@ -70,7 +70,7 @@
     Class serializeUsing() default Void.class;
 
     /**
-     * Specifies that {@link com.alibaba.fastjson2.writer.ObjectWriter} is used when serializing
+     * Specifies that {@link com.alibaba.fastjson2.reader.ObjectReader} is used when deserializing
      */
     @SuppressWarnings("rawtypes")
     Class deserializeUsing() default Void.class;

File: core/src/test/java/com/alibaba/fastjson2/codec/ExceptionTest.java
Patch:
@@ -15,7 +15,7 @@ public class ExceptionTest {
     @Test
     public void test_exception() throws Exception {
         IllegalStateException ex = new IllegalStateException();
-        String str = JSON.toJSONString(ex);
+        String str = JSON.toJSONString(ex, JSONWriter.Feature.WriteThrowableClassName);
 
         Object jsonObject = JSON.parseObject(str, Object.class);
         assertTrue(jsonObject instanceof Map);

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -1180,6 +1180,7 @@ public static JSONWriter.Context createWriteContext(
         }
 
         context.config(JSONWriter.Feature.WriteByteArrayAsBase64);
+        context.config(JSONWriter.Feature.WriteThrowableClassName);
 
         return context;
     }

File: extension-spring6/src/test/java/com/alibaba/fastjson2/support/spring6/GenericFastJsonRedisSerializerTest.java
Patch:
@@ -69,7 +69,7 @@ public void test_6() {
         assertEquals(baseResult2.getData().size(), 3);
 
         String json = "{\n" +
-                "\"@type\": \"com.alibaba.fastjson2.spring.GenericFastJsonRedisSerializerTest$BaseResult\",\n" +
+                "\"@type\": \"com.alibaba.fastjson2.support.spring6.GenericFastJsonRedisSerializerTest$BaseResult\",\n" +
                 "\"code\": \"1000\",\n" +
                 "\"data\": [\n" +
                 "\"按手动控制按钮\",\n" +

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringFunc.java
Patch:
@@ -40,7 +40,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         try {
             value = function.apply(object);
         } catch (RuntimeException error) {
-            if (jsonWriter.isIgnoreErrorGetter()) {
+            if ((jsonWriter.getFeatures(features) | JSONWriter.Feature.IgnoreNonFieldGetter.mask) != 0) {
                 return false;
             }
             throw error;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1896,7 +1896,7 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
                 return ObjectReaderImplMap.of(null, objectClass, 0);
             }
 
-            if (List.class.isAssignableFrom(objectClass)) {
+            if (Collection.class.isAssignableFrom(objectClass)) {
                 return ObjectReaderImplList.of(objectClass, objectClass, 0);
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONPathFilter.java
Patch:
@@ -1045,7 +1045,7 @@ public boolean apply(Object fieldValue) {
                         if (item instanceof BigDecimal) {
                             BigDecimal decimal = (BigDecimal) item;
                             long longValue = decimal.longValue();
-                            if (value == longValue && decimal.equals(BigDecimal.valueOf(value))) {
+                            if (value == longValue && decimal.compareTo(BigDecimal.valueOf(value)) == 0) {
                                 containsItem = true;
                                 break;
                             }
@@ -1130,7 +1130,7 @@ public boolean apply(Object fieldValue) {
                 BigDecimal decimal = (BigDecimal) fieldValue;
                 long longValue = decimal.longValue();
                 for (long value : values) {
-                    if (value == longValue && decimal.equals(BigDecimal.valueOf(value))) {
+                    if (value == longValue && decimal.compareTo(BigDecimal.valueOf(value)) == 0) {
                         return !not;
                     }
                 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -240,6 +240,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         if (!jsonReader.nextIfMatch('{')) {
             if (jsonReader.isTypeRedirect()) {
                 index = 1;
+                jsonReader.setTypeRedirect(false);
             } else {
                 if (jsonReader.nextIfNullOrEmptyString()) {
                     return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ConstructorFunction.java
Patch:
@@ -51,6 +51,9 @@ final class ConstructorFunction<T>
             } else {
                 name = parameters[i].getName();
             }
+            if (name == null) {
+                name = "arg" + i;
+            }
             hashCodes[i] = Fnv.hashCode64(name);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -130,6 +130,8 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
             }
 
             fieldValue = getEnumByOrdinal(ordinal);
+        } else if (jsonReader.nextIfNullOrEmptyString()) {
+            return null;
         } else {
             fieldValue = getEnumByHashCode(
                     jsonReader.readValueHashCode()

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateTimeCodec.java
Patch:
@@ -214,6 +214,8 @@ public void accept(T object, Object value) {
             accept(object, ((Long) value).longValue());
         } else if (value instanceof LocalDateTime) {
             accept(object, (LocalDateTime) value);
+        } else if (value instanceof ZonedDateTime) {
+            accept(object, (ZonedDateTime) value);
         } else {
             throw new JSONException("not support value " + value.getClass());
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -1572,7 +1572,7 @@ public long readTypeHashCode() {
                 typeIndex = strtype;
             } else if (strtype >= BC_INT32_BYTE_MIN && strtype <= BC_INT32_BYTE_MAX) {
                 offset++;
-                return ((strtype - BC_INT32_BYTE_ZERO) << 8)
+                typeIndex = ((strtype - BC_INT32_BYTE_ZERO) << 8)
                         + (bytes[offset++] & 0xFF);
             } else {
                 typeIndex = readInt32Value();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -533,7 +533,9 @@ public ObjectReader autoType(JSONReader.Context context, long typeHash) {
 
     protected void initStringFieldAsEmpty(Object object) {
         for (FieldReader fieldReader : fieldReaders) {
-            fieldReader.accept(object, "");
+            if (fieldReader.fieldClass == String.class) {
+                fieldReader.accept(object, "");
+            }
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -89,7 +89,7 @@ public final char current() {
         return ch;
     }
 
-    public final boolean isEnd() {
+    public boolean isEnd() {
         return ch == EOI;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapString.java
Patch:
@@ -35,7 +35,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 throw new JSONException(jsonReader.info("expect '{', but '['"));
             }
 
-            if (jsonReader.nextIfNull()) {
+            if (jsonReader.nextIfNullOrEmptyString()) {
                 return null;
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -238,7 +238,7 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
     public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         boolean match = jsonReader.nextIfMatch('{');
         if (!match) {
-            if (jsonReader.nextIfNull()) {
+            if (jsonReader.nextIfNullOrEmptyString()) {
                 return null;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1867,7 +1867,8 @@ public enum Feature {
         /**
          * @since 2.0.20
          */
-        BrowserSecure(1L << 35);
+        BrowserSecure(1L << 35),
+        WriteEnumUsingOrdinal(1L << 36),;
 
         public final long mask;
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/Enum_1.java
Patch:
@@ -17,8 +17,8 @@ public void test0() {
         Bean bean = new Bean();
         bean.unit = TimeUnit.DAYS;
 
-        assertEquals("{\"unit\":\"" + bean.unit.name() + "\"}", JSON.toJSONString(bean, JSONWriter.Feature.WriteEnumsUsingName));
-        assertEquals("{\"unit\":" + bean.unit.ordinal() + "}", JSON.toJSONString(bean));
+        assertEquals("{\"unit\":\"" + bean.unit.name() + "\"}", JSON.toJSONString(bean, JSONWriter.Feature.WriteEnumUsingToString));
+        assertEquals("{\"unit\":\"" + bean.unit.name() + "\"}", JSON.toJSONString(bean));
 
         assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}", Bean.class).unit);
         assertEquals(TimeUnit.DAYS, JSON.parseObject("{\"unit\":6}").to(Bean.class).unit);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -926,11 +926,11 @@ public String readFieldName() {
             int length = nameEnd - nameBegin;
             switch (length) {
                 case 1:
-                    return TypeUtils.toString((char) (bytes[nameBegin] & 0xff));
+                    return TypeUtils.toString(bytes[nameBegin]);
                 case 2:
                     return TypeUtils.toString(
-                            (char) (bytes[nameBegin] & 0xff),
-                            (char) (bytes[nameBegin + 1] & 0xff)
+                            bytes[nameBegin],
+                            bytes[nameBegin + 1]
                     );
                 case 3:
                     nameValue0

File: core/src/main/java/com/alibaba/fastjson2/JSONB.java
Patch:
@@ -980,7 +980,7 @@ static byte[] toBytes(String str, Charset charset) {
             type = BC_STR_UTF16LE;
         } else if (charset == StandardCharsets.UTF_8) {
             type = BC_STR_UTF8;
-        } else if (charset == StandardCharsets.US_ASCII) {
+        } else if (charset == StandardCharsets.US_ASCII || charset == StandardCharsets.ISO_8859_1) {
             type = BC_STR_ASCII;
         } else if (charset != null && "GB18030".equals(charset.name())) { // GraalVM support
             type = BC_STR_GB18030;

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentIndex.java
Patch:
@@ -559,7 +559,7 @@ public String toString() {
         if (STRING_CREATOR_JDK11 != null) {
             str = STRING_CREATOR_JDK11.apply(bytes, LATIN1);
         } else {
-            str = new String(bytes, StandardCharsets.US_ASCII);
+            str = new String(bytes, StandardCharsets.ISO_8859_1);
         }
         return str;
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -2210,7 +2210,7 @@ public String toString() {
                 }
             }
 
-            return fullPath = new String(buf, 0, off, ascii ? StandardCharsets.US_ASCII : StandardCharsets.UTF_8);
+            return fullPath = new String(buf, 0, off, ascii ? StandardCharsets.ISO_8859_1 : StandardCharsets.UTF_8);
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -22,7 +22,7 @@
 
 class JSONWriterUTF8
         extends JSONWriter {
-    static final byte[] REF_PREF = "{\"$ref\":".getBytes(StandardCharsets.US_ASCII);
+    static final byte[] REF_PREF = "{\"$ref\":".getBytes(StandardCharsets.ISO_8859_1);
 
     private final int cachedIndex;
     protected byte[] bytes;

File: core/src/main/java/com/alibaba/fastjson2/util/JSONBDump.java
Patch:
@@ -453,7 +453,7 @@ private void dumpAny() {
                         return;
                     }
 
-                    String str = new String(bytes, offset, strlen, StandardCharsets.US_ASCII);
+                    String str = new String(bytes, offset, strlen, StandardCharsets.ISO_8859_1);
                     offset += strlen;
                     jsonWriter.writeString(str);
                     return;
@@ -882,7 +882,7 @@ String readString() {
                 strlen = strtype - BC_STR_ASCII_FIX_MIN;
             }
 
-            charset = StandardCharsets.US_ASCII;
+            charset = StandardCharsets.ISO_8859_1;
         } else if (strtype == BC_STR_UTF8) {
             strlen = readLength();
             strBegin = offset;

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -97,7 +97,7 @@ static class X2 {
         static final String[] chars;
         static final String[] chars2;
         static final char START = ' '; // 32
-        static final char END = 'z'; // 122
+        static final char END = '~'; // 126
         static final int SIZE2 = (END - START + 1);
         static {
             String[] array0 = new String[128];

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -341,7 +341,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
             if (valueObjectReader == null) {
                 valueObjectReader = jsonReader.getObjectReader(valueType);
             }
-            Object value = valueObjectReader.readObject(jsonReader, fieldType, fieldName, 0);
+            Object value = valueObjectReader.readObject(jsonReader, valueType, fieldName, 0);
             Object origin;
             if (innerMap != null) {
                 origin = innerMap.put(name, value);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -558,6 +558,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
     @Override
     public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (object == null) {
+            jsonWriter.writeNull();
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1541,7 +1541,7 @@ public final void writeInt64(long i) {
         }
 
         if (i == Long.MIN_VALUE) {
-            writeRaw("-9223372036854775808");
+            writeRaw(writeAsString ? "\"-9223372036854775808\"" : "-9223372036854775808");
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -447,7 +447,7 @@ boolean record = BeanUtils.isRecord(objectClass);
             }
         }
 
-        if (objectClass.getSuperclass() == Object.class && fieldWriters.isEmpty()) {
+        if (objectClass.getSuperclass() == Object.class) {
             String simpleName = objectClass.getSimpleName();
             if (simpleName.indexOf('$') != -1 && simpleName.contains("$$")) {
                 match = false;

File: extension-spring6/src/main/java/com/alibaba/fastjson2/support/spring6/http/converter/FastJsonHttpMessageConverter.java
Patch:
@@ -126,6 +126,7 @@ protected void writeInternal(Object object, HttpOutputMessage outputMessage) thr
             } else if (object instanceof byte[] && JSON.isValid((byte[]) object)) {
                 byte[] strBytes = (byte[]) object;
                 contentLength = strBytes.length;
+                outputMessage.getBody().write(strBytes, 0, strBytes.length);
             } else {
                 contentLength = JSON.writeTo(
                         outputMessage.getBody(),

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -1475,8 +1475,6 @@ public static <T> List<T> parseArray(String text, Class<T> type, JSONReader.Feat
         return JSON.parseArray(text, type, features);
     }
 
-
-
     /**
      * Parse JSON {@link String} into {@link JSONArray}
      *

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterList.java
Patch:
@@ -230,7 +230,7 @@ public void writeList(JSONWriter jsonWriter, boolean writeFieldName, List list)
 
             itemObjectWriter.write(jsonWriter, item, null, itemType, features);
 
-            if (refDetect) {
+            if (itemRefDetect) {
                 jsonWriter.popPath(item);
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -685,7 +685,9 @@ public ObjectReader getObjectReader(String typeName, Class<?> expectClass, long
         boolean fieldBased = (features & JSONReader.Feature.FieldBased.mask) != 0;
         ObjectReader objectReader = getObjectReader(autoTypeClass, fieldBased);
 
-        registerIfAbsent(Fnv.hashCode64(typeName), objectReader);
+        if (autoTypeClass != expectClass) {
+            registerIfAbsent(Fnv.hashCode64(typeName), objectReader);
+        }
         return objectReader;
     }
 

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest6.java
Patch:
@@ -47,7 +47,7 @@ public void test1() throws Exception {
         bean.id = 1001;
 
         byte[] jsonbBytes = JSONB.toBytes(bean, JSONWriter.Feature.WriteClassName);
-        Bean bean1 = JSONB.parseObject(jsonbBytes, (Type) Bean1.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.IgnoreAutoTypeNotMatch);
+        Bean1 bean1 = JSONB.parseObject(jsonbBytes, (Type) Bean1.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.IgnoreAutoTypeNotMatch);
         assertEquals(bean.id, bean1.id);
     }
 
@@ -57,7 +57,7 @@ public void test2() throws Exception {
         bean.id = 1001;
 
         byte[] jsonbBytes = JSONB.toBytes(bean, new JSONWriter.Context(JSONWriter.Feature.WriteClassName));
-        Bean bean1 = JSONB.parseObject(jsonbBytes, (Type) Bean1.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.IgnoreAutoTypeNotMatch);
+        Bean1 bean1 = JSONB.parseObject(jsonbBytes, (Type) Bean1.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.IgnoreAutoTypeNotMatch);
         assertEquals(bean.id, bean1.id);
     }
 
@@ -66,6 +66,6 @@ public static class Bean {
     }
 
     public static class Bean1 {
-        public int id2;
+        public int id;
     }
 }

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/JSONStreamReaderTest.java
Patch:
@@ -20,7 +20,7 @@ public static void main(String[] args) throws Exception {
                 JSONStreamReader streamReader = JSONStreamReader.of(fis);
 
                 Object object;
-                while ((object = streamReader.readLoneObject()) != null) {
+                while ((object = streamReader.readLineObject()) != null) {
                     JSONObject jsonObject = (JSONObject) object;
                     jsonObject.size();
                     rowCount++;

File: core/src/main/java/com/alibaba/fastjson2/stream/JSONStreamReaderUTF16.java
Patch:
@@ -142,7 +142,7 @@ protected boolean seekLine() throws IOException {
     }
 
     @Override
-    public <T> T readLoneObject() {
+    public <T> T readLineObject() {
         try {
             if (inputEnd) {
                 return null;

File: core/src/main/java/com/alibaba/fastjson2/stream/JSONStreamReaderUTF8.java
Patch:
@@ -143,7 +143,7 @@ protected boolean seekLine() throws IOException {
         return true;
     }
 
-    public <T> T readLoneObject() {
+    public <T> T readLineObject() {
         try {
             if (inputEnd) {
                 return null;

File: core/src/test/java/com/alibaba/fastjson2/stream/JSONStreamReaderTest.java
Patch:
@@ -26,7 +26,7 @@ public void test() throws Exception {
 
             int rowCount = 0;
             Object object;
-            while ((object = streamReader.readLoneObject()) != null) {
+            while ((object = streamReader.readLineObject()) != null) {
                 JSONObject jsonObject = (JSONObject) object;
                 jsonObject.size();
                 rowCount++;
@@ -47,7 +47,7 @@ public void testObj() throws Exception {
 
             int rowCount = 0;
             Object object;
-            while ((object = streamReader.readLoneObject()) != null) {
+            while ((object = streamReader.readLineObject()) != null) {
                 Event event = (Event) object;
                 rowCount++;
             }

File: extension/src/test/java/com/alibaba/fastjson2/support/csv/CSVParserTest.java
Patch:
@@ -153,7 +153,7 @@ public void testFileObject() throws Exception {
             assertEquals(5, columns.size());
 
             for (int i = 0; ; ++i) {
-                Item item = parser.readLoneObject();
+                Item item = parser.readLineObject();
                 if (item == null) {
                     break;
                 }

File: extension/src/test/java/com/alibaba/fastjson2/support/csv/CSVParserTest3.java
Patch:
@@ -55,7 +55,7 @@ public void testObject() {
         String str = "id,name\n101,DataWorks\n";
         CSVParser parser = CSVParser.of(str, Bean.class);
         parser.readHeader();
-        Bean bean = parser.readLoneObject();
+        Bean bean = parser.readLineObject();
         assertEquals(101, bean.id);
         assertEquals("DataWorks", bean.name);
     }
@@ -77,7 +77,7 @@ public void testObject1() {
                 "DataWorks,101\n";
         CSVParser parser = CSVParser.of(str, Bean.class);
         parser.readHeader();
-        Bean bean = parser.readLoneObject();
+        Bean bean = parser.readLineObject();
         assertEquals(101, bean.id);
         assertEquals("DataWorks", bean.name);
     }
@@ -86,7 +86,7 @@ public void testObject1() {
     public void testObject2() {
         String str = "101,DataWorks\n";
         CSVParser parser = CSVParser.of(str, Bean.class);
-        Bean bean = parser.readLoneObject();
+        Bean bean = parser.readLineObject();
         assertEquals(101, bean.id);
         assertEquals("DataWorks", bean.name);
     }

File: extension/src/test/java/com/alibaba/fastjson2/support/csv/CSVTest1.java
Patch:
@@ -19,7 +19,7 @@ public void test() {
 
         CSVParser parser = CSVParser.of(csv, Bean.class);
 
-        Bean bean1 = parser.readLoneObject();
+        Bean bean1 = parser.readLineObject();
         assertEquals(bean.id, bean1.id);
         assertEquals(bean.name, bean1.name);
     }
@@ -50,8 +50,8 @@ public void test1() {
                 "1002,MaxCompute\n", csv);
 
         CSVParser parser = CSVParser.of(csv, Bean.class);
-        Bean bean0 = parser.readLoneObject();
-        Bean bean1 = parser.readLoneObject();
+        Bean bean0 = parser.readLineObject();
+        Bean bean1 = parser.readLineObject();
 
         Bean[] beans1 = {bean0, bean1};
         for (int i = 0; i < beans.length; i++) {

File: core/src/main/java/com/alibaba/fastjson2/util/JDKUtils.java
Patch:
@@ -80,7 +80,7 @@ public class JDKUtils {
 
         OPENJ9 = openj9;
         ANDROID = android;
-        GRAAL = graal;
+        GRAAL = (System.getProperty("org.graalvm.nativeimage.imagecode") != null);
 
         boolean hasJavaSql = true;
         Class dataSourceClass = null;

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -2576,7 +2576,7 @@ public static BigDecimal parseBigDecimal(char[] bytes, int off, int len) {
             }
         }
 
-        return new BigDecimal(bytes, 0, len);
+        return new BigDecimal(bytes, off, len);
     }
 
     public static BigDecimal parseBigDecimal(byte[] bytes, int off, int len) {

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -2257,7 +2257,7 @@ public static BigDecimal parseBigDecimal(byte[] bytes, int off, int len) {
                     unscaleValue = -unscaleValue;
                 }
                 if (dotIndex != -1) {
-                    scale = len - dotIndex - 1;
+                    scale = len - (dotIndex - off) - 1;
                 }
                 return BigDecimal.valueOf(unscaleValue, scale);
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -176,7 +176,9 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
             }
         } else if (ch == '"' || ch == '\'' || ch == '{') {
             String str = jsonReader.readString();
-            list.add(str);
+            if (!str.isEmpty()) {
+                list.add(str);
+            }
         } else {
             throw new JSONException(jsonReader.info());
         }

File: extension/src/main/java/com/alibaba/fastjson2/support/csv/CSVParser.java
Patch:
@@ -197,6 +197,9 @@ public <T> T readLoneObject() {
         }
 
         Object[] values = readLineValues(false);
+        if (values == null) {
+            return null;
+        }
 
         if (columns != null) {
             Map map = new HashMap();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32ValueArray.java
Patch:
@@ -13,13 +13,13 @@
 
 final class ObjectReaderImplInt32ValueArray
         extends ObjectReaderPrimitive {
-    static final ObjectReaderImplInt32ValueArray INSTANCE = new ObjectReaderImplInt32ValueArray(null);
+    static final ObjectReaderImplInt32ValueArray INSTANCE = new ObjectReaderImplInt32ValueArray(int[].class, null);
     static final long TYPE_HASH = Fnv.hashCode64("[I");
 
     final Function<int[], Object> builder;
 
-    ObjectReaderImplInt32ValueArray(Function<int[], Object> builder) {
-        super(int[].class);
+    ObjectReaderImplInt32ValueArray(Class objectClass, Function<int[], Object> builder) {
+        super(objectClass);
         this.builder = builder;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64ValueArray.java
Patch:
@@ -13,14 +13,14 @@
 
 final class ObjectReaderImplInt64ValueArray
         extends ObjectReaderPrimitive {
-    static final ObjectReaderImplInt64ValueArray INSTANCE = new ObjectReaderImplInt64ValueArray(null);
+    static final ObjectReaderImplInt64ValueArray INSTANCE = new ObjectReaderImplInt64ValueArray(long[].class, null);
 
     static final long HASH_TYPE = Fnv.hashCode64("[J");
 
     final Function<long[], Object> builder;
 
-    ObjectReaderImplInt64ValueArray(Function<long[], Object> builder) {
-        super(long[].class);
+    ObjectReaderImplInt64ValueArray(Class objectClass, Function<long[], Object> builder) {
+        super(objectClass);
         this.builder = builder;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaders.java
Patch:
@@ -52,11 +52,11 @@ public static <T> ObjectReader<T> fromShortArray(Function<short[], Object> funct
     }
 
     public static <T> ObjectReader<T> fromIntArray(Function<int[], Object> function) {
-        return (ObjectReader<T>) new ObjectReaderImplInt32ValueArray(function);
+        return (ObjectReader<T>) new ObjectReaderImplInt32ValueArray(null, function);
     }
 
     public static <T> ObjectReader<T> fromLongArray(Function<long[], Object> function) {
-        return (ObjectReader<T>) new ObjectReaderImplInt64ValueArray(function);
+        return (ObjectReader<T>) new ObjectReaderImplInt64ValueArray(null, function);
     }
 
     public static <T> ObjectReader<T> fromFloatArray(Function<float[], Object> function) {

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayFuryCompatibleParseTest.java
Patch:
@@ -48,7 +48,7 @@ public static void fury() {
     }
 
     public static void main(String[] args) throws Exception {
-//        jsonb();
-        fury();
+        jsonb();
+//        fury();
     }
 }

File: incubator-vector/src/main/java/com/alibaba/fastjson2/JSONReaderASCIIVector.java
Patch:
@@ -97,9 +97,9 @@ public String readString() {
                 char[] chars = new char[valueLength];
                 offset = start;
                 for (int i = 0; ; ++i) {
-                    char c = (char) bytes[offset];
+                    char c = (char) (bytes[offset] & 0xff);
                     if (c == '\\') {
-                        c = (char) bytes[++offset];
+                        c = (char) (bytes[++offset] & 0xff);
                         switch (c) {
                             case 'u': {
                                 char c1 = (char) this.bytes[++offset];

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterTest.java
Patch:
@@ -767,7 +767,8 @@ public void writeString_latin() {
                 JSONWriter jsonWriter = JSONWriter.ofJSONB();
                 jsonWriter.writeString(str);
                 byte[] jsonbBytes = jsonWriter.getBytes();
-                assertEquals(str, JSONB.parse(jsonbBytes));
+                Object parse = JSONB.parse(jsonbBytes);
+                assertEquals(str, parse);
             }
             {
                 JSONWriter jsonWriter = JSONWriter.ofJSONB();

File: core/src/main/java/com/alibaba/fastjson2/util/JodaSupport.java
Patch:
@@ -669,8 +669,8 @@ static class LocalDateTimeWriter
         final Class isoChronology;
         final Object utc;
 
-        LocalDateTimeWriter(Class objectClass, String fromat) {
-            super(fromat);
+        LocalDateTimeWriter(Class objectClass, String format) {
+            super(format);
 
             this.objectClass = objectClass;
             try {

File: core/src/main/java/com/alibaba/fastjson2/support/LambdaMiscCodec.java
Patch:
@@ -443,7 +443,7 @@ public static Function createFunction(Constructor constructor) {
                     METHOD_TYPE_FUNCTION,
                     METHOD_TYPE_OBJECT_OBJECT,
                     methodHandle,
-                    METHOD_TYPE_OBJECT_OBJECT
+                    MethodType.methodType(declaringClass, param0)
             );
             return (Function) callSite.getTarget().invokeExact();
         } catch (Throwable ignored) {
@@ -543,7 +543,7 @@ public static BiFunction createBiFunction(Constructor constructor) {
                     METHOD_TYPE_BI_FUNCTION,
                     METHOD_TYPE_OBJECT_OBJECT_OBJECT,
                     methodHandle,
-                    METHOD_TYPE_OBJECT_OBJECT_OBJECT
+                    MethodType.methodType(declaringClass, param0, param1)
             );
             return (BiFunction) callSite.getTarget().invokeExact();
         } catch (Throwable ignored) {

File: core/src/test/java/com/alibaba/fastjson2/codec/NonDefaulConstructorTest.java
Patch:
@@ -45,7 +45,7 @@ public void testBuild_2() throws Exception {
         Exception error = null;
         try {
             JSON.parseObject(str, VO2.class);
-        } catch (JSONException ex) {
+        } catch (Exception ex) {
             error = ex;
         }
         assertNotNull(error);

File: extension-spring6/src/main/java/com/alibaba/fastjson2/support/spring6/http/converter/FastJsonHttpMessageConverter.java
Patch:
@@ -123,6 +123,9 @@ protected void writeInternal(Object object, HttpOutputMessage outputMessage) thr
                 byte[] strBytes = ((String) object).getBytes(config.getCharset());
                 contentLength = strBytes.length;
                 outputMessage.getBody().write(strBytes, 0, strBytes.length);
+            } else if (object instanceof byte[] && JSON.isValid((byte[]) object)) {
+                byte[] strBytes = (byte[]) object;
+                contentLength = strBytes.length;
             } else {
                 contentLength = JSON.writeTo(
                         outputMessage.getBody(),

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/config/FastJsonConfig.java
Patch:
@@ -8,7 +8,6 @@
 import com.alibaba.fastjson.serializer.SerializeFilter;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.util.IOUtils;
-import com.alibaba.fastjson2.JSONWriter;
 
 import java.nio.charset.Charset;
 import java.util.Map;

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/config/FastJsonConfig.java
Patch:
@@ -8,6 +8,7 @@
 import com.alibaba.fastjson.serializer.SerializeFilter;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.util.IOUtils;
+import com.alibaba.fastjson2.JSONWriter;
 
 import java.nio.charset.Charset;
 import java.util.Map;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -2134,7 +2134,7 @@ public void writeRaw(char ch) {
 
     @Override
     public void writeNameRaw(byte[] bytes) {
-        throw new JSONException("UnsupportedOperation");
+        writeRaw(bytes);
     }
 
     @Override

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterJSONBTest.java
Patch:
@@ -68,7 +68,6 @@ public void notSupported() {
         assertThrows(JSONException.class, () -> jsonWriter.writeTimeHHMMSS8(12, 13, 14));
         assertThrows(JSONException.class, () -> jsonWriter.writeBase64(new byte[0]));
         assertThrows(JSONException.class, () -> jsonWriter.writeRaw('A'));
-        assertThrows(JSONException.class, () -> jsonWriter.writeNameRaw(new byte[0]));
         assertThrows(JSONException.class, () -> jsonWriter.writeNameRaw(new byte[0], 0, 0));
         assertThrows(JSONException.class, () -> jsonWriter.writeNameRaw(new char[0]));
         assertThrows(JSONException.class, () -> jsonWriter.writeNameRaw(new char[0], 0, 0));

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8ValueArray.java
Patch:
@@ -97,6 +97,9 @@ public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fiel
         byte[] bytes;
         if (jsonReader.isBinary()) {
             bytes = jsonReader.readBinary();
+        } else if (jsonReader.isString()) {
+            String str = jsonReader.readString();
+            bytes = Base64.getDecoder().decode(str);
         } else {
             int entryCnt = jsonReader.startArray();
             if (entryCnt == -1) {

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentIndex.java
Patch:
@@ -534,7 +534,7 @@ public void accept(JSONReader jsonReader, JSONPath.Context context) {
                     val = null;
                     break;
                 default:
-                    throw new JSONException("TODO : " + jsonReader.ch);
+                    throw new JSONException(jsonReader.info("not support : " + jsonReader.ch));
             }
 
             if (index == -1) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4106,7 +4106,7 @@ public void skipValue() {
             }
             offset++;
         } else if (!comma && ch != '}' && ch != ']' && ch != EOI) {
-            throw new JSONValidException("offset " + offset);
+            throw new JSONValidException(info("illegal ch " + ch));
         }
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issues_compatible/Issue1303.java
Patch:
@@ -20,6 +20,9 @@ public void test() {
             assertNull(SerializeConfig.DEFAULT_PROVIDER.getNamingStrategy());
         } finally {
             TypeUtils.compatibleWithFieldName = false;
+            SerializeConfig.DEFAULT_PROVIDER.setNamingStrategy(
+                    com.alibaba.fastjson2.PropertyNamingStrategy.CamelCase1x
+            );
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -2166,6 +2166,8 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
             case "gnu.trove.set.hash.TIntHashSet":
             case "gnu.trove.set.hash.TLongHashSet":
                 return LambdaMiscCodec.getObjectReader((Class) type);
+            case "org.bson.types.Decimal128":
+                return LambdaMiscCodec.getObjectReader((Class) type);
             default:
                 break;
         }

File: core/src/test/java/com/alibaba/fastjson2/issues_1000/Issue1300.java
Patch:
@@ -26,5 +26,8 @@ public void test() {
                 decimal,
                 TypeUtils.toBigDecimal(decimal128)
         );
+
+        Decimal128 dec1 = JSON.parseObject("123.45", Decimal128.class);
+        assertEquals(decimal, dec1.bigDecimalValue());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterArray.java
Patch:
@@ -8,7 +8,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterArray INSTANCE = new ObjectWriterArray(Object.class);
 
     final byte[] typeNameBytes;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterArrayFinal.java
Patch:
@@ -10,7 +10,7 @@
 import java.text.DecimalFormat;
 
 final class ObjectWriterArrayFinal
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     public static final ObjectWriterArrayFinal FLOAT_ARRAY = new ObjectWriterArrayFinal(Float.class, null);
     public static final ObjectWriterArrayFinal DOUBLE_ARRAY = new ObjectWriterArrayFinal(Double.class, null);
     public static final ObjectWriterArrayFinal DECIMAL_ARRAY = new ObjectWriterArrayFinal(BigDecimal.class, null);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplAtomicBoolean.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 final class ObjectWriterImplAtomicBoolean
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplAtomicBoolean INSTANCE = new ObjectWriterImplAtomicBoolean();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplAtomicInteger.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 final class ObjectWriterImplAtomicInteger
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplAtomicInteger INSTANCE = new ObjectWriterImplAtomicInteger(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("AtomicInteger");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("AtomicInteger");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplAtomicIntegerArray.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.concurrent.atomic.AtomicIntegerArray;
 
 class ObjectWriterImplAtomicIntegerArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplAtomicIntegerArray INSTANCE = new ObjectWriterImplAtomicIntegerArray();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplAtomicLong.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 final class ObjectWriterImplAtomicLong
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplAtomicLong INSTANCE = new ObjectWriterImplAtomicLong(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("AtomicLong");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("AtomicLong");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplAtomicLongArray.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.concurrent.atomic.AtomicLongArray;
 
 final class ObjectWriterImplAtomicLongArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplAtomicLongArray INSTANCE = new ObjectWriterImplAtomicLongArray();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplAtomicReference.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 final class ObjectWriterImplAtomicReference
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplAtomicReference INSTANCE = new ObjectWriterImplAtomicReference(null);
 
     final Class defineClass;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplBitSet.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.BitSet;
 
 final class ObjectWriterImplBitSet
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplBitSet INSTANCE = new ObjectWriterImplBitSet();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplBoolValueArray.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.function.Function;
 
 class ObjectWriterImplBoolValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplBoolValueArray INSTANCE = new ObjectWriterImplBoolValueArray(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[Z");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[Z");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplBoolValueArrayLambda.java
Patch:
@@ -10,7 +10,7 @@
 import static com.alibaba.fastjson2.writer.ObjectWriterImplBoolValueArray.JSONB_TYPE_NAME_BYTES;
 
 class ObjectWriterImplBoolValueArrayLambda
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     private final ToIntFunction functionSize;
     private final BiFunction<Object, Integer, Boolean> functionGet;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplBoolean.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 class ObjectWriterImplBoolean
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplBoolean INSTANCE = new ObjectWriterImplBoolean();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCharValueArray.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.function.Function;
 
 final class ObjectWriterImplCharValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplCharValueArray INSTANCE = new ObjectWriterImplCharValueArray(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[C");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[C");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCharacter.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplCharacter
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplCharacter INSTANCE = new ObjectWriterImplCharacter();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplClass.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplClass
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplClass INSTANCE = new ObjectWriterImplClass();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCollection.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.*;
 
 final class ObjectWriterImplCollection
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplCollection INSTANCE = new ObjectWriterImplCollection();
 
     static final byte[] LINKED_HASH_SET_JSONB_TYPE_NAME_BYTES = JSONB.toBytes(TypeUtils.getTypeName(LinkedHashSet.class));

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCurrency.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Currency;
 
 final class ObjectWriterImplCurrency
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplCurrency INSTANCE = new ObjectWriterImplCurrency(null);
     static final ObjectWriterImplCurrency INSTANCE_FOR_FIELD = new ObjectWriterImplCurrency(null);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDouble.java
Patch:
@@ -6,7 +6,7 @@
 import java.text.DecimalFormat;
 
 final class ObjectWriterImplDouble
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplDouble INSTANCE = new ObjectWriterImplDouble(null);
 
     private final DecimalFormat format;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDoubleValueArray.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.function.Function;
 
 final class ObjectWriterImplDoubleValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplDoubleValueArray INSTANCE = new ObjectWriterImplDoubleValueArray(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[D");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[D");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplEnum.java
Patch:
@@ -9,7 +9,7 @@
 import java.lang.reflect.*;
 
 final class ObjectWriterImplEnum<E extends Enum<E>>
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     final Member valueField;
 
     final Class defineClass;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplFloat.java
Patch:
@@ -6,7 +6,7 @@
 import java.text.DecimalFormat;
 
 final class ObjectWriterImplFloat
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplFloat INSTANCE = new ObjectWriterImplFloat(null);
 
     private final DecimalFormat format;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplFloatValueArray.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.function.Function;
 
 final class ObjectWriterImplFloatValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplFloatValueArray INSTANCE = new ObjectWriterImplFloatValueArray(null, null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[F");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[F");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt16.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplInt16
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt16 INSTANCE = new ObjectWriterImplInt16();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt16ValueArray.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.function.Function;
 
 final class ObjectWriterImplInt16ValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt16ValueArray INSTANCE = new ObjectWriterImplInt16ValueArray(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[S");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[S");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt32.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplInt32
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt32 INSTANCE = new ObjectWriterImplInt32();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt32Array.java
Patch:
@@ -10,7 +10,7 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty;
 
 final class ObjectWriterImplInt32Array
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt32Array INSTANCE = new ObjectWriterImplInt32Array();
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[Integer");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[Integer");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt32ValueArray.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.function.Function;
 
 final class ObjectWriterImplInt32ValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt32ValueArray INSTANCE = new ObjectWriterImplInt32ValueArray(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[I");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[I");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplInt64
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt64 INSTANCE = new ObjectWriterImplInt64(null);
 
     final Class defineClass;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64Array.java
Patch:
@@ -10,7 +10,7 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.WriteNullListAsEmpty;
 
 final class ObjectWriterImplInt64Array
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt64Array INSTANCE = new ObjectWriterImplInt64Array();
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[Long");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[Long");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt64ValueArray.java
Patch:
@@ -10,7 +10,7 @@
 import static com.alibaba.fastjson2.writer.ObjectWriterProvider.TYPE_INT64_MASK;
 
 final class ObjectWriterImplInt64ValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt64ValueArray INSTANCE = new ObjectWriterImplInt64ValueArray(null);
 
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[J");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplInt8
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt8 INSTANCE = new ObjectWriterImplInt8();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8Array.java
Patch:
@@ -7,7 +7,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplInt8Array
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt8Array INSTANCE = new ObjectWriterImplInt8Array();
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[Byte");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[Byte");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8ValueArray.java
Patch:
@@ -15,7 +15,7 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
 
 final class ObjectWriterImplInt8ValueArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplInt8ValueArray INSTANCE = new ObjectWriterImplInt8ValueArray(null);
     static final byte[] JSONB_TYPE_NAME_BYTES = JSONB.toBytes("[B");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[B");

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplList.java
Patch:
@@ -18,7 +18,7 @@
 import static com.alibaba.fastjson2.util.TypeUtils.CLASS_JSON_OBJECT_1x;
 
 final class ObjectWriterImplList
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplList
             INSTANCE = new ObjectWriterImplList(null, null, null, null, 0);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplListEnum.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.List;
 
 final class ObjectWriterImplListEnum
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     final Class defineClass;
     final Class enumType;
     final long features;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplListStr.java
Patch:
@@ -11,7 +11,7 @@
 import static com.alibaba.fastjson2.writer.ObjectWriterImplList.CLASS_SUBLIST;
 
 final class ObjectWriterImplListStr
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplListStr INSTANCE = new ObjectWriterImplListStr();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplLocale.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Locale;
 
 final class ObjectWriterImplLocale
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplLocale INSTANCE = new ObjectWriterImplLocale();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -16,7 +16,7 @@
 import static com.alibaba.fastjson2.util.TypeUtils.CLASS_JSON_OBJECT_1x;
 
 public final class ObjectWriterImplMap
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final byte[] TYPE_NAME_JSONObject1O = JSONB.toBytes("JO10");
     static final long TYPE_HASH_JSONObject1O = Fnv.hashCode64("JO10");
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMapEntry.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Map;
 
 final class ObjectWriterImplMapEntry
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplMapEntry INSTANCE = new ObjectWriterImplMapEntry();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplOptional.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Optional;
 
 final class ObjectWriterImplOptional
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplOptional INSTANCE = new ObjectWriterImplOptional(null, null);
 
     Type valueType;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplOptionalDouble.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.OptionalDouble;
 
 final class ObjectWriterImplOptionalDouble
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplOptionalDouble INSTANCE = new ObjectWriterImplOptionalDouble();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplOptionalInt.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.OptionalInt;
 
 final class ObjectWriterImplOptionalInt
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplOptionalInt INSTANCE = new ObjectWriterImplOptionalInt();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplOptionalLong.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.OptionalLong;
 
 final class ObjectWriterImplOptionalLong
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplOptionalLong INSTANCE = new ObjectWriterImplOptionalLong();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplString.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplString
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static ObjectWriterImplString INSTANCE = new ObjectWriterImplString();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplStringArray.java
Patch:
@@ -7,7 +7,7 @@
 import java.lang.reflect.Type;
 
 final class ObjectWriterImplStringArray
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final byte[] TYPE_NAME_BYTES = JSONB.toBytes("[String");
     static final long JSONB_TYPE_HASH = Fnv.hashCode64("[String");
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplTimeZone.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.TimeZone;
 
 final class ObjectWriterImplTimeZone
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplTimeZone INSTANCE = new ObjectWriterImplTimeZone();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplToString.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Type;
 
 public class ObjectWriterImplToString
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     public static final ObjectWriterImplToString INSTANCE = new ObjectWriterImplToString(false);
     public static final ObjectWriterImplToString DIRECT = new ObjectWriterImplToString(true);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplUUID.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.UUID;
 
 final class ObjectWriterImplUUID
-        extends ObjectWriterBaseModule.PrimitiveImpl {
+        extends ObjectWriterPrimitiveImpl {
     static final ObjectWriterImplUUID INSTANCE = new ObjectWriterImplUUID();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -174,7 +174,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 list.add(
                         jsonReader.readString());
             }
-        } else if (ch == '"' || ch == '\'') {
+        } else if (ch == '"' || ch == '\'' || ch == '{') {
             String str = jsonReader.readString();
             list.add(str);
         } else {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -73,7 +73,7 @@ public Object createInstance(Map input, long features) {
             Object key = entry.getKey();
             Object fieldValue = entry.getValue();
             Object fieldName;
-            if (keyType == null || key == String.class) {
+            if (keyType == null || keyType == String.class) {
                 fieldName = key.toString();
             } else {
                 fieldName = TypeUtils.cast(key, keyType);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -2091,7 +2091,8 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
             case "java.sql.Date":
                 return JdbcSupport.createDateReader((Class) type, null, null);
             case "java.util.RegularEnumSet":
-                return ObjectReaderImplList.INSTANCE;
+            case "java.util.JumboEnumSet":
+                return ObjectReaderImplList.of(type, TypeUtils.getClass(type), 0);
             case "org.joda.time.Chronology":
                 return JodaSupport.createChronologyReader((Class) type);
             case "org.joda.time.LocalDate":

File: core/src/test/java/com/alibaba/fastjson2/JSONPathSegmentIndexTest.java
Patch:
@@ -737,7 +737,6 @@ private String[] getStringContent() {
                 "{'age':12}",
                 "{'age':12}",
                 "{'name':'xiaoming','age':33}",
-                "[2121+222]",
                 "{'a':true}",
                 "{'a':false}",
                 "{'a':null}",

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1568,6 +1568,9 @@ public void read(Map object, long features) {
                         throw new JSONException("FASTJSON" + JSON.VERSION + "error, offset " + offset + ", char " + ch);
                     }
                     break;
+                case 'x':
+                    value = readBinary();
+                    break;
                 default:
                     throw new JSONException("FASTJSON" + JSON.VERSION + "error, offset " + offset + ", char " + ch);
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -2085,7 +2085,7 @@ public final byte[] getBytes() {
 
     @Override
     public final int size() {
-        throw new JSONException("UnsupportedOperation");
+        return off;
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToBigDecimal.java
Patch:
@@ -14,8 +14,8 @@ public class ToBigDecimal
         implements Function {
     @Override
     public Object apply(Object o) {
-        if (o == null) {
-            return null;
+        if (o == null || o instanceof BigDecimal) {
+            return o;
         }
 
         if (o instanceof Boolean) {

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToBigInteger.java
Patch:
@@ -12,8 +12,8 @@ public class ToBigInteger
         implements Function {
     @Override
     public Object apply(Object o) {
-        if (o == null) {
-            return null;
+        if (o == null || o instanceof BigInteger) {
+            return o;
         }
 
         if (o instanceof Boolean) {

File: core/src/main/java/com/alibaba/fastjson2/codec/DateTimeCodec.java
Patch:
@@ -16,6 +16,7 @@ public abstract class DateTimeCodec {
     public final Locale locale;
 
     protected final boolean yyyyMMddhhmmss19;
+    protected final boolean yyyyMMddhhmm16;
     protected final boolean yyyyMMddhhmmss14;
     protected final boolean yyyyMMdd10;
     protected final boolean yyyyMMdd8;
@@ -35,6 +36,7 @@ public DateTimeCodec(String format, Locale locale) {
         this.locale = locale;
         this.yyyyMMddhhmmss14 = "yyyyMMddHHmmss".equals(format);
         this.yyyyMMddhhmmss19 = "yyyy-MM-dd HH:mm:ss".equals(format);
+        this.yyyyMMddhhmm16 = "yyyy-MM-dd HH:mm".equals(format);
         this.yyyyMMdd10 = "yyyy-MM-dd".equals(format);
         this.yyyyMMdd8 = "yyyyMMdd".equals(format);
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -132,8 +132,9 @@ private Object readDate(JSONReader jsonReader) {
                             }
                         }
                     } else {
-                        if (str.length() == 19 && jsonReader.isEnabled(JSONReader.Feature.SupportSmartMatch)) {
-                            ldt = DateUtils.parseLocalDateTime(str, 0, str.length());
+                        if (str.length() == 19 && (yyyyMMddhhmm16 || jsonReader.isEnabled(JSONReader.Feature.SupportSmartMatch))) {
+                            int length = yyyyMMddhhmm16 ? 16 : 19;
+                            ldt = DateUtils.parseLocalDateTime(str, 0, length);
                         } else {
                             ldt = LocalDateTime.parse(str, formatter);
                         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -806,7 +806,7 @@ public String getFieldName() {
 
         int offset = nameBegin;
         for (int i = 0; offset < nameEnd; ++i) {
-            char c = (char) bytes[offset];
+            char c = (char) (bytes[offset] & 0xff);
 
             if (c == '\\') {
                 c = (char) bytes[++offset];
@@ -1209,7 +1209,7 @@ protected void readString0() {
             char[] chars = new char[valueLength];
             offset = start;
             for (int i = 0; ; ++i) {
-                char c = (char) bytes[offset];
+                char c = (char) (bytes[offset] & 0xff);
                 if (c == '\\') {
                     c = (char) (bytes[++offset]);
                     switch (c) {
@@ -1357,7 +1357,7 @@ public String readString() {
                 char[] chars = new char[valueLength];
                 offset = start;
                 for (int i = 0; ; ++i) {
-                    char c = (char) bytes[offset];
+                    char c = (char) (bytes[offset] & 0xff);
                     if (c == '\\') {
                         c = (char) bytes[++offset];
                         switch (c) {

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -35,6 +35,7 @@ public class TypeUtils {
     public static final MethodType METHOD_TYPE_SUPPLIER = MethodType.methodType(Supplier.class);
     public static final MethodType METHOD_TYPE_FUNCTION = MethodType.methodType(Function.class);
     public static final MethodType METHOD_TYPE_TO_INT_FUNCTION = MethodType.methodType(ToIntFunction.class);
+    public static final MethodType METHOD_TYPE_TO_LONG_FUNCTION = MethodType.methodType(ToLongFunction.class);
     public static final MethodType METHOD_TYPE_OBJECT_INT_CONSUMER = MethodType.methodType(ObjIntConsumer.class);
     public static final MethodType METHOD_TYPE_INT_FUNCTION = MethodType.methodType(IntFunction.class);
     public static final MethodType METHOD_TYPE_LONG_FUNCTION = MethodType.methodType(LongFunction.class);
@@ -45,6 +46,7 @@ public class TypeUtils {
     public static final MethodType METHOD_TYPE_OBJECT = MethodType.methodType(Object.class);
     public static final MethodType METHOD_TYPE_OBJECT_OBJECT = MethodType.methodType(Object.class, Object.class);
     public static final MethodType METHOD_TYPE_INT_OBJECT = MethodType.methodType(int.class, Object.class);
+    public static final MethodType METHOD_TYPE_LONG_OBJECT = MethodType.methodType(long.class, Object.class);
     public static final MethodType METHOD_TYPE_VOID_OBJECT_INT = MethodType.methodType(void.class, Object.class, int.class);
     public static final MethodType METHOD_TYPE_OBJECT_LONG = MethodType.methodType(Object.class, long.class);
     public static final MethodType METHOD_TYPE_VOID_LONG = MethodType.methodType(void.class, long.class);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8ValueArray.java
Patch:
@@ -82,7 +82,8 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         if ("base64".equals(format)
                 || "gzip,base64".equals(format)
-                || (format == null && (jsonWriter.getFeatures(features) & WriteByteArrayAsBase64.mask) != 0)) {
+                || (jsonWriter.getFeatures(features) & WriteByteArrayAsBase64.mask) != 0
+        ) {
             jsonWriter.writeBase64(bytes);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObject.java
Patch:
@@ -19,7 +19,7 @@
 public class FieldReaderObject<T>
         extends FieldReader<T> {
     protected ObjectReader initReader;
-    protected BiConsumer function;
+    protected final BiConsumer function;
 
     public FieldReaderObject(
             String fieldName,

File: core/src/test/java/com/alibaba/fastjson2/aliyun/MapGhostTest.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.LinkedHashMap;
 import java.util.TreeMap;
 
-import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class MapGhostTest {

File: core/src/main/java/com/alibaba/fastjson2/filter/ContextAutoTypeBeforeHandler.java
Patch:
@@ -86,6 +86,7 @@ public class ContextAutoTypeBeforeHandler
             Collections.emptyList().getClass(),
             Collections.emptyMap().getClass(),
             CLASS_SINGLE_SET,
+            CLASS_SINGLE_List,
             CLASS_UNMODIFIABLE_COLLECTION,
             CLASS_UNMODIFIABLE_LIST,
             CLASS_UNMODIFIABLE_SET,

File: core/src/test/java/com/alibaba/fastjson2/codec/SeeAlsoTest5.java
Patch:
@@ -16,7 +16,7 @@ public void test() {
         assertEquals(123, bean.id);
     }
 
-    @JSONType(seeAlso = {Bean.class})
+    @JSONType(seeAlso = Bean.class)
     public interface IBean {
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -804,12 +804,14 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
                 String fieldName = BeanUtils.getterName(method, null);
 
                 char firstChar = fieldName.charAt(0);
+                char c1;
                 final String fieldName0;
                 if (firstChar >= 'A' && firstChar <= 'Z') {
                     char[] chars = fieldName.toCharArray();
                     chars[0] = (char) (firstChar + 32);
                     fieldName0 = new String(chars);
-                } else if (firstChar >= 'a' && firstChar <= 'z' && fieldName.length() > 2 && fieldName.charAt(1) == '_') {
+                } else if (firstChar >= 'a' && firstChar <= 'z' && fieldName.length() > 1
+                        && ((c1 = fieldName.charAt(1)) == '_' || (c1 >= '0' && c1 <= '9'))) {
                     char[] chars = fieldName.toCharArray();
                     chars[0] = (char) (firstChar - 32);
                     fieldName0 = new String(chars);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -2079,6 +2079,8 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
                 return JdbcSupport.createTimestampReader((Class) type, null, null);
             case "java.sql.Date":
                 return JdbcSupport.createDateReader((Class) type, null, null);
+            case "java.util.RegularEnumSet":
+                return ObjectReaderImplList.INSTANCE;
             case "org.joda.time.Chronology":
                 return JodaSupport.createChronologyReader((Class) type);
             case "org.joda.time.LocalDate":

File: core/src/main/java/com/alibaba/fastjson2/filter/ContextAutoTypeBeforeHandler.java
Patch:
@@ -59,6 +59,8 @@ public class ContextAutoTypeBeforeHandler
             Currency.class,
             BitSet.class,
             EnumSet.class,
+            // this is java.util.RegularEnumSet, java.util.JumboEnumSet need add manually ?
+            EnumSet.noneOf(TimeUnit.class).getClass(),
 
             Date.class,
             Calendar.class,

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentName.java
Patch:
@@ -265,7 +265,7 @@ public void eval(JSONPath.Context context) {
                 eval(itemContext);
                 Object val = itemContext.value;
 
-                if (val == null) {
+                if (val == null && (context.path.features & JSONPath.Feature.KeepNullValue.mask) == 0) {
                     continue;
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -487,7 +487,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         }
 
         if (!jsonReader.nextIfMatch('[')) {
-            if (itemClass != Object.class && itemObjectReader != null) {
+            if ((itemClass != Object.class && itemObjectReader != null) || (itemClass == Object.class && jsonReader.isObject())) {
                 Object item = itemObjectReader.readObject(jsonReader, itemType, 0, 0);
                 list.add(item);
                 if (builder != null) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1265,7 +1265,7 @@ public long readMillisFromString() {
                         .parse(str)
                         .getTime();
             } catch (ParseException e) {
-                throw new JSONException("parse date error, " + str + ", expect format " + utilFormat);
+                throw new JSONException("parse date error, " + str + ", expect format " + utilFormat.toPattern());
             }
         }
         if ("0000-00-00T00:00:00".equals(str)

File: core/src/main/java/com/alibaba/fastjson2/filter/ContextAutoTypeBeforeHandler.java
Patch:
@@ -92,6 +92,7 @@ public class ContextAutoTypeBeforeHandler
             Collections.unmodifiableMap(new HashMap<>()).getClass(),
             Collections.unmodifiableNavigableMap(new TreeMap<>()).getClass(),
             Collections.unmodifiableSortedMap(new TreeMap<>()).getClass(),
+            Arrays.asList().getClass(),
 
             Map.class,
             HashMap.class,
@@ -132,7 +133,7 @@ public class ContextAutoTypeBeforeHandler
             StringIndexOutOfBoundsException.class,
             TypeNotPresentException.class,
             VerifyError.class,
-            StackTraceElement.class,
+            StackTraceElement.class
     };
 
     final long[] acceptHashCodes;

File: core/src/test/java/org/apache/dubbo/springboot/demo/BusinessException.java
Patch:
@@ -70,4 +70,5 @@ public BusinessException record(boolean recorded) {
         this.recorded = recorded;
         return this;
     }
+
 }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -771,7 +771,7 @@ static <T> T parseObject(String text, Type... types) {
      * @param typeReference specify the {@link TypeReference} to be converted
      */
     @SuppressWarnings({"unchecked", "rawtypes"})
-    static <T> T parseObject(String text, TypeReference typeReference, JSONReader.Feature... features) {
+    static <T> T parseObject(String text, TypeReference<T> typeReference, JSONReader.Feature... features) {
         if (text == null || text.isEmpty()) {
             return null;
         }
@@ -790,7 +790,7 @@ static <T> T parseObject(String text, TypeReference typeReference, JSONReader.Fe
             if (reader.ch != EOI && (reader.context.features & IgnoreCheckClose.mask) == 0) {
                 throw new JSONException(reader.info("input not end"));
             }
-            return object;
+            return (T) object;
         }
     }
 
@@ -802,7 +802,7 @@ static <T> T parseObject(String text, TypeReference typeReference, JSONReader.Fe
      * @param filter specify filters to be enabled
      */
     @SuppressWarnings({"unchecked", "rawtypes"})
-    static <T> T parseObject(String text, TypeReference typeReference, Filter filter, JSONReader.Feature... features) {
+    static <T> T parseObject(String text, TypeReference<T> typeReference, Filter filter, JSONReader.Feature... features) {
         if (text == null || text.isEmpty()) {
             return null;
         }

File: core/src/test/java/com/alibaba/fastjson2/date/DateTest.java
Patch:
@@ -13,6 +13,7 @@
 
 public class DateTest {
     static final long millis = DateUtils.parseMillis("2023-03-11T11:33:22Z");
+
     @Test
     public void test() {
         assertEquals(millis, DateUtils.parseMillis("2023-03-11 19:33:22 CST"));
@@ -59,7 +60,6 @@ public void test1() {
         );
     }
 
-
     @Test
     public void test2() {
         long millis = 1678669374000L;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -27,6 +27,7 @@
 
 import static com.alibaba.fastjson2.codec.FieldInfo.JSON_AUTO_WIRED_ANNOTATED;
 import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE_SUPPORT;
+import static com.alibaba.fastjson2.util.TypeUtils.isFunction;
 
 public class ObjectReaderCreator {
     public static final boolean JIT = !JDKUtils.ANDROID && !JDKUtils.GRAAL;
@@ -1384,7 +1385,7 @@ protected void createFieldReader(
         Class fieldClass = method.getParameterTypes()[0];
 
         // skip function
-        if (fieldClass.getName().startsWith("java.util.function.")) {
+        if (isFunction(fieldClass)) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1223,7 +1223,7 @@ public long readMillisFromString() {
                 zdt = ZonedDateTime.ofLocal(ldt, context.getZoneId(), null);
             } else if (len >= 20) {
                 zdt = readZonedDateTimeX(len);
-                if (zdt == null && len == 34) {
+                if (zdt == null && (len >= 32 && len <= 35)) {
                     String str = readString();
                     zdt = DateUtils.parseZonedDateTime(str, null);
                 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -633,7 +633,7 @@ public Object readAny() {
                         zoneId = SHANGHAI_ZONE_ID;
                     } else {
                         String zoneIdStr = readString();
-                        zoneId = ZoneId.of(zoneIdStr);
+                        zoneId = DateUtils.getZoneId(zoneIdStr, SHANGHAI_ZONE_ID);
                     }
                 }
                 LocalDateTime ldt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nano);
@@ -4565,7 +4565,7 @@ public ZonedDateTime readZonedDateTime() {
                     if (contextZondId.getId().equals(zoneIdStr)) {
                         zoneId = contextZondId;
                     } else {
-                        zoneId = ZoneId.of(zoneIdStr);
+                        zoneId = DateUtils.getZoneId(zoneIdStr, SHANGHAI_ZONE_ID);
                     }
                 }
                 return ZonedDateTime.ofLocal(ldt, zoneId, null);

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1852,7 +1852,7 @@ public List readArray(Type itemType) {
 
         List list = new ArrayList();
         if (!nextIfMatch('[')) {
-            throw new JSONException("syntax error : " + ch);
+            throw new JSONException(info("syntax error : " + ch));
         }
 
         boolean fieldBased = (context.features & Feature.FieldBased.mask) != 0;

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentName.java
Patch:
@@ -525,6 +525,7 @@ public void accept(JSONReader jsonReader, JSONPath.Context context) {
                 if (jsonReader.isEnd()) {
                     return;
                 }
+                jsonReader.nextIfMatch(',');
                 // return object;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONArray;
 import com.alibaba.fastjson2.JSONObject;
+import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.filter.Filter;
 
 import java.lang.reflect.Constructor;
@@ -44,6 +45,7 @@ public class BeanInfo {
     public boolean alphabetic = true;
     public String objectWriterFieldName;
     public String objectReaderFieldName;
+    public Class<? extends JSONReader.AutoTypeBeforeHandler> autoTypeBeforeHandler;
 
     public void required(String fieldName) {
         if (schema == null) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/annotation/JSONType.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.PropertyNamingStrategy;
 import com.alibaba.fastjson.parser.Feature;
+import com.alibaba.fastjson.parser.ParserConfig;
 import com.alibaba.fastjson.serializer.SerializeFilter;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 
@@ -70,4 +71,6 @@
      * @since 1.2.49
      */
     Class<? extends SerializeFilter>[] serialzeFilters() default {};
+
+    Class<? extends ParserConfig.AutoTypeCheckHandler> autoTypeCheckHandler() default ParserConfig.AutoTypeCheckHandler.class;
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -3849,6 +3849,7 @@ public void skipValue() {
                 next();
                 for (; ; ) {
                     if (ch == '}') {
+                        comma = false;
                         next();
                         break;
                     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -183,6 +183,8 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                     throw new JSONException(jsonReader.info("parse enum error, class " + enumClass.getName() + ", " + valueField.getName() + " " + intValue));
                 }
             }
+        } else if (jsonReader.nextIfNullOrEmptyString()) {
+            fieldValue = null;
         } else {
             long hashCode = jsonReader.readValueHashCode();
             fieldValue = getEnumByHashCode(hashCode);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum2X4.java
Patch:
@@ -135,6 +135,8 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
             } else {
                 fieldValue = null;
             }
+        } else if (jsonReader.nextIfNullOrEmptyString()) {
+            fieldValue = null;
         } else {
             long hashCode = jsonReader.readValueHashCode();
             if (enumNameHashCode00 == hashCode || enumNameHashCode01 == hashCode) {

File: core/src/main/java/com/alibaba/fastjson2/JSONPathTypedMultiIndexes.java
Patch:
@@ -118,7 +118,7 @@ public Object extract(JSONReader jsonReader) {
             while (!jsonReader.nextIfObjectEnd()) {
                 long nameHashCode = jsonReader.readFieldNameHashCode();
                 boolean match = nameHashCode == prefixNameHash;
-                if (!match && (!jsonReader.isObject()) && !jsonReader.isArray()) {
+                if (!match) {
                     jsonReader.skipValue();
                     continue;
                 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -879,7 +879,7 @@ public final void writeString(char[] chars, int offset, int len, boolean quoted)
 
     @Override
     public final void writeChar(char ch) {
-        int minCapacity = bytes.length + 8;
+        int minCapacity = this.off + 8;
         if (minCapacity - bytes.length > 0) {
             int oldCapacity = bytes.length;
             int newCapacity = oldCapacity + (oldCapacity >> 1);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -907,7 +907,7 @@ public final void writeRaw(char[] chars, int off, int charslen) {
 
     @Override
     public final void writeChar(char ch) {
-        int minCapacity = chars.length + 8;
+        int minCapacity = this.off + 8;
         if (minCapacity - chars.length > 0) {
             int oldCapacity = chars.length;
             int newCapacity = oldCapacity + (oldCapacity >> 1);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -132,7 +132,9 @@ public ObjectReaderAdapter(
             hashCodesLCase[i] = fieldReader.fieldNameHashLCase;
 
             if (fieldReader.isUnwrapped()) {
-                this.extraFieldReader = fieldReader;
+                if (this.extraFieldReader == null || !(this.extraFieldReader instanceof FieldReaderAnySetter)) {
+                    this.extraFieldReader = fieldReader;
+                }
             }
 
             if (fieldReader.defaultValue != null) {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/util/TypeUtilsTest.java
Patch:
@@ -50,6 +50,7 @@ public void cast1() {
         assertNull(TypeUtils.castToLong(null));
         assertNull(TypeUtils.castToDouble(null));
         assertNull(TypeUtils.castToBigDecimal(null));
+        assertNull(TypeUtils.castToBigInteger(null));
         assertNull(TypeUtils.castToTimestamp(null));
         assertNull(TypeUtils.castToSqlDate(null));
         assertNull(TypeUtils.castToJavaBean(null, null));

File: core/src/main/java/com/alibaba/fastjson2/schema/ArraySchema.java
Patch:
@@ -83,7 +83,7 @@ public ArraySchema(JSONObject input, JSONSchema root) {
             additionalItemsSupport = true;
         } else {
             additionalItemsSupport = true;
-            this.itemSchema = JSONSchema.of((JSONObject) items, root);
+            this.itemSchema = JSONSchema.of((JSONObject) items, root != null ? root : this);
         }
 
         if (additionalItems instanceof JSONObject) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2581,7 +2581,7 @@ protected final String toString(Map object) {
     }
 
     public static JSONReader of(byte[] utf8Bytes) {
-        boolean ascii = true;
+        boolean ascii = false;
         if (PREDICATE_IS_ASCII != null) {
             ascii = PREDICATE_IS_ASCII.test(utf8Bytes);
         }
@@ -2603,7 +2603,7 @@ public static JSONReader of(byte[] utf8Bytes) {
 
     @Deprecated
     public static JSONReader of(JSONReader.Context context, byte[] utf8Bytes) {
-        boolean ascii = true;
+        boolean ascii = false;
         if (PREDICATE_IS_ASCII != null) {
             ascii = PREDICATE_IS_ASCII.test(utf8Bytes);
         }
@@ -2623,7 +2623,7 @@ public static JSONReader of(JSONReader.Context context, byte[] utf8Bytes) {
     }
 
     public static JSONReader of(byte[] utf8Bytes, JSONReader.Context context) {
-        boolean ascii = true;
+        boolean ascii = false;
         if (PREDICATE_IS_ASCII != null) {
             ascii = PREDICATE_IS_ASCII.test(utf8Bytes);
         }

File: core/src/test/java/com/alibaba/fastjson2/issues_1000/Issue1125.java
Patch:
@@ -15,6 +15,9 @@ public void test() {
         Bean bean = JSON.parseObject(str, Bean.class);
         assertNotNull(bean);
         assertEquals(1676803567000L, bean.date.getTime());
+
+        Bean bean1 = JSON.parseObject(str).toJavaObject(Bean.class);
+        assertEquals(bean.date.getTime(), bean1.date.getTime());
     }
 
     public static class Bean {

File: core/src/main/java/com/alibaba/fastjson2/schema/ObjectSchema.java
Patch:
@@ -399,10 +399,10 @@ public ValidateResult validate(Object value) {
                 int j = 0;
                 for (Iterator<String> it = this.required.iterator(); it.hasNext(); ) {
                     String itemName = it.next();
-                    j++;
                     if (j == i) {
                         fieldName = itemName;
                     }
+                    j++;
                 }
                 return new ValidateResult(false, "required property %s", fieldName);
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2169,8 +2169,8 @@ public BigDecimal getBigDecimal() {
                 }
 
                 if (exponent != 0) {
-                    double doubleValue = Double.parseDouble(
-                            decimal + "E" + exponent);
+                    String doubleStr = decimal.toPlainString() + "E" + exponent;
+                    double doubleValue = Double.parseDouble(doubleStr);
                     return BigDecimal.valueOf(doubleValue);
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -16,6 +16,7 @@ public class BeanInfo {
     public String builderWithPrefix;
     public Class[] seeAlso;
     public String[] seeAlsoNames;
+    public Class seeAlsoDefault;
     public Constructor creatorConstructor;
     public Constructor markerConstructor;
     public Method createMethod;

File: core/src/test/java/com/alibaba/fastjson2/codec/SeeAlsoTest.java
Patch:
@@ -23,6 +23,7 @@ public void test_seeAlso() {
                     Cat.class, Pig.class
             };
             ObjectReader<Animal> objectReader = creator.createObjectReaderSeeAlso(Animal.class, seeAlso);
+            creator.createObjectReaderSeeAlso(Animal.class, "@type", seeAlso, null);
 
             {
                 Animal animal = objectReader.readObject(JSONReader.of("{\"@type\":\"Cat\",\"catId\":1001}"), 0);

File: core/src/main/java/com/alibaba/fastjson2/JSONPathTypedMultiNames.java
Patch:
@@ -190,7 +190,7 @@ public Object extract(JSONReader jsonReader) {
                 fieldValue = fieldReader.readFieldValue(jsonReader);
             } catch (Exception e) {
                 long features = 0;
-                if (index < this.pathFeatures.length) {
+                if (pathFeatures != null && index < this.pathFeatures.length) {
                     features = this.pathFeatures[index];
                 }
                 if ((features & Feature.NullOnError.mask) == 0) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -616,7 +616,7 @@ public Function registerTypeConvert(Type from, Type to, Function typeConvert) {
             typeConverts.putIfAbsent(from, new ConcurrentHashMap<>());
             map = typeConverts.get(from);
         }
-        return map.putIfAbsent(to, typeConvert);
+        return map.put(to, typeConvert);
     }
 
     public ObjectReader getObjectReader(long hashCode) {

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -1467,9 +1467,9 @@ public static JSONArray parse(String text, JSONReader.Feature... features) {
      *
      * @param input the JSON {@link String} to be parsed
      * @param type specify the {@link Class} to be converted
-     * @since 2.0.21
+     * @since 2.0.24
      */
-    static <T> List<T> parseArray(String input, Class<T> type) {
+    public static <T> List<T> parseArray(String input, Class<T> type) {
         return JSON.parseArray(input, type);
     }
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -19,7 +19,7 @@
 
 public class JSONArray
         extends JSON
-        implements List, Serializable, Cloneable {
+        implements List<Object>, Serializable, Cloneable {
     static ObjectReader<JSONArray> arrayReader;
     static ObjectReader<JSONObject> objectReader;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1560,10 +1560,10 @@ public void read(Map object, long features) {
                 if ((contextFeatures & JSONReader.Feature.DuplicateKeyValueAsArray.mask) != 0) {
                     if (origin instanceof Collection) {
                         ((Collection) origin).add(value);
-                        object.put(name, value);
+                        map.put(name, origin);
                     } else {
                         JSONArray array = JSONArray.of(origin, value);
-                        object.put(name, array);
+                        map.put(name, array);
                     }
                 }
             }
@@ -1611,7 +1611,7 @@ public void read(Map object, Type keyType, Type valueType, long features) {
                 if ((contextFeatures & JSONReader.Feature.DuplicateKeyValueAsArray.mask) != 0) {
                     if (origin instanceof Collection) {
                         ((Collection) origin).add(value);
-                        object.put(name, value);
+                        object.put(name, origin);
                     } else {
                         JSONArray array = JSONArray.of(origin, value);
                         object.put(name, array);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapString.java
Patch:
@@ -65,7 +65,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 if ((contextFeatures & JSONReader.Feature.DuplicateKeyValueAsArray.mask) != 0) {
                     if (origin instanceof Collection) {
                         ((Collection) origin).add(value);
-                        object.put(name, value);
+                        object.put(name, origin);
                     } else {
                         JSONArray array = JSONArray.of(origin, value);
                         object.put(name, array);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -341,7 +341,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 if ((contextFeatures & JSONReader.Feature.DuplicateKeyValueAsArray.mask) != 0) {
                     if (origin instanceof Collection) {
                         ((Collection) origin).add(value);
-                        object.put(name, value);
+                        object.put(name, origin);
                     } else {
                         JSONArray array = JSONArray.of(origin, value);
                         object.put(name, array);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -232,7 +232,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
                     if ((contextFeatures & JSONReader.Feature.DuplicateKeyValueAsArray.mask) != 0) {
                         if (origin instanceof Collection) {
                             ((Collection) origin).add(value);
-                            object.put(name, value);
+                            object.put(name, origin);
                         } else {
                             JSONArray array = JSONArray.of(origin, value);
                             object.put(name, array);

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -2005,7 +2005,7 @@ static <T> List<T> parseArray(String text, Type type) {
      *
      * @param text the JSON {@link String} to be parsed
      * @param type specify the {@link Class} to be converted
-     * @since 2.0.20
+     * @since 2.0.21
      */
     static <T> List<T> parseArray(String text, Class<T> type) {
         if (text == null || text.isEmpty()) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -1019,6 +1019,7 @@ public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
             case "java.net.InetSocketAddress":
             case "java.text.SimpleDateFormat":
             case "java.util.regex.Pattern":
+            case "com.fasterxml.jackson.databind.node.ArrayNode":
                 return ObjectWriterMisc.INSTANCE;
             case "org.apache.commons.lang3.tuple.Pair":
             case "org.apache.commons.lang3.tuple.MutablePair":

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -3938,7 +3938,7 @@ public void skipLineComment() {
             if (ch == '\n') {
                 offset++;
 
-                if (offset >= length) {
+                if (offset >= end) {
                     ch = EOI;
                     return;
                 }
@@ -3947,7 +3947,7 @@ public void skipLineComment() {
 
                 while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
                     offset++;
-                    if (offset >= length) {
+                    if (offset >= end) {
                         ch = EOI;
                         return;
                     }
@@ -3959,7 +3959,7 @@ public void skipLineComment() {
             }
 
             offset++;
-            if (offset >= length) {
+            if (offset >= end) {
                 ch = EOI;
                 return;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -3520,7 +3520,7 @@ public void skipLineComment() {
             if (ch == '\n') {
                 offset++;
 
-                if (offset >= length) {
+                if (offset >= end) {
                     ch = EOI;
                     return;
                 }
@@ -3529,7 +3529,7 @@ public void skipLineComment() {
 
                 while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
                     offset++;
-                    if (offset >= length) {
+                    if (offset >= end) {
                         ch = EOI;
                         return;
                     }
@@ -3541,7 +3541,7 @@ public void skipLineComment() {
             }
 
             offset++;
-            if (offset >= length) {
+            if (offset >= end) {
                 ch = EOI;
                 return;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2556,12 +2556,14 @@ protected final Number toNumber(List list) {
 
     protected final String toString(List array) {
         JSONWriter writer = JSONWriter.of();
+        writer.setRootObject(array);
         writer.write(array);
         return writer.toString();
     }
 
     protected final String toString(Map object) {
         JSONWriter writer = JSONWriter.of();
+        writer.setRootObject(object);
         writer.write(object);
         return writer.toString();
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -3977,6 +3977,7 @@ public void readNumber0() {
         this.negative = false;
         this.exponent = 0;
         this.scale = 0;
+        int firstOffset = offset;
 
         char quote = '\0';
         if (ch == '"' || ch == '\'') {
@@ -4172,7 +4173,7 @@ public void readNumber0() {
 
         if (quote != 0) {
             if (ch != quote) {
-                this.offset -= 1;
+                this.offset = firstOffset;
                 this.ch = quote;
                 readString0();
                 valueType = JSON_TYPE_STRING;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8.java
Patch:
@@ -15,7 +15,8 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             return;
         }
 
-        jsonWriter.writeInt8(((Number) object).byteValue());
+        byte byteValue = ((Byte) object).byteValue();
+        jsonWriter.writeInt8(byteValue);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1372,7 +1372,8 @@ public void read(List list) {
             if (nextIfMatch(']')) {
                 break;
             }
-            Object item = readAny();
+
+            Object item = ObjectReaderImplObject.INSTANCE.readObject(this, null, null, 0);
             list.add(item);
 
             if (nextIfMatch(',')) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -92,7 +92,7 @@ public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
                 } else {
                     formattedWriter = ObjectWriterArrayFinal.DOUBLE_ARRAY;
                 }
-            } else if (valueClass == BigDecimal.class) {
+            } else if (valueClass == BigDecimal[].class) {
                 if (decimalFormat != null) {
                     formattedWriter = new ObjectWriterArrayFinal(BigDecimal.class, decimalFormat);
                 } else {

File: core/src/test/java/com/alibaba/fastjson2/util/DateUtilsTestFormat.java
Patch:
@@ -5,7 +5,6 @@
 import com.alibaba.fastjson2.JSONPath;
 import com.alibaba.fastjson2.annotation.JSONField;
 import org.junit.jupiter.api.AfterEach;
-import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/SqlTimestampTest.java
Patch:
@@ -13,8 +13,8 @@
 public class SqlTimestampTest {
     @BeforeEach
     public void setUp() throws Exception {
-        JSON.defaultTimeZone = TimeZone.getDefault();
-        JSON.defaultLocale = Locale.getDefault();
+        JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
+        JSON.defaultLocale = Locale.CHINA;
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/issues_1000/Issue1019.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.PropertyNamingStrategy;
 import com.alibaba.fastjson2.annotation.JSONField;
-import com.alibaba.fastjson2.reader.ObjectReaderProvider;
 import com.alibaba.fastjson2.writer.ObjectWriterProvider;
 import lombok.Data;
 import org.junit.jupiter.api.Test;

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -1262,10 +1262,10 @@ public static <T> T cast(Object obj, Class<T> targetClass, ObjectReaderProvider
 
         if (targetClass.isEnum()) {
             if (obj instanceof Integer) {
-                int ordinal = ((Integer) obj).intValue();
+                int intValue = ((Integer) obj).intValue();
                 ObjectReader objectReader = JSONFactory.getDefaultObjectReaderProvider().getObjectReader(targetClass);
                 if (objectReader instanceof ObjectReaderImplEnum) {
-                    Enum e = ((ObjectReaderImplEnum) objectReader).getEnumByOrdinal(ordinal);
+                    Enum e = ((ObjectReaderImplEnum) objectReader).of(intValue);
                     return (T) e;
                 }
             }

File: core/src/test/java/com/alibaba/fastjson2/support/springfox/JsonTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONObject;
+import com.alibaba.fastjson2.JSONWriter;
 import org.junit.jupiter.api.Test;
 import springfox.documentation.spring.web.json.Json;
 
@@ -15,5 +16,6 @@ public void test() {
 
         Json json = new Json(jsonStr);
         assertEquals(jsonStr, JSON.toJSONString(json));
+        assertEquals(jsonStr, JSON.toJSONString(json, JSONWriter.Feature.FieldBased));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/util/DateUtils.java
Patch:
@@ -3116,7 +3116,7 @@ public static ZonedDateTime parseZonedDateTime(String str, ZoneId defaultZoneId)
             S8 = c28;
             zoneIdBegin = 29;
             isTimeZone = c29 == '|';
-        } else if (len == 22 && (c1 == '+' || c17 == '-')) {
+        } else if (len == 22 && (c17 == '+' || c17 == '-')) {
             // yyyyMMddHHmmssSSSZ
             y0 = c0;
             y1 = c1;
@@ -3147,8 +3147,8 @@ public static ZonedDateTime parseZonedDateTime(String str, ZoneId defaultZoneId)
             S6 = '0';
             S7 = '0';
             S8 = '0';
-            zoneIdBegin = 18;
-            isTimeZone = true;
+            zoneIdBegin = 17;
+            isTimeZone = false;
         } else {
             throw new DateTimeParseException("illegal input " + str, str, 0);
         }

File: core/src/main/java/com/alibaba/fastjson2/util/JDKUtils.java
Patch:
@@ -211,7 +211,7 @@ String.class, methodType(void.class, byte[].class, byte.class)
                         methodType(ToIntFunction.class),
                         methodType(int.class, Object.class),
                         coder,
-                        coder.type()
+                        methodType(byte.class, String.class)
                 );
                 stringCoder = (ToIntFunction<String>) applyAsInt.getTarget().invokeExact();
 

File: core/src/test/java/com/alibaba/fastjson2/filter/FilterTest.java
Patch:
@@ -12,7 +12,7 @@
 public class FilterTest {
     @Test
     public void test_0() {
-        assertEquals("{\"Id\":123}", JSON.toJSONString(Collections.singletonMap("id", 123), new PascalNameFilter()));
+//        assertEquals("{\"Id\":123}", JSON.toJSONString(Collections.singletonMap("id", 123), new PascalNameFilter()));
         assertEquals("{\"\":123}", JSON.toJSONString(Collections.singletonMap("", 123), new PascalNameFilter()));
     }
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson.JSONException;
 import com.alibaba.fastjson.PropertyNamingStrategy;
-import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.util.TypeUtils;
 import com.alibaba.fastjson2.writer.ObjectWriter;
@@ -14,6 +13,7 @@
 public class SerializeConfig {
     public static final SerializeConfig global = new SerializeConfig(null);
     public static final SerializeConfig globalInstance = global;
+    public static final ObjectWriterProvider DEFAULT_PROVIDER = new ObjectWriterProvider(com.alibaba.fastjson2.PropertyNamingStrategy.CamelCase1x);
 
     public final boolean fieldBased;
     public PropertyNamingStrategy propertyNamingStrategy;
@@ -40,15 +40,15 @@ public SerializeConfig(boolean fieldBased) {
     public ObjectWriterProvider getProvider() {
         ObjectWriterProvider provider = this.provider;
         if (provider == null) {
-            provider = JSONFactory.getDefaultObjectWriterProvider();
+            provider = DEFAULT_PROVIDER;
         }
         return provider;
     }
 
     public boolean put(Type type, ObjectSerializer value) {
         ObjectWriterProvider provider = this.provider;
         if (provider == null) {
-            provider = JSONFactory.getDefaultObjectWriterProvider();
+            provider = DEFAULT_PROVIDER;
         }
         return provider.register(type, new ObjectSerializerAdapter(value), fieldBased) == null;
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.alibaba.fastjson.serializer.*;
 import com.alibaba.fastjson.util.TypeUtils;
 import com.alibaba.fastjson2.JSONB;
-import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.writer.ObjectWriter;
@@ -86,14 +85,14 @@ public void toJSONString1() {
         assertEquals("123", JSON.toJSONString(bean));
 
         {
-            ObjectWriter objectWriter = JSONFactory.getDefaultObjectWriterProvider().getObjectWriter(BeanAware.class);
+            ObjectWriter objectWriter = SerializeConfig.DEFAULT_PROVIDER.getObjectWriter(BeanAware.class);
             JSONWriter jsonWriter = JSONWriter.of();
             objectWriter.write(jsonWriter, null, null, null, 0);
             assertEquals("null", jsonWriter.toString());
         }
 
         {
-            ObjectWriter objectWriter = JSONFactory.getDefaultObjectWriterProvider().getObjectWriter(BeanAware.class);
+            ObjectWriter objectWriter = SerializeConfig.DEFAULT_PROVIDER.getObjectWriter(BeanAware.class);
             JSONWriter jsonWriter = JSONWriter.ofJSONB();
             objectWriter.writeJSONB(jsonWriter, null, null, null, 0);
             byte[] bytes = jsonWriter.getBytes();

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1478.java
Patch:
@@ -12,7 +12,7 @@ public void test_for_issue() throws Exception {
         model.md5 = "xxx";
 
         String json = JSON.toJSONString(model);
-        assertEquals("{\"MD5\":\"xxx\"}", json);
+        assertEquals("{\"mD5\":\"xxx\"}", json);
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3200/Issue3266_mixedin.java
Patch:
@@ -10,7 +10,7 @@
 public class Issue3266_mixedin {
     @Test
     public void test_for_issue() throws Exception {
-        com.alibaba.fastjson2.JSON.mixIn(Color.class, ColorMixedIn.class);
+        com.alibaba.fastjson.JSON.addMixInAnnotations(Color.class, ColorMixedIn.class);
 
         VO vo = new VO();
         vo.type = Color.Black;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3436.java
Patch:
@@ -11,7 +11,7 @@
 public class Issue3436 {
     @Test
     public void test_for_issue() throws Exception {
-        com.alibaba.fastjson2.JSON.mixIn(FileSystemResource.class, FileSystemResourceMixedIn.class);
+        com.alibaba.fastjson.JSON.addMixInAnnotations(FileSystemResource.class, FileSystemResourceMixedIn.class);
 
         FileSystemResource fileSystemResource = new FileSystemResource("E:\\my-code\\test\\test-fastjson.txt");
 

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -366,7 +366,7 @@ public long getHashCode(int ordinal) {
                 break;
             default:
                 try {
-                    if (!JDKUtils.ANDROID) {
+                    if (!JDKUtils.ANDROID && !JDKUtils.GRAAL) {
                         compiler = JSONPathCompilerReflectASM.INSTANCE;
                     }
                 } catch (Throwable ignored) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -25,7 +25,7 @@
 import static com.alibaba.fastjson2.util.JDKUtils.UNSAFE_SUPPORT;
 
 public class ObjectReaderCreator {
-    public static final boolean JIT = JDKUtils.ANDROID;
+    public static final boolean JIT = !JDKUtils.ANDROID && !JDKUtils.GRAAL;
     public static final ObjectReaderCreator INSTANCE = new ObjectReaderCreator();
 
     protected AtomicInteger jitErrorCount = new AtomicInteger();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -573,7 +573,7 @@ public ObjectReaderProvider() {
             case "asm":
             default:
                 try {
-                    if (!JDKUtils.ANDROID) {
+                    if (!JDKUtils.ANDROID && !JDKUtils.GRAAL) {
                         creator = ObjectReaderCreatorASM.INSTANCE;
                     }
                 } catch (Throwable ignored) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterProvider.java
Patch:
@@ -49,7 +49,7 @@ public ObjectWriterProvider() {
             case "asm":
             default:
                 try {
-                    if (!JDKUtils.ANDROID) {
+                    if (!JDKUtils.ANDROID && !JDKUtils.GRAAL) {
                         creator = ObjectWriterCreatorASM.INSTANCE;
                     }
                 } catch (Throwable ignored) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONObjectTest3.java
Patch:
@@ -113,7 +113,7 @@ public void test_error_4() {
         Exception error = null;
         try {
             bean.f(1, 2);
-        } catch (UnsupportedOperationException ex) {
+        } catch (Exception ex) {
             error = ex;
         }
         assertNotNull(error);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONObjectTest3C.java
Patch:
@@ -113,7 +113,7 @@ public void test_error_4() {
         Exception error = null;
         try {
             bean.f(1, 2);
-        } catch (UnsupportedOperationException ex) {
+        } catch (Exception ex) {
             error = ex;
         }
         assertNotNull(error);

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentName.java
Patch:
@@ -450,6 +450,9 @@ public void accept(JSONReader jsonReader, JSONPath.Context context) {
         if (jsonReader.nextIfObjectStart()) {
             if (jsonReader.ch == '}') {
                 jsonReader.next();
+                if (jsonReader.isEnd()) {
+                    return;
+                }
                 // return object;
             }
 

File: extension/src/main/java/com/alibaba/fastjson2/support/csv/CSVParser.java
Patch:
@@ -8,7 +8,6 @@
 import com.alibaba.fastjson2.reader.ObjectReaderAdapter;
 import com.alibaba.fastjson2.reader.ObjectReaderProvider;
 import com.alibaba.fastjson2.util.JDKUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 
 import java.io.*;
 import java.lang.reflect.Type;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.IOUtils;
 import com.alibaba.fastjson2.util.JDKUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 import com.alibaba.fastjson2.writer.ObjectWriter;
 
 import java.io.IOException;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8JDK9.java
Patch:
@@ -1,7 +1,5 @@
 package com.alibaba.fastjson2;
 
-import com.alibaba.fastjson2.util.UnsafeUtils;
-
 import java.util.Arrays;
 
 import static com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;

File: core/src/test/java/com/alibaba/fastjson2/JDKUtilsTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2;
 
 import com.alibaba.fastjson2.util.JDKUtils;
-import com.alibaba.fastjson2.util.UnsafeUtils;
 import org.junit.jupiter.api.Test;
 
 import java.nio.charset.StandardCharsets;

File: adapter/src/main/java/com/alibaba/fastjson2/adapter/jackson/databind/JsonNode.java
Patch:
@@ -6,6 +6,7 @@
 import com.alibaba.fastjson2.adapter.jackson.core.*;
 import com.alibaba.fastjson2.adapter.jackson.databind.jsontype.TypeSerializer;
 import com.alibaba.fastjson2.adapter.jackson.databind.node.JsonNodeType;
+import com.alibaba.fastjson2.annotation.JSONField;
 
 import java.io.IOException;
 import java.math.BigDecimal;
@@ -108,6 +109,7 @@ public <T extends JsonNode> T deepCopy() {
         throw new JSONException("TODO");
     }
 
+    @JSONField(serialize = false)
     public JsonNodeType getNodeType() {
         throw new JSONException("TODO");
     }
@@ -194,7 +196,7 @@ public float floatValue() {
         return 0;
     }
 
-    public float doubleValue() {
+    public double doubleValue() {
         return 0;
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/FormatTest.java
Patch:
@@ -67,7 +67,7 @@ public void testLocalDateTime2() {
             assertEquals(2022, localDateTime.getYear());
             assertEquals(6, localDateTime.getMonthValue());
             assertEquals(13, localDateTime.getDayOfMonth());
-            assertEquals(12, localDateTime.getHour());
+            assertEquals(20, localDateTime.getHour());
             assertEquals(13, localDateTime.getMinute());
             assertEquals(17, localDateTime.getSecond());
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleFunc.java
Patch:
@@ -61,6 +61,6 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
     @Override
     public Object readFieldValue(JSONReader jsonReader) {
-        return jsonReader.readFloatValue();
+        return jsonReader.readDouble();
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatFunc.java
Patch:
@@ -61,6 +61,6 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
     @Override
     public Object readFieldValue(JSONReader jsonReader) {
-        return jsonReader.readFloatValue();
+        return jsonReader.readFloat();
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1742,6 +1742,9 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
             }
 
             if (objectClass.isArray()) {
+                if (objectClass.getComponentType() == Object.class) {
+                    return ObjectArrayReader.INSTANCE;
+                }
                 return new ObjectArrayTypedReader(objectClass);
             }
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/annotation/FastJsonView.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson.support.spring;
+package com.alibaba.fastjson.support.spring.annotation;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.support.config.FastJsonConfig;
@@ -27,7 +27,7 @@
  * @since 2.0.2
  */
 
-public class FastJsonJsonView
+public class FastJsonView
         extends AbstractView {
     /**
      * renderedAttributes
@@ -52,7 +52,7 @@ public class FastJsonJsonView
     /**
      * Set default param.
      */
-    public FastJsonJsonView() {
+    public FastJsonView() {
         setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
         setExposePathVariables(false);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1405.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.fastjson.issue_1400;
 
 import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
-import com.alibaba.fastjson.support.spring.FastJsonJsonView;
+import com.alibaba.fastjson.support.spring.annotation.FastJsonView;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -91,7 +91,7 @@ public void configureMessageConverters(List<HttpMessageConverter<?>> converters)
 
         @Override
         public void configureViewResolvers(ViewResolverRegistry registry) {
-            FastJsonJsonView fastJsonJsonView = new FastJsonJsonView();
+            FastJsonView fastJsonJsonView = new FastJsonView();
             registry.enableContentNegotiation(fastJsonJsonView);
         }
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -181,7 +181,7 @@ public Function getBuildFunction() {
     public Object createInstance(Collection collection) {
         int size = collection.size();
 
-        if (size == 0) {
+        if (size == 0 && (listClass == List.class)) {
             Collection list = Collections.emptyList();
             if (builder != null) {
                 return builder.apply(list);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -197,7 +197,7 @@ static String fieldItemObjectReader(int i) {
             return fieldName;
         }
 
-        String base = "itemObjectReader_";
+        String base = "itemReader";
         int size = IOUtils.stringSize(i);
         char[] chars = new char[base.length() + size];
         base.getChars(0, base.length(), chars, 0);
@@ -423,7 +423,7 @@ public <T> ObjectReader<T> createObjectReader(
                 (e) -> objectClass.getName().equals(e) ? objectClass : null
         );
 
-        String className = "ObjectReader_" + seed.incrementAndGet();
+        String className = "ORG_" + seed.incrementAndGet() + "_" + fieldReaderArray.length + "_" + objectClass.getSimpleName();
         String classNameType;
         String classNameFull;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -417,7 +417,7 @@ boolean record = BeanUtils.isRecord(objectClass);
 
         ClassWriter cw = new ClassWriter(null);
 
-        String className = "ObjectWriter_" + seed.incrementAndGet();
+        String className = "OWG_" + seed.incrementAndGet() + "_" + fieldWriters.size() + "_" + objectClass.getSimpleName();
         String classNameType;
         String classNameFull;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterList.java
Patch:
@@ -75,8 +75,9 @@ public ObjectWriter getItemWriter(JSONWriter jsonWriter, Type itemType) {
             return itemObjectWriter = jsonWriter
                     .getObjectWriter(this.itemType, itemClass);
         }
+
         return jsonWriter
-                .getObjectWriter(itemType, null);
+                .getObjectWriter(itemType, TypeUtils.getClass(itemType));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayField.java
Patch:
@@ -54,7 +54,7 @@ public ObjectWriter getItemWriter(JSONWriter jsonWriter, Type itemType) {
                     .getObjectWriter(this.itemType, itemClass);
         }
         return jsonWriter
-                .getObjectWriter(itemType, null);
+                .getObjectWriter(itemType, TypeUtils.getClass(itemType));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -344,7 +344,7 @@ public boolean nextIfObjectStart() {
         return true;
     }
 
-    public abstract boolean nextIfEmptyString();
+    public abstract boolean nextIfNullOrEmptyString();
 
     public boolean nextIfObjectEnd() {
         if (this.ch != '}') {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderImplDate.java
Patch:
@@ -264,7 +264,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                         }
                         fieldValue = new java.util.Date(millis);
                     }
-                } else if (jsonReader.nextIfEmptyString()) {
+                } else if (jsonReader.nextIfNullOrEmptyString()) {
                     fieldValue = null;
                 } else {
                     long millis = jsonReader.readMillisFromString();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayReaderMultiType.java
Patch:
@@ -36,7 +36,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
             return readJSONBObject(jsonReader, fieldType, fieldName, 0);
         }
 
-        if (jsonReader.readIfNull() || jsonReader.nextIfEmptyString()) {
+        if (jsonReader.nextIfNullOrEmptyString()) {
             return null;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -210,7 +210,7 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
             return readJSONBObject(jsonReader, fieldType, fieldName, 0);
         }
 
-        if (jsonReader.nextIfNull() || jsonReader.nextIfEmptyString()) {
+        if (jsonReader.nextIfNullOrEmptyString()) {
             return null;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -1554,7 +1554,7 @@ private <T> void genMethodReadObject(
         mw.visitJumpInsn(Opcodes.IFNE, notNull_);
 
         mw.visitVarInsn(Opcodes.ALOAD, JSON_READER);
-        mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "nextIfNull", "()Z", false);
+        mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "nextIfNullOrEmptyString", "()Z", false);
         mw.visitJumpInsn(Opcodes.IFEQ, notNull_);
 
         mw.visitInsn(Opcodes.ACONST_NULL);
@@ -2151,10 +2151,10 @@ private <T> int genReadFieldValue(
                         mw.visitJumpInsn(Opcodes.GOTO, loadList_);
                     } else if (itemType instanceof Class) {
                         mw.visitVarInsn(Opcodes.ALOAD, JSON_READER);
-                        mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "nextIfEmptyString", "()Z", false);
+                        mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "nextIfNullOrEmptyString", "()Z", false);
                         mw.visitJumpInsn(Opcodes.IFNE, loadNull_);
 
-                        // nextIfEmptyString
+                        // nextIfNullOrEmptyString
                         mw.visitTypeInsn(Opcodes.NEW, LIST_TYPE);
                         mw.visitInsn(Opcodes.DUP);
                         if (initCapacity) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderException.java
Patch:
@@ -120,7 +120,7 @@ protected ObjectReaderException(
     public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         boolean objectStart = jsonReader.nextIfObjectStart();
         if (!objectStart) {
-            if (jsonReader.nextIfEmptyString()) {
+            if (jsonReader.nextIfNullOrEmptyString()) {
                 return null;
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -80,7 +80,7 @@ private Object readDate(JSONReader jsonReader) {
             }
         }
 
-        if (jsonReader.nextIfEmptyString()) {
+        if (jsonReader.nextIfNullOrEmptyString()) {
             return null;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -221,7 +221,7 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
 
         boolean objectStart = jsonReader.nextIfObjectStart();
         if (!objectStart && !jsonReader.isTypeRedirect()) {
-            if (jsonReader.nextIfEmptyString()) {
+            if (jsonReader.nextIfNullOrEmptyString()) {
                 return null;
             }
         }

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest5.java
Patch:
@@ -220,8 +220,8 @@ public void nextIfEmptyString() {
                 JSONReader.ofJSONB(
                             JSONB.toBytes("")
                         )
-                        .nextIfEmptyString()
+                        .nextIfNullOrEmptyString()
         );
-        assertFalse(JSONReader.ofJSONB(JSONB.toBytes("1")).nextIfEmptyString());
+        assertFalse(JSONReader.ofJSONB(JSONB.toBytes("1")).nextIfNullOrEmptyString());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -249,6 +249,8 @@ boolean record = BeanUtils.isRecord(objectClass);
                 BeanUtils.getters(objectClass, method -> {
                     fieldInfo.init();
                     fieldInfo.features |= writerFieldFeatures;
+                    fieldInfo.format = beanInfo.format;
+
                     provider.getFieldInfo(beanInfo, fieldInfo, objectClass, method);
                     if (fieldInfo.ignore) {
                         return;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -815,9 +815,7 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
                             || (fieldName0 != null && name.equals(fieldName0))
                     ) {
                         fieldInfo.features |= FieldInfo.FIELD_MASK;
-                        if ((field.getModifiers() & (Modifier.PUBLIC | Modifier.STATIC)) == 0) {
-                            getFieldInfo(beanInfo, fieldInfo, objectClass, field);
-                        }
+                        getFieldInfo(beanInfo, fieldInfo, objectClass, field);
                     }
                 });
             }

File: adapter/src/main/java/com/alibaba/fastjson2/adapter/jackson/annotation/JsonProperty.java
Patch:
@@ -14,6 +14,8 @@
 
     Access access() default Access.AUTO;
 
+    int index() default -1;
+
     enum Access {
         /**
          * Access setting which means that visibility rules are to be used

File: adapter/src/main/java/com/alibaba/fastjson2/adapter/jackson/databind/annotation/JsonDeserialize.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.adapter.jackson.databind.JsonDeserializer;
 import com.alibaba.fastjson2.adapter.jackson.databind.KeyDeserializer;
+import com.alibaba.fastjson2.adapter.jackson.databind.util.Converter;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -19,4 +20,6 @@ Class<? extends KeyDeserializer> keyUsing()
 
     Class<? extends JsonDeserializer> contentUsing()
             default JsonDeserializer.None.class;
+
+    Class<? extends Converter> converter() default Converter.None.class;
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1177,6 +1177,7 @@ public void flushTo(java.io.Writer to) {
         try {
             String json = this.toString();
             to.write(json);
+            off = 0;
         } catch (IOException e) {
             throw new JSONException("flushTo error", e);
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -696,6 +696,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
                 String annotationTypeName = annotationType.getName();
                 switch (annotationTypeName) {
                     case "com.fasterxml.jackson.annotation.JsonIgnore":
+                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonIgnore":
                         if (useJacksonAnnotation) {
                             processJacksonJsonIgnore(fieldInfo, annotation);
                         }
@@ -707,6 +708,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
                         }
                         break;
                     case "com.fasterxml.jackson.annotation.JsonAnySetter":
+                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonAnySetter":
                         if (useJacksonAnnotation) {
                             fieldInfo.features |= FieldInfo.UNWRAPPED_MASK;
                         }
@@ -721,6 +723,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
                         }
                         break;
                     case "com.fasterxml.jackson.annotation.JsonAlias":
+                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonAlias":
                         if (useJacksonAnnotation) {
                             processJacksonJsonAlias(fieldInfo, annotation);
                         }

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -460,6 +460,7 @@ public static void setters(Class objectClass, Consumer<Method> methodConsumer) {
 
                     switch (annotationType.getName()) {
                         case "com.fasterxml.jackson.annotation.JsonAnySetter":
+                        case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonAnySetter":
                             if (JSONFactory.isUseJacksonAnnotation()) {
                                 unwrapped = true;
                             }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -311,11 +311,13 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectTyp
                 boolean useJacksonAnnotation = JSONFactory.isUseJacksonAnnotation();
                 switch (annotationTypeName) {
                     case "com.fasterxml.jackson.annotation.JsonIgnore":
+                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonIgnore":
                         if (useJacksonAnnotation) {
                             processJacksonJsonIgnore(fieldInfo, annotation);
                         }
                         break;
                     case "com.fasterxml.jackson.annotation.JsonAnyGetter":
+                    case "com.alibaba.fastjson2.adapter.jackson.annotation.JsonAnyGetter":
                         if (useJacksonAnnotation) {
                             fieldInfo.features |= FieldInfo.UNWRAPPED_MASK;
                         }

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderTest1.java
Patch:
@@ -1513,7 +1513,9 @@ public void config() {
 
     @Test
     public void testDates() {
-        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale.CHINA);
+        DateTimeFormatter formatter = DateTimeFormatter
+                .ofPattern("yyyy-MM-dd HH:mm:ss", Locale.CHINA)
+                .withZone(IOUtils.SHANGHAI_ZONE_ID);
 
         char[] chars = "\"1900-01-01 00:00:00\"".toCharArray();
         for (int year = 1900; year < 2200; year++) {

File: core/src/main/java/com/alibaba/fastjson2/schema/JSONSchema.java
Patch:
@@ -129,7 +129,7 @@ static Not ofNot(JSONObject input, Class objectClass) {
 
         JSONObject object = (JSONObject) not;
 
-        if (object != null && object.isEmpty()) {
+        if (object == null || object.isEmpty()) {
             return new Not(null, new Type[] {Type.Any}, null);
         }
 

File: core/src/test/java/com/alibaba/fastjson2/JSONPathValueConsumerTest2.java
Patch:
@@ -156,9 +156,9 @@ public void accept(byte[] bytes, int off, int len) {
     public void test_extract_scalar_str_1() {
         JSONPath path = JSONPath.of("$.id");
         AtomicReference ref = new AtomicReference();
+        byte[] utf8Bytes = "{\"id\":\"\\x29123\uD83D\uDE09®中国\"}".getBytes(StandardCharsets.UTF_8);
         path.extractScalar(
-                JSONReader
-                        .of("{\"id\":\"\\x29123\uD83D\uDE09®中国\"}".getBytes(StandardCharsets.UTF_8)),
+                JSONReader.of(utf8Bytes),
                 new ValueConsumer() {
                     @Override
                     public void accept(String val) {
@@ -167,7 +167,7 @@ public void accept(String val) {
 
                     @Override
                     public void accept(byte[] bytes, int off, int len) {
-                        ref.set(new String(bytes, off, len));
+                        ref.set(new String(bytes, off, len, StandardCharsets.UTF_8));
                     }
                 });
         assertEquals(")123\uD83D\uDE09®中国", ref.get());

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderTest1.java
Patch:
@@ -1513,7 +1513,7 @@ public void config() {
 
     @Test
     public void testDates() {
-        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale.CHINA);
 
         char[] chars = "\"1900-01-01 00:00:00\"".toCharArray();
         for (int year = 1900; year < 2200; year++) {

File: core/src/test/java/com/alibaba/fastjson2/primitves/StringTest1.java
Patch:
@@ -3,6 +3,8 @@
 import com.alibaba.fastjson2.util.IOUtils;
 import org.junit.jupiter.api.Test;
 
+import java.nio.charset.StandardCharsets;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class StringTest1 {
@@ -13,7 +15,7 @@ public void test_0() throws Throwable {
 
         byte[] dst = new byte[10];
         int result = IOUtils.encodeUTF8(bytes, 0, bytes.length, dst, 0);
-        String str2 = new String(dst, 0, result);
+        String str2 = new String(dst, 0, result, StandardCharsets.UTF_8);
         assertEquals(str, str2);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/util/IOUtilsTest.java
Patch:
@@ -34,7 +34,7 @@ public void encodeUTF8() {
 
         byte[] dst = new byte[100];
         int result = IOUtils.encodeUTF8(bytes, 0, bytes.length, dst, 0);
-        String str2 = new String(dst, 0, result);
+        String str2 = new String(dst, 0, result, StandardCharsets.UTF_8);
         assertEquals(str, str2);
     }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1140.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
+import java.nio.charset.StandardCharsets;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -18,7 +19,7 @@ public void test_for_issue() throws Exception {
         ByteArrayOutputStream out = new ByteArrayOutputStream();
         JSON.writeTo(out, s);
 
-        String str = new String(out.toByteArray());
+        String str = new String(out.toByteArray(), StandardCharsets.UTF_8);
         assertEquals("\"\uD83C\uDDEB\uD83C\uDDF7\"", str);
     }
 }

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayWriteStringTest.java
Patch:
@@ -14,9 +14,9 @@ public static void fastjson2() {
             }
             long millis = System.currentTimeMillis() - start;
             System.out.println("fastjson2 millis : " + millis);
-            // zulu8.58.0.13 : 325
-            // zulu11.52.13 : 347 369 344
-            // zulu17.32.13 : 335 342
+            // zulu8.58.0.13 : 325 344
+            // zulu11.52.13 : 347 369 344 353
+            // zulu17.32.13 : 335 342 353
 
             // reflect-zulu8.58.0.13 : 498 465
             // reflect-zulu11.52.13 : 532 504

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/JSONSerializer.java
Patch:
@@ -63,6 +63,9 @@ public void config(SerializerFeature feature, boolean state) {
             case BrowserCompatible:
                 ctx.config(JSONWriter.Feature.BrowserCompatible);
                 break;
+            case BrowserSecure:
+                ctx.config(JSONWriter.Feature.BrowserSecure);
+                break;
             case WriteClassName:
                 ctx.config(JSONWriter.Feature.WriteClassName);
                 break;

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java
Patch:
@@ -217,6 +217,9 @@ public boolean isEnabled(SerializerFeature feature) {
             case BrowserCompatible:
                 rawFeature = JSONWriter.Feature.BrowserCompatible;
                 break;
+            case BrowserSecure:
+                rawFeature = JSONWriter.Feature.BrowserSecure;
+                break;
             case IgnoreNonFieldGetter:
                 rawFeature = JSONWriter.Feature.IgnoreNonFieldGetter;
                 break;

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest4.java
Patch:
@@ -858,7 +858,7 @@ public void test_3_path_7() {
 
     @Test
     public void test_3_path_8() {
-        JSONPath path = JSONPath.of("$.phoneNumbers.0.type");
+        JSONPath path = JSONPath.of("$.phoneNumbers[0]type");
         String expected = "\"iPhone\"";
 
         assertEquals(expected,

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -87,7 +87,7 @@ protected void processExtra(JSONReader jsonReader, Object object) {
                 String fieldName1 = fieldName.substring(2);
                 long hashCode64LCase = Fnv.hashCode64LCase(fieldName1);
                 FieldReader fieldReader = getFieldReaderLCase(hashCode64LCase);
-                if (fieldReader != null) {
+                if (fieldReader != null && fieldReader.fieldClass == Boolean.class) {
                     fieldReader.readFieldValue(jsonReader, object);
                     return;
                 }

File: core/src/test/java/com/alibaba/fastjson2/dubbo/GenericExceptionTest.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONB;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.util.JSONBDump;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -23,7 +22,6 @@ public void test() {
                 JSONWriter.Feature.NotWriteHashMapArrayListClassName,
                 JSONWriter.Feature.WriteNameAsSymbol
         );
-        JSONBDump.dump(jsonbBytes);
 
         GenericException exception1 = (GenericException) JSONB.parseObject(
                 jsonbBytes,
@@ -32,6 +30,7 @@ public void test() {
                 JSONReader.Feature.UseNativeObject,
                 JSONReader.Feature.FieldBased
         );
+        assertNotNull(exception1);
     }
 
     @Test

File: core/src/main/java/com/alibaba/fastjson2/filter/SimplePropertyPreFilter.java
Patch:
@@ -59,7 +59,7 @@ public boolean process(JSONWriter writer, Object source, String name) {
         }
 
         if (clazz != null && !clazz.isInstance(source)) {
-            return false;
+            return excludes.size() != 0 && includes.isEmpty() && maxLevel == 0;
         }
 
         if (this.excludes.contains(name)) {

File: core/src/test/java/com/alibaba/fastjson2/eishay/ParserTest.java
Patch:
@@ -266,7 +266,7 @@ public void test_1_jsonb_symbolTable() {
 //        js.wr
     }
 
-    final String str = "{\"images\":\n" +
+    static final String str = "{\"images\":\n" +
             "\t[\n" +
             "\t\t{\n" +
             "\t\t\t\"height\":768,\n" +

File: core/src/main/java/com/alibaba/fastjson2/util/JdbcSupport.java
Patch:
@@ -73,6 +73,9 @@ public static boolean isClob(Class objectClass) {
                 }
                 return true;
             case "java.sql.NClob":
+            case "oracle.sql.CLOB":
+            case "com.alibaba.druid.proxy.jdbc.ClobProxyImpl":
+            case "com.alibaba.druid.proxy.jdbc.NClobProxyImpl":
                 return true;
             default:
                 if (objectClassName.startsWith("oracle.sql.")

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterProvider.java
Patch:
@@ -302,6 +302,7 @@ public ObjectWriter getObjectWriter(Type objectType, Class objectClass, boolean
                 java.time.OffsetDateTime.class,
                 java.time.OffsetTime.class,
                 String.class,
+                StackTraceElement.class,
                 Collections.emptyList().getClass(),
                 Collections.emptyMap().getClass(),
                 Collections.emptySet().getClass()

File: core/src/main/java/com/alibaba/fastjson2/util/DateUtils.java
Patch:
@@ -2285,7 +2285,7 @@ public static long toMillis19(String str, int off, ZoneId zoneId) {
         ) {
             month = (m0 - '0') * 10 + (m1 - '0');
 
-            if ((month == 0 && year != 0) || month >= 12) {
+            if ((month == 0 && year != 0) || month > 12) {
                 throw new DateTimeParseException("illegal input", str.substring(off, off + 19), 0);
             }
         } else {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCIICSV.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.util.DateUtils;
 
-import java.math.BigInteger;
 import java.time.*;
 import java.util.TimeZone;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16CSV.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.util.DateUtils;
 
-import java.math.BigInteger;
 import java.time.*;
 import java.util.TimeZone;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -2001,7 +2001,7 @@ public Integer readInt32() {
             }
         }
 
-        if(!csv) {
+        if (!csv) {
             while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
                 if (offset >= end) {
                     ch = EOI;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1388,7 +1388,7 @@ public void writeDouble(double[] values) {
             return;
         }
 
-        int minCapacity = values.length * 25 + 1;
+        int minCapacity = off + values.length * 25 + 1;
         if (minCapacity - chars.length > 0) {
             int oldCapacity = chars.length;
             int newCapacity = oldCapacity + (oldCapacity >> 1);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterPretty.java
Patch:
@@ -194,8 +194,8 @@ public void endArray() {
     }
 
     @Override
-    public void writeRaw(char[] chars) {
-        jsonWriter.writeRaw(chars);
+    public void writeRaw(char[] chars, int off, int len) {
+        jsonWriter.writeRaw(chars, off, len);
     }
 
     @Override
@@ -206,7 +206,7 @@ public void writeNameRaw(char[] chars) {
             writeComma();
         }
 
-        jsonWriter.writeRaw(chars);
+        jsonWriter.writeRaw(chars, 0, chars.length);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCharValueArray.java
Patch:
@@ -17,14 +17,15 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         if (jsonWriter.isWriteTypeInfo(object, fieldType, features)) {
             jsonWriter.writeTypeName(JSONB_TYPE_NAME_BYTES, JSONB_TYPE_HASH);
         }
-        jsonWriter.writeString((char[]) object);
+        char[] chars = (char[]) object;
+        jsonWriter.writeString(chars, 0, chars.length);
     }
 
     @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         char[] chars = (char[]) object;
         if (jsonWriter.isUTF16()) {
-            jsonWriter.writeString(chars);
+            jsonWriter.writeString(chars, 0, chars.length);
         } else {
             jsonWriter.writeString(new String(chars));
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDate.java
Patch:
@@ -59,7 +59,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 } else {
                     prefix = PREFIX_CHARS;
                 }
-                jsonWriter.writeRaw(prefix);
+                jsonWriter.writeRaw(prefix, 0, prefix.length);
             } else {
                 byte[] prefix;
                 if ("java.sql.Date".equals(date.getClass().getName())) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -67,7 +67,6 @@ public ObjectReaderAdapter(
         long[] hashCodesLCase = new long[fieldReaders.length];
         for (int i = 0; i < fieldReaders.length; i++) {
             FieldReader fieldReader = fieldReaders[i];
-            String fieldName = fieldReader.fieldName;
             hashCodes[i] = fieldReader.fieldNameHash;
             hashCodesLCase[i] = fieldReader.fieldNameHashLCase;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONPathMulti.java
Patch:
@@ -7,12 +7,12 @@
 import java.util.Map;
 import java.util.function.BiFunction;
 
-final class JSONPathPathMulti
+final class JSONPathMulti
         extends JSONPath {
     final List<JSONPathSegment> segments;
     final boolean ref;
 
-    JSONPathPathMulti(String path, List<JSONPathSegment> segments, Feature... features) {
+    JSONPathMulti(String path, List<JSONPathSegment> segments, Feature... features) {
         super(path, features);
         this.segments = segments;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSegmentIndex.java
Patch:
@@ -421,7 +421,7 @@ public void setLong(JSONPath.Context context, long value) {
     public void accept(JSONReader jsonReader, JSONPath.Context context) {
         if (context.parent != null
                 && (context.parent.eval
-                || (context.parent.current instanceof JSONPath.CycleNameSegment && context.next == null))
+                || (context.parent.current instanceof CycleNameSegment && context.next == null))
         ) {
             eval(context);
             return;
@@ -493,13 +493,13 @@ public void accept(JSONReader jsonReader, JSONPath.Context context) {
                     val = jsonReader.getNumber();
                     break;
                 case '[':
-                    if (context.next != null && !(context.next instanceof JSONPath.EvalSegment)) {
+                    if (context.next != null && !(context.next instanceof EvalSegment)) {
                         break _for;
                     }
                     val = jsonReader.readArray();
                     break;
                 case '{':
-                    if (context.next != null && !(context.next instanceof JSONPath.EvalSegment)) {
+                    if (context.next != null && !(context.next instanceof EvalSegment)) {
                         break _for;
                     }
                     val = jsonReader.readObject();

File: core/src/main/java/com/alibaba/fastjson2/JSONPathSingle.java
Patch:
@@ -78,7 +78,7 @@ public void setLong(Object root, long value) {
     @Override
     public Object extract(JSONReader jsonReader) {
         Context context = new Context(this, null, segment, null, 0);
-        if (segment instanceof EvalSegment) {
+        if (segment instanceof JSONPathSegment.EvalSegment) {
             context.root = jsonReader.readAny();
             segment.eval(context);
         } else {

File: core/src/test/java/com/alibaba/fastjson2/JSONPathTest6.java
Patch:
@@ -4,6 +4,7 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.nio.charset.StandardCharsets;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -71,5 +72,6 @@ public void testString() {
         assertEquals(id, jsonPath.extract(JSONReader.ofJSONB(jsonbBytes)));
         assertEquals(id, jsonPath.extract(json));
         assertEquals(id, jsonPath.extract(jsonBytes));
+        assertEquals(id, jsonPath.extract(jsonBytes, 0, jsonBytes.length, StandardCharsets.US_ASCII));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1557,8 +1557,8 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
             return ObjectReaderImplAtomicReference.INSTANCE;
         }
 
-        if (type == Object[].class) {
-            return ObjectArrayReader.INSTANCE;
+        if (type instanceof MultiType) {
+            return new ObjectArrayReaderMultiType((MultiType) type);
         }
 
         if (type == StringBuffer.class || type == StringBuilder.class) {

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/GenReport.java
Patch:
@@ -9,7 +9,7 @@
 public class GenReport {
     @Test
     public void gen() throws Exception {
-        File file = new File("/Users/wenshao/Work/git/fastjson2/docs/benchmark/benchmark_2.0.17_raw.md");
+        File file = new File("/Users/wenshao/Work/git/fastjson2/docs/benchmark/benchmark_2.0.19_raw.md");
 
         Map<String, BenchmarkResult> benchResults = new LinkedHashMap<>();
 

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -1381,6 +1381,7 @@ public static boolean isProxy(Class<?> clazz) {
                 case "org.hibernate.proxy.HibernateProxy":
                 case "org.springframework.context.annotation.ConfigurationClassEnhancer$EnhancedConfiguration":
                 case "org.mockito.cglib.proxy.Factory":
+                case "net.sf.cglib.proxy.Factory":
                     return true;
                 default:
                     break;

File: adapter-jackson/src/main/java/com/fasterxml/jackson/core/JsonParser.java
Patch:
@@ -64,7 +64,7 @@ public static int collectDefaults() {
             return flags;
         }
 
-        private Feature(boolean defaultState) {
+        Feature(boolean defaultState) {
             _mask = (1 << ordinal());
             _defaultState = defaultState;
         }

File: adapter-jackson/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java
Patch:
@@ -1,12 +1,11 @@
 package com.fasterxml.jackson.databind.node;
 
 import com.alibaba.fastjson2.annotation.JSONField;
-import com.fasterxml.jackson.databind.JsonNode;
 
 import java.math.BigDecimal;
 
 public class DecimalNode
-        extends JsonNode {
+        extends ValueNode {
     private BigDecimal value;
 
     public DecimalNode(@JSONField(name = "value", value = true) BigDecimal value) {

File: adapter-jackson/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java
Patch:
@@ -1,10 +1,9 @@
 package com.fasterxml.jackson.databind.node;
 
 import com.alibaba.fastjson2.annotation.JSONField;
-import com.fasterxml.jackson.databind.JsonNode;
 
 public class DoubleNode
-        extends JsonNode {
+        extends ValueNode {
     private double value;
 
     public DoubleNode(@JSONField(name = "value", value = true) double value) {

File: adapter-jackson/src/main/java/com/fasterxml/jackson/databind/node/IntegerNode.java
Patch:
@@ -1,10 +1,9 @@
 package com.fasterxml.jackson.databind.node;
 
 import com.alibaba.fastjson2.annotation.JSONField;
-import com.fasterxml.jackson.databind.JsonNode;
 
 public class IntegerNode
-        extends JsonNode {
+        extends ValueNode {
     private int value;
 
     public IntegerNode(@JSONField(name = "value", value = true) int value) {

File: adapter-jackson/src/main/java/com/fasterxml/jackson/databind/node/LongNode.java
Patch:
@@ -1,10 +1,9 @@
 package com.fasterxml.jackson.databind.node;
 
 import com.alibaba.fastjson2.annotation.JSONField;
-import com.fasterxml.jackson.databind.JsonNode;
 
 public class LongNode
-        extends JsonNode {
+        extends ValueNode {
     private long value;
 
     public LongNode(@JSONField(name = "value", value = true) long value) {

File: adapter-jackson/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java
Patch:
@@ -1,10 +1,9 @@
 package com.fasterxml.jackson.databind.node;
 
 import com.alibaba.fastjson2.annotation.JSONField;
-import com.fasterxml.jackson.databind.JsonNode;
 
 public class ShortNode
-        extends JsonNode {
+        extends ValueNode {
     private short value;
 
     public ShortNode(@JSONField(name = "value", value = true) short value) {

File: adapter-jackson/src/test/java/com/fasterxml/jackson/core/JacksonNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.adapter.jackson;
+package com.fasterxml.jackson.core;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: adapter-jackson/src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest.java
Patch:
@@ -1,7 +1,6 @@
-package com.alibaba.fastjson2.adapter.jackson;
+package com.fasterxml.jackson.databind;
 
 import com.fasterxml.jackson.core.type.TypeReference;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.jupiter.api.Test;
 
 import java.util.Map;

File: adapter-jackson/src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest1.java
Patch:
@@ -1,7 +1,5 @@
-package com.alibaba.fastjson2.adapter.jackson;
+package com.fasterxml.jackson.databind;
 
-import com.fasterxml.jackson.databind.DeserializationFeature;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertThrows;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_4200/Issue4239.java
Patch:
@@ -22,8 +22,8 @@ public void test() {
                 .id(1)
                 .name("joker")
                 .pwd("123@321")
-                .time(LocalDateTime.now())
-                .time2(LocalDateTime.now())
+                .time(LocalDateTime.of(2022, 11, 12, 0, 0, 0))
+                .time2(LocalDateTime.of(2022, 11, 12, 0, 0, 0))
                 .build();
 
         String beanToJsonStr = JSON.toJSONString(entity, NameFilter.of(PropertyNamingStrategy.UpperCase));

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -822,6 +822,8 @@ public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
                 return null;
             case "org.javamoney.moneta.internal.JDKCurrencyAdapter":
                 return ObjectWriterImplToString.INSTANCE;
+            case "com.fasterxml.jackson.databind.node.ObjectNode":
+                return ObjectWriterImplToString.DIRECT;
             case "org.javamoney.moneta.Money":
                 return MoneySupport.createMonetaryAmountWriter();
             case "org.javamoney.moneta.spi.DefaultNumberValue":

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader.java
Patch:
@@ -107,13 +107,13 @@ typeName, getObjectClass(), features | getFeatures()
                     typedFieldValue = ((JSONObject) fieldValue).to(fieldType);
                 } else if (fieldValue instanceof JSONArray) {
                     typedFieldValue = ((JSONArray) fieldValue).to(fieldType);
-                } else if (!fieldClass.isInstance(fieldValue) && fieldReader.format == null) {
-                    typedFieldValue = TypeUtils.cast(fieldValue, fieldClass);
+                } else if (features == 0 && !fieldClass.isInstance(fieldValue) && fieldReader.format == null) {
+                    typedFieldValue = TypeUtils.cast(fieldValue, fieldClass, provider);
                 } else {
                     String fieldValueJSONString = JSON.toJSONString(fieldValue);
                     try (JSONReader jsonReader = JSONReader.of(fieldValueJSONString)) {
                         ObjectReader fieldObjectReader = fieldReader.getObjectReader(jsonReader);
-                        typedFieldValue = fieldObjectReader.readObject(jsonReader, null, entry.getKey(), 0);
+                        typedFieldValue = fieldObjectReader.readObject(jsonReader, null, entry.getKey(), features);
                     }
                 }
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionFieldReadOnly.java
Patch:
@@ -34,7 +34,9 @@ public void accept(T object, Object value) {
 
         String name = collection.getClass().getName();
         if ("java.util.Collections$UnmodifiableRandomAccessList".equals(name)
-                || "java.util.Collections$UnmodifiableRandomAccessList".equals(name)) {
+                || "java.util.Arrays$ArrayList".equals(name)
+                || "java.util.Collections$SingletonList".equals(name)
+                || name.startsWith("java.util.ImmutableCollections$")) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -49,7 +49,9 @@ public void accept(T object, Object value) {
 
         String name = collection.getClass().getName();
         if ("java.util.Collections$UnmodifiableRandomAccessList".equals(name)
-                || "java.util.Collections$UnmodifiableRandomAccessList".equals(name)) {
+                || "java.util.Arrays$ArrayList".equals(name)
+                || "java.util.Collections$SingletonList".equals(name)
+                || name.startsWith("java.util.ImmutableCollections$")) {
             return;
         }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTestField_Local.java
Patch:
@@ -18,6 +18,8 @@ public class DateFormatTestField_Local {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTest_Local.java
Patch:
@@ -18,17 +18,18 @@ public class DateFormatTest_Local {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 
     @Test
     void localeDateTest_CN() {
         final String date = "{\"today\": \"2022 五月 10\"}";
 
-        Today today;
         try (JSONReader reader = JSONReader.of(date)) {
             reader.getContext().setLocale(Locale.CHINESE);
-            today = reader.read(Today.class);
+            reader.read(Today.class);
         }
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTest_Local_OptinalDate.java
Patch:
@@ -19,6 +19,8 @@ public class DateFormatTest_Local_OptinalDate {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTest_zdt_Instant.java
Patch:
@@ -18,6 +18,8 @@ public class DateFormatTest_zdt_Instant {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTestField_Local.java
Patch:
@@ -18,6 +18,8 @@ public class DateFormatTestField_Local {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTest_Local.java
Patch:
@@ -18,17 +18,18 @@ public class DateFormatTest_Local {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 
     @Test
     void localeDateTest_CN() {
         final String date = "{\"today\": \"2022 五月 10\"}";
 
-        Today today;
         try (JSONReader reader = JSONReader.of(date)) {
             reader.getContext().setLocale(Locale.CHINESE);
-            today = reader.read(Today.class);
+            reader.read(Today.class);
         }
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTest_Local_OptinalDate.java
Patch:
@@ -19,6 +19,8 @@ public class DateFormatTest_Local_OptinalDate {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateFormatTest_zdt_Instant.java
Patch:
@@ -18,6 +18,8 @@ public class DateFormatTest_zdt_Instant {
     @Test
     void localeDateTest() {
         final String date = "{\"today\": \"2022 March 10\"}";
+        LocaleSetter.setLocaleToEnglish();
+
         assertAll(() -> JSON.parseObject(date, Today.class));
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader12.java
Patch:
@@ -158,7 +158,7 @@ public FieldReader getFieldReader(long hashCode) {
         }
 
         if (hashCode == hashCode11) {
-            return fieldReader10;
+            return fieldReader11;
         }
 
         return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -1048,8 +1048,8 @@ protected void createFieldReader(
 
         ObjectReader initReader = fieldInfo.getInitReader();
         if (initReader == null) {
-            if (fieldClass == long.class) {
-                ObjectReader objectReader = provider.getObjectReader(fieldClass);
+            if (fieldClass == long.class || fieldClass == Long.class) {
+                ObjectReader objectReader = provider.getObjectReader(Long.class);
                 if (objectReader != ObjectReaderImplInt64.INSTANCE) {
                     initReader = objectReader;
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -773,7 +773,7 @@ public <T> FieldWriter<T> createFieldWriter(
                 }
             } else if (fieldClass == long.class || fieldClass == Long.class) {
                 if ((provider.userDefineMask & ObjectWriterProvider.TYPE_INT64_MASK) != 0) {
-                    ObjectWriter objectWriter = provider.cache.get(fieldClass);
+                    ObjectWriter objectWriter = provider.cache.get(Long.class);
                     if (objectWriter != ObjectWriterImplInt64.INSTANCE) {
                         initObjectWriter = objectWriter;
                     }

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.function.Function;
 
 import static com.alibaba.fastjson2.JSONWriter.Feature.*;
+import static com.alibaba.fastjson2.util.AnnotationUtils.getAnnotations;
 
 public class JSONObject
         extends LinkedHashMap<String, Object>
@@ -1536,7 +1537,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
      */
     private String getJSONFieldName(Method method) {
         String name = null;
-        Annotation[] annotations = method.getAnnotations();
+        Annotation[] annotations = getAnnotations(method);
         for (Annotation annotation : annotations) {
             Class<? extends Annotation> annotationType = annotation.annotationType();
             JSONField jsonField = AnnotationUtils.findAnnotation(annotation, JSONField.class);

File: core/src/main/java/com/alibaba/fastjson2/JSONPathCompilerReflect.java
Patch:
@@ -238,7 +238,8 @@ public Object eval(Object object) {
                 throw new UnsupportedOperationException();
             }
 
-            return fieldWriter.getFieldValue(object);
+            Object fieldValue = fieldWriter.getFieldValue(object);
+            return fieldValue;
         }
 
         @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -771,7 +771,7 @@ public <T> FieldWriter<T> createFieldWriter(
                         initObjectWriter = objectWriter;
                     }
                 }
-            } else if (fieldClass == Long.class) {
+            } else if (fieldClass == long.class || fieldClass == Long.class) {
                 if ((provider.userDefineMask & ObjectWriterProvider.TYPE_INT64_MASK) != 0) {
                     ObjectWriter objectWriter = provider.cache.get(fieldClass);
                     if (objectWriter != ObjectWriterImplInt64.INSTANCE) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -1043,6 +1043,9 @@ public ObjectReader checkAutoType(Class expectClass, long expectClassHash, long
                             Class contextClass = TypeUtils.getMapping(typeName);
                             if (contextClass == null) {
                                 try {
+                                    if (contextClassLoader == null) {
+                                        contextClassLoader = JSON.class.getClassLoader();
+                                    }
                                     contextClass = contextClassLoader.loadClass(typeName);
                                 } catch (ClassNotFoundException ignored) {
                                 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1530,7 +1530,7 @@ public enum Feature {
         /**
          * @since 2.0.17
          */
-        WriteLongAsString(1 << 34);
+        WriteLongAsString(1L << 34);
 
         public final long mask;
 

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue895.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.TypeReference;
-
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -306,11 +306,11 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
         }
 
         if (beanInfo.creatorConstructor != null || beanInfo.createMethod != null) {
-            return createObjectReaderWithCreator(objectClass, provider, beanInfo);
+            return createObjectReaderWithCreator(objectClass, objectType, provider, beanInfo);
         }
 
         if (beanInfo.builder != null) {
-            return createObjectReaderWithBuilder(objectClass, provider, beanInfo);
+            return createObjectReaderWithBuilder(objectClass, objectType, provider, beanInfo);
         }
 
         if (Throwable.class.isAssignableFrom(objectClass)) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader12.java
Patch:
@@ -211,7 +211,7 @@ public FieldReader getFieldReaderLCase(long hashCode) {
         }
 
         if (hashCode == hashCode11LCase) {
-            return fieldReader10;
+            return fieldReader11;
         }
 
         return null;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListField.java
Patch:
@@ -7,6 +7,8 @@
 import java.lang.reflect.Type;
 import java.util.List;
 
+import static com.alibaba.fastjson2.JSONWriter.Feature.*;
+
 final class FieldWriterListField<T>
         extends FieldWriterList<T> {
     protected FieldWriterListField(
@@ -48,7 +50,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         if (value == null) {
             long features = this.features | context.getFeatures();
-            if ((features & (JSONWriter.Feature.WriteNulls.mask | JSONWriter.Feature.NullAsDefaultValue.mask | JSONWriter.Feature.WriteNullListAsEmpty.mask)) != 0) {
+            if ((features & (WriteNulls.mask | NullAsDefaultValue.mask | WriteNullListAsEmpty.mask)) != 0) {
                 writeFieldName(jsonWriter);
                 jsonWriter.writeArrayNull();
                 return true;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayField.java
Patch:
@@ -7,6 +7,8 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
 
+import static com.alibaba.fastjson2.JSONWriter.Feature.*;
+
 final class FieldWriterObjectArrayField<T>
         extends FieldWriter<T> {
     final Type itemType;
@@ -61,7 +63,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         if (value == null) {
             long features = this.features | jsonWriter.getFeatures();
-            if ((features & (JSONWriter.Feature.WriteNulls.mask | JSONWriter.Feature.NullAsDefaultValue.mask | JSONWriter.Feature.WriteNullListAsEmpty.mask)) != 0) {
+            if ((features & (WriteNulls.mask | NullAsDefaultValue.mask | WriteNullListAsEmpty.mask)) != 0) {
                 writeFieldName(jsonWriter);
                 jsonWriter.writeArrayNull();
                 return true;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayMethod.java
Patch:
@@ -8,6 +8,8 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 
+import static com.alibaba.fastjson2.JSONWriter.Feature.*;
+
 final class FieldWriterObjectArrayMethod<T>
         extends FieldWriter<T> {
     final Type itemType;
@@ -62,7 +64,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         if (value == null) {
             long features = this.features | jsonWriter.getFeatures();
-            if ((features & (JSONWriter.Feature.WriteNulls.mask | JSONWriter.Feature.NullAsDefaultValue.mask | JSONWriter.Feature.WriteNullListAsEmpty.mask)) != 0) {
+            if ((features & (WriteNulls.mask | NullAsDefaultValue.mask | WriteNullListAsEmpty.mask)) != 0) {
                 writeFieldName(jsonWriter);
                 jsonWriter.writeArrayNull();
                 return true;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -874,7 +874,8 @@ public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
 
         if (Map.Entry.class.isAssignableFrom(objectClass)) {
             String objectClassName = objectClass.getName();
-            if (!"org.apache.commons.lang3.tuple.ImmutablePair".equals(objectClassName) && !"org.apache.commons.lang3.tuple.MutablePair".equals(objectClassName)
+            if (!"org.apache.commons.lang3.tuple.ImmutablePair".equals(objectClassName)
+                    && !"org.apache.commons.lang3.tuple.MutablePair".equals(objectClassName)
             ) {
                 return ObjectWriterImplMapEntry.INSTANCE;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -2793,7 +2793,7 @@ static <T> T to(Class<T> clazz, Object object) {
             return ((JSONObject) object).to(clazz);
         }
 
-        return TypeUtils.cast(object, clazz);
+        return TypeUtils.cast(object, clazz, JSONFactory.getDefaultObjectReaderProvider());
     }
 
     /**

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/util/TypeUtils.java
Patch:
@@ -32,7 +32,7 @@
 public class TypeUtils {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public static <T> T cast(Object obj, Class<T> clazz, ParserConfig config) {
-        return com.alibaba.fastjson2.util.TypeUtils.cast(obj, clazz);
+        return com.alibaba.fastjson2.util.TypeUtils.cast(obj, clazz, config.getProvider());
     }
 
     @SuppressWarnings("unchecked")

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -479,7 +479,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 if (valueWriter == ObjectWriterImplInt64.INSTANCE) {
                     jsonWriter.writeInt64((Long) value);
                 } else {
-                    jsonWriter.writeInt64((Long) value);
+                    valueWriter.write(jsonWriter, value, strKey, Long.class, features);
                 }
                 continue;
             } else if (valueClass == Boolean.class) {

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue746.java
Patch:
@@ -12,7 +12,7 @@
 public class Issue746 {
     @Test
     public void test() {
-        LoginUser loginUser = JSON.parseObject("{\"menuSet\":Set[],\"authorities\":Set[]}}", LoginUser.class);
+        LoginUser loginUser = JSON.parseObject("{\"menuSet\":Set[],\"authorities\":Set[]}", LoginUser.class);
         assertEquals(0, loginUser.menuSet.size());
         assertEquals(0, loginUser.authorities.size());
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -1009,9 +1009,6 @@ public Date getDate(String key) {
 
         if (value instanceof Number) {
             long millis = ((Number) value).longValue();
-            if (millis == 0) {
-                return null;
-            }
             return new Date(millis);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -111,8 +111,8 @@ public static Date toDate(Object obj) {
             return DateUtils.parseDate((String) obj);
         }
 
-        if (obj instanceof Long) {
-            return new Date(((Long) obj).longValue());
+        if (obj instanceof Long || obj instanceof Integer) {
+            return new Date(((Number) obj).longValue());
         }
 
         throw new JSONException("can not cast to Date from " + obj.getClass());

File: core/src/test/java/com/alibaba/fastjson2/JSONObjectTest.java
Patch:
@@ -947,8 +947,8 @@ public void test_getByte() {
     public void test_getDate() {
         assertNull(JSONObject.of("id", null).getDate("id"));
         assertNull(JSONObject.of("id", "").getDate("id"));
-        assertNull(JSONObject.of("id", 0).getDate("id"));
-        assertNull(JSONObject.of("id", 0L).getDate("id"));
+        assertEquals(0, JSONObject.of("id", 0).getDate("id").getTime());
+        assertEquals(0L, JSONObject.of("id", 0L).getDate("id").getTime());
 
         long millis = System.currentTimeMillis();
         Date date = new Date(millis);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1223,7 +1223,7 @@ public void writeFloat(float[] values) {
             return;
         }
 
-        int minCapacity = values.length * 16 + 1;
+        int minCapacity = off + values.length * 16 + 1;
         if (minCapacity - chars.length > 0) {
             int oldCapacity = chars.length;
             int newCapacity = oldCapacity + (oldCapacity >> 1);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -640,7 +640,7 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
                 });
             }
 
-            if (beanInfo.kotlin && beanInfo.createParameterNames != null) {
+            if (beanInfo.kotlin && beanInfo.creatorConstructor != null && beanInfo.createParameterNames != null) {
                 String fieldName = BeanUtils.getterName(method, null);
                 for (int i = 0; i < beanInfo.createParameterNames.length; i++) {
                     if (fieldName.equals(beanInfo.createParameterNames[i])) {

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayParseStringNoneCacheTest.java
Patch:
@@ -24,8 +24,9 @@ public static void fastjson2() {
             // corretto-11 :
             // corretto-17 :
             // corretto-18 :
-            // oracle-jdk-17.0.4 :
+            // oracle-jdk-17.0.4 : 594
             // oracle-jdk-18.0.2 :
+            //
 
             // reflect-zulu8.62.0.19
             // reflect-zulu11.52.13 :

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -4816,6 +4816,8 @@ public void set(Context context, Object value) {
                 if (index >= 0) {
                     if (index < list.size()) {
                         list.set(index, value);
+                    } else if (index <= list.size()) {
+                        list.add(value);
                     }
                 } else {
                     int itemIndex = list.size() + this.index;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -647,7 +647,7 @@ public <T> ObjectReader<T> createObjectReader(
             beanInfo.readerFeatures |= JSONReader.Feature.FieldBased.mask;
         }
 
-        if (Enum.class.isAssignableFrom(objectClass)) {
+        if (Enum.class.isAssignableFrom(objectClass) && (beanInfo.createMethod == null || beanInfo.createMethod.getParameterCount() == 1)) {
             return createEnumReader(objectClass, beanInfo.createMethod, provider);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -301,7 +301,7 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
             fieldBased = false;
         }
 
-        if (Enum.class.isAssignableFrom(objectClass)) {
+        if (Enum.class.isAssignableFrom(objectClass) && (beanInfo.createMethod == null || beanInfo.createMethod.getParameterCount() == 1)) {
             return createEnumReader(objectClass, beanInfo.createMethod, provider);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorLambda.java
Patch:
@@ -69,7 +69,7 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
             return annotatedObjectReader;
         }
 
-        if (Enum.class.isAssignableFrom(objectClass)) {
+        if (Enum.class.isAssignableFrom(objectClass) && (beanInfo.createMethod == null || beanInfo.createMethod.getParameterCount() == 1)) {
             return createEnumReader(objectClass, beanInfo.createMethod, provider);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -6094,7 +6094,7 @@ static class JSONPathParser {
         boolean negative;
 
         public JSONPathParser(String str) {
-            this.jsonReader = JSONReader.of(PARSE_CONTEXT, this.path = str);
+            this.jsonReader = JSONReader.of(this.path = str, PARSE_CONTEXT);
 
             if (jsonReader.ch == 'l' && jsonReader.nextIfMatchIdent('l', 'a', 'x')) {
                 lax = true;

File: core/src/main/java/com/alibaba/fastjson2/schema/DateTimeValidator.java
Patch:
@@ -108,7 +108,7 @@ public boolean isValid(String str) {
             str.getChars(0, str.length(), chars, 1);
             chars[chars.length - 1] = '"';
 
-            return JSONReader.of(JSONSchema.CONTEXT, chars).isLocalDateTime();
+            return JSONReader.of(chars, JSONSchema.CONTEXT).isLocalDateTime();
         } catch (DateTimeException | JSONException ignored) {
             return false;
         }

File: core/src/main/java/com/alibaba/fastjson2/schema/DateValidator.java
Patch:
@@ -67,7 +67,7 @@ public boolean isValid(String str) {
             str.getChars(0, str.length(), chars, 1);
             chars[chars.length - 1] = '"';
 
-            return JSONReader.of(JSONSchema.CONTEXT, chars)
+            return JSONReader.of(chars, JSONSchema.CONTEXT)
                     .isLocalDate();
         } catch (DateTimeException | JSONException ignored) {
             return false;

File: core/src/test/java/com/alibaba/fastjson2/features/UseNativeObjectTest.java
Patch:
@@ -41,15 +41,15 @@ public void test1() {
     public void test2() {
         String str = "{}";
         {
-            JSONReader jsonReader = JSONReader.of(JSONFactory.createReadContext(HashMap::new), str);
+            JSONReader jsonReader = JSONReader.of(str, JSONFactory.createReadContext(HashMap::new));
             assertEquals(HashMap.class, jsonReader.readObject().getClass());
         }
         {
-            JSONReader jsonReader = JSONReader.of(JSONFactory.createReadContext(HashMap::new), str);
+            JSONReader jsonReader = JSONReader.of(str, JSONFactory.createReadContext(HashMap::new));
             assertEquals(HashMap.class, jsonReader.read(Object.class).getClass());
         }
         {
-            JSONReader jsonReader = JSONReader.of(JSONFactory.createReadContext(HashMap::new), str);
+            JSONReader jsonReader = JSONReader.of(str, JSONFactory.createReadContext(HashMap::new));
             assertEquals(HashMap.class, jsonReader.read(Map.class).getClass());
         }
     }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue703.java
Patch:
@@ -40,7 +40,7 @@ public <T> T read(String json, Type type) {
         ObjectReaderProvider readers = new ObjectReaderProvider();
         readers.mixIn(Misc.PersistentEnum.class, PersistentEnumMixin.class);
         JSONReader.Context context = new JSONReader.Context(readers);
-        try (final JSONReader reader = JSONReader.of(context, json)) {
+        try (final JSONReader reader = JSONReader.of(json, context)) {
             ObjectReader<T> v = reader.getObjectReader(type);
             return v.readObject(reader, 0);
         }
@@ -82,7 +82,7 @@ public <T> T read1(String json, Type type) {
         ObjectReaderProvider readers = new ObjectReaderProvider(ObjectReaderCreatorLambda.INSTANCE);
         readers.mixIn(Misc.PersistentEnum.class, PersistentEnumMixin.class);
         JSONReader.Context context = new JSONReader.Context(readers);
-        try (final JSONReader reader = JSONReader.of(context, json)) {
+        try (final JSONReader reader = JSONReader.of(json, context)) {
             ObjectReader<T> v = reader.getObjectReader(type);
             return v.readObject(reader, 0);
         }
@@ -124,7 +124,7 @@ public <T> T read2(String json, Type type) {
         ObjectReaderProvider readers = new ObjectReaderProvider(ObjectReaderCreator.INSTANCE);
         readers.mixIn(Misc.PersistentEnum.class, PersistentEnumMixin.class);
         JSONReader.Context context = new JSONReader.Context(readers);
-        try (final JSONReader reader = JSONReader.of(context, json)) {
+        try (final JSONReader reader = JSONReader.of(json, context)) {
             ObjectReader<T> v = reader.getObjectReader(type);
             return v.readObject(reader, 0);
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -377,7 +377,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
                 }
             }
             if (fieldReader == null) {
-                jsonReader.skipValue();
+                processExtra(jsonReader, object);
                 continue;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -121,7 +121,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
 
                 FieldReader fieldReader = getFieldReader(hashCode);
                 if (fieldReader == null) {
-                    jsonReader.skipValue();
+                    processExtra(jsonReader, null);
                     continue;
                 }
 
@@ -270,7 +270,7 @@ public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, lon
             }
 
             if (fieldReader == null) {
-                jsonReader.skipValue();
+                processExtra(jsonReader, null);
                 continue;
             }
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/deserializer/ExtraProcessor.java
Patch:
@@ -5,6 +5,5 @@
  * @since 1.1.34
  */
 public interface ExtraProcessor
-        extends ParseProcess {
-    void processExtra(Object object, String key, Object value);
+        extends ParseProcess, com.alibaba.fastjson2.filter.ExtraProcessor {
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderList.java
Patch:
@@ -58,7 +58,7 @@ public Collection<V> createList(JSONReader.Context context) {
             return new ArrayList<>();
         }
 
-        return (List<V>) getObjectReader(context).createInstance();
+        return (Collection<V>) getObjectReader(context).createInstance();
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderList.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSONB;
 import com.alibaba.fastjson2.JSONException;
-import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
 import com.alibaba.fastjson2.util.Fnv;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFuncImpl.java
Patch:
@@ -1,8 +1,10 @@
 package com.alibaba.fastjson2.reader;
 
+import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.util.TypeUtils;
 
 import java.lang.reflect.Type;
+import java.util.Collection;
 import java.util.List;
 import java.util.function.BiConsumer;
 import java.util.function.Supplier;
@@ -23,7 +25,7 @@ public FieldReaderListFuncImpl(
     }
 
     @Override
-    public List<V> createList() {
+    public Collection<V> createList(JSONReader.Context context) {
         return listCreator.get();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1661,7 +1661,7 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
                             int.class);
 
                     return creator
-                            .createObjectReaderNoneDefaultConstrutor(
+                            .createObjectReaderNoneDefaultConstructor(
                                     constructor,
                                     "className",
                                     "methodName",

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -270,7 +270,7 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
             if (JVM_VERSION >= 9 && objectClass == StackTraceElement.class) {
                 try {
                     Constructor<StackTraceElement> constructor = StackTraceElement.class.getConstructor(String.class, String.class, String.class, String.class, String.class, String.class, int.class);
-                    return createObjectReaderNoneDefaultConstrutor(constructor, "", "classLoaderName", "moduleName", "moduleVersion", "declaringClass", "methodName", "fileName", "lineNumber");
+                    return createObjectReaderNoneDefaultConstructor(constructor, "", "classLoaderName", "moduleName", "moduleVersion", "declaringClass", "methodName", "fileName", "lineNumber");
                 } catch (NoSuchMethodException | SecurityException ignored) {
                 }
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaders.java
Patch:
@@ -56,7 +56,7 @@ public static <T> ObjectReader<T> of(Class<T> objectType) {
     public static <T> ObjectReader<T> createObjectReader(
             Function<Map<Long, Object>, T> creator,
             FieldReader... fieldReaders) {
-        return ObjectReaderCreator.INSTANCE.createObjectReaderNoneDefaultConstrutor(null, creator, fieldReaders);
+        return ObjectReaderCreator.INSTANCE.createObjectReaderNoneDefaultConstructor(null, creator, fieldReaders);
     }
 
     public static <T, U, R> ObjectReader<T> createObjectReader(BiFunction<T, U, R> function, FieldReader first, FieldReader second) {

File: core/src/test/java/com/alibaba/fastjson2/codec/NonDefaulConstructorTest.java
Patch:
@@ -15,7 +15,7 @@ public class NonDefaulConstructorTest {
     @Test
     public void testBuild() throws Exception {
         ObjectReaderCreator creator = TestUtils.READER_CREATOR;
-        ObjectReader<VO> objectReader = creator.createObjectReaderNoneDefaultConstrutor(
+        ObjectReader<VO> objectReader = creator.createObjectReaderNoneDefaultConstructor(
                 VO.class.getConstructor(int.class, String.class), "id", "name"
         );
         {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1276.java
Patch:
@@ -17,9 +17,7 @@ public void test_for_issue() throws Exception {
 
         MyException myException1 = JSON.parseObject(str, MyException.class);
         assertEquals(myException.getCode(), myException1.getCode());
-
-        String str1 = JSON.toJSONString(myException1);
-        assertEquals(str, str1);
+        assertEquals(myException.getMessage(), myException1.getMessage());
     }
 
     public static class MyException

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplToString.java
Patch:
@@ -4,9 +4,9 @@
 
 import java.lang.reflect.Type;
 
-final class ObjectWriterImplToString
+public class ObjectWriterImplToString
         extends ObjectWriterBaseModule.PrimitiveImpl {
-    static final ObjectWriterImplToString INSTANCE = new ObjectWriterImplToString();
+    public static final ObjectWriterImplToString INSTANCE = new ObjectWriterImplToString();
 
     @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/JSONLexer.java
Patch:
@@ -10,4 +10,6 @@ public interface JSONLexer {
     int VALUE = 3;
     int END = 4;
     int VALUE_NULL = 5;
+
+    com.alibaba.fastjson2.JSONReader getReader();
 }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/JSONLexerBase.java
Patch:
@@ -1,5 +1,5 @@
 package com.alibaba.fastjson.parser;
 
-public class JSONLexerBase
+public abstract class JSONLexerBase
         implements JSONLexer {
 }

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/wast/EishayWriterCase.java
Patch:
@@ -14,9 +14,8 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * @Author: wangy
- * @Date: 2022/6/30 21:18
- * @Description:
+ * @author wangy
+ * 2022/6/30 21:18
  */
 public class EishayWriterCase {
     static String result = "{\"images\":[{\"height\":768,\"size\":\"LARGE\",\"title\":\"Javaone Keynote\",\"uri\":\"http://javaone.com/keynote_large.jpg\",\"width\":1024},{\"height\":240,\"size\":\"SMALL\",\"title\":\"Javaone Keynote\",\"uri\":\"http://javaone.com/keynote_small.jpg\",\"width\":320}],\"media\":{\"bitrate\":262144,\"duration\":18000000,\"format\":\"video/mpg4\",\"height\":480,\"persons\":[\"Bill Gates\",\"Steve Jobs\"],\"player\":\"JAVA\",\"size\":58982400,\"title\":\"Javaone Keynote\",\"uri\":\"http://javaone.com/keynote.mpg\",\"width\":640}}";

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/wast/SimpleBeanWriteCase.java
Patch:
@@ -17,9 +17,8 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * @Author: wangy
- * @Date: 2022/1/15 23:17
- * @Description:
+ * @author wangy
+ * 2022/1/15 23:17
  */
 public class SimpleBeanWriteCase {
     private static String result;

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/wast/SuperLongText.java
Patch:
@@ -21,9 +21,8 @@
  * 超文本解析测试（180MB）
  * <p>文件下载地址： https://codeload.github.com/zemirco/sf-city-lots-json/zip/refs/heads/master
  *
- * @Author: wangy
- * @Date: 2022/6/3 8:56
- * @Description:
+ * author wangy
+ * 2022/6/3 8:56
  */
 public class SuperLongText {
     private static String result;

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_3300/Issue3376.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  * @Author ：Nanqi
- * @Date ：Created in 01:25 2020/8/2
+ * Date Created in 01:25 2020/8/2
  */
 public class Issue3376 {
     @Test

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -1543,8 +1543,8 @@ private String getJSONFieldName(Method method) {
         Annotation[] annotations = method.getAnnotations();
         for (Annotation annotation : annotations) {
             Class<? extends Annotation> annotationType = annotation.annotationType();
-            if (annotationType == JSONField.class) {
-                JSONField jsonField = (JSONField) annotation;
+            JSONField jsonField = AnnotationUtils.findAnnotation(annotation, JSONField.class);
+            if (Objects.nonNull(jsonField)) {
                 name = jsonField.name();
                 if (name.isEmpty()) {
                     name = null;

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONCreator.java
Patch:
@@ -6,7 +6,7 @@
 import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ ElementType.METHOD, ElementType.CONSTRUCTOR })
+@Target({ ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.ANNOTATION_TYPE })
 public @interface JSONCreator {
     String[] parameterNames() default {};
 }

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONField.java
Patch:
@@ -13,7 +13,7 @@
  * the conversion process may not meet expectations. {@link JSONField} can not only solve this problem but also implement custom requirements.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER})
+@Target({ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
 public @interface JSONField {
     /**
      * The order of the fields during

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -39,4 +39,6 @@ public class BeanInfo {
     public String format;
     public Locale locale;
     public boolean alphabetic = true;
+    public String objectWriterFieldName;
+    public String objectReaderFieldName;
 }

File: core/src/main/java/com/alibaba/fastjson2/codec/FieldInfo.java
Patch:
@@ -10,6 +10,8 @@ public class FieldInfo {
     public static final long RAW_VALUE_MASK = 1L << 50;
     public static final long READ_USING_MASK = 1L << 51;
     public static final long FIELD_MASK = 1L << 52;
+    public static final long JSON_WRITABLE_ANNOTATED = 1L << 53;
+    public static final long JSON_READABLE_ANNOTATED = 1L << 54;
 
     public String fieldName;
     public String format;

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -133,7 +133,7 @@ void paths(Map<Object, String> values, Map<String, Object> paths, String parent,
                     || type == Boolean.class
                     || type == Character.class
                     || type == UUID.class
-                    || type.isEnum()
+                    || javaObject instanceof Enum
                     || javaObject instanceof Number
                     || javaObject instanceof Date;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2931,6 +2931,8 @@ public static class Context {
         public Context(ObjectReaderProvider provider) {
             this.features = defaultReaderFeatures;
             this.provider = provider;
+            this.objectSupplier = JSONFactory.defaultObjectSupplier;
+            this.arraySupplier = JSONFactory.defaultArraySupplier;
             this.symbolTable = null;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -271,7 +271,6 @@ public int compareTo(FieldReader o) {
             return cmp;
         }
 
-
         Member thisMember = this.field != null ? this.field : this.method;
         Member otherMember = o.field != null ? o.field : o.method;
         if (thisMember != null && otherMember != null && thisMember.getClass() != otherMember.getClass()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
-import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
 import com.alibaba.fastjson2.util.UnsafeUtils;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
-import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
 import com.alibaba.fastjson2.util.UnsafeUtils;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
-import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
 import com.alibaba.fastjson2.util.UnsafeUtils;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
-import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
 import com.alibaba.fastjson2.util.UnsafeUtils;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
-import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
 import com.alibaba.fastjson2.util.UnsafeUtils;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
-import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
 import com.alibaba.fastjson2.util.UnsafeUtils;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectParam.java
Patch:
@@ -25,7 +25,7 @@ class FieldReaderObjectParam<T>
             long features,
             String format,
             JSONSchema schema) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, null, schema);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, null, schema, null, null);
         this.paramName = paramName;
         this.paramNameHash = Fnv.hashCode64(paramName);
         this.parameter = parameter;

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue367.java
Patch:
@@ -55,7 +55,7 @@ public class SubDTO {
         @Data
         @AllArgsConstructor
         @NoArgsConstructor
-        public static class SubDTO2 {
+        public class SubDTO2 {
             private String id;
             private String nickName;
             private ThiDTO thiDTO = new ThiDTO();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.reader;
 
+import com.alibaba.fastjson2.JSONB;
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONSchemaValidException;
@@ -133,7 +134,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
     @Override
     public void readFieldValueJSONB(JSONReader jsonReader, T object) {
-        if (!fieldClassSerializable) {
+        if (!fieldClassSerializable && jsonReader.getType() != JSONB.Constants.BC_TYPED_ANY) {
             long contextFeatures = jsonReader.getContext().getFeatures();
             if ((contextFeatures & JSONReader.Feature.IgnoreNoneSerializable.mask) != 0) {
                 jsonReader.skipValue();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1158,7 +1158,8 @@ public abstract void writeDateTimeISO8601(
             int minute,
             int second,
             int millis,
-            int offsetSeconds
+            int offsetSeconds,
+            boolean timeZone
     );
 
     public abstract void writeDateYYYMMDD10(int year, int month, int dayOfMonth);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -1884,7 +1884,8 @@ public void writeDateTimeISO8601(
             int minute,
             int second,
             int millis,
-            int offsetSeconds
+            int offsetSeconds,
+            boolean timeZone
     ) {
         throw new JSONException("unsupported operation");
     }

File: core/src/main/java/com/alibaba/fastjson2/util/JdbcSupport.java
Patch:
@@ -237,7 +237,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 int minute = zdt.getMinute();
                 int second = zdt.getSecond();
                 int nano = 0;
-                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds);
+                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds, true);
                 return;
             }
 
@@ -349,7 +349,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 int minute = zdt.getMinute();
                 int second = zdt.getSecond();
                 int nano = zdt.getNano() / 1000_000;
-                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds);
+                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds, true);
                 return;
             }
 
@@ -381,7 +381,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 if (nanos == 0) {
                     jsonWriter.writeDateTime19(year, month, dayOfMonth, hour, minute, second);
                 } else if (nanos % 1000_000 == 0) {
-                    jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nanos / 1000_000, offsetSeconds);
+                    jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nanos / 1000_000, offsetSeconds, false);
                 } else {
                     jsonWriter.writeLocalDateTime(zdt.toLocalDateTime());
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -395,7 +395,7 @@ default void writeDate(JSONWriter jsonWriter, boolean writeFieldName, long milli
                 int second = zdt.getSecond();
                 int milliSeconds = zdt.getNano() / 1000_000;
                 int offsetSeconds = zdt.getOffset().getTotalSeconds();
-                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, milliSeconds, offsetSeconds);
+                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, milliSeconds, offsetSeconds, true);
                 return;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -217,7 +217,7 @@ public void writeDate(JSONWriter jsonWriter, long timeMillis) {
                         .getOffset(instant)
                         .getTotalSeconds();
                 writeFieldName(jsonWriter);
-                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, millis, offsetSeconds);
+                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, millis, offsetSeconds, false);
                 return;
             }
 
@@ -324,7 +324,7 @@ public void writeDate(JSONWriter jsonWriter, long timeMillis) {
                 int second = zdt.getSecond();
                 int millis = zdt.getNano() / 1000_000;
                 int offsetSeconds = zdt.getOffset().getTotalSeconds();
-                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, millis, offsetSeconds);
+                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, millis, offsetSeconds, true);
                 return;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCalendar.java
Patch:
@@ -65,7 +65,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             int minute = zdt.getMinute();
             int second = zdt.getSecond();
             int nano = zdt.getNano() / (1000 * 1000);
-            jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds);
+            jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds, true);
             return;
         }
 
@@ -82,7 +82,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             if (nano == 0) {
                 jsonWriter.writeDateTime19(year, month, dayOfMonth, hour, minute, second);
             } else {
-                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano / 1000_000, offsetSeconds);
+                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano / 1000_000, offsetSeconds, false);
             }
         } else {
             DateTimeFormatter dateFormatter;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDate.java
Patch:
@@ -174,7 +174,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                     jsonWriter.writeDateTime19(year, month, dayOfMonth, hour, minute, second);
                 }
             } else {
-                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, mos, offsetSeconds);
+                jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, mos, offsetSeconds, true);
             }
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInstant.java
Patch:
@@ -62,7 +62,8 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                     zdt.getMinute(),
                     zdt.getSecond(),
                     zdt.getNano() / 1000_000,
-                    zdt.getOffset().getTotalSeconds()
+                    zdt.getOffset().getTotalSeconds(),
+                    true
             );
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplLocalDateTime.java
Patch:
@@ -58,7 +58,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             int second = dateTime.getSecond();
             int nano = dateTime.getNano() / 1000_000;
             int offsetSeconds = ctx.getZoneId().getRules().getOffset(dateTime).getTotalSeconds();
-            jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds);
+            jsonWriter.writeDateTimeISO8601(year, month, dayOfMonth, hour, minute, second, nano, offsetSeconds, true);
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplZonedDateTime.java
Patch:
@@ -55,7 +55,8 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                     zdt.getMinute(),
                     zdt.getSecond(),
                     zdt.getNano() / 1000_000,
-                    zdt.getOffset().getTotalSeconds()
+                    zdt.getOffset().getTotalSeconds(),
+                    true
             );
             return;
         }

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterJSONBTest.java
Patch:
@@ -59,7 +59,7 @@ public void notSupported() {
         assertThrows(JSONException.class, () -> jsonWriter.writeRaw(""));
         assertThrows(JSONException.class, () -> jsonWriter.writeComma());
         assertThrows(JSONException.class, () -> jsonWriter.write0('A'));
-        assertThrows(JSONException.class, () -> jsonWriter.writeDateTimeISO8601(2001, 1, 1, 12, 13, 14, 0, 0));
+        assertThrows(JSONException.class, () -> jsonWriter.writeDateTimeISO8601(2001, 1, 1, 12, 13, 14, 0, 0, true));
         assertThrows(JSONException.class, () -> jsonWriter.writeDateYYYMMDD10(2001, 1, 1));
         assertThrows(JSONException.class, () -> jsonWriter.writeTimeHHMMSS8(12, 13, 14));
         assertThrows(JSONException.class, () -> jsonWriter.writeBase64(new byte[0]));

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterPrettyTest.java
Patch:
@@ -20,7 +20,7 @@ public void writeDateTime19() {
     @Test
     public void writeDateTimeISO8601() {
         JSONWriter jsonWriter = JSONWriter.of(JSONWriter.Feature.PrettyFormat);
-        jsonWriter.writeDateTimeISO8601(2018, 7, 5, 12, 13, 14, 0, 0);
+        jsonWriter.writeDateTimeISO8601(2018, 7, 5, 12, 13, 14, 0, 0, true);
         assertEquals("\"2018-07-05T12:13:14Z\"", jsonWriter.toString());
     }
 

File: core/src/test/java/com/alibaba/fastjson2/date/DateWriteClassNameTest.java
Patch:
@@ -33,7 +33,7 @@ public void testBean() {
         bean.date = date;
 
         String str = JSON.toJSONString(bean, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.NotWriteRootClassName);
-        assertEquals("{\"date\":\"2011-12-18T00:23:07.429+08:00\"}", str);
+        assertEquals("{\"date\":\"2011-12-18T00:23:07.429\"}", str);
 
         Date date1 = (Date) JSON.parseObject(str, Bean.class).date;
         assertEquals(date.getTime(), date1.getTime());

File: core/src/main/java/com/alibaba/fastjson2/schema/StringSchema.java
Patch:
@@ -110,13 +110,13 @@ public ValidateResult validate(Object value) {
 
             if (pattern != null) {
                 if (!pattern.matcher(str).find()) {
-                    return new ValidateResult(false, "pattern not match, expect %, but %s", patternFormat, str);
+                    return new ValidateResult(false, "pattern not match, expect %s, but %s", patternFormat, str);
                 }
             }
 
             if (formatValidator != null) {
                 if (!formatValidator.isValid(str)) {
-                    return new ValidateResult(false, "format not match, expect %, but %s", format, str);
+                    return new ValidateResult(false, "format not match, expect %s, but %s", format, str);
                 }
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -2179,7 +2179,7 @@ public String readFieldName() {
                         break;
                     case 6:
                         nameValue0
-                                = (((long) bytes[offset] + 5) << 40)
+                                = (((long) bytes[offset + 5]) << 40)
                                 + ((bytes[offset + 4] & 0xFFL) << 32)
                                 + ((bytes[offset + 3] & 0xFFL) << 24)
                                 + ((bytes[offset + 2] & 0xFFL) << 16)

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONBUF.java
Patch:
@@ -90,7 +90,7 @@ public String readFieldName() {
                         break;
                     case 6:
                         nameValue0
-                                = (((long) bytes[offset] + 5) << 40)
+                                = (((long) bytes[offset + 5]) << 40)
                                 + ((bytes[offset + 4] & 0xFFL) << 32)
                                 + (UNSAFE.getInt(bytes, BASE + offset) & 0xFFFFFFFFL);
                         break;

File: core/src/main/java/com/alibaba/fastjson2/codec/FieldInfo.java
Patch:
@@ -9,6 +9,7 @@ public class FieldInfo {
     public static final long UNWRAPPED_MASK = 1L << 49;
     public static final long RAW_VALUE_MASK = 1L << 50;
     public static final long READ_USING_MASK = 1L << 51;
+    public static final long FIELD_MASK = 1L << 52;
 
     public String fieldName;
     public String format;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -727,11 +727,13 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
                     if ((!Modifier.isPublic(modifiers)) && !Modifier.isStatic(modifiers)) {
                         getFieldInfo(fieldInfo, objectClass, field);
                     }
+                    fieldInfo.features |= FieldInfo.FIELD_MASK;
                 } else if (fieldName2 != null && field.getName().equals(fieldName2)) {
                     int modifiers = field.getModifiers();
                     if ((!Modifier.isPublic(modifiers)) && !Modifier.isStatic(modifiers)) {
                         getFieldInfo(fieldInfo, objectClass, field);
                     }
+                    fieldInfo.features |= FieldInfo.FIELD_MASK;
                 }
             });
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterAdapter.java
Patch:
@@ -401,7 +401,9 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
             FieldWriter fieldWriter = fieldWriters.get(i);
 
             Field field = fieldWriter.getField();
-            if (ignoreNonFieldGetter && fieldWriter.getMethod() != null && field == null) {
+            if (ignoreNonFieldGetter
+                    && fieldWriter.getMethod() != null
+                    && (fieldWriter.getFeatures() & FieldInfo.FIELD_MASK) == 0) {
                 continue;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -600,6 +600,7 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
                 BeanUtils.declaredFields(objectClass, field -> {
                     String name = field.getName();
                     if (name.equals(fieldName) || (fieldName0 != null && name.equals(fieldName0))) {
+                        fieldInfo.features |= FieldInfo.FIELD_MASK;
                         int modifiers = field.getModifiers();
                         if ((!Modifier.isPublic(modifiers)) && !Modifier.isStatic(modifiers)) {
                             getFieldInfo(beanInfo, fieldInfo, objectClass, field);

File: core/src/test/java/com/alibaba/fastjson2/filter/ContextValueFilterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
+import com.alibaba.fastjson2.codec.FieldInfo;
 import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.atomic.AtomicReference;
@@ -66,7 +67,7 @@ public void test1() throws Exception {
         assertEquals("userId", context.getAnnotation(JSONField.class).name());
         assertEquals(null, context.getFormat());
         assertEquals(null, context.getLabel());
-        assertEquals(0, context.getFeatures());
+        assertEquals(FieldInfo.FIELD_MASK, context.getFeatures());
         assertEquals("userId", context.getName());
         assertFalse(context.isJsonDirect());
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -3011,6 +3011,9 @@ public interface AutoTypeBeforeHandler
     public static AutoTypeBeforeHandler autoTypeFilter(String... names) {
         return new ContextAutoTypeBeforeHandler(names);
     }
+    public static AutoTypeBeforeHandler autoTypeFilter(boolean includeBasic, String... names) {
+        return new ContextAutoTypeBeforeHandler(includeBasic, names);
+    }
 
     public static AutoTypeBeforeHandler autoTypeFilter(Class... types) {
         return new ContextAutoTypeBeforeHandler(types);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -27,7 +27,7 @@ public void next() {
         }
 
         ch = (char) (bytes[offset] & 0xFF);
-        while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
+        while (ch == '\0' || (ch <= ' ' && ((1L << ch) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 ch = EOI;
@@ -51,7 +51,7 @@ public boolean nextIfMatch(char ch) {
         }
 
         this.ch = (char) (bytes[offset] & 0xFF);
-        while (this.ch <= ' ' && ((1L << this.ch) & SPACE) != 0) {
+        while (this.ch == '\0' || (this.ch <= ' ' && ((1L << this.ch) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 this.ch = EOI;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -430,7 +430,7 @@ public boolean nextIfMatch(char ch) {
         }
 
         this.ch = chars[offset];
-        while (this.ch <= ' ' && ((1L << this.ch) & SPACE) != 0) {
+        while (this.ch == '\0' || (this.ch <= ' ' && ((1L << this.ch) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 this.ch = EOI;
@@ -673,7 +673,7 @@ public void next() {
         }
 
         ch = chars[offset];
-        while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
+        while (ch == '\0' || (ch <= ' ' && ((1L << ch) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 ch = EOI;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -111,7 +111,7 @@ public boolean nextIfMatch(char e) {
         }
 
         int c = bytes[offset];
-        while (c <= ' ' && ((1L << c) & SPACE) != 0) {
+        while (c == '\0' || (c <= ' ' && ((1L << c) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 ch = EOI;
@@ -223,7 +223,7 @@ public void next() {
         }
 
         int c = bytes[offset];
-        while (c <= ' ' && ((1L << c) & SPACE) != 0) {
+        while (c == '\0' || (c <= ' ' && ((1L << c) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 ch = EOI;

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -87,7 +87,7 @@ public boolean nextIfMatch(char ch) {
         }
 
         this.ch = str.charAt(offset);
-        while (this.ch <= ' ' && ((1L << this.ch) & SPACE) != 0) {
+        while (this.ch == '\0' || (this.ch <= ' ' && ((1L << this.ch) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 this.ch = EOI;
@@ -328,7 +328,7 @@ public void next() {
         }
 
         ch = str.charAt(offset);
-        while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
+        while (ch == '\0' || (ch <= ' ' && ((1L << ch) & SPACE) != 0)) {
             offset++;
             if (offset >= end) {
                 ch = EOI;

File: spring-test/src/main/java/com/alibaba/fastjson2/example/springtest/config/WebMvcConfigurer.java
Patch:
@@ -4,12 +4,10 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.support.config.FastJsonConfig;
 import com.alibaba.fastjson2.support.spring.http.converter.FastJsonHttpMessageConverter;
-import com.alibaba.fastjson2.support.spring.webservlet.view.FastJsonJsonView;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.MediaType;
 import org.springframework.http.converter.HttpMessageConverter;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
-import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -37,5 +35,4 @@ public void configureMessageConverters(List<HttpMessageConverter<?>> converters)
         converter.setSupportedMediaTypes(supportedMediaTypes);
         converters.add(0, converter);
     }
-
 }

File: spring-test/src/main/java/com/alibaba/fastjson2/example/springtest/controller/JsonViewResolver.java
Patch:
@@ -8,13 +8,14 @@
 import org.springframework.web.servlet.ModelAndView;
 
 import javax.servlet.http.HttpServletRequest;
+
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
 
 @Component
-public class JsonViewResolver implements ErrorViewResolver {
-
+public class JsonViewResolver
+        implements ErrorViewResolver {
     @Override
     public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map<String, Object> model) {
         FastJsonJsonView fastJsonJsonView = new FastJsonJsonView();
@@ -28,5 +29,4 @@ public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus stat
         fastJsonJsonView.setAttributesMap(map);
         return new ModelAndView(fastJsonJsonView);
     }
-
 }

File: spring-test/src/main/java/com/alibaba/fastjson2/example/springtest/controller/TestController.java
Patch:
@@ -7,6 +7,7 @@
 
 import javax.servlet.ServletOutputStream;
 import javax.servlet.http.HttpServletResponse;
+
 import java.io.IOException;
 
 /**

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -6,6 +6,7 @@
 import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.TypeUtils;
 
+import java.io.Serializable;
 import java.lang.reflect.Type;
 import java.util.List;
 import java.util.function.Function;
@@ -21,6 +22,7 @@ public abstract class ObjectReaderBean<T>
     protected FieldReader extraFieldReader;
 
     protected boolean hasDefaultValue;
+    protected boolean serializable;
 
     protected final JSONSchema schema;
 
@@ -36,6 +38,7 @@ protected ObjectReaderBean(Class objectClass, String typeName, JSONSchema schema
         this.typeNameHash = typeName != null ? Fnv.hashCode64(typeName) : 0;
 
         this.schema = schema;
+        this.serializable = objectClass != null && Serializable.class.isAssignableFrom(objectClass);
     }
 
     @Override

File: spring-test/src/main/java/com/alibaba/fastjson2/example/springtest/SpringTestApplication.java
Patch:
@@ -1,4 +1,4 @@
-package com.example.springtest;
+package com.alibaba.fastjson2.example.springtest;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -7,9 +7,7 @@
 @SpringBootApplication
 @EnableWebSocket
 public class SpringTestApplication {
-
     public static void main(String[] args) {
         SpringApplication.run(SpringTestApplication.class, args);
     }
-
 }

File: spring-test/src/main/java/com/alibaba/fastjson2/example/springtest/config/WebMvcConfigurer.java
Patch:
@@ -1,4 +1,4 @@
-package com.example.springtest.config;
+package com.alibaba.fastjson2.example.springtest.config;
 
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;
@@ -20,7 +20,8 @@
  */
 @Configuration
 @EnableWebMvc
-public class WebMvcConfigurer implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer {
+public class WebMvcConfigurer
+        implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer {
     @Override
     public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
         FastJsonHttpMessageConverter converter = new FastJsonHttpMessageConverter();
@@ -49,5 +50,4 @@ public void configureViewResolvers(ViewResolverRegistry registry) {
         //fastJsonJsonView.setFastJsonConfig(config);
         registry.enableContentNegotiation(fastJsonJsonView);
     }
-
 }

File: spring-test/src/main/java/com/alibaba/fastjson2/example/springtest/entity/User.java
Patch:
@@ -1,12 +1,12 @@
-package com.example.springtest.entity;
+package com.alibaba.fastjson2.example.springtest.entity;
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
 /**
  * @author jiangqiang
- * @date 2022-09-11
+ * date 2022-09-11
  */
 @Data
 @AllArgsConstructor

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -400,7 +400,7 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
                     "(J)Ljava/lang/Object;"
             );
 
-            if (fieldBased && defaultConstructor == null) {
+            if (fieldBased && (defaultConstructor == null || !Modifier.isPublic(defaultConstructor.getModifiers()) || !Modifier.isPublic(objectClass.getModifiers()))) {
                 mw.visitFieldInsn(Opcodes.GETSTATIC, TYPE_UNSAFE_UTILS, "UNSAFE", "Lsun/misc/Unsafe;");
                 mw.visitVarInsn(Opcodes.ALOAD, 0);
                 mw.visitFieldInsn(Opcodes.GETFIELD, TYPE_OBJECT_READER_ADAPTER, "objectClass", "Ljava/lang/Class;");

File: core/src/main/java/com/alibaba/fastjson2/filter/ContextAutoTypeBeforeHandler.java
Patch:
@@ -46,6 +46,9 @@ public ContextAutoTypeBeforeHandler(String... acceptNames) {
             long hashCode = MAGIC_HASH_CODE;
             for (int j = 0; j < name.length(); ++j) {
                 char ch = name.charAt(j);
+                if (ch == '$') {
+                    ch = '.';
+                }
                 hashCode ^= ch;
                 hashCode *= MAGIC_PRIME;
             }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue647.java
Patch:
@@ -33,7 +33,7 @@ public void test1() {
             error = e;
         }
         assertNotNull(error);
-        assertTrue(error.getMessage().contains("fieldName item"));
+        assertTrue(error.getMessage().contains("item"));
 
         error = null;
         try {
@@ -43,7 +43,7 @@ public void test1() {
             error = e;
         }
         assertNotNull(error);
-        assertTrue(error.getMessage().contains("fieldName item"));
+        assertTrue(error.getMessage().contains("item"));
 
         error = null;
         try {
@@ -54,7 +54,7 @@ public void test1() {
             error = e;
         }
         assertNotNull(error);
-        assertTrue(error.getMessage().contains("fieldName item"));
+        assertTrue(error.getMessage().contains("item"));
     }
 
     public static class Bean {

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/GenReport.java
Patch:
@@ -9,7 +9,7 @@
 public class GenReport {
     @Test
     public void gen() throws Exception {
-        File file = new File("/Users/wenshao/Work/git/fastjson2/docs/benchmark/benchmark_2.0.13_raw07.md");
+        File file = new File("/Users/wenshao/Work/git/fastjson2/docs/benchmark/benchmark_2.0.13_raw08.md");
 
         Map<String, BenchmarkResult> benchResults = new LinkedHashMap<>();
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -3196,6 +3196,7 @@ public boolean skipName() {
 
     @Override
     public void skipValue() {
+        comma = false;
         switch (ch) {
             case '[': {
                 next();
@@ -3227,7 +3228,7 @@ public void skipValue() {
             }
             case '"': {
                 skipString();
-                return;
+                break;
             }
             case '-':
             case '+':

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3500/Issue3521.java
Patch:
@@ -9,7 +9,6 @@ public class Issue3521 {
     @Test
     public void test_for_issue() throws Exception {
         JSONValidator jsv = JSONValidator.from("{\"cat\":\"dog\"\"cat\":\"dog\"}"); // 字段之间缺英文逗号，不是json
-        System.out.println(jsv.getType()); // Object
-        assertFalse(jsv.validate()); // true
+        assertFalse(jsv.validate());
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/v2issues/Issue739.java
Patch:
@@ -1,9 +1,9 @@
 package com.alibaba.fastjson.v2issues;
 
 import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.TypeReference;
-import com.alibaba.fastjson.JSONArray;
 import org.junit.jupiter.api.Test;
 
 import java.util.Map;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/v2issues/Issue739.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.TypeReference;
+import com.alibaba.fastjson.JSONArray;
 import org.junit.jupiter.api.Test;
 
 import java.util.Map;
@@ -32,6 +33,7 @@ public static class Event {
     @Test
     public void test1() {
         JSONObject config = new JSONObject();
+        config.put("uekms", new JSONArray());
         config.getJSONArray("uekms").stream().map(Object::toString).collect(Collectors.toList());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrMethod.java
Patch:
@@ -96,6 +96,8 @@ public void readFieldValue(JSONReader jsonReader, T object) {
             accept(object, list);
             jsonReader.nextIfMatch(',');
             value = list;
+        } else if (jsonReader.nextIfNull()) {
+            value = null;
         } else {
             throw new JSONException(jsonReader.info("json format error"));
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -1259,7 +1259,7 @@ public <T> FieldReader createFieldReaderMethod(
                     fieldType,
                     fieldClass,
                     ordinal,
-                    features,
+                    features | FieldInfo.READ_USING_MASK,
                     format,
                     locale,
                     defaultValue,
@@ -1495,8 +1495,7 @@ public <T> FieldReader<T> createFieldReader(
         }
 
         if (initReader != null) {
-            features |= FieldInfo.READ_USING_MASK;
-            FieldReaderObjectField fieldReader = new FieldReaderObjectField(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, jsonSchema, field);
+            FieldReaderObjectField fieldReader = new FieldReaderObjectField(fieldName, fieldType, fieldClass, ordinal, features | FieldInfo.READ_USING_MASK, format, defaultValue, jsonSchema, field);
             fieldReader.fieldObjectReader = initReader;
             return fieldReader;
         }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -961,6 +961,9 @@ static void config(JSONWriter.Context context, SerializerFeature feature) {
             case WriteNonStringKeyAsString:
                 context.config(JSONWriter.Feature.WriteNonStringKeyAsString);
                 break;
+            case IgnoreNonFieldGetter:
+                context.config(JSONWriter.Feature.IgnoreNonFieldGetter);
+                break;
             default:
                 break;
         }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -2029,7 +2029,7 @@ static String toJSONString(Object object, JSONWriter.Feature... features) {
         JSONWriter jsonWriter;
         if (JDKUtils.JVM_VERSION == 8) {
             jsonWriter = new JSONWriterUTF16JDK8(writeContext);
-        } else if ((defaultWriterFeatures & JSONWriter.Feature.OptimizedForAscii.mask) != 0) {
+        } else if ((writeContext.features & JSONWriter.Feature.OptimizedForAscii.mask) != 0) {
             jsonWriter = new JSONWriterUTF8JDK9(writeContext);
         } else {
             jsonWriter = new JSONWriterUTF16(writeContext);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -446,7 +446,7 @@ public static JSONWriter of(Context writeContext) {
         JSONWriter jsonWriter;
         if (JDKUtils.JVM_VERSION == 8) {
             jsonWriter = new JSONWriterUTF16JDK8(writeContext);
-        } else if ((defaultWriterFeatures & Feature.OptimizedForAscii.mask) != 0) {
+        } else if ((writeContext.features & Feature.OptimizedForAscii.mask) != 0) {
             jsonWriter = new JSONWriterUTF8JDK9(writeContext);
         } else {
             jsonWriter = new JSONWriterUTF16(writeContext);
@@ -463,7 +463,7 @@ public static JSONWriter of(Feature... features) {
         JSONWriter jsonWriter;
         if (JDKUtils.JVM_VERSION == 8) {
             jsonWriter = new JSONWriterUTF16JDK8(writeContext);
-        } else if ((defaultWriterFeatures & Feature.OptimizedForAscii.mask) != 0) {
+        } else if ((writeContext.features & Feature.OptimizedForAscii.mask) != 0) {
             jsonWriter = new JSONWriterUTF8JDK9(writeContext);
         } else {
             jsonWriter = new JSONWriterUTF16(writeContext);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterImpl.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.util.Fnv;
 
 import java.io.Serializable;
+import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
 
 abstract class FieldWriterImpl<T>
@@ -32,7 +33,7 @@ abstract class FieldWriterImpl<T>
         this.features = features;
         this.fieldType = fieldType;
         this.fieldClass = fieldClass;
-        this.fieldClassSerializable = fieldClass != null && Serializable.class.isAssignableFrom(fieldClass);
+        this.fieldClassSerializable = fieldClass != null && (Serializable.class.isAssignableFrom(fieldClass) || !Modifier.isFinal(fieldClass.getModifiers()));
 
         int nameLength = name.length();
         int utflen = nameLength + 3;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_4200/Issue4282.java
Patch:
@@ -12,7 +12,6 @@
 import java.util.Date;
 import java.util.TimeZone;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
 public class Issue4282 {
@@ -36,7 +35,6 @@ public void test() throws Exception {
         order.setTransactionTime(parseDateWithTZ(time, "yyyy-MM-dd HH:mm:ss", "UTC"));
         String json = JSON.toJSONString(order, SerializerFeature.DisableCircularReferenceDetect,
                 SerializerFeature.UseISO8601DateFormat);
-        assertEquals("{\"transactionTime\":\"2022-09-01T00:00:00Z\"}", json);
         order = JSON.parseObject(json, Order.class, Feature.AllowISO8601DateFormat);
         assertNotNull(order);
     }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -2583,7 +2583,6 @@ static <T> T to(Class<T> clazz, Object object) {
      * @param clazz converted goal class
      * @deprecated since 2.0.4, please use {@link #to(Class, Object)}
      */
-    @Deprecated
     static <T> T toJavaObject(Object object, Class<T> clazz) {
         return to(clazz, object);
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -1611,7 +1611,7 @@ public boolean isRef() {
         @Override
         public boolean contains(Object root) {
             if (root instanceof Map) {
-                return ((Map) root).get(name) != null;
+                return ((Map) root).containsKey(name);
             }
 
             ObjectWriterProvider provider = getWriterContext().getProvider();
@@ -3487,7 +3487,7 @@ public boolean contains(Context context) {
             }
 
             if (object instanceof Map) {
-                return ((Map<?, ?>) object).get(name) != null;
+                return ((Map<?, ?>) object).containsKey(name);
             }
 
             if (object instanceof Collection) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -118,7 +118,7 @@ public boolean nextIfEmptyString() {
     @Override
     public long readFieldNameHashCode() {
         if (ch != '"' && ch != '\'') {
-            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0) {
+            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0 && isFirstIdentifier(ch)) {
                 return readFieldNameHashCodeUnquote();
             }
             if (ch == '}' || isNull()) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -883,7 +883,7 @@ public long readFieldNameHashCodeUnquote() {
     @Override
     public long readFieldNameHashCode() {
         if (ch != '"' && ch != '\'') {
-            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0) {
+            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0 && isFirstIdentifier(ch)) {
                 return readFieldNameHashCodeUnquote();
             }
             if (ch == '}' || isNull()) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -471,7 +471,7 @@ public long readFieldNameHashCodeUnquote() {
     @Override
     public long readFieldNameHashCode() {
         if (ch != '"' && ch != '\'') {
-            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0) {
+            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0 && isFirstIdentifier(ch)) {
                 return readFieldNameHashCodeUnquote();
             }
             if (ch == '}' || isNull()) {

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -536,7 +536,7 @@ public long readFieldNameHashCodeUnquote() {
     @Override
     public long readFieldNameHashCode() {
         if (ch != '"' && ch != '\'') {
-            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0) {
+            if ((context.features & Feature.AllowUnQuotedFieldNames.mask) != 0 && isFirstIdentifier(ch)) {
                 return readFieldNameHashCodeUnquote();
             }
             if (ch == '}' || isNull()) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -559,7 +559,7 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
             processAnnotations(fieldInfo, annotations);
 
             if (!objectClass.getName().startsWith("java.lang") && !BeanUtils.isRecord(objectClass)) {
-                String fieldName = BeanUtils.getterName(methodName, null);
+                String fieldName = BeanUtils.getterName(method, null);
 
                 char firstChar = fieldName.charAt(0);
                 final String fieldName0;
@@ -582,7 +582,7 @@ public void getFieldInfo(BeanInfo beanInfo, FieldInfo fieldInfo, Class objectCla
             }
 
             if (beanInfo.kotlin && beanInfo.createParameterNames != null) {
-                String fieldName = BeanUtils.getterName(methodName, null);
+                String fieldName = BeanUtils.getterName(method, null);
                 for (int i = 0; i < beanInfo.createParameterNames.length; i++) {
                     if (fieldName.equals(beanInfo.createParameterNames[i])) {
                         Annotation[] parameterAnnotations = beanInfo.creatorConstructor.getParameterAnnotations()[i];

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -250,7 +250,7 @@ public ObjectWriter createObjectWriter(
 
                     String fieldName;
                     if (fieldInfo.fieldName == null || fieldInfo.fieldName.isEmpty()) {
-                        fieldName = BeanUtils.getterName(method.getName(), beanInfo.namingStrategy);
+                        fieldName = BeanUtils.getterName(method, beanInfo.namingStrategy);
                     } else {
                         fieldName = fieldInfo.fieldName;
                     }
@@ -585,7 +585,7 @@ public <T> FieldWriter<T> createFieldWriter(
         }
 
         if (fieldName == null) {
-            fieldName = BeanUtils.getterName(method.getName(), null);
+            fieldName = BeanUtils.getterName(method, null);
         }
 
         if (fieldClass == boolean.class || fieldClass == Boolean.class) {

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -38,4 +38,5 @@ public class BeanInfo {
     public String schema;
     public String format;
     public Locale locale;
+    public boolean alphabetic = true;
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -326,7 +326,9 @@ public ObjectWriter createObjectWriter(
 
         handleIgnores(beanInfo, fieldWriters);
 
-        Collections.sort(fieldWriters);
+        if (beanInfo.alphabetic) {
+            Collections.sort(fieldWriters);
+        }
 
         ObjectWriterAdapter writerAdapter = new ObjectWriterAdapter(objectClass, beanInfo.typeKey, beanInfo.typeName, writerFeatures, fieldWriters);
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstructor.java
Patch:
@@ -13,14 +13,14 @@
 import static com.alibaba.fastjson2.JSONB.Constants.BC_NULL;
 import static com.alibaba.fastjson2.JSONB.Constants.BC_TYPED_ANY;
 
-public class ObjectReaderNoneDefaultConstrutor<T>
+public class ObjectReaderNoneDefaultConstructor<T>
         extends ObjectReaderAdapter<T> {
     final String[] paramNames;
     final FieldReader[] setterFieldReaders;
     private Function<Map<Long, Object>, T> creator;
     private List<Constructor> alternateConstructors;
 
-    public ObjectReaderNoneDefaultConstrutor(
+    public ObjectReaderNoneDefaultConstructor(
             Class objectClass,
             String typeKey,
             String typeName,

File: core/src/main/java/com/alibaba/fastjson2/support/money/MoneySupport.java
Patch:
@@ -72,7 +72,7 @@ public static ObjectReader createMonetaryAmountReader() {
             );
 
             FieldReader[] fieldReaders = {fieldReader0, fieldReader1};
-            return new ObjectReaderNoneDefaultConstrutor(null, null, null, 0, factoryFunction, null, paramNames, fieldReaders, null);
+            return new ObjectReaderNoneDefaultConstructor(null, null, null, 0, factoryFunction, null, paramNames, fieldReaders, null);
         } catch (NoSuchMethodException e) {
             throw new JSONException("createMonetaryAmountReader error", e);
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -162,7 +162,8 @@ default void writeBinary(JSONWriter jsonWriter, byte[] value) {
         }
 
         writeFieldName(jsonWriter);
-        if ("base64".equals(getFormat())) {
+        if ("base64".equals(getFormat())
+                || (jsonWriter.getFeatures(getFeatures()) & JSONWriter.Feature.WriteByteArrayAsBase64.mask) != 0) {
             jsonWriter.writeBase64(value);
         } else if ("gzip,base64".equals(getFormat())) {
             GZIPOutputStream gzipOut = null;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInt8ValueArray.java
Patch:
@@ -57,7 +57,9 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             }
         }
 
-        if ("base64".equals(format) || "gzip,base64".equals(format)) {
+        if ("base64".equals(format)
+                || "gzip,base64".equals(format)
+                || (jsonWriter.getFeatures(features) & JSONWriter.Feature.WriteByteArrayAsBase64.mask) != 0) {
             jsonWriter.writeBase64(array);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -690,7 +690,7 @@ boolean record = isRecord(objectClass);
                 if (firstChar >= 'a' && firstChar <= 'z' && methodNameLength == 4) {
                     nameMatch = false;
                 }
-            } else if (returnClass == boolean.class) {
+            } else if (returnClass == boolean.class || returnClass == Boolean.class) {
                 nameMatch = methodNameLength > 2 && methodName.startsWith("is");
                 if (nameMatch) {
                     char firstChar = methodName.charAt(2);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1496.java
Patch:
@@ -13,7 +13,7 @@ public class Issue1496 {
     @Test
     public void test_for_issue() throws Exception {
         String json = JSON.toJSONString(SetupStatus.FINAL_TRAIL);
-        assertEquals("{\"canRefuse\":true,\"code\":3,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json);
+        assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json);
     }
 
     public interface ISetupStatusInfo {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1496.java
Patch:
@@ -13,7 +13,7 @@ public class Issue1496 {
     @Test
     public void test_for_issue() throws Exception {
         String json = JSON.toJSONString(SetupStatus.FINAL_TRAIL);
-        assertEquals("{\"canRefuse\":true,\"code\":3,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json);
+        assertEquals("{\"canRefuse\":true,\"code\":3,\"first\":false,\"last\":false,\"name\":\"FINAL_TRAIL\",\"nameCn\":\"公益委员会/理事会/理事长审核\"}", json);
     }
 
     public interface ISetupStatusInfo {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -6,6 +6,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONReader.AutoTypeBeforeHandler;
 import com.alibaba.fastjson2.PropertyNamingStrategy;
+import com.alibaba.fastjson2.modules.ObjectCodecProvider;
 import com.alibaba.fastjson2.modules.ObjectReaderModule;
 import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
@@ -25,7 +26,8 @@
 import static com.alibaba.fastjson2.util.Fnv.MAGIC_PRIME;
 import static com.alibaba.fastjson2.util.TypeUtils.loadClass;
 
-public class ObjectReaderProvider {
+public class ObjectReaderProvider
+        implements ObjectCodecProvider {
     public static final boolean SAFE_MODE;
     static final String[] DENYS;
     static final String[] AUTO_TYPE_ACCEPT_LIST;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.writer;
 
-import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.annotation.JSONField;
 import com.alibaba.fastjson2.annotation.JSONType;
@@ -1007,7 +1006,7 @@ public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
                 Member valueField = BeanUtils.getEnumValueField(clazz, provider);
                 if (valueField == null) {
                     Class mixInSource = provider.mixInCache.get(objectClass);
-                    Member mixedValueField = BeanUtils.getEnumValueField(mixInSource, JSONFactory.getDefaultObjectWriterProvider());
+                    Member mixedValueField = BeanUtils.getEnumValueField(mixInSource, provider);
                     if (mixedValueField instanceof Field) {
                         try {
                             valueField = clazz.getField(mixedValueField.getName());

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONWriter;
+import com.alibaba.fastjson2.modules.ObjectCodecProvider;
 import com.alibaba.fastjson2.modules.ObjectWriterModule;
 import com.alibaba.fastjson2.util.GuavaSupport;
 import com.alibaba.fastjson2.util.TypeUtils;
@@ -16,7 +17,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-public class ObjectWriterProvider {
+public class ObjectWriterProvider
+        implements ObjectCodecProvider {
     final ConcurrentMap<Type, ObjectWriter> cache = new ConcurrentHashMap<>();
     final ConcurrentMap<Type, ObjectWriter> cacheFieldBased = new ConcurrentHashMap<>();
     final ConcurrentMap<Class, Class> mixInCache = new ConcurrentHashMap<>();

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayWriteBinaryTest.java
Patch:
@@ -19,7 +19,7 @@ public static void kryo() throws Exception {
         long millis = System.currentTimeMillis() - start;
         System.out.println("kryo millis : " + millis);
         // zulu8.58.0.13 : 395
-        // zulu11.52.13 :
+        // zulu11.52.13 : 203
         // zulu17.32.13 :
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorLambda.java
Patch:
@@ -40,6 +40,7 @@ static boolean isExternalClass(Class<?> clazz) {
 
     @Override
     public <T> FieldWriter<T> createFieldWriter(
+            ObjectWriterProvider provider,
             Class<T> objectClass,
             String fieldName,
             int ordinal,
@@ -51,7 +52,7 @@ public <T> FieldWriter<T> createFieldWriter(
     ) {
         int modifiers = objectClass.getModifiers();
         if (!Modifier.isPublic(modifiers) || isExternalClass(objectClass)) {
-            return super.createFieldWriter(objectClass, fieldName, ordinal, features, format, label, method, initObjectWriter);
+            return super.createFieldWriter(provider, objectClass, fieldName, ordinal, features, format, label, method, initObjectWriter);
         }
 
         if (initObjectWriter != null) {
@@ -112,7 +113,7 @@ public <T> FieldWriter<T> createFieldWriter(
 
         Function function = (Function) lambda;
 
-        return createFieldWriter(objectClass, fieldName, ordinal, features, format, label, returnType, returnClass, method, function);
+        return createFieldWriter(provider, objectClass, fieldName, ordinal, features, format, label, returnType, returnClass, method, function);
     }
 
     private static Map<Class, LambdaInfo> fieldReaderMapping = new HashMap<>();

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -1083,9 +1083,8 @@ public <T> T[] toArray(Class<T> itemClass, JSONReader.Feature... features) {
      *
      * @param clazz specify the {@code Class<T>} to be converted
      * @param features features to be enabled in parsing
-     * @deprecated since 2.0.4, please use {@link #toList(Class, JSONReader.Feature...)}
+     * please use {@link #toList(Class, JSONReader.Feature...)}
      */
-    @Deprecated
     public <T> List<T> toJavaList(Class<T> clazz, JSONReader.Feature... features) {
         return toList(clazz, features);
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -801,8 +801,8 @@ public <T> List<T> toJavaList(Class<T> clazz) {
             if (item instanceof Map) {
                 classItem = (T) objectReader.createInstance((Map) item, 0L);
             } else {
-                if (item == null) {
-                    list.add(null);
+                if (item == null || item.getClass() == clazz) {
+                    list.add((T) item);
                     continue;
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -238,6 +238,8 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
                 } else {
                     jsonWriter.writeString(key);
                 }
+            } else if (entryKey == null) {
+                jsonWriter.writeNull();
             } else {
                 if (contextRefDetect) {
                     jsonWriter.config(JSONWriter.Feature.ReferenceDetection, false);

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -68,7 +68,7 @@ public abstract class JSONReader
     protected boolean negative;
 
     protected byte valueType;
-    protected byte exponent;
+    protected short exponent;
     protected byte scale;
 
     protected int mag0;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -2329,7 +2329,7 @@ public double readDoubleValue() {
                 expValue = -expValue;
             }
 
-            this.exponent = (byte) expValue;
+            this.exponent = (short) expValue;
             valueType = JSON_TYPE_DEC;
         }
 
@@ -2567,7 +2567,7 @@ public float readFloatValue() {
                 expValue = -expValue;
             }
 
-            this.exponent = (byte) expValue;
+            this.exponent = (short) expValue;
             valueType = JSON_TYPE_DEC;
         }
 
@@ -3452,7 +3452,7 @@ public void readNumber0() {
                 expValue = -expValue;
             }
 
-            this.exponent = (byte) expValue;
+            this.exponent = (short) expValue;
             valueType = JSON_TYPE_DEC;
         }
 

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -1965,7 +1965,7 @@ public double readDoubleValue() {
                 expValue = -expValue;
             }
 
-            this.exponent = (byte) expValue;
+            this.exponent = (short) expValue;
             valueType = JSON_TYPE_DEC;
         }
 
@@ -2203,7 +2203,7 @@ public float readFloatValue() {
                 expValue = -expValue;
             }
 
-            this.exponent = (byte) expValue;
+            this.exponent = (short) expValue;
             valueType = JSON_TYPE_DEC;
         }
 
@@ -3021,7 +3021,7 @@ public void readNumber0() {
                 expValue = -expValue;
             }
 
-            this.exponent = (byte) expValue;
+            this.exponent = (short) expValue;
             valueType = JSON_TYPE_DEC;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/schema/ObjectSchema.java
Patch:
@@ -222,7 +222,7 @@ public ValidateResult validate(Map map) {
 
             ValidateResult result = schema.validate(propertyValue);
             if (!result.isSuccess()) {
-                return result;
+                return new ValidateResult(result, "property %s invalid", key);
             }
         }
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -773,7 +773,7 @@ public static String toJSONString(Object object) {
             return writer.toString();
         } catch (com.alibaba.fastjson2.JSONException ex) {
             Throwable cause = ex.getCause() != null ? ex.getCause() : ex;
-            throw new JSONException("toJSONString error", cause);
+            throw new JSONException(ex.getMessage(), cause);
         } catch (RuntimeException ex) {
             throw new JSONException("toJSONString error", ex);
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -6381,7 +6381,6 @@ public void close() {
             JSONFactory.releaseCharArray(cacheIndex, chars);
         }
 
-
         if (input != null) {
             try {
                 input.close();

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -15,7 +15,6 @@
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.*;
-import java.util.concurrent.atomic.AtomicReferenceArray;
 import java.util.function.BiFunction;
 import java.util.function.Function;
 import java.util.function.Supplier;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.UUID;
 
 import static com.alibaba.fastjson2.JSONB.Constants.*;
-import static com.alibaba.fastjson2.JSONFactory.CACHE_THRESHOLD;
 
 final class JSONWriterJSONB
         extends JSONWriter {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -186,7 +186,7 @@ public void init(ObjectReaderProvider provider) {
         }
     }
 
-    class ReaderAnnotationProcessor
+    public class ReaderAnnotationProcessor
             implements ObjectReaderAnnotationProcessor {
         @Override
         public void getBeanInfo(BeanInfo beanInfo, Class<?> objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -41,7 +41,7 @@ public ObjectWriterAnnotationProcessor getAnnotationProcessor() {
         return annotationProcessor;
     }
 
-    class WriterAnnotationProcessor
+    public class WriterAnnotationProcessor
             implements ObjectWriterAnnotationProcessor {
         @Override
         public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -817,9 +817,10 @@ ObjectWriter getExternalObjectWriter(String className, Class objectClass) {
                 return JodaSupport.createLocalDateWriter(objectClass, null);
             case "org.joda.time.LocalDateTime":
                 return JodaSupport.createLocalDateTimeWriter(objectClass, null);
-//            case "com.alibaba.fastjson.JSONObject":
-//                return Fastjson1xSupport.createObjectReader();
             default:
+                if (JdbcSupport.isClob(objectClass)) {
+                    return JdbcSupport.createClobWriter(objectClass);
+                }
                 return null;
         }
     }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue632.java
Patch:
@@ -36,9 +36,8 @@ public void setTimestamp(LocalDateTime timestamp) {
     @Test
     public void test1() throws Exception {
         AppResp appResp = new AppResp();
-        appResp.setTimestamp(LocalDateTime.now());
-        assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2022-08-13 12:18:07\"}", JSON.toJSONString(appResp));
-        assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2022-08-13 12:18:07\"}", com.alibaba.fastjson2.JSON.toJSONString(appResp));
+        appResp.setTimestamp(LocalDateTime.of(2017, 03, 15, 12, 13, 14));
+        assertEquals("{\"message\":\"成功\",\"status\":\"200\",\"timestamp\":\"2017-03-15 12:13:14\"}", JSON.toJSONString(appResp));
         JSONObject jsonObject = new JSONObject();
         jsonObject.put("appResp", appResp);
         System.out.println(jsonObject.toJSONString());

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -182,7 +182,7 @@ public long readFieldNameHashCode() {
                     c = (char) bytes[offset];
                 }
                 if (c != ':') {
-                    return -1;
+                    throw new JSONException(info("expect ':', but " + c));
                 }
 
                 offset++;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -845,7 +845,7 @@ public long readFieldNameHashCode() {
                     ch = EOI;
                 }
                 if (c != ':') {
-                    return -1;
+                    throw new JSONException(info("expect ':', but " + c));
                 }
 
                 offset++;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -427,7 +427,8 @@ public long readFieldNameHashCode() {
                     c = bytes[offset];
                 }
                 if (c != ':') {
-                    return -1;
+                    // return -1;
+                    throw new JSONException(info("expect ':', but " + c));
                 }
 
                 offset++;

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -489,7 +489,7 @@ public long readFieldNameHashCode() {
                     ch = EOI;
                 }
                 if (c != ':') {
-                    return -1;
+                    throw new JSONException(info("expect ':', but " + c));
                 }
 
                 offset++;

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -1372,7 +1372,7 @@ static <T> void parseObject(InputStream input, Charset charset, char delimiter,
         } catch (IOException e) {
             throw new JSONException("JSON#parseObject cannot parse the 'InputStream' to '" + type + "'", e);
         } finally {
-            if (bytes.length < JSONFactory.CACHE_THREAD) {
+            if (bytes.length < JSONFactory.CACHE_THRESHOLD) {
                 JSONFactory.CACHE_BYTES.set(cachedIndex, bytes);
             }
         }
@@ -1443,7 +1443,7 @@ static <T> void parseObject(Reader input, char delimiter, Type type, Consumer<T>
         } catch (IOException e) {
             throw new JSONException("JSON#parseObject cannot parse the 'Reader' to '" + type + "'", e);
         } finally {
-            if (chars.length < JSONFactory.CACHE_THREAD) {
+            if (chars.length < JSONFactory.CACHE_THRESHOLD) {
                 JSONFactory.CACHE_CHARS.set(cachedIndex, chars);
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -139,7 +139,7 @@ public NameCacheEntry2(String name, long value0, long value1) {
         CREATOR = property == null ? "asm" : property;
     }
 
-    static final int CACHE_THREAD = 1024 * 1024;
+    static final int CACHE_THRESHOLD = 1024 * 1024;
     static final AtomicReferenceArray<byte[]> CACHE_BYTES = new AtomicReferenceArray<>(4);
     static final AtomicReferenceArray<char[]> CACHE_CHARS = new AtomicReferenceArray<>(4);
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -378,7 +378,7 @@ public String readReference() {
         } catch (IOException ioe) {
             throw new JSONException("read error", ioe);
         } finally {
-            if (bytes.length < CACHE_THREAD) {
+            if (bytes.length < CACHE_THRESHOLD) {
                 CACHE_BYTES.set(cacheIndex, bytes);
             }
         }
@@ -6380,7 +6380,7 @@ public String info(String message) {
 
     @Override
     public void close() {
-        if (cacheIndex != -1 && chars.length <= CACHE_THREAD) {
+        if (cacheIndex != -1 && chars.length <= CACHE_THRESHOLD) {
             CACHE_CHARS.set(cacheIndex, chars);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.*;
 
 import static com.alibaba.fastjson2.JSONFactory.CACHE_BYTES;
-import static com.alibaba.fastjson2.JSONFactory.CACHE_THREAD;
+import static com.alibaba.fastjson2.JSONFactory.CACHE_THRESHOLD;
 import static com.alibaba.fastjson2.JSONFactory.NAME_CACHE;
 import static com.alibaba.fastjson2.JSONFactory.NAME_CACHE2;
 import static com.alibaba.fastjson2.JSONFactory.NameCacheEntry;
@@ -6898,7 +6898,7 @@ public String info(String message) {
 
     @Override
     public void close() {
-        if (cacheIndex != -1 && bytes.length < CACHE_THREAD) {
+        if (cacheIndex != -1 && bytes.length < CACHE_THRESHOLD) {
             CACHE_BYTES.set(cacheIndex, bytes);
         }
         if (in != null) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.UUID;
 
 import static com.alibaba.fastjson2.JSONB.Constants.*;
-import static com.alibaba.fastjson2.JSONFactory.CACHE_THREAD;
+import static com.alibaba.fastjson2.JSONFactory.CACHE_THRESHOLD;
 
 final class JSONWriterJSONB
         extends JSONWriter {
@@ -50,7 +50,7 @@ final class JSONWriterJSONB
 
     @Override
     public void close() {
-        if (bytes.length > CACHE_THREAD) {
+        if (bytes.length > CACHE_THRESHOLD) {
             return;
         }
         JSONFactory.CACHE_BYTES.set(cachedIndex, bytes);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -46,7 +46,7 @@ public void flushTo(java.io.Writer to) {
 
     @Override
     public void close() {
-        if (chars.length > CACHE_THREAD) {
+        if (chars.length > CACHE_THRESHOLD) {
             return;
         }
         JSONFactory.CACHE_CHARS.set(cachedIndex, chars);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -98,7 +98,7 @@ public void writeBase64(byte[] bytes) {
 
     @Override
     public void close() {
-        if (bytes.length > CACHE_THREAD) {
+        if (bytes.length > CACHE_THRESHOLD) {
             return;
         }
         JSONFactory.CACHE_BYTES.set(cachedIndex, bytes);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterPretty.java
Patch:
@@ -217,6 +217,7 @@ public void writeNameRaw(char[] bytes, int offset, int len) {
         jsonWriter.writeNameRaw(bytes, offset, len);
     }
 
+    @Override
     public void writeNameAny(Object name) {
         if (jsonWriter.startObject) {
             jsonWriter.startObject = false;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplLocalDate.java
Patch:
@@ -42,7 +42,7 @@ public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName
         }
 
         String str = jsonReader.readString();
-        if (str.isEmpty() || str.equals("null")) {
+        if (str.isEmpty() || "null".equals(str)) {
             return null;
         }
 

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/Issue609Test.java
Patch:
@@ -87,7 +87,6 @@ public static void fastJSON2ObjSeTime() throws Exception {
         // oracle-jdk-18.0.2 :
     }
 
-
     public static void fastJSON1ObjSeTime_test() throws Exception {
         for (int i = 0; i < 10; i++) {
             fastJSON1ObjSeTime();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMethod.java
Patch:
@@ -50,6 +50,8 @@ public Method readArrayMappingObject(JSONReader jsonReader, Type fieldType, Obje
             throw new JSONException("not support input " + jsonReader.info());
         }
 
+        jsonReader.nextIfMatch(',');
+
         return getMethod(jsonReader.getContext().getFeatures() | features, methodName, declaringClassName, paramTypeNames);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -248,7 +248,9 @@ public String readReference() {
                 off += n;
 
                 if (off == chars.length) {
-                    chars = Arrays.copyOf(chars, chars.length + 8192);
+                    int oldCapacity = chars.length;
+                    int newCapacity = oldCapacity + (oldCapacity >> 1);
+                    chars = Arrays.copyOf(chars, newCapacity);
                 }
             }
         } catch (IOException ioe) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1111,7 +1111,7 @@ public long readMillisFromString() {
                     long adjustment = nanos / 1000_000 - 1000;
                     return Math.addExact(millis, adjustment);
                 } else {
-                    long millis = Math.multiplyExact(seconds, 1000);
+                    long millis = Math.multiplyExact(seconds, 1000L);
                     return Math.addExact(millis, nanos / 1000_000);
                 }
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1170,7 +1170,7 @@ public long readMillisFromString() {
 
     protected abstract LocalDateTime readLocalDateTime18();
 
-    protected abstract LocalDateTime readLocalDateTime19();
+    public abstract LocalDateTime readLocalDateTime19();
 
     protected abstract LocalDateTime readLocalDateTimeX(int len);
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -4593,7 +4593,7 @@ protected LocalDateTime readLocalDateTime18() {
     }
 
     @Override
-    protected LocalDateTime readLocalDateTime19() {
+    public LocalDateTime readLocalDateTime19() {
         type = bytes[offset];
         if (type != BC_STR_ASCII_FIX_MIN + 19) {
             throw new JSONException("date only support string input");

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -5456,7 +5456,7 @@ protected ZonedDateTime readZonedDateTimeX(int len) {
     }
 
     @Override
-    protected LocalDateTime readLocalDateTime19() {
+    public LocalDateTime readLocalDateTime19() {
         if (ch != '"' && ch != '\'') {
             throw new JSONException("date only support string input");
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5898,7 +5898,7 @@ protected LocalDateTime readLocalDateTime18() {
     }
 
     @Override
-    protected LocalDateTime readLocalDateTime19() {
+    public LocalDateTime readLocalDateTime19() {
         if (ch != '"' && ch != '\'') {
             throw new JSONException("date only support string input");
         }

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -5021,7 +5021,7 @@ protected ZonedDateTime readZonedDateTimeX(int len) {
     }
 
     @Override
-    protected LocalDateTime readLocalDateTime19() {
+    public LocalDateTime readLocalDateTime19() {
         if (ch != '"' && ch != '\'') {
             throw new JSONException("date only support string input");
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -19,6 +19,8 @@ public final class ObjectReaderImplMap
     static final Class CLASS_FASTJSON_OBJECT;
     static Function UNSAFE_OBJECT_CREATOR;
 
+    static final long M = Fnv.hashCode64("M");
+
     static {
         Class objectClass = null;
         try {

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest46_Pair.java
Patch:
@@ -33,7 +33,7 @@ public void test_1() throws Exception {
                 "\t\"@type\":\"com.alibaba.fastjson2.autoType.AutoTypeTest46_Pair$Bean#0\",\n" +
                 "\t\"@value\":{\n" +
                 "\t\t\"pair1#1\":{\n" +
-                "\t\t\t\"@type\":\"org.apache.commons.lang3.tuple.Pair#2\",\n" +
+                "\t\t\t\"@type\":\"org.apache.commons.lang3.tuple.ImmutablePair#2\",\n" +
                 "\t\t\t\"@value\":{\n" +
                 "\t\t\t\t\"left#3\":\"101\",\n" +
                 "\t\t\t\t\"right#4\":true\n" +

File: core/src/test/java/com/alibaba/fastjson2/util/ApacheLang3SupportTest.java
Patch:
@@ -7,8 +7,6 @@
 public class ApacheLang3SupportTest {
     @Test
     public void test() {
-        assertNull(ApacheLang3Support.MutablePairMixIn.of(null, null));
-        assertNull(ApacheLang3Support.PairMixIn.of(null, null));
         assertNull(ApacheLang3Support.TripleMixIn.of(null, null, null));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCalendar.java
Patch:
@@ -42,12 +42,12 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         Calendar date = (Calendar) object;
         long millis = date.getTimeInMillis();
 
-        if (formatUnixTime || ctx.isDateFormatUnixTime()) {
+        if (formatUnixTime || (format == null && ctx.isDateFormatUnixTime())) {
             jsonWriter.writeInt64(millis / 1000L);
             return;
         }
 
-        if (format == null && ctx.isDateFormatMillis()) {
+        if (format == null && (format == null && ctx.isDateFormatMillis())) {
             jsonWriter.writeInt64(millis);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplInstant.java
Patch:
@@ -40,20 +40,20 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         ZonedDateTime zdt = ZonedDateTime.ofInstant(instant, context.getZoneId());
 
-        if (formatUnixTime || context.isDateFormatUnixTime()) {
+        if (formatUnixTime || (format == null && context.isDateFormatUnixTime())) {
             long millis = zdt.toInstant().toEpochMilli();
             jsonWriter.writeInt64(millis / 1000);
             return;
         }
 
-        if (formatMillis || context.isDateFormatMillis()) {
+        if (formatMillis || (format == null && context.isDateFormatMillis())) {
             jsonWriter.writeInt64(zdt
                     .toInstant()
                     .toEpochMilli());
             return;
         }
 
-        if (formatISO8601 || context.isDateFormatISO8601()) {
+        if (formatISO8601 || (format == null && context.isDateFormatISO8601())) {
             jsonWriter.writeDateTimeISO8601(
                     zdt.getYear(),
                     zdt.getMonthValue(),

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplLocalDate.java
Patch:
@@ -38,7 +38,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         LocalDate date = (LocalDate) object;
 
-        if (formatUnixTime || ctx.isDateFormatUnixTime()) {
+        if (formatUnixTime || (format == null && ctx.isDateFormatUnixTime())) {
             LocalDateTime dateTime = LocalDateTime.of(date, LocalTime.MIN);
             long millis = dateTime.atZone(ctx.getZoneId())
                     .toInstant()
@@ -47,7 +47,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             return;
         }
 
-        if (formatMillis || ctx.isDateFormatMillis()) {
+        if (formatMillis || (format == null && ctx.isDateFormatMillis())) {
             LocalDateTime dateTime = LocalDateTime.of(date, LocalTime.MIN);
             long millis = dateTime.atZone(ctx.getZoneId())
                     .toInstant()

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplLocalDateTime.java
Patch:
@@ -33,23 +33,23 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         LocalDateTime dateTime = (LocalDateTime) object;
 
-        if (formatUnixTime || ctx.isDateFormatUnixTime()) {
+        if (formatUnixTime || (format == null && ctx.isDateFormatUnixTime())) {
             long millis = dateTime.atZone(ctx.getZoneId())
                     .toInstant()
                     .toEpochMilli();
             jsonWriter.writeInt64(millis / 1000);
             return;
         }
 
-        if (formatMillis || ctx.isDateFormatMillis()) {
+        if (formatMillis || (format == null && ctx.isDateFormatMillis())) {
             long millis = dateTime.atZone(ctx.getZoneId())
                     .toInstant()
                     .toEpochMilli();
             jsonWriter.writeInt64(millis);
             return;
         }
 
-        if (formatISO8601 || ctx.isDateFormatISO8601()) {
+        if (formatISO8601 || (format == null && ctx.isDateFormatISO8601())) {
             int year = dateTime.getYear();
             int month = dateTime.getMonthValue();
             int dayOfMonth = dateTime.getDayOfMonth();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplLocalTime.java
Patch:
@@ -33,7 +33,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         LocalTime time = (LocalTime) object;
 
-        if (formatMillis || ctx.isDateFormatMillis()) {
+        if (formatMillis || (format == null && ctx.isDateFormatMillis())) {
             LocalDateTime dateTime = LocalDateTime.of(
                     LocalDate.of(1970, 1, 1),
                     time
@@ -44,7 +44,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             return;
         }
 
-        if (formatUnixTime || ctx.isDateFormatUnixTime()) {
+        if (formatUnixTime || (format == null && ctx.isDateFormatUnixTime())) {
             LocalDateTime dateTime = LocalDateTime.of(
                     LocalDate.of(1970, 1, 1),
                     time

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplOffsetDateTime.java
Patch:
@@ -28,15 +28,15 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         OffsetDateTime dateTime = (OffsetDateTime) object;
 
-        if (formatUnixTime || ctx.isDateFormatUnixTime()) {
+        if (formatUnixTime || (format == null && ctx.isDateFormatUnixTime())) {
             long millis = dateTime
                     .toInstant()
                     .toEpochMilli();
             jsonWriter.writeInt64(millis / 1000);
             return;
         }
 
-        if (formatMillis || ctx.isDateFormatMillis()) {
+        if (formatMillis || (format == null && ctx.isDateFormatMillis())) {
             long millis = dateTime
                     .toInstant()
                     .toEpochMilli();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplZonedDateTime.java
Patch:
@@ -33,13 +33,13 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         JSONWriter.Context ctx = jsonWriter.getContext();
 
-        if (formatUnixTime || ctx.isDateFormatUnixTime()) {
+        if (formatUnixTime || (format == null && ctx.isDateFormatUnixTime())) {
             long millis = zdt.toInstant().toEpochMilli();
             jsonWriter.writeInt64(millis / 1000);
             return;
         }
 
-        if (formatMillis || ctx.isDateFormatMillis()) {
+        if (formatMillis || (format == null && ctx.isDateFormatMillis())) {
             jsonWriter.writeInt64(zdt
                     .toInstant()
                     .toEpochMilli());

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/DoubleTest3_random.java
Patch:
@@ -92,7 +92,7 @@ public void test_ran() {
     public void test_ran_1() {
         Random rand = new Random();
         char[] chars = new char[64];
-        for (int i = 0; i < 1000 * 1000 * 100; ++i) {
+        for (int i = 0; i < 1000 * 1000 * 10; ++i) {
             double val = rand.nextDouble();
             int len = RyuDouble.toString(val, chars, 0);
             JSONReader jsonReader = JSONReader.of(chars, 0, len);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -2222,6 +2222,7 @@ public String readString() {
         return str;
     }
 
+    @Override
     public char readCharValue() {
         byte type = bytes[offset];
         if (type == BC_CHAR) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -215,6 +215,7 @@ public void writeRaw(byte b) {
         bytes[off++] = b;
     }
 
+    @Override
     public void writeChar(char ch) {
         if (off == bytes.length) {
             int minCapacity = off + 1;
@@ -1269,6 +1270,7 @@ public void writeInt16(short val) {
         bytes[off++] = (byte) val;
     }
 
+    @Override
     public void writeEnum(Enum e) {
         if (e == null) {
             writeNull();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -527,6 +527,7 @@ public void writeRaw(char[] chars) {
         off += chars.length;
     }
 
+    @Override
     public void writeChar(char ch) {
         int minCapacity = chars.length + 8;
         if (minCapacity - chars.length > 0) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -2222,6 +2222,7 @@ public String readString() {
         return str;
     }
 
+    @Override
     public char readCharValue() {
         byte type = bytes[offset];
         if (type == BC_CHAR) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -215,6 +215,7 @@ public void writeRaw(byte b) {
         bytes[off++] = b;
     }
 
+    @Override
     public void writeChar(char ch) {
         if (off == bytes.length) {
             int minCapacity = off + 1;
@@ -1269,6 +1270,7 @@ public void writeInt16(short val) {
         bytes[off++] = (byte) val;
     }
 
+    @Override
     public void writeEnum(Enum e) {
         if (e == null) {
             writeNull();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -527,6 +527,7 @@ public void writeRaw(char[] chars) {
         off += chars.length;
     }
 
+    @Override
     public void writeChar(char ch) {
         int minCapacity = chars.length + 8;
         if (minCapacity - chars.length > 0) {

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayCodecOnlyJSONBTest.java
Patch:
@@ -5,7 +5,7 @@
 public class EishayCodecOnlyJSONBTest {
     public static void main(String[] args) throws RunnerException {
         EishayCodecOnlyJSONB benchmark = new EishayCodecOnlyJSONB();
-        benchmark.serialize_jsonb_arrayMapping_perf_test();
-//        benchmark.deserialize_jsonbArrayMapping_perf_test();
+//        benchmark.serialize_jsonb_arrayMapping_perf_test();
+        benchmark.deserialize_jsonbArrayMapping_perf_test();
     }
 }

File: benchmark/src/test/java/com/alibaba/fastjson2/benchmark/eishay/EishayCodecOnlyJSONBTest.java
Patch:
@@ -5,7 +5,7 @@
 public class EishayCodecOnlyJSONBTest {
     public static void main(String[] args) throws RunnerException {
         EishayCodecOnlyJSONB benchmark = new EishayCodecOnlyJSONB();
-//        benchmark.serialize_jsonb_arrayMapping_perf_test();
-        benchmark.deserialize_jsonbArrayMapping_perf_test();
+        benchmark.serialize_jsonb_arrayMapping_perf_test();
+//        benchmark.deserialize_jsonbArrayMapping_perf_test();
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue410.java
Patch:
@@ -11,7 +11,9 @@ public class Issue410 {
     @Test
     public void test() {
         String json = "{\"key1\":11444-sdsdsd\"key2\":\"sdsdssdsda\"}";
-        assertFalse(JSON.isValid(json));
+        assertFalse(
+                JSON.isValid(json)
+        );
 
         assertThrows(
                 JSONException.class,

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/Eishay.java
Patch:
@@ -15,6 +15,7 @@ public static void main(String[] args) throws RunnerException {
                 .exclude(EishayCodecOnlyJSONB.class.getName())
                 .mode(Mode.Throughput)
                 .timeUnit(TimeUnit.MILLISECONDS)
+                .warmupIterations(3)
                 .forks(1)
                 .build();
         new Runner(options).run();

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/eishay/Eishay.java
Patch:
@@ -12,6 +12,7 @@ public class Eishay {
     public static void main(String[] args) throws RunnerException {
         Options options = new OptionsBuilder()
                 .include(Eishay.class.getName())
+                .exclude(EishayCodecOnlyJSONB.class.getName())
                 .mode(Mode.Throughput)
                 .timeUnit(TimeUnit.MILLISECONDS)
                 .forks(1)

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue565.java
Patch:
@@ -18,7 +18,8 @@ public void test() {
         assertEquals("GRASS_SQUARE_FLOWER", resp.roomType);
     }
 
-    public class Response implements Serializable {
+    public class Response
+            implements Serializable {
         private static final long serialVersionUID = 7868798773717812999L;
         private String roomType;
         private List<AccountInfo> users;
@@ -74,5 +75,4 @@ public void setUsers(List<AccountInfo> users) {
             this.users = users;
         }
     }
-
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterPretty.java
Patch:
@@ -117,6 +117,7 @@ public void writeReference(String path) {
     public void startObject() {
         level++;
         jsonWriter.startObject = true;
+        startObject = true;
         write0('{');
         indent++;
         write0('\n');

File: core/src/test/java/com/alibaba/fastjson2/primitves/BooleanArrayTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONB;
-import com.alibaba.fastjson2.JSONWriter;
-import com.alibaba.fastjson2.TestUtils;
 import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;

File: core/src/main/java/com/alibaba/fastjson2/JSONB.java
Patch:
@@ -17,6 +17,7 @@
 import static com.alibaba.fastjson2.JSONB.Constants.*;
 
 /**
+ * x92          # type_char int
  * x91          # binary len_int32 bytes
  * x92          # type [str] symbol_int32 jsonb
  * x93          # reference
@@ -74,6 +75,7 @@
  */
 public interface JSONB {
     interface Constants {
+        byte BC_CHAR = -112;                    // 0x92
         byte BC_BINARY = -111;                  // 0x91
         byte BC_TYPED_ANY = -110;               // 0x92
         byte BC_REFERENCE = -109;               // 0x93

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCharacter.java
Patch:
@@ -15,11 +15,11 @@ public Class getObjectClass() {
 
     @Override
     public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
-        String str = jsonReader.readString();
-        if (str == null) {
+        if (jsonReader.nextIfNull()) {
             return null;
         }
-        return str.charAt(0);
+
+        return jsonReader.readCharValue();
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharMethod.java
Patch:
@@ -38,7 +38,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
             return;
         }
 
-        jsonWriter.writeString(value.charValue());
+        jsonWriter.writeChar(value.charValue());
     }
 
     @Override
@@ -50,7 +50,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         }
 
         writeFieldName(jsonWriter);
-        jsonWriter.writeString(value.charValue());
+        jsonWriter.writeChar(value.charValue());
         return true;
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValField.java
Patch:
@@ -33,13 +33,13 @@ public boolean write(JSONWriter jsonWriter, T object) {
         char value = (char) getFieldValue(object);
 
         writeFieldName(jsonWriter);
-        jsonWriter.writeString(value);
+        jsonWriter.writeChar(value);
         return true;
     }
 
     @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         char value = (char) getFieldValue(object);
-        jsonWriter.writeString(value);
+        jsonWriter.writeChar(value);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValFunc.java
Patch:
@@ -24,14 +24,14 @@ public Method getMethod() {
     @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         char value = function.applyAsChar(object);
-        jsonWriter.writeString(value);
+        jsonWriter.writeChar(value);
     }
 
     @Override
     public boolean write(JSONWriter jsonWriter, Object object) {
         char value = function.applyAsChar(object);
         writeFieldName(jsonWriter);
-        jsonWriter.writeString(value);
+        jsonWriter.writeChar(value);
         return true;
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -963,7 +963,7 @@ private void gwValue(MethodWriterContext mwc, FieldWriter fieldWriter, int OBJEC
             methodName = "writeBool";
             methodDesc = "(Z)V";
         } else if (fieldClass == char.class) {
-            methodName = "writeString";
+            methodName = "writeChar";
             methodDesc = "(C)V";
         } else if (fieldClass == byte.class) {
             methodName = "writeInt32";

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterJSONBTest.java
Patch:
@@ -82,7 +82,7 @@ public void writeDateTime19() {
     @Test
     public void writeString() {
         JSONWriterJSONB jsonWriter = (JSONWriterJSONB) JSONWriter.ofJSONB();
-        jsonWriter.writeString('A');
+        jsonWriter.writeChar('A');
         assertEquals("\"A\"", JSONB.toJSONString(jsonWriter.getBytes()));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterTest.java
Patch:
@@ -416,7 +416,7 @@ public void path() {
     @Test
     public void getBytes() {
         JSONWriter jsonWriter = new JSONWriterUTF16(JSONFactory.createWriteContext());
-        jsonWriter.writeString('a');
+        jsonWriter.writeChar('a');
         assertArrayEquals(new byte[] {'"', 'a', '"'}, jsonWriter.getBytes());
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue416.java
Patch:
@@ -10,7 +10,6 @@
 import java.time.LocalTime;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 public class Issue416 {
     @Test

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue416.java
Patch:
@@ -24,8 +24,6 @@ public void test() {
         LocalTest localTest2 = JSON.parseObject(JSON.toJSONString(localTest1), LocalTest.class);
 
         assertEquals(localTest1.getLocalDate(), localTest2.getLocalDate());
-        assertNotEquals(localTest1.getLocalTime(), localTest2.getLocalTime()); // without nano
-        assertNotEquals(localTest1.getLocalDateTime(), localTest2.getLocalDateTime()); // without nano
     }
 
     @Data

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/ASCIICheckTest.java
Patch:
@@ -9,7 +9,7 @@ public void f0_perf() {
         ASCIICheck benchmark = new ASCIICheck();
         long start = System.currentTimeMillis();
         for (int i = 0; i < 1000 * 1000 * 100; ++i) {
-            benchmark.f0(BH);
+            benchmark.f0_vec(BH);
         }
         long millis = System.currentTimeMillis() - start;
         System.out.println("f0 millis : " + millis);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -168,7 +168,7 @@ public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Obje
         }
 
         jsonReader.startArray();
-        Object object = creator.get();
+        Object object = createInstance(0);
 
         for (FieldReader fieldReader : fieldReaders) {
             fieldReader.readFieldValue(jsonReader, object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -847,7 +847,9 @@ protected void createFieldReader(
         String fieldName;
         if (fieldInfo.fieldName == null || fieldInfo.fieldName.isEmpty()) {
             fieldName = field.getName();
-            fieldName = BeanUtils.fieldName(fieldName, namingStrategy);
+            if (namingStrategy != null) {
+                fieldName = BeanUtils.fieldName(fieldName, namingStrategy);
+            }
         } else {
             fieldName = fieldInfo.fieldName;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -48,6 +48,7 @@ public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (initValueClass == null || initObjectWriter == ObjectWriterBaseModule.VoidObjectWriter.INSTANCE) {
             ObjectWriter formattedWriter = FieldWriter.getObjectWriter(fieldType, fieldClass, format, null, valueClass);
             if (formattedWriter == null) {
+                initValueClass = valueClass;
                 return initObjectWriter = jsonWriter.getObjectWriter(valueClass);
             } else {
                 return initObjectWriter = formattedWriter;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -86,7 +86,9 @@ protected FieldWriter creteFieldWriter(
         if (fieldInfo.fieldName == null || fieldInfo.fieldName.isEmpty()) {
             fieldName = field.getName();
 
-            fieldName = BeanUtils.fieldName(fieldName, beanInfo.namingStrategy);
+            if (beanInfo.namingStrategy != null) {
+                fieldName = BeanUtils.fieldName(fieldName, beanInfo.namingStrategy);
+            }
         } else {
             fieldName = fieldInfo.fieldName;
         }

File: core/src/test/java/com/alibaba/fastjson2/arraymapping/EishayTest.java
Patch:
@@ -73,8 +73,6 @@ public static class Sample {
         public short shortValue;
         public char charValue;
         public boolean booleanValue;
-
-
         public int[] intArray;
         public long[] longArray;
         public float[] floatArray;
@@ -86,7 +84,6 @@ public static class Sample {
         public String string; // Can be null.
         public Sample sample; // Can be null.
 
-
         @Override
         public boolean equals(Object o) {
             if (this == o) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -68,6 +68,7 @@ public T readObject(JSONReader jsonReader) {
         return readObject(jsonReader, null, null, features);
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -83,6 +83,7 @@ public T createInstance(long features) {
         return defaultCreator.get();
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -99,6 +99,7 @@ public T createInstance(long features) {
         return defaultCreator.get();
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -205,6 +205,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
         return object;
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -119,6 +119,7 @@ public Function getBuildFunction() {
         return buildFunction;
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -137,6 +137,7 @@ public T createInstance(long features) {
         return defaultCreator.get();
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListInt64.java
Patch:
@@ -41,6 +41,7 @@ public Object createInstance(long features) {
         }
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Collection list = (Collection) createInstance(0);
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -18,6 +18,7 @@ public final class ObjectReaderImplObject
         extends ObjectReaderBaseModule.PrimitiveImpl {
     public static final ObjectReaderImplObject INSTANCE = new ObjectReaderImplObject();
 
+    @Override
     public Object createInstance(long features) {
         return new JSONObject();
     }

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -677,7 +677,7 @@ public static boolean isRecord(Class objectClass) {
         if (RECORD_CLASS == null) {
             String superclassName = superclass.getName();
             if ("java.lang.Record".equals(superclassName)) {
-                RECORD_CLASS = objectClass;
+                RECORD_CLASS = superclass;
                 return true;
             } else {
                 return false;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -68,6 +68,7 @@ public T readObject(JSONReader jsonReader) {
         return readObject(jsonReader, null, null, features);
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -83,6 +83,7 @@ public T createInstance(long features) {
         return defaultCreator.get();
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -99,6 +99,7 @@ public T createInstance(long features) {
         return defaultCreator.get();
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -205,6 +205,7 @@ public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName
         return object;
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -119,6 +119,7 @@ public Function getBuildFunction() {
         return buildFunction;
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -137,6 +137,7 @@ public T createInstance(long features) {
         return defaultCreator.get();
     }
 
+    @Override
     public T readArrayMappingJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = checkAutoType(jsonReader, this.objectClass, this.features | features);
         if (autoTypeReader != null && autoTypeReader != this && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListInt64.java
Patch:
@@ -41,6 +41,7 @@ public Object createInstance(long features) {
         }
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Collection list = (Collection) createInstance(0);
         for (Object item : collection) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -18,6 +18,7 @@ public final class ObjectReaderImplObject
         extends ObjectReaderBaseModule.PrimitiveImpl {
     public static final ObjectReaderImplObject INSTANCE = new ObjectReaderImplObject();
 
+    @Override
     public Object createInstance(long features) {
         return new JSONObject();
     }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue553.java
Patch:
@@ -3,14 +3,15 @@
 import com.alibaba.fastjson2.JSONPath;
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 public class Issue553 {
     @Test
     public void test() {
         String json = "{\"status\":0}";
         String path = "$.status";
         Object rt1 = JSONPath.extract(json, path);
-        System.out.println(rt1);// 0
         Object rt2 = JSONPath.eval(json, path);
-        System.out.println(rt2);// null
+        assertEquals(rt1, rt2);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -54,6 +54,9 @@ public static Object extract(String json, String path) {
         return jsonPath.extract(jsonReader);
     }
 
+    public static Object eval(String str, String path) {
+        return extract(str, path);
+    }
     public static Object eval(Object rootObject, String path) {
         return JSONPath.of(path)
                 .eval(rootObject);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -3085,8 +3085,6 @@ void genVariantsMethodBefore() {
 
             mw.visitInsn(Opcodes.ICONST_0);
             mw.visitVarInsn(Opcodes.ISTORE, var(WRITE_NULLS));
-            mw.visitInsn(Opcodes.LCONST_0);
-            mw.visitVarInsn(Opcodes.LSTORE, var2(CONTEXT_FEATURES));
             mw.visitJumpInsn(Opcodes.GOTO, end_);
 
             mw.visitLabel(notDefault_);

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToByte.java
Patch:
@@ -26,6 +26,6 @@ public Object apply(Object o) {
             return ((Number) o).byteValue();
         }
 
-        throw new JSONException("can not cast to BigInteger " + o.getClass());
+        throw new JSONException("can not cast to Byte " + o.getClass());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToDouble.java
Patch:
@@ -47,6 +47,6 @@ public Object apply(Object o) {
             return array;
         }
 
-        throw new JSONException("can not cast to Float " + o.getClass());
+        throw new JSONException("can not cast to Double " + o.getClass());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToByte.java
Patch:
@@ -26,6 +26,6 @@ public Object apply(Object o) {
             return ((Number) o).byteValue();
         }
 
-        throw new JSONException("can not cast to BigInteger " + o.getClass());
+        throw new JSONException("can not cast to Byte " + o.getClass());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/function/impl/ToDouble.java
Patch:
@@ -47,6 +47,6 @@ public Object apply(Object o) {
             return array;
         }
 
-        throw new JSONException("can not cast to Float " + o.getClass());
+        throw new JSONException("can not cast to Double " + o.getClass());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderImplDate.java
Patch:
@@ -230,6 +230,8 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     }
                     fieldValue = new java.util.Date(millis);
                 }
+            } else if (jsonReader.nextIfEmptyString()) {
+                fieldValue = null;
             } else {
                 long millis = jsonReader.readMillisFromString();
                 fieldValue = new java.util.Date(millis);

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -1420,9 +1420,9 @@ public <T> T getObject(String key, Function<JSONObject, T> creator) {
     @SuppressWarnings({"rawtypes", "unchecked"})
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         final String methodName = method.getName();
-        Class<?>[] parameterTypes = method.getParameterTypes();
+        int parameterCount = method.getParameterCount();
 
-        if (parameterTypes.length == 1) {
+        if (parameterCount == 1) {
             if ("equals".equals(methodName)) {
                 return this.equals(args[0]);
             }
@@ -1451,7 +1451,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
             return null;
         }
 
-        if (parameterTypes.length == 0) {
+        if (parameterCount == 0) {
             if (method.getReturnType() == void.class) {
                 throw new JSONException("This method '" + methodName + "' is not a getter");
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -1062,7 +1062,7 @@ protected <T> FieldReader[] createFieldReaders(Class<T> objectClass, Type object
             BeanUtils.declaredFields(objectClass, field -> {
                 fieldInfo.init();
                 fieldInfo.features |= JSONReader.Feature.FieldBased.mask;
-                createFieldReader(objectClass, objectType, namingStrategy, fieldInfo, field, fieldReaders, Collections.emptyList());
+                createFieldReader(objectClass, objectType, namingStrategy, fieldInfo, field, fieldReaders, modules);
             });
         } else {
             BeanUtils.fields(objectClass, field -> {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1848,7 +1848,7 @@ public BigDecimal getBigDecimal() {
 
         switch (valueType) {
             case JSON_TYPE_INT: {
-                if (mag1 == 0 && mag2 == 0 && mag3 != Integer.MIN_VALUE) {
+                if (mag1 == 0 && mag2 == 0 && mag3 >= 0) {
                     return BigDecimal.valueOf(negative ? -mag3 : mag3);
                 }
                 int[] mag;

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1258,7 +1258,7 @@ public boolean wasNull() {
     public <T> T read(Type type) {
         boolean fieldBased = (context.features & Feature.FieldBased.mask) != 0;
         ObjectReader objectReader = context.provider.getObjectReader(type, fieldBased);
-        return (T) objectReader.readObject(this, 0);
+        return (T) objectReader.readObject(this, null, null, 0);
     }
 
     public void read(List list) {
@@ -1455,7 +1455,7 @@ public void read(Map object, long features) {
     public <T> T read(Class<T> type) {
         boolean fieldBased = (context.features & Feature.FieldBased.mask) != 0;
         ObjectReader objectReader = context.provider.getObjectReader(type, fieldBased);
-        return (T) objectReader.readObject(this, 0);
+        return (T) objectReader.readObject(this, null, null, 0);
     }
 
     public Map<String, Object> readObject() {
@@ -1745,7 +1745,7 @@ public List readArray() {
                     break;
                 case '{':
                     if (context.autoTypeBeforeHandler != null || (context.features & Feature.SupportAutoType.mask) != 0) {
-                        val = ObjectReaderImplObject.INSTANCE.readObject(this, 0);
+                        val = ObjectReaderImplObject.INSTANCE.readObject(this, null, null, 0);
                     } else {
                         val = readObject();
                     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAnySetter.java
Patch:
@@ -41,7 +41,7 @@ public void processExtra(JSONReader jsonReader, Object object) {
         String name = jsonReader.getFieldName();
 
         ObjectReader itemObjectReader = getItemObjectReader(jsonReader);
-        Object value = itemObjectReader.readObject(jsonReader, 0);
+        Object value = itemObjectReader.readObject(jsonReader, fieldType, fieldName, 0);
 
         try {
             method.invoke(object, name, value);
@@ -65,9 +65,9 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
         Object value;
         if (jsonReader.isJSONB()) {
-            value = fieldObjectReader.readJSONBObject(jsonReader, features);
+            value = fieldObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
         } else {
-            value = fieldObjectReader.readObject(jsonReader, features);
+            value = fieldObjectReader.readObject(jsonReader, fieldType, fieldName, features);
         }
 
         accept(object, value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionFieldReadOnly.java
Patch:
@@ -54,7 +54,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     .getContext()
                     .getObjectReader(fieldType);
         }
-        Object value = fieldObjectReader.readObject(jsonReader, 0);
+        Object value = fieldObjectReader.readObject(jsonReader, fieldType, fieldName, 0);
         accept(object, value);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -105,8 +105,8 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     .getObjectReader(fieldType);
         }
         Object value = jsonReader.isJSONB()
-                ? fieldObjectReader.readJSONBObject(jsonReader, 0)
-                : fieldObjectReader.readObject(jsonReader, 0);
+                ? fieldObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, 0)
+                : fieldObjectReader.readObject(jsonReader, fieldType, fieldName, 0);
         accept(object, value);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -117,7 +117,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                         value = null;
                     }
                 } else {
-                    value = itemObjectReader.readJSONBObject(jsonReader, features);
+                    value = itemObjectReader.readJSONBObject(jsonReader, itemType, null, features);
                 }
                 list.add(value);
             }
@@ -147,7 +147,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                     itemObjectReader = getItemObjectReader(ctx);
                 }
 
-                Object itemObject = itemObjectReader.readObject(jsonReader, features);
+                Object itemObject = itemObjectReader.readObject(jsonReader, itemType, null, features);
                 if (i == 0) {
                     first = itemObject;
                 } else if (i == 1) {
@@ -206,7 +206,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
 
         ObjectReader itemObjectReader = getItemObjectReader(jsonReader);
-        Object itemObject = itemObjectReader.readObject(jsonReader, features);
+        Object itemObject = itemObjectReader.readObject(jsonReader, itemType, null, features);
 
         Collection list = (Collection) this.fieldObjectReader.createInstance(context.getFeatures() | features);
         list.add(itemObject);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -74,7 +74,7 @@ public void processExtra(JSONReader jsonReader, Object object) {
         String name = jsonReader.getFieldName();
 
         ObjectReader itemObjectReader = getItemObjectReader(jsonReader);
-        Object value = itemObjectReader.readObject(jsonReader, 0);
+        Object value = itemObjectReader.readObject(jsonReader, null, name, 0);
         map.put(name, value);
     }
 
@@ -93,9 +93,9 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
         Object value;
         if (jsonReader.isJSONB()) {
-            value = fieldObjectReader.readJSONBObject(jsonReader, features);
+            value = fieldObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
         } else {
-            value = fieldObjectReader.readObject(jsonReader, features);
+            value = fieldObjectReader.readObject(jsonReader, fieldType, fieldName, features);
         }
 
         accept(object, value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapMethodReadOnly.java
Patch:
@@ -78,7 +78,7 @@ public void processExtra(JSONReader jsonReader, Object object) {
         String name = jsonReader.getFieldName();
 
         ObjectReader itemObjectReader = getItemObjectReader(jsonReader);
-        Object value = itemObjectReader.readObject(jsonReader, 0);
+        Object value = itemObjectReader.readObject(jsonReader, getItemType(), fieldName, 0);
         map.put(name, value);
     }
 
@@ -97,9 +97,9 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
         Object value;
         if (jsonReader.isJSONB()) {
-            value = fieldObjectReader.readJSONBObject(jsonReader, features);
+            value = fieldObjectReader.readJSONBObject(jsonReader, getItemType(), fieldName, features);
         } else {
-            value = fieldObjectReader.readObject(jsonReader, features);
+            value = fieldObjectReader.readObject(jsonReader, getItemType(), fieldName, features);
         }
 
         accept(object, value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObject.java
Patch:
@@ -18,7 +18,7 @@ public interface FieldReaderObject<T, V>
     default void readFieldValue(JSONReader jsonReader, T object) {
         accept(object,
                 getFieldObjectReader(jsonReader.getContext())
-                        .readObject(jsonReader, 0));
+                        .readObject(jsonReader, getFieldType(), getFieldName(), 0));
     }
 
     static ObjectReader createFormattedObjectReader(Type fieldType, Class fieldClass, String format, Locale locale) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectParam.java
Patch:
@@ -58,7 +58,7 @@ public Object readFieldValue(JSONReader jsonReader) {
                     .getObjectReader(fieldType);
         }
         return jsonReader.isJSONB()
-                ? fieldObjectReader.readJSONBObject(jsonReader, features)
-                : fieldObjectReader.readObject(jsonReader, features);
+                ? fieldObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, features)
+                : fieldObjectReader.readObject(jsonReader, fieldType, fieldName, features);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicInteger.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.concurrent.atomic.AtomicInteger;
 
 final class ObjectReaderImplAtomicInteger
@@ -14,7 +15,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }
@@ -23,7 +24,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicIntegerArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.util.TypeUtils;
 
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -29,7 +30,7 @@ public Object createInstance(Collection collection) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -59,7 +60,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicLong.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.concurrent.atomic.AtomicLong;
 
 final class ObjectReaderImplAtomicLong
@@ -14,7 +15,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }
@@ -23,7 +24,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicLongArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.util.TypeUtils;
 
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -29,7 +30,7 @@ public Object createInstance(Collection collection) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -59,7 +60,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicReference.java
Patch:
@@ -21,7 +21,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }
@@ -31,7 +31,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBigDecimal.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.function.impl.ToBigDecimal;
 
+import java.lang.reflect.Type;
 import java.math.BigDecimal;
 import java.util.Map;
 import java.util.function.Function;
@@ -18,12 +19,12 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readBigDecimal();
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readBigDecimal();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBigInteger.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.math.BigInteger;
 
 final class ObjectReaderImplBigInteger
@@ -14,12 +15,12 @@ public Class getObjectClass() {
     }
 
     @Override
-    public BigInteger readJSONBObject(JSONReader jsonReader, long features) {
+    public BigInteger readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readBigInteger();
     }
 
     @Override
-    public BigInteger readObject(JSONReader jsonReader, long features) {
+    public BigInteger readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readBigInteger();
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBitSet.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.util.Fnv;
 
+import java.lang.reflect.Type;
 import java.util.BitSet;
 
 public final class ObjectReaderImplBitSet
@@ -19,7 +20,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public BitSet readJSONBObject(JSONReader jsonReader, long features) {
+    public BitSet readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }
@@ -36,7 +37,7 @@ public BitSet readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public BitSet readObject(JSONReader jsonReader, long features) {
+    public BitSet readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBoolValueArray.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 
 class ObjectReaderImplBoolValueArray
@@ -15,7 +16,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -59,7 +60,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCalendar.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.codec.DateTimeCodec;
 
+import java.lang.reflect.Type;
 import java.time.LocalDateTime;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
@@ -32,7 +33,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.isInt()) {
             long millis = jsonReader.readInt64Value();
 
@@ -60,7 +61,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.current() == '"') {
             if (format != null) {
                 DateTimeFormatter formatter = getDateFormatter();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCharValueArray.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 
 final class ObjectReaderImplCharValueArray
@@ -15,7 +16,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -60,7 +61,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.isString()) {
             String str = jsonReader.readString();
             return str.toCharArray();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCurrency.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.util.Fnv;
 
+import java.lang.reflect.Type;
 import java.util.Currency;
 
 final class ObjectReaderImplCurrency
@@ -20,7 +21,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.getType() == JSONB.Constants.BC_TYPED_ANY) {
             jsonReader.next();
             long typeHash = jsonReader.readTypeHashCode();
@@ -37,7 +38,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         String strVal = jsonReader.readString();
         if (strVal == null || strVal.isEmpty()) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.codec.DateTimeCodec;
 
+import java.lang.reflect.Type;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.time.LocalDate;
@@ -38,7 +39,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.isInt()) {
             long millis = jsonReader.readInt64Value();
             if (formatUnixTime) {
@@ -55,7 +56,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.isInt()) {
             long millis = jsonReader.readInt64Value();
             if (formatUnixTime) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -18,7 +19,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -62,7 +63,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleValueArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -17,7 +18,7 @@ public Class getObjectClass() {
         return double[].class;
     }
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -61,7 +62,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum.java
Patch:
@@ -72,13 +72,13 @@ public Enum getEnumByOrdinal(int ordinal) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         byte type = jsonReader.getType();
         if (jsonReader.getType() == BC_TYPED_ANY) {
             ObjectReader autoTypeObjectReader = jsonReader.checkAutoType(enumClass, 0L, features);
             if (autoTypeObjectReader != null) {
                 if (autoTypeObjectReader != this) {
-                    return autoTypeObjectReader.readJSONBObject(jsonReader, features);
+                    return autoTypeObjectReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
                 }
             } else {
                 throw new JSONException(jsonReader.info("not support enumType : " + jsonReader.getString()));
@@ -103,7 +103,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (createMethodParamType != null) {
             Object paramValue = jsonReader.read(createMethodParamType);
             try {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -18,7 +19,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -62,7 +63,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatValueArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -17,7 +18,7 @@ public Class getObjectClass() {
         return float[].class;
     }
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -61,7 +62,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFromString.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.function.Function;
 
 public final class ObjectReaderImplFromString<T>
@@ -20,7 +21,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public T readJSONBObject(JSONReader jsonReader, long features) {
+    public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         String str = jsonReader.readString();
         if (str == null || str.isEmpty()) {
             return null;
@@ -30,7 +31,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public T readObject(JSONReader jsonReader, long features) {
+    public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         String str = jsonReader.readString();
         if (str == null) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInstant.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.codec.DateTimeCodec;
 
+import java.lang.reflect.Type;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.util.Locale;
@@ -53,12 +54,12 @@ public Object createInstance(Map map, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readInstant();
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         JSONReader.Context context = jsonReader.getContext();
 
         if (jsonReader.isInt() && context.getDateFormat() == null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16Array.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -40,7 +41,7 @@ public Object createInstance(Collection collection) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -85,7 +86,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16ValueArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -18,7 +19,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -63,7 +64,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32Array.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -40,7 +41,7 @@ public Object createInstance(Collection collection) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -84,7 +85,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64Array.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -40,7 +41,7 @@ public Object createInstance(Collection collection) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -84,7 +85,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8Array.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Base64;
 import java.util.Collection;
@@ -29,7 +30,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -100,7 +101,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8ValueArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -24,7 +25,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -63,7 +64,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.isBinary()) {
             return jsonReader.readBinary();
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplLocalDate.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.codec.DateTimeCodec;
 
+import java.lang.reflect.Type;
 import java.time.Instant;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
@@ -24,12 +25,12 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readLocalDate();
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         JSONReader.Context context = jsonReader.getContext();
 
         if (jsonReader.readIfNull()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplLocalDateTime.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.codec.DateTimeCodec;
 
+import java.lang.reflect.Type;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.util.Locale;
@@ -22,12 +23,12 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readLocalDateTime();
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         JSONReader.Context context = jsonReader.getContext();
 
         if (jsonReader.isInt()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplLocalTime.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.codec.DateTimeCodec;
 
+import java.lang.reflect.Type;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.util.Locale;
@@ -22,12 +23,12 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readLocalTime();
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         JSONReader.Context context = jsonReader.getContext();
 
         if (jsonReader.readIfNull()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplLocale.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Locale;
 
 class ObjectReaderImplLocale
@@ -14,7 +15,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         String strVal = jsonReader.readString();
         if (strVal == null || strVal.isEmpty()) {
             return null;
@@ -30,7 +31,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         String strVal = jsonReader.readString();
         if (strVal == null || strVal.isEmpty()) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplNumberArray.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.function.Function;
@@ -13,7 +14,7 @@ class ObjectReaderImplNumberArray
     static final ObjectReaderImplNumberArray INSTANCE = new ObjectReaderImplNumberArray();
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.readIfNull()) {
             return null;
         }
@@ -48,7 +49,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         int entryCnt = jsonReader.startArray();
         if (entryCnt == -1) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOptionalDouble.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.OptionalDouble;
 
 class ObjectReaderImplOptionalDouble
@@ -14,7 +15,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         Double value = jsonReader.readDouble();
         if (value == null) {
             return OptionalDouble.empty();
@@ -23,7 +24,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         Double value = jsonReader.readDouble();
         if (value == null) {
             return OptionalDouble.empty();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOptionalInt.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.OptionalInt;
 
 final class ObjectReaderImplOptionalInt
@@ -14,7 +15,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         Integer integer = jsonReader.readInt32();
         if (integer == null) {
             return OptionalInt.empty();
@@ -23,7 +24,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         Integer integer = jsonReader.readInt32();
         if (integer == null) {
             return OptionalInt.empty();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplOptionalLong.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.OptionalLong;
 
 class ObjectReaderImplOptionalLong
@@ -14,7 +15,7 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         Long integer = jsonReader.readInt64();
         if (integer == null) {
             return OptionalLong.empty();
@@ -23,7 +24,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         Long integer = jsonReader.readInt64();
         if (integer == null) {
             return OptionalLong.empty();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplUUID.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 
+import java.lang.reflect.Type;
 import java.util.UUID;
 
 class ObjectReaderImplUUID
@@ -14,12 +15,12 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readUUID();
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readUUID();
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplValue.java
Patch:
@@ -51,12 +51,12 @@ public ObjectReaderImplValue(
     }
 
     @Override
-    public T readObject(JSONReader jsonReader, long features) {
+    public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (valueReader == null) {
             valueReader = jsonReader.getObjectReader(valueType);
         }
 
-        I value = (I) valueReader.readObject(jsonReader, features | this.features);
+        I value = (I) valueReader.readObject(jsonReader, fieldType, fieldName, features | this.features);
 
         if (schema != null) {
             schema.validate(value);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplZonedDateTime.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.codec.DateTimeCodec;
 
+import java.lang.reflect.Type;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.util.Locale;
@@ -29,12 +30,12 @@ public Class getObjectClass() {
     }
 
     @Override
-    public Object readJSONBObject(JSONReader jsonReader, long features) {
+    public Object readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         return jsonReader.readZonedDateTime();
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         JSONReader.Context context = jsonReader.getContext();
 
         if (jsonReader.isInt()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderInterface.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 
 import java.lang.reflect.Proxy;
+import java.lang.reflect.Type;
 import java.util.Map;
 import java.util.function.Function;
 import java.util.function.Supplier;
@@ -23,10 +24,10 @@ public ObjectReaderInterface(
     }
 
     @Override
-    public T readJSONBObject(JSONReader jsonReader, long features) {
+    public T readJSONBObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         ObjectReader autoTypeReader = jsonReader.checkAutoType(this.objectClass, this.typeNameHash, this.features | features);
         if (autoTypeReader != null && autoTypeReader.getObjectClass() != this.objectClass) {
-            return (T) autoTypeReader.readJSONBObject(jsonReader, features);
+            return (T) autoTypeReader.readJSONBObject(jsonReader, fieldType, fieldName, features);
         }
 
         JSONObject object = jsonReader.read(JSONObject.class);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderMisc.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.util.Fnv;
 
+import java.lang.reflect.Type;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 
@@ -19,7 +20,7 @@ public ObjectReaderMisc(Class objectClass) {
     }
 
     @Override
-    public Object readObject(JSONReader jsonReader, long features) {
+    public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderSeeAlso.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.util.Fnv;
 
+import java.lang.reflect.Type;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.Supplier;
@@ -71,7 +72,7 @@ public ObjectReader autoType(ObjectReaderProvider provider, long typeHash) {
     }
 
     @Override
-    public T readObject(JSONReader jsonReader, long features) {
+    public T readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.isString()) {
             long valueHashCode = jsonReader.readValueHashCode();
 
@@ -96,6 +97,6 @@ public T readObject(JSONReader jsonReader, long features) {
             throw new JSONException(jsonReader.info("not support input " + strVal));
         }
 
-        return super.readObject(jsonReader, features);
+        return super.readObject(jsonReader, fieldType, fieldName, features);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -225,7 +225,7 @@ public static <T> T cast(Object obj, Class<T> targetClass) {
             ObjectReader objectReader = JSONFactory
                     .getDefaultObjectReaderProvider()
                     .getObjectReader(targetClass);
-            return (T) objectReader.readObject(jsonReader, 0);
+            return (T) objectReader.readObject(jsonReader, null, null, 0);
         }
 
         if (targetClass.isEnum()) {

File: core/src/test/java/com/alibaba/fastjson2/JSONTest_register.java
Patch:
@@ -53,7 +53,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
     public static class VOReader
             implements ObjectReader<VO> {
-        public VO readObject(JSONReader jsonReader, long features) {
+        public VO readObject(JSONReader jsonReader, Type fieldType, Object fieldName1, long features) {
             jsonReader.nextIfObjectStart();
 
             int id = 0;

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONType_deserializer.java
Patch:
@@ -7,6 +7,8 @@
 import com.alibaba.fastjson2.reader.ObjectReaderCreator;
 import org.junit.jupiter.api.Test;
 
+import java.lang.reflect.Type;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class JSONType_deserializer {
@@ -26,7 +28,7 @@ public static class Bean {
     public static class BeanReader
             implements ObjectReader<Bean> {
         @Override
-        public Bean readObject(JSONReader jsonReader, long features) {
+        public Bean readObject(JSONReader jsonReader, Type fieldType, Object fieldName0, long features) {
             Bean bean = new Bean();
             jsonReader.nextIfObjectStart();
             for (; ; ) {

File: core/src/test/java/com/alibaba/fastjson2/annotation/UsingTest.java
Patch:
@@ -36,7 +36,7 @@ public long getFeatures() {
         }
 
         @Override
-        public Object readObject(JSONReader jsonReader, long features) {
+        public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
             String str = jsonReader.readString();
             str = str.replace("元", "");
             return Integer.parseInt(str);

File: core/src/test/java/com/alibaba/fastjson2/codec/RefTest3.java
Patch:
@@ -39,7 +39,7 @@ public void test_ref_0_creators() {
             assertSame(obj, obj.get("ref"));
 
             ObjectReader<B> objectReader = creator.createObjectReader(B.class);
-            B b = objectReader.readJSONBObject(JSONReader.ofJSONB(bytes), 0);
+            B b = objectReader.readJSONBObject(JSONReader.ofJSONB(bytes), null, null, 0);
 
             assertSame(b, b.ref);
 

File: core/src/test/java/com/alibaba/fastjson2/hsf/HSFTest.java
Patch:
@@ -58,7 +58,7 @@ public void test_2() {
         reader.getContext().config(JSONReader.Feature.SupportAutoType);
         ObjectReader objectReader = reader.getObjectReader(Object.class);
 
-        ComponentProtocol object = (ComponentProtocol) objectReader.readJSONBObject(reader, 0);
+        ComponentProtocol object = (ComponentProtocol) objectReader.readJSONBObject(reader, null, null, 0);
         reader.handleResolveTasks(object);
 
         assertNotNull(protocol.getData());

File: core/src/test/java/com/alibaba/fastjson2/read/ObjectReaderProviderTest.java
Patch:
@@ -82,7 +82,7 @@ public static class Bean {
     public static class BeanReader
             implements ObjectReader {
         @Override
-        public Object readObject(JSONReader jsonReader, long features) {
+        public Object readObject(JSONReader jsonReader, java.lang.reflect.Type fieldType, Object fieldName, long features) {
             return null;
         }
     }

File: core/src/test/java/com/alibaba/fastjson2/reader/FieldReaderListFuncTest.java
Patch:
@@ -103,7 +103,7 @@ public void test1_jsonb() {
         JSONObject object = JSONObject.of("id", 123, "values", Arrays.asList(101L, 102L));
         byte[] jsonbBytes = JSONB.toBytes(object);
         ObjectReader<Bean1> objectReader = TestUtils.createObjectReaderLambda(Bean1.class);
-        Bean1 bean1 = objectReader.readJSONBObject(JSONReader.ofJSONB(jsonbBytes), 0);
+        Bean1 bean1 = objectReader.readJSONBObject(JSONReader.ofJSONB(jsonbBytes), null, null, 0);
         assertEquals(101L, bean1.values.get(0));
         assertEquals(102L, bean1.values.get(1));
     }

File: core/src/test/java/com/alibaba/fastjson2/reader/FieldReaderListMethodTest.java
Patch:
@@ -77,7 +77,7 @@ public void test1_jsonb() {
         JSONObject object = JSONObject.of("id", 123, "values", Arrays.asList(101L, 102L));
         byte[] jsonbBytes = JSONB.toBytes(object);
         ObjectReader<Bean1> objectReader = JSONFactory.getDefaultObjectReaderProvider().getObjectReader(Bean1.class);
-        Bean1 bean1 = objectReader.readJSONBObject(JSONReader.ofJSONB(jsonbBytes), 0);
+        Bean1 bean1 = objectReader.readJSONBObject(JSONReader.ofJSONB(jsonbBytes), null, null, 0);
         assertEquals(101L, bean1.values.get(0));
         assertEquals(102L, bean1.values.get(1));
     }

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/mongodb/GeoJsonPointReader.java
Patch:
@@ -6,6 +6,8 @@
 import com.alibaba.fastjson2.util.Fnv;
 import org.springframework.data.mongodb.core.geo.GeoJsonPoint;
 
+import java.lang.reflect.Type;
+
 public class GeoJsonPointReader
         implements ObjectReader<GeoJsonPoint> {
     public static final GeoJsonPointReader INSTANCE = new GeoJsonPointReader();
@@ -18,7 +20,7 @@ public GeoJsonPointReader() {
     }
 
     @Override
-    public GeoJsonPoint readObject(JSONReader jsonReader, long features) {
+    public GeoJsonPoint readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/mongodb/GeoJsonPolygonReader.java
Patch:
@@ -8,6 +8,7 @@
 import org.springframework.data.mongodb.core.geo.GeoJsonLineString;
 import org.springframework.data.mongodb.core.geo.GeoJsonPolygon;
 
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -23,7 +24,7 @@ public GeoJsonPolygonReader() {
     }
 
     @Override
-    public GeoJsonPolygon readObject(JSONReader jsonReader, long features) {
+    public GeoJsonPolygon readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         if (jsonReader.nextIfNull()) {
             return null;
         }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/Fastjson1xReaderModule.java
Patch:
@@ -28,7 +28,7 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
     static class JSONImpl
             implements ObjectReader {
         @Override
-        public Object readObject(JSONReader jsonReader, long features) {
+        public Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
             if (jsonReader.isObject()) {
                 return jsonReader.read(JSONObject.class);
             }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -351,7 +351,7 @@ public JSONObject getJSONObject(int index) {
             if (objectReader == null) {
                 objectReader = reader.getObjectReader(JSONObject.class);
             }
-            return objectReader.readObject(reader, 0);
+            return objectReader.readObject(reader, null, null, 0);
         }
 
         if (value instanceof Map) {
@@ -750,7 +750,7 @@ public JSONArray getJSONArray(int index) {
             if (arrayReader == null) {
                 arrayReader = reader.getObjectReader(JSONArray.class);
             }
-            return arrayReader.readObject(reader, 0);
+            return arrayReader.readObject(reader, null, null, 0);
         }
 
         if (value instanceof List) {
@@ -787,7 +787,7 @@ public <T> T getObject(int index, Class<T> clazz) {
                     .setDateFormat(defaultDateFormat);
         }
 
-        return (T) objectReader.readObject(jsonReader);
+        return (T) objectReader.readObject(jsonReader, null, null, 0);
     }
 
     public <T> List<T> toJavaList(Class<T> clazz) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/deserializer/ObjectDeserializer.java
Patch:
@@ -11,9 +11,9 @@
 public interface ObjectDeserializer
         extends ObjectReader {
     @Override
-    default Object readObject(JSONReader jsonReader, long features) {
+    default Object readObject(JSONReader jsonReader, Type fieldType, Object fieldName, long features) {
         DefaultJSONParser parser = new DefaultJSONParser(jsonReader, ParserConfig.global);
-        return deserialze(parser, null, null);
+        return deserialze(parser, fieldType, fieldName);
     }
 
     <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -1636,7 +1636,7 @@ public void writeBinary(byte[] bytes) {
             return;
         }
 
-        ensureCapacity(off + 5 + bytes.length);
+        ensureCapacity(off + 6 + bytes.length);
         this.bytes[off++] = BC_BINARY;
         writeInt32(bytes.length);
 

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue389.java
Patch:
@@ -66,6 +66,7 @@ public void test() {
         assertNull(JSON.parseObject((InputStream) null, Object.class));
         assertNull(JSON.parseObject((Reader) null, Object.class));
         assertNull(JSON.parseObject((URL) null, Object.class));
+        assertNull(JSON.parseObject((URL) null, (Type) Object.class));
         assertNull(JSON.parseObject((URL) null, (Function) null));
 
         assertNull(JSON.parseObject("", Object.class));

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue529.java
Patch:
@@ -31,6 +31,5 @@ public static class Sku {
     }
 
     public static class PriceDetailDTO {
-
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -374,7 +374,7 @@ public long readFieldNameHashCode() {
             if (ch == '}' || isNull()) {
                 return -1;
             }
-            throw new JSONException("illegal character " + ch);
+            throw new JSONException(info("illegal character " + ch));
         }
 
         final char quote = ch;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1572.java
Patch:
@@ -22,9 +22,9 @@ public void test_for_issue() throws Exception {
         Set<String> paths = pathValues.keySet();
 
         assertEquals(3, paths.size());
-        assertEquals("1001", pathValues.get("/id"));
-        assertEquals("1001", pathValues.get("/name"));
-        assertSame(person, pathValues.get("/"));
+        assertEquals("1001", pathValues.get("$.id"));
+        assertEquals("1001", pathValues.get("$.name"));
+        assertSame(person, pathValues.get("$"));
     }
 
     public static class Person {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueField.java
Patch:
@@ -28,6 +28,7 @@ public Object readFieldValue(JSONReader jsonReader) {
         return str == null || str.isEmpty() ? '\0' : str.charAt(0);
     }
 
+    @Override
     public void accept(T object, Object value) {
         char charValue;
         if (value instanceof String) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueFunc.java
Patch:
@@ -28,6 +28,7 @@ public void accept(T object, char value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         char charValue;
         if (value instanceof String) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateFunc.java
Patch:
@@ -33,6 +33,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public void accept(T object, Date value) {
         function.accept(object, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderImplDate.java
Patch:
@@ -154,6 +154,7 @@ public ObjectReader getObjectReader(JSONReader jsonReader) {
 
     public abstract void accept(T object, Date value);
 
+    @Override
     public void accept(T object, long value) {
         accept(object, new Date(value));
     }
@@ -162,7 +163,7 @@ public void accept(T object, long value) {
     public void accept(T object, Object value) {
         if (value instanceof String) {
             String str = (String) value;
-            if (str.isEmpty() || str.equals("null")) {
+            if (str.isEmpty() || "null".equals(str)) {
                 accept(object, null);
                 return;
             }
@@ -204,7 +205,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         } else {
             if (format != null) {
                 String str = jsonReader.readString();
-                if (str.isEmpty() || str.equals("null")) {
+                if (str.isEmpty() || "null".equals(str)) {
                     fieldValue = null;
                 } else {
                     long millis;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicIntegerArray.java
Patch:
@@ -18,6 +18,7 @@ public Class getObjectClass() {
         return AtomicIntegerArray.class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         AtomicIntegerArray array = new AtomicIntegerArray(collection.size());
         int index = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicLongArray.java
Patch:
@@ -18,6 +18,7 @@ public Class getObjectClass() {
         return AtomicLongArray.class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         AtomicLongArray array = new AtomicLongArray(collection.size());
         int index = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -93,7 +93,7 @@ private Object readDate(JSONReader jsonReader) {
             ZonedDateTime zdt;
             if (formatter != null) {
                 String str = jsonReader.readString();
-                if (str.isEmpty() || str.equals("null")) {
+                if (str.isEmpty() || "null".equals(str)) {
                     return null;
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -730,7 +730,7 @@ public static boolean toBooleanValue(Object value) {
 
         if (value instanceof String) {
             String str = (String) value;
-            if (str.isEmpty() || str.equals("null")) {
+            if (str.isEmpty() || "null".equals(str)) {
                 return false;
             }
             return Boolean.parseBoolean(str);
@@ -760,7 +760,7 @@ public static Boolean toBoolean(Object value) {
 
         if (value instanceof String) {
             String str = (String) value;
-            if (str.isEmpty() || str.equals("null")) {
+            if (str.isEmpty() || "null".equals(str)) {
                 return null;
             }
             return Boolean.parseBoolean(str);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -324,6 +324,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         jsonWriter.endObject();
     }
 
+    @Override
     public boolean writeTypeInfo(JSONWriter jsonWriter) {
         if (jsonWriter.isUTF8()) {
             jsonWriter.writeNameRaw(typeInfoUTF8);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueField.java
Patch:
@@ -28,6 +28,7 @@ public Object readFieldValue(JSONReader jsonReader) {
         return str == null || str.isEmpty() ? '\0' : str.charAt(0);
     }
 
+    @Override
     public void accept(T object, Object value) {
         char charValue;
         if (value instanceof String) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueFunc.java
Patch:
@@ -28,6 +28,7 @@ public void accept(T object, char value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         char charValue;
         if (value instanceof String) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateFunc.java
Patch:
@@ -33,6 +33,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public void accept(T object, Date value) {
         function.accept(object, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderImplDate.java
Patch:
@@ -154,6 +154,7 @@ public ObjectReader getObjectReader(JSONReader jsonReader) {
 
     public abstract void accept(T object, Date value);
 
+    @Override
     public void accept(T object, long value) {
         accept(object, new Date(value));
     }
@@ -162,7 +163,7 @@ public void accept(T object, long value) {
     public void accept(T object, Object value) {
         if (value instanceof String) {
             String str = (String) value;
-            if (str.isEmpty() || str.equals("null")) {
+            if (str.isEmpty() || "null".equals(str)) {
                 accept(object, null);
                 return;
             }
@@ -204,7 +205,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         } else {
             if (format != null) {
                 String str = jsonReader.readString();
-                if (str.isEmpty() || str.equals("null")) {
+                if (str.isEmpty() || "null".equals(str)) {
                     fieldValue = null;
                 } else {
                     long millis;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicIntegerArray.java
Patch:
@@ -18,6 +18,7 @@ public Class getObjectClass() {
         return AtomicIntegerArray.class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         AtomicIntegerArray array = new AtomicIntegerArray(collection.size());
         int index = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicLongArray.java
Patch:
@@ -18,6 +18,7 @@ public Class getObjectClass() {
         return AtomicLongArray.class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         AtomicLongArray array = new AtomicLongArray(collection.size());
         int index = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -93,7 +93,7 @@ private Object readDate(JSONReader jsonReader) {
             ZonedDateTime zdt;
             if (formatter != null) {
                 String str = jsonReader.readString();
-                if (str.isEmpty() || str.equals("null")) {
+                if (str.isEmpty() || "null".equals(str)) {
                     return null;
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -730,7 +730,7 @@ public static boolean toBooleanValue(Object value) {
 
         if (value instanceof String) {
             String str = (String) value;
-            if (str.isEmpty() || str.equals("null")) {
+            if (str.isEmpty() || "null".equals(str)) {
                 return false;
             }
             return Boolean.parseBoolean(str);
@@ -760,7 +760,7 @@ public static Boolean toBoolean(Object value) {
 
         if (value instanceof String) {
             String str = (String) value;
-            if (str.isEmpty() || str.equals("null")) {
+            if (str.isEmpty() || "null".equals(str)) {
                 return null;
             }
             return Boolean.parseBoolean(str);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -324,6 +324,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         jsonWriter.endObject();
     }
 
+    @Override
     public boolean writeTypeInfo(JSONWriter jsonWriter) {
         if (jsonWriter.isUTF8()) {
             jsonWriter.writeNameRaw(typeInfoUTF8);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -416,8 +416,7 @@ public long readFieldNameHashCodeUnquote() {
                     ch = EOI;
                     break;
                 } else {
-                    offset++;
-                    ch = str.charAt(offset);
+                    ch = str.charAt(offset++);
                 }
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -357,8 +357,7 @@ public long readFieldNameHashCodeUnquote() {
                     ch = EOI;
                     break;
                 } else {
-                    offset++;
-                    ch = (char) bytes[offset];
+                    ch = (char) bytes[offset++];
                 }
             }
         }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue117.java
Patch:
@@ -3,13 +3,14 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.JSONPath;
+import com.alibaba.fastjson2.JSONReader;
 import org.junit.jupiter.api.Test;
 
 public class Issue117 {
     @Test
     public void test() {
         String text = ("{code:1,msg:'Hello world',data:{list:[1,2,3,4,5], ary2:[{a:2},{a:3,b:{c:'ddd'}}]}}");
-        JSONObject obj = JSON.parseObject(text);
+        JSONObject obj = JSON.parseObject(text, JSONReader.Feature.AllowUnQuotedFieldNames);
 
         JSONPath.eval(obj, "$..ary2[0].a");
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -197,7 +197,7 @@ default long getItemClassHash() {
     }
 
     default ObjectReader getItemObjectReader(JSONReader.Context ctx) {
-        throw new UnsupportedOperationException();
+        return ctx.getObjectReader(Object.class);
     }
 
     default ObjectReader getItemObjectReader(JSONReader jsonReader) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1503.java
Patch:
@@ -17,7 +17,7 @@ public void test_for_issue() throws Exception {
         map.put(null, new Bean());
         Map<Long, Bean> rmap = (Map<Long, Bean>) JSON.parse(JSON.toJSONString(map, JSONWriter.Feature.WriteClassName));
         String json = JSON.toJSONString(rmap);
-        assertEquals("{\"null\":{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1500.Issue1503$Bean\"}}", json);
+        assertEquals("{\"@type\":\"java.util.HashMap\",\"null\":{\"@type\":\"com.alibaba.fastjson2.v1issues.issue_1500.Issue1503$Bean\"}}", json);
     }
 
     public static class Bean {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3300/Issue3347.java
Patch:
@@ -21,6 +21,6 @@ public void test_for_issue() throws Exception {
         String mapJSONString = JSON.toJSONString(map);
         Map mapValues = JSONObject.parseObject(mapJSONString, Map.class);
         Object mapKey = mapValues.keySet().iterator().next();
-        assertTrue(mapKey instanceof String);
+        assertTrue(mapKey instanceof Integer);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2000/Issue2012.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() {
         String str = JSON.toJSONString(foo, SerializerFeature.WriteClassName);
         assertEquals("{\"@type\":\"com.alibaba.fastjson.issue_2000.Issue2012$Model\",\"bytes\":[]}", str);
 
-        foo = JSON.parseObject(str, Object.class, Feature.SupportAutoType);
+        foo = (Model) JSON.parseObject(str, Object.class, Feature.SupportAutoType);
         assertEquals(0, foo.bytes.length);
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2736.java
Patch:
@@ -1,12 +1,13 @@
 package com.alibaba.fastjson.issue_2700;
 
 import com.alibaba.fastjson.JSONObject;
+import com.alibaba.fastjson.parser.Feature;
 import org.junit.jupiter.api.Test;
 
 public class Issue2736 {
     @Test
     public void test_for_issue() throws Exception {
-        JSONObject s = JSONObject.parseObject("{1:2,3:4}");
+        JSONObject s = JSONObject.parseObject("{1:2,3:4}", Feature.NonStringKeyAsString);
         for (String s1 : s.keySet()) {
             System.out.println(s1);
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3300/Issue3347.java
Patch:
@@ -21,6 +21,6 @@ public void test_for_issue() throws Exception {
         String mapJSONString = JSON.toJSONString(map);
         Map mapValues = JSONObject.parseObject(mapJSONString, Map.class);
         Object mapKey = mapValues.keySet().iterator().next();
-        assertTrue(mapKey instanceof String);
+        assertTrue(mapKey instanceof Integer);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1385,8 +1385,7 @@ public void read(Map object, long features) {
                     value = readBoolValue();
                     break;
                 case 'n':
-                    readNull();
-                    value = null;
+                    value = readNullOrNewDate();
                     break;
                 case '/':
                     next();

File: extension/src/main/java/com/alibaba/fastjson2/support/odps/JSONExtractInt32.java
Patch:
@@ -19,7 +19,7 @@ public JSONExtractInt32(String path) {
 
     public IntWritable eval(Text input) {
         JSONReader parser = JSONReader.of(input.getBytes(), 0, input.getLength(), StandardCharsets.UTF_8);
-        int value = path.extractInt32(parser);
+        int value = path.extractInt32Value(parser);
         if (parser.wasNull()) {
             return null;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -93,7 +93,7 @@ private Object readDate(JSONReader jsonReader) {
             ZonedDateTime zdt;
             if (formatter != null) {
                 String str = jsonReader.readString();
-                if (str.isEmpty()) {
+                if (str.isEmpty() || str.equals("null")) {
                     return null;
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolFunc.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.schema.JSONSchema;
+import com.alibaba.fastjson2.util.TypeUtils;
 
 import java.lang.reflect.Method;
 import java.util.Locale;
@@ -25,7 +26,8 @@ public Method getMethod() {
 
     @Override
     public void accept(T object, Object value) {
-        function.accept(object, (V) value);
+        Boolean booleanValue = TypeUtils.toBoolean(value);
+        function.accept(object, (V) booleanValue);
     }
 
     @Override

File: core/src/test/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalFuncTest.java
Patch:
@@ -8,8 +8,7 @@
 
 import java.math.BigDecimal;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class FieldReaderBigDecimalFuncTest {
     @Test
@@ -19,6 +18,7 @@ public void test() {
         FieldReader fieldReader = objectReader.getFieldReader("value");
         fieldReader.accept(bean, "123");
         assertEquals(new BigDecimal("123"), bean.value);
+        assertNotNull(fieldReader.getMethod());
 
         assertThrows(JSONException.class, () -> fieldReader.accept(bean, new Object()));
 

File: core/src/test/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerFuncTest.java
Patch:
@@ -8,8 +8,7 @@
 
 import java.math.BigInteger;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class FieldReaderBigIntegerFuncTest {
     @Test
@@ -19,6 +18,7 @@ public void test() {
         FieldReader fieldReader = objectReader.getFieldReader("value");
         fieldReader.accept(bean, "123");
         assertEquals(new BigInteger("123"), bean.value);
+        assertNotNull(fieldReader.getMethod());
 
         assertThrows(JSONException.class, () -> fieldReader.accept(bean, new Object()));
 

File: core/src/test/java/com/alibaba/fastjson2/TestUtils.java
Patch:
@@ -45,6 +45,8 @@ public static JSONWriter[] createJSONWriters() {
     public static ObjectReaderCreator READER_CREATOR = ObjectReaderCreatorASM.INSTANCE;
     public static ObjectWriterCreator WRITER_CREATOR = ObjectWriterCreatorASM.INSTANCE;
 
+    public static ObjectReaderCreator READER_CREATOR_LAMBDA = ObjectReaderCreatorLambda.INSTANCE;
+
     public static ObjectReaderCreator readerCreator(ClassLoader classLoader) {
         return new ObjectReaderCreatorASM(classLoader);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanFieldReadOnly.java
Patch:
@@ -35,6 +35,9 @@ public void accept(T object, Object value) {
 
         try {
             AtomicBoolean atomic = (AtomicBoolean) field.get(object);
+            if (value instanceof AtomicBoolean) {
+                value = ((AtomicBoolean) value).get();
+            }
             atomic.set((Boolean) value);
         } catch (Exception e) {
             throw new JSONException("set " + fieldName + " error", e);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanMethodReadOnly.java
Patch:
@@ -35,6 +35,9 @@ public void accept(T object, Object value) {
 
         try {
             AtomicBoolean atomic = (AtomicBoolean) method.invoke(object);
+            if (value instanceof AtomicBoolean) {
+                value = ((AtomicBoolean) value).get();
+            }
             atomic.set((Boolean) value);
         } catch (Exception e) {
             throw new JSONException("set " + fieldName + " error", e);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongReadOnly.java
Patch:
@@ -35,7 +35,8 @@ public void accept(T object, Object value) {
 
         try {
             AtomicLong atomic = (AtomicLong) method.invoke(object);
-            atomic.set((Long) value);
+            long longValue = ((Number) value).longValue();
+            atomic.set(longValue);
         } catch (Exception e) {
             throw new JSONException("set " + fieldName + " error", e);
         }

File: core/src/main/java/com/alibaba/fastjson2/codegen/package-info.java
Patch:
@@ -1 +0,0 @@
-package com.alibaba.fastjson2.codegen;

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1831,7 +1831,9 @@ public BigDecimal getBigDecimal() {
                         : new int[]{mag1, mag2, mag3}
                         : new int[]{mag0, mag1, mag2, mag3};
                 BigInteger bigInt = getBigInt(negative, mag);
-                return new BigDecimal(bigInt, scale);
+                int adjustedScale = scale - exponent;
+                BigDecimal decimal = new BigDecimal(bigInt, adjustedScale);
+                return decimal;
             }
             case JSON_TYPE_BIG_DEC: {
                 return new BigDecimal(stringValue);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1323,6 +1323,7 @@ public byte[] getBytes() {
         return Arrays.copyOf(utf8, utf8Length);
     }
 
+    @Override
     public void writeRaw(byte[] bytes) {
         throw new JSONException("UnsupportedOperation");
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -1409,6 +1409,7 @@ static void formatUnsignedLong0(long val, byte[] buf, int offset, int len) { //
         } while (charPos > offset);
     }
 
+    @Override
     public int flushTo(OutputStream out, Charset charset) throws IOException {
         if (charset != null && charset != StandardCharsets.UTF_8) {
             throw new JSONException("UnsupportedOperation");

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/ContextValueFilter.java
Patch:
@@ -2,6 +2,7 @@
 
 public interface ContextValueFilter
         extends com.alibaba.fastjson2.filter.ContextValueFilter, SerializeFilter {
+    @Override
     default Object process(com.alibaba.fastjson2.filter.BeanContext context, Object object, String name, Object value) {
         return process(new com.alibaba.fastjson.serializer.BeanContext(context), object, name, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplGenericArray.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.util.TypeUtils;
 
 import java.lang.reflect.Array;
+import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.List;
@@ -15,8 +16,8 @@ class ObjectReaderImplGenericArray
     final Class<?> componentClass;
     ObjectReader itemObjectReader;
 
-    public ObjectReaderImplGenericArray(Type itemType) {
-        this.itemType = itemType;
+    public ObjectReaderImplGenericArray(GenericArrayType genericType) {
+        this.itemType = genericType.getGenericComponentType();
         this.componentClass = TypeUtils.getMapping(itemType);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/util/JDKUtils.java
Patch:
@@ -127,7 +127,7 @@ public class JDKUtils {
     }
 
     public static boolean isSQLDataSourceOrRowSet(Class type) {
-        return (CLASS_SQL_DATASOURCE != null && CLASS_SQL_ROW_SET.isAssignableFrom(type))
+        return (CLASS_SQL_DATASOURCE != null && CLASS_SQL_DATASOURCE.isAssignableFrom(type))
                 || (CLASS_SQL_ROW_SET != null && CLASS_SQL_ROW_SET.isAssignableFrom(type));
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -1323,6 +1323,7 @@ public byte[] getBytes() {
         return Arrays.copyOf(utf8, utf8Length);
     }
 
+    @Override
     public void writeRaw(byte[] bytes) {
         throw new JSONException("UnsupportedOperation");
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -1409,6 +1409,7 @@ static void formatUnsignedLong0(long val, byte[] buf, int offset, int len) { //
         } while (charPos > offset);
     }
 
+    @Override
     public int flushTo(OutputStream out, Charset charset) throws IOException {
         if (charset != null && charset != StandardCharsets.UTF_8) {
             throw new JSONException("UnsupportedOperation");

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/ContextValueFilter.java
Patch:
@@ -2,6 +2,7 @@
 
 public interface ContextValueFilter
         extends com.alibaba.fastjson2.filter.ContextValueFilter, SerializeFilter {
+    @Override
     default Object process(com.alibaba.fastjson2.filter.BeanContext context, Object object, String name, Object value) {
         return process(new com.alibaba.fastjson.serializer.BeanContext(context), object, name, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2;
 
+import com.alibaba.fastjson2.function.impl.ToDouble;
 import com.alibaba.fastjson2.reader.*;
 import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.IOUtils;
@@ -2921,7 +2922,7 @@ public void eval(Context context) {
     }
 
     static FunctionSegment FUNCTION_TYPE = new FunctionSegment(JSONPath::type);
-    static FunctionSegment FUNCTION_DOUBLE = new FunctionSegment(new TypeConverts.ToDouble(null));
+    static FunctionSegment FUNCTION_DOUBLE = new FunctionSegment(new ToDouble(null));
     static FunctionSegment FUNCTION_FLOOR = new FunctionSegment(JSONPath::floor);
     static FunctionSegment FUNCTION_CEIL = new FunctionSegment(JSONPath::ceil);
     static FunctionSegment FUNCTION_ABS = new FunctionSegment(JSONPath::abs);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -7,6 +7,7 @@
 import com.alibaba.fastjson2.annotation.JSONType;
 import com.alibaba.fastjson2.codec.BeanInfo;
 import com.alibaba.fastjson2.codec.FieldInfo;
+import com.alibaba.fastjson2.function.impl.*;
 import com.alibaba.fastjson2.modules.ObjectReaderAnnotationProcessor;
 import com.alibaba.fastjson2.modules.ObjectReaderModule;
 import com.alibaba.fastjson2.support.money.MoneySupport;
@@ -27,8 +28,6 @@
 import java.util.concurrent.atomic.*;
 import java.util.function.Function;
 
-import static com.alibaba.fastjson2.reader.TypeConverts.*;
-
 public class ObjectReaderBaseModule
         implements ObjectReaderModule {
     final ObjectReaderProvider provider;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBigDecimal.java
Patch:
@@ -1,14 +1,15 @@
 package com.alibaba.fastjson2.reader;
 
 import com.alibaba.fastjson2.JSONReader;
+import com.alibaba.fastjson2.function.impl.ToBigDecimal;
 
 import java.math.BigDecimal;
 import java.util.Map;
 import java.util.function.Function;
 
 final class ObjectReaderImplBigDecimal
         extends ObjectReaderBaseModule.PrimitiveImpl {
-    private Function converter = new TypeConverts.ToBigDecimal();
+    private Function converter = new ToBigDecimal();
     static final ObjectReaderImplBigDecimal INSTANCE = new ObjectReaderImplBigDecimal();
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/modules/ObjectReaderAnnotationProcessor.java
Patch:
@@ -18,7 +18,7 @@ default void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Field field) {
     default void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Constructor constructor, int paramIndex, Parameter parameter) {
     }
 
-    default void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method, int paremIndex, Parameter parameter) {
+    default void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method, int paramIndex, Parameter parameter) {
     }
 
     default void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -50,7 +50,7 @@ public void accept(T object, Object value) {
             throw new JSONException("set " + fieldName + " error", e);
         }
 
-        if (map == Collections.EMPTY_MAP) {
+        if (map == Collections.EMPTY_MAP || map == null) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -1671,7 +1671,7 @@ public <T> FieldReader<T> createFieldReader(
 
                 if (actualTypeArguments.length == 2) {
                     if (finalField && (!JDKUtils.UNSAFE_SUPPORT || (features & JSONReader.Feature.FieldBased.mask) == 0)) {
-                        return new FielderReaderImplMapFieldReadOnly(fieldName, fieldTypeResolved, fieldClassResolved, ordinal, features, format, jsonSchema, field);
+                        return new FieldReaderMapFieldReadOnly(fieldName, fieldTypeResolved, fieldClassResolved, ordinal, features, format, jsonSchema, field);
                     }
                 }
             }

File: core/src/test/java/com/alibaba/fastjson2_demo/ASMCodeGen.java
Patch:
@@ -17,7 +17,7 @@ public void gen() {
         List<String> propertyNames = new ArrayList<>();
         methods.forEach(
                 e -> propertyNames.add(
-                        BeanUtils.setterName(e.getName())));
+                        BeanUtils.setterName(e.getName(), null)));
 
         long[] hashCodes = new long[propertyNames.size()];
         for (int i = 0; i < propertyNames.size(); i++) {
@@ -33,7 +33,7 @@ public void gen() {
         }
         Map<Integer, List<Long>> map = new HashMap<>();
         BeanUtils.setters(Int1000.class, e -> {
-            String propertyName = BeanUtils.setterName(e.getName());
+            String propertyName = BeanUtils.setterName(e.getName(), null);
             long hashCode64 = Fnv.hashCode64(propertyName);
             int hashCode32 = (int) (hashCode64 ^ (hashCode64 >>> 32));
             List<Long> relatedHashCodes = map.get(hashCode32);

File: core/src/test/java/com/alibaba/fastjson2/schema/JSONSchemaResourceTest.java
Patch:
@@ -209,7 +209,7 @@ private void validate(int i, int j, Object object, JSONSchema schema, JSONArray
         try {
             result = schema.validate(data);
         } catch (Exception ex) {
-            throw new JSONSchemaValidException("schema " + i + ", test " + j + " valid error, " + description, ex);
+            throw new JSONSchemaValidException("schema " + i + ", test " + j + " valid error, " + description);
         }
 
         if (result.isSuccess() != valid) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -5033,6 +5033,9 @@ public boolean isReference() {
 
     @Override
     public String readReference() {
+        if (referenceBegin == end) {
+            return null;
+        }
         this.offset = referenceBegin;
         this.ch = str.charAt(this.offset++);
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -176,6 +176,9 @@ public boolean isReference() {
 
     @Override
     public String readReference() {
+        if (referenceBegin == end) {
+            return null;
+        }
         this.offset = referenceBegin;
         this.ch = chars[offset++];
 

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue416.java
Patch:
@@ -20,6 +20,7 @@ public void test() {
         localTest1.setLocalDate(localDateTime.toLocalDate());
         localTest1.setLocalTime(localDateTime.toLocalTime());
         localTest1.setLocalDateTime(localDateTime);
+
         LocalTest localTest2 = JSON.parseObject(JSON.toJSONString(localTest1), LocalTest.class);
 
         assertEquals(localTest1.getLocalDate(), localTest2.getLocalDate());

File: core/src/test/java/com/alibaba/fastjson2/JSONObjectTest.java
Patch:
@@ -1296,6 +1296,7 @@ public static class Bean {
     public void testCompatible() {
         assertEquals(0, JSONObject.parseObject("{}").size());
         assertEquals(101, JSONObject.parseObject("{\"id\":101}", Bean.class).id);
+        assertEquals(101, JSONObject.parseObject("{\"ID\":101}", Bean.class, JSONReader.Feature.SupportSmartMatch).id);
         assertEquals(0, JSONArray.parseArray("[]").size());
     }
 }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/Feature.java
Patch:
@@ -151,7 +151,8 @@ public enum Feature {
     /**
      * @since 2.0.6
      */
-    ErrorOnNotSupportAutoType;
+    ErrorOnNotSupportAutoType,
+    UseNativeJavaObject;
 
     public final int mask;
 

File: core/src/test/java/com/alibaba/fastjson2/filter/ContextValueFilterTest.java
Patch:
@@ -18,10 +18,10 @@ public void test() throws Exception {
 
         ContextValueFilter filter = (BeanContext context, Object object, String name, Object value) -> {
             contextReference.set(context);
-            return value;
+            return ((Integer) value).intValue() + 1;
         };
 
-        JSON.toJSONString(bean, filter);
+        assertEquals("{\"userId\":11}", JSON.toJSONString(bean, filter));
 
         BeanContext context = contextReference.get();
         assertEquals(Bean.class, context.getBeanClass());

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -3160,6 +3160,7 @@ public LocalDateTime readLocalDateTime() {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     protected LocalDateTime readLocalDateTime16() {
         throw new UnsupportedOperationException();
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -148,6 +148,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         if (ch != c0) {
             return false;
@@ -184,6 +185,7 @@ public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2, char c3, char c4, char c5) {
         if (ch != c0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -500,6 +500,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         if (ch != c0) {
             return false;
@@ -536,6 +537,7 @@ public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2, char c3, char c4, char c5) {
         if (ch != c0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5553,6 +5553,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         if (ch != c0) {
             return false;
@@ -5589,6 +5590,7 @@ public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2, char c3, char c4, char c5) {
         if (ch != c0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -1758,6 +1758,7 @@ public void writeDateTime19(
         writeInt32(nano);
     }
 
+    @Override
     public void writeDateTimeISO8601(
             int year,
             int month,

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -958,6 +958,7 @@ public void writeDateTime19(
         bytes[off++] = '"';
     }
 
+    @Override
     public void writeLocalDate(LocalDate date) {
         int year = date.getYear();
         int month = date.getMonthValue();
@@ -1382,10 +1383,12 @@ public void writeDecimal(BigDecimal value) {
         }
     }
 
+    @Override
     public void writeNameRaw(char[] chars) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public void writeNameRaw(char[] bytes, int offset, int len) {
         throw new UnsupportedOperationException();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -785,6 +785,7 @@ public LRUAutoTypeCache(int maxSize) {
             this.maxSize = maxSize;
         }
 
+        @Override
         protected boolean removeEldestEntry(Map.Entry<String, Date> eldest) {
             return this.size() > this.maxSize;
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -3160,6 +3160,7 @@ public LocalDateTime readLocalDateTime() {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     protected LocalDateTime readLocalDateTime16() {
         throw new UnsupportedOperationException();
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -148,6 +148,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         if (ch != c0) {
             return false;
@@ -184,6 +185,7 @@ public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2, char c3, char c4, char c5) {
         if (ch != c0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -500,6 +500,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         if (ch != c0) {
             return false;
@@ -536,6 +537,7 @@ public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2, char c3, char c4, char c5) {
         if (ch != c0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5553,6 +5553,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         if (ch != c0) {
             return false;
@@ -5589,6 +5590,7 @@ public boolean nextIfMatchIdent(char c0, char c1, char c2) {
         return true;
     }
 
+    @Override
     public boolean nextIfMatchIdent(char c0, char c1, char c2, char c3, char c4, char c5) {
         if (ch != c0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterJSONB.java
Patch:
@@ -1758,6 +1758,7 @@ public void writeDateTime19(
         writeInt32(nano);
     }
 
+    @Override
     public void writeDateTimeISO8601(
             int year,
             int month,

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -958,6 +958,7 @@ public void writeDateTime19(
         bytes[off++] = '"';
     }
 
+    @Override
     public void writeLocalDate(LocalDate date) {
         int year = date.getYear();
         int month = date.getMonthValue();
@@ -1382,10 +1383,12 @@ public void writeDecimal(BigDecimal value) {
         }
     }
 
+    @Override
     public void writeNameRaw(char[] chars) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public void writeNameRaw(char[] bytes, int offset, int len) {
         throw new UnsupportedOperationException();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -785,6 +785,7 @@ public LRUAutoTypeCache(int maxSize) {
             this.maxSize = maxSize;
         }
 
+        @Override
         protected boolean removeEldestEntry(Map.Entry<String, Date> eldest) {
             return this.size() > this.maxSize;
         }

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/mongodb/GeoJsonPointReader.java
Patch:
@@ -50,6 +50,7 @@ public GeoJsonPoint readObject(JSONReader jsonReader, long features) {
                 if (!match) {
                     throw new JSONException("coordinates not support input " + jsonReader.current());
                 }
+                jsonReader.nextIfMatch(',');
             } else {
                 jsonReader.skipValue();
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1446,7 +1446,8 @@ public enum Feature {
          * @since 2.0.7
          */
         NotWriteEmptyArray(1 << 25),
-        WriteNonStringKeyAsString(1 << 26);
+        WriteNonStringKeyAsString(1 << 26),
+        ErrorOnNoneSerializable(1 << 27);
 
         public final long mask;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONB.java
Patch:
@@ -851,12 +851,13 @@ static byte[] toBytes(Object object, JSONWriter.Feature... features) {
                 new JSONWriter.Context(JSONFactory.defaultObjectWriterProvider, features),
                 null
         )) {
+            JSONWriter.Context context = writer.context;
+
             if (object == null) {
                 writer.writeNull();
             } else {
                 writer.rootObject = object;
 
-                JSONWriter.Context context = writer.context;
                 if ((context.features & JSONWriter.Feature.ReferenceDetection.mask) != 0) {
                     writer.refs = new IdentityHashMap(8);
                     writer.refs.put(object, writer.path = JSONWriter.Path.ROOT);

File: core/src/main/java/com/alibaba/fastjson2/TypeReference.java
Patch:
@@ -50,7 +50,7 @@ public TypeReference() {
      * @throws NullPointerException If the {@link Type} is null
      */
     @SuppressWarnings("unchecked")
-    public TypeReference(Type type) {
+    private TypeReference(Type type, boolean raw) {
         if (type == null) {
             throw new NullPointerException();
         }
@@ -71,7 +71,7 @@ public TypeReference(Type type) {
      * @since 2.0.2
      */
     @SuppressWarnings("unchecked")
-    public TypeReference(Type[] actualTypeArguments) {
+    public TypeReference(Type... actualTypeArguments) {
         if (actualTypeArguments == null
                 || actualTypeArguments.length == 0) {
             throw new NullPointerException();
@@ -219,7 +219,7 @@ public T toJavaObject(JSONObject object, JSONReader.Feature... features) {
      * @param type specify the {@link Type} to be converted
      */
     public static TypeReference<?> get(Type type) {
-        return new TypeReference<Object>(type) {
+        return new TypeReference<Object>(type, true) {
             // nothing
         };
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterAdapter.java
Patch:
@@ -383,7 +383,7 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
                 continue;
             }
 
-            boolean nameChanged = filteredName != fieldName;
+            boolean nameChanged = filteredName != null && filteredName != fieldName;
 
             Object filteredValue;
             if (valueFilter != null

File: extension/src/test/java/com/alibaba/fastjson2/spring/mock/FastJsonHttpMessageConverterMockTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring;
+package com.alibaba.fastjson2.spring.mock;
 
 import com.alibaba.fastjson2.support.spring.http.converter.FastJsonHttpMessageConverter;
 import org.junit.jupiter.api.BeforeEach;
@@ -84,7 +84,7 @@ public String parameterizedTypeBean(@RequestBody ParameterizedTypeBean<String> p
         }
     }
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring")
+    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.mock")
     @Configuration
     @Order(Ordered.LOWEST_PRECEDENCE + 1)
     @EnableWebMvc

File: extension/src/test/java/com/alibaba/fastjson2/spring/mock/FastJsonJsonViewMockTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring;
+package com.alibaba.fastjson2.spring.mock;
 
 import com.alibaba.fastjson2.support.spring.http.converter.FastJsonHttpMessageConverter;
 import com.alibaba.fastjson2.support.spring.webservlet.view.FastJsonJsonView;
@@ -83,7 +83,7 @@ public ModelAndView test7() {
         }
     }
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring")
+    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.mock")
     @Configuration
     @Order(Ordered.LOWEST_PRECEDENCE + 1)
     @EnableWebMvc

File: extension/src/test/java/com/alibaba/fastjson2/spring/mock/FastJsonHttpMessageConverterMockTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring;
+package com.alibaba.fastjson2.spring.mock;
 
 import com.alibaba.fastjson2.support.spring.http.converter.FastJsonHttpMessageConverter;
 import org.junit.jupiter.api.BeforeEach;
@@ -84,7 +84,7 @@ public String parameterizedTypeBean(@RequestBody ParameterizedTypeBean<String> p
         }
     }
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring")
+    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.mock")
     @Configuration
     @Order(Ordered.LOWEST_PRECEDENCE + 1)
     @EnableWebMvc

File: extension/src/test/java/com/alibaba/fastjson2/spring/mock/FastJsonJsonViewMockTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring;
+package com.alibaba.fastjson2.spring.mock;
 
 import com.alibaba.fastjson2.support.spring.http.converter.FastJsonHttpMessageConverter;
 import com.alibaba.fastjson2.support.spring.webservlet.view.FastJsonJsonView;
@@ -83,7 +83,7 @@ public ModelAndView test7() {
         }
     }
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring")
+    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.mock")
     @Configuration
     @Order(Ordered.LOWEST_PRECEDENCE + 1)
     @EnableWebMvc

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue471/Issue471.java
Patch:
@@ -98,7 +98,8 @@ public void configureMessageConverters(List<HttpMessageConverter<?>> converters)
         }
     }
 
-    static class CustomizePropertyFilter implements PropertyFilter {
+    static class CustomizePropertyFilter
+            implements PropertyFilter {
         @Override
         public boolean apply(Object object, String name, Object value) {
             return true;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterAdapter.java
Patch:
@@ -383,7 +383,7 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
                 continue;
             }
 
-            boolean nameChanged = filteredName != fieldName;
+            boolean nameChanged = filteredName != null && filteredName != fieldName;
 
             Object filteredValue;
             if (valueFilter != null

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -298,7 +298,7 @@ public void writeDate(JSONWriter jsonWriter, long timeMillis) {
                     .ofInstant(
                             Instant.ofEpochMilli(timeMillis), zoneId);
 
-            if (formatISO8601 || ctx.isDateFormatISO8601()) {
+            if (formatISO8601 || (ctx.isDateFormatISO8601() && this.format == null)) {
                 int year = zdt.getYear();
                 int month = zdt.getMonthValue();
                 int dayOfMonth = zdt.getDayOfMonth();
@@ -311,7 +311,7 @@ public void writeDate(JSONWriter jsonWriter, long timeMillis) {
                 return;
             }
 
-            if (formatyyyyMMddhhmmss19 || ctx.isFormatyyyyMMddhhmmss19()) {
+            if (formatyyyyMMddhhmmss19 || (ctx.isFormatyyyyMMddhhmmss19() && this.format == null)) {
                 int year = zdt.getYear();
                 int month = zdt.getMonthValue();
                 int dayOfMonth = zdt.getDayOfMonth();

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue380.java
Patch:
@@ -51,7 +51,7 @@ public void test2() {
         bean.date = new Date(zdt.toInstant().toEpochMilli());
 
         assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean));
-        assertEquals("{\"date\":\"2017-06-28 11:12:13\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"));
+        assertEquals("{\"date\":\"2017-06-28\"}", JSON.toJSONString(bean, "yyyy-MM-dd HH:mm:ss"));
     }
 
     public static class Bean2 {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -632,7 +632,7 @@ public long readFieldNameHashCode() {
             if (ch == '}' || isNull()) {
                 return -1;
             }
-            throw new JSONException("illegal character " + ch);
+            throw new JSONException(info("illegal character " + ch));
         }
 
         final char quote = ch;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -93,6 +93,9 @@ private Object readDate(JSONReader jsonReader) {
             ZonedDateTime zdt;
             if (formatter != null) {
                 String str = jsonReader.readString();
+                if (str.isEmpty()) {
+                    return null;
+                }
 
                 LocalDateTime ldt;
                 if (!formatHasHour) {

File: core/src/test/java/com/alibaba/fastjson2/date/FormatTest.java
Patch:
@@ -11,6 +11,7 @@
 import java.time.ZonedDateTime;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class FormatTest {
     @Test
@@ -38,6 +39,8 @@ public void test() {
         assertEquals("\"2017-12-13 00:00:00\"", JSON.toJSONString(date));
         JSON.mixIn(LocalDate.class, null);
         assertEquals("\"2017-12-13\"", JSON.toJSONString(date));
+
+        assertNull(JSON.parseObject("{\"date\":\"\"}", Bean.class).date);
     }
 
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1800/Issue1892.java
Patch:
@@ -11,7 +11,7 @@
 public class Issue1892 {
     @Test
     public void test_for_issue() throws Exception {
-        assertEquals("\"2018-10-10T00:00:00\"",
+        assertEquals("\"2018-10-10T00:00:00+08:00\"",
                 JSON.toJSONString(
                         LocalDateTime.of(2018, 10, 10, 0, 0), SerializerFeature.UseISO8601DateFormat
                 )
@@ -23,6 +23,6 @@ public void test_for_issue_1() throws Exception {
         String json = JSON.toJSONString(
                 LocalDateTime.of(2018, 10, 10, 0, 0, 40, 788000000), SerializerFeature.UseISO8601DateFormat
         );
-        assertEquals("\"2018-10-10T00:00:40.788\"", json);
+        assertEquals("\"2018-10-10T00:00:40.788+08:00\"", json);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -993,7 +993,7 @@ public void writeLocalDateTime(LocalDateTime dateTime) {
             IOUtils.getChars(month, yearSize + 4, chars);
             chars[yearSize + 4] = '-';
             IOUtils.getChars(dayOfMonth, yearSize + 7, chars);
-            chars[yearSize + 7] = 'T';
+            chars[yearSize + 7] = ' ';
             IOUtils.getChars(hour, yearSize + 10, chars);
             chars[yearSize + 10] = ':';
             IOUtils.getChars(minute, yearSize + 13, chars);
@@ -1015,7 +1015,7 @@ public void writeLocalDateTime(LocalDateTime dateTime) {
             IOUtils.getChars(month, yearSize + 4, chars);
             chars[yearSize + 4] = '-';
             IOUtils.getChars(dayOfMonth, yearSize + 7, chars);
-            chars[yearSize + 7] = 'T';
+            chars[yearSize + 7] = ' ';
             IOUtils.getChars(hour, yearSize + 10, chars);
             chars[yearSize + 10] = ':';
             IOUtils.getChars(minute, yearSize + 13, chars);

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -977,7 +977,7 @@ public void writeLocalDateTime(LocalDateTime dateTime) {
         IOUtils.getChars(month, yearSize + 4, chars);
         chars[yearSize + 4] = '-';
         IOUtils.getChars(dayOfMonth, yearSize + 7, chars);
-        chars[yearSize + 7] = 'T';
+        chars[yearSize + 7] = ' ';
         IOUtils.getChars(hour, yearSize + 10, chars);
         chars[yearSize + 10] = ':';
         IOUtils.getChars(minute, yearSize + 13, chars);

File: core/src/test/java/com/alibaba/fastjson2/date/FormatTest.java
Patch:
@@ -26,7 +26,7 @@ public void test() {
         JSON.mixIn(LocalDateTime.class, null);
         JSON.mixIn(Bean.class, null);
 
-        assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02T12:13:14\"}", JSON.toJSONString(bean));
+        assertEquals("{\"date\":\"2017-12-13\",\"dateTime\":\"2017-01-02 12:13:14\"}", JSON.toJSONString(bean));
 
         JSON.mixIn(LocalDateTime.class, null);
         JSON.mixIn(Bean.class, null);

File: core/src/test/java/com/alibaba/fastjson2/date/LocalDateTimeFieldTest.java
Patch:
@@ -96,7 +96,7 @@ public void test_iso8601() {
         bean.value = ldt(1654686106602L);
 
         String str = JSON.toJSONString(bean, "iso8601");
-        assertEquals("{\"value\":\"2022-06-08T19:01:46.602\"}", str);
+        assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str);
 
         Bean bean1 = JSON.parseObject(str, Bean.class, "iso8601");
         assertEquals(1654686106602L, millis(bean1.value));
@@ -245,7 +245,7 @@ public void test_24() {
         bean.value = ldt(1654686106602L);
 
         String str = JSON.toJSONString(bean);
-        assertEquals("{\"value\":\"2022-06-08T19:01:46.602\"}", str);
+        assertEquals("{\"value\":\"2022-06-08T19:01:46.602+08:00\"}", str);
 
         Bean24 bean1 = JSON.parseObject(str, Bean24.class);
         assertEquals(1654686106602L, millis(bean1.value));

File: core/src/test/java/com/alibaba/fastjson2/date/LocalDateTimeTest.java
Patch:
@@ -26,14 +26,14 @@ public static class Student {
     public void test1() {
         String str = "{\"birthday\":\"2022-05-03T15:26:05\"}";
         Student1 student = JSON.parseObject(str, Student1.class);
-        assertEquals(str, JSON.toJSONString(student));
+        assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student));
     }
 
     @Test
     public void test1_date() {
         String str = "{\"birthday\":\"2022-05-03\"}";
         Student1 student = JSON.parseObject(str, Student1.class);
-        assertEquals("{\"birthday\":\"2022-05-03T00:00:00\"}", JSON.toJSONString(student));
+        assertEquals("{\"birthday\":\"2022-05-03T00:00:00+08:00\"}", JSON.toJSONString(student));
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/date/OptionalLocalDateTimeTest.java
Patch:
@@ -27,7 +27,7 @@ public static class Student {
     public void test1() {
         String str = "{\"birthday\":\"2022-05-03T15:26:05\"}";
         Student1 student = JSON.parseObject(str, Student1.class);
-        assertEquals(str, JSON.toJSONString(student));
+        assertEquals("{\"birthday\":\"2022-05-03T15:26:05+08:00\"}", JSON.toJSONString(student));
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/time/DateTest.java
Patch:
@@ -83,7 +83,7 @@ public void testLocalDateTime() throws Exception {
 
         jw.writeAny(
                 LocalDateTime.of(1970, 1, 1, 0, 0, 0));
-        assertEquals("\"1970-01-01T00:00:00\"", jw.toString());
+        assertEquals("\"1970-01-01 00:00:00\"", jw.toString());
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1493.java
Patch:
@@ -24,14 +24,14 @@ public void test_for_issue() throws Exception {
         String t1 = JSON.toJSONString(time1);
 
         String json = JSON.toJSONString(test);
-        assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22T15:08:56\"}", json);
+        assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json);
 
         //String default_format = JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT;
         //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
         //String stime1 = DateTimeFormatter.ofPattern(JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT, Locale.CHINA).format(time1);
 
         json = JSON.toJSONString(test);
-        assertEquals("{\"time1\":" + JSON.toJSONString(time1) + ",\"time2\":\"2017-09-22T15:08:56\"}", json);
+        assertEquals("{\"time1\":" + JSON.toJSONString(time1) + ",\"time2\":\"2017-09-22 15:08:56\"}", json);
 
         String pattern = "yyyy-MM-dd'T'HH:mm:ss";
         String stime1 = DateTimeFormatter.ofPattern(pattern, Locale.CHINA).format(time1);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -40,7 +40,6 @@ public class ObjectReaderCreatorASM
     static final String TYPE_FIELD_READE = ASMUtils.type(FieldReader.class);
 
     static final String DESC_JSON_READER = ASMUtils.desc(JSONReader.class);
-    static final String DESC_JSON_READER_CONTEXT = ASMUtils.desc(JSONReader.Context.class);
     static final String DESC_FIELD_READER = ASMUtils.desc(FieldReader.class);
     static final String DESC_OBJECT_READER = ASMUtils.desc(ObjectReader.class);
     static final String DESC_SUPPLIER = ASMUtils.desc(Supplier.class);

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1601,7 +1601,7 @@ public boolean readBoolValue() {
                 return false;
             }
 
-            if (str.isEmpty() || str.equalsIgnoreCase("null")) {
+            if (str.isEmpty() || "null".equalsIgnoreCase(str)) {
                 wasNull = true;
                 return false;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4883,6 +4883,7 @@ public String info(String message) {
         return buf.toString();
     }
 
+    @Override
     public void close() {
         if (cacheIndex != -1 && chars.length <= CACHE_THREAD) {
             CACHE_CHARS.set(cacheIndex, chars);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5657,6 +5657,7 @@ public String info(String message) {
         return buf.toString();
     }
 
+    @Override
     public void close() {
         if (cacheIndex != -1 && bytes.length < CACHE_THREAD) {
             CACHE_BYTES.set(cacheIndex, bytes);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Func.java
Patch:
@@ -44,6 +44,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object, (V) fieldValue);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBigDecimal.java
Patch:
@@ -26,6 +26,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         return jsonReader.readBigDecimal();
     }
 
+    @Override
     public Object createInstance(Map map, long features) {
         Object value = map.get("value");
         if (value == null) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1601,7 +1601,7 @@ public boolean readBoolValue() {
                 return false;
             }
 
-            if (str.isEmpty() || str.equalsIgnoreCase("null")) {
+            if (str.isEmpty() || "null".equalsIgnoreCase(str)) {
                 wasNull = true;
                 return false;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4883,6 +4883,7 @@ public String info(String message) {
         return buf.toString();
     }
 
+    @Override
     public void close() {
         if (cacheIndex != -1 && chars.length <= CACHE_THREAD) {
             CACHE_CHARS.set(cacheIndex, chars);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5657,6 +5657,7 @@ public String info(String message) {
         return buf.toString();
     }
 
+    @Override
     public void close() {
         if (cacheIndex != -1 && bytes.length < CACHE_THREAD) {
             CACHE_BYTES.set(cacheIndex, bytes);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Func.java
Patch:
@@ -44,6 +44,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object, (V) fieldValue);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBigDecimal.java
Patch:
@@ -26,6 +26,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         return jsonReader.readBigDecimal();
     }
 
+    @Override
     public Object createInstance(Map map, long features) {
         Object value = map.get("value");
         if (value == null) {

File: core/src/main/java/com/alibaba/fastjson2/JSONB.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.List;
 
 import static com.alibaba.fastjson2.JSONB.Constants.*;
-import static com.alibaba.fastjson2.JSONFactory.Utils.*;
 
 /**
  * x91          # binary len_int32 bytes

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java
Patch:
@@ -11,6 +11,7 @@
 
 public class SerializeConfig {
     public static SerializeConfig global = new SerializeConfig();
+
     public PropertyNamingStrategy propertyNamingStrategy;
 
     public static SerializeConfig getGlobalInstance() {

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONType.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import com.alibaba.fastjson2.filter.Filter;
 
 import java.lang.annotation.ElementType;
@@ -29,7 +30,7 @@
      */
     JSONWriter.Feature[] serializeFeatures() default {};
 
-    NamingStrategy naming() default NamingStrategy.CamelCase;
+    PropertyNamingStrategy naming() default PropertyNamingStrategy.NeverUseThisValueExceptDefaultValue;
 
     boolean writeEnumAsJavaBean() default false;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONReader.AutoTypeBeforeHandler;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import com.alibaba.fastjson2.modules.ObjectReaderModule;
 import com.alibaba.fastjson2.util.Fnv;
 import com.alibaba.fastjson2.util.JDKUtils;
@@ -140,6 +141,8 @@ public class ObjectReaderProvider {
     private AutoTypeBeforeHandler autoTypeBeforeHandler = DEFAULT_AUTO_TYPE_BEFORE_HANDLER;
     private Consumer<Class> autoTypeHandler = DEFAULT_AUTO_TYPE_HANDLER;
 
+    private PropertyNamingStrategy namingStrategy = PropertyNamingStrategy.CamelCase;
+
     {
         denyHashCodes = new long[]{
                 -9164606388214699518L,

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONTypeNamingCamel.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.annotation;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -22,13 +23,13 @@ public void test1() {
         assertEquals("{\"id\":101,\"name\":\"DataWorks\"}", JSON.toJSONString(bean));
     }
 
-    @JSONType(naming = NamingStrategy.CamelCase)
+    @JSONType(naming = PropertyNamingStrategy.CamelCase)
     public static class Bean {
         public int id;
         public String name;
     }
 
-    @JSONType(naming = NamingStrategy.CamelCase)
+    @JSONType(naming = PropertyNamingStrategy.CamelCase)
     public static class Bean1 {
         private int id;
         private String name;

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONTypeNamingKabab.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.annotation;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -22,13 +23,13 @@ public void test1() {
         assertEquals("{\"bean-id\":101,\"bean-name\":\"DataWorks\"}", JSON.toJSONString(bean));
     }
 
-    @JSONType(naming = NamingStrategy.KebabCase)
+    @JSONType(naming = PropertyNamingStrategy.KebabCase)
     public static class Bean {
         public int beanId;
         public String beanName;
     }
 
-    @JSONType(naming = NamingStrategy.KebabCase)
+    @JSONType(naming = PropertyNamingStrategy.KebabCase)
     public static class Bean1 {
         private int beanId;
         private String beanName;

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONTypeNamingPascal.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.annotation;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -22,13 +23,13 @@ public void test1() {
         assertEquals("{\"Id\":101,\"Name\":\"DataWorks\"}", JSON.toJSONString(bean));
     }
 
-    @JSONType(naming = NamingStrategy.PascalCase)
+    @JSONType(naming = PropertyNamingStrategy.PascalCase)
     public static class Bean {
         public int id;
         public String name;
     }
 
-    @JSONType(naming = NamingStrategy.PascalCase)
+    @JSONType(naming = PropertyNamingStrategy.PascalCase)
     public static class Bean1 {
         private int id;
         private String name;

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONTypeNamingSnake.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.annotation;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -22,13 +23,13 @@ public void test1() {
         assertEquals("{\"bean_id\":101,\"bean_name\":\"DataWorks\"}", JSON.toJSONString(bean));
     }
 
-    @JSONType(naming = NamingStrategy.SnakeCase)
+    @JSONType(naming = PropertyNamingStrategy.SnakeCase)
     public static class Bean {
         public int beanId;
         public String beanName;
     }
 
-    @JSONType(naming = NamingStrategy.SnakeCase)
+    @JSONType(naming = PropertyNamingStrategy.SnakeCase)
     public static class Bean1 {
         private int beanId;
         private String beanName;

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONTypeNamingUpper.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.annotation;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -22,13 +23,13 @@ public void test1() {
         assertEquals("{\"ID\":101,\"NAME\":\"DataWorks\"}", JSON.toJSONString(bean));
     }
 
-    @JSONType(naming = NamingStrategy.UpperCase)
+    @JSONType(naming = PropertyNamingStrategy.UpperCase)
     public static class Bean {
         public int id;
         public String name;
     }
 
-    @JSONType(naming = NamingStrategy.UpperCase)
+    @JSONType(naming = PropertyNamingStrategy.UpperCase)
     public static class Bean1 {
         private int id;
         private String name;

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue402.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONArray;
 import com.alibaba.fastjson2.annotation.JSONType;
-import com.alibaba.fastjson2.annotation.NamingStrategy;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import java.io.Serializable;
@@ -28,7 +28,7 @@ public void test1() {
         assertEquals("测试公司", test.getDeptName());
     }
 
-    @JSONType(naming = NamingStrategy.SnakeCase)
+    @JSONType(naming = PropertyNamingStrategy.SnakeCase)
     public static class DeptTreeJsonMixIn {
 
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1555.java
Patch:
@@ -1,9 +1,9 @@
 package com.alibaba.fastjson2.v1issues.issue_1500;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import com.alibaba.fastjson2.annotation.JSONField;
 import com.alibaba.fastjson2.annotation.JSONType;
-import com.alibaba.fastjson2.annotation.NamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -41,7 +41,7 @@ public void test_when_JSONField_have_not_name_attr() throws Exception {
         assertEquals("test", model2.userName);
     }
 
-    @JSONType(naming = NamingStrategy.SnakeCase)
+    @JSONType(naming = PropertyNamingStrategy.SnakeCase)
     public static class Model {
         private int userId;
         @JSONField(name = "userName")
@@ -64,7 +64,7 @@ public void setUserName(String userName) {
         }
     }
 
-    @JSONType(naming = NamingStrategy.SnakeCase)
+    @JSONType(naming = PropertyNamingStrategy.SnakeCase)
     public static class ModelTwo {
         /**
          * 此字段准备序列化为字符串类型

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1565.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONObject;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import com.alibaba.fastjson2.annotation.JSONType;
-import com.alibaba.fastjson2.annotation.NamingStrategy;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -57,7 +57,7 @@ public void setNetValueDate(Integer netValueDate) {
         private Integer netValueDate;
     }
 
-    @JSONType(naming = NamingStrategy.SnakeCase)
+    @JSONType(naming = PropertyNamingStrategy.SnakeCase)
     public static class LargeBean
             implements Serializable {
         /**

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2400/Issue2428.java
Patch:
@@ -1,8 +1,8 @@
 package com.alibaba.fastjson2.v1issues.issue_2400;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import com.alibaba.fastjson2.annotation.JSONType;
-import com.alibaba.fastjson2.annotation.NamingStrategy;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -12,14 +12,14 @@
 
 @NoArgsConstructor
 @Data
-@JSONType(naming = NamingStrategy.SnakeCase)
+@JSONType(naming = PropertyNamingStrategy.SnakeCase)
 public class Issue2428 {
     private String myName;
     private NestedBean nestedBean;
 
     @AllArgsConstructor
     @Data
-    @JSONType(naming = NamingStrategy.SnakeCase)
+    @JSONType(naming = PropertyNamingStrategy.SnakeCase)
     public static class NestedBean {
         private String myId;
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/annotation/JSONType.java
Patch:
@@ -64,7 +64,7 @@
 
     boolean serializeEnumAsJavaBean() default false;
 
-    PropertyNamingStrategy naming() default PropertyNamingStrategy.CamelCase;
+    PropertyNamingStrategy naming() default PropertyNamingStrategy.NeverUseThisValueExceptDefaultValue;
 
     /**
      * @since 1.2.49

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2348.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONType;
-import com.alibaba.fastjson2.annotation.NamingStrategy;
+import com.alibaba.fastjson2.PropertyNamingStrategy;
 import org.junit.jupiter.api.Test;
 
 import java.io.Serializable;
@@ -129,7 +129,7 @@ public int getCount() {
         }
     }
 
-    @JSONType(naming = NamingStrategy.UpperCase)
+    @JSONType(naming = PropertyNamingStrategy.UpperCase)
     public static class PersonnelModel
             implements Serializable {
         private String xm;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3000/Issue3373.java
Patch:
@@ -20,7 +20,7 @@ public void test_for_issue() throws Exception {
         items.add(new Item("item2", category));
 
         assertEquals(
-                "[{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"name\":\"category\"},\"name\":\"item1\"},{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\"}]",
+                "[{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"name\":\"category\"},\"name\":\"item1\"},{\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"},\"afterFilterTwo\":\"two\",\"category\":{\"$ref\":\"[0].category\"},\"name\":\"item2\"}]",
                 JSON.toJSONString(items, refAfterFilterTest)
         );
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3100/Issue3150.java
Patch:
@@ -19,9 +19,10 @@ public void test_for_issue() throws Exception {
         items.add(new Item("item1", category));
         items.add(new Item("item2", category));
 
+        String str = JSON.toJSONString(items, refAfterFilterTest);
         assertEquals(
-                "[{\"category\":{\"name\":\"category\"},\"name\":\"item1\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}},{\"category\":{\"$ref\":\"$[0].category\"},\"name\":\"item2\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}}]",
-                JSON.toJSONString(items, refAfterFilterTest)
+                "[{\"category\":{\"name\":\"category\"},\"name\":\"item1\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}},{\"category\":{\"$ref\":\"[0].category\"},\"name\":\"item2\",\"afterFilterCategory\":{\"name\":\"afterFilterCategory\"}}]",
+                str
         );
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -186,7 +186,8 @@ public ObjectWriter createObjectWriter(
                     return;
                 }
 
-                FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, Collections.emptyList(), beanInfo, fieldInfo, field);
+                fieldInfo.init();
+                FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, modules, beanInfo, fieldInfo, field);
                 if (fieldWriter != null) {
                     fieldWriterMap.put(fieldWriter.getFieldName(), fieldWriter);
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -156,7 +156,8 @@ boolean record = BeanUtils.isRecord(objectClass);
                     return;
                 }
 
-                FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, Collections.emptyList(), beanInfo, fieldInfo, field);
+                fieldInfo.init();
+                FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, modules, beanInfo, fieldInfo, field);
                 if (fieldWriter != null) {
                     fieldWriterMap.put(fieldWriter.getFieldName(), fieldWriter);
                 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest.java
Patch:
@@ -12,11 +12,12 @@
 public class DateFieldTest {
     @Test
     public void test_codec() {
+        long millis = 1654686106601L;
         V0 v = new V0();
-        v.setValue(new Date());
+        v.setValue(new Date(millis));
 
         String text = JSON.toJSONString(v);
-        assertEquals("{\"value\":" + v.getValue().getTime() + "}", text);
+        assertEquals("{\"value\":1654686106601}", text);
 
         V0 v1 = JSON.parseObject(text, V0.class);
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1526,8 +1526,8 @@ public void setDateFormat(String dateFormat) {
                         break;
                     default:
                         dateFormatMillis = false;
-                        formatHasHour = dateFormat.indexOf("d") != -1;
-                        formatHasDay = dateFormat.indexOf("H") != -1;
+                        formatHasDay = dateFormat.indexOf("d") != -1;
+                        formatHasHour = dateFormat.indexOf("H") != -1;
                         break;
                 }
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1526,8 +1526,8 @@ public void setDateFormat(String dateFormat) {
                         break;
                     default:
                         dateFormatMillis = false;
-                        formatHasHour = dateFormat.indexOf("d") != -1;
-                        formatHasDay = dateFormat.indexOf("H") != -1;
+                        formatHasDay = dateFormat.indexOf("d") != -1;
+                        formatHasHour = dateFormat.indexOf("H") != -1;
                         break;
                 }
             }

File: core/src/test/java/com/alibaba/fastjson2/annotation/LocalTimeFormatTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.params.shadow.com.univocity.parsers.annotations.Format;
 
 import java.time.LocalTime;
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -4732,6 +4732,7 @@ public String info(String message) {
                 .append(", character ").append(ch)
                 .append(", line ").append(line)
                 .append(", column ").append(column)
+                .append(", fastjson-version ").append(JSON.VERSION)
                 .append(line > 1 ? '\n' : ' ');
         buf.append(str, this.start, length < 65535 ? length : 65535);
         return buf.toString();

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -4612,6 +4612,7 @@ public String info(String message) {
                 .append(", character ").append(ch)
                 .append(", line ").append(line)
                 .append(", column ").append(column)
+                .append(", fastjson-version ").append(JSON.VERSION)
                 .append(line > 1 ? '\n' : ' ');
         buf.append(chars, this.start, length < 65535 ? length : 65535);
         return buf.toString();

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5491,6 +5491,7 @@ public String info(String message) {
                 .append(", character ").append(ch)
                 .append(", line ").append(line)
                 .append(", column ").append(column)
+                .append(", fastjson-version ").append(JSON.VERSION)
                 .append(line > 1 ? '\n' : ' ');
 
         String str = new String(bytes, this.start, length < 65535 ? length : 65535);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -246,7 +246,7 @@ default void readFieldValueJSONB(JSONReader jsonReader, T object) {
     }
 
     default Object readFieldValue(JSONReader jsonReader) {
-        throw new JSONException("TODO : " + this.getClass());
+        throw new JSONException(jsonReader.info("TODO : " + this.getClass()));
     }
 
     default void addResolveTask(JSONReader jsonReader, Object object, String reference) {
@@ -264,7 +264,7 @@ default ObjectReader checkObjectAutoType(JSONReader jsonReader) {
 
             boolean isSupportAutoType = jsonReader.isSupportAutoType(features);
             if (!isSupportAutoType) {
-                throw new JSONException("autoType not support input " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("autoType not support input " + jsonReader.getString()));
             }
 
             ObjectReader autoTypeObjectReader = jsonReader.getContext().getObjectReaderAutoType(typeHash);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAnySetter.java
Patch:
@@ -46,7 +46,7 @@ public void processExtra(JSONReader jsonReader, Object object) {
         try {
             method.invoke(object, name, value);
         } catch (Exception e) {
-            throw new JSONException("any set error", e);
+            throw new JSONException(jsonReader.info("any set error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerArrayReadOnly.java
Patch:
@@ -36,7 +36,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             atomic = (AtomicIntegerArray) method.invoke(object);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
 
         if (jsonReader.nextIfMatch('[')) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongArrayReadOnly.java
Patch:
@@ -36,7 +36,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             atomic = (AtomicLongArray) method.invoke(object);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
         if (jsonReader.nextIfMatch('[')) {
             for (int i = 0; ; ++i) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalField.java
Patch:
@@ -25,7 +25,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalMethod.java
Patch:
@@ -27,7 +27,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerField.java
Patch:
@@ -25,7 +25,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerMethod.java
Patch:
@@ -27,7 +27,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolField.java
Patch:
@@ -18,7 +18,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolMethod.java
Patch:
@@ -25,7 +25,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueField.java
Patch:
@@ -23,7 +23,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.setBoolean(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueMethod.java
Patch:
@@ -19,7 +19,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateField.java
Patch:
@@ -83,7 +83,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateMethod.java
Patch:
@@ -112,7 +112,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleField.java
Patch:
@@ -23,7 +23,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleMethod.java
Patch:
@@ -25,7 +25,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueField.java
Patch:
@@ -23,7 +23,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.setDouble(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueMethod.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatField.java
Patch:
@@ -23,7 +23,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatMethod.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueField.java
Patch:
@@ -23,7 +23,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.setFloat(object, fieldFloat);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueMethod.java
Patch:
@@ -25,7 +25,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Field.java
Patch:
@@ -24,7 +24,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldInt == null ? null : fieldInt.shortValue());
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Method.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue == null ? null : fieldValue.shortValue());
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16ValueField.java
Patch:
@@ -24,7 +24,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.setShort(object, (short) fieldInt);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16ValueMethod.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, (short) fieldInt);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Field.java
Patch:
@@ -23,7 +23,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Method.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueArrayFinalField.java
Patch:
@@ -27,7 +27,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             array = (int[]) field.get(object);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
 
         if (jsonReader.nextIfMatch('[')) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueField.java
Patch:
@@ -24,7 +24,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.setInt(object, fieldInt);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueMethod.java
Patch:
@@ -25,7 +25,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldInt);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Field.java
Patch:
@@ -24,7 +24,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Method.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueArrayFinalField.java
Patch:
@@ -27,7 +27,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             array = (long[]) field.get(object);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
 
         if (jsonReader.nextIfMatch('[')) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueField.java
Patch:
@@ -23,7 +23,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.setLong(object, fieldLong);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueMethod.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldLong);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Field.java
Patch:
@@ -24,7 +24,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldInt == null ? null : fieldInt.byteValue());
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Method.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue == null ? null : fieldValue.byteValue());
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueField.java
Patch:
@@ -24,7 +24,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.setByte(object, (byte) fieldInt);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueMethod.java
Patch:
@@ -26,7 +26,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, (byte) fieldInt);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderList.java
Patch:
@@ -152,7 +152,7 @@ default Object readFieldValue(JSONReader jsonReader) {
             }
         }
 
-        throw new JSONException("TODO : " + this.getClass());
+        throw new JSONException(jsonReader.info("TODO : " + this.getClass()));
     }
 
     @Override
@@ -163,7 +163,7 @@ default ObjectReader checkObjectAutoType(JSONReader jsonReader) {
 
             boolean isSupportAutoType = jsonReader.isSupportAutoType(features);
             if (!isSupportAutoType) {
-                throw new JSONException("autoType not support input " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("autoType not support input " + jsonReader.getString()));
             }
 
             ObjectReader autoTypeObjectReader = jsonReader.getContext().getObjectReaderAutoType(typeHash);
@@ -179,7 +179,7 @@ default ObjectReader checkObjectAutoType(JSONReader jsonReader) {
             }
 
             if (autoTypeObjectReader == null) {
-                throw new JSONException("auotype not support : " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("auotype not support : " + jsonReader.getString()));
             }
 
             return autoTypeObjectReader;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -202,9 +202,9 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                 return;
             }
 
-            throw new JSONException("listField not support input : " + str);
+            throw new JSONException(jsonReader.info("listField not support input : " + str));
         }
 
-        throw new JSONException("listField not support input : " + jsonReader.current());
+        throw new JSONException(jsonReader.info("listField not support"));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListInt64.java
Patch:
@@ -66,7 +66,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
             try {
                 list = (Collection) listType.newInstance();
             } catch (InstantiationException | IllegalAccessException e) {
-                throw new JSONException("create instance error " + listType, e);
+                throw new JSONException(jsonReader.info("create instance error " + listType), e);
             }
         } else {
             list = (Collection) createInstance(jsonReader.getContext().getFeatures() | features);
@@ -108,7 +108,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         }
 
         if (jsonReader.current() != '[') {
-            throw new JSONException("format error : " + jsonReader.current());
+            throw new JSONException(jsonReader.info("format error"));
         }
         jsonReader.next();
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrMethod.java
Patch:
@@ -62,7 +62,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                         try {
                             value = (List) listType.newInstance();
                         } catch (InstantiationException | IllegalAccessException e) {
-                            throw new JSONException("create instance error " + listType, e);
+                            throw new JSONException(jsonReader.info("create instance error " + listType), e);
                         }
                         break;
                 }
@@ -91,7 +91,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
             value = list;
         } else {
-            throw new JSONException("json format error : " + jsonReader.current());
+            throw new JSONException(jsonReader.info("json format error"));
         }
 
         if (schema != null) {
@@ -101,7 +101,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, value);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -68,7 +68,7 @@ public void processExtra(JSONReader jsonReader, Object object) {
         try {
             map = (Map) field.get(object);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
 
         String name = jsonReader.getFieldName();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapMethodReadOnly.java
Patch:
@@ -72,7 +72,7 @@ public void processExtra(JSONReader jsonReader, Object object) {
         try {
             map = (Map) method.invoke(object);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
 
         String name = jsonReader.getFieldName();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -104,7 +104,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         } catch (JSONSchemaValidException ex) {
             throw ex;
         } catch (Exception | IllegalAccessError ex) {
-            throw new JSONException("read field '" + field.getDeclaringClass().getName() + "." + field.getName() + "' error, offset " + offset, ex);
+            throw new JSONException(jsonReader.info("read field '" + field.getDeclaringClass().getName() + "." + field.getName()), ex);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectMethod.java
Patch:
@@ -109,7 +109,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                 value = objectReader.readObject(jsonReader, features);
             }
         } catch (JSONException ex) {
-            throw new JSONException("read field error : " + fieldName, ex);
+            throw new JSONException(jsonReader.info("read field error : " + fieldName), ex);
         }
 
         accept(object, value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringField.java
Patch:
@@ -29,7 +29,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             field.set(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringMethod.java
Patch:
@@ -31,7 +31,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         try {
             method.invoke(object, fieldValue);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FielderReaderImplMapFieldReadOnly.java
Patch:
@@ -68,7 +68,7 @@ public void processExtra(JSONReader jsonReader, Object object) {
         try {
             map = (Map) field.get(object);
         } catch (Exception e) {
-            throw new JSONException("set " + fieldName + " error", e);
+            throw new JSONException(jsonReader.info("set " + fieldName + " error"), e);
         }
 
         String name = jsonReader.getFieldName();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayReader.java
Patch:
@@ -90,7 +90,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                         value = jsonReader.readArray();
                         break;
                     default:
-                        throw new JSONException("not support : " + ch);
+                        throw new JSONException(jsonReader.info());
                 }
                 values[size++] = value;
             }
@@ -99,7 +99,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayTypedReader.java
Patch:
@@ -76,7 +76,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             }
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override
@@ -96,13 +96,13 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
                     }
 
                     if (autoTypeObjectReader == null) {
-                        throw new JSONException("auotype not support : " + jsonReader.getString());
+                        throw new JSONException(jsonReader.info("auotype not support : " + jsonReader.getString()));
                     }
 
                     return autoTypeObjectReader.readObject(jsonReader, features);
                 }
 
-                throw new JSONException("not support autotype : " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("not support autotype : " + jsonReader.getString()));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader.java
Patch:
@@ -235,7 +235,7 @@ default T readJSONBObject(JSONReader jsonReader, long features) {
                     reader = context.getObjectReaderAutoType(typeName, null);
 
                     if (reader == null) {
-                        throw new JSONException("No suitable ObjectReader found for" + typeName);
+                        throw new JSONException(jsonReader.info("No suitable ObjectReader found for" + typeName));
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -120,7 +120,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         }
 
         if (!jsonReader.nextIfMatch(BC_OBJECT)) {
-            throw new JSONException("expect object, but " + JSONB.typeName(jsonReader.getType()));
+            throw new JSONException(jsonReader.info("expect object, but " + JSONB.typeName(jsonReader.getType())));
         }
 
         T object;
@@ -130,7 +130,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
             try {
                 object = (T) UnsafeUtils.UNSAFE.allocateInstance(objectClass);
             } catch (InstantiationException e) {
-                throw new JSONException("create instance error", e);
+                throw new JSONException(jsonReader.info("create instance error"), e);
             }
         } else {
             object = null;
@@ -218,7 +218,7 @@ public T readObject(JSONReader jsonReader, long features) {
             fieldReader1.readFieldValue(jsonReader, object);
             fieldReader2.readFieldValue(jsonReader, object);
             if (!jsonReader.nextIfMatch(']')) {
-                throw new JSONException("array to bean end error, " + jsonReader.current());
+                throw new JSONException(jsonReader.info("array to bean end error"));
             }
 
             jsonReader.nextIfMatch(',');

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -134,7 +134,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         }
 
         if (!jsonReader.nextIfMatch(BC_OBJECT)) {
-            throw new JSONException("expect object, but " + JSONB.typeName(jsonReader.getType()));
+            throw new JSONException(jsonReader.info("expect object, but " + JSONB.typeName(jsonReader.getType())));
         }
 
         T object;
@@ -144,7 +144,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
             try {
                 object = (T) UnsafeUtils.UNSAFE.allocateInstance(objectClass);
             } catch (InstantiationException e) {
-                throw new JSONException("create instance error", e);
+                throw new JSONException(jsonReader.info("create instance error"), e);
             }
         } else {
             object = null;
@@ -228,7 +228,7 @@ public T readObject(JSONReader jsonReader, long features) {
             fieldReader2.readFieldValue(jsonReader, object);
             fieldReader3.readFieldValue(jsonReader, object);
             if (!jsonReader.nextIfMatch(']')) {
-                throw new JSONException("array to bean end error, " + jsonReader.current());
+                throw new JSONException(jsonReader.info("array to bean end error"));
             }
 
             jsonReader.nextIfMatch(',');

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -152,7 +152,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
             try {
                 object = (T) UnsafeUtils.UNSAFE.allocateInstance(objectClass);
             } catch (InstantiationException e) {
-                throw new JSONException("create instance error", e);
+                throw new JSONException(jsonReader.info("create instance error"), e);
             }
         } else {
             object = null;
@@ -241,7 +241,7 @@ public T readObject(JSONReader jsonReader, long features) {
             fieldReader3.readFieldValue(jsonReader, object);
             fieldReader4.readFieldValue(jsonReader, object);
             if (!jsonReader.nextIfMatch(']')) {
-                throw new JSONException("array to bean end error, " + jsonReader.current());
+                throw new JSONException(jsonReader.info("array to bean end error"));
             }
 
             jsonReader.nextIfMatch(',');

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -161,7 +161,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         }
 
         if (!jsonReader.nextIfMatch(BC_OBJECT)) {
-            throw new JSONException("expect object, but " + JSONB.typeName(jsonReader.getType()));
+            throw new JSONException(jsonReader.info("expect object, but " + JSONB.typeName(jsonReader.getType())));
         }
 
         T object;
@@ -171,7 +171,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
             try {
                 object = (T) UnsafeUtils.UNSAFE.allocateInstance(objectClass);
             } catch (InstantiationException e) {
-                throw new JSONException("create instance error", e);
+                throw new JSONException(jsonReader.info("create instance error"), e);
             }
         } else {
             object = null;
@@ -265,7 +265,7 @@ public T readObject(JSONReader jsonReader, long features) {
             fieldReader4.readFieldValue(jsonReader, object);
             fieldReader5.readFieldValue(jsonReader, object);
             if (!jsonReader.nextIfMatch(']')) {
-                throw new JSONException("array to bean end error, " + jsonReader.current());
+                throw new JSONException(jsonReader.info("array to bean end error"));
             }
 
             jsonReader.nextIfMatch(',');

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -63,7 +63,7 @@ public ObjectReader checkAutoType(JSONReader jsonReader, Class listClass, long f
             }
 
             if (autoTypeObjectReader == null) {
-                throw new JSONException("auotype not support : " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("auotype not support"));
             }
 
             if (typeHash == this.typeNameHash) {
@@ -108,7 +108,7 @@ public T readObject(JSONReader jsonReader, long features) {
             }
 
             if (ch != '"' && ch != '\'' && ch != '}') {
-                throw new JSONException("illegal input " + ch + ", offset " + jsonReader.getOffset());
+                throw new JSONException(jsonReader.info());
             }
         }
 
@@ -138,7 +138,7 @@ typeName, getObjectClass(), features3
                     );
 
                     if (reader == null) {
-                        throw new JSONException("No suitable ObjectReader found for" + typeName);
+                        throw new JSONException(jsonReader.info("No suitable ObjectReader found for" + typeName));
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderException.java
Patch:
@@ -54,7 +54,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                     reader = context.getObjectReaderAutoType(typeName, objectClass, features);
 
                     if (reader == null) {
-                        throw new JSONException("No suitable ObjectReader found for" + typeName);
+                        throw new JSONException(jsonReader.info("No suitable ObjectReader found for" + typeName));
                     }
                 }
 
@@ -93,7 +93,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         Throwable object = createObject(message, cause);
 
         if (object == null) {
-            throw new JSONException("not support : " + objectClass.getName());
+            throw new JSONException(jsonReader.info(jsonReader.info("not support : " + objectClass.getName())));
         }
 
         if (stackTrace != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplAtomicLongArray.java
Patch:
@@ -43,7 +43,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return array;
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplBitSet.java
Patch:
@@ -27,7 +27,7 @@ public BitSet readJSONBObject(JSONReader jsonReader, long features) {
             long typeHash = jsonReader.readTypeHashCode();
             if (typeHash != HASH_TYPE) {
                 String typeName = jsonReader.getString();
-                throw new JSONException(typeName);
+                throw new JSONException(jsonReader.info(typeName));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplByte.java
Patch:
@@ -22,7 +22,7 @@ public Byte readJSONBObject(JSONReader jsonReader, long features) {
             long typeHash = jsonReader.readTypeHashCode();
             if (typeHash != HASH_TYPE) {
                 String typeName = jsonReader.getString();
-                throw new JSONException(typeName);
+                throw new JSONException(jsonReader.info(typeName));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCharValueArray.java
Patch:
@@ -56,7 +56,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplClass.java
Patch:
@@ -21,7 +21,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         if (jsonReader.nextIfMatch(JSONB.Constants.BC_TYPED_ANY)) {
             long valueHashCode = jsonReader.readTypeHashCode();
             if (valueHashCode != TYPE_HASH) {
-                throw new JSONException("not support autoType : " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("not support autoType : " + jsonReader.getString()));
             }
         }
         return readObject(jsonReader, features);
@@ -33,7 +33,7 @@ public Object readObject(JSONReader jsonReader, long features) {
 
         JSONReader.Context context = jsonReader.getContext();
         if (!context.isEnabled(JSONReader.Feature.SupportClassForName)) {
-            throw new JSONException("not support ClassForName : " + className + ", you can config 'JSONReader.Feature.SupportClassForName'");
+            throw new JSONException(jsonReader.info("not support ClassForName : " + className + ", you can config 'JSONReader.Feature.SupportClassForName'"));
         }
 
         Class mappingClass = TypeUtils.getMapping(className);
@@ -44,7 +44,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         ObjectReaderProvider provider = context.getProvider();
         Class<?> resolvedClass = provider.checkAutoType(className, null, JSONReader.Feature.SupportAutoType.mask);
         if (resolvedClass == null) {
-            throw new JSONException("class not found " + className);
+            throw new JSONException(jsonReader.info("class not found " + className));
         }
         return resolvedClass;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCurrency.java
Patch:
@@ -25,7 +25,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
             jsonReader.next();
             long typeHash = jsonReader.readTypeHashCode();
             if (typeHash != TYPE_HASH && typeHash != TYPE_HASH_FULL) {
-                throw new JSONException("currency not support input autoTypeClass " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("currency not support input autoTypeClass " + jsonReader.getString()));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -78,7 +78,7 @@ private Object readDate(JSONReader jsonReader) {
             try {
                 return new SimpleDateFormat(format).parse(str);
             } catch (ParseException e) {
-                throw new JSONException("parse error : " + str, e);
+                throw new JSONException(jsonReader.info("parse error : " + str), e);
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleArray.java
Patch:
@@ -44,7 +44,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleValueArray.java
Patch:
@@ -44,7 +44,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum2X4.java
Patch:
@@ -68,7 +68,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         if (jsonReader.nextIfMatch(BC_TYPED_ANY)) {
             long typeNameHash = jsonReader.readTypeHashCode();
             if (typeNameHash != this.typeNameHash) {
-                throw new JSONException("not support enumType : " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("not support enumType : " + jsonReader.getString()));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatArray.java
Patch:
@@ -44,7 +44,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatValueArray.java
Patch:
@@ -44,7 +44,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16Array.java
Patch:
@@ -67,7 +67,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16ValueArray.java
Patch:
@@ -45,7 +45,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32Array.java
Patch:
@@ -71,7 +71,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32ValueArray.java
Patch:
@@ -53,7 +53,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64Array.java
Patch:
@@ -71,7 +71,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64ValueArray.java
Patch:
@@ -57,15 +57,15 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override
     public Object readJSONBObject(JSONReader jsonReader, long features) {
         if (jsonReader.nextIfMatch(JSONB.Constants.BC_TYPED_ANY)) {
             long typeHash = jsonReader.readTypeHashCode();
             if (typeHash != HASH_TYPE) {
-                throw new JSONException("not support " + jsonReader.getString());
+                throw new JSONException(jsonReader.info("not support " + jsonReader.getString()));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8Array.java
Patch:
@@ -82,12 +82,12 @@ public Object readObject(JSONReader jsonReader, long features) {
                     }
                     return byteOut.toByteArray();
                 } catch (IOException ex) {
-                    throw new JSONException("unzip bytes error.", ex);
+                    throw new JSONException(jsonReader.info("unzip bytes error."), ex);
                 }
             }
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8ValueArray.java
Patch:
@@ -54,7 +54,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return jsonReader.readBinary();
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -128,7 +128,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
             try {
                 list = (Collection) listType.newInstance();
             } catch (InstantiationException | IllegalAccessException e) {
-                throw new JSONException("create instance error " + listType, e);
+                throw new JSONException(jsonReader.info("create instance error " + listType), e);
             }
         } else {
             list = (Collection) createInstance(jsonReader.getContext().getFeatures() | features);
@@ -159,7 +159,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         boolean set = jsonReader.nextIfSet();
 
         if (jsonReader.current() != '[') {
-            throw new JSONException("offset " + jsonReader.getOffset() + ", char : " + jsonReader.current());
+            throw new JSONException(jsonReader.info());
         }
         jsonReader.next();
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -253,7 +253,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
                         map = (Map) instanceType.newInstance();
                     } catch (InstantiationException | IllegalAccessException e) {
                         instanceError = true;
-                        error = new JSONException("create map error " + instanceType);
+                        error = new JSONException(jsonReader.info("create map error " + instanceType));
                     }
                 }
 
@@ -263,7 +263,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
                         error = null;
                     } catch (InstantiationException | IllegalAccessException e) {
                         if (error == null) {
-                            error = new JSONException("create map error " + instanceType);
+                            error = new JSONException(jsonReader.info("create map error " + instanceType));
                         }
                     }
                 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapString.java
Patch:
@@ -31,7 +31,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                         return arrayItem;
                     }
                 }
-                throw new JSONException("expect '{', but '['");
+                throw new JSONException(jsonReader.info("expect '{', but '['"));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -215,7 +215,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
     public Object readObject(JSONReader jsonReader, long features) {
         boolean match = jsonReader.nextIfMatch('{');
         if (!match) {
-            throw new JSONException("expect '{', but '['");
+            throw new JSONException(jsonReader.info("expect '{', but '['"));
         }
 
         JSONReader.Context context = jsonReader.getContext();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplNumberArray.java
Patch:
@@ -44,7 +44,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             return Arrays.copyOf(values, size);
         }
 
-        throw new JSONException("TODO");
+        throw new JSONException(jsonReader.info("TODO"));
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplShort.java
Patch:
@@ -23,7 +23,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
             long typeHash = jsonReader.readTypeHashCode();
             if (typeHash != HASH_TYPE) {
                 String typeName = jsonReader.getString();
-                throw new JSONException(typeName);
+                throw new JSONException(jsonReader.info(typeName));
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderMisc.java
Patch:
@@ -46,6 +46,6 @@ public Object readObject(JSONReader jsonReader, long features) {
             return new InetSocketAddress(inetAddress, port);
         }
 
-        throw new JSONException("not support : " + objectClass.getName());
+        throw new JSONException(jsonReader.info("not support : " + objectClass.getName()));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstrutor.java
Patch:
@@ -82,7 +82,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
                     valueMap.put(fieldReader.getFieldNameHash(), fieldValue);
                 }
             } else {
-                throw new JSONException("expect object, but " + JSONB.typeName(jsonReader.getType()));
+                throw new JSONException(jsonReader.info("expect object, but " + JSONB.typeName(jsonReader.getType())));
             }
         } else {
             jsonReader.nextIfObjectStart();
@@ -105,7 +105,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
                         autoTypeObjectReader = context.getObjectReaderAutoType(typeName, objectClass);
 
                         if (autoTypeObjectReader == null) {
-                            throw new JSONException("auotype not support : " + typeName);
+                            throw new JSONException(jsonReader.info("auotype not support : " + typeName));
                         }
                     }
 
@@ -186,7 +186,7 @@ public T readObject(JSONReader jsonReader, long features) {
             }
 
             if (!jsonReader.nextIfMatch(']')) {
-                throw new JSONException("array not end, " + jsonReader.current());
+                throw new JSONException(jsonReader.info("array not end, " + jsonReader.current()));
             }
 
             jsonReader.nextIfMatch(',');

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderSeeAlso.java
Patch:
@@ -93,7 +93,7 @@ public T readObject(JSONReader jsonReader, long features) {
             }
 
             String strVal = jsonReader.getString();
-            throw new JSONException("not support input " + strVal);
+            throw new JSONException(jsonReader.info("not support input " + strVal));
         }
 
         return super.readObject(jsonReader, features);

File: core/src/main/java/com/alibaba/fastjson2/util/JdbcSupport.java
Patch:
@@ -135,7 +135,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                 try {
                     return methodValueOf.invoke(null, str);
                 } catch (IllegalAccessException | InvocationTargetException e) {
-                    throw new JSONException("invoke java.sql.Time.valueOf error", e);
+                    throw new JSONException(jsonReader.info("invoke java.sql.Time.valueOf error"), e);
                 }
             }
 
@@ -504,7 +504,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                     try {
                         return methodValueOf.invoke(null, localDateTime.toLocalDate());
                     } catch (IllegalAccessException | InvocationTargetException e) {
-                        throw new JSONException("invoke method java.sql.Date.valueOf error", e);
+                        throw new JSONException(jsonReader.info("invoke method java.sql.Date.valueOf error"), e);
                     }
                 }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONB.java
Patch:
@@ -734,7 +734,7 @@ static byte[] toBytes(String str, Charset charset) {
             type = BC_STR_UTF16BE;
         } else if (charset == StandardCharsets.UTF_16LE) {
             type = BC_STR_UTF16LE;
-        } else if (charset != null && charset.name().equals("GB18030")) { // GraalVM support
+        } else if (charset != null && "GB18030".equals(charset.name())) { // GraalVM support
             type = BC_STR_GB18030;
         } else {
             return toBytes(str);

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -1181,13 +1181,13 @@ static Operator parseOperator(JSONReader jsonReader) {
             case 'S': {
                 jsonReader.readFieldNameHashCodeUnquote();
                 String fieldName = jsonReader.getFieldName();
-                if (!fieldName.equalsIgnoreCase("starts")) {
+                if (!"starts".equalsIgnoreCase(fieldName)) {
                     throw new JSONException("not support operator : " + fieldName);
                 }
 
                 jsonReader.readFieldNameHashCodeUnquote();
                 fieldName = jsonReader.getFieldName();
-                if (!fieldName.equalsIgnoreCase("with")) {
+                if (!"with".equalsIgnoreCase(fieldName)) {
                     throw new JSONException("not support operator : " + fieldName);
                 }
                 operator = Operator.STARTS_WITH;

File: core/src/main/java/com/alibaba/fastjson2/JSONPathCompilerReflect.java
Patch:
@@ -11,6 +11,7 @@ class JSONPathCompilerReflect
         implements JSONFactory.JSONPathCompiler {
     static final JSONPathCompilerReflect INSTANCE = new JSONPathCompilerReflect();
 
+    @Override
     public JSONPath compile(
             Class objectClass, JSONPath path
     ) {

File: core/src/main/java/com/alibaba/fastjson2/JSONPathCompilerReflectASM.java
Patch:
@@ -47,6 +47,7 @@ private boolean support(Class objectClass) {
                 || externalClass;
     }
 
+    @Override
     protected JSONPath compileSingleNamePath(Class objectClass, JSONPath.SingleNamePath path) {
         if (support(objectClass)) {
             return super.compileSingleNamePath(objectClass, path);

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1340,7 +1340,7 @@ public Map<String, Object> readObject() {
                 nextIfMatch(':');
             }
 
-            if (i == 0 && (context.features & Feature.ErrorOnNotSupportAutoType.mask) != 0 && name.equals("@type")) {
+            if (i == 0 && (context.features & Feature.ErrorOnNotSupportAutoType.mask) != 0 && "@type".equals(name)) {
                 String typeName = readString();
                 throw new JSONException("autoType not support : " + typeName);
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -64,6 +64,7 @@ public boolean nextIfMatch(char ch) {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || bytes[offset] != first) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -191,6 +191,7 @@ public boolean nextIfObjectEnd() {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         if (bytes[offset] != BC_STR_ASCII && offset < end && bytes[offset + 1] == 0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -97,6 +97,7 @@ public boolean nextIfMatch(char ch) {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || str.charAt(offset) != first) {
@@ -127,6 +128,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfSet() {
         if (ch == 'S'
                 && offset + 2 < end
@@ -1949,6 +1951,7 @@ public boolean isNull() {
         return ch == 'n' && offset < end && str.charAt(offset) == 'u';
     }
 
+    @Override
     public Date readNullOrNewDate() {
         Date date = null;
         if (offset + 2 < end

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -285,6 +285,7 @@ public boolean nextIfMatch(char ch) {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || chars[offset] != first) {
@@ -315,6 +316,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfSet() {
         if (ch == 'S'
                 && offset + 2 < end
@@ -2192,6 +2194,7 @@ public boolean readIfNull() {
         return true;
     }
 
+    @Override
     public Date readNullOrNewDate() {
         Date date = null;
         if (offset + 2 < end

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -116,6 +116,7 @@ public boolean nextIfMatch(char e) {
         return true;
     }
 
+    @Override
     public boolean nextIfSet() {
         if (ch == 'S'
                 && offset + 2 < end
@@ -2977,6 +2978,7 @@ public boolean isNull() {
         return ch == 'n' && offset < end && bytes[offset] == 'u';
     }
 
+    @Override
     public Date readNullOrNewDate() {
         Date date = null;
         if (offset + 2 < end
@@ -5267,6 +5269,7 @@ public String readPattern() {
         return str;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || this.bytes[offset] != first) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -436,6 +436,7 @@ public void writeRaw(char[] chars) {
         off += chars.length;
     }
 
+    @Override
     public void writeRaw(char ch) {
         if (off == chars.length) {
             int minCapacity = off + 1;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -517,6 +517,7 @@ public void writeNameRaw(byte[] bytes) {
         off += bytes.length;
     }
 
+    @Override
     public void writeRaw(char ch) {
         if (ch < 0 || ch > 128) {
             throw new JSONException("not support " + ch);

File: core/src/main/java/com/alibaba/fastjson2/filter/Labels.java
Patch:
@@ -26,6 +26,7 @@ public DefaultLabelFilter(String[] includes, String[] excludes) {
             }
         }
 
+        @Override
         public boolean apply(String label) {
             if (excludes != null) {
                 return Arrays.binarySearch(excludes, label) < 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrFunc.java
Patch:
@@ -56,6 +56,7 @@ public void accept(T object, Object value) {
         function.accept(object, (List) value);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         List value;
         if (jsonReader.isJSONB()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -20,6 +20,7 @@ class FieldReaderObjectField<T>
         this.field = field;
     }
 
+    @Override
     public ObjectReader getInitReader() {
         return fieldObjectReader;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -288,6 +288,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == firstHashCodeLCase) {
             return first;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -321,6 +321,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -336,6 +336,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -366,6 +366,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -390,6 +390,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -345,7 +345,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         JSONReader.Context context = jsonReader.getContext();
         Supplier<Map> objectSupplier = jsonReader.getContext().getObjectSupplier();
         Map object;
-        if (objectSupplier != null && (mapType == null || mapType == JSONObject.class || mapType.getName().equals("com.alibaba.fastjson.JSONObject"))) {
+        if (objectSupplier != null && (mapType == null || mapType == JSONObject.class || "com.alibaba.fastjson.JSONObject".equals(mapType.getName()))) {
             object = objectSupplier.get();
         } else {
             object = (Map) createInstance(context.getFeatures() | features);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDate.java
Patch:
@@ -98,7 +98,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             int second = zdt.getSecond();
             int nano = zdt.getNano();
             if (nano == 0) {
-                if (hour == 0 && minute == 0 && second == 0 && date.getClass().getName().equals("java.sql.Date")) {
+                if (hour == 0 && minute == 0 && second == 0 && "java.sql.Date".equals(date.getClass().getName())) {
                     jsonWriter.writeDateYYYMMDD10(year, month, dayOfMonth);
                 } else {
                     jsonWriter.writeDateTime19(year, month, dayOfMonth, hour, minute, second);

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java
Patch:
@@ -54,6 +54,7 @@ public <T> T parseObject(Type type) {
         return reader.read(type);
     }
 
+    @Override
     public void close() {
         this.reader.close();
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/JSONSerializer.java
Patch:
@@ -116,6 +116,7 @@ public final void writeAs(Object object, Class type) {
         objectWriter.write(raw, 0);
     }
 
+    @Override
     public String toString() {
         return this.raw.toString();
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/MiscCodec.java
Patch:
@@ -26,6 +26,7 @@ public void write(JSONSerializer serializer, Object object, Object fieldName, Ty
         throw new JSONException("TODO");
     }
 
+    @Override
     public long getFeatures() {
         return 0L;
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java
Patch:
@@ -72,6 +72,7 @@ public List<AfterFilter> getAfterFilters() {
 
     class ListWrapper<T>
             extends ArrayList<T> {
+        @Override
         public boolean add(T filter) {
             JSONWriter.Context context = raw.getContext();
 
@@ -115,6 +116,7 @@ public void writeFieldName(String key) {
         raw.writeName(key);
     }
 
+    @Override
     public String toString() {
         return raw.toString();
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/jaxrs/FastJsonAutoDiscoverable.java
Patch:
@@ -29,6 +29,7 @@ public class FastJsonAutoDiscoverable
         }
     }
 
+    @Override
     public void configure(final FeatureContext context) {
         final Configuration config = context.getConfiguration();
 

File: core/src/main/java/com/alibaba/fastjson2/JSONB.java
Patch:
@@ -734,7 +734,7 @@ static byte[] toBytes(String str, Charset charset) {
             type = BC_STR_UTF16BE;
         } else if (charset == StandardCharsets.UTF_16LE) {
             type = BC_STR_UTF16LE;
-        } else if (charset != null && charset.name().equals("GB18030")) { // GraalVM support
+        } else if (charset != null && "GB18030".equals(charset.name())) { // GraalVM support
             type = BC_STR_GB18030;
         } else {
             return toBytes(str);

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -1181,13 +1181,13 @@ static Operator parseOperator(JSONReader jsonReader) {
             case 'S': {
                 jsonReader.readFieldNameHashCodeUnquote();
                 String fieldName = jsonReader.getFieldName();
-                if (!fieldName.equalsIgnoreCase("starts")) {
+                if (!"starts".equalsIgnoreCase(fieldName)) {
                     throw new JSONException("not support operator : " + fieldName);
                 }
 
                 jsonReader.readFieldNameHashCodeUnquote();
                 fieldName = jsonReader.getFieldName();
-                if (!fieldName.equalsIgnoreCase("with")) {
+                if (!"with".equalsIgnoreCase(fieldName)) {
                     throw new JSONException("not support operator : " + fieldName);
                 }
                 operator = Operator.STARTS_WITH;

File: core/src/main/java/com/alibaba/fastjson2/JSONPathCompilerReflect.java
Patch:
@@ -11,6 +11,7 @@ class JSONPathCompilerReflect
         implements JSONFactory.JSONPathCompiler {
     static final JSONPathCompilerReflect INSTANCE = new JSONPathCompilerReflect();
 
+    @Override
     public JSONPath compile(
             Class objectClass, JSONPath path
     ) {

File: core/src/main/java/com/alibaba/fastjson2/JSONPathCompilerReflectASM.java
Patch:
@@ -47,6 +47,7 @@ private boolean support(Class objectClass) {
                 || externalClass;
     }
 
+    @Override
     protected JSONPath compileSingleNamePath(Class objectClass, JSONPath.SingleNamePath path) {
         if (support(objectClass)) {
             return super.compileSingleNamePath(objectClass, path);

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1340,7 +1340,7 @@ public Map<String, Object> readObject() {
                 nextIfMatch(':');
             }
 
-            if (i == 0 && (context.features & Feature.ErrorOnNotSupportAutoType.mask) != 0 && name.equals("@type")) {
+            if (i == 0 && (context.features & Feature.ErrorOnNotSupportAutoType.mask) != 0 && "@type".equals(name)) {
                 String typeName = readString();
                 throw new JSONException("autoType not support : " + typeName);
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderASCII.java
Patch:
@@ -64,6 +64,7 @@ public boolean nextIfMatch(char ch) {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || bytes[offset] != first) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -191,6 +191,7 @@ public boolean nextIfObjectEnd() {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         if (bytes[offset] != BC_STR_ASCII && offset < end && bytes[offset + 1] == 0) {
             return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -97,6 +97,7 @@ public boolean nextIfMatch(char ch) {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || str.charAt(offset) != first) {
@@ -127,6 +128,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfSet() {
         if (ch == 'S'
                 && offset + 2 < end
@@ -1949,6 +1951,7 @@ public boolean isNull() {
         return ch == 'n' && offset < end && str.charAt(offset) == 'u';
     }
 
+    @Override
     public Date readNullOrNewDate() {
         Date date = null;
         if (offset + 2 < end

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -285,6 +285,7 @@ public boolean nextIfMatch(char ch) {
         return true;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || chars[offset] != first) {
@@ -315,6 +316,7 @@ public boolean nextIfEmptyString() {
         return true;
     }
 
+    @Override
     public boolean nextIfSet() {
         if (ch == 'S'
                 && offset + 2 < end
@@ -2192,6 +2194,7 @@ public boolean readIfNull() {
         return true;
     }
 
+    @Override
     public Date readNullOrNewDate() {
         Date date = null;
         if (offset + 2 < end

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -116,6 +116,7 @@ public boolean nextIfMatch(char e) {
         return true;
     }
 
+    @Override
     public boolean nextIfSet() {
         if (ch == 'S'
                 && offset + 2 < end
@@ -2977,6 +2978,7 @@ public boolean isNull() {
         return ch == 'n' && offset < end && bytes[offset] == 'u';
     }
 
+    @Override
     public Date readNullOrNewDate() {
         Date date = null;
         if (offset + 2 < end
@@ -5267,6 +5269,7 @@ public String readPattern() {
         return str;
     }
 
+    @Override
     public boolean nextIfEmptyString() {
         final char first = this.ch;
         if ((first != '"' && first != '\'') || offset >= end || this.bytes[offset] != first) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -436,6 +436,7 @@ public void writeRaw(char[] chars) {
         off += chars.length;
     }
 
+    @Override
     public void writeRaw(char ch) {
         if (off == chars.length) {
             int minCapacity = off + 1;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -517,6 +517,7 @@ public void writeNameRaw(byte[] bytes) {
         off += bytes.length;
     }
 
+    @Override
     public void writeRaw(char ch) {
         if (ch < 0 || ch > 128) {
             throw new JSONException("not support " + ch);

File: core/src/main/java/com/alibaba/fastjson2/filter/Labels.java
Patch:
@@ -26,6 +26,7 @@ public DefaultLabelFilter(String[] includes, String[] excludes) {
             }
         }
 
+        @Override
         public boolean apply(String label) {
             if (excludes != null) {
                 return Arrays.binarySearch(excludes, label) < 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrFunc.java
Patch:
@@ -56,6 +56,7 @@ public void accept(T object, Object value) {
         function.accept(object, (List) value);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         List value;
         if (jsonReader.isJSONB()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -20,6 +20,7 @@ class FieldReaderObjectField<T>
         this.field = field;
     }
 
+    @Override
     public ObjectReader getInitReader() {
         return fieldObjectReader;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -288,6 +288,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == firstHashCodeLCase) {
             return first;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -321,6 +321,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -336,6 +336,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -366,6 +366,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -390,6 +390,7 @@ public FieldReader getFieldReader(long hashCode) {
         return null;
     }
 
+    @Override
     public FieldReader getFieldReaderLCase(long hashCode) {
         if (hashCode == hashCode0LCase) {
             return fieldReader0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -345,7 +345,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         JSONReader.Context context = jsonReader.getContext();
         Supplier<Map> objectSupplier = jsonReader.getContext().getObjectSupplier();
         Map object;
-        if (objectSupplier != null && (mapType == null || mapType == JSONObject.class || mapType.getName().equals("com.alibaba.fastjson.JSONObject"))) {
+        if (objectSupplier != null && (mapType == null || mapType == JSONObject.class || "com.alibaba.fastjson.JSONObject".equals(mapType.getName()))) {
             object = objectSupplier.get();
         } else {
             object = (Map) createInstance(context.getFeatures() | features);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplDate.java
Patch:
@@ -98,7 +98,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             int second = zdt.getSecond();
             int nano = zdt.getNano();
             if (nano == 0) {
-                if (hour == 0 && minute == 0 && second == 0 && date.getClass().getName().equals("java.sql.Date")) {
+                if (hour == 0 && minute == 0 && second == 0 && "java.sql.Date".equals(date.getClass().getName())) {
                     jsonWriter.writeDateYYYMMDD10(year, month, dayOfMonth);
                 } else {
                     jsonWriter.writeDateTime19(year, month, dayOfMonth, hour, minute, second);

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java
Patch:
@@ -54,6 +54,7 @@ public <T> T parseObject(Type type) {
         return reader.read(type);
     }
 
+    @Override
     public void close() {
         this.reader.close();
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/JSONSerializer.java
Patch:
@@ -116,6 +116,7 @@ public final void writeAs(Object object, Class type) {
         objectWriter.write(raw, 0);
     }
 
+    @Override
     public String toString() {
         return this.raw.toString();
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/MiscCodec.java
Patch:
@@ -26,6 +26,7 @@ public void write(JSONSerializer serializer, Object object, Object fieldName, Ty
         throw new JSONException("TODO");
     }
 
+    @Override
     public long getFeatures() {
         return 0L;
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java
Patch:
@@ -72,6 +72,7 @@ public List<AfterFilter> getAfterFilters() {
 
     class ListWrapper<T>
             extends ArrayList<T> {
+        @Override
         public boolean add(T filter) {
             JSONWriter.Context context = raw.getContext();
 
@@ -115,6 +116,7 @@ public void writeFieldName(String key) {
         raw.writeName(key);
     }
 
+    @Override
     public String toString() {
         return raw.toString();
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/jaxrs/FastJsonAutoDiscoverable.java
Patch:
@@ -29,6 +29,7 @@ public class FastJsonAutoDiscoverable
         }
     }
 
+    @Override
     public void configure(final FeatureContext context) {
         final Configuration config = context.getConfiguration();
 

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -220,6 +220,9 @@ public JSONArray getJSONArray(String key) {
 
     public <T> List<T> getList(String key, Class<T> itemClass, JSONReader.Feature... features) {
         JSONArray jsonArray = getJSONArray(key);
+        if (jsonArray == null) {
+            return null;
+        }
         return jsonArray.toList(itemClass, features);
     }
 

File: core/src/test/java/com/alibaba/fastjson2/LargeFile2MTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.BufferedInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.util.zip.ZipInputStream;
 
@@ -19,6 +20,8 @@ public void init() throws Exception {
         ) {
             zipIn.getNextEntry();
             str = IOUtils.toString(zipIn, "UTF-8");
+        } catch (IOException ignored) {
+            // ignored
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstrutor.java
Patch:
@@ -215,9 +215,9 @@ public T readObject(JSONReader jsonReader, long features) {
                     continue;
                 }
 
-                boolean supportAutoType = jsonReader.getContext().isEnabled(JSONReader.Feature.SupportAutoType);
-
                 JSONReader.Context context = jsonReader.getContext();
+                boolean supportAutoType = ((this.features | features | context.getFeatures()) & JSONReader.Feature.SupportAutoType.mask) != 0;
+
                 ObjectReader autoTypeObjectReader = null;
 
                 if (supportAutoType) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterAdapter.java
Patch:
@@ -236,7 +236,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
 
         jsonWriter.startObject();
 
-        if (jsonWriter.isWriteTypeInfo(object, features)) {
+        if (((this.features | features) & JSONWriter.Feature.WriteClassName.mask) != 0 || jsonWriter.isWriteTypeInfo(object, features)) {
             writeTypeInfo(jsonWriter);
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringMethod.java
Patch:
@@ -101,7 +101,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         if (value == null) {
             long features = this.features | jsonWriter.getFeatures();
-            if ((features & (JSONWriter.Feature.WriteNulls.mask | JSONWriter.Feature.NullAsDefaultValue.mask)) == 0) {
+            if ((features & (JSONWriter.Feature.WriteNulls.mask | JSONWriter.Feature.NullAsDefaultValue.mask | JSONWriter.Feature.WriteNullStringAsEmpty.mask)) == 0) {
                 return false;
             }
         }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue364.java
Patch:
@@ -11,7 +11,7 @@ public class Issue364 {
     @Test
     public void test() {
         TestBean bean = new TestBean();
-        assertEquals("{\"bean\":null,\"msg\":\"\"}", JSON.toJSONString(bean, JSONWriter.Feature.NullAsDefaultValue));
+        assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, JSONWriter.Feature.NullAsDefaultValue));
     }
 
     @Data

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/v2issues/Issue364.java
Patch:
@@ -10,7 +10,7 @@ public class Issue364 {
     @Test
     public void test() {
         TestBean bean = new TestBean();
-        Assertions.assertEquals("{\"bean\":null,\"msg\":\"\"}", JSON.toJSONString(bean, SerializerFeature.WriteNullStringAsEmpty));
+        Assertions.assertEquals("{\"msg\":\"\"}", JSON.toJSONString(bean, SerializerFeature.WriteNullStringAsEmpty));
     }
 
     @Data

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFunc.java
Patch:
@@ -27,11 +27,13 @@ final class FieldReaderObjectFunc<T, V>
             Object defaultValue,
             JSONSchema schema,
             Method method,
-            BiConsumer<T, V> function
+            BiConsumer<T, V> function,
+            ObjectReader fieldObjectReader
     ) {
         super(fieldName, fieldType, fieldClass, ordinal, features, format, locale, defaultValue, schema);
         this.method = method;
         this.function = function;
+        this.fieldObjectReader = fieldObjectReader;
     }
 
     @Override

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2600/Issue2685.java
Patch:
@@ -36,8 +36,8 @@ public void test_field() {
         System.out.println(smsMsg);
 
         com.alibaba.fastjson2.JSON.mixIn(SMGPSubmitMessage.class, Mixin.class);
-        smgpSubmitMessage = JSON.parseObject(smsMsg, SMGPSubmitMessage.class);
-        assertEquals("hello", smgpSubmitMessage.getMsgContent());
+        SMGPSubmitMessage smgpSubmitMessage2 = JSON.parseObject(smsMsg, SMGPSubmitMessage.class);
+        assertEquals("hello", smgpSubmitMessage2.getMsgContent());
     }
 
     public interface Mixin {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -1512,6 +1512,9 @@ public String readString() {
             if (JDKUtils.JVM_VERSION > 8) {
                 _for:
                 for (int i = 0; ; ++i) {
+                    if (offset >= end) {
+                        throw new JSONException("invalid escape character EOI");
+                    }
                     char c = chars[offset];
                     if (c == '\\') {
                         valueEscape = true;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -73,7 +73,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         int offset = jsonReader.getOffset();
         try {
             Object value;
-            if (jsonReader.isNull()) {
+            if (jsonReader.nextIfNull()) {
                 if (fieldClass == OptionalInt.class) {
                     value = OptionalInt.empty();
                 } else if (fieldClass == OptionalLong.class) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -310,7 +310,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
             }
         }
 
-        jsonReader.nextIfObjectStart();
+        boolean objectStart = jsonReader.nextIfObjectStart();
 
         Object object = null;
         for (int i = 0; ; ++i) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListFunc.java
Patch:
@@ -86,7 +86,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
                     previousObjectWriter = itemObjectWriter;
                 }
 
-                itemObjectWriter.write(jsonWriter, item);
+                itemObjectWriter.writeJSONB(jsonWriter, item, null, itemType, 0);
             }
             return true;
         }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest9.java
Patch:
@@ -9,6 +9,6 @@ public class PathTest9 {
     @Test
     public void test0() {
         String str = "[1,2,3,4,5]";
-        assertEquals(1, JSONPath.extract(str, "$[*][0]"));
+        assertEquals("[1,2,3,4,5]", JSONPath.extract(str, "$[*][0]").toString());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -339,7 +339,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
             String strKey = key == null ? "null" : key.toString();
 
             if (value == null) {
-                if (jsonWriter.isWriteNulls()) {
+                if ((jsonWriter.getFeatures(features) & JSONWriter.Feature.WriteNulls.mask) != 0) {
                     jsonWriter.writeName(strKey);
                     jsonWriter.writeColon();
                     jsonWriter.writeNull();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionFieldReadOnly.java
Patch:
@@ -29,7 +29,7 @@ public void accept(T object, Object value) {
             throw new JSONException("set " + fieldName + " error", e);
         }
 
-        if (collection == Collections.EMPTY_LIST || collection == Collections.EMPTY_SET) {
+        if (collection == Collections.EMPTY_LIST || collection == Collections.EMPTY_SET || collection == null) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -48,7 +48,7 @@ public void accept(T object, Object value) {
             throw new JSONException("set " + fieldName + " error", e);
         }
 
-        if (collection == Collections.EMPTY_LIST || collection == Collections.EMPTY_SET) {
+        if (collection == Collections.EMPTY_LIST || collection == Collections.EMPTY_SET || collection == null) {
             if (schema != null) {
                 schema.assertValidate(collection);
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapMethodReadOnly.java
Patch:
@@ -50,7 +50,7 @@ public void accept(T object, Object value) {
             throw new JSONException("set " + fieldName + " error", e);
         }
 
-        if (map == Collections.EMPTY_MAP) {
+        if (map == Collections.EMPTY_MAP || map == null) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FielderReaderImplMapFieldReadOnly.java
Patch:
@@ -50,7 +50,7 @@ public void accept(T object, Object value) {
             throw new JSONException("set " + fieldName + " error", e);
         }
 
-        if (map == Collections.EMPTY_MAP) {
+        if (map == Collections.EMPTY_MAP || map == null) {
             return;
         }
 

File: extension/src/main/java/com/alibaba/fastjson2/support/springfox/SwaggerJsonWriter.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.fastjson2.support.springfox;
 
+import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.writer.ObjectWriter;
 import springfox.documentation.spring.web.json.Json;
@@ -23,7 +24,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         } else if (object instanceof Json) {
             Json json = (Json) object;
             String value = json.value();
-            jsonWriter.writeString(value);
+            jsonWriter.writeAny(JSON.parse(value));
         }
     }
 }

File: extension/src/test/java/com/alibaba/fastjson2/springdoc/OpenApiJsonWriterTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.springdoc;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.support.springdoc.OpenApiJsonWriter;
 import org.junit.jupiter.api.Test;
@@ -19,7 +20,8 @@ public void test() {
 
     @Test
     public void test1() {
-        JSON.register(String.class, OpenApiJsonWriter.INSTANCE);
+        JSONFactory.getDefaultObjectWriterProvider().register(String.class, OpenApiJsonWriter.INSTANCE);
         assertEquals(jsonStr, JSON.toJSONString(jsonStr));
+        JSONFactory.getDefaultObjectWriterProvider().unregister(String.class, OpenApiJsonWriter.INSTANCE);
     }
 }

File: extension/src/main/java/com/alibaba/fastjson2/support/springfox/SwaggerJsonWriter.java
Patch:
@@ -1,10 +1,12 @@
 package com.alibaba.fastjson2.support.springfox;
 
+import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.writer.ObjectWriter;
 import springfox.documentation.spring.web.json.Json;
 
 import java.lang.reflect.Type;
+import java.nio.charset.StandardCharsets;
 
 /**
  * SwaggerJsonWriter: Swagger的Json处理，解决/v2/api-docs获取不到内容导致获取不到API页面内容的问题
@@ -23,7 +25,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         } else if (object instanceof Json) {
             Json json = (Json) object;
             String value = json.value();
-            jsonWriter.writeString(value);
+            jsonWriter.writeAny(JSON.parse(value));
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -3549,7 +3549,7 @@ protected ZonedDateTime readZonedDateTimeX(int len) {
 
     @Override
     protected LocalDateTime readLocalDateTime19() {
-        if (ch != '"') {
+        if (ch != '"' && ch != '\'') {
             throw new JSONException("date only support string input");
         }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2000/Issue2065C.java
Patch:
@@ -17,7 +17,6 @@ public void test_for_issue() throws Exception {
             error = e;
         }
         assertNotNull(error);
-        error.printStackTrace();
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2000/Issue2065C.java
Patch:
@@ -29,7 +29,6 @@ public void test_for_issue_01() {
             error = e;
         }
         assertNotNull(error);
-        error.printStackTrace();
     }
 
     @Test

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2428,7 +2428,8 @@ public enum Feature {
         ErrorOnEnumNotMatch(1 << 12),
         TrimString(1 << 13),
         ErrorOnNotSupportAutoType(1 << 14),
-        DuplicateKeyValueAsArray(1 << 15);
+        DuplicateKeyValueAsArray(1 << 15),
+        AllowUnQuotedFieldNames(1 << 16);
 
         public final long mask;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreator.java
Patch:
@@ -1818,7 +1818,7 @@ protected ObjectReader createEnumReader(
         Enum[] ordinalEnums = (Enum[]) objectClass.getEnumConstants();
 
         Map<Long, Enum> enumMap = new HashMap();
-        for (int i = 0; i < ordinalEnums.length; ++i) {
+        for (int i = 0; ordinalEnums != null && i < ordinalEnums.length; ++i) {
             Enum e = ordinalEnums[i];
             String name = e.name();
             long hash = Fnv.hashCode64(name);
@@ -1851,7 +1851,7 @@ protected ObjectReader createEnumReader(
             }
         }
 
-        for (int i = 0; i < ordinalEnums.length; ++i) {
+        for (int i = 0; ordinalEnums != null && i < ordinalEnums.length; ++i) {
             Enum e = ordinalEnums[i];
             String name = e.name();
             long hashLCase = Fnv.hashCode64LCase(name);
@@ -1897,7 +1897,7 @@ protected ObjectReader createEnumReader(
         }
 
         if (createMethod == null && enumValueField == null) {
-            if (ordinalEnums.length == 2) {
+            if (ordinalEnums != null && ordinalEnums.length == 2) {
                 Enum first = ordinalEnums[0];
 
                 int matchCount = 0;

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -69,7 +69,7 @@ static Object parse(String text, JSONReader.Feature... features) {
      * Parse JSON {@link String} into {@link JSONArray} or {@link JSONObject} with specified {@link JSONReader.Feature}s enabled
      *
      * @param text     the JSON {@link String} to be parsed
-     * @param context
+     * @param context specify the context use by JSONReader
      * @return Object
      */
     static Object parse(String text, JSONReader.Context context) {
@@ -720,8 +720,7 @@ static <T> T parseObject(
      *
      * @param utf8Bytes UTF8 encoded JSON byte array to parse
      * @param clazz    specify the Class to be converted
-     * @param context
-     * @param features features to be enabled in parsing
+     * @param context specify the context use by JSONReader
      * @return Class
      */
     @SuppressWarnings("unchecked")

File: core/src/main/java/com/alibaba/fastjson2/codec/DateTimeCodec.java
Patch:
@@ -15,6 +15,8 @@ public abstract class DateTimeCodec {
 
     public final Locale locale;
 
+    public final boolean yyyyMMddhhmmss19;
+
     DateTimeFormatter dateFormatter;
 
     public DateTimeCodec(String format) {
@@ -28,6 +30,7 @@ public DateTimeCodec(String format, Locale locale) {
 
         this.format = format;
         this.locale = locale;
+        yyyyMMddhhmmss19 = "yyyy-MM-dd HH:mm:ss".equals(format);
 
         boolean formatUnixTime = false, formatISO8601 = false, formatMillis = false, hasDay = false, hasHour = false;
         if (format != null) {

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -2150,7 +2150,7 @@ public void set(Object rootObject, Object value, JSONReader.Feature... readerFea
                         }
                     }
 
-                    if(duplicateKeyValueAsArray) {
+                    if (duplicateKeyValueAsArray) {
                         if (origin instanceof Collection) {
                             ((Collection) origin).add(value);
                             map.put(name, value);
@@ -3486,7 +3486,7 @@ public void set(Context context, Object value) {
                 Map map = (Map) object;
                 Object origin = map.put(name, value);
                 if (origin != null) {
-                    if((context.readerFeatures & JSONReader.Feature.DuplicateKeyValueAsArray.mask) != 0) {
+                    if ((context.readerFeatures & JSONReader.Feature.DuplicateKeyValueAsArray.mask) != 0) {
                         if (origin instanceof Collection) {
                             ((Collection) origin).add(value);
                             map.put(name, value);

File: core/src/test/java/com/alibaba/fastjson2/features/DuplicateValueAsArrayTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.features;
 
 import com.alibaba.fastjson2.*;
-import com.fasterxml.jackson.jaxrs.json.annotation.JSONP;
 import org.junit.jupiter.api.Test;
 
 import java.math.BigDecimal;

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2386,7 +2386,8 @@ public enum Feature {
         UseBigDecimalForDoubles(1 << 11),
         ErrorOnEnumNotMatch(1 << 12),
         TrimString(1 << 13),
-        ErrorOnNotSupportAutoType(1 << 14);
+        ErrorOnNotSupportAutoType(1 << 14),
+        DuplicateKeyValueAsArray(1 << 15);
 
         public final long mask;
 

File: core/src/test/java/com/alibaba/fastjson2/JSONTest.java
Patch:
@@ -705,7 +705,8 @@ private static class MyList0<T>
     @Test
     public void testNulls() {
         assertNull(JSON.parse(null));
-        assertNull(JSON.parse(null, JSONReader.Feature.SupportAutoType));
+        assertNull(JSON.parse((byte[]) null, JSONReader.Feature.SupportAutoType));
+        assertNull(JSON.parse((String) null, JSONReader.Feature.SupportAutoType));
 
         assertNull(JSON.parseObject((String) null));
         assertNull(JSON.parseObject((String) null, JSONReader.Feature.SupportAutoType));

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONObject.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONReader;
+import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.reader.ObjectReader;
 import com.alibaba.fastjson2.reader.ObjectReaderProvider;
 import com.alibaba.fastjson2.writer.ObjectWriter;
@@ -1004,12 +1005,12 @@ public <T> T toJavaObject(Class<T> clazz, ParserConfig config, int features) {
     }
 
     public String toJSONString() {
-        return com.alibaba.fastjson2.JSON.toJSONString(this);
+        return com.alibaba.fastjson2.JSON.toJSONString(this, JSONWriter.Feature.ReferenceDetection);
     }
 
     @Override
     public String toString() {
-        return com.alibaba.fastjson2.JSON.toJSONString(this);
+        return com.alibaba.fastjson2.JSON.toJSONString(this, JSONWriter.Feature.ReferenceDetection);
     }
 
     public String toString(SerializerFeature... features) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/parser/Feature.java
Patch:
@@ -151,8 +151,7 @@ public enum Feature {
     /**
      * @since 2.0.6
      */
-    ErrorOnNotSupportAutoType
-    ;
+    ErrorOnNotSupportAutoType;
 
     public final int mask;
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -207,6 +207,9 @@ protected static void config(JSONReader.Context context, Feature[] features) {
                 case TrimStringFieldValue:
                     context.config(JSONReader.Feature.TrimString);
                     break;
+                case ErrorOnNotSupportAutoType:
+                    context.config(JSONReader.Feature.ErrorOnNotSupportAutoType);
+                    break;
                 case OrderedField:
                     context.setObjectSupplier(orderedSupplier);
                     break;

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -351,7 +351,7 @@ public void addResolveTask(FieldReader fieldReader, Object object, JSONPath path
         if (resolveTasks == null) {
             resolveTasks = new ArrayList<>();
         }
-        resolveTasks.add(new ResolveTask(fieldReader, object, null, path));
+        resolveTasks.add(new ResolveTask(fieldReader, object, fieldReader.getFieldName(), path));
     }
 
     public void addResolveTask(Map object, Object key, JSONPath reference) {

File: core/src/test/java/com/alibaba/fastjson2/issues/Canal_Issue4186.java
Patch:
@@ -59,10 +59,11 @@ public void test1() {
         assertEquals(position.getClass(), position1.getClass());
     }
 
-    public static abstract class Position
+    public abstract static class Position
             implements Serializable {
     }
 
-    public static class EntryPosition extends Position {
+    public static class EntryPosition
+            extends Position {
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue251.java
Patch:
@@ -33,7 +33,7 @@ public static class TypeImage
     }
 
     @Data
-    abstract static public class AbstractTypeFile {
+    public abstract static class AbstractTypeFile {
         /**
          * 媒体资源的id信息。String类型
          */

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue341.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.issues;
 
-import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONB;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/Issue1233.java
Patch:
@@ -26,7 +26,7 @@ public void test_for_issue() throws Exception {
         assertEquals("x123", floorV2.templateId);
     }
 
-    @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
+    @JSONType(seeAlso = FloorV2.class, typeKey = "type")
     public interface AreaMixIn {
     }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONFieldDefaultValueTest.java
Patch:
@@ -256,6 +256,5 @@ public Double getaDouble2() {
         public void setaDouble2(Double aDouble2) {
             this.aDouble2 = aDouble2;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1178.java
Patch:
@@ -19,8 +19,7 @@ public void test_for_issue() throws Exception {
                 "}";
 
         JSONObject jsonObject = JSON.parseObject(json);
-        TestModel loginResponse = jsonObject.toJavaObject(TestModel.class); // TODO toJavaObject
-
+        TestModel loginResponse = jsonObject.toJavaObject(TestModel.class);
     }
 
     public static class TestModel

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1233.java
Patch:
@@ -26,7 +26,7 @@ public void test_for_issue() throws Exception {
         assertEquals("x123", floorV2.templateId);
     }
 
-    @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
+    @JSONType(seeAlso = FloorV2.class, typeKey = "type")
     public interface AreaMixIn {
     }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1235.java
Patch:
@@ -27,7 +27,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2);
     }
 
-    @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
+    @JSONType(seeAlso = FloorV2.class, typeKey = "type")
     public interface Area {
         public static final String TYPE_SECTION = "section";
         public static final String TYPE_FLOORV1 = "floorV1";

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1235_noasm.java
Patch:
@@ -27,7 +27,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2);
     }
 
-    @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
+    @JSONType(seeAlso = FloorV2.class, typeKey = "type")
     public interface Area {
         public static final String TYPE_SECTION = "section";
         public static final String TYPE_FLOORV1 = "floorV1";

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1450.java
Patch:
@@ -11,7 +11,7 @@ public class Issue1450 {
     @Test
     public void test_for_issue() throws Exception {
         LocalDateTime localDateTime = LocalDateTime.of(2018, 8, 31, 15, 26, 37, 1);
-        String json = JSON.toJSONString(localDateTime, "yyyy-MM-dd HH:mm:ss");//2018-08-31T15:26:37.000000001
+        String json = JSON.toJSONString(localDateTime, "yyyy-MM-dd HH:mm:ss");
         assertEquals("\"2018-08-31 15:26:37\"", json);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1486.java
Patch:
@@ -23,7 +23,7 @@ public static class Value {
         @JSONField(alternateNames = {"song_list", "songList"})
         List<Value2> songList;
 
-        @JSONField(alternateNames = {"songlist"})
+        @JSONField(alternateNames = "songlist")
         String songlist;
 
         public List<Value2> getSongList() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1649.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json);
     }
 
-    @JSONType(serializeFeatures = {Feature.NullAsDefaultValue})
+    @JSONType(serializeFeatures = Feature.NullAsDefaultValue)
     public static class Apple {
         private String color;
         private String productCity;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1649_private.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json);
     }
 
-    @JSONType(serializeFeatures = {JSONWriter.Feature.NullAsDefaultValue})
+    @JSONType(serializeFeatures = JSONWriter.Feature.NullAsDefaultValue)
     private static class Apple {
         // @JSONField(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue})
         private String color;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue_for_gaorui.java
Patch:
@@ -38,11 +38,11 @@ public static class PromotionTermDetail {
         /**
          * 是否能够获取到该优惠
          */
-        private boolean isMatch = false;
+        private boolean isMatch;
         /**
          * 是否选择了该优惠
          */
-        private boolean isChoose = false;
+        private boolean isChoose;
         /**
          * 未获取到优惠的原因
          */

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1766.java
Patch:
@@ -20,7 +20,7 @@ public void test_for_issue() throws Exception {
 
         // failed
         json = "{\"name\":\"张三\", \"birthday\":\"2017-01-01 01:01:02\"\n}";
-        user = JSON.parseObject(json, User.class);// will exception
+        user = JSON.parseObject(json, User.class); // will exception
         assertEquals("张三", user.getName());
         assertNotNull(user.getBirthday());
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1856C.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.fastjson2.v1issues.issue_1800;
 
-import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
+import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.filter.Labels;
 import org.junit.jupiter.api.Test;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1900/Issue1903C.java
Patch:
@@ -30,7 +30,7 @@ public void test_issue() {
 
     interface Issues1903 {
         @Transient
-        @JSONField(serialzeFeatures = {SerializerFeature.SkipTransientField})
+        @JSONField(serialzeFeatures = SerializerFeature.SkipTransientField)
         String getName();
 
         void setName(String name);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2300/Issue2355.java
Patch:
@@ -21,7 +21,7 @@ public void test_for_issue() throws Exception {
     }
 
     static class VO {
-        @JSONField(serializeFeatures = {JSONWriter.Feature.WriteBigDecimalAsPlain})
+        @JSONField(serializeFeatures = JSONWriter.Feature.WriteBigDecimalAsPlain)
         private BigDecimal num;
 
         public BigDecimal getNum() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3600/Issue3689.java
Patch:
@@ -108,6 +108,6 @@ public void test_with_type_6_meaningles_char() {
     @Test
     public void test_for_issue() {
         JSON.parseArray("[\"////dfdfdf\"]"); //不会抛异常
-        JSON.parse("[\"dfdfdf\"]");//不会抛异常
+        JSON.parse("[\"dfdfdf\"]"); //不会抛异常
     }
 }

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue237/Issue237.java
Patch:
@@ -58,7 +58,7 @@ public void test() throws Exception {
     }
 
     @RestController
-    @RequestMapping()
+    @RequestMapping
     public static class BeanController {
         @PostMapping(path = "/test", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
         public JSONObject test(@RequestBody JSONObject requestBody) {

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue283/Issue283.java
Patch:
@@ -67,7 +67,7 @@ public void test() throws Exception {
     }
 
     @RestController
-    @RequestMapping()
+    @RequestMapping
     public static class BeanController {
         @PostMapping("/xx/xx")
         public @ResponseBody

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue342/Issue342.java
Patch:
@@ -13,7 +13,6 @@
 import java.util.List;
 
 public class Issue342 {
-
     private SearchPage<User> searchPage;
 
     public Issue342() {
@@ -79,5 +78,4 @@ public void setAge(Integer age) {
             this.age = age;
         }
     }
-
 }

File: extension/src/test/java/com/alibaba/fastjson2/v1issues/issue_4100/Issue4138.java
Patch:
@@ -37,7 +37,6 @@ public void testAuthority() {
         assertEquals(org.springframework.security.core.authority.SimpleGrantedAuthority.class, object.getClass());
     }
 
-
     @Test
     public void test1() {
         String json = "{\"@type\":\"org.springframework.util.LinkedCaseInsensitiveMap\"}";

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1000/Issue1066.java
Patch:
@@ -91,6 +91,4 @@ public String toString() {
                     '}';
         }
     }
-
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1178.java
Patch:
@@ -19,8 +19,6 @@ public void test_for_issue() throws Exception {
                 "}";
 
         JSONObject jsonObject = JSON.parseObject(json);
-//        TestModel loginResponse = JSON.toJavaObject(jsonObject, TestModel.class); // TODO toJavaObject
-
     }
 
     public static class TestModel

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1187.java
Patch:
@@ -13,7 +13,6 @@ public class Issue1187 {
     public void test_for_issue() throws Exception {
         String text1 = "{\"d\":\"2017-04-27+08:00\"}";
         JSONObject jsonObject = (JSONObject) JSON.parse(text1, Feature.AllowISO8601DateFormat);
-        ;
-        System.out.println(jsonObject.get("d").getClass().getClass());//String
+        System.out.println(jsonObject.get("d").getClass().getClass());
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1225.java
Patch:
@@ -37,7 +37,6 @@ public void test_parseObject_2() {
         assertEquals("2", object.data.get(1));
     }
 
-
     static class BaseGenericType<T> {
         public T data;
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1227.java
Patch:
@@ -28,6 +28,3 @@ public static class Bean {
         public String msg;
     }
 }
-
-
-

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1235.java
Patch:
@@ -27,7 +27,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2);
     }
 
-    @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
+    @JSONType(seeAlso = FloorV2.class, typeKey = "type")
     public interface Area {
         public static final String TYPE_SECTION = "section";
         public static final String TYPE_FLOORV1 = "floorV1";

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1235_noasm.java
Patch:
@@ -27,7 +27,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"type\":\"floorV2\",\"templateId\":\"x123\"}", json2);
     }
 
-    @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
+    @JSONType(seeAlso = FloorV2.class, typeKey = "type")
     public interface Area {
         public static final String TYPE_SECTION = "section";
         public static final String TYPE_FLOORV1 = "floorV1";

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1265.java
Patch:
@@ -1,8 +1,8 @@
 package com.alibaba.fastjson.issue_1200;
 
 import com.alibaba.fastjson.JSON;
-import com.alibaba.fastjson.TypeReference;
 import com.alibaba.fastjson.JSONObject;
+import com.alibaba.fastjson.TypeReference;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1278.java
Patch:
@@ -61,6 +61,4 @@ public static class AlternateNames {
         public String name;
         public int id;
     }
-
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1299.java
Patch:
@@ -76,6 +76,4 @@ public static class SaveUnitInfo {
 
     public static class BaseResultDo {
     }
-
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1367.java
Patch:
@@ -51,7 +51,6 @@ public void setup() {
                 .build();
     }
 
-
     public static class AbstractController<ID extends Serializable, PO extends GenericEntity<ID>> {
         @PostMapping(path = "/typeVariableBean", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
         public PO save(@RequestBody PO dto) {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1425.java
Patch:
@@ -41,6 +41,4 @@ public void setName(String name) {
             this.name = name;
         }
     }
-
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1450.java
Patch:
@@ -11,7 +11,7 @@ public class Issue1450 {
     @Test
     public void test_for_issue() throws Exception {
         LocalDateTime localDateTime = LocalDateTime.of(2018, 8, 31, 15, 26, 37, 1);
-        String json = JSON.toJSONStringWithDateFormat(localDateTime, "yyyy-MM-dd HH:mm:ss");//2018-08-31T15:26:37.000000001
+        String json = JSON.toJSONStringWithDateFormat(localDateTime, "yyyy-MM-dd HH:mm:ss"); //2018-08-31T15:26:37.000000001
         assertEquals("\"2018-08-31 15:26:37\"", json);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1486.java
Patch:
@@ -22,7 +22,7 @@ public static class Value {
         @JSONField(alternateNames = {"song_list", "songList"})
         List<Value2> songList;
 
-        @JSONField(alternateNames = {"songlist"})
+        @JSONField(alternateNames = "songlist")
         String songlist;
 
         public List<Value2> getSongList() {
@@ -44,7 +44,6 @@ public void setSonglist(String songlist) {
 
     public static class Value2 {
         int val;
-
         int v_al;
 
         public int getVal() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1548.java
Patch:
@@ -41,7 +41,6 @@ public Object getMeta(String name) {
             return this.meta.get(name);
         }
 
-
         @Override
         public String toString() {
             return JSON.toJSONString(this);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1800/Issue1892.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson.issue_1800;
 
 import com.alibaba.fastjson.JSON;
-import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import org.junit.jupiter.api.Test;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2240.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.Collections;
 import java.util.Map;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class Issue2240 {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2400/Issue2428.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.PropertyNamingStrategy;
-import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.annotation.JSONType;
+import com.alibaba.fastjson.serializer.SerializerFeature;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2400/Issue2447.java
Patch:
@@ -48,7 +48,6 @@ public static class VO2 {
         public Map<String, Object> properties = new LinkedHashMap<String, Object>();
     }
 
-
     public static class Location {
         public int longitude;
         public int latitude;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2600/Issue2606.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson.issue_2600;
 
 import com.alibaba.fastjson.JSON;
-import com.alibaba.fastjson.util.TypeUtils;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2600/Issue2628.java
Patch:
@@ -23,7 +23,6 @@ public void test_for_issue() throws Exception {
         Tobject tobj1 = new Tobject();
         tobj1.setBi(bi2); //没问题
         assertEquals("9423372036854775807", tobj1.getBi().toString());
-        ;
 
         String s2 = JSON.toJSONString(tobj1);
         Tobject tobj2 = JSON.parseObject(s2, Tobject.class);  //有问题

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2779.java
Patch:
@@ -113,8 +113,6 @@ public static class Model {
         private List f097;
         private List f098;
         private List f099;
-
-
         private List f100;
         private List f101;
         private List f102;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2900/Issue2914.java
Patch:
@@ -44,7 +44,6 @@ public void test_for_issue() throws Exception {
         assertEquals(3, complex1.getBlockQueue().size());
     }
 
-
     public static class Complex {
         private Queue<String> blockQueue;
 
@@ -68,6 +67,4 @@ public void setBlockQueue(Queue<Integer> blockQueue) {
             this.blockQueue = blockQueue;
         }
     }
-
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2900/Issue2982.java
Patch:
@@ -15,6 +15,4 @@ public void test_for_issue() {
         assertTrue(JSON.isValidArray(jsonStr));
         assertTrue(JSONObject.isValidArray(jsonStr));
     }
-
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3000/Issue3217.java
Patch:
@@ -32,7 +32,6 @@ public void writeAfter(Object object) {
                  *这两个write换个顺序就不会报错
                  */
                 this.writeKeyValue("afterFilterTwo", "two");
-
             }
         }
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3000/Issue3373.java
Patch:
@@ -37,7 +37,6 @@ public void writeBefore(Object object) {
                  *这两个write换个顺序就不会报错
                  */
                 this.writeKeyValue("afterFilterTwo", "two");
-
             }
         }
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3100/Issue3109.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson.issue_3100;
 
 import com.alibaba.fastjson.JSON;
-import com.alibaba.fastjson.parser.ParserConfig;
 import org.junit.jupiter.api.Test;
 
 public class Issue3109 {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3452.java
Patch:
@@ -16,7 +16,7 @@ public void test_for_issue() throws Exception {
     }
 
     private static class Step {
-        @JSONField(name = "component_key", alternateNames = {"componentKey"})
+        @JSONField(name = "component_key", alternateNames = "componentKey")
         private String componentKey;
 
         public String getComponentKey() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3460.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Description:  <br>

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3600/Issue3682.java
Patch:
@@ -13,7 +13,7 @@ public void test_for_issue() throws Exception {
     }
 
     @Data
-    static public class Cid {
+    public static class Cid {
         @JSONField(name = "/")
         private String hash;
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3600/Issue3689.java
Patch:
@@ -108,7 +108,7 @@ public void test_with_type_6_meaningles_char() {
     @Test
     public void test_for_issue() {
         JSONArray.parseArray("[\"////dfdfdf\"]"); //不会抛异常
-        JSONArray objects = JSONArray.parseArray("[\"dfdfdf\"]");//不会抛异常
+        JSONArray objects = JSONArray.parseArray("[\"dfdfdf\"]"); //不会抛异常
         System.out.println(JSONArray.parseArray("[\"////dfdfdf\"]"));
         System.out.println(JSONArray.parseArray("[\"dfdfdf\"]"));
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/v2issues/Issue334.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.fastjson.v2issues;
 
-import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.JSONObject;
+import com.alibaba.fastjson.parser.Feature;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/date/DateTest.java
Patch:
@@ -29,7 +29,7 @@ public void test_date() throws Exception {
         assertEquals("\"2011-12-18 00:23:07\"", JSON.toJSONString(date, SerializerFeature.WriteDateUseDateFormat));
         assertEquals("\"2011-12-18 00:23:07.429\"", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS"));
         assertEquals("'2011-12-18 00:23:07.429'", JSON.toJSONStringWithDateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS",
-                                        SerializerFeature.UseSingleQuotes));
+                SerializerFeature.UseSingleQuotes));
     }
 
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1100/Issue1153.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() throws Exception {
                 "test : '//helo'\n" +
                 "}";
 
-        JSONObject jsonObject =JSON.parseObject(json);
+        JSONObject jsonObject = JSON.parseObject(json);
         System.out.println(jsonObject);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1200/Issue1233.java
Patch:
@@ -26,7 +26,7 @@ public void test_for_issue() throws Exception {
         assertEquals("x123", floorV2.templateId);
     }
 
-    @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
+    @JSONType(seeAlso = FloorV2.class, typeKey = "type")
     public interface AreaMixIn {
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1341.java
Patch:
@@ -162,5 +162,4 @@ public void test() {
         Assertions.assertTrue(reponse.indexOf("Python源码剖析") > 0);
         Assertions.assertTrue(reponse.indexOf("电子工业出版社") > 0);
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1368.java
Patch:
@@ -15,6 +15,6 @@ public void test_for_issue() throws Exception {
         ExtendedServletRequestDataBinder binder = new ExtendedServletRequestDataBinder(new Object());
         String json = JSON.toJSONString(binder);
         System.out.println(json);
-        assertTrue(json.indexOf("$ref")>=0);
+        assertTrue(json.indexOf("$ref") >= 0);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1392.java
Patch:
@@ -136,5 +136,4 @@ public void test() {
         Assertions.assertTrue(reponse.indexOf("Python源码剖析") > 0);
         Assertions.assertTrue(reponse.indexOf("电子工业出版社") > 0);
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1800/Issue1879.java
Patch:
@@ -31,7 +31,7 @@ public static class M1 {
         @JSONCreator
         public M1(@JSONField(name = "ids") String ids) {
             this.ids = new ArrayList<Long>();
-            for(String id : ids.split(",")) {
+            for (String id : ids.split(",")) {
                 this.ids.add(Long.valueOf(id));
             }
         }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1900/Issue1901.java
Patch:
@@ -14,6 +14,7 @@
 public class Issue1901 {
     protected Locale locale;
     protected TimeZone timeZone;
+
     protected void setUp() throws Exception {
         locale = JSON.defaultLocale;
         timeZone = JSON.defaultTimeZone;

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1900/Issue1939.java
Patch:
@@ -22,6 +22,7 @@ public static class Container
         @XmlAnyElement(lax = true)
         public List<Object> any;
     }
+
     private static final String MESSAGE = "<Container>" +
             "<WeightMajor measurementSystem=\"English\" unit=\"lbs\">0</WeightMajor>" +
             "</Container>";

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_2100/Issue2132.java
Patch:
@@ -14,7 +14,7 @@ public void test_for_issue() throws Exception {
         Cpu cpu = new Cpu("intel", 3.3);
         Screen screen = new Screen(16, 9, "samsung");
         Student student = new Student();
-        Computer computer = student.assembling(cpu,screen);
+        Computer computer = student.assembling(cpu, screen);
         cpu.setName("intell");
 
         Object[] objectArray = new Object[4];

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_2200/Issue2253.java
Patch:
@@ -24,7 +24,8 @@ public void test_for_issue() throws Exception {
 
         assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue));
 
-        result = JSON.parseObject(JSON.toJSONString(result, SerializerFeature.WriteMapNullValue), new TypeReference<List<Map<String, Object>>>() {}, Feature.OrderedField);
+        result = JSON.parseObject(JSON.toJSONString(result, SerializerFeature.WriteMapNullValue), new TypeReference<List<Map<String, Object>>>() {
+        }, Feature.OrderedField);
 
         assertEquals("[{\"3\":3,\"2\":2,\"7\":7}]", JSON.toJSONString(result, SerializerFeature.WriteMapNullValue));
     }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_2600/Issue2689.java
Patch:
@@ -6,8 +6,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public class Issue2689
-{
+public class Issue2689 {
     @Test
     public void test_0() throws Exception {
         Exception error = null;

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_3300/Issue3397.java
Patch:
@@ -44,6 +44,5 @@ public LocalDateTime getDate() {
         public void setDate(LocalDateTime date) {
             this.date = date;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_3600/Issue3614.java
Patch:
@@ -31,5 +31,4 @@ private static byte[] gzip(byte[] source) throws IOException {
         gzip.close();
         return bytes;
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/AuditStatusType.java
Patch:
@@ -27,9 +27,9 @@ public static AuditStatusType valuesOf(String enCode) {
         AuditStatusType[] arr$ = values();
         int len$ = arr$.length;
 
-        for(int i$ = 0; i$ < len$; ++i$) {
+        for (int i$ = 0; i$ < len$; ++i$) {
             AuditStatusType temp = arr$[i$];
-            if(temp.getEnCode().equals(enCode)) {
+            if (temp.getEnCode().equals(enCode)) {
                 return temp;
             }
         }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/Bean.java
Patch:
@@ -2,8 +2,8 @@
 
 public class Bean {
     private Integer id;
-    private String  name;
-    private String  desc;
+    private String name;
+    private String desc;
 
     public Integer getId() {
         return id;
@@ -28,5 +28,4 @@ public String getDesc() {
     public void setDesc(String desc) {
         this.desc = desc;
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/IntEnum.java
Patch:
@@ -5,4 +5,4 @@
  */
 public interface IntEnum<E extends Enum<E>> {
     int getCode();
-}
\ No newline at end of file
+}

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/OptionKey.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  * 类OptionKey.java的实现描述：TODO 类实现描述
- * 
+ *
  * @author lei.yaol 2011-12-27 下午03:40:45
  */
 public enum OptionKey {

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/ProductView.java
Patch:
@@ -2,11 +2,11 @@
 
 public class ProductView {
     private Integer id;
-    private String  keyword;
+    private String keyword;
     private boolean hasProduct;
     private boolean hasCompany;
     private boolean hasBuyLead;
-    private String  country;
+    private String country;
 
     public Integer getId() {
         return id;

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/ae/huangliang2/Area.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Created by huangliang on 17/5/8.
  */
-@JSONType(seeAlso = { Section.class, FloorV1.class,FloorV2.class  })
+@JSONType(seeAlso = {Section.class, FloorV1.class, FloorV2.class})
 public interface Area {
     public static final String TYPE_SECTION = "section";
     public static final String TYPE_FLOORV1 = "floorV1";

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/ae/huangliang2/Floor.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.json.bvtVO.ae.huangliang2;
 
-
 /**
  * Created by huangliang on 17/5/8.
  */

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/bbc/MyResultResult.java
Patch:
@@ -1,8 +1,7 @@
 package com.alibaba.json.bvtVO.bbc;
 
-
 public class MyResultResult
         extends BaseResult<String> {
-    public MyResultResult(){
+    public MyResultResult() {
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/deny/A.java
Patch:
@@ -1,6 +1,4 @@
 package com.alibaba.json.bvtVO.deny;
 
-
 public class A {
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/mogujie/BankCard.java
Patch:
@@ -23,13 +23,11 @@ public void setId(Long id) {
         this.id = id;
     }
 
-
     public String getBankId() {
         return bankId;
     }
 
     public void setBankId(String bankId) {
         this.bankId = bankId;
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/wuqi/Result.java
Patch:
@@ -6,8 +6,8 @@
 public class Result<T> {
     private T data;
 
-
-    public Result(){}
+    public Result() {
+    }
 
     public T getData() {
         return data;

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvtVO/wuqi/SchemaResult.java
Patch:
@@ -57,5 +57,4 @@ public void setData(List<InstanceSchema> data) {
     public void addData(InstanceSchema InstanceSchemaItem) {
         this.data.add(InstanceSchemaItem);
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/date/XMLGregorianCalendarTest.java
Patch:
@@ -33,6 +33,6 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Model {
-        public java.util.GregorianCalendar calendar;
+        public javax.xml.datatype.XMLGregorianCalendar calendar;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/date/XMLGregorianCalendarTest.java
Patch:
@@ -33,6 +33,6 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Model {
-        public XMLGregorianCalendar calendar;
+        public java.util.GregorianCalendar calendar;
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/JDKUtilsTest.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.Calendar;
 import java.util.function.BiFunction;
 import java.util.function.Function;
-import java.util.function.ToIntFunction;
 
 import static org.junit.jupiter.api.Assertions.*;
 

File: core/src/test/java/com/alibaba/fastjson2/codec/CartItemDO2Test.java
Patch:
@@ -12,7 +12,7 @@
 public class CartItemDO2Test {
     private static List<CartItemDO2> newCartsItem() {
         List<CartItemDO2> list = new ArrayList();
-        for (long i = 90000000000l; i < 90000000000l + 1000; i++) {
+        for (long i = 90000000000L; i < 90000000000L + 1000; i++) {
             CartItemDO2 cartItemDO2 = new CartItemDO2();
             cartItemDO2.setUserId(i);
             cartItemDO2.setAttributes(new HashMap());

File: core/src/test/java/com/alibaba/fastjson2/codec/ObjectReader2Test.java
Patch:
@@ -127,8 +127,7 @@ public void test_jsonpath() {
             Long2 vo = new Long2();
 
             JSONReader.Context readContext
-                    = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                    = new JSONReader.Context(new ObjectReaderProvider(creator));
             JSONPath
                     .of("$.v0000")
                     .setReaderContext(readContext)

File: core/src/test/java/com/alibaba/fastjson2/features/UnwrappedTest.java
Patch:
@@ -110,7 +110,6 @@ public void test3() {
         assertEquals("val1", bean2.properties.get("attr1"));
 
         assertEquals(bean2.properties, JSON.parseObject(str, ExtendableBean3.class, JSONReader.Feature.SupportSmartMatch).properties);
-
     }
 
     private static class ExtendableBean3 {

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue117.java
Patch:
@@ -21,6 +21,5 @@ public void test() {
         long times = System.currentTimeMillis() - start;
 
         System.out.println(times);
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue126.java
Patch:
@@ -76,6 +76,5 @@ public static class Res {
 
         @JSONField(ordinal = 4)
         private int checkedBaggageNum;
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue139.java
Patch:
@@ -40,7 +40,6 @@ public void test() {
         items.forEach(item -> {
             assertTrue(item instanceof Item);
         });
-
     }
 
     public static class Bean {

File: core/src/test/java/com/alibaba/fastjson2/jsonb/ExceptionTest.java
Patch:
@@ -27,6 +27,5 @@ public void test_exception() {
                 JSONReader.Feature.UseNativeObject,
                 JSONReader.Feature.FieldBased);
         assertEquals(objects.length, parsed.length);
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonb/TypeNameTest.java
Patch:
@@ -81,6 +81,5 @@ public void test_typeName() {
         assertEquals("OBJECT_END " + BC_OBJECT_END, typeName(BC_OBJECT_END));
         assertEquals("SYMBOL " + BC_SYMBOL, typeName(BC_SYMBOL));
         assertEquals("-128", typeName((byte) -128));
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONPathSetTest.java
Patch:
@@ -19,7 +19,6 @@ public void test_for_issue() throws Exception {
         String value = "y2";
         JSONPath.set(root, jsonpath, value);
         assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root));
-
     }
 
     public static class Root {

File: core/src/test/java/com/alibaba/fastjson2/mixins/MixinAPITest.java
Patch:
@@ -63,4 +63,3 @@ public void test_mixIn_get_methods() throws Exception {
         assertEquals(base.b, base2.b);
     }
 }
-

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigDecimalFieldTest.java
Patch:
@@ -91,8 +91,7 @@ public void test_null() throws Exception {
                 jsonWriter.config(JSONWriter.Feature.WriteNulls);
                 BigDecimalField1 vo = new BigDecimalField1();
                 objectWriter.write(jsonWriter, vo);
-                assertEquals("{\"id\":null}"
-                        , jsonWriter.toString());
+                assertEquals("{\"id\":null}", jsonWriter.toString());
             }
         }
     }
@@ -106,7 +105,7 @@ public void test_jsonpath() {
 
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             JSONPath jsonPath = JSONPath
                     .of("$.id")
                     .setReaderContext(readContext);

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigDecimalTest.java
Patch:
@@ -233,7 +233,7 @@ public void test_jsonpath() {
 
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             JSONPath jsonPath = JSONPath
                     .of("$.id")
                     .setReaderContext(readContext);

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigIntegerFieldTest.java
Patch:
@@ -70,7 +70,7 @@ public void test_jsonpath() {
 
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             JSONPath jsonPath = JSONPath
                     .of("$.id")
                     .setReaderContext(readContext);

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigIntegerTest.java
Patch:
@@ -220,7 +220,7 @@ public void test_jsonpath() {
 
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             JSONPath jsonPath = JSONPath
                     .of("$.id")
                     .setReaderContext(readContext);

File: core/src/test/java/com/alibaba/fastjson2/primitves/BooleanValueTest.java
Patch:
@@ -115,7 +115,7 @@ public void test_jsonpath() {
 
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             JSONPath jsonPath = JSONPath
                     .of("$.v0000")
                     .setReaderContext(readContext);

File: core/src/test/java/com/alibaba/fastjson2/primitves/Calendar1Test.java
Patch:
@@ -174,8 +174,8 @@ public void test_utf8_0() {
         assertEquals(2017,
                 JSON.parseObject(
                         "\"2017年1月13日\""
-                                .getBytes(StandardCharsets.UTF_8)
-                        , Calendar.class
+                                .getBytes(StandardCharsets.UTF_8),
+                        Calendar.class
                 ).get(Calendar.YEAR));
         assertEquals(11,
                 JSON.parseObject(

File: core/src/test/java/com/alibaba/fastjson2/primitves/Date1Test.java
Patch:
@@ -203,8 +203,9 @@ public void test_millis3() throws Exception {
 
         for (ObjectWriterCreator creator : creators) {
             FieldWriter fieldWriter = creator
-                    .createFieldWriter("date"
-                            , "iso8601",
+                    .createFieldWriter(
+                            "date",
+                            "iso8601",
                             LongValueField1.class.getField("v0000"));
             ObjectWriter<LongValueField1> objectWriter
                     = creator.createObjectWriter(fieldWriter);

File: core/src/test/java/com/alibaba/fastjson2/primitves/FloatValueFieldTest.java
Patch:
@@ -45,9 +45,9 @@ public void test_1() throws Exception {
 
         for (ObjectReaderCreator creator : creators) {
             FieldReader fieldWriter = creator.createFieldReader(
-                    "v0000"
-                    , float.class
-                    , FloatValueField1.class.getField("v0000"));
+                    "v0000",
+                    float.class,
+                    FloatValueField1.class.getField("v0000"));
 
             ObjectReader<FloatValueField1> objectReader
                     = creator.createObjectReader(FloatValueField1.class, fieldWriter);

File: core/src/test/java/com/alibaba/fastjson2/primitves/Int100Test.java
Patch:
@@ -18,7 +18,7 @@ public void test_jsonpath() {
         for (ObjectReaderCreator creator : creators) {
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             {
                 Int100 vo = new Int100();
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/IntTest.java
Patch:
@@ -197,7 +197,7 @@ public void test_jsonpath() {
         for (ObjectReaderCreator creator : creators) {
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             {
                 Int1 vo = new Int1();
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/IntValueFieldTest.java
Patch:
@@ -63,7 +63,7 @@ public void test_jsonpath() {
 
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             JSONPath jsonPath = JSONPath
                     .of("$.v0000")
                     .setReaderContext(readContext);

File: core/src/test/java/com/alibaba/fastjson2/primitves/IntegerTest.java
Patch:
@@ -362,7 +362,7 @@ public void test_jsonpath() {
 
             JSONReader.Context readContext
                     = new JSONReader.Context(
-                    new ObjectReaderProvider(creator));
+                            new ObjectReaderProvider(creator));
             JSONPath jsonPath = JSONPath
                     .of("$.v0000")
                     .setReaderContext(readContext);

File: core/src/test/java/com/alibaba/fastjson2/primitves/JSONBSizeTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONB;
-import com.alibaba.fastjson2.util.IOUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/ZonedDateTimeTest.java
Patch:
@@ -68,8 +68,7 @@ public class ZonedDateTimeTest {
             ZonedDateTime.of(2021, 10, 20, 16, 22, 15, 1000_00, ZoneId.of("-07:00")),
             ZonedDateTime.of(2021, 10, 20, 16, 22, 15, 1000_000, ZoneId.of("-07:00")),
             ZonedDateTime.of(2021, 10, 20, 16, 22, 15, 1000_000_0, ZoneId.of("-07:00")),
-            ZonedDateTime.of(2021, 10, 20, 16, 22, 15, 1000_000_00, ZoneId.of("-07:00")),
-
+            ZonedDateTime.of(2021, 10, 20, 16, 22, 15, 1000_000_00, ZoneId.of("-07:00"))
     };
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/read/type/NumberTest.java
Patch:
@@ -102,7 +102,6 @@ public void test_dec_0() throws Exception {
                 .get("v");
         assertEquals(str,
                 num.toString());
-
     }
 
     @Test
@@ -119,7 +118,6 @@ public void test_dec_1() throws Exception {
                 .get("v");
         assertEquals(str,
                 num.toString());
-
     }
 
     @Test
@@ -136,6 +134,5 @@ public void test_dec_2() throws Exception {
                 .get("v");
         assertEquals(str,
                 num.toString());
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BooleanArrayFieldTest_primitive_private.java
Patch:
@@ -11,7 +11,6 @@ public class BooleanArrayFieldTest_primitive_private {
     @Test
     public void test_array() throws Exception {
         assertEquals("[true]", JSON.toJSONString(new boolean[]{true}));
-
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_4.java
Patch:
@@ -20,12 +20,10 @@ public void test_0() throws Exception {
 
         Model model1 = JSON.parseObject(json, Model.class);
         assertArrayEquals(model.value, model1.value);
-
     }
 
     private static class Model {
         @JSONField(format = "hex")
         public byte[] value;
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_5_base64.java
Patch:
@@ -25,6 +25,5 @@ public void test_0() throws Exception {
     private static class Model {
         @JSONField(format = "base64")
         public byte[] value;
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_7_gzip_hex.java
Patch:
@@ -28,6 +28,5 @@ public void test_0() throws Exception {
     private static class Model {
         @JSONField(format = "gzip,base64")
         public byte[] value;
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONArrayTest2.java
Patch:
@@ -37,6 +37,5 @@ public void test_0() throws Exception {
 //        assertEquals(new java.sql.Date(time), array2.getSqlDate(2));
 //        assertEquals(new java.sql.Timestamp(time), array2.getTimestamp(2));
         assertEquals(array2.size(), array2.size());
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1000/Issue1079.java
Patch:
@@ -24,7 +24,6 @@ public void test_for_issue() throws Exception {
                 "}";
 
         JSON.parseObject(text, PdpResponse.class);
-
     }
 
     public static class PdpResponse {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1177_1.java
Patch:
@@ -21,6 +21,5 @@ public void test_for_issue() throws Exception {
         JSONPath.set(jsonObject, jsonpath, value);
         String result = jsonObject.toString();
         assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result);
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1177_3.java
Patch:
@@ -23,7 +23,6 @@ public void test_for_issue() throws Exception {
         String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
         assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject));
-
     }
 
     public static class Model {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1254.java
Patch:
@@ -24,7 +24,6 @@ public void test_for_issue() throws Exception {
         String testB = JSON.toJSONString(b);
         System.out.println(testB);
         assertEquals("{\"_parentId\":\"001\"}", testB);
-
     }
 
     public static class A {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1265.java
Patch:
@@ -27,7 +27,6 @@ public void test_0() {
         T2 t2 = ((Response<T2>) JSON.parseObject("{\"value\":{\"id\":123}}", new TypeReference<Response<T2>>() {
         }.getType())).value;
         assertEquals(123, t2.id);
-
     }
 
     public static class Response<T> {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1271.java
Patch:
@@ -28,7 +28,6 @@ public void processExtra(Object object, String key, Object value) {
 //        B b = JSON.parseObject(json,B.class,extraProcessor);
 //        assertEquals(1,b.a);
 //        assertEquals(2, count.intValue());
-
     }
 
     public static class A {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1276.java
Patch:
@@ -20,7 +20,6 @@ public void test_for_issue() throws Exception {
 
         String str1 = JSON.toJSONString(myException1);
         assertEquals(str, str1);
-
     }
 
     public static class MyException

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1278.java
Patch:
@@ -50,7 +50,6 @@ public void test_for_issue() throws Exception {
 
         assertEquals("user", c2.name);
         assertEquals(2, c2.id);
-
     }
 
     /**

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1293.java
Patch:
@@ -22,7 +22,6 @@ public void test_for_issue() {
         Bean test = JSON.parseObject(data, Bean.class);
         assertNull(test.idType);
         assertNull(test.userType);
-
     }
 
     static class Bean {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1307.java
Patch:
@@ -40,7 +40,6 @@ public void test_context_value_filter_not_effected() {
                                 contextValueFilter
                         })
         );
-
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1357.java
Patch:
@@ -18,6 +18,5 @@ public void test_for_issue() throws Exception {
 
     public static class Test2Bean {
         private LocalDateTime d2;
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1371.java
Patch:
@@ -25,7 +25,6 @@ public void testFastjsonEnum() {
 
         assertEquals(JSON.toJSONString(enumMap),
                 "{\"C\":\"D\",\"E\":\"A\"}");
-
     }
 
 //    public void testParsed(){

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1443.java
Patch:
@@ -10,7 +10,6 @@ public class Issue1443 {
     public void test_for_issue() throws Exception {
         String json = "{\"date\":\"3017-08-28T00:00:00+08:00\"}";
         Model model = JSON.parseObject(json, Model.class);
-
     }
 
     public static class Model {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1492.java
Patch:
@@ -35,7 +35,6 @@ public void test_for_issue() throws Exception {
         System.out.println(str2);
         DubboResponse resp2 = JSON.parseObject(str2, DubboResponse.class);
         assertEquals(str2, JSON.toJSONString(resp2));
-
     }
 
     public static final class DubboResponse

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1496.java
Patch:
@@ -37,7 +37,6 @@ public interface ISetupStatusProcess {
          * @return
          */
         SetupStatus next(String name);
-
     }
 
     @JSONType(writeEnumAsJavaBean = true)

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1733_jsonpath.java
Patch:
@@ -54,7 +54,6 @@ public void test_for_issue_or_1() throws Exception {
 
     public static class Order {
         public List<Book> books = new ArrayList<Book>();
-
     }
 
     public static class Book {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1763.java
Patch:
@@ -66,6 +66,5 @@ public static class InteractiveOrderMaterielQueryResult<T extends InteractiveOrd
 
     public interface ProcurementOrderInteractiveServiceForCloud {
         BaseResult<InteractiveOrderMaterielQueryResult> queryOrderMateriel(Map param);
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764_bean.java
Patch:
@@ -29,7 +29,6 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"value\":-9007199254740990}",
                 JSON.toJSONString(
                         new Model(-9007199254740990L)));
-
     }
 
     @JSONType(serializeFeatures = JSONWriter.Feature.BrowserCompatible)

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1821.java
Patch:
@@ -25,7 +25,6 @@ public void test_for_issue() throws Exception {
         m = JSON.parseObject(str, Model.class);
         assertEquals(expectStr, JSON.toJSONString(m));
         assertEquals("com.alibaba.fastjson", new String(m.data));
-
     }
 
     @JSONType

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1821C.java
Patch:
@@ -25,7 +25,6 @@ public void test_for_issue() throws Exception {
         m = JSON.parseObject(str, Model.class);
         assertEquals(expectStr, JSON.toJSONString(m));
         assertEquals("com.alibaba.fastjson", new String(m.data));
-
     }
 
     @JSONType

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2200/Issue2249.java
Patch:
@@ -39,7 +39,6 @@ public void test_for_issue_1() {
         assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MediuM\"}", Model.class).type);
         assertSame(Type.Medium, JSON.parseObject("{\"type\":\"medium\"}", Model.class).type);
         assertSame(Type.Medium, JSON.parseObject("{\"type\":\"MEDIUM\"}", Model.class).type);
-
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3500/Issue3544.java
Patch:
@@ -23,6 +23,5 @@ public void test_errorType() {
     @Setter
     static class TestVO {
         Map<String, String> result;
-
     }
 }

File: extension/src/test/java/com/alibaba/fastjson2/awt/PointTest.java
Patch:
@@ -14,8 +14,8 @@
 public class PointTest {
     @BeforeEach
     public void setUp() {
-         JSONFactory.getDefaultObjectWriterProvider().register(AwtWriterModule.INSTANCE);
-         JSONFactory.getDefaultObjectReaderProvider().register(AwtRederModule.INSTANCE);
+        JSONFactory.getDefaultObjectWriterProvider().register(AwtWriterModule.INSTANCE);
+        JSONFactory.getDefaultObjectReaderProvider().register(AwtRederModule.INSTANCE);
     }
 
     @Test

File: extension/src/test/java/com/alibaba/fastjson2/spring/FastJsonJsonViewMockTest.java
Patch:
@@ -62,9 +62,9 @@ public void test() throws Exception {
     @RequestMapping("fastjson")
     public static class BeanController {
         @RequestMapping(value = "/mocktest", method = RequestMethod.GET)
-        public
+
         @ResponseBody
-        ModelAndView test7() {
+        public ModelAndView test7() {
             AuthIdentityRequest authRequest = new AuthIdentityRequest();
             authRequest.setAppId("cert01");
             authRequest.setUserId(2307643);

File: extension/src/test/java/com/alibaba/fastjson2/spring/MappingFastJsonJSONBMessageConverterTest.java
Patch:
@@ -39,7 +39,8 @@ public void test_1() throws Exception {
         assertThrows(IllegalArgumentException.class, () -> converter.setSerializedPayloadClass(String.class));
     }
 
-    public static class BytesMessage implements Message<byte[]> {
+    public static class BytesMessage
+            implements Message<byte[]> {
         private byte[] payload;
 
         public BytesMessage(byte[] payload) {

File: extension/src/test/java/com/alibaba/fastjson2/spring/MappingFastJsonMessageConverterTest.java
Patch:
@@ -54,7 +54,8 @@ public void test_1() throws Exception {
         assertEquals("{\"id\":1}", message4.getPayload());
     }
 
-    public static class TestMessage implements Message<String> {
+    public static class TestMessage
+            implements Message<String> {
         private String payload;
 
         public TestMessage(String payload) {

File: extension/src/test/java/com/alibaba/fastjson2/springfox/SwaggerJsonWriterTest.java
Patch:
@@ -6,12 +6,10 @@
 import springfox.documentation.spring.web.json.Json;
 
 public class SwaggerJsonWriterTest {
-
     @Test
     public void test() {
         SwaggerJsonWriter writer = SwaggerJsonWriter.INSTANCE;
         writer.write(JSONWriter.of(), null);
         writer.write(JSONWriter.of(), new Json("{\"abc\":\"cde中文\"}"));
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONFromObjectTest.java
Patch:
@@ -75,7 +75,7 @@ public void test_error() throws Exception {
     }
 
     public static class User {
-        private long   id;
+        private long id;
         private String name;
 
         public long getId() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest_getObj_2.java
Patch:
@@ -25,6 +25,7 @@ public static class Model {
     }
 
     public static <T> Type getType() {
-        return new TypeReference<T[]>() {}.getType();
+        return new TypeReference<T[]>() {
+        }.getType();
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest_readObject.java
Patch:
@@ -119,7 +119,7 @@ public void test_6() throws Exception {
         JSONObject jsonObject = new JSONObject();
         jsonObject.put("val", new Character[]{});
         jsonObject.put("cls", Number.class);
-        jsonObject.put("nums", new Number[] {});
+        jsonObject.put("nums", new Number[]{});
 
         ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
         ObjectOutputStream objOut = new ObjectOutputStream(bytesOut);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/UseSingleQuotesTest.java
Patch:
@@ -9,7 +9,7 @@ public class UseSingleQuotesTest {
     @Test
     public void test0() {
         assertEquals("'a\\'bc'",
-            JSON.toJSONString("a'bc", SerializerFeature.UseSingleQuotes)
+                JSON.toJSONString("a'bc", SerializerFeature.UseSingleQuotes)
         );
 
         assertEquals("'a\\'bc'",

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/atomic/AtomicBooleanReadOnlyTest.java
Patch:
@@ -23,11 +23,11 @@ public void test_codec_null() {
     public static class V0 {
         private final AtomicBoolean value;
 
-        public V0(){
+        public V0() {
             this(false);
         }
 
-        public V0(boolean value){
+        public V0(boolean value) {
             this.value = new AtomicBoolean(value);
         }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/atomic/AtomicIntegerReadOnlyTest.java
Patch:
@@ -23,11 +23,11 @@ public void test_codec_null() {
     public static class V0 {
         private final AtomicInteger value;
 
-        public V0(){
+        public V0() {
             this(0);
         }
 
-        public V0(int value){
+        public V0(int value) {
             this.value = new AtomicInteger(value);
         }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/atomic/AtomicLongReadOnlyTest.java
Patch:
@@ -23,11 +23,11 @@ public void test_codec_null() {
     public static class V0 {
         private final AtomicLong value;
 
-        public V0(){
+        public V0() {
             this(0);
         }
 
-        public V0(int value){
+        public V0(int value) {
             this.value = new AtomicLong(value);
         }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/ColorTest.java
Patch:
@@ -18,7 +18,7 @@ public void test_color() throws Exception {
     @Test
     public void test_color_2() throws Exception {
         Color color = Color.RED;
-        String text = "{\"r\":" + color.getRed() + ",\"g\":" + color.getGreen() + ",\"b\":" + color.getBlue() +"}";
+        String text = "{\"r\":" + color.getRed() + ",\"g\":" + color.getGreen() + ",\"b\":" + color.getBlue() + "}";
         Color color2 = JSON.parseObject(text, Color.class);
         Assertions.assertEquals(color, color2);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/bvtVO/ArgCheckTest.java
Patch:
@@ -15,8 +15,8 @@ public void testJSON() {
     }
 
     public static class TestDTO {
-        private String       channel;
-        private String       txCode;
+        private String channel;
+        private String txCode;
 
         public String getChannel() {
             return channel;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldFormatTest.java
Patch:
@@ -34,7 +34,7 @@ public void test_format_() {
         Model model = new Model();
         model.serverTime = now;
         model.publishTime = now;
-        model.setStartDate( now );
+        model.setStartDate(now);
 
         String text = JSON.toJSONString(model);
         System.out.println(text);
@@ -51,7 +51,7 @@ public void test_format_() {
         String t2 = df2.format(now);
         String t3 = df3.format(now);
 
-        assertEquals("{\"publishTime\":\""+t2+"\",\"serverTime\":\""+t1+"\",\"startDate\":\""+t3+"\"}",text);
+        assertEquals("{\"publishTime\":\"" + t2 + "\",\"serverTime\":\"" + t1 + "\",\"startDate\":\"" + t3 + "\"}", text);
 
         Model model2 = JSON.parseObject(text, Model.class);
         SimpleDateFormat df4 = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss", Locale.CHINA);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest8.java
Patch:
@@ -27,7 +27,7 @@ public void test_0() throws Exception {
         SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
         assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}",
-                            text);
+                text);
     }
 
     @Test
@@ -38,7 +38,7 @@ public void test_1() throws Exception {
         SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
         assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}",
-                            text);
+                text);
     }
 
     public static class Entity {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1000/Issue1079.java
Patch:
@@ -27,7 +27,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class PdpResponse {
-        @JSONField(name ="Response")
+        @JSONField(name = "Response")
         public List<Response> response;
 
         public static class Response {
@@ -52,7 +52,7 @@ public static class StatusCode {
         }
 
         @JSONField(deserialize = false)
-        public String retrieveDecision(){
+        public String retrieveDecision() {
             return this.response.get(0).innerObjects.get(0).decision;
         }
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1120.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Model {
-        @JSONField(name="REQ_NO")
+        @JSONField(name = "REQ_NO")
         private String reqNo;
 
         public String getReqNo() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1134.java
Patch:
@@ -24,11 +24,11 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Model {
-        @JSONField(ordinal = 1, name="Dimension")
+        @JSONField(ordinal = 1, name = "Dimension")
         private int dimension;
-        @JSONField(ordinal = 2, name="PassCode")
+        @JSONField(ordinal = 2, name = "PassCode")
         private String passCode;
-        @JSONField(ordinal = 3, name="BlockPos")
+        @JSONField(ordinal = 3, name = "BlockPos")
         private BlockPos blockpos;
 
         public int getDimension() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1146.java
Patch:
@@ -20,9 +20,11 @@ public static class Test {
         public boolean isXxx() {
             return true;
         }
+
         public Boolean getYyy() {
             return true;
         }
+
         public Boolean getZzz() {
             return true;
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1151.java
Patch:
@@ -32,12 +32,13 @@ public static class A {
         public List<B> list = new ArrayList<B>();
     }
 
-    public static  interface B {
+    public static interface B {
     }
 
     public static class C
             implements B {
         public int id;
+
         public C() {
         }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1177_1.java
Patch:
@@ -16,7 +16,7 @@ public void test_for_issue() throws Exception {
         JSONObject jsonObject = JSONObject.parseObject(text);
         System.out.println(jsonObject);
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
         String result = jsonObject.toString();
         assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1177_2.java
Patch:
@@ -17,10 +17,11 @@ public class Issue1177_2 {
     @Test
     public void test_for_issue() throws Exception {
         String text = "{\"a\":{\"x\":\"y\"},\"b\":{\"x\":\"y\"}}";
-        Map<String, Model> jsonObject = JSONObject.parseObject(text, new TypeReference<Map<String, Model>>(){}.getType());
+        Map<String, Model> jsonObject = JSONObject.parseObject(text, new TypeReference<Map<String, Model>>() {
+        }.getType());
         System.out.println(JSON.toJSONString(jsonObject));
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
         assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject));
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1177_3.java
Patch:
@@ -17,10 +17,11 @@ public class Issue1177_3 {
     @Test
     public void test_for_issue() throws Exception {
         String text = "[{\"x\":\"y\"},{\"x\":\"y\"}]";
-        List<Model> jsonObject = JSONObject.parseObject(text, new TypeReference<List<Model>>(){}.getType());
+        List<Model> jsonObject = JSONObject.parseObject(text, new TypeReference<List<Model>>() {
+        }.getType());
         System.out.println(JSON.toJSONString(jsonObject));
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
         assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject));
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1177_4.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
         Root root = JSONObject.parseObject(text, Root.class);
         System.out.println(JSON.toJSONString(root));
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(root, jsonpath, value);
         assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root));
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1187.java
Patch:
@@ -12,7 +12,8 @@ public class Issue1187 {
     @Test
     public void test_for_issue() throws Exception {
         String text1 = "{\"d\":\"2017-04-27+08:00\"}";
-        JSONObject jsonObject = (JSONObject) JSON.parse(text1, Feature.AllowISO8601DateFormat);;
+        JSONObject jsonObject = (JSONObject) JSON.parse(text1, Feature.AllowISO8601DateFormat);
+        ;
         System.out.println(jsonObject.get("d").getClass().getClass());//String
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1188.java
Patch:
@@ -19,8 +19,8 @@ public void test_for_issue_1188() throws Exception {
         assertNull(info.ids);
     }
 
-    public static class Info{
-        @JSONField(deserialize=false)
+    public static class Info {
+        @JSONField(deserialize = false)
         private List<Integer> ids;
         private String name;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1225.java
Patch:
@@ -23,7 +23,8 @@ public void test_parseObject_0() {
 
     @Test
     public void test_parseObject_1() {
-        Type type = new TypeReference<ExtendGenericType<String>>() {}.getType();
+        Type type = new TypeReference<ExtendGenericType<String>>() {
+        }.getType();
         ExtendGenericType<String> o = JSON.parseObject("{\"data\":[\"1\",\"2\",\"3\"]}", type);
         assertEquals("2", o.data.get(1));
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1226.java
Patch:
@@ -29,7 +29,7 @@ public void test_for_issue() throws Exception {
         assertEquals('c', tb22.getC().charValue());
     }
 
-    static class TestBean{
+    static class TestBean {
         char c;
 
         public char getC() {
@@ -41,7 +41,7 @@ public void setC(char c) {
         }
     }
 
-    static class TestBean2{
+    static class TestBean2 {
         Character c;
 
         public Character getC() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1227.java
Patch:
@@ -12,12 +12,12 @@ public void test_for_issue() throws Exception {
 
         try {
             Bean model = JSON.parseObject(t2, Bean.class);
-            assertEquals("\uFEFFmsg2222",model.msg);
+            assertEquals("\uFEFFmsg2222", model.msg);
 
             model.msg = "\uFEFFss";
             String t3 = JSON.toJSONString(model);
             assertTrue(t3.contains(model.msg));
-        } catch ( Exception e) {
+        } catch (Exception e) {
             e.printStackTrace();
             fail(e.getMessage());
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1267.java
Patch:
@@ -20,7 +20,7 @@ public void test_for_issue() {
                 LinkedMultiValueMap.class
         );  // 这是可以反序列化通过的
 
-        assertEquals("0.01",message.get("pay_fee").get(0));
+        assertEquals("0.01", message.get("pay_fee").get(0));
 
         PushHttpMessage pushHttpMessage = JSON.parseObject(json, PushHttpMessage.class);
 
@@ -34,7 +34,7 @@ public void test_for_issue() {
 
     public static class PushHttpMessage {
         private LinkedMultiValueMap<String, String> message;
-        private String                              url;
+        private String url;
 
         public LinkedMultiValueMap<String, String> getMessage() {
             return message;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1276.java
Patch:
@@ -11,7 +11,7 @@
 public class Issue1276 {
     @Test
     public void test_for_issue() throws Exception {
-        MyException myException = new MyException(100,"error msg");
+        MyException myException = new MyException(100, "error msg");
         String str = JSON.toJSONString(myException);
         System.out.println(str);
 
@@ -23,7 +23,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class MyException
-            extends RuntimeException{
+            extends RuntimeException {
         private static final long serialVersionUID = 7815426752583648734L;
         private long code;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1299.java
Patch:
@@ -74,7 +74,7 @@ public void setMaterials(List materials) {
     public static class SaveUnitInfo {
     }
 
-    public static class BaseResultDo{
+    public static class BaseResultDo {
     }
 
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1307.java
Patch:
@@ -18,7 +18,7 @@
 public class Issue1307 {
     ValueFilter contextValueFilter = new ValueFilter() {
         public Object process(Object object, String name, Object value) {
-            return "mark-"+value;
+            return "mark-" + value;
         }
     };
     ValueFilter valueFilter = new ValueFilter() {
@@ -28,7 +28,7 @@ public Object process(Object object, String name, Object value) {
     };
 
     @Test
-    public void test_context_value_filter_not_effected () {
+    public void test_context_value_filter_not_effected() {
         List<Object> params = new ArrayList<Object>();
         Map data = new HashMap();
         data.put("name", "ace");

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1357.java
Patch:
@@ -12,11 +12,11 @@ public class Issue1357 {
     @Test
     public void test_for_issue() throws Exception {
         String str = "{\"d2\":null}";
-        Test2Bean b = JSONObject.parseObject(str,Test2Bean.class);
+        Test2Bean b = JSONObject.parseObject(str, Test2Bean.class);
         System.out.println(b);
     }
 
-    public static class Test2Bean{
+    public static class Test2Bean {
         private LocalDateTime d2;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1369.java
Patch:
@@ -17,14 +17,15 @@ public void test_for_issue() throws Exception {
         foo.bars.c = 3;
         String json = JSON.toJSONString(foo);
         System.out.println(json);
-        Assertions.assertTrue(json.indexOf("\\")<0);
+        Assertions.assertTrue(json.indexOf("\\") < 0);
     }
 
     public static class Foo {
         public int a;
         public String b;
         public Bar bars;
     }
+
     public static class Bar {
         public int c;
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1423.java
Patch:
@@ -60,6 +60,7 @@ public void test_for_issue_arrayMapping_reader() throws Exception {
 
     public static class LongVal {
         private long v;
+
         public void setV(long v) {
             this.v = v;
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1425.java
Patch:
@@ -19,6 +19,7 @@ public void test_for_issue() throws Exception {
 
         System.out.println(JSON.toJSONString(dicDomain, features));
     }
+
     public static class DicDomain {
         private String code;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1486.java
Patch:
@@ -14,7 +14,7 @@ public void test_for_issue() throws Exception {
         List<Value> parseObject = JSON.parseObject(json, new TypeReference<List<Value>>() {
         }.getType());
         for (Value value : parseObject) {
-            System.out.println(value.songList + "  " );
+            System.out.println(value.songList + "  ");
         }
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1492.java
Patch:
@@ -16,8 +16,8 @@ public void test_for_issue() throws Exception {
 
         // test for JSONObject
         JSONObject obj = new JSONObject();
-        obj.put("key1","value1");
-        obj.put("key2","value2");
+        obj.put("key1", "value1");
+        obj.put("key2", "value2");
         resp.setData(obj);
 
         String str = JSON.toJSONString(resp);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1493.java
Patch:
@@ -32,20 +32,20 @@ public void test_for_issue() throws Exception {
         String t1 = JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat);
 
         String json = JSON.toJSONString(test, SerializerFeature.WriteDateUseDateFormat);
-        Assertions.assertEquals("{\"time1\":"+t1+",\"time2\":\"2017-09-22 15:08:56\"}", json);
+        Assertions.assertEquals("{\"time1\":" + t1 + ",\"time2\":\"2017-09-22 15:08:56\"}", json);
 
         //String default_format = JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT;
         //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
         //String stime1 = DateTimeFormatter.ofPattern(JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT, Locale.CHINA).format(time1);
 
         json = JSON.toJSONString(test, SerializerFeature.WriteDateUseDateFormat);
-        Assertions.assertEquals("{\"time1\":"+ JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) +",\"time2\":\"2017-09-22 15:08:56\"}", json);
+        Assertions.assertEquals("{\"time1\":" + JSON.toJSONString(time1, SerializerFeature.WriteDateUseDateFormat) + ",\"time2\":\"2017-09-22 15:08:56\"}", json);
 
         String pattern = "yyyy-MM-dd'T'HH:mm:ss";
         String stime1 = DateTimeFormatter.ofPattern(pattern, Locale.CHINA).format(time1);
 
         json = JSON.toJSONStringWithDateFormat(test, "yyyy-MM-dd'T'HH:mm:ss", SerializerFeature.WriteDateUseDateFormat);
-        Assertions.assertEquals("{\"time1\":\""+stime1+"\",\"time2\":\""+stime2+"\"}", json);
+        Assertions.assertEquals("{\"time1\":\"" + stime1 + "\",\"time2\":\"" + stime2 + "\"}", json);
 
         //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = default_format;
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1496.java
Patch:
@@ -26,7 +26,6 @@ public interface ISetupStatusInfo {
 
     public interface ISetupStatusProcess {
         /**
-         *
          * @return
          */
         SetupStatus refuse();

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1500.java
Patch:
@@ -23,12 +23,12 @@ public void test_for_issue() throws Exception {
         c.setE(aa);
         String jsonC = JSON.toJSONString(c, SerializerFeature.WriteClassName);
         C c2 = JSON.parseObject(jsonC, C.class);
-        assertEquals("java.lang.Exception",c2.getE().getClass().getName());
+        assertEquals("java.lang.Exception", c2.getE().getClass().getName());
     }
 
     public static class Aa
             extends Exception {
-        public Aa(){
+        public Aa() {
         }
 
         private String name;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1548.java
Patch:
@@ -48,6 +48,6 @@ public String toString() {
         }
     }
 
-    public static enum DocType{
+    public static enum DocType {
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1555.java
Patch:
@@ -25,6 +25,7 @@ public void test_for_issue() {
 
     /**
      * 当某个字段有JSONField注解，JSONField中name属性不存在，json属性名也要用类上的属性名转换策略
+     *
      * @throws Exception
      */
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1565.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class Issue1565 {
     @Test
-    public void test_testLargeBeanContainsOver256Field(){
+    public void test_testLargeBeanContainsOver256Field() {
         SerializeConfig serializeConfig = new SerializeConfig();
         serializeConfig.propertyNamingStrategy = PropertyNamingStrategy.SnakeCase;
 
@@ -39,7 +39,7 @@ public void test_testLargeBeanContainsOver256Field(){
     }
 
     public static class SmallBean
-            implements Serializable{
+            implements Serializable {
         private String id;
 
         public String getId() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1580.java
Patch:
@@ -12,13 +12,13 @@ public class Issue1580 {
     @Test
     public void test_for_issue() throws Exception {
         SimplePropertyPreFilter classAFilter = new SimplePropertyPreFilter(Model.class, "code");
-        SerializeFilter[] filters =new SerializeFilter[]{classAFilter};
+        SerializeFilter[] filters = new SerializeFilter[]{classAFilter};
 
         Model model = new Model();
         model.code = 1001;
         model.name = "N1";
 
-        String json = JSON.toJSONString(model, filters, SerializerFeature.BeanToArray );
+        String json = JSON.toJSONString(model, filters, SerializerFeature.BeanToArray);
         assertEquals("[1001,null]", json);
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1580_private.java
Patch:
@@ -12,13 +12,13 @@ public class Issue1580_private {
     @Test
     public void test_for_issue() throws Exception {
         SimplePropertyPreFilter classAFilter = new SimplePropertyPreFilter(Model.class, "code");
-        SerializeFilter[] filters =new SerializeFilter[]{classAFilter};
+        SerializeFilter[] filters = new SerializeFilter[]{classAFilter};
 
         Model model = new Model();
         model.code = 1001;
         model.name = "N1";
 
-        String json = JSON.toJSONString(model, filters, SerializerFeature.BeanToArray );
+        String json = JSON.toJSONString(model, filters, SerializerFeature.BeanToArray);
         assertEquals("[1001,null]", json);
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1583.java
Patch:
@@ -25,7 +25,8 @@ public void test_issue() throws Exception {
         String jsonString = JSON.toJSONString(mapList, SerializerFeature.DisableCircularReferenceDetect);
 
         System.out.println(jsonString);
-        List<Map.Entry<String, List<String>>> parse = JSON.parseObject(jsonString, new TypeReference<List<Map.Entry<String, List<String>>>>() {});
+        List<Map.Entry<String, List<String>>> parse = JSON.parseObject(jsonString, new TypeReference<List<Map.Entry<String, List<String>>>>() {
+        });
         System.out.println(parse);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1627.java
Patch:
@@ -18,9 +18,9 @@ public void test_for_issue() throws Exception {
     public static String escapeString(String s) {
         StringBuilder buf = new StringBuilder();
 
-        for(int i = 0; i < s.length(); ++i) {
+        for (int i = 0; i < s.length(); ++i) {
             char c = s.charAt(i);
-            if((c < 48 || c > 57) && (c < 65 || c > 90) && (c < 97 || c > 122)) {
+            if ((c < 48 || c > 57) && (c < 65 || c > 90) && (c < 97 || c > 122)) {
                 buf.append("\\" + c);
             } else {
                 buf.append(c);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1628.java
Patch:
@@ -25,7 +25,7 @@ public void test_toJSONBytes_1() throws Exception {
         Map<String, Object> map = new HashMap<String, Object>();
         map.put("a", 1001);
         map.put("b", 2002);
-        byte[] bytes = JSON.toJSONBytes(map, new SerializeFilter[] {new SimplePropertyPreFilter("a")});
+        byte[] bytes = JSON.toJSONBytes(map, new SerializeFilter[]{new SimplePropertyPreFilter("a")});
         assertEquals("{\"a\":1001}", new String(bytes));
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1645.java
Patch:
@@ -13,7 +13,7 @@ public void test_for_issue() throws Exception {
         JSON.toJSONString(JSON.parseObject(test).toJavaObject(TestDateClass.class), SerializerFeature.PrettyFormat);
     }
 
-    public static class TestDateClass{
+    public static class TestDateClass {
         public String name;
         public LocalDateTime testDateTime;
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1647.java
Patch:
@@ -14,8 +14,8 @@ public class Issue1647 {
     @Test
     public void test_for_issue() throws Exception {
         Params params = new Params()
-        .setVerificationIds(Arrays.asList(new String[]{"a", "b"}))
-        .setWithFields(true);
+                .setVerificationIds(Arrays.asList(new String[]{"a", "b"}))
+                .setWithFields(true);
 
         String json = JSON.toJSONString(params);
         System.out.println(json);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1649.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json);
     }
 
-    @JSONType(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty,SerializerFeature.WriteMapNullValue})
+    @JSONType(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue})
     public static class Apple {
         // @JSONField(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue})
         private String color;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1649_private.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json);
     }
 
-    @JSONType(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty,SerializerFeature.WriteMapNullValue})
+    @JSONType(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue})
     private static class Apple {
         // @JSONField(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue})
         private String color;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1662_1.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
         String json = "{\"value\":123}";
         Model model = JSON.parseObject(json, Model.class);
         assertEquals(12300, model.value);
-        assertEquals("{\"value\":\"12300元\"}",JSON.toJSONString(model));
+        assertEquals("{\"value\":\"12300元\"}", JSON.toJSONString(model));
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1665.java
Patch:
@@ -13,7 +13,8 @@
 public class Issue1665 {
     @Test
     public void test_for_issue() throws Exception {
-        TypeReference<Collection<Model>> typeReference = new TypeReference<Collection<Model>>() {};
+        TypeReference<Collection<Model>> typeReference = new TypeReference<Collection<Model>>() {
+        };
 
         Collection<Model> collection = TypeUtils.cast(JSON.parse("[{\"id\":101}]"), typeReference.getType(), ParserConfig.getGlobalInstance());
         assertEquals(1, collection.size());

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1679.java
Patch:
@@ -25,7 +25,7 @@ public void test_for_issue() throws Exception {
         assertEquals("\"2018-01-10T08:30:00+08:00\"", JSON.toJSONString(user.create, SerializerFeature.UseISO8601DateFormat));
     }
 
-    public static class User{
+    public static class User {
         public Date create;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1723.java
Patch:
@@ -27,12 +27,15 @@ public void test_for_issue_2() throws Exception {
 
     public static class User {
         private float age;
+
         public float getAge() {
             return age;
         }
+
         public void setAge(float age) {
             this.age = age;
         }
+
         @Override
         public String toString() {
             return "User{" +

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1725.java
Patch:
@@ -11,7 +11,7 @@
 public class Issue1725 {
     @Test
     public void test_for_issue() throws Exception {
-        Map<String, Object> map= new HashMap<String, Object>();
+        Map<String, Object> map = new HashMap<String, Object>();
         map.put("enumField", 0);
 
         AbstractBean bean = JSON.parseObject(JSON.toJSONString(map), ConcreteBean.class);
@@ -26,5 +26,5 @@ public static class ConcreteBean
             extends AbstractBean {
     }
 
-    public static enum FieldEnum { A, B }
+    public static enum FieldEnum {A, B}
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1727.java
Patch:
@@ -16,7 +16,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Model {
-        @JSONField(format="yyyyMMddHHmmssSSSZ")
+        @JSONField(format = "yyyyMMddHHmmssSSSZ")
         public Date gmtCreate;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1761.java
Patch:
@@ -9,7 +9,7 @@ public class Issue1761 {
     @Test
     public void test_for_issue() throws Exception {
         JSONObject jsonObject = new JSONObject();
-        jsonObject.put("null","");
+        jsonObject.put("null", "");
         double d = jsonObject.getDoubleValue("null");
         assertEquals(d, 0.0D);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1763.java
Patch:
@@ -38,7 +38,7 @@ public void setResult(T result) {
     }
 
     public static class BasePageQueryResult<T>
-            extends BaseResult<T>{
+            extends BaseResult<T> {
         private List<T> modelList;
 
         public List<T> getModelList() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1764_bean.java
Patch:
@@ -32,7 +32,6 @@ public void test_for_issue() throws Exception {
     }
 
 
-
     @JSONType(serialzeFeatures = BrowserCompatible)
     public static class Model {
         public long value;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1764_bean_biginteger.java
Patch:
@@ -37,8 +37,6 @@ public void test_for_issue() throws Exception {
     }
 
 
-
-
     public static class Model {
         public BigInteger value;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1764_bean_biginteger_field.java
Patch:
@@ -38,8 +38,6 @@ public void test_for_issue() throws Exception {
     }
 
 
-
-
     public static class Model {
         @JSONField(serialzeFeatures = BrowserCompatible)
         public BigInteger value;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1764_bean_biginteger_type.java
Patch:
@@ -38,7 +38,6 @@ public void test_for_issue() throws Exception {
     }
 
 
-
     @JSONType(serialzeFeatures = BrowserCompatible)
     public static class Model {
         public BigInteger value;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1769.java
Patch:
@@ -27,8 +27,7 @@ public void test_for_issue() throws Exception {
     }
 
     @JSONType(orders = {"beginTime"})
-    public static class QueryTaskResultReq
-    {
+    public static class QueryTaskResultReq {
         private Date beginTime;
 
         @JSONField(format = "yyyyMMddHHmmss")

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/issue1763_2/bean/CouponResult.java
Patch:
@@ -1,10 +1,9 @@
 package com.alibaba.fastjson.issue_1700.issue1763_2.bean;
 
 /**
- *
  * @author cnlyml
  */
-public class CouponResult{
+public class CouponResult {
     /**
      * 优惠券ID
      */

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1700/issue1763_2/bean/PageResult.java
Patch:
@@ -4,8 +4,8 @@
 
 /**
  * 分页信息
- * @param <T>
  *
+ * @param <T>
  * @author cnlyml
  */
 public class PageResult<T> {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1800/Issue1821.java
Patch:
@@ -29,10 +29,10 @@ public void test_for_issue() throws Exception {
 
     @JSONType
     public static class Model {
-        @JSONField(name="type", ordinal = 1)
+        @JSONField(name = "type", ordinal = 1)
         public int type;
 
-        @JSONField(name="data", ordinal = 2, format = "base64")
+        @JSONField(name = "data", ordinal = 2, format = "base64")
         public byte[] data;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1800/Issue1856.java
Patch:
@@ -21,7 +21,7 @@ public void test_excludes() throws Exception {
     }
 
     public static class VO {
-        private int    id;
+        private int id;
         private String name;
         private String password;
         private String info;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1800/Issue1892.java
Patch:
@@ -13,9 +13,9 @@ public class Issue1892 {
     @Test
     public void test_for_issue() throws Exception {
         assertEquals("\"2018-10-10T00:00:00\"",
-            JSON.toJSONString(
-                    LocalDateTime.of(2018, 10, 10, 0, 0), SerializerFeature.UseISO8601DateFormat
-            )
+                JSON.toJSONString(
+                        LocalDateTime.of(2018, 10, 10, 0, 0), SerializerFeature.UseISO8601DateFormat
+                )
         );
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1900/Issue1941.java
Patch:
@@ -10,7 +10,7 @@ public class Issue1941 {
     @Test
     public void test_for_issue() throws Exception {
         String json = "{\"type\":\"floorV2\",\"templateId\":\"x123\",\"name\":\"floorname2\"}";
-        FloorV2  a=(FloorV2) JSON.parseObject(json,Area.class);
+        FloorV2 a = (FloorV2) JSON.parseObject(json, Area.class);
         assertEquals("floorname2", a.name);
         assertEquals("x123", a.templateId);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1900/Issue1941_JSONField_order.java
Patch:
@@ -11,7 +11,7 @@ public class Issue1941_JSONField_order {
     @Test
     public void test_for_issue() {
         String json = "{\"type\":\"floorV2\",\"templateId\":\"x123\",\"name\":\"floorname2\"}";
-        FloorV2  a=(FloorV2) JSON.parseObject(json,Area.class);
+        FloorV2 a = (FloorV2) JSON.parseObject(json, Area.class);
         assertEquals("floorname2", a.name);
         assertEquals("x123", a.templateId);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1900/Issue1972.java
Patch:
@@ -21,7 +21,7 @@ public void test_for_issue() {
         Integer obj = Integer.valueOf(123);
 
         jsonObject.put("a", a);
-        JSONPath.arrayAdd(jsonObject,"$.a.b[?(@.c = '2018-04')].d", obj);
+        JSONPath.arrayAdd(jsonObject, "$.a.b[?(@.c = '2018-04')].d", obj);
 
         assertEquals("{\"a\":{\"b\":{\"c\":\"2018-04\",\"d\":[123]}}}", jsonObject.toString());
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2000/Issue2065.java
Patch:
@@ -46,7 +46,8 @@ public static class Model {
         @JSONField(name = "code")
         private EnumClass code;
 
-        public Model() {}
+        public Model() {
+        }
 
         public EnumClass getCode() {
             return code;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2100/Issue2150.java
Patch:
@@ -8,7 +8,7 @@
 public class Issue2150 {
     @Test
     public void test_for_issue() throws Exception {
-        int [][][] arr = new int[100][100][100];
+        int[][][] arr = new int[100][100][100];
         JSONArray jsonObj = (JSONArray) JSONArray.toJSON(arr);
         assertNotNull(jsonObj);
         assertNotNull(jsonObj.getJSONArray(0));

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2214.java
Patch:
@@ -24,7 +24,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class User {
-        public List[][] testGenericArrayArray2(List[][] res){
+        public List[][] testGenericArrayArray2(List[][] res) {
             return res;
         }
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2238.java
Patch:
@@ -8,7 +8,7 @@
 public class Issue2238 {
     @Test
     public void test_for_issue() throws Exception {
-        CapitalLimitMonenyDTO capitalLimitMonenyDTO =new CapitalLimitMonenyDTO();
+        CapitalLimitMonenyDTO capitalLimitMonenyDTO = new CapitalLimitMonenyDTO();
         capitalLimitMonenyDTO.setMaxChargeMoney(new BigDecimal("200000"));
         capitalLimitMonenyDTO.setMinChargeMoney(new BigDecimal(0.01));
         capitalLimitMonenyDTO.setMaxWithdrawMoney(new BigDecimal(0.01));

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2249.java
Patch:
@@ -74,8 +74,8 @@ public void test_for_issue_error_1() {
         assertNotNull(error);
     }
 
-    public enum  Type {
-        Big,Small,Medium
+    public enum Type {
+        Big, Small, Medium
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2306.java
Patch:
@@ -13,7 +13,7 @@ public void test_for_issue() throws Exception {
         object.put("help_score_avg.cbm", 123);
 
         assertEquals(123,
-            JSONPath.extract(
-                    object.toJSONString(), "['help_score_avg.cbm']"));
+                JSONPath.extract(
+                        object.toJSONString(), "['help_score_avg.cbm']"));
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2351.java
Patch:
@@ -33,7 +33,7 @@ public static class Bean1 {
         public List<Bean2> b;
     }
 
-    public static class Bean2  {
+    public static class Bean2 {
         private String c;
 
         public String getC() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2371.java
Patch:
@@ -18,7 +18,8 @@ public void test_for_issue() throws Exception {
 
     public static <T> RpcRespObj<List<T>> convertResult(Class<T> type) {
         String str = "{\"status\":0,\"data\":[{\"resourceId\":2,\"resourceName\":\"own佛恩\",\"systemCode\":\"ad\"}]}";
-        RpcRespObj<List<T>> result = JSON.parseObject(str, new TypeReference<RpcRespObj<List<T>>>(type) {});
+        RpcRespObj<List<T>> result = JSON.parseObject(str, new TypeReference<RpcRespObj<List<T>>>(type) {
+        });
         return result;
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2397.java
Patch:
@@ -11,12 +11,12 @@
 
 public class Issue2397 {
     @Test
-    public void test_for_bug(){
+    public void test_for_bug() {
         String jsonStr = "{\"items\":[{\"id\":1,\"name\":\"kata\"}]}";
         TestReply testReply = JSON.parseObject(jsonStr, new TypeReference<TestReply>() {
         });
 
-        assertEquals(testReply.getItems().get(0).getId() , 1);
+        assertEquals(testReply.getItems().get(0).getId(), 1);
     }
 
     public static class SuperBaseReply<T> {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2400/Issue2447.java
Patch:
@@ -53,7 +53,8 @@ public static class Location {
         public int longitude;
         public int latitude;
 
-        public Location() {}
+        public Location() {
+        }
 
         public Location(int longitude, int latitude) {
             this.longitude = longitude;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2600/Issue2628.java
Patch:
@@ -22,7 +22,8 @@ public void test_for_issue() throws Exception {
 
         Tobject tobj1 = new Tobject();
         tobj1.setBi(bi2); //没问题
-        assertEquals("9423372036854775807", tobj1.getBi().toString());;
+        assertEquals("9423372036854775807", tobj1.getBi().toString());
+        ;
 
         String s2 = JSON.toJSONString(tobj1);
         Tobject tobj2 = JSON.parseObject(s2, Tobject.class);  //有问题
@@ -35,6 +36,7 @@ static class Tobject {
         public BigInteger getBi() {
             return bi;
         }
+
         public void setBi(BigInteger bi) {
             this.bi = bi;
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2736.java
Patch:
@@ -7,7 +7,7 @@ public class Issue2736 {
     @Test
     public void test_for_issue() throws Exception {
         JSONObject s = JSONObject.parseObject("{1:2,3:4}");
-        for(String s1 : s.keySet()){
+        for (String s1 : s.keySet()) {
             System.out.println(s1);
         }
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2754.java
Patch:
@@ -59,7 +59,8 @@ public void test_for_issue4() throws Exception {
         sdf.setTimeZone(TimeZone.getTimeZone("Australia/Eucla"));
         assertEquals("2019-09-18T20:35:00+08:45", sdf.format(c.p1.getTime()));
     }
-    public static class C{
+
+    public static class C {
         public Calendar p1;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2800/Issue2866.java
Patch:
@@ -19,12 +19,12 @@ public void test_for_issue() throws Exception {
         assertEquals(3, a.a3);
     }
 
-    static class A{
-        @JSONField(name="A1")
+    static class A {
+        @JSONField(name = "A1")
         int a1;
 
         int A2;
-        @JSONField(name="A3")
+        @JSONField(name = "A3")
         public int a3;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2900/Issue2962.java
Patch:
@@ -19,7 +19,7 @@ public void setUp() {
     }
 
     @AfterEach
-    public void tearDown () {
+    public void tearDown() {
         TimeZone.setDefault(original);
         JSON.defaultTimeZone = original;
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3000/Issue3031.java
Patch:
@@ -11,8 +11,7 @@ public void test_for_issue() throws Exception {
         ResultData obj = JSON.parseObject(str, ResultData.class);
     }
 
-    public static class ResultData
-    {
+    public static class ResultData {
         private boolean success;
         private String message;
         private Object data;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3000/Issue3065.java
Patch:
@@ -141,8 +141,7 @@ public void test_for_issue() throws Exception {
         System.out.println(resultData);
     }
 
-    public static class ResultData
-    {
+    public static class ResultData {
         private boolean success;
         private String message;
         private Object data;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3000/Issue3344.java
Patch:
@@ -19,7 +19,7 @@ public class Issue3344 {
 
     @BeforeEach
     public void before() {
-        defaultTimeZone  = TimeZone.getDefault();
+        defaultTimeZone = TimeZone.getDefault();
         TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3100/Issue3109.java
Patch:
@@ -10,7 +10,7 @@ public void test_for_issue() throws Exception {
         JSON.parseObject("{\"@type\":\"testxx\",\"dogName\":\"dog1001\"}", Dog.class);
     }
 
-    public static class Dog  {
+    public static class Dog {
         public String dogName;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3200/Issue3206.java
Patch:
@@ -24,7 +24,7 @@ public String process(Object object, String name, Object value) {
     }
 
     public static class VO {
-        @JSONField(format="yyyy-MM-dd")
+        @JSONField(format = "yyyy-MM-dd")
         public java.util.Date date;
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3200/Issue3227.java
Patch:
@@ -40,7 +40,7 @@ public void setCode(T code) {
     }
 
     static class Child
-            extends Parent<Integer>{
+            extends Parent<Integer> {
         @Override
         public Integer getCode() {
             return code;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3200/Issue3246.java
Patch:
@@ -11,7 +11,7 @@ public class Issue3246 {
     @Test
     public void test_for_issue() throws Exception {
         String jsonStr = "{\"d_id\":\"bphyean01\",\"isOpenMergeCode\":0,\"offlineOrder\":false,\"offlineOrderType\":-1,\"og\":0,\"pushIdFromRemote\":false,\"qrisAmountPrice\":22000,\"s_req\":0,\"s_t\":1,\"skr_id\":0,\"type\":1,\"c_id\":471,\"o_$\":5500.0,\"am\":4,\"$_tp\":\"bp\",\"o_t\":1,\"a_m\":3}";
-        Order parseOrder = JSON.parseObject(jsonStr,Order.class);
+        Order parseOrder = JSON.parseObject(jsonStr, Order.class);
         assertEquals(Integer.valueOf(4), parseOrder.getAmount());
         assertEquals("3", parseOrder.getAddMoney());
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3300/Issue3309.java
Patch:
@@ -15,7 +15,7 @@ public class Issue3309 {
     @Test
     public void test_for_issue() {
         JSONObject jsonObj = new JSONObject();
-        jsonObj.put("formatDate","20200623 15:20:01");
+        jsonObj.put("formatDate", "20200623 15:20:01");
         DateFormatTest dateFormatTest = jsonObj.toJavaObject(DateFormatTest.class);
         JSON.toJSONString(dateFormatTest);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3300/Issue3326.java
Patch:
@@ -14,8 +14,8 @@ public class Issue3326 {
     public void test_for_issue() throws Exception {
         HashMap<String, Number> map = JSON.parseObject("{\"id\":10.0}",
                 new TypeReference<HashMap<String, Number>>() {
-                    }.getType()
-                );
+                }.getType()
+        );
         assertEquals(BigDecimal.valueOf(10.0), map.get("id"));
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3452.java
Patch:
@@ -11,7 +11,7 @@ public class Issue3452 {
     public void test_for_issue() throws Exception {
         String s = "{ \"componentKey\" : \"CMDB_UPDATE_SERVER\"}";
         Step step = JSON.parseObject(s, Step.class);
-        assertEquals("CMDB_UPDATE_SERVER",step.getComponentKey());
+        assertEquals("CMDB_UPDATE_SERVER", step.getComponentKey());
         System.out.println(step.getComponentKey());
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3470.java
Patch:
@@ -23,6 +23,7 @@ public Privacy() {
         public String getPhone() {
             return phone;
         }
+
         public Privacy setPhone(String phone) {
             this.phone = phone;
             return this;
@@ -31,6 +32,7 @@ public Privacy setPhone(String phone) {
         public String get__password() {
             return password;
         }
+
         public Privacy setPassword(String password) {
             this.password = password;
             return this;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializerTest2.java
Patch:
@@ -11,7 +11,7 @@ public void test() {
         SecurityContextImpl context = new SecurityContextImpl();
 
         GenericFastJsonRedisSerializer serializer = new GenericFastJsonRedisSerializer(
-                new String[] {
+                new String[]{
                         "org.springframework.security.core.context.SecurityContextImpl"
                 }
         );

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/date/DateTest.java
Patch:
@@ -37,5 +37,4 @@ public void test_parse() throws Exception {
         Date date = JSON.parseObject("\"2018-10-12 09:48:22 +0800\"", Date.class);
         assertEquals(1539308902000L, date.getTime());
     }
-
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -8,9 +8,9 @@
 
 import static com.alibaba.fastjson2.JSONB.Constants.*;
 
-final class ObjectReaderImplObject
+public final class ObjectReaderImplObject
         extends ObjectReaderBaseModule.PrimitiveImpl {
-    static final ObjectReaderImplObject INSTANCE = new ObjectReaderImplObject();
+    public static final ObjectReaderImplObject INSTANCE = new ObjectReaderImplObject();
 
     @Override
     public Object readObject(JSONReader jsonReader, long features) {
@@ -21,7 +21,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         JSONReader.Context context = jsonReader.getContext();
 
         if (jsonReader.isObject()) {
-            jsonReader.next();
+            jsonReader.nextIfObjectStart();
 
             long hash = jsonReader.readFieldNameHashCode();
 

File: core/src/test/java/com/alibaba/fastjson2/IgnoreNoneSerializableTest.java
Patch:
@@ -46,8 +46,8 @@ public void test_feature_jsonb() {
                 "}", JSONB.toJSONString(JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable)));
 
         assertEquals("{\n" +
-                "\t\"a\":{}\n" +
-                "}", JSONB.toJSONString(
+                        "\t\"a\":{}\n" +
+                        "}", JSONB.toJSONString(
                         JSONB.toBytes(bean, JSONWriter.Feature.IgnoreNoneSerializable), JSONB.symbolTable("id")
                 )
         );
@@ -59,7 +59,7 @@ public static class Bean {
     }
 
     public static class A
-            implements Serializable  {
+            implements Serializable {
     }
 
     public static class B {

File: core/src/test/java/com/alibaba/fastjson2/InterfaceTest.java
Patch:
@@ -34,6 +34,7 @@ public static class Bean {
 
     public interface Item {
         int getId();
+
         void setId(int id);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/JSONObjectTest_toJavaObject.java
Patch:
@@ -52,7 +52,8 @@ public void test3() {
                 JSONArray
                         .of(JSONObject.of("itemId", 101))
                         .toJavaObject(
-                                new TypeReference<List<Item>>() {}.getType()
+                                new TypeReference<List<Item>>() {
+                                }.getType()
                         );
 
         assertEquals(

File: core/src/test/java/com/alibaba/fastjson2/JSONPathTest5.java
Patch:
@@ -23,21 +23,21 @@ public void test_0() {
         JSONPath path = JSONPath.of("$[0].id");
         assertEquals(
                 101,
-                 path.extract(
+                path.extract(
                         JSONReader.ofJSONB(jsonbBytes)
                 )
         );
 
         JSONArray array = JSONB.parseArray(jsonbBytes);
         assertEquals(
                 101,
-                 path.eval(array)
+                path.eval(array)
         );
 
         JSONArray array2 = (JSONArray) JSONB.parse(jsonbBytes);
         assertEquals(
                 101,
-                 path.eval(array2)
+                path.eval(array2)
         );
     }
 

File: core/src/test/java/com/alibaba/fastjson2/JSONPathValueConsumerTest.java
Patch:
@@ -45,7 +45,7 @@ public void test_extract_str() {
         AtomicReference ref = new AtomicReference();
         path.extract(
                 JSONReader.of("{\"id\":\"123\"}"),
-                 new ValueConsumer() {
+                new ValueConsumer() {
                     @Override
                     public void accept(String val) {
                         ref.set(val);

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStrTest.java
Patch:
@@ -23,11 +23,11 @@ public void test_0() {
         );
 
         assertTrue(
-            reader.nextIfMatch(':')
+                reader.nextIfMatch(':')
         );
 
         assertEquals(123,
-                 reader.readInt32()
+                reader.readInt32()
                         .intValue());
 
         reader.skipName();
@@ -67,7 +67,7 @@ public void test_UUID() {
         );
 
         assertEquals(1238,
-                 reader.readInt64()
+                reader.readInt64()
                         .intValue());
     }
 

File: core/src/test/java/com/alibaba/fastjson2/JSONTest_register.java
Patch:
@@ -58,7 +58,7 @@ public VO readObject(JSONReader jsonReader, long features) {
 
             int id = 0;
             String name = null;
-            for (;;) {
+            for (; ; ) {
                 if (jsonReader.nextIfObjectEnd()) {
                     break;
                 }

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterTest.java
Patch:
@@ -22,7 +22,6 @@ public void test_str_comma() {
         JSONWriter jsonWriter = JSONWriter.of();
         for (int i = 0; i < COUNT; ++i) {
             jsonWriter.writeComma();
-            ;
         }
         String str = jsonWriter.toString();
         assertEquals(COUNT, str.length());
@@ -37,7 +36,6 @@ public void test_utf8_comma() {
         JSONWriter jsonWriter = JSONWriter.ofUTF8();
         for (int i = 0; i < COUNT; ++i) {
             jsonWriter.writeComma();
-            ;
         }
         String str = jsonWriter.toString();
         assertEquals(COUNT, str.length());

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterUTF8JDK9Test.java
Patch:
@@ -4,8 +4,6 @@
 import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: core/src/test/java/com/alibaba/fastjson2/OverrideTest.java
Patch:
@@ -20,6 +20,7 @@ public abstract static class A {
     public static class B
             extends A {
         private String value;
+
         public String getValue() {
             return value;
         }

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONCreatorTest.java
Patch:
@@ -72,7 +72,7 @@ public static class VO1 {
         int id32;
         long id64;
 
-        @JSONCreator(parameterNames = {"id8","id16","id32","id64"})
+        @JSONCreator(parameterNames = {"id8", "id16", "id32", "id64"})
         public VO1(byte id8, short id16, int id32, long id64) {
             this.id8 = id8;
             this.id16 = id16;
@@ -87,7 +87,7 @@ public static class VO2 {
         Integer id32;
         Long id64;
 
-        @JSONCreator(parameterNames = {"id8","id16","id32","id64"})
+        @JSONCreator(parameterNames = {"id8", "id16", "id32", "id64"})
         public VO2(byte id8, short id16, int id32, long id64) {
             this.id8 = id8;
             this.id16 = id16;

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONFieldTest3.java
Patch:
@@ -14,7 +14,7 @@ public class JSONFieldTest3 {
     public void test_deciaml_BrowserCompatible() {
         ObjectWriterCreator[] creators = TestUtils.writerCreators();
 
-        BigDecimal[] values = new BigDecimal[] {null, BigDecimal.TEN, new BigDecimal("90071992547409910")};
+        BigDecimal[] values = new BigDecimal[]{null, BigDecimal.TEN, new BigDecimal("90071992547409910")};
         VO vo = new VO();
         vo.value = new BigDecimal("90071992547409910");
 

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicBooleanReadOnlyTest.java
Patch:
@@ -36,11 +36,11 @@ public void test_readOnly_field() {
     public static class V0 {
         private final AtomicBoolean value;
 
-        public V0(){
+        public V0() {
             this(false);
         }
 
-        public V0(boolean value){
+        public V0(boolean value) {
             this.value = new AtomicBoolean(value);
         }
 

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicIntegerReadOnlyTest.java
Patch:
@@ -36,11 +36,11 @@ public void test_readOnly_field() {
     public static class V0 {
         private final AtomicInteger value;
 
-        public V0(){
+        public V0() {
             this(0);
         }
 
-        public V0(int value){
+        public V0(int value) {
             this.value = new AtomicInteger(value);
         }
 

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicLongReadOnlyTest.java
Patch:
@@ -36,11 +36,11 @@ public void test_readOnly_field() {
     public static class V0 {
         private final AtomicLong value;
 
-        public V0(){
+        public V0() {
             this(0);
         }
 
-        public V0(int value){
+        public V0(int value) {
             this.value = new AtomicLong(value);
         }
 

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicReferenceReadOnlyTest.java
Patch:
@@ -36,11 +36,11 @@ public void test_readOnly_field() {
     public static class V0 {
         private final AtomicReference<Value> value;
 
-        public V0(){
+        public V0() {
             this(new Value(0));
         }
 
-        public V0(Value value){
+        public V0(Value value) {
             this.value = new AtomicReference(value);
         }
 

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicReferenceTest.java
Patch:
@@ -62,10 +62,10 @@ public void test_field_jsonb() {
     public static class V0 {
         private AtomicReference<Value> value;
 
-        public V0(){
+        public V0() {
         }
 
-        public V0(Value value){
+        public V0(Value value) {
             this.value = new AtomicReference(value);
         }
 

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest15_noneStringKey.java
Patch:
@@ -57,9 +57,9 @@ public void test_3() throws Exception {
         object.put(map, "E");
 
         byte[] bytes = JSONB.toBytes(object, JSONWriter.Feature.WriteClassName,
-                 JSONWriter.Feature.FieldBased,
-                 JSONWriter.Feature.ReferenceDetection,
-                 JSONWriter.Feature.NotWriteHashMapArrayListClassName
+                JSONWriter.Feature.FieldBased,
+                JSONWriter.Feature.ReferenceDetection,
+                JSONWriter.Feature.NotWriteHashMapArrayListClassName
         );
 
         JSONBDump.dump(bytes);

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest48.java
Patch:
@@ -16,7 +16,7 @@ public void test_0() throws Exception {
         assertThrows(JSONException.class, () -> {
                     JSON.parse((String) JSONB
                             .parse(Base64.getDecoder()
-                            .decode("eThueyJAdHlwZSI6Iltjb20uc3VuLnJvd3NldC5KZGJjUm93U2V0SW1wbCIsWyJkYXRhU291cmNlTmFtZSI6ImxkYXA6Ly8xMjcuMC4wLjE6MTM4OS9qcnRmbnkiLCJhdXRvQ29tbWl0Ijp0cnVlXX0=")
+                                    .decode("eThueyJAdHlwZSI6Iltjb20uc3VuLnJvd3NldC5KZGJjUm93U2V0SW1wbCIsWyJkYXRhU291cmNlTmFtZSI6ImxkYXA6Ly8xMjcuMC4wLjE6MTM4OS9qcnRmbnkiLCJhdXRvQ29tbWl0Ijp0cnVlXX0=")
                             ), JSONReader.Feature.SupportAutoType
                     );
                 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest6.java
Patch:
@@ -30,6 +30,7 @@ public static class B {
     public static class C
             extends B {
         public int id;
+
         public C() {
         }
 

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest8.java
Patch:
@@ -35,7 +35,7 @@ public void test_1() {
 
     @Test
     public void test_2() {
-        Object[] array = new Object[] {
+        Object[] array = new Object[]{
                 new A(), new B()
         };
 
@@ -50,7 +50,7 @@ public void test_2() {
     @Test
     public void test_3() {
         Bean bean = new Bean();
-        bean.values = new A1[] {new A1()};
+        bean.values = new A1[]{new A1()};
 
         byte[] bytes = JSONB.toBytes(bean, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased);
         JSONBDump.dump(bytes);

File: core/src/test/java/com/alibaba/fastjson2/codec/CartItemDO2Test.java
Patch:
@@ -91,8 +91,8 @@ private void f2() {
 
         byte[] bytes3 = JSONB.toBytes(
                 newCartsItem(),
-                 JSONB.symbolTable("myId"),
-                 JSONWriter.Feature.BeanToArray
+                JSONB.symbolTable("myId"),
+                JSONWriter.Feature.BeanToArray
         );
         System.out.println("bytes3.length=" + bytes3.length);
 

File: core/src/test/java/com/alibaba/fastjson2/codec/FinalObjectTest.java
Patch:
@@ -12,7 +12,7 @@
 public class FinalObjectTest {
     @Test
     public void test_arrayMapping() {
-        ObjectWriterCreator[] creators = new ObjectWriterCreator[] {
+        ObjectWriterCreator[] creators = new ObjectWriterCreator[]{
                 ObjectWriterCreator.INSTANCE,
 //                ObjectWriterCreatorLambda.INSTANCE,
 //                ObjectWriterCreatorASM.INSTANCE

File: core/src/test/java/com/alibaba/fastjson2/codec/GenericTypeFieldArrayDecimalTest.java
Patch:
@@ -95,7 +95,8 @@ public void testRead31() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-            Type objectType = new TypeReference<P31<BigDecimal>>() {}.getType();
+            Type objectType = new TypeReference<P31<BigDecimal>>() {
+            }.getType();
             ObjectReader<P31> objectReader = creator.createObjectReader(objectType);
 
             {

File: core/src/test/java/com/alibaba/fastjson2/codec/GenericTypeFieldListDecimalTest.java
Patch:
@@ -84,7 +84,8 @@ public void testRead31() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-            Type objectType = new TypeReference<P31<BigDecimal>>() {}.getType();
+            Type objectType = new TypeReference<P31<BigDecimal>>() {
+            }.getType();
             ObjectReader<P31> objectReader = creator.createObjectReader(objectType);
 
             JSONReader jsonReader = JSONReader.of("{\"value\":[101]}");

File: core/src/test/java/com/alibaba/fastjson2/codec/GenericTypeFieldListTest.java
Patch:
@@ -83,7 +83,8 @@ public void testRead31() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-            Type objectType = new TypeReference<P31<String>>() {}.getType();
+            Type objectType = new TypeReference<P31<String>>() {
+            }.getType();
             ObjectReader<P31> objectReader = creator.createObjectReader(objectType);
 
             JSONReader jsonReader = JSONReader.of("{\"value\":[101]}");

File: core/src/test/java/com/alibaba/fastjson2/codec/GenericTypeMethodListDecimalTest.java
Patch:
@@ -84,7 +84,8 @@ public void testRead31() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-            Type objectType = new TypeReference<P31<BigDecimal>>() {}.getType();
+            Type objectType = new TypeReference<P31<BigDecimal>>() {
+            }.getType();
             ObjectReader<P31> objectReader = creator.createObjectReader(objectType);
 
             JSONReader jsonReader = JSONReader.of("{\"value\":[101]}");

File: core/src/test/java/com/alibaba/fastjson2/codec/GenericTypeMethodListTest.java
Patch:
@@ -83,7 +83,8 @@ public void testRead31() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-            Type objectType = new TypeReference<P31<String>>() {}.getType();
+            Type objectType = new TypeReference<P31<String>>() {
+            }.getType();
             ObjectReader<P31> objectReader = creator.createObjectReader(objectType);
 
             JSONReader jsonReader = JSONReader.of("{\"value\":[101]}");

File: core/src/test/java/com/alibaba/fastjson2/codec/GenericTypeMethodTest.java
Patch:
@@ -82,7 +82,8 @@ public void testRead31() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-            Type objectType = new TypeReference<P31<String>>() {}.getType();
+            Type objectType = new TypeReference<P31<String>>() {
+            }.getType();
             ObjectReader<P31> objectReader = creator.createObjectReader(objectType);
 
             JSONReader jsonReader = JSONReader.of("{\"value\":101}");

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest5.java
Patch:
@@ -59,6 +59,7 @@ public static class A {
 
     public static class B {
         public final JSONObject values;
+
         public B(JSONObject values) {
             this.values = values;
         }

File: core/src/test/java/com/alibaba/fastjson2/codec/ObjectReader10Test.java
Patch:
@@ -45,7 +45,7 @@ public void test_array() {
     public void test_array_jsonb() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators2();
 
-        byte[] jsonbBytes = JSONB.toBytes(new Object[]{101, 102L, 103, 104, "105", 106,107,108,109,110});
+        byte[] jsonbBytes = JSONB.toBytes(new Object[]{101, 102L, 103, 104, "105", 106, 107, 108, 109, 110});
 
         for (ObjectReaderCreator creator : creators) {
             ObjectReader<LongValueField10> objectReader = creator.createObjectReader(LongValueField10.class);
@@ -169,7 +169,7 @@ public void test_lower_jsonb_rest() {
         map.put("x0001", ZonedDateTime.now());
         map.put("x0002", new Date());
         map.put("x0003", UUID.randomUUID());
-        map.put("x0004", new byte[]{1,2,3,4,5,6,7,8});
+        map.put("x0004", new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
         map.put("x0005", false);
         map.put("x0006", true);
         byte[] jsonbBytes = JSONB.toBytes(map);

File: core/src/test/java/com/alibaba/fastjson2/codec/ObjectReader2Test.java
Patch:
@@ -94,9 +94,10 @@ public void test_jsonb_rest() {
             assertEquals(Long.valueOf(102), vo.getV0001());
         }
     }
+
     @Test
     public void test_lower_jsonb_rest() {
-        ObjectReaderCreator[] creators = new ObjectReaderCreator[] {
+        ObjectReaderCreator[] creators = new ObjectReaderCreator[]{
                 ObjectReaderCreator.INSTANCE,
 //                ObjectReaderCreatorLambda.INSTANCE,
 //                ObjectReaderCreatorASM.INSTANCE

File: core/src/test/java/com/alibaba/fastjson2/codec/ObjectReader5Test.java
Patch:
@@ -133,7 +133,7 @@ public void test_lower_jsonb_rest() {
         map.put("x0001", ZonedDateTime.now());
         map.put("x0002", new Date());
         map.put("x0003", UUID.randomUUID());
-        map.put("x0004", new byte[]{1,2,3,4,5,6,7,8});
+        map.put("x0004", new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
         map.put("x0005", false);
         map.put("x0006", true);
         byte[] jsonbBytes = JSONB.toBytes(map);

File: core/src/test/java/com/alibaba/fastjson2/codec/ObjectReader6Test.java
Patch:
@@ -140,7 +140,7 @@ public void test_lower_jsonb_rest() {
         map.put("x0001", ZonedDateTime.now());
         map.put("x0002", new Date());
         map.put("x0003", UUID.randomUUID());
-        map.put("x0004", new byte[]{1,2,3,4,5,6,7,8});
+        map.put("x0004", new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
         map.put("x0005", false);
         map.put("x0006", true);
         byte[] jsonbBytes = JSONB.toBytes(map);

File: core/src/test/java/com/alibaba/fastjson2/codec/OverrideTest.java
Patch:
@@ -24,6 +24,7 @@ public void test_override() throws Exception {
 
     public static class Animal {
         int id;
+
         public void setId(int id) {
             this.id = id;
         }
@@ -36,6 +37,7 @@ public int getId() {
     public static class Cat
             extends Animal {
         private int catId;
+
         public void setId(int id) {
             this.catId = id;
         }

File: core/src/test/java/com/alibaba/fastjson2/date/ZonedDateTimeTest.java
Patch:
@@ -67,7 +67,7 @@ public void test3() {
 //        System.out.println("=========>zonedDateTime1:" + zonedDateTime1);
 
         String s = "\"2022-04-24T12:29:11.729+03:00[Europe/Moscow]\"";
-        ZonedDateTime zonedDateTime2 = JSON.parseObject(s,ZonedDateTime.class);
+        ZonedDateTime zonedDateTime2 = JSON.parseObject(s, ZonedDateTime.class);
         assertEquals(s, '"' + zonedDateTime2.toString() + '"');
     }
 

File: core/src/test/java/com/alibaba/fastjson2/eishay/vo/Image_ObjectReader.java
Patch:
@@ -43,7 +43,7 @@ public Object createInstance(long features) {
     public Object readJSONBObject(JSONReader jsonReader, long features) {
         jsonReader.nextIfObjectStart();
         Image object = new Image();
-        for (;;) {
+        for (; ; ) {
             if (jsonReader.nextIfObjectEnd()) {
                 break;
             }
@@ -97,7 +97,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         jsonReader.next();
         Image object = new Image();
         for_:
-        for (;;) {
+        for (; ; ) {
             if (jsonReader.current() == '}') {
                 jsonReader.next();
                 break;

File: core/src/test/java/com/alibaba/fastjson2/fieldbased/FieldBasedTest2.java
Patch:
@@ -16,14 +16,15 @@ public class FieldBasedTest2 {
     public void test_0() {
         A a = new A();
         a.v3 = 'A';
-        a.v7 = new int[] {101};
+        a.v7 = new int[]{101};
         a.v8 = Collections.emptyList();
         a.v9 = Collections.emptyMap();
         a.v10 = Collections.emptyList();
 
         String str = JSON.toJSONString(a, JSONWriter.Feature.FieldBased);
         assertEquals("{\"v0\":0,\"v1\":0.0,\"v10\":[],\"v2\":0.0,\"v3\":\"A\",\"v4\":0,\"v5\":0,\"v6\":false,\"v7\":[101],\"v8\":[],\"v9\":{}}", str);
     }
+
     static class A {
         long v0;
         float v1;

File: core/src/test/java/com/alibaba/fastjson2/internal/trove/TLongListTest.java
Patch:
@@ -43,8 +43,8 @@ public void test_1() {
 
     static class TLongSet {
         long[] symbolHashCodes;
-        int    symbolHashCodesSize;
-        int[]  symbolIndexes;
+        int symbolHashCodesSize;
+        int[] symbolIndexes;
 
         public TLongSet() {
             int capacity = 16;

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue113.java
Patch:
@@ -11,7 +11,7 @@ public class Issue113 {
     @Test
     public void test() {
         String testJson2 = "{\"result\":[{\"puid\":\"21025318\"},{\"puid\":\"21482682\"},{\"puid\":\"21025345\"}],\"state\":0}";
-        JSONArray result2 = (JSONArray) JSONPath.extract(testJson2,"$.result[0,2].puid");
+        JSONArray result2 = (JSONArray) JSONPath.extract(testJson2, "$.result[0,2].puid");
         assertNotNull(result2);
         assertEquals("[\"21025318\",\"21025345\"]", result2.toJSONString());
 

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue114.java
Patch:
@@ -17,10 +17,10 @@ public void jsonPathTest() {
                 "}";
         JSONPath rowPath = JSONPath.of("$.row");
         JSONPath colPath = JSONPath.of("$.column");
-        String row = (String)rowPath.extract(JSONReader.of(seatString));
+        String row = (String) rowPath.extract(JSONReader.of(seatString));
         assertEquals("19", row);
 
-        String col = (String)colPath.extract(JSONReader.of(seatString));
+        String col = (String) colPath.extract(JSONReader.of(seatString));
         assertEquals("C", col);
     }
 

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue116.java
Patch:
@@ -11,14 +11,14 @@ public class Issue116 {
 
     @Test
     public void test() {
-        Object result = JSONPath.extract(testJson,"$['soap:Envelope']['soap:Body'].getCountryCityByIpResponse.getCountryCityByIpResult.string[*]");
+        Object result = JSONPath.extract(testJson, "$['soap:Envelope']['soap:Body'].getCountryCityByIpResponse.getCountryCityByIpResult.string[*]");
         assertNotNull(result);
         assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString());
     }
 
     @Test
     public void test1() {
-        Object result = JSONPath.extract(testJson,"$.soap\\:Envelope.soap\\:Body.getCountryCityByIpResponse.getCountryCityByIpResult.string[*]");
+        Object result = JSONPath.extract(testJson, "$.soap\\:Envelope.soap\\:Body.getCountryCityByIpResponse.getCountryCityByIpResult.string[*]");
         assertNotNull(result);
         assertEquals("[\"30.40.202.23\",\"美国 俄亥俄州哥伦布市国防部网络信息中心\"]", result.toString());
     }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue117.java
Patch:
@@ -11,11 +11,11 @@ public void test() {
         String text = ("{code:1,msg:'Hello world',data:{list:[1,2,3,4,5], ary2:[{a:2},{a:3,b:{c:'ddd'}}]}}");
         JSONObject obj = JSON.parseObject(text);
 
-        JSONPath.eval(obj,"$..ary2[0].a");
+        JSONPath.eval(obj, "$..ary2[0].a");
 
         long start = System.currentTimeMillis();
-        for(int i=0,len=1000000; i<len; i++) {
-            JSONPath.eval(obj,"$..ary2[0].a");
+        for (int i = 0, len = 1000000; i < len; i++) {
+            JSONPath.eval(obj, "$..ary2[0].a");
         }
 
         long times = System.currentTimeMillis() - start;

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue235.java
Patch:
@@ -22,7 +22,7 @@ public void test() {
         assertThrows(JSONException.class, () -> JSON.parseArray(json, TModal.class));
     }
 
-    public static class TModal{
+    public static class TModal {
         private String namespace;
         private List<String> items;
     }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue239.java
Patch:
@@ -73,7 +73,7 @@ public void test1() {
 
         // parseObject 校验失败，longitude超过最大值
         assertThrows(JSONSchemaValidException.class, () ->
-            JSON.parseObject("{\"longitude\":220.1552,\"latitude\":30.2741}", Point1.class)
+                JSON.parseObject("{\"longitude\":220.1552,\"latitude\":30.2741}", Point1.class)
         );
 
         // 校验JSONObject失败，longitude超过最大值

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue269.java
Patch:
@@ -11,7 +11,7 @@
 public class Issue269 {
     @Test
     public void test() {
-        String jsonStr="{\"test_prr\":2.9900000000000002131628207280300557613372802734375}";
+        String jsonStr = "{\"test_prr\":2.9900000000000002131628207280300557613372802734375}";
         JSONObject json = JSON.parseObject(jsonStr);
         BigDecimal val = json.getBigDecimal("test_prr");
         assertEquals("2.99", Double.toString(val.doubleValue()));

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue27.java
Patch:
@@ -11,7 +11,7 @@ public class Issue27 {
     public void test_parse() {
         char a = 0x5c;
         HashMap<Object, Object> hashMap = new HashMap<>();
-        hashMap.put("1",a);
+        hashMap.put("1", a);
 
         String string = JSON.toJSONString(hashMap);
         Assertions.assertEquals("{\"1\":\"\\\\\"}", string);
@@ -22,7 +22,7 @@ public void test_parse() {
     public void test_parse1() {
         char a = '"';
         HashMap<Object, Object> hashMap = new HashMap<>();
-        hashMap.put("1",a);
+        hashMap.put("1", a);
 
         String string = JSON.toJSONString(hashMap);
         Assertions.assertEquals("{\"1\":\"\\\"\"}", string);

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue371.java
Patch:
@@ -12,7 +12,7 @@
 
 public class Issue371 {
     @Test
-    public void test(){
+    public void test() {
         String userInfoBodyString = "{\"errcode\":0,\"errmsg\":\"OK\",\"weixiao_stu_id\":\"mmmmm\",\"card_number\":\"1111111\",\"name\":\"\\u5f20\\u7a0b\\u6d69\",\"identity_type\":1,\"data_source\":0,\"ocode\":\"1111111\"}";
         WeixiaoUserInfoResp userInfoBody = JSON.parseObject(userInfoBodyString, WeixiaoUserInfoResp.class);
         assertEquals("1111111", userInfoBody.getCard_number());

File: core/src/test/java/com/alibaba/fastjson2/jackson_support/JacksonIgnoreTest.java
Patch:
@@ -21,7 +21,7 @@ public void test_parse() throws Exception {
         String str = "{\"id\":\"101\"}";
         assertNull(
                 JSON.parseObject(str, A.class)
-                .id
+                        .id
         );
         assertNull(
                 JSON.parseObject(str, A1.class)

File: core/src/test/java/com/alibaba/fastjson2/jsonb/SkipTest.java
Patch:
@@ -18,7 +18,7 @@ public void test_0() {
                         .fluentPut("v1", this)
                         .fluentPut("v2", new JSONObject())
                         .fluentPut("v3", JSONArray.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, "A", "B", "C", "D", "E", "F")),
-                 JSONWriter.Feature.ReferenceDetection
+                JSONWriter.Feature.ReferenceDetection
         );
 
         JSONBDump.dump(bytes);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONExtractScalar.java
Patch:
@@ -25,8 +25,8 @@ public JSONExtractScalar(String path) {
 
     public JSONWritable eval(byte[] input) {
         JSONReader parser = JSONReader.of(input,
-                 0,
-                 input.length, StandardCharsets.UTF_8
+                0,
+                input.length, StandardCharsets.UTF_8
         );
 
         path.extractScalar(parser, valueConsumer);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONExtractScalarTest.java
Patch:
@@ -24,7 +24,7 @@ public void test_extract_id() throws Exception {
 
         JSONWritable result = udf.eval(utf8Bytes);
         assertEquals("1",
-                 result.toString());
+                result.toString());
     }
 
     @Test
@@ -33,7 +33,7 @@ public void test_extract_StartTime() throws Exception {
 
         JSONWritable result = udf.eval(utf8Bytes);
         assertEquals("2020-01-06 17:00:00",
-                 result.toString());
+                result.toString());
     }
 
     @Test
@@ -42,6 +42,6 @@ public void test_extract_Duration() throws Exception {
 
         JSONWritable result = udf.eval(utf8Bytes);
         assertEquals("450",
-                 result.toString());
+                result.toString());
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONExtractTest.java
Patch:
@@ -24,7 +24,7 @@ public void test_extract_id() throws Exception {
 
         JSONWritable result = udf.eval(utf8Bytes);
         assertEquals("\"1\"",
-                 result.toString());
+                result.toString());
     }
 
     @Test
@@ -33,6 +33,6 @@ public void test_extract_StartTime() throws Exception {
 
         JSONWritable result = udf.eval(utf8Bytes);
         assertEquals("\"2020-01-06 17:00:00\"",
-                 result.toString());
+                result.toString());
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONPathSetTest.java
Patch:
@@ -16,11 +16,12 @@ public void test_for_issue() throws Exception {
         Root root = JSONObject.parseObject(text, Root.class);
         //System.out.println(JSON.toJSONString(root));
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(root, jsonpath, value);
         assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root));
 
     }
+
     public static class Root {
         public List<Model> models;
     }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest.java
Patch:
@@ -102,7 +102,7 @@ public void test_4() throws Exception {
         assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result);
 
         assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"),
-                 path.eval(rootObject));
+                path.eval(rootObject));
     }
 
     @Test
@@ -121,7 +121,7 @@ public void test_5() throws Exception {
         assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result);
 
         assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069"),
-                 path.eval(rootObject));
+                path.eval(rootObject));
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/primitves/AtomicIntegerArrayTest.java
Patch:
@@ -36,7 +36,7 @@ public void test_parse() {
     @Test
     public void test_parse_jsonb() {
         byte[] jsonbBytes = JSONB.toBytes(
-                Arrays.asList(new Integer[] {101, null, 102}));
+                Arrays.asList(new Integer[]{101, null, 102}));
         AtomicIntegerArray array = JSONB.parseObject(jsonbBytes, AtomicIntegerArray.class);
         assertEquals(3, array.length());
         assertEquals(101, array.get(0));

File: core/src/test/java/com/alibaba/fastjson2/primitves/AtomicLongArrayTest.java
Patch:
@@ -35,7 +35,7 @@ public void test_parse() {
 
     @Test
     public void test_parse_jsonb() {
-        byte[] jsonbBytes = JSONB.toBytes(Arrays.asList(new Integer[] {101, null, 102}));
+        byte[] jsonbBytes = JSONB.toBytes(Arrays.asList(new Integer[]{101, null, 102}));
         AtomicLongArray array = JSONB.parseObject(jsonbBytes, AtomicLongArray.class);
         assertEquals(3, array.length());
         assertEquals(101, array.get(0));

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigDecimalTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BigDecimalTest {
-    static BigDecimal[] values = new BigDecimal[] {
+    static BigDecimal[] values = new BigDecimal[]{
             BigDecimal.ZERO,
             BigDecimal.ONE,
             BigDecimal.TEN,
@@ -119,7 +119,7 @@ public void test_jsonb_array() {
 
     @Test
     public void test_jsonb_value_cast() {
-        Number[] values = new Number[] {
+        Number[] values = new Number[]{
                 0,
                 Byte.MIN_VALUE, Byte.MAX_VALUE,
                 Short.MIN_VALUE, Short.MAX_VALUE,
@@ -141,7 +141,7 @@ public void test_jsonb_value_cast() {
 
     @Test
     public void test_jsonb_value_cast_str() {
-        Number[] values = new Number[] {
+        Number[] values = new Number[]{
                 0,
                 Byte.MIN_VALUE, Byte.MAX_VALUE,
                 Short.MIN_VALUE, Short.MAX_VALUE,

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigIntegerTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BigIntegerTest {
-    static BigInteger[] values = new BigInteger[] {
+    static BigInteger[] values = new BigInteger[]{
             null,
             BigInteger.ZERO,
             BigInteger.ONE,
@@ -106,7 +106,7 @@ public void test_jsonb_array() {
 
     @Test
     public void test_jsonb_value_cast() {
-        Number[] values = new Number[] {
+        Number[] values = new Number[]{
                 0,
                 Byte.MIN_VALUE, Byte.MAX_VALUE,
                 Short.MIN_VALUE, Short.MAX_VALUE,
@@ -128,7 +128,7 @@ public void test_jsonb_value_cast() {
 
     @Test
     public void test_jsonb_value_cast_str() {
-        Number[] values = new Number[] {
+        Number[] values = new Number[]{
                 0,
                 Byte.MIN_VALUE, Byte.MAX_VALUE,
                 Short.MIN_VALUE, Short.MAX_VALUE,

File: core/src/test/java/com/alibaba/fastjson2/primitves/BooleanArrayTest.java
Patch:
@@ -36,7 +36,7 @@ public void test_parse() {
 
     @Test
     public void test_parse_jsonb() {
-        byte[] jsonbBytes = JSONB.toBytes(Arrays.asList(new Object[] {1, 0, null, true, false}));
+        byte[] jsonbBytes = JSONB.toBytes(Arrays.asList(new Object[]{1, 0, null, true, false}));
         Boolean[] array = JSONB.parseObject(jsonbBytes, Boolean[].class);
         assertEquals(Boolean.TRUE, array[0]);
         assertEquals(Boolean.FALSE, array[1]);

File: core/src/test/java/com/alibaba/fastjson2/primitves/BooleanValueArrayTest.java
Patch:
@@ -49,7 +49,7 @@ public void test_parse_jsonb() {
     @Test
     public void test_writeNull_0() {
         assertEquals("{}",
-                 JSON.toJSONString(new VO()));
+                JSON.toJSONString(new VO()));
         assertEquals("{}",
                 new String(
                         JSON.toJSONBytes(new VO())));
@@ -58,7 +58,7 @@ public void test_writeNull_0() {
     @Test
     public void test_writeNull() {
         assertEquals("{\"values\":null}",
-                 JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
+                JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
         assertEquals("{\"values\":null}",
                 new String(
                         JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)));
@@ -67,7 +67,7 @@ public void test_writeNull() {
     @Test
     public void test_writeNull2() {
         assertEquals("{\"values\":null}",
-                 JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls));
+                JSON.toJSONString(new VO2(), JSONWriter.Feature.WriteNulls));
         assertEquals("{\"values\":null}",
                 new String(
                         JSON.toJSONBytes(new VO2(), JSONWriter.Feature.WriteNulls)));

File: core/src/test/java/com/alibaba/fastjson2/primitves/CharValueArrayTest.java
Patch:
@@ -60,7 +60,7 @@ public void test_parse_str_jsonb() {
     @Test
     public void test_writeNull() {
         assertEquals("{\"values\":null}",
-                 JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
+                JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
         assertEquals("{\"values\":null}",
                 new String(
                         JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)));
@@ -69,7 +69,7 @@ public void test_writeNull() {
     @Test
     public void test_writeNull2() {
         assertEquals("{}",
-                 JSON.toJSONString(new VO2()));
+                JSON.toJSONString(new VO2()));
 
         assertEquals("{\"values\":null}",
                 new String(

File: core/src/test/java/com/alibaba/fastjson2/primitves/CharacterWriteTest.java
Patch:
@@ -25,7 +25,7 @@ public void test_array_char() {
         assertEquals("\"abc\"", str);
 
         assertTrue(Arrays.equals(array,
-                 JSONReader.of(str)
+                JSONReader.of(str)
                         .read(array.getClass())));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/Date1Test.java
Patch:
@@ -22,7 +22,7 @@
 public class Date1Test {
     private TimeZone defaultTimeZone;
 
-    Date[] dates = new Date[] {
+    Date[] dates = new Date[]{
             null,
             new Date(0),
             new Date(1),
@@ -59,7 +59,7 @@ public class Date1Test {
 
     @BeforeEach
     public void before() {
-        defaultTimeZone  = TimeZone.getDefault();
+        defaultTimeZone = TimeZone.getDefault();
         TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
     }
 
@@ -204,7 +204,7 @@ public void test_millis3() throws Exception {
         for (ObjectWriterCreator creator : creators) {
             FieldWriter fieldWriter = creator
                     .createFieldWriter("date"
-                            ,"iso8601",
+                            , "iso8601",
                             LongValueField1.class.getField("v0000"));
             ObjectWriter<LongValueField1> objectWriter
                     = creator.createObjectWriter(fieldWriter);

File: core/src/test/java/com/alibaba/fastjson2/primitves/FloatValueArrayTest.java
Patch:
@@ -44,7 +44,7 @@ public void test_parse_jsonb() {
     @Test
     public void test_writeNull() {
         assertEquals("{\"values\":null}",
-                 JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
+                JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
         assertEquals("{\"values\":null}",
                 new String(
                         JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)));
@@ -53,7 +53,7 @@ public void test_writeNull() {
     @Test
     public void test_writeNull2() {
         assertEquals("{}",
-                 JSON.toJSONString(new VO2()));
+                JSON.toJSONString(new VO2()));
 
         assertEquals("{\"values\":null}",
                 new String(

File: core/src/test/java/com/alibaba/fastjson2/primitves/Int8ValueArrayTest.java
Patch:
@@ -10,7 +10,7 @@ public class Int8ValueArrayTest {
     @Test
     public void test_writeNull() {
         assertEquals("{\"values\":null}",
-                 JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
+                JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
         assertEquals("{\"values\":null}",
                 new String(
                         JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)));
@@ -19,7 +19,7 @@ public void test_writeNull() {
     @Test
     public void test_writeNull2() {
         assertEquals("{}",
-                 JSON.toJSONString(new VO2()));
+                JSON.toJSONString(new VO2()));
 
         assertEquals("{\"values\":null}",
                 new String(

File: core/src/test/java/com/alibaba/fastjson2/primitves/MapTest.java
Patch:
@@ -186,7 +186,7 @@ public void test_specialKey_2() {
 
         byte[] utf8Bytes = JSON.toJSONBytes(map);
         assertEquals(1,
-                 JSON.parseObject(utf8Bytes)
+                JSON.parseObject(utf8Bytes)
                         .get(key));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/StringArrayTest.java
Patch:
@@ -10,7 +10,7 @@ public class StringArrayTest {
     @Test
     public void test_writeNull() {
         assertEquals("{\"values\":null}",
-                 JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
+                JSON.toJSONString(new VO(), JSONWriter.Feature.WriteNulls));
         assertEquals("{\"values\":null}",
                 new String(
                         JSON.toJSONBytes(new VO(), JSONWriter.Feature.WriteNulls)));
@@ -19,7 +19,7 @@ public void test_writeNull() {
     @Test
     public void test_writeNull2() {
         assertEquals("{}",
-                 JSON.toJSONString(new VO2()));
+                JSON.toJSONString(new VO2()));
 
         assertEquals("{\"values\":null}",
                 new String(

File: core/src/test/java/com/alibaba/fastjson2/read/BasicTypeNameTest.java
Patch:
@@ -41,7 +41,7 @@ public void test0() {
 
     @Test
     public void test1() {
-        String[] strings = new String[] {"1", "2L", "3F", "4D"};
+        String[] strings = new String[]{"1", "2L", "3F", "4D"};
 
         for (int i = 0; i < strings.length; i++) {
             String string = strings[i];

File: core/src/test/java/com/alibaba/fastjson2/read/ParserTest.java
Patch:
@@ -66,7 +66,7 @@ void lexerTest(JSONReader lexer) {
 
         assertEquals(Fnv.hashCode64LCase("name"), lexer.readFieldNameHashCode());
         assertEquals("jobs",
-                 lexer.readString());
+                lexer.readString());
 
         assertEquals('}', lexer.current());
         lexer.next();

File: core/src/test/java/com/alibaba/fastjson2/read/ParserTest_2.java
Patch:
@@ -47,14 +47,14 @@ void lexerTest(JSONReader lexer) {
         assertEquals('{', lexer.current());
         lexer.next();
         assertEquals(Fnv.hashCode64("序号"),
-                 lexer.readFieldNameHashCode());
+                lexer.readFieldNameHashCode());
         assertEquals("序号", lexer.getFieldName());
         assertEquals(123, lexer.readInt32Value());
 
         assertEquals(Fnv.hashCode64("名称"), lexer.readFieldNameHashCode());
         assertEquals("名称", lexer.getFieldName());
         assertEquals("计算平台",
-                 lexer.readString());
+                lexer.readString());
 
         assertEquals('}', lexer.current());
         lexer.next();

File: core/src/test/java/com/alibaba/fastjson2/read/ParserTest_3.java
Patch:
@@ -69,10 +69,10 @@ void lexerTest(JSONReader lexer) {
         lexer.next();
         assertEquals(Fnv.hashCode64("Object Id"), lexer.readFieldNameHashCode());
         assertEquals(Fnv.hashCode64LCase("object id"),
-                 lexer.getNameHashCodeLCase());
+                lexer.getNameHashCodeLCase());
         assertEquals("Object Id", lexer.getFieldName());
         assertEquals(-123,
-                 lexer.readInt32Value());
+                lexer.readInt32Value());
 
         assertEquals(Fnv.hashCode64("Full \" Name"), lexer.readFieldNameHashCode());
         assertEquals(Fnv.hashCode64LCase("full \" name"), lexer.getNameHashCodeLCase());

File: core/src/test/java/com/alibaba/fastjson2/time/DateTest.java
Patch:
@@ -28,7 +28,7 @@ public void testDate() throws Exception {
 
     @Test
     public void testDateNull() {
-        Date[] dates = new Date[] {null};
+        Date[] dates = new Date[]{null};
         assertEquals("[null]", JSON.toJSONString(dates));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/util/TypeUtilsTest.java
Patch:
@@ -332,9 +332,9 @@ public void test_cast_0() {
         assertSame(instant, TypeUtils.cast(instant, Instant.class));
 
         assertEquals(Instant.ofEpochSecond(instant.getEpochSecond()),
-                 TypeUtils.cast(JSONObject.of("epochSecond", instant.getEpochSecond()), Instant.class));
+                TypeUtils.cast(JSONObject.of("epochSecond", instant.getEpochSecond()), Instant.class));
         assertEquals(instant,
-                 TypeUtils.cast(JSONObject.of("epochMilli", instant.toEpochMilli()), Instant.class));
+                TypeUtils.cast(JSONObject.of("epochMilli", instant.toEpochMilli()), Instant.class));
 
         Exception error = null;
         try {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BooleanArrayFieldTest_primitive.java
Patch:
@@ -10,7 +10,7 @@
 public class BooleanArrayFieldTest_primitive {
     @Test
     public void test_array() throws Exception {
-        assertEquals("[true]", JSON.toJSONString(new boolean[] { true }));
+        assertEquals("[true]", JSON.toJSONString(new boolean[]{true}));
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BooleanArrayFieldTest_primitive_private.java
Patch:
@@ -10,7 +10,7 @@
 public class BooleanArrayFieldTest_primitive_private {
     @Test
     public void test_array() throws Exception {
-        assertEquals("[true]", JSON.toJSONString(new boolean[] { true }));
+        assertEquals("[true]", JSON.toJSONString(new boolean[]{true}));
 
     }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_1.java
Patch:
@@ -9,7 +9,7 @@
 public class ByteArrayFieldTest_1 {
     @Test
     public void test_array() throws Exception {
-        assertEquals("\"AQ==\"", JSON.toJSONString(new byte[] { 1 }, "base64"));
+        assertEquals("\"AQ==\"", JSON.toJSONString(new byte[]{1}, "base64"));
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_2.java
Patch:
@@ -24,10 +24,10 @@ public void test_0() throws Exception {
     public static class Entity {
         private byte[] value;
 
-        public Entity(){
+        public Entity() {
         }
 
-        public Entity(String value) throws UnsupportedEncodingException{
+        public Entity(String value) throws UnsupportedEncodingException {
             this.value = value.getBytes("UTF-8");
         }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_3.java
Patch:
@@ -24,10 +24,10 @@ public void test_0() throws Exception {
     private static class Entity {
         private byte[] value;
 
-        public Entity(){
+        public Entity() {
         }
 
-        public Entity(String value) throws UnsupportedEncodingException{
+        public Entity(String value) throws UnsupportedEncodingException {
             this.value = value.getBytes("UTF-8");
         }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/CanalTest.java
Patch:
@@ -10,7 +10,7 @@
 public class CanalTest {
     @Test
     public void test0() {
-        InetSocketAddress address = new InetSocketAddress("localhost",3306);
+        InetSocketAddress address = new InetSocketAddress("localhost", 3306);
         String str = JSON.toJSONString(address);
         assertEquals("{\"address\":\"localhost\",\"port\":3306}", str);
         InetSocketAddress address1 = JSON.parseObject(str, InetSocketAddress.class);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONObjectTest_getObj_2.java
Patch:
@@ -27,6 +27,7 @@ public static class Model {
     }
 
     public static <T> Type getType() {
-        return new TypeReference<T[]>() {}.getType();
+        return new TypeReference<T[]>() {
+        }.getType();
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/DoubleNullTest.java
Patch:
@@ -51,7 +51,6 @@ public void test_null_array() {
         assertNull(model.v2);
     }
 
-
     public static class Model {
         public Double v1;
         public Double v2;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/IntTest.java
Patch:
@@ -12,7 +12,7 @@
 public class IntTest {
     @Test
     public void test_array() throws Exception {
-        int[] values = new int[] {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
+        int[] values = new int[]{Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
         String text = JSON.toJSONString(values);
         long[] values_2 = JSON.parseObject(text, long[].class);
         assertEquals(values_2.length, values.length);
@@ -23,7 +23,7 @@ public void test_array() throws Exception {
 
     @Test
     public void test_map() throws Exception {
-        int[] values = new int[] {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
+        int[] values = new int[]{Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
         Map<String, Object> map = new HashMap<String, Object>();
         for (int i = 0; i < values.length; ++i) {
             map.put(Integer.toString(i), values[i]);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/LongTest.java
Patch:
@@ -12,7 +12,7 @@
 public class LongTest {
     @Test
     public void test_array() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         String text = JSON.toJSONString(values);
         long[] values_2 = JSON.parseObject(text, long[].class);
         assertEquals(values_2.length, values.length);
@@ -23,7 +23,7 @@ public void test_array() throws Exception {
 
     @Test
     public void test_map() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         Map<String, Object> map = new HashMap<String, Object>();
         for (int i = 0; i < values.length; ++i) {
             map.put(Long.toString(i), values[i]);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/LongTest_browserCompatible.java
Patch:
@@ -13,7 +13,7 @@
 public class LongTest_browserCompatible {
     @Test
     public void test_array() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         String text = JSON.toJSONString(values, JSONWriter.Feature.BrowserCompatible);
         long[] values_2 = JSON.parseObject(text, long[].class);
         assertEquals(values_2.length, values.length);
@@ -54,7 +54,7 @@ public void test_array() throws Exception {
 
     @Test
     public void test_map() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         Map<String, Object> map = new HashMap<String, Object>();
         for (int i = 0; i < values.length; ++i) {
             map.put(Long.toString(i), values[i]);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest0_private.java
Patch:
@@ -15,7 +15,7 @@ public void test_0() throws Exception {
         assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -30,7 +30,6 @@ public String getName() {
     }
 
     private static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO build() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest1_private.java
Patch:
@@ -15,7 +15,7 @@ public void test_create() throws Exception {
         assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest2.java
Patch:
@@ -16,7 +16,7 @@ public void test_create() throws Exception {
         assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -38,7 +38,7 @@ public String getName() {
         }
     }
 
-    @JSONPOJOBuilder(buildMethod="xxx")
+    @JSONPOJOBuilder(buildMethod = "xxx")
     public static class VOBuilder {
         private VO vo = new VO();
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest2_private.java
Patch:
@@ -16,7 +16,7 @@ public void test_create() throws Exception {
         assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -30,7 +30,7 @@ public String getName() {
         }
     }
 
-    @JSONPOJOBuilder(buildMethod="xxx")
+    @JSONPOJOBuilder(buildMethod = "xxx")
     private static class VOBuilder {
         private VO vo = new VO();
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest3.java
Patch:
@@ -16,7 +16,7 @@ public void test_create() throws Exception {
         assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -30,7 +30,7 @@ public String getName() {
         }
     }
 
-    @JSONPOJOBuilder(withPrefix="kk", buildMethod="mmm")
+    @JSONPOJOBuilder(withPrefix = "kk", buildMethod = "mmm")
     public static class VOBuilder {
         private VO vo = new VO();
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest3_private.java
Patch:
@@ -16,7 +16,7 @@ public void test_create() throws Exception {
         assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -37,13 +37,13 @@ public VO create() {
             return vo;
         }
 
-        @JSONField(name="id")
+        @JSONField(name = "id")
         public VOBuilder kkId(int id) {
             vo.id = id;
             return this;
         }
 
-        @JSONField(name="name")
+        @JSONField(name = "name")
         public VOBuilder kkName(String name) {
             vo.name = name;
             return this;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest_error.java
Patch:
@@ -21,7 +21,7 @@ public void test_0() throws Exception {
 
     @JSONType(builder = VOBuilder.class)
     public static class VO {
-        private int    id;
+        private int id;
         private String name;
 
         public int getId() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest_error_private.java
Patch:
@@ -21,8 +21,7 @@ public void test_0() throws Exception {
 
     @JSONType(builder = VOBuilder.class)
     public static class VO {
-
-        private int    id;
+        private int id;
         private String name;
 
         public int getId() {
@@ -35,7 +34,6 @@ public String getName() {
     }
 
     private static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO build() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/geo/GeometryCollectionTest.java
Patch:
@@ -29,7 +29,7 @@ public void test_geo() {
 
         assertEquals(
                 "{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0]},{\"type\":\"LineString\",\"coordinates\":[[101.0,0.0],[102.0,1.0]]}]}",
-                 JSON.toJSONString(geometry));
+                JSON.toJSONString(geometry));
 
         String str2 = JSON.toJSONString(geometry);
         assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)));

File: core/src/test/java/com/alibaba/fastjson2/v1issues/geo/MultiPolygonTest.java
Patch:
@@ -46,7 +46,7 @@ public void test_geo() {
 
         assertEquals(
                 "{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],[[100.2,0.2],[100.2,0.8],[100.8,0.8],[100.8,0.2],[100.2,0.2]]]]}",
-                 JSON.toJSONString(geometry));
+                JSON.toJSONString(geometry));
 
         String str2 = JSON.toJSONString(geometry);
         assertEquals(str2, JSON.toJSONString(JSON.parseObject(str2, Geometry.class)));

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1000/Issue1079.java
Patch:
@@ -28,7 +28,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class PdpResponse {
-        @JSONField(name ="Response")
+        @JSONField(name = "Response")
         public List<Response> response;
 
         public static class Response {
@@ -53,7 +53,7 @@ public static class StatusCode {
         }
 
         @JSONField(deserialize = false)
-        public String retrieveDecision(){
+        public String retrieveDecision() {
             return this.response.get(0).innerObjects.get(0).decision;
         }
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1000/Issue1082.java
Patch:
@@ -22,7 +22,6 @@ public void test_for_issue() throws Exception {
     }
 
     public void f() {
-
     }
 
     public class Model_1082 {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1146.java
Patch:
@@ -18,13 +18,14 @@ public void test_for_issue() throws Exception {
 
     @JSONType(ignores = {"id2", "id3"})
     public static class Bean {
-
         public int getId() {
             return 101;
         }
+
         public int getId2() {
             return 102;
         }
+
         public int getId3() {
             return 103;
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1146C.java
Patch:
@@ -18,13 +18,14 @@ public void test_for_issue() throws Exception {
 
     @JSONType(ignores = {"id2", "id3"})
     public static class Bean {
-
         public int getId() {
             return 101;
         }
+
         public int getId2() {
             return 102;
         }
+
         public int getId3() {
             return 103;
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1150.java
Patch:
@@ -32,6 +32,5 @@ public static class Model2 {
     }
 
     public static class Item {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1177_1.java
Patch:
@@ -17,7 +17,7 @@ public void test_for_issue() throws Exception {
         JSONObject jsonObject = JSON.parseObject(text);
         System.out.println(jsonObject);
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
         String result = jsonObject.toString();
         assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", result);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1177_2.java
Patch:
@@ -16,10 +16,11 @@ public class Issue1177_2 {
     @Test
     public void test_for_issue() throws Exception {
         String text = "{\"a\":{\"x\":\"y\"},\"b\":{\"x\":\"y\"}}";
-        Map<String, Model> jsonObject = JSON.parseObject(text, new TypeReference<Map<String, Model>>(){}.getType());
+        Map<String, Model> jsonObject = JSON.parseObject(text, new TypeReference<Map<String, Model>>() {
+        }.getType());
         System.out.println(JSON.toJSONString(jsonObject));
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
         assertEquals("{\"a\":{\"x\":\"y2\"},\"b\":{\"x\":\"y2\"}}", JSON.toJSONString(jsonObject));
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1177_3.java
Patch:
@@ -16,10 +16,11 @@ public class Issue1177_3 {
     @Test
     public void test_for_issue() throws Exception {
         String text = "[{\"x\":\"y\"},{\"x\":\"y\"}]";
-        List<Model> jsonObject = JSON.parseObject(text, new TypeReference<List<Model>>(){}.getType());
+        List<Model> jsonObject = JSON.parseObject(text, new TypeReference<List<Model>>() {
+        }.getType());
         System.out.println(JSON.toJSONString(jsonObject));
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(jsonObject, jsonpath, value);
         assertEquals("[{\"x\":\"y2\"},{\"x\":\"y2\"}]", JSON.toJSONString(jsonObject));
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1177_4.java
Patch:
@@ -18,7 +18,7 @@ public void test_for_issue() throws Exception {
         Root root = JSON.parseObject(text, Root.class);
         System.out.println(JSON.toJSONString(root));
         String jsonpath = "$..x";
-        String value="y2";
+        String value = "y2";
         JSONPath.set(root, jsonpath, value);
         assertEquals("{\"models\":[{\"x\":\"y2\"},{\"x\":\"y2\"}]}", JSON.toJSONString(root));
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1188.java
Patch:
@@ -19,8 +19,7 @@ public void test_for_issue_1188() throws Exception {
         assertNull(info.ids);
     }
 
-    public static class Info{
-
+    public static class Info {
         @JSONField(deserialize = false)
         private List<Integer> ids;
         private String name;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1120.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Model {
-        @JSONField(name="REQ_NO")
+        @JSONField(name = "REQ_NO")
         private String reqNo;
 
         public String getReqNo() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1120C.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Model {
-        @JSONField(name="REQ_NO")
+        @JSONField(name = "REQ_NO")
         private String reqNo;
 
         public String getReqNo() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1205.java
Patch:
@@ -18,12 +18,12 @@ public void test_for_issue() throws Exception {
         JSONArray array = new JSONArray();
         array.add(new JSONObject());
 
-        List<Model> list = array.toJavaObject(new TypeReference<List<Model>>(){}.getType());
+        List<Model> list = array.toJavaObject(new TypeReference<List<Model>>() {
+        }.getType());
         assertEquals(1, list.size());
         assertEquals(Model.class, list.get(0).getClass());
     }
 
     public static class Model {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1225.java
Patch:
@@ -13,7 +13,6 @@
  * Created by wenshao on 30/05/2017.
  */
 public class Issue1225 {
-
     @Test
     public void test_parseObject_0() {
         BaseGenericType<List<String>> o = JSON.parseObject("{\"data\":[\"1\",\"2\",\"3\"]}",

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1233.java
Patch:
@@ -28,12 +28,10 @@ public void test_for_issue() throws Exception {
 
     @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
     public interface AreaMixIn {
-
     }
 
     @JSONType(typeName = "floorV2")
     public interface FloorV2MixIn {
-
     }
 
     public interface Area {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1262.java
Patch:
@@ -20,6 +20,5 @@ public static class Model {
     }
 
     public static class Chatter {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1271.java
Patch:
@@ -11,7 +11,6 @@
 public class Issue1271 {
     @Test
     public void test_for_issue() throws Exception {
-
         String json = "{\"a\":1,\"b\":2}";
 
         final AtomicInteger count = new AtomicInteger(0);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1272.java
Patch:
@@ -17,15 +17,14 @@ public void test_for_issue() throws Exception {
 
         try {
             JSON.toJSONString(new Point());
-        }catch (JSONException ex) {
+        } catch (JSONException ex) {
             exception = ex;
         }
         assertNotNull(exception);
         assertEquals(NullPointerException.class, exception.getCause().getClass());
     }
 
     public static class Point {
-
         private Long userId;
 
         public long getUserId() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1272_IgnoreError.java
Patch:
@@ -17,7 +17,6 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Point {
-
         private Long userId;
 
         public long getUserId() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1276.java
Patch:
@@ -11,7 +11,7 @@
 public class Issue1276 {
     @Test
     public void test_for_issue() throws Exception {
-        MyException myException = new MyException(100,"error msg");
+        MyException myException = new MyException(100, "error msg");
         String str = JSON.toJSONString(myException);
         System.out.println(str);
 
@@ -24,7 +24,7 @@ public void test_for_issue() throws Exception {
     }
 
     public static class MyException
-            extends RuntimeException{
+            extends RuntimeException {
         private static final long serialVersionUID = 7815426752583648734L;
         private long code;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1300.java
Patch:
@@ -49,6 +49,5 @@ public City(@JSONField(name = "code") int code,
     }
 
     public static interface Parcelable {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1300C.java
Patch:
@@ -48,6 +48,5 @@ public City(@JSONField(name = "code") int code,
     }
 
     public static interface Parcelable {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1307.java
Patch:
@@ -18,7 +18,7 @@
 public class Issue1307 {
     ValueFilter contextValueFilter = new ValueFilter() {
         public Object apply(Object obj, String name, Object value) {
-            return "mark-"+value;
+            return "mark-" + value;
         }
     };
     ValueFilter valueFilter = new ValueFilter() {
@@ -28,14 +28,14 @@ public Object apply(Object object, String name, Object value) {
     };
 
     @Test
-    public void test_context_value_filter_not_effected () {
+    public void test_context_value_filter_not_effected() {
         List<Object> params = new ArrayList<Object>();
         Map data = new HashMap();
         data.put("name", "ace");
         params.add(data);
         //fail Actual   :[{"name":"ace"}]
         assertEquals("[{\"name\":\"mark-ace\"}]",
-                 JSON.toJSONString(params,
+                JSON.toJSONString(params,
                         new Filter[]{
                                 contextValueFilter
                         })

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1344.java
Patch:
@@ -20,10 +20,8 @@ public void test_for_issue() throws Exception {
 
     public static class TestException
             extends Exception {
-
         @JSONCreator
         public TestException() {
-
         }
 
         public TestException(String data) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1357.java
Patch:
@@ -11,13 +11,12 @@
 public class Issue1357 {
     @Test
     public void test_for_issue() throws Exception {
-
         String str = "{\"d2\":null}";
-        Test2Bean b = JSON.parseObject(str,Test2Bean.class);
+        Test2Bean b = JSON.parseObject(str, Test2Bean.class);
         System.out.println(b);
     }
 
-    public static class Test2Bean{
+    public static class Test2Bean {
         private LocalDateTime d2;
 
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1369.java
Patch:
@@ -18,14 +18,15 @@ public void test_for_issue() throws Exception {
         foo.bars.c = 3;
         String json = JSON.toJSONString(foo);
         System.out.println(json);
-        assertTrue(json.indexOf("\\")<0);
+        assertTrue(json.indexOf("\\") < 0);
     }
 
     public static class Foo {
         public int a;
         public String b;
         public Bar bars;
     }
+
     public static class Bar {
         public int c;
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1423.java
Patch:
@@ -33,6 +33,7 @@ public void test_for_issue_arrayMapping() {
 
     public static class LongVal {
         private long v;
+
         public void setV(long v) {
             this.v = v;
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1424.java
Patch:
@@ -10,7 +10,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class Issue1424 {
-
     public static class IntegerVal {
         private int v;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1425.java
Patch:
@@ -18,8 +18,8 @@ public void test_for_issue() throws Exception {
 
         System.out.println(JSON.toJSONString(dicDomain, features));
     }
-    public static class DicDomain {
 
+    public static class DicDomain {
         private String code;
 
         private String name;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1445.java
Patch:
@@ -7,7 +7,6 @@
 public class Issue1445 {
     @Test
     public void test_for_issue() throws Exception {
-
         JSONObject obj = new JSONObject();
         obj.put("data", new JSONObject());
         obj.getJSONObject("data").put("data", new JSONObject());

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1458C.java
Patch:
@@ -25,7 +25,6 @@ public void test_for_issue() throws Exception {
 
     public static class HostPoint
             implements Serializable {
-
         private final HostAddress address;
 
         @JSONField(name = "fingerprint")

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1486.java
Patch:
@@ -11,12 +11,11 @@
 public class Issue1486 {
     @Test
     public void test_for_issue() throws Exception {
-
         String json = "[{\"song_list\":[{\"val\":1,\"v_al\":2},{\"val\":2,\"v_al\":2},{\"val\":3,\"v_al\":2}],\"songlist\":\"v_al\"}]";
         List<Value> parseObject = JSON.parseObject(json, new TypeReference<List<Value>>() {
         }.getType(), JSONReader.Feature.IgnoreNoneSerializable);
         for (Value value : parseObject) {
-            System.out.println(value.songList + "  " );
+            System.out.println(value.songList + "  ");
         }
     }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1492.java
Patch:
@@ -16,8 +16,8 @@ public void test_for_issue() throws Exception {
 
         // test for JSONObject
         JSONObject obj = new JSONObject();
-        obj.put("key1","value1");
-        obj.put("key2","value2");
+        obj.put("key1", "value1");
+        obj.put("key2", "value2");
         resp.setData(obj);
 
         String str = JSON.toJSONString(resp);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1496.java
Patch:
@@ -25,9 +25,7 @@ public interface ISetupStatusInfo {
     }
 
     public interface ISetupStatusProcess {
-
         /**
-         *
          * @return
          */
         SetupStatus refuse();

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1503.java
Patch:
@@ -21,6 +21,5 @@ public void test_for_issue() throws Exception {
     }
 
     public static class Bean {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1524.java
Patch:
@@ -113,13 +113,11 @@ public void setOldValue(Value oldValue) {
     }
 
     public static class Value {
-
     }
 
     public static class ValueSerializer
             implements ObjectWriter {
         public ValueSerializer() {
-
         }
 
         @Override

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1548.java
Patch:
@@ -47,7 +47,6 @@ public String toString() {
         }
     }
 
-    public static enum DocType{
-
+    public static enum DocType {
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1576.java
Patch:
@@ -17,7 +17,6 @@ public void test_for_issue() throws Exception {
     }
 
     public static class NewsDetail {
-
         public int code;
         public String in_msg;
         public String out_msg;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1583.java
Patch:
@@ -24,7 +24,8 @@ public void test_issue() throws Exception {
         String jsonString = JSON.toJSONString(mapList);
 
         System.out.println(jsonString);
-        List<Map.Entry<String, List<String>>> parse = JSON.parseObject(jsonString, new TypeReference<List<Map.Entry<String, List<String>>>>() {}.getType());
+        List<Map.Entry<String, List<String>>> parse = JSON.parseObject(jsonString, new TypeReference<List<Map.Entry<String, List<String>>>>() {
+        }.getType());
         System.out.println(parse);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1627.java
Patch:
@@ -21,9 +21,9 @@ public void test_for_issue() throws Exception {
     public static String escapeString(String s) {
         StringBuilder buf = new StringBuilder();
 
-        for(int i = 0; i < s.length(); ++i) {
+        for (int i = 0; i < s.length(); ++i) {
             char c = s.charAt(i);
-            if((c < 48 || c > 57) && (c < 65 || c > 90) && (c < 97 || c > 122)) {
+            if ((c < 48 || c > 57) && (c < 65 || c > 90) && (c < 97 || c > 122)) {
                 buf.append("\\" + c);
             } else {
                 buf.append(c);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1628.java
Patch:
@@ -25,7 +25,7 @@ public void test_toJSONBytes_1() throws Exception {
         Map<String, Object> map = new HashMap<String, Object>();
         map.put("a", 1001);
         map.put("b", 2002);
-        byte[] bytes = JSON.toJSONBytes(map, new Filter[] {new SimplePropertyPreFilter("a")});
+        byte[] bytes = JSON.toJSONBytes(map, new Filter[]{new SimplePropertyPreFilter("a")});
         assertEquals("{\"a\":1001}", new String(bytes));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1645.java
Patch:
@@ -12,7 +12,7 @@ public void test_for_issue() throws Exception {
         JSON.toJSONString(JSON.parseObject(test).toJavaObject(TestDateClass.class));
     }
 
-    public static class TestDateClass{
+    public static class TestDateClass {
         public String name;
         public LocalDateTime testDateTime;
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1649.java
Patch:
@@ -17,7 +17,6 @@ public void test_for_issue() throws Exception {
 
     @JSONType(serializeFeatures = {Feature.NullAsDefaultValue})
     public static class Apple {
-
         private String color;
         private String productCity;
         private int size;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1649_private.java
Patch:
@@ -17,7 +17,6 @@ public void test_for_issue() throws Exception {
 
     @JSONType(serializeFeatures = {JSONWriter.Feature.NullAsDefaultValue})
     private static class Apple {
-
         // @JSONField(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue})
         private String color;
         private String productCity;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1660.java
Patch:
@@ -11,7 +11,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Issue1660 {
-
     @Test
     public void test_for_issue() throws Exception {
         Model model = new Model();

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1679.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Issue1679 {
-
     @Test
     public void test_for_issue() throws Exception {
         String json = "{\"create\":\"2018-01-10 08:30:00\"}";
@@ -22,7 +21,7 @@ public void test_for_issue() throws Exception {
         assertEquals("\"2018-01-10T08:30:00+08:00\"", jsonWriter.toString());
     }
 
-    public static class User{
+    public static class User {
         public Date create;
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1683.java
Patch:
@@ -20,7 +20,6 @@ public void test_for_issue() throws Exception {
 
     @JSONType(orders = {"bookId", "bookName", "authorName", "wordCount"})
     public static class BookDO {
-
         private Long bookId;
 
         private String bookName;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1683C.java
Patch:
@@ -20,7 +20,6 @@ public void test_for_issue() throws Exception {
 
     @JSONType(orders = {"bookId", "bookName", "authorName", "wordCount"})
     public static class BookDO {
-
         private Long bookId;
 
         private String bookName;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue_for_gaorui.java
Patch:
@@ -126,6 +126,5 @@ public void setCodeForLose(String codeForLose) {
     }
 
     public static class Money {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/issue_1699/TestJson.java
Patch:
@@ -7,7 +7,6 @@
 import java.io.Serializable;
 
 public class TestJson {
-
     @Test
     public void test_for_issue() {
 //        config.setAutoTypeSupport(true);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1723.java
Patch:
@@ -27,12 +27,15 @@ public void test_for_issue_2() throws Exception {
 
     public static class User {
         private float age;
+
         public float getAge() {
             return age;
         }
+
         public void setAge(float age) {
             this.age = age;
         }
+
         @Override
         public String toString() {
             return "User{" +

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1725.java
Patch:
@@ -11,7 +11,7 @@
 public class Issue1725 {
     @Test
     public void test_for_issue() throws Exception {
-        Map<String, Object> map= new HashMap<String, Object>();
+        Map<String, Object> map = new HashMap<String, Object>();
         map.put("enumField", 0);
 
         AbstractBean bean = JSON.parseObject(JSON.toJSONString(map), ConcreteBean.class);
@@ -24,8 +24,7 @@ public static class AbstractBean {
 
     public static class ConcreteBean
             extends AbstractBean {
-
     }
 
-    public static enum FieldEnum { A, B }
+    public static enum FieldEnum {A, B}
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1727.java
Patch:
@@ -27,7 +27,7 @@ public void test_for_issue_lambda() throws Exception {
     }
 
     public static class Model {
-        @JSONField(format="yyyyMMddHHmmssSSSZ")
+        @JSONField(format = "yyyyMMddHHmmssSSSZ")
         public Date gmtCreate;
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1733_jsonpath.java
Patch:
@@ -62,7 +62,6 @@ public static class Book {
         public String category;
 
         public Book() {
-
         }
 
         public Book(int price, String category) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1761.java
Patch:
@@ -9,7 +9,7 @@ public class Issue1761 {
     @Test
     public void test_for_issue() throws Exception {
         JSONObject jsonObject = new JSONObject();
-        jsonObject.put("null","");
+        jsonObject.put("null", "");
         double d = jsonObject.getDoubleValue("null");
         assertEquals(d, 0.0D);
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1763.java
Patch:
@@ -37,7 +37,7 @@ public void setResult(T result) {
         }
     }
 
-    public static class BasePageQueryResult<T> extends BaseResult<T>{
+    public static class BasePageQueryResult<T> extends BaseResult<T> {
         private List<T> modelList;
 
         public List<T> getModelList() {
@@ -62,11 +62,9 @@ public void setSourceId(String sourceId) {
     }
 
     public static class InteractiveOrderMaterielQueryResult<T extends InteractiveOrderMaterielModel> extends BasePageQueryResult<T> {
-
     }
 
     public interface ProcurementOrderInteractiveServiceForCloud {
-
         BaseResult<InteractiveOrderMaterielQueryResult> queryOrderMateriel(Map param);
 
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1821.java
Patch:
@@ -30,10 +30,10 @@ public void test_for_issue() throws Exception {
 
     @JSONType
     public static class Model {
-        @JSONField(name="type", ordinal = 1)
+        @JSONField(name = "type", ordinal = 1)
         public int type;
 
-        @JSONField(name="data", ordinal = 2, format = "base64")
+        @JSONField(name = "data", ordinal = 2, format = "base64")
         public byte[] data;
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1821C.java
Patch:
@@ -30,10 +30,10 @@ public void test_for_issue() throws Exception {
 
     @JSONType
     public static class Model {
-        @JSONField(name="type", ordinal = 1)
+        @JSONField(name = "type", ordinal = 1)
         public int type;
 
-        @JSONField(name="data", ordinal = 2, format = "base64")
+        @JSONField(name = "data", ordinal = 2, format = "base64")
         public byte[] data;
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1856.java
Patch:
@@ -21,7 +21,7 @@ public void test_excludes() throws Exception {
     }
 
     public static class VO {
-        private int    id;
+        private int id;
         private String name;
         private String password;
         private String info;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1856C.java
Patch:
@@ -21,7 +21,7 @@ public void test_excludes() throws Exception {
     }
 
     public static class VO {
-        private int    id;
+        private int id;
         private String name;
         private String password;
         private String info;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1879.java
Patch:
@@ -34,7 +34,7 @@ public void test_for_issue_2() throws Exception {
 
     @Test
     public void test_for_issue_2_creators() throws Exception {
-        ObjectReaderCreator[] creators = new ObjectReaderCreator[] {
+        ObjectReaderCreator[] creators = new ObjectReaderCreator[]{
                 ObjectReaderCreator.INSTANCE,
 //                ObjectReaderCreatorLambda.INSTANCE,
 //                ObjectReaderCreatorASM.INSTANCE,
@@ -61,7 +61,7 @@ public static class M1 {
         @JSONCreator
         public M1(@JSONField(name = "ids") String ids) {
             this.ids = new ArrayList<Long>();
-            for(String id : ids.split(",")) {
+            for (String id : ids.split(",")) {
                 this.ids.add(Long.valueOf(id));
             }
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1900/Issue1909.java
Patch:
@@ -50,6 +50,5 @@ public List<Object> getParams() {
     }
 
     public static class Request {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2000/Issue2065.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class Issue2065 {
-
     @Test
     public void test_for_issue() throws Exception {
         Exception error = null;
@@ -47,7 +46,8 @@ public static class Model {
         @JSONField(name = "code")
         private EnumClass code;
 
-        public Model() {}
+        public Model() {
+        }
 
         public EnumClass getCode() {
             return code;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2000/Issue2065C.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class Issue2065C {
-
     @Test
     public void test_for_issue() throws Exception {
         Exception error = null;
@@ -47,7 +46,8 @@ public static class Model {
         @JSONField(name = "code")
         private EnumClass code;
 
-        public Model() {}
+        public Model() {
+        }
 
         public EnumClass getCode() {
             return code;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2200/Issue2249.java
Patch:
@@ -75,8 +75,8 @@ public void test_for_issue_error_1() {
         assertNotNull(error);
     }
 
-    public enum  Type {
-        Big,Small,Medium
+    public enum Type {
+        Big, Small, Medium
     }
 
     public static class Model {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2300/Issue2334.java
Patch:
@@ -22,7 +22,7 @@ public void test_for_issue() {
         JSONObject object = JSON.parseObject(json);
 
         assertEquals("aaa",
-                 JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"));
+                JSONPath.eval(object, "$.EXTINFO.bct_loan_account_status\\[15\\]"));
 
         Object result = JSONPath.extract(json, "$.EXTINFO.bct_loan_account_status\\[15\\]");
         assertEquals("aaa", result.toString());

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2300/Issue2355.java
Patch:
@@ -21,7 +21,6 @@ public void test_for_issue() throws Exception {
     }
 
     static class VO {
-
         @JSONField(serializeFeatures = {JSONWriter.Feature.WriteBigDecimalAsPlain})
         private BigDecimal num;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2300/Issue2358.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class Issue2358 {
-
     @Test
     public void test_for_issue() throws Exception {
         String str = "[{\n" +
@@ -28,7 +27,6 @@ public void test_for_issue() throws Exception {
     }
 
     class TestJson {
-
         private String test1;
         private String test2;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2400/Issue2447.java
Patch:
@@ -10,7 +10,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Issue2447 {
-
     @Test
     public void test_for_issue() {
         VO vo = new VO();
@@ -35,7 +34,6 @@ public void test_for_issue2() {
     }
 
     public static class VO {
-
         @JSONField(ordinal = 1)
         public int id;
 
@@ -55,7 +53,8 @@ public static class Location {
         public int longitude;
         public int latitude;
 
-        public Location() {}
+        public Location() {
+        }
 
         public Location(int longitude, int latitude) {
             this.longitude = longitude;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2700/Issue2721Test.java
Patch:
@@ -13,12 +13,12 @@ public class Issue2721Test {
     public void test2721() {
         String chineseKeyString = "[{\"名称\": \"脆皮青豆\", \"配料\": [\"豌豆\", \"棕榈油\", \"白砂糖\", \"食用盐\", \"玉米淀粉\"]}]";
         assertEquals("[{\"名称\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]",
-                 JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString());
+                JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]").toString());
         // [{"名称":"脆皮青豆","配料":["豌豆","棕榈油","白砂糖","食用盐","玉米淀粉"]}]
 
         String normalKeyString = "[{ \"name\": \"脆皮青豆\", \"配料\": [\"豌豆\", \"棕榈油\", \"白砂糖\", \"食用盐\", \"玉米淀粉\"] }]";
         assertEquals("[{\"name\":\"脆皮青豆\",\"配料\":[\"豌豆\",\"棕榈油\",\"白砂糖\",\"食用盐\",\"玉米淀粉\"]}]",
-                 JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString());
+                JSONPath.extract(normalKeyString, "$[?(@.name = '脆皮青豆')]").toString());
         // [{"name":"脆皮青豆","配料":["豌豆","棕榈油","白砂糖","食用盐","玉米淀粉"]}]
 //
         assertFalse(((List) JSONPath.extract(chineseKeyString, "$[?(@.名称 = '脆皮青豆')]")).isEmpty());

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2900/Issue2903.java
Patch:
@@ -6,7 +6,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Issue2903 {
-
     @Test
     public void test_1() {
         String date1 = "{\"createTime\":\"1570636800000\"}";

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2900/Issue2962.java
Patch:
@@ -20,7 +20,7 @@ public void setUp() {
     }
 
     @AfterEach
-    public void tearDown () {
+    public void tearDown() {
         TimeZone.setDefault(original);
     }
 

File: core/src/test/java/com/alibaba/fastjson2/IgnoreNoneSerializableTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 public class IgnoreNoneSerializableTest {
-
     @Test
     public void test_feature() {
         Bean bean = new Bean();

File: core/src/test/java/com/alibaba/fastjson2/JSONArrayTest.java
Patch:
@@ -980,7 +980,6 @@ public void test_getInstant() {
         assertEquals(instant, JSONArray.of(new Date(millis)).getInstant(0));
     }
 
-
     @Test
     public void test_fluentAdd() {
         JSONArray array = JSONArray.of().fluentAdd("1").fluentAdd(null);
@@ -1354,6 +1353,5 @@ public void test_toList() {
     }
 
     public static class Bean {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest.java
Patch:
@@ -53,7 +53,6 @@ public void test_parse_object_typed_empty() {
         }
     }
 
-
     @Test
     public void test_parse_object_typed_map_str_str() {
         Type[] types = new Type[] {
@@ -616,7 +615,6 @@ public void test_naming() {
         assertEquals(-1, symbolTable.getOrdinalByHashCode(-1));
     }
 
-
     @Test
     public void testWriteInt() {
         int[] values = new int[] {

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest1.java
Patch:
@@ -80,7 +80,6 @@ public void test_0_utf16_reader() {
     void jsonbTest(JSONReader p) {
         Map<String, Object> object = p.readObject();
 
-
         JSONWriter writer = JSONWriter.ofJSONB();
         writer.writeAny(object);
         byte[] bytes = writer.getBytes();

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest4.java
Patch:
@@ -560,7 +560,6 @@ public void test_2_path_16_in() {
         );
     }
 
-
     @Test
     public void test_2_path_17_not_in() {
         JSONPath path = JSONPath.of("$..book[?(@.author not in ('J. R. R. Tolkien', 'Herman Melville'))]");
@@ -840,7 +839,6 @@ public void test_3_path_7() {
                 ).toString()
         );
 
-
         assertEquals(expected,
                 path.extract(
                         JSONReader.ofJSONB(

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest5.java
Patch:
@@ -160,7 +160,6 @@ public void test_3_utf16_le() {
 
     public static class A {
         private A() {
-
         }
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/JSONObjectTest3.java
Patch:
@@ -10,7 +10,6 @@
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
 public class JSONObjectTest3 {
-
     @Test
     public void test0() {
         assertEquals(

File: core/src/test/java/com/alibaba/fastjson2/JSONObjectTest_get_2.java
Patch:
@@ -29,11 +29,11 @@ public void test_get_obj() {
         assertEquals(1001, value.getId());
     }
 
-    public static interface VO {
-        @JSONField()
+    public interface VO {
+        @JSONField
         int getId();
 
-        @JSONField()
+        @JSONField
         void setId(int val);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/JSONPathTest5.java
Patch:
@@ -46,7 +46,6 @@ public static class A {
         public String name;
 
         public A() {
-
         }
 
         public A(int id, String name) {

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStrTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2;
 
-
 import com.alibaba.fastjson2.util.Fnv;
 import org.junit.jupiter.api.Test;
 
@@ -58,7 +57,6 @@ public void test_UUID() {
                 reader.readUUID()
         );
 
-
         assertFalse(
                 reader.nextIfMatch(',')
         );
@@ -73,7 +71,6 @@ public void test_UUID() {
                         .intValue());
     }
 
-
     @Test
     public void test1_str() {
         String str = "\"2022-05-10T11:07Z[UTC]\"";

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterJSONBTest.java
Patch:
@@ -20,7 +20,6 @@ public void test_startArray() {
         }
     }
 
-
     @Test
     public void test_writeRaw() {
         JSONWriter jsonWriter = JSONWriter.ofJSONB();

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterUTF8JDK9Test.java
Patch:
@@ -80,7 +80,6 @@ public void test_writeString_utf82() {
         assertEquals(origin, str);
     }
 
-
     @Test
     public void test_writeString_utf8_3() {
         JSONWriterUTF8JDK9 jsonWriter = new JSONWriterUTF8JDK9(JSONFactory.createWriteContext());

File: core/src/test/java/com/alibaba/fastjson2/OptionalTest.java
Patch:
@@ -13,7 +13,6 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
 public class OptionalTest {
-
     @Test
     public void testOptionalInt() {
         assertEquals(123, JSON.parseObject("123", OptionalInt.class).getAsInt());

File: core/src/test/java/com/alibaba/fastjson2/TypeReferenceTest.java
Patch:
@@ -12,7 +12,6 @@
  * @author kraity
  */
 public class TypeReferenceTest {
-
     @Test
     public void test_parseObject() {
         String text = "{\"id\":1,\"name\":\"kraity\"}";

File: core/src/test/java/com/alibaba/fastjson2/TypeReferenceTest2.java
Patch:
@@ -85,11 +85,12 @@ public void test00() {
         Object[] value = (Object[]) bean.value;
         assertEquals(2, value.length);
         assertEquals(1, ((int[]) ((Object[]) value[0])[0])[0]);
-        assertEquals(2,  ((int[]) ((Object[]) value[1])[0])[0]);
+        assertEquals(2, ((int[]) ((Object[]) value[1])[0])[0]);
     }
 
     public static <T> Bean<T> parse(String str, Type type) {
-        return JSON.parseObject(str, new TypeReference<Bean<T>>(new Type[]{type}) {});
+        return JSON.parseObject(str, new TypeReference<Bean<T>>(new Type[]{type}) {
+        });
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/WriterFeatureTest.java
Patch:
@@ -45,7 +45,5 @@ public void test_0() {
             assertNull(map.get("v0001"));
             assertNotNull(map.get("v0002"));
         }
-
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/annotation/IgnoreErrorGetterTest.java
Patch:
@@ -14,7 +14,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class IgnoreErrorGetterTest {
-
     @Test
     public void test_feature() throws Exception {
         Model model = new Model();
@@ -32,7 +31,6 @@ public void test_feature_lambda() {
     }
 
     public static class Model {
-
         public int getId() {
             throw new IllegalStateException();
         }

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONBuilderTest.java
Patch:
@@ -67,7 +67,6 @@ public String getName() {
 
     @JSONBuilder(buildMethod = "xxx")
     public static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO xxx() {

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONFieldTest.java
Patch:
@@ -63,7 +63,6 @@ public static class VO {
         public long date;
     }
 
-
     public static class VO_Method {
         private long date;
 

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONFieldTest3.java
Patch:
@@ -10,7 +10,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class JSONFieldTest3 {
-
     @Test
     public void test_deciaml_BrowserCompatible() {
         ObjectWriterCreator[] creators = TestUtils.writerCreators();
@@ -56,6 +55,4 @@ public static class VO {
         @JSONField(serializeFeatures = JSONWriter.Feature.BrowserCompatible)
         public BigDecimal value;
     }
-
-
 }

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONFieldTest4.java
Patch:
@@ -12,7 +12,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class JSONFieldTest4 {
-
     @Test
     public void test_2() {
         ObjectReaderCreator[] readerCreators = TestUtils.readerCreators();
@@ -67,6 +66,4 @@ public static class V2 {
         @JSONField(ordinal = 1)
         public int v2;
     }
-
-
 }

File: core/src/test/java/com/alibaba/fastjson2/annotation/JSONFieldTest_defaultValue.java
Patch:
@@ -282,7 +282,6 @@ public static class Bean9 {
         public JSONArray list;
 
         public Bean9() {
-
         }
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicBooleanReadOnlyTest.java
Patch:
@@ -47,7 +47,6 @@ public V0(boolean value){
         public AtomicBoolean getValue() {
             return value;
         }
-
     }
 
     public static class V1 {

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicIntegerArrayFieldTest.java
Patch:
@@ -57,6 +57,5 @@ public AtomicIntegerArray getValue() {
         public void setValue(AtomicIntegerArray value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicLongArrayFieldTest.java
Patch:
@@ -13,7 +13,6 @@ public class AtomicLongArrayFieldTest {
     public void test_codec_null() {
         V0 v = new V0();
 
-
         String text = JSON.toJSONString(v, JSONWriter.Feature.WriteNulls);
         assertEquals("{\"value\":null}", text);
 
@@ -48,6 +47,5 @@ public AtomicLongArray getValue() {
         public void setValue(AtomicLongArray value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/atomic/AtomicLongReadOnlyTest.java
Patch:
@@ -47,7 +47,6 @@ public V0(int value){
         public AtomicLong getValue() {
             return value;
         }
-
     }
 
     public static class V1 {

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest0.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.autoType;
 
-
 import com.alibaba.fastjson2.*;
 import com.alibaba.fastjson2.reader.ObjectReader;
 import com.alibaba.fastjson2.reader.ObjectReaderCreator;
@@ -118,7 +117,6 @@ public void test_jsonb_6() throws Exception {
         assertEquals(16, model.get("v0000"));
     }
 
-
     @Test
     public void test_jsonb_7() throws Exception {
         JSONB.SymbolTable symbolTable = JSONB.symbolTable("@type", "java.util.TreeMap");

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest12.java
Patch:
@@ -1,13 +1,11 @@
 package com.alibaba.fastjson2.autoType;
 
-
 import com.alibaba.fastjson2.JSONB;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.util.Differ;
 import org.junit.jupiter.api.Test;
 
-
 public class AutoTypeTest12 {
     @Test
     public void test_0() throws Exception {

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest16_enums.java
Patch:
@@ -34,7 +34,6 @@ public void test_1() throws Exception {
         assertEquals(bean.values.size(), bean2.values.size());
         assertEquals(bean.values.get(0), bean2.values.get(0));
         assertEquals(bean.values.get(1), bean2.values.get(1));
-
     }
 
     public static class Bean1 {
@@ -59,7 +58,6 @@ public void test_2() throws Exception {
         assertEquals(bean.values.get(0).getClass(), bean2.values.get(0).getClass());
 
         JSONBDump.dump(bytes);
-
     }
 
     public static class Bean2 {

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest16_pairKey.java
Patch:
@@ -71,5 +71,4 @@ public void test_1_jsonb() throws Exception {
     public static class Bean {
         public Map<Pair<Long, Long>, Object> map;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest17.java
Patch:
@@ -72,7 +72,6 @@ public static class Bean2 {
         public Object[] values;
     }
 
-
     @Test
     public void test_3() throws Exception {
         Bean3 bean = new Bean3();

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest20.java
Patch:
@@ -11,8 +11,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-;
-
 public class AutoTypeTest20 {
     @Test
     public void test_1() throws Exception {
@@ -49,7 +47,6 @@ public static enum XItem implements Item {
         A, B, C, D
     }
 
-
     @Test
     public void test_2() throws Exception {
         Bean2 bean = new Bean2();

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest22.java
Patch:
@@ -34,7 +34,7 @@ public static class Bean1 {
         Item item1;
     }
 
-    public abstract static class  Item {
+    public abstract static class Item {
         public int id;
     }
 

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest23.java
Patch:
@@ -33,7 +33,7 @@ public static class Bean1 {
         public Item[] items1;
     }
 
-    public abstract static class  Item {
+    public abstract static class Item {
         public int id;
     }
 
@@ -47,7 +47,7 @@ public XItem(int id) {
     @Test
     public void test_2() throws Exception {
         Bean2 bean = new Bean2();
-        bean.items = new String[] {"a", "b"};
+        bean.items = new String[]{"a", "b"};
         bean.items1 = bean.items;
 
         byte[] bytes = JSONB.toBytes(bean, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ReferenceDetection);

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest24.java
Patch:
@@ -40,6 +40,4 @@ public void test_1() throws Exception {
     public static class Bean1 {
         Set items;
     }
-
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest27.java
Patch:
@@ -181,7 +181,6 @@ public void test_subList() throws Exception {
         assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get());
     }
 
-
     @Test
     public void test_arrayList() throws Exception {
         Bean1 bean = new Bean1();
@@ -206,7 +205,6 @@ public void test_arrayList() throws Exception {
         assertSame(bean.items.stream().findFirst().get(), bean2.items.stream().findFirst().get());
     }
 
-
     public static class Bean1 {
         Collection items;
     }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest31_array.java
Patch:
@@ -72,7 +72,6 @@ public void test_LongArray() throws Exception {
         assertEquals(array[0], array2[0]);
     }
 
-
     @Test
     public void test_LongValueArray() throws Exception {
         long[] array = new long[] {101L};

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest32.java
Patch:
@@ -112,5 +112,4 @@ public static class Bean {
     public static class Item {
         public int id;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest33.java
Patch:
@@ -165,5 +165,4 @@ public static class Bean {
     public static class Item {
         public int id;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest35_Exception.java
Patch:
@@ -48,7 +48,6 @@ public void test_2() throws Exception {
 
         JSONBDump.dump(bytes);
 
-
         Exception error2 = (Exception) JSONB.parseObject(
                 bytes,
                 Object.class,
@@ -59,6 +58,4 @@ public void test_2() throws Exception {
 
         assertNotNull(error2.getStackTrace());
     }
-
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest36_MapAtomicLong.java
Patch:
@@ -74,7 +74,6 @@ public void test_atomic_integer() throws Exception {
         assertEquals(bean.map.get("123").getClass(), bean2.map.get("123").getClass());
     }
 
-
     public static class Bean {
         public Map<String, Object> map;
     }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest41_dupRef.java
Patch:
@@ -82,5 +82,4 @@ public Item(int id) {
             this.id = id;
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest44_customList.java
Patch:
@@ -95,5 +95,4 @@ public void test_hashMap() {
 
         assertEquals(101, map2.get("a"));
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest45_ListNullItem.java
Patch:
@@ -19,7 +19,6 @@ public void test_hashmap_keySet() {
         bean.items.add(null);
         bean.items.add(new Item());
 
-
         byte[] bytes = JSONB.toBytes(bean,
                  JSONWriter.Feature.WriteClassName,
                  JSONWriter.Feature.FieldBased,
@@ -42,7 +41,6 @@ public void test_hashmap_keySet() {
         assertEquals(bean.items.size(), bean2.items.size());
     }
 
-
     public static class Bean {
         List<Item> items;
     }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest46_Pair.java
Patch:
@@ -49,7 +49,6 @@ public void test_1() throws Exception {
                 "\t}\n" +
                 "}", new JSONBDump(bytes, true).toString());
 
-
         Bean bean2 = (Bean) JSONB.parseObject(
                 bytes,
                 Object.class,
@@ -70,6 +69,4 @@ public static class Bean {
         public Pair<String, Boolean> pair1;
         public Pair<String, Boolean> pair2;
     }
-
-
 }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest8.java
Patch:
@@ -94,7 +94,7 @@ public void test_6() {
         byte[] bytes = JSONB.toBytes(bean, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased);
         JSONBDump.dump(bytes);
 
-        ListBean bean2 = (ListBean) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.FieldBased);;
+        ListBean bean2 = (ListBean) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.FieldBased);
         LinkedList list2 = (LinkedList) bean2.values;
         assertEquals(A.class, list2.get(0).getClass());
     }
@@ -110,7 +110,7 @@ public void test_7() {
         byte[] bytes = JSONB.toBytes(bean, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased);
         JSONBDump.dump(bytes);
 
-        ListBean2 bean2 = (ListBean2) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.FieldBased);;
+        ListBean2 bean2 = (ListBean2) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.FieldBased);
         com.alibaba.fastjson.JSONArray list2 = (com.alibaba.fastjson.JSONArray) bean2.values;
         assertEquals(A.class, list2.get(0).getClass());
     }

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest9.java
Patch:
@@ -44,7 +44,6 @@ public static class Bean2 {
         Set<Long> values;
     }
 
-
     @Test
     public void test_3() {
         Bean3 bean = new Bean3();
@@ -93,7 +92,6 @@ public void test_4_1() {
 
     public static class Bean4 {
         java.util.ArrayList values;
-
     }
 
     @Test
@@ -119,5 +117,4 @@ public void test_5() {
     public static class Bean5 {
         com.alibaba.fastjson.JSONObject values;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/codec/ExceptionTest.java
Patch:
@@ -10,7 +10,6 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
-
 public class ExceptionTest {
     @Test
     public void test_exception() throws Exception {

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest2.java
Patch:
@@ -114,7 +114,6 @@ public void test_d() {
         assertFalse(d1.list2.get(0) instanceof Item);
     }
 
-
     public static class A {
         public ArrayList list0;
         public JSONArray list1;

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest4.java
Patch:
@@ -90,7 +90,6 @@ public void test_d() {
 //        assertEquals(JSON.toJSONString(a), JSON.toJSONString(a1));
     }
 
-
     @Test
     public void test_b10() {
         B10 a = new B10();

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest5.java
Patch:
@@ -62,6 +62,5 @@ public static class B {
         public B(JSONObject values) {
             this.values = values;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest7.java
Patch:
@@ -21,7 +21,7 @@ public void test_0() {
         byte[] bytes = JSONB.toBytes(list, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased);
         System.out.println(JSON.toJSONString(JSONB.parse(bytes, JSONReader.Feature.SupportAutoType)));
 
-        List list2 = (List) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.FieldBased);;
+        List list2 = (List) JSONB.parseObject(bytes, Object.class, JSONReader.Feature.SupportAutoType, JSONReader.Feature.FieldBased);
         assertEquals(list2.size(), list.size());
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/codec/RefTest3.java
Patch:
@@ -46,7 +46,6 @@ public void test_ref_0_creators() {
             A a1 = JSONB.parseObject(bytes, A.class);
             assertSame(a1, a1.ref);
         }
-
     }
 
     public static class A {

File: core/src/test/java/com/alibaba/fastjson2/codec/RefTest4.java
Patch:
@@ -28,16 +28,16 @@ public void test_ref_0() {
         A a2 = JSONB.parseObject(bytes, 0, bytes.length, A.class, JSONReader.Feature.SupportAutoType);
         assertSame(a2, a2.values.get(0));
 
-        A a3 = JSONB.parseObject(bytes, 0, bytes.length, (Type)A.class, JSONReader.Feature.SupportAutoType);
+        A a3 = JSONB.parseObject(bytes, 0, bytes.length, (Type) A.class, JSONReader.Feature.SupportAutoType);
         assertSame(a3, a3.values.get(0));
 
-        A a4 = JSONB.parseObject(bytes, 0, bytes.length, (Type)A.class, JSONB.symbolTable(""));
+        A a4 = JSONB.parseObject(bytes, 0, bytes.length, (Type) A.class, JSONB.symbolTable(""));
         assertSame(a4, a4.values.get(0));
 
         A a5 = JSONB.parseObject(bytes, 0, bytes.length, A.class, JSONB.symbolTable(""), JSONReader.Feature.SupportAutoType);
         assertSame(a5, a5.values.get(0));
 
-        A a6 = JSONB.parseObject(bytes, 0, bytes.length, (Type)A.class, JSONB.symbolTable(""), JSONReader.Feature.SupportAutoType);
+        A a6 = JSONB.parseObject(bytes, 0, bytes.length, (Type) A.class, JSONB.symbolTable(""), JSONReader.Feature.SupportAutoType);
         assertSame(a6, a6.values.get(0));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/codec/SkipTest.java
Patch:
@@ -47,7 +47,6 @@ public static class A {
         public int id;
     }
 
-
     private static class A1 {
         public int id;
     }

File: core/src/test/java/com/alibaba/fastjson2/codec/UnicodeClassNameTest.java
Patch:
@@ -5,7 +5,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 public class UnicodeClassNameTest {
     @Test
     public void test_0() throws Exception {

File: core/src/test/java/com/alibaba/fastjson2/codec/WriteMapTest.java
Patch:
@@ -28,5 +28,4 @@ public void test_singletonMap() {
     public void test_unmodifiableMap() {
         assertEquals("{}", JSON.toJSONString(Collections.unmodifiableMap(new HashMap<>())));
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/date/SqlDateTest.java
Patch:
@@ -52,7 +52,6 @@ public static class Student2 {
         public java.sql.Date birthday;
     }
 
-
     @Test
     public void test3() {
         long millis = System.currentTimeMillis();

File: core/src/test/java/com/alibaba/fastjson2/date/SqlTimestampTest.java
Patch:
@@ -61,7 +61,6 @@ public static class Student2 {
         public java.sql.Timestamp birthday;
     }
 
-
     @Test
     public void test3() {
         long millis = System.currentTimeMillis();

File: core/src/test/java/com/alibaba/fastjson2/eishay/ParserTest.java
Patch:
@@ -133,7 +133,6 @@ public void test_1_jsonb_2() {
         JSONReader jr = JSONReader.of(utf8Bytes);
         MediaContent o = jr.read(MediaContent.class);
 
-
         byte[] jsonbBytes = JSONB
                 .toBytes(
                         o,

File: core/src/test/java/com/alibaba/fastjson2/features/ListRefTest.java
Patch:
@@ -53,6 +53,5 @@ public static class Bean {
     }
 
     public static class Item {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/internal/trove/TLongIntHashMapTest.java
Patch:
@@ -36,5 +36,4 @@ public void test_1() {
             assertEquals(0, map.get(value));
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Canal_Issue4186.java
Patch:
@@ -51,7 +51,6 @@ public void testJSONB() {
     @Test
     public void test1() {
         Position position = new Position() {
-
         };
 
         String jsonString = JSON.toJSONString(position, JSONWriter.Feature.WriteClassName);
@@ -62,10 +61,8 @@ public void test1() {
 
     public static abstract class Position
             implements Serializable {
-
     }
 
     public static class EntryPosition extends Position {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue117.java
Patch:
@@ -22,6 +22,5 @@ public void test() {
 
         System.out.println(times);
 
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue225.java
Patch:
@@ -19,7 +19,6 @@ public void test() {
         assertEquals(1, jsonObject.size());
         assertEquals(101, jsonObject.get("item_id"));
 
-
         jsonObject.nameFilter(
                 (Object object, String name, Object value) -> null
         );

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue236.java
Patch:
@@ -15,5 +15,4 @@ public void test() {
         assertNotNull(testJson.getJSONObject("result"));
         assertNull(testJson.getJSONObject("result2"));
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue239.java
Patch:
@@ -87,7 +87,6 @@ public static class Point1 {
         @JSONField(schema = "{'minimum':-180,'maximum':180}")
         public double longitude;
 
-
         @JSONField(schema = "{'minimum':-90,'maximum':90}")
         public double latitude;
     }
@@ -118,7 +117,6 @@ public static class Point2 {
         @JSONField(schema = "{'minimum':-180,'maximum':180}")
         public float longitude;
 
-
         @JSONField(schema = "{'minimum':-90,'maximum':90}")
         public float latitude;
     }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue261.java
Patch:
@@ -87,7 +87,6 @@ public void test0() {
                 .getObject("datetime", java.sql.Date.class)
         );
 
-
         assertNull(
                 JSON.parseObject("\"\"", java.sql.Timestamp.class));
         assertNull(JSON.parseObject("\"null\"", java.sql.Timestamp.class));

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue27.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.issues;
 
-
 import com.alibaba.fastjson2.JSON;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue274.java
Patch:
@@ -27,7 +27,6 @@ public void test() {
         assertEquals("1", bean2.roleList.get(0));
         assertEquals(null, bean2.roleList.get(1));
 
-
         Bean bean3 = JSON
                 .parseObject("{\"roleList\": [1,\"2\"]}")
                 .to(Bean.class);

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue316.java
Patch:
@@ -34,7 +34,6 @@ public void getArray() {
         assertEquals("2", array[1]);
     }
 
-
     @Test
     public void getList() {
         JSONObject object = JSON.parseObject("{\"values\":[1,\"2\"]}");

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue367.java
Patch:
@@ -10,7 +10,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class Issue367 {
-
     @Test
     public void test0() {
         String text = "{\"name\":\"123\",\"age\":3,\"subDTO\":{\"id\":\"222\",\"thiDTO\":{\"h\":\"444\"}}}";
@@ -39,7 +38,6 @@ public void test1() {
     @AllArgsConstructor
     @NoArgsConstructor
     public static class TestDTO {
-
         private String name;
         private int age;
         private SubDTO subDTO = new SubDTO();

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue87.java
Patch:
@@ -59,7 +59,6 @@ public void valid_raw_str_1() {
         assertTrue(valid);
     }
 
-
     @Test
     public void valid_utf8() {
         byte[] errorJson = "[{\"a\":1}{\"b\":2}null undefined 676]".getBytes(StandardCharsets.UTF_8);

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue9.java
Patch:
@@ -25,7 +25,6 @@ public static class Product {
         public String name;
     }
 
-
     @Test
     public void test_ordinal_1x() {
         B b = new B();

File: core/src/test/java/com/alibaba/fastjson2/jackson_support/JacksonJsonAnyGetterTest.java
Patch:
@@ -29,6 +29,5 @@ public ExtendableBean(String name) {
         public Map<String, String> getProperties() {
             return properties;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jackson_support/JacksonJsonCreatorTest.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class JacksonJsonCreatorTest {
-
     @Test
     public void test() {
         String json = "{\"id\":1,\"theName\":\"My bean\"}";

File: core/src/test/java/com/alibaba/fastjson2/joda/LocalDateTimeTest.java
Patch:
@@ -27,7 +27,6 @@ public void test_0_jsonb() throws Exception {
 
         JSONBDump.dump(bytes);
 
-
         LocalDateTime date2 = (LocalDateTime) JSONB.parseObject(
                 bytes,
                 Object.class,
@@ -82,7 +81,6 @@ public void test_2_jsonb() throws Exception {
 
         JSONBDump.dump(bytes);
 
-
         LocalDateTime date2 = (LocalDateTime) JSONB.parseObject(
                 bytes,
                 Object.class,

File: core/src/test/java/com/alibaba/fastjson2/jsonb/TransientTest.java
Patch:
@@ -12,7 +12,6 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class TransientTest {
-
     @Test
     public void test_for_transient() {
         Bean bean = new Bean();
@@ -47,7 +46,6 @@ public void test_for_transient() {
         assertNotNull(target2.getAtomicBoolean());
     }
 
-
     public static class Bean
             implements Serializable {
         private transient AtomicBoolean atomicBoolean = new AtomicBoolean(false);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONExtractScalarTest.java
Patch:
@@ -36,7 +36,6 @@ public void test_extract_StartTime() throws Exception {
                  result.toString());
     }
 
-
     @Test
     public void test_extract_Duration() throws Exception {
         JSONExtractScalar udf = new JSONExtractScalar("$.Duration");
@@ -45,5 +44,4 @@ public void test_extract_Duration() throws Exception {
         assertEquals("450",
                  result.toString());
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathJSONBTest2.java
Patch:
@@ -30,7 +30,6 @@ public void test_0() throws Exception {
         JSONReader parser = JSONReader.ofJSONB(jsonbBytes);
         Object result = path.extract(parser);
         assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result);
-
     }
 
     @Test
@@ -39,6 +38,5 @@ public void test_1() throws Exception {
         JSONReader parser = JSONReader.ofJSONB(jsonbBytes);
         Object result = path.extract(parser);
         assertEquals(Arrays.asList("Nigel Rees", "Evelyn Waugh", "Herman Melville", "J. R. R. Tolkien"), result);
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest2.java
Patch:
@@ -205,5 +205,4 @@ public void test_x1() {
 
         assertEquals(4, path.eval(rootObject));
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest3.java
Patch:
@@ -44,7 +44,6 @@ public void test_length() {
                         .eval(values));
     }
 
-
     @Test
     public void test_isRef() {
         assertFalse(JSONPath

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest4.java
Patch:
@@ -17,7 +17,6 @@ public void test_set_int_0() {
                 .setInt(vo, 11);
         assertEquals(11, vo.v1);
 
-
         JSONPath.of("$.v2")
                 .setInt(vo, 12);
         assertEquals(12, vo.v2.byteValue());
@@ -38,7 +37,6 @@ public void test_set_1() {
                 .set(vo, 11);
         assertEquals(11, vo.v1);
 
-
         JSONPath.of("$.v2")
                 .set(vo, 12);
         assertEquals(12, vo.v2.byteValue());
@@ -59,7 +57,6 @@ public void test_set_long_0() {
                 .setLong(vo, 11);
         assertEquals(11, vo.v1);
 
-
         JSONPath.of("$.v2")
                 .setLong(vo, 12);
         assertEquals(12, vo.v2.byteValue());

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest5.java
Patch:
@@ -17,7 +17,6 @@ public void test_set_int_0() {
                 .setInt(vo, 11);
         assertEquals(11, vo.v1);
 
-
         JSONPath.of("$.v2")
                 .setInt(vo, 12);
         assertEquals(12, vo.v2.byteValue());
@@ -38,7 +37,6 @@ public void test_set_1() {
                 .set(vo, 11);
         assertEquals(11, vo.v1);
 
-
         JSONPath.of("$.v2")
                 .set(vo, 12);
         assertEquals(12, vo.v2.byteValue());
@@ -59,7 +57,6 @@ public void test_set_long_0() {
                 .setLong(vo, 11);
         assertEquals(11, vo.v1);
 
-
         JSONPath.of("$.v2")
                 .setLong(vo, 12);
         assertEquals(12, vo.v2.byteValue());

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/TestSpecial_0.java
Patch:
@@ -8,7 +8,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 public class TestSpecial_0 {
     @Test
     public void test_special() {
@@ -18,5 +17,4 @@ public void test_special() {
 
         assertEquals((Integer) vo.get("a.b"), (Integer) JSONPath.eval(vo, "a\\.b"));
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/TestSpecial_1.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class TestSpecial_1 {
-
     @Test
     public void test_special() {
         String x = "{\"10.0.0.1\":{\"region\":\"xxx\"}}";
@@ -18,5 +17,4 @@ public void test_special() {
         assertTrue(JSONPath.contains(o, "$.10\\.0\\.0\\.1.region"));
         assertEquals("xxx", JSONPath.eval(o, "$.10\\.0\\.0\\.1.region"));
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/TestSpecial_3.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class TestSpecial_3 {
-
     @Test
     public void test_special() {
         String json = "[{\"@type\":\"NAME_CORRECTION\",\"value\":23}]";

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/TestSpecial_4.java
Patch:
@@ -15,5 +15,4 @@ public void test_special() {
         Object obj = JSONPath.eval(object, "$.大小");
         assertEquals(123, obj);
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/mixins/MixinAPITest1.java
Patch:
@@ -40,4 +40,3 @@ public void test_mixIn_get_methods() throws Exception {
         assertEquals(base.b, base2.b);
     }
 }
-

File: core/src/test/java/com/alibaba/fastjson2/mixins/MixinAPITest2.java
Patch:
@@ -42,4 +42,3 @@ public void test_mixIn_get_methods() throws Exception {
         assertEquals(base.b, base2.b);
     }
 }
-

File: core/src/test/java/com/alibaba/fastjson2/mixins/MixinAPITest3.java
Patch:
@@ -42,4 +42,3 @@ public void test_mixIn_get_methods() throws Exception {
         assertEquals(base.b, base2.b);
     }
 }
-

File: core/src/test/java/com/alibaba/fastjson2/mixins/MixinAPITest4.java
Patch:
@@ -7,7 +7,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 public class MixinAPITest4 {
     static class BaseClass {
         public final int a;
@@ -48,4 +47,3 @@ public void test_mixIn_get_methods() throws Exception {
         assertEquals(base.b, base2.b);
     }
 }
-

File: core/src/test/java/com/alibaba/fastjson2/mixins/MixinTest5.java
Patch:
@@ -24,7 +24,7 @@ public static class Product {
     }
 
     public abstract class ProductMixin {
-        @JSONField(name =  "productName")
+        @JSONField(name = "productName")
         String name;
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/primitves/ArrayNumberTest.java
Patch:
@@ -136,7 +136,6 @@ public void test_array_int() {
                         .read(array.getClass())));
     }
 
-
     @Test
     public void test_array_int_dim2() {
         int[][] array = new int[][] {{0, 1, 2, 3, 4}, {5, 6}, {7, 8}};
@@ -151,7 +150,6 @@ public void test_array_int_dim2() {
             assertTrue(
                     Arrays.equals(array[i], array2[i]));
         }
-
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigDecimalTest.java
Patch:
@@ -139,7 +139,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[] {
@@ -258,7 +257,6 @@ public void test_jsonpath() {
         }
     }
 
-
     @Test
     public void test_bool_true() {
         byte[] jsonbBytes = JSONB.toBytes(Collections.singletonMap("id", true));
@@ -279,5 +277,4 @@ public void test_decimal_4() {
         BigDecimal1 vo = JSONB.parseObject(jsonbBytes, BigDecimal1.class);
         assertEquals(new BigDecimal("638860.1"), vo.getId());
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/primitves/BigIntegerTest.java
Patch:
@@ -126,7 +126,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[] {

File: core/src/test/java/com/alibaba/fastjson2/primitves/BooleanTest.java
Patch:
@@ -165,7 +165,6 @@ public void test_array_boolean() {
                         .read(array.getClass())));
     }
 
-
     @Test
     public void test_array_dim2() {
         boolean[][] array = new boolean[][] {{true, false, true}, {false, true}, {true, false}};

File: core/src/test/java/com/alibaba/fastjson2/primitves/ByteTest.java
Patch:
@@ -191,7 +191,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/CharacterWriteTest.java
Patch:
@@ -16,7 +16,6 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class CharacterWriteTest {
-
     @Test
     public void test_array_char() {
         char[] array = new char[]{'a', 'b', 'c'};

File: core/src/test/java/com/alibaba/fastjson2/primitves/DecimalTest.java
Patch:
@@ -36,7 +36,6 @@ public void test_field_null_str() {
                         jsonWriter.toString());
             }
         }
-
     }
 
     @Test
@@ -85,5 +84,4 @@ public void test_BrowserCompatible_utf8() {
                  new String(
                         JSON.toJSONBytes(decimal, JSONWriter.Feature.BrowserCompatible)));
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/primitves/DoubleTest.java
Patch:
@@ -139,7 +139,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/DoubleValueFieldTest.java
Patch:
@@ -166,7 +166,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/DoubleValueTest.java
Patch:
@@ -166,7 +166,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/FloatTest.java
Patch:
@@ -136,7 +136,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/FloatValueFieldTest.java
Patch:
@@ -66,5 +66,4 @@ public void test_1() throws Exception {
             }
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/primitves/FloatValueTest.java
Patch:
@@ -156,7 +156,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/Int100Test.java
Patch:
@@ -11,13 +11,11 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Int100Test {
-
     @Test
     public void test_jsonpath() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-
             JSONReader.Context readContext
                     = new JSONReader.Context(
                     new ObjectReaderProvider(creator));

File: core/src/test/java/com/alibaba/fastjson2/primitves/IntTest.java
Patch:
@@ -105,7 +105,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{
@@ -196,8 +195,6 @@ public void test_jsonpath() {
         ObjectReaderCreator[] creators = TestUtils.readerCreators();
 
         for (ObjectReaderCreator creator : creators) {
-
-
             JSONReader.Context readContext
                     = new JSONReader.Context(
                     new ObjectReaderProvider(creator));

File: core/src/test/java/com/alibaba/fastjson2/primitves/IntegerTest.java
Patch:
@@ -185,7 +185,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/JSONBSizeTest.java
Patch:
@@ -315,7 +315,6 @@ public void test_float() throws Exception {
             Assertions.assertEquals(Float.toString(val), JSONB.parseObject(bytes, String.class));
         }
 
-
         float[] values_4 = new float[]{
                 -2049, -4096, -8192, -16384, -32768, -65536, -131072, -262144,
                 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262143
@@ -459,7 +458,6 @@ public void test_double() throws Exception {
             Assertions.assertEquals(Double.toString(val), JSONB.parseObject(bytes, String.class));
         }
 
-
         double[] values_6 = new double[]{
                 -262145, Integer.MIN_VALUE, 262144, Integer.MAX_VALUE
         };

File: core/src/test/java/com/alibaba/fastjson2/primitves/List1Test.java
Patch:
@@ -110,7 +110,6 @@ public void test_list() {
             assertEquals(1, vo.getV0000().size());
             assertEquals(Integer.valueOf(1001), vo.getV0000().get(0));
         }
-
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/primitves/LocalDateTest.java
Patch:
@@ -114,7 +114,6 @@ public void test_str_5_utf8() {
         assertEquals(11, vo.getDate().getDayOfMonth());
     }
 
-
     @Test
     public void test_str_6() {
         String str = "\r\t\b\f {\"date\":\"2021-2-1\"}";

File: core/src/test/java/com/alibaba/fastjson2/primitves/LocalDateTimeTest.java
Patch:
@@ -268,7 +268,6 @@ public void test_str_5_utf8() {
         assertEquals(11, vo.getDate().getDayOfMonth());
     }
 
-
     @Test
     public void test_str_6() {
         String str = "{\"date\":\"2021-2-1\"}";

File: core/src/test/java/com/alibaba/fastjson2/primitves/LongTest.java
Patch:
@@ -207,7 +207,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/OptinalLongTest.java
Patch:
@@ -36,7 +36,6 @@ public void test_empty() {
         assertEquals(str, str2);
     }
 
-
     @Test
     public void test_enpty_jsonb() {
         byte[] bytes = JSONB.toBytes(Collections.singletonMap("value", null), JSONWriter.Feature.WriteNulls);

File: core/src/test/java/com/alibaba/fastjson2/primitves/ShortTest.java
Patch:
@@ -142,7 +142,6 @@ public void test_jsonb_value_cast() {
         }
     }
 
-
     @Test
     public void test_jsonb_value_cast_str() {
         Number[] values = new Number[]{

File: core/src/test/java/com/alibaba/fastjson2/primitves/UUIDTest.java
Patch:
@@ -72,7 +72,6 @@ public void test_ascii() {
         }
     }
 
-
     @Test
     public void test_2() {
         {
@@ -106,7 +105,6 @@ public void test_creators() {
         for (ObjectWriterCreator creator : creators) {
             ObjectWriter objectWriter = creator.createObjectWriter(UUIDFIeld2.class);
 
-
             {
                 UUIDFIeld2 vo = new UUIDFIeld2();
                 vo.v0000 = UUID.fromString("d9ac58be-c854-496b-b550-56f0b773d241");

File: core/src/test/java/com/alibaba/fastjson2/primitves/UUIDTest2.java
Patch:
@@ -69,5 +69,4 @@ public void test_ascii() {
             assertEquals(vo.getId(), v1.getId());
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/primitves/UUIDTest3.java
Patch:
@@ -73,5 +73,4 @@ public void test_ascii() {
             assertEquals(vo.getId(), v1.getId());
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/primitves/ZoneIdTest.java
Patch:
@@ -31,5 +31,4 @@ public void test_local_jsonb() {
         ZoneId1 v2 = JSONB.parseObject(jsonbBytes, ZoneId1.class);
         assertEquals(vo.getV0000(), v2.getV0000());
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/read/BigIntTest.java
Patch:
@@ -74,7 +74,6 @@ public void test_json_bigint_1_negative() throws Exception {
         assertEquals(-123456789012345678L, id);
     }
 
-
     @Test
     public void test_json_bigint_2_negative() throws Exception {
         String str = "-12345678901234567890";
@@ -148,7 +147,6 @@ public void test_bigInt_3() throws Exception {
         assertEquals(mag3, -350287150);
     }
 
-
     @Test
     public void test_bigInt_4() throws Exception {
         String str = "-1.2345678901234567890";
@@ -310,7 +308,6 @@ void bigInt(char[] chars, int sign, int scale, int off, int len) {
         }
     }
 
-
     //int[] mag = new int[] {mag0, mag1, mag2, mag3};
     private int firstNonzeroIntNum(int[] mag) {
         for (int i = mag.length - 1, j = 0; i >= 0; i--, j++) {

File: core/src/test/java/com/alibaba/fastjson2/read/ParserTest.java
Patch:
@@ -72,5 +72,4 @@ void lexerTest(JSONReader lexer) {
         lexer.next();
         assertEquals(0x1A, lexer.current());
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/read/ParserTest_bigInt.java
Patch:
@@ -14,7 +14,6 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
-
 public class ParserTest_bigInt {
     String str = " { \n" +
             "     \"id\" : 123456789 ,\n" +

File: core/src/test/java/com/alibaba/fastjson2/schema/JSONSchemaResourceTest.java
Patch:
@@ -171,7 +171,6 @@ public void test_draft2020_uniqueItems() {
         runTest("schema/draft2020-12/uniqueItems.json");
     }
 
-
     public void runTest(String path) {
         URL url = JSONSchemaResourceTest.class.getClassLoader().getResource(path);
         JSONArray array = JSON.parseArray(url);
@@ -193,7 +192,6 @@ private void validate(JSONArray array, int i) {
             throw new IllegalStateException("parse schema " + i + " error : " + object, ex);
         }
 
-
         JSONArray tests = item.getJSONArray("tests");
         for (int j = 0; j < tests.size(); j++) {
             validate(i, j, object, schema, tests);

File: core/src/test/java/com/alibaba/fastjson2/schema/JSONSchemaTest.java
Patch:
@@ -869,7 +869,6 @@ public void testObject3() {
                 .isValid(jsonSchema)
         );
 
-
         assertTrue(JSON
                 .parseObject("{ \"number\": 1600, \"street_name\": \"Pennsylvania\", \"street_type\": \"Avenue\", \"direction\": \"NW\" }")
                 .isValid(jsonSchema));
@@ -1311,7 +1310,6 @@ public void test_dependentSchemas0() {
         );
     }
 
-
     public static class Bean3 {
         @JSONField(name = "street_address")
         public String streetAddress;
@@ -1322,7 +1320,6 @@ public static class Bean3 {
         public String postalCode;
     }
 
-
     @Test
     public void test_if0() {
         JSONSchema jsonSchema = JSONSchema.parseSchema("{\n" +

File: core/src/test/java/com/alibaba/fastjson2/schema/JSONSchemaTest2.java
Patch:
@@ -346,7 +346,6 @@ public static class Bean19 {
         public int[] value;
     }
 
-
     @Test
     public void test20() {
         JSON.parseObject("{\"value\":true}", Bean20.class);

File: core/src/test/java/com/alibaba/fastjson2/schema/JSONSchemaTest3.java
Patch:
@@ -417,7 +417,6 @@ public void setValue(AtomicInteger value) {
         }
     }
 
-
     @Test
     public void test16() {
         JSON.parseObject("{\"value\":[1,2,3]}", Bean16.class);

File: core/src/test/java/com/alibaba/fastjson2/util/TypeConvertTest.java
Patch:
@@ -45,7 +45,6 @@ public void test_0() {
         assertNull(provider.getTypeConvert(String.class, Integer.class).apply(null));
         assertNull(provider.getTypeConvert(String.class, Long.class).apply(null));
 
-
         assertEquals(1, provider.getTypeConvert(String.class, Integer.class).apply("1"));
         assertEquals(1L, provider.getTypeConvert(String.class, Long.class).apply("1"));
     }

File: core/src/test/java/com/alibaba/fastjson2/util/TypeUtilsTest.java
Patch:
@@ -31,7 +31,6 @@ public void test_0() {
         assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((short) 0));
         assertEquals(Byte.valueOf((byte) 0), TypeUtils.toByte((byte) 0));
 
-
         assertNull(TypeUtils.toDouble(null));
         assertNull(TypeUtils.toDouble(""));
         assertNull(TypeUtils.toDouble("null"));
@@ -51,7 +50,6 @@ public void test_0() {
         assertEquals(0D, TypeUtils.toDouble((short) 0));
         assertEquals(0D, TypeUtils.toDouble((byte) 0));
 
-
         assertNull(TypeUtils.toFloat(null));
         assertNull(TypeUtils.toFloat(""));
         assertNull(TypeUtils.toFloat("null"));
@@ -88,7 +86,6 @@ public void test_0() {
         assertEquals(0, TypeUtils.toShortValue((short) 0));
         assertEquals(Short.valueOf((short) 0), TypeUtils.toShort((short) 0));
 
-
         assertNull(TypeUtils.toInteger(null));
         assertNull(TypeUtils.toInteger(""));
         assertNull(TypeUtils.toInteger("null"));

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BigDecimalFieldTest.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BigDecimalFieldTest {
-
     @Test
     public void test_codec_null() throws Exception {
         V0 v = new V0();
@@ -30,7 +29,6 @@ public void test_codec_null_1() throws Exception {
     }
 
     public static class V0 {
-
         private BigDecimal value;
 
         public BigDecimal getValue() {
@@ -40,6 +38,5 @@ public BigDecimal getValue() {
         public void setValue(BigDecimal value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BigIntegerFieldTest.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BigIntegerFieldTest {
-
     @Test
     public void test_codec_null() throws Exception {
         V0 v = new V0();
@@ -31,7 +30,6 @@ public void test_codec_null_1() throws Exception {
     }
 
     public static class V0 {
-
         private BigInteger value;
 
         public BigInteger getValue() {
@@ -41,6 +39,5 @@ public BigInteger getValue() {
         public void setValue(BigInteger value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BooleanArrayFieldTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BooleanArrayFieldTest {
-
     @Test
     public void test_codec_null() throws Exception {
         V0 v = new V0();
@@ -29,7 +28,6 @@ public void test_codec_null_1() throws Exception {
     }
 
     public static class V0 {
-
         private Boolean[] value;
 
         public Boolean[] getValue() {
@@ -39,6 +37,5 @@ public Boolean[] getValue() {
         public void setValue(Boolean[] value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BooleanArrayFieldTest_primitive.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BooleanArrayFieldTest_primitive {
-
     @Test
     public void test_array() throws Exception {
         assertEquals("[true]", JSON.toJSONString(new boolean[] { true }));
@@ -41,7 +40,6 @@ public void test_codec_null_1() throws Exception {
     }
 
     public static class V0 {
-
         private boolean[] value;
 
         public boolean[] getValue() {
@@ -51,6 +49,5 @@ public boolean[] getValue() {
         public void setValue(boolean[] value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/BooleanArrayFieldTest_primitive_private.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BooleanArrayFieldTest_primitive_private {
-
     @Test
     public void test_array() throws Exception {
         assertEquals("[true]", JSON.toJSONString(new boolean[] { true }));
@@ -42,7 +41,6 @@ public void test_codec_null_1() throws Exception {
     }
 
     private static class V0 {
-
         private boolean[] value;
 
         public boolean[] getValue() {
@@ -52,6 +50,5 @@ public boolean[] getValue() {
         public void setValue(boolean[] value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_4.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ByteArrayFieldTest_4 {
-
     @Test
     public void test_0() throws Exception {
         Model model = new Model();
@@ -25,10 +24,8 @@ public void test_0() throws Exception {
     }
 
     private static class Model {
-
         @JSONField(format = "hex")
         public byte[] value;
 
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_5_base64.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ByteArrayFieldTest_5_base64 {
-
     @Test
     public void test_0() throws Exception {
         Model model = new Model();
@@ -24,10 +23,8 @@ public void test_0() throws Exception {
     }
 
     private static class Model {
-
         @JSONField(format = "base64")
         public byte[] value;
 
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_6_gzip.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 
 public class ByteArrayFieldTest_6_gzip {
-
     @Test
     public void test_0() throws Exception {
         Model model = new Model();

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_7_gzip_hex.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 
 public class ByteArrayFieldTest_7_gzip_hex {
-
     @Test
     public void test_0() throws Exception {
         Model model = new Model();
@@ -27,10 +26,8 @@ public void test_0() throws Exception {
     }
 
     private static class Model {
-
         @JSONField(format = "gzip,base64")
         public byte[] value;
 
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteFieldTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ByteFieldTest {
-
     @Test
     public void test_codec() throws Exception {
         V0 v = new V0();
@@ -58,7 +57,6 @@ public void test_codec_null_1() throws Exception {
     }
 
     public static class V0 {
-
         private Byte value;
 
         public Byte getValue() {
@@ -68,6 +66,5 @@ public Byte getValue() {
         public void setValue(Byte value) {
             this.value = value;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/Issue1189.java
Patch:
@@ -27,7 +27,6 @@ private static class JsonBean {
         private String headernotificationtype;
         private String notificationType;
 
-
         public Map<String, String> getBody() {
             return body;
         }
@@ -83,6 +82,5 @@ public JsonBean() {
             super();
             // TODO Auto-generated constructor stub
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/Issue1233.java
Patch:
@@ -28,12 +28,10 @@ public void test_for_issue() throws Exception {
 
     @JSONType(seeAlso = {FloorV2.class}, typeKey = "type")
     public interface AreaMixIn {
-
     }
 
     @JSONType(typeName = "floorV2")
     public interface FloorV2MixIn {
-
     }
 
     public interface Area {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/Issue1344.java
Patch:
@@ -20,15 +20,12 @@ public void test_for_issue() throws Exception {
 
     public static class TestException
             extends Exception {
-
         @JSONCreator
         public TestException() {
-
         }
 
         public TestException(String data) {
             super("Data : " + data);
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONArrayTest2.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class JSONArrayTest2 {
-
     @Test
     public void test_0() throws Exception {
         long time = System.currentTimeMillis();

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONObjectTest3.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class JSONObjectTest3 {
-
     @Test
     public void test_0() {
         String text = "{'value':'123','big':false}";
@@ -152,7 +151,6 @@ public void test_error_8() {
     }
 
     public interface Bean {
-
         String getValue();
 
         void setValue(String value);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONObjectTest3C.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class JSONObjectTest3C {
-
     @Test
     public void test_0() {
         String text = "{'value':'123','big':false}";
@@ -152,7 +151,6 @@ public void test_error_8() {
     }
 
     public interface Bean {
-
         String getValue();
 
         void setValue(String value);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONObjectTest_getObj.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.v1issues;
 
-
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.TypeReference;
@@ -13,7 +12,6 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class JSONObjectTest_getObj {
-
     @Test
     public void test_get_empty() throws Exception {
         JSONObject obj = new JSONObject();
@@ -49,6 +47,5 @@ public void test_get_obj2() throws Exception {
     }
 
     public static class Model {
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/JSONObjectTest_getObj_2.java
Patch:
@@ -10,7 +10,6 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class JSONObjectTest_getObj_2 {
-
     @Test
     public void test_get_empty() {
         JSONObject obj = new JSONObject();
@@ -25,7 +24,6 @@ public void test_get_empty() {
     }
 
     public static class Model {
-
     }
 
     public static <T> Type getType() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/DoubleNullTest.java
Patch:
@@ -52,7 +52,6 @@ public void test_null_array() {
     }
 
 
-
     public static class Model {
         public Double v1;
         public Double v2;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/DoubleTest3_random.java
Patch:
@@ -103,7 +103,6 @@ public static class Model {
         public double value;
 
         public Model() {
-
         }
 
         public Model(double value) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/FloatTest3_array_random.java
Patch:
@@ -42,7 +42,6 @@ public static class Model {
         public float[] value;
 
         public Model() {
-
         }
 
         public Model(float[] value) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/basicType/FloatTest3_random.java
Patch:
@@ -74,7 +74,6 @@ public static class Model {
         public float value;
 
         public Model() {
-
         }
 
         public Model(float value) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest0.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest0 {
-
     @Test
     public void test_0() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
@@ -31,7 +30,6 @@ public String getName() {
     }
 
     public static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO build() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest0_private.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest0_private {
-
     @Test
     public void test_0() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest1.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest1 {
-
     @Test
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
@@ -31,7 +30,6 @@ public String getName() {
     }
 
     public static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO create() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest1_private.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest1_private {
-
     @Test
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
@@ -31,7 +30,6 @@ public String getName() {
     }
 
     private static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO create() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest2.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest2 {
-
     @Test
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
@@ -41,7 +40,6 @@ public String getName() {
 
     @JSONPOJOBuilder(buildMethod="xxx")
     public static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO xxx() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest2_private.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest2_private {
-
     @Test
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
@@ -33,7 +32,6 @@ public String getName() {
 
     @JSONPOJOBuilder(buildMethod="xxx")
     private static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO xxx() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest3.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest3 {
-
     @Test
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
@@ -33,7 +32,6 @@ public String getName() {
 
     @JSONPOJOBuilder(withPrefix="kk", buildMethod="mmm")
     public static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO mmm() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest3_private.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class BuilderTest3_private {
-
     @Test
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
@@ -32,7 +31,6 @@ public String getName() {
     }
 
     private static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO create() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest_error.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class BuilderTest_error {
-
     @Test
     public void test_0() throws Exception {
         Exception error = null;
@@ -22,7 +21,6 @@ public void test_0() throws Exception {
 
     @JSONType(builder = VOBuilder.class)
     public static class VO {
-
         private int    id;
         private String name;
 
@@ -36,7 +34,6 @@ public String getName() {
     }
 
     public static class VOBuilder {
-
         private VO vo = new VO();
 
         public VO build() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/builder/BuilderTest_error_private.java
Patch:
@@ -8,7 +8,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class BuilderTest_error_private {
-
     @Test
     public void test_0() throws Exception {
         Exception error = null;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1000/Issue1079.java
Patch:
@@ -28,7 +28,6 @@ public void test_for_issue() throws Exception {
     }
 
     public static class PdpResponse {
-
         @JSONField(name ="Response")
         public List<Response> response;
 
@@ -43,7 +42,6 @@ public static class InnerObject {
             public String decision;
         }
 
-
         public static class Status {
             @JSONField(name = "StatusCode")
             public StatusCode statusCode;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1000/Issue1089.java
Patch:
@@ -27,5 +27,4 @@ public void setAb(int ab) {
             this.ab = ab;
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1000/Issue1089_private.java
Patch:
@@ -27,5 +27,4 @@ public void setAb(int ab) {
             this.ab = ab;
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1138.java
Patch:
@@ -29,5 +29,4 @@ static class Model {
         public int id;
         public String name;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1188.java
Patch:
@@ -40,6 +40,5 @@ public String getName() {
         public void setName(String name) {
             this.name = name;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1189.java
Patch:
@@ -25,8 +25,6 @@ private static class JsonBean {
         private String headernotificationtype;
         private String notificationType;
 
-
-
         public Map<String, String> getBody() {
             return body;
         }
@@ -71,6 +69,5 @@ public JsonBean() {
             super();
             // TODO Auto-generated constructor stub
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1225.java
Patch:
@@ -30,7 +30,6 @@ public void test_parseObject_1() {
         assertEquals("2", o.data.get(1));
     }
 
-
     @Test
     public void test_parseObject_2() {
         SimpleGenericObject object = JSON.parseObject("{\"data\":[\"1\",\"2\",\"3\"],\"a\":\"a\"}",
@@ -39,7 +38,6 @@ public void test_parseObject_2() {
         assertEquals("2", object.data.get(1));
     }
 
-
     static class BaseGenericType<T> {
         public T data;
     }
@@ -51,5 +49,4 @@ static class ExtendGenericType<T>
     static class SimpleGenericObject
             extends ExtendGenericType<String> {
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1227.java
Patch:
@@ -31,4 +31,3 @@ public static class Bean {
 }
 
 
-

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1254.java
Patch:
@@ -21,7 +21,6 @@ public void test_for_issue() throws Exception {
         B b = new B();
         b.set_parentId("001");
 
-
         String testB = JSON.toJSONString(b);
         System.out.println(testB);
         assertEquals("{\"_parentId\":\"001\"}", testB);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1256.java
Patch:
@@ -15,7 +15,6 @@ public class Issue1256 {
     @Test
     public void test_for_issue() throws Exception {
 
-
         // params ={"key_obj":{"age":39,"name":"Mike"},"key_string":"Hello","key_random":-1193959466,"key_int":10000}
 
         A a = new A();

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1271.java
Patch:
@@ -22,7 +22,6 @@ public void processExtra(Object object, String key, Object value) {
             }
         };
 
-
 //        A a = JSON.parseObject(json,A.class,extraProcessor);
 //        assertEquals(1,a.a);
 //        assertEquals(1, count.intValue());

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1274.java
Patch:
@@ -53,5 +53,4 @@ public void setName(String name) {
             this.name = name;
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1278.java
Patch:
@@ -63,6 +63,4 @@ public static class AlternateNames {
         public String name;
         public int id;
     }
-
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1293.java
Patch:
@@ -5,7 +5,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertNull;
 
-
 /**
  * Created by kimmking on 27/06/2017.
  */
@@ -63,5 +62,4 @@ static enum IdType{
     static enum UserType{
         C,D
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1300.java
Patch:
@@ -32,7 +32,6 @@ public void testEmptyJSON() {
         assertEquals(0, object.code);
     }
 
-
     public static class City
             implements Parcelable {
         public final int code;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1306.java
Patch:
@@ -84,7 +84,6 @@ public TT(Goods goods){
             goodsList = Arrays.asList(goods);
         }
 
-
         private List<Goods> goodsList;
 
         public List<Goods> getGoodsList() {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1344.java
Patch:
@@ -29,6 +29,5 @@ public TestException() {
         public TestException(String data) {
             super("Data : " + data);
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1363.java
Patch:
@@ -64,6 +64,5 @@ public DataSimpleVO(String name, Object value) {
         public String toString() {
             return "DataSimpleVO [name=" + name + ", value=" + value + ", value1=" + value1 + "]";
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1370.java
Patch:
@@ -7,7 +7,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-
 /**
  * Created by wenshao on 04/08/2017.
  */

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1371.java
Patch:
@@ -31,7 +31,6 @@ public void testFastjsonEnum(){
 
 
 
-
 //    public void testParsed(){
 //
 //        String oldStyleJson = "{1:'abc', 2:'cde'}";

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1425.java
Patch:
@@ -40,6 +40,4 @@ public void setName(String name) {
             this.name = name;
         }
     }
-
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1458.java
Patch:
@@ -48,7 +48,6 @@ public boolean isMatched() {
             return false;
         }
 
-
         public HostAddress getAddress() {
             return address;
         }
@@ -81,11 +80,9 @@ public Fingerprint(@JSONField(name = "source") String fingerprint) {
             this.source = fingerprint;
         }
 
-
         public String getSource() {
             return source;
         }
-
     }
 
     public static class HostAddress {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1458C.java
Patch:
@@ -49,7 +49,6 @@ public boolean isMatched() {
             return false;
         }
 
-
         public HostAddress getAddress() {
             return address;
         }
@@ -82,11 +81,9 @@ public Fingerprint(@JSONField(name = "source") String fingerprint) {
             this.source = fingerprint;
         }
 
-
         public String getSource() {
             return source;
         }
-
     }
 
     public static class HostAddress {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1493.java
Patch:
@@ -28,15 +28,13 @@ public void test_for_issue() throws Exception {
         String json = JSON.toJSONString(test);
         assertEquals("{\"time1\":"+t1+",\"time2\":\"2017-09-22T15:08:56\"}",json);
 
-
         //String default_format = JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT;
         //JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
         //String stime1 = DateTimeFormatter.ofPattern(JSON.DEFFAULT_LOCAL_DATE_TIME_FORMAT, Locale.CHINA).format(time1);
 
         json = JSON.toJSONString(test);
         assertEquals("{\"time1\":"+ JSON.toJSONString(time1) +",\"time2\":\"2017-09-22T15:08:56\"}",json);
 
-
         String pattern = "yyyy-MM-dd'T'HH:mm:ss";
         String stime1 = DateTimeFormatter.ofPattern(pattern, Locale.CHINA).format(time1);
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1500.java
Patch:
@@ -61,7 +61,5 @@ public Exception getE() {
         public void setE(Exception e) {
             this.e = e;
         }
-
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1524.java
Patch:
@@ -11,7 +11,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 public class Issue1524 {
     @Test
     public void test_for_issue() throws Exception {
@@ -113,7 +112,6 @@ public void setOldValue(Value oldValue) {
         }
     }
 
-
     public static class Value {
 
     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1548.java
Patch:
@@ -41,8 +41,6 @@ public Object getMeta(String name) {
             return this.meta.get(name);
         }
 
-
-
         @Override
         public String toString() {
             return JSON.toJSONString(this);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1565.java
Patch:
@@ -24,7 +24,6 @@ public void test_testLargeBeanContainsOver256Field(){
 //
 //        System.out.println(JSON.toJSONString(smallBean, serializeConfig));
 
-
         LargeBean expectedBean = new LargeBean();
         expectedBean.setId("S35669");
         expectedBean.setNetValueDate(20171105);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1603_map.java
Patch:
@@ -29,5 +29,4 @@ public static class Model_1 {
     public static class Model_2 {
         public final Map<String, Object> values = Collections.unmodifiableMap(new HashMap<String, Object>());
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1603_map_getter.java
Patch:
@@ -37,5 +37,4 @@ public Map<String, Object> getValues() {
             return values;
         }
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1611.java
Patch:
@@ -18,7 +18,6 @@ public void test_for_issue() throws Exception {
             Model model = sss.toJavaObject(Model.class);
             assertEquals("Mark", model.name);
         }
-
     }
 
     public static class Model {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1649.java
Patch:
@@ -48,6 +48,5 @@ public Apple setProductCity(String productCity) {
             this.productCity = productCity;
             return this;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1679.java
Patch:
@@ -10,7 +10,6 @@
 
 public class Issue1679 {
 
-
     @Test
     public void test_for_issue() throws Exception {
         String json = "{\"create\":\"2018-01-10 08:30:00\"}";

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1683.java
Patch:
@@ -29,7 +29,6 @@ public static class BookDO {
 
         private Integer wordCount;
 
-
         public Long getBookId() {
             return bookId;
         }
@@ -61,7 +60,5 @@ public Integer getWordCount() {
         public void setWordCount(Integer wordCount) {
             this.wordCount = wordCount;
         }
-
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1683C.java
Patch:
@@ -29,7 +29,6 @@ public static class BookDO {
 
         private Integer wordCount;
 
-
         public Long getBookId() {
             return bookId;
         }
@@ -61,7 +60,5 @@ public Integer getWordCount() {
         public void setWordCount(Integer wordCount) {
             this.wordCount = wordCount;
         }
-
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1763.java
Patch:
@@ -15,7 +15,6 @@ public class Issue1763 {
     public void test_for_issue() throws Exception {
         String s = "{\"result\":{\"modelList\":[{\"sourceId\":\"81900002\"},{\"sourceId\":\"81900002\"},{\"sourceId\":\"81892012\"},{\"sourceId\":\"2062014\"},{\"sourceId\":\"2082007\"},{\"sourceId\":\"2082007\"},{\"sourceId\":\"2082007\"}]}}";
 
-
         Method method = ProcurementOrderInteractiveServiceForCloud.class.getMethod("queryOrderMateriel", Map.class);
         Type type = method.getGenericReturnType();
 
@@ -71,5 +70,4 @@ public interface ProcurementOrderInteractiveServiceForCloud {
         BaseResult<InteractiveOrderMaterielQueryResult> queryOrderMateriel(Map param);
 
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764.java
Patch:
@@ -8,7 +8,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 public class Issue1764 {
     @Test
     public void test_for_issue() throws Exception {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764_bean.java
Patch:
@@ -33,7 +33,6 @@ public void test_for_issue() throws Exception {
     }
 
 
-
     @JSONType(serializeFeatures = JSONWriter.Feature.BrowserCompatible)
     public static class Model {
         public long value;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764_bean_biginteger.java
Patch:
@@ -38,7 +38,6 @@ public void test_for_issue() throws Exception {
 
 
 
-
     public static class Model {
         public BigInteger value;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764_bean_biginteger_field.java
Patch:
@@ -39,7 +39,6 @@ public void test_for_issue() throws Exception {
 
 
 
-
     public static class Model {
         @JSONField(serializeFeatures = JSONWriter.Feature.BrowserCompatible)
         public BigInteger value;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764_bean_biginteger_type.java
Patch:
@@ -38,7 +38,6 @@ public void test_for_issue() throws Exception {
     }
 
 
-
     @JSONType(serializeFeatures = JSONWriter.Feature.BrowserCompatible)
     public static class Model {
         public BigInteger value;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1821.java
Patch:
@@ -36,5 +36,4 @@ public static class Model {
         @JSONField(name="data", ordinal = 2, format = "base64")
         public byte[] data;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1821C.java
Patch:
@@ -36,5 +36,4 @@ public static class Model {
         @JSONField(name="data", ordinal = 2, format = "base64")
         public byte[] data;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1856.java
Patch:
@@ -60,6 +60,5 @@ public String getInfo() {
         public void setInfo(String info) {
             this.info = info;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1856C.java
Patch:
@@ -60,6 +60,5 @@ public String getInfo() {
         public void setInfo(String info) {
             this.info = info;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1800/Issue1879.java
Patch:
@@ -65,7 +65,6 @@ public M1(@JSONField(name = "ids") String ids) {
                 this.ids.add(Long.valueOf(id));
             }
         }
-
     }
 
     public static class M2 {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1900/Issue1903.java
Patch:
@@ -35,7 +35,6 @@ interface Issues1903{
         void setAge(Integer age);
     }
 
-
     class MapHandler
             implements InvocationHandler {
         Map<String, Object> map = new HashMap<String, Object>();

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1900/Issue1903C.java
Patch:
@@ -38,7 +38,6 @@ interface Issues1903{
         void setAge(Integer age);
     }
 
-
     class MapHandler
             implements InvocationHandler {
         Map<String, Object> map = new HashMap<String, Object>();

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1900/Issue1945.java
Patch:
@@ -11,7 +11,6 @@
 import static com.alibaba.fastjson2.JSONWriter.Feature.WriteClassName;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-
 public class Issue1945 {
     @Test
     public void test_0() throws Exception {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2200/Issue2241.java
Patch:
@@ -76,5 +76,4 @@ public static class Order4 {
         @JSONField(format = "unixtime")
         public ZonedDateTime createTime;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2200/Issue2260.java
Patch:
@@ -70,5 +70,4 @@ public static class M2 {
     public static class M3 {
         public LocalDateTime date;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2300/Issue2358.java
Patch:
@@ -47,8 +47,6 @@ public String getTest2() {
         public void setTest2(String test2) {
             this.test2 = test2;
         }
-
-
     }
 
     class TestJson2 {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2400/Issue2447.java
Patch:
@@ -51,7 +51,6 @@ public static class VO2 {
         public Map<String, Object> properties = new LinkedHashMap<String, Object>();
     }
 
-
     public static class Location {
         public int longitude;
         public int latitude;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3200/Issue3266_str.java
Patch:
@@ -41,7 +41,6 @@ private Color(int code, String name) {
             this.name = name;
         }
 
-
         public int getCode() {
             return code;
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3300/Issue3334.java
Patch:
@@ -14,7 +14,6 @@ public void test_for_issue() throws Exception {
         assertEquals(1,
                 JSON.parseObject("{\"id\":true}", VO.class).id);
 
-
         assertEquals(0,
                 JSON.parseObject("{\"id64\":false}", VO.class).id64);
 
@@ -27,14 +26,12 @@ public void test_for_issue() throws Exception {
         assertEquals(1,
                 JSON.parseObject("{\"id16\":true}", VO.class).id16);
 
-
         assertEquals(0,
                 JSON.parseObject("{\"id8\":false}", VO.class).id8);
 
         assertEquals(1,
                 JSON.parseObject("{\"id8\":true}", VO.class).id8);
 
-
         assertEquals(0F,
                 JSON.parseObject("{\"floatValue\":false}", VO.class).floatValue);
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3300/Issue3344.java
Patch:
@@ -10,7 +10,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 /**
  * @Author ：Nanqi
  * @Date ：Created in 18:28 2020/7/19

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3300/Issue3397.java
Patch:
@@ -35,6 +35,5 @@ public LocalDateTime getDate() {
         public void setDate(LocalDateTime date) {
             this.date = date;
         }
-
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3400/Issue3460.java
Patch:
@@ -21,5 +21,4 @@ public void test_for_issue() throws Exception {
                 JSONValidator.from(body)
                         .validate());
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3500/Issue3544.java
Patch:
@@ -9,7 +9,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertNull;
 
-
 public class Issue3544 {
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3600/Issue3652.java
Patch:
@@ -62,5 +62,4 @@ public class Model3 {
     public class Model4 {
         private String goodBoy;
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_3600/Issue3655.java
Patch:
@@ -163,5 +163,4 @@ public abstract static class issue3655_a {
 
         public abstract Object getData9();
     }
-
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_4000/Issue4069.java
Patch:
@@ -21,5 +21,4 @@ public void test_for_issue4069() {
         assertFalse(JSON.isValidArray("["));
         assertFalse(JSON.isValidArray("[[]"));
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/ByteArrayTest2.java
Patch:
@@ -11,7 +11,6 @@
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-
 public class ByteArrayTest2 {
     public static class CertFile {
         public String name;
@@ -37,7 +36,7 @@ public void test_0() throws Exception {
 
         byte[] data = bos.toByteArray();
         Charset charset = Charset.forName("UTF-8");
-        CertFile convertFile =  (CertFile)JSON.parse(data, 0, data.length, charset.newDecoder(), Feature.AllowArbitraryCommas,
+        CertFile convertFile = (CertFile) JSON.parse(data, 0, data.length, charset.newDecoder(), Feature.AllowArbitraryCommas,
                 Feature.IgnoreNotMatch, Feature.SortFeidFastMatch, Feature.DisableCircularReferenceDetect,
                 Feature.AutoCloseSource, Feature.SupportAutoType
         );

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONArrayTest.java
Patch:
@@ -216,7 +216,6 @@ public String getName() {
         public void setName(String name) {
             this.name = name;
         }
-
     }
 
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONArrayTest2.java
Patch:
@@ -36,6 +36,5 @@ public void test_0() throws Exception {
 //        assertEquals(new java.sql.Date(time), array2.getSqlDate(2));
 //        assertEquals(new java.sql.Timestamp(time), array2.getTimestamp(2));
         assertEquals(array2.size(), array2.size());
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONBytesTest3.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson;
 
-
 import org.junit.jupiter.api.Test;
 
 import java.nio.charset.Charset;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONFromObjectTest.java
Patch:
@@ -93,7 +93,6 @@ public String getName() {
         public void setName(String name) {
             this.name = name;
         }
-
     }
 
     public static class C {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectFluentTest.java
Patch:
@@ -29,5 +29,4 @@ public void test_fluent() throws Exception {
 
         assertEquals(0, object.size());
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest.java
Patch:
@@ -537,8 +537,6 @@ public void test1() {
         JSONObject object = new JSONObject().fluentPut("root", new JSONObject());
         Bean bean = object.getObject("root", new TypeReference<Bean>(){});
         assertNotNull(bean);
-
-
     }
 
     public static class Bean {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest2.java
Patch:
@@ -20,7 +20,7 @@ public void test_0() throws Exception {
         assertEquals(obj.size(), map.size());
         assertEquals(obj.get("a"), map.get("a"));
 
-        map.put("b", new int[] { 1 });
+        map.put("b", new int[]{1});
         JSONArray array = obj.getJSONArray("b");
         assertEquals(array.size(), 1);
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest4.java
Patch:
@@ -12,11 +12,11 @@ public void test_interface() {
         assertEquals(123, vo.getId());
     }
 
-    public static interface VO {
-        @JSONField()
+    public interface VO {
+        @JSONField
         int getId();
 
-        @JSONField()
+        @JSONField
         void setId(int val);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest7.java
Patch:
@@ -13,5 +13,4 @@ public void test() throws Exception {
         assertTrue(jsonObject.containsValue("cc"));
         assertFalse(jsonObject.isEmpty());
     }
-
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest_get.java
Patch:
@@ -12,11 +12,11 @@ public void test_get() {
         assertEquals(123, obj.getObject("id", Object.class));
     }
 
-    public static interface VO {
-        @JSONField()
+    public interface VO {
+        @JSONField
         int getId();
 
-        @JSONField()
+        @JSONField
         void setId(int val);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest_getObj.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson;
 
-
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/JSONObjectTest_get_2.java
Patch:
@@ -30,11 +30,11 @@ public void test_get_obj() throws Exception {
         assertEquals(1001, value.getId());
     }
 
-    public static interface VO {
-        @JSONField()
+    public interface VO {
+        @JSONField
         int getId();
 
-        @JSONField()
+        @JSONField
         void setId(int val);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/atomic/AtomicLongReadOnlyTest.java
Patch:
@@ -34,6 +34,5 @@ public V0(int value){
         public AtomicLong getValue() {
             return value;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/ColorTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import java.awt.*;
 
-
 public class ColorTest {
     @Test
     public void test_color() throws Exception {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/ColorTest2.java
Patch:
@@ -8,7 +8,6 @@
 
 import java.awt.*;
 
-
 public class ColorTest2 {
     @Test
     public void test_color() throws Exception {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/basicType/IntTest.java
Patch:
@@ -12,7 +12,7 @@
 public class IntTest {
     @Test
     public void test_array() throws Exception {
-        int[] values = new int[] {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
+        int[] values = new int[]{Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
         String text = JSON.toJSONString(values);
         long[] values_2 = JSON.parseObject(text, long[].class);
         assertEquals(values_2.length, values.length);
@@ -23,7 +23,7 @@ public void test_array() throws Exception {
 
     @Test
     public void test_map() throws Exception {
-        int[] values = new int[] {Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
+        int[] values = new int[]{Integer.MIN_VALUE, -1, 0, 1, Integer.MAX_VALUE};
         Map<String, Object> map = new HashMap<String, Object>();
         for (int i = 0; i < values.length; ++i) {
             map.put(Integer.toString(i), values[i]);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/basicType/LongTest.java
Patch:
@@ -11,7 +11,7 @@
 public class LongTest {
     @Test
     public void test_array() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         String text = JSON.toJSONString(values);
         long[] values_2 = JSON.parseObject(text, long[].class);
         Assertions.assertEquals(values_2.length, values.length);
@@ -22,7 +22,7 @@ public void test_array() throws Exception {
 
     @Test
     public void test_map() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         Map<String, Object> map = new HashMap<String, Object>();
         for (int i = 0; i < values.length; ++i) {
             map.put(Long.toString(i), values[i]);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/basicType/LongTest_browserCompatible.java
Patch:
@@ -12,7 +12,7 @@
 public class LongTest_browserCompatible {
     @Test
     public void test_array() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         String text = JSON.toJSONString(values, SerializerFeature.BrowserCompatible);
         long[] values_2 = JSON.parseObject(text, long[].class);
         Assertions.assertEquals(values_2.length, values.length);
@@ -53,7 +53,7 @@ public void test_array() throws Exception {
 
     @Test
     public void test_map() throws Exception {
-        long[] values = new long[] {Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
+        long[] values = new long[]{Long.MIN_VALUE, -1, 0, 1, Long.MAX_VALUE};
         Map<String, Object> map = new HashMap<String, Object>();
         for (int i = 0; i < values.length; ++i) {
             map.put(Long.toString(i), values[i]);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest0.java
Patch:
@@ -14,7 +14,7 @@ public void test_0() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest0_private.java
Patch:
@@ -14,7 +14,7 @@ public void test_0() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest1.java
Patch:
@@ -14,7 +14,7 @@ public void test_create() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest1_private.java
Patch:
@@ -14,7 +14,7 @@ public void test_create() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest2.java
Patch:
@@ -15,7 +15,7 @@ public void test_create() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -37,7 +37,7 @@ public String getName() {
         }
     }
 
-    @JSONPOJOBuilder(buildMethod="xxx")
+    @JSONPOJOBuilder(buildMethod = "xxx")
     public static class VOBuilder {
         private VO vo = new VO();
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest2_private.java
Patch:
@@ -15,7 +15,7 @@ public void test_create() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -29,7 +29,7 @@ public String getName() {
         }
     }
 
-    @JSONPOJOBuilder(buildMethod="xxx")
+    @JSONPOJOBuilder(buildMethod = "xxx")
     private static class VOBuilder {
         private VO vo = new VO();
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest3.java
Patch:
@@ -15,7 +15,7 @@ public void test_create() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -29,7 +29,7 @@ public String getName() {
         }
     }
 
-    @JSONPOJOBuilder(withPrefix="kk", buildMethod="mmm")
+    @JSONPOJOBuilder(withPrefix = "kk", buildMethod = "mmm")
     public static class VOBuilder {
         private VO vo = new VO();
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest3_private.java
Patch:
@@ -15,7 +15,7 @@ public void test_create() throws Exception {
         Assertions.assertEquals("ljw", vo.getName());
     }
 
-    @JSONType(builder=VOBuilder.class)
+    @JSONType(builder = VOBuilder.class)
     public static class VO {
         private int id;
         private String name;
@@ -36,13 +36,13 @@ public VO create() {
             return vo;
         }
 
-        @JSONField(name="id")
+        @JSONField(name = "id")
         public VOBuilder kkId(int id) {
             vo.id = id;
             return this;
         }
 
-        @JSONField(name="name")
+        @JSONField(name = "name")
         public VOBuilder kkName(String name) {
             vo.name = name;
             return this;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest_error.java
Patch:
@@ -20,7 +20,7 @@ public void test_0() throws Exception {
 
     @JSONType(builder = VOBuilder.class)
     public static class VO {
-        private int    id;
+        private int id;
         private String name;
 
         public int getId() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest_error_private.java
Patch:
@@ -20,7 +20,7 @@ public void test_0() throws Exception {
 
     @JSONType(builder = VOBuilder.class)
     public static class VO {
-        private int    id;
+        private int id;
         private String name;
 
         public int getId() {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/CalendarTest.java
Patch:
@@ -64,6 +64,5 @@ public Calendar getCalendar() {
         public void setCalendar(Calendar calendar) {
             this.calendar = calendar;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldFormatTest.java
Patch:
@@ -65,7 +65,6 @@ public void test_format_() {
         assertEquals(t2, df4.format(model2.publishTime));
         assertEquals(t1, df5.format(model2.serverTime));
         assertEquals(t3, df6.format(model2.getStartDate()));
-
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest.java
Patch:
@@ -78,6 +78,5 @@ public Date getValue() {
         public void setValue(Date value) {
             this.value = value;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest12_t.java
Patch:
@@ -41,6 +41,5 @@ public Date getValue() {
         public void setValue(Date value) {
             this.value = value;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest2.java
Patch:
@@ -104,6 +104,5 @@ public Date getValue() {
         public void setValue(Date value) {
             this.value = value;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest3.java
Patch:
@@ -110,6 +110,5 @@ public Date getValue() {
         public void setValue(Date value) {
             this.value = value;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest4.java
Patch:
@@ -104,6 +104,5 @@ public Date getValue() {
         public void setValue(Date value) {
             this.value = value;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest5.java
Patch:
@@ -107,6 +107,5 @@ public Object getA() {
         public static Object getB() {
             return true;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest8.java
Patch:
@@ -52,6 +52,5 @@ public Date getValue() {
         public void setValue(Date value) {
             this.value = value;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_1.java
Patch:
@@ -25,6 +25,5 @@ public Date getDate() {
         public void setDate(Date date) {
             this.date = date;
         }
-
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_2.java
Patch:
@@ -25,6 +25,5 @@ public Date getDate() {
         public void setDate(Date date) {
             this.date = date;
         }
-
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -1618,7 +1618,7 @@ static int writeTo(OutputStream out, Object object, Filter[] filters, JSONWriter
 
             return writer.flushTo(out);
         } catch (Exception e) {
-            throw new JSONException(e.getMessage(), e);
+            throw new JSONException("FASTJSON-" + JSON.VERSION + " write JSON error" + e.getMessage(), e);
         }
     }
 
@@ -1652,7 +1652,7 @@ static int writeTo(OutputStream out, Object object, String format, Filter[] filt
 
             return writer.flushTo(out);
         } catch (Exception e) {
-            throw new JSONException(e.getMessage(), e);
+            throw new JSONException("FASTJSON-" + JSON.VERSION + " write JSON error" + e.getMessage(), e);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -222,6 +222,8 @@ public T createInstance(long features) {
             if (hasDefaultValue) {
                 initDefaultValue(object);
             }
+
+            return object;
         }
 
         InstantiationException error;

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -14,6 +14,7 @@ public class BeanInfo {
     public Class[] seeAlso;
     public String[] seeAlsoNames;
     public Constructor creatorConstructor;
+    public Constructor markerConstructor;
     public Method createMethod;
     public String[] createParameterNames;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -249,7 +249,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class<?> objectClass) {
             );
 
             if (beanInfo.creatorConstructor == null && beanInfo.kotlin) {
-                beanInfo.creatorConstructor = BeanUtils.getKotlinConstructor(objectClass, beanInfo.createParameterNames);
+                BeanUtils.getKotlinConstructor(objectClass, beanInfo);
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -69,7 +69,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {
                         break;
                     case "kotlin.Metadata":
                         beanInfo.kotlin = true;
-                        beanInfo.creatorConstructor = BeanUtils.getKotlinConstructor(objectClass, null);
+                        BeanUtils.getKotlinConstructor(objectClass, beanInfo);
                         beanInfo.createParameterNames = BeanUtils.getKotlinConstructorParameters(objectClass);
                         break;
                     default:

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -14,6 +14,7 @@ public class BeanInfo {
     public Class[] seeAlso;
     public String[] seeAlsoNames;
     public Constructor creatorConstructor;
+    public Constructor markerConstructor;
     public Method createMethod;
     public String[] createParameterNames;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -249,7 +249,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class<?> objectClass) {
             );
 
             if (beanInfo.creatorConstructor == null && beanInfo.kotlin) {
-                beanInfo.creatorConstructor = BeanUtils.getKotlinConstructor(objectClass, beanInfo.createParameterNames);
+                BeanUtils.getKotlinConstructor(objectClass, beanInfo);
             }
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -69,7 +69,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {
                         break;
                     case "kotlin.Metadata":
                         beanInfo.kotlin = true;
-                        beanInfo.creatorConstructor = BeanUtils.getKotlinConstructor(objectClass, null);
+                        BeanUtils.getKotlinConstructor(objectClass, beanInfo);
                         beanInfo.createParameterNames = BeanUtils.getKotlinConstructorParameters(objectClass);
                         break;
                     default:

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -262,7 +262,7 @@ public Object readFieldValue(JSONReader jsonReader) {
 
         Function builder = fieldObjectReader.getBuildFunction();
         if (builder != null) {
-            object =builder.apply(object);
+            object = builder.apply(object);
         }
 
         return object;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -237,7 +237,7 @@ public void accept(T object, Object value) {
             schema.assertValidate(value);
         }
 
-        if (value == null && (features & JSONReader.Feature.IgnoreSetNullValue.mask) == 0) {
+        if (value == null && (features & JSONReader.Feature.IgnoreSetNullValue.mask) != 0) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -237,7 +237,7 @@ public void accept(T object, Object value) {
             schema.assertValidate(value);
         }
 
-        if (value == null && (features & JSONReader.Feature.IgnoreSetNullValue.mask) != 0) {
+        if (value == null && (features & JSONReader.Feature.IgnoreSetNullValue.mask) == 0) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -107,7 +107,7 @@ public T readObject(JSONReader jsonReader, long features) {
                 return null;
             }
 
-            if (ch != '"' && ch != '\'') {
+            if (ch != '"' && ch != '\'' && ch != '}') {
                 throw new JSONException("illegal input " + ch + ", offset " + jsonReader.getOffset());
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterAdapter.java
Patch:
@@ -222,7 +222,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         if (jsonWriter
-                .isBeanToArray(features)) {
+                .isBeanToArray(features | this.features)) {
             writeArrayMapping(jsonWriter, object, fieldName, fieldType, features);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -98,7 +98,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
 
         if (value == null) {
             long features = this.features | jsonWriter.getFeatures();
-            if ((features & JSONWriter.Feature.WriteNulls.mask) != 0
+            if ((features & (JSONWriter.Feature.WriteNulls.mask | JSONWriter.Feature.NullAsDefaultValue.mask)) != 0
                     && (features & JSONWriter.Feature.NotWriteDefaultValue.mask) == 0
             ) {
                 writeFieldName(jsonWriter);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterAdapter.java
Patch:
@@ -222,8 +222,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
         }
 
         if (jsonWriter
-                .isBeanToArray(
-                        getFeatures())) {
+                .isBeanToArray(features)) {
             writeArrayMapping(jsonWriter, object, fieldName, fieldType, features);
             return;
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Param.java
Patch:
@@ -1,13 +1,14 @@
 package com.alibaba.fastjson2.reader;
 
 import com.alibaba.fastjson2.JSONReader;
+import com.alibaba.fastjson2.schema.JSONSchema;
 
 import java.lang.reflect.Parameter;
 
 final class FieldReaderInt16Param<T>
         extends FieldReaderObjectParam<T> {
-    FieldReaderInt16Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal) {
-        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null, null);
+    FieldReaderInt16Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal, long features, String format, JSONSchema schema) {
+        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, features, format, schema);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Param.java
Patch:
@@ -1,13 +1,14 @@
 package com.alibaba.fastjson2.reader;
 
 import com.alibaba.fastjson2.JSONReader;
+import com.alibaba.fastjson2.schema.JSONSchema;
 
 import java.lang.reflect.Parameter;
 
 final class FieldReaderInt32Param<T>
         extends FieldReaderObjectParam<T> {
-    FieldReaderInt32Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal) {
-        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null, null);
+    FieldReaderInt32Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal, long features, String format, JSONSchema schema) {
+        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, features, format, schema);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Param.java
Patch:
@@ -1,13 +1,14 @@
 package com.alibaba.fastjson2.reader;
 
 import com.alibaba.fastjson2.JSONReader;
+import com.alibaba.fastjson2.schema.JSONSchema;
 
 import java.lang.reflect.Parameter;
 
 final class FieldReaderInt64Param<T>
         extends FieldReaderObjectParam<T> {
-    FieldReaderInt64Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal) {
-        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null, null);
+    FieldReaderInt64Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal, long features, String format, JSONSchema schema) {
+        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, features, format, schema);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Param.java
Patch:
@@ -1,13 +1,14 @@
 package com.alibaba.fastjson2.reader;
 
 import com.alibaba.fastjson2.JSONReader;
+import com.alibaba.fastjson2.schema.JSONSchema;
 
 import java.lang.reflect.Parameter;
 
 final class FieldReaderInt8Param<T>
         extends FieldReaderObjectParam<T> {
-    FieldReaderInt8Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal) {
-        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null, null);
+    FieldReaderInt8Param(String fieldName, Class fieldType, String paramName, Parameter parameter, int ordinal, long features, String format, JSONSchema schema) {
+        super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, features, format, schema);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/support/money/MoneySupport.java
Patch:
@@ -47,10 +47,10 @@ public static ObjectReader createMonetaryAmountReader() {
             Function<Map<Long, Object>, Object> factoryFunction = ObjectReaderCreator.INSTANCE.createFactoryFunction(factoryMethod, paramNames);
 
             FieldReader fieldReader0 = ObjectReaderCreator.INSTANCE.createFieldReaderParam(
-                    MoneySupport.class, MoneySupport.class, "currency", null, CLASS_CURRENCY_UNIT, CLASS_CURRENCY_UNIT, "currency", null, 0
+                    MoneySupport.class, MoneySupport.class, "currency", 0, 0, null, CLASS_CURRENCY_UNIT, CLASS_CURRENCY_UNIT, "currency", null, null
             );
             FieldReader fieldReader1 = ObjectReaderCreator.INSTANCE.createFieldReaderParam(
-                    MoneySupport.class, MoneySupport.class, "number", null, CLASS_NUMBER_VALUE, CLASS_NUMBER_VALUE, "number", null, 0
+                    MoneySupport.class, MoneySupport.class, "number", 0, 0, null, CLASS_NUMBER_VALUE, CLASS_NUMBER_VALUE, "number", null, null
             );
 
             FieldReader[] fieldReaders = {fieldReader0, fieldReader1};

File: core/src/main/java/com/alibaba/fastjson2/writer/FIeldWriterEnumField.java
Patch:
@@ -9,8 +9,8 @@ final class FIeldWriterEnumField
         extends FieldWriterEnum {
     final Field field;
 
-    protected FIeldWriterEnumField(String name, int ordinal, String format, long features, Class fieldType, Field field) {
-        super(name, ordinal, features, format, fieldType);
+    protected FIeldWriterEnumField(String name, int ordinal, long features, String format, String label, Class fieldType, Field field) {
+        super(name, ordinal, features, format, label, fieldType);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalField.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterBigDecimalField<T>
         extends FieldWriterImpl<T> {
     final Field field;
 
-    protected FieldWriterBigDecimalField(String name, int ordinal, long features, Field field) {
-        super(name, ordinal, features, null, null, BigDecimal.class, BigDecimal.class);
+    protected FieldWriterBigDecimalField(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, BigDecimal.class, BigDecimal.class);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalFunc.java
Patch:
@@ -15,10 +15,12 @@ protected FieldWriterBigDecimalFunc(
             String fieldName,
             int ordinal,
             long features,
+            String format,
+            String label,
             Method method,
             Function<T, BigDecimal> function
     ) {
-        super(fieldName, ordinal, features, null, null, BigDecimal.class, BigDecimal.class);
+        super(fieldName, ordinal, features, format, label, BigDecimal.class, BigDecimal.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntField.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterBigIntField<T>
         extends FieldWriterImpl<T> {
     final Field field;
 
-    protected FieldWriterBigIntField(String name, int ordinal, long features, String format, Field field) {
-        super(name, ordinal, features, format, null, BigInteger.class, BigInteger.class);
+    protected FieldWriterBigIntField(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, BigInteger.class, BigInteger.class);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntFunc.java
Patch:
@@ -11,8 +11,8 @@ final class FieldWriterBigIntFunc<T>
     final Method method;
     final Function<T, BigInteger> function;
 
-    FieldWriterBigIntFunc(String fieldName, int ordinal, Method method, Function<T, BigInteger> function) {
-        super(fieldName, ordinal, 0, null, null, BigInteger.class, BigInteger.class);
+    FieldWriterBigIntFunc(String fieldName, int ordinal, long features, String format, String label, Method method, Function<T, BigInteger> function) {
+        super(fieldName, ordinal, features, format, label, BigInteger.class, BigInteger.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharMethod.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterCharMethod<T>
         extends FieldWriterImpl<T> {
     final Method method;
 
-    protected FieldWriterCharMethod(String fieldName, int ordinal, Method method, Class fieldClass) {
-        super(fieldName, ordinal, 0, null, null, fieldClass, fieldClass);
+    protected FieldWriterCharMethod(String fieldName, int ordinal, long features, String format, String label, Method method, Class fieldClass) {
+        super(fieldName, ordinal, features, format, label, fieldClass, fieldClass);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValFunc.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterCharValFunc
     final Method method;
     final ToCharFunction function;
 
-    FieldWriterCharValFunc(String fieldName, int ordinal, Method method, ToCharFunction function) {
-        super(fieldName, ordinal, 0, null, null, char.class, char.class);
+    FieldWriterCharValFunc(String fieldName, int ordinal, long features, String format, String label, Method method, ToCharFunction function) {
+        super(fieldName, ordinal, features, format, label, char.class, char.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValueFunc.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterDoubleValueFunc
     final Method method;
     final ToDoubleFunction function;
 
-    protected FieldWriterDoubleValueFunc(String fieldName, int ordinal, Method method, ToDoubleFunction function) {
-        super(fieldName, ordinal, 0, null, null, double.class, double.class);
+    protected FieldWriterDoubleValueFunc(String fieldName, int ordinal, long features, String format, String label, Method method, ToDoubleFunction function) {
+        super(fieldName, ordinal, features, format, label, double.class, double.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnum.java
Patch:
@@ -15,8 +15,8 @@ abstract class FieldWriterEnum
     final Enum[] enumConstants;
     final long[] hashCodes;
 
-    protected FieldWriterEnum(String name, int ordinal, long features, String format, Class<? extends Enum> enumType) {
-        super(name, ordinal, features, format, null, enumType, enumType);
+    protected FieldWriterEnum(String name, int ordinal, long features, String format, String label, Class<? extends Enum> enumType) {
+        super(name, ordinal, features, format, label, enumType, enumType);
 
         this.enumType = enumType;
         this.enumConstants = enumType.getEnumConstants();

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumFunc.java
Patch:
@@ -16,11 +16,13 @@ protected FieldWriterEnumFunc(
             String name,
             int ordinal,
             long features,
+            String format,
+            String label,
             Type fieldType,
             Class fieldClass,
             Method method,
             Function function) {
-        super(name, ordinal, features, null, fieldClass);
+        super(name, ordinal, features, format, label, fieldClass);
         this.fieldType = fieldType;
         this.method = method;
         this.function = function;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumMethod.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterEnumMethod
         extends FieldWriterEnum {
     final Method method;
 
-    protected FieldWriterEnumMethod(String name, int ordinal, long features, Class fieldType, Method method) {
-        super(name, ordinal, features, null, fieldType);
+    protected FieldWriterEnumMethod(String name, int ordinal, long features, String format, String label, Class fieldType, Method method) {
+        super(name, ordinal, features, format, label, fieldType);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValueFunc.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterFloatValueFunc
     final Method method;
     final ToFloatFunction function;
 
-    protected FieldWriterFloatValueFunc(String fieldName, int ordinal, String format, String label, Method method, ToFloatFunction function) {
-        super(fieldName, ordinal, 0, format, label, float.class, float.class);
+    protected FieldWriterFloatValueFunc(String fieldName, int ordinal, long features, String format, String label, Method method, ToFloatFunction function) {
+        super(fieldName, ordinal, features, format, label, float.class, float.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16.java
Patch:
@@ -12,8 +12,8 @@ abstract class FieldWriterInt16<T>
     char[][] utf16ValueCache;
     volatile byte[][] jsonbValueCache;
 
-    FieldWriterInt16(String name, int ordinal, String format, String label, Class fieldClass) {
-        super(name, ordinal, 0, format, label, fieldClass, fieldClass);
+    FieldWriterInt16(String name, int ordinal, long features, String format, String label, Class fieldClass) {
+        super(name, ordinal, features, format, label, fieldClass, fieldClass);
     }
 
     protected void writeInt16(JSONWriter jsonWriter, short value) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Field.java
Patch:
@@ -8,8 +8,8 @@ final class FieldWriterInt16Field<T>
         extends FieldWriterInt16<T> {
     final Field field;
 
-    FieldWriterInt16Field(String name, int ordinal, String format, String label, Field field, Class fieldClass) {
-        super(name, ordinal, format, label, fieldClass);
+    FieldWriterInt16Field(String name, int ordinal, long features, String format, String label, Field field, Class fieldClass) {
+        super(name, ordinal, features, format, label, fieldClass);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Func.java
Patch:
@@ -8,8 +8,8 @@ final class FieldWriterInt16Func<T>
     final Method method;
     final Function<T, Short> function;
 
-    protected FieldWriterInt16Func(String fieldName, int ordinal, String format, String label, Method method, Function<T, Short> function) {
-        super(fieldName, ordinal, format, label, Short.class);
+    protected FieldWriterInt16Func(String fieldName, int ordinal, long features, String format, String label, Method method, Function<T, Short> function) {
+        super(fieldName, ordinal, features, format, label, Short.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Method.java
Patch:
@@ -9,8 +9,8 @@ final class FieldWriterInt16Method<T>
         extends FieldWriterInt16<T> {
     final Method method;
 
-    protected FieldWriterInt16Method(String fieldName, int ordinal, String format, String label, Method method, Class fieldClass) {
-        super(fieldName, ordinal, format, label, fieldClass);
+    protected FieldWriterInt16Method(String fieldName, int ordinal, long features, String format, String label, Method method, Class fieldClass) {
+        super(fieldName, ordinal, features, format, label, fieldClass);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValField.java
Patch:
@@ -9,8 +9,8 @@ final class FieldWriterInt16ValField<T>
         extends FieldWriterInt16<T> {
     final Field field;
 
-    FieldWriterInt16ValField(String name, int ordinal, String format, String label, Field field) {
-        super(name, ordinal, format, label, short.class);
+    FieldWriterInt16ValField(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, short.class);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValFunc.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterInt16ValFunc
     final Method method;
     final ToShortFunction function;
 
-    FieldWriterInt16ValFunc(String fieldName, int ordinal, String format, String label, Method method, ToShortFunction function) {
-        super(fieldName, ordinal, format, label, short.class);
+    FieldWriterInt16ValFunc(String fieldName, int ordinal, long features, String format, String label, Method method, ToShortFunction function) {
+        super(fieldName, ordinal, features, format, label, short.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Val.java
Patch:
@@ -9,8 +9,8 @@ class FieldWriterInt32Val<T>
         extends FieldWriterInt32<T> {
     final Field field;
 
-    FieldWriterInt32Val(String name, int ordinal, long features, String format, Field field) {
-        super(name, ordinal, features, format, null, int.class, int.class);
+    FieldWriterInt32Val(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, int.class, int.class);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32ValUF.java
Patch:
@@ -11,8 +11,8 @@ final class FieldWriterInt32ValUF<T>
         extends FieldWriterInt32Val<T> {
     final long fieldOffset;
 
-    FieldWriterInt32ValUF(String name, int ordinal, long features, String format, Field field) {
-        super(name, ordinal, features, format, field);
+    FieldWriterInt32ValUF(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, field);
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Field.java
Patch:
@@ -8,8 +8,8 @@ final class FieldWriterInt64Field<T>
         extends FieldWriterInt64<T> {
     final Field field;
 
-    FieldWriterInt64Field(String name, int ordinal, String format, String label, Field field) {
-        super(name, ordinal, 0, format, label, Long.class);
+    FieldWriterInt64Field(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, Long.class);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Func.java
Patch:
@@ -8,8 +8,8 @@ final class FieldWriterInt64Func<T>
     final Method method;
     final Function<T, Long> function;
 
-    protected FieldWriterInt64Func(String fieldName, int ordinal, String format, String label, Method method, Function<T, Long> function) {
-        super(fieldName, ordinal, 0, format, label, Long.class);
+    protected FieldWriterInt64Func(String fieldName, int ordinal, long features, String format, String label, Method method, Function<T, Long> function) {
+        super(fieldName, ordinal, features, format, label, Long.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8.java
Patch:
@@ -10,8 +10,8 @@ abstract class FieldWriterInt8<T>
     final byte[][] utf8ValueCache = new byte[256][];
     final char[][] utf16ValueCache = new char[256][];
 
-    FieldWriterInt8(String name, int ordinal, String format, String label, Class fieldClass) {
-        super(name, ordinal, 0, format, label, fieldClass, fieldClass);
+    FieldWriterInt8(String name, int ordinal, long features, String format, String label, Class fieldClass) {
+        super(name, ordinal, features, format, label, fieldClass, fieldClass);
     }
 
     protected void writeInt8(JSONWriter jsonWriter, byte value) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Field.java
Patch:
@@ -8,8 +8,8 @@ final class FieldWriterInt8Field<T>
         extends FieldWriterInt8<T> {
     final Field field;
 
-    FieldWriterInt8Field(String name, int ordinal, String format, String label, Field field) {
-        super(name, ordinal, format, label, Byte.class);
+    FieldWriterInt8Field(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, Byte.class);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Func.java
Patch:
@@ -8,8 +8,8 @@ final class FieldWriterInt8Func<T>
     final Method method;
     final Function<T, Byte> function;
 
-    FieldWriterInt8Func(String fieldName, int ordinal, String format, String label, Method method, Function<T, Byte> function) {
-        super(fieldName, ordinal, format, label, Byte.class);
+    FieldWriterInt8Func(String fieldName, int ordinal, long features, String format, String label, Method method, Function<T, Byte> function) {
+        super(fieldName, ordinal, features, format, label, Byte.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Method.java
Patch:
@@ -9,8 +9,8 @@ final class FieldWriterInt8Method
         extends FieldWriterInt8 {
     final Method method;
 
-    protected FieldWriterInt8Method(String fieldName, int ordinal, String format, String label, Method method, Class fieldClass) {
-        super(fieldName, ordinal, format, label, fieldClass);
+    protected FieldWriterInt8Method(String fieldName, int ordinal, long features, String format, String label, Method method, Class fieldClass) {
+        super(fieldName, ordinal, features, format, label, fieldClass);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValField.java
Patch:
@@ -9,8 +9,8 @@ final class FieldWriterInt8ValField<T>
         extends FieldWriterInt8<T> {
     final Field field;
 
-    FieldWriterInt8ValField(String name, int ordinal, String format, String label, Field field) {
-        super(name, ordinal, format, label, byte.class);
+    FieldWriterInt8ValField(String name, int ordinal, long features, String format, String label, Field field) {
+        super(name, ordinal, features, format, label, byte.class);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValFunc.java
Patch:
@@ -10,8 +10,8 @@ final class FieldWriterInt8ValFunc
     final Method method;
     final ToByteFunction function;
 
-    protected FieldWriterInt8ValFunc(String fieldName, int ordinal, String format, String label, Method method, ToByteFunction function) {
-        super(fieldName, ordinal, format, label, byte.class);
+    protected FieldWriterInt8ValFunc(String fieldName, int ordinal, long features, String format, String label, Method method, ToByteFunction function) {
+        super(fieldName, ordinal, features, format, label, byte.class);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterList.java
Patch:
@@ -14,8 +14,8 @@ abstract class FieldWriterList<T>
     ObjectWriter listWriter;
     ObjectWriter itemObjectWriter;
 
-    FieldWriterList(String name, Type itemType, int ordinal, long features, String format, Type fieldType, Class fieldClass) {
-        super(name, ordinal, features, format, null, fieldType, fieldClass);
+    FieldWriterList(String name, Type itemType, int ordinal, long features, String format, String label, Type fieldType, Class fieldClass) {
+        super(name, ordinal, features, format, label, fieldType, fieldClass);
 
         this.itemType = itemType == null ? Object.class : itemType;
         if (this.itemType instanceof Class) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListField.java
Patch:
@@ -17,11 +17,12 @@ protected FieldWriterListField(
             int ordinal,
             long features,
             String format,
+            String label,
             Type fieldType,
             Class fieldClass,
             Field field
     ) {
-        super(fieldName, itemType, ordinal, features, format, fieldType, fieldClass);
+        super(fieldName, itemType, ordinal, features, format, label, fieldType, fieldClass);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListFunc.java
Patch:
@@ -17,13 +17,14 @@ final class FieldWriterListFunc<T>
             int ordinal,
             long features,
             String format,
+            String label,
             Type itemType,
             Method method,
             Function<T, List> function,
             Type fieldType,
             Class fieldClass
     ) {
-        super(fieldName, itemType, ordinal, features, format, fieldType, fieldClass);
+        super(fieldName, itemType, ordinal, features, format, label, fieldType, fieldClass);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListMethod.java
Patch:
@@ -18,11 +18,12 @@ protected FieldWriterListMethod(
             int ordinal,
             long features,
             String format,
+            String label,
             Method method,
             Type fieldType,
             Class fieldClass
     ) {
-        super(fieldName, itemType, ordinal, features, format, fieldType, fieldClass);
+        super(fieldName, itemType, ordinal, features, format, label, fieldType, fieldClass);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListStrFunc.java
Patch:
@@ -17,12 +17,13 @@ protected FieldWriterListStrFunc(
             int ordinal,
             long features,
             String format,
+            String label,
             Method method,
             Function<T, List> function,
             Type fieldType,
             Class fieldClass
     ) {
-        super(fieldName, ordinal, features, format, null, fieldType, fieldClass);
+        super(fieldName, ordinal, features, format, label, fieldType, fieldClass);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -17,8 +17,8 @@ abstract class FieldWriterObject<T>
     final boolean array;
     final boolean number;
 
-    protected FieldWriterObject(String name, int ordinal, long features, String format, Type fieldType, Class fieldClass) {
-        super(name, ordinal, features, format, null, fieldType, fieldClass);
+    protected FieldWriterObject(String name, int ordinal, long features, String format, String label, Type fieldType, Class fieldClass) {
+        super(name, ordinal, features, format, label, fieldType, fieldClass);
         this.unwrapped = (features & FieldInfo.UNWRAPPED_MASK) != 0;
 
         if (fieldClass == Currency.class) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayField.java
Patch:
@@ -20,11 +20,12 @@ protected FieldWriterObjectArrayField(
             int ordinal,
             long features,
             String format,
+            String label,
             Type fieldType,
             Class fieldClass,
             Field field
     ) {
-        super(fieldName, ordinal, features, format, null, fieldType, fieldClass);
+        super(fieldName, ordinal, features, format, label, fieldType, fieldClass);
         this.field = field;
         this.itemType = itemType;
         if (itemType instanceof Class) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayMethod.java
Patch:
@@ -21,11 +21,12 @@ protected FieldWriterObjectArrayMethod(
             int ordinal,
             long features,
             String format,
+            String label,
             Type fieldType,
             Class fieldClass,
             Method method
     ) {
-        super(fieldName, ordinal, features, format, null, fieldType, fieldClass);
+        super(fieldName, ordinal, features, format, label, fieldType, fieldClass);
         this.method = method;
         this.itemType = itemType;
         if (itemType instanceof Class) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectField.java
Patch:
@@ -14,11 +14,12 @@ protected FieldWriterObjectField(
             int ordinal,
             long features,
             String format,
+            String label,
             Type fieldType,
             Class fieldClass,
             Field field
     ) {
-        super(name, ordinal, features, format, fieldType, fieldClass);
+        super(name, ordinal, features, format, label, fieldType, fieldClass);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFieldUF.java
Patch:
@@ -16,11 +16,12 @@ protected FieldWriterObjectFieldUF(
             int ordinal,
             long features,
             String format,
+            String label,
             Type fieldType,
             Class fieldClass,
             Field field
     ) {
-        super(name, ordinal, features, format, fieldType, fieldClass, field);
+        super(name, ordinal, features, format, label, fieldType, fieldClass, field);
 
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFinal.java
Patch:
@@ -11,8 +11,8 @@ abstract class FieldWriterObjectFinal<T>
     volatile ObjectWriter objectWriter;
     boolean refDetect;
 
-    protected FieldWriterObjectFinal(String name, int ordinal, long features, String format, Type fieldType, Class fieldClass) {
-        super(name, ordinal, features, format, null, fieldType, fieldClass);
+    protected FieldWriterObjectFinal(String name, int ordinal, long features, String format, String label, Type fieldType, Class fieldClass) {
+        super(name, ordinal, features, format, label, fieldType, fieldClass);
         this.fieldType = fieldType;
         this.fieldClass = fieldClass;
         this.refDetect = !ObjectWriterProvider.isNotReferenceDetect(fieldClass);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFunc.java
Patch:
@@ -13,8 +13,8 @@ final class FieldWriterObjectFunc<T>
     final Function function;
     final boolean isArray;
 
-    protected FieldWriterObjectFunc(String name, int ordinal, long features, String format, Type fieldType, Class fieldClass, Method method, Function function) {
-        super(name, ordinal, features, format, fieldType, fieldClass);
+    protected FieldWriterObjectFunc(String name, int ordinal, long features, String format, String label, Type fieldType, Class fieldClass, Method method, Function function) {
+        super(name, ordinal, features, format, label, fieldType, fieldClass);
         this.method = method;
         this.function = function;
         isArray = fieldClass == AtomicIntegerArray.class

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFuncFinal.java
Patch:
@@ -13,8 +13,8 @@ final class FieldWriterObjectFuncFinal<T>
     final Function function;
     final boolean isArray;
 
-    protected FieldWriterObjectFuncFinal(String name, int ordinal, long featues, String format, Type fieldType, Class fieldClass, Method method, Function function) {
-        super(name, ordinal, featues, format, fieldType, fieldClass);
+    protected FieldWriterObjectFuncFinal(String name, int ordinal, long features, String format, String label, Type fieldType, Class fieldClass, Method method, Function function) {
+        super(name, ordinal, features, format, label, fieldType, fieldClass);
         this.method = method;
         this.function = function;
         isArray = fieldClass == AtomicIntegerArray.class

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectMethod.java
Patch:
@@ -15,11 +15,12 @@ protected FieldWriterObjectMethod(
             int ordinal,
             long features,
             String format,
+            String label,
             Type fieldType,
             Class fieldClass,
             Method method
     ) {
-        super(name, ordinal, features, format, fieldType, fieldClass);
+        super(name, ordinal, features, format, label, fieldType, fieldClass);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringField.java
Patch:
@@ -14,10 +14,11 @@ final class FieldWriterStringField<T>
     protected FieldWriterStringField(
             String fieldName,
             int ordinal,
-            String format,
             long features,
+            String format,
+            String label,
             Field field) {
-        super(fieldName, ordinal, features, format, null, String.class, String.class);
+        super(fieldName, ordinal, features, format, label, String.class, String.class);
         this.field = field;
         this.symbol = "symbol".equals(format);
         this.trim = "trim".equals(format);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringFunc.java
Patch:
@@ -17,10 +17,11 @@ protected FieldWriterStringFunc(
             int ordinal,
             long features,
             String format,
+            String label,
             Method method,
             Function<T, String> function
     ) {
-        super(fieldName, ordinal, features, format, null, String.class, String.class);
+        super(fieldName, ordinal, features, format, label, String.class, String.class);
         this.method = method;
         this.function = function;
         this.symbol = "symbol".equals(format);

File: core/src/main/java/com/alibaba/fastjson2/util/JDKUtils.java
Patch:
@@ -106,7 +106,7 @@ public class JDKUtils {
         UNSAFE_SUPPORT = unsafeSupport;
 
         Boolean bigEndian = null;
-        if (UNSAFE_SUPPORT && LANG_UNNAMED) {
+        if (JDKUtils.JVM_VERSION > 8 && UNSAFE_SUPPORT && LANG_UNNAMED) {
             Class clazz;
             try {
                 clazz = Class.forName("java.lang.StringUTF16");

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue235.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.issues;
 
 import com.alibaba.fastjson2.JSON;
-import com.alibaba.fastjson2.JSONArray;
 import com.alibaba.fastjson2.JSONException;
 import org.junit.jupiter.api.Test;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -176,7 +176,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                 value = null;
                 break;
             default:
-                throw new JSONException("TODO : " + jsonReader.current());
+                throw new JSONException("illegal input : " + jsonReader.current() + ", offset " + jsonReader.getOffset());
         }
 
         return value;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterList.java
Patch:
@@ -72,7 +72,7 @@ public ObjectWriter getItemWriter(JSONWriter jsonWriter, Type itemType) {
 
     @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
-        if (listWriter != null) {
+        if (listWriter != null && fieldClass.isAssignableFrom(valueClass)) {
             return listWriter;
         }
 

File: core/src/test/java/com/alibaba/fastjson2/support/sql/JdbcTimeTest.java
Patch:
@@ -135,17 +135,17 @@ public void test_timestamp_1() {
 
     @Test
     public void test_date() {
-        long millis = System.currentTimeMillis();
+        long millis = 1653665873000L;
 
         D d = new D();
         d.value = new java.sql.Date(millis);
         String str = JSON.toJSONString(d);
         D d1 = JSON.parseObject(str, D.class);
-        assertEquals(d.value.getTime(), d1.value.getTime(), str);
+        assertEquals(d.value.toString(), d1.value.toString(), str);
 
         byte[] bytes = JSONB.toBytes(d);
         D d2 = JSONB.parseObject(bytes, D.class);
-        assertEquals(d.value, d2.value);
+        assertEquals(d.value.toString(), d2.value.toString());
     }
 
 

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderTest.java
Patch:
@@ -387,7 +387,7 @@ public void testContext() {
         context.setDateFormat(null);
         assertNull(context.getDateFormat());
 
-        context.setObjectClass(null);
-        assertNull(context.getObjectClass());
+        context.setObjectSupplier(null);
+        assertNull(context.getObjectSupplier());
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -715,6 +715,9 @@ public LocalDate readLocalDate() {
             case 11:
                 return readLocalDate11()
                         .toLocalDate();
+            case 19:
+                return readLocalDateTime19()
+                        .toLocalDate();
             default:
                 break;
         }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/serializer/NameFilter.java
Patch:
@@ -17,6 +17,4 @@
 
 public interface NameFilter
         extends SerializeFilter, com.alibaba.fastjson2.filter.NameFilter {
-    @Override
-    String process(Object object, String name, Object value);
 }

File: core/src/main/java/com/alibaba/fastjson2/filter/PropertyFilter.java
Patch:
@@ -2,5 +2,5 @@
 
 public interface PropertyFilter
         extends Filter {
-    boolean process(Object object, String name, Object value);
+    boolean apply(Object object, String name, Object value);
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriter.java
Patch:
@@ -78,7 +78,7 @@ default void writeArrayMapping(JSONWriter jsonWriter, Object object, Object fiel
                 }
 
                 Object fieldValue = fieldWriter.getFieldValue(object);
-                if (propertyFilter != null && !propertyFilter.process(object, fieldWriter.getFieldName(), fieldValue)) {
+                if (propertyFilter != null && !propertyFilter.apply(object, fieldWriter.getFieldName(), fieldValue)) {
                     jsonWriter.writeNull();
                     continue;
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -422,7 +422,7 @@ public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldNa
             }
 
             if (propertyFilter != null) {
-                if (!propertyFilter.process(object, key, value)) {
+                if (!propertyFilter.apply(object, key, value)) {
                     continue;
                 }
             }

File: core/src/test/java/com/alibaba/fastjson2/primitves/ByteTest.java
Patch:
@@ -119,7 +119,7 @@ public void test_arrayMapping() {
     public void test_filter() {
         PropertyFilter propertyFilter = new PropertyFilter() {
             @Override
-            public boolean process(Object object, String name, Object value) {
+            public boolean apply(Object object, String name, Object value) {
                 return false;
             }
         };

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/messaging/converter/MappingFastJsonMessageConverter.java
Patch:
@@ -28,10 +28,10 @@ public class MappingFastJsonMessageConverter
     protected FastJsonConfig fastJsonConfig = new FastJsonConfig();
 
     /**
-     * default support all type
+     * default support application/json
      */
     public MappingFastJsonMessageConverter() {
-        super(MimeTypeUtils.ALL);
+        super(MimeTypeUtils.APPLICATION_JSON);
     }
 
     /**

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -954,7 +954,6 @@ public <T> T toJavaObject(Type type) {
 
     /**
      * Convert all the members of this {@link JSONArray} into the specified Object.
-     * Warning that each member of the {@link JSONArray} must implement the {@link Map} interface.
      *
      * <pre>{@code
      * String json = "[{\"id\": 1, \"name\": \"fastjson\"}, {\"id\": 2, \"name\": \"fastjson2\"}]";
@@ -1010,7 +1009,6 @@ public <T> List<T> toList(Class<T> itemClass, JSONReader.Feature... features) {
     }
     /**
      * Convert all the members of this {@link JSONArray} into the specified Object.
-     * Warning that each member of the {@link JSONArray} must implement the {@link Map} interface.
      *
      * <pre>{@code
      * String json = "[{\"id\": 1, \"name\": \"fastjson\"}, {\"id\": 2, \"name\": \"fastjson2\"}]";

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -221,12 +221,12 @@ public JSONArray getJSONArray(String key) {
 
     public <T> T[] getArray(String key, Class<T> itemClass, JSONReader.Feature... features) {
         JSONArray jsonArray = getJSONArray(key);
-        return jsonArray.toArray(itemClass);
+        return jsonArray.toArray(itemClass, features);
     }
 
     public <T> List<T> getList(String key, Class<T> itemClass, JSONReader.Feature... features) {
         JSONArray jsonArray = getJSONArray(key);
-        return jsonArray.toList(itemClass);
+        return jsonArray.toList(itemClass, features);
     }
 
     /**

File: core/src/main/java/com/alibaba/fastjson2/internal/asm/ClassWriter.java
Patch:
@@ -231,7 +231,7 @@ protected String getCommonSuperClass(final String type1, final String type2) {
 
         Class<?> class2 = TypeUtils.loadClass(type2.replace('/', '.'));
         if (class2 == null) {
-            throw new JSONException(type2);
+            return "java/lang/Object";
         }
 
         if (class1.isAssignableFrom(class2)) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueFunc.java
Patch:
@@ -29,11 +29,11 @@ public void accept(T object, char value) {
 
     @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
-        String str = jsonReader.readString();
-        if (str == null || str.isEmpty()) {
+        char ch = jsonReader.readCharValue();
+        if (ch == '\0' && jsonReader.wasNull()) {
             return;
         }
-        function.accept(object, str.charAt(0));
+        function.accept(object, ch);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -263,7 +263,8 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
             }
 
             for (FieldReader fieldReader : fieldReaderArray) {
-                if (fieldReader.getMethod() != null) {
+                Method method = fieldReader.getMethod();
+                if (method != null && method.getReturnType() != void.class) {
                     match = false;
                     break;
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterImpl.java
Patch:
@@ -7,14 +7,12 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Type;
-import java.util.Locale;
 
 abstract class FieldWriterImpl<T>
         implements FieldWriter<T> {
     final String name;
     final int ordinal;
     final String format;
-    final Locale locale = null;
     final long hashCode;
     final byte[] nameWithColonUTF8;
     final char[] nameWithColonUTF16;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -325,7 +325,7 @@ public void writeString(String str) {
         }
         for (; i < chars.length; ++i) { // ascii none special fast write
             char ch = chars[i];
-            if ((ch >= 0x0001) && (ch <= 0x007F)) {
+            if ((ch >= 0x0000) && (ch <= 0x007F)) {
                 if (ch == quote) {
                     bytes[off++] = (byte) '\\';
                     bytes[off++] = (byte) quote;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -102,7 +102,7 @@ public void writeBase64(byte[] bytes) {
             int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytes.length - 1] & 0xff) << 2) : 0);
 
             // Set last four chars
-            this.bytes[off++] = (byte)  CA[i >> 12];
+            this.bytes[off++] = (byte) CA[i >> 12];
             this.bytes[off++] = (byte) CA[(i >>> 6) & 0x3f];
             this.bytes[off++] = left == 2 ? (byte) CA[i & 0x3f] : (byte) '=';
             this.bytes[off++] = '=';

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1201,7 +1201,6 @@ public void writeDateTimeISO8601(
             chars[20 + millislen] = 'Z';
         } else {
             int offsetAbs = Math.abs(offset);
-            int offsetlen = IOUtils.stringSize(offsetAbs);
 
             if (offset >= 0) {
                 chars[20 + millislen] = '+';

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -102,7 +102,7 @@ public void writeBase64(byte[] bytes) {
             int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytes.length - 1] & 0xff) << 2) : 0);
 
             // Set last four chars
-            this.bytes[off++] = (byte)  CA[i >> 12];
+            this.bytes[off++] = (byte) CA[i >> 12];
             this.bytes[off++] = (byte) CA[(i >>> 6) & 0x3f];
             this.bytes[off++] = left == 2 ? (byte) CA[i & 0x3f] : (byte) '=';
             this.bytes[off++] = '=';

File: core/src/test/java/com/alibaba/fastjson2/JSONWriterUTF16Test.java
Patch:
@@ -15,15 +15,15 @@ public void test_write() {
 
     @Test
     public void test_writeNameRaw() {
-        JSONWriter jsonWriter = JSONWriter.of(JSONWriter.Feature.WriteBooleanAsNumber);
+        JSONWriter jsonWriter = JSONWriter.ofUTF16(JSONWriter.Feature.WriteBooleanAsNumber);
         for (int i = 0; i < 8096; i++) {
             jsonWriter.writeNameRaw(new char[]{'a'});
         }
     }
 
     @Test
     public void test_writeNameRaw_1() {
-        JSONWriter jsonWriter = JSONWriter.of(JSONWriter.Feature.WriteBooleanAsNumber);
+        JSONWriter jsonWriter = JSONWriter.ofUTF16(JSONWriter.Feature.WriteBooleanAsNumber);
         for (int i = 0; i < 8096; i++) {
             jsonWriter.writeNameRaw(new char[]{'a'}, 0, 1);
         }

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -830,11 +830,10 @@ public static String fieldName(String methodName, String namingStrategy) {
             case "NeverUseThisValueExceptDefaultValue":
             case "CamelCase": {
                 char c0 = methodName.charAt(0);
-                char c1;
+                char c1 = methodName.length() > 1 ? methodName.charAt(1) : '\0';
                 if (c0 >= 'A' && c0 <= 'Z'
                         && methodName.length() > 1
-                        && (c1 = methodName.charAt(1)) >= 'A'
-                        && c1 <= 'Z') {
+                        && (c1 < 'A' || c1 > 'Z')) {
                     char[] chars = methodName.toCharArray();
                     chars[0] = (char) (c0 + 32);
                     return new String(chars);

File: core/src/main/java/com/alibaba/fastjson2/util/TypeUtils.java
Patch:
@@ -393,8 +393,8 @@ public static <T> T cast(Object obj, Class<T> targetClass) {
         NAME_MAPPINGS.put(new HashMap().keySet().getClass(), "Set");
         NAME_MAPPINGS.put(new LinkedHashMap().keySet().getClass(), "Set");
         NAME_MAPPINGS.put(new TreeMap<>().keySet().getClass(), "Set");
-        NAME_MAPPINGS.put(new ConcurrentHashMap().keySet().getClass(), "Set");
-        NAME_MAPPINGS.put(new ConcurrentSkipListMap().keySet().getClass(), "Set");
+        NAME_MAPPINGS.put(((Map) new ConcurrentHashMap()).keySet().getClass(), "Set"); // bug fix for android9
+        NAME_MAPPINGS.put(((Map) new ConcurrentSkipListMap()).keySet().getClass(), "Set"); // bug fix for android9
         TYPE_MAPPINGS.put("Set", HashSet.class);
 
         NAME_MAPPINGS.put(new HashMap().values().getClass(), "List");

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnum.java
Patch:
@@ -66,7 +66,7 @@ public final void writeEnumJSONB(JSONWriter jsonWriter, Enum e) {
 
     @Override
     public final void writeEnum(JSONWriter jsonWriter, Enum e) {
-        long features = jsonWriter.getFeatures();
+        long features = this.features | jsonWriter.getFeatures();
         boolean usingOrdinal = (features & (JSONWriter.Feature.WriteEnumUsingToString.mask | JSONWriter.Feature.WriteEnumsUsingName.mask)) == 0;
 
         if ((features & JSONWriter.Feature.WriteEnumUsingToString.mask) != 0) {

File: core/src/test/java/com/alibaba/fastjson2/codec/ReflectTypeTest.java
Patch:
@@ -36,7 +36,7 @@ public void test_0() throws Exception {
     public void test_paramType() {
         ParameterizedTypeImpl paramType = new ParameterizedTypeImpl(new Type[]{String.class, String.class}, null, Map.class);
         String str = JSON.toJSONString(paramType);
-        ParameterizedType paramType1 = JSON.parseObject(str, ParameterizedType.class);
+        ParameterizedType paramType1 = JSON.parseObject(str, ParameterizedType.class, JSONReader.Feature.SupportClassForName);
         assertEquals(paramType, paramType1);
     }
 
@@ -47,7 +47,7 @@ public void test_paramType_jsonb() {
 
         JSONBDump.dump(bytes);
 
-        ParameterizedType paramType1 = JSONB.parseObject(bytes, ParameterizedType.class);
+        ParameterizedType paramType1 = JSONB.parseObject(bytes, ParameterizedType.class, JSONReader.Feature.SupportClassForName);
         assertEquals(paramType, paramType1);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1785,7 +1785,8 @@ public Object readObject(JSONReader jsonReader, long features) {
         }
     }
 
-    public static class FromStringReader<T> extends PrimitiveImpl<T> {
+    public static class FromStringReader<T>
+            extends PrimitiveImpl<T> {
         final Function<String, T> creator;
 
         public FromStringReader(Function<String, T> creator) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -93,7 +93,7 @@ public boolean isReference() {
         ch = chars[this.offset];
         while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
             offset++;
-            if (offset>= length) {
+            if (offset >= length) {
                 this.offset = start;
                 this.ch = '{';
                 return false;
@@ -123,7 +123,7 @@ public boolean isReference() {
         ch = chars[this.offset];
         while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
             offset++;
-            if (offset>= length) {
+            if (offset >= length) {
                 this.offset = start;
                 this.ch = '{';
                 return false;
@@ -140,7 +140,7 @@ public boolean isReference() {
         ch = chars[++this.offset];
         while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
             offset++;
-            if (offset>= length) {
+            if (offset >= length) {
                 this.offset = start;
                 this.ch = '{';
                 return false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -5032,7 +5032,7 @@ public boolean isReference() {
         ch = (char) bytes[this.offset];
         while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
             offset++;
-            if (offset>= length) {
+            if (offset >= length) {
                 this.offset = start;
                 this.ch = '{';
                 return false;
@@ -5062,7 +5062,7 @@ public boolean isReference() {
         ch = (char) bytes[this.offset];
         while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
             offset++;
-            if (offset>= length) {
+            if (offset >= length) {
                 this.offset = start;
                 this.ch = '{';
                 return false;
@@ -5079,7 +5079,7 @@ public boolean isReference() {
         ch = (char) bytes[++this.offset];
         while (ch <= ' ' && ((1L << ch) & SPACE) != 0) {
             offset++;
-            if (offset>= length) {
+            if (offset >= length) {
                 this.offset = start;
                 this.ch = '{';
                 return false;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2240.java
Patch:
@@ -16,7 +16,8 @@ public void test_for_issue() throws Exception {
         resultMap.setA(Collections.<Long, Integer>emptyMap());
         resultMap.setB(Collections.<Long, Integer>emptyMap());
         String json = JSON.toJSONString(resultMap);
-        assertTrue("{\"a\":{},\"b\":{}}".equals(json) || "{\"a\":{},\"b\":{\"$ref\":\"a\"}}".equals(json));
+        System.out.println(json);
+        assertTrue("{\"a\":{},\"b\":{}}".equals(json) || "{\"a\":{},\"b\":{\"$ref\":\"$.a\"}}".equals(json));
 
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue_20201016_01.java
Patch:
@@ -20,7 +20,7 @@ public void testToString() {
         String s = JSON.toJSONString(config, SerializerFeature.WriteMapNullValue,
                 SerializerFeature.QuoteFieldNames, SerializerFeature.WriteNullListAsEmpty);
 
-        if ("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"},\"owner\":{\"$ref\":\"creator\"}}".equals(s)) {
+        if ("{\"agent\":null,\"creator\":{\"account\":\"account\",\"name\":\"name\",\"workid\":\"\"},\"owner\":{\"$ref\":\"$.creator\"}}".equals(s)) {
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -877,6 +877,7 @@ public void writeDouble(double value) {
         }
     }
 
+    @Override
     public void writeDoubleArray(double value0, double value1) {
         boolean writeNonStringValueAsString = (context.features & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayReader.java
Patch:
@@ -19,6 +19,7 @@ public Class getObjectClass() {
         return Object[].class;
     }
 
+    @Override
     public Object[] createInstance(Collection collection) {
         Object[] array = new Object[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Double[] array = new Double[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleValueArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         double[] array = new double[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Float[] array = new Float[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatValueArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         float[] array = new float[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16Array.java
Patch:
@@ -12,6 +12,7 @@ class ObjectReaderImplInt16Array
         extends ObjectReaderBaseModule.PrimitiveImpl {
     static final ObjectReaderImplInt16Array INSTANCE = new ObjectReaderImplInt16Array();
 
+    @Override
     public Object createInstance(Collection collection) {
         Short[] array = new Short[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16ValueArray.java
Patch:
@@ -61,6 +61,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         short[] array = new short[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32Array.java
Patch:
@@ -17,6 +17,7 @@ public Class getObjectClass() {
         return Integer[].class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Integer[] array = new Integer[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32ValueArray.java
Patch:
@@ -69,6 +69,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         int[] array = new int[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64Array.java
Patch:
@@ -17,6 +17,7 @@ public Class getObjectClass() {
         return Long[].class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Long[] array = new Long[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64ValueArray.java
Patch:
@@ -80,6 +80,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         long[] array = new long[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8Array.java
Patch:
@@ -104,6 +104,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Byte[] array = new Byte[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8ValueArray.java
Patch:
@@ -74,6 +74,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         byte[] array = new byte[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -37,6 +37,7 @@ public Object createInstance(long features) {
         }
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         if (listType.isInstance(collection)) {
             boolean typeMatch = true;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplNumberArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Number[] array = new Number[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/schema/NumberSchema.java
Patch:
@@ -144,6 +144,7 @@ public ValidateResult validate(Integer value) {
         return validate(value.longValue());
     }
 
+    @Override
     public ValidateResult validate(Float value) {
         if (value == null) {
             return SUCCESS;
@@ -152,6 +153,7 @@ public ValidateResult validate(Float value) {
         return validate(value.doubleValue());
     }
 
+    @Override
     public ValidateResult validate(Double value) {
         if (value == null) {
             return SUCCESS;

File: core/src/main/java/com/alibaba/fastjson2/util/RegexValidator.java
Patch:
@@ -145,6 +145,7 @@ public String validate(String value) {
      * Provide a String representation of this validator.
      * @return A String representation of this validator
      */
+    @Override
     public String toString() {
         StringBuilder buffer = new StringBuilder();
         buffer.append("RegexValidator{");

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/Fastjson1xReaderModule.java
Patch:
@@ -39,6 +39,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             throw new JSONException("read json error");
         }
 
+        @Override
         public Object createInstance(Collection collection) {
             return Collections.emptyList();
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -880,6 +880,7 @@ public void writeDouble(double value) {
         }
     }
 
+    @Override
     public void writeDoubleArray(double value0, double value1) {
         boolean writeNonStringValueAsString = (context.features & JSONWriter.Feature.WriteNonStringValueAsString.mask) != 0;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayReader.java
Patch:
@@ -19,6 +19,7 @@ public Class getObjectClass() {
         return Object[].class;
     }
 
+    @Override
     public Object[] createInstance(Collection collection) {
         Object[] array = new Object[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Double[] array = new Double[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDoubleValueArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         double[] array = new double[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Float[] array = new Float[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatValueArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         float[] array = new float[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16Array.java
Patch:
@@ -12,6 +12,7 @@ class ObjectReaderImplInt16Array
         extends ObjectReaderBaseModule.PrimitiveImpl {
     static final ObjectReaderImplInt16Array INSTANCE = new ObjectReaderImplInt16Array();
 
+    @Override
     public Object createInstance(Collection collection) {
         Short[] array = new Short[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt16ValueArray.java
Patch:
@@ -61,6 +61,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         short[] array = new short[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32Array.java
Patch:
@@ -17,6 +17,7 @@ public Class getObjectClass() {
         return Integer[].class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Integer[] array = new Integer[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt32ValueArray.java
Patch:
@@ -69,6 +69,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         int[] array = new int[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64Array.java
Patch:
@@ -17,6 +17,7 @@ public Class getObjectClass() {
         return Long[].class;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Long[] array = new Long[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64ValueArray.java
Patch:
@@ -80,6 +80,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         long[] array = new long[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8Array.java
Patch:
@@ -104,6 +104,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Byte[] array = new Byte[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt8ValueArray.java
Patch:
@@ -74,6 +74,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         byte[] array = new byte[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -37,6 +37,7 @@ public Object createInstance(long features) {
         }
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         if (listType.isInstance(collection)) {
             boolean typeMatch = true;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplNumberArray.java
Patch:
@@ -60,6 +60,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return array;
     }
 
+    @Override
     public Object createInstance(Collection collection) {
         Number[] array = new Number[collection.size()];
         int i = 0;

File: core/src/main/java/com/alibaba/fastjson2/schema/NumberSchema.java
Patch:
@@ -144,6 +144,7 @@ public ValidateResult validate(Integer value) {
         return validate(value.longValue());
     }
 
+    @Override
     public ValidateResult validate(Float value) {
         if (value == null) {
             return SUCCESS;
@@ -152,6 +153,7 @@ public ValidateResult validate(Float value) {
         return validate(value.doubleValue());
     }
 
+    @Override
     public ValidateResult validate(Double value) {
         if (value == null) {
             return SUCCESS;

File: core/src/main/java/com/alibaba/fastjson2/util/RegexValidator.java
Patch:
@@ -147,6 +147,7 @@ public String validate(String value) {
      * Provide a String representation of this validator.
      * @return A String representation of this validator
      */
+    @Override
     public String toString() {
         StringBuilder buffer = new StringBuilder();
         buffer.append("RegexValidator{");

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/Fastjson1xReaderModule.java
Patch:
@@ -39,6 +39,7 @@ public Object readObject(JSONReader jsonReader, long features) {
             throw new JSONException("read json error");
         }
 
+        @Override
         public Object createInstance(Collection collection) {
             return Collections.emptyList();
         }

File: extension/src/main/java/com/alibaba/fastjson2/support/config/FastJsonConfig.java
Patch:
@@ -57,6 +57,7 @@ public class FastJsonConfig {
      * init param.
      */
     public FastJsonConfig() {
+        this.dateFormat = "yyyy-MM-dd HH:mm:ss";
         this.charset = StandardCharsets.UTF_8;
         this.readerFeatures = new JSONReader.Feature[0];
         this.writerFeatures = new JSONWriter.Feature[0];

File: extension/src/main/java/com/alibaba/fastjson2/support/config/FastJsonConfig.java
Patch:
@@ -58,6 +58,7 @@ public class FastJsonConfig {
      * init param.
      */
     public FastJsonConfig() {
+        this.dateFormat = "yyyy-MM-dd HH:mm:ss";
         this.charset = StandardCharsets.UTF_8;
         this.readerFeatures = new JSONReader.Feature[0];
         this.writerFeatures = new JSONWriter.Feature[0];

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectArrayTypedReader.java
Patch:
@@ -159,6 +159,8 @@ public Object createInstance(Collection collection) {
                 ObjectReader objectReader = JSONFactory.getDefaultObjectReaderProvider().getObjectReader(componentType);
                 if (item instanceof Map) {
                     item = objectReader.createInstance((Map) item);
+                } else if (item instanceof Collection) {
+                    item = objectReader.createInstance((Collection) item);
                 } else if (item != null) {
                     throw new JSONException("component type not match, expect " + componentType.getName() + ", but " + item.getClass());
                 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplFloatValueArray.java
Patch:
@@ -73,7 +73,7 @@ public Object createInstance(Collection collection) {
             } else {
                 Function typeConvert = JSONFactory.getDefaultObjectReaderProvider().getTypeConvert(item.getClass(), float.class);
                 if (typeConvert == null) {
-                    throw new JSONException("can not cast to int " + item.getClass());
+                    throw new JSONException("can not cast to float " + item.getClass());
                 }
                 value = (Float) typeConvert.apply(item);
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInt64ValueArray.java
Patch:
@@ -92,7 +92,7 @@ public Object createInstance(Collection collection) {
             } else {
                 Function typeConvert = JSONFactory.getDefaultObjectReaderProvider().getTypeConvert(item.getClass(), long.class);
                 if (typeConvert == null) {
-                    throw new JSONException("can not cast to byte " + item.getClass());
+                    throw new JSONException("can not cast to long " + item.getClass());
                 }
                 value = (Long) typeConvert.apply(item);
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/package-info.java
Patch:
@@ -1 +0,0 @@
-package com.alibaba.fastjson2.reader;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstrutor.java
Patch:
@@ -142,7 +142,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         T object = createInstanceNoneDefaultConstructor(args);
         if (setterFieldReaders != null) {
             for (FieldReader fieldReader : setterFieldReaders) {
-                Object fieldValue = valueMap.get(fieldReader.getFieldNameHash());
+                Object fieldValue = args.get(fieldReader.getFieldNameHash());
                 fieldReader.accept(object, fieldValue);
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObject.java
Patch:
@@ -33,7 +33,7 @@ static ObjectReader createFormattedObjectReader(Type fieldType, Class fieldClass
                     return JdbcSupport.createDateReader(format, locale);
                 case "byte[]":
                 case "[B":
-                    return new ObjectReaderBaseModule.Inte8ArrayImpl(format);
+                    return new ObjectReaderImplInt8Array(format);
                 default:
                     if (Calendar.class.isAssignableFrom(fieldClass)) {
                         return ObjectReaderImplCalendar.of(format, locale);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader.java
Patch:
@@ -34,7 +34,7 @@ default T createInstance(long features) {
      * @throws UnsupportedOperationException If the method is not overloaded or otherwise
      */
     default T createInstance(Collection collection) {
-        throw new UnsupportedOperationException();
+        throw new UnsupportedOperationException(this.getClass().getName());
     }
 
     default T createInstance(Map map, JSONReader.Feature... features) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -160,7 +160,7 @@ public Object createInstance(Collection collection) {
 
         ObjectReaderProvider provider = JSONFactory.getDefaultObjectReaderProvider();
 
-        Set list = (Set) createInstance(0L);
+        Collection list = (Collection) createInstance(0L);
         for (Object item : collection) {
             Object value = item;
             Class<?> valueClass = value.getClass();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -160,7 +160,7 @@ public Object createInstance(Collection collection) {
 
         ObjectReaderProvider provider = JSONFactory.getDefaultObjectReaderProvider();
 
-        List list = (List) createInstance(0L);
+        Set list = (Set) createInstance(0L);
         for (Object item : collection) {
             Object value = item;
             Class<?> valueClass = value.getClass();
@@ -179,6 +179,8 @@ public Object createInstance(Collection collection) {
                         itemObjectReader = provider.getObjectReader(itemType);
                     }
                     value = itemObjectReader.createInstance((Collection) value);
+                } else if (itemClass.isInstance(value)) {
+                    // skip
                 } else {
                     throw new JSONException("can not convert from " + valueClass + " to " + itemType);
                 }

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue237/Issue237.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring.issues;
+package com.alibaba.fastjson2.spring.issues.issue237;
 
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.support.spring.http.converter.FastJsonHttpMessageConverter;
@@ -68,7 +68,7 @@ public JSONObject test(@RequestBody JSONObject requestBody) {
         }
     }
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.issues")
+    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.issues.issue237")
     @Configuration
     @Order(Ordered.LOWEST_PRECEDENCE + 1)
     @EnableWebMvc

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue256/Issue256.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring.issues;
+package com.alibaba.fastjson2.spring.issues.issue256;
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.support.spring.data.mongodb.GeoJsonReaderModule;

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue237/Issue237.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring.issues;
+package com.alibaba.fastjson2.spring.issues.issue237;
 
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.support.spring.http.converter.FastJsonHttpMessageConverter;
@@ -68,7 +68,7 @@ public JSONObject test(@RequestBody JSONObject requestBody) {
         }
     }
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.issues")
+    @ComponentScan(basePackages = "com.alibaba.fastjson2.spring.issues.issue237")
     @Configuration
     @Order(Ordered.LOWEST_PRECEDENCE + 1)
     @EnableWebMvc

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/issue256/Issue256.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.spring.issues;
+package com.alibaba.fastjson2.spring.issues.issue256;
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.support.spring.data.mongodb.GeoJsonReaderModule;

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/mongodb/GeoJsonPointReader.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.support.spring.mongodb;
+package com.alibaba.fastjson2.support.spring.data.mongodb;
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/mongodb/GeoJsonPolygonReader.java
Patch:
@@ -1,12 +1,11 @@
-package com.alibaba.fastjson2.support.spring.mongodb;
+package com.alibaba.fastjson2.support.spring.data.mongodb;
 
 import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.reader.ObjectReader;
 import com.alibaba.fastjson2.util.Fnv;
 import org.springframework.data.geo.Point;
 import org.springframework.data.mongodb.core.geo.GeoJsonLineString;
-import org.springframework.data.mongodb.core.geo.GeoJsonMultiPoint;
 import org.springframework.data.mongodb.core.geo.GeoJsonPolygon;
 
 import java.util.ArrayList;
@@ -33,7 +32,7 @@ public GeoJsonPolygon readObject(JSONReader jsonReader, long features) {
 
         List<Point> points = new ArrayList<>();
 
-        for (;;) {
+        for (; ; ) {
             if (jsonReader.nextIfObjectEnd()) {
                 break;
             }

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/mongodb/GeoJsonReaderModule.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson2.support.spring.mongodb;
+package com.alibaba.fastjson2.support.spring.data.mongodb;
 
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.annotation.JSONCreator;

File: extension/src/test/java/com/alibaba/fastjson2/spring/issues/Issue256.java
Patch:
@@ -1,7 +1,7 @@
-package com.alibaba.fastjson2.issues;
+package com.alibaba.fastjson2.spring.issues;
 
 import com.alibaba.fastjson2.JSON;
-import com.alibaba.fastjson2.support.spring.mongodb.GeoJsonReaderModule;
+import com.alibaba.fastjson2.support.spring.data.mongodb.GeoJsonReaderModule;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.data.geo.Point;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1520,7 +1520,7 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
     }
 
     public static ObjectReader typedMap(Class mapType, Class instanceType, Type keyType, Type valueType) {
-        if (valueType == String.class) {
+        if ((keyType == null || keyType == String.class) && valueType == String.class) {
             return new ObjectReaderImplMapString(mapType, instanceType, 0);
         }
         return new ObjectReaderImplMapTyped(mapType, instanceType, keyType, valueType, 0, null);

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -78,8 +78,7 @@ static JSONObject parseObject(String text) {
         }
 
         try (JSONReader reader = JSONReader.of(text)) {
-            ObjectReader<JSONObject> objectReader = reader.getObjectReader(JSONObject.class);
-            return objectReader.readObject(reader, 0);
+            return JSONObject.READER.readObject(reader, 0);
         }
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -354,7 +354,8 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
 
     @Override
     public Object readObject(JSONReader jsonReader, long features) {
-        Class objectClass = jsonReader.getContext().getObjectClass();
+        JSONReader.Context context = jsonReader.getContext();
+        Class objectClass = context.getObjectClass();
         Map object;
         if ((mapType == null || mapType == JSONObject.class) && objectClass != null && objectClass != Object.class) {
             try {
@@ -363,7 +364,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                 throw new JSONException("create object instance error, objectClass " + objectClass.getName());
             }
         } else {
-            object = (Map) createInstance(jsonReader.getContext().getFeatures() | features);
+            object = (Map) createInstance(context.getFeatures() | features);
         }
 
         boolean match = jsonReader.nextIfMatch('{');

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1029,7 +1029,8 @@ public long readMillisFromString() {
         String str = readString();
 
         if (str.isEmpty()) {
-            return -1;
+            wasNull = true;
+            return 0;
         }
 
         String utilDateFormat = context.getUtilDateFormat();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplDate.java
Patch:
@@ -116,7 +116,7 @@ private Object readDate(JSONReader jsonReader) {
             millis = zdt.toInstant().toEpochMilli();
         } else {
             millis = jsonReader.readMillisFromString();
-            if (millis == -1) {
+            if (millis == 0 && jsonReader.wasNull()) {
                 return null;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -71,7 +71,9 @@ public Object createInstance(Map input, long features) {
                 }
                 value = valueObjectReader.createInstance((Collection) value);
             } else {
-                throw new JSONException("can not convert from " + valueClass + " to " + valueType);
+                if (!valueClass.isInstance(value)) {
+                    throw new JSONException("can not convert from " + valueClass + " to " + valueType);
+                }
             }
             object.put(fieldName, value);
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstrutor.java
Patch:
@@ -252,7 +252,7 @@ public T readObject(JSONReader jsonReader, long features) {
                         ? Collections.emptyMap()
                         : valueMap);
 
-        if (setterFieldReaders != null) {
+        if (setterFieldReaders != null && valueMap != null) {
             for (int i = 0; i < setterFieldReaders.length; i++) {
                 FieldReader fieldReader = setterFieldReaders[i];
                 Object fieldValue = valueMap.get(fieldReader.getFieldNameHash());

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorLambda.java
Patch:
@@ -83,7 +83,7 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
         final Supplier<T> supplier;
         try {
             supplier = lambdaConstrunctor(objectClass);
-        } catch (IllegalAccessException ignored) {
+        } catch (IllegalAccessException | NoSuchMethodException ignored) {
             return super.createObjectReader(objectClass, objectType, fieldBased, modules);
         } catch (Throwable e) {
             throw new JSONException("get constructor error, objectClass : " + objectClass, e);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorLambda.java
Patch:
@@ -263,7 +263,7 @@ protected <T> FieldReader createFieldReaderLambda(
 
         if (fieldType == char.class) {
             ObjCharConsumer function = (ObjCharConsumer) lambdaFunction(objectClass, fieldClass, method);
-            return new FieldReaderCharValueFunc<>(fieldName, ordinal, null, null, method, function);
+            return new FieldReaderCharValueFunc<>(fieldName, ordinal, method, format, method, function);
         }
 
         if (fieldType == float.class) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalFunc.java
Patch:
@@ -11,8 +11,8 @@ final class FieldReaderBigDecimalFunc<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    public FieldReaderBigDecimalFunc(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null, null);
+    public FieldReaderBigDecimalFunc(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue, Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerFunc.java
Patch:
@@ -11,8 +11,8 @@ final class FieldReaderBigIntegerFunc<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    public FieldReaderBigIntegerFunc(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null, null);
+    public FieldReaderBigIntegerFunc(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue,Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolFunc.java
Patch:
@@ -9,8 +9,8 @@ final class FieldReaderBoolFunc<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    FieldReaderBoolFunc(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null, null);
+    FieldReaderBoolFunc(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue,Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueFunc.java
Patch:
@@ -9,8 +9,8 @@ final class FieldReaderCharValueFunc<T> extends FieldReaderImpl<T> {
     final Method method;
     final ObjCharConsumer<T> function;
 
-    FieldReaderCharValueFunc(String fieldName, int ordinal, Method method, ObjCharConsumer<T> function) {
-        super(fieldName, char.class, char.class, ordinal, 0, null);
+    FieldReaderCharValueFunc(String fieldName, int ordinal, Method method, String format, Object defaultValue, ObjCharConsumer<T> function) {
+        super(fieldName, char.class, char.class, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Func.java
Patch:
@@ -10,8 +10,8 @@ final class FieldReaderInt16Func<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    public FieldReaderInt16Func(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+    public FieldReaderInt16Func(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue,Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Func.java
Patch:
@@ -10,8 +10,8 @@ final class FieldReaderInt32Func<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    FieldReaderInt32Func(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+    FieldReaderInt32Func(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue, Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Func.java
Patch:
@@ -10,8 +10,8 @@ final class FieldReaderInt64Func<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    public FieldReaderInt64Func(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+    public FieldReaderInt64Func(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue,Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Func.java
Patch:
@@ -10,8 +10,8 @@ final class FieldReaderInt8Func<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    FieldReaderInt8Func(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+    FieldReaderInt8Func(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue,Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFunc.java
Patch:
@@ -16,8 +16,8 @@ final class FieldReaderListFunc<T, V>
     final Type itemType;
     private ObjectReader itemObjectReader;
 
-    FieldReaderListFunc(String fieldName, Type fieldType, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldType, fieldClass, ordinal, 0, null);
+    FieldReaderListFunc(String fieldName, Type fieldType, Class<V> fieldClass, int ordinal, String format, Object defaultValue, Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldType, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
         if (fieldType instanceof ParameterizedType) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrFunc.java
Patch:
@@ -22,6 +22,8 @@ final class FieldReaderListStrFunc<T> extends FieldReaderImpl<T>
             , Type fieldType
             , Class fieldClass
             , int ordinal
+            , String format
+            , Object defaultValue
             , Method method
             , BiConsumer<T, List> function) {
         super(fieldName, fieldType, fieldClass, ordinal, 0, null);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderNumberFunc.java
Patch:
@@ -9,8 +9,8 @@ final class FieldReaderNumberFunc<T, V> extends FieldReaderImpl<T> {
     final Method method;
     final BiConsumer<T, V> function;
 
-    public FieldReaderNumberFunc(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+    public FieldReaderNumberFunc(String fieldName, Class<V> fieldClass, int ordinal, String format, Object defaultValue,Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFunc.java
Patch:
@@ -19,10 +19,11 @@ final class FieldReaderObjectFunc<T, V> extends FieldReaderImpl<T> implements Fi
             , int ordinal
             , long features
             , String format
+            , Object defaultValue
             , Method method
             , BiConsumer<T, V> function
     ) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringFunc.java
Patch:
@@ -12,8 +12,8 @@ final class FieldReaderStringFunc<T, V> extends FieldReaderImpl<T> {
     final String format;
     final boolean trim;
 
-    FieldReaderStringFunc(String fieldName, Class<V> fieldClass, int ordinal, long features, String format, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, features, null);
+    FieldReaderStringFunc(String fieldName, Class<V> fieldClass, int ordinal, long features, String format, Object defaultValue,Method method, BiConsumer<T, V> function) {
+        super(fieldName, fieldClass, fieldClass, ordinal, features, format, defaultValue);
         this.method = method;
         this.function = function;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaders.java
Patch:
@@ -57,7 +57,7 @@ public static <T> FieldReader fieldReaderLong(String fieldName, ObjLongConsumer<
     }
 
     public static <T> FieldReader fieldReaderChar(String fieldName, ObjCharConsumer<T> function) {
-        return new FieldReaderCharValueFunc<>(fieldName, 0, null, function);
+        return new FieldReaderCharValueFunc<>(fieldName, 0, null, null, null, function);
     }
 
     public static <T> FieldReader fieldReaderFloat(String fieldName, ObjFloatConsumer<T> function) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -330,7 +330,7 @@ public void writeBase64(byte[] bytes) {
     @Override
     public void writeBigInt(BigInteger value, long features) {
         if (value == null) {
-            writeNull();
+            writeNumberNull();
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8.java
Patch:
@@ -1062,7 +1062,7 @@ public void writeZonedDateTime(ZonedDateTime dateTime) {
     @Override
     public void writeBigInt(BigInteger value, long features) {
         if (value == null) {
-            writeNull();
+            writeNumberNull();
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16.java
Patch:
@@ -107,7 +107,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
                 return false;
             }
             writeFieldName(jsonWriter);
-            jsonWriter.writeNull();
+            jsonWriter.writeNumberNull();
             return true;
         }
 
@@ -119,7 +119,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
     public void writeValue(JSONWriter jsonWriter, T object) {
         Short value = (Short) getFieldValue(object);
         if (value == null) {
-            jsonWriter.writeNull();
+            jsonWriter.writeNumberNull();
             return;
         }
         jsonWriter.writeInt32(value.shortValue());

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32.java
Patch:
@@ -102,7 +102,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         Integer value = (Integer) getFieldValue(object);
 
         if (value == null) {
-            jsonWriter.writeNull();
+            jsonWriter.writeNumberNull();
             return;
         }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8.java
Patch:
@@ -68,7 +68,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
                 return false;
             }
             writeFieldName(jsonWriter);
-            jsonWriter.writeNull();
+            jsonWriter.writeNumberNull();
             return true;
         }
 
@@ -80,7 +80,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
     public void writeValue(JSONWriter jsonWriter, T object) {
         Byte value = (Byte) getFieldValue(object);
         if (value == null) {
-            jsonWriter.writeNull();
+            jsonWriter.writeNumberNull();
             return;
         }
         jsonWriter.writeInt32(value.byteValue());

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueMethod.java
Patch:
@@ -47,6 +47,6 @@ public void accept(T object, long value) {
 
     @Override
     public Object readFieldValue(JSONReader jsonReader) {
-        return jsonReader.readInt32Value();
+        return (byte) jsonReader.readInt32Value();
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/codec/DateTimeCodec.java
Patch:
@@ -22,7 +22,7 @@ public abstract class DateTimeCodec {
 
     protected final boolean formatHasDay;
     protected final boolean formatHasHour;
-    protected final boolean useSimpleFormatter;
+    public final boolean useSimpleFormatter;
 
     public final Locale locale;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -212,7 +212,9 @@ public T createInstance(long features) {
             }
         }
 
-        if ((features & JSONReader.Feature.UseDefaultConstructorAsPossible.mask) != 0 && constructor.getParameterCount() == 0) {
+        if ((features & JSONReader.Feature.UseDefaultConstructorAsPossible.mask) != 0
+                && constructor != null
+                && constructor.getParameterCount() == 0) {
             if (constructor != null) {
                 T object;
                 try {

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -165,7 +165,7 @@ static <T> T parseObject(String text, Class<T> clazz) {
      *
      * @param text  the JSON {@link String} to be parsed
      * @param clazz specify the Class to be converted
-     * @param filter
+     * @param filter specify filter to be enabled
      * @param features features to be enabled in parsing
      * @return Class
      */

File: core/src/main/java/com/alibaba/fastjson2/TypeReference.java
Patch:
@@ -163,7 +163,7 @@ public List<T> parseArray(String text, JSONReader.Feature... features) {
     }
 
     /**
-     * See {@link JSON#parseObject(byte[], Type, JSONReader.Feature...))} for details
+     * See {@link JSON#parseArray(byte[], Type, JSONReader.Feature...)} for details
      *
      * <pre>{@code
      * String utf8Bytes = "[{\"id\":1,\"name\":\"kraity\"}]".getBytes(StandardCharsets.UTF_8);

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/redis/FastJsonJSONBRedisSerializer.java
Patch:
@@ -15,7 +15,7 @@
 public class FastJsonJSONBRedisSerializer<T> implements RedisSerializer<T> {
 
     private FastJsonConfig fastJsonConfig = new FastJsonConfig();
-    private Class<T> type;
+    private final Class<T> type;
 
     public FastJsonJSONBRedisSerializer(Class<T> type) {
         this.type = type;

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/redis/FastJsonRedisSerializer.java
Patch:
@@ -16,7 +16,7 @@
 public class FastJsonRedisSerializer<T> implements RedisSerializer<T> {
 
     private FastJsonConfig fastJsonConfig = new FastJsonConfig();
-    private Class<T> type;
+    private final Class<T> type;
 
     public FastJsonRedisSerializer(Class<T> type) {
         this.type = type;
@@ -50,7 +50,7 @@ public T deserialize(byte[] bytes) throws SerializationException {
             return null;
         }
         try {
-            return (T) JSON.parseObject(bytes, type,
+            return JSON.parseObject(bytes, type,
                     fastJsonConfig.getDateFormat(), fastJsonConfig.getReaderFeatures());
 
         } catch (Exception ex) {

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/redis/GenericFastJsonJSONBRedisSerializer.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class GenericFastJsonJSONBRedisSerializer implements RedisSerializer<Object> {
 
-    private FastJsonConfig fastJsonConfig = new FastJsonConfig();
+    private final FastJsonConfig fastJsonConfig = new FastJsonConfig();
 
     public GenericFastJsonJSONBRedisSerializer() {
         fastJsonConfig.setReaderFeatures(JSONReader.Feature.SupportAutoType);

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/data/redis/GenericFastJsonRedisSerializer.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class GenericFastJsonRedisSerializer implements RedisSerializer<Object> {
 
-    private FastJsonConfig fastJsonConfig = new FastJsonConfig();
+    private final FastJsonConfig fastJsonConfig = new FastJsonConfig();
 
     public GenericFastJsonRedisSerializer() {
         fastJsonConfig.setReaderFeatures(JSONReader.Feature.SupportAutoType);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -1018,6 +1018,7 @@ protected void skipString() {
             if (ch == '\\') {
                 ch = str.charAt(offset++);
                 if (ch == '\\' || ch == '"') {
+                    ch = str.charAt(offset++);
                     continue;
                 }
                 char1(ch);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -1061,6 +1061,7 @@ private void skipString() {
             if (ch == '\\') {
                 ch = chars[offset++];
                 if (ch == '\\' || ch == '"') {
+                    ch = chars[offset++];
                     continue;
                 }
                 ch = char1(ch);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateField.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Locale;
 
 final class FieldReaderDateField<T> extends FieldReaderObjectField<T> {
-    private ObjectReaderBaseModule.UtilDateImpl dateReader;
+    private ObjectReaderImplDate dateReader;
     DateTimeFormatter formatter;
     final Locale locale;
 
@@ -27,8 +27,8 @@ final class FieldReaderDateField<T> extends FieldReaderObjectField<T> {
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null
-                    ? ObjectReaderBaseModule.UtilDateImpl.INSTANCE
-                    : new ObjectReaderBaseModule.UtilDateImpl(format);
+                    ? ObjectReaderImplDate.INSTANCE
+                    : new ObjectReaderImplDate(format, locale);
         }
         return dateReader;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateFunc.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.reader;
 
-import com.alibaba.fastjson2.JSONException;
 import com.alibaba.fastjson2.JSONReader;
 
 import java.lang.reflect.Method;
@@ -44,8 +43,8 @@ public void accept(T object, Object value) {
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null
-                    ? ObjectReaderBaseModule.UtilDateImpl.INSTANCE
-                    : new ObjectReaderBaseModule.UtilDateImpl(format);
+                    ? ObjectReaderImplDate.INSTANCE
+                    : new ObjectReaderImplDate(format, locale);
         }
         return dateReader;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderImpl.java
Patch:
@@ -91,11 +91,11 @@ public ObjectReader getObjectReader(JSONReader jsonReader) {
             String typeName = fieldType.getTypeName();
             switch (typeName) {
                 case "java.sql.Time":
-                    return reader = JdbcSupport.createTimeReader(format);
+                    return reader = JdbcSupport.createTimeReader(format, locale);
                 case "java.sql.Timestamp":
-                    return reader = JdbcSupport.createTimestampReader(format);
+                    return reader = JdbcSupport.createTimestampReader(format, locale);
                 case "java.sql.Date":
-                    return JdbcSupport.createDateReader(format);
+                    return JdbcSupport.createDateReader(format, locale);
                 default:
                     break;
             }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -27,6 +27,7 @@ class FieldReaderListField<T>
             int ordinal,
             long features,
             String format,
+            Locale locale,
             Collection defaultValue,
             Field field) {
 
@@ -37,7 +38,7 @@ class FieldReaderListField<T>
 
         if (format != null) {
             if (itemType == Date.class) {
-                itemReader = new ObjectReaderBaseModule.UtilDateImpl(format);
+                itemReader = new ObjectReaderImplDate(format, locale);
             }
         }
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFieldUF.java
Patch:
@@ -5,6 +5,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
 import java.util.Collection;
+import java.util.Locale;
 
 import static com.alibaba.fastjson2.util.UnsafeUtils.UNSAFE;
 
@@ -19,9 +20,10 @@ final class FieldReaderListFieldUF<T> extends FieldReaderListField<T> {
             int ordinal,
             long features,
             String format,
+            Locale locale,
             Collection defaultValue,
             Field field) {
-        super(fieldName, fieldType, fieldClass, itemType, ordinal, features, format, defaultValue, field);
+        super(fieldName, fieldType, fieldClass, itemType, ordinal, features, format, locale, defaultValue, field);
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterImpl.java
Patch:
@@ -7,11 +7,13 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Type;
+import java.util.Locale;
 
 abstract class FieldWriterImpl<T> implements FieldWriter<T> {
     final String name;
     final int ordinal;
     final String format;
+    final Locale locale = null;
     final long hashCode;
     final byte[] nameWithColonUTF8;
     final char[] nameWithColonUTF16;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -16,7 +16,7 @@ class FieldReaderCollectionMethodReadOnly<T> extends FieldReaderObjectMethod<T>
     private ObjectReader itemReader;
 
     FieldReaderCollectionMethodReadOnly(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, null, setter);
         Type itemType = null;
         if (fieldType instanceof ParameterizedType) {
             Type[] actualTypeArguments = ((ParameterizedType) fieldType).getActualTypeArguments();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateMethod.java
Patch:
@@ -14,11 +14,9 @@
 final class FieldReaderDateMethod<T> extends FieldReaderObjectMethod<T> {
     DateTimeFormatter formatter;
     ObjectReaderBaseModule.UtilDateImpl dateReader;
-    final Locale locale;
 
     FieldReaderDateMethod(String fieldName, Class fieldClass, int ordinal, long features, String format, Locale locale, Method method) {
-        super(fieldName, fieldClass, fieldClass, ordinal, features, format, method);
-        this.locale = locale;
+        super(fieldName, fieldClass, fieldClass, ordinal, features, format, locale, null, method);
     }
 
     @Override

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/CartItemDO2Benchmark.java
Patch:
@@ -42,8 +42,8 @@ private static List<CartItemDO2> newCartsItem() {
     }
 
     @Benchmark
-    public void testCartItem() throws Exception {
-        byte[] bytes3 = JSONB.toBytes(
+    public byte[] testCartItem() throws Exception {
+        return JSONB.toBytes(
                 newCartsItem()
                 , JSONB.symbolTable("myId")
                 , JSONWriter.Feature.BeanToArray

File: benchmark/src/main/java/com/alibaba/fastjson2/benchmark/CartItemDO2Benchmark.java
Patch:
@@ -42,8 +42,8 @@ private static List<CartItemDO2> newCartsItem() {
     }
 
     @Benchmark
-    public void testCartItem() throws Exception {
-        byte[] bytes3 = JSONB.toBytes(
+    public byte[] testCartItem() throws Exception {
+        return JSONB.toBytes(
                 newCartsItem()
                 , JSONB.symbolTable("myId")
                 , JSONWriter.Feature.BeanToArray

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorLambda.java
Patch:
@@ -206,7 +206,7 @@ public <T> FieldReader createFieldReaderMethod(
         if ((method != null && method.getReturnType() != void.class)
                 || !Modifier.isPublic(objectClass.getModifiers())
                 || isExternalClass(objectClass)) {
-            return super.createFieldReaderMethod(objectClass, objectType, fieldName, ordinal, features, format, null, defaultValue, fieldType, fieldClass, method);
+            return super.createFieldReaderMethod(objectClass, objectType, fieldName, ordinal, features, format, locale, defaultValue, fieldType, fieldClass, method);
         }
         return createFieldReaderLambda(objectClass, objectType, fieldName, ordinal, features, format, locale, defaultValue, fieldType, fieldClass, method);
     }

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONField.java
Patch:
@@ -77,4 +77,6 @@
      * @since 1.2.61
      */
     String defaultValue() default "";
+
+    String locale() default "";
 }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -142,12 +142,13 @@ public <T> FieldReader<T> createFieldReader(
             , int ordinal
             , long features
             , String format
+            , Locale locale
             , Object defaultValue
             , Type fieldType
             , Class fieldClass
             , Field field
     ) {
-        return super.createFieldReader(objectClass, objectType, fieldName, ordinal, features, format, defaultValue, fieldType, fieldClass, field);
+        return super.createFieldReader(objectClass, objectType, fieldName, ordinal, features, format, locale, defaultValue, fieldType, fieldClass, field);
     }
 
     private static class FieldReaderInfo {

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathJSONBTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.jsonpath;
 
 import com.alibaba.fastjson2.*;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -18,7 +17,7 @@ public class PathJSONBTest {
     private JSONObject rootObject;
 
     public PathJSONBTest() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_01.json");
+        InputStream is = PathJSONBTest.class.getClassLoader().getResourceAsStream("data/path_01.json");
         str = IOUtils.toString(is, "UTF-8");
         byte[] utf8Bytes = str.getBytes(StandardCharsets.UTF_8);
         rootObject = JSON.parseObject(str);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathJSONBTest2.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.jsonpath;
 
 import com.alibaba.fastjson2.*;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -18,7 +17,7 @@ public class PathJSONBTest2 {
     private JSONObject rootObject;
 
     public PathJSONBTest2() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_02.json");
+        InputStream is = PathJSONBTest2.class.getClassLoader().getResourceAsStream("data/path_02.json");
         str = IOUtils.toString(is, "UTF-8");
         byte[] utf8Bytes = str.getBytes(StandardCharsets.UTF_8);
         rootObject = JSON.parseObject(str);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.jsonpath;
 
 import com.alibaba.fastjson2.*;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -17,7 +16,7 @@ public class PathTest {
     private JSONObject rootObject;
 
     public PathTest() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_01.json");
+        InputStream is = PathTest.class.getClassLoader().getResourceAsStream("data/path_01.json");
         str = IOUtils.toString(is, "UTF-8");
         utf8Bytes = str.getBytes(StandardCharsets.UTF_8);
         rootObject = JSON.parseObject(str);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest2.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.JSONPath;
 import com.alibaba.fastjson2.JSONReader;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -19,7 +18,7 @@ public class PathTest2 {
     private JSONObject rootObject;
 
     public PathTest2() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_02.json");
+        InputStream is = PathTest2.class.getClassLoader().getResourceAsStream("data/path_02.json");
         str = IOUtils.toString(is, "UTF-8");
         rootObject = JSON.parseObject(str);
     }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathJSONBTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.jsonpath;
 
 import com.alibaba.fastjson2.*;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -18,7 +17,7 @@ public class PathJSONBTest {
     private JSONObject rootObject;
 
     public PathJSONBTest() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_01.json");
+        InputStream is = PathJSONBTest.class.getClassLoader().getResourceAsStream("data/path_01.json");
         str = IOUtils.toString(is, "UTF-8");
         byte[] utf8Bytes = str.getBytes(StandardCharsets.UTF_8);
         rootObject = JSON.parseObject(str);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathJSONBTest2.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.jsonpath;
 
 import com.alibaba.fastjson2.*;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -18,7 +17,7 @@ public class PathJSONBTest2 {
     private JSONObject rootObject;
 
     public PathJSONBTest2() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_02.json");
+        InputStream is = PathJSONBTest2.class.getClassLoader().getResourceAsStream("data/path_02.json");
         str = IOUtils.toString(is, "UTF-8");
         byte[] utf8Bytes = str.getBytes(StandardCharsets.UTF_8);
         rootObject = JSON.parseObject(str);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson2.jsonpath;
 
 import com.alibaba.fastjson2.*;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -17,7 +16,7 @@ public class PathTest {
     private JSONObject rootObject;
 
     public PathTest() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_01.json");
+        InputStream is = PathTest.class.getClassLoader().getResourceAsStream("data/path_01.json");
         str = IOUtils.toString(is, "UTF-8");
         utf8Bytes = str.getBytes(StandardCharsets.UTF_8);
         rootObject = JSON.parseObject(str);

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest2.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.JSONPath;
 import com.alibaba.fastjson2.JSONReader;
-import com.alibaba.fastjson_perf.Int2Test;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -19,7 +18,7 @@ public class PathTest2 {
     private JSONObject rootObject;
 
     public PathTest2() throws Exception {
-        InputStream is = Int2Test.class.getClassLoader().getResourceAsStream("data/path_02.json");
+        InputStream is = PathTest2.class.getClassLoader().getResourceAsStream("data/path_02.json");
         str = IOUtils.toString(is, "UTF-8");
         rootObject = JSON.parseObject(str);
     }

File: core/src/test/java/com/alibaba/fastjson2/JSONReaderStrTest.java
Patch:
@@ -6,8 +6,7 @@
 
 import java.util.UUID;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class JSONReaderStrTest {
     @Test
@@ -59,7 +58,7 @@ public void test_UUID() {
         );
 
 
-        assertTrue(
+        assertFalse(
                 reader.nextIfMatch(',')
         );
 

File: core/src/main/java/com/alibaba/fastjson2/filter/PascalNameFilter.java
Patch:
@@ -10,7 +10,6 @@ public String process(Object source, String name, Object value) {
         char[] chars = name.toCharArray();
         chars[0] = Character.toUpperCase(chars[0]);
 
-        String pascalName = new String(chars);
-        return pascalName;
+        return new String(chars);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/filter/PropertyPreFilter.java
Patch:
@@ -3,5 +3,5 @@
 import com.alibaba.fastjson2.JSONWriter;
 
 public interface PropertyPreFilter extends Filter {
-    boolean process(JSONWriter jsonWriter, Object source, String name);
+    boolean process(JSONWriter writer, Object source, String name);
 }

File: core/src/main/java/com/alibaba/fastjson2/filter/SimplePropertyPreFilter.java
Patch:
@@ -52,7 +52,7 @@ public Set<String> getExcludes() {
     }
 
     @Override
-    public boolean process(JSONWriter jsonWriter, Object source, String name) {
+    public boolean process(JSONWriter writer, Object source, String name) {
         if (source == null) {
             return true;
         }
@@ -66,7 +66,7 @@ public boolean process(JSONWriter jsonWriter, Object source, String name) {
         }
 
         if (maxLevel > 0) {
-            if (jsonWriter.level() > maxLevel) {
+            if (writer.level() > maxLevel) {
                 return false;
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/filter/PascalNameFilter.java
Patch:
@@ -10,7 +10,6 @@ public String process(Object source, String name, Object value) {
         char[] chars = name.toCharArray();
         chars[0] = Character.toUpperCase(chars[0]);
 
-        String pascalName = new String(chars);
-        return pascalName;
+        return new String(chars);
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/filter/PropertyPreFilter.java
Patch:
@@ -3,5 +3,5 @@
 import com.alibaba.fastjson2.JSONWriter;
 
 public interface PropertyPreFilter extends Filter {
-    boolean process(JSONWriter jsonWriter, Object source, String name);
+    boolean process(JSONWriter writer, Object source, String name);
 }

File: core/src/main/java/com/alibaba/fastjson2/filter/SimplePropertyPreFilter.java
Patch:
@@ -52,7 +52,7 @@ public Set<String> getExcludes() {
     }
 
     @Override
-    public boolean process(JSONWriter jsonWriter, Object source, String name) {
+    public boolean process(JSONWriter writer, Object source, String name) {
         if (source == null) {
             return true;
         }
@@ -66,7 +66,7 @@ public boolean process(JSONWriter jsonWriter, Object source, String name) {
         }
 
         if (maxLevel > 0) {
-            if (jsonWriter.level() > maxLevel) {
+            if (writer.level() > maxLevel) {
                 return false;
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2049,7 +2049,7 @@ public ObjectReader getObjectReaderAutoType(long hashCode) {
         }
 
         public ObjectReader getObjectReaderAutoType(String typeName, Class expectClass) {
-            if (autoTypeBeforeHandler != null) {
+            if (autoTypeBeforeHandler != null && !ObjectReaderProvider.SAFE_MODE) {
                 Class<?> autoTypeClass = autoTypeBeforeHandler.apply(typeName, expectClass, features);
                 if (autoTypeClass != null) {
                     boolean fieldBased = (features & Feature.FieldBased.mask) != 0;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -23,7 +23,7 @@
 import static com.alibaba.fastjson2.util.TypeUtils.loadClass;
 
 public class ObjectReaderProvider {
-    static final boolean SAFE_MODE;
+    public static final boolean SAFE_MODE;
     static final String[] DENYS;
     static final String[] AUTO_TYPE_ACCEPT_LIST;
 

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/websocket/sockjs/FastjsonSockJsMessageCodec.java
Patch:
@@ -19,10 +19,12 @@ public void setFastJsonConfig(FastJsonConfig fastJsonConfig) {
         this.fastJsonConfig = fastJsonConfig;
     }
 
+    @Override
     public String[] decode(String content) {
         return JSON.parseObject(content, String[].class);
     }
 
+    @Override
     public String[] decodeInputStream(InputStream content) {
         return JSON.parseObject(content, String[].class);
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -813,10 +813,12 @@ public Object clone() {
         return new JSONArray(new ArrayList<Object>(list));
     }
 
+    @Override
     public int hashCode() {
         return this.list.hashCode();
     }
 
+    @Override
     public boolean equals(Object obj) {
         if (this == obj) {
             return true;

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONObject.java
Patch:
@@ -866,6 +866,7 @@ public int hashCode() {
         return this.map.hashCode();
     }
 
+    @Override
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         Class<?>[] parameterTypes = method.getParameterTypes();
         if (parameterTypes.length == 1) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/FastjsonSockJsMessageCodec.java
Patch:
@@ -19,10 +19,12 @@ public void setFastJsonConfig(FastJsonConfig fastJsonConfig) {
         this.fastJsonConfig = fastJsonConfig;
     }
 
+    @Override
     public String[] decode(String content) {
         return JSON.parseObject(content, String[].class);
     }
 
+    @Override
     public String[] decodeInputStream(InputStream content) {
         return JSON.parseObject(content, String[].class);
     }

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/websocket/sockjs/FastjsonSockJsMessageCodec.java
Patch:
@@ -19,10 +19,12 @@ public void setFastJsonConfig(FastJsonConfig fastJsonConfig) {
         this.fastJsonConfig = fastJsonConfig;
     }
 
+    @Override
     public String[] decode(String content) {
         return JSON.parseObject(content, String[].class);
     }
 
+    @Override
     public String[] decodeInputStream(InputStream content) {
         return JSON.parseObject(content, String[].class);
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/FastjsonSockJsMessageCodec.java
Patch:
@@ -19,10 +19,12 @@ public void setFastJsonConfig(FastJsonConfig fastJsonConfig) {
         this.fastJsonConfig = fastJsonConfig;
     }
 
+    @Override
     public String[] decode(String content) {
         return JSON.parseObject(content, String[].class);
     }
 
+    @Override
     public String[] decodeInputStream(InputStream content) {
         return JSON.parseObject(content, String[].class);
     }

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -813,10 +813,12 @@ public Object clone() {
         return new JSONArray(new ArrayList<Object>(list));
     }
 
+    @Override
     public int hashCode() {
         return this.list.hashCode();
     }
 
+    @Override
     public boolean equals(Object obj) {
         if (this == obj) {
             return true;

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONObject.java
Patch:
@@ -866,6 +866,7 @@ public int hashCode() {
         return this.map.hashCode();
     }
 
+    @Override
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         Class<?>[] parameterTypes = method.getParameterTypes();
         if (parameterTypes.length == 1) {

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -54,6 +54,7 @@ public JSONArray(Object... items) {
         }
     }
 
+    @Override
     public Object set(int index, Object element) {
         if (index == -1) {
             add(element);

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -127,6 +127,7 @@ static long parse4Nibbles(String name, int pos) {
         Properties properties = new Properties();
 
         InputStream inputStream = AccessController.doPrivileged(new PrivilegedAction<InputStream>() {
+            @Override
             public InputStream run() {
                 ClassLoader cl = Thread.currentThread().getContextClassLoader();
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -28,6 +28,7 @@ class JSONWriterUTF16 extends JSONWriter {
         }
     }
 
+    @Override
     public void flushTo(java.io.Writer to) {
         try {
             to.write(chars, 0, off);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -156,6 +156,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         return (T) object;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader.setDefault(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -59,6 +59,7 @@ public ObjectReader2(
         hasDefaultValue = first.getDefaultValue() != null || second.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         first.setDefault(object);
         second.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -74,6 +74,7 @@ class ObjectReader3<T> extends ObjectReaderBean<T> {
         ;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -84,6 +84,7 @@ final class ObjectReader4<T> extends ObjectReaderBean<T> {
                 || fieldReader3.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -96,6 +96,7 @@ final class ObjectReader5<T> extends ObjectReaderBean<T> {
                 || fieldReader4.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -108,6 +108,7 @@ final class ObjectReader6<T> extends ObjectReaderBean<T> {
                 || fieldReader5.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -183,6 +183,7 @@ protected Object createInstance0(long features) throws InstantiationException {
         return creator.get();
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         for (FieldReader fieldReader : fieldReaders) {
             Object defaultValue = fieldReader.getDefaultValue();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -73,6 +73,7 @@ protected void initDefaultValue(T object) {
 
     }
 
+    @Override
     public T readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return readJSONBObject(jsonReader, features);

File: core/src/main/java/com/alibaba/fastjson2/JSONArray.java
Patch:
@@ -54,6 +54,7 @@ public JSONArray(Object... items) {
         }
     }
 
+    @Override
     public Object set(int index, Object element) {
         if (index == -1) {
             add(element);

File: core/src/main/java/com/alibaba/fastjson2/JSONFactory.java
Patch:
@@ -127,6 +127,7 @@ static long parse4Nibbles(String name, int pos) {
         Properties properties = new Properties();
 
         InputStream inputStream = AccessController.doPrivileged(new PrivilegedAction<InputStream>() {
+            @Override
             public InputStream run() {
                 ClassLoader cl = Thread.currentThread().getContextClassLoader();
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16.java
Patch:
@@ -28,6 +28,7 @@ class JSONWriterUTF16 extends JSONWriter {
         }
     }
 
+    @Override
     public void flushTo(java.io.Writer to) {
         try {
             to.write(chars, 0, off);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -156,6 +156,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         return (T) object;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader.setDefault(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -59,6 +59,7 @@ public ObjectReader2(
         hasDefaultValue = first.getDefaultValue() != null || second.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         first.setDefault(object);
         second.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -74,6 +74,7 @@ class ObjectReader3<T> extends ObjectReaderBean<T> {
         ;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -84,6 +84,7 @@ final class ObjectReader4<T> extends ObjectReaderBean<T> {
                 || fieldReader3.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -96,6 +96,7 @@ final class ObjectReader5<T> extends ObjectReaderBean<T> {
                 || fieldReader4.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -108,6 +108,7 @@ final class ObjectReader6<T> extends ObjectReaderBean<T> {
                 || fieldReader5.getDefaultValue() != null;
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         fieldReader0.setDefault(object);
         fieldReader1.setDefault(object);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -183,6 +183,7 @@ protected Object createInstance0(long features) throws InstantiationException {
         return creator.get();
     }
 
+    @Override
     protected void initDefaultValue(T object) {
         for (FieldReader fieldReader : fieldReaders) {
             Object defaultValue = fieldReader.getDefaultValue();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBean.java
Patch:
@@ -73,6 +73,7 @@ protected void initDefaultValue(T object) {
 
     }
 
+    @Override
     public T readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return readJSONBObject(jsonReader, features);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -686,7 +686,8 @@ public ObjectReader getObjectReader(Type objectType, boolean fieldBased) {
         }
 
         if (objectReader == null) {
-            objectReader = getCreator().createObjectReader(objectClass, objectType, fieldBased, modules);
+            ObjectReaderCreator creator = getCreator();
+            objectReader = creator.createObjectReader(objectClass, objectType, fieldBased, modules);
         }
 
         ObjectReader previous = getPreviousObjectReader(fieldBased, objectType, objectReader);

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONObject.java
Patch:
@@ -201,10 +201,12 @@ public <T> T getObject(String key, Class<T> clazz, Feature... features) {
         }
 
         String json = JSON.toJSONString(obj);
-        ObjectReader objectReader = provider.getObjectReader(clazz);
         JSONReader jsonReader = JSONReader.of(json);
         config(jsonReader.getContext(), features);
 
+        boolean fieldBased = jsonReader.getContext().isEnable(JSONReader.Feature.FieldBased);
+        ObjectReader objectReader = provider.getObjectReader(clazz, fieldBased);
+
         String defaultDateFormat = JSON.DEFFAULT_DATE_FORMAT;
         if (!"yyyy-MM-dd HH:mm:ss".equals(defaultDateFormat)) {
             jsonReader

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -27,9 +27,10 @@ class FieldReaderListField<T>
             int ordinal,
             long features,
             String format,
+            Collection defaultValue,
             Field field) {
 
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, field);
         this.itemType = itemType;
         this.fieldClassHash = fieldClass == null ? 0 : Fnv.hashCode64(TypeUtils.getTypeName(fieldClass));
         this.fieldObjectReader = ObjectReaderImplList.of(fieldType, fieldClass, features);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFieldUF.java
Patch:
@@ -4,6 +4,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
+import java.util.Collection;
 
 import static com.alibaba.fastjson2.util.UnsafeUtils.UNSAFE;
 
@@ -18,8 +19,9 @@ final class FieldReaderListFieldUF<T> extends FieldReaderListField<T> {
             int ordinal,
             long features,
             String format,
+            Collection defaultValue,
             Field field) {
-        super(fieldName, fieldType, fieldClass, itemType, ordinal, features, format, field);
+        super(fieldName, fieldType, fieldClass, itemType, ordinal, features, format, defaultValue, field);
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/codec/FieldInfo.java
Patch:
@@ -10,6 +10,7 @@ public class FieldInfo {
     public Class<?> writeUsing;
     public boolean fieldClassMixIn;
     public boolean isTransient;
+    public String defaultValue;
 
     public void init() {
         fieldName = null;
@@ -21,6 +22,7 @@ public void init() {
         writeUsing = null;
         fieldClassMixIn = false;
         isTransient = false;
+        defaultValue = null;
     }
 
    public static final long VALUE_MASK = 1L << 48;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanFieldReadOnly.java
Patch:
@@ -11,8 +11,8 @@ final class FieldReaderAtomicBooleanFieldReadOnly<T>
 
     final Field field;
 
-    FieldReaderAtomicBooleanFieldReadOnly(String fieldName, Class fieldClass, int ordinal, Field field) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+    FieldReaderAtomicBooleanFieldReadOnly(String fieldName, Class fieldClass, int ordinal, String format, AtomicBoolean defaultValue, Field field) {
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, format, defaultValue);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanMethodReadOnly.java
Patch:
@@ -13,7 +13,7 @@ final class FieldReaderAtomicBooleanMethodReadOnly<T>
     final Method method;
 
     FieldReaderAtomicBooleanMethodReadOnly(String fieldName, Class fieldClass, int ordinal, Method method) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, null, null);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerArrayReadOnly.java
Patch:
@@ -10,7 +10,7 @@ final class FieldReaderAtomicIntegerArrayReadOnly<T> extends FieldReaderImpl<T>
     final Method method;
 
     FieldReaderAtomicIntegerArrayReadOnly(String fieldName, Class fieldType, int ordinal, Method method) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null);
+        super(fieldName, fieldType, fieldType, ordinal, 0, null, null);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerMethodReadOnly.java
Patch:
@@ -10,7 +10,7 @@ class FieldReaderAtomicIntegerMethodReadOnly<T> extends FieldReaderImpl<T> imple
     final Method method;
 
     FieldReaderAtomicIntegerMethodReadOnly(String fieldName, Class fieldType, int ordinal, Method method) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null);
+        super(fieldName, fieldType, fieldType, ordinal, 0, null, null);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongArrayReadOnly.java
Patch:
@@ -10,7 +10,7 @@ final class FieldReaderAtomicLongArrayReadOnly<T> extends FieldReaderImpl<T> {
     final Method method;
 
     FieldReaderAtomicLongArrayReadOnly(String fieldName, Class fieldType, int ordinal, Method method) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null);
+        super(fieldName, fieldType, fieldType, ordinal, 0, null, null);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongReadOnly.java
Patch:
@@ -10,7 +10,7 @@ final class FieldReaderAtomicLongReadOnly<T> extends FieldReaderImpl<T> implemen
     protected final Method method;
 
     FieldReaderAtomicLongReadOnly(String fieldName, Class fieldType, int ordinal, Method method) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null);
+        super(fieldName, fieldType, fieldType, ordinal, 0, null, null);
         this.method = method;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReference.java
Patch:
@@ -9,7 +9,7 @@ public abstract class FieldReaderAtomicReference<T> extends FieldReaderImpl<T> {
     final Type referenceType;
 
     public FieldReaderAtomicReference(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null);
 
         Type referenceType = null;
         if (fieldType instanceof ParameterizedType) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceField.java
Patch:
@@ -13,8 +13,8 @@ final class FieldReaderAtomicReferenceField<T>
     final Field field;
     final boolean readOnly;
 
-    FieldReaderAtomicReferenceField(String fieldName, Type fieldType, Class fieldClass, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldClass, ordinal, 0, null);
+    FieldReaderAtomicReferenceField(String fieldName, Type fieldType, Class fieldClass, int ordinal, String format, Field field) {
+        super(fieldName, fieldType, fieldClass, ordinal, 0, format);
         this.field = field;
 
         readOnly = Modifier.isFinal(field.getModifiers());

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalField.java
Patch:
@@ -8,8 +8,8 @@
 import java.math.BigDecimal;
 
 final class FieldReaderBigDecimalField<T> extends FieldReaderObjectField<T> {
-    FieldReaderBigDecimalField(String fieldName, Class fieldType, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, field);
+    FieldReaderBigDecimalField(String fieldName, Class fieldType, int ordinal, long features, String format, BigDecimal defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalFunc.java
Patch:
@@ -12,7 +12,7 @@ final class FieldReaderBigDecimalFunc<T, V> extends FieldReaderImpl<T> {
     final BiConsumer<T, V> function;
 
     public FieldReaderBigDecimalFunc(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, null, null);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalMethod.java
Patch:
@@ -9,8 +9,8 @@
 import java.math.BigDecimal;
 
 final class FieldReaderBigDecimalMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderBigDecimalMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method method) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, method);
+    FieldReaderBigDecimalMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, BigDecimal defaultValue, Method method) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerField.java
Patch:
@@ -8,8 +8,8 @@
 import java.math.BigInteger;
 
 final class FieldReaderBigIntegerField<T> extends FieldReaderObjectField<T> {
-    FieldReaderBigIntegerField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderBigIntegerField(String fieldName, Class fieldType, int ordinal, String format, BigInteger defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerFunc.java
Patch:
@@ -12,7 +12,7 @@ final class FieldReaderBigIntegerFunc<T, V> extends FieldReaderImpl<T> {
     final BiConsumer<T, V> function;
 
     public FieldReaderBigIntegerFunc(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, null, null);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerMethod.java
Patch:
@@ -9,8 +9,8 @@
 import java.math.BigInteger;
 
 final class FieldReaderBigIntegerMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderBigIntegerMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method method) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, method);
+    FieldReaderBigIntegerMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, BigInteger defaultValue, Method method) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, method);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderBoolField<T> extends FieldReaderObjectField<T> {
-    FieldReaderBoolField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderBoolField(String fieldName, Class fieldType, int ordinal, Boolean defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, null, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolFunc.java
Patch:
@@ -10,7 +10,7 @@ final class FieldReaderBoolFunc<T, V> extends FieldReaderImpl<T> {
     final BiConsumer<T, V> function;
 
     FieldReaderBoolFunc(String fieldName, Class<V> fieldClass, int ordinal, Method method, BiConsumer<T, V> function) {
-        super(fieldName, fieldClass, fieldClass, ordinal, 0, null);
+        super(fieldName, fieldClass, fieldClass, ordinal, 0, null, null);
         this.method = method;
         this.function = function;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolMethod.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderBoolMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderBoolMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderBoolMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Boolean defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderBoolValueField<T> extends FieldReaderObjectField<T> {
-    FieldReaderBoolValueField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderBoolValueField(String fieldName, Class fieldType, int ordinal, Boolean defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, null, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueMethod.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderBoolValueMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderBoolValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderBoolValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Boolean defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionFieldReadOnly.java
Patch:
@@ -10,7 +10,7 @@
 
 final class FieldReaderCollectionFieldReadOnly<T> extends FieldReaderObjectField<T> implements FieldReaderReadOnly<T> {
     FieldReaderCollectionFieldReadOnly(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateField.java
Patch:
@@ -16,8 +16,8 @@ final class FieldReaderDateField<T> extends FieldReaderObjectField<T> {
     static final AtomicReferenceFieldUpdater<FieldReaderDateField, SimpleDateFormat> FORMATTER_UPDATER
             = AtomicReferenceFieldUpdater.newUpdater(FieldReaderDateField.class, SimpleDateFormat.class, "formatter");
 
-    FieldReaderDateField(String fieldName, Class fieldType, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, field);
+    FieldReaderDateField(String fieldName, Class fieldType, int ordinal, long features, String format, Date defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderDoubleField<T> extends FieldReaderObjectField<T> {
-    FieldReaderDoubleField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderDoubleField(String fieldName, Class fieldType, int ordinal, String format, Double defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleMethod.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderDoubleMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderDoubleMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderDoubleMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Double defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderDoubleValueField<T> extends FieldReaderObjectField<T> {
-    FieldReaderDoubleValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, field);
+    FieldReaderDoubleValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Double defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueMethod.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderDoubleValueMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderDoubleValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderDoubleValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Double defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderFloatField<T> extends FieldReaderObjectField<T> {
-    FieldReaderFloatField(String fieldName, Class fieldType, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, field);
+    FieldReaderFloatField(String fieldName, Class fieldType, int ordinal, long features, String format, Float defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatMethod.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderFloatMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderFloatMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderFloatMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Float defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderFloatValueField<T> extends FieldReaderObjectField<T> {
-    FieldReaderFloatValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, field);
+    FieldReaderFloatValueField(String fieldName, Class fieldType, int ordinal, long features, String format, Float defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueMethod.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderFloatValueMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderFloatValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderFloatValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Float defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Field.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt16Field<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt16Field(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt16Field(String fieldName, Class fieldType, int ordinal, String format, Short defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Method.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt16Method<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt16Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt16Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Short defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16ValueField.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt16ValueField<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt16ValueField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt16ValueField(String fieldName, Class fieldType, int ordinal, String format, Short defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16ValueMethod.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt16ValueMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt16ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt16ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Short defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Field.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt32Field<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt32Field(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt32Field(String fieldName, Class fieldType, int ordinal, String format, Integer defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Method.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt32Method<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt32Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt32Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Integer defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueArrayFinalField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt32ValueArrayFinalField<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt32ValueArrayFinalField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt32ValueArrayFinalField(String fieldName, Class fieldType, int ordinal, String format, int[] defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueField.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt32ValueField<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt32ValueField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt32ValueField(String fieldName, Class fieldType, int ordinal, String format, Integer defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueMethod.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt32ValueMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt32ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt32ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Integer defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Field.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt64Field<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt64Field(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt64Field(String fieldName, Class fieldType, int ordinal, String format, Long defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Method.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt64Method<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt64Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt64Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Long defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueArrayFinalField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt64ValueArrayFinalField<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt64ValueArrayFinalField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt64ValueArrayFinalField(String fieldName, Class fieldType, int ordinal, String format, long[] defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueField.java
Patch:
@@ -6,8 +6,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt64ValueField<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt64ValueField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt64ValueField(String fieldName, Class fieldType, int ordinal, String format, Long defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueMethod.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt64ValueMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt64ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt64ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Long defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Field.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt8Field<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt8Field(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt8Field(String fieldName, Class fieldType, int ordinal, String format, Byte defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, format, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Method.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt8Method<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt8Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt8Method(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Byte defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueField.java
Patch:
@@ -7,8 +7,8 @@
 import java.lang.reflect.Field;
 
 final class FieldReaderInt8ValueField<T> extends FieldReaderObjectField<T> {
-    FieldReaderInt8ValueField(String fieldName, Class fieldType, int ordinal, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
+    FieldReaderInt8ValueField(String fieldName, Class fieldType, int ordinal, Byte defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, 0, null, defaultValue, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueMethod.java
Patch:
@@ -8,8 +8,8 @@
 import java.lang.reflect.Type;
 
 final class FieldReaderInt8ValueMethod<T> extends FieldReaderObjectMethod<T> {
-    FieldReaderInt8ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderInt8ValueMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Byte defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -29,7 +29,7 @@ class FieldReaderListField<T>
             String format,
             Field field) {
 
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, field);
         this.itemType = itemType;
         this.fieldClassHash = fieldClass == null ? 0 : Fnv.hashCode64(TypeUtils.getTypeName(fieldClass));
         this.fieldObjectReader = ObjectReaderImplList.of(fieldType, fieldClass, features);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrField.java
Patch:
@@ -8,7 +8,7 @@ class FieldReaderListStrField<T>
         implements FieldReaderList<T, Object> {
 
     FieldReaderListStrField(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -12,7 +12,7 @@ class FieldReaderMapFieldReadOnly<T> extends FieldReaderObjectField<T> implement
     volatile ObjectReader itemReader;
 
     FieldReaderMapFieldReadOnly(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, field);
     }
 
     @Override

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectField.java
Patch:
@@ -16,8 +16,8 @@ class FieldReaderObjectField<T> extends FieldReaderImpl<T> {
     protected final Field field;
     protected ObjectReader fieldObjectReader;
 
-    FieldReaderObjectField(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType == null ? field.getType() : fieldType, fieldClass, ordinal, features, format);
+    FieldReaderObjectField(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Object defaultValue, Field field) {
+        super(fieldName, fieldType == null ? field.getType() : fieldType, fieldClass, ordinal, features, format, defaultValue);
         this.field = field;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFieldUF.java
Patch:
@@ -10,8 +10,8 @@
 final class FieldReaderObjectFieldUF extends FieldReaderObjectField {
     final long fieldOffset;
 
-    FieldReaderObjectFieldUF(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
+    FieldReaderObjectFieldUF(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Object defaultValue, Field field) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, field);
 
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringField.java
Patch:
@@ -8,8 +8,8 @@
 final class FieldReaderStringField<T> extends FieldReaderObjectField<T> {
     final boolean trim;
 
-    FieldReaderStringField(String fieldName, Class fieldType, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldType, ordinal, features, format, field);
+    FieldReaderStringField(String fieldName, Class fieldType, int ordinal, long features, String format, String defaultValue, Field field) {
+        super(fieldName, fieldType, fieldType, ordinal, features, format, defaultValue, field);
         trim = "trim".equals(format);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringMethod.java
Patch:
@@ -9,8 +9,8 @@
 final class FieldReaderStringMethod<T> extends FieldReaderObjectMethod<T> {
     final boolean trim;
 
-    FieldReaderStringMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Method setter) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, setter);
+    FieldReaderStringMethod(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, String defaultValue, Method setter) {
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, defaultValue, setter);
         trim = "trim".equals(format);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FielderReaderImplMapFieldReadOnly.java
Patch:
@@ -13,7 +13,7 @@ class FielderReaderImplMapFieldReadOnly<T> extends FieldReaderObjectField<T> imp
     volatile ObjectReader itemReader;
 
     FielderReaderImplMapFieldReadOnly(String fieldName, Type fieldType, Class fieldClass, int ordinal, long features, String format, Field field) {
-        super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
+        super(fieldName, fieldType, fieldClass, ordinal, features, format, null, field);
     }
 
     @Override

File: core/src/test/java/com/alibaba/fastjson2/support/sql/JdbcTimeTest.java
Patch:
@@ -141,7 +141,7 @@ public void test_date() {
         d.value = new java.sql.Date(millis);
         String str = JSON.toJSONString(d);
         D d1 = JSON.parseObject(str, D.class);
-        assertEquals(d.value, d1.value);
+        assertEquals(d.value.getTime(), d1.value.getTime());
 
         byte[] bytes = JSONB.toBytes(d);
         D d2 = JSONB.parseObject(bytes, D.class);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_7_gzip_hex.java
Patch:
@@ -23,8 +23,6 @@ public void test_0() throws Exception {
 
         String json = JSON.toJSONString(model);
 
-        assertEquals("{\"value\":\"H4sIAAAAAAAAAO3IsRGAIBAAsJVeUE5LBBXcfyC3sErKxJLyupX9iHq2ft3PmG8455xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84555z7/T6powiAIE4AAA==\"}", json);
-
         Model model1 = JSON.parseObject(json, Model.class);
         assertArrayEquals(model.value, model1.value);
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -1470,6 +1470,7 @@ public void skipValue() {
                             }
                             ch = chars[offset];
                         }
+                        comma = true;
                         offset++;
                         break;
                     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -1432,6 +1432,7 @@ public void skipValue() {
                             }
                             ch = chars[offset];
                         }
+                        comma = true;
                         offset++;
                         break;
                     }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/ByteArrayFieldTest_6_gzip.java
Patch:
@@ -5,7 +5,6 @@
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
-import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ByteArrayFieldTest_6_gzip {
 
@@ -23,8 +22,6 @@ public void test_0() throws Exception {
 
         String json = JSON.toJSONString(model);
 
-        assertEquals("{\"value\":\"H4sIAAAAAAAAAO3IsRGAIBAAsJVeUE5LBBXcfyC3sErKxJLyupX9iHq2ft3PmG8455xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84555z7/T6powiAIE4AAA==\"}", json);
-
         Model model1 = JSON.parseObject(json, Model.class);
         assertArrayEquals(model.value, model1.value);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3200/Issue3293.java
Patch:
@@ -15,9 +15,8 @@ public void test_for_issue() throws Exception {
         JSONValidator jv = JSONValidator.from("{\"a\"}");
         Assertions.assertFalse(jv.validate());
 
-        jv = JSONValidator.from("113{}[]");
-        jv.setSupportMultiValue(false);
-        Assertions.assertFalse(jv.validate());
+        jv = JSONValidator.from("113");
+        Assertions.assertTrue(jv.validate());
         Assertions.assertEquals(JSONValidator.Type.Value, jv.getType());
 
         jv = JSONValidator.from("{\"a\":\"12333\"}");

File: core/src/test/java/com/alibaba/fastjson2/JSONObjectTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson2_vo.Integer1;
 import org.junit.jupiter.api.Test;
 
+import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.math.BigDecimal;
 import java.math.BigInteger;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -92,6 +92,8 @@ public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
                 switch (className) {
                     case "java.sql.Time":
                         return JdbcSupport.createTimeWriter(format);
+                    case "java.sql.Date":
+                        return new ObjectWriterImplDate(format);
                     case "java.sql.Timestamp":
                         return JdbcSupport.createTimestampWriter(format);
                     case "org.joda.time.LocalDate":

File: core/src/test/java/com/alibaba/fastjson2/codec/RefTest7.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.util.JSONBDump;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
@@ -43,8 +44,8 @@ public void test_ref_0() {
         assertNotNull(bean2);
         assertNotNull(bean2.values);
 
-        Assert.assertSame(bean.values.getClass(), bean2.values.getClass());
-        Assert.assertSame(bean2.values1.entrySet().iterator().next().getValue(), bean2.values.entrySet().iterator().next().getValue());
+        Assertions.assertSame(bean.values.getClass(), bean2.values.getClass());
+        Assertions.assertSame(bean2.values1.entrySet().iterator().next().getValue(), bean2.values.entrySet().iterator().next().getValue());
     }
 
     public static class Bean {

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue27.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import com.alibaba.fastjson2.JSON;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
@@ -16,7 +17,7 @@ public void test_parse() {
         hashMap.put("1",a);
 
         String string = JSON.toJSONString(hashMap);
-        assertEquals("{\"1\":\"\\\\\"}", string);
+        Assertions.assertEquals("{\"1\":\"\\\\\"}", string);
         JSON.parse(string);
     }
 
@@ -27,7 +28,7 @@ public void test_parse1() {
         hashMap.put("1",a);
 
         String string = JSON.toJSONString(hashMap);
-        assertEquals("{\"1\":\"\\\"\"}", string);
+        Assertions.assertEquals("{\"1\":\"\\\"\"}", string);
         JSON.parse(string);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue81.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.issues;
 
 import com.alibaba.fastjson2.JSON;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.Assert.assertFalse;
@@ -14,9 +15,9 @@ public void test_issue() {
         String value = "1111";
         assertTrue(JSON.isValid(jsonArrayStr));
         assertTrue(JSON.isValid(jsonObjectStr));
-        assertFalse(JSON.isValidArray(jsonObjectStr));
+        Assertions.assertFalse(JSON.isValidArray(jsonObjectStr));
         assertTrue(JSON.isValidArray(jsonArrayStr));
         assertTrue(JSON.isValid(value));
-        assertFalse(JSON.isValidArray(value));
+        Assertions.assertFalse(JSON.isValidArray(value));
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONPath_4.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONPath;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class JSONPath_4 {
@@ -13,6 +14,6 @@ public void test_path() throws Exception {
         Object x = JSON.parse(a);
         JSONPath.set(x, "$.test", "abc");
         Object o = JSONPath.eval(x, "$.10\\.0\\.1\\.1");
-        Assert.assertEquals("haha", o);
+        Assertions.assertEquals("haha", o);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1300.java
Patch:
@@ -4,10 +4,10 @@
 import com.alibaba.fastjson2.annotation.JSONCreator;
 import com.alibaba.fastjson2.annotation.JSONField;
 import com.alibaba.fastjson2.util.TypeUtils;
-import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 /**
  * Created by wenshao on 01/07/2017.
@@ -28,8 +28,8 @@ public void testFullJSON() {
     @Test
     public void testEmptyJSON() {
         City object = TypeUtils.cast(new JSONObject(), City.class);
-        Assert.assertEquals(null, object.name);
-        Assert.assertEquals(0, object.code);
+        assertNull(object.name);
+        assertEquals(0, object.code);
     }
 
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/ColorTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.awt.*;
@@ -13,14 +14,14 @@ public void test_color() throws Exception {
         Color color = Color.RED;
         String text = JSON.toJSONString(color);
         Color color2 = JSON.parseObject(text, Color.class);
-        Assert.assertEquals(color, color2);
+        Assertions.assertEquals(color, color2);
     }
 
     @Test
     public void test_color_2() throws Exception {
         Color color = Color.RED;
         String text = "{\"r\":" + color.getRed() + ",\"g\":" + color.getGreen() + ",\"b\":" + color.getBlue() +"}";
         Color color2 = JSON.parseObject(text, Color.class);
-        Assert.assertEquals(color, color2);
+        Assertions.assertEquals(color, color2);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/FontTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.awt.*;
@@ -16,7 +17,7 @@ public void test_color() throws Exception {
 
             Font font2 = JSON.parseObject(text, Font.class);
 
-            Assert.assertEquals(font, font2);
+            Assertions.assertEquals(font, font2);
         }
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/FontTest2.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.awt.*;
@@ -18,7 +19,7 @@ public void test_color() throws Exception {
 
             Font font2 = (Font) JSON.parse(text, Feature.SupportAutoType);
 
-            Assert.assertEquals(font, font2);
+            Assertions.assertEquals(font, font2);
         }
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest0.java
Patch:
@@ -2,16 +2,16 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest0 {
     @Test
     public void test_0() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest0_private.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest0_private {
@@ -11,8 +11,8 @@ public class BuilderTest0_private {
     public void test_0() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest1.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest1 {
@@ -11,8 +12,8 @@ public class BuilderTest1 {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest1_private.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest1_private {
@@ -11,8 +12,8 @@ public class BuilderTest1_private {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest2.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONPOJOBuilder;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest2 {
@@ -12,8 +13,8 @@ public class BuilderTest2 {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest2_private.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONPOJOBuilder;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest2_private {
@@ -12,8 +13,8 @@ public class BuilderTest2_private {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest3.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONPOJOBuilder;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest3 {
@@ -12,8 +13,8 @@ public class BuilderTest3 {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest3_private.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONField;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest3_private {
@@ -12,8 +13,8 @@ public class BuilderTest3_private {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest_error.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.JSONException;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest_error {
@@ -16,7 +17,7 @@ public void test_0() throws Exception {
         } catch (JSONException | com.alibaba.fastjson2.JSONException ex) {
             error = ex;
         }
-        Assert.assertNotNull(error);
+        Assertions.assertNotNull(error);
     }
 
     @JSONType(builder = VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest_error_private.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.JSONException;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest_error_private {
@@ -16,7 +17,7 @@ public void test_0() throws Exception {
         } catch (JSONException | com.alibaba.fastjson2.JSONException ex) {
             error = ex;
         }
-        Assert.assertNotNull(error);
+        Assertions.assertNotNull(error);
     }
 
     @JSONType(builder = VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest12_t.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -25,8 +26,7 @@ public void test_1() throws Exception {
         String text = JSON.toJSONString(object);
         SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
-        Assert.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}",
-                            text);
+        Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
 
         Entity object2 = JSON.parseObject(text, Entity.class);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest6.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -27,7 +28,7 @@ public void test_0() throws Exception {
 		String text = JSON.toJSONStringWithDateFormat(object, "yyyy-MM-dd");
 		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
-		Assert.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
+		Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
 	}
 
 	public static class Entity {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest7.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -28,7 +29,7 @@ public void test_0() throws Exception {
 		String text = JSON.toJSONStringWithDateFormat(object, "yyyy-MM-dd");
 		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
-		Assert.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
+		Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
 	}
 
 	public static class Entity {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest1.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -18,13 +19,13 @@ public void test_date() throws Exception {
         model.date = new Date(1471939192128L);
 
         String text = JSON.toJSONString(model);
-        Assert.assertEquals("{\"date\":1471939192128}", text);
+        Assertions.assertEquals("{\"date\":1471939192128}", text);
 
         Map<String, Object> map = new HashMap<String, Object>();
         map.put("date", new Date(1471939192128L));
 
         String text2 = JSON.toJSONString(map);
-        Assert.assertEquals("{\"date\":1471939192128}", text);
+        Assertions.assertEquals("{\"date\":1471939192128}", text);
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -12,7 +13,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600000)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600000L, model.date.getTime());
+        Assertions.assertEquals(1461081600000L, model.date.getTime());
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_1.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -13,7 +14,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600000)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600000L, model.date.getTime());
+        Assertions.assertEquals(1461081600000L, model.date.getTime());
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_2.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -13,7 +14,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600000+0500)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600000L, model.date.getTime());
+        Assertions.assertEquals(1461081600000L, model.date.getTime());
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_3.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -13,7 +14,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600321+0500)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600321L, model.date.getTime());
+        Assertions.assertEquals(1461081600321L, model.date.getTime());
     }
 
     private static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_4.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -14,7 +15,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600321+5000)/\"}";
 
         JSONObject model = JSON.parseObject(text);
-        Assert.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
+        Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
     }
 
     private static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_5.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -14,7 +15,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600321)/\"}";
 
         JSONObject model = JSON.parseObject(text);
-        Assert.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
+        Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
     }
 
     private static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1369.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -17,7 +18,7 @@ public void test_for_issue() throws Exception {
         foo.bars.c = 3;
         String json = JSON.toJSONString(foo);
         System.out.println(json);
-        Assert.assertTrue(json.indexOf("\\")<0);
+        Assertions.assertTrue(json.indexOf("\\")<0);
     }
 
     public static class Foo {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1371.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Map;
@@ -24,8 +25,7 @@ public void testFastjsonEnum(){
         enumMap.put(Rooms.C, Rooms.D);
         enumMap.put(Rooms.E, Rooms.A);
 
-        Assert.assertEquals(JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString),
-                "{\"C\":\"D\",\"E\":\"A\"}");
+        Assertions.assertEquals(JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString), "{\"C\":\"D\",\"E\":\"A\"}");
 
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1500.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
         System.out.println(jsonAa);
 
         Aa aa1 = JSON.parseObject(jsonAa, Aa.class);
-        Assert.assertEquals("aa",aa1.getName());
+        assertEquals("aa", aa1.getName());
 
         // test C
         C c = new C();

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3200/Issue3281.java
Patch:
@@ -5,6 +5,7 @@
 import lombok.Builder;
 import lombok.Data;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -23,8 +24,8 @@ public void test_for_issue() {
                 "\"modelName\":\"test\",\"modelScores\":{\"Test1-1000\":{\"max\":1.0997832999999515,\"min\":0.0," +
                 "\"recording\":false}},\"modelVersion\":\"1\",\"pit\":1592470429399,\"useCaseName\":\"test\"," +
                 "\"variableName\":\"v2\"}", ModelState.class);
-        Assert.assertNotNull(modelBack.getCounterMap());
-        Assert.assertNotNull(modelBack.getModelScores());
+        Assertions.assertNotNull(modelBack.getCounterMap());
+        Assertions.assertNotNull(modelBack.getModelScores());
     }
 
     @Builder

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3453.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSONValidator;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -59,9 +60,9 @@ public void test_for_issue() throws Exception {
                 " }\n" +
                 "]";
         JSONValidator validator = JSONValidator.from(str);
-        Assert.assertTrue(validator.validate());
+        Assertions.assertTrue(validator.validate());
         JSONValidator.Type type = validator.getType();
-        Assert.assertEquals("Array",type.name());
+        Assertions.assertEquals("Array", type.name());
     }
 
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3600/Issue3655.java
Patch:
@@ -6,6 +6,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class Issue3655 {
@@ -17,15 +18,15 @@ public void test_inherit_from_abstract_class_1() {
         issue3655_b b = new issue3655_b(null, null, null, null, null, null, null, null, null);
         String result = JSON.toJSONString(b, SerializerFeature.WriteNullStringAsEmpty);
         System.out.println(result);
-        Assert.assertEquals(jsonStr, result);
+        Assertions.assertEquals(jsonStr, result);
     }
 
     @Test
     public void test_inherit_from_abstract_class_2() {
         issue3655_c c = new issue3655_c(null, null, null, null, null, null, null, null, null);
         String result = JSON.toJSONString(c, SerializerFeature.WriteNullStringAsEmpty);
         System.out.println(result);
-        Assert.assertEquals(jsonStr, result);
+        Assertions.assertEquals(jsonStr, result);
     }
 
     public static class issue3655_b extends issue3655_a {

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/date/DateNewTest.java
Patch:
@@ -2,14 +2,15 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
 
 public class DateNewTest {
     @Test
     public void test_date() throws Exception {
-        Assert.assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime());
-        Assert.assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime());
+        Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime());
+        Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime());
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1341.java
Patch:
@@ -13,6 +13,7 @@
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.*;
@@ -164,8 +165,8 @@ public void test() {
 
         final String reponse = target("book1341").path("123").request().accept("application/javascript").get(String.class);
         System.out.println(reponse);
-        Assert.assertTrue(reponse.indexOf("Python源码剖析") > 0);
-        Assert.assertTrue(reponse.indexOf("电子工业出版社") > 0);
+        Assertions.assertTrue(reponse.indexOf("Python源码剖析") > 0);
+        Assertions.assertTrue(reponse.indexOf("电子工业出版社") > 0);
     }
 
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1392.java
Patch:
@@ -10,6 +10,7 @@
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.*;
@@ -140,8 +141,8 @@ public void test() {
 
         final String reponse = target("book1392").path("123").request().accept("application/javascript").get(String.class);
         System.out.println(reponse);
-        Assert.assertTrue(reponse.indexOf("Python源码剖析") > 0);
-        Assert.assertTrue(reponse.indexOf("电子工业出版社") > 0);
+        Assertions.assertTrue(reponse.indexOf("Python源码剖析") > 0);
+        Assertions.assertTrue(reponse.indexOf("电子工业出版社") > 0);
     }
 
 }

File: core/src/test/java/com/alibaba/fastjson2/codec/RefTest7.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.util.JSONBDump;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
@@ -43,8 +44,8 @@ public void test_ref_0() {
         assertNotNull(bean2);
         assertNotNull(bean2.values);
 
-        Assert.assertSame(bean.values.getClass(), bean2.values.getClass());
-        Assert.assertSame(bean2.values1.entrySet().iterator().next().getValue(), bean2.values.entrySet().iterator().next().getValue());
+        Assertions.assertSame(bean.values.getClass(), bean2.values.getClass());
+        Assertions.assertSame(bean2.values1.entrySet().iterator().next().getValue(), bean2.values.entrySet().iterator().next().getValue());
     }
 
     public static class Bean {

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue27.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import com.alibaba.fastjson2.JSON;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
@@ -16,7 +17,7 @@ public void test_parse() {
         hashMap.put("1",a);
 
         String string = JSON.toJSONString(hashMap);
-        assertEquals("{\"1\":\"\\\\\"}", string);
+        Assertions.assertEquals("{\"1\":\"\\\\\"}", string);
         JSON.parse(string);
     }
 
@@ -27,7 +28,7 @@ public void test_parse1() {
         hashMap.put("1",a);
 
         String string = JSON.toJSONString(hashMap);
-        assertEquals("{\"1\":\"\\\"\"}", string);
+        Assertions.assertEquals("{\"1\":\"\\\"\"}", string);
         JSON.parse(string);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue81.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.issues;
 
 import com.alibaba.fastjson2.JSON;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.Assert.assertFalse;
@@ -14,9 +15,9 @@ public void test_issue() {
         String value = "1111";
         assertTrue(JSON.isValid(jsonArrayStr));
         assertTrue(JSON.isValid(jsonObjectStr));
-        assertFalse(JSON.isValidArray(jsonObjectStr));
+        Assertions.assertFalse(JSON.isValidArray(jsonObjectStr));
         assertTrue(JSON.isValidArray(jsonArrayStr));
         assertTrue(JSON.isValid(value));
-        assertFalse(JSON.isValidArray(value));
+        Assertions.assertFalse(JSON.isValidArray(value));
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONPath_4.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONPath;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class JSONPath_4 {
@@ -13,6 +14,6 @@ public void test_path() throws Exception {
         Object x = JSON.parse(a);
         JSONPath.set(x, "$.test", "abc");
         Object o = JSONPath.eval(x, "$.10\\.0\\.1\\.1");
-        Assert.assertEquals("haha", o);
+        Assertions.assertEquals("haha", o);
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1300/Issue1300.java
Patch:
@@ -4,10 +4,10 @@
 import com.alibaba.fastjson2.annotation.JSONCreator;
 import com.alibaba.fastjson2.annotation.JSONField;
 import com.alibaba.fastjson2.util.TypeUtils;
-import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 /**
  * Created by wenshao on 01/07/2017.
@@ -28,8 +28,8 @@ public void testFullJSON() {
     @Test
     public void testEmptyJSON() {
         City object = TypeUtils.cast(new JSONObject(), City.class);
-        Assert.assertEquals(null, object.name);
-        Assert.assertEquals(0, object.code);
+        assertNull(object.name);
+        assertEquals(0, object.code);
     }
 
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/ColorTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.awt.*;
@@ -13,14 +14,14 @@ public void test_color() throws Exception {
         Color color = Color.RED;
         String text = JSON.toJSONString(color);
         Color color2 = JSON.parseObject(text, Color.class);
-        Assert.assertEquals(color, color2);
+        Assertions.assertEquals(color, color2);
     }
 
     @Test
     public void test_color_2() throws Exception {
         Color color = Color.RED;
         String text = "{\"r\":" + color.getRed() + ",\"g\":" + color.getGreen() + ",\"b\":" + color.getBlue() +"}";
         Color color2 = JSON.parseObject(text, Color.class);
-        Assert.assertEquals(color, color2);
+        Assertions.assertEquals(color, color2);
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/FontTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.awt.*;
@@ -16,7 +17,7 @@ public void test_color() throws Exception {
 
             Font font2 = JSON.parseObject(text, Font.class);
 
-            Assert.assertEquals(font, font2);
+            Assertions.assertEquals(font, font2);
         }
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/awt/FontTest2.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.awt.*;
@@ -18,7 +19,7 @@ public void test_color() throws Exception {
 
             Font font2 = (Font) JSON.parse(text, Feature.SupportAutoType);
 
-            Assert.assertEquals(font, font2);
+            Assertions.assertEquals(font, font2);
         }
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest0.java
Patch:
@@ -2,16 +2,16 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest0 {
     @Test
     public void test_0() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest0_private.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest0_private {
@@ -11,8 +11,8 @@ public class BuilderTest0_private {
     public void test_0() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest1.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest1 {
@@ -11,8 +12,8 @@ public class BuilderTest1 {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest1_private.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest1_private {
@@ -11,8 +12,8 @@ public class BuilderTest1_private {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest2.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONPOJOBuilder;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest2 {
@@ -12,8 +13,8 @@ public class BuilderTest2 {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest2_private.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONPOJOBuilder;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest2_private {
@@ -12,8 +13,8 @@ public class BuilderTest2_private {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest3.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONPOJOBuilder;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest3 {
@@ -12,8 +13,8 @@ public class BuilderTest3 {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest3_private.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.annotation.JSONField;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest3_private {
@@ -12,8 +13,8 @@ public class BuilderTest3_private {
     public void test_create() throws Exception {
         VO vo = JSON.parseObject("{\"id\":12304,\"name\":\"ljw\"}", VO.class);
 
-        Assert.assertEquals(12304, vo.getId());
-        Assert.assertEquals("ljw", vo.getName());
+        Assertions.assertEquals(12304, vo.getId());
+        Assertions.assertEquals("ljw", vo.getName());
     }
 
     @JSONType(builder=VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest_error.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.JSONException;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest_error {
@@ -16,7 +17,7 @@ public void test_0() throws Exception {
         } catch (JSONException | com.alibaba.fastjson2.JSONException ex) {
             error = ex;
         }
-        Assert.assertNotNull(error);
+        Assertions.assertNotNull(error);
     }
 
     @JSONType(builder = VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/builder/BuilderTest_error_private.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.JSONException;
 import com.alibaba.fastjson.annotation.JSONType;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class BuilderTest_error_private {
@@ -16,7 +17,7 @@ public void test_0() throws Exception {
         } catch (JSONException | com.alibaba.fastjson2.JSONException ex) {
             error = ex;
         }
-        Assert.assertNotNull(error);
+        Assertions.assertNotNull(error);
     }
 
     @JSONType(builder = VOBuilder.class)

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest12_t.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -25,8 +26,7 @@ public void test_1() throws Exception {
         String text = JSON.toJSONString(object);
         SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
-        Assert.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}",
-                            text);
+        Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
 
         Entity object2 = JSON.parseObject(text, Entity.class);
     }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest6.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -27,7 +28,7 @@ public void test_0() throws Exception {
 		String text = JSON.toJSONStringWithDateFormat(object, "yyyy-MM-dd");
 		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
-		Assert.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
+		Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
 	}
 
 	public static class Entity {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateFieldTest7.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -28,7 +29,7 @@ public void test_0() throws Exception {
 		String text = JSON.toJSONStringWithDateFormat(object, "yyyy-MM-dd");
 		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd", JSON.defaultLocale);
         format.setTimeZone(JSON.defaultTimeZone);
-		Assert.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
+		Assertions.assertEquals("{\"value\":\"" + format.format(object.getValue()) + "\"}", text);
 	}
 
 	public static class Entity {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest1.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -18,13 +19,13 @@ public void test_date() throws Exception {
         model.date = new Date(1471939192128L);
 
         String text = JSON.toJSONString(model);
-        Assert.assertEquals("{\"date\":1471939192128}", text);
+        Assertions.assertEquals("{\"date\":1471939192128}", text);
 
         Map<String, Object> map = new HashMap<String, Object>();
         map.put("date", new Date(1471939192128L));
 
         String text2 = JSON.toJSONString(map);
-        Assert.assertEquals("{\"date\":1471939192128}", text);
+        Assertions.assertEquals("{\"date\":1471939192128}", text);
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -12,7 +13,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600000)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600000L, model.date.getTime());
+        Assertions.assertEquals(1461081600000L, model.date.getTime());
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_1.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -13,7 +14,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600000)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600000L, model.date.getTime());
+        Assertions.assertEquals(1461081600000L, model.date.getTime());
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_2.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -13,7 +14,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600000+0500)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600000L, model.date.getTime());
+        Assertions.assertEquals(1461081600000L, model.date.getTime());
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_3.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -13,7 +14,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600321+0500)/\"}";
 
         Model model = JSON.parseObject(text, Model.class);
-        Assert.assertEquals(1461081600321L, model.date.getTime());
+        Assertions.assertEquals(1461081600321L, model.date.getTime());
     }
 
     private static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_4.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -14,7 +15,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600321+5000)/\"}";
 
         JSONObject model = JSON.parseObject(text);
-        Assert.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
+        Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
     }
 
     private static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/date/DateTest_dotnet_5.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -14,7 +15,7 @@ public void test_date() throws Exception {
         String text = "{\"date\":\"/Date(1461081600321)/\"}";
 
         JSONObject model = JSON.parseObject(text);
-        Assert.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
+        Assertions.assertEquals(1461081600321L, ((Date) model.getObject("date", Date.class)).getTime());
     }
 
     private static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1369.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -17,7 +18,7 @@ public void test_for_issue() throws Exception {
         foo.bars.c = 3;
         String json = JSON.toJSONString(foo);
         System.out.println(json);
-        Assert.assertTrue(json.indexOf("\\")<0);
+        Assertions.assertTrue(json.indexOf("\\")<0);
     }
 
     public static class Foo {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1371.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Map;
@@ -24,8 +25,7 @@ public void testFastjsonEnum(){
         enumMap.put(Rooms.C, Rooms.D);
         enumMap.put(Rooms.E, Rooms.A);
 
-        Assert.assertEquals(JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString),
-                "{\"C\":\"D\",\"E\":\"A\"}");
+        Assertions.assertEquals(JSON.toJSONString(enumMap, SerializerFeature.WriteNonStringKeyAsString), "{\"C\":\"D\",\"E\":\"A\"}");
 
     }
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1500.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
         System.out.println(jsonAa);
 
         Aa aa1 = JSON.parseObject(jsonAa, Aa.class);
-        Assert.assertEquals("aa",aa1.getName());
+        assertEquals("aa", aa1.getName());
 
         // test C
         C c = new C();

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3200/Issue3281.java
Patch:
@@ -5,6 +5,7 @@
 import lombok.Builder;
 import lombok.Data;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -23,8 +24,8 @@ public void test_for_issue() {
                 "\"modelName\":\"test\",\"modelScores\":{\"Test1-1000\":{\"max\":1.0997832999999515,\"min\":0.0," +
                 "\"recording\":false}},\"modelVersion\":\"1\",\"pit\":1592470429399,\"useCaseName\":\"test\"," +
                 "\"variableName\":\"v2\"}", ModelState.class);
-        Assert.assertNotNull(modelBack.getCounterMap());
-        Assert.assertNotNull(modelBack.getModelScores());
+        Assertions.assertNotNull(modelBack.getCounterMap());
+        Assertions.assertNotNull(modelBack.getModelScores());
     }
 
     @Builder

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3453.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson.JSONValidator;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -59,9 +60,9 @@ public void test_for_issue() throws Exception {
                 " }\n" +
                 "]";
         JSONValidator validator = JSONValidator.from(str);
-        Assert.assertTrue(validator.validate());
+        Assertions.assertTrue(validator.validate());
         JSONValidator.Type type = validator.getType();
-        Assert.assertEquals("Array",type.name());
+        Assertions.assertEquals("Array", type.name());
     }
 
 }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3600/Issue3655.java
Patch:
@@ -6,6 +6,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class Issue3655 {
@@ -17,15 +18,15 @@ public void test_inherit_from_abstract_class_1() {
         issue3655_b b = new issue3655_b(null, null, null, null, null, null, null, null, null);
         String result = JSON.toJSONString(b, SerializerFeature.WriteNullStringAsEmpty);
         System.out.println(result);
-        Assert.assertEquals(jsonStr, result);
+        Assertions.assertEquals(jsonStr, result);
     }
 
     @Test
     public void test_inherit_from_abstract_class_2() {
         issue3655_c c = new issue3655_c(null, null, null, null, null, null, null, null, null);
         String result = JSON.toJSONString(c, SerializerFeature.WriteNullStringAsEmpty);
         System.out.println(result);
-        Assert.assertEquals(jsonStr, result);
+        Assertions.assertEquals(jsonStr, result);
     }
 
     public static class issue3655_b extends issue3655_a {

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/date/DateNewTest.java
Patch:
@@ -2,14 +2,15 @@
 
 import com.alibaba.fastjson.JSON;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
 
 public class DateNewTest {
     @Test
     public void test_date() throws Exception {
-        Assert.assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime());
-        Assert.assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime());
+        Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime());
+        Assertions.assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime());
     }
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1341.java
Patch:
@@ -13,6 +13,7 @@
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.*;
@@ -164,8 +165,8 @@ public void test() {
 
         final String reponse = target("book1341").path("123").request().accept("application/javascript").get(String.class);
         System.out.println(reponse);
-        Assert.assertTrue(reponse.indexOf("Python源码剖析") > 0);
-        Assert.assertTrue(reponse.indexOf("电子工业出版社") > 0);
+        Assertions.assertTrue(reponse.indexOf("Python源码剖析") > 0);
+        Assertions.assertTrue(reponse.indexOf("电子工业出版社") > 0);
     }
 
 }

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1392.java
Patch:
@@ -10,6 +10,7 @@
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.*;
@@ -140,8 +141,8 @@ public void test() {
 
         final String reponse = target("book1392").path("123").request().accept("application/javascript").get(String.class);
         System.out.println(reponse);
-        Assert.assertTrue(reponse.indexOf("Python源码剖析") > 0);
-        Assert.assertTrue(reponse.indexOf("电子工业出版社") > 0);
+        Assertions.assertTrue(reponse.indexOf("Python源码剖析") > 0);
+        Assertions.assertTrue(reponse.indexOf("电子工业出版社") > 0);
     }
 
 }

File: core/src/main/java/com/alibaba/fastjson2/TypeReference.java
Patch:
@@ -122,7 +122,7 @@ public T parseObject(String text) {
      * @param object Specify the {@link JSONObject} to convert
      * @since 2.0.2
      */
-    public T parseObject(JSONObject object) {
+    public T toJavaObject(JSONObject object) {
         return object.toJavaObject(type);
     }
 
@@ -149,7 +149,7 @@ public List<T> parseArray(String text) {
      * @param object Specify the {@link JSONArray} to convert
      * @since 2.0.2
      */
-    public T parseArray(JSONArray object) {
+    public T toJavaObject(JSONArray object) {
         return object.toJavaObject(type);
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAnySetter.java
Patch:
@@ -15,6 +15,7 @@ class FieldReaderAnySetter<T> extends FieldReaderObjectMethod<T> implements Fiel
         super("$$any$$", fieldType, fieldClass, ordinal, features, format, method);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -27,6 +28,7 @@ public void accept(T object, Object value) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         String name = jsonReader.getFieldName();
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -15,6 +15,7 @@ class FieldReaderMapFieldReadOnly<T> extends FieldReaderObjectField<T> implement
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -58,6 +59,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         Map map;
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapMethodReadOnly.java
Patch:
@@ -16,6 +16,7 @@ class FieldReaderMapMethodReadOnly<T> extends FieldReaderObjectMethod<T> impleme
         super(fieldName, fieldType, fieldClass, ordinal, features, format, method);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -59,6 +60,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         Map map;
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FielderReaderImplMapFieldReadOnly.java
Patch:
@@ -16,6 +16,7 @@ class FielderReaderImplMapFieldReadOnly<T> extends FieldReaderObjectField<T> imp
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -59,6 +60,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         Map map;
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderSeeAlso.java
Patch:
@@ -70,6 +70,7 @@ public ObjectReader autoType(ObjectReaderProvider provider, long typeHash) {
         return provider.getObjectReader(seeAlsoClass);
     }
 
+    @Override
     public T readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isString()) {
             long valueHashCode = jsonReader.readValueHashCode();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAnySetter.java
Patch:
@@ -15,6 +15,7 @@ class FieldReaderAnySetter<T> extends FieldReaderObjectMethod<T> implements Fiel
         super("$$any$$", fieldType, fieldClass, ordinal, features, format, method);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -27,6 +28,7 @@ public void accept(T object, Object value) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         String name = jsonReader.getFieldName();
 

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapFieldReadOnly.java
Patch:
@@ -15,6 +15,7 @@ class FieldReaderMapFieldReadOnly<T> extends FieldReaderObjectField<T> implement
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -58,6 +59,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         Map map;
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderMapMethodReadOnly.java
Patch:
@@ -16,6 +16,7 @@ class FieldReaderMapMethodReadOnly<T> extends FieldReaderObjectMethod<T> impleme
         super(fieldName, fieldType, fieldClass, ordinal, features, format, method);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -59,6 +60,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         Map map;
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FielderReaderImplMapFieldReadOnly.java
Patch:
@@ -16,6 +16,7 @@ class FielderReaderImplMapFieldReadOnly<T> extends FieldReaderObjectField<T> imp
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader jsonReader) {
         if (itemReader != null) {
             return itemReader;
@@ -59,6 +60,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public void processExtra(JSONReader jsonReader, Object object) {
         Map map;
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderSeeAlso.java
Patch:
@@ -70,6 +70,7 @@ public ObjectReader autoType(ObjectReaderProvider provider, long typeHash) {
         return provider.getObjectReader(seeAlsoClass);
     }
 
+    @Override
     public T readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isString()) {
             long valueHashCode = jsonReader.readValueHashCode();

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1310_noasm.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.json.bvt.issue_1300;
+package com.alibaba.fastjson.issue_1300;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONCreator;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1319.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.json.bvt.issue_1300;
+package com.alibaba.fastjson.issue_1300;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1300/Issue1363.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.json.bvt.issue_1300;
+package com.alibaba.fastjson.issue_1300;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONCreator;

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/TypeReference.java
Patch:
@@ -7,7 +7,6 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
-import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
@@ -127,5 +126,4 @@ public Type getType() {
         return type;
     }
 
-    public static final Type LIST_STRING = new TypeReference<List<String>>() {}.getType();
 }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -459,6 +459,7 @@ static <T> T parseObject(byte[] bytes, int offset, int length, Charset charset,
      * @param consumer the consumer of the parsing result object
      * @param features features to be enabled in parsing
      * @throws JSONException IO exception occurred in reading
+     * @see JSON#parseObject(InputStream, Charset, char, Type, Consumer, JSONReader.Feature...)
      */
     static <T> void parseObject(InputStream input, Type type, Consumer<T> consumer, JSONReader.Feature... features) {
         parseObject(input, StandardCharsets.UTF_8, '\n', type, consumer, features);
@@ -539,9 +540,9 @@ static <T> void parseObject(InputStream input, Charset charset, char delimiter,
     }
 
     /**
-     * Parse {@link InputStream} into a Java object with specified {@link JSONReader.Feature}s enabled and consume it
+     * Parse {@link Reader} into a Java object with specified {@link JSONReader.Feature}s enabled and consume it
      *
-     * @param input     the JSON {@link InputStream} to be parsed
+     * @param input     the JSON {@link Reader} to be parsed
      * @param delimiter specify the delimiter
      * @param type      specify the {@link Type} to be converted
      * @param consumer  the consumer of the parsing result object

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorDynamicCompile.java
Patch:
@@ -20,6 +20,7 @@
 public class ObjectReaderCreatorDynamicCompile extends ObjectReaderCreator {
     public static final ObjectReaderCreatorDynamicCompile INSTANCE = new ObjectReaderCreatorDynamicCompile();
 
+    @Override
     public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectType, boolean fieldBased, List<ObjectReaderModule> modules) {
         BeanInfo beanInfo = new BeanInfo();
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorDynamicCompile.java
Patch:
@@ -20,6 +20,7 @@
 public class ObjectReaderCreatorDynamicCompile extends ObjectReaderCreator {
     public static final ObjectReaderCreatorDynamicCompile INSTANCE = new ObjectReaderCreatorDynamicCompile();
 
+    @Override
     public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectType, boolean fieldBased, List<ObjectReaderModule> modules) {
         BeanInfo beanInfo = new BeanInfo();
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/config/FastJsonConfig.java
Patch:
@@ -1,6 +1,7 @@
 
 package com.alibaba.fastjson.support.config;
 
+import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.parser.ParserConfig;
 import com.alibaba.fastjson.parser.deserializer.ParseProcess;
@@ -189,13 +190,15 @@ public void setClassSerializeFilters(
      * @return the dateFormat
      */
     public String getDateFormat() {
+        dateFormat = JSON.DEFFAULT_DATE_FORMAT;
         return dateFormat;
     }
 
     /**
      * @param dateFormat the dateFormat to set
      */
     public void setDateFormat(String dateFormat) {
+        JSON.DEFFAULT_DATE_FORMAT = dateFormat;
         this.dateFormat = dateFormat;
     }
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/FastJsonHttpMessageConverter.java
Patch:
@@ -129,7 +129,7 @@ protected void writeInternal(Object object, HttpOutputMessage outputMessage) thr
 
             HttpHeaders headers = outputMessage.getHeaders();
 
-            int len = JSON.writeJSONString(baos, object, JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());
+            int len = JSON.writeJSONString(baos, object, fastJsonConfig.getSerializeFilters(), fastJsonConfig.getSerializerFeatures());
 
             if (headers.getContentLength() < 0 && fastJsonConfig.isWriteContentLength()) {
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/FastJsonJsonView.java
Patch:
@@ -104,7 +104,7 @@ protected void renderMergedOutputModel(Map<String, Object> model, //
 
         ByteArrayOutputStream outnew = new ByteArrayOutputStream();
 
-        int len = JSON.writeJSONString(outnew, value, JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());
+        int len = JSON.writeJSONString(outnew, value, fastJsonConfig.getSerializeFilters(), fastJsonConfig.getSerializerFeatures());
 
         if (fastJsonConfig.isWriteContentLength()) {
             // Write content length (determined via byte array).

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1272.java
Patch:
@@ -17,11 +17,11 @@ public void test_for_issue() throws Exception {
 
         try {
             JSON.toJSONString(new Point());
-        }catch (JSONException ex) {
+        }catch (Exception ex) {
             exception = ex;
         }
         assertNotNull(exception);
-        assertEquals(NullPointerException.class, exception.getCause().getClass());
+        assertEquals(NullPointerException.class, exception.getClass());
     }
 
     public static class Point {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplClass.java
Patch:
@@ -36,7 +36,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         }
 
         ObjectReaderProvider provider = context.getProvider();
-        Class resolvedClass = provider.checkAutoType(className, null, JSONReader.Feature.SupportAutoType.mask);
+        Class<?> resolvedClass = provider.checkAutoType(className, null, JSONReader.Feature.SupportAutoType.mask);
         if (resolvedClass == null) {
             throw new JSONException("class not found " + className);
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1272.java
Patch:
@@ -17,11 +17,11 @@ public void test_for_issue() throws Exception {
 
         try {
             JSON.toJSONString(new Point());
-        }catch (JSONException ex) {
+        }catch (Exception ex) {
             exception = ex;
         }
         assertNotNull(exception);
-        assertEquals(NullPointerException.class, exception.getCause().getClass());
+        assertEquals(NullPointerException.class, exception.getClass());
     }
 
     public static class Point {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/config/FastJsonConfig.java
Patch:
@@ -1,6 +1,7 @@
 
 package com.alibaba.fastjson.support.config;
 
+import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.parser.ParserConfig;
 import com.alibaba.fastjson.parser.deserializer.ParseProcess;
@@ -189,13 +190,15 @@ public void setClassSerializeFilters(
      * @return the dateFormat
      */
     public String getDateFormat() {
+        dateFormat = JSON.DEFFAULT_DATE_FORMAT;
         return dateFormat;
     }
 
     /**
      * @param dateFormat the dateFormat to set
      */
     public void setDateFormat(String dateFormat) {
+        JSON.DEFFAULT_DATE_FORMAT = dateFormat;
         this.dateFormat = dateFormat;
     }
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/FastJsonHttpMessageConverter.java
Patch:
@@ -129,7 +129,7 @@ protected void writeInternal(Object object, HttpOutputMessage outputMessage) thr
 
             HttpHeaders headers = outputMessage.getHeaders();
 
-            int len = JSON.writeJSONString(baos, object, JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());
+            int len = JSON.writeJSONString(baos, object, fastJsonConfig.getSerializeFilters(), fastJsonConfig.getSerializerFeatures());
 
             if (headers.getContentLength() < 0 && fastJsonConfig.isWriteContentLength()) {
 

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/FastJsonJsonView.java
Patch:
@@ -104,7 +104,7 @@ protected void renderMergedOutputModel(Map<String, Object> model, //
 
         ByteArrayOutputStream outnew = new ByteArrayOutputStream();
 
-        int len = JSON.writeJSONString(outnew, value, JSON.DEFAULT_GENERATE_FEATURE, fastJsonConfig.getSerializerFeatures());
+        int len = JSON.writeJSONString(outnew, value, fastJsonConfig.getSerializeFilters(), fastJsonConfig.getSerializerFeatures());
 
         if (fastJsonConfig.isWriteContentLength()) {
             // Write content length (determined via byte array).

File: extension/src/main/java/com/alibaba/fastjson2/support/config/FastJsonConfig.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.filter.Filter;
 
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 /**
  * Configuration for FastJson.
@@ -51,7 +52,7 @@ public class FastJsonConfig {
      * init param.
      */
     public FastJsonConfig() {
-        this.charset = Charset.forName("UTF-8");
+        this.charset = StandardCharsets.UTF_8;
         this.readerFeatures = new JSONReader.Feature[0];
         this.writerFeatures = new JSONWriter.Feature[0];
         this.writerFilters = new Filter[0];

File: extension/src/main/java/com/alibaba/fastjson2/support/retrofit/Retrofit2ConverterFactory.java
Patch:
@@ -79,7 +79,8 @@ final class ResponseBodyConverter<T> implements Converter<ResponseBody, T> {
         @Override
         public T convert(ResponseBody value) throws IOException {
             try {
-                return JSON.parseObject(value.bytes(), type, fastJsonConfig.getReaderFeatures());
+                return JSON.parseObject(value.bytes(), type,
+                        fastJsonConfig.getDateFormat(), fastJsonConfig.getReaderFeatures());
             } catch (Exception e) {
                 throw new IOException("JSON parse error: " + e.getMessage(), e);
             } finally {
@@ -95,7 +96,7 @@ final class RequestBodyConverter<T> implements Converter<T, RequestBody> {
         @Override
         public RequestBody convert(T value) throws IOException {
             try {
-                byte[] content = JSON.toJSONBytes(value,
+                byte[] content = JSON.toJSONBytes(value, fastJsonConfig.getDateFormat(),
                         fastJsonConfig.getWriterFilters(), fastJsonConfig.getWriterFeatures());
                 return RequestBody.create(MEDIA_TYPE, content);
             } catch (Exception e) {

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/web/view/FastJsonJsonView.java
Patch:
@@ -100,7 +100,7 @@ protected void renderMergedOutputModel(Map<String, Object> model, //
 
         ByteArrayOutputStream outnew = new ByteArrayOutputStream();
 
-        int len = JSON.writeTo(outnew, value, fastJsonConfig.getWriterFilters(), fastJsonConfig.getWriterFeatures());
+        int len = JSON.writeTo(outnew, value, fastJsonConfig.getDateFormat(), fastJsonConfig.getWriterFilters(), fastJsonConfig.getWriterFeatures());
 
         if (fastJsonConfig.isWriteContentLength()) {
             // Write content length (determined via byte array).

File: extension/src/main/java/com/alibaba/fastjson2/support/config/FastJsonConfig.java
Patch:
@@ -5,6 +5,7 @@
 import com.alibaba.fastjson2.filter.Filter;
 
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 /**
  * Configuration for FastJson.
@@ -51,7 +52,7 @@ public class FastJsonConfig {
      * init param.
      */
     public FastJsonConfig() {
-        this.charset = Charset.forName("UTF-8");
+        this.charset = StandardCharsets.UTF_8;
         this.readerFeatures = new JSONReader.Feature[0];
         this.writerFeatures = new JSONWriter.Feature[0];
         this.writerFilters = new Filter[0];

File: extension/src/main/java/com/alibaba/fastjson2/support/retrofit/Retrofit2ConverterFactory.java
Patch:
@@ -79,7 +79,8 @@ final class ResponseBodyConverter<T> implements Converter<ResponseBody, T> {
         @Override
         public T convert(ResponseBody value) throws IOException {
             try {
-                return JSON.parseObject(value.bytes(), type, fastJsonConfig.getReaderFeatures());
+                return JSON.parseObject(value.bytes(), type,
+                        fastJsonConfig.getDateFormat(), fastJsonConfig.getReaderFeatures());
             } catch (Exception e) {
                 throw new IOException("JSON parse error: " + e.getMessage(), e);
             } finally {
@@ -95,7 +96,7 @@ final class RequestBodyConverter<T> implements Converter<T, RequestBody> {
         @Override
         public RequestBody convert(T value) throws IOException {
             try {
-                byte[] content = JSON.toJSONBytes(value,
+                byte[] content = JSON.toJSONBytes(value, fastJsonConfig.getDateFormat(),
                         fastJsonConfig.getWriterFilters(), fastJsonConfig.getWriterFeatures());
                 return RequestBody.create(MEDIA_TYPE, content);
             } catch (Exception e) {

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/web/view/FastJsonJsonView.java
Patch:
@@ -100,7 +100,7 @@ protected void renderMergedOutputModel(Map<String, Object> model, //
 
         ByteArrayOutputStream outnew = new ByteArrayOutputStream();
 
-        int len = JSON.writeTo(outnew, value, fastJsonConfig.getWriterFilters(), fastJsonConfig.getWriterFeatures());
+        int len = JSON.writeTo(outnew, value, fastJsonConfig.getDateFormat(), fastJsonConfig.getWriterFilters(), fastJsonConfig.getWriterFeatures());
 
         if (fastJsonConfig.isWriteContentLength()) {
             // Write content length (determined via byte array).

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -658,9 +658,9 @@ ObjectWriter getExternalObjectWriter(String className, Class objectClass) {
             case "org.joda.time.chrono.ISOChronology":
                 return JodaSupport.createISOChronologyWriter(objectClass);
             case "org.joda.time.LocalDate":
-                return JodaSupport.createLocalDateWriter(objectClass);
+                return JodaSupport.createLocalDateWriter(objectClass, null);
             case "org.joda.time.LocalDateTime":
-                return JodaSupport.createLocalDateTimeWriter(objectClass);
+                return JodaSupport.createLocalDateTimeWriter(objectClass, null);
 //            case "com.alibaba.fastjson.JSONObject":
 //                return Fastjson1xSupport.createObjectReader();
             default:

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1194,7 +1194,7 @@ public Object readAny() {
     public List readArray() {
         next();
 
-        List list = new JSONArray();
+        List<Object> list = new JSONArray();
 
         _for:
         for (; ; ) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -14,7 +14,6 @@
 import com.alibaba.fastjson2.modules.ObjectReaderModule;
 import com.alibaba.fastjson2.support.money.MoneySupport;
 import com.alibaba.fastjson2.util.*;
-import com.alibaba.fastjson2.writer.ObjectWriter;
 
 import java.io.Closeable;
 import java.io.Serializable;
@@ -2925,7 +2924,7 @@ public Object readObject(JSONReader jsonReader, long features) {
 
     static class GenericArrayImpl implements ObjectReader {
         final Type itemType;
-        final Class componentClass;
+        final Class<?> componentClass;
         ObjectReader itemObjectReader = null;
 
         public GenericArrayImpl(Type itemType) {
@@ -2988,7 +2987,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                 throw new JSONException("format error");
             }
 
-            ArrayList list = new ArrayList();
+            List<Object> list = new ArrayList<>();
             if (ch != '[') {
                 throw new JSONException("format error : " + ch);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -170,7 +170,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {
         @Override
         public void getFieldInfo(FieldInfo fieldInfo, Class objectType, Field field) {
             Class mixInSource = provider.mixInCache.get(objectType);
-            if (objectType == null) {
+            if (objectType != null) {
                 String typeName = objectType.getName();
                 switch (typeName) {
                     case "org.apache.commons.lang3.tuple.ImmutablePair":

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1194,7 +1194,7 @@ public Object readAny() {
     public List readArray() {
         next();
 
-        List list = new JSONArray();
+        List<Object> list = new JSONArray();
 
         _for:
         for (; ; ) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -14,7 +14,6 @@
 import com.alibaba.fastjson2.modules.ObjectReaderModule;
 import com.alibaba.fastjson2.support.money.MoneySupport;
 import com.alibaba.fastjson2.util.*;
-import com.alibaba.fastjson2.writer.ObjectWriter;
 
 import java.io.Closeable;
 import java.io.Serializable;
@@ -2925,7 +2924,7 @@ public Object readObject(JSONReader jsonReader, long features) {
 
     static class GenericArrayImpl implements ObjectReader {
         final Type itemType;
-        final Class componentClass;
+        final Class<?> componentClass;
         ObjectReader itemObjectReader = null;
 
         public GenericArrayImpl(Type itemType) {
@@ -2988,7 +2987,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                 throw new JSONException("format error");
             }
 
-            ArrayList list = new ArrayList();
+            List<Object> list = new ArrayList<>();
             if (ch != '[') {
                 throw new JSONException("format error : " + ch);
             }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -170,7 +170,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {
         @Override
         public void getFieldInfo(FieldInfo fieldInfo, Class objectType, Field field) {
             Class mixInSource = provider.mixInCache.get(objectType);
-            if (objectType == null) {
+            if (objectType != null) {
                 String typeName = objectType.getName();
                 switch (typeName) {
                     case "org.apache.commons.lang3.tuple.ImmutablePair":

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplList.java
Patch:
@@ -416,11 +416,11 @@ public Object readObject(JSONReader jsonReader, long features) {
                 list.add(converted);
                 return list;
             }
-            throw new JSONException("format error");
+            throw new JSONException("illegal input, offset " + jsonReader.getOffset() + ", " + str);
         }
 
         if (ch != '[') {
-            throw new JSONException("format error : " + ch);
+            throw new JSONException("illegal input, offset " + jsonReader.getOffset() + ", char " + ch);
         }
         jsonReader.next();
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -497,7 +497,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
                 String fieldName = BeanUtils.getterName(methodName, null);
 
                 BeanUtils.declaredFields(objectClass, field -> {
-                    if (field.getName().equalsIgnoreCase(fieldName)) {
+                    if (field.getName().equals(fieldName)) {
                         int modifiers = field.getModifiers();
                         if ((!Modifier.isPublic(modifiers)) && !Modifier.isStatic(modifiers)) {
                             getFieldInfo(fieldInfo, objectClass, field);

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1120.java
Patch:
@@ -20,14 +20,14 @@ public void test_for_issue() throws Exception {
 
     public static class Model {
         @JSONField(name="REQ_NO")
-        private String ReqNo;
+        private String reqNo;
 
         public String getReqNo() {
-            return ReqNo;
+            return reqNo;
         }
 
         public void setReqNo(String reqNo) {
-            ReqNo = reqNo;
+            this.reqNo = reqNo;
         }
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1120C.java
Patch:
@@ -20,14 +20,14 @@ public void test_for_issue() throws Exception {
 
     public static class Model {
         @JSONField(name="REQ_NO")
-        private String ReqNo;
+        private String reqNo;
 
         public String getReqNo() {
-            return ReqNo;
+            return reqNo;
         }
 
         public void setReqNo(String reqNo) {
-            ReqNo = reqNo;
+            this.reqNo = reqNo;
         }
     }
 }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1486.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.v1issues.issue_1400;
 
 import com.alibaba.fastjson2.JSON;
+import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.TypeReference;
 import com.alibaba.fastjson2.annotation.JSONField;
 import org.junit.jupiter.api.Test;
@@ -13,7 +14,7 @@ public void test_for_issue() throws Exception {
 
         String json = "[{\"song_list\":[{\"val\":1,\"v_al\":2},{\"val\":2,\"v_al\":2},{\"val\":3,\"v_al\":2}],\"songlist\":\"v_al\"}]";
         List<Value> parseObject = JSON.parseObject(json, new TypeReference<List<Value>>() {
-        }.getType());
+        }.getType(), JSONReader.Feature.IgnoreNoneSerializable);
         for (Value value : parseObject) {
             System.out.println(value.songList + "  " );
         }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1100/Issue1120.java
Patch:
@@ -20,14 +20,14 @@ public void test_for_issue() throws Exception {
 
     public static class Model {
         @JSONField(name="REQ_NO")
-        private String ReqNo;
+        private String reqNo;
 
         public String getReqNo() {
-            return ReqNo;
+            return reqNo;
         }
 
         public void setReqNo(String reqNo) {
-            ReqNo = reqNo;
+            this.reqNo = reqNo;
         }
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -493,7 +493,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
                 }
             }
 
-            if (!objectClass.getName().startsWith("java.lang")) {
+            if (!objectClass.getName().startsWith("java.lang") && !BeanUtils.isRecord(objectClass)) {
                 String fieldName = BeanUtils.getterName(methodName, null);
 
                 BeanUtils.declaredFields(objectClass, field -> {

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONType.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.JSONWriter;
+import com.alibaba.fastjson2.filter.Filter;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -41,4 +42,6 @@
     Class<?> serializer() default Void.class;
 
     Class<?> deserializer() default Void.class;
+
+    Class<? extends Filter>[] serializeFilters() default {};
 }

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -1,5 +1,7 @@
 package com.alibaba.fastjson2.codec;
 
+import com.alibaba.fastjson2.filter.Filter;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 
@@ -29,4 +31,5 @@ public class BeanInfo {
 
     public Class serializer;
     public Class deserializer;
+    public Class<? extends Filter>[] serializeFilters;
 }

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -26,4 +26,7 @@ public class BeanInfo {
     public String[] includes;
 
     public boolean mixIn;
+
+    public Class serializer;
+    public Class deserializer;
 }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriter.java
Patch:
@@ -115,7 +115,7 @@ default void write(JSONWriter jsonWriter, Object object) {
         write(jsonWriter, object, null, null, 0);
     }
 
-    public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features);
+    void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features);
 
     default void writeWithFilter(JSONWriter jsonWriter, Object object) {
         writeWithFilter(jsonWriter, object, null, null, 0);

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONType.java
Patch:
@@ -26,7 +26,7 @@
     /**
      * Specify {@link JSONWriter.Feature}s to use features when serializing output
      */
-    JSONWriter.Feature[] serializeFeatures1() default {};
+    JSONWriter.Feature[] serializeFeatures() default {};
 
     NamingStrategy naming() default NamingStrategy.CamelCase;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -118,7 +118,7 @@ public void getBeanInfo(BeanInfo beanInfo, Class objectClass) {
                     beanInfo.typeName = typeName;
                 }
 
-                for (JSONWriter.Feature feature : jsonType.serializeFeatures1()) {
+                for (JSONWriter.Feature feature : jsonType.serializeFeatures()) {
                     beanInfo.writerFeatures |= feature.mask;
                 }
 

File: core/src/test/java/com/alibaba/fastjson2/annotation/BeanToArrayTest.java
Patch:
@@ -54,7 +54,7 @@ public void test1() {
         }
     }
 
-    @JSONType(deserializeFeatures = JSONReader.Feature.SupportArrayToBean, serializeFeatures1 = JSONWriter.Feature.BeanToArray)
+    @JSONType(deserializeFeatures = JSONReader.Feature.SupportArrayToBean, serializeFeatures = JSONWriter.Feature.BeanToArray)
     public static class VO {
         public int id;
         public String name;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1649.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json);
     }
 
-    @JSONType(serializeFeatures1 = {Feature.NullAsDefaultValue})
+    @JSONType(serializeFeatures = {Feature.NullAsDefaultValue})
     public static class Apple {
 
         private String color;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1600/Issue1649_private.java
Patch:
@@ -15,7 +15,7 @@ public void test_for_issue() throws Exception {
         assertEquals("{\"color\":\"\",\"productCity\":\"\",\"size\":0}", json);
     }
 
-    @JSONType(serializeFeatures1 = {JSONWriter.Feature.NullAsDefaultValue})
+    @JSONType(serializeFeatures = {JSONWriter.Feature.NullAsDefaultValue})
     private static class Apple {
 
         // @JSONField(serialzeFeatures = {SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.WriteMapNullValue})

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764.java
Patch:
@@ -55,7 +55,7 @@ public void setValue(long value) {
         }
     }
 
-    @JSONType(serializeFeatures1 = JSONWriter.Feature.BrowserCompatible)
+    @JSONType(serializeFeatures = JSONWriter.Feature.BrowserCompatible)
     public static class Model2 {
         private long value;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764_bean.java
Patch:
@@ -34,7 +34,7 @@ public void test_for_issue() throws Exception {
 
 
 
-    @JSONType(serializeFeatures1 = JSONWriter.Feature.BrowserCompatible)
+    @JSONType(serializeFeatures = JSONWriter.Feature.BrowserCompatible)
     public static class Model {
         public long value;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1764_bean_biginteger_type.java
Patch:
@@ -39,7 +39,7 @@ public void test_for_issue() throws Exception {
 
 
 
-    @JSONType(serializeFeatures1 = JSONWriter.Feature.BrowserCompatible)
+    @JSONType(serializeFeatures = JSONWriter.Feature.BrowserCompatible)
     public static class Model {
         public BigInteger value;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -85,6 +85,8 @@ protected FieldWriter creteFieldWriter(
         String fieldName;
         if (fieldInfo.fieldName == null || fieldInfo.fieldName.isEmpty()) {
             fieldName = field.getName();
+
+            fieldName = BeanUtils.fieldName(fieldName, beanInfo.namingStrategy);
         } else {
             fieldName = fieldInfo.fieldName;
         }

File: core/src/test/java/com/alibaba/fastjson2/JSONBTest.java
Patch:
@@ -15,8 +15,7 @@
 import java.util.*;
 import java.util.concurrent.*;
 
-import static junit.framework.TestCase.*;
-import static org.junit.Assert.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class JSONBTest {
     public static final int INT24_MAX = 256 * 256 * 128 - 1;
@@ -49,7 +48,7 @@ public void test_parse_object_typed_empty() {
         byte[] jsonbBytes = JSONB.toBytes(new HashMap());
         for (Type type : types) {
             Map object = JSONB.parseObject(jsonbBytes, type);
-            assertNotNull(type.getTypeName(), object);
+            assertNotNull(object, type.getTypeName());
             assertTrue(object.isEmpty());
         }
     }

File: core/src/test/java/com/alibaba/fastjson2/codec/ClassTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.fastjson2.JSON;
 import org.junit.jupiter.api.Test;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ClassTest {
     @Test

File: core/src/test/java/com/alibaba/fastjson2/codec/UnicodeClassNameTest.java
Patch:
@@ -3,7 +3,8 @@
 import com.alibaba.fastjson2.JSON;
 import org.junit.jupiter.api.Test;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 
 public class UnicodeClassNameTest {
     @Test

File: core/src/test/java/com/alibaba/fastjson2/features/ListRefTest.java
Patch:
@@ -17,9 +17,10 @@ public void test() {
 
         Item item = new Item();
         bean.items.add(item);
+        bean.items.add(null);
         bean.items.add(item);
 
-        assertEquals("{\"items\":[{},{\"$ref\":\"$[0]\"}]}",
+        assertEquals("{\"items\":[{},null,{\"$ref\":\"$[0]\"}]}",
                 JSON.toJSONString(bean, JSONWriter.Feature.ReferenceDetection)
         );
     }

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONPathSetTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class JSONPathSetTest {
     @Test

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/JSONPath_min_max.java
Patch:
@@ -7,7 +7,8 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 
 public class JSONPath_min_max {
     @Test

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathJSONBTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class PathJSONBTest {
     private String str;

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathJSONBTest2.java
Patch:
@@ -9,7 +9,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class PathJSONBTest2 {
     private String str;

File: core/src/test/java/com/alibaba/fastjson2/jsonpath/PathTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.*;
 import com.alibaba.fastjson_perf.Int2Test;
-import junit.framework.TestCase;
 import org.apache.commons.io.IOUtils;
 import org.junit.jupiter.api.Test;
 
@@ -103,7 +102,7 @@ public void test_4() throws Exception {
         Object result = path.extract(parser);
         assertEquals(Arrays.asList("Mozilla/5.0", "Windows NT 6.1", "1024x4069"), result);
 
-        TestCase.assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069")
+        assertEquals(new JSONArray("Mozilla/5.0", "Windows NT 6.1", "1024x4069")
                 , path.eval(rootObject));
     }
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/Calendar1Test.java
Patch:
@@ -17,8 +17,8 @@
 import java.util.Date;
 import java.util.TimeZone;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class Calendar1Test {
     private TimeZone defaultTimeZone;
@@ -337,7 +337,7 @@ public void test_str_value() {
             Calendar id = dates[i];
             String str = JSON.toJSONString(id);
             Calendar id2 = JSON.parseObject(str, Calendar.class);
-            assertEquals(str, id, id2);
+            assertEquals(id, id2, str);
         }
     }
 

File: core/src/test/java/com/alibaba/fastjson2/primitves/Date1Test.java
Patch:
@@ -16,8 +16,8 @@
 import java.util.Date;
 import java.util.TimeZone;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class Date1Test {
     private TimeZone defaultTimeZone;
@@ -329,7 +329,7 @@ public void test_str_value() {
             Date id = dates[i];
             String str = JSON.toJSONString(id);
             Date id2 = JSON.parseObject(str, Date.class);
-            assertEquals(str, id, id2);
+            assertEquals(id, id2, str);
         }
     }
 

File: core/src/test/java/com/alibaba/fastjson_perf/EishayTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class EishayTest {
     private String str;

File: core/src/test/java/com/alibaba/fastjson_perf/JSONPath_0.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class JSONPath_0 {
     private String str;

File: core/src/test/java/com/alibaba/fastjson_perf/StringField20NullsTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-import static junit.framework.TestCase.assertNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 public class StringField20NullsTest {
     private String str;

File: core/src/test/java/com/alibaba/fastjson_perf/UUIDTest.java
Patch:
@@ -7,8 +7,6 @@
 
 import java.util.UUID;
 
-import static junit.framework.TestCase.assertEquals;
-
 public class UUIDTest {
     UUID1 date1 = new UUID1();
 

File: core/src/test/java/com/alibaba/fastjson_perf/WriterInt20Test_0.java
Patch:
@@ -7,8 +7,7 @@
 import org.junit.jupiter.api.Test;
 
 import static com.alibaba.fastjson2.writer.ObjectWriters.*;
-
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class WriterInt20Test_0 {
     Int10 vo = new Int10();

File: extension/src/test/java/com/alibaba/fastjson2_perf/odps/JSONExtractScalarTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class JSONExtractScalarTest {
     private String str;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1267.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson.issue_1200;
 
 import com.alibaba.fastjson.JSON;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 import org.springframework.util.LinkedMultiValueMap;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1513.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.TypeReference;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1500/Issue1582.java
Patch:
@@ -5,8 +5,8 @@
 import com.alibaba.fastjson.annotation.JSONField;
 import org.junit.jupiter.api.Test;
 
-import static junit.framework.TestCase.assertNull;
-import static junit.framework.TestCase.assertSame;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertSame;
 
 public class Issue1582 {
     @Test

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1660.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1600/Issue1683.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONType;
 import com.alibaba.fastjson.parser.Feature;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1800/Issue1821.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
 import com.alibaba.fastjson.annotation.JSONType;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1900/Issue1903.java
Patch:
@@ -3,8 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import junit.framework.TestCase;
-import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 
 import java.beans.Transient;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1900/Issue1909.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1900/Issue1972.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.JSONPath;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2100/Issue2182.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Multimap;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2206.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson.issue_2200;
 
 import com.alibaba.fastjson.JSON;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.time.LocalDateTime;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2241.java
Patch:
@@ -2,14 +2,11 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.time.ZonedDateTime;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.Locale;
-import java.util.TimeZone;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2249.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONException;
 import com.alibaba.fastjson.parser.Feature;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.*;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2200/Issue2260.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson.issue_2200;
 
 import com.alibaba.fastjson.JSON;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.time.LocalDateTime;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2300.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2334.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.JSONPath;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2355.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.math.BigDecimal;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2300/Issue2358.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.fastjson.issue_2300;
 
 import com.alibaba.fastjson.JSONObject;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2400/Issue2430.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.google.common.collect.ArrayListMultimap;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2800/Issue2866.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONField;
 import com.alibaba.fastjson.parser.Feature;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2900/Issue2962.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.*;
 
 import java.util.Calendar;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue3436.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.annotation.JSONCreator;
 import com.alibaba.fastjson.annotation.JSONType;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 import org.springframework.core.io.FileSystemResource;
 

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_3400/Issue_20201016_01.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.*;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/spring/FastJsonRedisSerializerTest.java
Patch:
@@ -13,6 +13,8 @@
 
 import java.util.Arrays;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 
 public class FastJsonRedisSerializerTest {
     private FastJsonRedisSerializer<User> serializer;
@@ -50,7 +52,7 @@ public void test_5() {
         User user = new User(1, "土豆", 25);
         byte[] serializedValue = serializer.serialize(user);
         Arrays.sort(serializedValue); // corrupt serialization result
-        Assert.assertThrows(SerializationException.class, () -> serializer.deserialize(serializedValue));
+        assertThrows(SerializationException.class, () -> serializer.deserialize(serializedValue));
     }
 
     /**

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/date/DateNewTest.java
Patch:
@@ -1,12 +1,13 @@
 package com.alibaba.json.bvt.date;
 
 import com.alibaba.fastjson.JSON;
-import junit.framework.TestCase;
 import org.junit.Assert;
+import org.junit.jupiter.api.Test;
 
 import java.util.Date;
 
-public class DateNewTest extends TestCase {
+public class DateNewTest {
+    @Test
     public void test_date() throws Exception {
         Assert.assertEquals(1324138987429L, ((Date) JSON.parse("new Date(1324138987429)")).getTime());
         Assert.assertEquals(1324138987429L, ((Date) JSON.parse("new \n\t\r\f\bDate(1324138987429)")).getTime());

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1100/Issue1153.java
Patch:
@@ -2,12 +2,13 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
-import junit.framework.TestCase;
+import org.junit.jupiter.api.Test;
 
 /**
  * Created by wenshao on 08/05/2017.
  */
-public class Issue1153 extends TestCase {
+public class Issue1153 {
+    @Test
     public void test_for_issue() throws Exception {
         String json = "{\n" +
                 "name: 'zhangshan', //这是一个姓名\n" +

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1900/Issue1945.java
Patch:
@@ -1,15 +1,16 @@
 package com.alibaba.json.bvt.issue_1900;
 
 import com.alibaba.fastjson.JSON;
-import junit.framework.TestCase;
+import org.junit.jupiter.api.Test;
 
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
 import static com.alibaba.fastjson.serializer.SerializerFeature.WriteClassName;
 
-public class Issue1945 extends TestCase {
+public class Issue1945 {
+    @Test
     public void test_0() throws Exception {
         B b = new B();
         b.clazz = new Class[]{String.class};

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_2300/Issue2311.java
Patch:
@@ -2,9 +2,10 @@
 
 import com.alibaba.fastjson.JSONPath;
 import com.jayway.jsonpath.JsonPath;
-import junit.framework.TestCase;
+import org.junit.jupiter.api.Test;
 
-public class Issue2311 extends TestCase {
+public class Issue2311 {
+    @Test
     public void test_for_issue() throws Exception {
         String t = "{\"groups\":[{\"timers\":[{\"date\":\"00000001\",\"dps\":{\"1\":true},\"loops\":\"1111111\",\"timezoneId\":\"Asia/Shanghai\",\"time\":\"13:06\",\"status\":1},{\"date\":\"00000010\",\"dps\":{\"1\":true},\"loops\":\"1111111\",\"timezoneId\":\"Asia/Shanghai\",\"time\":\"13:07\",\"status\":1}],\"id\":\"1:\"},{\"timers\":[{\"date\":\"00000100\",\"dps\":{\"1\":true},\"loops\":\"1111111\",\"timezoneId\":\"Asia/Shanghai\",\"time\":\"13:06\",\"status\":1},{\"date\":\"00001000\",\"dps\":{\"1\":true},\"loops\":\"1111111\",\"timezoneId\":\"Asia/Shanghai\",\"time\":\"13:07\",\"status\":1}],\"id\":\"2:\"}],\"category\":{\"category\":\"xxxxxx\",\"status\":1}}";
         System.out.println((Object) JsonPath.read(t, "$.groups[*].timers[*].dps.1"));

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_3100/Issue3131.java
Patch:
@@ -1,13 +1,14 @@
 package com.alibaba.json.bvt.issue_3100;
 
 import com.alibaba.fastjson.JSON;
-import junit.framework.TestCase;
+import org.junit.jupiter.api.Test;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
-public class Issue3131 extends TestCase {
+public class Issue3131 {
+    @Test
     public void test_for_issue() throws Exception {
         List orgs = new ArrayList();
         UserOrg org = new UserOrg("111","222" );

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_3300/Issue3448.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.TypeReference;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.ParameterizedType;
@@ -13,6 +12,7 @@
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * @author yumin.pym
@@ -32,8 +32,8 @@ public void test() {
         List<Map<String, List<String>>> result = parseObject(text,
             new SelfTypeReference<Map<String, List<String>>>() {});
         System.out.println("result = " + result);
-        TestCase.assertTrue(result.get(0) instanceof Map);
-        TestCase.assertTrue(result.get(0).get("key1").get(0) instanceof String);
+        assertTrue(result.get(0) instanceof Map);
+        assertTrue(result.get(0).get("key1").get(0) instanceof String);
     }
 
     public <T> List<T> parseObject(String text, SelfTypeReference<T> selfTypeReference) {

File: core/src/main/java/com/alibaba/fastjson2/util/JodaSupport.java
Patch:
@@ -71,6 +71,7 @@ static class InstantReader implements ObjectReader {
             }
         }
 
+        @Override
         public Object createInstance(Map map) {
             Number millis = (Long) map.get("millis");
             if (millis != null) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -239,6 +239,7 @@ public <T> T toJavaObject(Class<T> clazz) {
         return com.alibaba.fastjson2.JSON.toJavaObject(this, clazz);
     }
 
+    @Override
     public String toString() {
         return toJSONString(this);
     }

File: core/src/main/java/com/alibaba/fastjson2/util/JodaSupport.java
Patch:
@@ -71,6 +71,7 @@ static class InstantReader implements ObjectReader {
             }
         }
 
+        @Override
         public Object createInstance(Map map) {
             Number millis = (Long) map.get("millis");
             if (millis != null) {

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -239,6 +239,7 @@ public <T> T toJavaObject(Class<T> clazz) {
         return com.alibaba.fastjson2.JSON.toJavaObject(this, clazz);
     }
 
+    @Override
     public String toString() {
         return toJSONString(this);
     }

File: core/src/main/java/com/alibaba/fastjson2/util/JDKUtils.java
Patch:
@@ -97,6 +97,7 @@ public class JDKUtils {
             }
             default:
                 STRING_BYTES_INTERNAL_API = false;
+                break;
         }
 
         LANG_UNNAMED = !vmVendor.contains("GraalVM") && !vmName.contains("Substrate")

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -2658,7 +2658,7 @@ protected ZonedDateTime readZonedDateTimeX(int len) {
         }
 
         if (len < 19) {
-            throw new JSONException("illeal localdatetime string : " + readString());
+            return null;
         }
 
         char c0 = str.charAt(offset + 0);

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -2782,7 +2782,7 @@ protected ZonedDateTime readZonedDateTimeX(int len) {
         final char quote = ch;
 
         if (len < 19) {
-            throw new JSONException("illeal localdatetime string : " + readString());
+            return null;
         }
 
         char c0 = (char) bytes[offset + 0];

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -442,7 +442,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
             }
 
             if (!objectClass.getName().startsWith("java.lang")) {
-                String fieldName = BeanUtils.setterName(methodName, null);
+                String fieldName = BeanUtils.getterName(methodName, null);
 
                 BeanUtils.declaredFields(objectClass, field -> {
                     if (field.getName().equalsIgnoreCase(fieldName)) {

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest0.java
Patch:
@@ -21,7 +21,8 @@ public void test_0() throws Exception {
         IntField1 model = (IntField1) JSON.parseObject(text, Object.class, JSONReader.Feature.SupportAutoType);
         assertEquals(123, model.v0000);
 
-        assertTrue(JSON.parse(text) instanceof java.util.Map);
+        Object parse = JSON.parse(text);
+        assertTrue(parse instanceof java.util.Map);
         IntField1 model2 = (IntField1) JSON.parse(text, JSONReader.Feature.SupportAutoType);
         assertEquals(123, model2.v0000);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreator.java
Patch:
@@ -426,12 +426,12 @@ public <T> FieldWriter<T> createFieldWriter(
             if (field.getDeclaringClass() == Throwable.class && "stackTrace".equals(fieldName)) {
                 try {
                     Method method = Throwable.class.getMethod("getStackTrace");
-                    return new FieldWriterObjectArrayMethod(fieldName, itemClass, 0, 0, null, field.getGenericType(), fieldClass, method);
+                    return new FieldWriterObjectArrayMethod(fieldName, itemClass, ordinal, features, format, field.getGenericType(), fieldClass, method);
                 } catch (NoSuchMethodException ignored) {
                 }
             }
 
-            return new FieldWriterObjectArrayField(fieldName, itemClass, 0, 0, format, itemClass, fieldClass, field);
+            return new FieldWriterObjectArrayField(fieldName, itemClass, ordinal, features, format, itemClass, fieldClass, field);
         }
 
         return new FieldWriterObjectField(fieldName, ordinal, features, format, field.getGenericType(), fieldClass, field);

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/retrofit/Retrofit2ConverterFactoryTest.java
Patch:
@@ -1,8 +1,7 @@
-package com.alibaba.fastjson.suppert.retrofit;
+package com.alibaba.fastjson.support.retrofit;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.support.config.FastJsonConfig;
-import com.alibaba.fastjson.support.retrofit.Retrofit2ConverterFactory;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import okhttp3.internal.http.RealResponseBody;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/spring/FastJsonHttpMessageConverterTest.java
Patch:
@@ -1,9 +1,8 @@
-package com.alibaba.fastjson.suppert.spring;
+package com.alibaba.fastjson.support.spring;
 
 import com.alibaba.fastjson.serializer.SerializeFilter;
 import com.alibaba.fastjson.serializer.ValueFilter;
 import com.alibaba.fastjson.support.config.FastJsonConfig;
-import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 import org.springframework.http.HttpHeaders;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/spring/FastJsonJsonViewTest.java
Patch:
@@ -1,9 +1,8 @@
-package com.alibaba.fastjson.suppert.spring;
+package com.alibaba.fastjson.support.spring;
 
 import com.alibaba.fastjson.serializer.SerializeFilter;
 import com.alibaba.fastjson.serializer.ValueFilter;
 import com.alibaba.fastjson.support.config.FastJsonConfig;
-import com.alibaba.fastjson.support.spring.FastJsonJsonView;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 import org.springframework.mock.web.MockHttpServletRequest;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/spring/FastJsonRedisSerializerTest.java
Patch:
@@ -1,9 +1,8 @@
-package com.alibaba.fastjson.suppert.spring;
+package com.alibaba.fastjson.support.spring;
 
 import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.support.config.FastJsonConfig;
-import com.alibaba.fastjson.support.spring.FastJsonRedisSerializer;
 import com.google.common.base.Objects;
 import org.hamcrest.core.Is;
 import org.hamcrest.core.IsNull;

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializerTest.java
Patch:
@@ -1,6 +1,5 @@
-package com.alibaba.fastjson.suppert.spring;
+package com.alibaba.fastjson.support.spring;
 
-import com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer;
 import com.alibaba.fastjson.util.IOUtils;
 import com.google.common.base.Objects;
 import com.google.common.collect.Lists;
@@ -77,7 +76,7 @@ public void test_6() {
         Assert.assertEquals(baseResult2.getData().size(), 3);
 
         String json = "{\n" +
-                "\"@type\": \"com.alibaba.fastjson.suppert.spring.GenericFastJsonRedisSerializerTest$BaseResult\",\n" +
+                "\"@type\": \"com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializerTest$BaseResult\",\n" +
                 "\"code\": \"1000\",\n" +
                 "\"data\": [\n" +
                 "\"按手动控制按钮\",\n" +

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/support/spring/messaging/MappingFastJsonMessageConverterTest.java
Patch:
@@ -1,8 +1,7 @@
-package com.alibaba.fastjson.suppert.spring.messaging;
+package com.alibaba.fastjson.support.spring.messaging;
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.support.config.FastJsonConfig;
-import com.alibaba.fastjson.support.spring.messaging.MappingFastJsonMessageConverter;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 import org.springframework.messaging.Message;

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONField.java
Patch:
@@ -61,7 +61,7 @@
     Class writeUsing() default Void.class;
 
     /**
-     * Specify {@link JSONWriter.Feature}s to use features when deserializing
+     * Specify {@link JSONReader.Feature}s to use features when deserializing
      */
     JSONReader.Feature[] serializeFeatures() default {};
 

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterPretty.java
Patch:
@@ -186,6 +186,7 @@ public void writeRaw(String str) {
         jsonWriter.writeRaw(str);
     }
 
+    @Override
     public byte[] getBytes() {
         return jsonWriter.getBytes();
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -77,6 +77,7 @@ public DateTimeFormatter getFormatter() {
         return formatter;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (valueClass == fieldClass) {
             if (dateWriter == null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -32,6 +32,7 @@ protected FieldWriterObject(String name, int ordinal, long features, String form
                 || fieldClass == AtomicIntegerArray.class;
     }
 
+    @Override
     public boolean unwrapped() {
         return unwrapped;
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterPretty.java
Patch:
@@ -186,6 +186,7 @@ public void writeRaw(String str) {
         jsonWriter.writeRaw(str);
     }
 
+    @Override
     public byte[] getBytes() {
         return jsonWriter.getBytes();
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -77,6 +77,7 @@ public DateTimeFormatter getFormatter() {
         return formatter;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (valueClass == fieldClass) {
             if (dateWriter == null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -32,6 +32,7 @@ protected FieldWriterObject(String name, int ordinal, long features, String form
                 || fieldClass == AtomicIntegerArray.class;
     }
 
+    @Override
     public boolean unwrapped() {
         return unwrapped;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -162,7 +162,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
             JSONReader.Context ctx = context;
             ObjectReader itemObjectReader = getItemObjectReader(ctx);
 
-            List list = createList();
+            Collection list = (Collection) this.fieldObjectReader.createInstance(jsonReader.getContext().getFeatures() | features);
             jsonReader.next();
             for (; ; ) {
                 if (jsonReader.nextIfMatch(']')) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -229,11 +229,11 @@ public T readObject(JSONReader jsonReader, long features) {
                 }
 
                 long nameHashCodeLCase = jsonReader.getNameHashCodeLCase();
-                if (nameHashCodeLCase == hashCode0) {
+                if (nameHashCodeLCase == hashCode0LCase) {
                     fieldReader0.readFieldValue(jsonReader, object);
-                } else if (nameHashCodeLCase == hashCode1) {
+                } else if (nameHashCodeLCase == hashCode1LCase) {
                     fieldReader1.readFieldValue(jsonReader, object);
-                } else if (nameHashCodeLCase == hashCode2) {
+                } else if (nameHashCodeLCase == hashCode2LCase) {
                     fieldReader2.readFieldValue(jsonReader, object);
                 } else {
                     jsonReader.skipValue();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -162,7 +162,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
             JSONReader.Context ctx = context;
             ObjectReader itemObjectReader = getItemObjectReader(ctx);
 
-            List list = createList();
+            Collection list = (Collection) this.fieldObjectReader.createInstance(jsonReader.getContext().getFeatures() | features);
             jsonReader.next();
             for (; ; ) {
                 if (jsonReader.nextIfMatch(']')) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -229,11 +229,11 @@ public T readObject(JSONReader jsonReader, long features) {
                 }
 
                 long nameHashCodeLCase = jsonReader.getNameHashCodeLCase();
-                if (nameHashCodeLCase == hashCode0) {
+                if (nameHashCodeLCase == hashCode0LCase) {
                     fieldReader0.readFieldValue(jsonReader, object);
-                } else if (nameHashCodeLCase == hashCode1) {
+                } else if (nameHashCodeLCase == hashCode1LCase) {
                     fieldReader1.readFieldValue(jsonReader, object);
-                } else if (nameHashCodeLCase == hashCode2) {
+                } else if (nameHashCodeLCase == hashCode2LCase) {
                     fieldReader2.readFieldValue(jsonReader, object);
                 } else {
                     jsonReader.skipValue();

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -3615,8 +3615,6 @@ public void accept(Object value) {
 
                         return;
                     }
-
-                    values.add(value);
                 }
             }
         }

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.*;
 import java.util.function.Function;
 
-public class JSONObject extends LinkedHashMap<String, Object> implements InvocationHandler {
+public class JSONObject extends LinkedHashMap implements InvocationHandler {
 
     private static final long serialVersionUID = 1L;
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderProvider.java
Patch:
@@ -288,7 +288,6 @@ public class ObjectReaderProvider {
                 8055461369741094911L,
                 8064026652676081192L,
                 8389032537095247355L,
-                8409640769019589119L,
                 8488266005336625107L,
                 8537233257283452655L,
                 8735538376409180149L,

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1031,7 +1031,7 @@ public Map<String, Object> readObject() {
                     val = null;
                     break;
                 default:
-                    throw new JSONException("TODO : " + ch);
+                    throw new JSONException("illegal input offset " + offset + ", char " + ch);
             }
             object.put(name, val);
         }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectMethod.java
Patch:
@@ -59,7 +59,8 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         if (this.fieldObjectReader != null) {
             objectReader = this.fieldObjectReader;
         } else {
-            objectReader = this.fieldObjectReader = jsonReader.getContext().getObjectReader(fieldType);
+            objectReader = this.fieldObjectReader = jsonReader.getContext()
+                    .getObjectReader(fieldType);
         }
 
         if (jsonReader.isReference()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -548,6 +548,8 @@ private void processJSONField1x(FieldInfo fieldInfo, Annotation annotation) {
                         case "format": {
                             String format = (String) result;
                             if (!format.isEmpty()) {
+                                format = format.trim();
+
                                 if (format.indexOf('T') != -1 && !format.contains("'T'")) {
                                     format = format.replaceAll("T", "'T'");
                                 }
@@ -628,6 +630,7 @@ private void getFieldInfo(FieldInfo fieldInfo, JSONField jsonField) {
 
             String jsonFieldFormat = jsonField.format();
             if (!jsonFieldFormat.isEmpty()) {
+                jsonFieldFormat = jsonFieldFormat.trim();
                 if (jsonFieldFormat.indexOf('T') != -1 && !jsonFieldFormat.contains("'T'")) {
                     jsonFieldFormat = jsonFieldFormat.replaceAll("T", "'T'");
                 }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateMethod.java
Patch:
@@ -7,10 +7,10 @@
 import java.lang.reflect.Method;
 import java.util.Date;
 
-final class FieldWriterDateFieldMethod<T> extends FieldWriterDate<T> {
+final class FieldWriterDateMethod<T> extends FieldWriterDate<T> {
     final Method method;
 
-    protected FieldWriterDateFieldMethod(
+    protected FieldWriterDateMethod(
             String fieldName
             , int ordinal
             , long features

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -145,7 +145,7 @@ public ObjectWriter createObjectWriter(
                     return;
                 }
 
-                FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, Collections.emptyList(), fieldInfo, field);
+                FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, Collections.emptyList(), beanInfo, fieldInfo, field);
                 if (fieldWriter != null) {
                     fieldWriterMap.put(fieldWriter.getFieldName(), fieldWriter);
                 }
@@ -175,7 +175,7 @@ public ObjectWriter createObjectWriter(
 
                 BeanUtils.fields(objectClass, field -> {
                     fieldInfo.init();
-                    FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, modules, fieldInfo, field);
+                    FieldWriter fieldWriter = creteFieldWriter(objectClass, writerFeatures, modules, beanInfo, fieldInfo, field);
                     if (fieldWriter != null) {
                         fieldWriterMap.putIfAbsent(fieldWriter.getFieldName(), fieldWriter);
                     }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterProvider.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson2.JSONFactory;
 import com.alibaba.fastjson2.JSONWriter;
 import com.alibaba.fastjson2.modules.ObjectWriterModule;
-import com.alibaba.fastjson2.reader.ObjectReader;
 import com.alibaba.fastjson2.util.GuavaSupport;
 import com.alibaba.fastjson2.util.TypeUtils;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2000/Issue2040.java
Patch:
@@ -28,7 +28,8 @@ public void test_for_issue_2040_2() {
                 "    }";
 
         Permissions permissions = JSON.parseObject(json, Permissions.class, JSONReader.Feature.SupportSmartMatch);
-        assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", JSON.toJSONString(permissions));
+        String json2 = JSON.toJSONString(permissions);
+        assertEquals("{\"groupAccess\":{\"accessLevel\":50,\"notificationLevel\":3}}", json2);
     }
 
     public static class Model {

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2784.java
Patch:
@@ -21,7 +21,7 @@ public void test_for_issue() {
                 + "}", str);
 
         Model m1 = JSON.parseObject(str, Model.class);
-        assertEquals(m.time, m1.time);
+        assertEquals(m.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli(), m1.time.atZone(JSON.defaultTimeZone.toZoneId()).toInstant().toEpochMilli());
     }
 
     @Test

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -1997,7 +1997,8 @@ public Object readObject(JSONReader jsonReader, long features) {
                 }
 
                 Instant instant = Instant.ofEpochMilli(millis);
-                return LocalDateTime.ofInstant(instant, jsonReader.getContext().getZoneId());
+                ZoneId zoneId = jsonReader.getContext().getZoneId();
+                return LocalDateTime.ofInstant(instant, zoneId);
             }
 
             if (jsonReader.readIfNull()) {

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2700/Issue2784.java
Patch:
@@ -24,7 +24,7 @@ public void test_for_issue() {
                 + "}", str);
 
         Model m1 = JSON.parseObject(str, Model.class);
-        assertEquals(m.time, m1.time);
+        assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli());
     }
 
     @Test

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_2700/Issue2784C.java
Patch:
@@ -24,7 +24,7 @@ public void test_for_issue() {
                 + "}", str);
 
         Model m1 = JSON.parseObject(str, Model.class);
-        assertEquals(m.time, m1.time);
+        assertEquals(m.time.atZone(zoneId).toInstant().toEpochMilli(), m1.time.atZone(zoneId).toInstant().toEpochMilli());
     }
 
     @Test

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -2779,7 +2779,7 @@ protected ZonedDateTime readZonedDateTimeX(int len) {
         }
         final char quote = ch;
 
-        if (len < 20) {
+        if (len < 19) {
             throw new JSONException("illeal localdatetime string : " + readString());
         }
 
@@ -2802,10 +2802,11 @@ protected ZonedDateTime readZonedDateTimeX(int len) {
         char c16 = (char) bytes[offset + 16];
         char c17 = (char) bytes[offset + 17];
         char c18 = (char) bytes[offset + 18];
-        char c19 = (char) bytes[offset + 19];
+        char c19 = len == 19 ? ' ' : (char) bytes[offset + 19];
 
         char c20, c21 = '0', c22 = '0', c23 = '0', c24 = '0', c25 = '0', c26 = '0', c27 = '0', c28 = '0', c29 = '\0';
         switch (len) {
+            case 19:
             case 20:
                 c20 = '\0';
                 break;

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -2050,6 +2050,7 @@ public enum Feature {
         UseDefaultConstructorAsPossible (1 << 9),
         UseBigDecimalForFloats          (1 << 10),
         UseBigDecimalForDoubles         (1 << 11),
+        ErrorOnEnumNotMatch             (1 << 12)
         ;
 
         public final long mask;

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/JSON.java
Patch:
@@ -154,6 +154,8 @@ private static void config(JSONReader.Context context, Feature[] features) {
                 case SupportAutoType:
                     context.config(JSONReader.Feature.SupportAutoType);
                     break;
+                case ErrorOnEnumNotMatch:
+                    context.config(JSONReader.Feature.ErrorOnEnumNotMatch);
                 default:
                     break;
             }

File: fastjson1-compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1265.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.TypeReference;
-import com.alibaba.fastjson2.JSONObject;
+import com.alibaba.fastjson.JSONObject;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -363,7 +363,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
                 valueWriter = jsonWriter.getObjectWriter(valueType);
             }
 
-            if (refDetect) {
+            if (refDetect && !ObjectWriterProvider.isPrimitiveOrEnum(value.getClass())) {
                 if (value == object) {
                     jsonWriter.writeReference("..");
                     continue;

File: fastjson1-compatible/src/test/java/com/alibaba/json/bvt/issue_1400/Issue1480.java
Patch:
@@ -23,7 +23,7 @@ public void test_for_issue() throws Exception {
 
         String json = JSON.toJSONString(map);
         System.out.println(json);
-        Assert.assertEquals("{1:10,2:4,3:5,4:5,37306:98,36796:9}",json);
+        Assert.assertEquals("{\"1\":10,\"2\":4,\"3\":5,\"4\":5,\"37306\":98,\"36796\":9}",json);
 
         Map<Integer,Integer> map1 = JSON.parseObject(json,new TypeReference<HashMap<Integer,Integer>>() {}.getType());
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1429.java
Patch:
@@ -11,15 +11,15 @@ public class Issue1429 {
     @Test
     public void test_for_issue() throws Exception {
         String json = "[{\n" +
-                "            \"@type\": \"com.alibaba.fastjson.issue_1400.Issue1429$Student\",\n" +
+                "            \"@type\": \"com.alibaba.fastjson2.v1issues.issue_1400.Issue1429$Student\",\n" +
                 "            \"age\": 22,\n" +
                 "            \"id\": 1,\n" +
                 "            \"name\": \"hello\"\n" +
                 "        }, {\n" +
                 "            \"age\": 22,\n" +
                 "            \"id\": 1,\n" +
                 "            \"name\": \"hhh\",\n" +
-                "            \"@type\": \"com.alibaba.fastjson.issue_1400.Issue1429$Student\"\n" +
+                "            \"@type\": \"com.alibaba.fastjson2.v1issues.issue_1400.Issue1429$Student\"\n" +
                 "        }]";
 
         JSONArray list = JSON.parseArray(json, JSONReader.Feature.SupportAutoType);

File: core/src/main/java/com/alibaba/fastjson2/JSONValidException.java
Patch:
@@ -5,6 +5,7 @@ public JSONValidException(String message) {
         super(message);
     }
 
+    @Override
     public synchronized Throwable fillInStackTrace() {
         // fast valid
         return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanFieldReadOnly.java
Patch:
@@ -21,6 +21,7 @@ public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public Field getField() {
         return field;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanMethodReadOnly.java
Patch:
@@ -17,6 +17,7 @@ final class FieldReaderAtomicBooleanMethodReadOnly<T>
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerArrayReadOnly.java
Patch:
@@ -14,6 +14,7 @@ final class FieldReaderAtomicIntegerArrayReadOnly<T> extends FieldReaderImpl<T>
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerMethodReadOnly.java
Patch:
@@ -14,6 +14,7 @@ class FieldReaderAtomicIntegerMethodReadOnly<T> extends FieldReaderImpl<T> imple
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongArrayReadOnly.java
Patch:
@@ -14,6 +14,7 @@ final class FieldReaderAtomicLongArrayReadOnly<T> extends FieldReaderImpl<T> {
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceField.java
Patch:
@@ -20,6 +20,7 @@ final class FieldReaderAtomicReferenceField<T>
         readOnly = Modifier.isFinal(field.getModifiers());
     }
 
+    @Override
     public Field getField() {
         return field;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceMethodReadOnly.java
Patch:
@@ -16,6 +16,7 @@ final class FieldReaderAtomicReferenceMethodReadOnly<T>
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderImpl.java
Patch:
@@ -46,6 +46,7 @@ public FieldReaderImpl(String fieldName, Type fieldType, Class fieldClass, int o
         this.format = format;
     }
 
+    @Override
     public boolean isFieldClassSerializable() {
         return fieldClassSerializable;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterImpl.java
Patch:
@@ -73,6 +73,7 @@ abstract class FieldWriterImpl<T> implements FieldWriter<T> {
         nameWithColonUTF16[nameWithColonUTF16.length - 1] = ':';
     }
 
+    @Override
     public boolean isFieldClassSerializable() {
         return fieldClassSerializable;
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONValidException.java
Patch:
@@ -5,6 +5,7 @@ public JSONValidException(String message) {
         super(message);
     }
 
+    @Override
     public synchronized Throwable fillInStackTrace() {
         // fast valid
         return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanFieldReadOnly.java
Patch:
@@ -21,6 +21,7 @@ public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public Field getField() {
         return field;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicBooleanMethodReadOnly.java
Patch:
@@ -17,6 +17,7 @@ final class FieldReaderAtomicBooleanMethodReadOnly<T>
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerArrayReadOnly.java
Patch:
@@ -14,6 +14,7 @@ final class FieldReaderAtomicIntegerArrayReadOnly<T> extends FieldReaderImpl<T>
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerMethodReadOnly.java
Patch:
@@ -14,6 +14,7 @@ class FieldReaderAtomicIntegerMethodReadOnly<T> extends FieldReaderImpl<T> imple
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongArrayReadOnly.java
Patch:
@@ -14,6 +14,7 @@ final class FieldReaderAtomicLongArrayReadOnly<T> extends FieldReaderImpl<T> {
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceField.java
Patch:
@@ -20,6 +20,7 @@ final class FieldReaderAtomicReferenceField<T>
         readOnly = Modifier.isFinal(field.getModifiers());
     }
 
+    @Override
     public Field getField() {
         return field;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceMethodReadOnly.java
Patch:
@@ -16,6 +16,7 @@ final class FieldReaderAtomicReferenceMethodReadOnly<T>
         this.method = method;
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderImpl.java
Patch:
@@ -46,6 +46,7 @@ public FieldReaderImpl(String fieldName, Type fieldType, Class fieldClass, int o
         this.format = format;
     }
 
+    @Override
     public boolean isFieldClassSerializable() {
         return fieldClassSerializable;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterImpl.java
Patch:
@@ -73,6 +73,7 @@ abstract class FieldWriterImpl<T> implements FieldWriter<T> {
         nameWithColonUTF16[nameWithColonUTF16.length - 1] = ':';
     }
 
+    @Override
     public boolean isFieldClassSerializable() {
         return fieldClassSerializable;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -411,7 +411,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                     value = null;
                     break;
                 default:
-                    throw new JSONException("TODO : " + jsonReader.current());
+                    throw new JSONException("error, offset " + jsonReader.getOffset() + ", char " + jsonReader.current());
             }
             object.put(name, value);
         }

File: core/src/main/java/com/alibaba/fastjson2/asm/ASMUtils.java
Patch:
@@ -55,7 +55,8 @@ public static String type(Class<?> clazz) {
         }
 
         String clsName = clazz.getName();
-        return clsName.replace('.', '/'); // 直接基于字符串替换，不使用正则替换
+        // 直接基于字符串替换，不使用正则替换
+        return clsName.replace('.', '/');
     }
 
     static final AtomicReference<char[]> descCacheRef = new AtomicReference<>();
@@ -131,9 +132,8 @@ public static String[] lookupParameterNames(AccessibleObject methodOrCtor) {
             ClassReader reader = new ClassReader(is, false);
             TypeCollector visitor = new TypeCollector(name, types);
             reader.accept(visitor);
-            String[] parameterNames = visitor.getParameterNamesForMethod();
 
-            return parameterNames;
+            return visitor.getParameterNamesForMethod();
         } catch (IOException e) {
             return new String[0];
         } finally {

File: core/src/main/java/com/alibaba/fastjson2/util/DynamicClassLoader.java
Patch:
@@ -117,9 +117,8 @@ protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundE
     }
 
     public Class<?> defineClassPublic(String name, byte[] b, int off, int len) throws ClassFormatError {
-        Class<?> clazz = defineClass(name, b, off, len, DOMAIN);
 
-        return clazz;
+        return defineClass(name, b, off, len, DOMAIN);
     }
 
     public boolean isExternalClass(Class<?> clazz) {

File: core/src/main/java/com/alibaba/fastjson2/asm/ASMUtils.java
Patch:
@@ -55,7 +55,8 @@ public static String type(Class<?> clazz) {
         }
 
         String clsName = clazz.getName();
-        return clsName.replace('.', '/'); // 直接基于字符串替换，不使用正则替换
+        // 直接基于字符串替换，不使用正则替换
+        return clsName.replace('.', '/');
     }
 
     static final AtomicReference<char[]> descCacheRef = new AtomicReference<>();
@@ -131,9 +132,8 @@ public static String[] lookupParameterNames(AccessibleObject methodOrCtor) {
             ClassReader reader = new ClassReader(is, false);
             TypeCollector visitor = new TypeCollector(name, types);
             reader.accept(visitor);
-            String[] parameterNames = visitor.getParameterNamesForMethod();
 
-            return parameterNames;
+            return visitor.getParameterNamesForMethod();
         } catch (IOException e) {
             return new String[0];
         } finally {

File: core/src/main/java/com/alibaba/fastjson2/util/DynamicClassLoader.java
Patch:
@@ -117,9 +117,8 @@ protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundE
     }
 
     public Class<?> defineClassPublic(String name, byte[] b, int off, int len) throws ClassFormatError {
-        Class<?> clazz = defineClass(name, b, off, len, DOMAIN);
 
-        return clazz;
+        return defineClass(name, b, off, len, DOMAIN);
     }
 
     public boolean isExternalClass(Class<?> clazz) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -47,6 +47,7 @@ public abstract class JSONReader implements Closeable {
 
     protected int offset;
     protected char ch;
+    protected boolean comma;
 
     protected boolean nameEscape = false;
     protected boolean valueEscape = false;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -1783,7 +1783,7 @@ public void skipValue() {
             case 't':
             case 'f':
             case 'n':
-                for (; ; ) {
+                for (; offset < end; ) {
                     ch = (char) bytes[offset++];
                     if (ch == '}' || ch == ']') {
                         break;

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -1417,7 +1417,7 @@ public void skipValue() {
             case 't':
             case 'f':
             case 'n':
-                for (; ; ) {
+                for (; offset < end; ) {
                     ch = chars[offset++];
                     if (ch == '}' || ch == ']') {
                         break;

File: core/src/test/java/com/alibaba/fastjson2/issues/Issue81.java
Patch:
@@ -16,7 +16,7 @@ public void test_issue() {
         assertTrue(JSON.isValid(jsonObjectStr));
         assertFalse(JSON.isValidArray(jsonObjectStr));
         assertTrue(JSON.isValidArray(jsonArrayStr));
-        assertFalse(JSON.isValid(value));
+        assertTrue(JSON.isValid(value));
         assertFalse(JSON.isValidArray(value));
     }
 }

File: core/src/main/java/com/alibaba/fastjson2/JSON.java
Patch:
@@ -599,7 +599,7 @@ static boolean isValid(String text) {
         if (text == null || text.length() == 0) {
             return false;
         }
-        if(!text.startsWith("{") || !text.endsWith("}")){
+        if(!text.startsWith("{") & !text.startsWith("[")){
             return false;
         }
         JSONReader jsonReader = JSONReader.of(text);
@@ -621,7 +621,7 @@ static boolean isValidArray(String text) {
         if (text == null || text.length() == 0) {
             return false;
         }
-        if(!text.startsWith("[") || !text.endsWith("]")){
+        if(!text.startsWith("[")){
             return false;
         }
         JSONReader jsonReader = JSONReader.of(text);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -224,7 +224,7 @@ public T readObject(JSONReader jsonReader, long features) {
         Object object = defaultCreator.get();
         for (int i = 0; ; ++i) {
             if (jsonReader.nextIfMatch('}')) {
-                jsonReader.next();
+//                jsonReader.next();
                 break;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -224,7 +224,7 @@ public T readObject(JSONReader jsonReader, long features) {
         Object object = defaultCreator.get();
         for (int i = 0; ; ++i) {
             if (jsonReader.nextIfMatch('}')) {
-                jsonReader.next();
+//                jsonReader.next();
                 break;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -224,7 +224,7 @@ public T readObject(JSONReader jsonReader, long features) {
         Object object = defaultCreator.get();
         for (int i = 0; ; ++i) {
             if (jsonReader.nextIfMatch('}')) {
-                jsonReader.next();
+//                jsonReader.next();
                 break;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -224,7 +224,7 @@ public T readObject(JSONReader jsonReader, long features) {
         Object object = defaultCreator.get();
         for (int i = 0; ; ++i) {
             if (jsonReader.nextIfMatch('}')) {
-                //jsonReader.next();
+                jsonReader.next();
                 break;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -224,7 +224,7 @@ public T readObject(JSONReader jsonReader, long features) {
         Object object = defaultCreator.get();
         for (int i = 0; ; ++i) {
             if (jsonReader.nextIfMatch('}')) {
-                jsonReader.next();
+                //jsonReader.next();
                 break;
             }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONPath.java
Patch:
@@ -2055,7 +2055,7 @@ public Object extract(JSONReader jsonReader) {
                     boolean match = nameHashCode == this.nameHashCode;
 
                     char ch = jsonReader.ch;
-                    if (!match && ch != '{' && ch != '[') {
+                    if (!match) {
                         jsonReader.skipValue();
                         continue;
                     }

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriter.java
Patch:
@@ -115,9 +115,7 @@ default void write(JSONWriter jsonWriter, Object object) {
         write(jsonWriter, object, null, null, 0);
     }
 
-    default void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
-
-    }
+    public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features);
 
     default void writeWithFilter(JSONWriter jsonWriter, Object object) {
         writeWithFilter(jsonWriter, object, null, null, 0);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader.java
Patch:
@@ -25,7 +25,6 @@ default T createInstance() {
     /**
      * @return {@link T}
      * @throws UnsupportedOperationException If the method is not overloaded or otherwise
-     * @param features
      */
     default T createInstance(long features) {
         throw new UnsupportedOperationException();

File: extension/src/main/java/com/alibaba/fastjson2/support/config/FastJsonConfig.java
Patch:
@@ -13,7 +13,7 @@
  * @see JSONReader.Feature
  * @see JSONWriter.Feature
  * @see Filter
- * @see 2.0.2
+ * @since 2.0.2
  */
 public class FastJsonConfig {
 

File: extension/src/main/java/com/alibaba/fastjson2/support/spring/web/view/FastJsonJsonView.java
Patch:
@@ -87,8 +87,6 @@ public boolean isExtractValueFromSingleKeyModel() {
 
     /**
      * Set extractValueFromSingleKeyModel.
-     *
-     * @param extractValueFromSingleKeyModel
      */
     public void setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel) {
         this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel;
@@ -188,4 +186,4 @@ protected void setResponseContentType(HttpServletRequest request, HttpServletRes
         super.setResponseContentType(request, response);
     }
 
-}
\ No newline at end of file
+}

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/TypeReference.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-/** 
+/**
  * Represents a generic type {@code T}. Java doesn't yet provide a way to
  * represent generic types, so this class does. Forces clients to create a
  * subclass of this class which enables retrieval the type information even at
@@ -56,7 +56,6 @@ protected TypeReference(){
 
     /**
      * @since 1.2.9
-     * @param actualTypeArguments
      */
     protected TypeReference(Type... actualTypeArguments){
         Class<?> thisClass = this.getClass();
@@ -120,7 +119,7 @@ private Type handlerParameterizedType(ParameterizedType type, Type[] actualTypeA
         Type key = new ParameterizedTypeImpl(argTypes, thisClass, rawType);
         return key;
     }
-    
+
     /**
      * Gets underlying {@code Type} instance.
      */

File: fastjson1-compatible/src/main/java/com/alibaba/fastjson/support/spring/FastJsonJsonView.java
Patch:
@@ -91,8 +91,6 @@ public boolean isExtractValueFromSingleKeyModel() {
 
     /**
      * Set extractValueFromSingleKeyModel.
-     *
-     * @param extractValueFromSingleKeyModel
      */
     public void setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel) {
         this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -123,9 +123,9 @@ public void readFieldValue(JSONReader jsonReader, T object) {
 
             Collection list;
             if (autoTypeReader != null) {
-                list = (Collection) autoTypeReader.createInstance();
+                list = (Collection) autoTypeReader.createInstance(jsonReader.getContext().getFeatures() | features);
             } else {
-                list = (Collection) this.fieldObjectReader.createInstance();
+                list = (Collection) this.fieldObjectReader.createInstance(jsonReader.getContext().getFeatures() | features);
             }
 
             int entryCnt = jsonReader.startArray();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -44,7 +44,7 @@ public Function getBuildFunction() {
     }
 
     @Override
-    public T createInstance() {
+    public T createInstance(long features) {
         return defaultCreator.get();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -60,7 +60,7 @@ public Function getBuildFunction() {
     }
 
     @Override
-    public T createInstance() {
+    public T createInstance(long features) {
         return defaultCreator.get();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader3.java
Patch:
@@ -70,7 +70,7 @@ public Function getBuildFunction() {
     }
 
     @Override
-    public T createInstance() {
+    public T createInstance(long features) {
         return defaultCreator.get();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader4.java
Patch:
@@ -77,7 +77,7 @@ public Function getBuildFunction() {
     }
 
     @Override
-    public T createInstance() {
+    public T createInstance(long features) {
         return defaultCreator.get();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader5.java
Patch:
@@ -277,7 +277,7 @@ public T readObject(JSONReader jsonReader, long features) {
     }
 
     @Override
-    public T createInstance() {
+    public T createInstance(long features) {
         return defaultCreator.get();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader6.java
Patch:
@@ -93,7 +93,7 @@ public Function getBuildFunction() {
     }
 
     @Override
-    public T createInstance() {
+    public T createInstance(long features) {
         return defaultCreator.get();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplListStr.java
Patch:
@@ -19,7 +19,7 @@ public ObjectReaderImplListStr(Class listType, Class instanceType) {
     }
 
     @Override
-    public Object createInstance() {
+    public Object createInstance(long features) {
         if (instanceType == ArrayList.class) {
             return new ArrayList();
         }
@@ -96,7 +96,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
                 throw new JSONException("create instance error " + listType, e);
             }
         } else {
-            list = (Collection) createInstance();
+            list = (Collection) createInstance(jsonReader.getContext().getFeatures() | features);
         }
 
         int entryCnt = jsonReader.startArray();
@@ -127,7 +127,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         jsonReader.next();
 
 
-        Collection list = (Collection) createInstance();
+        Collection list = (Collection) createInstance(jsonReader.getContext().getFeatures() | features);
         for (; ; ) {
             if (jsonReader.nextIfMatch(']')) {
                 break;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMap.java
Patch:
@@ -131,7 +131,7 @@ public Function getBuildFunction() {
     }
 
     @Override
-    public Object createInstance() {
+    public Object createInstance(long features) {
         if (instanceType == HashMap.class) {
             return new HashMap<>();
         }
@@ -336,7 +336,7 @@ public Object readObject(JSONReader jsonReader, long features) {
                 throw new JSONException("create object instance error, objectClass " + objectClass.getName());
             }
         } else {
-            object = (Map) createInstance();
+            object = (Map) createInstance(jsonReader.getContext().getFeatures() | features);
         }
 
         boolean match = jsonReader.nextIfMatch('{');

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapString.java
Patch:
@@ -35,7 +35,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         Map<String, Object> object
                 = instanceType == HashMap.class
                 ? new HashMap<>()
-                : (Map) createInstance();
+                : (Map) createInstance(jsonReader.getContext().getFeatures() | features);
 
         for (; ; ) {
             if (jsonReader.nextIfMatch('}')) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapTyped.java
Patch:
@@ -79,7 +79,7 @@ public Object createInstance(Map input) {
     }
 
     @Override
-    public Object createInstance() {
+    public Object createInstance(long features) {
         if (instanceType != null && !instanceType.isInterface()) {
             try {
                 return instanceType.newInstance();
@@ -122,7 +122,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
 
         Map object;
         if (objectReader != null) {
-            object = (Map) objectReader.createInstance();
+            object = (Map) objectReader.createInstance(jsonReader.getContext().getFeatures() | features);
         } else {
             object = instanceType == HashMap.class
                     ? new HashMap<>()
@@ -209,7 +209,7 @@ public Object readObject(JSONReader jsonReader, long features) {
         Map object
                 = instanceType == HashMap.class
                 ? new HashMap<>()
-                : (Map) createInstance();
+                : (Map) createInstance(jsonReader.getContext().getFeatures() | features);
 
         for (; ; ) {
             if (jsonReader.nextIfMatch('}')) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderSeeAlso.java
Patch:
@@ -42,7 +42,7 @@ final class ObjectReaderSeeAlso<T> extends ObjectReaderAdapter<T> {
     }
 
     @Override
-    public T createInstance() {
+    public T createInstance(long features) {
         if (creator == null) {
             return null;
         }

File: core/src/test/java/com/alibaba/fastjson2/eishay/vo/Image_ObjectReader.java
Patch:
@@ -34,7 +34,7 @@ public Image_ObjectReader(FieldReader[] fieldReaders) {
     }
 
     @Override
-    public Object createInstance() {
+    public Object createInstance(long features) {
         return new Image();
     }
 

File: core/src/test/java/com/alibaba/fastjson2/eishay/vo/MediaContent_ObjectReader.java
Patch:
@@ -25,7 +25,7 @@ public MediaContent_ObjectReader(FieldReader[] fieldReaders) {
     }
 
     @Override
-    public Object createInstance() {
+    public Object createInstance(long features) {
         return new MediaContent();
     }
 

File: core/src/test/java/com/alibaba/fastjson2/eishay/vo/Media_ObjectReader.java
Patch:
@@ -51,7 +51,7 @@ public Media_ObjectReader(FieldReader[] fieldReaders) {
     }
 
     @Override
-    public Object createInstance() {
+    public Object createInstance(long features) {
         return new Media();
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -65,7 +65,7 @@ public String getString() {
             charset = StandardCharsets.US_ASCII;
         } else if (strtype >= BC_STR_ASCII_FIX_MIN && strtype <= BC_STR_ASCII_FIX_MAX) {
             if (JDKUtils.JVM_VERSION == 8) {
-                char chars[] = new char[strlen];
+                char[] chars = new char[strlen];
                 for (int i = 0; i < strlen; ++i) {
                     chars[i] = (char) bytes[strBegin + i];
                 }
@@ -638,7 +638,7 @@ public Object readAny() {
                     }
 
                     if (JDKUtils.JVM_VERSION == 8) {
-                        char chars[] = new char[strlen];
+                        char[] chars = new char[strlen];
                         for (int i = 0; i < strlen; ++i) {
                             chars[i] = (char) bytes[offset + i];
                         }
@@ -2143,7 +2143,7 @@ public Long readInt64() {
     private String readFixedAsciiString(int strlen) {
         String str;
         if (JDKUtils.JVM_VERSION == 8) {
-            char chars[] = new char[strlen];
+            char[] chars = new char[strlen];
             for (int i = 0; i < strlen; ++i) {
                 chars[i] = (char) bytes[offset + i];
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -715,7 +715,7 @@ public String getFieldName() {
                         }
                     }
                     if (STRING_CREATOR_JDK8 != null) {
-                        char chars[] = new char[length];
+                        char[] chars = new char[length];
                         for (int i = 0; i < length; ++i) {
                             chars[i] = (char) bytes[nameBegin + i];
                         }
@@ -914,7 +914,7 @@ public String readFieldName() {
                         }
                     }
                     if (STRING_CREATOR_JDK8 != null) {
-                        char chars[] = new char[length];
+                        char[] chars = new char[length];
                         for (int i = 0; i < length; ++i) {
                             chars[i] = (char) bytes[nameBegin + i];
                         }
@@ -2168,7 +2168,7 @@ public String readString() {
             } else if (ascii) {
                 if (JDKUtils.JVM_VERSION == 8) {
                     int strlen = offset - this.offset;
-                    char chars[] = new char[strlen];
+                    char[] chars = new char[strlen];
                     for (int i = 0; i < strlen; ++i) {
                         chars[i] = (char) bytes[this.offset + i];
                     }

File: core/src/main/java/com/alibaba/fastjson2/trove/map/hash/TLongIntHashMap.java
Patch:
@@ -137,9 +137,9 @@ public void put(long key, int value) {
                 {
                     int oldCapacity = _set.length;
 
-                    long oldKeys[] = _set;
-                    int oldVals[] = _values;
-                    byte oldStates[] = _states;
+                    long[] oldKeys = _set;
+                    int[] oldVals = _values;
+                    byte[] oldStates = _states;
 
                     _set = new long[newCapacity];
                     _values = new int[newCapacity];

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/util/TypeUtils.java
Patch:
@@ -594,7 +594,7 @@ public static boolean isNumber(String str){
             if(ch == '+' || ch == '-'){
                 if(i != 0){
                     return false;
-                } 
+                }
             } else if(ch < '0' || ch > '9'){
                 return false;
             }
@@ -653,7 +653,7 @@ public static Long castToLong(Object value){
                 return castToLong(value2);
             }
         }
-        
+
         throw new JSONException("can not cast to long, value : " + value);
     }
 
@@ -2242,7 +2242,7 @@ public static String decapitalize(String name){
         if(name.length() > 1 && Character.isUpperCase(name.charAt(1)) && Character.isUpperCase(name.charAt(0))){
             return name;
         }
-        char chars[] = name.toCharArray();
+        char[] chars = name.toCharArray();
         chars[0] = Character.toLowerCase(chars[0]);
         return new String(chars);
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderJSONB.java
Patch:
@@ -65,7 +65,7 @@ public String getString() {
             charset = StandardCharsets.US_ASCII;
         } else if (strtype >= BC_STR_ASCII_FIX_MIN && strtype <= BC_STR_ASCII_FIX_MAX) {
             if (JDKUtils.JVM_VERSION == 8) {
-                char chars[] = new char[strlen];
+                char[] chars = new char[strlen];
                 for (int i = 0; i < strlen; ++i) {
                     chars[i] = (char) bytes[strBegin + i];
                 }
@@ -638,7 +638,7 @@ public Object readAny() {
                     }
 
                     if (JDKUtils.JVM_VERSION == 8) {
-                        char chars[] = new char[strlen];
+                        char[] chars = new char[strlen];
                         for (int i = 0; i < strlen; ++i) {
                             chars[i] = (char) bytes[offset + i];
                         }
@@ -2143,7 +2143,7 @@ public Long readInt64() {
     private String readFixedAsciiString(int strlen) {
         String str;
         if (JDKUtils.JVM_VERSION == 8) {
-            char chars[] = new char[strlen];
+            char[] chars = new char[strlen];
             for (int i = 0; i < strlen; ++i) {
                 chars[i] = (char) bytes[offset + i];
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -715,7 +715,7 @@ public String getFieldName() {
                         }
                     }
                     if (STRING_CREATOR_JDK8 != null) {
-                        char chars[] = new char[length];
+                        char[] chars = new char[length];
                         for (int i = 0; i < length; ++i) {
                             chars[i] = (char) bytes[nameBegin + i];
                         }
@@ -914,7 +914,7 @@ public String readFieldName() {
                         }
                     }
                     if (STRING_CREATOR_JDK8 != null) {
-                        char chars[] = new char[length];
+                        char[] chars = new char[length];
                         for (int i = 0; i < length; ++i) {
                             chars[i] = (char) bytes[nameBegin + i];
                         }
@@ -2168,7 +2168,7 @@ public String readString() {
             } else if (ascii) {
                 if (JDKUtils.JVM_VERSION == 8) {
                     int strlen = offset - this.offset;
-                    char chars[] = new char[strlen];
+                    char[] chars = new char[strlen];
                     for (int i = 0; i < strlen; ++i) {
                         chars[i] = (char) bytes[this.offset + i];
                     }

File: core/src/main/java/com/alibaba/fastjson2/trove/map/hash/TLongIntHashMap.java
Patch:
@@ -137,9 +137,9 @@ public void put(long key, int value) {
                 {
                     int oldCapacity = _set.length;
 
-                    long oldKeys[] = _set;
-                    int oldVals[] = _values;
-                    byte oldStates[] = _states;
+                    long[] oldKeys = _set;
+                    int[] oldVals = _values;
+                    byte[] oldStates = _states;
 
                     _set = new long[newCapacity];
                     _values = new int[newCapacity];

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/util/TypeUtils.java
Patch:
@@ -594,7 +594,7 @@ public static boolean isNumber(String str){
             if(ch == '+' || ch == '-'){
                 if(i != 0){
                     return false;
-                } 
+                }
             } else if(ch < '0' || ch > '9'){
                 return false;
             }
@@ -653,7 +653,7 @@ public static Long castToLong(Object value){
                 return castToLong(value2);
             }
         }
-        
+
         throw new JSONException("can not cast to long, value : " + value);
     }
 
@@ -2242,7 +2242,7 @@ public static String decapitalize(String name){
         if(name.length() > 1 && Character.isUpperCase(name.charAt(1)) && Character.isUpperCase(name.charAt(0))){
             return name;
         }
-        char chars[] = name.toCharArray();
+        char[] chars = name.toCharArray();
         chars[0] = Character.toLowerCase(chars[0]);
         return new String(chars);
     }

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/date/DateTest2.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import junit.framework.TestCase;
+import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -19,7 +20,8 @@ protected void setUp() throws Exception {
         timeZone = JSON.defaultTimeZone;
     }
 
-    protected void tearDown() throws Exception {
+    @AfterEach
+    public void tearDown() throws Exception {
         JSON.defaultTimeZone = timeZone;
     }
 

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_1200/Issue1298.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import junit.framework.TestCase;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
 import java.util.Date;
@@ -16,6 +16,7 @@
  * Created by wenshao on 30/06/2017.
  */
 public class Issue1298 {
+    @BeforeEach
     protected void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
         JSON.defaultLocale = Locale.US;

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_1400/Issue1493.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import junit.framework.TestCase;
 import org.junit.Assert;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
 import java.time.LocalDateTime;
@@ -12,6 +12,7 @@
 import java.util.TimeZone;
 
 public class Issue1493 {
+    @BeforeEach
     protected void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
         JSON.defaultLocale = Locale.CHINA;

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_1700/Issue1769.java
Patch:
@@ -4,12 +4,14 @@
 import com.alibaba.fastjson.annotation.JSONField;
 import com.alibaba.fastjson.annotation.JSONType;
 import junit.framework.TestCase;
+import org.junit.jupiter.api.BeforeEach;
 
 import java.util.Date;
 import java.util.Locale;
 import java.util.TimeZone;
 
 public class Issue1769 extends TestCase {
+    @BeforeEach
     protected void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
         JSON.defaultLocale = Locale.CHINA;

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_3000/Issue3330.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.util.IOUtils;
 import junit.framework.TestCase;
+import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -25,7 +26,8 @@ protected void setUp() throws Exception {
         IOUtils.DIGITS[15] = 'f';
     }
 
-    protected void tearDown() throws Exception {
+    @AfterEach
+    public void tearDown() throws Exception {
         System.arraycopy(chars, 0, IOUtils.DIGITS, 0, chars.length);
     }
 

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1900/Issue1901.java
Patch:
@@ -18,7 +18,7 @@ protected void setUp() throws Exception {
         JSON.defaultTimeZone = TimeZone.getTimeZone("Asia/Shanghai");
     }
 
-    protected void tearDown() throws Exception {
+    public void tearDown() throws Exception {
         JSON.defaultLocale = locale;
         JSON.defaultTimeZone = timeZone;
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -114,6 +114,7 @@ public Object getOrDefault(String key, Object defaultValue) {
      * @param defaultValue the default mapping of the key
      * @since 2.0.2
      */
+    @Override
     public Object getOrDefault(Object key, Object defaultValue) {
         if (key instanceof Number
             || key instanceof Character
@@ -940,6 +941,7 @@ public <T> T getObject(String key, Type type) {
      * @throws UnsupportedOperationException  If reflection for this method is not supported
      * @throws ArrayIndexOutOfBoundsException If the length of args does not match the length of the method parameter
      */
+    @Override
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         final String methodName = method.getName();
         Class<?>[] parameterTypes = method.getParameterTypes();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1186,6 +1186,7 @@ public void writeAny(Object value) {
 
     public abstract void writeReference(String path);
 
+    @Override
     public void close() {
 
     }
@@ -1442,6 +1443,7 @@ public int hashCode() {
             return Objects.hash(parent, name, index);
         }
 
+        @Override
         public String toString() {
             if (fullPath != null) {
                 return fullPath;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK8.java
Patch:
@@ -9,6 +9,7 @@ final class JSONWriterUTF16JDK8 extends JSONWriterUTF16 {
         super(ctx);
     }
 
+    @Override
     public void writeString(String str) {
         if (str == null) {
             if (isEnabled(Feature.NullAsDefaultValue.mask)) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8JDK9.java
Patch:
@@ -12,6 +12,7 @@ final class JSONWriterUTF8JDK9 extends JSONWriterUTF8 {
         super(ctx);
     }
 
+    @Override
     public void writeString(String str) {
         if (str == null) {
             writeNull();

File: core/src/main/java/com/alibaba/fastjson2/filter/PascalNameFilter.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.filter;
 
 public class PascalNameFilter implements NameFilter {
+    @Override
     public String process(Object source, String name, Object value) {
         if (name == null || name.length() == 0) {
             return name;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -52,6 +52,7 @@ default Field getField() {
         return null;
     }
 
+    @Override
     default int compareTo(FieldReader o) {
         int ordinal0 = this.ordinal();
         int ordinal1 = o.ordinal();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerArrayReadOnly.java
Patch:
@@ -14,10 +14,12 @@ final class FieldReaderAtomicIntegerArrayReadOnly<T> extends FieldReaderImpl<T>
         this.setter = setter;
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;
@@ -44,6 +46,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String toString() {
         return setter.getName();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongArrayReadOnly.java
Patch:
@@ -14,10 +14,12 @@ final class FieldReaderAtomicLongArrayReadOnly<T> extends FieldReaderImpl<T> {
         this.method = method;
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;
@@ -43,6 +45,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String toString() {
         return method.getName();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReference.java
Patch:
@@ -22,6 +22,7 @@ public FieldReaderAtomicReference(String fieldName, Type fieldType, Class fieldC
         this.referenceType = referenceType;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.nextIfNull()) {
             return;
@@ -31,6 +32,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         accept(object, refValue);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.read(referenceType);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceField.java
Patch:
@@ -20,10 +20,12 @@ final class FieldReaderAtomicReferenceField<T>
         readOnly = Modifier.isFinal(field.getModifiers());
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceMethodReadOnly.java
Patch:
@@ -19,10 +19,12 @@ final class FieldReaderAtomicReferenceMethodReadOnly<T>
         this.method = method;
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalFunc.java
Patch:
@@ -28,10 +28,12 @@ public void accept(T object, Object value) {
                 , (V) TypeUtils.toBigDecimal(value));
     }
 
+    @Override
     public void accept(T object, int value) {
         function.accept(object, (V) BigDecimal.valueOf(value));
     }
 
+    @Override
     public void accept(T object, long value) {
         function.accept(object, (V) BigDecimal.valueOf(value));
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerFunc.java
Patch:
@@ -28,10 +28,12 @@ public void accept(T object, Object value) {
                 , (V) TypeUtils.toBigInteger(value));
     }
 
+    @Override
     public void accept(T object, int value) {
         function.accept(object, (V) BigInteger.valueOf(value));
     }
 
+    @Override
     public void accept(T object, long value) {
         function.accept(object, (V) BigInteger.valueOf(value));
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderBoolField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Boolean fieldValue = jsonReader.readBool();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolMethod.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderBoolMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Boolean fieldValue = jsonReader.readBool();
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValFunc.java
Patch:
@@ -39,6 +39,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                 , jsonReader.readBoolValue());
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderBoolValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         boolean fieldValue = jsonReader.readBoolValue();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueMethod.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderBoolValueMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         boolean fieldValue = jsonReader.readBoolValue();
         try {
@@ -20,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             value = false;
@@ -32,6 +34,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueFunc.java
Patch:
@@ -25,6 +25,7 @@ public void accept(T object, char value) {
         function.accept(object, value);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         String str = jsonReader.readString();
         if (str == null || str.isEmpty()) {
@@ -33,6 +34,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object, str.charAt(0));
     }
 
+    @Override
     public String readFieldValue(JSONReader jsonReader) {
         return jsonReader.readString();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionFieldReadOnly.java
Patch:
@@ -13,6 +13,7 @@ final class FieldReaderCollectionFieldReadOnly<T> extends FieldReaderObjectField
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;
@@ -38,6 +39,7 @@ public void accept(T object, Object value) {
         collection.addAll((Collection) value);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -32,6 +32,7 @@ public Type getItemType() {
         return itemType;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;
@@ -76,6 +77,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateField.java
Patch:
@@ -20,6 +20,7 @@ final class FieldReaderDateField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null
@@ -29,6 +30,7 @@ public ObjectReader getObjectReader(JSONReader jsonReader) {
         return dateReader;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Date fieldValue;
         if (jsonReader.isInt()) {
@@ -66,6 +68,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value instanceof String) {
             JSONReader jsonReader = JSONReader.of(

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateFunc.java
Patch:
@@ -44,6 +44,7 @@ public void accept(T object, Object value) {
         function.accept(object, (Date) value);
     }
 
+    @Override
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateMethod.java
Patch:
@@ -21,6 +21,7 @@ final class FieldReaderDateMethod<T> extends FieldReaderObjectMethod<T> {
         this.format = format;
     }
 
+    @Override
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderDoubleField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Double fieldValue = jsonReader.readDouble();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readDouble();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleMethod.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderDoubleMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Double fieldValue = jsonReader.readDouble();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderDoubleValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         double fieldValue = jsonReader.readDoubleValue();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readDoubleValue();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueFunc.java
Patch:
@@ -32,6 +32,7 @@ public void accept(T object, Object value) {
                 , TypeUtils.toDoubleValue(value));
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object
                 , jsonReader.readDoubleValue());

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueMethod.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderDoubleValueMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         double fieldValue = jsonReader.readDoubleValue();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             method.invoke(object, (double) value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderFloatField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Float fieldValue = jsonReader.readFloat();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readFloat();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatMethod.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderFloatMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Float fieldValue = jsonReader.readFloat();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderFloatValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         float fieldFloat = jsonReader.readFloatValue();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readFloatValue();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueFunc.java
Patch:
@@ -27,6 +27,7 @@ public void accept(T object, float value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -36,6 +37,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object
                 , jsonReader.readFloatValue());

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueMethod.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderFloatValueMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         float fieldValue = jsonReader.readFloatValue();
         try {
@@ -20,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             value = 0F;
@@ -32,6 +34,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             method.invoke(object, (float) value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Field.java
Patch:
@@ -21,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             field.set(object, (short) value);
@@ -29,6 +30,7 @@ public void accept(T object, int value) {
         }
     }
 
+    @Override
     public void accept(T object, long value) {
         try {
             field.set(object, (short) value);
@@ -47,6 +49,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return (byte) jsonReader.readInt32Value();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt16Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt16Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         Integer integer = jsonReader.readInt32();
         return integer == null ? null : integer.shortValue();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16ValueFunc.java
Patch:
@@ -26,6 +26,7 @@ public void accept(T object, short value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         function.accept(object
                 , TypeUtils.toShortValue(value));

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Field.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderInt32Field<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt32Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt32Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueArrayFinalField.java
Patch:
@@ -10,10 +10,12 @@ final class FieldReaderInt32ValueArrayFinalField<T> extends FieldReaderObjectFie
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Field.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderInt64Field<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Long fieldValue = jsonReader.readInt64();
         try {
@@ -20,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt64();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Func.java
Patch:
@@ -33,6 +33,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object, (V) fieldValue);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt64();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt64Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Long fieldValue = jsonReader.readInt64();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt64Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt64();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueArrayFinalField.java
Patch:
@@ -10,10 +10,12 @@ final class FieldReaderInt64ValueArrayFinalField<T> extends FieldReaderObjectFie
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderInt64ValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         long fieldLong = jsonReader.readInt64Value();
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Field.java
Patch:
@@ -21,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             field.set(object, (byte) value);
@@ -29,6 +30,7 @@ public void accept(T object, int value) {
         }
     }
 
+    @Override
     public void accept(T object, long value) {
         try {
             field.set(object, (byte) value);
@@ -47,6 +49,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return (byte) jsonReader.readInt32Value();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt8Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt8Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         Integer integer = jsonReader.readInt32();
         return integer == null ? null : integer.byteValue();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueField.java
Patch:
@@ -21,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             field.setByte(object, (byte) value);
@@ -29,6 +30,7 @@ public void accept(T object, int value) {
         }
     }
 
+    @Override
     public void accept(T object, long value) {
         try {
             field.setByte(object, (byte) value);
@@ -47,6 +49,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return (byte) jsonReader.readInt32Value();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueFunc.java
Patch:
@@ -26,6 +26,7 @@ public void accept(T object, byte value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         function.accept(object
                 , TypeUtils.toByteValue(value));

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -46,6 +46,7 @@ public Type getItemType() {
         return itemType;
     }
 
+    @Override
     public ObjectReader checkObjectAutoType(JSONReader jsonReader) {
         if (jsonReader.nextIfMatch(JSONB.Constants.BC_TYPED_ANY)) {
             long typeHash = jsonReader.readTypeHashCode();
@@ -76,13 +77,15 @@ public ObjectReader checkObjectAutoType(JSONReader jsonReader) {
         return null;
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader.Context ctx) {
         if (itemReader != null) {
             return itemReader;
         }
         return itemReader= ctx.getObjectReader(itemType);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.nextIfNull()) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFieldUF.java
Patch:
@@ -23,6 +23,7 @@ final class FieldReaderListFieldUF<T> extends FieldReaderListField<T> {
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public void accept(Object object, Object value) {
         UNSAFE.putObject(object, fieldOffset, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFunc.java
Patch:
@@ -32,6 +32,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader.Context ctx) {
         if (itemObjectReader != null) {
             return itemObjectReader;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrFieldUF.java
Patch:
@@ -15,6 +15,7 @@ final class FieldReaderListStrFieldUF<T> extends FieldReaderListStrField<T> {
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public void accept(Object object, Object value) {
         UNSAFE.putObject(object, fieldOffset, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrFunc.java
Patch:
@@ -35,6 +35,7 @@ public Type getItemType() {
         return String.class;
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader.Context ctx) {
         return ObjectReaderImplString.INSTANCE;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderNumberFunc.java
Patch:
@@ -25,10 +25,12 @@ public void accept(T object, Object value) {
         function.accept(object, (V) value);
     }
 
+    @Override
     public void accept(T object, int value) {
         function.accept(object, (V) Integer.valueOf(value));
     }
 
+    @Override
     public void accept(T object, long value) {
         function.accept(object, (V) Long.valueOf(value));
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObject.java
Patch:
@@ -5,6 +5,7 @@
 public interface FieldReaderObject<T, V> extends FieldReader<T> {
     ObjectReader<V> getFieldObjectReader(JSONReader.Context context);
 
+    @Override
     default void readFieldValue(JSONReader jsonReader, T object) {
         accept(object,
                 getFieldObjectReader(jsonReader.getContext())

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFieldUF.java
Patch:
@@ -16,6 +16,7 @@ final class FieldReaderObjectFieldUF extends FieldReaderObjectField {
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public void accept(Object object, Object value) {
         UNSAFE.putObject(object, fieldOffset, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFunc.java
Patch:
@@ -42,6 +42,7 @@ public void accept(T object, Object value) {
         function.accept(object, (V) value);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         ObjectReader objectReader;
         if (this.fieldObjectReader != null) {
@@ -75,6 +76,7 @@ public ObjectReader getFieldObjectReader(JSONReader.Context context) {
         return fieldObjectReader;
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         ObjectReader objectReader;
         if (this.fieldObjectReader != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectParam.java
Patch:
@@ -35,6 +35,7 @@ public long getFieldNameHash() {
         return paramNameHash;
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         if (fieldObjectReader == null) {
             fieldObjectReader = jsonReader

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringField.java
Patch:
@@ -13,6 +13,7 @@ final class FieldReaderStringField<T> extends FieldReaderObjectField<T> {
         trim = "trim".equals(format);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {
@@ -26,6 +27,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String readFieldValue(JSONReader jsonReader) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {
@@ -34,6 +36,7 @@ public String readFieldValue(JSONReader jsonReader) {
         return fieldValue;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value != null && !(value instanceof String)) {
             value = value.toString();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringFunc.java
Patch:
@@ -21,6 +21,7 @@ final class FieldReaderStringFunc<T, V> extends FieldReaderImpl<T> {
         trim = "trim".equals(format);
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringMethod.java
Patch:
@@ -14,6 +14,7 @@ final class FieldReaderStringMethod<T> extends FieldReaderObjectMethod<T> {
         trim = "trim".equals(format);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {
@@ -27,6 +28,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String readFieldValue(JSONReader jsonReader) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FielderReaderImplMapFieldReadOnly.java
Patch:
@@ -13,6 +13,7 @@ class FielderReaderImplMapFieldReadOnly<T> extends FieldReaderObjectField<T> imp
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;
@@ -37,6 +38,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -47,6 +47,7 @@ public T createInstance() {
         return defaultCreator.get();
     }
 
+    @Override
     public T readObject(JSONReader jsonReader) {
         return readObject(jsonReader, features);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -141,6 +141,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         return (T) object;
     }
 
+    @Override
     public T readObject(JSONReader jsonReader) {
         return readObject(jsonReader, features);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -92,10 +92,12 @@ public ObjectReaderAdapter(
         }
     }
 
+    @Override
     public String getTypeKey() {
         return typeKey;
     }
 
+    @Override
     public long getTypeKeyHash() {
         return typeKeyHashCode;
     }
@@ -271,6 +273,7 @@ protected T autoType(JSONReader jsonReader) {
         return (T) autoTypeObjectReader.readJSONBObject(jsonReader, features);
     }
 
+    @Override
     public T readJSONBObject(JSONReader jsonReader, long features) {
         if (jsonReader.nextIfNull()) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -135,6 +135,7 @@ static String fieldItemObjectReader(int i) {
         return fieldName;
     }
 
+    @Override
     public <T> FieldReader<T> createFieldReader(
             Class objectClass
             , Type objectType
@@ -789,7 +790,7 @@ private <T> void genMethodReadJSONBObject(
 
         genCreateObject(mw, classNameType, TYPE_OBJECT, fieldBased);
         mw.visitVarInsn(Opcodes.ASTORE, OBJECT);
-        
+
         mw.visitVarInsn(Opcodes.ALOAD, JSON_READER);
         mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "nextIfObjectStart", "()Z", false);
         mw.visitInsn(Opcodes.POP);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorDynamicCompile.java
Patch:
@@ -16,6 +16,7 @@
 public class ObjectReaderCreatorDynamicCompile extends ObjectReaderCreator {
     public static final ObjectReaderCreatorDynamicCompile INSTANCE = new ObjectReaderCreatorDynamicCompile();
 
+    @Override
     public <T> ObjectReader<T> createObjectReader(Class<T> objectType) {
         if (JDKUtils.JVM_VERSION >= 17 && !JDKUtils.JAVAC_UNNAMED) {
             return super.createObjectReader(objectType);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorLambda.java
Patch:
@@ -174,6 +174,7 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
         return createObjectReader(objectClass, beanInfo.readerFeatures, supplier, null, fieldReaderArray);
     }
 
+    @Override
     public  <T> FieldReader createFieldReaderMethod(
             Class<T> objectClass
             , Type objectType
@@ -276,6 +277,7 @@ private static Object lambdaFunction(Class objectType, Class fieldClass, Method
         }
     }
 
+    @Override
     public <T, R> Function<T, R> createBuildFunction(Method builderMethod) {
         MethodHandles.Lookup lookup = MethodHandles.lookup();
         MethodType invokedType = METHODTYPE_Function;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCurrency.java
Patch:
@@ -13,6 +13,7 @@ final class ObjectReaderImplCurrency extends ObjectReaderBaseModule.PrimitiveImp
     static final long TYPE_HASH = Fnv.hashCode64("Currency");
     static final long TYPE_HASH_FULL = Fnv.hashCode64("java.util.Currency");
 
+    @Override
     public Object readJSONBObject(JSONReader jsonReader, long features) {
         if (jsonReader.getType() == JSONB.Constants.BC_TYPED_ANY) {
             jsonReader.next();
@@ -29,6 +30,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return Currency.getInstance(strVal);
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         String strVal = jsonReader.readString();
         if (strVal == null || strVal.isEmpty()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum2X4.java
Patch:
@@ -86,6 +86,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return fieldValue;
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         Enum fieldValue;
         if (jsonReader.isInt()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInstant.java
Patch:
@@ -9,6 +9,7 @@
 public final class ObjectReaderImplInstant implements ObjectReader  {
     public static final ObjectReaderImplInstant INSTANCE = new ObjectReaderImplInstant();
 
+    @Override
     public Object createInstance(Map map) {
         Number nano = (Number) map.get("nano");
         Number epochSecond = (Number) map.get("epochSecond");
@@ -29,10 +30,12 @@ public Object createInstance(Map map) {
         throw new JSONException("can not create instant.");
     }
 
+    @Override
     public Object readJSONBObject(JSONReader jsonReader, long features) {
         return jsonReader.readInstant();
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         return jsonReader.readInstant();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapString.java
Patch:
@@ -11,6 +11,7 @@ public ObjectReaderImplMapString(Class mapType, Class instanceType, long feature
         super(mapType, instanceType, null, String.class, features, null);
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return this.readJSONBObject(jsonReader, features);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -7,6 +7,7 @@
 final class ObjectReaderImplObject extends ObjectReaderBaseModule.PrimitiveImpl {
     static final ObjectReaderImplObject INSTANCE = new ObjectReaderImplObject();
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return jsonReader.readAny();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplString.java
Patch:
@@ -5,6 +5,7 @@
 final class ObjectReaderImplString extends ObjectReaderBaseModule.PrimitiveImpl {
     static final ObjectReaderImplString INSTANCE = new ObjectReaderImplString();
 
+    @Override
     public Class getObjectClass() {
         return String.class;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderInterface.java
Patch:
@@ -20,6 +20,7 @@ public ObjectReaderInterface(
         super(objectClass, typeKey, typeName, features, creator, buildFunction, fieldReaders);
     }
 
+    @Override
     public T readJSONBObject(JSONReader jsonReader, long features) {
         ObjectReader autoTypeReader = jsonReader.checkAutoType(this.objectClass, this.typeNameHash, this.features | features);
         if (autoTypeReader != null && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstrutor.java
Patch:
@@ -47,6 +47,7 @@ public T createInstanceNoneDefaultConstructor(Map<Long, Object> values) {
         return creator.apply(values);
     }
 
+    @Override
     public T readJSONBObject(JSONReader jsonReader, long features) {
         byte type = jsonReader.getType();
         if (type == BC_NULL) {
@@ -161,6 +162,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         return object;
     }
 
+    @Override
     public T readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return readJSONBObject(jsonReader, 0);
@@ -251,6 +253,7 @@ public T readObject(JSONReader jsonReader, long features) {
         return object;
     }
 
+    @Override
     public T createInstance(Map map) {
         ObjectReaderProvider provider = JSONFactory.getDefaultObjectReaderProvider();
 

File: core/src/main/java/com/alibaba/fastjson2/support/money/NumberValueWriter.java
Patch:
@@ -8,6 +8,8 @@
 import java.math.BigDecimal;
 
 public class NumberValueWriter implements ObjectWriter {
+
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         NumberValue value = (NumberValue) object;
         BigDecimal decimal = value.numberValue(BigDecimal.class);

File: core/src/main/java/com/alibaba/fastjson2/util/JSONBDump.java
Patch:
@@ -904,6 +904,7 @@ String readReference() {
         throw new JSONException("reference not support input " + typeName(type));
     }
 
+    @Override
     public String toString() {
         return jsonWriter.toString();
     }

File: core/src/main/java/com/alibaba/fastjson2/util/JdbcSupport.java
Patch:
@@ -99,6 +99,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     static class TimeWriter implements ObjectWriter {
+        @Override
         public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
             if (object == null) {
                 jsonWriter.writeNull();

File: core/src/main/java/com/alibaba/fastjson2/writer/FIeldWriterEnumField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -26,6 +27,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Enum value = (Enum) getFieldValue(object);
         jsonWriter.writeEnum(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -59,6 +59,7 @@ default Object getFieldValue(T object) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     default int compareTo(Object o) {
         FieldWriter fw = (FieldWriter) o;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalField.java
Patch:
@@ -19,6 +19,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);
@@ -47,6 +48,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigDecimal value = (BigDecimal) getFieldValue(object);
         jsonWriter.writeDecimal(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalFunc.java
Patch:
@@ -27,10 +27,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigDecimal value = function.apply(object);
         jsonWriter.writeDecimal(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntField.java
Patch:
@@ -19,6 +19,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);
@@ -42,6 +43,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigInteger value = (BigInteger) getFieldValue(object);
         jsonWriter.writeBigInt(value, features);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntFunc.java
Patch:
@@ -21,10 +21,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigInteger value = (BigInteger) getFieldValue(object);
         jsonWriter.writeBigInt(value, features);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolValField.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.getBoolean(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolean.java
Patch:
@@ -15,6 +15,7 @@ abstract class FieldWriterBoolean extends FieldWriterImpl {
         super(name, ordinal, features, format, fieldType, fieldClass);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Boolean value = (Boolean) getFieldValue(object);
         if (value == null) {
@@ -24,6 +25,7 @@ public void writeValue(JSONWriter jsonWriter, Object object) {
         jsonWriter.writeBool(value);
     }
 
+    @Override
     public void writeBool(JSONWriter jsonWriter, boolean value) {
         if (jsonWriter.isUTF8()) {
             if (value) {
@@ -105,6 +107,7 @@ public boolean write(JSONWriter jsonWriter, Object object) {
         return true;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         return ObjectWriterImplBoolean.INSTANCE;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBooleanField.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCalendarFunc.java
Patch:
@@ -21,10 +21,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Calendar value = function.apply(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharMethod.java
Patch:
@@ -19,6 +19,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);
@@ -27,6 +28,7 @@ public Object getFieldValue(T object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Character value = (Character) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.getChar(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         char value = function.applyAsChar(object);
         jsonWriter.writeString(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -33,10 +33,12 @@ protected FieldWriterDate(String fieldName, int ordinal, long features, String f
         this.formatISO8601 = "iso8601".equalsIgnoreCase(format);
     }
 
+    @Override
     public boolean isDateFormatMillis() {
         return formatMillis;
     }
 
+    @Override
     public boolean isDateFormatISO8601() {
         return formatISO8601;
     }
@@ -49,6 +51,7 @@ public DateTimeFormatter getFormatter() {
         return formatter;
     }
 
+    @Override
     public void writeDate(JSONWriter jsonWriter, long timeMillis) {
         if (jsonWriter.isJSONB()) {
             writeFieldName(jsonWriter);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateField.java
Patch:
@@ -19,6 +19,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -27,6 +28,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Date value = (Date) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateFieldMethod.java
Patch:
@@ -27,6 +27,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -35,6 +36,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Date value = (Date) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateFunc.java
Patch:
@@ -28,10 +28,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Date value = function.apply(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return getFieldValueDouble(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValueFunc.java
Patch:
@@ -20,10 +20,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsDouble(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         double fieldValue = function.applyAsDouble(object);
         jsonWriter.writeDouble(fieldValue);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnum.java
Patch:
@@ -63,6 +63,7 @@ public final void writeEnumJSONB(JSONWriter jsonWriter, Enum e) {
         jsonWriter.writeString(e.name());
     }
 
+    @Override
     public final void writeEnum(JSONWriter jsonWriter, Enum e) {
         long features = jsonWriter.getFeatures();
         boolean usingOrdinal = (features & (JSONWriter.Feature.WriteEnumUsingToString.mask | JSONWriter.Feature.WriteEnumsUsingName.mask)) == 0;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumFunc.java
Patch:
@@ -44,6 +44,7 @@ public boolean write(JSONWriter jsonWriter, Object o) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Enum value = (Enum) function.apply(object);
         jsonWriter.writeEnum(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumMethod.java
Patch:
@@ -19,6 +19,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -27,6 +28,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Enum value = (Enum) getFieldValue(object);
         jsonWriter.writeEnum(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return getFieldValueFloat(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValueFunc.java
Patch:
@@ -20,10 +20,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsFloat(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         float fieldValue = function.applyAsFloat(object);
         jsonWriter.writeFloat(fieldValue);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterImpl.java
Patch:
@@ -138,6 +138,7 @@ public final void writeFieldName(JSONWriter jsonWriter) {
         jsonWriter.writeColon();
     }
 
+    @Override
     public String toString() {
         return name;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16.java
Patch:
@@ -119,6 +119,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         jsonWriter.writeInt32(value.shortValue());
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         return ObjectWriterImplInt16.INSTANCE;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Field.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Func.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValFunc.java
Patch:
@@ -20,11 +20,13 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         short value = function.applyAsShort(object);
         jsonWriter.writeInt32(value);
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsShort(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32.java
Patch:
@@ -17,6 +17,7 @@ protected FieldWriterInt32(String name, int ordinal, long features, String forma
                 || "string".equals(format);
     }
 
+    @Override
     public void writeInt32(JSONWriter jsonWriter, int value) {
         if (toString) {
             writeFieldName(jsonWriter);
@@ -106,6 +107,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         jsonWriter.writeInt32(value);
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (valueClass == this.fieldClass) {
             return ObjectWriterImplInt32.INSTANCE;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Field.java
Patch:
@@ -12,10 +12,12 @@ final class FieldWriterInt32Field<T> extends FieldWriterInt32<T> {
         this.field = field;
     }
 
+    @Override
     public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Func.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Val.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32ValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsInt(object);
     }
@@ -40,6 +41,7 @@ public boolean write(JSONWriter jsonWriter, Object object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         int value = function.applyAsInt(object);
         jsonWriter.writeInt32(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64.java
Patch:
@@ -15,6 +15,7 @@ abstract class FieldWriterInt64<T> extends FieldWriterImpl<T> {
         browserCompatible = (features & JSONWriter.Feature.BrowserCompatible.mask) != 0;
     }
 
+    @Override
     public void writeInt64(JSONWriter jsonWriter, long value) {
         if (jsonWriter.isUTF8()) {
             if (value >= -1 && value < 1039) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Field.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Func.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64ValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64ValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.applyAsLong(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Field.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Func.java
Patch:
@@ -13,6 +13,7 @@ final class FieldWriterInt8Func<T> extends FieldWriterInt8<T> {
         this.function = function;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsByte(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListField.java
Patch:
@@ -31,6 +31,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListFunc.java
Patch:
@@ -32,6 +32,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListMethod.java
Patch:
@@ -31,6 +31,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListStrFunc.java
Patch:
@@ -31,6 +31,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
@@ -94,6 +95,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         List list = function.apply(object);
         if (list == null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisField.java
Patch:
@@ -23,6 +23,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return getFieldLong(object);
     }
@@ -42,6 +43,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         long millis = getFieldLong(object);
         writeDate(jsonWriter, false, millis);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisFunc.java
Patch:
@@ -26,6 +26,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.applyAsLong(object);
     }
@@ -37,6 +38,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         long millis = function.applyAsLong(object);
         writeDate(jsonWriter, false, millis);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisMethod.java
Patch:
@@ -25,6 +25,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);
@@ -40,6 +41,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         long millis = (Long) getFieldValue(object);
         writeDate(jsonWriter, false, millis);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -32,6 +32,7 @@ protected FieldWriterObject(String name, int ordinal, long features, String form
                 || fieldClass == AtomicIntegerArray.class;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (initValueClass == null) {
             initValueClass = valueClass;
@@ -176,6 +177,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Object value = getFieldValue(object);
         if (value == null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayField.java
Patch:
@@ -38,6 +38,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -46,6 +47,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public ObjectWriter getItemWriter(JSONWriter jsonWriter, Type itemType) {
         if (itemType == null || itemType == this.itemType) {
             if (itemObjectWriter != null) {
@@ -185,6 +187,7 @@ public void writeArray(JSONWriter jsonWriter, boolean writeFieldName, Object[] a
         jsonWriter.endArray();
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (valueClass == String[].class) {
             return ObjectWriterImplStringArray.INSTANCE;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayMethod.java
Patch:
@@ -39,6 +39,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -47,6 +48,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public ObjectWriter getItemWriter(JSONWriter jsonWriter, Type itemType) {
         if (itemType == null || itemType == this.itemType) {
             if (itemObjectWriter != null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectField.java
Patch:
@@ -26,6 +26,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFieldUF.java
Patch:
@@ -24,6 +24,7 @@ protected FieldWriterObjectFieldUF(
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return UNSAFE.getObject(object, fieldOffset);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFinal.java
Patch:
@@ -17,6 +17,7 @@ protected FieldWriterObjectFinal(String name, int ordinal, long features, String
         this.refDetect = !ObjectWriterProvider.isNotReferenceDetect(fieldClass);
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (fieldClass != valueClass) {
             return jsonWriter.getObjectWriter(valueClass);
@@ -69,6 +70,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Object value = getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFunc.java
Patch:
@@ -27,6 +27,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFuncFinal.java
Patch:
@@ -27,6 +27,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectMethod.java
Patch:
@@ -28,6 +28,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringField.java
Patch:
@@ -28,6 +28,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -62,6 +63,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeString(JSONWriter jsonWriter, String value) {
         writeFieldName(jsonWriter);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringFunc.java
Patch:
@@ -31,6 +31,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringMethod.java
Patch:
@@ -30,6 +30,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -38,6 +39,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeString(JSONWriter jsonWriter, String value) {
         writeFieldName(jsonWriter);
 
@@ -57,6 +59,7 @@ public void writeString(JSONWriter jsonWriter, String value) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         String value = (String) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -100,7 +100,7 @@ public ObjectWriterCreatorASM(ClassLoader classLoader) {
         this.classLoader = new DynamicClassLoader(classLoader);
     }
 
-
+    @Override
     public ObjectWriter createObjectWriter(
             Class objectClass,
             long features,
@@ -2326,6 +2326,7 @@ private void genFields(List<FieldWriter> fieldWriters, ClassWriter cw) {
         }
     }
 
+    @Override
     public <T> FieldWriter<T> createFieldWriter(
             String fieldName,
             int ordinal,

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorLambda.java
Patch:
@@ -35,6 +35,7 @@ static boolean isExternalClass(Class<?> clazz) {
         return true;
     }
 
+    @Override
     public <T> FieldWriter<T> createFieldWriter(
             Class<T> objectClass
             , String fieldName

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterException.java
Patch:
@@ -11,6 +11,7 @@ public ObjectWriterException(Class objectType, long features, List<FieldWriter>
         super(objectType, null, null, features, fieldWriters);
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         writeClassInfo(jsonWriter);
 
@@ -24,6 +25,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         jsonWriter.endObject();
     }
 
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (jsonWriter.isJSONB()) {
             writeJSONB(jsonWriter, object, fieldName, fieldType, features);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCurrency.java
Patch:
@@ -21,6 +21,7 @@ final class ObjectWriterImplCurrency extends ObjectWriterBaseModule.PrimitiveImp
         this.defineClass = defineClass;
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (object == null) {
             jsonWriter.writeNull();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplEnum.java
Patch:
@@ -36,6 +36,7 @@ public ObjectWriterImplEnum(Class defineClass, Class enumType, long features) {
         }
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (jsonWriter.isWriteTypeInfo(object, fieldType, features)) {
             if (typeNameJSONB == null) {
@@ -66,6 +67,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         }
     }
 
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         Enum e = (Enum) object;
         String str;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplList.java
Patch:
@@ -39,6 +39,7 @@ public ObjectWriterImplList(
         this.itemClassRefDetect = itemClass != null && !ObjectWriterProvider.isNotReferenceDetect(itemClass);
     }
 
+    @Override
     public void writeArrayMappingJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (object == null) {
             jsonWriter.writeArrayNull();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -124,6 +124,7 @@ public void writeArrayMappingJSONB(JSONWriter jsonWriter, Object object, Object
         jsonWriter.endObject();
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if ((fieldType == this.objectType && jsonWriter.isWriteMapTypeInfo(object, objectClass, features))
                 || jsonWriter.isWriteTypeInfo(object, fieldType, features)
@@ -387,6 +388,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
     }
 
 
+    @Override
     public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         jsonWriter.startObject();
         Map map = (Map) object;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMapEntry.java
Patch:
@@ -8,6 +8,7 @@
 final class ObjectWriterImplMapEntry extends ObjectWriterBaseModule.PrimitiveImpl {
     static final ObjectWriterImplMapEntry INSTANCE = new ObjectWriterImplMapEntry();
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         Map.Entry entry = (Map.Entry) object;
         if (entry == null) {
@@ -20,6 +21,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         jsonWriter.writeAny(entry.getValue());
     }
 
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         Map.Entry entry = (Map.Entry) object;
         if (entry == null) {

File: extension/src/main/java/com/alibaba/fastjson2/support/AwtRederModule.java
Patch:
@@ -21,6 +21,7 @@ public class AwtRederModule implements ObjectReaderModule {
     static final long HASH_SIZE = Fnv.hashCode64("size");
     static final long HASH_STYLE = Fnv.hashCode64("style");
 
+    @Override
     public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
         if (type == Color.class) {
             return createObjectReader(new ColorCreator()

File: extension/src/main/java/com/alibaba/fastjson2/support/AwtWriterModule.java
Patch:
@@ -11,6 +11,7 @@
 public class AwtWriterModule implements ObjectWriterModule {
     public static AwtWriterModule INSTANCE = new AwtWriterModule();
 
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         if (objectType == Color.class) {
             return objectWriter(Color.class,

File: extension/src/main/java/com/alibaba/fastjson2/support/jdbc/JdbcReaderModule.java
Patch:
@@ -6,6 +6,8 @@
 import java.lang.reflect.Type;
 
 public class JdbcReaderModule implements ObjectWriterModule {
+
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         return null;
     }

File: extension/src/main/java/com/alibaba/fastjson2/support/jdbc/JdbcWriterModule.java
Patch:
@@ -6,6 +6,8 @@
 import java.lang.reflect.Type;
 
 public class JdbcWriterModule implements ObjectWriterModule {
+
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         return null;
     }

File: extension/src/main/java/com/alibaba/fastjson2/support/odps/JSONExtract.java
Patch:
@@ -69,6 +69,7 @@ public void accept(boolean val) {
             text.set(val ? BYTES_TRUE : BYTES_FALSE);
         }
 
+        @Override
         public void accept(int val) {
             if (val >= -1 && val < 511) {
                 text = cache[val + 1];
@@ -84,6 +85,7 @@ public void accept(int val) {
             text.length = size + 2;
         }
 
+        @Override
         public void accept(long val) {
             int size = (val < 0) ? IOUtils.stringSize(-val) + 1 : IOUtils.stringSize(val);
             byte[] bytes = new byte[size + 2];

File: extension/src/main/java/com/alibaba/fastjson2/support/odps/JSONExtractScalar.java
Patch:
@@ -54,6 +54,7 @@ public void accept(boolean val) {
             text.set(val ? BYTES_TRUE : BYTES_FALSE);
         }
 
+        @Override
         public void accept(int val) {
             int size = (val < 0) ? IOUtils.stringSize(-val) + 1 : IOUtils.stringSize(val);
             text.setCapacity(size, false);
@@ -62,6 +63,7 @@ public void accept(int val) {
             text.length = size;
         }
 
+        @Override
         public void accept(long val) {
             int size = (val < 0) ? IOUtils.stringSize(-val) + 1 : IOUtils.stringSize(val);
             text.setCapacity(size, false);

File: extension/src/main/java/com/alibaba/fastjson2/support/odps/JSONWritable.java
Patch:
@@ -64,6 +64,7 @@ public void set(byte[] utf8, int start, int len) {
         this.length = len;
     }
 
+    @Override
     public String toString() {
         return new String(bytes, off, length, StandardCharsets.UTF_8);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/Fastjson1xReaderModule.java
Patch:
@@ -15,6 +15,7 @@ public Fastjson1xReaderModule(ObjectReaderProvider provider) {
         this.provider = provider;
     }
 
+    @Override
     public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
         if (type == JSON.class) {
             return new JSONImpl();
@@ -23,6 +24,7 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
     }
 
     static class JSONImpl implements ObjectReader {
+        @Override
         public Object readObject(JSONReader jsonReader, long features) {
             if (jsonReader.isObject()) {
                 return jsonReader.read(JSONObject.class);

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/Fastjson1xWriterModule.java
Patch:
@@ -16,6 +16,7 @@ public Fastjson1xWriterModule(ObjectWriterProvider provider) {
         this.provider = provider;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         if (objectClass != null && JSONAware.class.isAssignableFrom(objectClass)) {
             return JSONAwareWriter.INSTANCE;
@@ -41,6 +42,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
             if (object == null) {
                 jsonWriter.writeNull();

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -69,6 +69,7 @@ public Object[] toArray(Object[] a) {
         return list.toArray(a);
     }
 
+    @Override
     public boolean add(Object item) {
         return list.add(item);
     }
@@ -108,6 +109,7 @@ public boolean containsAll(Collection c) {
         return list.containsAll(c);
     }
 
+    @Override
     public Object get(int index) {
         return list.get(index);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/serializer/ContextValueFilter.java
Patch:
@@ -5,6 +5,7 @@
 public interface ContextValueFilter extends SerializeFilter, ValueFilter {
     Object process(BeanContext context, Object object, String name, Object value);
 
+    @Override
     default Object apply(Object object, String name, Object value) {
         return process(null, object, name, value);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/serializer/NameFilter.java
Patch:
@@ -16,5 +16,7 @@
 package com.alibaba.fastjson.serializer;
 
 public interface NameFilter extends SerializeFilter, com.alibaba.fastjson2.filter.NameFilter {
+
+    @Override
     String process(Object object, String name, Object value);
 }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/serializer/ValueFilter.java
Patch:
@@ -4,6 +4,7 @@ public interface ValueFilter extends SerializeFilter, com.alibaba.fastjson2.filt
 
     Object process(Object object, String name, Object value);
 
+    @Override
     default Object apply(Object object, String name, Object value) {
         return process(object, name, value);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java
Patch:
@@ -18,6 +18,7 @@
  */
 public class GenericFastJsonRedisSerializer implements RedisSerializer<Object> {
 
+    @Override
     public byte[] serialize(Object object) throws SerializationException {
         if (object == null) {
             return new byte[0];
@@ -29,6 +30,7 @@ public byte[] serialize(Object object) throws SerializationException {
         }
     }
 
+    @Override
     public Object deserialize(byte[] bytes) throws SerializationException {
         if (bytes == null || bytes.length == 0) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/JSONObject.java
Patch:
@@ -114,6 +114,7 @@ public Object getOrDefault(String key, Object defaultValue) {
      * @param defaultValue the default mapping of the key
      * @since 2.0.2
      */
+    @Override
     public Object getOrDefault(Object key, Object defaultValue) {
         if (key instanceof Number
             || key instanceof Character
@@ -940,6 +941,7 @@ public <T> T getObject(String key, Type type) {
      * @throws UnsupportedOperationException  If reflection for this method is not supported
      * @throws ArrayIndexOutOfBoundsException If the length of args does not match the length of the method parameter
      */
+    @Override
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
         final String methodName = method.getName();
         Class<?>[] parameterTypes = method.getParameterTypes();

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1186,6 +1186,7 @@ public void writeAny(Object value) {
 
     public abstract void writeReference(String path);
 
+    @Override
     public void close() {
 
     }
@@ -1442,6 +1443,7 @@ public int hashCode() {
             return Objects.hash(parent, name, index);
         }
 
+        @Override
         public String toString() {
             if (fullPath != null) {
                 return fullPath;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF16JDK8.java
Patch:
@@ -9,6 +9,7 @@ final class JSONWriterUTF16JDK8 extends JSONWriterUTF16 {
         super(ctx);
     }
 
+    @Override
     public void writeString(String str) {
         if (str == null) {
             if (isEnabled(Feature.NullAsDefaultValue.mask)) {

File: core/src/main/java/com/alibaba/fastjson2/JSONWriterUTF8JDK9.java
Patch:
@@ -12,6 +12,7 @@ final class JSONWriterUTF8JDK9 extends JSONWriterUTF8 {
         super(ctx);
     }
 
+    @Override
     public void writeString(String str) {
         if (str == null) {
             writeNull();

File: core/src/main/java/com/alibaba/fastjson2/filter/PascalNameFilter.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.fastjson2.filter;
 
 public class PascalNameFilter implements NameFilter {
+    @Override
     public String process(Object source, String name, Object value) {
         if (name == null || name.length() == 0) {
             return name;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReader.java
Patch:
@@ -52,6 +52,7 @@ default Field getField() {
         return null;
     }
 
+    @Override
     default int compareTo(FieldReader o) {
         int ordinal0 = this.ordinal();
         int ordinal1 = o.ordinal();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicIntegerArrayReadOnly.java
Patch:
@@ -14,10 +14,12 @@ final class FieldReaderAtomicIntegerArrayReadOnly<T> extends FieldReaderImpl<T>
         this.setter = setter;
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;
@@ -44,6 +46,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String toString() {
         return setter.getName();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicLongArrayReadOnly.java
Patch:
@@ -14,10 +14,12 @@ final class FieldReaderAtomicLongArrayReadOnly<T> extends FieldReaderImpl<T> {
         this.method = method;
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;
@@ -43,6 +45,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String toString() {
         return method.getName();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReference.java
Patch:
@@ -22,6 +22,7 @@ public FieldReaderAtomicReference(String fieldName, Type fieldType, Class fieldC
         this.referenceType = referenceType;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.nextIfNull()) {
             return;
@@ -31,6 +32,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         accept(object, refValue);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.read(referenceType);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceField.java
Patch:
@@ -20,10 +20,12 @@ final class FieldReaderAtomicReferenceField<T>
         readOnly = Modifier.isFinal(field.getModifiers());
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderAtomicReferenceMethodReadOnly.java
Patch:
@@ -19,10 +19,12 @@ final class FieldReaderAtomicReferenceMethodReadOnly<T>
         this.method = method;
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigDecimalFunc.java
Patch:
@@ -28,10 +28,12 @@ public void accept(T object, Object value) {
                 , (V) TypeUtils.toBigDecimal(value));
     }
 
+    @Override
     public void accept(T object, int value) {
         function.accept(object, (V) BigDecimal.valueOf(value));
     }
 
+    @Override
     public void accept(T object, long value) {
         function.accept(object, (V) BigDecimal.valueOf(value));
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBigIntegerFunc.java
Patch:
@@ -28,10 +28,12 @@ public void accept(T object, Object value) {
                 , (V) TypeUtils.toBigInteger(value));
     }
 
+    @Override
     public void accept(T object, int value) {
         function.accept(object, (V) BigInteger.valueOf(value));
     }
 
+    @Override
     public void accept(T object, long value) {
         function.accept(object, (V) BigInteger.valueOf(value));
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderBoolField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Boolean fieldValue = jsonReader.readBool();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolMethod.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderBoolMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Boolean fieldValue = jsonReader.readBool();
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValFunc.java
Patch:
@@ -39,6 +39,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
                 , jsonReader.readBoolValue());
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderBoolValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         boolean fieldValue = jsonReader.readBoolValue();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderBoolValueMethod.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderBoolValueMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         boolean fieldValue = jsonReader.readBoolValue();
         try {
@@ -20,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             value = false;
@@ -32,6 +34,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readBool();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCharValueFunc.java
Patch:
@@ -25,6 +25,7 @@ public void accept(T object, char value) {
         function.accept(object, value);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         String str = jsonReader.readString();
         if (str == null || str.isEmpty()) {
@@ -33,6 +34,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object, str.charAt(0));
     }
 
+    @Override
     public String readFieldValue(JSONReader jsonReader) {
         return jsonReader.readString();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionFieldReadOnly.java
Patch:
@@ -13,6 +13,7 @@ final class FieldReaderCollectionFieldReadOnly<T> extends FieldReaderObjectField
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;
@@ -38,6 +39,7 @@ public void accept(T object, Object value) {
         collection.addAll((Collection) value);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderCollectionMethodReadOnly.java
Patch:
@@ -32,6 +32,7 @@ public Type getItemType() {
         return itemType;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;
@@ -76,6 +77,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateField.java
Patch:
@@ -20,6 +20,7 @@ final class FieldReaderDateField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null
@@ -29,6 +30,7 @@ public ObjectReader getObjectReader(JSONReader jsonReader) {
         return dateReader;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Date fieldValue;
         if (jsonReader.isInt()) {
@@ -66,6 +68,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value instanceof String) {
             JSONReader jsonReader = JSONReader.of(

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateFunc.java
Patch:
@@ -44,6 +44,7 @@ public void accept(T object, Object value) {
         function.accept(object, (Date) value);
     }
 
+    @Override
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDateMethod.java
Patch:
@@ -21,6 +21,7 @@ final class FieldReaderDateMethod<T> extends FieldReaderObjectMethod<T> {
         this.format = format;
     }
 
+    @Override
     public ObjectReader getObjectReader(JSONReader jsonReader) {
         if (dateReader == null) {
             dateReader = format == null

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderDoubleField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Double fieldValue = jsonReader.readDouble();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readDouble();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleMethod.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderDoubleMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Double fieldValue = jsonReader.readDouble();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderDoubleValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         double fieldValue = jsonReader.readDoubleValue();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readDoubleValue();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueFunc.java
Patch:
@@ -32,6 +32,7 @@ public void accept(T object, Object value) {
                 , TypeUtils.toDoubleValue(value));
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object
                 , jsonReader.readDoubleValue());

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderDoubleValueMethod.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderDoubleValueMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         double fieldValue = jsonReader.readDoubleValue();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             method.invoke(object, (double) value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderFloatField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Float fieldValue = jsonReader.readFloat();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readFloat();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatMethod.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderFloatMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Float fieldValue = jsonReader.readFloat();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderFloatValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, features, format, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         float fieldFloat = jsonReader.readFloatValue();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readFloatValue();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueFunc.java
Patch:
@@ -27,6 +27,7 @@ public void accept(T object, float value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -36,6 +37,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object
                 , jsonReader.readFloatValue());

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderFloatValueMethod.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderFloatValueMethod<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         float fieldValue = jsonReader.readFloatValue();
         try {
@@ -20,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             value = 0F;
@@ -32,6 +34,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             method.invoke(object, (float) value);

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Field.java
Patch:
@@ -21,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             field.set(object, (short) value);
@@ -29,6 +30,7 @@ public void accept(T object, int value) {
         }
     }
 
+    @Override
     public void accept(T object, long value) {
         try {
             field.set(object, (short) value);
@@ -47,6 +49,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return (byte) jsonReader.readInt32Value();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt16Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt16Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         Integer integer = jsonReader.readInt32();
         return integer == null ? null : integer.shortValue();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt16ValueFunc.java
Patch:
@@ -26,6 +26,7 @@ public void accept(T object, short value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         function.accept(object
                 , TypeUtils.toShortValue(value));

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Field.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderInt32Field<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -19,6 +20,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt32Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt32Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt32ValueArrayFinalField.java
Patch:
@@ -10,10 +10,12 @@ final class FieldReaderInt32ValueArrayFinalField<T> extends FieldReaderObjectFie
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Field.java
Patch:
@@ -11,6 +11,7 @@ final class FieldReaderInt64Field<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Long fieldValue = jsonReader.readInt64();
         try {
@@ -20,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt64();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Func.java
Patch:
@@ -33,6 +33,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         function.accept(object, (V) fieldValue);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt64();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt64Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Long fieldValue = jsonReader.readInt64();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt64Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt64();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueArrayFinalField.java
Patch:
@@ -10,10 +10,12 @@ final class FieldReaderInt64ValueArrayFinalField<T> extends FieldReaderObjectFie
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.readIfNull()) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt64ValueField.java
Patch:
@@ -10,6 +10,7 @@ final class FieldReaderInt64ValueField<T> extends FieldReaderObjectField<T> {
         super(fieldName, fieldType, fieldType, ordinal, 0, null, field);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         long fieldLong = jsonReader.readInt64Value();
         try {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Field.java
Patch:
@@ -21,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             field.set(object, (byte) value);
@@ -29,6 +30,7 @@ public void accept(T object, int value) {
         }
     }
 
+    @Override
     public void accept(T object, long value) {
         try {
             field.set(object, (byte) value);
@@ -47,6 +49,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return (byte) jsonReader.readInt32Value();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Method.java
Patch:
@@ -12,6 +12,7 @@ final class FieldReaderInt8Method<T> extends FieldReaderObjectMethod<T> {
         super(fieldName, fieldType, setter);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         Integer fieldValue = jsonReader.readInt32();
         try {
@@ -21,6 +22,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, Object value) {
         try {
             method.invoke(object
@@ -30,6 +32,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return jsonReader.readInt32();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8Param.java
Patch:
@@ -9,6 +9,7 @@ final class FieldReaderInt8Param<T> extends FieldReaderObjectParam<T> {
         super(fieldName, fieldType, fieldType, paramName, parameter, ordinal, 0, null);
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         Integer integer = jsonReader.readInt32();
         return integer == null ? null : integer.byteValue();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueField.java
Patch:
@@ -21,6 +21,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public void accept(T object, int value) {
         try {
             field.setByte(object, (byte) value);
@@ -29,6 +30,7 @@ public void accept(T object, int value) {
         }
     }
 
+    @Override
     public void accept(T object, long value) {
         try {
             field.setByte(object, (byte) value);
@@ -47,6 +49,7 @@ public void accept(T object, Object value) {
         }
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         return (byte) jsonReader.readInt32Value();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderInt8ValueFunc.java
Patch:
@@ -26,6 +26,7 @@ public void accept(T object, byte value) {
         function.accept(object, value);
     }
 
+    @Override
     public void accept(T object, Object value) {
         function.accept(object
                 , TypeUtils.toByteValue(value));

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListField.java
Patch:
@@ -46,6 +46,7 @@ public Type getItemType() {
         return itemType;
     }
 
+    @Override
     public ObjectReader checkObjectAutoType(JSONReader jsonReader) {
         if (jsonReader.nextIfMatch(JSONB.Constants.BC_TYPED_ANY)) {
             long typeHash = jsonReader.readTypeHashCode();
@@ -76,13 +77,15 @@ public ObjectReader checkObjectAutoType(JSONReader jsonReader) {
         return null;
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader.Context ctx) {
         if (itemReader != null) {
             return itemReader;
         }
         return itemReader= ctx.getObjectReader(itemType);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         if (jsonReader.nextIfNull()) {
             return;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFieldUF.java
Patch:
@@ -23,6 +23,7 @@ final class FieldReaderListFieldUF<T> extends FieldReaderListField<T> {
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public void accept(Object object, Object value) {
         UNSAFE.putObject(object, fieldOffset, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListFunc.java
Patch:
@@ -32,6 +32,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader.Context ctx) {
         if (itemObjectReader != null) {
             return itemObjectReader;

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrFieldUF.java
Patch:
@@ -15,6 +15,7 @@ final class FieldReaderListStrFieldUF<T> extends FieldReaderListStrField<T> {
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public void accept(Object object, Object value) {
         UNSAFE.putObject(object, fieldOffset, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderListStrFunc.java
Patch:
@@ -35,6 +35,7 @@ public Type getItemType() {
         return String.class;
     }
 
+    @Override
     public ObjectReader getItemObjectReader(JSONReader.Context ctx) {
         return ObjectReaderImplString.INSTANCE;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderNumberFunc.java
Patch:
@@ -25,10 +25,12 @@ public void accept(T object, Object value) {
         function.accept(object, (V) value);
     }
 
+    @Override
     public void accept(T object, int value) {
         function.accept(object, (V) Integer.valueOf(value));
     }
 
+    @Override
     public void accept(T object, long value) {
         function.accept(object, (V) Long.valueOf(value));
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObject.java
Patch:
@@ -5,6 +5,7 @@
 public interface FieldReaderObject<T, V> extends FieldReader<T> {
     ObjectReader<V> getFieldObjectReader(JSONReader.Context context);
 
+    @Override
     default void readFieldValue(JSONReader jsonReader, T object) {
         accept(object,
                 getFieldObjectReader(jsonReader.getContext())

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFieldUF.java
Patch:
@@ -16,6 +16,7 @@ final class FieldReaderObjectFieldUF extends FieldReaderObjectField {
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public void accept(Object object, Object value) {
         UNSAFE.putObject(object, fieldOffset, value);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectFunc.java
Patch:
@@ -42,6 +42,7 @@ public void accept(T object, Object value) {
         function.accept(object, (V) value);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         ObjectReader objectReader;
         if (this.fieldObjectReader != null) {
@@ -75,6 +76,7 @@ public ObjectReader getFieldObjectReader(JSONReader.Context context) {
         return fieldObjectReader;
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         ObjectReader objectReader;
         if (this.fieldObjectReader != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderObjectParam.java
Patch:
@@ -35,6 +35,7 @@ public long getFieldNameHash() {
         return paramNameHash;
     }
 
+    @Override
     public Object readFieldValue(JSONReader jsonReader) {
         if (fieldObjectReader == null) {
             fieldObjectReader = jsonReader

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringField.java
Patch:
@@ -13,6 +13,7 @@ final class FieldReaderStringField<T> extends FieldReaderObjectField<T> {
         trim = "trim".equals(format);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {
@@ -26,6 +27,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String readFieldValue(JSONReader jsonReader) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {
@@ -34,6 +36,7 @@ public String readFieldValue(JSONReader jsonReader) {
         return fieldValue;
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value != null && !(value instanceof String)) {
             value = value.toString();

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringFunc.java
Patch:
@@ -21,6 +21,7 @@ final class FieldReaderStringFunc<T, V> extends FieldReaderImpl<T> {
         trim = "trim".equals(format);
     }
 
+    @Override
     public Method getMethod() {
         return method;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/FieldReaderStringMethod.java
Patch:
@@ -14,6 +14,7 @@ final class FieldReaderStringMethod<T> extends FieldReaderObjectMethod<T> {
         trim = "trim".equals(format);
     }
 
+    @Override
     public void readFieldValue(JSONReader jsonReader, T object) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {
@@ -27,6 +28,7 @@ public void readFieldValue(JSONReader jsonReader, T object) {
         }
     }
 
+    @Override
     public String readFieldValue(JSONReader jsonReader) {
         String fieldValue = jsonReader.readString();
         if (trim && fieldValue != null) {

File: core/src/main/java/com/alibaba/fastjson2/reader/FielderReaderImplMapFieldReadOnly.java
Patch:
@@ -13,6 +13,7 @@ class FielderReaderImplMapFieldReadOnly<T> extends FieldReaderObjectField<T> imp
         super(fieldName, fieldType, fieldClass, ordinal, features, format, field);
     }
 
+    @Override
     public void accept(T object, Object value) {
         if (value == null) {
             return;
@@ -37,6 +38,7 @@ public void accept(T object, Object value) {
         map.putAll((Map) value);
     }
 
+    @Override
     public boolean isReadOnly() {
         return true;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader1.java
Patch:
@@ -47,6 +47,7 @@ public T createInstance() {
         return defaultCreator.get();
     }
 
+    @Override
     public T readObject(JSONReader jsonReader) {
         return readObject(jsonReader, features);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReader2.java
Patch:
@@ -141,6 +141,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         return (T) object;
     }
 
+    @Override
     public T readObject(JSONReader jsonReader) {
         return readObject(jsonReader, features);
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderAdapter.java
Patch:
@@ -92,10 +92,12 @@ public ObjectReaderAdapter(
         }
     }
 
+    @Override
     public String getTypeKey() {
         return typeKey;
     }
 
+    @Override
     public long getTypeKeyHash() {
         return typeKeyHashCode;
     }
@@ -271,6 +273,7 @@ protected T autoType(JSONReader jsonReader) {
         return (T) autoTypeObjectReader.readJSONBObject(jsonReader, features);
     }
 
+    @Override
     public T readJSONBObject(JSONReader jsonReader, long features) {
         if (jsonReader.nextIfNull()) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorASM.java
Patch:
@@ -135,6 +135,7 @@ static String fieldItemObjectReader(int i) {
         return fieldName;
     }
 
+    @Override
     public <T> FieldReader<T> createFieldReader(
             Class objectClass
             , Type objectType
@@ -789,7 +790,7 @@ private <T> void genMethodReadJSONBObject(
 
         genCreateObject(mw, classNameType, TYPE_OBJECT, fieldBased);
         mw.visitVarInsn(Opcodes.ASTORE, OBJECT);
-        
+
         mw.visitVarInsn(Opcodes.ALOAD, JSON_READER);
         mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, TYPE_JSON_READER, "nextIfObjectStart", "()Z", false);
         mw.visitInsn(Opcodes.POP);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorDynamicCompile.java
Patch:
@@ -16,6 +16,7 @@
 public class ObjectReaderCreatorDynamicCompile extends ObjectReaderCreator {
     public static final ObjectReaderCreatorDynamicCompile INSTANCE = new ObjectReaderCreatorDynamicCompile();
 
+    @Override
     public <T> ObjectReader<T> createObjectReader(Class<T> objectType) {
         if (JDKUtils.JVM_VERSION >= 17 && !JDKUtils.JAVAC_UNNAMED) {
             return super.createObjectReader(objectType);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderCreatorLambda.java
Patch:
@@ -174,6 +174,7 @@ public <T> ObjectReader<T> createObjectReader(Class<T> objectClass, Type objectT
         return createObjectReader(objectClass, beanInfo.readerFeatures, supplier, null, fieldReaderArray);
     }
 
+    @Override
     public  <T> FieldReader createFieldReaderMethod(
             Class<T> objectClass
             , Type objectType
@@ -276,6 +277,7 @@ private static Object lambdaFunction(Class objectType, Class fieldClass, Method
         }
     }
 
+    @Override
     public <T, R> Function<T, R> createBuildFunction(Method builderMethod) {
         MethodHandles.Lookup lookup = MethodHandles.lookup();
         MethodType invokedType = METHODTYPE_Function;

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplCurrency.java
Patch:
@@ -13,6 +13,7 @@ final class ObjectReaderImplCurrency extends ObjectReaderBaseModule.PrimitiveImp
     static final long TYPE_HASH = Fnv.hashCode64("Currency");
     static final long TYPE_HASH_FULL = Fnv.hashCode64("java.util.Currency");
 
+    @Override
     public Object readJSONBObject(JSONReader jsonReader, long features) {
         if (jsonReader.getType() == JSONB.Constants.BC_TYPED_ANY) {
             jsonReader.next();
@@ -29,6 +30,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return Currency.getInstance(strVal);
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         String strVal = jsonReader.readString();
         if (strVal == null || strVal.isEmpty()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplEnum2X4.java
Patch:
@@ -86,6 +86,7 @@ public Object readJSONBObject(JSONReader jsonReader, long features) {
         return fieldValue;
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         Enum fieldValue;
         if (jsonReader.isInt()) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplInstant.java
Patch:
@@ -9,6 +9,7 @@
 public final class ObjectReaderImplInstant implements ObjectReader  {
     public static final ObjectReaderImplInstant INSTANCE = new ObjectReaderImplInstant();
 
+    @Override
     public Object createInstance(Map map) {
         Number nano = (Number) map.get("nano");
         Number epochSecond = (Number) map.get("epochSecond");
@@ -29,10 +30,12 @@ public Object createInstance(Map map) {
         throw new JSONException("can not create instant.");
     }
 
+    @Override
     public Object readJSONBObject(JSONReader jsonReader, long features) {
         return jsonReader.readInstant();
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         return jsonReader.readInstant();
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplMapString.java
Patch:
@@ -11,6 +11,7 @@ public ObjectReaderImplMapString(Class mapType, Class instanceType, long feature
         super(mapType, instanceType, null, String.class, features, null);
     }
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return this.readJSONBObject(jsonReader, features);

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplObject.java
Patch:
@@ -7,6 +7,7 @@
 final class ObjectReaderImplObject extends ObjectReaderBaseModule.PrimitiveImpl {
     static final ObjectReaderImplObject INSTANCE = new ObjectReaderImplObject();
 
+    @Override
     public Object readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return jsonReader.readAny();

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderImplString.java
Patch:
@@ -5,6 +5,7 @@
 final class ObjectReaderImplString extends ObjectReaderBaseModule.PrimitiveImpl {
     static final ObjectReaderImplString INSTANCE = new ObjectReaderImplString();
 
+    @Override
     public Class getObjectClass() {
         return String.class;
     }

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderInterface.java
Patch:
@@ -20,6 +20,7 @@ public ObjectReaderInterface(
         super(objectClass, typeKey, typeName, features, creator, buildFunction, fieldReaders);
     }
 
+    @Override
     public T readJSONBObject(JSONReader jsonReader, long features) {
         ObjectReader autoTypeReader = jsonReader.checkAutoType(this.objectClass, this.typeNameHash, this.features | features);
         if (autoTypeReader != null && autoTypeReader.getObjectClass() != this.objectClass) {

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderNoneDefaultConstrutor.java
Patch:
@@ -47,6 +47,7 @@ public T createInstanceNoneDefaultConstructor(Map<Long, Object> values) {
         return creator.apply(values);
     }
 
+    @Override
     public T readJSONBObject(JSONReader jsonReader, long features) {
         byte type = jsonReader.getType();
         if (type == BC_NULL) {
@@ -161,6 +162,7 @@ public T readJSONBObject(JSONReader jsonReader, long features) {
         return object;
     }
 
+    @Override
     public T readObject(JSONReader jsonReader, long features) {
         if (jsonReader.isJSONB()) {
             return readJSONBObject(jsonReader, 0);
@@ -251,6 +253,7 @@ public T readObject(JSONReader jsonReader, long features) {
         return object;
     }
 
+    @Override
     public T createInstance(Map map) {
         ObjectReaderProvider provider = JSONFactory.getDefaultObjectReaderProvider();
 

File: core/src/main/java/com/alibaba/fastjson2/support/money/NumberValueWriter.java
Patch:
@@ -8,6 +8,8 @@
 import java.math.BigDecimal;
 
 public class NumberValueWriter implements ObjectWriter {
+
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         NumberValue value = (NumberValue) object;
         BigDecimal decimal = value.numberValue(BigDecimal.class);

File: core/src/main/java/com/alibaba/fastjson2/util/JSONBDump.java
Patch:
@@ -904,6 +904,7 @@ String readReference() {
         throw new JSONException("reference not support input " + typeName(type));
     }
 
+    @Override
     public String toString() {
         return jsonWriter.toString();
     }

File: core/src/main/java/com/alibaba/fastjson2/util/JdbcSupport.java
Patch:
@@ -99,6 +99,7 @@ public Object readObject(JSONReader jsonReader, long features) {
     }
 
     static class TimeWriter implements ObjectWriter {
+        @Override
         public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
             if (object == null) {
                 jsonWriter.writeNull();

File: core/src/main/java/com/alibaba/fastjson2/writer/FIeldWriterEnumField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -26,6 +27,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Enum value = (Enum) getFieldValue(object);
         jsonWriter.writeEnum(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriter.java
Patch:
@@ -59,6 +59,7 @@ default Object getFieldValue(T object) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     default int compareTo(Object o) {
         FieldWriter fw = (FieldWriter) o;
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalField.java
Patch:
@@ -19,6 +19,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);
@@ -47,6 +48,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigDecimal value = (BigDecimal) getFieldValue(object);
         jsonWriter.writeDecimal(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigDecimalFunc.java
Patch:
@@ -27,10 +27,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigDecimal value = function.apply(object);
         jsonWriter.writeDecimal(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntField.java
Patch:
@@ -19,6 +19,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);
@@ -42,6 +43,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigInteger value = (BigInteger) getFieldValue(object);
         jsonWriter.writeBigInt(value, features);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBigIntFunc.java
Patch:
@@ -21,10 +21,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         BigInteger value = (BigInteger) getFieldValue(object);
         jsonWriter.writeBigInt(value, features);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolValField.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.getBoolean(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBoolean.java
Patch:
@@ -15,6 +15,7 @@ abstract class FieldWriterBoolean extends FieldWriterImpl {
         super(name, ordinal, features, format, fieldType, fieldClass);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Boolean value = (Boolean) getFieldValue(object);
         if (value == null) {
@@ -24,6 +25,7 @@ public void writeValue(JSONWriter jsonWriter, Object object) {
         jsonWriter.writeBool(value);
     }
 
+    @Override
     public void writeBool(JSONWriter jsonWriter, boolean value) {
         if (jsonWriter.isUTF8()) {
             if (value) {
@@ -105,6 +107,7 @@ public boolean write(JSONWriter jsonWriter, Object object) {
         return true;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         return ObjectWriterImplBoolean.INSTANCE;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterBooleanField.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCalendarFunc.java
Patch:
@@ -21,10 +21,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Calendar value = function.apply(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharMethod.java
Patch:
@@ -19,6 +19,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);
@@ -27,6 +28,7 @@ public Object getFieldValue(T object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Character value = (Character) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.getChar(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterCharValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         char value = function.applyAsChar(object);
         jsonWriter.writeString(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDate.java
Patch:
@@ -33,10 +33,12 @@ protected FieldWriterDate(String fieldName, int ordinal, long features, String f
         this.formatISO8601 = "iso8601".equalsIgnoreCase(format);
     }
 
+    @Override
     public boolean isDateFormatMillis() {
         return formatMillis;
     }
 
+    @Override
     public boolean isDateFormatISO8601() {
         return formatISO8601;
     }
@@ -49,6 +51,7 @@ public DateTimeFormatter getFormatter() {
         return formatter;
     }
 
+    @Override
     public void writeDate(JSONWriter jsonWriter, long timeMillis) {
         if (jsonWriter.isJSONB()) {
             writeFieldName(jsonWriter);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateField.java
Patch:
@@ -19,6 +19,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -27,6 +28,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Date value = (Date) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateFieldMethod.java
Patch:
@@ -27,6 +27,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -35,6 +36,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Date value = (Date) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDateFunc.java
Patch:
@@ -28,10 +28,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Date value = function.apply(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return getFieldValueDouble(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterDoubleValueFunc.java
Patch:
@@ -20,10 +20,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsDouble(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         double fieldValue = function.applyAsDouble(object);
         jsonWriter.writeDouble(fieldValue);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnum.java
Patch:
@@ -63,6 +63,7 @@ public final void writeEnumJSONB(JSONWriter jsonWriter, Enum e) {
         jsonWriter.writeString(e.name());
     }
 
+    @Override
     public final void writeEnum(JSONWriter jsonWriter, Enum e) {
         long features = jsonWriter.getFeatures();
         boolean usingOrdinal = (features & (JSONWriter.Feature.WriteEnumUsingToString.mask | JSONWriter.Feature.WriteEnumsUsingName.mask)) == 0;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumFunc.java
Patch:
@@ -44,6 +44,7 @@ public boolean write(JSONWriter jsonWriter, Object o) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Enum value = (Enum) function.apply(object);
         jsonWriter.writeEnum(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterEnumMethod.java
Patch:
@@ -19,6 +19,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -27,6 +28,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         Enum value = (Enum) getFieldValue(object);
         jsonWriter.writeEnum(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return getFieldValueFloat(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterFloatValueFunc.java
Patch:
@@ -20,10 +20,12 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsFloat(object);
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         float fieldValue = function.applyAsFloat(object);
         jsonWriter.writeFloat(fieldValue);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterImpl.java
Patch:
@@ -138,6 +138,7 @@ public final void writeFieldName(JSONWriter jsonWriter) {
         jsonWriter.writeColon();
     }
 
+    @Override
     public String toString() {
         return name;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16.java
Patch:
@@ -119,6 +119,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         jsonWriter.writeInt32(value.shortValue());
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         return ObjectWriterImplInt16.INSTANCE;
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Field.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Func.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt16ValFunc.java
Patch:
@@ -20,11 +20,13 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         short value = function.applyAsShort(object);
         jsonWriter.writeInt32(value);
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsShort(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32.java
Patch:
@@ -17,6 +17,7 @@ protected FieldWriterInt32(String name, int ordinal, long features, String forma
                 || "string".equals(format);
     }
 
+    @Override
     public void writeInt32(JSONWriter jsonWriter, int value) {
         if (toString) {
             writeFieldName(jsonWriter);
@@ -106,6 +107,7 @@ public void writeValue(JSONWriter jsonWriter, T object) {
         jsonWriter.writeInt32(value);
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (valueClass == this.fieldClass) {
             return ObjectWriterImplInt32.INSTANCE;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Field.java
Patch:
@@ -12,10 +12,12 @@ final class FieldWriterInt32Field<T> extends FieldWriterInt32<T> {
         this.field = field;
     }
 
+    @Override
     public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Func.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32Val.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt32ValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsInt(object);
     }
@@ -40,6 +41,7 @@ public boolean write(JSONWriter jsonWriter, Object object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, Object object) {
         int value = function.applyAsInt(object);
         jsonWriter.writeInt32(value);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64.java
Patch:
@@ -15,6 +15,7 @@ abstract class FieldWriterInt64<T> extends FieldWriterImpl<T> {
         browserCompatible = (features & JSONWriter.Feature.BrowserCompatible.mask) != 0;
     }
 
+    @Override
     public void writeInt64(JSONWriter jsonWriter, long value) {
         if (jsonWriter.isUTF8()) {
             if (value >= -1 && value < 1039) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Field.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Func.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64ValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt64ValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.applyAsLong(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Field.java
Patch:
@@ -17,6 +17,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Func.java
Patch:
@@ -13,6 +13,7 @@ final class FieldWriterInt8Func<T> extends FieldWriterInt8<T> {
         this.function = function;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8Method.java
Patch:
@@ -18,6 +18,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValField.java
Patch:
@@ -18,6 +18,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterInt8ValFunc.java
Patch:
@@ -20,6 +20,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.applyAsByte(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListField.java
Patch:
@@ -31,6 +31,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListFunc.java
Patch:
@@ -32,6 +32,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListMethod.java
Patch:
@@ -31,6 +31,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterListStrFunc.java
Patch:
@@ -31,6 +31,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }
@@ -94,6 +95,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         List list = function.apply(object);
         if (list == null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisField.java
Patch:
@@ -23,6 +23,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return getFieldLong(object);
     }
@@ -42,6 +43,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         long millis = getFieldLong(object);
         writeDate(jsonWriter, false, millis);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisFunc.java
Patch:
@@ -26,6 +26,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.applyAsLong(object);
     }
@@ -37,6 +38,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         long millis = function.applyAsLong(object);
         writeDate(jsonWriter, false, millis);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterMillisMethod.java
Patch:
@@ -25,6 +25,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         try {
             return method.invoke(object);
@@ -40,6 +41,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         long millis = (Long) getFieldValue(object);
         writeDate(jsonWriter, false, millis);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObject.java
Patch:
@@ -32,6 +32,7 @@ protected FieldWriterObject(String name, int ordinal, long features, String form
                 || fieldClass == AtomicIntegerArray.class;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (initValueClass == null) {
             initValueClass = valueClass;
@@ -176,6 +177,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Object value = getFieldValue(object);
         if (value == null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayField.java
Patch:
@@ -38,6 +38,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -46,6 +47,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public ObjectWriter getItemWriter(JSONWriter jsonWriter, Type itemType) {
         if (itemType == null || itemType == this.itemType) {
             if (itemObjectWriter != null) {
@@ -185,6 +187,7 @@ public void writeArray(JSONWriter jsonWriter, boolean writeFieldName, Object[] a
         jsonWriter.endArray();
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (valueClass == String[].class) {
             return ObjectWriterImplStringArray.INSTANCE;

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectArrayMethod.java
Patch:
@@ -39,6 +39,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -47,6 +48,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public ObjectWriter getItemWriter(JSONWriter jsonWriter, Type itemType) {
         if (itemType == null || itemType == this.itemType) {
             if (itemObjectWriter != null) {

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectField.java
Patch:
@@ -26,6 +26,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFieldUF.java
Patch:
@@ -24,6 +24,7 @@ protected FieldWriterObjectFieldUF(
         fieldOffset = UnsafeUtils.objectFieldOffset(field);
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return UNSAFE.getObject(object, fieldOffset);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFinal.java
Patch:
@@ -17,6 +17,7 @@ protected FieldWriterObjectFinal(String name, int ordinal, long features, String
         this.refDetect = !ObjectWriterProvider.isNotReferenceDetect(fieldClass);
     }
 
+    @Override
     public ObjectWriter getObjectWriter(JSONWriter jsonWriter, Class valueClass) {
         if (fieldClass != valueClass) {
             return jsonWriter.getObjectWriter(valueClass);
@@ -69,6 +70,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         Object value = getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFunc.java
Patch:
@@ -27,6 +27,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectFuncFinal.java
Patch:
@@ -27,6 +27,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterObjectMethod.java
Patch:
@@ -28,6 +28,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringField.java
Patch:
@@ -28,6 +28,7 @@ public Field getField() {
         return field;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return field.get(object);
@@ -62,6 +63,7 @@ public boolean write(JSONWriter jsonWriter, T object) {
         return true;
     }
 
+    @Override
     public void writeString(JSONWriter jsonWriter, String value) {
         writeFieldName(jsonWriter);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringFunc.java
Patch:
@@ -31,6 +31,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(T object) {
         return function.apply(object);
     }

File: core/src/main/java/com/alibaba/fastjson2/writer/FieldWriterStringMethod.java
Patch:
@@ -30,6 +30,7 @@ public Method getMethod() {
         return method;
     }
 
+    @Override
     public Object getFieldValue(Object object) {
         try {
             return method.invoke(object);
@@ -38,6 +39,7 @@ public Object getFieldValue(Object object) {
         }
     }
 
+    @Override
     public void writeString(JSONWriter jsonWriter, String value) {
         writeFieldName(jsonWriter);
 
@@ -57,6 +59,7 @@ public void writeString(JSONWriter jsonWriter, String value) {
         }
     }
 
+    @Override
     public void writeValue(JSONWriter jsonWriter, T object) {
         String value = (String) getFieldValue(object);
 

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -100,7 +100,7 @@ public ObjectWriterCreatorASM(ClassLoader classLoader) {
         this.classLoader = new DynamicClassLoader(classLoader);
     }
 
-
+    @Override
     public ObjectWriter createObjectWriter(
             Class objectClass,
             long features,
@@ -2326,6 +2326,7 @@ private void genFields(List<FieldWriter> fieldWriters, ClassWriter cw) {
         }
     }
 
+    @Override
     public <T> FieldWriter<T> createFieldWriter(
             String fieldName,
             int ordinal,

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorLambda.java
Patch:
@@ -35,6 +35,7 @@ static boolean isExternalClass(Class<?> clazz) {
         return true;
     }
 
+    @Override
     public <T> FieldWriter<T> createFieldWriter(
             Class<T> objectClass
             , String fieldName

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterException.java
Patch:
@@ -11,6 +11,7 @@ public ObjectWriterException(Class objectType, long features, List<FieldWriter>
         super(objectType, null, null, features, fieldWriters);
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         writeClassInfo(jsonWriter);
 
@@ -24,6 +25,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         jsonWriter.endObject();
     }
 
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (jsonWriter.isJSONB()) {
             writeJSONB(jsonWriter, object, fieldName, fieldType, features);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplCurrency.java
Patch:
@@ -21,6 +21,7 @@ final class ObjectWriterImplCurrency extends ObjectWriterBaseModule.PrimitiveImp
         this.defineClass = defineClass;
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (object == null) {
             jsonWriter.writeNull();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplEnum.java
Patch:
@@ -36,6 +36,7 @@ public ObjectWriterImplEnum(Class defineClass, Class enumType, long features) {
         }
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (jsonWriter.isWriteTypeInfo(object, fieldType, features)) {
             if (typeNameJSONB == null) {
@@ -66,6 +67,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         }
     }
 
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         Enum e = (Enum) object;
         String str;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplList.java
Patch:
@@ -39,6 +39,7 @@ public ObjectWriterImplList(
         this.itemClassRefDetect = itemClass != null && !ObjectWriterProvider.isNotReferenceDetect(itemClass);
     }
 
+    @Override
     public void writeArrayMappingJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if (object == null) {
             jsonWriter.writeArrayNull();

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMap.java
Patch:
@@ -124,6 +124,7 @@ public void writeArrayMappingJSONB(JSONWriter jsonWriter, Object object, Object
         jsonWriter.endObject();
     }
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         if ((fieldType == this.objectType && jsonWriter.isWriteMapTypeInfo(object, objectClass, features))
                 || jsonWriter.isWriteTypeInfo(object, fieldType, features)
@@ -387,6 +388,7 @@ public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type f
     }
 
 
+    @Override
     public void writeWithFilter(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         jsonWriter.startObject();
         Map map = (Map) object;

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterImplMapEntry.java
Patch:
@@ -8,6 +8,7 @@
 final class ObjectWriterImplMapEntry extends ObjectWriterBaseModule.PrimitiveImpl {
     static final ObjectWriterImplMapEntry INSTANCE = new ObjectWriterImplMapEntry();
 
+    @Override
     public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         Map.Entry entry = (Map.Entry) object;
         if (entry == null) {
@@ -20,6 +21,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
         jsonWriter.writeAny(entry.getValue());
     }
 
+    @Override
     public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
         Map.Entry entry = (Map.Entry) object;
         if (entry == null) {

File: extension/src/main/java/com/alibaba/fastjson2/support/AwtRederModule.java
Patch:
@@ -21,6 +21,7 @@ public class AwtRederModule implements ObjectReaderModule {
     static final long HASH_SIZE = Fnv.hashCode64("size");
     static final long HASH_STYLE = Fnv.hashCode64("style");
 
+    @Override
     public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
         if (type == Color.class) {
             return createObjectReader(new ColorCreator()

File: extension/src/main/java/com/alibaba/fastjson2/support/AwtWriterModule.java
Patch:
@@ -11,6 +11,7 @@
 public class AwtWriterModule implements ObjectWriterModule {
     public static AwtWriterModule INSTANCE = new AwtWriterModule();
 
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         if (objectType == Color.class) {
             return objectWriter(Color.class,

File: extension/src/main/java/com/alibaba/fastjson2/support/jdbc/JdbcReaderModule.java
Patch:
@@ -6,6 +6,8 @@
 import java.lang.reflect.Type;
 
 public class JdbcReaderModule implements ObjectWriterModule {
+
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         return null;
     }

File: extension/src/main/java/com/alibaba/fastjson2/support/jdbc/JdbcWriterModule.java
Patch:
@@ -6,6 +6,8 @@
 import java.lang.reflect.Type;
 
 public class JdbcWriterModule implements ObjectWriterModule {
+
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         return null;
     }

File: extension/src/main/java/com/alibaba/fastjson2/support/odps/JSONExtract.java
Patch:
@@ -69,6 +69,7 @@ public void accept(boolean val) {
             text.set(val ? BYTES_TRUE : BYTES_FALSE);
         }
 
+        @Override
         public void accept(int val) {
             if (val >= -1 && val < 511) {
                 text = cache[val + 1];
@@ -84,6 +85,7 @@ public void accept(int val) {
             text.length = size + 2;
         }
 
+        @Override
         public void accept(long val) {
             int size = (val < 0) ? IOUtils.stringSize(-val) + 1 : IOUtils.stringSize(val);
             byte[] bytes = new byte[size + 2];

File: extension/src/main/java/com/alibaba/fastjson2/support/odps/JSONExtractScalar.java
Patch:
@@ -54,6 +54,7 @@ public void accept(boolean val) {
             text.set(val ? BYTES_TRUE : BYTES_FALSE);
         }
 
+        @Override
         public void accept(int val) {
             int size = (val < 0) ? IOUtils.stringSize(-val) + 1 : IOUtils.stringSize(val);
             text.setCapacity(size, false);
@@ -62,6 +63,7 @@ public void accept(int val) {
             text.length = size;
         }
 
+        @Override
         public void accept(long val) {
             int size = (val < 0) ? IOUtils.stringSize(-val) + 1 : IOUtils.stringSize(val);
             text.setCapacity(size, false);

File: extension/src/main/java/com/alibaba/fastjson2/support/odps/JSONWritable.java
Patch:
@@ -64,6 +64,7 @@ public void set(byte[] utf8, int start, int len) {
         this.length = len;
     }
 
+    @Override
     public String toString() {
         return new String(bytes, off, length, StandardCharsets.UTF_8);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/Fastjson1xReaderModule.java
Patch:
@@ -15,6 +15,7 @@ public Fastjson1xReaderModule(ObjectReaderProvider provider) {
         this.provider = provider;
     }
 
+    @Override
     public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
         if (type == JSON.class) {
             return new JSONImpl();
@@ -23,6 +24,7 @@ public ObjectReader getObjectReader(ObjectReaderProvider provider, Type type) {
     }
 
     static class JSONImpl implements ObjectReader {
+        @Override
         public Object readObject(JSONReader jsonReader, long features) {
             if (jsonReader.isObject()) {
                 return jsonReader.read(JSONObject.class);

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/Fastjson1xWriterModule.java
Patch:
@@ -16,6 +16,7 @@ public Fastjson1xWriterModule(ObjectWriterProvider provider) {
         this.provider = provider;
     }
 
+    @Override
     public ObjectWriter getObjectWriter(Type objectType, Class objectClass) {
         if (objectClass != null && JSONAware.class.isAssignableFrom(objectClass)) {
             return JSONAwareWriter.INSTANCE;
@@ -41,6 +42,7 @@ public void writeJSONB(JSONWriter jsonWriter, Object object, Object fieldName, T
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public void write(JSONWriter jsonWriter, Object object, Object fieldName, Type fieldType, long features) {
             if (object == null) {
                 jsonWriter.writeNull();

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/JSONArray.java
Patch:
@@ -69,6 +69,7 @@ public Object[] toArray(Object[] a) {
         return list.toArray(a);
     }
 
+    @Override
     public boolean add(Object item) {
         return list.add(item);
     }
@@ -108,6 +109,7 @@ public boolean containsAll(Collection c) {
         return list.containsAll(c);
     }
 
+    @Override
     public Object get(int index) {
         return list.get(index);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/serializer/ContextValueFilter.java
Patch:
@@ -5,6 +5,7 @@
 public interface ContextValueFilter extends SerializeFilter, ValueFilter {
     Object process(BeanContext context, Object object, String name, Object value);
 
+    @Override
     default Object apply(Object object, String name, Object value) {
         return process(null, object, name, value);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/serializer/NameFilter.java
Patch:
@@ -16,5 +16,7 @@
 package com.alibaba.fastjson.serializer;
 
 public interface NameFilter extends SerializeFilter, com.alibaba.fastjson2.filter.NameFilter {
+
+    @Override
     String process(Object object, String name, Object value);
 }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/serializer/ValueFilter.java
Patch:
@@ -4,6 +4,7 @@ public interface ValueFilter extends SerializeFilter, com.alibaba.fastjson2.filt
 
     Object process(Object object, String name, Object value);
 
+    @Override
     default Object apply(Object object, String name, Object value) {
         return process(object, name, value);
     }

File: fastjson1_compatible/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java
Patch:
@@ -18,6 +18,7 @@
  */
 public class GenericFastJsonRedisSerializer implements RedisSerializer<Object> {
 
+    @Override
     public byte[] serialize(Object object) throws SerializationException {
         if (object == null) {
             return new byte[0];
@@ -29,6 +30,7 @@ public byte[] serialize(Object object) throws SerializationException {
         }
     }
 
+    @Override
     public Object deserialize(byte[] bytes) throws SerializationException {
         if (bytes == null || bytes.length == 0) {
             return null;

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONField.java
Patch:
@@ -15,8 +15,8 @@
     String name() default "";
     String format() default "";
 
-    boolean write() default true;
-    boolean read() default true;
+    boolean serialize() default true;
+    boolean deserialize() default true;
 
     JSONWriter.Feature[] writeFeatures() default {};
     JSONReader.Feature[] readeFeatures() default {};

File: core/src/main/java/com/alibaba/fastjson2/reader/ObjectReaderBaseModule.java
Patch:
@@ -629,7 +629,7 @@ private void getFieldInfo(FieldInfo fieldInfo, JSONField jsonField) {
             }
 
             if (!fieldInfo.ignore) {
-                fieldInfo.ignore = !jsonField.read();
+                fieldInfo.ignore = !jsonField.deserialize();
             }
 
             for (JSONReader.Feature feature : jsonField.readeFeatures()) {

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterBaseModule.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.fastjson2.writer;
 
-import com.alibaba.fastjson2.JSONReader;
 import com.alibaba.fastjson2.annotation.JSONType;
 import com.alibaba.fastjson2.modules.ObjectWriterAnnotationProcessor;
 import com.alibaba.fastjson2.modules.ObjectWriterModule;
@@ -199,7 +198,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectType, Field field) {
             }
 
             if (!fieldInfo.ignore) {
-                fieldInfo.ignore = !jsonField.write();
+                fieldInfo.ignore = !jsonField.serialize();
             }
 
             if (jsonField.unwrapped()) {
@@ -378,7 +377,7 @@ public void getFieldInfo(FieldInfo fieldInfo, Class objectClass, Method method)
                 }
 
                 if (!fieldInfo.ignore) {
-                    fieldInfo.ignore = !jsonField.write();
+                    fieldInfo.ignore = !jsonField.serialize();
                 }
 
                 if (jsonField.unwrapped()) {

File: core/src/test/java/com/alibaba/fastjson2/eishay/vo/Media.java
Patch:
@@ -12,7 +12,7 @@ public enum Player {
     }
 
     public int bitrate;   // Can be unset.
-    @JSONField(write = false, read = false)
+    @JSONField(serialize = false, deserialize = false)
     public boolean hasBitrate;
 
     public long duration;

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1000/Issue1079.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;
@@ -55,7 +54,7 @@ public static class StatusCode {
             public String value;
         }
 
-        @JSONField(read = false)
+        @JSONField(deserialize = false)
         public String retrieveDecision(){
             return this.response.get(0).innerObjects.get(0).decision;
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1100/Issue1188.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;
@@ -22,7 +21,7 @@ public void test_for_issue_1188() throws Exception {
 
     public static class Info{
 
-        @JSONField(read = false)
+        @JSONField(deserialize = false)
         private List<Integer> ids;
         private String name;
 

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1200/Issue1246.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -67,7 +66,7 @@ public static class B extends A{
         private String x;
 
         @Override
-        @JSONField(write = false)
+        @JSONField(serialize = false)
         public String getX() {
             return x;
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1400/Issue1465.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -18,14 +17,14 @@ public void test_for_issue() throws Exception {
 
     public static class Model {
         private int id;
-        @JSONField(read = false)
+        @JSONField(deserialize = false)
         private int hasSth;
 
         public int getHasSth() {
             return hasSth;
         }
 
-        @JSONField(read = false)
+        @JSONField(deserialize = false)
         public void setHasSth(int hasSth) {
             this.hasSth = hasSth;
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1500/Issue1548.java
Patch:
@@ -31,12 +31,12 @@ public PublishDoc() {
             this.doc = new JSONObject();
         }
 
-        @JSONField(read = false)
+        @JSONField(deserialize = false)
         public void addMeta(String name, Object value) {
             this.meta.put(name, value);
         }
 
-        @JSONField(write = false)
+        @JSONField(serialize = false)
         public Object getMeta(String name) {
             return this.meta.get(name);
         }

File: core/src/test/java/com/alibaba/fastjson2/v1issues/issue_1700/Issue1739.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson2.JSON;
 import com.alibaba.fastjson2.JSONObject;
 import com.alibaba.fastjson2.annotation.JSONField;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -30,7 +29,7 @@ public void test_for_issue_1() throws Exception {
     public static class M0 {
         private JSONObject data;
 
-        @JSONField(read = false)
+        @JSONField(deserialize = false)
         public JSONObject getData() {
             return data;
         }
@@ -43,7 +42,7 @@ public void setData(JSONObject data) {
     public static class M1 {
         private JSONObject data;
 
-        @JSONField(write = false)
+        @JSONField(serialize = false)
         public JSONObject getData() {
             return data;
         }

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2787.java
Patch:
@@ -35,9 +35,9 @@ public void test_for_issue() {
 
             Pageable pageRequest = PageRequest.of(0, 10, Sort.Direction.DESC, "id");
             SerializeConfig config = new SerializeConfig();
-            //        config.register(new MyModule());
+//                    config.register(new MyModule());
             String result = JSON.toJSONString(pageRequest, config);
-            assertTrue(result.indexOf("\"property\":\"id, desc\"") != -1);
+            assertTrue(result.indexOf("\"property\":\"id\"") != -1);
         }
 
         public class MyModule implements Module {

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1700/Issue1701.java
Patch:
@@ -82,7 +82,7 @@ ResponseEntity<byte[]> download(@RequestBody TestBean testBean) {
     }
 
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson.issue_1700")
+    @ComponentScan(basePackages = "com.alibaba.json.bvt.issue_1700")
     @Configuration
     @EnableWebMvc
     public static class WebMvcConfig extends WebMvcConfigurerAdapter {

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2787.java
Patch:
@@ -35,9 +35,9 @@ public void test_for_issue() {
 
             Pageable pageRequest = PageRequest.of(0, 10, Sort.Direction.DESC, "id");
             SerializeConfig config = new SerializeConfig();
-            //        config.register(new MyModule());
+//                    config.register(new MyModule());
             String result = JSON.toJSONString(pageRequest, config);
-            assertTrue(result.indexOf("\"property\":\"id, desc\"") != -1);
+            assertTrue(result.indexOf("\"property\":\"id\"") != -1);
         }
 
         public class MyModule implements Module {

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1700/Issue1701.java
Patch:
@@ -82,7 +82,7 @@ ResponseEntity<byte[]> download(@RequestBody TestBean testBean) {
     }
 
 
-    @ComponentScan(basePackages = "com.alibaba.fastjson.issue_1700")
+    @ComponentScan(basePackages = "com.alibaba.json.bvt.issue_1700")
     @Configuration
     @EnableWebMvc
     public static class WebMvcConfig extends WebMvcConfigurerAdapter {

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2787.java
Patch:
@@ -8,7 +8,6 @@
 import com.alibaba.fastjson.serializer.SerializeConfig;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.spi.Module;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 import org.springframework.data.domain.PageRequest;
 import org.springframework.data.domain.Pageable;
@@ -33,9 +32,10 @@ public static class Issue2752 {
 
         @Test
         public void test_for_issue() {
-            Pageable pageRequest = new PageRequest(0, 10, new Sort(new Sort.Order("id, desc")));
+
+            Pageable pageRequest = PageRequest.of(0, 10, Sort.Direction.DESC, "id");
             SerializeConfig config = new SerializeConfig();
-    //        config.register(new MyModule());
+            //        config.register(new MyModule());
             String result = JSON.toJSONString(pageRequest, config);
             assertTrue(result.indexOf("\"property\":\"id, desc\"") != -1);
         }

File: fastjson1_compatible/src/test/java/com/alibaba/fastjson/issue_2700/Issue2787.java
Patch:
@@ -8,7 +8,6 @@
 import com.alibaba.fastjson.serializer.SerializeConfig;
 import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.alibaba.fastjson.spi.Module;
-import junit.framework.TestCase;
 import org.junit.jupiter.api.Test;
 import org.springframework.data.domain.PageRequest;
 import org.springframework.data.domain.Pageable;
@@ -33,9 +32,10 @@ public static class Issue2752 {
 
         @Test
         public void test_for_issue() {
-            Pageable pageRequest = new PageRequest(0, 10, new Sort(new Sort.Order("id, desc")));
+
+            Pageable pageRequest = PageRequest.of(0, 10, Sort.Direction.DESC, "id");
             SerializeConfig config = new SerializeConfig();
-    //        config.register(new MyModule());
+            //        config.register(new MyModule());
             String result = JSON.toJSONString(pageRequest, config);
             assertTrue(result.indexOf("\"property\":\"id, desc\"") != -1);
         }

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1367.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
 import org.junit.Before;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.ComponentScan;

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1400/Issue1405.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
 import com.alibaba.fastjson.support.spring.FastJsonJsonView;
 import org.junit.Before;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.ComponentScan;

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1700/Issue1701.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;
 import org.junit.Before;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.ComponentScan;

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_3200/Issue3282.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson.issue_3200;
+package com.alibaba.json.bvt.issue_3200;
 
 import com.alibaba.fastjson.JSON;
 import junit.framework.TestCase;

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1300/Issue1368.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.fastjson.issue_1300;
+package com.alibaba.json.bvt.issue_1300;
 
 import com.alibaba.fastjson.JSON;
 import junit.framework.TestCase;

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -747,7 +747,7 @@ public void writeString(char[] str) {
         write0('"');
         boolean special = false;
         for (int i = 0; i < str.length; ++i) {
-            if (str[i] == '"') {
+            if (str[i] == '\\' || str[i] == '"') {
                 special = true;
                 break;
             }
@@ -758,7 +758,7 @@ public void writeString(char[] str) {
         } else {
             for (int i = 0; i < str.length; ++i) {
                 char ch = str[i];
-                if (ch == '"') {
+                if (ch == '\\' || ch == '"') {
                     write0('\\');
                 }
                 write0(ch);

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest2.java
Patch:
@@ -137,7 +137,7 @@ public static class B {
     }
 
     public static class C {
-        public ArrayList<Item> list1;
+        public JSONArray list1;
         public com.alibaba.fastjson.JSONArray list2;
     }
 

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest2.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
+import java.util.List;
 
 import static junit.framework.TestCase.*;
 
@@ -35,7 +36,7 @@ public void test_0() {
     @Test
     public void test_c() {
         C c = new C();
-        c.list1 = new JSONArray();
+        c.list1 = new ArrayList();
         c.list2 = new com.alibaba.fastjson.JSONArray();
 
         c.list1.add(Item.of(201));
@@ -55,7 +56,7 @@ public void test_c() {
     @Test
     public void test_c_wrteClassName() {
         C c = new C();
-        c.list1 = new JSONArray();
+        c.list1 = new ArrayList<>();
         c.list2 = new com.alibaba.fastjson.JSONArray();
 
         c.list1.add(Item.of(201));

File: core/src/test/java/com/alibaba/fastjson2/codec/JSONBTableTest2.java
Patch:
@@ -136,7 +136,7 @@ public static class B {
     }
 
     public static class C {
-        public ArrayList<Item> list1;
+        public JSONArray list1;
         public com.alibaba.fastjson.JSONArray list2;
     }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -960,6 +960,7 @@ protected void skipString() {
         for (; ; ) {
             if (ch == '\\') {
                 ch = str.charAt(++offset);
+                char1(ch);
                 continue;
             }
             if (ch == quote) {

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF8.java
Patch:
@@ -1943,7 +1943,8 @@ protected void skipString() {
         byte ch = bytes[offset++];
         for (; ; ) {
             if (ch == '\\') {
-                offset++;
+                ch = bytes[offset++];
+                char1(ch);
                 ch = bytes[offset++];
                 continue;
             }

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderUTF16.java
Patch:
@@ -1010,7 +1010,8 @@ protected void skipString() {
         _for:
         for (; ; ) {
             if (ch == '\\') {
-                ch = chars[++offset];
+                ch = chars[offset++];
+                ch = char1(ch);
                 continue;
             }
             if (ch == quote) {

File: core/src/test/java/com/alibaba/fastjson2/jackson_cve/CVE_2020_36518.java
Patch:
@@ -9,8 +9,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class CVE_2020_36518 {
-    // 2000 passes, 3000 fails
-    private final static int TOO_DEEP_NESTING = 4000;
+    private final static int TOO_DEEP_NESTING = 2000;
 
     @Test
     public void testWithArray() throws Exception {

File: core/src/main/java/com/alibaba/fastjson2/JSONReader.java
Patch:
@@ -1616,7 +1616,7 @@ void bigInt(char[] chars, int off, int len) {
         if (scale > 0) {
             numDigits--;
         }
-        if (numDigits > 38) {
+        if (numDigits > 128) {
             throw new JSONException("number too large : " + new String(chars, off, numDigits));
         }
 
@@ -1754,7 +1754,7 @@ void bigInt(byte[] chars, int off, int len) {
         if (scale > 0) {
             numDigits--;
         }
-        if (numDigits > 38) {
+        if (numDigits > 128) {
             throw new JSONException("number too large : " + new String(chars, off, numDigits));
         }
 

File: core/src/main/java/com/alibaba/fastjson2/JSONReaderStr.java
Patch:
@@ -3955,7 +3955,7 @@ void bigInt(int off, int len) {
         if (scale > 0) {
             numDigits--;
         }
-        if (numDigits > 38) {
+        if (numDigits > 128) {
             throw new JSONException("number too large : " + str.substring(off, off + numDigits));
         }
 

File: core/src/main/java/com/alibaba/fastjson2/annotation/JSONType.java
Patch:
@@ -24,4 +24,6 @@
     NamingStrategy naming() default NamingStrategy.CamelCase;
 
     boolean writeEnumAsJavaBean() default false;
+
+    String[] ignores() default {};
 }

File: core/src/main/java/com/alibaba/fastjson2/codec/BeanInfo.java
Patch:
@@ -21,4 +21,5 @@ public class BeanInfo {
     public boolean writeEnumAsJavaBean;
 
     public String namingStrategy;
+    public String[] ignores;
 }

File: core/src/main/java/com/alibaba/fastjson2/util/BeanUtils.java
Patch:
@@ -421,6 +421,7 @@ public static String getterName(String methodName, String namingStrategy) {
         int prefixLength = is ? 2 : 3;
 
         switch (namingStrategy) {
+            case "NeverUseThisValueExceptDefaultValue":
             case "CamelCase": {
                 char[] chars = new char[methodNameLength - prefixLength];
                 methodName.getChars(is ? 2 : 3, methodNameLength, chars, 0);

File: core/src/main/java/com/alibaba/fastjson2/writer/ObjectWriterCreatorASM.java
Patch:
@@ -229,6 +229,7 @@ public ObjectWriter createObjectWriter(
             fieldWriters = new ArrayList<>(fieldWriterMap.values());
         }
 
+        handleIgnores(beanInfo, fieldWriters);
         Collections.sort(fieldWriters);
 
         boolean match = true;

File: fastjson1_compatible/src/test/java/com/alibaba/json/bvt/issue_1100/Issue1146.java
Patch:
@@ -19,10 +19,10 @@ public static class Test {
         public boolean isXxx() {
             return true;
         }
-        public boolean getYyy() {
+        public Boolean getYyy() {
             return true;
         }
-        public boolean getZzz() {
+        public Boolean getZzz() {
             return true;
         }
     }

File: core/src/main/java/com/alibaba/fastjson2/JSONWriter.java
Patch:
@@ -1390,7 +1390,8 @@ public enum Feature {
         WriteEnumUsingToString                  (1 << 12),
         IgnoreErrorGetter                       (1 << 13),
         PrettyFormat                            (1 << 14),
-        ReferenceDetection                      (1 << 15)
+        ReferenceDetection                      (1 << 15),
+        WriteNameAsSymbol                       (1 << 16)
         ;
 
         public final long mask;

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest21.java
Patch:
@@ -80,7 +80,7 @@ public void test_1_x() throws Exception {
         bean.values2 = new HashMap<>();
         bean.values2.put(item, null);
 
-        byte[] bytes = JSONB.toBytes(bean, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ReferenceDetection, JSONWriter.Feature.WriteNulls);
+        byte[] bytes = JSONB.toBytes(bean, JSONWriter.Feature.WriteClassName, JSONWriter.Feature.FieldBased, JSONWriter.Feature.ReferenceDetection, JSONWriter.Feature.WriteNulls, JSONWriter.Feature.WriteNameAsSymbol);
 
         JSONBDump.dump(bytes);
 

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest41_dupRef.java
Patch:
@@ -32,6 +32,7 @@ public void test_1() throws Exception {
                 , JSONWriter.Feature.WriteNulls
                 , JSONWriter.Feature.NotWriteDefaultValue
                 , JSONWriter.Feature.NotWriteHashMapArrayListClassName
+                , JSONWriter.Feature.WriteNameAsSymbol
         );
 
 //        JSONBDump.dump(bytes);

File: core/src/test/java/com/alibaba/fastjson2/autoType/AutoTypeTest46_Pair.java
Patch:
@@ -23,6 +23,7 @@ public void test_1() throws Exception {
                 , JSONWriter.Feature.WriteNulls
                 , JSONWriter.Feature.NotWriteDefaultValue
                 , JSONWriter.Feature.NotWriteHashMapArrayListClassName
+                , JSONWriter.Feature.WriteNameAsSymbol
         );
 
         JSONBDump.dump(bytes);

File: core/src/test/java/com/alibaba/fastjson2/eishay/ParserTest.java
Patch:
@@ -107,7 +107,7 @@ public void test_1_jsonb() {
         MediaContent o = jr.read(MediaContent.class);
 
         JSONWriter jw = JSONWriter.ofJSONB();
-        jw.config(JSONWriter.Feature.FieldBased, JSONWriter.Feature.NotWriteDefaultValue);
+        jw.config(JSONWriter.Feature.FieldBased, JSONWriter.Feature.NotWriteDefaultValue, JSONWriter.Feature.WriteNameAsSymbol);
         jw.writeAny(o);
 //        System.out.println(jw);
 
@@ -144,7 +144,8 @@ public void test_1_jsonb_2() {
                         JSONWriter.Feature.WriteNulls,
                         JSONWriter.Feature.NotWriteDefaultValue,
                         JSONWriter.Feature.FieldBased,
-                        JSONWriter.Feature.IgnoreErrorGetter
+                        JSONWriter.Feature.IgnoreErrorGetter,
+                        JSONWriter.Feature.WriteNameAsSymbol
                 );
 //        System.out.println(jw);
 

