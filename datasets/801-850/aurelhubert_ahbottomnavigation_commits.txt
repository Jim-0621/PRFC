File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -951,7 +951,7 @@ private void updateNotifications(boolean updateStyle, int itemPosition) {
 			}
 
 			if (notificationItem.isEmpty() && notification.getText().length() > 0) {
-				notification.setText(String.valueOf(notificationItem.getText()));
+				notification.setText("");
 				if (animate) {
 					notification.animate()
 							.scaleX(0)

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -951,6 +951,7 @@ private void updateNotifications(boolean updateStyle, int itemPosition) {
 			}
 
 			if (notificationItem.isEmpty() && notification.getText().length() > 0) {
+				notification.setText(String.valueOf(notificationItem.getText()));
 				if (animate) {
 					notification.animate()
 							.scaleX(0)

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -351,7 +351,7 @@ public boolean hasImmersive() {
     private boolean isClassic() {
         return titleState != TitleState.ALWAYS_HIDE &&
 				titleState != TitleState.SHOW_WHEN_ACTIVE_FORCE &&
-				(items.size() == MIN_ITEMS || titleState == TitleState.ALWAYS_SHOW)
+				(items.size() == MIN_ITEMS || titleState == TitleState.ALWAYS_SHOW);
     }
 
 	/**

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -1222,6 +1222,7 @@ public void setCurrentItem(int position, boolean useCallback) {
 		}
 
 		if (titleState != TitleState.ALWAYS_HIDE &&
+				titleState != TitleState.SHOW_WHEN_ACTIVE_FORCE &&
 				(items.size() == MIN_ITEMS || titleState == TitleState.ALWAYS_SHOW)) {
 			updateItems(position, useCallback);
 		} else {

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -1205,6 +1205,7 @@ public void setCurrentItem(int position, boolean useCallback) {
 		}
 
 		if (titleState != TitleState.ALWAYS_HIDE &&
+				titleState != TitleState.SHOW_WHEN_ACTIVE_FORCE &&
 				(items.size() == MIN_ITEMS || titleState == TitleState.ALWAYS_SHOW)) {
 			updateItems(position, useCallback);
 		} else {

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -745,10 +745,10 @@ private void updateSmallItems(final int itemIndex, boolean useCallback) {
 					AHHelper.updateLeftMargin(notification, notificationInactiveMarginLeft, notificationActiveMarginLeft);
 					AHHelper.updateTopMargin(notification, notificationInactiveMarginTop, notificationActiveMarginTop);
 					AHHelper.updateTextColor(title, itemInactiveColor, itemActiveColor);
-					AHHelper.updateAlpha(title, 0, 1);
 					AHHelper.updateWidth(container, notSelectedItemWidth, selectedItemWidth);
 				}
 
+				AHHelper.updateAlpha(title, 0, 1);
 				AHHelper.updateDrawableColor(context, items.get(itemIndex).getDrawable(context), icon,
 						itemInactiveColor, itemActiveColor, forceTint);
 
@@ -812,13 +812,12 @@ public void onAnimationRepeat(Animator animation) {
 					AHHelper.updateLeftMargin(notification, notificationActiveMarginLeft, notificationInactiveMarginLeft);
 					AHHelper.updateTopMargin(notification, notificationActiveMarginTop, notificationInactiveMarginTop);
 					AHHelper.updateTextColor(title, itemActiveColor, itemInactiveColor);
-					AHHelper.updateAlpha(title, 1, 0);
 					AHHelper.updateWidth(container, selectedItemWidth, notSelectedItemWidth);
 				}
 
+				AHHelper.updateAlpha(title, 1, 0);
 				AHHelper.updateDrawableColor(context, items.get(currentItem).getDrawable(context), icon,
 						itemActiveColor, itemInactiveColor, forceTint);
-
 			}
 		}
 

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java
Patch:
@@ -181,6 +181,7 @@ public static void updateDrawableColor(final Context context, final Drawable dra
 			public void onAnimationUpdate(ValueAnimator animator) {
 				imageView.setImageDrawable(AHHelper.getTintDrawable(drawable,
 						(Integer) animator.getAnimatedValue(), forceTint));
+				imageView.requestLayout();
 			}
 		});
 		colorAnimation.start();

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -1151,7 +1151,7 @@ public void setCurrentItem(int position, boolean useCallback) {
 		}
 
 		if (titleState != TitleState.ALWAYS_HIDE &&
-				(items.size() == MIN_ITEMS || titleState == TitleState.SHOW_WHEN_ACTIVE)) {
+				(items.size() == MIN_ITEMS || titleState == TitleState.ALWAYS_SHOW)) {
 			updateItems(position, useCallback);
 		} else {
 			updateSmallItems(position, useCallback);

File: demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoActivity.java
Patch:
@@ -263,7 +263,8 @@ public void updateSelectedBackgroundVisibility(boolean isVisible) {
 	 * Show or hide selected item background
 	 */
 	public void setForceTitleHide(boolean forceTitleHide) {
-		bottomNavigation.setForceTitlesHide(forceTitleHide);
+		AHBottomNavigation.TitleState state = forceTitleHide ? AHBottomNavigation.TitleState.ALWAYS_HIDE : AHBottomNavigation.TitleState.ALWAYS_SHOW;
+		bottomNavigation.setTitleState(state);
 	}
 
 	/**

File: demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoActivity.java
Patch:
@@ -179,7 +179,7 @@ public void onAnimationRepeat(Animator animation) {
 			@Override
 			public void run() {
 				// Setting custom colors for notification
-				AHNotification notification = AHNotification.newBuilder()
+				AHNotification notification = new AHNotification.Builder()
 						.setText(":)")
 						.setBackgroundColor(ContextCompat.getColor(DemoActivity.this, R.color.color_notification_back))
 						.setTextColor(ContextCompat.getColor(DemoActivity.this, R.color.color_notification_text))

File: demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoActivity.java
Patch:
@@ -62,6 +62,7 @@ private void initUI() {
 			@Override
 			public boolean onTabSelected(int position, boolean wasSelected) {
 
+				currentFragment = adapter.getCurrentFragment();
 				if (wasSelected) {
 					currentFragment.refresh();
 					return true;
@@ -72,7 +73,6 @@ public boolean onTabSelected(int position, boolean wasSelected) {
 				}
 
 				viewPager.setCurrentItem(position, false);
-				currentFragment = adapter.getCurrentFragment();
 				currentFragment.willBeDisplayed();
 
 				if (position == 1) {

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -1163,7 +1163,7 @@ public void setNotificationTypeface(Typeface typeface) {
 	 * @param activeMargin
 	 * @param inactiveMargin
 	 */
-	public void setNotificationMarginLef(int activeMargin, int inactiveMargin) {
+	public void setNotificationMarginLeft(int activeMargin, int inactiveMargin) {
 		this.notificationActiveMarginLeft = activeMargin;
 		this.notificationInactiveMarginLeft = inactiveMargin;
 		createItems();

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -825,8 +825,7 @@ public void setBehaviorTranslationEnabled(boolean behaviorTranslationEnabled) {
 		this.behaviorTranslationEnabled = behaviorTranslationEnabled;
 		if (getParent() instanceof CoordinatorLayout) {
 			ViewGroup.LayoutParams params = getLayoutParams();
-			bottomNavigationBehavior = behaviorTranslationEnabled ?
-					new AHBottomNavigationBehavior<AHBottomNavigation>() : null;
+			bottomNavigationBehavior = new AHBottomNavigationBehavior<>(behaviorTranslationEnabled);
 			((CoordinatorLayout.LayoutParams) params).setBehavior(bottomNavigationBehavior);
 		}
 	}

File: demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoActivity.java
Patch:
@@ -41,7 +41,7 @@ private void initUI() {
 		bottomNavigation = (AHBottomNavigation) findViewById(R.id.bottom_navigation);
 		floatingActionButton = (FloatingActionButton) findViewById(R.id.floating_action_button);
 
-		AHBottomNavigationItem item1 = new AHBottomNavigationItem(R.string.tab_1, R.drawable.ic_maps_place, R.color.color_tab_1);
+		AHBottomNavigationItem item1 = new AHBottomNavigationItem(R.string.tab_1, R.drawable.ic_apps_black_24dp, R.color.color_tab_1);
 		AHBottomNavigationItem item2 = new AHBottomNavigationItem(R.string.tab_2, R.drawable.ic_maps_local_bar, R.color.color_tab_2);
 		AHBottomNavigationItem item3 = new AHBottomNavigationItem(R.string.tab_3, R.drawable.ic_maps_local_restaurant, R.color.color_tab_3);
 

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -823,7 +823,7 @@ public boolean isForceTint() {
 
 	/**
 	 * Set the force tint value
-	 * If forceTint = true, the tint is made with drawable.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);
+	 * If forceTint = true, the tint is made with drawable.setColorFilter(color, PorterDuff.Mode.SRC_IN);
 	 *
 	 * @param forceTint Boolean
 	 */

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHHelper.java
Patch:
@@ -35,7 +35,7 @@ public class AHHelper {
 	public static Drawable getTintDrawable(Drawable drawable, @ColorInt int color, boolean forceTint) {
 		if (forceTint) {
 			drawable.clearColorFilter();
-			drawable.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);
+			drawable.setColorFilter(color, PorterDuff.Mode.SRC_IN);
 			drawable.invalidateSelf();
 			return drawable;
 		}

File: demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoActivity.java
Patch:
@@ -75,7 +75,7 @@ public void onTabSelected(int position, boolean wasSelected) {
 		handler.postDelayed(new Runnable() {
 			@Override
 			public void run() {
-				bottomNavigation.setNotification(4, 1);
+				bottomNavigation.setNotification(16, 1);
 			}
 		}, 2000);
 	}

File: ahbottomnavigation/src/main/java/com/aurelhubert/ahbottomnavigation/AHBottomNavigation.java
Patch:
@@ -633,7 +633,7 @@ private void updateNotifications(boolean updateStyle) {
 	 * Add an item
 	 */
 	public void addItem(AHBottomNavigationItem item) {
-		if (this.items.size() >= MAX_ITEMS) {
+		if (this.items.size() > MAX_ITEMS) {
 			Log.w(TAG, "The items list should not have more than 5 items");
 		}
 		items.add(item);
@@ -644,7 +644,7 @@ public void addItem(AHBottomNavigationItem item) {
 	 * Add all items
 	 */
 	public void addItems(List<AHBottomNavigationItem> items) {
-		if (items.size() >= MAX_ITEMS || (this.items.size() + items.size()) > MAX_ITEMS) {
+		if (items.size() > MAX_ITEMS || (this.items.size() + items.size()) > MAX_ITEMS) {
 			Log.w(TAG, "The items list should not have more than 5 items");
 		}
 		this.items.addAll(items);

File: demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoAdapter.java
Patch:
@@ -1,4 +1,4 @@
-package aurelhubert.com.ahbottomnavigation;
+package com.aurelhubert.ahbottomnavigation.demo;
 
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;

File: demo/src/main/java/com/aurelhubert/ahbottomnavigation/demo/DemoFragment.java
Patch:
@@ -1,4 +1,4 @@
-package aurelhubert.com.ahbottomnavigation;
+package com.aurelhubert.ahbottomnavigation.demo;
 
 import android.app.Fragment;
 import android.os.Bundle;

File: demo/src/main/java/aurelhubert/com/ahbottomnavigation/DemoActivity.java
Patch:
@@ -87,7 +87,7 @@ public void updateBottomNavigationItems(boolean addItems) {
 
 		AHBottomNavigationItem item4 = new AHBottomNavigationItem(getString(R.string.tab_4),
 				ContextCompat.getDrawable(this, R.drawable.ic_maps_local_bar),
-				ContextCompat.getColor(this, R.color.color_tab_5));
+				ContextCompat.getColor(this, R.color.color_tab_4));
 		AHBottomNavigationItem item5 = new AHBottomNavigationItem(getString(R.string.tab_5),
 				ContextCompat.getDrawable(this, R.drawable.ic_maps_place),
 				ContextCompat.getColor(this, R.color.color_tab_5));

