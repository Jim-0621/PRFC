File: jme3-core/src/main/java/com/jme3/anim/Armature.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2024 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -111,7 +111,7 @@ private void createSkinningMatrices() {
 
     /**
      * Sets the JointModelTransform implementation
-     * Default is {@link MatrixJointModelTransform}
+     * Default is {@link SeparateJointModelTransform}
      *
      * @param modelTransformClass which implementation to use
      * @see JointModelTransform

File: jme3-core/src/main/java/com/jme3/material/TechniqueDef.java
Patch:
@@ -824,4 +824,4 @@ public TechniqueDef clone() throws CloneNotSupportedException {
 
         return clone;
     }
-}
+}
\ No newline at end of file

File: jme3-core/src/main/java/com/jme3/renderer/opengl/TextureUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2024 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -46,7 +46,7 @@
  * 
  * @author Kirill Vainer
  */
-final class TextureUtil {
+public final class TextureUtil {
 
     private static final Logger logger = Logger.getLogger(TextureUtil.class.getName());
 

File: jme3-core/src/main/java/com/jme3/texture/Image.java
Patch:
@@ -1299,7 +1299,6 @@ public void read(JmeImporter importer) throws IOException {
         multiSamples = capsule.readInt("multiSamples", 1);
         data = capsule.readByteBufferArrayList("data", null);
         colorSpace = capsule.readEnum("colorSpace", ColorSpace.class, null);
-
         if (mipMapSizes != null) {
             needGeneratedMips = false;
             mipsWereGenerated = true;

File: jme3-core/src/main/java/com/jme3/ui/Picture.java
Patch:
@@ -113,7 +113,7 @@ public float getWidth() {
      */
     public void setWidth(float width){
         this.width = width;
-        setLocalScale(new Vector3f(width, height, 1f));
+        setLocalScale(width, height, 1f);
     }
 
     /**
@@ -125,7 +125,7 @@ public void setWidth(float width){
      */
     public void setHeight(float height){
         this.height = height;
-        setLocalScale(new Vector3f(width, height, 1f));
+        setLocalScale(width, height, 1f);
     }
 
     /**

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -968,4 +968,4 @@ public void applyToTexture(final Texture texture) {
             textureOption.applyToTexture(value, texture);
         }
     }
-}
+}
\ No newline at end of file

File: jme3-effects/src/main/java/com/jme3/post/filters/DepthOfFieldFilter.java
Patch:
@@ -243,4 +243,4 @@ public void read(JmeImporter im) throws IOException {
         focusRange = ic.readFloat("focusRange", 10f);
         debugUnfocus = ic.readBoolean("debugUnfocus", false);
     }
-}
+}
\ No newline at end of file

File: jme3-examples/src/main/java/jme3test/batching/TestBatchNode.java
Patch:
@@ -45,7 +45,7 @@
 import com.jme3.scene.debug.WireFrustum;
 import com.jme3.scene.shape.Box;
 import com.jme3.system.NanoTimer;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 /**
  * A test to demonstrate the usage and functionality of the {@link BatchNode}
@@ -96,8 +96,8 @@ public void simpleInitApp() {
         cube2 = new Geometry("cube2", box);
         cube2.setMaterial(mat);
 
-        TangentBinormalGenerator.generate(cube);
-        TangentBinormalGenerator.generate(cube2);
+        MikktspaceTangentGenerator.generate(cube);
+        MikktspaceTangentGenerator.generate(cube2);
 
         batch.attachChild(cube);
         //  batch.attachChild(cube2);

File: jme3-examples/src/main/java/jme3test/effect/TestEverything.java
Patch:
@@ -48,7 +48,7 @@
 import com.jme3.shadow.DirectionalLightShadowRenderer;
 import com.jme3.texture.Texture;
 import com.jme3.util.SkyFactory;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestEverything extends SimpleApplication {
 
@@ -122,7 +122,7 @@ public void setupLighting(){
     public void setupFloor(){
         Material mat = assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m");
         Box floor = new Box(50, 1f, 50);
-        TangentBinormalGenerator.generate(floor);
+        MikktspaceTangentGenerator.generate(floor);
         floor.scaleTextureCoordinates(new Vector2f(5, 5));
         Geometry floorGeom = new Geometry("Floor", floor);
         floorGeom.setMaterial(mat);

File: jme3-examples/src/main/java/jme3test/helloworld/HelloMaterial.java
Patch:
@@ -43,7 +43,7 @@
 import com.jme3.scene.shape.Box;
 import com.jme3.scene.shape.Sphere;
 import com.jme3.texture.Texture;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 /** Sample 6 - how to give an object's surface a material and texture.
  * How to make objects transparent. How to make bumpy and shiny surfaces.  */
@@ -81,7 +81,7 @@ public void simpleInitApp() {
     Sphere sphereMesh = new Sphere(32,32, 2f);
     Geometry sphereGeo = new Geometry("Shiny rock", sphereMesh);
     sphereMesh.setTextureMode(Sphere.TextureMode.Projected); // better quality on spheres
-    TangentBinormalGenerator.generate(sphereMesh);           // for lighting effect
+    MikktspaceTangentGenerator.generate(sphereMesh); // for lighting effect
     Material sphereMat = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
     sphereMat.setTexture("DiffuseMap", assetManager.loadTexture("Textures/Terrain/Pond/Pond.jpg"));
     sphereMat.setTexture("NormalMap", assetManager.loadTexture("Textures/Terrain/Pond/Pond_normal.png"));

File: jme3-examples/src/main/java/jme3test/light/TestDirectionalLightShadow.java
Patch:
@@ -58,7 +58,7 @@
 import com.jme3.texture.Texture.WrapMode;
 import com.jme3.util.SkyFactory;
 import com.jme3.util.SkyFactory.EnvMapType;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestDirectionalLightShadow extends SimpleApplication implements ActionListener, AnalogListener {
 
@@ -108,8 +108,8 @@ public void loadScene() {
         obj[0].setShadowMode(ShadowMode.CastAndReceive);
         obj[1] = new Geometry("cube", new Box(1.0f, 1.0f, 1.0f));
         obj[1].setShadowMode(ShadowMode.CastAndReceive);
-        TangentBinormalGenerator.generate(obj[1]);
-        TangentBinormalGenerator.generate(obj[0]);
+        MikktspaceTangentGenerator.generate(obj[1]);
+        MikktspaceTangentGenerator.generate(obj[0]);
 
         Spatial t = obj[0].clone(false);
         t.setLocalScale(10f);

File: jme3-examples/src/main/java/jme3test/light/TestShadowsPerf.java
Patch:
@@ -48,7 +48,7 @@
 import com.jme3.scene.shape.Sphere;
 import com.jme3.shadow.DirectionalLightShadowRenderer;
 import com.jme3.shadow.EdgeFilteringMode;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestShadowsPerf extends SimpleApplication {
 
@@ -84,7 +84,7 @@ public void simpleInitApp() {
         Sphere sphMesh = new Sphere(32, 32, 1);
         sphMesh.setTextureMode(Sphere.TextureMode.Projected);
         sphMesh.updateGeometry(32, 32, 1, false, false);
-        TangentBinormalGenerator.generate(sphMesh);
+        MikktspaceTangentGenerator.generate(sphMesh);
 
         sphere = new Geometry("Rock Ball", sphMesh);
         sphere.setLocalTranslation(0, 5, 0);

File: jme3-examples/src/main/java/jme3test/light/TestSimpleLighting.java
Patch:
@@ -43,7 +43,7 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.shape.Sphere;
 import com.jme3.util.MaterialDebugAppState;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestSimpleLighting extends SimpleApplication {
 
@@ -59,7 +59,7 @@ public static void main(String[] args){
     @Override
     public void simpleInitApp() {
         Geometry teapot = (Geometry) assetManager.loadModel("Models/Teapot/Teapot.obj");
-        TangentBinormalGenerator.generate(teapot.getMesh(), true);
+        MikktspaceTangentGenerator.generate(teapot.getMesh());
 
         teapot.setLocalScale(2f);
         Material mat = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");

File: jme3-examples/src/main/java/jme3test/light/TestSpotLight.java
Patch:
@@ -43,7 +43,7 @@
 import com.jme3.scene.shape.Box;
 import com.jme3.scene.shape.Sphere;
 import com.jme3.texture.Texture.WrapMode;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestSpotLight extends SimpleApplication {
 
@@ -101,7 +101,7 @@ public void setupFloor(){
         
         
         Box floor = new Box(50, 1f, 50);
-        TangentBinormalGenerator.generate(floor);
+        MikktspaceTangentGenerator.generate(floor);
         floor.scaleTextureCoordinates(new Vector2f(5, 5));
         Geometry floorGeom = new Geometry("Floor", floor);
         floorGeom.setMaterial(mat);
@@ -120,7 +120,7 @@ public void setupSignpost(){
         signpost.setLocalTranslation(12, 3.5f, 30);
         signpost.setLocalScale(4);
         signpost.setShadowMode(ShadowMode.CastAndReceive);
-        TangentBinormalGenerator.generate(signpost);
+        MikktspaceTangentGenerator.generate(signpost);
         rootNode.attachChild(signpost);
     }
 

File: jme3-examples/src/main/java/jme3test/light/TestSpotLightShadows.java
Patch:
@@ -49,7 +49,7 @@
 import com.jme3.shadow.SpotLightShadowFilter;
 import com.jme3.shadow.SpotLightShadowRenderer;
 import com.jme3.texture.Texture.WrapMode;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestSpotLightShadows extends SimpleApplication {
 
@@ -149,7 +149,7 @@ public void setupFloor() {
 
 
         Box floor = new Box(50, 1f, 50);
-        TangentBinormalGenerator.generate(floor);
+        MikktspaceTangentGenerator.generate(floor);
         floor.scaleTextureCoordinates(new Vector2f(5, 5));
         Geometry floorGeom = new Geometry("Floor", floor);
         floorGeom.setMaterial(mat);
@@ -166,7 +166,7 @@ public void setupSignpost() {
         signpost.setLocalTranslation(12, 3.5f, 30);
         signpost.setLocalScale(4);
         signpost.setShadowMode(ShadowMode.CastAndReceive);
-        TangentBinormalGenerator.generate(signpost);
+        MikktspaceTangentGenerator.generate(signpost);
         rootNode.attachChild(signpost);
     }
 

File: jme3-examples/src/main/java/jme3test/light/TestTangentCube.java
Patch:
@@ -40,7 +40,7 @@
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.shape.Box;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 /**
  *
@@ -57,7 +57,7 @@ public static void main(String... args) {
     public void simpleInitApp() {
         Box aBox = new Box(1, 1, 1);
         Geometry aGeometry = new Geometry("Box", aBox);
-        TangentBinormalGenerator.generate(aBox);
+        MikktspaceTangentGenerator.generate(aBox);
 
         Material aMaterial = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
         aMaterial.setTexture("DiffuseMap",

File: jme3-examples/src/main/java/jme3test/light/TestTangentSpace.java
Patch:
@@ -44,6 +44,7 @@
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
 import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.TangentUtils;
 import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 /**
@@ -120,7 +121,7 @@ private void initView() {
     private void createDebugTangents(Geometry geom) {
         Geometry debug = new Geometry(
                 "Debug " + geom.getName(),
-                TangentBinormalGenerator.genTbnLines(geom.getMesh(), 0.8f)
+                TangentUtils.genTbnLines(geom.getMesh(), 0.8f)
         );
         Material debugMat = assetManager.loadMaterial("Common/Materials/VertexColor.j3m");
         debug.setMaterial(debugMat);

File: jme3-examples/src/main/java/jme3test/light/TestTransparentShadow.java
Patch:
@@ -50,7 +50,7 @@
 import com.jme3.shadow.CompareMode;
 import com.jme3.shadow.DirectionalLightShadowRenderer;
 import com.jme3.shadow.EdgeFilteringMode;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestTransparentShadow extends SimpleApplication {
 
@@ -72,7 +72,7 @@ public void simpleInitApp() {
                 new Vector3f(-10, 0, -10)
         );
         rm.scaleTextureCoordinates(Vector2f.UNIT_XY.mult(10));
-        TangentBinormalGenerator.generate(rm);
+        MikktspaceTangentGenerator.generate(rm);
 
         Geometry geom = new Geometry("floor", rm);
         Material mat = assetManager.loadMaterial("Textures/Terrain/Pond/Pond.j3m");

File: jme3-examples/src/main/java/jme3test/light/TestTwoSideLighting.java
Patch:
@@ -44,7 +44,7 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.shape.Quad;
 import com.jme3.scene.shape.Sphere;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 /**
  * Checks two-sided lighting capability.
@@ -80,7 +80,7 @@ public void simpleInitApp() {
         
         quadGeom.setMaterial(mat1);
         // SimpleBump material requires tangents.
-        TangentBinormalGenerator.generate(quadGeom);
+        MikktspaceTangentGenerator.generate(quadGeom);
         rootNode.attachChild(quadGeom);
         
         Geometry teapot = (Geometry) assetManager.loadModel("Models/Teapot/Teapot.obj");

File: jme3-examples/src/main/java/jme3test/material/TestBumpModel.java
Patch:
@@ -42,7 +42,7 @@
 import com.jme3.scene.Spatial;
 import com.jme3.scene.plugins.ogre.OgreMeshKey;
 import com.jme3.scene.shape.Sphere;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestBumpModel extends SimpleApplication {
 
@@ -59,7 +59,7 @@ public static void main(String[] args){
     public void simpleInitApp() {
         Spatial signpost = assetManager.loadAsset(new OgreMeshKey("Models/Sign Post/Sign Post.mesh.xml"));
         signpost.setMaterial(assetManager.loadMaterial("Models/Sign Post/Sign Post.j3m"));
-        TangentBinormalGenerator.generate(signpost);
+        MikktspaceTangentGenerator.generate(signpost);
         rootNode.attachChild(signpost);
 
         lightMdl = new Geometry("Light", new Sphere(10, 10, 0.1f));

File: jme3-examples/src/main/java/jme3test/material/TestNormalMapping.java
Patch:
@@ -41,7 +41,7 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.Sphere;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestNormalMapping extends SimpleApplication {
 
@@ -59,7 +59,7 @@ public void simpleInitApp() {
         Sphere sphMesh = new Sphere(32, 32, 1);
         sphMesh.setTextureMode(Sphere.TextureMode.Projected);
         sphMesh.updateGeometry(32, 32, 1, false, false);
-        TangentBinormalGenerator.generate(sphMesh);
+        MikktspaceTangentGenerator.generate(sphMesh);
 
         Geometry sphere = new Geometry("Rock Ball", sphMesh);
         Material mat = assetManager.loadMaterial("Textures/Terrain/Pond/Pond.j3m");

File: jme3-examples/src/main/java/jme3test/material/TestParallax.java
Patch:
@@ -44,7 +44,7 @@
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.RectangleMesh;
 import com.jme3.util.SkyFactory;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestParallax extends SimpleApplication {
 
@@ -77,7 +77,7 @@ public void setupFloor() {
         rm.scaleTextureCoordinates(new Vector2f(10, 10));
 
         Geometry floorGeom = new Geometry("floorGeom", rm);
-        TangentBinormalGenerator.generate(floorGeom);
+        MikktspaceTangentGenerator.generate(floorGeom);
         floorGeom.setMaterial(mat);
 
         rootNode.attachChild(floorGeom);
@@ -86,7 +86,7 @@ public void setupFloor() {
     public void setupSignpost() {
         Spatial signpost = assetManager.loadModel("Models/Sign Post/Sign Post.mesh.xml");
         Material matSp = assetManager.loadMaterial("Models/Sign Post/Sign Post.j3m");
-        TangentBinormalGenerator.generate(signpost);
+        MikktspaceTangentGenerator.generate(signpost);
         signpost.setMaterial(matSp);
         signpost.rotate(0, FastMath.HALF_PI, 0);
         signpost.setLocalTranslation(12, 23.5f, 30);

File: jme3-examples/src/main/java/jme3test/material/TestParallaxPBR.java
Patch:
@@ -44,7 +44,7 @@
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.RectangleMesh;
 import com.jme3.util.SkyFactory;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestParallaxPBR extends SimpleApplication {
 
@@ -80,7 +80,7 @@ public void setupFloor() {
         rm.scaleTextureCoordinates(new Vector2f(10, 10));
 
         Geometry floorGeom = new Geometry("floorGeom", rm);
-        TangentBinormalGenerator.generate(floorGeom);
+        MikktspaceTangentGenerator.generate(floorGeom);
         //floorGeom.setLocalScale(100);
 
         floorGeom.setMaterial(mat);
@@ -90,7 +90,7 @@ public void setupFloor() {
     public void setupSignpost() {
         Spatial signpost = assetManager.loadModel("Models/Sign Post/Sign Post.mesh.xml");
         Material mat = assetManager.loadMaterial("Models/Sign Post/Sign Post.j3m");
-        TangentBinormalGenerator.generate(signpost);
+        MikktspaceTangentGenerator.generate(signpost);
         signpost.setMaterial(mat);
         signpost.rotate(0, FastMath.HALF_PI, 0);
         signpost.setLocalTranslation(12, 23.5f, 30);

File: jme3-examples/src/main/java/jme3test/material/TestSimpleBumps.java
Patch:
@@ -42,7 +42,7 @@
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.Quad;
 import com.jme3.scene.shape.Sphere;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 // phong cutoff for light to normal angle > 90?
 public class TestSimpleBumps extends SimpleApplication {
@@ -63,7 +63,7 @@ public void simpleInitApp() {
         Geometry sphere = new Geometry("Rock Ball", quadMesh);
         Material mat = assetManager.loadMaterial("Textures/BumpMapTest/SimpleBump.j3m");
         sphere.setMaterial(mat);
-        TangentBinormalGenerator.generate(sphere);
+        MikktspaceTangentGenerator.generate(sphere);
         rootNode.attachChild(sphere);
 
         lightMdl = new Geometry("Light", new Sphere(10, 10, 0.1f));

File: jme3-examples/src/main/java/jme3test/material/TestUnshadedModel.java
Patch:
@@ -8,7 +8,7 @@
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.shape.Sphere;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestUnshadedModel extends SimpleApplication {
 
@@ -22,7 +22,7 @@ public void simpleInitApp() {
         Sphere sphMesh = new Sphere(32, 32, 1);
         sphMesh.setTextureMode(Sphere.TextureMode.Projected);
         sphMesh.updateGeometry(32, 32, 1, false, false);
-        TangentBinormalGenerator.generate(sphMesh);
+        MikktspaceTangentGenerator.generate(sphMesh);
 
         Geometry sphere = new Geometry("Rock Ball", sphMesh);
         Material mat = assetManager.loadMaterial("Textures/Terrain/Pond/Pond.j3m");

File: jme3-examples/src/main/java/jme3test/model/anim/TestAnimationFactory.java
Patch:
@@ -12,7 +12,7 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Node;
 import com.jme3.scene.shape.Box;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestAnimationFactory extends SimpleApplication {
 
@@ -45,7 +45,7 @@ public void simpleInitApp() {
         childModel.setLocalTranslation(2, 2, 2);
         childModel.attachChild(childGeom);
         model.attachChild(childModel);
-        TangentBinormalGenerator.generate(model);
+        MikktspaceTangentGenerator.generate(model);
 
         // Construct a complex animation using AnimFactory:
         // 6 seconds in duration, named "anim", running at 25 frames per second

File: jme3-examples/src/main/java/jme3test/post/TestLightScattering.java
Patch:
@@ -45,7 +45,7 @@
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
 import com.jme3.util.SkyFactory;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestLightScattering extends SimpleApplication {
 
@@ -66,7 +66,7 @@ public void simpleInitApp() {
         flyCam.setMoveSpeed(10);
         Material mat = assetManager.loadMaterial("Textures/Terrain/Rocky/Rocky.j3m");
         Spatial scene = assetManager.loadModel("Models/Terrain/Terrain.mesh.xml");
-        TangentBinormalGenerator.generate(((Geometry)((Node)scene).getChild(0)).getMesh());
+        MikktspaceTangentGenerator.generate(((Geometry) ((Node) scene).getChild(0)).getMesh());
         scene.setMaterial(mat);
         scene.setShadowMode(ShadowMode.CastAndReceive);
         scene.setLocalScale(400);

File: jme3-examples/src/main/java/jme3test/post/TestPostFilters.java
Patch:
@@ -48,7 +48,7 @@
 import com.jme3.texture.Texture;
 import com.jme3.util.SkyFactory;
 import com.jme3.util.SkyFactory.EnvMapType;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestPostFilters extends SimpleApplication implements ActionListener {
 
@@ -111,7 +111,7 @@ public void setupLighting() {
     public void setupFloor() {
         Material mat = assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m");
         Box floor = new Box(50, 1f, 50);
-        TangentBinormalGenerator.generate(floor);
+        MikktspaceTangentGenerator.generate(floor);
         floor.scaleTextureCoordinates(new Vector2f(5, 5));
         Geometry floorGeom = new Geometry("Floor", floor);
         floorGeom.setMaterial(mat);

File: jme3-examples/src/main/java/jme3test/post/TestTransparentSSAO.java
Patch:
@@ -12,7 +12,7 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.RectangleMesh;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestTransparentSSAO extends SimpleApplication {
 
@@ -42,7 +42,7 @@ public void simpleInitApp() {
         geom.setMaterial(mat);
 
         geom.setShadowMode(ShadowMode.Receive);
-        TangentBinormalGenerator.generate(geom);
+        MikktspaceTangentGenerator.generate(geom);
         rootNode.attachChild(geom);
 
         // create the geometry and attach it

File: jme3-plugins/src/xml/java/com/jme3/export/xml/DOMSerializer.java
Patch:
@@ -46,7 +46,9 @@
  * @author Brett McLaughlin, Justin Edelson - Original creation for "Java and XML" book.
  * @author Doug Daniels (dougnukem) - adjustments for XML formatting
  * @version $Revision: 4207 $, $Date: 2009-03-29 11:19:16 -0400 (Sun, 29 Mar 2009) $
+ * @deprecated This class was only used in XMLExporter and has been replaced by javax.xml.transform.Transformer
  */
+@Deprecated
 public class DOMSerializer {
 
     /** The encoding to use for output (default is UTF-8) */

File: jme3-plugins/src/xml/java/com/jme3/export/xml/XMLImporter.java
Patch:
@@ -80,8 +80,9 @@ public Object load(AssetInfo info) throws IOException {
         try {
             return load(in);
         } finally {
-            if (in != null)
+            if (in != null) {
                 in.close();
+            }
         }
     }
     
@@ -115,5 +116,4 @@ public InputCapsule getCapsule(Savable id) {
     public static XMLImporter getInstance() {
         return new XMLImporter();
     }
-
 }

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -56,7 +56,7 @@
 import com.jme3.terrain.geomipmap.picking.BresenhamTerrainPicker;
 import com.jme3.terrain.geomipmap.picking.TerrainPickData;
 import com.jme3.terrain.geomipmap.picking.TerrainPicker;
-import com.jme3.util.TangentBinormalGenerator;
+import com.jme3.util.TangentUtils;
 import com.jme3.util.clone.Cloner;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -677,7 +677,7 @@ public void generateDebugTangents(Material mat) {
                 ((TerrainQuad)child).generateDebugTangents(mat);
             } else if (child instanceof TerrainPatch) {
                 Geometry debug = new Geometry( "Debug " + name,
-                    TangentBinormalGenerator.genTbnLines( ((TerrainPatch)child).getMesh(), 0.8f));
+                        TangentUtils.genTbnLines(((TerrainPatch) child).getMesh(), 0.8f));
                 attachChild(debug);
                 debug.setLocalTranslation(child.getLocalTranslation());
                 debug.setCullHint(CullHint.Never);

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikktspaceTangentGenerator.java
Patch:
@@ -34,6 +34,7 @@
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.*;
+import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.util.*;
 
 import java.util.ArrayList;

File: jme3-core/src/main/java/com/jme3/anim/Armature.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2024 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -111,7 +111,7 @@ private void createSkinningMatrices() {
 
     /**
      * Sets the JointModelTransform implementation
-     * Default is {@link MatrixJointModelTransform}
+     * Default is {@link SeparateJointModelTransform}
      *
      * @param modelTransformClass which implementation to use
      * @see JointModelTransform

File: jme3-plugins/src/xml/java/com/jme3/export/xml/DOMSerializer.java
Patch:
@@ -46,7 +46,9 @@
  * @author Brett McLaughlin, Justin Edelson - Original creation for "Java and XML" book.
  * @author Doug Daniels (dougnukem) - adjustments for XML formatting
  * @version $Revision: 4207 $, $Date: 2009-03-29 11:19:16 -0400 (Sun, 29 Mar 2009) $
+ * @deprecated This class was only used in XMLExporter and has been replaced by javax.xml.transform.Transformer
  */
+@Deprecated
 public class DOMSerializer {
 
     /** The encoding to use for output (default is UTF-8) */

File: jme3-plugins/src/xml/java/com/jme3/export/xml/XMLImporter.java
Patch:
@@ -80,8 +80,9 @@ public Object load(AssetInfo info) throws IOException {
         try {
             return load(in);
         } finally {
-            if (in != null)
+            if (in != null) {
                 in.close();
+            }
         }
     }
     
@@ -115,5 +116,4 @@ public InputCapsule getCapsule(Savable id) {
     public static XMLImporter getInstance() {
         return new XMLImporter();
     }
-
 }

File: jme3-core/src/main/java/com/jme3/material/TechniqueDef.java
Patch:
@@ -824,4 +824,4 @@ public TechniqueDef clone() throws CloneNotSupportedException {
 
         return clone;
     }
-}
+}
\ No newline at end of file

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -968,4 +968,4 @@ public void applyToTexture(final Texture texture) {
             textureOption.applyToTexture(value, texture);
         }
     }
-}
+}
\ No newline at end of file

File: jme3-effects/src/main/java/com/jme3/post/filters/DepthOfFieldFilter.java
Patch:
@@ -243,4 +243,4 @@ public void read(JmeImporter im) throws IOException {
         focusRange = ic.readFloat("focusRange", 10f);
         debugUnfocus = ic.readBoolean("debugUnfocus", false);
     }
-}
+}
\ No newline at end of file

File: jme3-plugins-json/src/main/java/com/jme3/plugins/json/JsonElement.java
Patch:
@@ -98,5 +98,4 @@ public interface JsonElement {
      * @return the casted JsonElement
      */
     public <T extends JsonElement> T autoCast();
-
 }

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/CustomContentManager.java
Patch:
@@ -31,8 +31,8 @@
  */
 package com.jme3.scene.plugins.gltf;
 
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
+import com.jme3.plugins.json.JsonArray;
+import com.jme3.plugins.json.JsonElement;
 import com.jme3.asset.AssetLoadException;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/ExtensionLoader.java
Patch:
@@ -31,7 +31,7 @@
  */
 package com.jme3.scene.plugins.gltf;
 
-import com.google.gson.JsonElement;
+import com.jme3.plugins.json.JsonElement;
 import java.io.IOException;
 
 /**

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/ExtrasLoader.java
Patch:
@@ -31,7 +31,7 @@
  */
 package com.jme3.scene.plugins.gltf;
 
-import com.google.gson.JsonElement;
+import com.jme3.plugins.json.JsonElement;
 
 /**
  * Interface to handle a glTF extra.

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/LightsPunctualExtensionLoader.java
Patch:
@@ -31,9 +31,9 @@
  */
 package com.jme3.scene.plugins.gltf;
 
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
+import com.jme3.plugins.json.JsonArray;
+import com.jme3.plugins.json.JsonElement;
+import com.jme3.plugins.json.JsonObject;
 import com.jme3.asset.AssetLoadException;
 import com.jme3.light.DirectionalLight;
 import com.jme3.light.Light;

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/PBREmissiveStrengthExtensionLoader.java
Patch:
@@ -32,7 +32,7 @@
 package com.jme3.scene.plugins.gltf;
 
 import com.jme3.asset.AssetKey;
-import com.google.gson.JsonElement;
+import com.jme3.plugins.json.JsonElement;
 import java.io.IOException;
 
 /**

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/PBRSpecGlossExtensionLoader.java
Patch:
@@ -34,7 +34,7 @@
 import com.jme3.asset.AssetKey;
 
 import java.io.IOException;
-import com.google.gson.JsonElement;
+import com.jme3.plugins.json.JsonElement;
 import static com.jme3.scene.plugins.gltf.GltfUtils.getAsColor;
 import static com.jme3.scene.plugins.gltf.GltfUtils.getAsFloat;
 

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/TextureTransformExtensionLoader.java
Patch:
@@ -31,9 +31,9 @@
  */
 package com.jme3.scene.plugins.gltf;
 
-import com.google.gson.JsonArray;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
+import com.jme3.plugins.json.JsonArray;
+import com.jme3.plugins.json.JsonElement;
+import com.jme3.plugins.json.JsonObject;
 import com.jme3.asset.AssetLoadException;
 import com.jme3.math.Matrix3f;
 import com.jme3.math.Vector3f;

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/UnlitExtensionLoader.java
Patch:
@@ -31,7 +31,7 @@
  */
 package com.jme3.scene.plugins.gltf;
 
-import com.google.gson.JsonElement;
+import com.jme3.plugins.json.JsonElement;
 import com.jme3.asset.AssetKey;
 
 /**

File: jme3-examples/src/main/java/jme3test/post/TestBloom.java
Patch:
@@ -75,8 +75,6 @@ public void simpleInitApp() {
         mat.setColor("Diffuse", ColorRGBA.Yellow.mult(0.2f));
         mat.setColor("Specular", ColorRGBA.Yellow.mult(0.8f));
 
-    
-
 
         Material matSoil = new Material(assetManager,"Common/MatDefs/Light/Lighting.j3md");
         matSoil.setFloat("Shininess", 15f);

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglCanvas.java
Patch:
@@ -497,7 +497,6 @@ protected void createContext(AppSettings settings)  {
         // This will activate the "effective data" scrubber.
         showGLDataEffective.set(settings.getBoolean("GLDataEffectiveDebug"));
         
-        glData.depthSize = settings.getBitsPerPixel();
         glData.alphaSize = settings.getAlphaBits();
         glData.sRGB = settings.isGammaCorrection(); // Not compatible with very old devices
         

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -1692,7 +1692,7 @@ public void set(RenderState state) {
      * This method is more precise than {@link #set(com.jme3.material.RenderState)}.
      * @param state state to copy from
      */
-    public void copyFrom(RenderState state) {
+    public RenderState copyFrom(RenderState state) {
         this.applyBlendMode = state.applyBlendMode;
         this.applyColorWrite = state.applyColorWrite;
         this.applyCullMode = state.applyCullMode;
@@ -1734,6 +1734,7 @@ public void copyFrom(RenderState state) {
         this.sfactorRGB = state.sfactorRGB;
         this.stencilTest = state.stencilTest;
         this.wireframe = state.wireframe;
+        return this;
     }
 
     @Override

File: jme3-desktop/src/main/java/com/jme3/input/awt/AwtKeyInput.java
Patch:
@@ -39,6 +39,7 @@
 import java.awt.event.KeyListener;
 import java.util.ArrayList;
 import java.util.BitSet;
+import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -53,10 +54,10 @@ public class AwtKeyInput implements KeyInput, KeyListener {
 
     private static final Logger logger = Logger.getLogger(AwtKeyInput.class.getName());
     
-    private final ArrayList<KeyInputEvent> eventQueue = new ArrayList<>();
+    private final List<KeyInputEvent> eventQueue = new ArrayList<>();
     private RawInputListener listener;
     private Component component;
-    private BitSet keyStateSet = new BitSet(0xFF);
+    private final BitSet keyStateSet = new BitSet(0xFF);
     
     public AwtKeyInput(){
     }

File: jme3-desktop/src/main/java/com/jme3/input/awt/AwtMouseInput.java
Patch:
@@ -64,8 +64,8 @@ public class AwtMouseInput implements MouseInput, MouseListener, MouseWheelListe
 
     private Component component;
 
-    private final ArrayList<MouseButtonEvent> eventQueue = new ArrayList<>();
-    private final ArrayList<MouseButtonEvent> eventQueueCopy = new ArrayList<>();
+    private final java.util.List<MouseButtonEvent> eventQueue = new ArrayList<>();
+    private final java.util.List<MouseButtonEvent> eventQueueCopy = new ArrayList<>();
 
     private int lastEventX;
     private int lastEventY;

File: jme3-lwjgl3/src/main/java/com/jme3/util/LWJGLBufferAllocator.java
Patch:
@@ -210,7 +210,7 @@ long getAddress(final Buffer buffer) {
 
     @Override
     public ByteBuffer allocate(final int size) {
-        final Long address = MemoryUtil.nmemAlloc(size);
+        final Long address = MemoryUtil.nmemCalloc(size, 1);
         final ByteBuffer byteBuffer = MemoryUtil.memByteBuffer(address, size);
         DEALLOCATORS.put(address, createDeallocator(address, byteBuffer));
         return byteBuffer;

File: jme3-examples/src/main/java/jme3test/terrain/PBRTerrainAdvancedTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2024 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -444,7 +444,7 @@ private void setUpLights() {
         rootNode.addLight(directionalLight);
 
         ambientLight = new AmbientLight();
-        directionalLight.setColor(ColorRGBA.White);
+        ambientLight.setColor(ColorRGBA.White);
         rootNode.addLight(ambientLight);
     }
 

File: jme3-examples/src/main/java/jme3test/terrain/PBRTerrainTest.java
Patch:
@@ -1,7 +1,7 @@
 package jme3test.terrain;
 
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2024 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -352,7 +352,7 @@ private void setUpLights() {
         rootNode.addLight(directionalLight);
 
         ambientLight = new AmbientLight();
-        directionalLight.setColor(ColorRGBA.White);
+        ambientLight.setColor(ColorRGBA.White);
         rootNode.addLight(ambientLight);
     }
 

File: jme3-effects/src/main/java/com/jme3/post/filters/DepthOfFieldFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -227,7 +227,7 @@ public void write(JmeExporter ex) throws IOException {
         super.write(ex);
         OutputCapsule oc = ex.getCapsule(this);
         oc.write(blurScale, "blurScale", 1f);
-        oc.write(blurScale, "blurThreshold", 0.2f);
+        oc.write(blurThreshold, "blurThreshold", 0.2f);
         oc.write(focusDistance, "focusDistance", 50f);
         oc.write(focusRange, "focusRange", 10f);
         oc.write(debugUnfocus, "debugUnfocus", false); // strange to write this I guess

File: jme3-effects/src/main/java/com/jme3/water/WaterFilter.java
Patch:
@@ -1045,7 +1045,7 @@ public void setUseFoam(boolean useFoam) {
     public void setCausticsTexture(Texture2D causticsTexture) {
         this.causticsTexture = causticsTexture;
         if (material != null) {
-            material.setTexture("causticsMap", causticsTexture);
+            material.setTexture("CausticsMap", causticsTexture);
         }
     }
 

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -1767,8 +1767,6 @@ public String toString() {
      * {@code Front} and {@code Front} becomes {@code Back}.
      * <p>{@code FrontAndBack} and {@code Off} are unaffected. This is important
      * for flipping the cull mode when normal vectors are found to be backward.
-     * @param cull
-     * @return flipped cull mode
      */
     public void flipFaceCull() {
         switch (cullMode) {

File: jme3-core/src/main/java/com/jme3/scene/instancing/InstancedGeometry.java
Patch:
@@ -277,7 +277,7 @@ private void swap(int idx1, int idx2) {
     }
 
     /**
-     * @Deprecated use {@link #updateInstances(com.jme3.renderer.Camera)
+     * @deprecated use {@link #updateInstances(com.jme3.renderer.Camera)}
      */
     public void updateInstances() {
         updateInstances(cam);

File: jme3-core/src/main/java/com/jme3/util/res/ResourceLoader.java
Patch:
@@ -68,7 +68,7 @@ public interface ResourceLoader {
      * 
      * @param path
      *            The resource name
-     * @return An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
+     * @return An enumeration of {@link java.net.URL <code>URL</code>} objects for
      *         the resource. If no resources could be found, the enumeration
      *         will be empty.
      *

File: jme3-core/src/main/java/com/jme3/util/res/Resources.java
Patch:
@@ -166,7 +166,7 @@ public static InputStream getResourceAsStream(String path, Class<?> parent) {
      *            The resource name
      *
      * 
-     * @return An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
+     * @return An enumeration of {@link java.net.URL <code>URL</code>} objects for
      *         the resource. If no resources could be found, the enumeration
      *         will be empty.
      *

File: jme3-examples/src/main/java/jme3test/animation/TestIssue2076.java
Patch:
@@ -59,7 +59,7 @@ public class TestIssue2076 extends SimpleApplication {
      *
      * @param args array of command-line arguments (not null)
      */
-    public static void main(String... argv) {
+    public static void main(String... args) {
         TestIssue2076 app = new TestIssue2076();
         app.start();
     }

File: jme3-core/src/main/java/com/jme3/scene/control/LightControl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -49,7 +49,7 @@
 import java.io.IOException;
 
 /**
- * This Control maintains a reference to a Camera,
+ * This Control maintains a reference to a Light,
  * which will be synched with the position (worldTranslation)
  * of the current spatial.
  *
@@ -92,7 +92,7 @@ public LightControl(Light light) {
 
     /**
      * @param light The light to be synced.
-     * @param controlDir SpatialToCamera or CameraToSpatial
+     * @param controlDir SpatialToLight or LightToSpatial
      */
     public LightControl(Light light, ControlDirection controlDir) {
         this.light = light;

File: jme3-core/src/plugins/java/com/jme3/scene/plugins/MTLLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -184,7 +184,7 @@ protected Texture loadTexture(String path){
             logger.log(Level.WARNING, "Cannot locate {0} for material {1}", new Object[]{texKey, key});
             texture = new Texture2D(PlaceholderAssets.getPlaceholderImage(assetManager));
             texture.setWrap(WrapMode.Repeat);
-            texture.setKey(key);
+            texture.setKey(texKey);
         }
         return texture;
     }

File: jme3-core/src/main/java/com/jme3/anim/util/AnimMigrationUtils.java
Patch:
@@ -64,6 +64,7 @@ public void visit(Spatial spatial) {
 
                 Armature armature = new Armature(joints);
                 armature.saveBindPose();
+                armature.saveInitialPose();
                 skeletonArmatureMap.put(skeleton, armature);
 
                 List<TransformTrack> tracks = new ArrayList<>();

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikktspaceTangentGenerator.java
Patch:
@@ -279,7 +279,7 @@ public static boolean genTangSpace(MikkTSpaceContext mikkTSpace, final float ang
                 float tang[] = {pTSpace.os.x, pTSpace.os.y, pTSpace.os.z};
                 float bitang[] = {pTSpace.ot.x, pTSpace.ot.y, pTSpace.ot.z};
                 mikkTSpace.setTSpace(tang, bitang, pTSpace.magS, pTSpace.magT, pTSpace.orient, f, i);
-                mikkTSpace.setTSpaceBasic(tang, pTSpace.orient == true ? 1.0f : (-1.0f), f, i);
+                mikkTSpace.setTSpaceBasic(tang, pTSpace.orient == true ? -1.0f : 1.0f, f, i);
                 ++index;
             }
         }

File: jme3-examples/src/main/java/jme3test/light/TestTangentGenBadUV.java
Patch:
@@ -42,6 +42,7 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.Sphere;
+import com.jme3.util.TangentUtils;
 import com.jme3.util.mikktspace.MikktspaceTangentGenerator;
 
 public class TestTangentGenBadUV extends SimpleApplication {
@@ -71,7 +72,7 @@ public void simpleInitApp() {
 
         Geometry debug = new Geometry(
                 "Debug Teapot",
-                MikktspaceTangentGenerator.genTbnLines(((Geometry) teapot).getMesh(), 0.03f)
+                TangentUtils.genTbnLines(((Geometry) teapot).getMesh(), 0.03f)
         );
         Material debugMat = assetManager.loadMaterial("Common/Materials/VertexColor.j3m");
         debug.setMaterial(debugMat);

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikktspaceTangentGenerator.java
Patch:
@@ -140,6 +140,7 @@ private static boolean generateTangents(Mesh mesh) {
             case Triangles:
             case TriangleFan:
             case TriangleStrip:
+            case Patch:
                 hasTriangles = true;
                 break;
 

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfModelKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -54,8 +54,8 @@ public class GltfModelKey extends ModelKey {
 
     private Map<String, MaterialAdapter> materialAdapters = new HashMap<>();
     private static Map<String, ExtensionLoader> extensionLoaders = new HashMap<>();
-    private ExtrasLoader extrasLoader;
     private boolean keepSkeletonPose = false;
+    private ExtrasLoader extrasLoader;
 
     public GltfModelKey(String name) {
         super(name);

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -892,11 +892,12 @@ private boolean isBO(final VarType type) {
 
     private void updateRenderState(Geometry geometry, RenderManager renderManager, Renderer renderer, TechniqueDef techniqueDef) {
         if (renderManager.getForcedRenderState() != null) {
-            mergedRenderState.set(renderManager.getForcedRenderState());
+            mergedRenderState.copyFrom(renderManager.getForcedRenderState());
         } else if (techniqueDef.getRenderState() != null) {
-            // copyMergedTo writes to mergedRenderState
+            mergedRenderState.copyFrom(RenderState.DEFAULT);
             techniqueDef.getRenderState().copyMergedTo(additionalState, mergedRenderState);
         } else {
+            mergedRenderState.copyFrom(RenderState.DEFAULT);
             RenderState.DEFAULT.copyMergedTo(additionalState, mergedRenderState);
         }
         // test if the face cull mode should be flipped before render

File: jme3-examples/src/main/java/jme3test/light/TestSpotLightShadows.java
Patch:
@@ -99,15 +99,15 @@ public void setupLighting() {
 
         final SpotLightShadowRenderer slsr = new SpotLightShadowRenderer(assetManager, 512);
         slsr.setLight(spot);       
-        slsr.setShadowIntensity(0.5f);
+        slsr.setShadowIntensity(.7f);
         slsr.setShadowZExtend(100);
         slsr.setShadowZFadeLength(5);
         slsr.setEdgeFilteringMode(EdgeFilteringMode.PCFPOISSON);   
         viewPort.addProcessor(slsr);
 
         SpotLightShadowFilter slsf = new SpotLightShadowFilter(assetManager, 512);
         slsf.setLight(spot);    
-        slsf.setShadowIntensity(0.5f);
+        slsf.setShadowIntensity(.7f);
         slsf.setShadowZExtend(100);
         slsf.setShadowZFadeLength(5);
         slsf.setEdgeFilteringMode(EdgeFilteringMode.PCFPOISSON);  

File: jme3-core/src/main/java/com/jme3/scene/UserData.java
Patch:
@@ -138,7 +138,7 @@ public static byte getObjectType(Object type) {
     public void write(JmeExporter ex) throws IOException {
         OutputCapsule oc = ex.getCapsule(this);
         oc.write(type, "type", (byte) 0);
-
+        
         switch (type) {
             case TYPE_INTEGER:
                 int i = (Integer) value;

File: jme3-core/src/main/java/com/jme3/post/Filter.java
Patch:
@@ -108,7 +108,7 @@ public Pass() {
         public void init(Renderer renderer, int width, int height, Format textureFormat, Format depthBufferFormat, int numSamples, boolean renderDepth) {
             Collection<Caps> caps = renderer.getCaps();
             if (numSamples > 1 && caps.contains(Caps.FrameBufferMultisample) && caps.contains(Caps.OpenGL31)) {
-                renderFrameBuffer = new FrameBuffer(width, height, numSamples);                
+                renderFrameBuffer = new FrameBuffer(width, height, numSamples);
                 renderedTexture = new Texture2D(width, height, numSamples, textureFormat);
                 renderFrameBuffer.setDepthTarget(FrameBufferTarget.newTarget(depthBufferFormat));
                 if (renderDepth) {
@@ -126,7 +126,7 @@ public void init(Renderer renderer, int width, int height, Format textureFormat,
             }
 
             renderFrameBuffer.addColorTarget(FrameBufferTarget.newTarget(renderedTexture));
-
+            renderFrameBuffer.setName(getClass().getSimpleName());      
 
         }
 

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -616,7 +616,7 @@ private void loadCapabilitiesCommon() {
             caps.add(Caps.UnpackRowLength);
         }
 
-        if (caps.contains(Caps.OpenGL43) || hasExtension("GL_KHR_debug")) {
+        if (caps.contains(Caps.OpenGL43) || hasExtension("GL_KHR_debug") || caps.contains(Caps.WebGL)) {
             caps.add(Caps.GLDebug);
         }
 

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/CustomContentManager.java
Patch:
@@ -58,6 +58,7 @@ public CustomContentManager() {
         defaultExtensionLoaders.put("KHR_lights_punctual", new LightsPunctualExtensionLoader());
         defaultExtensionLoaders.put("KHR_materials_unlit", new UnlitExtensionLoader());
         defaultExtensionLoaders.put("KHR_texture_transform", new TextureTransformExtensionLoader());
+        defaultExtensionLoaders.put("KHR_materials_emissive_strength", new PBREmissiveStrengthExtensionLoader());
     }
 
     void init(GltfLoader gltfLoader) {

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLImageFormats.java
Patch:
@@ -121,7 +121,7 @@ public static GLImageFormat[][] getFormatsForCaps(EnumSet<Caps> caps) {
             formatSrgbSwiz(formatToGL, Format.Luminance8Alpha8,     GLExt.GL_SRGB8_ALPHA8_EXT, GL3.GL_RG,       GL.GL_UNSIGNED_BYTE);
         }
         
-        if (caps.contains(Caps.OpenGL20)) {
+        if (caps.contains(Caps.OpenGL20)||caps.contains(Caps.OpenGLES30)) {
             if (!caps.contains(Caps.CoreProfile)) {
                 format(formatToGL, Format.Alpha8,           GL2.GL_ALPHA8,            GL.GL_ALPHA,           GL.GL_UNSIGNED_BYTE);
                 format(formatToGL, Format.Luminance8,       GL2.GL_LUMINANCE8,        GL.GL_LUMINANCE,       GL.GL_UNSIGNED_BYTE);

File: jme3-core/src/test/java/com/jme3/material/MaterialMatParamTest.java
Patch:
@@ -449,7 +449,7 @@ public void setTexture(int unit, Texture texture) {
             MaterialMatParamTest.this.usedTextures[unit] = texture;
         }
     };
-    private final RenderManager renderManager = new RenderManager(renderer);
+    private final RenderManager renderManager = TestUtil.createRenderManager(renderer);
 
     private boolean evaluated = false;
     private Shader usedShader = null;

File: jme3-core/src/test/java/com/jme3/material/MaterialTest.java
Patch:
@@ -104,7 +104,7 @@ public void testSelectDefaultTechnique_GLSL120Cap_MultipleLangs() {
 
         material.selectTechnique("Default", renderManager);
 
-        checkRequiredCaps(Caps.GLSL100, Caps.GLSL120);
+        checkRequiredCaps(Caps.GLSL120);
     }
 
     @Test

File: jme3-core/src/main/java/com/jme3/app/Application.java
Patch:
@@ -41,7 +41,9 @@
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.Renderer;
 import com.jme3.renderer.ViewPort;
-import com.jme3.system.*;
+import com.jme3.system.AppSettings;
+import com.jme3.system.JmeContext;
+import com.jme3.system.Timer;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 

File: jme3-core/src/plugins/java/com/jme3/export/binary/BinaryExporter.java
Patch:
@@ -328,9 +328,9 @@ protected byte[] fixClassAlias(byte[] bytes, int width) {
     }
 
     @Override
-    public void save(Savable object, File f) throws IOException {
+    public void save(Savable object, File f, boolean createDirectories) throws IOException {
         File parentDirectory = f.getParentFile();
-        if (parentDirectory != null && !parentDirectory.exists()) {
+        if (parentDirectory != null && !parentDirectory.exists() && createDirectories) {
             parentDirectory.mkdirs();
         }
 

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -875,12 +875,12 @@ public void setBitsPerPixel(int value) {
     }
 
     /**
-     * Set the number of samples per pixel. A value of 1 indicates
+     * Set the number of samples per pixel. A value of 0 or 1 indicates
      * each pixel should be single-sampled, higher values indicate
      * a pixel should be multi-sampled.
      *
      * @param value The number of samples
-     * (Default: 1)
+     * (Default: 0)
      */
     public void setSamples(int value) {
         putInteger("Samples", value);

File: jme3-core/src/main/java/com/jme3/app/Application.java
Patch:
@@ -226,7 +226,7 @@ public interface Application {
      * After the application has stopped, it cannot be used anymore.
      * 
      @param waitFor true&rarr;wait for the context to be fully destroyed,
-     * true&rarr;don't wait
+     * false&rarr;don't wait
      */
     public void stop(boolean waitFor);
 

File: jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
Patch:
@@ -618,7 +618,7 @@ public void stop() {
      * After the application has stopped, it cannot be used anymore.
      *
      * @param waitFor true&rarr;wait for the context to be fully destroyed,
-     * true&rarr;don't wait
+     * false&rarr;don't wait
      */
     @Override
     public void stop(boolean waitFor) {

File: jme3-core/src/main/java/com/jme3/shader/ShaderNodeDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -201,7 +201,7 @@ public void write(JmeExporter ex) throws IOException {
         oc.write(shadersPath.toArray(str), "shadersPath", null);
         oc.write(type, "type", null);
         oc.writeSavableArrayList((ArrayList) inputs, "inputs", new ArrayList<ShaderNodeVariable>());
-        oc.writeSavableArrayList((ArrayList) outputs, "inputs", new ArrayList<ShaderNodeVariable>());
+        oc.writeSavableArrayList((ArrayList) outputs, "outputs", new ArrayList<ShaderNodeVariable>());
     }
 
     public List<String> getShadersLanguage() {

File: jme3-android/src/main/java/com/jme3/system/android/OGLESContext.java
Patch:
@@ -58,7 +58,8 @@
 import com.jme3.renderer.opengl.*;
 import com.jme3.system.*;
 import com.jme3.util.BufferAllocatorFactory;
-import com.jme3.util.AndroidNativeBufferAllocator;
+import com.jme3.util.PrimitiveAllocator;
+
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -85,7 +86,7 @@ public class OGLESContext implements JmeContext, GLSurfaceView.Renderer, SoftTex
         final String implementation = BufferAllocatorFactory.PROPERTY_BUFFER_ALLOCATOR_IMPLEMENTATION;
 
         if (System.getProperty(implementation) == null) {
-            System.setProperty(implementation, AndroidNativeBufferAllocator.class.getName());
+            System.setProperty(implementation, PrimitiveAllocator.class.getName());
         }
     }
 

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -1500,7 +1500,7 @@ public int getMonitor() {
      * number is the number in the list of monitors GlfwGetMonitors returns.
      *
      * <p>This setting is used only with LWJGL3, it defines which monitor
-     * to use when creating a OpenGL window. its default value is -1.
+     * to use when creating a OpenGL window. its default value is 0.
      *
      * @param mon the desired monitor used when creating a OpenGL window
      * 

File: jme3-core/src/main/java/com/jme3/system/MonitorInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2022 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without

File: jme3-core/src/main/java/com/jme3/system/Monitors.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2022 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without

File: jme3-examples/src/main/java/jme3test/app/TestMonitorApp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java
Patch:
@@ -152,6 +152,7 @@ public abstract class LwjglWindow extends LwjglContext implements Runnable {
 
     private Thread mainThread;
 
+    private long monitor = NULL;
     private long window = NULL;
     private int frameRateLimit = -1;
 
@@ -288,7 +289,7 @@ public void invoke(int error, long description) {
 
         glfwWindowHint(GLFW_ALPHA_BITS, settings.getAlphaBits());
 
-        long monitor = NULL;
+//        long monitor = NULL;
 
         /** 
          * Let's grab the monitor selected, if not found it will return primaryMonitor.
@@ -920,8 +921,7 @@ private long getMonitor(int pos) {
      */
     
     @Override
-    public Monitors getMonitors()
-    {
+    public Monitors getMonitors()  {
        PointerBuffer monitors = glfwGetMonitors();
        long primary = glfwGetPrimaryMonitor();
        Monitors monitorList = new Monitors();

File: jme3-android/src/main/java/com/jme3/system/android/OGLESContext.java
Patch:
@@ -58,7 +58,8 @@
 import com.jme3.renderer.opengl.*;
 import com.jme3.system.*;
 import com.jme3.util.BufferAllocatorFactory;
-import com.jme3.util.AndroidNativeBufferAllocator;
+import com.jme3.util.PrimitiveAllocator;
+
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -85,7 +86,7 @@ public class OGLESContext implements JmeContext, GLSurfaceView.Renderer, SoftTex
         final String implementation = BufferAllocatorFactory.PROPERTY_BUFFER_ALLOCATOR_IMPLEMENTATION;
 
         if (System.getProperty(implementation) == null) {
-            System.setProperty(implementation, AndroidNativeBufferAllocator.class.getName());
+            System.setProperty(implementation, PrimitiveAllocator.class.getName());
         }
     }
 

File: jme3-core/src/main/java/com/jme3/math/Quaternion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2022 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -651,7 +651,7 @@ public Vector3f getRotationColumn(int i, Vector3f store) {
 
         float norm = norm();
         if (norm != 1.0f) {
-            norm = FastMath.invSqrt(norm);
+            norm = 1.0f / norm;
         }
 
         float xx = x * x * norm;

File: jme3-core/src/test/java/com/jme3/light/LightFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -134,8 +134,9 @@ public void testPointFiltering() {
         checkFilteredLights(1);
         
         // Rotate the camera so it is up, light is outside frustum.
-        cam.lookAtDirection(Vector3f.UNIT_Y, Vector3f.UNIT_Y);
+        cam.lookAtDirection(Vector3f.UNIT_Y, Vector3f.UNIT_X);
         checkFilteredLights(0);
+        cam.lookAtDirection(Vector3f.UNIT_Z, Vector3f.UNIT_Y);
         
         // ==================================
         // Tests for bounding Sphere

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/ParticleDepositionHeightMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -321,8 +321,7 @@ public boolean load() {
 
         logger.fine("Created heightmap using Particle Deposition");
 
-
-        return false;
+        return true; // success
     }
 
     /**

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/PBRMaterialAdapter.java
Patch:
@@ -42,6 +42,7 @@ public PBRMaterialAdapter() {
         addParamMapping("normalTexture", "NormalMap");
         addParamMapping("normalScale", "NormalScale");
         addParamMapping("occlusionTexture", "LightMap");
+        addParamMapping("occlusionStrength", "AoStrength");
         addParamMapping("emissiveTexture", "EmissiveMap");
         addParamMapping("emissiveFactor", "Emissive");
         addParamMapping("alphaMode", "alpha");

File: jme3-desktop/src/main/java/com/jme3/system/JmeDesktopSystem.java
Patch:
@@ -285,7 +285,7 @@ public void initialize(AppSettings settings) {
         logger.log(Level.INFO, getBuildInfo());
         if (!lowPermissions) {
             if (NativeLibraryLoader.isUsingNativeBullet()) {
-                NativeLibraryLoader.loadNativeLibrary("bulletjme", true);
+                NativeLibraryLoader.loadNativeLibrary(NativeLibraries.BulletJme.getName(), true);
             }
         }
     }

File: jme3-examples/src/main/java/jme3test/audio/TestMusicPlayer.java
Patch:
@@ -40,6 +40,7 @@
 import com.jme3.audio.plugins.WAVLoader;
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeSystem;
+import com.jme3.system.NativeLibraries;
 import com.jme3.system.NativeLibraryLoader;
 
 import java.io.*;
@@ -61,8 +62,8 @@ public class TestMusicPlayer extends javax.swing.JFrame {
         // started, but in this test we do not create a LwjglContext,
         // so we should handle loading natives ourselves if running
         // with lwjgl 2.
-        NativeLibraryLoader.loadNativeLibrary("lwjgl", false);
-        NativeLibraryLoader.loadNativeLibrary("openal", false);
+        NativeLibraryLoader.loadNativeLibrary(NativeLibraries.Lwjgl.getName(), false);
+        NativeLibraryLoader.loadNativeLibrary(NativeLibraries.OpenAL.getName(), false);
     }
 
     public TestMusicPlayer() {

File: jme3-vr/src/main/java/com/jme3/system/lwjgl/LwjglContextVR.java
Patch:
@@ -120,7 +120,7 @@ protected void loadNatives() {
         }
 
         if (NativeLibraryLoader.isUsingNativeBullet()) {
-            NativeLibraryLoader.loadNativeLibrary("bulletjme", true);
+            NativeLibraryLoader.loadNativeLibrary(NativeLibraries.BulletJme.getName(), true);
         }
     }
 

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java
Patch:
@@ -287,7 +287,7 @@ public void invoke(int error, long description) {
         final GLFWVidMode videoMode = glfwGetVideoMode(glfwGetPrimaryMonitor());
         int requestWidth = settings.getWindowWidth();
         int requestHeight = settings.getWindowHeight();
-        if (requestWidth <= 0 || requestWidth <= 0) {
+        if (requestWidth <= 0 || requestHeight <= 0) {
             requestWidth = videoMode.width();
             requestHeight = videoMode.height();
         }

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/FbxLoader.java
Patch:
@@ -343,6 +343,9 @@ private void constructAnimations() {
         
         // At this point we can construct the animation for all pairs ...
         for (FbxToJmeTrack pair : pairs.values()) {
+            if (pair.countKeyframes() == 0) {
+                continue;
+            }
             String animName = pair.animStack.getName();
             float duration    = pair.animStack.getDuration();
             

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/node/FbxNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -159,7 +159,7 @@ public Transform computeFbxLocalTransform() {
     
     public void setWorldBindPose(Matrix4f worldBindPose) {
         if (cachedWorldBindPose != null) {
-            if (!cachedWorldBindPose.equals(worldBindPose)) {
+            if (!cachedWorldBindPose.isSimilar(worldBindPose, 1e-6f)) {
                 throw new UnsupportedOperationException("Bind poses don't match");
             }
         }

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/mesh/FbxLayerElement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -196,7 +196,7 @@ public static FbxLayerElement fromElement(FbxElement element) {
                 layerElement.name = (String) child.properties.get(0);
             }
         }
-        if (layerElement.data == null) {
+        if (layerElement.data == null && layerElement.dataIndices != null) {
             // For Smoothing / Materials, data = dataIndices
             layerElement.refInfoType = ReferenceInformationType.Direct;
             layerElement.data = new Integer[layerElement.dataIndices.length];

File: jme3-desktop/src/main/java/com/jme3/system/JmeDesktopSystem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2023 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -100,7 +100,7 @@ private static BufferedImage ensureOpaque(BufferedImage original) {
 
     @Override
     public void writeImageFile(OutputStream outStream, String format, ByteBuffer imageData, int width, int height) throws IOException {
-        BufferedImage awtImage = ImageToAwt.convert(new Image(Image.Format.RGBA8, width, height, imageData, ColorSpace.Linear), false, true, 0);
+        BufferedImage awtImage = ImageToAwt.convert(new Image(Image.Format.RGBA8, width, height, imageData.duplicate(), ColorSpace.Linear), false, true, 0);
         awtImage = verticalFlip(awtImage);
 
         ImageWriter writer = ImageIO.getImageWritersByFormatName(format).next();

File: jme3-vr/src/main/java/com/jme3/app/VRAppState.java
Patch:
@@ -74,6 +74,7 @@
  * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public class VRAppState extends AbstractAppState {
+    public static final String ID = "VRAppState";
     private static final Logger logger = Logger.getLogger(VRAppState.class.getName());
 
     /**
@@ -105,7 +106,7 @@ public class VRAppState extends AbstractAppState {
      * @param environment the {@link VREnvironment VR environment} that this app state is using.
      */
     public VRAppState(VREnvironment environment) {
-        super();
+        super(ID);
 
         this.environment = environment;
 

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/CustomContentManager.java
Patch:
@@ -51,13 +51,13 @@ public class CustomContentManager {
     private GltfModelKey key;
     private GltfLoader gltfLoader;
 
-    private static Map<String, ExtensionLoader> defaultExtensionLoaders = new HashMap<>();
+    private final Map<String, ExtensionLoader> defaultExtensionLoaders = new HashMap<>();
 
-    static {
+    public CustomContentManager() {
         defaultExtensionLoaders.put("KHR_materials_pbrSpecularGlossiness", new PBRSpecGlossExtensionLoader());
         defaultExtensionLoaders.put("KHR_lights_punctual", new LightsPunctualExtensionLoader());
         defaultExtensionLoaders.put("KHR_materials_unlit", new UnlitExtensionLoader());
-        defaultExtensionLoaders.put("KHR_texture_transform", new TextureTransformExtensionLoader());     
+        defaultExtensionLoaders.put("KHR_texture_transform", new TextureTransformExtensionLoader());
     }
 
     void init(GltfLoader gltfLoader) {

File: jme3-plugins/src/test/java/com/jme3/material/plugin/TestMaterialWrite.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2016 jMonkeyEngine
+ * Copyright (c) 2009-2022 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -34,6 +34,7 @@
 import com.jme3.asset.AssetInfo;
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetManager;
+import com.jme3.asset.TextureKey;
 import com.jme3.material.Material;
 import com.jme3.material.RenderState;
 import com.jme3.material.plugin.export.material.J3MExporter;
@@ -76,7 +77,7 @@ public void testWriteMat() throws Exception {
 
         mat.setFloat("Shininess", 2.5f);
 
-        Texture tex = assetManager.loadTexture("Common/Textures/MissingTexture.png");
+        Texture tex = assetManager.loadTexture(new TextureKey("Common/Textures/MissingTexture.png", true));
         tex.setMagFilter(Texture.MagFilter.Nearest);
         tex.setMinFilter(Texture.MinFilter.BilinearNoMipMaps);
         tex.setWrap(Texture.WrapAxis.S, Texture.WrapMode.Repeat);

File: jme3-core/src/main/java/com/jme3/scene/Mesh.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2022 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -931,6 +931,7 @@ public void getTriangle(int index, Vector3f v1, Vector3f v2, Vector3f v3) {
     public void getTriangle(int index, Triangle tri) {
         getTriangle(index, tri.get1(), tri.get2(), tri.get3());
         tri.setIndex(index);
+        tri.setCenter(null); // invalidate previously cached centroid, if any
         tri.setNormal(null);
     }
 

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/CustomContentManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2022 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -57,6 +57,7 @@ public class CustomContentManager {
         defaultExtensionLoaders.put("KHR_materials_pbrSpecularGlossiness", new PBRSpecGlossExtensionLoader());
         defaultExtensionLoaders.put("KHR_lights_punctual", new LightsPunctualExtensionLoader());
         defaultExtensionLoaders.put("KHR_materials_unlit", new UnlitExtensionLoader());
+        defaultExtensionLoaders.put("KHR_texture_transform", new TextureTransformExtensionLoader());     
     }
 
     void init(GltfLoader gltfLoader) {

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -382,6 +382,7 @@ public Geometry[] readMeshPrimitives(int meshIndex) throws IOException {
         for (JsonElement primitive : primitives) {
             JsonObject meshObject = primitive.getAsJsonObject();
             Mesh mesh = new Mesh();
+            addToCache("mesh", 0, mesh, 1);
             Integer mode = getAsInteger(meshObject, "mode");
             mesh.setMode(getMeshMode(mode));
             Integer indices = getAsInteger(meshObject, "indices");

File: jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
Patch:
@@ -667,10 +667,10 @@ public void handleError(String errMsg, Throwable t) {
         // Display error message on screen if not in headless mode
         if (context.getType() != JmeContext.Type.Headless) {
             if (t != null) {
-                JmeSystem.showErrorDialog(errMsg + "\n" + t.getClass().getSimpleName()
+                JmeSystem.handleErrorMessage(errMsg + "\n" + t.getClass().getSimpleName()
                         + (t.getMessage() != null ? ": " + t.getMessage() : ""));
             } else {
-                JmeSystem.showErrorDialog(errMsg);
+                JmeSystem.handleErrorMessage(errMsg);
             }
         }
 

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -1282,8 +1282,7 @@ public VertexBufferPopulator(VertexBuffer.Type bufferType) {
         public VertexBuffer populate(Integer bufferViewIndex, int componentType, String type, int count,
                 int byteOffset, boolean normalized) throws IOException {
             if (bufferType == null) {
-                logger.log(Level.WARNING,
-                        "could not assign data to any VertexBuffer type for buffer view " + bufferViewIndex);
+                logger.log(Level.WARNING, "could not assign data to any VertexBuffer type for buffer view {0}", bufferViewIndex);
                 return null;
             }
 

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -979,10 +979,10 @@ public void applyRenderState(RenderState state) {
                         convertStencilOperation(state.getBackStencilDepthPassOperation()));
                 gl.glStencilFuncSeparate(GL.GL_FRONT,
                         convertTestFunction(state.getFrontStencilFunction()),
-                        0, Integer.MAX_VALUE);
+                        state.getFrontStencilReference(), state.getFrontStencilMask());
                 gl.glStencilFuncSeparate(GL.GL_BACK,
                         convertTestFunction(state.getBackStencilFunction()),
-                        0, Integer.MAX_VALUE);
+                        state.getBackStencilReference(), state.getBackStencilMask());
             } else {
                 gl.glDisable(GL.GL_STENCIL_TEST);
             }

File: jme3-examples/src/main/java/jme3test/model/anim/TestAnimMigration.java
Patch:
@@ -174,13 +174,13 @@ public void onAnalog(String name, float value, float tpf) {
                     blendValue += value;
                     blendValue = FastMath.clamp(blendValue, 1, 4);
                     action.getBlendSpace().setValue(blendValue);
-                    action.setSpeed(blendValue);
+                    //action.setSpeed(blendValue);
                 }
                 if (name.equals("blendDown")) {
                     blendValue -= value;
                     blendValue = FastMath.clamp(blendValue, 1, 4);
                     action.getBlendSpace().setValue(blendValue);
-                    action.setSpeed(blendValue);
+                    //action.setSpeed(blendValue);
                 }
                 //System.err.println(blendValue);
             }

File: jme3-core/src/main/java/com/jme3/light/DefaultLightFilter.java
Patch:
@@ -59,6 +59,7 @@ public void setCamera(Camera camera) {
         for (Light light : processedLights) {
             light.frustumCheckNeeded = true;
         }
+        processedLights.clear();
     }
 
     @Override

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -237,6 +237,7 @@ private void initContext(boolean first) {
             }
 
             this.renderer = new GLRenderer(gl, glext, glfbo);
+            if (this.settings.isGraphicsDebug()) ((GLRenderer)this.renderer).setDebugEnabled(true);
         }
         this.renderer.initialize();
 

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java
Patch:
@@ -374,8 +374,8 @@ private void updateSizes() {
         // framebuffer size (resolution) may differ from window size (e.g. HiDPI)
 
         glfwGetWindowSize(window, width, height);
-        int windowWidth = width[0];
-        int windowHeight = height[0];
+        int windowWidth = width[0] < 1 ? 1 : width[0];
+        int windowHeight = height[0] < 1 ? 1 : height[0];
         if (settings.getWindowWidth() != windowWidth
                 || settings.getWindowHeight() != windowHeight) {
             settings.setWindowSize(windowWidth, windowHeight);

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2022 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -89,14 +89,14 @@ public class GltfLoader implements AssetLoader {
     private Vector3fArrayPopulator vector3fArrayPopulator = new Vector3fArrayPopulator();
     private QuaternionArrayPopulator quaternionArrayPopulator = new QuaternionArrayPopulator();
     private Matrix4fArrayPopulator matrix4fArrayPopulator = new Matrix4fArrayPopulator();
-    private static Map<String, MaterialAdapter> defaultMaterialAdapters = new HashMap<>();
+    private Map<String, MaterialAdapter> defaultMaterialAdapters = new HashMap<>();
     private CustomContentManager customContentManager = new CustomContentManager();
     private boolean useNormalsFlag = false;
 
     Map<SkinData, List<Spatial>> skinnedSpatials = new HashMap<>();
     IntMap<SkinBuffers> skinBuffers = new IntMap<>();
 
-    static {
+    public GltfLoader() {
         defaultMaterialAdapters.put("pbrMetallicRoughness", new PBRMetalRoughMaterialAdapter());
     }
 

File: jme3-android/src/main/java/com/jme3/app/jmeSurfaceView/OnExceptionThrown.java
Patch:
@@ -33,13 +33,14 @@
 
 /**
  * An interface designed to listen for exceptions and fire an event when an exception is thrown.
- * @see JmeSurfaceView#setOnExceptionThrown(OnExceptionThrown)
  *
  * @author pavl_g.
+ * @see JmeSurfaceView#setOnExceptionThrown(OnExceptionThrown)
  */
 public interface OnExceptionThrown {
     /**
      * Listens for a thrown exception or a thrown error.
+     *
      * @param e the exception or the error that is throwable.
      */
     void onExceptionThrown(Throwable e);

File: jme3-android/src/main/java/com/jme3/app/jmeSurfaceView/OnLayoutDrawn.java
Patch:
@@ -43,8 +43,9 @@
 public interface OnLayoutDrawn {
     /**
      * Dispatched when the layout is drawn on the screen.
+     *
      * @param legacyApplication the application instance.
-     * @param layout the current layout.
+     * @param layout            the current layout.
      */
     void onLayoutDrawn(LegacyApplication legacyApplication, View layout);
 }

File: jme3-android/src/main/java/com/jme3/app/jmeSurfaceView/OnRendererCompleted.java
Patch:
@@ -36,17 +36,18 @@
 
 /**
  * An interface used for invoking an event when the user delay finishes, on the first update of the game.
- * @see JmeSurfaceView#setOnRendererCompleted(OnRendererCompleted)
  *
  * @author pavl_g.
+ * @see JmeSurfaceView#setOnRendererCompleted(OnRendererCompleted)
  */
 public interface OnRendererCompleted {
     /**
      * Invoked when the user delay finishes, on the first update of the game, the event is dispatched on the
      * enclosing Activity context thread.
-     * @see JmeSurfaceView#update()
+     *
      * @param application the current jme game instance.
      * @param appSettings the current window settings of the running jme game.
+     * @see JmeSurfaceView#update()
      */
     void onRenderCompletion(LegacyApplication application, AppSettings appSettings);
 }

File: jme3-android/src/main/java/com/jme3/app/jmeSurfaceView/JmeSurfaceView.java
Patch:
@@ -360,7 +360,7 @@ public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Ev
             case ON_DESTROY:
                 /*destroy only if the policy flag is enabled*/
                 if(destructionPolicy == DestructionPolicy.DESTROY_WHEN_FINISH) {
-                    destroy();
+                    legacyApplication.stop(!isGLThreadPaused());
                 }
                 break;
             case ON_PAUSE:
@@ -503,8 +503,7 @@ public void destroy() {
         if (legacyApplication == null) {
             return;
         }
-        /*stop the application immediately if the GL thread is not visible otherwise wait for the context to be fully destroyed*/
-        legacyApplication.stop(!isGLThreadPaused());
+        legacyApplication.destroy();
         /*help the Dalvik Garbage collector to destruct the pointers, by making them nullptr*/
         /*context instances*/
         legacyApplication = null;

File: jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2022 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -343,7 +343,7 @@ private void initInput() {
         if (touchInput != null)
             touchInput.initialize();
 
-        if (!settings.getBoolean("DisableJoysticks")) {
+        if (settings.useJoysticks()) {
             joyInput = context.getJoyInput();
             if (joyInput != null)
                 joyInput.initialize();

File: jme3-vr/src/main/java/com/jme3/app/VRApplication.java
Patch:
@@ -1289,7 +1289,7 @@ private void initInput(){
         if (touchInput != null)
             touchInput.initialize();
 
-        if (!settings.getBoolean("DisableJoysticks")){
+        if (settings.useJoysticks()){
             joyInput = context.getJoyInput();
             if (joyInput != null)
                 joyInput.initialize();

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2022 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -1601,7 +1601,7 @@ else if (quadrant == 1) {
      * Find what terrain patches need normal recalculations and update
      * their normals;
      */
-    protected void fixNormals(BoundingBox affectedArea) {
+    public void fixNormals(BoundingBox affectedArea) {
         if (children == null)
             return;
 
@@ -1622,7 +1622,7 @@ protected void fixNormals(BoundingBox affectedArea) {
     /**
      * fix the normals on the edge of the terrain patches.
      */
-    protected void fixNormalEdges(BoundingBox affectedArea) {
+    public void fixNormalEdges(BoundingBox affectedArea) {
         if (children == null)
             return;
 

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -276,7 +276,7 @@ public final class AppSettings extends HashMap<String, Object> {
         defaults.put("Samples", 0);
         defaults.put("Fullscreen", false);
         defaults.put("Title", JmeVersion.FULL_NAME);
-        defaults.put("Renderer", LWJGL_OPENGL2);
+        defaults.put("Renderer", LWJGL_OPENGL32);
         defaults.put("AudioRenderer", LWJGL_OPENAL);
         defaults.put("DisableJoysticks", true);
         defaults.put("UseInput", true);
@@ -704,7 +704,7 @@ public void setUseJoysticks(boolean use) {
      * <li>null - Disable graphics rendering</li>
      * </ul>
      * @param renderer The renderer to set
-     * (Default: AppSettings.LWJGL_OPENGL2)
+     * (Default: AppSettings.LWJGL_OPENGL32)
      */
     public void setRenderer(String renderer) {
         putString("Renderer", renderer);

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -290,7 +290,7 @@ public final class AppSettings extends HashMap<String, Object> {
         defaults.put("SwapBuffers", true);
         defaults.put("OpenCL", false);
         defaults.put("OpenCLPlatformChooser", DefaultPlatformChooser.class.getName());
-        defaults.put("UseRetinaFrameBuffer", true);// MacOS spec
+        defaults.put("UseRetinaFrameBuffer", false);
         defaults.put("WindowYPosition", 0);
         defaults.put("WindowXPosition", 0);
         //  defaults.put("Icons", null);

File: jme3-core/src/main/java/com/jme3/math/Quaternion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2021 jMonkeyEngine
+ * Copyright (c) 2009-2022 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -252,7 +252,7 @@ public boolean isIdentity() {
      * Sets the quaternion from the specified Tait-Bryan angles, applying the
      * rotations in x-z-y extrinsic order or y-z'-x" intrinsic order.
      *
-     * @param @param angles an array of Tait-Bryan angles (in radians, exactly 3
+     * @param angles an array of Tait-Bryan angles (in radians, exactly 3
      *     elements, the X angle in {@code angles[0]}, the Y angle in {@code
      *     angles[1]}, and the Z angle in {@code angles[2]}, not null,
      *     unaffected)

File: jme3-core/src/main/java/com/jme3/input/ChaseCamera.java
Patch:
@@ -546,7 +546,9 @@ public boolean isEnabled() {
      */
     public void setEnabled(boolean enabled) {
         this.enabled = enabled;
-        if (!enabled) {
+        if (enabled) {
+            this.canRotate = !dragToRotate; //On enable, set back to correct state
+        } else {
             canRotate = false; // reset this flag in-case it was on before
         }
     }

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -503,7 +503,7 @@ public void write(JmeExporter ex) throws IOException {
         oc.write(frontStencilStencilFailOperation, "frontStencilStencilFailOperation", StencilOperation.Keep);
         oc.write(frontStencilDepthFailOperation, "frontStencilDepthFailOperation", StencilOperation.Keep);
         oc.write(frontStencilDepthPassOperation, "frontStencilDepthPassOperation", StencilOperation.Keep);
-        oc.write(backStencilStencilFailOperation, "frontStencilStencilFailOperation", StencilOperation.Keep);
+        oc.write(backStencilStencilFailOperation, "backStencilStencilFailOperation", StencilOperation.Keep);
         oc.write(backStencilDepthFailOperation, "backStencilDepthFailOperation", StencilOperation.Keep);
         oc.write(backStencilDepthPassOperation, "backStencilDepthPassOperation", StencilOperation.Keep);
         oc.write(frontStencilFunction, "frontStencilFunction", TestFunction.Always);

File: jme3-bullet/src/common/java/com/jme3/bullet/control/ragdoll/RagdollPreset.java
Patch:
@@ -175,7 +175,7 @@ public void addSynonym(String word, int score) {
         /**
          * Calculate a total score for the specified bone name.
          *
-         * @param name the name of a bone (not null)
+         * @param word the name of a bone (not null)
          * @return total score: larger value means more likely to correspond
          */
         public int getScore(String word) {

File: jme3-core/src/main/java/com/jme3/scene/shape/RectangleMesh.java
Patch:
@@ -67,7 +67,7 @@
  * <li>U=0 at vertices A and C</li>
  * <li>U=1 at vertices B and D</li>
  * <li>V=0 at vertices A and B</li>
- * <li>V=1 at vertices C and D</li</ul>
+ * <li>V=1 at vertices C and D</li></ul>
  *
  * @author Francivan Bezerra
  */

File: jme3-examples/src/main/java/jme3test/bullet/TestIssue883.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * Test case for JME issue #883: extra physicsTicks in ThreadingType.PARALLEL.
  *
- * <p></p>If successful, physics time and frame time will advance at the same rate.
+ * <p>If successful, physics time and frame time will advance at the same rate.
  */
 public class TestIssue883 extends SimpleApplication {
 

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/HeightMapGrid.java
Patch:
@@ -36,7 +36,7 @@
 /**
  *
  * @author Anthyon
- * @Deprecated in favor of TerrainGridTileLoader
+ * @deprecated in favor of TerrainGridTileLoader
  */
 @Deprecated
 public interface HeightMapGrid {

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -58,6 +58,7 @@
 import com.jme3.texture.Texture.MinFilter;
 import com.jme3.texture.Texture.ShadowCompareMode;
 import com.jme3.texture.Texture2D;
+import com.jme3.texture.FrameBuffer.FrameBufferTarget;
 import com.jme3.ui.Picture;
 import com.jme3.util.clone.Cloner;
 import com.jme3.util.clone.JmeCloneable;
@@ -170,10 +171,10 @@ private void init(AssetManager assetManager, int nbShadowMaps, int shadowMapSize
             shadowFB[i] = new FrameBuffer(shadowMapSize, shadowMapSize, 1);
             shadowMaps[i] = new Texture2D(shadowMapSize, shadowMapSize, Format.Depth);
 
-            shadowFB[i].setDepthTexture(shadowMaps[i]);
+            shadowFB[i].setDepthTarget(FrameBufferTarget.newTarget(shadowMaps[i]));
 
             //DO NOT COMMENT THIS (it prevent the OSX incomplete read buffer crash)
-            shadowFB[i].setColorTexture(dummyTex);
+            shadowFB[i].addColorTarget(FrameBufferTarget.newTarget(dummyTex));
             shadowMapStringCache[i] = "ShadowMap" + i; 
             lightViewStringCache[i] = "LightViewProjectionMatrix" + i;
 

File: jme3-examples/src/main/java/jme3test/niftygui/TestNiftyToMesh.java
Patch:
@@ -44,6 +44,7 @@
 import com.jme3.texture.Texture.MagFilter;
 import com.jme3.texture.Texture.MinFilter;
 import com.jme3.texture.Texture2D;
+import com.jme3.texture.FrameBuffer.FrameBufferTarget;
 import de.lessvoid.nifty.Nifty;
 
 public class TestNiftyToMesh extends SimpleApplication{
@@ -67,13 +68,13 @@ public void simpleInitApp() {
 
         Texture2D depthTex = new Texture2D(1024, 768, Format.Depth);
         FrameBuffer fb = new FrameBuffer(1024, 768, 1);
-        fb.setDepthTexture(depthTex);
+        fb.setDepthTarget(FrameBufferTarget.newTarget(depthTex));
 
         Texture2D tex = new Texture2D(1024, 768, Format.RGBA8);
         tex.setMinFilter(MinFilter.Trilinear);
         tex.setMagFilter(MagFilter.Bilinear);
 
-        fb.setColorTexture(tex);
+        fb.addColorTarget(FrameBufferTarget.newTarget(tex));
         niftyView.setClearFlags(true, true, true);
         niftyView.setOutputFrameBuffer(fb);
 

File: jme3-examples/src/main/java/jme3test/post/TestFBOPassthrough.java
Patch:
@@ -42,6 +42,7 @@
 import com.jme3.texture.FrameBuffer;
 import com.jme3.texture.Image.Format;
 import com.jme3.texture.Texture2D;
+import com.jme3.texture.FrameBuffer.FrameBufferTarget;
 import com.jme3.ui.Picture;
 
 /**
@@ -70,8 +71,8 @@ public void simpleInitApp() {
         fb = new FrameBuffer(w, h, 1);
 
         Texture2D fbTex = new Texture2D(w, h, Format.RGBA8);
-        fb.setDepthBuffer(Format.Depth);
-        fb.setColorTexture(fbTex);
+        fb.setDepthTarget(FrameBufferTarget.newTarget(Format.Depth));
+        fb.addColorTarget(FrameBufferTarget.newTarget(fbTex));
 
         // setup framebuffer's scene
         Sphere sphMesh = new Sphere(20, 20, 1);

File: jme3-examples/src/main/java/jme3test/post/TestRenderToMemory.java
Patch:
@@ -49,6 +49,7 @@
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeContext.Type;
 import com.jme3.texture.FrameBuffer;
+import com.jme3.texture.FrameBuffer.FrameBufferTarget;
 import com.jme3.texture.Image.Format;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.Screenshots;
@@ -192,9 +193,8 @@ public void setupOffscreenView(){
 
         //setup framebuffer to use renderbuffer
         // this is faster for gpu -> cpu copies
-        offBuffer.setDepthBuffer(Format.Depth);
-        offBuffer.setColorBuffer(Format.RGBA8);
-//        offBuffer.setColorTexture(offTex);
+        offBuffer.setDepthTarget(FrameBufferTarget.newTarget(Format.Depth));
+        offBuffer.addColorTarget(FrameBufferTarget.newTarget(Format.RGBA8));
         
         //set viewport to render to offscreen framebuffer
         offView.setOutputFrameBuffer(offBuffer);

File: jme3-examples/src/main/java/jme3test/renderer/TestDepthStencil.java
Patch:
@@ -48,6 +48,7 @@
 import com.jme3.texture.FrameBuffer;
 import com.jme3.texture.Image.Format;
 import com.jme3.texture.Texture2D;
+import com.jme3.texture.FrameBuffer.FrameBufferTarget;
 import com.jme3.ui.Picture;
 
 public class TestDepthStencil extends SimpleApplication {
@@ -71,8 +72,8 @@ public void simpleInitApp() {
         fb = new FrameBuffer(w, h, 1);
 
         Texture2D fbTex = new Texture2D(w, h, Format.RGB8);
-        fb.setDepthBuffer(Format.Depth24Stencil8);
-        fb.setColorTexture(fbTex);
+        fb.setDepthTarget(FrameBufferTarget.newTarget(Format.Depth24Stencil8));
+        fb.addColorTarget(FrameBufferTarget.newTarget(fbTex));
 
         // setup framebuffer's scene
         Sphere sphMesh = new Sphere(20, 20, 1);

File: jme3-vr/src/main/java/com/jme3/shadow/AbstractShadowFilterVR.java
Patch:
@@ -43,8 +43,6 @@
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.ViewPort;
 import com.jme3.renderer.queue.RenderQueue;
-import com.jme3.shadow.CompareMode;
-import com.jme3.shadow.EdgeFilteringMode;
 import com.jme3.texture.FrameBuffer;
 
 import java.io.IOException;

File: jme3-vr/src/main/java/com/jme3/shadow/AbstractShadowRendererVR.java
Patch:
@@ -59,6 +59,7 @@
 import com.jme3.texture.Texture.MinFilter;
 import com.jme3.texture.Texture.ShadowCompareMode;
 import com.jme3.texture.Texture2D;
+import com.jme3.texture.FrameBuffer.FrameBufferTarget;
 import com.jme3.ui.Picture;
 
 import java.io.IOException;
@@ -169,10 +170,10 @@ private void init(AssetManager assetManager, int nbShadowMaps, int shadowMapSize
             shadowFB[i] = new FrameBuffer(shadowMapSize, shadowMapSize, 1);
             shadowMaps[i] = new Texture2D(shadowMapSize, shadowMapSize, Format.Depth);
 
-            shadowFB[i].setDepthTexture(shadowMaps[i]);
+            shadowFB[i].setDepthTarget(FrameBufferTarget.newTarget(shadowMaps[i]));
 
             //DO NOT COMMENT THIS (It prevents the OSX incomplete read buffer crash.)
-            shadowFB[i].setColorTexture(dummyTex);
+            shadowFB[i].addColorTarget(FrameBufferTarget.newTarget(dummyTex));
             shadowMapStringCache[i] = "ShadowMap" + i; 
             lightViewStringCache[i] = "LightViewProjectionMatrix" + i;
 

File: jme3-effects/src/main/java/com/jme3/post/filters/ContrastAdjustmentFilter.java
Patch:
@@ -353,8 +353,9 @@ public float getBlueScale() {
      * @param height unused
      */
     @Override
-    protected void initFilter(AssetManager manager, RenderManager renderManager, ViewPort vp, int w, int h) {
-        material = new Material(manager, "Common/MatDefs/Post/ContrastAdjustment.j3md");
+    protected void initFilter(AssetManager assetManager, RenderManager renderManager,
+            ViewPort viewPort, int width, int height) {
+        material = new Material(assetManager, "Common/MatDefs/Post/ContrastAdjustment.j3md");
 
         //different channels exp for different transfer functions
         setExponents(redExponent, greenExponent, blueExponent);

File: jme3-vr/src/main/java/com/jme3/scene/CenterQuad.java
Patch:
@@ -29,10 +29,8 @@
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package com.jme3.scene;
 
-import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;
 
 /**
@@ -42,7 +40,7 @@
  * <p>The rectangle extends from (-width/2, -height/2, 0) to
  * (width/2, height/2, 0) with normals set to (0,0,1).
  *
- * <p>This differs from {@link com.jme3.scene.shape.Quad} because it puts
+ * <p>This differs from com.jme3.scene.shape.Quad because it puts
  * (0,0,0) at the rectangle's center instead of in a corner.
  *
  * @author Kirill Vainer

File: jme3-core/src/main/java/com/jme3/animation/AudioTrack.java
Patch:
@@ -165,7 +165,7 @@ public float[] getKeyFrameTimes() {
      * @return a new track
      */
     @Override
-    public Track clone() {
+    public AudioTrack clone() {
         return new AudioTrack(audio, length, startOffset);
     }
 

File: jme3-core/src/main/java/com/jme3/animation/CompactArray.java
Patch:
@@ -268,7 +268,7 @@ public final T[] toObjectArray() {
      * @throws CloneNotSupportedException never
      */
     @Override
-    public Object clone() throws CloneNotSupportedException {
+    public CompactArray clone() throws CloneNotSupportedException {
         return Cloner.deepClone(this);
     }
 

File: jme3-core/src/main/java/com/jme3/animation/EffectTrack.java
Patch:
@@ -250,7 +250,7 @@ public float[] getKeyFrameTimes() {
      * @return a new instance
      */
     @Override
-    public Track clone() {
+    public EffectTrack clone() {
         return new EffectTrack(emitter, length, startOffset);
     }
 

File: jme3-core/src/main/java/com/jme3/asset/CloneableSmartAsset.java
Patch:
@@ -62,7 +62,7 @@ public interface CloneableSmartAsset extends Cloneable {
      * @return A clone of this asset. 
      * The cloned asset cannot reference equal this asset.
      */
-    public Object clone();
+    public CloneableSmartAsset clone();
     
     /**
      * Set by the {@link AssetManager} to track this asset. 

File: jme3-core/src/main/java/com/jme3/effect/influencers/DefaultParticleInfluencer.java
Patch:
@@ -100,7 +100,7 @@ public void read(JmeImporter im) throws IOException {
     }
 
     @Override
-    public ParticleInfluencer clone() {
+    public DefaultParticleInfluencer clone() {
         try {
             DefaultParticleInfluencer clone = (DefaultParticleInfluencer) super.clone();
             clone.initialVelocity = initialVelocity.clone();

File: jme3-core/src/main/java/com/jme3/effect/influencers/EmptyParticleInfluencer.java
Patch:
@@ -77,9 +77,9 @@ public float getVelocityVariation() {
     }
 
     @Override
-    public ParticleInfluencer clone() {
+    public EmptyParticleInfluencer clone() {
         try {
-            return (ParticleInfluencer) super.clone();
+            return (EmptyParticleInfluencer) super.clone();
         } catch (CloneNotSupportedException e) {
             throw new AssertionError();
         }

File: jme3-core/src/main/java/com/jme3/effect/influencers/NewtonianParticleInfluencer.java
Patch:
@@ -143,7 +143,7 @@ protected void applyVelocityVariation(Particle particle) {
     }
 
     @Override
-    public ParticleInfluencer clone() {
+    public NewtonianParticleInfluencer clone() {
         NewtonianParticleInfluencer result = new NewtonianParticleInfluencer();
         result.normalVelocity = normalVelocity;
         result.initialVelocity = initialVelocity;

File: jme3-core/src/main/java/com/jme3/scene/instancing/InstancedNode.java
Patch:
@@ -326,12 +326,12 @@ public void instance() {
     }
 
     @Override
-    public Node clone() {
+    public InstancedNode clone() {
         return clone(true);
     }
 
     @Override
-    public Node clone(boolean cloneMaterials) {
+    public InstancedNode clone(boolean cloneMaterials) {
         InstancedNode clone = (InstancedNode)super.clone(cloneMaterials);
 
         if (instancesMap.size() > 0) {

File: jme3-examples/src/main/java/jme3test/asset/TestAssetCache.java
Patch:
@@ -59,7 +59,7 @@ private static class DummyData implements CloneableSmartAsset {
         private byte[] data = new byte[10 * 1024];
 
         @Override
-        public Object clone(){
+        public DummyData clone(){
             try {
                 DummyData clone = (DummyData) super.clone();
                 clone.data = data.clone();

File: jme3-plugins/src/main/java/com/jme3/scene/plugins/IrBoneWeightIndex.java
Patch:
@@ -42,9 +42,9 @@ public IrBoneWeightIndex(int boneIndex, float boneWeight) {
     }
 
     @Override
-    public Object clone() {
+    public IrBoneWeightIndex clone() {
         try {
-            return super.clone();
+            return (IrBoneWeightIndex)super.clone();
         } catch (CloneNotSupportedException ex) {
             throw new AssertionError(ex);
         }

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/lodcalc/DistanceLodCalculator.java
Patch:
@@ -130,7 +130,7 @@ public void read(JmeImporter im) throws IOException {
     }
 
     @Override
-    public LodCalculator clone() {
+    public DistanceLodCalculator clone() {
         DistanceLodCalculator clone = new DistanceLodCalculator(size, lodMultiplier);
         return clone;
     }

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/lodcalc/PerspectiveLodCalculator.java
Patch:
@@ -132,9 +132,9 @@ public Vector3f getCenterLocation(TerrainPatch patch) {
     }
 
     @Override
-    public LodCalculator clone() {
+    public PerspectiveLodCalculator clone() {
         try {
-            return (LodCalculator) super.clone();
+            return (PerspectiveLodCalculator) super.clone();
         } catch (CloneNotSupportedException ex) {
             throw new AssertionError();
         }

File: jme3-android/src/main/java/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -375,7 +375,7 @@ public void update() {
                     Thread.sleep(difference);
                 } catch (InterruptedException ex) {
                 }
-            } else {
+            } else if (logger.isLoggable(Level.INFO)) {
                 logger.log(Level.INFO, "actual tpf(ms): {0}, 1/framerate(ms): {1}",
                         new Object[]{difference, (1.0f / this.framerate) * 1000.0f});
             }

File: jme3-android/src/main/java/com/jme3/input/android/AndroidJoyInput.java
Patch:
@@ -209,7 +209,9 @@ public void setJoyRumble(int joyId, float amount) {
 
     @Override
     public Joystick[] loadJoysticks(InputManager inputManager) {
-        logger.log(Level.INFO, "loading joysticks for {0}", this.getClass().getName());
+        if (logger.isLoggable(Level.INFO)) {
+            logger.log(Level.INFO, "loading joysticks for {0}", this.getClass().getName());
+        }
         if (!disableSensors) {
             joystickList.add(sensorJoyInput.loadJoystick(joystickList.size(), inputManager));
         }

File: jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
Patch:
@@ -538,7 +538,9 @@ public void createCanvas(){
             settings = new AppSettings(true);
         }
 
-        logger.log(Level.FINE, "Starting application: {0}", getClass().getName());
+        if (logger.isLoggable(Level.FINE)) {
+            logger.log(Level.FINE, "Starting application: {0}", getClass().getName());
+        }
         context = JmeSystem.newContext(settings, JmeContext.Type.Canvas);
         context.setSystemListener(this);
     }

File: jme3-core/src/main/java/com/jme3/renderer/Camera.java
Patch:
@@ -289,7 +289,9 @@ public Camera(int width, int height) {
         onViewPortChange();
         onFrameChange();
 
-        logger.log(Level.FINE, "Camera created (W: {0}, H: {1})", new Object[]{width, height});
+        if (logger.isLoggable(Level.FINE)) {
+            logger.log(Level.FINE, "Camera created (W: {0}, H: {1})", new Object[]{width, height});
+        }
     }
 
     @Override

File: jme3-core/src/main/java/com/jme3/scene/BatchNode.java
Patch:
@@ -240,7 +240,9 @@ protected void doBatch() {
         }
 
 
-        logger.log(Level.FINE, "Batched {0} geometries in {1} batches.", new Object[]{nbGeoms, batches.size()});
+        if (logger.isLoggable(Level.FINE)) {
+            logger.log(Level.FINE, "Batched {0} geometries in {1} batches.", new Object[]{nbGeoms, batches.size()});
+        }
 
         //init the temp arrays if something has been batched only.
         if (matMap.size() > 0) {

File: jme3-core/src/main/java/com/jme3/system/JmeSystemDelegate.java
Patch:
@@ -82,7 +82,9 @@ public synchronized File getStorageFolder(JmeSystem.StorageFolderType type) {
                 break;
         }
         if (storageFolder != null) {
-            logger.log(Level.FINE, "Storage Folder Path: {0}", storageFolder.getAbsolutePath());
+            if (logger.isLoggable(Level.FINE)) {
+                logger.log(Level.FINE, "Storage Folder Path: {0}", storageFolder.getAbsolutePath());
+            }
         } else {
             logger.log(Level.FINE, "Storage Folder not found!");
         }

File: jme3-core/src/main/java/com/jme3/system/NullContext.java
Patch:
@@ -71,7 +71,9 @@ public void setSystemListener(SystemListener listener){
 
     protected void initInThread(){
         logger.fine("NullContext created.");
-        logger.log(Level.FINE, "Running on thread: {0}", Thread.currentThread().getName());
+        if (logger.isLoggable(Level.FINE)) {
+            logger.log(Level.FINE, "Running on thread: {0}", Thread.currentThread().getName());
+        }
 
         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
             @Override

File: jme3-core/src/main/java/com/jme3/util/NativeObjectManager.java
Patch:
@@ -237,9 +237,7 @@ public void resetObjects(){
             }
             
             realObj.resetObject();
-            if (logger.isLoggable(Level.FINEST)) {
-                logger.log(Level.FINEST, "Reset: {0}", realObj);
-            }
+            logger.log(Level.FINEST, "Reset: {0}", realObj);
         }
         refMap.clear();
         refQueue = new ReferenceQueue<Object>();

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglOffscreenBuffer.java
Patch:
@@ -152,7 +152,9 @@ protected void deinitInThread(){
     @Override
     public void run(){
         loadNatives();
-        logger.log(Level.FINE, "Using LWJGL {0}", Sys.getVersion());
+        if (logger.isLoggable(Level.FINE)) {
+            logger.log(Level.FINE, "Using LWJGL {0}", Sys.getVersion());
+        }
         initInThread();
         while (!needClose.get()){
             runLoop();

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/FbxLoader.java
Patch:
@@ -272,7 +272,9 @@ private void connectObjects(FbxElement element) {
     private void applyBindPoses() {
         for (FbxBindPose bindPose : bindPoses) {
             Map<FbxId, Matrix4f> bindPoseData = bindPose.getJmeObject();
-            logger.log(Level.INFO, "Applying {0} bind poses", bindPoseData.size());
+            if (logger.isLoggable(Level.INFO)) {
+                logger.log(Level.INFO, "Applying {0} bind poses", bindPoseData.size());
+            }
             for (Map.Entry<FbxId, Matrix4f> entry : bindPoseData.entrySet()) {
                 FbxObject obj = objectMap.get(entry.getKey());
                 if (obj instanceof FbxNode) {

File: jme3-android/src/main/java/com/jme3/app/jmeSurfaceView/OnExceptionThrown.java
Patch:
@@ -32,8 +32,10 @@
 package com.jme3.app.jmeSurfaceView;
 
 /**
- * Embedded interface designed to listen to exceptions and fire when an exception is thrown.
+ * An interface designed to listen for exceptions and fire an event when an exception is thrown.
  * @see JmeSurfaceView#setOnExceptionThrown(OnExceptionThrown)
+ *
+ * @author pavl_g.
  */
 public interface OnExceptionThrown {
     /**

File: jme3-core/src/main/java/com/jme3/scene/Node.java
Patch:
@@ -431,7 +431,7 @@ public Spatial detachChildAt(int index) {
         Spatial child = children.remove(index);
         if (child != null) {
             child.setParent(null);
-            logger.log(Level.FINE, "{0}: Child removed.", this.toString());
+            logger.log(Level.FINE, "{0}: Child removed.", this);
 
             // since a child with a bound was detached;
             // our own bound will probably change.
@@ -461,7 +461,7 @@ public void detachAllChildren() {
         for (int i = children.size() - 1; i >= 0; i--) {
             detachChildAt(i);
         }
-        logger.log(Level.FINE, "{0}: All children removed.", this.toString());
+        logger.log(Level.FINE, "{0}: All children removed.", this);
     }
 
     /**

File: jme3-ios/src/main/java/com/jme3/renderer/ios/JmeIosGLES.java
Patch:
@@ -193,6 +193,7 @@ private JmeIosGLES() {
 	public static native int glGetAttribLocation(int program, String name);
 	public static native void glGetBoolean(int pname, ByteBuffer params);
 	public static native int glGetError();
+	public static native void glGetFloatv (int pname, float[] params, int offset);
 	public static native void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int[] params, int offset);
 	public static native void glGetIntegerv (int pname, int[] params, int offset);
 	public static native String glGetProgramInfoLog(int program);

File: jme3-core/src/main/java/checkers/quals/DefaultLocation.java
Patch:
@@ -15,8 +15,8 @@ public enum DefaultLocation {
     ALL_EXCEPT_LOCALS,
 
     /** Apply default annotations to unannotated upper bounds:  both
-     * explicit ones in <tt>extends</tt> clauses, and implicit upper bounds
-     * when no explicit <tt>extends</tt> or <tt>super</tt> clause is
+     * explicit ones in <code>extends</code> clauses, and implicit upper bounds
+     * when no explicit <code>extends</code> or <code>super</code> clause is
      * present. */
     // Especially useful for parameterized classes that provide a lot of
     // static methods with the same generic parameters as the class.

File: jme3-core/src/main/java/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -382,8 +382,7 @@ public void averagePoints(Vector3f[] points) {
      *            the transform to apply
      * @param store
      *            sphere to store result in
-     * @return BoundingVolume
-     * @return ref
+     * @return either store or a new BoundingSphere
      */
     @Override
     public BoundingVolume transform(Transform trans, BoundingVolume store) {

File: jme3-core/src/main/java/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -870,7 +870,6 @@ public void setInitialVelocity(Vector3f initialVelocity) {
     }
 
     /**
-     * @return the velocity variation
      * @deprecated
      * This method is deprecated.
      * Use ParticleEmitter.getParticleInfluencer().getVelocityVariation(); instead.

File: jme3-core/src/main/java/com/jme3/input/Input.java
Patch:
@@ -77,8 +77,6 @@ public interface Input {
     /**
      * @return The current absolute time as nanoseconds. This time is expected
      * to be relative to the time given in InputEvents time property.
-     *
-     * @return the current time (in nanoseconds)
      */
     public long getInputTimeNanos();
 }

File: jme3-core/src/main/java/com/jme3/renderer/Caps.java
Patch:
@@ -342,7 +342,7 @@ public enum Caps {
     TextureCompressionETC2,
     
     /**
-     * Supports {@link Format#BPTC} and sister formats.
+     * Supports BPTC and sister formats.
      */
     TextureCompressionBPTC,
     

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/DXTFlipper.java
Patch:
@@ -226,7 +226,7 @@ public static ByteBuffer flipDXT(ByteBuffer img, int w, int h, Format format){
                 type = 5;
                 break;
             default:
-                throw new IllegalArgumentException();
+                throw new IllegalArgumentException("No flip support for texture format " + format);
         }
 
         // DXT1 uses 8 bytes per block,

File: jme3-examples/src/main/java/jme3test/bullet/TestBetterCharacter.java
Patch:
@@ -118,6 +118,8 @@ public void prePhysicsTick(PhysicsSpace space, float tpf) {
         // Add character node to the rootNode
         rootNode.attachChild(characterNode);
 
+        cam.setLocation(new Vector3f(10f, 6f, -5f));
+
         // Set forward camera node that follows the character, only used when
         // view is "locked"
         camNode = new CameraNode("CamNode", cam);

File: jme3-core/src/main/java/com/jme3/math/Quaternion.java
Patch:
@@ -1151,7 +1151,7 @@ public Vector3f mult(Vector3f v, Vector3f store) {
      * result is returned as a new quaternion.
      *
      * @param scalar
-     *            the quaternion to multiply this quaternion by.
+     *            the scalar to multiply this quaternion by.
      * @return the new quaternion.
      */
     public Quaternion mult(float scalar) {
@@ -1163,7 +1163,7 @@ public Quaternion mult(float scalar) {
      * result is stored locally.
      *
      * @param scalar
-     *            the quaternion to multiply this quaternion by.
+     *            the scalar to multiply this quaternion by.
      * @return this.
      */
     public Quaternion multLocal(float scalar) {

File: jme3-core/src/main/java/com/jme3/scene/mesh/VirtualIndexBuffer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -67,7 +67,7 @@ public VirtualIndexBuffer(int numVerts, Mode meshMode) {
                 numIndices = numVerts;
                 return;
             case LineLoop:
-                numIndices = (numVerts - 1) * 2 + 1;
+                numIndices = numVerts * 2;
                 return;
             case LineStrip:
                 numIndices = (numVerts - 1) * 2;
@@ -113,7 +113,7 @@ public int get(int i) {
         } else if (meshMode == Mode.LineStrip) {
             return (i + 1) / 2;
         } else if (meshMode == Mode.LineLoop) {
-            return (i == (numVerts - 1)) ? 0 : ((i + 1) / 2);
+            return (i == (numIndices - 1)) ? 0 : ((i + 1) / 2);
         } else if (meshMode == Mode.TriangleStrip) {
             int triIndex = i / 3;
             int vertIndex = i % 3;

File: jme3-core/src/main/java/com/jme3/environment/LightProbeFactory.java
Patch:
@@ -260,8 +260,8 @@ boolean isDone() {
 
         float getProgress() {
             float mean = 0;
-            for (double progres : progress) {
-                mean += progres;
+            for (double faceProgress : progress) {
+                mean += faceProgress;
             }
             return mean / 7f;
         }

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/PFMLoader.java
Patch:
@@ -99,7 +99,7 @@ private Image load(InputStream in, boolean needYFlip) throws IOException{
         String scaleStr = readString(in);
         float scale = Float.parseFloat(scaleStr);
         ByteOrder order = scale < 0 ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN;
-        boolean needEndienFlip = order != ByteOrder.nativeOrder();
+        boolean needEndianFlip = order != ByteOrder.nativeOrder();
 
         // make sure all unnecessary stuff gets deleted from heap
         // before allocating large amount of memory
@@ -122,7 +122,7 @@ private Image load(InputStream in, boolean needYFlip) throws IOException{
                 off += read;
             } while (read > 0);
 
-            if (needEndienFlip){
+            if (needEndianFlip){
                 flipScanline(scanline);
             }
 

File: jme3-examples/src/main/java/jme3test/batching/TestBatchNode.java
Patch:
@@ -81,8 +81,8 @@ public void simpleInitApp() {
          * A cube with a color "bleeding" through transparent texture. Uses
          * Texture from jme3-testdata library!
          */
-        Box boxshape4 = new Box(1f, 1f, 1f);
-        Geometry cube = new Geometry("cube1", boxshape4);
+        Box boxShape4 = new Box(1f, 1f, 1f);
+        Geometry cube = new Geometry("cube1", boxShape4);
         Material mat = assetManager.loadMaterial("Textures/Terrain/Pond/Pond.j3m");
         cube.setMaterial(mat);
         //Material mat = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -278,8 +278,8 @@ private void initContext(boolean first) {
                     + "required for jMonkeyEngine");
         }
 
-        int vers[] = getGLVersion(settings.getRenderer());
-        if (vers != null) {
+        int version[] = getGLVersion(settings.getRenderer());
+        if (version != null) {
             if (first) {
                 GL gl = new LwjglGL();
                 GLExt glext = new LwjglGLExt();

File: jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwKeyInput.java
Patch:
@@ -111,8 +111,8 @@ private void closeCallbacks() {
 
     @Override
     public String getKeyName(int jmeKey) {
-        int glfwkey = GlfwKeyMap.fromJmeKeyCode(jmeKey);
-        return glfwGetKeyName(glfwkey, 0);
+        int glfwKey = GlfwKeyMap.fromJmeKeyCode(jmeKey);
+        return glfwGetKeyName(glfwKey, 0);
     }
 
     private void initCallbacks() {

File: jme3-vr/src/main/java/com/jme3/input/lwjgl/GlfwKeyInputVR.java
Patch:
@@ -146,8 +146,8 @@ public long getInputTimeNanos() {
 
     @Override
     public String getKeyName(int jmeKey) {
-        int glfwkey = GlfwKeyMap.fromJmeKeyCode(jmeKey);
-        return glfwGetKeyName(glfwkey, 0);
+        int glfwKey = GlfwKeyMap.fromJmeKeyCode(jmeKey);
+        return glfwGetKeyName(glfwKey, 0);
     }
 
 }

File: jme3-android/src/main/java/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -227,7 +227,7 @@ private class VideoProcessor implements SceneProcessor {
         private int width;
         private int height;
         private RenderManager renderManager;
-        private boolean isInitilized = false;
+        private boolean isInitialized = false;
         private LinkedBlockingQueue<WorkItem> freeItems;
         private LinkedBlockingQueue<WorkItem> usedItems = new LinkedBlockingQueue<>();
         private MjpegFileWriter writer;
@@ -273,7 +273,7 @@ public void initialize(RenderManager rm, ViewPort viewPort) {
             this.width = camera.getWidth();
             this.height = camera.getHeight();
             this.renderManager = rm;
-            this.isInitilized = true;
+            this.isInitialized = true;
             if (freeItems == null) {
                 freeItems = new LinkedBlockingQueue<WorkItem>();
                 for (int i = 0; i < numCpus; i++) {
@@ -288,7 +288,7 @@ public void reshape(ViewPort vp, int w, int h) {
 
         @Override
         public boolean isInitialized() {
-            return this.isInitilized;
+            return this.isInitialized;
         }
 
         @Override

File: jme3-core/src/main/java/com/jme3/animation/Skeleton.java
Patch:
@@ -138,7 +138,7 @@ public Object jmeClone() {
     public void cloneFields( Cloner cloner, Object original ) {
         this.rootBones = cloner.clone(rootBones);
         this.boneList = cloner.clone(boneList);
-        this.skinningMatrixes = cloner.clone(skinningMatrixes);    
+        this.skinningMatrixes = cloner.clone(skinningMatrixes);
     }
 
     private void createSkinningMatrices() {

File: jme3-core/src/main/java/com/jme3/environment/generation/IrradianceSphericalHarmonicsGenerator.java
Patch:
@@ -91,9 +91,9 @@ public Void call() throws Exception {
             }
         });
         try {
-            Vector3f[] shCoeffs = EnvMapUtils.getSphericalHarmonicsCoefficents(sourceMap);
-            EnvMapUtils.prepareShCoefs(shCoeffs);
-            store.setShCoeffs(shCoeffs);
+            Vector3f[] shCoefficients = EnvMapUtils.getSphericalHarmonicsCoefficents(sourceMap);
+            EnvMapUtils.prepareShCoefs(shCoefficients);
+            store.setShCoeffs(shCoefficients);
 
         } catch (Exception e) {
             e.printStackTrace();

File: jme3-core/src/main/java/com/jme3/scene/AssetLinkNode.java
Patch:
@@ -190,11 +190,11 @@ public void read(JmeImporter e) throws IOException {
 
     @Override
     public void write(JmeExporter e) throws IOException {
-        SafeArrayList<Spatial> childs = children;
+        SafeArrayList<Spatial> childList = children;
         children = new SafeArrayList<>(Spatial.class);
         super.write(e);
         OutputCapsule capsule = e.getCapsule(this);
         capsule.writeSavableArrayList(assetLoaderKeys, "assetLoaderKeyList", null);
-        children = childs;
+        children = childList;
     }
 }

File: jme3-core/src/main/java/com/jme3/shader/ShaderGenerator.java
Patch:
@@ -296,12 +296,12 @@ protected void appendNodeDeclarationAndMain(String loadedSource, StringBuilder s
      * @see ShaderNode#getDefinition()
      * @see ShaderNodeDefinition#getType()
      * 
-     * @param nodeDecalarationSource the declaration part of the node
+     * @param nodeDeclarationSource the declaration part of the node
      * @param source the StringBuilder to append generated code.
      * @param shaderNode the shaderNode.
      * @param info the ShaderGenerationInfo.
      */
-    protected abstract void generateDeclarativeSection(StringBuilder source, ShaderNode shaderNode, String nodeDecalarationSource, ShaderGenerationInfo info);
+    protected abstract void generateDeclarativeSection(StringBuilder source, ShaderNode shaderNode, String nodeDeclarationSource, ShaderGenerationInfo info);
 
     /**
      * generates the start of the shader main section. this method is

File: jme3-core/src/main/java/com/jme3/util/JmeFormatter.java
Patch:
@@ -46,13 +46,13 @@
 public class JmeFormatter extends Formatter {
 
     final private Date calendar = new Date();
-    final private String lineSeperator;
+    final private String lineSeparator;
     final private MessageFormat format;
     final private Object args[] = new Object[1];
     final private StringBuffer store = new StringBuffer();
 
     public JmeFormatter(){
-        lineSeperator = System.getProperty("line.separator");
+        lineSeparator = System.getProperty("line.separator");
         format = new MessageFormat("{0,time}");
     }
 
@@ -74,7 +74,7 @@ public String format(LogRecord record) {
         sb.append(record.getLevel().getLocalizedName()).append(" ");
         sb.append(clazz).append(" ");
         sb.append(store.toString()).append(" ");
-        sb.append(formatMessage(record)).append(lineSeperator);
+        sb.append(formatMessage(record)).append(lineSeparator);
 
         if (record.getThrown() != null) {
             try {

File: jme3-core/src/main/java/com/jme3/util/TangentBinormalGenerator.java
Patch:
@@ -276,7 +276,7 @@ private static  List<VertexData> processTriangles(Mesh mesh,
     private static List<VertexData> splitVertices(Mesh mesh, List<VertexData> vertexData, boolean splitMirorred) {
         int nbVertices = mesh.getBuffer(Type.Position).getNumElements();
         List<VertexData> newVertices = new ArrayList<>();
-        Map<Integer, Integer> indiceMap = new HashMap<>();
+        Map<Integer, Integer> indexMap = new HashMap<>();
         FloatBuffer normalBuffer = mesh.getFloatBuffer(Type.Normal);
 
         for (int i = 0; i < vertexData.size(); i++) {
@@ -309,7 +309,7 @@ private static List<VertexData> splitVertices(Mesh mesh, List<VertexData> vertex
                 
                 newVertices.add(newVert);
                 //keep vertex index to fix the index buffers later
-                indiceMap.put(nbVertices, i);
+                indexMap.put(nbVertices, i);
                 for (TriangleData tri : newVert.triangles) {
                     for (int j = 0; j < tri.index.length; j++) {
                         if(tri.index[j] == i){
@@ -362,7 +362,7 @@ private static List<VertexData> splitVertices(Mesh mesh, List<VertexData> vertex
                         int index = vertexData.size();                      
                         newVerts.position(vertexData.size() * vb.getNumComponents());
                         for (int j = 0; j < newVertices.size(); j++) {
-                            int oldInd = indiceMap.get(index) ;
+                            int oldInd = indexMap.get(index) ;
                             for (int i = 0; i < vb.getNumComponents(); i++) {                                
                                     putValue(vb.getFormat(), newVerts, buffer, oldInd* vb.getNumComponents() + i);
                             }                            

File: jme3-desktop/src/main/java/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -218,7 +218,7 @@ private class VideoProcessor implements SceneProcessor {
         private int width;
         private int height;
         private RenderManager renderManager;
-        private boolean isInitilized = false;
+        private boolean isInitialized = false;
         private LinkedBlockingQueue<WorkItem> freeItems;
         private LinkedBlockingQueue<WorkItem> usedItems = new LinkedBlockingQueue<>();
         private MjpegFileWriter writer;
@@ -258,7 +258,7 @@ public void initialize(RenderManager rm, ViewPort viewPort) {
             this.width = camera.getWidth();
             this.height = camera.getHeight();
             this.renderManager = rm;
-            this.isInitilized = true;
+            this.isInitialized = true;
             if (freeItems == null) {
                 freeItems = new LinkedBlockingQueue<WorkItem>();
                 for (int i = 0; i < numCpus; i++) {
@@ -273,7 +273,7 @@ public void reshape(ViewPort vp, int w, int h) {
 
         @Override
         public boolean isInitialized() {
-            return this.isInitilized;
+            return this.isInitialized;
         }
 
         @Override

File: jme3-examples/src/main/java/jme3test/bullet/TestFancyCar.java
Patch:
@@ -123,10 +123,10 @@ private void buildPlayer() {
         //Load model and get chassis Geometry
         carNode = (Node) assetManager.loadModel("Models/Ferrari/Car.scene");
         carNode.setShadowMode(ShadowMode.Cast);
-        Geometry chasis = findGeom(carNode, "Car");
+        Geometry chassis = findGeom(carNode, "Car");
 
         //Create a hull collision shape for the chassis
-        CollisionShape carHull = CollisionShapeFactory.createDynamicMeshShape(chasis);
+        CollisionShape carHull = CollisionShapeFactory.createDynamicMeshShape(chassis);
 
         //Create a vehicle control
         player = new VehicleControl(carHull, mass);

File: jme3-examples/src/main/java/jme3test/games/RollingTheMonkey.java
Patch:
@@ -220,8 +220,8 @@ public void simpleInitApp() {
         Quaternion rotation = new Quaternion();
         Vector3f translation = new Vector3f(0.0f, PICKUP_SIZE * 1.5f, -PICKUP_RADIUS);
         int index = 0;
-        float ammount = FastMath.TWO_PI / PICKUP_COUNT;
-        for(float angle = 0; angle < FastMath.TWO_PI; angle += ammount) {
+        float amount = FastMath.TWO_PI / PICKUP_COUNT;
+        for(float angle = 0; angle < FastMath.TWO_PI; angle += amount) {
             Geometry pickUp = new Geometry("pickUp" + (index++), new Box(PICKUP_SIZE,PICKUP_SIZE, PICKUP_SIZE));
             pickUp.setShadowMode(ShadowMode.CastAndReceive);
             pickUp.setMaterial(materialYellow);

File: jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -395,10 +395,10 @@ public void update(float time, int maxSteps) {
 
     public void distributeEvents() {
         //add collision callbacks
-        int clistsize = collisionListeners.size();
+        int cListSize = collisionListeners.size();
         while( collisionEvents.isEmpty() == false ) {
             PhysicsCollisionEvent physicsCollisionEvent = collisionEvents.pop();
-            for(int i=0;i<clistsize;i++) {
+            for(int i=0;i<cListSize;i++) {
                 collisionListeners.get(i).collision(physicsCollisionEvent);
             }
             //recycle events

File: jme3-jbullet/src/main/java/com/jme3/bullet/util/Converter.java
Patch:
@@ -259,11 +259,11 @@ public static Mesh convert(IndexedMesh mesh) {
         jmeMesh.setBuffer(Type.Index, 3, BufferUtils.createShortBuffer(mesh.numTriangles * 3));
         jmeMesh.setBuffer(Type.Position, 3, BufferUtils.createFloatBuffer(mesh.numVertices * 3));
 
-        IndexBuffer indicess = jmeMesh.getIndexBuffer();
+        IndexBuffer indices = jmeMesh.getIndexBuffer();
         FloatBuffer vertices = jmeMesh.getFloatBuffer(Type.Position);
 
         for (int i = 0; i < mesh.numTriangles * 3; i++) {
-            indicess.put(i, mesh.triangleIndexBase.getInt(i * 4));
+            indices.put(i, mesh.triangleIndexBase.getInt(i * 4));
         }
 
         for (int i = 0; i < mesh.numVertices * 3; i++) {

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -294,8 +294,8 @@ private void startSharedGeom(String vertexcount) throws SAXException {
         mesh = sharedMesh;
     }
 
-    private void startGeometry(String vertexcount) throws SAXException {
-        vertCount = parseInt(vertexcount);
+    private void startGeometry(String vertexCount) throws SAXException {
+        vertCount = parseInt(vertexCount);
     }
 
     /**

File: jme3-android-examples/src/main/java/org/jmonkeyengine/jme3androidexamples/MainActivity.java
Patch:
@@ -263,7 +263,7 @@ private boolean checkClassName(String className) {
         boolean include = true;
         /* check to see if the class in inside the rootPackage package */
         if (className.startsWith(rootPackage)) {
-            /* check to see if the class contains any of the exlusion strings */
+            /* check to see if the class contains any of the exclusion strings */
             for (int i = 0; i < exclusions.size(); i++) {
                 if (className.contains(exclusions.get(i))) {
                     Log.d(TAG, "Skipping Class " + className + ". Includes exclusion string: " + exclusions.get(i) + ".");

File: jme3-android/src/main/java/com/jme3/app/AndroidHarness.java
Patch:
@@ -211,7 +211,7 @@ public void onCreate(Bundle savedInstanceState) {
             logger.log(Level.FINE, "Using Retained App");
             this.app = data.app;
         } else {
-            // Discover the screen reolution
+            // Discover the screen resolution
             //TODO try to find a better way to get a hand on the resolution
             WindowManager wind = this.getWindowManager();
             Display disp = wind.getDefaultDisplay();

File: jme3-android/src/main/java/com/jme3/input/android/AndroidGestureProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -116,11 +116,11 @@ public void onLongPress(MotionEvent event) {
 
     @Override
     public boolean onScroll(MotionEvent startEvent, MotionEvent endEvent, float distX, float distY) {
-        // if not scaleInProgess, send scroll events.  This is to avoid sending
+        // if not scaleInProgress, send scroll events.  This is to avoid sending
         // scroll events when one of the fingers is lifted just before the other one.
         // Avoids sending the scroll for that brief period of time.
         // Return true so that the next event doesn't accumulate the distX and distY values.
-        // Apparantly, both distX and distY are negative.
+        // Apparently, both distX and distY are negative.
         // Negate distX to get the real value, but leave distY negative to compensate
         // for the fact that jME has y=0 at bottom where Android has y=0 at top.
         if (!touchInput.getScaleDetector().isInProgress()) {

File: jme3-android/src/main/java/com/jme3/input/android/AndroidJoyInput.java
Patch:
@@ -59,7 +59,7 @@
  * case, when joystick.rumble(rumbleAmount) is called, the Android device will vibrate
  * if the device has a built in vibrate motor.
  *
- * Because Andorid does not allow for the user to define the intensity of the
+ * Because Android does not allow for the user to define the intensity of the
  * vibration, the rumble amount (ie strength) is converted into vibration pulses
  * The stronger the strength amount, the shorter the delay between pulses.  If
  * amount is 1, then the vibration stays on the whole time.  If amount is 0.5,

File: jme3-android/src/main/java/com/jme3/input/android/AndroidTouchInput.java
Patch:
@@ -57,7 +57,7 @@
  * AndroidTouchInput is the base class that receives touch inputs from the
  * Android system and creates the TouchEvents for jME.  This class is designed
  * to handle the base touch events for Android rev 9 (Android 2.3).  This is
- * extended by other classes to add features that were introducted after
+ * extended by other classes to add features that were introduced after
  * Android rev 9.
  *
  * @author iwgeric

File: jme3-bullet/src/common/java/com/jme3/bullet/control/BetterCharacterControl.java
Patch:
@@ -219,7 +219,7 @@ public void prePhysicsTick(PhysicsSpace space, float tpf) {
         float designatedVelocity = walkDirection.length();
         if (designatedVelocity > 0) {
             Vector3f localWalkDirection = vars.vect1;
-            //normalize walkdirection
+            //normalize walkDirection
             localWalkDirection.set(walkDirection).normalizeLocal();
             //check for the existing velocity in the desired direction
             float existingVelocity = velocity.dot(localWalkDirection);

File: jme3-bullet/src/common/java/com/jme3/bullet/control/ragdoll/RagdollUtils.java
Patch:
@@ -323,7 +323,7 @@ public static void setTransform(Bone bone, Vector3f pos, Quaternion rot, boolean
                 setTransform(childBone, t.getTranslation(), t.getRotation(), restoreBoneControl, boneList);
             }
         }
-        //we give back the control to the keyframed animation
+        // return control to the keyframe animation
         if (restoreBoneControl) {
             bone.setUserControl(false);
         }

File: jme3-bullet/src/common/java/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -185,7 +185,7 @@ private static CompoundCollisionShape createBoxCompoundShape(Node rootNode) {
      * @param spatial the spatial on which to base the shape (not null)
      * @return A MeshCollisionShape or a CompoundCollisionShape with
      * MeshCollisionShapes as children if the supplied spatial is a Node. A
-     * HeightieldCollisionShape if a TerrainQuad was supplied.
+     * HeightfieldCollisionShape if a TerrainQuad was supplied.
      */
     public static CollisionShape createMeshShape(Spatial spatial) {
         if (spatial instanceof TerrainQuad) {

File: jme3-core/src/main/java/com/jme3/anim/AnimFactory.java
Patch:
@@ -58,7 +58,7 @@
  * it's possible for
  * {@link #buildAnimation(com.jme3.anim.util.HasLocalTransform)} to negate the
  * final rotation. To prevent an unwanted rotation at the end of the loop, you
- * may need to add intemediate rotation keyframes.
+ * may need to add intermediate rotation keyframes.
  *
  * Inspired by Nehon's {@link com.jme3.animation.AnimationFactory}.
  */

File: jme3-core/src/main/java/com/jme3/anim/SkinningControl.java
Patch:
@@ -337,7 +337,7 @@ void resetToBind() {
                 bpb.clear();
                 bnb.clear();
 
-                //reseting bind tangents if there is a bind tangent buffer
+                //resetting bind tangents if there is a bind tangent buffer
                 VertexBuffer bindTangents = mesh.getBuffer(Type.BindPoseTangent);
                 if (bindTangents != null) {
                     VertexBuffer tangents = mesh.getBuffer(Type.Tangent);
@@ -457,7 +457,7 @@ private void softwareSkinUpdate(Mesh mesh, Matrix4f[] offsetMatrices) {
      * Method to apply skinning transforms to a mesh's buffers
      *
      * @param mesh           the mesh
-     * @param offsetMatrices the offset matices to apply
+     * @param offsetMatrices the offset matrices to apply
      */
     private void applySkinning(Mesh mesh, Matrix4f[] offsetMatrices) {
         int maxWeightsPerVert = mesh.getMaxNumWeights();

File: jme3-core/src/main/java/com/jme3/anim/tween/AbstractTween.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-2020 jMonkeyEngine
+ * Copyright (c) 2015-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -36,7 +36,7 @@
 
 /**
  * Base implementation of the Tween interface that provides
- * default implementations of the getLength() and interopolate()
+ * default implementations of the getLength() and interpolate()
  * methods that provide common tween clamping and bounds checking.
  * Subclasses need only override the doInterpolate() method and
  * the rest is handled for them.

File: jme3-core/src/main/java/com/jme3/animation/AnimationFactory.java
Patch:
@@ -84,7 +84,7 @@ protected class Rotation {
          */
         Vector3f eulerAngles = new Vector3f();
         /**
-         * the index of the parent key frame is this keyFrame is a splitted rotation
+         * the index of the parent key frame is this keyFrame is a split rotation
          */
         int masterKeyFrame = -1;
 
@@ -425,11 +425,11 @@ private void interpolate(Object[] keyFrames, Type type) {
             if (key != -1) {
                 //computing the frame span to interpolate over
                 int span = key - i;
-                //interating over the frames
+                //iterating over the frames
                 for (int j = i; j <= key; j++) {
                     // computing interpolation value
                     float val = (j - i) / (float) span;
-                    //interpolationg depending on the transform type
+                    //interpolating depending on the transform type
                     switch (type) {
                         case Translation:
                             translations[j] = FastMath.interpolateLinear(val, (Vector3f) keyFrames[i], (Vector3f) keyFrames[key]);

File: jme3-core/src/main/java/com/jme3/animation/AudioTrack.java
Patch:
@@ -49,7 +49,7 @@
  * usage is
  * <pre>
  * AnimControl control model.getControl(AnimControl.class);
- * AudioTrack track = new AudioTrack(existionAudioNode, control.getAnim("TheAnim").getLength());
+ * AudioTrack track = new AudioTrack(existingAudioNode, control.getAnim("TheAnim").getLength());
  * control.getAnim("TheAnim").addTrack(track);
  * </pre>
  *

File: jme3-core/src/main/java/com/jme3/animation/SkeletonControl.java
Patch:
@@ -453,7 +453,7 @@ private void softwareSkinUpdate(Mesh mesh, Matrix4f[] offsetMatrices) {
      * Method to apply skinning transforms to a mesh's buffers
      *
      * @param mesh the mesh
-     * @param offsetMatrices the offset matices to apply
+     * @param offsetMatrices the offset matrices to apply
      */
     private void applySkinning(Mesh mesh, Matrix4f[] offsetMatrices) {
         int maxWeightsPerVert = mesh.getMaxNumWeights();
@@ -560,7 +560,7 @@ private void applySkinning(Mesh mesh, Matrix4f[] offsetMatrices) {
      *
      * @param maxWeightsPerVert maximum number of weights per vertex
      * @param mesh the mesh
-     * @param offsetMatrices the offsetMaytrices to apply
+     * @param offsetMatrices the offset matrices to apply
      * @param tb the tangent vertexBuffer
      */
     private void applySkinningTangents(Mesh mesh, Matrix4f[] offsetMatrices, VertexBuffer tb) {

File: jme3-core/src/main/java/com/jme3/app/Application.java
Patch:
@@ -169,13 +169,13 @@ public interface Application {
 
     /**
      * Starts the application.
-     * A bug occuring when using LWJGL3 prevents this method from returning until after the application is stopped.
+     * A bug occurring when using LWJGL3 prevents this method from returning until after the application is stopped.
      */
     public void start();
 
     /**
      * Starts the application.
-     * A bug occuring when using LWJGL3 prevents this method from returning until after the application is stopped.
+     * A bug occurring when using LWJGL3 prevents this method from returning until after the application is stopped.
      *
      * @param waitFor true&rarr;wait for the context to be initialized,
      * false&rarr;don't wait

File: jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
Patch:
@@ -274,7 +274,7 @@ public Timer getTimer(){
     }
 
     private void initDisplay(){
-        // aquire important objects
+        // acquire important objects
         // from the context
         settings = context.getSettings();
 
@@ -310,7 +310,7 @@ private void initCamera(){
         cam.lookAt(new Vector3f(0f, 0f, 0f), Vector3f.UNIT_Y);
 
         renderManager = new RenderManager(renderer);
-        //Remy - 09/14/2010 setted the timer in the renderManager
+        //Remy - 09/14/2010 set the timer in the renderManager
         renderManager.setTimer(timer);
 
         if (prof != null) {

File: jme3-core/src/main/java/com/jme3/app/ResetStatsState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -39,7 +39,7 @@
  *  Resets (clearFrame()) the render's stats object every frame
  *  during AppState.render().  This state is registered once
  *  with Application to ensure that the stats are cleared once
- *  a frame.  Using this makes sure that any Appliction based
+ *  a frame.  Using this makes sure that any Application-based
  *  application that properly runs its state manager will have
  *  stats reset no matter how many views it has or if it even
  *  has views.

File: jme3-core/src/main/java/com/jme3/app/state/AppState.java
Patch:
@@ -35,7 +35,7 @@
 import com.jme3.renderer.RenderManager;
 
 /**
- * AppState represents continously executing code inside the main loop.
+ * AppState represents continuously executing code inside the main loop.
  * 
  * An <code>AppState</code> can track when it is attached to the 
  * {@link AppStateManager} or when it is detached. 

File: jme3-core/src/main/java/com/jme3/asset/ShaderNodeDefinitionKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -38,7 +38,7 @@
 /**
  * Used for loading {@link ShaderNodeDefinition shader nodes definition}
  *
- * Tells if the defintion has to be loaded with or without its documentation
+ * Determines whether the definition will be loaded with or without its documentation
  */
 public class ShaderNodeDefinitionKey extends AssetKey<List<ShaderNodeDefinition>> {
 

File: jme3-core/src/main/java/com/jme3/asset/cache/WeakRefAssetCache.java
Patch:
@@ -88,7 +88,7 @@ private void removeCollectedAssets(){
     public <T> void addToCache(AssetKey<T> key, T obj) {
         removeCollectedAssets();
         
-        // NOTE: Some thread issues can hapen if another
+        // NOTE: Some thread issues can happen if another
         // thread is loading an asset with the same key ..
         AssetRef ref = new AssetRef(key, obj, refQueue);
         assetCache.put(key, ref);

File: jme3-core/src/main/java/com/jme3/audio/AudioNode.java
Patch:
@@ -52,7 +52,7 @@
  * An AudioNode is either positional or ambient, with positional being the
  * default. Once a positional node is attached to the scene, its location and
  * velocity relative to the {@link Listener} affect how it sounds when played.
- * Positional nodes can only play monoaural (single-channel) assets, not stereo
+ * Positional nodes can only play monaural (single-channel) assets, not stereo
  * ones.
  *
  * An ambient AudioNode plays in "headspace", meaning that the node's location

File: jme3-core/src/main/java/com/jme3/audio/openal/AL.java
Patch:
@@ -469,7 +469,7 @@ public interface AL {
     public int alGetSourcei(int source, int param);
 
     /**
-     * Removes a number of buffer entries that have finished processing, in the order of apperance, from the queue of the specified source.
+     * Removes a number of buffer entries that have finished processing, in the order of appearance, from the queue of the specified source.
      *
      * <p>Once a queue entry for a buffer has been appended to a queue and is pending processing, it should not be changed. Removal of a given queue entry is not
      * possible unless either the source is stopped (in which case then entire queue is considered processed), or if the queue entry has already been processed

File: jme3-core/src/main/java/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -66,7 +66,7 @@ public class BoundingSphere extends BoundingVolume {
     private static final float RADIUS_EPSILON = 1f + 0.00001f;
 
     /**
-     * Default contstructor instantiates a new <code>BoundingSphere</code>
+     * Default constructor instantiates a new <code>BoundingSphere</code>
      * object.
      */
     public BoundingSphere() {
@@ -206,7 +206,7 @@ public void calcWelzl(FloatBuffer points) {
      *            The number of points currently considering to include with the
      *            sphere.
      * @param ap
-     *            A variable simulating pointer arithmatic from C++, and offset
+     *            A variable simulating pointer arithmetic from C++, and offset
      *            in <code>points</code>.
      */
     private void recurseMini(FloatBuffer points, int p, int b, int ap) {

File: jme3-core/src/main/java/com/jme3/bounding/BoundingVolume.java
Patch:
@@ -78,7 +78,7 @@ public BoundingVolume(Vector3f center) {
     }
 
     /**
-     * Grabs the checkplane we should check first.
+     * Grabs the plane we should check first.
      *
      * @return the index of the plane to be checked first
      */

File: jme3-core/src/main/java/com/jme3/bounding/Intersection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -140,7 +140,7 @@ public static boolean intersect(BoundingBox bbox, Vector3f v1, Vector3f v2, Vect
         //  1) the {x,y,z}-directions (actually, since we use the AABB of the triangle
         //     we do not even need to test these)
         //  2) normal of the triangle
-        //  3) crossproduct(edge from tri, {x,y,z}-directin)
+        //  3) cross product (edge from tri, {x,y,z}-direction)
         //       this gives 3x3=9 more tests
 
         TempVars vars = TempVars.get();

File: jme3-core/src/main/java/com/jme3/bounding/OrientedBoundingBox.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -108,7 +108,7 @@
 //    public final Vector3f[] vectorStore = new Vector3f[8];
 //
 //    private final Vector3f tempVk = new Vector3f();
-//    private final Vector3f tempForword = new Vector3f(0, 0, 1);
+//    private final Vector3f tempForward = new Vector3f(0, 0, 1);
 //    private final Vector3f tempLeft = new Vector3f(1, 0, 0);
 //    private final Vector3f tempUp = new Vector3f(0, 1, 0);
 //
@@ -880,7 +880,7 @@
 //
 //        // convenience variables
 //        Vector3f akA[] = new Vector3f[] { xAxis, yAxis, zAxis };
-//        Vector3f[] akB = new Vector3f[] { tempForword, tempLeft, tempUp };
+//        Vector3f[] akB = new Vector3f[] { tempForward, tempLeft, tempUp };
 //        Vector3f afEA = extent;
 //        Vector3f afEB = tempVk.set(bb.xExtent, bb.yExtent, bb.zExtent);
 //

File: jme3-core/src/main/java/com/jme3/cinematic/MotionPath.java
Patch:
@@ -293,7 +293,7 @@ public void disableDebugShape() {
      */
     public void enableDebugShape(AssetManager manager, Node rootNode) {
         assetManager = manager;
-        // computeTotalLentgh();
+        // computeTotalLength();
         attachDebugNode(rootNode);
     }
 

File: jme3-core/src/main/java/com/jme3/cinematic/events/AbstractCinematicEvent.java
Patch:
@@ -235,7 +235,7 @@ public float getSpeed() {
     }
 
     /**
-     * Returns the current playstate of the animation (playing or paused or stopped).
+     * Returns the current play state of the animation (playing or paused or stopped).
      * @return the enum value
      */
     @Override

File: jme3-core/src/main/java/com/jme3/cinematic/events/AnimationEvent.java
Patch:
@@ -307,7 +307,7 @@ public void initEvent(Application app, Cinematic cinematic) {
                 if (model == null) {
                     //the model is null we try to find it according to the name
                     //this should occur only when loading an old saved cinematic
-                    //othewise it's an error
+                    //otherwise it's an error
                     model = cinematic.getScene().getChild(modelName);
                 }
                 if (model != null) {
@@ -442,7 +442,7 @@ public void read(JmeImporter im) throws IOException {
         //FIXME always the same issue, because of the cloning of assets, this won't work
         //we have to somehow store userdata in the spatial and then recurse the 
         //scene sub scenegraph to find the correct instance of the model
-        //This brings a reflaxion about the cinematic being an appstate, 
+        //This brings a reflection about the cinematic being an appstate,
         //shouldn't it be a control over the scene
         // this would allow to use the cloneForSpatial method and automatically 
         //rebind cloned references of original objects.

File: jme3-core/src/main/java/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -253,7 +253,7 @@ public void cloneFields( Cloner cloner, Object original ) {
         setMeshType(meshType);
 
         // change in behavior: temp and lastPos were not cloned before...
-        // perhaps because it was believed that 'transient' fields were exluded
+        // perhaps because it was believed that 'transient' fields were excluded
         // from cloning?  (they aren't)
         // If it was ok for these to be shared because of how they are used
         // then they could just as well be made static... else I think it's clearer

File: jme3-core/src/main/java/com/jme3/effect/ParticleMesh.java
Patch:
@@ -66,7 +66,7 @@ public enum Type {
      * Initialize mesh data.
      * 
      * @param emitter The emitter which will use this <code>ParticleMesh</code>.
-     * @param numParticles The maxmimum number of particles to simulate
+     * @param numParticles The maximum number of particles to simulate
      */
     public abstract void initParticleData(ParticleEmitter emitter, int numParticles);
     

File: jme3-core/src/main/java/com/jme3/effect/influencers/DefaultParticleInfluencer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -50,7 +50,7 @@
  */
 public class DefaultParticleInfluencer implements ParticleInfluencer {
 
-    //Version #1 : changed startVelocity to initialvelocity for consistency with accessors
+    //Version #1 : changed startVelocity to initialVelocity for consistency with accessors
     //and also changed it in serialization
     public static final int SAVABLE_VERSION = 1;
     /** Temporary variable used to help with calculations. */

File: jme3-core/src/main/java/com/jme3/effect/shapes/EmitterMeshConvexHullShape.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -69,7 +69,7 @@ public EmitterMeshConvexHullShape(List<Mesh> meshes) {
     @Override
     public void getRandomPoint(Vector3f store) {
         super.getRandomPoint(store);
-        // now move the point from the meshe's face towards the center of the mesh
+        // now move the point from the mesh's face toward the center of the mesh
         // the center is in (0, 0, 0) in the local coordinates
         store.multLocal(FastMath.nextRandomFloat());
     }
@@ -87,7 +87,7 @@ public void getRandomPoint(Vector3f store) {
     @Override
     public void getRandomPointAndNormal(Vector3f store, Vector3f normal) {
         super.getRandomPointAndNormal(store, normal);
-        // now move the point from the meshe's face towards the center of the mesh
+        // now move the point from the mesh's face toward the center of the mesh
         // the center is in (0, 0, 0) in the local coordinates
         store.multLocal(FastMath.nextRandomFloat());
     }

File: jme3-core/src/main/java/com/jme3/environment/EnvironmentCamera.java
Patch:
@@ -363,7 +363,7 @@ protected Camera createOffCamera(final int mapSize, final Vector3f worldPos, fin
     }
 
     /**
-     * creates an offsceen VP
+     * creates an off-screen VP
      *
      * @param name the desired name for the offscreen viewport
      * @param offCamera the Camera to be used (alias created)

File: jme3-core/src/main/java/com/jme3/environment/generation/JobProgressListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -48,7 +48,7 @@ public interface JobProgressListener<T> {
     
     /**
      * Can be called when a step of the process has been completed with a relevant message.
-     * @param message the message stating of the paricular step completion.
+     * @param message the message stating of the particular step completion.
      */
     public void step(String message);
     

File: jme3-core/src/main/java/com/jme3/environment/generation/PrefilteredEnvMapFaceGenerator.java
Patch:
@@ -147,7 +147,7 @@ public Void call() throws Exception {
 
     /**
      * Generates the prefiltered env map (used for image based specular
-     * lighting) With the GGX/Shlick brdf
+     * lighting) With the GGX/Schlick brdf
      * {@link EnvMapUtils#getSphericalHarmonicsCoefficents(com.jme3.texture.TextureCubeMap)}
      * Note that the output cube map is in RGBA8 format.
      *

File: jme3-core/src/main/java/com/jme3/environment/util/CubeMapWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -201,7 +201,7 @@ public void setPixel(Vector3f vector, int mipLevel, ColorRGBA color) {
     }
 
     /**
-     * Writes a pixel given the 2D cordinates and the color
+     * Writes a pixel given the 2-D coordinates and the color
      * @param x the x tex coord (from 0 to width)
      * @param y the y tex coord (from 0 to height)
      * @param face the face to write to
@@ -213,7 +213,7 @@ public void setPixel(int x, int y, int face, ColorRGBA color) {
     }
 
     /**
-     * Writes a pixel given the 2D cordinates, the mip level and the color
+     * Writes a pixel given the 2-D coordinates, the mip level and the color
      * @param x the x tex coord (from 0 to width)
      * @param y the y tex coord (from 0 to height)
      * @param face the face to write to

File: jme3-core/src/main/java/com/jme3/environment/util/LightsDebugState.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.Map;
 
 /**
- * A debug state that will display LIght gizmos on screen.
+ * A debug state that will display Light gizmos on screen.
  * Still a wip and for now it only displays light probes.
  * 
  * @author nehon

File: jme3-core/src/main/java/com/jme3/export/SavableClassUtil.java
Patch:
@@ -174,7 +174,7 @@ public static int getSavedSavableVersion(Object savable, Class<? extends Savable
      * @param className the class name to create.
      * @return the Savable instance of the class.
      * @throws InstantiationException thrown if the class does not have an empty constructor.
-     * @throws IllegalAccessException thrown if the class is not accessable.
+     * @throws IllegalAccessException thrown if the class is not accessible.
      * @throws InvocationTargetException if the underlying constructor throws an exception
      * @throws ClassNotFoundException thrown if the class name is not in the classpath.
      */

File: jme3-core/src/main/java/com/jme3/font/BitmapFont.java
Patch:
@@ -191,7 +191,7 @@ public float getLineWidth(CharSequence text){
         //
         // The way BitmapText ultimately works is that the first character
         // starts with xOffset included (ie: it is rendered at -xOffset).
-        // Its xAdvance is wider to accomodate that initial offset.
+        // Its xAdvance is wider to accommodate that initial offset.
         // The cursor position is advanced by xAdvance each time.
         //
         // So, a width should be calculated in a similar way.  Start with
@@ -231,7 +231,7 @@ public float getLineWidth(CharSequence text){
                     lineWidth += findKerningAmount(lastChar, theChar) * sizeScale;                    
                 } else {
                     // The first character needs to add in its xOffset but it
-                    // is the only one... and negative offsets = postive width
+                    // is the only one... and negative offsets = positive width
                     // because we're trying to account for the part that hangs
                     // over the left.  So we subtract. 
                     lineWidth -= c.getXOffset() * sizeScale;                    

File: jme3-core/src/main/java/com/jme3/font/BitmapText.java
Patch:
@@ -427,7 +427,7 @@ public void updateLogicalState(float tpf) {
     }
 
     private void assemble() {
-        // first generate quadlist
+        // first generate quad list
         letters.update();
         for (int i = 0; i < textPages.length; i++) {
             textPages[i].assemble(letters);

File: jme3-core/src/main/java/com/jme3/font/BitmapTextPage.java
Patch:
@@ -93,10 +93,10 @@ class BitmapTextPage extends Geometry {
          * - Skye (sbook)
          */
         if (arrayBased) {
-            pos = new float[4 * 3];  // 4 verticies * 3 floats
-            tc = new float[4 * 2];  // 4 verticies * 2 floats
+            pos = new float[4 * 3];  // 4 vertices * 3 floats
+            tc = new float[4 * 2];  // 4 vertices * 2 floats
             idx = new short[2 * 3];  // 2 triangles * 3 indices
-            color = new byte[4 * 4];   // 4 verticies * 4 bytes
+            color = new byte[4 * 4];   // 4 vertices * 4 bytes
         } else {
             pos = null;
             tc = null;

File: jme3-core/src/main/java/com/jme3/input/CameraInput.java
Patch:
@@ -78,7 +78,7 @@ public class CameraInput {
     
         
     
-    //fly cameara constants
+    //fly camera constants
     /**
      * Fly camera mapping to look left. Default assigned to MouseInput.AXIS_X,
      * direction negative

File: jme3-core/src/main/java/com/jme3/input/ChaseCamera.java
Patch:
@@ -401,7 +401,7 @@ protected void updateCamera(float tpf) {
                 targetDir.set(targetLocation).subtractLocal(prevPos);
                 float dist = targetDir.length();
 
-                //Low pass filtering on the target postition to avoid shaking when physics are enabled.
+                //Low pass filtering on the target position to avoid shaking when physics are enabled.
                 if (offsetDistance < dist) {
                     //target moves, start chasing.
                     chasing = true;
@@ -412,8 +412,8 @@ protected void updateCamera(float tpf) {
                     //target moves...
                     targetMoves = true;
                 } else {
-                    //if target was moving, we compute a slight offset in rotation to avoid a rought stop of the cam
-                    //We do not if the player is rotationg the cam
+                    //if target was moving, we compute a slight offset in rotation to avoid a rough stop of the cam
+                    //We do not if the player is rotating the cam
                     if (targetMoves && !canRotate) {
                         if (targetRotation - rotation > trailingRotationInertia) {
                             targetRotation = rotation + trailingRotationInertia;

File: jme3-core/src/main/java/com/jme3/input/FlyByCamera.java
Patch:
@@ -307,7 +307,7 @@ protected void mapJoystick( Joystick joystick ) {
             joystick.getPovYAxis().assignAxis(CameraInput.FLYCAM_RISE, CameraInput.FLYCAM_LOWER);
 
             if( joystick.getButton( "Button 8" ) != null ) {
-                // Let the stanard select button be the y invert toggle
+                // Let the standard select button be the y invert toggle
                 joystick.getButton( "Button 8" ).assignButton( CameraInput.FLYCAM_INVERTY );
             }
 

File: jme3-core/src/main/java/com/jme3/input/SensorJoystickAxis.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -47,7 +47,7 @@ public interface SensorJoystickAxis {
 
     /**
      * Calibrates the axis to the current value.  Future axis values will be
-     * sent as a delta from the calibratation value.
+     * sent as a delta from the calibration value.
      */
     public void calibrateCenter();
     

File: jme3-core/src/main/java/com/jme3/light/LightProbe.java
Patch:
@@ -236,7 +236,7 @@ public AreaType getAreaType(){
 
     /**
      * return true if the LightProbe is ready, meaning the Environment maps have
-     * been loaded or rnedered and are ready to be used by a material
+     * been loaded or rendered and are ready to be used by a material
      * @return the LightProbe ready state
      */
     public boolean isReady() {
@@ -263,15 +263,15 @@ public void setShCoeffs(Vector3f[] shCoeffs) {
 
     /**
      * Returns the position of the LightProbe in world space
-     * @return the wolrd space position
+     * @return the world-space position
      */
     public Vector3f getPosition() {
         return position;
     }
 
     /**
      * Sets the position of the LightProbe in world space
-     * @param position the wolrd space position
+     * @param position the world-space position
      */
     public void setPosition(Vector3f position) {
         this.position.set(position);

File: jme3-core/src/main/java/com/jme3/light/OrientedBoxProbeArea.java
Patch:
@@ -156,7 +156,7 @@ private Vector3f getClosestPoint(TempVars vars, Vector3f point) {
         for (int i = 0; i < 3; i++) {
             // extract the axis from the 3x3 matrix
             Vector3f axis = getScaledAxis(i, vars.vect1);
-            // nomalize (here we just divide by the extent
+            // normalize (here we just divide by the extent)
             axis.divideLocal(r[i]);
             // distance to the closest point on this axis.
             float d = FastMath.clamp(dir.dot(axis), -r[i], r[i]);

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -940,7 +940,7 @@ public void setStencil(boolean enabled,
     }
 
     /**
-     * Set the depth conparison function to the given TestFunction 
+     * Set the depth comparison function to the given TestFunction
      * default is LessOrEqual (GL_LEQUAL)
      * @see TestFunction
      * @see RenderState#setDepthTest(boolean) 

File: jme3-core/src/main/java/com/jme3/material/ShaderGenerationInfo.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.List;
 
 /**
- * this class is basically a struct that contains the ShaderNodes informations
+ * This class is basically a struct that contains the ShaderNodes information
  * in an appropriate way to ease the shader generation process and make it
  * faster.
  *
@@ -105,7 +105,7 @@ public List<ShaderNodeVariable> getFragmentUniforms() {
 
     /**
      *
-     * @return the vertex shader global ouput
+     * @return the vertex shader global output
      */
     public ShaderNodeVariable getVertexGlobal() {
         return vertexGlobal;
@@ -156,7 +156,7 @@ public void setUnusedNodes(List<String> unusedNodes) {
     /**
      * convenient toString method
      *
-     * @return the informations
+     * @return the information
      */
     @Override
     public String toString() {

File: jme3-core/src/main/java/com/jme3/material/logic/MultiPassLightingLogic.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -111,7 +111,7 @@ public void render(RenderManager renderManager, Shader shader, Geometry geometry
                 case Directional:
                     DirectionalLight dl = (DirectionalLight) l;
                     Vector3f dir = dl.getDirection();
-                    //FIXME : there is an inconstency here due to backward
+                    //FIXME : there is an inconsistency here due to backward
                     //compatibility of the lighting shader.
                     //The directional light direction is passed in the
                     //LightPosition uniform. The lighting shader needs to be

File: jme3-core/src/main/java/com/jme3/material/logic/SinglePassAndImageBasedLightingLogic.java
Patch:
@@ -233,7 +233,7 @@ protected int updateLightListUniforms(Shader shader, Geometry g, LightList light
         }
         vars.release();
 
-        //Padding of unsued buffer space
+        // pad unused buffer space
         while(lightDataIndex < numLights * 3) {
             lightData.setVector4InArray(0f, 0f, 0f, 0f, lightDataIndex);
             lightDataIndex++;

File: jme3-core/src/main/java/com/jme3/material/logic/SinglePassLightingLogic.java
Patch:
@@ -197,7 +197,7 @@ protected int updateLightListUniforms(Shader shader, Geometry g, LightList light
             }
         }
         vars.release();
-        //Padding of unsued buffer space
+        // pad unused buffer space
         while(lightDataIndex < numLights * 3) {
             lightData.setVector4InArray(0f, 0f, 0f, 0f, lightDataIndex);
             lightDataIndex++;

File: jme3-core/src/main/java/com/jme3/math/Matrix3f.java
Patch:
@@ -643,7 +643,7 @@ public Matrix3f set(int i, int j, float value) {
 
     /**
      * <code>set</code> sets the values of the matrix to those supplied by the
-     * 3x3 two dimenion array.
+     * 3x3 two-dimensional array.
      *
      * @param matrix
      *            the new values of the matrix.

File: jme3-core/src/main/java/com/jme3/math/Plane.java
Patch:
@@ -172,7 +172,7 @@ public float getConstant() {
      * Find the point in this plane that's nearest to the specified point.
      *
      * @param point location vector of the input point (not null, unaffected)
-     * @param store storage for the result (not null, modififed)
+     * @param store storage for the result (not null, modified)
      * @return a location in this plane (store)
      */
     public Vector3f getClosestPoint(Vector3f point, Vector3f store) {
@@ -196,7 +196,7 @@ public Vector3f getClosestPoint(Vector3f point) {
      * Reflect the specified point in this plane.
      *
      * @param point location vector of the input point (not null, unaffected)
-     * @param store storage for the result (modififed if not null)
+     * @param store storage for the result (modified if not null)
      * @return a location vector for the reflected point (either store or a new
      * vector)
      */

File: jme3-core/src/main/java/com/jme3/math/Quaternion.java
Patch:
@@ -1402,7 +1402,7 @@ public void writeExternal(ObjectOutput out) throws IOException {
     }
 
     /**
-     * <code>lookAt</code> is a convienence method for auto-setting the
+     * <code>lookAt</code> is a convenience method for auto-setting the
      * quaternion based on a direction and an up vector. It computes
      * the rotation to transform the z-axis to point into 'direction'
      * and the y-axis to 'up'.

File: jme3-core/src/main/java/com/jme3/math/Vector2f.java
Patch:
@@ -586,7 +586,7 @@ public float smallestAngleBetween(Vector2f otherVector) {
 
     /**
      * <code>angleBetween</code> returns (in radians) the angle required to
-     * rotate a ray represented by this vector to be colinear with a ray
+     * rotate a ray represented by this vector to be collinear with a ray
      * described by the given vector. It is assumed that both this vector and
      * the given vector are unit vectors (iow, normalized).
      *

File: jme3-core/src/main/java/com/jme3/opencl/CommandQueue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -37,7 +37,7 @@
  * queue to OpenCL function (buffer, image operations, kernel calls), it is
  * ensured that they are executed in the order in which they are passed.
  * <br>
- * Each command queue is associtated with exactly one device: that device
+ * Each command queue is associated with exactly one device: that device
  * is specified on creation ({@link Context#createQueue(com.jme3.opencl.Device) })
  * and all commands are sent to this device.
  *

File: jme3-core/src/main/java/com/jme3/opencl/DefaultPlatformChooser.java
Patch:
@@ -53,7 +53,7 @@ public List<? extends Device> chooseDevices(List<? extends Platform> platforms)
             }
             for (Device d : p.getDevices()) {
                 if (d.hasOpenGLInterop() && d.getDeviceType()==Device.DeviceType.GPU) {
-                    result.add(d); //GPU prefered
+                    result.add(d); //GPU preferred
                 }
             }
             if (!result.isEmpty()) {

File: jme3-core/src/main/java/com/jme3/opencl/Device.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -118,7 +118,7 @@ public static enum DeviceType {
     boolean hasOpenGLInterop();
 
     /**
-     * Explictly tests for the availability of the specified extension
+     * Explicitly tests for the availability of the specified extension
      *
      * @param extension the name of the extension
      * @return {@code true} iff this extension is supported
@@ -251,7 +251,7 @@ public static enum DeviceType {
      */
     int getMaximumConstantArguments();
 
-    //TODO: cache, prefered sizes properties
+    //TODO: cache, preferred sizes properties
     /**
      * OpenCL profile string. Returns the profile name supported by the device.
      * The profile name returned can be one of the following strings:<br>

File: jme3-core/src/main/java/com/jme3/opencl/OpenCLException.java
Patch:
@@ -45,15 +45,15 @@ public class OpenCLException extends RuntimeException {
     private final int errorCode;
 
     /**
-     * Creates a new instance of <code>OpenCLExceptionn</code> without detail
+     * Creates a new instance of <code>OpenCLException</code> without detail
      * message.
      */
     public OpenCLException() {
         errorCode = 0;
     }
 
     /**
-     * Constructs an instance of <code>OpenCLExceptionn</code> with the
+     * Constructs an instance of <code>OpenCLException</code> with the
      * specified detail message.
      *
      * @param msg the detail message.

File: jme3-core/src/main/java/com/jme3/opencl/OpenCLObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2016 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -33,7 +33,7 @@
 
 /**
  * Base interface of all native OpenCL objects.
- * This interface provides the functionality for savely release the object.
+ * This interface provides the functionality to safely release the object.
  * @author shaman
  */
 public interface OpenCLObject {

File: jme3-core/src/main/java/com/jme3/opencl/package-info.java
Patch:
@@ -115,7 +115,7 @@
  * terrain based on height maps, post processing effects and so forth.
  * <br>
  * <i>Important:</i> Before shared objects can be used by any OpenCL function
- * like kernel calls or read/write/copy methods, they must be aquired explicitly
+ * like kernel calls or read/write/copy methods, they must be acquired explicitly
  * by {@link com.jme3.opencl.Buffer#acquireBufferForSharingAsync(com.jme3.opencl.CommandQueue) }
  * or {@link com.jme3.opencl.Image#acquireImageForSharingAsync(com.jme3.opencl.CommandQueue) }.
  * After the work is done, release the resource with

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -157,7 +157,7 @@ public void initialize(RenderManager rm, ViewPort vp) {
         
         Camera cam = vp.getCamera();
 
-        //save view port diensions
+        //save view port dimensions
         left = cam.getViewPortLeft();
         right = cam.getViewPortRight();
         top = cam.getViewPortTop();
@@ -398,7 +398,7 @@ private void updateLastFilterIndex() {
         for (int i = filters.size() - 1; i >= 0 && lastFilterIndex == -1; i--) {
             if (filters.get(i).isEnabled()) {
                 lastFilterIndex = i;
-                //the Fpp is initialized, but the viwport framebuffer is the 
+                //the Fpp is initialized, but the viewport framebuffer is the
                 //original out framebuffer so we must recover from a situation 
                 //where no filter was enabled. So we set the correct framebuffer 
                 //on the viewport

File: jme3-core/src/main/java/com/jme3/renderer/Caps.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -378,7 +378,7 @@ public enum Caps {
     PartialNonPowerOfTwoTextures,
     
     /**
-     * When sampling cubemap edges, interpolate between the adjecent faces
+     * When sampling cubemap edges, interpolate between the adjacent faces
      * instead of just sampling one face.
      * <p>
      * Improves the quality of environment mapping.

File: jme3-core/src/main/java/com/jme3/renderer/IDList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -69,7 +69,7 @@ public boolean moveToNew(int idx){
             // add item to newList first
             newList[newLen++] = idx;
 
-        // find idx in oldList, if removed successfuly, return true.
+        // find idx in oldList, if removed successfully, return true.
         for (int i = 0; i < oldLen; i++){
             if (oldList[i] == idx){
                 // found index in slot i

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -334,7 +334,7 @@ private void notifyReshape(ViewPort vp, int w, int h) {
      * the given width and height.
      *
      * @param w the new width (in pixels)
-     * @param h the new heigh (in pixels)
+     * @param h the new height (in pixels)
      */
     public void notifyReshape(int w, int h) {
         for (ViewPort vp : preViewPorts) {

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL4.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2014 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -89,7 +89,7 @@ public interface GL4 extends GL3 {
     public int glGetProgramResourceIndex(int program, int programInterface, String name);
 
     /**
-     * Cchanges the active shader storage block with an assigned index of storageBlockIndex in program object program.
+     * Changes the active shader storage block with an assigned index of storageBlockIndex in program object program.
      * storageBlockIndex must be an active shader storage block index in program. storageBlockBinding must be less
      * than the value of {@code #GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS}. If successful, glShaderStorageBlockBinding specifies
      * that program will use the data store of the buffer object bound to the binding point storageBlockBinding to

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLDebug.java
Patch:
@@ -121,7 +121,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
      * @param gl The GL Context, required to call {@link GL#glGetError()}
      * @param obj The object which methods will be proxied
      * @param implementedInterfaces The interfaces/class this object implements
-     * @return The Proxy object (or null if an error occured)
+     * @return The Proxy object (or null if an error occurred)
      */
     public static Object createProxy(GL gl, Object obj, Class<?>... implementedInterfaces) {
         try {

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -1463,7 +1463,7 @@ public void updateShaderSourceData(ShaderSource source) {
 
         if(insertPrecision){
             // default precision could be defined in GLSLCompat.glsllib so final users can use custom defined precision instead
-            // precision token is not a preprocessor dirrective therefore it must be placed after #extension tokens to avoid
+            // precision token is not a preprocessor directive therefore it must be placed after #extension tokens to avoid
             // Error P0001: Extension directive must occur before any non-preprocessor tokens
             int idx = stringBuf.lastIndexOf("#extension");
             idx = stringBuf.indexOf("\n", idx);

File: jme3-core/src/main/java/com/jme3/scene/BatchNode.java
Patch:
@@ -254,7 +254,7 @@ protected void doBatch() {
         }
     }
 
-    //in case the detached spatial is a node, we unbatch all geometries in its subegraph
+    //in case the detached spatial is a node, we unbatch all geometries in its subgraph
     @Override
     public Spatial detachChildAt(int index) {
         Spatial s = super.detachChildAt(index);

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -628,7 +628,7 @@ public boolean isDirtyMorph() {
     }
 
     /**
-     * Seting this to true will stop this geometry morph buffer to be updated,
+     * Setting this to true will stop this geometry morph buffer to be updated,
      * unless the morph state changes
      *
      * @param dirtyMorph true&rarr;prevent updating, false&rarr;allow updating

File: jme3-core/src/main/java/com/jme3/scene/GeometryGroupNode.java
Patch:
@@ -72,7 +72,7 @@ public GeometryGroupNode(String name) {
     
     /**
      * Called by {@link Geometry geom} to specify that it
-     * has been unassociated from its <code>GeoemtryGroupNode</code>.
+     * has been unassociated from its <code>GeometryGroupNode</code>.
      * 
      * Unassociation occurs when the {@link Geometry} is 
      * {@link Spatial#removeFromParent() detached} from its parent

File: jme3-core/src/main/java/com/jme3/scene/Node.java
Patch:
@@ -228,7 +228,7 @@ public void updateLogicalState(float tpf) {
         super.updateLogicalState(tpf);
 
         // Only perform updates on children if we are the
-        // root and then only peform updates on children we
+        // root and then only perform updates on children we
         // know to require updates.
         // So if this isn't the root, abort.
         if (parent != null) {

File: jme3-core/src/main/java/com/jme3/scene/UserData.java
Patch:
@@ -268,7 +268,7 @@ private void writeList(OutputCapsule oc, Collection<?> list, String listName) th
                 } else if (o instanceof Boolean) {
                     oc.write(TYPE_BOOLEAN, listName + "t" + counter, 0);
                     oc.write((Boolean) o, listName + "v" + counter, false);
-                } else if (o instanceof String || o == null) {// treat null's like Strings just to store them and keep the List like the user intended
+                } else if (o instanceof String || o == null) {// treat nulls like Strings just to store them and keep the List like the user intended
                     oc.write(TYPE_STRING, listName + "t" + counter, 0);
                     oc.write((String) o, listName + "v" + counter, null);
                 } else if (o instanceof Long) {

File: jme3-core/src/main/java/com/jme3/scene/VertexBuffer.java
Patch:
@@ -198,7 +198,7 @@ public static enum Type {
          * So we can support up to
          * 14 simultaneous POSITION targets
          * 7 simultaneous POSITION and NORMAL targets
-         * 4 simultaneous POSTION, NORMAL and TANGENT targets.
+         * 4 simultaneous POSITION, NORMAL and TANGENT targets.
          * <p>
          * Note that the MorphControl will find how many buffers
          * can be supported for each mesh/material combination.
@@ -932,7 +932,7 @@ public void copyElements(int inIndex, VertexBuffer outVb, int outIndex, int len)
         int outPos = outIndex * components;
         int elementSz = components;
         if (format == Format.Half) {
-            // because half is stored as bytebuf but its 2 bytes long
+            // because half is stored as ByteBuffer but it's 2 bytes long
             inPos *= 2;
             outPos *= 2;
             elementSz *= 2;

File: jme3-core/src/main/java/com/jme3/scene/control/CameraControl.java
Patch:
@@ -105,7 +105,7 @@ public void setControlDir(ControlDirection controlDir) {
         this.controlDir = controlDir;
     }
 
-    // fields used, when inversing ControlDirection:
+    // fields used, when inverting ControlDirection:
     @Override
     protected void controlUpdate(float tpf) {
         if (spatial != null && camera != null) {

File: jme3-core/src/main/java/com/jme3/scene/control/LightControl.java
Patch:
@@ -115,7 +115,7 @@ public void setControlDir(ControlDirection controlDir) {
         this.controlDir = controlDir;
     }
 
-    // fields used, when inversing ControlDirection:
+    // fields used when inverting ControlDirection:
     @Override
     protected void controlUpdate(float tpf) {
         if (spatial != null && light != null) {

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonInterBoneWire.java
Patch:
@@ -45,7 +45,7 @@
 import com.jme3.util.BufferUtils;
 
 /**
- * A class that displays a dotted line between a bone tail and its childrens' heads.
+ * A class that displays a dotted line between a bone tail and its children's heads.
  * 
  * @author Marcin Roguski (Kaelthas)
  */
@@ -84,7 +84,7 @@ public SkeletonInterBoneWire(Skeleton skeleton, Map<Integer, Float> boneLengths)
     }
 
     /**
-     * The method updates the geometry according to the poitions of the bones.
+     * This method updates the geometry according to the positions of the bones.
      */
     public void updateGeometry() {
         VertexBuffer vb = this.getBuffer(Type.Position);
@@ -113,7 +113,7 @@ public void updateGeometry() {
     }
 
     /**
-     * Th method couns the connections between bones.
+     * This method counts the connections between bones.
      * @param bone
      *            the bone where counting starts
      */

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonWire.java
Patch:
@@ -112,7 +112,7 @@ public SkeletonWire(Skeleton skeleton, Map<Integer, Float> boneLengths) {
     }
 
     /**
-     * The method updates the geometry according to the poitions of the bones.
+     * This method updates the geometry according to the positions of the bones.
      */
     public void updateGeometry() {
         VertexBuffer vb = this.getBuffer(Type.Position);
@@ -135,7 +135,7 @@ public void updateGeometry() {
     }
 
     /**
-     * Th method couns the connections between bones.
+     * This method counts the connections between bones.
      * @param bone
      *            the bone where counting starts
      */

File: jme3-core/src/main/java/com/jme3/scene/debug/custom/ArmatureInterJointsWire.java
Patch:
@@ -41,7 +41,7 @@
 import java.nio.FloatBuffer;
 
 /**
- * A class that displays a dotted line between a bone tail and its childrens' heads.
+ * A class that displays a dotted line between a bone tail and its children's heads.
  *
  * @author Marcin Roguski (Kaelthas)
  */

File: jme3-core/src/main/java/com/jme3/scene/mesh/WrappedIndexBuffer.java
Patch:
@@ -42,7 +42,7 @@
  * into a list based mode such as {@link Mode#Triangles} or {@link Mode#Lines}.
  * As it is often more convenient to read vertex data in list format
  * than in a non-list format, using this class is recommended to avoid
- * convoluting classes used to process mesh data from an external source.
+ * complicating classes used to process mesh data from an external source.
  * 
  * @author Kirill Vainer
  */

File: jme3-core/src/main/java/com/jme3/scene/shape/Cylinder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -280,7 +280,7 @@ public void updateGeometry(int axisSamples, int radialSamples,
             float currentRadius = bottomRadius + (topRadius - bottomRadius) * axisSample / (axisSamples-1);
             
             for (int circlePoint = 0; circlePoint < radialSamples + 1; circlePoint++) {
-                // Position, by multipliying the position on a unit circle with the current radius.
+                // Position, by multiplying the position on a unit circle with the current radius.
                 vertices[currentIndex*3] = circlePoints[circlePoint][0] * currentRadius;
                 vertices[currentIndex*3 +1] = circlePoints[circlePoint][1] * currentRadius;
                 vertices[currentIndex*3 +2] = currentHeight;

File: jme3-core/src/main/java/com/jme3/shader/Glsl100ShaderGenerator.java
Patch:
@@ -192,7 +192,7 @@ protected void generateEndOfMainSection(StringBuilder source, ShaderGenerationIn
      * Appends an output assignment to a shader globalOutputName =
      * nameSpace_varName;
      *
-     * @param source the source StringBuilter to append the code.
+     * @param source the source StringBuilder to append the code.
      * @param globalOutputName the name of the global output (can be gl_Position
      * or gl_FragColor etc...).
      * @param var the variable to assign to the output.
@@ -242,7 +242,7 @@ protected void generateNodeMainSection(StringBuilder source, ShaderNode shaderNo
 
         final List<String> declaredInputs = new ArrayList<>();
 
-        // Decalring variables with default values first
+        // Declaring variables with default values first
         final ShaderNodeDefinition definition = shaderNode.getDefinition();
 
         for (final ShaderNodeVariable var : definition.getInputs()) {

File: jme3-core/src/main/java/com/jme3/shader/Glsl300ShaderGenerator.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * This shader Generator can generate Vertex and Fragment shaders from
  * ShaderNodes for GLESSL 3.0
- * Nowdays it's just a subclass of Glsl150ShaderGenerator overriding the version
+ * Nowadays it's just a subclass of Glsl150ShaderGenerator overriding the version
  * string because GLSL 1.5 is mostly compatible with GLESSL 3.0
  *
  * @author Nehon

File: jme3-core/src/main/java/com/jme3/shader/Shader.java
Patch:
@@ -439,7 +439,7 @@ public void setUpdateNeeded(){
 
     /**
      * Called by the object manager to reset all object IDs. This causes
-     * the shader to be reuploaded to the GPU incase the display was restarted.
+     * the shader to be reuploaded to the GPU in case the display was restarted.
      */
     @Override
     public void resetObject() {

File: jme3-core/src/main/java/com/jme3/shader/ShaderNode.java
Patch:
@@ -205,7 +205,7 @@ public void read(JmeImporter im) throws IOException {
     }
 
     /**
-     * convenience tostring
+     * convenience toString
      *
      * @return a string
      */

File: jme3-core/src/main/java/com/jme3/shader/ShaderNodeDefinition.java
Patch:
@@ -254,7 +254,7 @@ public void read(JmeImporter im) throws IOException {
     }
 
     /**
-     * convenience tostring
+     * convenience toString
      *
      * @return a string
      */

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -553,7 +553,7 @@ private void clearMatParams(){
     protected abstract void setMaterialParameters(Material material);
 
     private void setMatParams(GeometryList l) {
-        //iteration throught all the geometries of the list to gather the materials
+        //iterate through all the geometries of the list to gather the materials
 
         buildMatCache(l);
 

File: jme3-core/src/main/java/com/jme3/shadow/DirectionalLightShadowFilter.java
Patch:
@@ -57,7 +57,7 @@
 public class DirectionalLightShadowFilter extends AbstractShadowFilter<DirectionalLightShadowRenderer> {
 
     /**
-     * Used for serialzation.
+     * Used for serialization.
      * Use DirectionalLightShadowFilter#DirectionalLightShadowFilter
      * (AssetManager assetManager, int shadowMapSize, int nbSplits)
      * instead.

File: jme3-core/src/main/java/com/jme3/shadow/DirectionalLightShadowRenderer.java
Patch:
@@ -56,7 +56,7 @@
  * a shadow map for each one.<br> splits are distributed so that the closer they
  * are from the camera, the smaller they are to maximize the resolution used of
  * the shadow map.<br> This results in a better quality shadow than standard
- * shadow mapping.<br> for more informations on this read this <a
+ * shadow mapping.<br> for more information on this read <a
  * href="https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html">https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html</a><br>
  *
  * @author Rémy Bouquet aka Nehon

File: jme3-core/src/main/java/com/jme3/shadow/EdgeFilteringMode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -61,7 +61,7 @@ public enum EdgeFilteringMode {
      * is used. 
      * http://devmag.org.za/2009/05/03/poisson-disk-sampling/
      * The principle is to eliminate the regular blurring pattern that can be 
-     * seen with pcf4x4 by randomizing the samble position with a poisson disc.
+     * seen with pcf4x4 by randomizing the sample position with a poisson disc.
      * Shadows will look smoother than 4x4 PCF but with slightly better or 
      * similar performance.
      */

File: jme3-core/src/main/java/com/jme3/shadow/SpotLightShadowRenderer.java
Patch:
@@ -57,7 +57,7 @@
  * map for each one.<br> splits are distributed so that the closer they are from
  * the camera, the smaller they are to maximize the resolution used of the
  * shadow map.<br> This results in a better quality shadow than standard shadow
- * mapping.<br> for more informations on this read this <a
+ * mapping.<br> for more information on this read <a
  * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
  *
  * @author Rémy Bouquet aka Nehon

File: jme3-core/src/main/java/com/jme3/texture/Image.java
Patch:
@@ -1135,7 +1135,7 @@ public int[] getMipMapSizes() {
      * contain any color space information and the most frequently used colors 
      * space is sRGB
      *
-     * The material loader may override this attribute to Lineat if it determines that
+     * The material loader may override this attribute to Linear if it determines that
      * such conversion must not be performed, for example, when loading normal
      * maps.
      *

File: jme3-core/src/main/java/com/jme3/texture/Texture.java
Patch:
@@ -449,7 +449,7 @@ public Image getImage() {
      * particular axis.
      *
      * @param axis
-     *            the texture axis to define a wrapmode on.
+     *            the texture axis to apply the wrap mode to.
      * @param mode
      *            the wrap mode for the given axis of the texture.
      * @throws IllegalArgumentException

File: jme3-core/src/main/java/com/jme3/texture/Texture2D.java
Patch:
@@ -115,7 +115,7 @@ public Texture createSimpleClone(Texture rVal) {
      * particular axis.
      *
      * @param axis
-     *            the texture axis to define a wrapmode on.
+     *            the texture axis to apply the wrap mode to.
      * @param mode
      *            the wrap mode for the given axis of the texture.
      * @throws IllegalArgumentException

File: jme3-core/src/main/java/com/jme3/texture/Texture3D.java
Patch:
@@ -119,7 +119,7 @@ public Texture createSimpleClone(Texture rVal) {
      * particular axis.
      *
      * @param axis
-     *            the texture axis to define a wrapmode on.
+     *            the texture axis to apply wrap mode to.
      * @param mode
      *            the wrap mode for the given axis of the texture.
      * @throws IllegalArgumentException

File: jme3-core/src/main/java/com/jme3/texture/TextureCubeMap.java
Patch:
@@ -111,7 +111,7 @@ public Texture createSimpleClone(Texture rVal) {
      * particular axis.
      * 
      * @param axis
-     *            the texture axis to define a wrapmode on.
+     *            the texture axis to apply the wrap mode to.
      * @param mode
      *            the wrap mode for the given axis of the texture.
      * @throws IllegalArgumentException

File: jme3-core/src/main/java/com/jme3/texture/image/ByteAlignedImageCodec.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -39,7 +39,7 @@ class ByteAlignedImageCodec extends ImageCodec {
     boolean be;
     
     public ByteAlignedImageCodec(int bpp, int flags, int az, int rz, int gz, int bz, int ap, int rp, int gp, int bp) {
-        // Cast to long to compute max vals, since some components could be as high as 32 bits.
+        // Cast to long to compute max values, since some components could be as high as 32 bits.
         super(bpp, flags, 
                 (int)(((long)1 << (az << 3)) - 1), 
                 (int)(((long)1 << (rz << 3)) - 1), 

File: jme3-core/src/main/java/com/jme3/util/ListSort.java
Patch:
@@ -88,7 +88,7 @@ public class ListSort<T> {
 
     /* Try to used a kind of structure like in the original implementation.
      * Ended up using 2 arrays as done in the java 7 Timsort. 
-     * Original implementation use a struct, but instanciation of this inner 
+     * Original implementation used a struct, but instantiation of this inner
      * class + array was a convoluted pain.
      */
     /**
@@ -281,8 +281,8 @@ private int getRunLength(T[] array, int firstId, int lastId,
                     runEnd++;
                 }
                 // the run's order is descending, it has to be reversed
-                // original algorithmm return a descending = 1 value and the 
-                //reverse is done in the sort method. Looks good to have it here though
+                // original algorithm returned a descending = 1 value and the
+                // reverse was done in the sort method. Looks good to have it here though
                 reverseArray(array, firstId, runEnd);
             }
 

File: jme3-core/src/main/java/com/jme3/util/MaterialDebugAppState.java
Patch:
@@ -160,7 +160,7 @@ public void registerBinding(String shaderName, final Filter filter) {
     }
 
     /**
-     * Will reload the spatials's materials whenever the shader file is changed 
+     * Will reload the spatial's materials whenever the shader file is changed
      * on the hard drive
      * @param shaderName the shader name (relative path to the asset folder or 
      * to a registered asset path)

File: jme3-core/src/main/java/com/jme3/util/SafeArrayList.java
Patch:
@@ -61,7 +61,7 @@
  *  <li>The ListIterators returned by this class only support the remove()
  *  modification method.  add() and set() are not supported on the iterator.
  *  Even after ListIterator.remove() or Iterator.remove() is called, this change
- *  is not reflected in the iterator instance as it is still refering to its
+ *  is not reflected in the iterator instance as it is still referring to its
  *  original snapshot.
  *  </ul>
  *

File: jme3-core/src/main/java/com/jme3/util/TangentBinormalGenerator.java
Patch:
@@ -270,7 +270,7 @@ private static  List<VertexData> processTriangles(Mesh mesh,
         return vertices;
     }
     
-    //Don't remove splitmirorred boolean. It's not used right now, but I intend to
+    //Don't remove split mirrored boolean. It's not used right now, but I intend to
     //make this method also split vertices with rotated tangent space and I'll
     //add another splitRotated boolean 
     private static List<VertexData> splitVertices(Mesh mesh, List<VertexData> vertexData, boolean splitMirorred) {
@@ -337,7 +337,7 @@ private static List<VertexData> splitVertices(Mesh mesh, List<VertexData> vertex
                 if(vb==null || vb.getNumComponents() == 0) continue;
                 
                 Buffer buffer = vb.getData();   
-                //IndexBuffer has special treatement, only swapping the vertex indices is needed                
+                //IndexBuffer has special treatment, only swapping the vertex indices is needed
                 if(type == Type.Index){
                     boolean isShortBuffer = vb.getFormat() == VertexBuffer.Format.UnsignedShort;                     
                     for (VertexData vertex : newVertices) {

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikktspaceTangentGenerator.java
Patch:
@@ -49,7 +49,7 @@
  * https://developer.blender.org/diffusion/B/browse/master/intern/mikktspace/mikktspace.c
  * https://developer.blender.org/diffusion/B/browse/master/intern/mikktspace/mikktspace.h
  * 
- * MikkTspace looks like the new standard of tangent generation in 3D softwares.
+ * MikkTspace looks like the new standard of tangent generation in 3D software.
  * Xnormal, Blender, Substance painter, and many more use it.
  * 
  * Usage is :
@@ -614,7 +614,7 @@ static int generateInitialVerticesIndexList(TriInfo pTriInfos[], int piTriList_o
                 ++iDstTriIndex;  // next
             } else {
                 //Note, Nehon: we should never get there with JME, because we don't support quads... 
-                //but I'm going to let it there incase someone needs it... Just know this code is not tested.
+                //but I'm going to let it there in case someone needs it... Just know this code is not tested.
                 {//TODO remove those useless brackets...
                     pTriInfos[iDstTriIndex + 1].orgFaceNumber = f;
                     pTriInfos[iDstTriIndex + 1].tSpacesOffs = iTSpacesOffs;
@@ -1305,7 +1305,7 @@ static void buildNeighborsFast(TriInfo pTriInfos[], Edge[] pEdges, final int piT
             }
         }
 
-        // sort over all edges by i0, this is the pricy one.
+        // sort over all edges by i0, this is the pricey one.
         quickSortEdges(pEdges, 0, iNrTrianglesIn * 3 - 1, 0, uSeed);  // sort channel 0 which is i0
 
         // sub sort over i1, should be fast.

File: jme3-core/src/plugins/java/com/jme3/export/binary/BinaryImporter.java
Patch:
@@ -62,7 +62,7 @@ public final class BinaryImporter implements JmeImporter {
     //Key - savable, object - capsule
     final private IdentityHashMap<Savable, BinaryInputCapsule> capsuleTable
              = new IdentityHashMap<>();
-    //Key - id, opject - location in the file
+    //Key - id, object - location in the file
     final private HashMap<Integer, Integer> locationTable
              = new HashMap<>();
 

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -476,19 +476,19 @@ private void readRenderStateStatement(Statement statement) throws IOException{
         }else if (split[0].equals("BlendEquationAlpha")){
             renderState.setBlendEquationAlpha(RenderState.BlendEquationAlpha.valueOf(split[1]));
         }else if (split[0].equals("AlphaTestFalloff")){
-            // Ignore for backwards compatbility
+            // ignore for backwards compatibility
         }else if (split[0].equals("PolyOffset")){
             float factor = Float.parseFloat(split[1]);
             float units = Float.parseFloat(split[2]);
             renderState.setPolyOffset(factor, units);
         }else if (split[0].equals("ColorWrite")){
             renderState.setColorWrite(parseBoolean(split[1]));
         }else if (split[0].equals("PointSprite")){
-            // Ignore for backwards compatbility
+            // ignore for backwards compatibility
         }else if (split[0].equals("DepthFunc")){
             renderState.setDepthFunc(RenderState.TestFunction.valueOf(split[1]));
         }else if (split[0].equals("AlphaFunc")){
-            // ignore for backwards compatbility
+            // ignore for backwards compatibility
         }else if (split[0].equals("LineWidth")){
             renderState.setLineWidth(Float.parseFloat(split[1]));
         } else {

File: jme3-core/src/plugins/java/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -208,7 +208,7 @@ protected Face[] quadToTriangle(Face f){
         Vertex v2 = f.verticies[2];
         Vertex v3 = f.verticies[3];
 
-        // find the pair of verticies that is closest to each over
+        // find the pair of vertices that is closest to each over
         // v0 and v2
         // OR
         // v1 and v3
@@ -490,7 +490,7 @@ protected Mesh constructMesh(ArrayList<Face> faceList){
 
         IndexBuffer indexBuf = null;
         if (vertIndexMap.size() >= 65536){
-            // too many verticies: use intbuffer instead of shortbuffer
+            // too many vertices: use IntBuffer instead of ShortBuffer
             IntBuffer ib = BufferUtils.createIntBuffer(newFaces.size() * 3);
             m.setBuffer(VertexBuffer.Type.Index, 3, ib);
             indexBuf = new IndexIntBuffer(ib);

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/DXTFlipper.java
Patch:
@@ -241,7 +241,7 @@ public static ByteBuffer flipDXT(ByteBuffer img, int w, int h, Format format){
             byte[] colorBlock = new byte[8];
             byte[] alphaBlock = type != 1 && type != 5 ? new byte[8] : null;
             for (int x = 0; x < blocksX; x++){
-                // prepeare for block reading
+                // prepare for block reading
                 int blockByteOffset = x * bpb;
                 img.position(blockByteOffset);
                 img.limit(blockByteOffset + bpb);
@@ -276,7 +276,7 @@ public static ByteBuffer flipDXT(ByteBuffer img, int w, int h, Format format){
             byte[] alphaBlock = type != 1 && type != 5 ? new byte[8] : null;
             for (int y = 0; y < blocksY; y++){
                 for (int x = 0; x < blocksX; x++){
-                    // prepeare for block reading
+                    // prepare for block reading
                     int blockIdx = y * blocksX + x;
                     int blockByteOffset = blockIdx * bpb;
 

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/HDRLoader.java
Patch:
@@ -136,7 +136,7 @@ private String readString(InputStream is) throws IOException{
     }
     
     private boolean decodeScanlineRLE(InputStream in, int width) throws IOException{
-        // must deocde RLE data into temp buffer before converting to float
+        // must decode RLE data into temp buffer before converting to float
         if (rleTempBuffer == null){
             rleTempBuffer = BufferUtils.createByteBuffer(width * 4);
         }else{

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/ktx/KTXLoader.java
Patch:
@@ -55,7 +55,7 @@
 /**
  *
  * A KTX file loader
- * KTX file format is an image container defined by the Kronos group
+ * KTX file format is an image container defined by the Khronos group
  * See specs here https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/
  * 
  * This loader doesn't support compressed files yet.

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/ktx/KTXWriter.java
Patch:
@@ -117,7 +117,7 @@ public void write(Image image, Class<? extends Texture> textureType, String file
             out.writeInt(1);
             //glFormat
             out.writeInt(format.format);
-            //glInernalFormat
+            //glInternalFormat
             out.writeInt(format.internalFormat);
             //glBaseInternalFormat
             out.writeInt(format.format);

File: jme3-core/src/test/java/com/jme3/anim/ArmatureMaskTest.java
Patch:
@@ -59,7 +59,7 @@ private Joint createJoint(String name, int id, Joint... children) {
     }
 
     /**
-     * Test varous ways to instantiate a mask that affects all joints.
+     * Test various ways to instantiate a mask that affects all joints.
      */
     @Test
     public void testMaskAll() {

File: jme3-core/src/test/java/com/jme3/light/LightFilterTest.java
Patch:
@@ -236,7 +236,7 @@ public void testSpotFiltering() {
         sl.setSpotRange(0);
         checkFilteredLights(1);
        
-        //the geommetry is outside the infinite cone (cone direction going away from the geom)
+        //the geometry is outside the infinite cone (cone direction going away from the geom)
         sl.setPosition(Vector3f.UNIT_Z.mult(1+FastMath.ZERO_TOLERANCE));
         checkFilteredLights(0);
        

File: jme3-core/src/test/java/com/jme3/scene/plugins/OBJLoaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -71,7 +71,7 @@ public void testHappyPath() {
             "  Chair 2 (material: dot_purple)\n" +
             // named group as Geometry
             "  Pillow 2 (material: dot_red)\n" +
-            // named group as node with two dufferent Geometry instances,
+            // named group as node with two different Geometry instances,
             // because two materials are used (as before named groups support)
             "  Podium\n" +
             "    TwoChairs-geom-3 (material: dot_red)\n" +

File: jme3-core/src/tools/java/jme3tools/optimize/TextureAtlas.java
Patch:
@@ -87,7 +87,7 @@
  * 
  * <p>Also note that textures are not scaled and the atlas needs to be large enough to hold all textures.
  * All methods that allow adding textures return false if the texture could not be added due to the
- * atlas being full. Furthermore secondary textures (normal, spcular maps etc.) have to be the same size
+ * atlas being full. Furthermore secondary textures (normal, specular maps etc.) have to be the same size
  * as the main (e.g. DiffuseMap) texture.</p>
  * 
  * <p><b>Usage examples</b></p>

File: jme3-core/src/tools/java/jme3tools/shader/ShaderDebug.java
Patch:
@@ -46,7 +46,7 @@ private ShaderDebug() {
     /**
      * Append the line numbers to the source code of a shader to output it
      * @param source the source
-     * @return the formated source code
+     * @return the formatted source code
      */
     public static String formatShaderSource(String source) {      
         String[] sourceLines = source.split("\n");

File: jme3-desktop/src/main/java/com/jme3/app/SettingsDialog.java
Patch:
@@ -277,12 +277,12 @@ public void setImage(String image) {
      */
     public void setImage(URL image) {
         icon.setIcon(new ImageIcon(image));
-        pack(); // Resize to accomodate the new image
+        pack(); // Resize to accommodate the new image
         setLocationRelativeTo(null); // put in center
     }
 
     /**
-     * <code>showDialog</code> sets this dialog as visble, and brings it to
+     * <code>showDialog</code> sets this dialog as visible, and brings it to
      * the front.
      */
     public void showDialog() {

File: jme3-desktop/src/main/java/com/jme3/cursors/plugins/CursorLoader.java
Patch:
@@ -708,7 +708,7 @@ private void addFrame(byte[] imgData, int rate, int jiffy, int width, int height
         }
 
         void assembleCursor(ArrayList<byte[]> icons, int[] rate, int[] animSeq, int jiffy, int steps, int width, int height) throws IOException {
-            // Jiffy multiplicator for LWJGL's delay, which is in milisecond.
+            // Jiffy multiplier for LWJGL's delay, which is in milliseconds.
             final int MULT = 17;
             numImages = icons.size();
             int frRate = 0;

File: jme3-desktop/src/main/java/com/jme3/input/awt/AwtMouseInput.java
Patch:
@@ -286,7 +286,7 @@ public void mouseMoved(MouseEvent awtEvt) {
         if (isRecentering) {
             // MHenze (cylab) Fix Issue 35:
             // As long as the MouseInput is in recentering mode, nothing is done until the mouse is entered in the component
-            // by the events generated by the robot. If this happens, the last known location is resetted.
+            // by the events generated by the robot. If this happens, the last known location is reset.
             if ((centerLocation.x == awtEvt.getX() && centerLocation.y == awtEvt.getY()) || eventsSinceRecenter++ == 5) {
                 lastKnownLocation.x = awtEvt.getX();
                 lastKnownLocation.y = awtEvt.getY();

File: jme3-desktop/src/main/java/com/jme3/system/AWTComponentRenderer.java
Patch:
@@ -306,7 +306,7 @@ public void run() {
   }
 
   /**
-   * Write the current rendered frame to the component graphics contex.
+   * Write the current rendered frame to the component graphics context.
    */
   protected void writeFrame() {
 

File: jme3-desktop/src/main/java/com/jme3/system/ErrorDialog.java
Patch:
@@ -12,7 +12,7 @@
 import javax.swing.JTextArea;
 
 /**
- * Simple dialog for diplaying error messages,
+ * Simple dialog for displaying error messages,
  * 
  * @author kwando
  */

File: jme3-desktop/src/main/java/com/jme3/util/Screenshots.java
Patch:
@@ -92,7 +92,7 @@ public static void convertScreenShot(ByteBuffer bgraBuf, BufferedImage out){
 
         // flip the components the way AWT likes them
         
-        // calcuate half of height such that all rows of the array are written to
+        // calculate half of height such that all rows of the array are written to
         // e.g. for odd heights, write 1 more scanline
         int heightdiv2ceil = height % 2 == 1 ? (height / 2) + 1 : height / 2;
         for (int y = 0; y < heightdiv2ceil; y++){

File: jme3-effects/src/main/java/com/jme3/post/filters/TranslucentBucketFilter.java
Patch:
@@ -50,7 +50,7 @@
 
 /**
  * A filter to handle translucent objects when rendering a scene with filters that uses depth like WaterFilter and SSAOFilter
- * just create a TranslucentBucketFilter and add it to the Filter list of a FilterPostPorcessor
+ * just create a TranslucentBucketFilter and add it to the Filter list of a FilterPostProcessor
  * @author Nehon
  */
 public final class TranslucentBucketFilter extends Filter {

File: jme3-effects/src/main/java/com/jme3/water/ReflectionProcessor.java
Patch:
@@ -85,12 +85,12 @@ public void preFrame(float tpf) {
 
     @Override
     public void postQueue(RenderQueue rq) {
-        //we need special treatement for the sky because it must not be clipped
+        //we need special treatment for the sky because it must not be clipped
         rm.getRenderer().setFrameBuffer(reflectionBuffer);
         reflectionCam.setProjectionMatrix(null);
         rm.setCamera(reflectionCam, false);
         rm.getRenderer().clearBuffers(true, true, true);
-        //Rendering the sky whithout clipping
+        //Rendering the sky without clipping
         rm.getRenderer().setDepthRange(1, 1);
         vp.getQueue().renderQueue(RenderQueue.Bucket.Sky, rm, reflectionCam, true);
         rm.getRenderer().setDepthRange(0, 1);

File: jme3-effects/src/main/java/com/jme3/water/SimpleWaterProcessor.java
Patch:
@@ -534,7 +534,7 @@ public float getTexScale() {
 
 
     /**
-     * returns true if the waterprocessor is in debug mode
+     * returns true if the water processor is in debug mode
      * @return true if in debug mode, otherwise false
      */
     public boolean isDebug() {
@@ -575,7 +575,7 @@ public float getReflectionClippingOffset() {
 
     /**
      * sets the reflection clipping plane offset
-     * set a negative value to lower the clipping plane for relection texture rendering.
+     * set a negative value to lower the clipping plane for reflection texture rendering.
      *
      * @param reflectionClippingOffset the desired offset (default=-5)
      */

File: jme3-effects/src/main/java/com/jme3/water/WaterFilter.java
Patch:
@@ -1140,7 +1140,7 @@ public boolean isUseSpecular() {
     }
 
     /**
-     * Set to true to use specular lightings on the water
+     * Set to true to use specular lighting on the water
      *
      * @param useSpecular true to enable the specular effect, false to disable
      * it (default=true)

File: jme3-examples/src/main/java/jme3test/TestChooser.java
Patch:
@@ -198,9 +198,9 @@ private Class load(String name) {
      * @param allClasses
      *            add loaded classes to this collection
      * @param packageName
-     *            current package name for the diven directory
+     *            current package name for the given directory
      * @param recursive
-     *            true to descent into subdirectories
+     *            true to descend into subdirectories
      */
     private void addAllFilesInDirectory(File directory,
             Collection<Class> allClasses, String packageName, boolean recursive) {

File: jme3-examples/src/main/java/jme3test/app/state/TestIssue1421.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020 jMonkeyEngine
+ * Copyright (c) 2020-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -40,7 +40,7 @@
 /**
  * Test case for JME issue #1421: ScreenshotAppState never cleans up.
  * <p>
- * If successful, the application will complete without thowing an Exception.
+ * If successful, the application will complete without throwing an Exception.
  *
  * @author Stephen Gold
  */

File: jme3-examples/src/main/java/jme3test/bullet/TestKinematicAddToPhysicsSpaceIssue.java
Patch:
@@ -82,7 +82,7 @@ public void simpleInitApp() {
         getPhysicsSpace().add(physicsSphere2);
         //making it kinematic
         physicsSphere2.getControl(RigidBodyControl.class).setKinematic(false);
-        //Making it not kinematic again, it works properly, the rigidbody is affected by grvity.
+        //Making it not kinematic again, it works properly, the rigid body is affected by gravity.
         physicsSphere2.getControl(RigidBodyControl.class).setKinematic(false);
 
 

File: jme3-examples/src/main/java/jme3test/export/TestAssetLinkNode.java
Patch:
@@ -95,7 +95,7 @@ public void simpleInitApp() {
         lightMdl.setMaterial(assetManager.loadAsset(new MaterialKey("Common/Materials/RedColor.j3m")));
         rootNode.attachChild(lightMdl);
 
-        // flourescent main light
+        // fluorescent main light
         pl = new PointLight();
         pl.setColor(new ColorRGBA(0.88f, 0.92f, 0.95f, 1.0f));
         rootNode.addLight(pl);

File: jme3-examples/src/main/java/jme3test/games/CubeField.java
Patch:
@@ -146,7 +146,7 @@ public void simpleUpdate(float tpf) {
     }
     /**
      * Forcefully takes over Camera adding functionality and placing it behind the character
-     * @param tpf Tickes Per Frame
+     * @param tpf Ticks Per Frame
      */
     private void camTakeOver(float tpf) {
         cam.setLocation(player.getLocalTranslation().add(-8, 2, 0));

File: jme3-examples/src/main/java/jme3test/games/RollingTheMonkey.java
Patch:
@@ -321,7 +321,7 @@ public void simpleUpdate(float tpf) {
         if(keyRight) centralForce.addLocal(cam.getLeft().negate());
         
         if(!Vector3f.ZERO.equals(centralForce)) {
-            centralForce.setY(0);                   // stop ball from pusing down or flying up
+            centralForce.setY(0);                   // stop ball from pushing down or flying up
             centralForce.normalizeLocal();          // normalize force
             centralForce.multLocal(PLAYER_FORCE);   // scale vector to force
 

File: jme3-examples/src/main/java/jme3test/gui/TestCursor.java
Patch:
@@ -68,7 +68,7 @@ public void simpleUpdate(float tpf) {
             }
             sysTime = currentTime;
             // 8 seconds have passed,
-            // tell jME3 to swith to a different cursor.
+            // tell jME3 to switch to a different cursor.
             inputManager.setMouseCursor(cursors.get(count));
         }
 

File: jme3-examples/src/main/java/jme3test/helloworld/HelloCollision.java
Patch:
@@ -62,7 +62,7 @@ public class HelloCollision extends SimpleApplication
   private boolean left = false, right = false, up = false, down = false;
   
   //Temporary vectors used on each frame.
-  //They here to avoid instanciating new vectors on each frame
+  //They here to avoid instantiating new vectors on each frame
   final private Vector3f camDir = new Vector3f();
   final private Vector3f camLeft = new Vector3f();
 

File: jme3-examples/src/main/java/jme3test/helloworld/HelloPhysics.java
Patch:
@@ -192,7 +192,7 @@ private void makeBrick(Vector3f loc) {
   }
 
   /** This method creates one individual physical cannon ball.
-   * By defaul, the ball is accelerated and flies
+   * By default, the ball is accelerated and flies
    * from the camera position in the camera direction.*/
    public void makeCannonBall() {
     /** Create a cannon ball geometry and attach to scene graph. */

File: jme3-examples/src/main/java/jme3test/helloworld/HelloTerrainCollision.java
Patch:
@@ -65,7 +65,7 @@ public class HelloTerrainCollision extends SimpleApplication
   final private Vector3f walkDirection = new Vector3f();
   private boolean left = false, right = false, up = false, down = false;
   //Temporary vectors used on each frame.
-  //They here to avoid instanciating new vectors on each frame
+  //They here to avoid instantiating new vectors on each frame
   final private Vector3f camDir = new Vector3f();
   final private Vector3f camLeft = new Vector3f();
 

File: jme3-examples/src/main/java/jme3test/material/TestBumpModel.java
Patch:
@@ -66,7 +66,7 @@ public void simpleInitApp() {
         lightMdl.setMaterial(assetManager.loadMaterial("Common/Materials/RedColor.j3m"));
         rootNode.attachChild(lightMdl);
 
-        // flourescent main light
+        // fluorescent main light
         pl = new PointLight();
         pl.setColor(new ColorRGBA(0.88f, 0.92f, 0.95f, 1.0f));
         rootNode.addLight(pl);

File: jme3-examples/src/main/java/jme3test/model/TestMonkeyHead.java
Patch:
@@ -64,7 +64,7 @@ public void simpleInitApp() {
         lightMdl.setMaterial(assetManager.loadMaterial("Common/Materials/RedColor.j3m"));
         rootNode.attachChild(lightMdl);
 
-        // flourescent main light
+        // fluorescent main light
         pl = new PointLight();
         pl.setColor(new ColorRGBA(0.88f, 0.92f, 0.95f, 1.0f));
         rootNode.addLight(pl);

File: jme3-examples/src/main/java/jme3test/model/anim/TestCustomAnim.java
Patch:
@@ -102,7 +102,7 @@ public void simpleInitApp() {
 		bone.setLocalTransform(new Transform(Vector3f.ZERO, Quaternion.IDENTITY, Vector3f.UNIT_XYZ));
 		armature = new Armature(new Joint[] { bone });
 
-		// Assign all verticies to bone 0 with weight 1
+		// Assign all vertices to bone 0 with weight 1
 		for (int i = 0; i < box.getVertexCount() * 4; i += 4) {
 			// assign vertex to bone index 0
 			indices.array()[i + 0] = 0;

File: jme3-examples/src/main/java/jme3test/model/shape/TestCustomMesh.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -127,7 +127,7 @@ public void simpleInitApp() {
         coloredMesh.setLocalTranslation(4, 0, 0);
         rootNode.attachChild(coloredMesh);
 
-//        /** Alternatively, you can show the mesh vertixes as points
+//        /** Alternatively, you can show the mesh vertices as points
 //          * instead of coloring the faces. */
 //        cMesh.setMode(Mesh.Mode.Points);
 //        cMesh.setPointSize(10f);

File: jme3-examples/src/main/java/jme3test/network/TestChatClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 jMonkeyEngine
+ * Copyright (c) 2011-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -117,7 +117,7 @@ public static String getString(Component owner, String title, String message, St
 
     public static void main(String... args) throws Exception {
     
-        // Increate the logging level for networking...
+        // Increase the logging level for networking...
         System.out.println("Setting logging to max");
         Logger networkLog = Logger.getLogger("com.jme3.network"); 
         networkLog.setLevel(Level.FINEST);

File: jme3-examples/src/main/java/jme3test/network/TestChatServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 jMonkeyEngine
+ * Copyright (c) 2011-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -129,7 +129,7 @@ public static void initializeClasses() {
 
     public static void main(String... args) throws Exception {
  
-        // Increate the logging level for networking...
+        // Increase the logging level for networking...
         System.out.println("Setting logging to max");
         Logger networkLog = Logger.getLogger("com.jme3.network"); 
         networkLog.setLevel(Level.FINEST);

File: jme3-examples/src/main/java/jme3test/opencl/TestVertexBufferSharing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -168,9 +168,9 @@ private void updateOpenCL(float tpf) {
         //advect time
         time += tpf;
         
-        //aquire resource
+        //acquire resource
         buffer.acquireBufferForSharingNoEvent(clQueue);
-        //no need to wait for the returned event, since the kernel implicitely waits for it (same command queue)
+        //no need to wait for the returned event, since the kernel implicitly waits for it (same command queue)
         
         //execute kernel
         float scale = (float) Math.pow(1.1, (1.0 - time%2) / 16.0);

File: jme3-examples/src/main/java/jme3test/opencl/TestWriteToTexture.java
Patch:
@@ -141,9 +141,9 @@ private void initOpenCL2() {
         texCL = clContext.bindImage(tex, MemoryAccess.WRITE_ONLY).register();
     }
     private void updateOpenCL(float tpf) {
-        //aquire resource
+        //acquire resource
         texCL.acquireImageForSharingNoEvent(clQueue);
-        //no need to wait for the returned event, since the kernel implicitely waits for it (same command queue)
+        //no need to wait for the returned event, since the kernel implicitly waits for it (same command queue)
         
         //execute kernel
         Kernel.WorkSize ws = new Kernel.WorkSize(settings.getWidth(), settings.getHeight());

File: jme3-examples/src/main/java/jme3test/post/TestRenderToMemory.java
Patch:
@@ -66,7 +66,7 @@
 
 /**
  * This test renders a scene to an offscreen framebuffer, then copies
- * the contents to a Swing JFrame. Note that some parts are done inefficently,
+ * the contents to a Swing JFrame. Note that some parts are done inefficiently,
  * this is done to make the code more readable.
  */
 public class TestRenderToMemory extends SimpleApplication implements SceneProcessor {

File: jme3-examples/src/main/java/jme3test/terrain/PBRTerrainAdvancedTest.java
Patch:
@@ -347,7 +347,7 @@ private void setUpTerrainMaterial() {
         //EMISSIVE
         matTerrain.setColor("EmissiveColor_5", marbleEmissiveColor);
         matTerrain.setColor("EmissiveColor_3", tilesEmissiveColor);
-        //these two texture slots (marble & tiledRoad, indexed in each texturea array at 5 and 3 respectively) both
+        //these two texture slots (marble & tiledRoad, indexed in each texture array at 5 and 3 respectively) both
         // have packed MRAoEi maps with an emissiveTexture packed into the alpha channel
 
 //        matTerrain.setColor("EmissiveColor_1", new ColorRGBA(0.08f, 0.01f, 0.1f, 0.4f));

File: jme3-examples/src/main/java/jme3test/terrain/TerrainFractalGridTest.java
Patch:
@@ -44,7 +44,7 @@ public void simpleInitApp() {
                 "Common/MatDefs/Terrain/HeightBasedTerrain.j3md");
 
         // Parameters to material:
-        // regionXColorMap: X = 1..4 the texture that should be appliad to state X
+        // regionXColorMap: X = 1..4 the texture that should be applied to state X
         // regionX: a Vector3f containing the following information:
         //      regionX.x: the start height of the region
         //      regionX.y: the end height of the region

File: jme3-examples/src/main/java/jme3test/terrain/TerrainGridTest.java
Patch:
@@ -54,7 +54,7 @@ public void simpleInitApp() {
                 "Common/MatDefs/Terrain/HeightBasedTerrain.j3md");
 
         // Parameters to material:
-        // regionXColorMap: X = 1..4 the texture that should be appliad to state X
+        // regionXColorMap: X = 1..4 the texture that should be applied to state X
         // regionX: a Vector3f containing the following information:
         //      regionX.x: the start height of the region
         //      regionX.y: the end height of the region

File: jme3-examples/src/main/java/jme3test/terrain/TerrainGridTileLoaderTest.java
Patch:
@@ -62,7 +62,7 @@ public void simpleInitApp() {
                 "Common/MatDefs/Terrain/HeightBasedTerrain.j3md");
 
         // Parameters to material:
-        // regionXColorMap: X = 1..4 the texture that should be appliad to state X
+        // regionXColorMap: X = 1..4 the texture that should be applied to state X
         // regionX: a Vector3f containing the following information:
         //      regionX.x: the start height of the region
         //      regionX.y: the end height of the region

File: jme3-examples/src/main/java/jme3test/water/TestPostWater.java
Patch:
@@ -262,7 +262,7 @@ private void createTerrain(Node rootNode) {
         rootNode.attachChild(terrain);
 
     }
-    //This part is to emulate tides, slightly varrying the height of the water plane
+    //This part is to emulate tides, slightly varying the height of the water plane
     private float time = 0.0f;
     private float waterHeight = 0.0f;
     final private float initialWaterHeight = 90f;//0.8f;

File: jme3-ios/src/main/java/com/jme3/input/ios/IosTouchHandler.java
Patch:
@@ -48,7 +48,7 @@
  * AndroidTouchHandler is the base class that receives touch inputs from the 
  * Android system and creates the TouchEvents for jME.  This class is designed
  * to handle the base touch events for Android rev 9 (Android 2.3).  This is
- * extended by other classes to add features that were introducted after
+ * extended by other classes to add features that were introduced after
  * Android rev 9.
  * 
  * @author iwgeric
@@ -82,7 +82,7 @@ public void actionDown(int pointerId, long time, float x, float y) {
         touch.setPointerId(pointerId);//TODO: pointer ID
         touch.setTime(time);
         touch.setPressure(1.0f);
-        //touch.setPressure(event.getPressure(pointerIndex)); //TODO: preassure
+        //touch.setPressure(event.getPressure(pointerIndex)); //TODO: pressure
 
         lastPositions.put(pointerId, new Vector2f(jmeX, jmeY));
 
@@ -97,7 +97,7 @@ public void actionUp(int pointerId, long time, float x, float y) {
         touch.setPointerId(pointerId);//TODO: pointer ID
         touch.setTime(time);
         touch.setPressure(1.0f);
-        //touch.setPressure(event.getPressure(pointerIndex)); //TODO: preassure
+        //touch.setPressure(event.getPressure(pointerIndex)); //TODO: pressure
         lastPositions.remove(pointerId);
 
         processEvent(touch);

File: jme3-jbullet/src/main/java/com/jme3/bullet/collision/PhysicsRayTestResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -71,7 +71,7 @@ public Vector3f getHitNormalLocal() {
 
     /**
      * The hitFraction is the fraction of the ray length (yeah, I know) at which the collision occurred.
-     * If e.g. the raytest was from 0,0,0 to 0,6,0 and the hitFraction is 0.5 then the collision occurred at 0,3,0
+     * If e.g. the ray test was from 0,0,0 to 0,6,0 and the hitFraction is 0.5 then the collision occurred at 0,3,0
      * @return the hitFraction
      */
     public float getHitFraction() {

File: jme3-jbullet/src/main/java/com/jme3/bullet/joints/PhysicsJoint.java
Patch:
@@ -38,7 +38,7 @@
 import java.io.IOException;
 
 /**
- * <p>PhysicsJoint - Basic Phyiscs Joint</p>
+ * <p>PhysicsJoint - Basic Physics Joint</p>
  * @author normenhansen
  */
 public abstract class PhysicsJoint implements Savable {

File: jme3-jbullet/src/main/java/com/jme3/bullet/joints/Point2PointJoint.java
Patch:
@@ -44,8 +44,8 @@
 /**
  * <i>From bullet manual:</i><br>
  * Point to point constraint, also known as ball socket joint limits the translation
- * so that the local pivot points of 2 rigidbodies match in worldspace.
- * A chain of rigidbodies can be connected using this constraint.
+ * so that the local pivot points of 2 rigid bodies match in worldspace.
+ * A chain of rigid bodies can be connected using this constraint.
  * @author normenhansen
  */
 public class Point2PointJoint extends PhysicsJoint {

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -92,7 +92,7 @@ public PhysicsRigidBody(CollisionShape shape, float mass) {
     }
 
     /**
-     * Builds/rebuilds the phyiscs body when parameters have changed
+     * Builds/rebuilds the physics body when parameters have changed
      */
     protected void rebuildRigidBody() {
         boolean removed = false;
@@ -440,7 +440,7 @@ public float getRestitution() {
     }
 
     /**
-     * The "bouncyness" of the PhysicsRigidBody, best performance if restitution=0
+     * The "bounciness" of the PhysicsRigidBody, best performance if restitution=0
      *
      * @param restitution the desired value (default=0)
      */
@@ -592,7 +592,7 @@ public boolean isActive() {
 
     /**
      * sets the sleeping thresholds, these define when the object gets deactivated
-     * to save ressources. Low values keep the object active when it barely moves
+     * to save resources. Low values keep the object active when it barely moves
      * @param linear the linear sleeping threshold
      * @param angular the angular sleeping threshold
      */

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsVehicle.java
Patch:
@@ -378,7 +378,7 @@ public float getSuspensionStiffness() {
     /**
      * Use before adding wheels, this is the default used when adding wheels.
      * After adding the wheel, use direct wheel access.<br>
-     * The stiffness constant for the suspension.  10.0 - Offroad buggy, 50.0 - Sports car, 200.0 - F1 Car
+     * The stiffness constant for the suspension.  10.0 - Off-road buggy, 50.0 - Sports car, 200.0 - F1 Car
      *
      * @param suspensionStiffness the desired stiffness coefficient
      * (10&rarr;off-road buggy, 50&rarr;sports car, 200&rarr;Formula-1 race car,
@@ -389,7 +389,7 @@ public void setSuspensionStiffness(float suspensionStiffness) {
     }
 
     /**
-     * The stiffness constant for the suspension.  10.0 - Offroad buggy, 50.0 - Sports car, 200.0 - F1 Car
+     * The stiffness constant for the suspension.  10.0 - Off-road buggy, 50.0 - Sports car, 200.0 - F1 Car
      *
      * @param wheel the index of the wheel to modify (&ge;0, &lt;count)
      * @param suspensionStiffness the desired stiffness coefficient

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/infos/RigidBodyMotionState.java
Patch:
@@ -42,7 +42,7 @@
 
 /**
  * stores transform info of a PhysicsNode in a threadsafe manner to
- * allow multithreaded access from the jme scenegraph and the bullet physicsspace
+ * allow multithreaded access from the jme scenegraph and the bullet physics space
  * @author normenhansen
  */
 public class RigidBodyMotionState extends MotionState {

File: jme3-jbullet/src/main/java/com/jme3/bullet/util/DebugShapeFactory.java
Patch:
@@ -151,7 +151,7 @@ private static FloatBuffer getVertices(ConcaveShape concaveShape) {
         BufferedTriangleCallback triangleProcessor = new BufferedTriangleCallback();
         concaveShape.processAllTriangles(triangleProcessor, aabbMin, aabbMax);
 
-        // Retrieve the vextex and index buffers
+        // Retrieve the vertex and index buffers
         return triangleProcessor.getVertices();
     }
 
@@ -199,7 +199,7 @@ private static FloatBuffer getVertices(ConvexShape convexShape) {
             vertexB = hullVertices.get(hullIndicies.get(index++));
             vertexC = hullVertices.get(hullIndicies.get(index++));
 
-            // Put the verticies into the vertex buffer
+            // Put the vertices into the vertex buffer
             vertices.put(vertexA.x).put(vertexA.y).put(vertexA.z);
             vertices.put(vertexB.x).put(vertexB.y).put(vertexB.z);
             vertices.put(vertexC.x).put(vertexC.y).put(vertexC.z);

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglDisplay.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -177,7 +177,7 @@ public void create(boolean waitFor){
 
     @Override
     public void runLoop(){
-        // This method is overriden to do restart
+        // This method is overridden to do restart
         if (needRestart.getAndSet(false)) {
             try {
                 createContext(settings);

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglSmoothingTimer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -139,7 +139,7 @@ public float getTimePerFrame() {
     }
 
     /**
-     * <code>update</code> recalulates the frame rate based on the previous
+     * <code>update</code> recalculates the frame rate based on the previous
      * call to update. It is assumed that update is called each frame.
      */
     @Override

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglTimer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -114,7 +114,7 @@ public float getTimePerFrame() {
     }
 
     /**
-     * <code>update</code> recalulates the frame rate based on the previous
+     * <code>update</code> recalculates the frame rate based on the previous
      * call to update. It is assumed that update is called each frame.
      */
     @Override

File: jme3-networking/src/main/java/com/jme3/network/HostedConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -76,7 +76,7 @@ public interface HostedConnection extends MessageConnection
     public Object setAttribute( String name, Object value );
     
     /**
-     *  Retrieves a previosly stored session attribute or
+     *  Retrieves a previously stored session attribute or
      *  null if no such attribute exists.
      */
     public <T> T getAttribute( String name );

File: jme3-networking/src/main/java/com/jme3/network/Network.java
Patch:
@@ -86,7 +86,7 @@ public static Server createServer( int tcpPort, int udpPort ) throws IOException
      *
      *  @param gameName This is the name that identifies the game.  Connecting clients
      *                  must use this name or be turned away.
-     *  @param version  This is a game-specific verison that helps detect when out-of-date
+     *  @param version  This is a game-specific version that helps detect when out-of-date
      *                  clients have connected to an incompatible server.
      *  @param tcpPort  The port upon which the TCP hosting will listen for new connections.
      *  @param udpPort  The port upon which the UDP hosting will listen for new 'fast' UDP 
@@ -153,7 +153,7 @@ public static Client connectToServer( String gameName, int version,
      *  
      *  @param gameName This is the name that identifies the game.  This must match
      *                  the target server's name or this client will be turned away.
-     *  @param version  This is a game-specific verison that helps detect when out-of-date
+     *  @param version  This is a game-specific version that helps detect when out-of-date
      *                  clients have connected to an incompatible server.  This must match
      *                  the server's version of this client will be turned away.
      *  @param hostPort  The remote TCP port on the server to which this client should

File: jme3-networking/src/main/java/com/jme3/network/base/DefaultClient.java
Patch:
@@ -155,7 +155,7 @@ public void start()
         // their UDP ports mapped all over the place.
         //
         // Since currentTimeMillis() is absolute time and nano time
-        // is roughtly related to system start time, adding these two
+        // is roughly related to system start time, adding these two
         // together should be plenty unique for our purposes.  It wouldn't
         // hurt to reconcile with IP on the server side, though.
         long tempId = System.currentTimeMillis() + System.nanoTime();
@@ -482,7 +482,7 @@ protected void dispatch( Message m )
             }
             return;
         } else if( m instanceof ChannelInfoMessage ) {
-            // This is an interum step in the connection process and
+            // This is an interim step in the connection process and
             // now we need to add a bunch of connections
             configureChannels( ((ChannelInfoMessage)m).getId(), ((ChannelInfoMessage)m).getPorts() );
             return; 

File: jme3-networking/src/main/java/com/jme3/network/base/DefaultServer.java
Patch:
@@ -210,7 +210,7 @@ public void close()
         services.stop();
  
         try {
-            // Kill the adpaters, they will kill the kernels
+            // Kill the adapters, they will kill the kernels
             for( KernelAdapter ka : channels ) {
                 ka.close();
             }

File: jme3-networking/src/main/java/com/jme3/network/base/KernelAdapter.java
Patch:
@@ -139,7 +139,7 @@ protected HostedConnection getConnection( Endpoint p )
     protected void connectionClosed( Endpoint p )
     {
         // Remove any message buffer we've been accumulating 
-        // on behalf of this endpoing
+        // on behalf of this endpoint
         messageBuffers.remove(p);
 
         log.log( Level.FINE, "Buffers size:{0}", messageBuffers.size() );

File: jme3-networking/src/main/java/com/jme3/network/base/protocol/LazyMessageBuffer.java
Patch:
@@ -156,7 +156,7 @@ else if( buffer.remaining() < 2 ) {
                 // change.  We are already creating per-message byte buffers.
                 // ...so we might as well just buffer this in our queue instead.
                 // The alternative is to somehow have an open-ended working buffer
-                // that expands/shrinks as needed to accomodate the 'unknown' number
+                // that expands/shrinks as needed to accommodate the 'unknown' number
                 // of messages that must be buffered before the caller asks for
                 // one.  Obviously, that's way more wasteful than just keeping
                 // per-message byte buffers around.  We already had them anyway.

File: jme3-networking/src/main/java/com/jme3/network/kernel/AbstractKernel.java
Patch:
@@ -113,7 +113,7 @@ public Envelope read() throws InterruptedException
     }
 
     /**
-     *  Removes and returnsn one endpoint event from the event queue or
+     *  Removes and returns one endpoint event from the event queue or
      *  null if there are no endpoint events.
      */
     @Override

File: jme3-networking/src/main/java/com/jme3/network/kernel/Kernel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -86,7 +86,7 @@ public void broadcast( Filter<? super Endpoint> filter, ByteBuffer data, boolean
     public Envelope read() throws InterruptedException;
     
     /**
-     *  Removes and returnsn one endpoint event from the event queue or
+     *  Removes and returns one endpoint event from the event queue or
      *  null if there are no endpoint events.     
      */
     public EndpointEvent nextEvent();     

File: jme3-networking/src/main/java/com/jme3/network/kernel/udp/UdpKernel.java
Patch:
@@ -184,7 +184,7 @@ protected void newData( DatagramPacket packet )
         // So the tricky part here is figuring out the endpoint and
         // whether it's new or not.  In these UDP schemes, firewalls have
         // to be ported back to a specific machine so we will consider
-        // the address + port (ie: SocketAddress) the defacto unique
+        // the address + port (ie: SocketAddress) the de facto unique
         // ID.
         Endpoint p = getEndpoint( packet.getSocketAddress(), true );
 

File: jme3-networking/src/main/java/com/jme3/network/rmi/RmiSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -49,7 +49,7 @@ public class RmiSerializer extends Serializer {
 
     private static final Logger logger = Logger.getLogger(RmiSerializer.class.getName());
 
-    // not good for multithread applications
+    // not good for multithreaded applications
     private char[] chrBuf = new char[256];
 
     private void writeString(ByteBuffer buffer, String string) throws IOException{

File: jme3-networking/src/main/java/com/jme3/network/serializing/Serializer.java
Patch:
@@ -80,7 +80,7 @@ public abstract class Serializer {
     
     public static void initialize() {
 
-        // Reset all of the inexes and tracking variables just in case
+        // Reset all of the indices and tracking variables just in case
         idRegistrations.clear();
         classRegistrations.clear();
         registrations.clear();        
@@ -446,7 +446,7 @@ public static void writeClassAndObject(ByteBuffer buffer, Object object) throws
         // In that case, the SerializerRegistration object we get back isn't
         // really going to be capable of recreating the object on the other
         // end because it won't know what class to use.  This only comes up
-        // in writeclassAndObejct() because we just wrote an ID to a more generic
+        // in writeclassAndObject() because we just wrote an ID to a more generic
         // class than will be readable on the other end.  The check is simple, though.
         if( reg.getType() != object.getClass() ) {
             throw new IllegalArgumentException("Class has not been registered:" 

File: jme3-networking/src/main/java/com/jme3/network/service/AbstractHostedConnectionService.java
Patch:
@@ -49,8 +49,8 @@
  *  stopHostingOnConnection() methods to handle service and connection initialization.</p>
  *
  *  <p>An autoHost flag controls whether startHostingOnConnection() is called
- *  automatically when new connections are detected.  If autoHohst is false then it
- *  is up to the implementation or appliction to specifically start hosting at 
+ *  automatically when new connections are detected.  If autoHost is false then it
+ *  is up to the implementation or application to specifically start hosting at
  *  some point.</p>
  *
  *  @author    Paul Speed

File: jme3-networking/src/main/java/com/jme3/network/service/AbstractHostedService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015 jMonkeyEngine
+ * Copyright (c) 2015-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -62,15 +62,15 @@ protected Server getServer() {
 
     /**
      *  Default implementation does nothing.  Implementations can
-     *  override this to peform custom new connection behavior.
+     *  override this to perform custom new connection behavior.
      */
     @Override
     public void connectionAdded(Server server, HostedConnection hc) {
     }
 
     /**
      *  Default implementation does nothing.  Implementations can
-     *  override this to peform custom leaving connection behavior.
+     *  override this to perform custom leaving connection behavior.
      */
     @Override
     public void connectionRemoved(Server server, HostedConnection hc) {

File: jme3-networking/src/main/java/com/jme3/network/service/ClientServiceManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015 jMonkeyEngine
+ * Copyright (c) 2015-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -60,7 +60,7 @@ public Client getClient() {
 
     /**
      *  Returns 'this' and is what is passed to ClientService.initialize()
-     *  and ClientService.termnate();
+     *  and ClientService.terminate();
      */
     @Override
     protected final ClientServiceManager getParent() {

File: jme3-networking/src/main/java/com/jme3/network/service/HostedServiceManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015 jMonkeyEngine
+ * Copyright (c) 2015-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -67,7 +67,7 @@ public Server getServer() {
 
     /**
      *  Returns 'this' and is what is passed to HostedService.initialize()
-     *  and HostedService.termnate();
+     *  and HostedService.terminate();
      */
     @Override
     protected final HostedServiceManager getParent() {

File: jme3-networking/src/main/java/com/jme3/network/service/rmi/RmiHostedService.java
Patch:
@@ -126,7 +126,7 @@ public <T> void shareGlobal( String name, T object, Class<? super T> type ) {
      *  channel.  All connections with RMI hosting started will have access to this shared 
      *  object as soon as they connect and they will all share the same instance.  It is up 
      *  to the shared object to handle any multithreading that might be required.
-     *  All network communcation associated with the shared object will be done over
+     *  All network communication associated with the shared object will be done over
      *  the specified channel. 
      */     
     public <T> void shareGlobal( byte channel, String name, T object, Class<? super T> type ) {

File: jme3-networking/src/main/java/com/jme3/network/service/rpc/RpcClientService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015 jMonkeyEngine
+ * Copyright (c) 2015-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -95,7 +95,7 @@ public void terminate( ClientServiceManager serviceManager ) {
  
     /**
      *  Performs a synchronous call on the server against the specified
-     *  object using the specified procedure ID.  Both inboud and outbound
+     *  object using the specified procedure ID.  Both inbound and outbound
      *  communication is done on the specified channel.
      */
     public Object callAndWait( byte channel, short objId, short procId, Object... args ) {

File: jme3-networking/src/main/java/com/jme3/network/service/rpc/RpcConnection.java
Patch:
@@ -118,7 +118,7 @@ public Object callAndWait( byte channel, short objId, short procId, Object... ar
         }
         
         // Prevent non-async messages from being send as UDP
-        // because there is a high probabilty that this would block
+        // because there is a high probability that this would block
         // forever waiting for a response.  For async calls it's ok
         // so it doesn't do the check.
         if( channel >= 0 ) {        

File: jme3-networking/src/main/java/com/jme3/network/util/ObjectMessageDelegator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015 jMonkeyEngine
+ * Copyright (c) 2015-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -57,7 +57,7 @@ public class ObjectMessageDelegator<S extends MessageConnection> extends Abstrac
      *  <li>void someName(Message msg)
      *  </ul>
      *  Where S is the type of MessageConnection and SomeMessage is some
-     *  specific concreate Message subclass.
+     *  specific concrete Message subclass.
      */   
     public ObjectMessageDelegator( Object delegate, boolean automap ) {
         super(delegate.getClass(), automap);

File: jme3-networking/src/main/java/com/jme3/network/util/SessionDataDelegator.java
Patch:
@@ -63,7 +63,7 @@ public class SessionDataDelegator extends AbstractMessageDelegator<HostedConnect
      *  <li>void someName(Message msg)
      *  </ul>
      *  Where S is the type of MessageConnection and SomeMessage is some
-     *  specific concreate Message subclass.
+     *  specific concrete Message subclass.
      */   
     public SessionDataDelegator( Class delegateType, String attributeName, boolean automap ) {
         super(delegateType, automap);

File: jme3-niftygui/src/main/java/com/jme3/niftygui/JmeBatchRenderBackend.java
Patch:
@@ -202,7 +202,7 @@ public int createTextureAtlas(final int width, final int height) {
             return atlasId;
         } catch (Exception e) {
             log.log(Level.WARNING, e.getMessage(), e);
-            return 0; // TODO Nifty always expects this call to be successfull
+            return 0; // TODO Nifty always expects this call to be successful
             // there currently is no way to return failure or something :/
         }
     }

File: jme3-niftygui/src/main/java/com/jme3/niftygui/RenderDeviceJme.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -361,10 +361,10 @@ public void renderImage(RenderImage image, int x, int y, int width, int height,
     @Override
     public void renderQuad(int x, int y, int width, int height, Color color) {
         //We test for alpha >0 as an optimization to prevent the render of completely transparent quads.
-        //Nifty use layers that are often used for logical positionning and not rendering.
+        //Nifty layers are often used for logical positioning and not rendering.
         //each layer is rendered as a quad, but that can bump up the number of geometry rendered by a lot.
         //Since we disable depth write, there is absolutely no point in rendering those quads
-        //This optimization can result in a huge increase of perfs on complex Nifty UIs.
+        //This optimization can result in a huge performance increase on complex Nifty UIs.
         if(color.getAlpha() >0){
             colorMaterial.setColor("Color", convertColor(color, tempColor));
 

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/FbxLoader.java
Patch:
@@ -115,7 +115,7 @@ public Object load(AssetInfo assetInfo) throws IOException {
             // Need world transforms for skeleton creation.
             updateWorldTransforms();
             
-            // Need skeletons for meshs to be created in scene graph construction.
+            // Need skeletons for meshes to be created in scene graph construction.
             // Mesh bone indices require skeletons to determine bone index.
             constructSkeletons();
             

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/RotationOrder.java
Patch:
@@ -8,7 +8,7 @@ public enum RotationOrder {
 	
 	EULER_XYZ, EULER_XZY, EULER_YZX, EULER_YXZ, EULER_ZXY, EULER_ZYX, SPHERIC_XYZ;
 	
-	// Static values field for fast access by an oridinal without Enum.values() overhead
+	// Static values field for fast access by ordinal without Enum.values() overhead
 	public static final RotationOrder[] values = values();
 	
 	private RotationOrder() {

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/file/FbxElement.java
Patch:
@@ -51,7 +51,7 @@ public class FbxElement {
 	 * i - array of ints
 	 * d - array of doubles
 	 * l - array of longs
-	 * b - array of boleans
+	 * b - array of booleans
 	 * c - array of unsigned bytes (represented as array of ints)
 	 */
 	public char[] propertiesTypes;

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/objects/FbxImage.java
Patch:
@@ -88,7 +88,7 @@ private Image createImage() {
 				filename = new File(this.filename).getName();
 			if(filename != null && this.relativeFilename != null)
 				filename = this.relativeFilename;
-			// Filename is required to aquire asset loader by extension
+			// Filename is required to acquire asset loader by extension
 			if(filename != null) {
 				String locatorPath = scene.sceneFilename;
 				filename = scene.sceneFilename + File.separatorChar + filename; // Unique path

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/objects/FbxMaterial.java
Patch:
@@ -105,7 +105,7 @@ private Material createMaterial() {
 		m.setColor("Specular", new ColorRGBA(specularColor.x, specularColor.y, specularColor.z, 1));
 		m.setFloat("Shininess", shininessExponent);
 		m.setBoolean("UseMaterialColors", true);
-		m.setFloat("AlphaDiscardThreshold", 0.5f); // TODO replace with right way in JME to set "Aplha Test"
+		m.setFloat("AlphaDiscardThreshold", 0.5f); // TODO replace with right way in JME to set "Alpha Test"
 		m.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);
 		return m;
 	}

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -943,7 +943,7 @@ public void readAnimation(int animationIndex) throws IOException {
 
         if (!spatials.isEmpty()) {
             if (skinIndex != -1) {
-                //there are some spatial or moph tracks in this bone animation... or the other way around. Let's add the spatials in the skinnedSpatials.
+                //there are some spatial or morph tracks in this bone animation... or the other way around. Let's add the spatials in the skinnedSpatials.
                 SkinData skin = fetchFromCache("skins", skinIndex, SkinData.class);
                 List<Spatial> spat = skinnedSpatials.get(skin);
                 spat.addAll(spatials);
@@ -1323,7 +1323,7 @@ public float[] populate(Integer bufferViewIndex, int componentType, String type,
 
     }
 //
-//    private class FloaGridPopulator implements Populator<float[]> {
+//    private class FloatGridPopulator implements Populator<float[]> {
 //
 //        @Override
 //        public float[][] populate(Integer bufferViewIndex, int componentType, String type, int count, int byteOffset, boolean normalized) throws IOException {

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/LightsPunctualExtensionLoader.java
Patch:
@@ -220,7 +220,7 @@ private void addLight(Node parent, Node node, int lightIndex) {
      * represents both color and brightness of the light.
      *
      * @param color The base color of the light
-     * @param lumens The lumnes value to convert to a color
+     * @param lumens The lumens value to convert to a color
      * @return A color representing the intensity of the given lumens encoded into the given color
      */
     private ColorRGBA lumensToColor(ColorRGBA color, float lumens) {
@@ -232,7 +232,7 @@ private ColorRGBA lumensToColor(ColorRGBA color, float lumens) {
      * Convert a floating point lumens value into a grayscale color that
      * represents a brightness.
      *
-     * @param lumens The lumnes value to convert to a color
+     * @param lumens The lumens value to convert to a color
      * @return A color representing the intensity of the given lumens
      */
     private ColorRGBA lumensToColor(float lumens) {

File: jme3-plugins/src/main/java/com/jme3/scene/plugins/IrUtils.java
Patch:
@@ -71,7 +71,7 @@ private static IrPolygon[] quadToTri(IrPolygon quad) {
         IrVertex v2 = quad.vertices[2];
         IrVertex v3 = quad.vertices[3];
         
-        // find the pair of verticies that is closest to each over
+        // find the pair of vertices that is closest to each over
         // v0 and v2
         // OR
         // v1 and v3
@@ -344,7 +344,7 @@ public static Mesh convertIrMeshToJmeMesh(IrMesh mesh) {
             jmeMesh.setBuffer(indicesHW);
         }
         if (vertices.size() >= 65536) {
-            // too many verticies: use intbuffer instead of shortbuffer
+            // too many vertices: use IntBuffer instead of ShortBuffer
             IntBuffer ib = BufferUtils.createIntBuffer(indexes.size());
             jmeMesh.setBuffer(VertexBuffer.Type.Index, 3, ib);
             indexBuf = new IndexIntBuffer(ib);

File: jme3-terrain/src/main/java/com/jme3/terrain/Terrain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -49,7 +49,7 @@
 public interface Terrain {
 
     /**
-     * Get the real-world height of the terrain at the specified X-Z coorindate.
+     * Get the real-world height of the terrain at the specified X-Z coordinate.
      * @param xz the X-Z world coordinate
      * @return the height at the given point
      */

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/LODGeomap.java
Patch:
@@ -57,7 +57,7 @@
  * mesh, minus one outer edge around it. Then it builds the edges in counter-clockwise order,
  * starting at the bottom right and working up, then left across the top, then down across the
  * left, then right across the bottom.
- * It needs to know what its neighbour's LOD's are so it can stitch the edges.
+ * It needs to know what its neighbour's LODs are so it can stitch the edges.
  * It creates degenerate polygons in order to keep the winding order of the polygons and to move
  * the strip to a new position while still maintaining the continuity of the overall mesh. These
  * degenerates are removed quickly by the video card.

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -278,7 +278,7 @@ private void initData() {
 
     /**
      * Get the location in cell-coordinates of the specified location.
-     * Cell coordinates are integer corrdinates, usually with y=0, each 
+     * Cell coordinates are integer coordinates, usually with y=0, each
      * representing a cell in the world.
      * For example, moving right in the +X direction:
      * (0,0,0) (1,0,0) (2,0,0), (3,0,0)

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -1282,7 +1282,7 @@ public int getTerrainSize() {
     }
 
 
-    // a position can be in multiple quadrants, so use a bit anded value.
+    // a position can be in multiple quadrants, so return a bitmask.
     private int findQuadrant(int x, int y) {
         int split = (size + 1) >> 1;
         int quads = 0;

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/FaultHeightMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -51,7 +51,7 @@ public class FaultHeightMap extends AbstractHeightMap {
      */
     public static final int FAULTTYPE_STEP = 0;
     /**
-     * Values on one side are lowered, then increase lineary while crossing
+     * Values on one side are lowered, then increase linearly while crossing
      * the fault line to the other side. The fault line will be an inclined
      * plane
      */
@@ -187,7 +187,7 @@ protected void addLineFault(float[][] tempBuffer, Random random, float faultHeig
     protected void addCircleFault(float[][] tempBuffer, Random random, float faultHeight, float range) {
         float radius = random.nextFloat() * (maxRadius - minRadius) + minRadius;
         int intRadius = (int) FastMath.floor(radius);
-        // Allox circle center to be out of map if not by more than radius.
+        // Allow circle center to be out of map if not by more than radius.
         // Unlucky cases will put them in the far corner, with the circle
         // entirely outside heightmap
         int x = random.nextInt(size + 2 * intRadius) - intRadius;

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/HillHeightMap.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * <code>HillHeightMap</code> generates a height map base on the Hill
- * Algorithm. Terrain is generatd by growing hills of random size and height at
+ * Algorithm. Terrain is generated by growing hills of random size and height at
  * random points in the heightmap. The terrain is then normalized and valleys
  * can be flattened.
  * 

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/RawHeightMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -139,7 +139,7 @@ private void setup(InputStream stream, int size, int format, boolean swapxy) thr
      * <code>load</code> fills the height data array with the appropriate data
      * from the set RAW image.
      *
-     * @return true if the load is successfull, false otherwise.
+     * @return true if the load is successful, false otherwise.
      * @throws RuntimeException if the RAW image has not been set
      */
     @Override

File: jme3-terrain/src/main/java/com/jme3/terrain/noise/fractal/Fractal.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Interface for a general fractal basis.
  * 
- * Takes any number of basis funcions to work with and a few common parameters
+ * Takes any number of basis functions to work with and a few common parameters
  * for noise fractals
  * 
  * @author Anthyon

File: jme3-vr/src/main/java/com/jme3/app/VRAppState.java
Patch:
@@ -1,7 +1,7 @@
 package com.jme3.app;
 
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -398,7 +398,7 @@ public void update(float tpf) {
 
         if( environment.isInVR() == false || environment.getVRGUIManager().getPositioningMode() == VRGUIPositioningMode.MANUAL ) {
             // only update geometric state here if GUI is in manual mode, or not in VR
-            // it will get updated automatically in the viewmanager update otherwise
+            // it will get updated automatically in the view manager update otherwise
             // TODO isn't this done by SimpleApplication?
             for (Spatial spatial : application.getGuiViewPort().getScenes()) {
             	//spatial.updateLogicalState(tpf);

File: jme3-vr/src/main/java/com/jme3/app/VRApplication.java
Patch:
@@ -819,7 +819,7 @@ public void start(JmeContext.Type contextType, boolean waitFor){
 
         logger.log(Level.FINE, "Starting application: {0}", getClass().getName());
         
-        // Create VR decicated context
+        // Create VR dedicated context
         if (contextType == Type.Display){
           context = new LwjglDisplayVR();
           context.setSettings(settings);
@@ -1238,7 +1238,7 @@ private void initAssetManager(){
     
 
     private void initDisplay(){
-        // aquire important objects
+        // acquire important objects
         // from the context
         settings = context.getSettings();
 
@@ -1274,7 +1274,7 @@ private void initCamera(){
         cam.lookAt(new Vector3f(0f, 0f, 0f), Vector3f.UNIT_Y);
 
         renderManager = new RenderManager(renderer);
-        //Remy - 09/14/2010 setted the timer in the renderManager
+        //Remy - 09/14/2010 set the timer in the renderManager
         renderManager.setTimer(timer);
 
         viewPort = renderManager.createMainView("Default", cam);

File: jme3-vr/src/main/java/com/jme3/app/VRConstants.java
Patch:
@@ -117,7 +117,7 @@ public class VRConstants {
      * <li>{@link VRConstants#SETTING_VRAPI_OPENVR_VALUE SETTING_VRAPI_OPENVR_VALUE}: Use OpenVR binding.
      * <li>{@link VRConstants#SETTING_VRAPI_OSVR_VALUE SETTING_VRAPI_OSVR_VALUE}: Use OSVR binding.
      * <li>{@link VRConstants#SETTING_VRAPI_OPENVR_LWJGL_VALUE SETTING_VRAPI_OPENVR_LWJGL_VALUE}: Use OpenVR binding from LWJGL.
-     * <li>{@link VRConstants#SETTING_VRAPI_OCULUSVR_VALUE SETTING_VRAPI_OCULUSVR_VALUE}: Use Occulus Rift binding binding.
+     * <li>{@link VRConstants#SETTING_VRAPI_OCULUSVR_VALUE SETTING_VRAPI_OCULUSVR_VALUE}: Use Oculus Rift binding binding.
      * </ul>
      * <b>Type: </b><code>int</code><br>
 	 * <b>Usage: </b><code>{@link AppSettings appSettings}.{@link HashMap#put(Object, Object) put}(VRConstants.SETTING_VRAPI, value)</code>

File: jme3-vr/src/main/java/com/jme3/app/VREnvironment.java
Patch:
@@ -405,7 +405,7 @@ public void atttach(AppState appState, Application application){
     	this.application = application;
     	this.app         = appState;
     	
-    	// Instanciate view manager
+    	// Instantiate view manager
     	if (vrBinding == VRConstants.SETTING_VRAPI_OPENVR_VALUE){
     		viewmanager = new OpenVRViewManager(this);
     	} else if (vrBinding == VRConstants.SETTING_VRAPI_OSVR_VALUE){

File: jme3-vr/src/main/java/com/jme3/input/vr/AbstractVRMouseManager.java
Patch:
@@ -16,7 +16,7 @@
 import com.jme3.ui.Picture;
 
 /**
- * An abstract implementation of a {@link VRMouseManager}. This class should be overrided by specific hardware implementation of VR devices.
+ * An abstract implementation of a {@link VRMouseManager}. This class should be overridden by specific hardware implementation of VR devices.
  * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  *
  */

File: jme3-vr/src/main/java/com/jme3/input/vr/HmdType.java
Patch:
@@ -18,7 +18,7 @@ public enum HmdType {
     VALVE_INDEX,
 
     /**
-     * <a href="https://www3.oculus.com/en-us/rift/">Occulus Rift</a> Head Mounted Device (HMD).
+     * <a href="https://www3.oculus.com/en-us/rift/">Oculus Rift</a> Head Mounted Device (HMD).
      */
     OCULUS_RIFT, 
     
@@ -43,7 +43,7 @@ public enum HmdType {
     GAMEFACE, 
     
     /**
-     * <a href="https://www.playstation.com/en-us/explore/playstation-vr/">PlayStation VR</a> (formely Morpheus) Head Mounted Device (HMD).
+     * <a href="https://www.playstation.com/en-us/explore/playstation-vr/">PlayStation VR</a> (formerly Morpheus) Head Mounted Device (HMD).
      */
     MORPHEUS, 
     

File: jme3-vr/src/main/java/com/jme3/input/vr/lwjgl_openvr/LWJGLOpenVRTrackedController.java
Patch:
@@ -15,7 +15,7 @@
 public class LWJGLOpenVRTrackedController implements VRTrackedController{
 
 	/**
-	 * The index of the controller within the unserlying VR API.
+	 * The index of the controller within the underlying VR API.
 	 */
 	private int controllerIndex = -1;
 	

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/OculusVR.java
Patch:
@@ -567,7 +567,7 @@ public void setupFramebuffers(int eye) {
      * @return The {@code to} argument.
      */
     public static Matrix4f matrixO2J(OVRMatrix4f from, Matrix4f to) {
-        to.loadIdentity(); // For the additional columns (unless I'm badly misunderstanding matricies)
+        to.loadIdentity(); // For the additional columns (unless I'm badly misunderstanding matrices)
 
         for (int x = 0; x < 4; x++) {
             for (int y = 0; y < 4; y++) {

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/OculusVRInput.java
Patch:
@@ -69,7 +69,7 @@ public void dispose() {
 
     @Override
     public void updateControllerStates() {
-        // Handle buttons, axies
+        // Handle buttons, axes
         ovr_GetInputState(session, ovrControllerType_Touch, inputState);
         buttons = inputState.Buttons();
         touch = inputState.Touches();

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/package-info.java
Patch:
@@ -30,6 +30,6 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 /**
- * user-input classes for Occulus Rift headsets
+ * user-input classes for Oculus Rift headsets
  */
 package com.jme3.input.vr.oculus;

File: jme3-vr/src/main/java/com/jme3/input/vr/openvr/OpenVRTrackedController.java
Patch:
@@ -14,7 +14,7 @@
 public class OpenVRTrackedController implements VRTrackedController{
 
 	/**
-	 * The index of the controller within the unserlying VR API.
+	 * The index of the controller within the underlying VR API.
 	 */
 	private int controllerIndex = -1;
 	

File: jme3-vr/src/main/java/com/jme3/input/vr/osvr/OSVR.java
Patch:
@@ -183,7 +183,7 @@ public boolean initialize() {
      * Grab the current GLFW context.
      */
     public void grabGLFWContext() {
-        // get current conext
+        // get current context
         wglGLFW = org.lwjgl.opengl.WGL.wglGetCurrentContext();
         glfwContext = org.lwjgl.glfw.GLFW.glfwGetCurrentContext();
     }

File: jme3-vr/src/main/java/com/jme3/shadow/AbstractShadowRendererVR.java
Patch:
@@ -552,7 +552,7 @@ private void clearMatParams(){
     protected abstract void setMaterialParameters(Material material);
 
     private void setMatParams(GeometryList l) {
-        //iteration throught all the geometries of the list to gather the materials
+        //iterate through all the geometries of the list to gather the materials
 
         buildMatCache(l);
 

File: jme3-vr/src/main/java/com/jme3/shadow/DirectionalLightShadowRendererVR.java
Patch:
@@ -56,7 +56,7 @@
  * a shadow map for each one.<br> splits are distributed so that the closer they
  * are from the camera, the smaller they are to maximize the resolution used of
  * the shadow map.<br> This results in a better quality shadow than standard
- * shadow mapping.<br> for more informations on this read this <a
+ * shadow mapping.<br> for more information on this read <a
  * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
  *
  * @author Rémy Bouquet aka Nehon

File: jme3-vr/src/main/java/com/jme3/shadow/VRDirectionalLightShadowRenderer.java
Patch:
@@ -40,7 +40,7 @@
  * a shadow map for each one.<br> splits are distributed so that the closer they
  * are from the camera, the smaller they are to maximize the resolution used of
  * the shadow map.<br> This results in a better quality shadow than standard
- * shadow mapping.<br> for more informations on this read this <a
+ * shadow mapping.<br> for more information on this read <a
  * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
  *
  * @author Rémy Bouquet aka Nehon

File: jme3-vr/src/main/java/com/jme3/system/osvr/osvrdisplay/OsvrDisplayLibrary.java
Patch:
@@ -534,7 +534,7 @@ public class OsvrDisplayLibrary implements Library {
 	 * @param eye Eye ID<br>
 	 * @param surface Surface ID<br>
 	 * @param displayInput Zero-based index of the display input pixels for<br>
-	 * this surface are tranmitted over.<br>
+	 * this surface are transmitted over.<br>
 	 * This association is **constant** throughout the active, valid lifetime of a<br>
 	 * display config object.<br>
          * @see #osvrClientGetNumDisplayInputs(com.jme3.system.osvr.osvrdisplay.OsvrDisplayLibrary.OSVR_DisplayConfig, java.nio.ByteBuffer) 
@@ -560,7 +560,7 @@ public class OsvrDisplayLibrary implements Library {
 	 * @param eye Eye ID<br>
 	 * @param surface Surface ID<br>
 	 * @param displayInput Zero-based index of the display input pixels for<br>
-	 * this surface are tranmitted over.<br>
+	 * this surface are transmitted over.<br>
 	 * This association is **constant** throughout the active, valid lifetime of a<br>
 	 * display config object.<br>
          * @see #osvrClientGetNumDisplayInputs(com.jme3.system.osvr.osvrdisplay.OsvrDisplayLibrary.OSVR_DisplayConfig, java.nio.ByteBuffer) 

File: jme3-core/src/main/java/com/jme3/shader/ShaderNodeVariable.java
Patch:
@@ -272,7 +272,7 @@ public void read(JmeImporter im) throws IOException {
         InputCapsule ic = im.getCapsule(this);
         name = ic.readString("name", "");
         type = ic.readString("type", "");
-        prefix = ic.readString("pefix", "");
+        prefix = ic.readString("prefix", "");
         nameSpace = ic.readString("nameSpace", "");
         condition = ic.readString("condition", null);
         shaderOutput = ic.readBoolean("shaderOutput", false);

File: jme3-core/src/main/java/com/jme3/scene/shape/Torus.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -109,7 +109,7 @@ public void read(JmeImporter e) throws IOException {
         circleSamples = capsule.readInt("circleSamples", 0);
         radialSamples = capsule.readInt("radialSamples", 0);
         innerRadius = capsule.readFloat("innerRadius", 0);
-        outerRadius = capsule.readFloat("outerRaidus", 0);
+        outerRadius = capsule.readFloat("outerRadius", 0);
     }
 
     private void setGeometryData() {

File: jme3-core/src/main/java/com/jme3/system/NullRenderer.java
Patch:
@@ -39,6 +39,7 @@
 import com.jme3.renderer.Limits;
 import com.jme3.renderer.Renderer;
 import com.jme3.renderer.Statistics;
+import com.jme3.renderer.TextureUnitException;
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer;
 import com.jme3.shader.BufferObject;
@@ -166,7 +167,8 @@ public void deleteFrameBuffer(FrameBuffer fb) {
     }
 
     @Override
-    public void setTexture(int unit, Texture tex) {
+    public void setTexture(int unit, Texture tex) throws TextureUnitException {
+        // do nothing
     }
 
     @Override

File: jme3-core/src/test/java/com/jme3/math/FastMathTest.java
Patch:
@@ -227,7 +227,6 @@ public void testCartesianToSpherical() {
         assertEquals(in0.z, out0.z, 1e-5f);
     }
 
-    @Ignore // test fails due to issue #1349
     @Test
     public void testCartesianZToSpherical() {
         final Vector3f cartCoords = new Vector3f(1.1f, 5.8f, 8.1f);

File: jme3-examples/src/main/java/jme3test/audio/TestMusicPlayer.java
Patch:
@@ -260,7 +260,7 @@ private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST
     }//GEN-LAST:event_btnStopActionPerformed
 
     private void btnFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFFActionPerformed
-        if (musicSource.getStatus() == Status.Playing){
+        if (musicSource != null && musicSource.getStatus() == Status.Playing) {
             musicSource.setPitch(2);
         }
     }//GEN-LAST:event_btnFFActionPerformed

File: jme3-examples/src/main/java/jme3test/texture/TestTexture3D.java
Patch:
@@ -71,7 +71,7 @@ public void simpleInitApp() {
         BoundingBox bb = (BoundingBox) sphere.getBound();
         Vector3f min = bb.getMin(null);
         float[] ext = new float[]{bb.getXExtent() * 2, bb.getYExtent() * 2, bb.getZExtent() * 2};
-        //we need to change the UV coordinates (the sphere is assumet to be inside the 3D image box)
+        //we need to change the UV coordinates (the sphere is assumed to be inside the 3D image box)
         sphere.clearBuffer(Type.TexCoord);
         VertexBuffer vb = sphere.getBuffer(Type.Position);
         FloatBuffer fb = (FloatBuffer) vb.getData();
@@ -112,7 +112,7 @@ public void simpleInitApp() {
     }
 
     /**
-         * This method creates a RGB8 texture with the sizes of 10x10x10 pixels.
+         * This method creates an RGB8 texture with the sizes of 10x10x10 pixels.
          */
     private Texture getTexture() throws IOException {
         ArrayList<ByteBuffer> data = new ArrayList<>(1);

File: jme3-examples/src/main/java/jme3test/renderer/TestDepthFuncChange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -73,8 +73,8 @@ public void simpleInitApp() {
         rootNode.attachChild(cube2);
         
         //Bottom of the screen
-        //here the 2 cubes are clonned and the depthFunc for the red cube's material is set to Less
-        //You should see the whole bleu cube and a small part of the red cube on the right
+        //here the 2 cubes are cloned and the depthFunc for the red cube's material is set to Less
+        //You should see the whole blue cube and a small part of the red cube on the right
         Geometry cube3 = cube1.clone();
         Geometry cube4 = cube2.clone(true);
         cube4.getMaterial().getAdditionalRenderState().setDepthFunc(RenderState.TestFunction.Less);       

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java
Patch:
@@ -576,6 +576,8 @@ private void restartContext() {
         } catch (Exception ex) {
             LOGGER.log(Level.SEVERE, "Failed to set display settings!", ex);
         }
+        // Reinitialize context flags and such
+        reinitContext();
 
         // We need to reinit the mouse and keyboard input as they are tied to a window handle
         if (keyInput != null && keyInput.isInitialized()) {

File: jme3-core/src/main/java/com/jme3/profile/AppProfiler.java
Patch:
@@ -39,7 +39,7 @@
 /**
  *  Can be hooked into the application (and render manager)
  *  to receive callbacks about specific frame steps.  It is up
- *  to the specific implememtation to decide what to do with
+ *  to the specific implementation to decide what to do with
  *  the information.
  *
  *  @author    Paul Speed

File: jme3-core/src/main/java/com/jme3/environment/LightProbeFactory.java
Patch:
@@ -223,7 +223,8 @@ private static void generatePbrMaps(TextureCubeMap envMap, final LightProbe prob
      */
     public static Node getDebugGui(AssetManager manager, LightProbe probe) {
         if (!probe.isReady()) {
-            throw new UnsupportedOperationException("This EnvProbe is not ready yet, try to test isReady()");
+            throw new IllegalStateException(
+                    "The LightProbe is not ready yet, please test isReady().");
         }
 
         Node debugNode = new Node("debug gui probe");

File: jme3-core/src/main/java/com/jme3/anim/Weights.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 
+@Deprecated
 public class Weights {//}  extends Savable, JmeCloneable{
 
 

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -358,7 +358,7 @@ public void preFrame(float tpf) {
 
         } else {
            setupViewPortFrameBuffer();
-           //if we are ina multiview situation we need to resize the camera 
+           //if we are in a multiview situation we need to resize the camera 
            //to the viewportsize so that the backbuffer is rendered correctly
            if (multiView) {
                 viewPort.getCamera().resize(width, height, false);

File: jme3-networking/src/main/java/com/jme3/network/rmi/ObjectStore.java
Patch:
@@ -328,7 +328,7 @@ private void onMessage(HostedConnection source, Message message) {
 
     private void onConnection(HostedConnection conn) {
         if (localObjects.size() > 0){
-            // send a object definition message
+            // send an object definition message
             ObjectDef[] defs = new ObjectDef[localObjects.size()];
             int i = 0;
             for (Entry<LocalObject> entry : localObjects){

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -936,7 +936,7 @@ public void readAnimation(int animationIndex) throws IOException {
         anim = customContentManager.readExtensionAndExtras("animations", animation, anim);
 
         if (skinIndex != -1) {
-            //we have a armature animation.
+            //we have an armature animation.
             SkinData skin = fetchFromCache("skins", skinIndex, SkinData.class);
             skin.animComposer.addAnimClip(anim);
         }

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/FaultHeightMap.java
Patch:
@@ -52,7 +52,7 @@ public class FaultHeightMap extends AbstractHeightMap {
     public static final int FAULTTYPE_STEP = 0;
     /**
      * Values on one side are lowered, then increase lineary while crossing
-     * the fault line to the other side. The fault line will be a inclined
+     * the fault line to the other side. The fault line will be an inclined
      * plane
      */
     public static final int FAULTTYPE_LINEAR = 1;

File: jme3-vr/src/main/java/com/jme3/shadow/DirectionalLightShadowFilterVR.java
Patch:
@@ -45,7 +45,7 @@
  * This Filter does basically the same as a DirectionalLightShadowRenderer
  * except it renders the post shadow pass as a fullscreen quad pass instead of a
  * geometry pass. It's mostly faster than PssmShadowRenderer as long as you have
- * more than a about ten shadow receiving objects. The expense is the draw back
+ * more than about ten shadow receiving objects. The expense is the drawback
  * that the shadow Receive mode set on spatial is ignored. So basically all and
  * only objects that render depth in the scene receive shadows. See this post
  * for more details

File: jme3-vr/src/main/java/com/jme3/shadow/VRDirectionalLightShadowRenderer.java
Patch:
@@ -48,7 +48,7 @@
 public class VRDirectionalLightShadowRenderer extends DirectionalLightShadowRenderer {
 
     /**
-     * Create a OculusDirectionalLightShadowRenderer More info on the technique at <a
+     * Create an OculusDirectionalLightShadowRenderer More info on the technique at <a
      * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a>
      *
      * @param assetManager the application asset manager

File: jme3-vr/src/main/java/com/jme3/util/VRGUIPositioningMode.java
Patch:
@@ -1,7 +1,7 @@
 package com.jme3.util;
 
 /**
- * A enumeration that describes the GUI display positioning modes.
+ * An enumeration that describes the GUI display positioning modes.
  * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  *
  */

File: jme3-core/src/main/java/com/jme3/texture/Image.java
Patch:
@@ -960,7 +960,7 @@ public void setData(int index, ByteBuffer data) {
     }
 
     /**
-     * @param efficientData ignored
+     * @return null
      * @deprecated This feature is no longer used by the engine
      */
     @Deprecated

File: jme3-lwjgl3/src/main/java/com/jme3/util/LWJGLBufferAllocator.java
Patch:
@@ -140,7 +140,7 @@ protected void freeMemory() {
 
     static {
         CLEAN_THREAD.setDaemon(true);
-        CLEAN_THREAD.setName("Thread to free LWJGL byte buffers");
+        CLEAN_THREAD.setName("LWJGL Deallocator");
         CLEAN_THREAD.start();
     }
 

File: jme3-core/src/main/java/com/jme3/cinematic/events/AnimationEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -437,7 +437,7 @@ public void read(JmeImporter im) throws IOException {
 //        if (im.getFormatVersion() == 0) {
             modelName = ic.readString("modelName", "");
 //        }
-        //FIXME always the same issue, because of the clonning of assets, this won't work
+        //FIXME always the same issue, because of the cloning of assets, this won't work
         //we have to somehow store userdata in the spatial and then recurse the 
         //scene sub scenegraph to find the correct instance of the model
         //This brings a reflaxion about the cinematic being an appstate, 

File: jme3-effects/src/main/java/com/jme3/post/filters/GammaCorrectionFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -41,7 +41,7 @@
  *
  * @author Phate666
  * @version 1.0 initial version
- * @deprecated use the Gama Correction setting instead.
+ * @deprecated use the Gamma Correction setting instead.
  */
 @Deprecated
 public class GammaCorrectionFilter extends Filter {

File: jme3-examples/src/main/java/jme3test/input/TestCameraNode.java
Patch:
@@ -90,7 +90,7 @@ public void simpleInitApp() {
     camNode.setControlDir(ControlDirection.SpatialToCamera);
     //attaching the camNode to the teaNode
     teaNode.attachChild(camNode);
-    //setting the local translation of the cam node to move it away from the teanNode a bit
+    //setting the local translation of the cam node to move it away from the tea Node a bit
     camNode.setLocalTranslation(new Vector3f(-10, 0, 0));
     //setting the camNode to look at the teaNode
     camNode.lookAt(teaNode.getLocalTranslation(), Vector3f.UNIT_Y);

File: jme3-core/src/main/java/com/jme3/environment/LightProbeFactory.java
Patch:
@@ -214,7 +214,7 @@ private static void generatePbrMaps(TextureCubeMap envMap, final LightProbe prob
     }
 
     /**
-     * For debuging purposes only.
+     * For debugging purposes only.
      * Will return a Node meant to be added to a GUI presenting the 2 cube maps in a cross pattern with all the mip maps.
      *
      * @param manager the asset manager

File: jme3-core/src/main/java/com/jme3/environment/util/BoundingSphereDebug.java
Patch:
@@ -1,5 +1,5 @@
  /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -44,7 +44,7 @@
 
 /**
  * 
- * A debuging shape for a BoundingSphere 
+ * A debugging shape for a BoundingSphere 
  * Consists of 3 axis aligned circles.
  * 
  * @author nehon
@@ -158,7 +158,7 @@ private void setIndexData() {
 
     
     /**
-     * Convenience factory method that creates a debuging bounding sphere geometry
+     * Convenience factory method that creates a debug bounding-sphere geometry
      * @param assetManager the assetManager
      * @return the bounding sphere debug geometry.
      */

File: jme3-core/src/main/java/com/jme3/post/Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -463,7 +463,7 @@ public boolean isEnabled() {
     }
 
     /**
-     * sets a reference to the FilterPostProcessor ti which this filter is attached
+     * sets a reference to the FilterPostProcessor to which this filter is attached
      * @param proc
      */
     protected void setProcessor(FilterPostProcessor proc) {

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -179,7 +179,7 @@ private void init(AssetManager assetManager, int nbShadowMaps, int shadowMapSize
 
             postshadowMat.setTexture(shadowMapStringCache[i], shadowMaps[i]);
 
-            //quads for debuging purpose
+            //quads for debugging purposes
             dispPic[i] = new Picture("Picture" + i);
             dispPic[i].setTexture(assetManager, shadowMaps[i], false);
         }

File: jme3-core/src/main/java/com/jme3/shadow/BasicShadowRenderer.java
Patch:
@@ -126,7 +126,7 @@ public Vector3f getDirection() {
     }
 
     /**
-     * sets the light direction to use to computs shadows
+     * sets the light direction to use to compute shadows
      * @param direction 
      */
     public void setDirection(Vector3f direction) {

File: jme3-core/src/main/java/com/jme3/shadow/PssmShadowRenderer.java
Patch:
@@ -236,7 +236,7 @@ protected PssmShadowRenderer(AssetManager manager, int size, int nbSplits, Mater
 
             postshadowMat.setTexture("ShadowMap" + i, shadowMaps[i]);
 
-            //quads for debuging purpose
+            //quads for debugging purposes
             dispPic[i] = new Picture("Picture" + i);
             dispPic[i].setTexture(manager, shadowMaps[i], false);
         }

File: jme3-vr/src/main/java/com/jme3/shadow/AbstractShadowRendererVR.java
Patch:
@@ -178,7 +178,7 @@ private void init(AssetManager assetManager, int nbShadowMaps, int shadowMapSize
 
             postshadowMat.setTexture(shadowMapStringCache[i], shadowMaps[i]);
 
-            //quads for debuging purpose
+            //quads for debugging purposes
             dispPic[i] = new Picture("Picture" + i);
             dispPic[i].setTexture(assetManager, shadowMaps[i], false);
         }

File: jme3-core/src/main/java/com/jme3/input/ChaseCamera.java
Patch:
@@ -611,7 +611,7 @@ public void cloneFields( Cloner cloner, Object original ) {
     }
          
     /**
-     * Sets the spacial for the camera control, should only be used internally
+     * Sets the spatial for the camera control, should only be used internally
      * @param spatial
      */
     @Override
@@ -777,8 +777,8 @@ public float getTrailingRotationInertia() {
     }
 
     /**
-     * Sets the trailing rotation inertia : default is 0.1. This prevent the camera to roughtly stop when the target stops moving
-     * before the camera reached the trail position.
+     * Sets the trailing rotation inertia : default is 0.1. This causes the camera to stop roughly when the target stops moving
+     * before the camera reaches the trail position.
      * Only has an effect if smoothMotion is set to true and trailing is enabled
      * @param trailingRotationInertia
      */

File: jme3-core/src/main/java/com/jme3/input/InputManager.java
Patch:
@@ -969,7 +969,7 @@ public void setJoysticks(Joystick[] joysticks) {
     /**
      * Add a listener that reports when a joystick has been added or removed.
      * Currently only implemented in LWJGL3
-     * @param listener the listner.
+     * @param listener the listener
      */
     public boolean addJoystickConnectionListener(JoystickConnectionListener listener) {
         return joystickConnectionListeners.add(listener);

File: jme3-core/src/main/java/com/jme3/material/ShaderGenerationInfo.java
Patch:
@@ -138,7 +138,7 @@ public void setVertexGlobal(ShaderNodeVariable vertexGlobal) {
 
     /**
      * 
-     * @return the list on unused node names
+     * @return the list of unused node names
      */
     public List<String> getUnusedNodes() {
         return unusedNodes;

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikkTSpaceContext.java
Patch:
@@ -80,7 +80,7 @@ public interface MikkTSpaceContext {
      *
      * Note that the results are returned unindexed. It is possible to generate
      * a new index list But averaging/overwriting tangent spaces by using an
-     * already existing index list WILL produce INCRORRECT results. DO NOT! use
+     * already existing index list WILL produce INCORRECT results. DO NOT! use
      * an already existing index list.
      *
      * @param tangent
@@ -107,7 +107,7 @@ public interface MikkTSpaceContext {
      *
      * Note that the results are returned unindexed. It is possible to generate
      * a new index list. But averaging/overwriting tangent spaces by using an
-     * already existing index list WILL produce INCRORRECT results. DO NOT! use
+     * already existing index list WILL produce INCORRECT results. DO NOT! use
      * an already existing index list.
      *
      * @param tangent

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/CustomContentManager.java
Patch:
@@ -55,6 +55,7 @@ public class CustomContentManager {
 
     static {
         defaultExtensionLoaders.put("KHR_materials_pbrSpecularGlossiness", new PBRSpecGlossExtensionLoader());
+        defaultExtensionLoaders.put("KHR_lights_punctual", new LightsPunctualExtensionLoader());
         defaultExtensionLoaders.put("KHR_materials_unlit", new UnlitExtensionLoader());
     }
 

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -88,7 +88,7 @@ public class Material implements CloneableSmartAsset, Cloneable, Savable {
 
     public Material(MaterialDef def) {
         if (def == null) {
-            throw new NullPointerException("Material definition cannot be null");
+            throw new IllegalArgumentException("Material definition cannot be null");
         }
         this.def = def;
 

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -303,7 +303,7 @@ public void updateModelBound() {
     protected void updateWorldBound() {
         super.updateWorldBound();
         if (mesh == null) {
-            throw new NullPointerException("Geometry: " + getName() + " has null mesh");
+            throw new IllegalStateException("Geometry \"" + getName() + "\" has null mesh.");
         }
 
         if (mesh.getBound() != null) {

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -218,11 +218,11 @@ protected final void setPostShadowMaterial(Material postShadowMat) {
      * Sets the filtering mode for shadow edges. See {@link EdgeFilteringMode}
      * for more info.
      *
-     * @param filterMode the desired filter mode (not null)
+     * @param filterMode the desired filtering mode (not null)
      */
     final public void setEdgeFilteringMode(EdgeFilteringMode filterMode) {
         if (filterMode == null) {
-            throw new NullPointerException();
+            throw new IllegalArgumentException("filterMode cannot be null");
         }
 
         this.edgeFilteringMode = filterMode;

File: jme3-core/src/main/java/com/jme3/texture/Image.java
Patch:
@@ -1037,14 +1037,14 @@ public void setWidth(int width) {
      * <code>setFormat</code> sets the image format for this image.
      *
      * @param format
-     *            the image format.
-     * @throws NullPointerException
+     *            the image format (not null)
+     * @throws IllegalArgumentException
      *             if format is null
      * @see Format
      */
     public void setFormat(Format format) {
         if (format == null) {
-            throw new NullPointerException("format may not be null.");
+            throw new IllegalArgumentException("format may not be null.");
         }
 
         this.format = format;

File: jme3-core/src/plugins/java/com/jme3/asset/plugins/FileLocator.java
Patch:
@@ -46,8 +46,9 @@ public class FileLocator implements AssetLocator {
 
     @Override
     public void setRootPath(String rootPath) {
-        if (rootPath == null)
-            throw new NullPointerException();
+        if (rootPath == null) {
+            throw new IllegalArgumentException("rootPath cannot be null");
+        }
         
         try {
             root = new File(rootPath).getCanonicalFile();

File: jme3-desktop/src/main/java/com/jme3/system/AWTComponentRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -216,7 +216,7 @@ public void init(Renderer renderer, boolean main) {
 
   /**
    * Get the graphics context of the given component.
-   * @param destination the AWT component used for rendering.
+   * @param destination the AWT component used for rendering (not null)
    * @return the graphics context of the given component.
    */
   protected Graphics getGraphics(Component destination) {
@@ -230,7 +230,7 @@ protected Graphics getGraphics(Component destination) {
         //throw new IllegalArgumentException("AWT component "+destination.getClass().getSimpleName()+" does not provide 2D graphics capabilities.");
       }
     } else {
-      throw new NullPointerException("Component cannot be null.");
+      throw new IllegalArgumentException("destination component cannot be null");
     }
   }
 

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/LODGeomap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -627,7 +627,7 @@ private int calculateNumIndexesLodDiff(int lod) {
 
     public FloatBuffer[] writeTangentArray(FloatBuffer normalBuffer, FloatBuffer tangentStore, FloatBuffer binormalStore, FloatBuffer textureBuffer, Vector3f scale) {
         if (!isLoaded()) {
-            throw new NullPointerException();
+            throw new IllegalStateException("The Geomap data is not loaded.");
         }
 
         if (tangentStore != null) {
@@ -769,7 +769,7 @@ public static Vector3f calculateTangent(Vector3f[] v, Vector2f[] t, Vector3f tan
     @Override
     public FloatBuffer writeNormalArray(FloatBuffer store, Vector3f scale) {
         if (!isLoaded()) {
-            throw new NullPointerException();
+            throw new IllegalStateException("The Geomap data is not loaded.");
         }
 
         if (store != null) {

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -1928,8 +1928,7 @@ else if(((TerrainPatch) s).getQuadrant() == 4)
      */
     public void setSupportMultipleCollisions(boolean set) {
         if (picker == null) {
-            // This is so that it doesn't fail at the IllegalStateException because null !instanceof Anything
-            throw new NullPointerException("TerrainPicker is null");
+            throw new IllegalStateException("The TerrainPicker is null.");
         } else if (picker instanceof BresenhamTerrainPicker) {
             ((BresenhamTerrainPicker)picker).setSupportMultipleCollisions(set);
         } else {

File: jme3-vr/src/main/java/com/jme3/shadow/AbstractShadowRendererVR.java
Patch:
@@ -221,7 +221,7 @@ protected final void setPostShadowMaterial(Material postShadowMat) {
      */
     final public void setEdgeFilteringMode(EdgeFilteringMode filterMode) {
         if (filterMode == null) {
-            throw new NullPointerException();
+            throw new IllegalArgumentException("filterMode cannot be null");
         }
 
         this.edgeFilteringMode = filterMode;

File: jme3-android/src/main/java/com/jme3/input/android/AndroidSensorJoyInput.java
Patch:
@@ -374,7 +374,7 @@ private boolean updateOrientation() {
                                 sensorData.haveData = true;
                             } else {
                                 if (axis.isChanged()) {
-                                    joyInput.addEvent(new JoyAxisEvent(axis, axis.getJoystickAxisValue()));
+                                    joyInput.addEvent(new JoyAxisEvent(axis, axis.getJoystickAxisValue(), axis.getJoystickAxisValue()));
                                 }
                             }
                         }
@@ -553,7 +553,7 @@ public void onSensorChanged(SensorEvent se) {
                             sensorData.haveData = true;
                         } else {
                             if (axis.isChanged()) {
-                                JoyAxisEvent event = new JoyAxisEvent(axis, axis.getJoystickAxisValue());
+                                JoyAxisEvent event = new JoyAxisEvent(axis, axis.getJoystickAxisValue(), axis.getJoystickAxisValue());
 //                                logger.log(Level.INFO, "adding JoyAxisEvent: {0}", event);
                                 joyInput.addEvent(event);
 //                                joyHandler.addEvent(new JoyAxisEvent(axis, axis.getJoystickAxisValue()));

File: jme3-examples/src/main/java/jme3test/batching/TestBatchNodeTower.java
Patch:
@@ -106,7 +106,6 @@ public void simpleInitApp() {
 
         brick = new Box(brickWidth, brickHeight, brickDepth);
         brick.scaleTextureCoordinates(new Vector2f(1f, .5f));
-        //bulletAppState.getPhysicsSpace().enableDebug(assetManager);
         initMaterial();
         initTower();
         initFloor();

File: jme3-examples/src/main/java/jme3test/bullet/TestBrickTower.java
Patch:
@@ -124,7 +124,6 @@ public void simpleInitApp() {
 
         brick = new Box(brickWidth, brickHeight, brickDepth);
         brick.scaleTextureCoordinates(new Vector2f(1f, .5f));
-        //bulletAppState.getPhysicsSpace().enableDebug(assetManager);
         initMaterial();
         initTower();
         initFloor();

File: jme3-examples/src/main/java/jme3test/bullet/TestFancyCar.java
Patch:
@@ -84,7 +84,6 @@ private void setupKeys() {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-//        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
         cam.setFrustumFar(150f);
         flyCam.setMoveSpeed(10);
 

File: jme3-examples/src/main/java/jme3test/bullet/TestHoveringTank.java
Patch:
@@ -114,7 +114,6 @@ public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         bulletAppState.setThreadingType(BulletAppState.ThreadingType.PARALLEL);
         stateManager.attach(bulletAppState);
-//        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
         bulletAppState.getPhysicsSpace().setAccuracy(1f/30f);
         rootNode.attachChild(SkyFactory.createSky(assetManager, 
                 "Textures/Sky/Bright/BrightSky.dds", EnvMapType.CubeMap));

File: jme3-examples/src/main/java/jme3test/helloworld/HelloCollision.java
Patch:
@@ -79,7 +79,6 @@ public void simpleInitApp() {
     /** Set up Physics */
     bulletAppState = new BulletAppState();
     stateManager.attach(bulletAppState);
-    //bulletAppState.getPhysicsSpace().enableDebug(assetManager);
 
     // We re-use the flyby camera for rotation, while positioning is handled by physics
     viewPort.setBackgroundColor(new ColorRGBA(0.7f, 0.8f, 1f, 1f));

File: jme3-examples/src/main/java/jme3test/helloworld/HelloPhysics.java
Patch:
@@ -99,7 +99,6 @@ public void simpleInitApp() {
     /** Set up Physics Game */
     bulletAppState = new BulletAppState();
     stateManager.attach(bulletAppState);
-    //bulletAppState.getPhysicsSpace().enableDebug(assetManager);
     /** Configure cam to look at scene */
     cam.setLocation(new Vector3f(0, 4f, 6f));
     cam.lookAt(new Vector3f(2, 2, 0), Vector3f.UNIT_Y);

File: jme3-examples/src/main/java/jme3test/helloworld/HelloTerrainCollision.java
Patch:
@@ -81,7 +81,6 @@ public void simpleInitApp() {
     /** Set up Physics */
     bulletAppState = new BulletAppState();
     stateManager.attach(bulletAppState);
-    //bulletAppState.getPhysicsSpace().enableDebug(assetManager);
     
     flyCam.setMoveSpeed(100);
     setUpKeys();

File: jme3-android/src/main/java/com/jme3/app/AndroidHarness.java
Patch:
@@ -75,8 +75,8 @@ public class AndroidHarness extends Activity implements TouchListener, DialogInt
     protected int eglDepthBits = 16;
 
     /**
-     * Sets the number of samples to use for multisampling.</br>
-     * Leave 0 (default) to disable multisampling.</br>
+     * Sets the number of samples to use for multisampling.<br>
+     * Leave 0 (default) to disable multisampling.<br>
      * Set to 2 or 4 to enable multisampling.
      */
     protected int eglSamples = 0;

File: jme3-android/src/main/java/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -55,7 +55,7 @@
 
 /**
  * A Video recording AppState that records the screen output into an AVI file with
- * M-JPEG content. The file should be playable on any OS in any video player.<br/>
+ * M-JPEG content. The file should be playable on any OS in any video player.<br>
  * The video recording starts when the state is attached and stops when it is detached
  * or the application is quit. You can set the fileName of the file to be written when the
  * state is detached, else the old file will be overwritten. If you specify no file

File: jme3-android/src/main/java/com/jme3/input/android/AndroidInputHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -47,7 +47,7 @@
 /**
  * <code>AndroidInput</code> is the main class that connects the Android system
  * inputs to jME. It receives the inputs from the Android View and passes them
- * to the appropriate classes based on the source of the input.</br>
+ * to the appropriate classes based on the source of the input.<br>
  * This class is to be extended when new functionality is released in Android.
  *
  * @author iwgeric

File: jme3-android/src/main/java/com/jme3/input/android/AndroidInputHandler14.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -41,7 +41,7 @@
 
 /**
  * <code>AndroidInputHandler14</code> extends <code>AndroidInputHandler</code> to
- * add the onHover and onGenericMotion events that where added in Android rev 14 (Android 4.0).</br>
+ * add the onHover and onGenericMotion events that where added in Android rev 14 (Android 4.0).<br>
  * The onGenericMotion events are the main interface to Joystick axes.  They
  * were actually released in Android rev 12.
  *

File: jme3-android/src/main/java/com/jme3/input/android/AndroidJoyInput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -51,7 +51,7 @@
 /**
  * Main class that manages various joystick devices.  Joysticks can be many forms
  * including a simulated joystick to communicate the device orientation as well
- * as physical gamepads. </br>
+ * as physical gamepads. <br>
  * This class manages all the joysticks and feeds the inputs from each back
  * to jME's InputManager.
  *

File: jme3-android/src/main/java/com/jme3/input/android/AndroidJoyInput14.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -39,7 +39,7 @@
 
 /**
  * <code>AndroidJoyInput14</code> extends <code>AndroidJoyInput</code>
- * to include support for physical joysticks/gamepads.</br>
+ * to include support for physical joysticks/gamepads.
  *
  * @author iwgeric
  */

File: jme3-desktop/src/main/java/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -54,7 +54,7 @@
 
 /**
  * A Video recording AppState that records the screen output into an AVI file with
- * M-JPEG content. The file should be playable on any OS in any video player.<br/>
+ * M-JPEG content. The file should be playable on any OS in any video player.<br>
  * The video recording starts when the state is attached and stops when it is detached
  * or the application is quit. You can set the fileName of the file to be written when the
  * state is detached, else the old file will be overwritten. If you specify no file

File: jme3-effects/src/main/java/com/jme3/post/filters/CrossHatchFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -44,7 +44,7 @@
  * Try combining this with a cartoon edge filter to obtain manga style visuals.
  *
  * Based on an article from Geeks3D:
- *    <a href="http://www.geeks3d.com/20110219/shader-library-crosshatching-glsl-filter/" rel="nofollow">http://www.geeks3d.com/20110219/shader-library-crosshatching-glsl-filter/</a>
+ *    <a href="http://www.geeks3d.com/20110219/shader-library-crosshatching-glsl-filter/">http://www.geeks3d.com/20110219/shader-library-crosshatching-glsl-filter/</a>
  *
  * @author Roy Straver a.k.a. Baal Garnaal
  */

File: jme3-effects/src/main/java/com/jme3/post/filters/FXAAFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -38,8 +38,8 @@
 import com.jme3.renderer.ViewPort;
 
 /**
- * <a href="http://www.geeks3d.com/20110405/fxaa-fast-approximate-anti-aliasing-demo-glsl-opengl-test-radeon-geforce/3/" rel="nofollow">http://www.geeks3d.com/20110405/fxaa-fast-approximate-anti-aliasing-demo-glsl-<span class="domtooltips" title="OpenGL (Open Graphics Library) is a standard specification defining a cross-language, cross-platform API for writing applications that produce 2D and 3D computer graphics." id="domtooltipsspan11">opengl</span>-test-radeon-geforce/3/</a>
- * <a href="http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf" rel="nofollow">http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf</a>
+ * <a href="http://www.geeks3d.com/20110405/fxaa-fast-approximate-anti-aliasing-demo-glsl-opengl-test-radeon-geforce/3/">demo</a>
+ * <a href="http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf">whitepaper</a>
  *
  * @author Phate666 (adapted to jme3)
  *

File: jme3-effects/src/main/java/com/jme3/post/filters/PosterizationFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -45,7 +45,7 @@
  * to give nice results.
  *
  * Based on an article from Geeks3D:
- *    <a href="http://www.geeks3d.com/20091027/shader-library-posterization-post-processing-effect-glsl/" rel="nofollow">http://www.geeks3d.com/20091027/shader-library-posterization-post-processing-effect-glsl/</a>
+ *    <a href="http://www.geeks3d.com/20091027/shader-library-posterization-post-processing-effect-glsl/">http://www.geeks3d.com/20091027/shader-library-posterization-post-processing-effect-glsl/</a>
  *
  * @author Roy Straver a.k.a. Baal Garnaal
  */

File: jme3-examples/src/main/java/jme3test/bullet/TestPhysicsRayCast.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  *
- * @author @wezrule
+ * @author wezrule
  */
 public class TestPhysicsRayCast extends SimpleApplication {
 

File: jme3-examples/src/main/java/jme3test/bullet/shape/TestGimpactShape.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -80,7 +80,7 @@
  * eventually, generally a larger scales for this test.
  * </li>
  * <li>
- * Some shapes such as PQTorus & signpost never go inactive at larger scales for both Native and JBullet (test
+ * Some shapes such as PQTorus and signpost never go inactive at larger scales for both Native and JBullet (test
  * at 1.5 and 1.9 scale)
  * </li>
  * </ol>

File: jme3-examples/src/main/java/jme3test/renderer/TestBlendEquations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -44,7 +44,7 @@
 import com.jme3.scene.shape.Quad;
 
 /**
- * This test demonstrates the usage of customized blend equations and factors on a material.<br/>
+ * This test demonstrates the usage of customized blend equations and factors on a material.<br>
  * Customized blend equations and factors always requires {@link com.jme3.material.RenderState.BlendMode#Custom}.
  *
  * @author the_Minka

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -308,7 +308,7 @@ public void setCcdSweptSphereRadius(float radius) {
     }
 
     /**
-     * Sets the amount of motion that has to happen in one physics tick to trigger the continuous motion detection<br/>
+     * Sets the amount of motion that has to happen in one physics tick to trigger the continuous motion detection<br>
      * This avoids the problem of fast objects moving through other objects, set to zero to disable (default)
      * @param threshold
      */
@@ -367,7 +367,7 @@ public Vector3f getGravity(Vector3f gravity) {
     }
 
     /**
-     * Set the local gravity of this PhysicsRigidBody<br/>
+     * Set the local gravity of this PhysicsRigidBody<br>
      * Set this after adding the node to the PhysicsSpace,
      * the PhysicsSpace assigns its current gravity to the physics node when its added.
      * @param gravity the gravity vector to set

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -61,7 +61,7 @@
 
 /**
  * <p>
- * TerrainGrid itself is an actual TerrainQuad. Its four children are the visible four tiles.</p>
+ * TerrainGrid itself is an actual TerrainQuad. Its four children are the visible four tiles.
  * </p><p>
  * The grid is indexed by cells. Each cell has an integer XZ coordinate originating at 0,0.
  * TerrainGrid will piggyback on the TerrainLodControl so it can use the camera for its

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/MidpointDisplacementHeightMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -102,7 +102,7 @@ public MidpointDisplacementHeightMap(int size, float range, float persistence, l
      *          The factor by which the range will evolve at each iteration.
      *          A value of 0.5f will halve the range at each iteration and is
      *          typically a good choice
-     * @throws JMException if size is not a power of two plus one.
+     * @throws IllegalArgumentException if size is not a power of two plus one.
      */
     public MidpointDisplacementHeightMap(int size, float range, float persistence) throws Exception {
         this(size, range, persistence, new Random().nextLong());

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/ParticleDepositionHeightMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -374,8 +374,6 @@ public void setCaldera(float caldera) throws Exception {
      * <code>setMaxParticles</code> sets the maximum number of particles
      * for a single jump.
      * @param maxParticles the maximum number of particles for a single jump.
-     * @throws Exception if maxParticles is negative or less than
-     *              the current number of minParticles.
      */
     public void setMaxParticles(int maxParticles) {
         this.maxParticles = maxParticles;

File: jme3-vr/src/main/java/com/jme3/app/VRApplication.java
Patch:
@@ -394,7 +394,7 @@ public void simpleRender(RenderManager renderManager) {
 
     
     /**
-        we do NOT want to get & modify the distortion scene camera, so
+        we do NOT want to get and modify the distortion scene camera, so
         return the left viewport camera instead if we are in VR mode
     */
     @Override

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/OculusVR.java
Patch:
@@ -29,7 +29,7 @@
  * A few notes about the Oculus coordinate system:
  * <ul>
  * <li>Matrices should be transposed</li>
- * <li>Quaternions should be inverted<li/>
+ * <li>Quaternions should be inverted</li>
  * <li>Vectors should have their X and Z axes flipped, but apparently not Y.</li>
  * </ul>
  *

File: jme3-vr/src/main/java/com/jme3/shadow/DirectionalLightShadowRendererVR.java
Patch:
@@ -1,7 +1,7 @@
 package com.jme3.shadow;
 
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -58,7 +58,7 @@
  * the shadow map.<br> This results in a better quality shadow than standard
  * shadow mapping.<br> for more informations on this read this <a
  * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
- * <p/>
+ *
  * @author Rémy Bouquet aka Nehon
  * @author reden - phr00t - https://github.com/phr00t
  * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>

File: jme3-vr/src/main/java/com/jme3/shadow/VRDirectionalLightShadowRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -42,7 +42,7 @@
  * the shadow map.<br> This results in a better quality shadow than standard
  * shadow mapping.<br> for more informations on this read this <a
  * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
- * <p/>
+ *
  * @author Rémy Bouquet aka Nehon
  */
 public class VRDirectionalLightShadowRenderer extends DirectionalLightShadowRenderer {

File: jme3-core/src/main/java/checkers/quals/DefaultQualifiers.java
Patch:
@@ -16,13 +16,13 @@
  *
  * Example:
  * <!-- &nbsp; is a hack that prevents @ from being the first character on the line, which confuses Javadoc -->
- * <code><pre>
+ * <pre>
  * &nbsp; @DefaultQualifiers({
  * &nbsp;     @DefaultQualifier("NonNull"),
  * &nbsp;     @DefaultQualifier(value = "Interned", locations = ALL_EXCEPT_LOCALS),
  * &nbsp;     @DefaultQualifier("Tainted")
  * &nbsp; })
- * </pre></code>
+ * </pre>
  *
  * @see DefaultQualifier
  */

File: jme3-core/src/main/java/com/jme3/app/state/AppState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -40,11 +40,11 @@
  * An <code>AppState</code> can track when it is attached to the 
  * {@link AppStateManager} or when it is detached. 
  * 
- * <br/><code>AppState</code>s are initialized in the render thread, upon a call to 
+ * <code>AppState</code>s are initialized in the render thread, upon a call to 
  * {@link AppState#initialize(com.jme3.app.state.AppStateManager, com.jme3.app.Application) }
  * and are de-initialized upon a call to {@link AppState#cleanup()}. 
  * Implementations should return the correct value with a call to 
- * {@link AppState#isInitialized() } as specified above.<br/>
+ * {@link AppState#isInitialized() } as specified above.
  * 
  * <ul>
  * <li>If a detached AppState is attached then <code>initialize()</code> will be called

File: jme3-core/src/main/java/com/jme3/app/state/AppStateManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -42,7 +42,7 @@
 
 /**
  * The <code>AppStateManager</code> holds a list of {@link AppState}s which
- * it will update and render.<br/>
+ * it will update and render.<br>
  * When an {@link AppState} is attached or detached, the
  * {@link AppState#stateAttached(com.jme3.app.state.AppStateManager) } and
  * {@link AppState#stateDetached(com.jme3.app.state.AppStateManager) } methods

File: jme3-core/src/main/java/com/jme3/audio/AudioBuffer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -39,7 +39,7 @@
 /**
  * An <code>AudioBuffer</code> is an implementation of AudioData
  * where the audio is buffered (stored in memory). All parts of it
- * are accessible at any time. <br/>
+ * are accessible at any time. <br>
  * AudioBuffers are useful for short sounds, like effects, etc.
  *
  * @author Kirill Vainer

File: jme3-core/src/main/java/com/jme3/audio/AudioStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -179,8 +179,6 @@ public boolean isEOF() {
     /**
      * Closes the stream, releasing all data relating to it. 
      * Reading from the stream will return eof.
-     *
-     * @throws IOException
      */
     @Override
     public void close() {

File: jme3-core/src/main/java/com/jme3/bounding/BoundingBox.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -581,7 +581,7 @@ public BoundingVolume clone(BoundingVolume store) {
 
     /**
      * <code>toString</code> returns the string representation of this object.
-     * The form is: "[Center: <Vector> xExtent: X.XX yExtent: Y.YY zExtent:
+     * The form is: "[Center: vector xExtent: X.XX yExtent: Y.YY zExtent:
      * Z.ZZ]".
      *
      * @return the string representation of this.

File: jme3-core/src/main/java/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -654,7 +654,7 @@ public BoundingVolume clone(BoundingVolume store) {
 
     /**
      * <code>toString</code> returns the string representation of this object.
-     * The form is: "Radius: RRR.SSSS Center: <Vector>".
+     * The form is: "Radius: RRR.SSSS Center: vector".
      *
      * @return the string representation of this.
      */

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -64,7 +64,7 @@
  * those parameters map to uniforms which are defined in a shader.
  * Setting the parameters can modify the behavior of a
  * shader.
- * <p/>
+ * </p>
  *
  * @author Kirill Vainer
  */

File: jme3-core/src/main/java/com/jme3/math/Matrix4f.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -862,7 +862,7 @@ public FloatBuffer fillFloatBuffer(FloatBuffer fb, boolean columnMajor) {
     /**
      * Copy the elements of this matrix to a float array.
      *
-     * @param f   the array to fill (not null, length >= 16)
+     * @param f   the array to fill (not null, length&ge;16)
      * @param columnMajor
      *            true &rarr; column-major order, false &rarr; row-major order
      */

File: jme3-core/src/main/java/com/jme3/renderer/queue/RenderQueue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -181,6 +181,7 @@ public enum ShadowMode {
      *                     at all.
      *  <li>Bucket.Gui: {@link com.jme3.renderer.queue.GuiComparator} sorts geometries back to
      *                     front based on their Z values.
+     *  </ul>
      */
     public void setGeometryComparator(Bucket bucket, GeometryComparator c) {
         switch (bucket) {

File: jme3-core/src/main/java/com/jme3/shadow/DirectionalLightShadowRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -58,7 +58,7 @@
  * the shadow map.<br> This results in a better quality shadow than standard
  * shadow mapping.<br> for more informations on this read this <a
  * href="https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html">https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html</a><br>
- * <p/>
+ *
  * @author Rémy Bouquet aka Nehon
  */
 public class DirectionalLightShadowRenderer extends AbstractShadowRenderer {

File: jme3-core/src/main/java/com/jme3/shadow/PssmShadowRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -69,7 +69,7 @@
  * This results in a better quality shadow than standard shadow mapping.<br> for
  * more informations on this read this <a
  * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
- * <p/>
+ *
  * @author Rémy Bouquet aka Nehon
  * @deprecated use {@link DirectionalLightShadowRenderer}
  */

File: jme3-core/src/main/java/com/jme3/shadow/SpotLightShadowRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -59,7 +59,7 @@
  * shadow map.<br> This results in a better quality shadow than standard shadow
  * mapping.<br> for more informations on this read this <a
  * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
- * <p/>
+ *
  * @author Rémy Bouquet aka Nehon
  */
 public class SpotLightShadowRenderer extends AbstractShadowRenderer {

File: jme3-core/src/main/java/com/jme3/texture/Image.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -1140,7 +1140,7 @@ public int[] getMipMapSizes() {
      * such conversion must not be performed, for example, when loading normal
      * maps.
      *
-     * @param colorSpace @see ColorSpace. Set to sRGB to enable srgb -&gt; linear 
+     * @param colorSpace Set to sRGB to enable srgb -&gt; linear 
      * conversion, Linear otherwise.
      *
      * @see Renderer#setLinearizeSrgbImages(boolean)

File: jme3-core/src/main/java/com/jme3/util/JmeFormatter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -40,7 +40,7 @@
 
 /**
  * More simple formatter than the default one used in Java logging.
- * Example output: <br/>
+ * Example output: <br>
  * INFO Display3D 12:00 PM: Display created.
  */
 public class JmeFormatter extends Formatter {

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ShaderNodeLoaderDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -388,7 +388,7 @@ public void readFragmentShaderNodes(List<Statement> statements) throws IOExcepti
     }
 
     /**
-     * Reads a Shader statement of this form <TYPE> <LANG> : <SOURCE>
+     * Reads a Shader statement of the form TYPE LANG : SOURCE
      *
      * @param statement
      * @throws IOException

File: jme3-core/src/main/java/com/jme3/scene/mesh/IndexBuffer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -77,7 +77,7 @@ public static IndexBuffer createIndexBuffer(int vertexCount,
 
         if (vertexCount < 128) { // TODO: could be vertexCount <= 256
             ByteBuffer buffer = BufferUtils.createByteBuffer(indexCount);
-            int maxIndexValue = vertexCount - 1;
+            int maxIndexValue = Math.max(0, vertexCount - 1);
             result = new IndexByteBuffer(buffer, maxIndexValue);
 
         } else if (vertexCount < 65536) { // TODO: could be <= 65536

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL.java
Patch:
@@ -195,6 +195,7 @@ public interface GL {
     public static final int GL_VERTEX_SHADER = 0x8B31;
     public static final int GL_ZERO = 0x0;
     public static final int GL_UNPACK_ROW_LENGTH = 0x0CF2;
+    public static final int GL_FRAMEBUFFER_BINDING = 0x8CA6;
 
     public void resetStats();
 
@@ -1300,4 +1301,4 @@ public void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int
      * @param height the viewport height.
      */
     public void glViewport(int x, int y, int width, int height);
-}
\ No newline at end of file
+}

File: jme3-core/src/main/java/com/jme3/anim/Joint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -342,6 +342,7 @@ public void cloneFields(Cloner cloner, Object original) {
         this.attachedNode = cloner.clone(attachedNode);
         this.targetGeometry = cloner.clone(targetGeometry);
         this.localTransform = cloner.clone(localTransform);
+        this.initialTransform = cloner.clone(initialTransform);
         this.inverseModelBindMatrix = cloner.clone(inverseModelBindMatrix);
     }
 

File: jme3-core/src/main/java/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -615,7 +615,7 @@ private BoundingVolume merge(float temp_radius, Vector3f temp_center,
         if (rCenter == null) {
             rVal.setCenter(rCenter = new Vector3f());
         }
-        if (length > RADIUS_EPSILON) {
+        if (length > RADIUS_EPSILON && Float.isFinite(length)) {
             float coeff = (length + radiusDiff) / (2.0f * length);
             rCenter.set(center.addLocal(diff.multLocal(coeff)));
         } else {

File: jme3-core/src/main/java/com/jme3/renderer/Camera.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2020 jMonkeyEngine
+ * Copyright (c) 2009-2021 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -207,7 +207,7 @@ public enum FrustumIntersect {
     /**
      * Serialization only. Do not use.
      */
-    public Camera() {
+    protected Camera() {
         worldPlane = new Plane[MAX_WORLD_PLANES];
         for (int i = 0; i < MAX_WORLD_PLANES; i++) {
             worldPlane[i] = new Plane();

File: jme3-vr/src/main/java/com/jme3/app/VRApplication.java
Patch:
@@ -251,7 +251,7 @@ public VRApplication() {
         
         guiNode.setQueueBucket(Bucket.Gui);
         guiNode.setCullHint(CullHint.Never);
-        dummyCam = new Camera();
+        dummyCam = new Camera(0, 0);
         
         initStateManager();
 
@@ -1548,4 +1548,4 @@ public void setAppProfiler(AppProfiler prof) {
     public AppProfiler getAppProfiler() {
         return null;
     }
-}
\ No newline at end of file
+}

File: jme3-vr/src/main/java/com/jme3/app/VREnvironment.java
Patch:
@@ -384,7 +384,7 @@ public Camera getDummyCamera(){
     				if ((settings != null) && (settings.getWidth() != 0) && (settings.getHeight() != 0)){
     		        	dummyCam = new Camera(settings.getWidth(), settings.getHeight());
     		        } else {
-    		        	dummyCam = new Camera();
+    		        	dummyCam = new Camera(0, 0);
     		        }
     			}
     		} else {

File: jme3-core/src/main/java/com/jme3/environment/LightProbeFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2020 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -208,7 +208,7 @@ private static void generatePbrMaps(TextureCubeMap envMap, final LightProbe prob
     }
 
     /**
-     * For debuging porpose only
+     * For debuging purposes only.
      * Will return a Node meant to be added to a GUI presenting the 2 cube maps in a cross pattern with all the mip maps.
      *
      * @param manager the asset manager

File: jme3-core/src/main/java/com/jme3/light/LightProbe.java
Patch:
@@ -231,9 +231,9 @@ public void setAreaType(AreaType type){
                 break;
             case OrientedBox:
                 area = new OrientedBoxProbeArea(new Transform());
-                area.setCenter(position);
                 break;
         }
+        area.setCenter(position);
     }
 
     public AreaType getAreaType(){

File: jme3-examples/src/main/java/jme3test/app/state/TestIssue1421.java
Patch:
@@ -88,12 +88,13 @@ public void simpleUpdate(float tpf) {
             List<SceneProcessor> processorList = lastViewPort.getProcessors();
             int numProcessors = processorList.size();
             if (numProcessors != 0) {
-                throw new RuntimeException("SceneProcessor is still attached.");
+                throw new IllegalStateException(
+                        "SceneProcessor is still attached.");
             }
 
             // Check whether KEY_SYSRQ is still mapped.
             if (inputManager.hasMapping("ScreenShot")) {
-                throw new RuntimeException("KEY_SYSRQ is still mapped.");
+                throw new IllegalStateException("KEY_SYSRQ is still mapped.");
             }
             stop();
         }

File: jme3-core/src/plugins/java/com/jme3/export/binary/BinaryOutputCapsule.java
Patch:
@@ -41,6 +41,7 @@
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
@@ -684,8 +685,7 @@ protected void write(String value) throws IOException {
             write(NULL_OBJECT);
             return;
         }
-        // write our output as UTF-8. Java misspells UTF-8 as UTF8 for official use in java.lang
-        byte[] bytes = value.getBytes("UTF8");
+        byte[] bytes = value.getBytes(StandardCharsets.UTF_8);
         write(bytes.length);
         baos.write(bytes);
     }

File: jme3-android/src/main/java/com/jme3/renderer/android/RendererUtil.java
Patch:
@@ -77,8 +77,6 @@ public static void checkEGLError(EGL10 egl) {
         if (error != EGL10.EGL_SUCCESS) {
             String errorMessage;
             switch (error) {
-                case EGL10.EGL_SUCCESS:
-                    return;
                 case EGL10.EGL_NOT_INITIALIZED:
                     errorMessage = "EGL is not initialized, or could not be "
                             + "initialized, for the specified EGL display connection. ";

File: jme3-core/src/main/java/com/jme3/audio/openal/ALUtil.java
Patch:
@@ -29,7 +29,8 @@ public static String getALErrorMessage(int errorCode) {
                 errorText = "Out of Memory";
                 break;
             default:
-                errorText = "Unknown Error Code: " + String.valueOf(errorCode);
+                errorText = "Unknown Error Code: " + errorCode;
+                break;
         }
         return errorText;
     }

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikktspaceTangentGenerator.java
Patch:
@@ -434,7 +434,7 @@ static void MergeVertsFast(int piTriList_in_and_out[], TmpVert pTmpVert[], final
                 boolean bReadyLeftSwap = false, bReadyRightSwap = false;
                 while ((!bReadyLeftSwap) && iL < iR) {
                     assert (iL >= iL_in && iL <= iR_in);
-                    bReadyLeftSwap = !(pTmpVert[iL].vert[channel] < fSep);
+                    bReadyLeftSwap = pTmpVert[iL].vert[channel] >= fSep;
                     if (!bReadyLeftSwap) {
                         ++iL;
                     }

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -431,6 +431,9 @@ private long createContext(final long platform, final long[] devices, long windo
                 case MACOSX:
                     properties.put(APPLEGLSharing.CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE)
                             .put(org.lwjgl.opengl.CGL.CGLGetShareGroup(org.lwjgl.opengl.CGL.CGLGetCurrentContext()));
+                    break;
+                default:
+                    break; // Unknown Platform, do nothing.
             }
 
             properties.put(CL_CONTEXT_PLATFORM).put(platform);

File: jme3-core/src/main/java/com/jme3/app/state/BaseAppState.java
Patch:
@@ -44,10 +44,10 @@
  *  management convenience than AbstractAppState, including methods
  *  for enable/disable/initialize state management.
  *  The abstract onEnable() and onDisable() methods are called
- *  appropriately during initialize(), terminate(), or setEnabled()
+ *  appropriately during initialize(), cleanup(), or setEnabled()
  *  depending on the mutual state of "initialized" and "enabled".
  *  
- *  <p>initialize() and terminate() can be used by subclasses to
+ *  <p>initialize() and cleanup() can be used by subclasses to
  *  manage resources that should exist the entire time that the 
  *  app state is attached.  This is useful for resources that might
  *  be expensive to create or load.</p>

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/SkeletonLoader.java
Patch:
@@ -164,6 +164,7 @@ public void endElement(String uri, String name, String qName) {
             indexToJoint.clear();
             armature = new Armature(joints);
             armature.saveBindPose();
+            armature.saveInitialPose();
         } else if (qName.equals("animation")) {
             animClips.add(animClip);
             animClip = null;

File: jme3-core/src/main/java/com/jme3/math/Transform.java
Patch:
@@ -204,8 +204,8 @@ public Vector3f getScale(Vector3f scale) {
      * interpolate from t1 to t2.
      */
     public void interpolateTransforms(Transform t1, Transform t2, float delta) {
-        t1.rot.nlerp(t2.rot, delta);
-        this.rot.set(t1.rot);
+        this.rot.set(t1.rot); 
+        this.rot.nlerp(t2.rot, delta);
         this.translation.interpolateLocal(t1.translation, t2.translation, delta);
         this.scale.interpolateLocal(t1.scale, t2.scale, delta);
     }

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -437,7 +437,7 @@ public Geometry[] readMeshPrimitives(int meshIndex) throws IOException {
                     targetNames.add(target.getAsString());
                 }
             }
-
+            
             //Read morph targets
             JsonArray targets = meshObject.getAsJsonArray("targets");
             if(targets != null){
@@ -457,7 +457,7 @@ public Geometry[] readMeshPrimitives(int meshIndex) throws IOException {
                     mesh.addMorphTarget(morphTarget);
                 }
             }
-
+        
             //Read mesh extras
             mesh = customContentManager.readExtensionAndExtras("primitive", meshObject, mesh);
 
@@ -1129,7 +1129,7 @@ private void setupControls() {
 //                    skinData.rootBoneTransformOffset.combineWithParent(skinData.parent.getWorldTransform());
 //                }
 //            }
-
+            
             if (skinData.animComposer != null && skinData.animComposer.getSpatial() == null) {
                 spatial.addControl(skinData.animComposer);
             }

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -1428,4 +1428,3 @@ public SkinBuffers populate(Integer bufferViewIndex, int componentType, String t
     }
 
 }
-

File: jme3-core/src/main/java/com/jme3/app/Application.java
Patch:
@@ -167,13 +167,13 @@ public interface Application {
 
     /**
      * Starts the application.
-     * A bug occuring when using the LWJGL3 prevents the method from returning until after #stop() is called.
+     * A bug occuring when using LWJGL3 prevents this method from returning until after the application is stopped.
      */
     public void start();
 
     /**
      * Starts the application.
-     * A bug occuring when using the LWJGL3 prevents the method from returning until after #stop() is called.
+     * A bug occuring when using LWJGL3 prevents this method from returning until after the application is stopped.
      */
     public void start(boolean waitFor);
 

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/lodcalc/DistanceLodCalculator.java
Patch:
@@ -126,7 +126,7 @@ public void write(JmeExporter ex) throws IOException {
     public void read(JmeImporter im) throws IOException {
         InputCapsule ic = im.getCapsule(this);
         size = ic.readInt("patchSize", 32);
-        lodMultiplier = ic.readFloat("lodMultiplier", 2.7f);
+        lodMultiplier = ic.readFloat("lodMultiplier", 32f);
     }
 
     @Override

File: jme3-core/src/main/java/com/jme3/math/Quaternion.java
Patch:
@@ -263,7 +263,7 @@ public Quaternion fromAngles(float[] angles) {
     /**
      * <code>fromAngles</code> builds a Quaternion from the Euler rotation
      * angles (x,y,z) aka (pitch, yaw, roll)).
-     * Note that we are applying in order: (y, z, x) aka (yaw, roll, pitch)
+     * Note that we are applying in order: (y, x, z) aka (yaw, pitch, roll)
      * but we've ordered them in x, y, and z for convenience.
      *
      * @see <a href="http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm">http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm</a>

File: jme3-desktop/src/main/java/com/jme3/system/awt/AwtPanelsContext.java
Patch:
@@ -230,6 +230,7 @@ private void destroyInThread(){
     @Override
     public void setSettings(AppSettings settings) {
         this.settings.copyFrom(settings);
+        this.settings.setRenderer(AppSettings.LWJGL_OPENGL2);
         if (actualContext != null){
             actualContext.setSettings(settings);
         }

File: jme3-examples/src/main/java/jme3test/bullet/TestIssue1283.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.logging.Logger;
 
 /**
- * Test case for JME issue #1283: collision-group filter not applied to CCD.
+ * Test case for issue #1283: collision-group filter not applied to CCD.
  * <p>
  * Click RMB or press the "B" key to shoot a ball at the wall. In a successful
  * test, all balls will pass through the wall. If any ball rebounds, or is

File: jme3-core/src/main/java/com/jme3/scene/debug/custom/ArmatureDebugger.java
Patch:
@@ -1,7 +1,7 @@
 package com.jme3.scene.debug.custom;
 
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2020 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -134,12 +134,12 @@ public void initialize(AssetManager assetManager, Camera camera) {
 
         Material matWires = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         matWires.setBoolean("VertexColor", true);
-        matWires.getAdditionalRenderState().setLineWidth(3);
+        matWires.getAdditionalRenderState().setLineWidth(1f);
         wires.setMaterial(matWires);
 
         Material matOutline = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         matOutline.setBoolean("VertexColor", true);
-        matOutline.getAdditionalRenderState().setLineWidth(5);
+        matOutline.getAdditionalRenderState().setLineWidth(1f);
         outlines.setMaterial(matOutline);
 
         Material matOutline2 = new Material(assetManager, "Common/MatDefs/Misc/DashedLine.j3md");

File: jme3-core/src/main/java/com/jme3/anim/MorphTrack.java
Patch:
@@ -79,7 +79,7 @@ public MorphTrack(Geometry target, float[] times, float[] weights, int nbMorphTa
     /**
      * return the array of weights of this track
      *
-     * @return the pre-existing array
+     * @return the pre-existing array -- do not modify
      */
     public float[] getWeights() {
         return weights;
@@ -88,7 +88,7 @@ public float[] getWeights() {
     /**
      * returns the arrays of time for this track
      *
-     * @return the pre-existing array
+     * @return the pre-existing array -- do not modify
      */
     public float[] getTimes() {
         return times;

File: jme3-examples/src/main/java/jme3test/app/TestUseAfterFree.java
Patch:
@@ -70,7 +70,7 @@ public void simpleUpdate(float tpf) {
         
         time += tpf;
         if (time > 5) {
-            System.out.println("Assiging texture to deleted object!");
+            System.out.println("Assigning texture to deleted object!");
             
             deletedTex = assetManager.loadTexture("Interface/Logo/Monkey.png");
             BufferUtils.destroyDirectBuffer(deletedTex.getImage().getData(0));

File: jme3-core/src/main/java/com/jme3/math/Matrix3f.java
Patch:
@@ -1161,7 +1161,7 @@ public Matrix3f transposeNew() {
      *  0.0  1.0  0.0
      *  0.0  0.0  1.0
      * ]
-     * <pre>
+     * </pre>
      *
      * @return the string representation of this object.
      */

File: jme3-core/src/main/java/com/jme3/math/Quaternion.java
Patch:
@@ -309,7 +309,8 @@ public Quaternion fromAngles(float xAngle, float yAngle, float zAngle) {
 
     /**
      * <code>toAngles</code> returns this quaternion converted to Euler rotation
-     * angles (x,y,z) aka (pitch, yaw, roll).<br/>
+     * angles (x,y,z) aka (pitch, yaw, roll).
+     *
      * Note that the result is not always 100% accurate due to the implications of euler angles.
      * @see <a href="http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm">http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm</a>
      *

File: jme3-desktop/src/main/java/com/jme3/system/awt/AwtPanelsContext.java
Patch:
@@ -230,7 +230,6 @@ private void destroyInThread(){
     @Override
     public void setSettings(AppSettings settings) {
         this.settings.copyFrom(settings);
-        this.settings.setRenderer(AppSettings.LWJGL_OPENGL2);
         if (actualContext != null){
             actualContext.setSettings(settings);
         }

File: jme3-android/src/main/java/com/jme3/input/android/AndroidJoystickJoyInput14.java
Patch:
@@ -113,7 +113,7 @@ public List<Joystick> loadJoysticks(int joyId, InputManager inputManager) {
         joysticks.clear();
         joystickIndex.clear();
 
-        ArrayList gameControllerDeviceIds = new ArrayList();
+        ArrayList<Integer> gameControllerDeviceIds = new ArrayList<>();
         int[] deviceIds = InputDevice.getDeviceIds();
         for (int deviceId : deviceIds) {
             InputDevice dev = InputDevice.getDevice(deviceId);

File: jme3-bullet/src/common/java/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -296,7 +296,7 @@ private static HullCollisionShape createSingleDynamicMeshShape(Geometry geom, Sp
      * @param vector
      */
     public static void shiftCompoundShapeContents(CompoundCollisionShape compoundShape, Vector3f vector) {
-        for (Iterator<ChildCollisionShape> it = new LinkedList(compoundShape.getChildren()).iterator(); it.hasNext();) {
+        for (Iterator<ChildCollisionShape> it = new LinkedList<>(compoundShape.getChildren()).iterator(); it.hasNext();) {
             ChildCollisionShape childCollisionShape = it.next();
             CollisionShape child = childCollisionShape.shape;
             Vector3f location = childCollisionShape.location;

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -1127,7 +1127,7 @@ public List<PhysicsRayTestResult> rayTestRaw(Vector3f from, Vector3f to, List<Ph
      * @return a new list of results
      */
     public List<PhysicsSweepTestResult> sweepTest(CollisionShape shape, Transform start, Transform end) {
-        List results = new LinkedList();
+        List<PhysicsSweepTestResult> results = new LinkedList<>();
         sweepTest(shape, start, end , results);
         return results;
     }

File: jme3-core/src/main/java/com/jme3/asset/DesktopAssetManager.java
Patch:
@@ -396,7 +396,7 @@ public <T> T loadAsset(AssetKey<T> key){
 
     @Override
     public Object loadAsset(String name){
-        return loadAsset(new AssetKey(name));
+        return loadAsset(new AssetKey<>(name));
     }
 
     @Override
@@ -428,7 +428,7 @@ public AudioData loadAudio(String name){
 
     @Override
     public BitmapFont loadFont(String name){
-        return (BitmapFont) loadAsset(new AssetKey(name));
+        return loadAsset(new AssetKey<BitmapFont>(name));
     }
 
     @Override

File: jme3-core/src/main/java/com/jme3/asset/ImplHandler.java
Patch:
@@ -294,7 +294,7 @@ public void removeLocator(final Class<? extends AssetLocator> locatorType, Strin
         Iterator<ImplThreadLocal<AssetLocator>> it = locatorsList.iterator();
        
         while (it.hasNext()){
-            ImplThreadLocal locator = it.next();
+            ImplThreadLocal<AssetLocator> locator = it.next();
             if (locator.getPath().equals(rootPath) &&
                 locator.getTypeClass().equals(locatorType)){
                 //it.remove();

File: jme3-core/src/main/java/com/jme3/asset/ThreadingManager.java
Patch:
@@ -77,7 +77,7 @@ public T call() throws Exception {
     }
 
     public <T> Future<T> loadAsset(AssetKey<T> assetKey) {
-        return executor.submit(new LoadingTask(assetKey));
+        return executor.submit(new LoadingTask<>(assetKey));
     }
 
     public static boolean isLoadingThread() {

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -101,7 +101,7 @@ public Material(MaterialDef def) {
     }
 
     public Material(AssetManager contentMan, String defName) {
-        this((MaterialDef) contentMan.loadAsset(new AssetKey(defName)));
+        this(contentMan.loadAsset(new AssetKey<MaterialDef>(defName)));
     }
 
     /**
@@ -1109,7 +1109,7 @@ public void read(JmeImporter im) throws IOException {
             assert applyDefaultValues && guessRenderStateApply;
         }
 
-        def = (MaterialDef) im.getAssetManager().loadAsset(new AssetKey(defName));
+        def = im.getAssetManager().loadAsset(new AssetKey<MaterialDef>(defName));
         paramValues = new ListMap<String, MatParam>();
 
         // load the textures and update nextTexUnit

File: jme3-core/src/plugins/java/com/jme3/export/binary/BinaryExporter.java
Patch:
@@ -370,10 +370,10 @@ public BinaryOutputCapsule getCapsule(Savable object) {
         return contentTable.get(object).getContent();
     }
 
-    private BinaryClassObject createClassObject(Class clazz) throws IOException{
+    private BinaryClassObject createClassObject(Class<? extends Savable> clazz) throws IOException{
         BinaryClassObject bco = new BinaryClassObject();
         bco.alias = generateTag();
-        bco.nameFields = new HashMap<String, BinaryClassField>();
+        bco.nameFields = new HashMap<>();
         bco.classHierarchyVersions = SavableClassUtil.getSavableVersions(clazz);
         
         classes.put(clazz.getName(), bco);

File: jme3-core/src/plugins/java/com/jme3/font/plugins/BitmapFontLoader.java
Patch:
@@ -48,7 +48,7 @@ public class BitmapFontLoader implements AssetLoader {
 
     private BitmapFont load(AssetManager assetManager, String folder, InputStream in) throws IOException{
         MaterialDef spriteMat = 
-                (MaterialDef) assetManager.loadAsset(new AssetKey("Common/MatDefs/Misc/Unshaded.j3md"));
+                assetManager.loadAsset(new AssetKey<>("Common/MatDefs/Misc/Unshaded.j3md"));
         BitmapCharacterSet charSet = new BitmapCharacterSet();
         Material[] matPages = null;
         BitmapFont font = new BitmapFont();

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -743,7 +743,7 @@ private void loadFromRoot(List<Statement> roots) throws IOException{
 
             String extendedMat = split[1].trim();
 
-            MaterialDef def = (MaterialDef) assetManager.loadAsset(new AssetKey(extendedMat));
+            MaterialDef def = assetManager.loadAsset(new AssetKey<MaterialDef>(extendedMat));
             if (def == null) {
                 throw new MatParseException("Extended material " + extendedMat + " cannot be found.", materialStat);
             }

File: jme3-core/src/plugins/java/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -331,9 +331,9 @@ protected void loadMtlLib(String name) throws IOException{
 
         // NOTE: Cut off any relative/absolute paths
         name = new File(name).getName();
-        AssetKey mtlKey = new AssetKey(key.getFolder() + name);
+        AssetKey<MaterialList> mtlKey = new AssetKey<>(key.getFolder() + name);
         try {
-            matList = (MaterialList) assetManager.loadAsset(mtlKey);
+            matList = assetManager.loadAsset(mtlKey);
         } catch (AssetNotFoundException ex){
             logger.log(Level.WARNING, "Cannot locate {0} for model {1}", new Object[]{name, key});
         }

File: jme3-core/src/tools/java/jme3tools/optimize/LodGenerator.java
Patch:
@@ -242,7 +242,7 @@ public String toString() {
     /**
      * Comparator used to sort vertices according to their collapse cost
      */
-    private Comparator collapseComparator = new Comparator<Vertex>() {
+    private Comparator<Vertex> collapseComparator = new Comparator<Vertex>() {
         @Override
         public int compare(Vertex o1, Vertex o2) {
             if (Float.compare(o1.collapseCost, o2.collapseCost) == 0) {

File: jme3-examples/src/main/java/jme3test/TestChooser.java
Patch:
@@ -323,7 +323,7 @@ private void setup(Vector<Class> classes) {
 
         final FilteredJList list = new FilteredJList();
         list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
-        DefaultListModel model = new DefaultListModel();
+        DefaultListModel<Class> model = new DefaultListModel<>();
         for (Class c : classes) {
             model.addElement(c);
         }

File: jme3-examples/src/main/java/jme3test/app/TestIDList.java
Patch:
@@ -45,7 +45,7 @@ static class StateCol {
 
         public StateCol(){
             // populate with free ids
-            List<Integer> freeIds = new ArrayList();
+            List<Integer> freeIds = new ArrayList<>();
             for (int i = 0; i < 16; i++){
                 freeIds.add(i);
             }

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -595,9 +595,9 @@ private void pushBoneAssign(String vertIndex, String boneIndex, String weight) t
     }
 
     private void startSkeleton(String name) {
-        AssetKey assetKey = new AssetKey(folderName + name + ".xml");
+        AssetKey<AnimData> assetKey = new AssetKey<AnimData>(folderName + name + ".xml");
         try {
-            animData = (AnimData) assetManager.loadAsset(assetKey);
+            animData = assetManager.loadAsset(assetKey);
         } catch (AssetNotFoundException ex) {
             logger.log(Level.WARNING, "Cannot locate {0} for model {1}", new Object[]{assetKey, key});
             animData = null;

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -163,7 +163,7 @@ public void run() {
                     
                     if (isCenter(quadIdx)) {
                         // if it should be attached as a child right now, attach it
-                        getControl(UpdateControl.class).enqueue(new Callable() {
+                        getControl(UpdateControl.class).enqueue(new Callable<Object>() {
                             // back on the OpenGL thread:
                             @Override
                             public Object call() throws Exception {
@@ -177,7 +177,7 @@ public Object call() throws Exception {
                             }
                         });
                     } else {
-                        getControl(UpdateControl.class).enqueue(new Callable() {
+                        getControl(UpdateControl.class).enqueue(new Callable<Object>() {
                             @Override
                             public Object call() throws Exception {
                                 removeQuad(newQuad);
@@ -188,7 +188,7 @@ public Object call() throws Exception {
                 }
             }
 
-            getControl(UpdateControl.class).enqueue(new Callable() {
+            getControl(UpdateControl.class).enqueue(new Callable<Object>() {
                     // back on the OpenGL thread:
                     @Override
                     public Object call() throws Exception {

File: jme3-android/src/main/java/com/jme3/texture/plugins/AndroidNativeImageLoader.java
Patch:
@@ -31,7 +31,7 @@ public Image load(AssetInfo info) throws IOException {
         InputStream in = null;
         try {
             in = info.openStream();
-            return load(info.openStream(), flip, tmpArray);
+            return load(in, flip, tmpArray);
         } finally {
             if (in != null){
                 in.close();

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -196,9 +196,9 @@ protected void initContextFirstTime() {
         }
 
         if (settings.getBoolean("GraphicsDebug")) {
-            gl = new GLDebugDesktop(gl, glext, glfbo);
-            glext = (GLExt) gl;
-            glfbo = (GLFbo) gl;
+            gl = (GL) GLDebug.createProxy(gl, gl, GL.class, GL2.class, GL3.class, GL4.class);
+            glext = (GLExt) GLDebug.createProxy(gl, glext, GLExt.class);
+            glfbo = (GLFbo) GLDebug.createProxy(gl, glfbo, GLFbo.class);
         }
 
         if (settings.getBoolean("GraphicsTiming")) {

File: jme3-vr/src/main/java/com/jme3/system/lwjgl/LwjglContextVR.java
Patch:
@@ -167,9 +167,9 @@ protected void initContextFirstTime() {
             }
 
             if (settings.getBoolean("GraphicsDebug")) {
-                gl = new GLDebugDesktop(gl, glext, glfbo);
-                glext = (GLExt) gl;
-                glfbo = (GLFbo) gl;
+                gl = (GL) GLDebug.createProxy(gl, gl, GL.class, GL2.class, GL3.class, GL4.class);
+                glext = (GLExt) GLDebug.createProxy(gl, glext, GLExt.class);
+                glfbo = (GLFbo) GLDebug.createProxy(gl, glfbo, GLFbo.class);
             }
 
             if (settings.getBoolean("GraphicsTiming")) {

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLDebug.java
Patch:
@@ -134,9 +134,8 @@ public static Object createProxy(GL gl, Object obj, Class<?>... implementedInter
                     new GLDebug(gl, obj)
             );
         } catch (NoSuchMethodException nsme) {
-            LOG.log(Level.SEVERE, "Could not initialize the proxy because the glGetError method wasn't found!",
+            throw new IllegalStateException("Could not initialize the proxy because the glGetError method wasn't found!",
                     nsme);
-            return null;
         }
     }
 }

File: jme3-core/src/main/java/com/jme3/math/Matrix3f.java
Patch:
@@ -1210,7 +1210,7 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object o) {
-        if (!(o instanceof Matrix3f)) {
+        if (o == null || o.getClass() != getClass()) {
             return false;
         }
 

File: jme3-core/src/main/java/com/jme3/math/Matrix4f.java
Patch:
@@ -2161,7 +2161,7 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object o) {
-        if (!(o instanceof Matrix4f)) {
+        if (o == null || o.getClass() != getClass()) {
             return false;
         }
 

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -196,9 +196,9 @@ protected void initContextFirstTime() {
         }
 
         if (settings.getBoolean("GraphicsDebug")) {
-            gl = new GLDebugDesktop(gl, glext, glfbo);
-            glext = (GLExt) gl;
-            glfbo = (GLFbo) gl;
+            gl = (GL) GLDebug.createProxy(gl, gl, GL.class, GL2.class, GL3.class, GL4.class);
+            glext = (GLExt) GLDebug.createProxy(gl, glext, GLExt.class);
+            glfbo = (GLFbo) GLDebug.createProxy(gl, glfbo, GLFbo.class);
         }
 
         if (settings.getBoolean("GraphicsTiming")) {

File: jme3-vr/src/main/java/com/jme3/system/lwjgl/LwjglContextVR.java
Patch:
@@ -167,9 +167,9 @@ protected void initContextFirstTime() {
             }
 
             if (settings.getBoolean("GraphicsDebug")) {
-                gl = new GLDebugDesktop(gl, glext, glfbo);
-                glext = (GLExt) gl;
-                glfbo = (GLFbo) gl;
+                gl = (GL) GLDebug.createProxy(gl, gl, GL.class, GL2.class, GL3.class, GL4.class);
+                glext = (GLExt) GLDebug.createProxy(gl, glext, GLExt.class);
+                glfbo = (GLFbo) GLDebug.createProxy(gl, glfbo, GLFbo.class);
             }
 
             if (settings.getBoolean("GraphicsTiming")) {

File: jme3-core/src/main/java/com/jme3/system/JmeVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2020 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -49,7 +49,7 @@ public class JmeVersion {
     static {
         try {
             props.load(JmeVersion.class.getResourceAsStream("version.properties"));
-        } catch (IOException ex) {
+        } catch (IOException | NullPointerException ex) {
             logger.log(Level.WARNING, "Unable to read version info!", ex);
         }
     }

File: jme3-core/src/main/java/com/jme3/system/JmeSystemDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2019 jMonkeyEngine
+ * Copyright (c) 2009-2020 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -171,7 +171,7 @@ public Platform getPlatform() {
             return is64 ? Platform.Windows64 : Platform.Windows32;
         } else if (os.contains("linux") || os.contains("freebsd") 
                 || os.contains("sunos") || os.contains("unix")) {
-            if (arch.startsWith("arm")) {
+            if (arch.startsWith("arm") || arch.startsWith("aarch")) {
                 return is64 ? Platform.Linux_ARM64 : Platform.Linux_ARM32;
             } else {
                 return is64 ? Platform.Linux64 : Platform.Linux32;

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -106,6 +106,7 @@ public abstract class LwjglContext implements JmeContext {
     private static final Set<String> SUPPORTED_RENDERS = new HashSet<>(Arrays.asList(
             AppSettings.LWJGL_OPENGL2,
             AppSettings.LWJGL_OPENGL30,
+            AppSettings.LWJGL_OPENGL31,
             AppSettings.LWJGL_OPENGL32,
             AppSettings.LWJGL_OPENGL33,
             AppSettings.LWJGL_OPENGL40,

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -1793,9 +1793,8 @@ public void cloneFields( Cloner cloner, Object original ) {
         // This was not cloned before... I think that's a mistake.
         this.affectedAreaBBox = cloner.clone(affectedAreaBBox);
 
-        // picker is not cloneable and not cloned.  This also seems like
-        // a mistake if you ever load the same terrain twice.
-        // this.picker = cloner.clone(picker);
+        // Otherwise, picker would be cloned by reference and thus "this" would be wrong
+        this.picker = new BresenhamTerrainPicker(this);
 
         // neighbourFinder is also not cloned.  Maybe that's ok.
     }

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -1793,9 +1793,8 @@ public void cloneFields( Cloner cloner, Object original ) {
         // This was not cloned before... I think that's a mistake.
         this.affectedAreaBBox = cloner.clone(affectedAreaBBox);
 
-        // picker is not cloneable and not cloned.  This also seems like
-        // a mistake if you ever load the same terrain twice.
-        // this.picker = cloner.clone(picker);
+        // Otherwise, picker would be cloned by reference and thus "this" would be wrong
+        this.picker = new BresenhamTerrainPicker(this);
 
         // neighbourFinder is also not cloned.  Maybe that's ok.
     }

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -106,6 +106,7 @@ public abstract class LwjglContext implements JmeContext {
     private static final Set<String> SUPPORTED_RENDERS = new HashSet<>(Arrays.asList(
             AppSettings.LWJGL_OPENGL2,
             AppSettings.LWJGL_OPENGL30,
+            AppSettings.LWJGL_OPENGL31,
             AppSettings.LWJGL_OPENGL32,
             AppSettings.LWJGL_OPENGL33,
             AppSettings.LWJGL_OPENGL40,

File: jme3-core/src/main/java/com/jme3/app/SimpleApplication.java
Patch:
@@ -32,6 +32,7 @@
 package com.jme3.app;
 
 import com.jme3.app.state.AppState;
+import com.jme3.app.state.ConstantVerifierState;
 import com.jme3.audio.AudioListenerState;
 import com.jme3.font.BitmapFont;
 import com.jme3.font.BitmapText;
@@ -97,7 +98,8 @@ public void onAction(String name, boolean value, float tpf) {
     }
 
     public SimpleApplication() {
-        this(new StatsAppState(), new FlyCamAppState(), new AudioListenerState(), new DebugKeysAppState());
+        this(new StatsAppState(), new FlyCamAppState(), new AudioListenerState(), new DebugKeysAppState(),
+             new ConstantVerifierState());
     }
 
     public SimpleApplication( AppState... initialStates ) {

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -612,7 +612,7 @@ public void initialize() {
             int vaoId = intBuf16.get(0);
             gl3.glBindVertexArray(vaoId);
         }
-        if (gl2 != null) {
+        if (gl2 != null && !(gl instanceof GLES_30)) {
             gl2.glEnable(GL2.GL_VERTEX_PROGRAM_POINT_SIZE);
             if (!caps.contains(Caps.CoreProfile)) {
                 gl2.glEnable(GL2.GL_POINT_SPRITE);

File: jme3-examples/src/main/java/jme3test/texture/TestTexture3D.java
Patch:
@@ -128,4 +128,4 @@ private Texture getTexture() throws IOException {
         data.add(bb);
         return new Texture3D(new Image(Format.RGB8, 10, 10, 10, data, null, ColorSpace.Linear));
     }
-}
\ No newline at end of file
+}

File: jme3-examples/src/main/java/jme3test/texture/TestTextureArray.java
Patch:
@@ -84,4 +84,4 @@ public static void main(String[] args)
        app.start();
    }
 
-}
\ No newline at end of file
+}

File: jme3-examples/src/main/java/jme3test/texture/TestTextureArrayCompressed.java
Patch:
@@ -31,8 +31,8 @@ public void simpleInitApp()
        }
        
        
-       Texture tex1 = assetManager.loadTexture( "Textures/Terrain/Pond/Pond.dds");
-       Texture tex2 = assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall.dds");
+       Texture tex1 = assetManager.loadTexture( "Textures/Terrain/Pond/Pond_dxt5.dds");
+       Texture tex2 = assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall_dxt5.dds");
        List<Image> images = new ArrayList<Image>();
        images.add(tex1.getImage());
        images.add(tex2.getImage());
@@ -84,4 +84,4 @@ public static void main(String[] args)
        app.start();
    }
 
-}
\ No newline at end of file
+}

File: jme3-core/src/main/java/com/jme3/scene/SceneGraphVisitorAdapter.java
Patch:
@@ -51,9 +51,9 @@ public void visit(Geometry geom) {}
     /**
      * Called when a {@link Node} is visited.
      * 
-     * @param geom The visited node
+     * @param node The visited node
      */
-    public void visit(Node geom) {}
+    public void visit(Node node) {}
 
     @Override
     public final void visit(Spatial spatial) {

File: jme3-core/src/main/java/com/jme3/anim/tween/action/BlendableAction.java
Patch:
@@ -74,6 +74,7 @@ public double getTransitionLength() {
 
     public void setTransitionLength(double transitionLength) {
         this.transitionLength = transitionLength;
+        this.transition.setLength(transitionLength);
     }
 
     protected float getTransitionWeight() {

File: jme3-networking/src/main/java/com/jme3/network/service/rmi/RmiRegistry.java
Patch:
@@ -194,7 +194,7 @@ public <T> T getLocalObject( Class<T> type ) {
     public <T> T getLocalObject( String name, Class<T> type ) {
         local.lock.readLock().lock();
         try {
-            return type.cast(local.byName.get(name));
+            return type.cast(local.byName.get(name).object);
         } finally {
             local.lock.readLock().unlock();
         }

File: jme3-plugins/src/xml/java/com/jme3/export/xml/DOMInputCapsule.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2019 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -38,6 +38,7 @@
 import com.jme3.util.BufferUtils;
 import com.jme3.util.IntMap;
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
@@ -962,6 +963,7 @@ public Savable readSavable(String name, Savable defVal) throws IOException {
 
     private Savable readSavableFromCurrentElem(Savable defVal) throws
             InstantiationException, ClassNotFoundException,
+            NoSuchMethodException, InvocationTargetException,
             IOException, IllegalAccessException {
         Savable ret = defVal;
         Savable tmp = null;

File: jme3-niftygui/src/main/java/com/jme3/niftygui/JmeBatchRenderBackend.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2019 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -541,7 +541,7 @@ private RenderState.BlendMode convertBlend(final BlendMode blendMode) {
       } else if (blendMode == BlendMode.BLEND) {
           return RenderState.BlendMode.Alpha;
       } else if (blendMode == BlendMode.MULIPLY) {
-          return RenderState.BlendMode.Modulate;
+          return RenderState.BlendMode.Alpha;
       } else {
           throw new UnsupportedOperationException();
       }

File: jme3-niftygui/src/main/java/com/jme3/niftygui/RenderDeviceJme.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2019 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -209,7 +209,7 @@ private RenderState.BlendMode convertBlend(BlendMode blendMode) {
         } else if (blendMode == BlendMode.BLEND) {
             return RenderState.BlendMode.Alpha;
         } else if (blendMode == BlendMode.MULIPLY) {
-            return RenderState.BlendMode.Modulate;
+            return RenderState.BlendMode.Alpha;
         } else {
             throw new UnsupportedOperationException();
         }

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/picking/TerrainPicker.java
Patch:
@@ -47,9 +47,8 @@ public interface TerrainPicker {
      *
      * @param worldPick
      *            our pick ray, in world space.
-     * @return null if no pick is found. Otherwise it returns a Vector3f  populated with the pick
-     *         coordinates.
+     * @return The number of collisions found
      */
-    public Vector3f getTerrainIntersection(final Ray worldPick, CollisionResults results);
+    public int getTerrainIntersection(final Ray worldPick, CollisionResults results);
 
 }

File: jme3-networking/src/main/java/com/jme3/network/base/protocol/SerializerMessageProtocol.java
Patch:
@@ -93,7 +93,8 @@ public Message toMessage( ByteBuffer bytes ) {
     }
       
     public MessageBuffer createBuffer() {
-        return new GreedyMessageBuffer(this);
+        // Defaulting to LazyMessageBuffer
+        return new LazyMessageBuffer(this);
     }
      
 }

File: jme3-vr/src/main/java/com/jme3/input/vr/lwjgl_openvr/LWJGLOpenVR.java
Patch:
@@ -421,6 +421,8 @@ public HmdType getType() {
                 completeName = completeName.toLowerCase(Locale.ENGLISH).trim();
                 if( completeName.contains("htc") || completeName.contains("vive") ) {
                     return HmdType.HTC_VIVE;
+                } else if ( completeName.contains("index") ) {
+                    return HmdType.VALVE_INDEX;
                 } else if( completeName.contains("osvr") ) {
                     return HmdType.OSVR;
                 } else if( completeName.contains("oculus") || completeName.contains("rift") ||

File: jme3-examples/src/main/java/jme3test/gui/TestRtlBitmapText.java
Patch:
@@ -46,7 +46,7 @@ public class TestRtlBitmapText extends SimpleApplication {
     private String text = ".text left to right test a is This";
 
     public static void main(String[] args) {
-        TestRTLBitmapText app = new TestRTLBitmapText();
+        TestRtlBitmapText app = new TestRtlBitmapText();
         app.start();
     }
 

File: jme3-core/src/main/java/com/jme3/anim/TransformTrack.java
Patch:
@@ -297,7 +297,7 @@ public void read(JmeImporter im) throws IOException {
     }
 
     @Override
-    public Object jmeClone() {
+    public TransformTrack jmeClone() {
         try {
             TransformTrack clone = (TransformTrack) super.clone();
             return clone;

File: jme3-examples/src/main/java/jme3test/bullet/shape/TestGimpactShape.java
Patch:
@@ -106,7 +106,7 @@ public class TestGimpactShape extends SimpleApplication {
     public static void main(String[] args) {
         test = new TestGimpactShape();
         test.setSettings(new AppSettings(true));
-        test.settings.setFrameRate(60);
+        test.settings.setVSync(true);
         if (SKIP_SETTINGS) {
             test.settings.setWidth(1920);
             test.settings.setHeight(1150);
@@ -117,6 +117,7 @@ public static void main(String[] args) {
 
     @Override
     public void simpleInitApp() {
+        test = this;
         getCamera().setLocation(new Vector3f(40, 30, 160));
         getCamera().lookAt(new Vector3f(40, -5, 0), Vector3f.UNIT_Y);
         getFlyByCamera().setMoveSpeed(25);

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -539,6 +539,7 @@ public void setTextureParam(String name, VarType type, Texture value) {
             checkTextureParamColorSpace(name, value);
             paramValues.put(name, new MatParamTexture(type, name, value, value.getImage() != null ? value.getImage().getColorSpace() : null));
         } else {
+            checkTextureParamColorSpace(name, value);
             val.setTextureValue(value);
             val.setColorSpace(value.getImage() != null ? value.getImage().getColorSpace() : null);
         }

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -539,6 +539,7 @@ public void setTextureParam(String name, VarType type, Texture value) {
             checkTextureParamColorSpace(name, value);
             paramValues.put(name, new MatParamTexture(type, name, value, value.getImage() != null ? value.getImage().getColorSpace() : null));
         } else {
+            checkTextureParamColorSpace(name, value);
             val.setTextureValue(value);
             val.setColorSpace(value.getImage() != null ? value.getImage().getColorSpace() : null);
         }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderAWT.java
Patch:
@@ -143,7 +143,8 @@ public Image blend(Image image, Image baseImage, BlenderContext blenderContext)
             dataArray.add(newData);
         }
 
-        Image result = depth > 1 ? new Image(Format.RGBA8, width, height, depth, dataArray, ColorSpace.Linear) : new Image(Format.RGBA8, width, height, dataArray.get(0), ColorSpace.Linear);
+        ColorSpace colorSpace = baseImage.getColorSpace() != null ? baseImage.getColorSpace() : ColorSpace.Linear;
+        Image result = depth > 1 ? new Image(Format.RGBA8, width, height, depth, dataArray, colorSpace) : new Image(Format.RGBA8, width, height, dataArray.get(0), colorSpace);
         if (image.getMipMapSizes() != null) {
             result.setMipMapSizes(image.getMipMapSizes().clone());
         }

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -537,9 +537,10 @@ public void setTextureParam(String name, VarType type, Texture value) {
         MatParamTexture val = getTextureParam(name);
         if (val == null) {
             checkTextureParamColorSpace(name, value);
-            paramValues.put(name, new MatParamTexture(type, name, value, null));
+            paramValues.put(name, new MatParamTexture(type, name, value, value.getImage() != null ? value.getImage().getColorSpace() : null));
         } else {
             val.setTextureValue(value);
+            val.setColorSpace(value.getImage() != null ? value.getImage().getColorSpace() : null);
         }
 
         if (technique != null) {

File: jme3-bullet/src/main/java/com/jme3/bullet/collision/shapes/HeightfieldCollisionShape.java
Patch:
@@ -147,7 +147,7 @@ protected void createCollisionHeightfield(float[] heightmap, Vector3f worldScale
         this.maxHeight = max;
 
         this.upAxis = 1;
-        this.flipQuadEdges = false;
+        flipQuadEdges = true;
 
         heightStickWidth = (int) FastMath.sqrt(heightfieldData.length);
         heightStickLength = heightStickWidth;

File: jme3-examples/src/main/java/jme3test/terrain/TerrainGridAlphaMapTest.java
Patch:
@@ -294,7 +294,9 @@ public void onAction(final String name, final boolean keyPressed, final float tp
                     TerrainGridAlphaMapTest.this.down = false;
                 }
             } else if (name.equals("Jumps")) {
-                TerrainGridAlphaMapTest.this.player3.jump();
+                if (usePhysics && keyPressed) {
+                    player3.jump();
+                }
             }
         }
     };

File: jme3-core/src/main/java/com/jme3/input/AbstractJoystick.java
Patch:
@@ -98,6 +98,7 @@ public void rumble(float amount){
      * @deprecated Use JoystickButton.assignButton() instead.
      */
     @Override
+    @Deprecated
     public void assignButton(String mappingName, int buttonId){
         if (buttonId < 0 || buttonId >= getButtonCount())
             throw new IllegalArgumentException();
@@ -116,6 +117,7 @@ public void assignButton(String mappingName, int buttonId){
      * @deprecated Use JoystickAxis.assignAxis() instead.
      */
     @Override
+    @Deprecated
     public void assignAxis(String positiveMapping, String negativeMapping, int axisId){
     
         // For backwards compatibility

File: jme3-core/src/main/java/com/jme3/input/InputManager.java
Patch:
@@ -776,6 +776,7 @@ public void setSimulateMouse(boolean value) {
      * Returns state of simulation of mouse events. Used for touchscreen input only.
      *
      */
+    @Deprecated
     public boolean getSimulateMouse() {
         if (touch != null) {
             return touch.isSimulateMouse();

File: jme3-core/src/main/java/com/jme3/input/Joystick.java
Patch:
@@ -57,6 +57,7 @@ public interface Joystick {
      * @see Joystick#getButtonCount()
      * @deprecated Use JoystickButton.assignButton() instead.
      */
+    @Deprecated
     public void assignButton(String mappingName, int buttonId);
 
     /**
@@ -69,6 +70,7 @@ public interface Joystick {
      * @see Joystick#getAxisCount()
      * @deprecated Use JoystickAxis.assignAxis() instead.
      */
+    @Deprecated
     public void assignAxis(String positiveMapping, String negativeMapping, int axisId); 
 
     /**

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -1242,6 +1242,7 @@ public boolean isPointSprite() {
      * material parameter.
      * @return false
      */
+    @Deprecated
     public boolean isAlphaTest() {
         return false;
     }

File: jme3-core/src/main/java/com/jme3/texture/Texture.java
Patch:
@@ -248,6 +248,7 @@ public enum WrapMode {
          * 
          * @deprecated Not supported by OpenGL 3
          */
+        @Deprecated
         MirrorEdgeClamp;
     }
 

File: jme3-vr/src/main/java/com/jme3/input/vr/VRInputAPI.java
Patch:
@@ -123,7 +123,7 @@ public interface VRInputAPI {
     public Object getRawControllerState(int index);
     
     /**
-     * Swap the two hands (exchange the hands controller 1 & 2 indices).
+     * Swap the two hands (exchange the hands controller 1 and 2 indices).
      */
     public void swapHands();
     

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/OculusVR.java
Patch:
@@ -33,7 +33,7 @@
  * <li>Vectors should have their X and Z axes flipped, but apparently not Y.</li>
  * </ul>
  *
- * @author Campbell Suter <znix@znix.xyz>
+ * @author Campbell Suter (znix@znix.xyz)
  */
 public class OculusVR implements VRAPI {
 

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/OculusViewManager.java
Patch:
@@ -55,7 +55,7 @@
 /**
  * A rendering system for Oculus's LibOVR API.
  *
- * @author Campbell Suter <znix@znix.xyz>
+ * @author Campbell Suter (znix@znix.xyz)
  */
 public class OculusViewManager extends AbstractVRViewManager {
 

File: jme3-vr/src/main/java/com/jme3/post/CartoonSSAO.java
Patch:
@@ -43,7 +43,7 @@ public CartoonSSAO(boolean instancedRendering) {
 
     /**
     * Create a Screen Space Ambient Occlusion Filter.
-    * @param downsample factor to divide resolution by for filter, >1 increases speed but degrades quality.
+    * @param downsample factor to divide resolution by for filter, &gt;1 increases speed but degrades quality.
     * @param instancedRendering <code>true</code> if this filter has to use instance rendering and <code>false</code> (default) otherwise.
     */
     public CartoonSSAO(float downsample, boolean instancedRendering) {

File: jme3-vr/src/main/java/com/jme3/system/jopenvr/CameraVideoStreamFrameHeader_t.java
Patch:
@@ -27,7 +27,7 @@ protected List<String> getFieldOrder() {
 		return Arrays.asList("eFrameType", "nWidth", "nHeight", "nBytesPerPixel", "nFrameSequence", "standingTrackedDevicePose");
 	}
 	/**
-	 * @param eFrameType @see EVRTrackedCameraFrameType<br>
+	 * @param eFrameType @see JOpenVRLibrary.EVRTrackedCameraFrameType <br>
 	 * C type : EVRTrackedCameraFrameType<br>
 	 * @param standingTrackedDevicePose C type : TrackedDevicePose_t
 	 */

File: jme3-vr/src/main/java/com/jme3/system/jopenvr/Texture_t.java
Patch:
@@ -32,9 +32,9 @@ protected List<String> getFieldOrder() {
 	/**
 	 * @param handle void *<br>
 	 * C type : void*<br>
-	 * @param eType @see ETextureType<br>
+	 * @param eType @see JOpenVRLibrary.ETextureType <br>
 	 * C type : ETextureType<br>
-	 * @param eColorSpace @see EColorSpace<br>
+	 * @param eColorSpace @see JOpenVRLibrary.EColorSpace <br>
 	 * C type : EColorSpace
 	 */
 	public Texture_t(int handle, int eType, int eColorSpace) {

File: jme3-vr/src/main/java/com/jme3/system/jopenvr/TrackedDevicePose_t.java
Patch:
@@ -32,7 +32,7 @@ protected List<String> getFieldOrder() {
 	 * @param mDeviceToAbsoluteTracking C type : HmdMatrix34_t<br>
 	 * @param vVelocity C type : HmdVector3_t<br>
 	 * @param vAngularVelocity C type : HmdVector3_t<br>
-	 * @param eTrackingResult @see ETrackingResult<br>
+	 * @param eTrackingResult @see JOpenVRLibrary.ETrackingResult <br>
 	 * C type : ETrackingResult
 	 */
 	public TrackedDevicePose_t(HmdMatrix34_t mDeviceToAbsoluteTracking, HmdVector3_t vVelocity, HmdVector3_t vAngularVelocity, int eTrackingResult, byte bPoseIsValid, byte bDeviceIsConnected) {

File: jme3-vr/src/main/java/com/jme3/system/jopenvr/VREvent_DualAnalog_t.java
Patch:
@@ -25,7 +25,7 @@ protected List<String> getFieldOrder() {
 		return Arrays.asList("x", "y", "transformedX", "transformedY", "which");
 	}
 	/**
-	 * @param which @see EDualAnalogWhich<br>
+	 * @param which @see JOpenVRLibrary.EDualAnalogWhich <br>
 	 * C type : EDualAnalogWhich
 	 */
 	public VREvent_DualAnalog_t(float x, float y, float transformedX, float transformedY, int which) {

File: jme3-vr/src/main/java/com/jme3/system/jopenvr/VREvent_Property_t.java
Patch:
@@ -24,7 +24,7 @@ protected List<String> getFieldOrder() {
 	}
 	/**
 	 * @param container C type : PropertyContainerHandle_t<br>
-	 * @param prop @see ETrackedDeviceProperty<br>
+	 * @param prop @see JOpenVRLibrary.ETrackedDeviceProperty <br>
 	 * C type : ETrackedDeviceProperty
 	 */
 	public VREvent_Property_t(long container, int prop) {

File: jme3-vr/src/main/java/com/jme3/system/jopenvr/VROverlayIntersectionMaskPrimitive_t.java
Patch:
@@ -23,7 +23,7 @@ protected List<String> getFieldOrder() {
 		return Arrays.asList("m_nPrimitiveType", "m_Primitive");
 	}
 	/**
-	 * @param m_nPrimitiveType @see EVROverlayIntersectionMaskPrimitiveType<br>
+	 * @param m_nPrimitiveType @see JOpenVRLibrary.EVROverlayIntersectionMaskPrimitiveType <br>
 	 * C type : EVROverlayIntersectionMaskPrimitiveType<br>
 	 * @param m_Primitive C type : VROverlayIntersectionMaskPrimitive_Data_t
 	 */

File: jme3-vr/src/main/java/com/jme3/system/jopenvr/VROverlayIntersectionParams_t.java
Patch:
@@ -27,7 +27,7 @@ protected List<String> getFieldOrder() {
 	/**
 	 * @param vSource C type : HmdVector3_t<br>
 	 * @param vDirection C type : HmdVector3_t<br>
-	 * @param eOrigin @see ETrackingUniverseOrigin<br>
+	 * @param eOrigin @see JOpenVRLibrary.ETrackingUniverseOrigin <br>
 	 * C type : ETrackingUniverseOrigin
 	 */
 	public VROverlayIntersectionParams_t(HmdVector3_t vSource, HmdVector3_t vDirection, int eOrigin) {

File: jme3-vr/src/main/java/com/jme3/system/osvr/osvrrendermanager/OSVR_ProjectionMatrix.java
Patch:
@@ -13,7 +13,7 @@ public class OSVR_ProjectionMatrix extends Structure {
 	public double right;
 	public double top;
 	public double bottom;
-	/** < Cannot name "near" because Visual Studio keyword */
+	/** Cannot name "near" because Visual Studio keyword */
 	public double nearClip;
 	public double farClip;
 	public OSVR_ProjectionMatrix() {
@@ -22,7 +22,7 @@ public OSVR_ProjectionMatrix() {
 	protected List<String> getFieldOrder() {
 		return Arrays.asList("left", "right", "top", "bottom", "nearClip", "farClip");
 	}
-	/** @param nearClip < Cannot name "near" because Visual Studio keyword */
+	/** @param nearClip Cannot name "near" because Visual Studio keyword */
 	public OSVR_ProjectionMatrix(double left, double right, double top, double bottom, double nearClip, double farClip) {
 		super();
 		this.left = left;

File: jme3-vr/src/main/java/com/jme3/system/osvr/osvrrendermanageropengl/OSVR_OpenResultsOpenGL.java
Patch:
@@ -24,7 +24,7 @@ protected List<String> getFieldOrder() {
 		return Arrays.asList("status", "library", "buffers");
 	}
 	/**
-	 * @param status @see OSVR_OpenStatus<br>
+	 * @param status @see OsvrRenderManagerOpenGLLibrary.OSVR_OpenStatus <br>
 	 * C type : OSVR_OpenStatus<br>
 	 * @param library C type : OSVR_GraphicsLibraryOpenGL<br>
 	 * @param buffers C type : OSVR_RenderBufferOpenGL

File: jme3-vr/src/main/java/com/jme3/system/osvr/osvrrendermanageropengl/OSVR_ProjectionMatrix.java
Patch:
@@ -13,7 +13,7 @@ public class OSVR_ProjectionMatrix extends Structure {
 	public double right;
 	public double top;
 	public double bottom;
-	/** < Cannot name "near" because Visual Studio keyword */
+	/** Cannot name "near" because Visual Studio keyword */
 	public double nearClip;
 	public double farClip;
 	public OSVR_ProjectionMatrix() {
@@ -22,7 +22,7 @@ public OSVR_ProjectionMatrix() {
 	protected List<String> getFieldOrder() {
 		return Arrays.asList("left", "right", "top", "bottom", "nearClip", "farClip");
 	}
-	/** @param nearClip < Cannot name "near" because Visual Studio keyword */
+	/** @param nearClip Cannot name "near" because Visual Studio keyword */
 	public OSVR_ProjectionMatrix(double left, double right, double top, double bottom, double nearClip, double farClip) {
 		super();
 		this.left = left;

File: jme3-vr/src/main/java/test/TestInitHmd.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * Testing OpenVR environment.
- * @author Rickard <neph1 @ github>
+ * @author Rickard (neph1 @ github)
  */
 public class TestInitHmd {
     

File: jme3-core/src/main/java/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -783,7 +783,7 @@ public float getParticlesPerSec() {
      */
     public void setParticlesPerSec(float particlesPerSec) {
         this.particlesPerSec = particlesPerSec;
-        timeDifference = 0;
+        timeDifference = Math.min(timeDifference,1f / particlesPerSec); //prevent large accumulated timeDifference from causing a huge number of particles to be emitted
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/bounding/BoundingBox.java
Patch:
@@ -79,9 +79,9 @@ public BoundingBox() {
      * Instantiate a <code>BoundingBox</code> with given center and extents.
      *
      * @param c the coordinates of the center of the box (not null, not altered)
-     * @param x the X-extent of the box (>=0, may be +Infinity)
-     * @param y the Y-extent of the box (>=0, may be +Infinity)
-     * @param z the Z-extent of the box (>=0, may be +Infinity)
+     * @param x the X-extent of the box (0 or greater, may be +Infinity)
+     * @param y the Y-extent of the box (0 or greater, may be +Infinity)
+     * @param z the Z-extent of the box (0 or greater, may be +Infinity)
      */
     public BoundingBox(Vector3f c, float x, float y, float z) {
         this.center.set(c);

File: jme3-core/src/main/java/com/jme3/cinematic/events/CameraEvent.java
Patch:
@@ -41,7 +41,7 @@
 
 /**
  *
- * @author Rickard <neph1 @ github>
+ * @author Rickard (neph1 @ github)
  */
 public class CameraEvent extends AbstractCinematicEvent{
 

File: jme3-core/src/main/java/com/jme3/light/LightProbe.java
Patch:
@@ -120,7 +120,7 @@ public void setPrefilteredMap(TextureCubeMap prefileteredEnvMap) {
      // 1 | ay by cy | py | probe position
      // 2 | az bz cz | pz | )
      // --|----------|
-     // 3 | sx sy sz   sp | -> 1/probe radius + nbMipMaps
+     // 3 | sx sy sz   sp |    1/probe radius + nbMipMaps
      //    --scale--
      * <p>
      * (ax, ay, az) is the pitch rotation axis

File: jme3-core/src/main/java/com/jme3/material/Technique.java
Patch:
@@ -169,7 +169,7 @@ void render(RenderManager renderManager, Shader shader, Geometry geometry, Light
     /**
      * Get the {@link DefineList} for dynamic defines.
      * 
-     * Dynamic defines are used to implement material parameter -> define
+     * Dynamic defines are used to implement material parameter -- define
      * bindings as well as {@link TechniqueDefLogic} specific functionality.
      * 
      * @return all dynamic defines.

File: jme3-core/src/main/java/com/jme3/math/FastMath.java
Patch:
@@ -91,7 +91,7 @@ public static boolean isPowerOfTwo(int number) {
      * Get the next power of two of the given number.
      * 
      * E.g. for an input 100, this returns 128.
-     * Returns 1 for all numbers <= 1.
+     * Returns 1 for all numbers less than or equal to 1.
      * 
      * @param number The number to obtain the POT for.
      * @return The next power of two.
@@ -942,7 +942,8 @@ public static boolean approximateEquals(float a, float b) {
      * Converts a single precision (32 bit) floating point value
      * into half precision (16 bit).
      *
-     * <p>Source: <a href="ftp://www.fox-toolkit.org/pub/fasthalffloatconversion.pdf</a>
+     * <p>Source: <a href="ftp://www.fox-toolkit.org/pub/fasthalffloatconversion.pdf">
+     * ftp://www.fox-toolkit.org/pub/fasthalffloatconversion.pdf</a>
      *
      * @param half The half floating point value as a short.
      * @return floating point value of the half.

File: jme3-core/src/main/java/com/jme3/math/Ray.java
Patch:
@@ -43,8 +43,9 @@
 /**
  * <code>Ray</code> defines a line segment which has an origin and a direction.
  * That is, a point and an infinite ray is cast from this point. The ray is
- * defined by the following equation: R(t) = origin + t*direction for t >= 0.
- * 
+ * defined by the following equation: {@literal
+ * R(t) = origin + t*direction for t >= 0.
+ * }
  * @author Mark Powell
  * @author Joshua Slack
  */

File: jme3-core/src/main/java/com/jme3/renderer/Caps.java
Patch:
@@ -238,7 +238,7 @@ public enum Caps {
     TextureBuffer,
 
     /**
-     * Supports floating point & half textures (Format.RGB16F)
+     * Supports floating point and half textures (Format.RGB16F)
      */
     FloatTexture,
     

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL.java
Patch:
@@ -991,7 +991,7 @@ public void glCompressedTexSubImage2D(int target, int level, int xoffset, int yo
      * <p>
      * Defines the scissor rectangle for all viewports. The scissor test is enabled or disabled for all viewports using {@link #glEnable Enable} or {@link #glDisable Disable}
      * with the symbolic constant {@link #GL_SCISSOR_TEST SCISSOR_TEST}. When disabled, it is as if the scissor test always passes. When enabled, if
-     * <code>left <= x<sub>w</sub> < left + width</code> and <code>bottom <= y<sub>w</sub> < bottom + height</code> for the scissor rectangle, then the scissor
+     * left &lt;= x<sub>w</sub> &lt; left + width and bottom &lt;= y<sub>w</sub> &lt; bottom + height for the scissor rectangle, then the scissor
      * test passes. Otherwise, the test fails and the fragment is discarded.
      *
      * @param x      the left scissor rectangle coordinate.

File: jme3-core/src/main/java/com/jme3/system/SystemListener.java
Patch:
@@ -32,7 +32,7 @@
 package com.jme3.system;
 
 /**
- * The <code>ContextListener> provides a means for an application
+ * The {@code SystemListener} provides a means for an application
  * to receive events relating to a context.
  */
 public interface SystemListener {

File: jme3-core/src/main/java/com/jme3/util/ListSort.java
Patch:
@@ -52,12 +52,13 @@
  * for optimal performance, but can be called several times if the length of the
  * list changes
  *
+ * {@code
  * Disclaimer : I was intrigued by the use of val >>> 1 in java 7 Timsort class
  * instead of val / 2 (integer division). Micro benching revealed that val >>> 1
  * is twice faster than val / 2 in java 6 and has similar perf in java 7. The
  * following code uses val >>> 1 when ever a value needs to be divided by 2 and
  * rounded to its floor
- *
+ * }
  *
  * @author Nehon
  */
@@ -66,7 +67,7 @@ public class ListSort<T> {
     /**
      * Threshold for binary sort vs merge. Original algorithm use 64, java7
      * TimSort uses 32 and I used 128, see this post for explanations :
-     * http://hub.jmonkeyengine.org/groups/development-discussion-jme3/forum/topic/i-got-that-sorted-out-huhuhu/
+     * https://hub.jmonkeyengine.org/t/i-got-that-sorted-out-huhuhu/24478
      */
     private static final int MIN_SIZE = 128;
     private T[] array;

File: jme3-core/src/main/java/com/jme3/util/SortUtil.java
Patch:
@@ -47,7 +47,7 @@ public class SortUtil {
     private static final int INSERTION_SORT_THRESHOLD = 7;
     
     
-    /**
+    /*
  procedure optimizedGnomeSort(a[])
     pos := 1
     last := 0

File: jme3-core/src/plugins/java/com/jme3/export/binary/ByteUtils.java
Patch:
@@ -452,7 +452,7 @@ public static boolean convertBooleanFromBytes(byte[] byteArray, int offset) {
      * of bytes have been read.
      * 
      * @param store
-     *            the byte array to store in. Should have a length > bytes
+     *            the byte array to store in. Array length must be greater than bytes param.
      * @param bytes
      *            the number of bytes to read.
      * @param is

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ShaderNodeLoaderDelegate.java
Patch:
@@ -1058,11 +1058,11 @@ public void storeVaryings(ShaderNode node, ShaderNodeVariable variable) {
     }
 
     /**
-     * merges 2 condition with the given operator
+     * Merges 2 conditions with the given operator
      *
      * @param condition1 the first condition
      * @param condition2 the second condition
-     * @param operator the operator ("&&" or "||&)
+     * @param operator the operator {@literal ("&&" or "||&)}
      * @return the merged condition
      */
     public String mergeConditions(String condition1, String condition2, String operator) {

File: jme3-networking/src/main/java/com/jme3/network/serializing/Serializer.java
Patch:
@@ -153,7 +153,7 @@ public static void initialize() {
     
     /**
      *  When set to true, classes that do not have intrinsic IDs in their
-     *  @Serializable will not be auto-registered during write.  Defaults
+     *  {@code @Serializable } will not be auto-registered during write.  Defaults
      *  to true since this is almost never desired behavior with the way
      *  this code works.  Set to false to get the old permissive behavior.
      */

File: jme3-android/src/main/java/com/jme3/app/AndroidHarness.java
Patch:
@@ -88,7 +88,7 @@ public class AndroidHarness extends Activity implements TouchListener, DialogInt
     protected int eglStencilBits = 0;
 
     /**
-     * Set the desired frame rate.  If frameRate > 0, the application
+     * Set the desired frame rate.  If frameRate higher than 0, the application
      * will be capped at the desired frame rate.
      * (default = -1, no frame rate cap)
      */

File: jme3-android/src/main/java/com/jme3/app/AndroidHarnessFragment.java
Patch:
@@ -116,7 +116,7 @@ public class AndroidHarnessFragment extends Fragment implements
     protected int eglStencilBits = 0;
 
     /**
-     * Set the desired frame rate.  If frameRate > 0, the application
+     * Set the desired frame rate.  If frameRate higher than 0, the application
      * will be capped at the desired frame rate.
      * (default = -1, no frame rate cap)
      */
@@ -129,7 +129,7 @@ public class AndroidHarnessFragment extends Fragment implements
      * will have the resolution set to a maximum of maxResolutionDimension.
      * The other direction will be set to a value that maintains the aspect
      * ratio of the surfaceview. </br>
-     * Any value < 0 (default = -1) will result in the surfaceview having the
+     * Any value less than 0 (default = -1) will result in the surfaceview having the
      * same resolution as the view layout (ie. no max resolution).
      */
     protected int maxResolutionDimension = -1;

File: jme3-android/src/main/java/com/jme3/app/DefaultAndroidProfiler.java
Patch:
@@ -63,7 +63,7 @@
  *
  *  <p>This profiler uses the Android Trace class which is only supported
  *  on Android SDK rev 18 and higher (ver 4.3 and higher).  If the
- *  device is running a version < rev 18, the logging will
+ *  device is running a version less than rev 18, the logging will
  *  be skipped.</p>
  *
  *  <p>In the MainActivity class, add the following:</p>

File: jme3-android/src/main/java/com/jme3/input/android/AndroidJoyInput.java
Patch:
@@ -71,10 +71,11 @@
  * This is done to allow for battery conservation when sensor data or gamepads
  * are not required by the application.
  *
+ * {@code
  * To use the joystick rumble feature, the following line needs to be
  * added to the Android Manifest File
  *     <uses-permission android:name="android.permission.VIBRATE"/>
- *
+ * }
  * @author iwgeric
  */
 public class AndroidJoyInput implements JoyInput {

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinition.java
Patch:
@@ -151,7 +151,7 @@ public Set<Long> getAlteredOmas() {
      * @param targetTransform
      *            the target transform used by some of the constraints
      * @param influence
-     *            the influence of the constraint (from range <0; 1>)
+     *            the influence of the constraint from range [0; 1]
      */
     public abstract void bake(Space ownerSpace, Space targetSpace, Transform targetTransform, float influence);
 

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/TextureHelper.java
Patch:
@@ -313,7 +313,7 @@ public AffineTransform createAffineTransform(Vector2f[] source, Vector2f[] dest,
      * This method returns the proper pixel position on the image.
      * 
      * @param pos
-     *            the relative position (value of range <0, 1> (both inclusive))
+     *            the relative position (value of range [0, 1] (both inclusive))
      * @param size
      *            the size of the line the pixel lies on (width, height or
      *            depth)

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/TexturePixel.java
Patch:
@@ -118,7 +118,7 @@ public void fromIntensity(short intensity) {
 
     /**
      * This method sets the alpha value (converts it to float number from range
-     * <0, 1>).
+     * [0, 1]).
      * 
      * @param alpha
      *            the alpha value
@@ -129,7 +129,7 @@ public void setAlpha(byte alpha) {
 
     /**
      * This method sets the alpha value (converts it to float number from range
-     * <0, 1>).
+     * [0, 1]).
      * 
      * @param alpha
      *            the alpha value

File: jme3-effects/src/main/java/com/jme3/post/filters/CrossHatchFilter.java
Patch:
@@ -157,7 +157,7 @@ public void setColorInfluencePaper(float colorInfluencePaper) {
     }
 
     /**
-     * Sets line/paper color ratio for areas with values < luminance5,
+     * Sets line/paper color ratio for areas with values less than luminance5,
      * really dark areas get no lines but a filled blob instead
      * @param fillValue 
      */

File: jme3-effects/src/main/java/com/jme3/water/SimpleWaterProcessor.java
Patch:
@@ -81,7 +81,7 @@
  *      //attaching the water to the root node
  *      rootNode.attachChild(water);
  * </code>
- * @author Normen Hansen & Rémy Bouquet
+ * @author Normen Hansen and Rémy Bouquet
  */
 public class SimpleWaterProcessor implements SceneProcessor {
 

File: jme3-networking/src/main/java/com/jme3/network/base/MessageProtocol.java
Patch:
@@ -99,7 +99,7 @@ public Message getMessage()
      *  Adds the specified buffer, extracting the contained messages 
      *  and making them available to getMessage().  The left over
      *  data is buffered to be combined with future data.
-     &
+     *
      *  @return The total number of queued messages after this call.       
      */
     public int addBuffer( ByteBuffer buffer )

File: jme3-terrain/src/main/java/com/jme3/terrain/noise/fractal/FractalSum.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * FractalSum is the simplest form of fractal functions summing up a few octaves
- * of the noise value with an ever decreasing (0 < roughness < 1) amplitude
+ * of the noise value with an ever decreasing roughness (0 to 1) amplitude
  * 
  * lacunarity = 2.0f is the classical octave distance
  * 

File: jme3-core/src/main/java/com/jme3/audio/AudioNode.java
Patch:
@@ -722,7 +722,7 @@ public void updateLogicalState(float tpf) {
     @Override
     public void updateGeometricState() {
         super.updateGeometricState();
-        if (channel < 0 || this.getParent() == null) return;
+        if (channel < 0) return;
         Vector3f currentWorldTranslation = worldTransform.getTranslation();
         if (!previousWorldTranslation.equals(currentWorldTranslation)) {
             getRenderer().updateSourceParam(this, AudioParam.Position);

File: jme3-core/src/main/java/com/jme3/audio/AudioNode.java
Patch:
@@ -722,7 +722,7 @@ public void updateLogicalState(float tpf) {
     @Override
     public void updateGeometricState() {
         super.updateGeometricState();
-        if (channel < 0 || this.getParent() == null) return;
+        if (channel < 0) return;
         Vector3f currentWorldTranslation = worldTransform.getTranslation();
         if (!previousWorldTranslation.equals(currentWorldTranslation)) {
             getRenderer().updateSourceParam(this, AudioParam.Position);

File: jme3-desktop/src/main/java/com/jme3/system/AWTContext.java
Patch:
@@ -126,7 +126,7 @@ public void setWidth(final int width) {
    */
   protected AppSettings createSettings() {
       final AppSettings settings = new AppSettings(true);
-      settings.setRenderer(AppSettings.LWJGL_OPENGL3);
+      settings.setRenderer(AppSettings.LWJGL_OPENGL32);
       return settings;
   }
 
@@ -145,7 +145,7 @@ public Type getType() {
   @Override
   public void setSettings(AppSettings settings) {
       this.settings.copyFrom(settings);
-      this.settings.setRenderer(AppSettings.LWJGL_OPENGL3);
+      this.settings.setRenderer(AppSettings.LWJGL_OPENGL32);
       this.backgroundContext.setSettings(settings);
   }
 

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -105,9 +105,10 @@ public abstract class LwjglContext implements JmeContext {
 
     private static final Set<String> SUPPORTED_RENDERS = new HashSet<>(Arrays.asList(
             AppSettings.LWJGL_OPENGL2,
-            AppSettings.LWJGL_OPENGL3,
+            AppSettings.LWJGL_OPENGL30,
+            AppSettings.LWJGL_OPENGL32,
             AppSettings.LWJGL_OPENGL33,
-            AppSettings.LWJGL_OPENGL4,
+            AppSettings.LWJGL_OPENGL40,
             AppSettings.LWJGL_OPENGL41,
             AppSettings.LWJGL_OPENGL42,
             AppSettings.LWJGL_OPENGL43,

File: jme3-vr/src/main/java/com/jme3/app/VRApplication.java
Patch:
@@ -763,8 +763,8 @@ public void start() {
         
         // set opengl mode
         if( tryOpenGL3 ) {
-        	logger.config("Using LWJGL OpenGL 3 renderer.");
-            settings.setRenderer(AppSettings.LWJGL_OPENGL3);
+        	logger.config("Using LWJGL OpenGL 3.2 renderer.");
+            settings.setRenderer(AppSettings.LWJGL_OPENGL32);
         } else {
         	logger.config("Using LWJGL OpenGL 2 renderer.");
             settings.setRenderer(AppSettings.LWJGL_OPENGL2);

File: jme3-vr/src/main/java/com/jme3/system/lwjgl/LwjglContextVR.java
Patch:
@@ -147,14 +147,14 @@ protected int getNumSamplesToUse() {
     }
 
     protected void initContextFirstTime() {
-        final GLCapabilities capabilities = createCapabilities(settings.getRenderer().equals(AppSettings.LWJGL_OPENGL3));
+        final GLCapabilities capabilities = createCapabilities(settings.getRenderer().equals(AppSettings.LWJGL_OPENGL32));
 
         if (!capabilities.OpenGL20) {
             throw new RendererException("OpenGL 2.0 or higher is required for jMonkeyEngine");
         }
 
         if (settings.getRenderer().equals(AppSettings.LWJGL_OPENGL2)
-                || settings.getRenderer().equals(AppSettings.LWJGL_OPENGL3)) {
+                || settings.getRenderer().equals(AppSettings.LWJGL_OPENGL32)) {
             GL gl = new LwjglGL();
             GLExt glext = new LwjglGLExt();
             GLFbo glfbo;

File: jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -788,7 +788,7 @@ public float addSingleResult(LocalRayResult lrr, boolean bln) {
 
     /**
      * Performs a sweep collision test and returns the results as a list of PhysicsSweepTestResults<br/>
-     * You have to use different Transforms for start and end (at least distance > 0.4f).
+     * You have to use different Transforms for start and end (at least distance greater than 0.4f).
      * SweepTest will not see a collision if it starts INSIDE an object and is moving AWAY from its center.
      */
     public List<PhysicsSweepTestResult> sweepTest(CollisionShape shape, Transform start, Transform end) {
@@ -804,7 +804,7 @@ public List<PhysicsSweepTestResult> sweepTest(CollisionShape shape, Transform st
 
     /**
      * Performs a sweep collision test and returns the results as a list of PhysicsSweepTestResults<br/>
-     * You have to use different Transforms for start and end (at least distance > 0.4f).
+     * You have to use different Transforms for start and end (at least distance greater than 0.4f).
      * SweepTest will not see a collision if it starts INSIDE an object and is moving AWAY from its center.
      */
     public List<PhysicsSweepTestResult> sweepTest(CollisionShape shape, Transform start, Transform end, List<PhysicsSweepTestResult> results) {
@@ -917,7 +917,7 @@ public void setWorldMax(Vector3f worldMax) {
      * 
      * The default is 10. Use 4 for low quality, 20 for high quality.
      * 
-     * @param numIterations The number of iterations used by the contact & constraint solver.
+     * @param numIterations The number of iterations used by the contact and constraint solver.
      */
     public void setSolverNumIterations(int numIterations) {
         dynamicsWorld.getSolverInfo().numIterations = numIterations;

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsVehicle.java
Patch:
@@ -301,7 +301,7 @@ public float getSuspensionCompression() {
      * After adding the wheel, use direct wheel access.<br>
      * The damping coefficient for when the suspension is compressed.
      * Set to k * 2.0 * FastMath.sqrt(m_suspensionStiffness) so k is proportional to critical damping.<br>
-     * k = 0.0 undamped & bouncy, k = 1.0 critical damping<br>
+     * k = 0.0 undamped/bouncy, k = 1.0 critical damping<br>
      * 0.1 to 0.3 are good values
      * @param suspensionCompression the suspensionCompression to set
      */
@@ -312,7 +312,7 @@ public void setSuspensionCompression(float suspensionCompression) {
     /**
      * The damping coefficient for when the suspension is compressed.
      * Set to k * 2.0 * FastMath.sqrt(m_suspensionStiffness) so k is proportional to critical damping.<br>
-     * k = 0.0 undamped & bouncy, k = 1.0 critical damping<br>
+     * k = 0.0 undamped/bouncy, k = 1.0 critical damping<br>
      * 0.1 to 0.3 are good values
      * @param wheel
      * @param suspensionCompression

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/VehicleWheel.java
Patch:
@@ -178,7 +178,7 @@ public float getWheelsDampingCompression() {
     /**
      * the damping coefficient for when the suspension is compressed.
      * Set to k * 2.0 * FastMath.sqrt(m_suspensionStiffness) so k is proportional to critical damping.<br>
-     * k = 0.0 undamped & bouncy, k = 1.0 critical damping<br>
+     * k = 0.0 undamped/bouncy, k = 1.0 critical damping<br>
      * 0.1 to 0.3 are good values
      * @param wheelsDampingCompression
      */

File: jme3-examples/src/main/java/jme3test/model/anim/TestModelExportingCloning.java
Patch:
@@ -61,18 +61,21 @@ public void simpleInitApp() {
         Spatial originalModel = assetManager.loadModel("Models/Oto/Oto.mesh.xml");
         composer = originalModel.getControl(AnimComposer.class);
         composer.setCurrentAction("Walk");
+        composer.setGlobalSpeed(1.5f);
         rootNode.attachChild(originalModel);
         
         Spatial clonedModel = originalModel.clone();
         clonedModel.move(10, 0, 0);
         composer = clonedModel.getControl(AnimComposer.class);
         composer.setCurrentAction("push");
+        System.out.println("clonedModel: globalSpeed=" + composer.getGlobalSpeed());
         rootNode.attachChild(clonedModel);
         
         Spatial exportedModel = BinaryExporter.saveAndLoad(assetManager, originalModel);
         exportedModel.move(20, 0, 0);
         composer = exportedModel.getControl(AnimComposer.class);
         composer.setCurrentAction("pull");
+        System.out.println("exportedModel: globalSpeed=" + composer.getGlobalSpeed());
         rootNode.attachChild(exportedModel);
     }
 }

File: jme3-examples/src/main/java/jme3test/niftygui/TestIssue99.java
Patch:
@@ -41,8 +41,8 @@
  * Test case for JME issue #99: blendMode="multiply" in Nifty renders
  * incorrectly.
  * <p>
- * If successful, two text labels will be visible. If unsuccessful, only the top
- * one will be visible.
+ * If successful, two text labels will be legible. If unsuccessful, only the top
+ * one will be legible.
  *
  * @author Stephen Gold sgold@sonic.net
  */

File: jme3-core/src/main/java/com/jme3/shader/Uniform.java
Patch:
@@ -373,7 +373,7 @@ public void setValue(VarType type, Object value){
                 //feed this.value with the collected values.
                 if (this.value instanceof ColorRGBA) {
                     ((ColorRGBA) this.value).set(vec4.x, vec4.y, vec4.z, vec4.w);
-                } else if (value instanceof Vector4f) {
+                } else if (this.value instanceof Vector4f) {
                     ((Vector4f) this.value).set(vec4);
                 } else {
                     ((Quaternion) this.value).set(vec4.x, vec4.y, vec4.z, vec4.w);

File: jme3-core/src/main/java/com/jme3/shader/Uniform.java
Patch:
@@ -373,7 +373,7 @@ public void setValue(VarType type, Object value){
                 //feed this.value with the collected values.
                 if (this.value instanceof ColorRGBA) {
                     ((ColorRGBA) this.value).set(vec4.x, vec4.y, vec4.z, vec4.w);
-                } else if (value instanceof Vector4f) {
+                } else if (this.value instanceof Vector4f) {
                     ((Vector4f) this.value).set(vec4);
                 } else {
                     ((Quaternion) this.value).set(vec4.x, vec4.y, vec4.z, vec4.w);

File: jme3-examples/src/main/java/jme3test/renderer/TestDepthStencil.java
Patch:
@@ -114,10 +114,10 @@ public void onAction(String name, boolean keyPressed, float tpf) {
                 if (name.equals("toggle") && keyPressed) {
                     if (enableStencil) {
                         enableStencil = false;
-                        System.out.println("Stencil Enabled (model should be hidden)");
+                        System.out.println("Stencil Disabled (model should be visible)");
                     } else {
                         enableStencil = true;
-                        System.out.println("Stencil Disabled (model should be visible)");
+                        System.out.println("Stencil Enabled (model should be hidden)");
                     }
                 }
             }

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -295,8 +295,7 @@ private Texture parseTextureType(final VarType type, final String value) {
             for (final TextureOptionValue textureOptionValue : textureOptionValues) {
                 textureOptionValue.applyToTexture(texture);
             }
-        }
-
+        }        
         return texture;
     }
 
@@ -402,7 +401,7 @@ private void readParam(String statement) throws IOException{
             defaultValObj = readValue(type, defaultVal);
         }
         if(type.isTextureType()){
-            materialDef.addMaterialParamTexture(type, name, colorSpace);
+            materialDef.addMaterialParamTexture(type, name, colorSpace,(Texture)defaultValObj);
         }else{
             materialDef.addMaterialParam(type, name, defaultValObj);
         }

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -1018,7 +1018,7 @@ public List<PhysicsRayTestResult> rayTest(Vector3f from, Vector3f to) {
      * unaffected)
      * @return a new list of results (not null)
      */
-    public List rayTestRaw(Vector3f from, Vector3f to) {
+    public List<PhysicsRayTestResult> rayTestRaw(Vector3f from, Vector3f to) {
         List<PhysicsRayTestResult> results = new ArrayList<PhysicsRayTestResult>();
         rayTestRaw(from, to, results);
         

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2019 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -1001,7 +1001,7 @@ public void removeCollisionGroupListener(int collisionGroup) {
      * unaffected)
      * @return a new list of results (not null)
      */
-    public List rayTest(Vector3f from, Vector3f to) {
+    public List<PhysicsRayTestResult> rayTest(Vector3f from, Vector3f to) {
         List<PhysicsRayTestResult> results = new ArrayList<PhysicsRayTestResult>();
         rayTest(from, to, results);
         

File: jme3-examples/src/main/java/jme3test/bullet/TestPhysicsCharacter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine All rights reserved. <p/>
+ * Copyright (c) 2009-2019 jMonkeyEngine All rights reserved. <p/>
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  * 
@@ -139,10 +139,10 @@ public void simpleUpdate(float tpf) {
             walkDirection.addLocal(camLeft.negate());
         }
         if (leftRotate) {
-            viewDirection.addLocal(camLeft.mult(0.02f));
+            viewDirection.addLocal(camLeft.mult(tpf));
         } else
         if (rightRotate) {
-            viewDirection.addLocal(camLeft.mult(0.02f).negate());
+            viewDirection.addLocal(camLeft.mult(tpf).negate());
         }
         if (forward) {
             walkDirection.addLocal(camDir);

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GlbLoader.java
Patch:
@@ -18,6 +18,7 @@ public class GlbLoader extends GltfLoader {
 
     @Override
     public Object load(AssetInfo assetInfo) throws IOException {
+        data.clear();
         LittleEndien stream = new LittleEndien(new DataInputStream(assetInfo.openStream()));
         int magic = stream.readInt();
         int version = stream.readInt();

File: jme3-examples/src/main/java/jme3test/model/TestGltfLoading.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2019 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -124,7 +124,7 @@ public void simpleInitApp() {
         //loadModel("Models/gltf/morphCube/AnimatedMorphCube.gltf", new Vector3f(0, 0, 0), 1f);
      //   loadModel("Models/gltf/morph/SimpleMorph.gltf", new Vector3f(0, 0, 0), 0.1f);
         //loadModel("Models/gltf/nier/scene.gltf", new Vector3f(0, -1.5f, 0), 0.01f);
-        loadModel("Models/gltf/izzy/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
+        //loadModel("Models/gltf/izzy/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
         //loadModel("Models/gltf/darth/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
         //loadModel("Models/gltf/mech/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
         //loadModel("Models/gltf/elephant/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
@@ -137,7 +137,7 @@ public void simpleInitApp() {
         //loadModel("Models/gltf/manta/scene.gltf", Vector3f.ZERO, 0.2f);
         //loadModel("Models/gltf/bone/scene.gltf", Vector3f.ZERO, 0.1f);
 //        loadModel("Models/gltf/box/box.gltf", Vector3f.ZERO, 1);
-//        loadModel("Models/gltf/duck/Duck.gltf", new Vector3f(0, -1, 0), 1);
+        loadModel("Models/gltf/duck/Duck.gltf", new Vector3f(0, -1, 0), 1);
 //        loadModel("Models/gltf/damagedHelmet/damagedHelmet.gltf", Vector3f.ZERO, 1);
 //        loadModel("Models/gltf/hornet/scene.gltf", new Vector3f(0, -0.5f, 0), 0.4f);
 ////        loadModel("Models/gltf/adamHead/adamHead.gltf", Vector3f.ZERO, 0.6f);

File: jme3-core/src/main/java/com/jme3/scene/control/UpdateControl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2018 jMonkeyEngine
+ * Copyright (c) 2009-2019 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -54,7 +54,7 @@
  */
 public class UpdateControl extends AbstractControl {
 
-    private final ConcurrentLinkedQueue<AppTask<?>> taskQueue = new ConcurrentLinkedQueue<AppTask<?>>();
+    private ConcurrentLinkedQueue<AppTask<?>> taskQueue = new ConcurrentLinkedQueue<>();
 
     /**
      * Enqueues a task/callable object to execute in the jME3
@@ -87,6 +87,7 @@ protected void controlRender(RenderManager rm, ViewPort vp) {
     @Override
     public Object jmeClone() {
         UpdateControl clone = (UpdateControl)super.jmeClone();
+        clone.taskQueue = new ConcurrentLinkedQueue<>();
         
         // This is kind of questionable since the tasks aren't cloned and have
         // no reference to the new spatial or anything.  They'll get run again

File: jme3-examples/src/main/java/jme3test/asset/TestManyLocators.java
Patch:
@@ -43,7 +43,7 @@ public class TestManyLocators {
     public static void main(String[] args){
         AssetManager am = JmeSystem.newAssetManager();
 
-        am.registerLocator("http://www.jmonkeyengine.com/wp-content/uploads/2010/09/",
+        am.registerLocator("http://wiki.jmonkeyengine.org/jme3/beginner",
                            UrlLocator.class);
 
         am.registerLocator("town.zip", ZipLocator.class);
@@ -65,15 +65,15 @@ public static void main(String[] args){
         AssetInfo c = am.locateAsset(new ModelKey("glasstile2.png"));
 
         // Try loading directly from HTTP
-        AssetInfo d = am.locateAsset(new TextureKey("planet-2.jpg"));
+        AssetInfo d = am.locateAsset(new TextureKey("beginner-physics.png"));
 
         if (a == null)
             System.out.println("Failed to load from classpath");
         else
             System.out.println("Found classpath font: " + a.toString());
 
         if (b == null)
-            System.out.println("Failed to load from town.zip");
+            System.out.println("Failed to load from town.zip file");
         else
             System.out.println("Found zip image: " + b.toString());
 

File: jme3-examples/src/main/java/jme3test/export/TestAssetLinkNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2019 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -33,7 +33,7 @@
 package jme3test.export;
 
 import com.jme3.app.SimpleApplication;
-import com.jme3.asset.AssetKey;
+import com.jme3.asset.MaterialKey;
 import com.jme3.asset.ModelKey;
 import com.jme3.export.binary.BinaryExporter;
 import com.jme3.export.binary.BinaryImporter;
@@ -93,7 +93,7 @@ public void simpleInitApp() {
         rootNode.attachChild(loaderNode);
 
         lightMdl = new Geometry("Light", new Sphere(10, 10, 0.1f));
-        lightMdl.setMaterial( (Material) assetManager.loadAsset(new AssetKey("Common/Materials/RedColor.j3m")));
+        lightMdl.setMaterial( (Material) assetManager.loadAsset(new MaterialKey("Common/Materials/RedColor.j3m")));
         rootNode.attachChild(lightMdl);
 
         // flourescent main light

File: jme3-examples/src/main/java/jme3test/post/TestMultiplesFilters.java
Patch:
@@ -79,7 +79,9 @@ public void simpleInitApp() {
         // create the geometry and attach it
         // load the level from zip or http zip
         if (useHttp) {
-            assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/wildhouse.zip", HttpZipLocator.class);
+            assetManager.registerLocator(
+                    "https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/wildhouse.zip", 
+                    HttpZipLocator.class);
         } else {
             assetManager.registerLocator("wildhouse.zip", ZipLocator.class);
         }

File: jme3-examples/src/main/java/jme3test/audio/TestMusicStreaming.java
Patch:
@@ -46,7 +46,7 @@ public static void main(String[] args){
 
     @Override
     public void simpleInitApp(){
-        assetManager.registerLocator("http://www.vorbis.com/music/", UrlLocator.class);
+        assetManager.registerLocator("https://web.archive.org/web/20170625151521if_/http://www.vorbis.com/music/", UrlLocator.class);
         AudioNode audioSource = new AudioNode(assetManager, "Lumme-Badloop.ogg",
                 AudioData.DataType.Stream);
         audioSource.setPositional(false);

File: jme3-examples/src/main/java/jme3test/games/CubeField.java
Patch:
@@ -281,7 +281,6 @@ else if(difficulty>lowCap){
             	//better way to check collision
                 Geometry playerModel = (Geometry) player.getChild(0);
                 Geometry cubeModel = cubeField.get(i);
-                cubeModel.updateGeometricState();
 
                 BoundingVolume pVol = playerModel.getWorldBound();
                 BoundingVolume vVol = cubeModel.getWorldBound();

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -274,7 +274,7 @@ public void copyFrom(AppSettings other) {
      */
     public void mergeFrom(AppSettings other) {
         for (String key : other.keySet()) {
-            if (get(key) == null) {
+            if( !this.containsKey(key) ) {
                 put(key, other.get(key));
             }
         }

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -274,7 +274,7 @@ public void copyFrom(AppSettings other) {
      */
     public void mergeFrom(AppSettings other) {
         for (String key : other.keySet()) {
-            if (get(key) == null) {
+            if( !this.containsKey(key) ) {
                 put(key, other.get(key));
             }
         }

File: jme3-core/src/main/java/com/jme3/font/Letters.java
Patch:
@@ -214,7 +214,7 @@ private void align() {
             if (cursor.isEndOfLine()) {
                 lineWidth = cursor.getX1()-block.getTextBox().x;
                 if (alignment == Align.Center) {
-                    gapX = Math.round((width-lineWidth)/2);
+                    gapX = (width-lineWidth)/2;
                 } else if (alignment == Align.Right) {
                     gapX = width-lineWidth;
                 } else {

File: jme3-examples/src/main/java/jme3test/conversion/TestMipMapGen.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -39,7 +39,7 @@
 import com.jme3.scene.shape.Quad;
 import com.jme3.texture.Image;
 import com.jme3.texture.Texture;
-import jme3tools.converters.MipMapGenerator;
+import com.jme3.util.MipMapGenerator;
 
 public class TestMipMapGen extends SimpleApplication {
 

File: jme3-examples/src/main/java/jme3test/bullet/TestFancyCar.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -31,7 +31,6 @@
  */
 package jme3test.bullet;
 
-import com.jme3.app.SettingsDialog;
 import com.jme3.app.SimpleApplication;
 import com.jme3.bounding.BoundingBox;
 import com.jme3.bullet.BulletAppState;
@@ -51,7 +50,6 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
-import com.jme3.system.AppSettings;
 
 public class TestFancyCar extends SimpleApplication implements ActionListener {
 

File: jme3-core/src/main/java/com/jme3/font/Letters.java
Patch:
@@ -214,7 +214,7 @@ private void align() {
             if (cursor.isEndOfLine()) {
                 lineWidth = cursor.getX1()-block.getTextBox().x;
                 if (alignment == Align.Center) {
-                    gapX = (width-lineWidth)/2;
+                    gapX = Math.round((width-lineWidth)/2);
                 } else if (alignment == Align.Right) {
                     gapX = width-lineWidth;
                 } else {

File: jme3-examples/src/main/java/jme3test/model/anim/TestBlenderObjectAnim.java
Patch:
@@ -69,13 +69,13 @@ public void simpleInitApp() {
         Spatial scene = (Spatial) assetManager.loadModel(blenderKey);
         rootNode.attachChild(scene);
         
-        Spatial model = this.findNode(rootNode, "TestAnim");
+        Spatial model = this.findNode(rootNode, "Cube");
         model.center();
         
         control = model.getControl(AnimControl.class);
         channel = control.createChannel();
 
-        channel.setAnim("TestAnim");
+        channel.setAnim("Action");
     }
     
     /**

File: jme3-bullet/src/common/java/com/jme3/bullet/control/CharacterControl.java
Patch:
@@ -102,6 +102,7 @@ public Object jmeClone() {
         control.setCcdSweptSphereRadius(getCcdSweptSphereRadius());
         control.setCollideWithGroups(getCollideWithGroups());
         control.setCollisionGroup(getCollisionGroup());
+        control.setContactResponse(isContactResponse());
         control.setFallSpeed(getFallSpeed());
         control.setGravity(getGravity());
         control.setJumpSpeed(getJumpSpeed());

File: jme3-bullet/src/common/java/com/jme3/bullet/control/RigidBodyControl.java
Patch:
@@ -150,6 +150,7 @@ public Object jmeClone() {
         control.setCcdSweptSphereRadius(getCcdSweptSphereRadius());
         control.setCollideWithGroups(getCollideWithGroups());
         control.setCollisionGroup(getCollisionGroup());
+        control.setContactResponse(isContactResponse());
         control.setDamping(getLinearDamping(), getAngularDamping());
         control.setFriction(getFriction());
         control.setGravity(getGravity());

File: jme3-bullet/src/common/java/com/jme3/bullet/control/VehicleControl.java
Patch:
@@ -168,6 +168,7 @@ public Object jmeClone() {
         control.setCcdSweptSphereRadius(getCcdSweptSphereRadius());
         control.setCollideWithGroups(getCollideWithGroups());
         control.setCollisionGroup(getCollisionGroup());
+        control.setContactResponse(isContactResponse());
         control.setDamping(getLinearDamping(), getAngularDamping());
         control.setFriction(getFriction());
         control.setGravity(getGravity());

File: jme3-core/src/plugins/java/com/jme3/font/plugins/BitmapFontLoader.java
Patch:
@@ -43,7 +43,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;
 
 public class BitmapFontLoader implements AssetLoader {
 

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -657,7 +657,7 @@ private void readTechnique(Statement techStat) throws IOException{
                 technique.setLogic(new SinglePassAndImageBasedLightingLogic(technique));
                 break;
             default:
-                throw new UnsupportedOperationException();
+                throw new IOException("Light mode not supported:" + technique.getLightMode());
         }
 
         List<TechniqueDef> techniqueDefs = new ArrayList<>();

File: jme3-core/src/main/java/com/jme3/light/OrientedBoxProbeArea.java
Patch:
@@ -23,7 +23,7 @@ public OrientedBoxProbeArea() {
     }
 
     public OrientedBoxProbeArea(Transform transform) {
-        transform.set(transform);
+        this.transform.set(transform);
         updateMatrix();
     }
 

File: jme3-core/src/main/java/com/jme3/input/FlyByCamera.java
Patch:
@@ -412,7 +412,7 @@ protected void zoomCamera(float value){
      * @param value translation amount
      */
     protected void riseCamera(float value){
-        Vector3f vel = new Vector3f(0, value * moveSpeed, 0);
+        Vector3f vel = initialUpVec.mult(value * moveSpeed);
         Vector3f pos = cam.getLocation().clone();
 
         if (motionAllowed != null)

File: jme3-bullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -75,7 +75,7 @@ public class PhysicsRigidBody extends PhysicsCollisionObject {
     /**
      * joint list
      */
-    protected ArrayList<PhysicsJoint> joints = new ArrayList<PhysicsJoint>();
+    protected ArrayList<PhysicsJoint> joints = new ArrayList<PhysicsJoint>(4);
 
     /**
      * No-argument constructor needed by SavableClassUtil. Do not invoke

File: jme3-bullet/src/main/java/com/jme3/bullet/joints/HingeJoint.java
Patch:
@@ -297,6 +297,7 @@ public void read(JmeImporter im) throws IOException {
     protected void createJoint() {
         objectId = createJoint(nodeA.getObjectId(), nodeB.getObjectId(), pivotA, axisA, pivotB, axisB);
         Logger.getLogger(this.getClass().getName()).log(Level.FINE, "Created Joint {0}", Long.toHexString(objectId));
+        setAngularOnly(objectId, angularOnly);
     }
 
     private native long createJoint(long objectIdA, long objectIdB, Vector3f pivotA, Vector3f axisA, Vector3f pivotB, Vector3f axisB);

File: jme3-jbullet/src/main/java/com/jme3/bullet/joints/HingeJoint.java
Patch:
@@ -172,5 +172,6 @@ protected void createJoint() {
         constraint = new HingeConstraint(nodeA.getObjectId(), nodeB.getObjectId(),
                 Converter.convert(pivotA), Converter.convert(pivotB),
                 Converter.convert(axisA), Converter.convert(axisB));
+        ((HingeConstraint) constraint).setAngularOnly(angularOnly);
     }
 }

File: jme3-core/src/main/java/com/jme3/math/Quaternion.java
Patch:
@@ -756,7 +756,7 @@ public Quaternion slerp(Quaternion q1, Quaternion q2, float t) {
      * @param q2
      *            Final interpolation value
      * @param changeAmnt
-     *            The amount diffrence
+     *            The amount difference
      */
     public void slerp(Quaternion q2, float changeAmnt) {
         if (this.x == q2.x && this.y == q2.y && this.z == q2.z

File: jme3-examples/src/main/java/jme3test/light/TestShadowsPerf.java
Patch:
@@ -69,7 +69,6 @@ public static void main(String[] args) {
 
     @Override
     public void simpleInitApp() {
-        Logger.getLogger("com.jme3").setLevel(Level.SEVERE);
         flyCam.setMoveSpeed(50);
         flyCam.setEnabled(false);
         viewPort.setBackgroundColor(ColorRGBA.DarkGray);

File: jme3-core/src/main/java/com/jme3/util/MaterialDebugAppState.java
Patch:
@@ -200,7 +200,8 @@ public Material reloadMaterial(Material mat) {
         assetManager.clearCache();
 
         //creating a dummy mat with the mat def of the mat to reload
-        Material dummy = new Material(mat.getMaterialDef());
+        // Force the reloading of the asset, otherwise the new shader code will not be applied.
+        Material dummy = new Material(assetManager, mat.getMaterialDef().getAssetName());
 
         for (MatParam matParam : mat.getParams()) {
             dummy.setParam(matParam.getName(), matParam.getVarType(), matParam.getValue());

File: jme3-core/src/main/java/com/jme3/material/logic/MultiPassLightingLogic.java
Patch:
@@ -86,7 +86,7 @@ public void render(RenderManager renderManager, Shader shader, Geometry geometry
 
         for (int i = 0; i < lights.size(); i++) {
             Light l = lights.get(i);
-            if (l instanceof AmbientLight) {
+            if (l.getType() == Light.Type.Ambient  || l.getType() == Light.Type.Probe) {
                 continue;
             }
 
@@ -156,8 +156,6 @@ public void render(RenderManager renderManager, Shader shader, Geometry geometry
 
                     lightDir.setValue(VarType.Vector4, tmpLightDirection);
 
-                    break;
-                case Probe:
                     break;
                 default:
                     throw new UnsupportedOperationException("Unknown type of light: " + l.getType());

File: jme3-core/src/main/java/com/jme3/shadow/DirectionalLightShadowRenderer.java
Patch:
@@ -57,7 +57,7 @@
  * are from the camera, the smaller they are to maximize the resolution used of
  * the shadow map.<br> This results in a better quality shadow than standard
  * shadow mapping.<br> for more informations on this read this <a
- * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a><br>
+ * href="https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html">https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html</a><br>
  * <p/>
  * @author Rémy Bouquet aka Nehon
  */
@@ -83,7 +83,7 @@ public DirectionalLightShadowRenderer() {
 
     /**
      * Create a DirectionalLightShadowRenderer More info on the technique at <a
-     * href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html">http://http.developer.nvidia.com/GPUGems3/gpugems3_ch10.html</a>
+     * href="https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html">https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch10.html</a>
      *
      * @param assetManager the application asset manager
      * @param shadowMapSize the size of the rendered shadowmaps (512,1024,2048,

File: jme3-examples/src/main/java/jme3test/model/TestGltfLoading.java
Patch:
@@ -116,12 +116,12 @@ public void simpleInitApp() {
         //loadModel("Models/gltf/elephant/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
         //loadModel("Models/gltf/buffalo/scene.gltf", new Vector3f(0, -1, 0), 0.1f);
         //loadModel("Models/gltf/war/scene.gltf", new Vector3f(0, -1, 0), 0.1f);
-        //loadModel("Models/gltf/ganjaarl/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
+        loadModel("Models/gltf/ganjaarl/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
         //loadModel("Models/gltf/hero/scene.gltf", new Vector3f(0, -1, 0), 0.1f);
         //loadModel("Models/gltf/mercy/scene.gltf", new Vector3f(0, -1, 0), 0.01f);
         //loadModel("Models/gltf/crab/scene.gltf", Vector3f.ZERO, 1);
         //loadModel("Models/gltf/manta/scene.gltf", Vector3f.ZERO, 0.2f);
-//        loadModel("Models/gltf/bone/scene.gltf", Vector3f.ZERO, 0.1f);
+        //loadModel("Models/gltf/bone/scene.gltf", Vector3f.ZERO, 0.1f);
 //        loadModel("Models/gltf/box/box.gltf", Vector3f.ZERO, 1);
 //        loadModel("Models/gltf/duck/Duck.gltf", new Vector3f(0, -1, 0), 1);
 //        loadModel("Models/gltf/damagedHelmet/damagedHelmet.gltf", Vector3f.ZERO, 1);

File: jme3-core/src/main/java/com/jme3/scene/VertexBuffer.java
Patch:
@@ -606,6 +606,9 @@ public int getNumComponents(){
      * @return The total number of data elements in the data buffer.
      */
     public int getNumElements(){
+        if( data == null ) {
+            return 0;
+        }
         int elements = data.limit() / components;
         if (format == Format.Half)
             elements /= 2;

File: jme3-core/src/main/java/com/jme3/scene/debug/Arrow.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -56,7 +56,7 @@ public class Arrow extends Mesh {
         0.05f, 0, 0.9f, // tip right
         -0.05f, 0, 0.9f, // tip left
         0, 0.05f, 0.9f, // tip top
-        0, -0.05f, 0.9f, // tip buttom
+        0, -0.05f, 0.9f, // tip bottom
     };
 
     /**

File: jme3-niftygui/src/main/java/com/jme3/niftygui/InputSystemJme.java
Patch:
@@ -95,7 +95,7 @@ public void reset() {
 
     /**
      * @param height The height of the viewport. Used to convert
-     * buttom-left origin to upper-left origin.
+     * bottom-left origin to upper-left origin.
      */
     public void setHeight(int height) {
         this.height = height;

File: jme3-android/src/main/java/com/jme3/input/android/AndroidSensorJoyInput.java
Patch:
@@ -59,7 +59,7 @@
 /**
  * AndroidSensorJoyInput converts the Android Sensor system into Joystick events.
  * A single joystick is configured and includes data for all configured sensors
- * as seperate axes of the joystick.
+ * as separate axes of the joystick.
  *
  * Each axis is named according to the static strings in SensorJoystickAxis.
  * Refer to the strings defined in SensorJoystickAxis for a list of supported

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/file/DnaBlockData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -85,7 +85,7 @@ public DnaBlockData(BlenderInputStream inputStream, BlenderContext blenderContex
             names[i] = inputStream.readString();
         }
 
-        // reding types
+        // reading types
         inputStream.alignPosition(4);
         identifier = inputStream.readByte() << 24 | inputStream.readByte() << 16 | inputStream.readByte() << 8 | inputStream.readByte();
         if (identifier != TYPE_ID) {
@@ -181,7 +181,7 @@ public boolean hasStructure(String name) {
     /**
      * This method converts the given identifier code to string.
      * @param code
-     *            the code taht is to be converted
+     *            the code that is to be converted
      * @return the string value of the identifier
      */
     private String toString(int code) {

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/ImageUtils.java
Patch:
@@ -206,7 +206,7 @@ public static Image convertToNormalMapTexture(Image source, float strengthFactor
                 N.z = 1;
                 N.divideLocal(den);
 
-                // setting thge pixel in the result image
+                // setting the pixel in the result image
                 bumpMap.setRGB(x, y, ImageUtils.vectorToColor(N.x, N.y, N.z));
             }
         }
@@ -422,7 +422,7 @@ public static Image decompress(Image image) {
      *            pixel's X coordinate
      * @param y
      *            pixel's Y coordinate
-     * @return height reprezented by the given texture in the specified location
+     * @return height represented by the given texture in the specified location
      */
     private static int getHeight(BufferedImage image, int x, int y) {
         if (x < 0) {

File: jme3-bullet/src/common/java/com/jme3/bullet/control/KinematicRagdollControl.java
Patch:
@@ -169,7 +169,7 @@ public void read(JmeImporter im) throws IOException {
     }
 
     /**
-     * contruct a KinematicRagdollControl
+     * construct a KinematicRagdollControl
      */
     public KinematicRagdollControl() {
         baseRigidBody = new PhysicsRigidBody(new BoxCollisionShape(Vector3f.UNIT_XYZ.mult(0.1f)), 1);
@@ -253,7 +253,7 @@ protected void ragDollUpdate(float tpf) {
                     link.bone.setUserTransformsInModelSpace(position, tmpRot1);
                 } else {
                     //boneList is not empty, this means some bones of the skeleton might not be associated with a collision shape.
-                    //So we update them recusively
+                    //So we update them recursively
                     RagdollUtils.setTransform(link.bone, position, tmpRot1, false, boneList);
                 }
             }

File: jme3-core/src/main/java/com/jme3/animation/BoneTrack.java
Patch:
@@ -46,7 +46,7 @@
 public final class BoneTrack implements Track {
 
     /**
-     * Bone index in the skeleton which this track effects.
+     * Bone index in the skeleton which this track affects.
      */
     private int targetBoneIndex;
     

File: jme3-core/src/main/java/com/jme3/animation/EffectTrack.java
Patch:
@@ -198,7 +198,7 @@ public void setTime(float time, float weight, AnimControl control, AnimChannel c
             control.addListener(new OnEndListener());
             initialized = true;
         }
-        //checking fo time to trigger the effect
+        //checking for time to trigger the effect
         if (!emitted && time >= startOffset) {
             emitted = true;
             emitter.setCullHint(CullHint.Dynamic);
@@ -434,7 +434,7 @@ public void write(JmeExporter ex) throws IOException {
     public void read(JmeImporter im) throws IOException {
         InputCapsule in = im.getCapsule(this);
         this.particlesPerSeconds = in.readFloat("particlesPerSeconds", 0);
-        //reading the emitter even if the track will then reference its cloned counter part if it's loaded with the assetManager.
+        //reading the emitter even if the track will then reference its cloned counterpart if it's loaded with the assetManager.
         //This also avoid null pointer exception if the model is not loaded via the AssetManager.
         emitter = (ParticleEmitter) in.readSavable("emitter", null);
         emitter.setParticlesPerSec(0);

File: jme3-core/src/main/java/com/jme3/audio/AudioNode.java
Patch:
@@ -278,8 +278,8 @@ public Filter getDryFilter() {
      * the dry filter will only influence the "dry" portion of the audio,
      * e.g. not the reverberated parts of the AudioNode playing.
      *
-     * See the relevent documentation for the {@link Filter} to determine
-     * the effect.
+     * See the relevant documentation for the {@link Filter} to determine the
+     * effect.
      *
      * @param dryFilter The filter to set, or null to disable dry filter.
      */

File: jme3-core/src/main/java/com/jme3/environment/util/LightsDebugState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -114,7 +114,7 @@ public void update(float tpf) {
     }
 
     /**
-     * Set the scenes for wich to render light gizmos.
+     * Set the scenes for which to render light gizmos.
      * @param scene 
      */
     public void setScene(Spatial scene) {

File: jme3-core/src/main/java/com/jme3/input/InputManager.java
Patch:
@@ -432,7 +432,7 @@ public void onMouseMotionEvent(MouseMotionEvent evt) {
          * If events aren't allowed, the event may be a "first mouse event"
          * triggered by the constructor setting the mouse listener.
          * In that case, use the event to initialize the cursor position,
-         * but don't queue it for futher processing.
+         * but don't queue it for further processing.
          * This is part of the fix for issue #792.
          */
         cursorPos.set(evt.getX(), evt.getY());
@@ -874,7 +874,7 @@ private void processQueue() {
             // larynx, 2011.06.10 - flag event as reusable because
             // the android input uses a non-allocating ringbuffer which
             // needs to know when the event is not anymore in inputQueue
-            // and therefor can be reused.
+            // and therefore can be reused.
             event.setConsumed();
         }
 

File: jme3-core/src/main/java/com/jme3/light/LightProbeBlendingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2015 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -48,7 +48,7 @@ public interface LightProbeBlendingStrategy {
     public void registerProbe(LightProbe probe);
     /**
      * Populates the resulting light probes into the given light list.
-     * @param g the geometry for wich the light list is computed
+     * @param g the geometry for which the light list is computed
      * @param lightList the result light list
      */
     public void populateProbes(Geometry g, LightList lightList);

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -726,7 +726,7 @@ private void renderSubScene(Spatial scene, ViewPort vp) {
             // Saving cam state for culling
             int camState = vp.getCamera().getPlaneState();
             for (int i = 0; i < children.size(); i++) {
-                // Restoring cam state before proceeding children recusively
+                // Restoring cam state before proceeding children recursively
                 vp.getCamera().setPlaneState(camState);
                 renderSubScene(children.get(i), vp);
             }

File: jme3-core/src/main/java/com/jme3/shader/Shader.java
Patch:
@@ -361,7 +361,7 @@ public void resetUniformsNotSetByCurrent() {
      */
     public void resetLocations() {
         if (uniforms != null) {
-            // NOTE: Shader sources will be reset seperately from the shader itself.
+            // NOTE: Shader sources will be reset separately from the shader itself.
             for (Uniform uniform : uniforms.values()) {
                 uniform.reset(); // fixes issue with re-initialization
             }

File: jme3-core/src/main/java/com/jme3/shadow/ShadowUtil.java
Patch:
@@ -387,7 +387,7 @@ private void process(Spatial scene) {
                         BoundingBox occBB = (BoundingBox) occBox;
                         //Kirill 01/10/2011
                         // Extend the occluder further into the frustum
-                        // This fixes shadow dissapearing issues when
+                        // This fixes shadow disappearing issues when
                         // the caster itself is not in the view camera
                         // but its shadow is in the camera
                         //      The number is in world units
@@ -430,7 +430,7 @@ else if ( scene instanceof Node && ((Node)scene).getWorldBound()!=null )
                     BoundingBox occBB = (BoundingBox) occBox;
                     //Kirill 01/10/2011
                     // Extend the occluder further into the frustum
-                    // This fixes shadow dissapearing issues when
+                    // This fixes shadow disappearing issues when
                     // the caster itself is not in the view camera
                     // but its shadow is in the camera
                     //      The number is in world units

File: jme3-core/src/plugins/java/com/jme3/export/binary/BinaryExporter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -255,7 +255,7 @@ public void save(Savable object, OutputStream os) throws IOException {
         }
 
         ByteArrayOutputStream out = new ByteArrayOutputStream();
-        // write out data to a seperate stream
+        // write out data to a separate stream
         int location = 0;
         // keep track of location for each piece
         HashMap<String, ArrayList<BinaryIdContentPair>> alreadySaved = new HashMap<String, ArrayList<BinaryIdContentPair>>(

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/HDRLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -149,7 +149,7 @@ private boolean decodeScanlineRLE(InputStream in, int width) throws IOException{
                 rleTempBuffer = BufferUtils.createByteBuffer(width * 4);
         }
         
-	// read each component seperately
+	// read each component separately
         for (int i = 0; i < 4; i++) {
             // read WIDTH bytes for the channel
             for (int j = 0; j < width;) {

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/TGALoader.java
Patch:
@@ -214,7 +214,7 @@ public static Image load(InputStream in, boolean flip) throws IOException {
             byte alpha = 0;
 
             // Faster than doing a 16-or-24-or-32 check on each individual pixel,
-            // just make a seperate loop for each.
+            // just make a separate loop for each.
             if (pixelDepth == 16) {
                 byte[] data = new byte[2];
                 float scalar = 255f / 31f;
@@ -287,7 +287,7 @@ public static Image load(InputStream in, boolean flip) throws IOException {
             byte blue = 0;
             byte alpha = 0;
             // Faster than doing a 16-or-24-or-32 check on each individual pixel,
-            // just make a seperate loop for each.
+            // just make a separate loop for each.
             if (pixelDepth == 32) {
                 for (int i = 0; i <= (height - 1); ++i) {
                     if (!flip) {

File: jme3-effects/src/main/java/com/jme3/post/filters/LightScatteringFilter.java
Patch:
@@ -67,7 +67,7 @@ public class LightScatteringFilter extends Filter {
     private ViewPort viewPort;
 
     /**
-     * creates a lightScatterring filter
+     * creates a lightScattering filter
      */
     public LightScatteringFilter() {
         super("Light Scattering");

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/grid/ImageTileLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -74,7 +74,7 @@ public ImageTileLoader(AssetManager assetManager, Namer namer) {
     }
 
     /**
-     * Effects vertical scale of the height of the terrain when loaded.
+     * Affects the vertical scale of the terrain when loaded.
      */
     public void setHeightScale(float heightScale) {
         this.heightScale = heightScale;

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/OculusVR.java
Patch:
@@ -610,7 +610,7 @@ public static Quaternion quatO2J(OVRQuatf from, Quaternion to) {
      * @return The {@code to} argument.
      */
     public static Vector3f vecO2J(OVRVector3f from, Vector3f to) {
-        // jME and LibOVR disagree on which way X and Z is, too.
+        // jME and LibOVR disagree on which way X and Z are, too.
         to.set(
                 -from.x(),
                 from.y(),

File: jme3-core/src/main/java/com/jme3/cinematic/MotionPathListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -34,7 +34,7 @@
 import com.jme3.cinematic.events.MotionEvent;
 
 /**
- * Trigger the events happening on an motion path
+ * Trigger the events happening on a motion path
  * @author Nehon
  */
 public interface MotionPathListener {

File: jme3-core/src/main/java/com/jme3/input/Joystick.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -123,7 +123,7 @@ public interface Joystick {
 
     /**
      * Returns the POV Y axis for this joystick.  This is a convenience axis 
-     * providing an y-axis subview of the HAT axis.
+     * providing a y-axis subview of the HAT axis.
      *
      * @see JoystickAxis#assignAxis(java.lang.String, java.lang.String)
      */

File: jme3-core/src/main/java/com/jme3/math/FastMath.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -860,7 +860,7 @@ public static Vector3f cartesianZToSpherical(Vector3f cartCoords,
     }
 
     /**
-     * Takes an value and expresses it in terms of min to max.
+     * Takes a value and expresses it in terms of min to max.
      * 
      * @param val -
      *            the angle to normalize (in radians)

File: jme3-core/src/main/java/com/jme3/shader/Glsl100ShaderGenerator.java
Patch:
@@ -623,7 +623,7 @@ protected void declareAttribute(StringBuilder source, ShaderNodeVariable var) {
     /**
      * Declares a varying
      * @param source the StringBuilder to use
-     * @param var the variable to declare as an varying
+     * @param var the variable to declare as a varying
      * @param input a boolean set to true if the this varying is an input.
      * this in not used in this implementation but can be used in overriding 
      * implementation

File: jme3-core/src/plugins/java/com/jme3/export/binary/ByteUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -269,7 +269,7 @@ public static long convertLongFromBytes(byte[] bytes) {
     }
 
     public static long convertLongFromBytes(byte[] bytes, int offset) {
-        // Convert it to an long
+        // Convert it to a long
         return    ((((long) bytes[offset+7]) & 0xFF) 
                 + ((((long) bytes[offset+6]) & 0xFF) << 8)
                 + ((((long) bytes[offset+5]) & 0xFF) << 16)
@@ -340,7 +340,7 @@ public static double convertDoubleFromBytes(byte[] bytes, int offset) {
     //  **********  byte <> float  METHODS  **********
 
     /**
-     * Writes an float out to an OutputStream.
+     * Writes a float out to an OutputStream.
      * 
      * @param outputStream
      *            The OutputStream the float will be written to

File: jme3-desktop/src/main/java/jme3tools/navigation/Coordinate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -116,7 +116,7 @@ public Coordinate(double decCoordinate, int coOrdinate) throws InvalidPositionEx
      * This constructor takes a coordinate in the ALRS formats i.e
      * 38∞31.64'N for lat, and 28∞19.12'W for long
      * Note: ALRS positions are occasionally written with the decimal minutes
-     * apostrophe in the 'wrong' place and with an non CP1252 compliant decimal character.
+     * apostrophe in the 'wrong' place and with a non CP1252 compliant decimal character.
      * This issue has to be corrected in the source database
      * @param coOrdinate
      * @throws InvalidPositionException

File: jme3-effects/src/main/java/com/jme3/post/filters/RadialBlurFilter.java
Patch:
@@ -124,7 +124,7 @@ public float getSampleStrength() {
     }
 
     /**
-     * sets the sample streanght default is 2.2
+     * sets the sample strength default is 2.2
      * @param sampleStrength 
      */
     public void setSampleStrength(float sampleStrength) {

File: jme3-examples/src/main/java/jme3test/model/anim/TestAttachmentsNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2017 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -51,7 +51,7 @@
 import com.jme3.scene.shape.Box;
 
 /**
- * Simple application to an test attachments node on the Jaime model.
+ * Simple application to test an attachments node on the Jaime model.
  *
  * Derived from {@link jme3test.model.anim.TestOgreAnim}.
  */

File: jme3-examples/src/main/java/jme3test/renderer/TestAspectRatio.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2017 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -38,7 +38,7 @@
 import com.jme3.scene.shape.Box;
 
 /**
- * Simple application to an test a viewport/camera with a different aspect ratio
+ * Simple application to test a viewport/camera with a different aspect ratio
  * than the display -- issue #357. The cube should render as a blue square, not
  * a rectangle.
  *

File: jme3-jogg/src/main/java/com/jme3/audio/plugins/OGGLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -152,7 +152,7 @@ public void setTime(float time) {
                 // HACK: Reload the logical and vorbis streams from scratch
                 // based on the existing ogg page data. 
                 // This fixes an audio discontinuity issue when looping
-                // an streaming OGG file via setTime(0).
+                // a streaming OGG file via setTime(0).
                 ls = ((CachedOggStream) ps).reloadLogicalOggStream();
                 vs = new VorbisStream(ls);
                 endOfStream = false;

File: jme3-terrain/src/main/java/com/jme3/terrain/heightmap/FaultHeightMap.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.logging.Logger;
 
 /**
- * Creates an heightmap based on the fault algorithm. Each iteration, a random line
+ * Creates a heightmap based on the fault algorithm. Each iteration, a random line
  * crossing the map is generated. On one side height values are raised, on the other side
  * lowered.
  * @author cghislai
@@ -118,7 +118,7 @@ public FaultHeightMap(int size, int iterations, int faultType, int faultShape, f
     }
 
     /**
-     * Create an heightmap with linear step faults.
+     * Create a heightmap with linear step faults.
      * @param size size of heightmap
      * @param iterations number of iterations
      * @param minFaultHeight Height modified on each side

File: jme3-vr/src/main/java/com/jme3/input/vr/VRAPI.java
Patch:
@@ -92,8 +92,8 @@ public interface VRAPI {
     public void reset();
 
     /**
-     * Get the size of an Head Mounted Device (HMD) rendering area in pixels.
-     * @param store the size of an Head Mounted Device (HMD) rendering area in pixels (modified).
+     * Get the size of a Head Mounted Device (HMD) rendering area in pixels.
+     * @param store the size of a Head Mounted Device (HMD) rendering area in pixels (modified).
      */
     public void getRenderSize(Vector2f store);
     

File: jme3-vr/src/main/java/com/jme3/input/vr/openvr/OpenVRInput.java
Patch:
@@ -486,7 +486,7 @@ public void updateConnectedControllers() {
         			}
         			trackedControllers.add(new OpenVRTrackedController(i, this, controllerName, manufacturerName, environment));
         			
-        			// Send an Haptic pulse to the controller
+        			// Send a Haptic pulse to the controller
         			triggerHapticPulse(controllerCount, 1.0f);
         			
         			controllerCount++;

File: jme3-core/src/main/java/com/jme3/util/LittleEndien.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -34,7 +34,7 @@
 import java.io.*;
 
 /**
- * <code>LittleEndien</code> is a class to read littleendien stored data
+ * <code>LittleEndien</code> is a class to read little-endian stored data
  * via a InputStream.  All functions work as defined in DataInput, but
  * assume they come from a LittleEndien input stream.  Currently used to read .ms3d and .3ds files.
  * @author Jack Lindamood

File: jme3-effects/src/main/java/com/jme3/post/filters/CartoonEdgeFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -165,7 +165,7 @@ public float getEdgeIntensity() {
 
     /**
      * sets the edge intensity<br>
-     * Defineshow visilble will be the outlined edges
+     * Defineshow visible will be the outlined edges
      * @param edgeIntensity 
      */
     public void setEdgeIntensity(float edgeIntensity) {

File: jme3-effects/src/main/java/com/jme3/post/filters/ColorOverlayFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -53,7 +53,7 @@ public class ColorOverlayFilter extends Filter {
     private ColorRGBA color = ColorRGBA.White;
 
     /**
-     * creates a colorOverlayFilter with a white coor (transparent)
+     * creates a colorOverlayFilter with a white color (transparent)
      */
     public ColorOverlayFilter() {
         super("Color Overlay");

File: jme3-effects/src/main/java/com/jme3/post/filters/DepthOfFieldFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -136,7 +136,7 @@ public float getFocusRange() {
     /**
      *  Sets the blur amount by scaling the convolution filter up or
      *  down.  A value of 1 (the default) performs a sparse 5x5 evenly
-     *  distribubted convolution at pixel level accuracy.  Higher values skip
+     *  distributed convolution at pixel level accuracy.  Higher values skip
      *  more pixels, and so on until you are no longer blurring the image
      *  but simply hashing it.
      *

File: jme3-effects/src/main/java/com/jme3/post/filters/PosterizationFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -115,7 +115,7 @@ public void setGamma(float gamma) {
     }
 
     /**
-     * Sets urrent strength value, i.e. influence on final image
+     * Sets current strength value, i.e. influence on final image
      */
     public void setStrength(float strength) {
         this.strength = strength;

File: jme3-effects/src/main/java/com/jme3/post/filters/RadialBlurFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -63,7 +63,7 @@ public RadialBlurFilter() {
     /**
      * Creates a RadialBlurFilter
      * @param sampleDist the distance between samples
-     * @param sampleStrength the strenght of each sample
+     * @param sampleStrength the strength of each sample
      */
     public RadialBlurFilter(float sampleDist, float sampleStrength) {
         this();

File: jme3-core/src/main/java/com/jme3/renderer/Caps.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -224,7 +224,7 @@ public enum Caps {
      */
     GeometryShader,
     /**
-     * Supports Tesselation shader
+     * Supports Tessellation shader
      */
     TesselationShader,
     /**

File: jme3-core/src/main/java/com/jme3/scene/Mesh.java
Patch:
@@ -139,8 +139,8 @@ public enum Mode {
          */
         Hybrid(false),
         /**
-         * Used for Tesselation only. Requires to set the number of vertices
-         * for each patch (default is 3 for triangle tesselation)
+         * Used for Tessellation only. Requires to set the number of vertices
+         * for each patch (default is 3 for triangle tessellation)
          */
         Patch(true);
         private boolean listMode = false;
@@ -182,7 +182,7 @@ public boolean isListMode(){
     private int vertCount = -1;
     private int elementCount = -1;
     private int instanceCount = -1;
-    private int patchVertexCount=3; //only used for tesselation
+    private int patchVertexCount=3; //only used for tessellation
     private int maxNumWeights = -1; // only if using skeletal animation
 
     private int[] elementLengths;

File: jme3-core/src/main/java/com/jme3/util/NativeObjectManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -158,7 +158,7 @@ private void deleteNativeObject(Object rendererObject, NativeObject obj, NativeO
         }
         if (deleteBufs && UNSAFE && realObj != null) {
             // Only the real object has native buffers. 
-            // The destructable clone has nothing and cannot be used in this case.
+            // The destructible clone has nothing and cannot be used in this case.
             realObj.deleteNativeBuffersInternal();
         }
     }

File: jme3-core/src/main/java/com/jme3/animation/Skeleton.java
Patch:
@@ -304,6 +304,7 @@ public void read(JmeImporter im) throws IOException {
         createSkinningMatrices();
 
         for (Bone rootBone : rootBones) {
+            rootBone.reset();
             rootBone.update();
             rootBone.setBindingPose();
         }

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -752,7 +752,7 @@ public int getShadowMapSize() {
     public void setEdgesThickness(int edgesThickness) {
         this.edgesThickness = Math.max(1, Math.min(edgesThickness, 10));
         this.edgesThickness *= 0.1f;
-        postshadowMat.setFloat("PCFEdge", edgesThickness);
+        postshadowMat.setFloat("PCFEdge", this.edgesThickness);
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/shadow/DirectionalLightShadowRenderer.java
Patch:
@@ -283,7 +283,7 @@ public void read(JmeImporter im) throws IOException {
         super.read(im);
         InputCapsule ic = im.getCapsule(this);
         lambda = ic.readFloat("lambda", 0.65f);
-        zFarOverride = ic.readInt("zFarOverride", 0);
+        zFarOverride = ic.readFloat("zFarOverride", 0);
         light = (DirectionalLight) ic.readSavable("light", null);
         fadeInfo = (Vector2f) ic.readSavable("fadeInfo", null);
         fadeLength = ic.readFloat("fadeLength", 0f);

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -954,7 +954,7 @@ public void setBroadphaseType(BroadphaseType broadphaseType) {
      * determinism in physics. For example a maximum number of 2 can compensate
      * for framerates as low as 30fps when the physics has the default accuracy
      * of 60 fps. Note that setting this value too high can make the physics
-     * drive down its own fps in case its overloaded.
+     * drive down its own fps in case it's overloaded.
      *
      * @param steps The maximum number of extra steps, default is 4.
      */

File: jme3-core/src/main/java/com/jme3/system/JmeSystem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -122,7 +122,7 @@ public static SoftTextDialogInput getSoftTextDialogInput() {
      * Compresses a raw image into a stream.
      * 
      * The encoding is performed via system libraries. On desktop, the encoding
-     * is performed via ImageIO, whereas on Android, is is done via the 
+     * is performed via ImageIO, whereas on Android, is done via the 
      * Bitmap class.
      * 
      * @param outStream The stream where to write the image data.

File: jme3-examples/src/main/java/jme3test/helloworld/HelloPhysics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -204,12 +204,12 @@ public void makeCannonBall() {
     rootNode.attachChild(ball_geo);
     /** Position the cannon ball  */
     ball_geo.setLocalTranslation(cam.getLocation());
-    /** Make the ball physcial with a mass > 0.0f */
+    /** Make the ball physical with a mass > 0.0f */
     ball_phy = new RigidBodyControl(1f);
     /** Add physical ball to physics space. */
     ball_geo.addControl(ball_phy);
     bulletAppState.getPhysicsSpace().add(ball_phy);
-    /** Accelerate the physcial ball to shoot it. */
+    /** Accelerate the physical ball to shoot it. */
     ball_phy.setLinearVelocity(cam.getDirection().mult(25));
   }
 

File: jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -827,7 +827,7 @@ public void setBroadphaseType(BroadphaseType broadphaseType) {
      * when the fps is below the physics fps. Doing this maintains determinism in physics.
      * For example a maximum number of 2 can compensate for framerates as low as 30fps
      * when the physics has the default accuracy of 60 fps. Note that setting this
-     * value too high can make the physics drive down its own fps in case its overloaded.
+     * value too high can make the physics drive down its own fps in case it's overloaded.
      * @param steps The maximum number of extra steps, default is 4.
      */
     public void setMaxSubSteps(int steps) {

File: jme3-networking/src/main/java/com/jme3/network/base/KernelAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -152,7 +152,7 @@ protected void connectionClosed( Endpoint p )
      *  than for any user-code safety.  99% of the time the user code should
      *  be writing for multithreaded access anyway.
      *
-     *  <p>The issue with the messages is that if a an implementation is
+     *  <p>The issue with the messages is that if an implementation is
      *  using a general thread pool then it would be possible for a 
      *  naive implementation to have one thread grab an Envelope from
      *  connection 1's and another grab the next Envelope.  Since an Envelope

File: jme3-networking/src/main/java/com/jme3/network/service/rmi/RmiHostedService.java
Patch:
@@ -150,7 +150,7 @@ public <T> void shareGlobal( byte channel, String name, T object, Class<? super
      *  Set to true if all new connections should automatically have RMI hosting started.
      *  Set to false if the game-specific connection setup will call startHostingOnConnection()
      *  after some connection setup is done (for example, logging in).  Note: generally
-     *  is is safe to autohost RMI as long as callers are careful about what they've added
+     *  is safe to autohost RMI as long as callers are careful about what they've added
      *  using shareGlobal().  One reasonable use-case is to shareGlobal() some kind of login
      *  service and nothing else.  All other shared objects would then be added as connection
      *  specific objects during successful login processing. 

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/SceneLoader.java
Patch:
@@ -72,7 +72,7 @@ public class SceneLoader implements AssetLoader {
 	// Scene objects
 	private Map<Long, FbxObject> allObjects = new HashMap<>(); // All supported FBX objects
 	private Map<Long, FbxSkin> skinMap = new HashMap<>(); // Skin for bone clusters
-	private Map<Long, FbxObject> alayerMap = new HashMap<>(); // Amination layers
+	private Map<Long, FbxObject> alayerMap = new HashMap<>(); // Animation layers
 	public Map<Long, FbxNode> modelMap = new HashMap<>(); // Nodes
 	private Map<Long, FbxNode> limbMap = new HashMap<>(); // Nodes that are actually bones
 	private Map<Long, FbxBindPose> bindMap = new HashMap<>(); // Node bind poses
@@ -309,7 +309,7 @@ private void buildAnimations() {
 				animList.add(layer.name, layer.name, 0, -1);
 			}
 		}
-		// Extract aminations
+		// Extract animations
 		HashMap<String, Animation> anims = new HashMap<String, Animation>();
 		for(AnimInverval animInfo : animList.list) {
 			float realLength = 0;

File: jme3-vr/src/main/java/com/jme3/app/VRAppState.java
Patch:
@@ -301,7 +301,7 @@ public Object getObserver() {
     }
     
     /**
-     * Set the scene observer. The VR headset will be linked to it. If no observer is set, the VR headset is linked to the the application {@link #getCamera() camera}.
+     * Set the scene observer. The VR headset will be linked to it. If no observer is set, the VR headset is linked to the application {@link #getCamera() camera}.
      * @param observer the scene observer.
      */
     public void setObserver(Spatial observer) {

File: jme3-bullet/src/main/java/com/jme3/bullet/joints/ConeJoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -44,7 +44,7 @@
 
 /**
  * <i>From bullet manual:</i><br>
- * To create ragdolls, the conve twist constraint is very useful for limbs like the upper arm.
+ * To create ragdolls, the cone twist constraint is very useful for limbs like the upper arm.
  * It is a special point to point constraint that adds cone and twist axis limits.
  * The x-axis serves as twist axis.
  * @author normenhansen

File: jme3-bullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -265,7 +265,7 @@ public Matrix3f getPhysicsRotationMatrix() {
 //    }
     /**
      * Sets the node to kinematic mode. in this mode the node is not affected by physics
-     * but affects other physics objects. Iits kinetic force is calculated by the amount
+     * but affects other physics objects. Its kinetic force is calculated by the amount
      * of movement it is exposed to and its weight.
      * @param kinematic
      */

File: jme3-jbullet/src/main/java/com/jme3/bullet/joints/ConeJoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -45,7 +45,7 @@
 
 /**
  * <i>From bullet manual:</i><br>
- * To create ragdolls, the conve twist constraint is very useful for limbs like the upper arm.
+ * To create ragdolls, the cone twist constraint is very useful for limbs like the upper arm.
  * It is a special point to point constraint that adds cone and twist axis limits.
  * The x-axis serves as twist axis.
  * @author normenhansen

File: jme3-bullet/src/common/java/com/jme3/bullet/collision/PhysicsCollisionGroupListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -40,7 +40,7 @@ public interface PhysicsCollisionGroupListener {
     /**
      * Called when two physics objects of the registered group are about to collide, <i>called from physics thread</i>.<br>
      * This is only called when the collision will happen based on the collisionGroup and collideWithGroups
-     * settings in the PhysicsCollisionObject. That is the case when <b>one</b> of the partys has the
+     * settings in the PhysicsCollisionObject. That is the case when <b>one</b> of the parties has the
      * collisionGroup of the other in its collideWithGroups set.<br>
      * @param nodeA CollisionObject #1
      * @param nodeB CollisionObject #2

File: jme3-bullet/src/common/java/com/jme3/bullet/control/ragdoll/RagdollUtils.java
Patch:
@@ -123,7 +123,7 @@ private static Map<Integer, List<Float>> buildPointMapForMesh(Mesh mesh, Map<Int
 
     /**
      * Create a hull collision shape from linked vertices to this bone.
-     * Vertices have to be previoulsly gathered in a map using buildPointMap method
+     * Vertices have to be previously gathered in a map using buildPointMap method
      * 
      * @param pointsMap
      * @param boneIndices

File: jme3-bullet/src/main/java/com/jme3/bullet/collision/PhysicsCollisionObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -96,7 +96,7 @@ public int getCollisionGroup() {
      * Sets the collision group number for this physics object. <br>
      * The groups are integer bit masks and some pre-made variables are available in CollisionObject.
      * All physics objects are by default in COLLISION_GROUP_01.<br>
-     * Two object will collide when <b>one</b> of the partys has the
+     * Two object will collide when <b>one</b> of the parties has the
      * collisionGroup of the other in its collideWithGroups set.
      * @param collisionGroup the collisionGroup to set
      */
@@ -109,7 +109,7 @@ public void setCollisionGroup(int collisionGroup) {
 
     /**
      * Add a group that this object will collide with.<br>
-     * Two object will collide when <b>one</b> of the partys has the
+     * Two object will collide when <b>one</b> of the parties has the
      * collisionGroup of the other in its collideWithGroups set.<br>
      * @param collisionGroup
      */

File: jme3-core/src/main/java/com/jme3/renderer/Renderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -425,7 +425,7 @@ public interface Renderer {
      * Check if the profiling results are available
      *
      * @param taskId the id of the task provided by startProfiling
-     * @return true if the resulst of the task with the given task id are available.
+     * @return true if the results of the task with the given task id are available.
      */
     public boolean isTaskResultAvailable(int taskId);
 

File: jme3-jbullet/src/main/java/com/jme3/bullet/collision/PhysicsCollisionObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -93,7 +93,7 @@ public int getCollisionGroup() {
      * Sets the collision group number for this physics object. <br>
      * The groups are integer bit masks and some pre-made variables are available in CollisionObject.
      * All physics objects are by default in COLLISION_GROUP_01.<br>
-     * Two object will collide when <b>one</b> of the partys has the
+     * Two object will collide when <b>one</b> of the parties has the
      * collisionGroup of the other in its collideWithGroups set.
      * @param collisionGroup the collisionGroup to set
      */
@@ -103,7 +103,7 @@ public void setCollisionGroup(int collisionGroup) {
 
     /**
      * Add a group that this object will collide with.<br>
-     * Two object will collide when <b>one</b> of the partys has the
+     * Two object will collide when <b>one</b> of the parties has the
      * collisionGroup of the other in its collideWithGroups set.<br>
      * @param collisionGroup
      */

File: jme3-bullet/src/main/java/com/jme3/bullet/objects/VehicleWheel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -242,7 +242,7 @@ public float getMaxSuspensionForce() {
 
     /**
      * The maximum suspension force, raise this above the default 6000 if your suspension cannot
-     * handle the weight of your vehcile.
+     * handle the weight of your vehicle.
      * @param maxSuspensionTravelCm
      */
     public void setMaxSuspensionForce(float maxSuspensionForce) {

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/VehicleWheel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2018 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -237,7 +237,7 @@ public float getMaxSuspensionForce() {
 
     /**
      * The maximum suspension force, raise this above the default 6000 if your suspension cannot
-     * handle the weight of your vehcile.
+     * handle the weight of your vehicle.
      * @param maxSuspensionForce
      */
     public void setMaxSuspensionForce(float maxSuspensionForce) {

File: jme3-core/src/main/java/com/jme3/opencl/OpenCLObjectManager.java
Patch:
@@ -43,8 +43,8 @@
  */
 public class OpenCLObjectManager {
     private static final Logger LOG = Logger.getLogger(OpenCLObjectManager.class.getName());
-    private static final Level LOG_LEVEL1 = Level.FINER;
-    private static final Level LOG_LEVEL2 = Level.FINE;
+    private static final Level LOG_LEVEL1 = Level.FINEST;
+    private static final Level LOG_LEVEL2 = Level.FINER;
     
     private static final OpenCLObjectManager INSTANCE = new OpenCLObjectManager();
     private OpenCLObjectManager() {}

File: jme3-core/src/main/java/com/jme3/shadow/PointLightShadowRenderer.java
Patch:
@@ -63,9 +63,10 @@ public class PointLightShadowRenderer extends AbstractShadowRenderer {
     private Geometry[] frustums = null;
 
     /**
-     * Used for serialization use
-     * PointLightShadowRenderer"PointLightShadowRenderer(AssetManager
+     * Used for serialization.
+     * Use PointLightShadowRenderer#PointLightShadowRenderer(AssetManager
      * assetManager, int shadowMapSize)
+     * instead.
      */
     public PointLightShadowRenderer() {
         super();

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -235,7 +235,7 @@ private boolean needCollision_native(PhysicsCollisionObject objectA, PhysicsColl
 //                    collides = (bp1.collisionFilterGroup & bp.collisionFilterMask) != 0;
 //                }
 //                if (collides) {
-//                    assert (bp.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject && bp.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject);
+//                    assert (bp.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject && bp1.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject);
 //                    com.bulletphysics.collision.dispatch.CollisionObject colOb = (com.bulletphysics.collision.dispatch.CollisionObject) bp.clientObject;
 //                    com.bulletphysics.collision.dispatch.CollisionObject colOb1 = (com.bulletphysics.collision.dispatch.CollisionObject) bp1.clientObject;
 //                    assert (colOb.getUserPointer() != null && colOb1.getUserPointer() != null);

File: jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -227,7 +227,7 @@ public boolean needBroadphaseCollision(BroadphaseProxy bp, BroadphaseProxy bp1)
                     collides = (bp1.collisionFilterGroup & bp.collisionFilterMask) != 0;
                 }
                 if (collides) {
-                    assert (bp.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject && bp.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject);
+                    assert (bp.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject && bp1.clientObject instanceof com.bulletphysics.collision.dispatch.CollisionObject);
                     com.bulletphysics.collision.dispatch.CollisionObject colOb = (com.bulletphysics.collision.dispatch.CollisionObject) bp.clientObject;
                     com.bulletphysics.collision.dispatch.CollisionObject colOb1 = (com.bulletphysics.collision.dispatch.CollisionObject) bp1.clientObject;
                     assert (colOb.getUserPointer() != null && colOb1.getUserPointer() != null);

File: jme3-core/src/main/java/com/jme3/asset/cache/WeakRefCloneAssetCache.java
Patch:
@@ -112,11 +112,10 @@ private void removeCollectedAssets(){
             // might not even have this asset anymore, it is OK.
             if (smartCache.remove(key) != null){
                 removedAssets ++;
-                //System.out.println("WeakRefAssetCache: The asset " + ref.assetKey + " was purged from the cache");
             }
         }
         if (removedAssets >= 1) {
-            logger.log(Level.FINE, "WeakRefAssetCache: {0} assets were purged from the cache.", removedAssets);
+            logger.log(Level.FINE, "WeakRefCloneAssetCache: {0} assets were purged from the cache.", removedAssets);
         }
     }
     

File: jme3-core/src/main/java/com/jme3/asset/cache/WeakRefCloneAssetCache.java
Patch:
@@ -112,11 +112,10 @@ private void removeCollectedAssets(){
             // might not even have this asset anymore, it is OK.
             if (smartCache.remove(key) != null){
                 removedAssets ++;
-                //System.out.println("WeakRefAssetCache: The asset " + ref.assetKey + " was purged from the cache");
             }
         }
         if (removedAssets >= 1) {
-            logger.log(Level.FINE, "WeakRefAssetCache: {0} assets were purged from the cache.", removedAssets);
+            logger.log(Level.FINE, "WeakRefCloneAssetCache: {0} assets were purged from the cache.", removedAssets);
         }
     }
     

File: jme3-vr/src/main/java/com/jme3/input/lwjgl/GlfwKeyInputVR.java
Patch:
@@ -48,7 +48,7 @@
 /**
  * A key input that wraps GLFW underlying components.
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  *
  */
 public class GlfwKeyInputVR implements KeyInput {

File: jme3-vr/src/main/java/com/jme3/input/lwjgl/GlfwMouseInputVR.java
Patch:
@@ -63,7 +63,7 @@
  * This class support modifications dedicated to VR rendering.
  * @author Daniel Johansson (dannyjo)
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a> * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
  */
 public class GlfwMouseInputVR implements MouseInput {
 

File: jme3-vr/src/main/java/com/jme3/input/vr/HmdType.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * The type of VR Head Mounted Device (HMD)
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public enum HmdType {
 	

File: jme3-vr/src/main/java/com/jme3/input/vr/VRAPI.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * An interface that represents a VR system. This interface has to be implemented in order to wrap underlying VR system (OpenVR, OSVR, ...)
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public interface VRAPI {
     
@@ -86,8 +86,8 @@ public interface VRAPI {
     public boolean isInitialized();
 
     /**
-     * Reset (recenter) the VR system. The current position of the HMD is
-     * now considered the origin (observer+[0,0,0]).
+     * Reset the VR system. After a call to this method, the current position of the HMD should be
+     * the origin (i-e the observer without any combined transformation).
      */
     public void reset();
 

File: jme3-vr/src/main/java/com/jme3/input/vr/VRInputAPI.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * An interface that represents a VR input (typically a VR device such as a controller).
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public interface VRInputAPI {
 

File: jme3-vr/src/main/java/com/jme3/input/vr/VRTrackedController.java
Patch:
@@ -6,8 +6,7 @@
 
 /**
  * TODO
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
- *
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public interface VRTrackedController {
   

File: jme3-vr/src/main/java/com/jme3/input/vr/oculus/OculusVR.java
Patch:
@@ -3,9 +3,11 @@
  * To change this template file, choose Tools | Templates
  * and open the template in the editor.
  */
-package com.jme3.input.vr;
+package com.jme3.input.vr.oculus;
 
 import com.jme3.app.VREnvironment;
+import com.jme3.input.vr.HmdType;
+import com.jme3.input.vr.VRAPI;
 import com.jme3.math.*;
 import com.jme3.renderer.Camera;
 import com.jme3.texture.*;

File: jme3-vr/src/main/java/com/jme3/post/CartoonSSAO.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * A Cartoon Screen Space Ambient Occlusion filter with instance rendering capabilities.
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  *
  */
 public class CartoonSSAO extends Filter{

File: jme3-vr/src/main/java/com/jme3/post/PreNormalCaching.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * Pre normal caching class.
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public class PreNormalCaching {
     

File: jme3-vr/src/main/java/com/jme3/shadow/AbstractShadowFilterVR.java
Patch:
@@ -55,7 +55,7 @@
  *
  * @author Rémy Bouquet aka Nehon
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  * @param <T> the type of the underlying renderer (subclass of {@link AbstractShadowRendererVR}).
  */
 public abstract class AbstractShadowFilterVR<T extends AbstractShadowRendererVR> extends Filter {

File: jme3-vr/src/main/java/com/jme3/shadow/AbstractShadowRendererVR.java
Patch:
@@ -71,7 +71,7 @@
  *
  * @author Rémy Bouquet aka Nehon
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public abstract class AbstractShadowRendererVR implements SceneProcessor, Savable {
 

File: jme3-vr/src/main/java/com/jme3/shadow/DirectionalLightShadowFilterVR.java
Patch:
@@ -55,7 +55,7 @@
  *
  * @author Rémy Bouquet aka Nehon
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public class DirectionalLightShadowFilterVR extends AbstractShadowFilterVR<DirectionalLightShadowRendererVR> {
 

File: jme3-vr/src/main/java/com/jme3/shadow/DirectionalLightShadowRendererVR.java
Patch:
@@ -63,7 +63,7 @@
  * <p/>
  * @author Rémy Bouquet aka Nehon
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public class DirectionalLightShadowRendererVR extends AbstractShadowRendererVR {
 

File: jme3-vr/src/main/java/com/jme3/shadow/InstancedDirectionalShadowFilter.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * An instanced version of the {@link DirectionalLightShadowFilterVR directional light shadow filter} dedi.
  * @author reden - phr00t - https://github.com/phr00t
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  */
 public class InstancedDirectionalShadowFilter extends DirectionalLightShadowFilterVR {    
     

File: jme3-vr/src/main/java/com/jme3/util/VRGUIPositioningMode.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * A enumeration that describes the GUI display positioning modes.
- * @author Julien Seinturier - (c) 2016 - JOrigin project - <a href="http://www.jorigin.org">http:/www.jorigin.org</a>
+ * @author Julien Seinturier - COMEX SA - <a href="http://www.seinturier.fr">http://www.seinturier.fr</a>
  *
  */
 public enum VRGUIPositioningMode {

File: jme3-terrain/src/main/java/com/jme3/terrain/executor/TerrainExecutorService.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * The class to provide single executor service to run background tasks of terrain staff.
+ * The class to provide single executor service to run background tasks of terrain stuff.
  *
  * @author JavaSaBr
  */

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/MultiTerrainLodControl.java
Patch:
@@ -107,7 +107,7 @@ public void removeTerrain(TerrainQuad tq) {
     }
     
     @Override
-    protected UpdateLOD createLodUpdateTask(final SafeArrayList<Vector3f> locations,
+    protected UpdateLOD createLodUpdateTask(final List<Vector3f> locations,
                                             final LodCalculator lodCalculator) {
         return new UpdateMultiLOD(locations, lodCalculator);
     }
@@ -140,7 +140,7 @@ protected void prepareTerrain() {
      */
     protected class UpdateMultiLOD extends UpdateLOD {
 
-        protected UpdateMultiLOD(final SafeArrayList<Vector3f> camLocations, final LodCalculator lodCalculator) {
+        protected UpdateMultiLOD(final List<Vector3f> camLocations, final LodCalculator lodCalculator) {
             super(camLocations, lodCalculator);
         }
         

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainGridLodControl.java
Patch:
@@ -35,7 +35,7 @@
 import com.jme3.renderer.Camera;
 import com.jme3.terrain.Terrain;
 import com.jme3.terrain.geomipmap.lodcalc.LodCalculator;
-import java.util.List;
+import com.jme3.util.SafeArrayList;
 
 /**
  * Updates grid offsets and cell positions.
@@ -50,7 +50,7 @@ public TerrainGridLodControl(Terrain terrain, Camera camera) {
     }
     
     @Override
-    protected void updateLOD(List<Vector3f> locations, LodCalculator lodCalculator) {
+    protected void updateLOD(SafeArrayList<Vector3f> locations, LodCalculator lodCalculator) {
         TerrainGrid terrainGrid = (TerrainGrid)getSpatial();
         
         // for now, only the first camera is handled.

File: jme3-core/src/main/java/com/jme3/material/ShaderGenerationInfo.java
Patch:
@@ -206,7 +206,9 @@ protected ShaderGenerationInfo clone() throws CloneNotSupportedException {
             clone.vertexUniforms.add(uniform.clone());
         }
 
-        clone.vertexGlobal = vertexGlobal.clone();
+        if (vertexGlobal != null) {
+            clone.vertexGlobal = vertexGlobal.clone();
+        }
 
         for (ShaderNodeVariable varying : varyings) {
             clone.varyings.add(varying.clone());

File: jme3-core/src/main/java/com/jme3/animation/AnimationUtils.java
Patch:
@@ -41,7 +41,9 @@
  */
 public class AnimationUtils {
     
-    
+    public AnimationUtils(){
+        
+    }
     /**
      * Clamps the time according to duration and loopMode
      * @param time

File: jme3-core/src/main/java/com/jme3/asset/ImplHandler.java
Patch:
@@ -32,6 +32,7 @@
 package com.jme3.asset;
 
 import com.jme3.asset.cache.AssetCache;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -282,6 +283,7 @@ public void removeLoader(final Class<? extends AssetLoader> loaderType){
             ImplThreadLocal local = classToLoaderMap.get(loaderType);
             // Remove it from the class->loader map
             classToLoaderMap.remove(loaderType);
+            if (local == null) return;
             // Remove it from the extension->loader map
             for (String extension : local.getExtensions()){
                 extensionToLoaderMap.remove(extension);

File: jme3-core/src/test/java/com/jme3/collision/CollideIgnoreTransformTest.java
Patch:
@@ -42,6 +42,8 @@
 import com.jme3.scene.Mesh;
 import com.jme3.scene.Node;
 import com.jme3.scene.shape.Quad;
+import com.jme3.system.JmeSystem;
+import com.jme3.system.MockJmeSystemDelegate;
 import org.junit.Test;
 
 /**
@@ -87,6 +89,7 @@ void createRedSquare() {
 
     @Test
     public void testPhantomTriangles() {
+        JmeSystem.setSystemDelegate(new MockJmeSystemDelegate());
         assetManager = new DesktopAssetManager();
         assetManager.registerLocator(null, ClasspathLocator.class);
         assetManager.registerLoader(J3MLoader.class, "j3m", "j3md");

File: jme3-core/src/test/java/com/jme3/collision/CollideIgnoreTransformTest.java
Patch:
@@ -42,6 +42,8 @@
 import com.jme3.scene.Mesh;
 import com.jme3.scene.Node;
 import com.jme3.scene.shape.Quad;
+import com.jme3.system.JmeSystem;
+import com.jme3.system.MockJmeSystemDelegate;
 import org.junit.Test;
 
 /**
@@ -87,6 +89,7 @@ void createRedSquare() {
 
     @Test
     public void testPhantomTriangles() {
+        JmeSystem.setSystemDelegate(new MockJmeSystemDelegate());
         assetManager = new DesktopAssetManager();
         assetManager.registerLocator(null, ClasspathLocator.class);
         assetManager.registerLoader(J3MLoader.class, "j3m", "j3md");

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -367,6 +367,7 @@ public Geometry[] readMeshPrimitives(int meshIndex) throws IOException {
                     buffs.weights = readAccessorData(entry.getValue().getAsInt(), new FloatArrayPopulator());
                 } else {
                     VertexBuffer vb = readAccessorData(entry.getValue().getAsInt(), new VertexBufferPopulator(getVertexBufferType(bufferType)));
+                    System.err.println(bufferType);
                     if (vb != null) {
                         mesh.setBuffer(vb);
                     }
@@ -527,7 +528,8 @@ protected byte[] getBytes(int bufferIndex, String uri, Integer bufferLength) thr
                 BinDataKey key = new BinDataKey(info.getKey().getFolder() + uri);
                 InputStream input = (InputStream) info.getManager().loadAsset(key);
                 data = new byte[bufferLength];
-                input.read(data);
+                DataInputStream dataStream = new DataInputStream(input);
+                dataStream.readFully(data);
             }
         } else {
             //no URI this should not happen in a gltf file, only in glb files.

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonInterBoneWire.java
Patch:
@@ -84,15 +84,15 @@ public SkeletonInterBoneWire(Skeleton skeleton, Map<Integer, Float> boneLengths)
     }
 
     /**
-     * The method updates the geometry according to the positions of the bones.
+     * The method updates the geometry according to the poitions of the bones.
      */
     public void updateGeometry() {
         VertexBuffer vb = this.getBuffer(Type.Position);
         FloatBuffer posBuf = this.getFloatBuffer(Type.Position);
         posBuf.clear();
         for (int i = 0; i < skeleton.getBoneCount(); ++i) {
             Bone bone = skeleton.getBone(i);
-            Vector3f parentTail = bone.getModelSpacePosition().add(bone.getModelSpaceRotation().mult(Vector3f.UNIT_XYZ.mult(boneLengths.get(i))));
+            Vector3f parentTail = bone.getModelSpacePosition().add(bone.getModelSpaceRotation().mult(Vector3f.UNIT_Y.mult(boneLengths.get(i))));
 
             for (Bone child : bone.getChildren()) {
                 Vector3f childHead = child.getModelSpacePosition();

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -398,6 +398,9 @@ public void computeWorldMatrix() {
 
         // Compute the cached world matrix
         cachedWorldMat.loadIdentity();
+        if (ignoreTransform) {
+            return;
+        }
         cachedWorldMat.setRotationQuaternion(worldTransform.getRotation());
         cachedWorldMat.setTranslation(worldTransform.getTranslation());
 

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -398,6 +398,9 @@ public void computeWorldMatrix() {
 
         // Compute the cached world matrix
         cachedWorldMat.loadIdentity();
+        if (ignoreTransform) {
+            return;
+        }
         cachedWorldMat.setRotationQuaternion(worldTransform.getRotation());
         cachedWorldMat.setTranslation(worldTransform.getTranslation());
 

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonInterBoneWire.java
Patch:
@@ -84,15 +84,15 @@ public SkeletonInterBoneWire(Skeleton skeleton, Map<Integer, Float> boneLengths)
     }
 
     /**
-     * The method updates the geometry according to the poitions of the bones.
+     * The method updates the geometry according to the positions of the bones.
      */
     public void updateGeometry() {
         VertexBuffer vb = this.getBuffer(Type.Position);
         FloatBuffer posBuf = this.getFloatBuffer(Type.Position);
         posBuf.clear();
         for (int i = 0; i < skeleton.getBoneCount(); ++i) {
             Bone bone = skeleton.getBone(i);
-            Vector3f parentTail = bone.getModelSpacePosition().add(bone.getModelSpaceRotation().mult(Vector3f.UNIT_Y.mult(boneLengths.get(i))));
+            Vector3f parentTail = bone.getModelSpacePosition().add(bone.getModelSpaceRotation().mult(Vector3f.UNIT_XYZ.mult(boneLengths.get(i))));
 
             for (Bone child : bone.getChildren()) {
                 Vector3f childHead = child.getModelSpacePosition();

File: jme3-android/src/main/java/com/jme3/input/android/AndroidInputHandler14.java
Patch:
@@ -139,8 +139,10 @@ public boolean onKey(View view, int keyCode, KeyEvent event) {
         boolean isJoystick =
                 ((source & InputDevice.SOURCE_GAMEPAD) == InputDevice.SOURCE_GAMEPAD) ||
                 ((source & InputDevice.SOURCE_JOYSTICK) == InputDevice.SOURCE_JOYSTICK);
+        boolean isUnknown =
+                (source & android.view.InputDevice.SOURCE_UNKNOWN) == android.view.InputDevice.SOURCE_UNKNOWN;
 
-        if (isTouch && touchInput != null) {
+        if (touchInput != null && (isTouch || (isUnknown && this.touchInput.isSimulateKeyboard()))) {
 //            logger.log(Level.INFO, "onKey source: {0}, isTouch: {1}",
 //                    new Object[]{source, isTouch});
             consumed = touchInput.onKey(event);

File: jme3-core/src/main/java/com/jme3/environment/EnvironmentCamera.java
Patch:
@@ -111,7 +111,7 @@ public class EnvironmentCamera extends BaseAppState {
     /**
      * The size of environment cameras.
      */
-    protected int size = 128;
+    protected int size = 256;
 
     private final List<SnapshotJob> jobs = new ArrayList<SnapshotJob>();
 

File: jme3-core/src/main/java/com/jme3/environment/LightProbeFactory.java
Patch:
@@ -280,6 +280,8 @@ public void done(Integer result) {
 
             jobState.done[index] = true;
             if (jobState.isDone()) {
+                int nbMipMap = (int) (Math.log(probe.getPrefilteredEnvMap().getImage().getWidth()) / Math.log(2) - 1);
+                probe.setNbMipMaps(nbMipMap);
                 probe.setReady(true);
                 if (globalListener != null) {
                     globalListener.done(probe);

File: jme3-core/src/main/java/com/jme3/environment/generation/IrradianceMapGenerator.java
Patch:
@@ -44,7 +44,7 @@
 
 /**
  *
- * Generates the Irrafiance map for PBR. This job can be lauched from a separate
+ * Generates the Irradiance map for PBR. This job can be lauched from a separate
  * thread.
  *
  * TODO there is a lot of duplicate code here with the EnvMapUtils.

File: jme3-core/src/main/java/com/jme3/material/logic/SinglePassAndImageBasedLightingLogic.java
Patch:
@@ -128,10 +128,10 @@ protected int updateLightListUniforms(Shader shader, Geometry g, LightList light
             ambientColor.setValue(VarType.Vector4, ambientLightColor);
         }
 
-        //If there is a lightProbe in the list we force it's render on the first pass
+        //If there is a lightProbe in the list we force its render on the first pass
         if(lightProbe != null){
             BoundingSphere s = (BoundingSphere)lightProbe.getBounds();
-            lightProbeData.setVector4InArray(lightProbe.getPosition().x, lightProbe.getPosition().y, lightProbe.getPosition().z, 1f/s.getRadius(), 0);
+            lightProbeData.setVector4InArray(lightProbe.getPosition().x, lightProbe.getPosition().y, lightProbe.getPosition().z, 1f / s.getRadius() + lightProbe.getNbMipMaps(), 0);
             //assigning new texture indexes
             int irrUnit = lastTexUnit++;
             int pemUnit = lastTexUnit++;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL.java
Patch:
@@ -50,6 +50,7 @@ public interface GL {
     public static final int GL_ARRAY_BUFFER = 0x8892;
     public static final int GL_BACK = 0x405;
     public static final int GL_BLEND = 0xBE2;
+    public static final int GL_BLUE = 0x1905;
     public static final int GL_BYTE = 0x1400;
     public static final int GL_CLAMP_TO_EDGE = 0x812F;
     public static final int GL_COLOR_BUFFER_BIT = 0x4000;
@@ -173,9 +174,7 @@ public interface GL {
     public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
     public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
     public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
-    public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
     public static final int GL_TEXTURE_MAG_FILTER = 0x2800;
-    public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
     public static final int GL_TEXTURE_MIN_FILTER = 0x2801;
     public static final int GL_TEXTURE_WRAP_S = 0x2802;
     public static final int GL_TEXTURE_WRAP_T = 0x2803;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL2.java
Patch:
@@ -65,6 +65,8 @@ public interface GL2 extends GL {
     public static final int GL_STACK_OVERFLOW = 0x503;
     public static final int GL_STACK_UNDERFLOW = 0x504;
     public static final int GL_TEXTURE_3D = 0x806F;
+    public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
+    public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
     public static final int GL_POINT_SPRITE = 0x8861;
     public static final int GL_TEXTURE_COMPARE_FUNC = 0x884D;
     public static final int GL_TEXTURE_COMPARE_MODE = 0x884C;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL3.java
Patch:
@@ -86,7 +86,6 @@ public interface GL3 extends GL2 {
     public void glBindFragDataLocation(int param1, int param2, String param3); /// GL3+
     public void glBindVertexArray(int param1); /// GL3+
     public void glDeleteVertexArrays(IntBuffer arrays); /// GL3+
-    public void glFramebufferTextureLayer(int param1, int param2, int param3, int param4, int param5); /// GL3+
     public void glGenVertexArrays(IntBuffer param1); /// GL3+
     public String glGetString(int param1, int param2); /// GL3+
 }

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLExt.java
Patch:
@@ -61,6 +61,7 @@ public interface GLExt {
 	public static final int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
 	public static final int GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
 	public static final int GL_HALF_FLOAT_ARB = 0x140B;
+        public static final int GL_HALF_FLOAT_OES = 0x8D61;
 	public static final int GL_LUMINANCE16F_ARB = 0x881E;
 	public static final int GL_LUMINANCE32F_ARB = 0x8818;
 	public static final int GL_LUMINANCE_ALPHA16F_ARB = 0x881F;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLFbo.java
Patch:
@@ -89,6 +89,7 @@ public interface GLFbo {
     public void glDeleteRenderbuffersEXT(IntBuffer param1);
     public void glFramebufferRenderbufferEXT(int param1, int param2, int param3, int param4);
     public void glFramebufferTexture2DEXT(int param1, int param2, int param3, int param4, int param5);
+    public void glFramebufferTextureLayerEXT(int target, int attachment, int texture, int level, int layer);
     public void glGenFramebuffersEXT(IntBuffer param1);
     public void glGenRenderbuffersEXT(IntBuffer param1);
     public void glGenerateMipmapEXT(int param1);

File: jme3-core/src/main/java/com/jme3/util/NativeObjectManager.java
Patch:
@@ -133,8 +133,8 @@ private void deleteNativeObject(Object rendererObject, NativeObject obj, NativeO
                 // Unregister it from cleanup list.
                 NativeObjectRef ref2 = refMap.remove(obj.getUniqueId());
                 if (ref2 == null) {
-                    throw new IllegalArgumentException("This NativeObject is not " + 
-                                                       "registered in this NativeObjectManager");
+                    throw new IllegalArgumentException("The " + obj + " NativeObject is not "
+                            + "registered in this NativeObjectManager");
                 }
 
                 assert ref == null || ref == ref2;

File: jme3-core/src/main/java/com/jme3/material/ShaderGenerationInfo.java
Patch:
@@ -196,7 +196,7 @@ protected ShaderGenerationInfo clone() throws CloneNotSupportedException {
         clone.fragmentUniforms = new ArrayList<>();
         clone.fragmentGlobals = new ArrayList<>();
         clone.unusedNodes = new ArrayList<>();
-
+        clone.varyings = new ArrayList<>();
 
         for (ShaderNodeVariable attribute : attributes) {
             clone.attributes.add(attribute.clone());
@@ -208,7 +208,6 @@ protected ShaderGenerationInfo clone() throws CloneNotSupportedException {
 
         clone.vertexGlobal = vertexGlobal.clone();
 
-
         for (ShaderNodeVariable varying : varyings) {
             clone.varyings.add(varying.clone());
         }

File: jme3-core/src/main/java/com/jme3/material/TechniqueDef.java
Patch:
@@ -801,6 +801,7 @@ public TechniqueDef clone() throws CloneNotSupportedException {
         clone.paramToDefineId.putAll(paramToDefineId);
 
         if (shaderNodes != null) {
+            clone.shaderNodes = new ArrayList<>();
             for (ShaderNode shaderNode : shaderNodes) {
                 clone.shaderNodes.add(shaderNode.clone());
             }

File: jme3-core/src/main/java/com/jme3/scene/Mesh.java
Patch:
@@ -53,7 +53,6 @@
 import com.jme3.util.SafeArrayList;
 import com.jme3.util.clone.Cloner;
 import com.jme3.util.clone.JmeCloneable;
-import com.sun.javaws.exceptions.InvalidArgumentException;
 
 import java.io.IOException;
 import java.nio.*;

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/GltfLoader.java
Patch:
@@ -285,7 +285,7 @@ public Transform readTransforms(JsonObject nodeData) {
             for (int i = 0; i < tmpArray.length; i++) {
                 tmpArray[i] = matrix.get(i).getAsFloat();
             }
-            Matrix4f mat = new Matrix4f(tmpArray);
+            Matrix4f mat = toRowMajor(tmpArray);
             transform.fromTransformMatrix(mat);
             return transform;
         }

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/MaterialAdapter.java
Patch:
@@ -34,6 +34,7 @@ public abstract class MaterialAdapter {
 
     protected void init(AssetManager assetManager) {
         this.assetManager = assetManager;
+        this.reset();
     }
 
     void reset() {

File: jme3-plugins/src/gltf/java/com/jme3/scene/plugins/gltf/MaterialAdapter.java
Patch:
@@ -81,6 +81,7 @@ private VarType getVarType(Object value) {
         if (value instanceof Vector2f) return VarType.Vector2;
         if (value instanceof Matrix3f) return VarType.Matrix3;
         if (value instanceof Matrix4f) return VarType.Matrix4;
+        if (value instanceof String) return VarType.Boolean;
         throw new AssetLoadException("Unsupported material parameter type : " + value.getClass().getSimpleName());
     }
 }

File: jme3-core/src/main/java/com/jme3/shader/UniformBinding.java
Patch:
@@ -174,13 +174,13 @@ public enum UniformBinding {
     FrameRate("float"),
     
     /**
-     * The light position when rendering in multi pass mode
+     * The light direction when rendering in multi pass mode
      * Type: vec4
      */
     LightDirection("vec4"),
     
     /**
-     * The light direction when rendering in multi pass mode
+     * The light position when rendering in multi pass mode
      * Type: vec4
      */
     LightPosition("vec4"),

File: jme3-core/src/main/java/com/jme3/shader/UniformBinding.java
Patch:
@@ -174,13 +174,13 @@ public enum UniformBinding {
     FrameRate("float"),
     
     /**
-     * The light position when rendering in multi pass mode
+     * The light direction when rendering in multi pass mode
      * Type: vec4
      */
     LightDirection("vec4"),
     
     /**
-     * The light direction when rendering in multi pass mode
+     * The light position when rendering in multi pass mode
      * Type: vec4
      */
     LightPosition("vec4"),

File: jme3-effects/src/main/java/com/jme3/post/filters/BloomFilter.java
Patch:
@@ -52,7 +52,7 @@
  * There are 2 mode : Scene and Objects.<br>
  * Scene mode extracts the bright parts of the scene to make them glow<br>
  * Object mode make objects glow according to their material's glowMap or their GlowColor<br>
- * @see <a href="http://jmonkeyengine.org/wiki/doku.php/jme3:advanced:bloom_and_glow">advanced:bloom_and_glow</a> for more details
+ * @see <a href="http://jmonkeyengine.github.io/wiki/jme3/advanced/bloom_and_glow.html">advanced:bloom_and_glow</a> for more details
  * 
  * @author Rémy Bouquet aka Nehon
  */

File: jme3-effects/src/main/java/com/jme3/post/filters/BloomFilter.java
Patch:
@@ -52,7 +52,7 @@
  * There are 2 mode : Scene and Objects.<br>
  * Scene mode extracts the bright parts of the scene to make them glow<br>
  * Object mode make objects glow according to their material's glowMap or their GlowColor<br>
- * @see <a href="http://jmonkeyengine.org/wiki/doku.php/jme3:advanced:bloom_and_glow">advanced:bloom_and_glow</a> for more details
+ * @see <a href="http://jmonkeyengine.github.io/wiki/jme3/advanced/bloom_and_glow.html">advanced:bloom_and_glow</a> for more details
  * 
  * @author Rémy Bouquet aka Nehon
  */

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -506,6 +506,7 @@ public Geometry clone(boolean cloneMaterial) {
     /**
      *  The old clone() method that did not use the new Cloner utility.
      */
+    @Override
     public Geometry oldClone(boolean cloneMaterial) {
         Geometry geomClone = (Geometry) super.clone(cloneMaterial);
 

File: jme3-core/src/main/java/com/jme3/shader/Glsl100ShaderGenerator.java
Patch:
@@ -243,7 +243,7 @@ protected void generateNodeMainSection(StringBuilder source, ShaderNode shaderNo
             //all variables fed with a matparam or world param are replaced but the matparam itself
             //it avoids issue with samplers that have to be uniforms, and it optimize a but the shader code.
             if (isWorldOrMaterialParam(mapping.getRightVariable())) {
-                nodeSource = replace(nodeSource, mapping.getLeftVariable(), mapping.getRightVariable().getName());
+                nodeSource = replace(nodeSource, mapping.getLeftVariable(), mapping.getRightVariable().getPrefix() + mapping.getRightVariable().getName());
             } else {
                 if (mapping.getLeftVariable().getType().startsWith("sampler")) {
                     throw new IllegalArgumentException("a Sampler must be a uniform");
@@ -338,6 +338,7 @@ protected void declareVariable(StringBuilder source, ShaderNodeVariable var, Str
             source.append(var.getNameSpace());
             source.append("_");
         }
+        source.append(var.getPrefix());
         source.append(var.getName());
         if (var.getMultiplicity() != null) {
             source.append("[");

File: jme3-core/src/main/java/com/jme3/system/NullContext.java
Patch:
@@ -96,8 +96,8 @@ protected void deinitInThread(){
         }
     }
 
-    private static long timeThen;
-    private static long timeLate;
+    private long timeThen;
+    private long timeLate;
 
     public void sync(int fps) {
         long timeNow;

File: jme3-vr/src/main/java/com/jme3/input/vr/OpenVRInput.java
Patch:
@@ -411,7 +411,8 @@ public void updateConnectedControllers() {
     	if (environment != null){
     		controllerCount = 0;
         	for(int i=0;i<JOpenVRLibrary.k_unMaxTrackedDeviceCount;i++) {
-        		if( ((OpenVR)environment.getVRHardware()).getVRSystem().GetTrackedDeviceClass.apply(i) == JOpenVRLibrary.ETrackedDeviceClass.ETrackedDeviceClass_TrackedDeviceClass_Controller || ((OpenVR)environment.getVRHardware()).getVRSystem().GetTrackedDeviceClass.apply(i) == JOpenVRLibrary.ETrackedDeviceClass.ETrackedDeviceClass_TrackedDeviceClass_GenericTracker) {
+                    int classCallback = ((OpenVR)environment.getVRHardware()).getVRSystem().GetTrackedDeviceClass.apply(i);
+        		if( classCallback == JOpenVRLibrary.ETrackedDeviceClass.ETrackedDeviceClass_TrackedDeviceClass_Controller || classCallback == JOpenVRLibrary.ETrackedDeviceClass.ETrackedDeviceClass_TrackedDeviceClass_GenericTracker) {
         			
         			String controllerName   = "Unknown";
     				String manufacturerName = "Unknown";
@@ -444,7 +445,7 @@ public void updateControllerStates() {
     	if (environment != null){
         	for(int i=0;i<controllerCount;i++) {
         		int index = controllerIndex[i];
-        		((OpenVR)environment.getVRHardware()).getVRSystem().GetControllerState.apply(index, cStates[index], 5);
+        		((OpenVR)environment.getVRHardware()).getVRSystem().GetControllerState.apply(index, cStates[index], 64);
         		cStates[index].readField("ulButtonPressed");
         		cStates[index].readField("rAxis");
         		needsNewVelocity[index] = true;

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonInterBoneWire.java
Patch:
@@ -73,7 +73,6 @@ public SkeletonInterBoneWire(Skeleton skeleton, Map<Integer, Float> boneLengths)
         }
 
         this.setMode(Mode.Points);
-        this.setPointSize(1);
         this.boneLengths = boneLengths;
 
         VertexBuffer pb = new VertexBuffer(Type.Position);

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonPoints.java
Patch:
@@ -84,7 +84,6 @@ public SkeletonPoints(Skeleton skeleton, Map<Integer, Float> boneLengths) {
         pb.setupData(Usage.Stream, 3, Format.Float, fpb);
         this.setBuffer(pb);
 
-        this.setPointSize(7);
         this.updateCounts();
 
     }

File: jme3-examples/src/main/java/jme3test/model/anim/TestAnimBlendBug.java
Patch:
@@ -115,7 +115,8 @@ public void simpleInitApp() {
         SkeletonDebugger skeletonDebug = new SkeletonDebugger("skeleton1", control1.getSkeleton());
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         mat.getAdditionalRenderState().setWireframe(true);
-        mat.setColor("Color", ColorRGBA.Green);
+        mat.setColor("Color", ColorRGBA.Red);
+        mat.setFloat("PointSize", 7f);
         mat.getAdditionalRenderState().setDepthTest(false);
         skeletonDebug.setMaterial(mat);
         model1.attachChild(skeletonDebug);

File: jme3-examples/src/main/java/jme3test/model/anim/TestOgreComplexAnim.java
Patch:
@@ -106,6 +106,7 @@ public void simpleInitApp() {
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         mat.getAdditionalRenderState().setWireframe(true);
         mat.setColor("Color", ColorRGBA.Green);
+        mat.setFloat("PointSize", 7f);
         mat.getAdditionalRenderState().setDepthTest(false);
         skeletonDebug.setMaterial(mat);
 

File: jme3-vr/src/main/java/com/jme3/app/VREnvironment.java
Patch:
@@ -73,7 +73,7 @@ public VREnvironment(AppSettings settings){
     	
         guiManager   = new VRGuiManager(this);
         mouseManager = new VRMouseManager(this);
-        dummyCam = new Camera(settings.getWidth(), settings.getHeight());
+//        dummyCam = new Camera(settings.getWidth(), settings.getHeight());
         
         processSettings();
     }
@@ -332,7 +332,7 @@ public Application getApplication(){
      */
     public Camera getCamera() {
         if( isInVR() && getVRViewManager() != null && getVRViewManager().getLeftCamera() != null ) {
-            return dummyCam;
+            return getDummyCamera();
         }
         
         return application.getCamera();
@@ -353,7 +353,6 @@ public Camera getDummyCamera(){
     			throw new IllegalStateException("VR environment is not attached to any application.");
     		}
     	}
-    	
     	return dummyCam;
     }
     

File: jme3-vr/src/main/java/com/jme3/app/VREnvironment.java
Patch:
@@ -73,7 +73,7 @@ public VREnvironment(AppSettings settings){
     	
         guiManager   = new VRGuiManager(this);
         mouseManager = new VRMouseManager(this);
-        dummyCam = new Camera();
+        dummyCam = new Camera(settings.getWidth(), settings.getHeight());
         
         processSettings();
     }
@@ -347,7 +347,7 @@ public Camera getDummyCamera(){
     			if (application.getCamera() != null){
     				dummyCam = application.getCamera().clone();
     			} else {
-    				return new Camera();
+    				return new Camera(settings.getWidth(), settings.getHeight());
     			}
     		} else {
     			throw new IllegalStateException("VR environment is not attached to any application.");

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -982,7 +982,7 @@ public boolean isGammaCorrection() {
      * size window.
      */
     public void setResizable(boolean resizable) {
-        putBoolean("Resizable", true);
+        putBoolean("Resizable", resizable);
     }
     
     /**

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonInterBoneWire.java
Patch:
@@ -73,7 +73,6 @@ public SkeletonInterBoneWire(Skeleton skeleton, Map<Integer, Float> boneLengths)
         }
 
         this.setMode(Mode.Points);
-        this.setPointSize(1);
         this.boneLengths = boneLengths;
 
         VertexBuffer pb = new VertexBuffer(Type.Position);

File: jme3-core/src/main/java/com/jme3/scene/debug/SkeletonPoints.java
Patch:
@@ -84,7 +84,6 @@ public SkeletonPoints(Skeleton skeleton, Map<Integer, Float> boneLengths) {
         pb.setupData(Usage.Stream, 3, Format.Float, fpb);
         this.setBuffer(pb);
 
-        this.setPointSize(7);
         this.updateCounts();
 
     }

File: jme3-examples/src/main/java/jme3test/model/anim/TestAnimBlendBug.java
Patch:
@@ -115,7 +115,8 @@ public void simpleInitApp() {
         SkeletonDebugger skeletonDebug = new SkeletonDebugger("skeleton1", control1.getSkeleton());
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         mat.getAdditionalRenderState().setWireframe(true);
-        mat.setColor("Color", ColorRGBA.Green);
+        mat.setColor("Color", ColorRGBA.Red);
+        mat.setFloat("PointSize", 7f);
         mat.getAdditionalRenderState().setDepthTest(false);
         skeletonDebug.setMaterial(mat);
         model1.attachChild(skeletonDebug);

File: jme3-examples/src/main/java/jme3test/model/anim/TestOgreComplexAnim.java
Patch:
@@ -106,6 +106,7 @@ public void simpleInitApp() {
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         mat.getAdditionalRenderState().setWireframe(true);
         mat.setColor("Color", ColorRGBA.Green);
+        mat.setFloat("PointSize", 7f);
         mat.getAdditionalRenderState().setDepthTest(false);
         skeletonDebug.setMaterial(mat);
 

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -982,7 +982,7 @@ public boolean isGammaCorrection() {
      * size window.
      */
     public void setResizable(boolean resizable) {
-        putBoolean("Resizable", true);
+        putBoolean("Resizable", resizable);
     }
     
     /**

File: jme3-examples/src/main/java/jme3test/light/TestSpotLightTerrain.java
Patch:
@@ -98,7 +98,7 @@ public void simpleInitApp() {
         ambLight.setColor(ColorRGBA.Black);
         rootNode.addLight(ambLight);
 
-        cam.setLocation(new Vector3f(-41.219646f, -84.8363f, -171.67267f));
+        cam.setLocation(new Vector3f(-41.219646f, 0.8363f, -171.67267f));
         cam.setRotation(new Quaternion(-0.04562731f, 0.89917684f, -0.09668826f, -0.4243236f));
         sl.setDirection(cam.getDirection());
         sl.setPosition(cam.getLocation());

File: jme3-core/src/main/java/com/jme3/post/DetailedProfiler.java
Patch:
@@ -215,8 +215,8 @@ public static class StatLine {
         private int startCursor = 0;
         private int cpuCursor = 0;
         private int gpuCursor = 0;
-        private int cpuSum = 0;
-        private int gpuSum = 0;
+        private long cpuSum = 0;
+        private long gpuSum = 0;
         private long lastValue = 0;
         private int nbFramesCpu;
         private int nbFramesGpu;

File: jme3-core/src/main/java/com/jme3/post/DetailedProfilerState.java
Patch:
@@ -263,10 +263,10 @@ public boolean setColor(BitmapText t, double value, double totalTime, boolean is
         boolean dimmed = isParent && expended;
         boolean insignificant = false;
 
-        if (value > 1000000000.0 / 60.0) {
-            t.setColor(dimmed ? dimmedOrange : ColorRGBA.Orange);
-        } else if (value > 1000000000f / 30f) {
+        if (value > 1000000000.0 / 30.0) {
             t.setColor(dimmed ? dimmedRed : ColorRGBA.Red);
+        } else if (value > 1000000000.0 / 60.0) {
+            t.setColor(dimmed ? dimmedOrange : ColorRGBA.Orange);
         } else if (value > totalTime / 3) {
             t.setColor(dimmed ? dimmedGreen : ColorRGBA.Green);
         } else if (value < 30000) {

File: jme3-core/src/main/java/com/jme3/cinematic/events/MotionEvent.java
Patch:
@@ -214,6 +214,7 @@ public void write(JmeExporter ex) throws IOException {
         oc.write(rotation, "rotation", null);
         oc.write(directionType, "directionType", Direction.None);
         oc.write(path, "path", null);
+        oc.write(spatial, "spatial", null);
     }
 
     @Override
@@ -225,6 +226,7 @@ public void read(JmeImporter im) throws IOException {
         rotation = (Quaternion) in.readSavable("rotation", null);
         directionType = in.readEnum("directionType", Direction.class, Direction.None);
         path = (MotionPath) in.readSavable("path", null);
+        spatial = (Spatial) in.readSavable("spatial", null);
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/cinematic/events/MotionEvent.java
Patch:
@@ -214,6 +214,7 @@ public void write(JmeExporter ex) throws IOException {
         oc.write(rotation, "rotation", null);
         oc.write(directionType, "directionType", Direction.None);
         oc.write(path, "path", null);
+        oc.write(spatial, "spatial", null);
     }
 
     @Override
@@ -225,6 +226,7 @@ public void read(JmeImporter im) throws IOException {
         rotation = (Quaternion) in.readSavable("rotation", null);
         directionType = in.readEnum("directionType", Direction.class, Direction.None);
         path = (MotionPath) in.readSavable("path", null);
+        spatial = (Spatial) in.readSavable("spatial", null);
     }
 
     /**

File: jme3-core/src/test/java/com/jme3/asset/LoadShaderSourceTest.java
Patch:
@@ -45,6 +45,7 @@ public void testLoadShaderSource() {
         AssetManager assetManager = new DesktopAssetManager();
         assetManager.registerLocator(null, ClasspathLocator.class);
         assetManager.registerLoader(GLSLLoader.class, "frag");
+        assetManager.registerLoader(GLSLLoader.class, "glsllib");
         String showNormals = (String) assetManager.loadAsset("Common/MatDefs/Misc/ShowNormals.frag");
         System.out.println(showNormals);
     }

File: jme3-core/src/main/java/com/jme3/math/Vector4f.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2012 jMonkeyEngine
+ * Copyright (c) 2009-2017 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -317,7 +317,7 @@ public float dot(Vector4f vec) {
     public Vector4f project(Vector4f other){
         float n = this.dot(other); // A . B
         float d = other.lengthSquared(); // |B|^2
-        return new Vector4f(other).normalizeLocal().multLocal(n/d);
+        return new Vector4f(other).multLocal(n/d);
     }
 
     /**

File: jme3-examples/src/main/java/jme3test/asset/TestOnlineJar.java
Patch:
@@ -60,9 +60,9 @@ public void simpleInitApp() {
 
         Geometry quad = new Geometry("Textured Quad", quadMesh);
         
-        assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/town.zip", 
+        assetManager.registerLocator("https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/town.zip", 
                                      HttpZipLocator.class);
-        assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/wildhouse.zip", 
+        assetManager.registerLocator("https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/wildhouse.zip", 
                                      HttpZipLocator.class);
 
         Picture pic1 = new Picture("Picture1");

File: jme3-examples/src/main/java/jme3test/asset/TestUrlLoading.java
Patch:
@@ -60,7 +60,7 @@ public void simpleInitApp() {
 
         Geometry quad = new Geometry("Textured Quad", quadMesh);
 
-        assetManager.registerLocator("https://jmonkeyengine.googlecode.com/svn/BookSamples/assets/Textures/",
+        assetManager.registerLocator("https://raw.githubusercontent.com/jMonkeyEngine/BookSamples/master/assets/Textures/",
                                 UrlLocator.class);
         TextureKey key = new TextureKey("mucha-window.png", false);
         key.setGenerateMips(true);

File: jme3-examples/src/main/java/jme3test/material/TestColoredTexture.java
Patch:
@@ -57,7 +57,7 @@ public void simpleInitApp() {
         Geometry quad = new Geometry("Quad", quadMesh);
         quad.setQueueBucket(Bucket.Gui);
 
-        mat = new Material(assetManager, "Common/MatDefs/Misc/ColoredTextured.j3md");
+        mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         mat.setTexture("ColorMap", assetManager.loadTexture("Textures/ColoredTex/Monkey.png"));
         quad.setMaterial(mat);
         guiNode.attachChildAt(quad, 0);

File: jme3-examples/src/main/java/jme3test/scene/TestSceneLoading.java
Patch:
@@ -75,7 +75,7 @@ public void simpleInitApp() {
         // create the geometry and attach it
         // load the level from zip or http zip
         if (useHttp) {
-            assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/wildhouse.zip", HttpZipLocator.class);
+            assetManager.registerLocator("https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/wildhouse.zip", HttpZipLocator.class);
         } else {
             assetManager.registerLocator("wildhouse.zip", ZipLocator.class);
         }

File: jme3-examples/src/main/java/jme3test/terrain/TerrainGridAlphaMapTest.java
Patch:
@@ -75,7 +75,7 @@ public void simpleInitApp() {
 
         File file = new File("TerrainGridTestData.zip");
         if (!file.exists()) {
-            assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/TerrainGridTestData.zip", HttpZipLocator.class);
+            assetManager.registerLocator("https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/TerrainGridTestData.zip", HttpZipLocator.class);
         } else {
             assetManager.registerLocator("TerrainGridTestData.zip", ZipLocator.class);
         }

File: jme3-examples/src/main/java/jme3test/terrain/TerrainGridTest.java
Patch:
@@ -48,7 +48,7 @@ public static void main(final String[] args) {
     public void simpleInitApp() {
         File file = new File("TerrainGridTestData.zip");
         if (!file.exists()) {
-            assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/TerrainGridTestData.zip", HttpZipLocator.class);
+            assetManager.registerLocator("https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/TerrainGridTestData.zip", HttpZipLocator.class);
         } else {
             assetManager.registerLocator("TerrainGridTestData.zip", ZipLocator.class);
         }

File: jme3-examples/src/main/java/jme3test/water/TestSceneWater.java
Patch:
@@ -76,7 +76,7 @@ public void simpleInitApp() {
         // create the geometry and attach it
         // load the level from zip or http zip
         if (useHttp) {
-            assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/wildhouse.zip", HttpZipLocator.class);
+            assetManager.registerLocator("https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/jmonkeyengine/wildhouse.zip", HttpZipLocator.class);
         } else {
             assetManager.registerLocator("wildhouse.zip", ZipLocator.class);
         }

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikktspaceTangentGenerator.java
Patch:
@@ -512,7 +512,7 @@ static void MergeVertsSlow(int piTriList_in_and_out[], final MikkTSpaceContext m
         }
     }
 
-    //TODO Nehon : Not used...seemsit's used in the original version if the structure to store the data in the regular method failed...
+    //TODO Nehon : Not used...seems it's used in the original version if the structure to store the data in the regular method failed...
     static void generateSharedVerticesIndexListSlow(int piTriList_in_and_out[], final MikkTSpaceContext mikkTSpace, final int iNrTrianglesIn) {
         int iNumUniqueVerts = 0;
         for (int t = 0; t < iNrTrianglesIn; t++) {

File: jme3-core/src/main/java/com/jme3/font/BitmapText.java
Patch:
@@ -50,7 +50,7 @@ public class BitmapText extends Node {
     private BitmapFont font;
     private StringBlock block;
     private boolean needRefresh = true;
-    private final BitmapTextPage[] textPages;
+    private BitmapTextPage[] textPages;
     private Letters letters;
 
     public BitmapText(BitmapFont font) {
@@ -86,6 +86,7 @@ public BitmapText clone() {
     public void cloneFields( Cloner cloner, Object original ) {
         super.cloneFields(cloner, original);
 
+        textPages = textPages.clone();
         for( int i = 0; i < textPages.length; i++ ) {
             textPages[i] = cloner.clone(textPages[i]);
         }

File: jme3-core/src/main/java/com/jme3/font/BitmapText.java
Patch:
@@ -105,7 +105,7 @@ public void cloneFields( Cloner cloner, Object original ) {
         // Change in behavior: The 'letters' field was not cloned or recreated
         // before.  I'm not sure how this worked and suspect BitmapText was just
         // not cloneable if you planned to change the text later. -pspeed
-        this.letters = new Letters(font, block, letters.getQuad().isRightToLeft());
+        this.letters = new Letters(font, this.block, letters.getQuad().isRightToLeft());
 
         // Just noticed BitmapText is not even writable/readable really...
         // so I guess cloning doesn't come up that often.

File: jme3-core/src/main/java/com/jme3/scene/GeometryGroupNode.java
Patch:
@@ -9,9 +9,6 @@
 public abstract class GeometryGroupNode extends Node {
     
     public static int getGeometryStartIndex(Geometry geom) {
-        if (geom.startIndex == -1) {
-            throw new AssertionError();
-        }
         return geom.startIndex;
     }
     

File: jme3-core/src/main/java/com/jme3/shadow/DirectionalLightShadowRenderer.java
Patch:
@@ -145,7 +145,7 @@ protected void updateShadowCams(Camera viewCam) {
         float frustumNear = Math.max(viewCam.getFrustumNear(), 0.001f);
         ShadowUtil.updateFrustumPoints(viewCam, frustumNear, zFar, 1.0f, points);
 
-        //shadowCam.setDirection(direction);
+        shadowCam.setFrustumFar(zFar);
         shadowCam.getRotation().lookAt(light.getDirection(), shadowCam.getUp());
         shadowCam.update();
         shadowCam.updateViewProjection();

File: jme3-core/src/main/java/com/jme3/shadow/ShadowUtil.java
Patch:
@@ -465,7 +465,7 @@ public static void updateShadowCamera(ViewPort viewPort,
         shadowCam.setProjectionMatrix(null);
 
         if (ortho) {
-            shadowCam.setFrustum(-1, 1, -1, 1, 1, -1);
+            shadowCam.setFrustum(-shadowCam.getFrustumFar(), shadowCam.getFrustumFar(), -1, 1, 1, -1);
         }
 
         // create transform to rotate points to viewspace        

File: jme3-core/src/main/java/com/jme3/math/FastMath.java
Patch:
@@ -981,9 +981,9 @@ public static short convertFloatToHalf(float flt) {
             return 0x7bff;
         } else if (flt < -65504f) {
             return (short) (0x7bff | 0x8000);
-        } else if (flt > 0f && flt < 5.96046E-8f) {
+        } else if (flt > 0f && flt < 3.054738E-5f) {
             return 0x0001;
-        } else if (flt < 0f && flt > -5.96046E-8f) {
+        } else if (flt < 0f && flt > -3.054738E-5f) {
             return (short) 0x8001;
         }
 

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -725,7 +725,7 @@ public int getEdgesThickness() {
     }
 
     /**
-     * Sets the shadow edges thickness. default is 1, setting it to lower values
+     * Sets the shadow edges thickness. default is 10, setting it to lower values
      * can help to reduce the jagged effect of the shadow edges
      *
      * @param edgesThickness

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -94,7 +94,7 @@ public abstract class AbstractShadowRenderer implements SceneProcessor, Savable
     protected CompareMode shadowCompareMode = CompareMode.Hardware;
     protected Picture[] dispPic;
     protected RenderState forcedRenderState = new RenderState();
-    protected Boolean renderBackFacesShadows;
+    protected Boolean renderBackFacesShadows = true;
 
     /**
      * true if the fallback material should be used, otherwise false

File: jme3-core/src/main/java/com/jme3/math/FastMath.java
Patch:
@@ -942,8 +942,7 @@ public static boolean approximateEquals(float a, float b) {
      * Converts a single precision (32 bit) floating point value
      * into half precision (16 bit).
      *
-     * <p>Source: <a href="http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf">
-     * http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf</a><br><strong>broken link</strong>
+     * <p>Source: <a href="ftp://www.fox-toolkit.org/pub/fasthalffloatconversion.pdf</a>
      *
      * @param half The half floating point value as a short.
      * @return floating point value of the half.

File: jme3-core/src/main/java/com/jme3/light/SpotLight.java
Patch:
@@ -102,7 +102,7 @@ public SpotLight(Vector3f position, Vector3f direction, float range) {
         this();
         setPosition(position);
         setDirection(direction);
-        this.spotRange = range;
+        setSpotRange(range);
     }
 
     /**
@@ -133,7 +133,7 @@ public SpotLight(Vector3f position, Vector3f direction, float range, ColorRGBA c
         computeAngleParameters();
         setPosition(position);
         setDirection(direction);
-        this.spotRange = range;
+        setSpotRange(range);
     }
     
     /**
@@ -158,7 +158,7 @@ public SpotLight(Vector3f position, Vector3f direction, float range, ColorRGBA c
         computeAngleParameters();
         setPosition(position);
         setDirection(direction);
-        this.spotRange = range;
+        setSpotRange(range);
     }  
     
 

File: jme3-core/src/main/java/com/jme3/math/Triangle.java
Patch:
@@ -44,7 +44,7 @@
  * @author Mark Powell
  * @author Joshua Slack
  */
-public class Triangle extends AbstractTriangle implements Savable, java.io.Serializable {
+public class Triangle extends AbstractTriangle implements Savable, Cloneable, java.io.Serializable {
 
     static final long serialVersionUID = 1;
 

File: jme3-core/src/main/java/com/jme3/renderer/Camera.java
Patch:
@@ -991,7 +991,7 @@ public void setViewPort(float left, float right, float bottom, float top) {
      * Returns the pseudo distance from the given position to the near
      * plane of the camera. This is used for render queue sorting.
      * @param pos The position to compute a distance to.
-     * @return Distance from the far plane to the point.
+     * @return Distance from the near plane to the point.
      */
     public float distanceToNearPlane(Vector3f pos) {
         return worldPlane[NEAR_PLANE].pseudoDistance(pos);

File: jme3-core/src/main/java/com/jme3/util/clone/JmeCloneable.java
Patch:
@@ -49,7 +49,7 @@
  *
  *  <p>Cloning of a JmeCloneable object is done in two parts.  First,
  *  the standard Java clone() method is called to create a shallow clone
- *  of the object.  Second, the cloner wil lcall the cloneFields() method
+ *  of the object.  Second, the cloner will call the cloneFields() method
  *  to let the object deep clone any of its fields that should be cloned.</p>
  *
  *  <p>This two part process is necessary to facilitate circular references.

File: jme3-ios/src/main/java/com/jme3/system/ios/IosHarness.java
Patch:
@@ -31,15 +31,15 @@
  */
 package com.jme3.system.ios;
 
-import com.jme3.app.Application;
+import com.jme3.app.LegacyApplication;
 import com.jme3.system.JmeSystem;
 
 /**
  * @author normenhansen
  */
 public abstract class IosHarness extends ObjcNativeObject {
 
-    protected Application app;
+    protected LegacyApplication app;
 
     public IosHarness(long appDelegate) {
         super(appDelegate);

File: jme3-core/src/main/java/com/jme3/renderer/Camera.java
Patch:
@@ -991,7 +991,7 @@ public void setViewPort(float left, float right, float bottom, float top) {
      * Returns the pseudo distance from the given position to the near
      * plane of the camera. This is used for render queue sorting.
      * @param pos The position to compute a distance to.
-     * @return Distance from the far plane to the point.
+     * @return Distance from the near plane to the point.
      */
     public float distanceToNearPlane(Vector3f pos) {
         return worldPlane[NEAR_PLANE].pseudoDistance(pos);

File: jme3-core/src/main/java/com/jme3/renderer/Camera.java
Patch:
@@ -991,7 +991,7 @@ public void setViewPort(float left, float right, float bottom, float top) {
      * Returns the pseudo distance from the given position to the near
      * plane of the camera. This is used for render queue sorting.
      * @param pos The position to compute a distance to.
-     * @return Distance from the far plane to the point.
+     * @return Distance from the near plane to the point.
      */
     public float distanceToNearPlane(Vector3f pos) {
         return worldPlane[NEAR_PLANE].pseudoDistance(pos);

File: jme3-core/src/main/java/com/jme3/math/Triangle.java
Patch:
@@ -44,7 +44,7 @@
  * @author Mark Powell
  * @author Joshua Slack
  */
-public class Triangle extends AbstractTriangle implements Savable, java.io.Serializable {
+public class Triangle extends AbstractTriangle implements Savable, Cloneable, java.io.Serializable {
 
     static final long serialVersionUID = 1;
 

File: jme3-core/src/main/java/com/jme3/math/Triangle.java
Patch:
@@ -44,7 +44,7 @@
  * @author Mark Powell
  * @author Joshua Slack
  */
-public class Triangle extends AbstractTriangle implements Savable, java.io.Serializable {
+public class Triangle extends AbstractTriangle implements Savable, Cloneable, java.io.Serializable {
 
     static final long serialVersionUID = 1;
 

File: jme3-core/src/main/java/com/jme3/util/clone/JmeCloneable.java
Patch:
@@ -49,7 +49,7 @@
  *
  *  <p>Cloning of a JmeCloneable object is done in two parts.  First,
  *  the standard Java clone() method is called to create a shallow clone
- *  of the object.  Second, the cloner wil lcall the cloneFields() method
+ *  of the object.  Second, the cloner will call the cloneFields() method
  *  to let the object deep clone any of its fields that should be cloned.</p>
  *
  *  <p>This two part process is necessary to facilitate circular references.

File: jme3-core/src/main/java/com/jme3/util/clone/JmeCloneable.java
Patch:
@@ -49,7 +49,7 @@
  *
  *  <p>Cloning of a JmeCloneable object is done in two parts.  First,
  *  the standard Java clone() method is called to create a shallow clone
- *  of the object.  Second, the cloner wil lcall the cloneFields() method
+ *  of the object.  Second, the cloner will call the cloneFields() method
  *  to let the object deep clone any of its fields that should be cloned.</p>
  *
  *  <p>This two part process is necessary to facilitate circular references.

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -961,8 +961,6 @@ public void render(Geometry geometry, LightList lights, RenderManager renderMana
         renderManager.updateUniformBindings(shader);
         
         // Set material parameters
-
-        //TODO RRemove the unit when texture units are handled in the Uniform
         int unit = updateShaderMaterialParameters(renderer, shader, overrides, renderManager.getForcedMatParams());
 
         // Clear any uniforms not changed by material.

File: jme3-examples/src/main/java/jme3test/material/TestParallaxPBR.java
Patch:
@@ -57,7 +57,7 @@ public static void main(String[] args) {
     }
 
     public void setupSkyBox() {
-        rootNode.attachChild(SkyFactory.createSky(assetManager, "Scenes/Beach/FullskiesSunset0068.dds", false));
+        rootNode.attachChild(SkyFactory.createSky(assetManager, "Scenes/Beach/FullskiesSunset0068.dds", SkyFactory.EnvMapType.CubeMap));
     }
     DirectionalLight dl;
 

File: jme3-examples/src/main/java/jme3test/light/TestDirectionalLightShadow.java
Patch:
@@ -217,7 +217,7 @@ private void initInputs() {
         inputManager.addMapping("fwd", new KeyTrigger(KeyInput.KEY_PGUP));
         inputManager.addMapping("back", new KeyTrigger(KeyInput.KEY_PGDN));
         inputManager.addMapping("pp", new KeyTrigger(KeyInput.KEY_P));
-        inputManager.addMapping("backShadows", new KeyTrigger(KeyInput.KEY_B));
+        inputManager.addMapping("backShadows", new KeyTrigger(KeyInput.KEY_K));
 
 
         inputManager.addListener(this, "lambdaUp", "lambdaDown", "ThicknessUp", "ThicknessDown",

File: jme3-core/src/main/java/com/jme3/util/ReflectionAllocator.java
Patch:
@@ -82,7 +82,7 @@ private static Method loadMethod(String className, String methodName) {
             return null; // the direct buffer implementation was not found
         } catch (Throwable t) {
         	if (t.getClass().getName().equals("java.lang.reflect.InaccessibleObjectException")) {
-        		return null;// the class is in an exported module
+        		return null;// the class is in an unexported module
         	} else {
         		throw t;
         	}

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -1594,7 +1594,7 @@ public String toString() {
                 + "\noffsetFactor=" + offsetFactor
                 + "\noffsetUnits=" + offsetUnits
                 + "\nlineWidth=" + lineWidth
-                + (blendMode.equals(BlendMode.Custom)? "\ncustomBlendFactors=("+sfactorRGB+", "+dfactorRGB+", "+sfactorAlpha+", "+dfactorAlpha+")":""
-                +"\n]");
+                + (blendMode.equals(BlendMode.Custom)? "\ncustomBlendFactors=("+sfactorRGB+", "+dfactorRGB+", "+sfactorAlpha+", "+dfactorAlpha+")":"")
+                +"\n]";
     }
 }

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -1594,8 +1594,7 @@ public String toString() {
                 + "\noffsetFactor=" + offsetFactor
                 + "\noffsetUnits=" + offsetUnits
                 + "\nlineWidth=" + lineWidth
-                + (blendMode.equals(BlendMode.Custom)?
-                "\ncustomBlendFactors=("+sfactorRGB+", "+dfactorRGB+", "+sfactorAlpha+", "+dfactorAlpha+")":
-                "\n]");
+                + (blendMode.equals(BlendMode.Custom)? "\ncustomBlendFactors=("+sfactorRGB+", "+dfactorRGB+", "+sfactorAlpha+", "+dfactorAlpha+")":""
+                +"\n]");
     }
 }

File: jme3-core/src/main/java/com/jme3/util/ReflectionAllocator.java
Patch:
@@ -59,8 +59,8 @@ public final class ReflectionAllocator implements BufferAllocator {
 			viewedBufferMethod = loadMethod("sun.nio.ch.DirectBuffer", "attachment");
 		}
 
-		// Apache Harmony
-		ByteBuffer bb = BufferUtils.createByteBuffer(1);
+		// Apache Harmony (allocated directly, to not trigger allocator used logic in BufferUtils)
+		ByteBuffer bb = ByteBuffer.allocateDirect(1);
 		Class<?> clazz = bb.getClass();
 		try {
 			freeMethod = clazz.getMethod("free");

File: jme3-core/src/main/java/com/jme3/util/ReflectionAllocator.java
Patch:
@@ -60,7 +60,7 @@ public final class ReflectionAllocator implements BufferAllocator {
 		}
 
 		// Apache Harmony
-		ByteBuffer bb = ByteBuffer.allocateDirect(1);
+		ByteBuffer bb = BufferUtils.createByteBuffer(1);
 		Class<?> clazz = bb.getClass();
 		try {
 			freeMethod = clazz.getMethod("free");

File: jme3-core/src/main/java/com/jme3/util/ReflectionAllocator.java
Patch:
@@ -60,7 +60,7 @@ public final class ReflectionAllocator implements BufferAllocator {
 		}
 
 		// Apache Harmony
-		ByteBuffer bb = ByteBuffer.allocateDirect(1);
+		ByteBuffer bb = BufferUtils.createByteBuffer(1);
 		Class<?> clazz = bb.getClass();
 		try {
 			freeMethod = clazz.getMethod("free");

File: jme3-core/src/main/java/com/jme3/util/ReflectionAllocator.java
Patch:
@@ -60,7 +60,7 @@ public final class ReflectionAllocator implements BufferAllocator {
 		}
 
 		// Apache Harmony
-		ByteBuffer bb = BufferUtils.createByteBuffer(1);
+		ByteBuffer bb = ByteBuffer.allocateDirect(1);
 		Class<?> clazz = bb.getClass();
 		try {
 			freeMethod = clazz.getMethod("free");

File: jme3-core/src/main/java/com/jme3/util/ReflectionAllocator.java
Patch:
@@ -60,7 +60,7 @@ public final class ReflectionAllocator implements BufferAllocator {
 		}
 
 		// Apache Harmony
-		ByteBuffer bb = BufferUtils.createByteBuffer(1);
+		ByteBuffer bb = ByteBuffer.allocateDirect(1);
 		Class<?> clazz = bb.getClass();
 		try {
 			freeMethod = clazz.getMethod("free");

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -778,7 +778,7 @@ private int applyOverrides(Renderer renderer, Shader shader, SafeArrayList<MatPa
         return unit;
     }
 
-    private void updateShaderMaterialParameters(Renderer renderer, Shader shader,
+    private int updateShaderMaterialParameters(Renderer renderer, Shader shader,
                  SafeArrayList<MatParamOverride> worldOverrides, SafeArrayList<MatParamOverride> forcedOverrides) {
 
         int unit = 0;

File: jme3-core/src/main/java/com/jme3/animation/SkeletonControl.java
Patch:
@@ -255,7 +255,8 @@ private void controlRenderHardware() {
                     // is operating on this material, in that case, user
                     // is sharing materials between models which is NOT allowed
                     // when hardware skinning used.
-                    throw new UnsupportedOperationException(
+                    
+                    Logger.getLogger(SkeletonControl.class.getName()).log(Level.SEVERE,
                             "Material instances cannot be shared when hardware skinning is used. " +
                             "Ensure all models use unique material instances."
                     );

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -83,7 +83,7 @@ public class RenderManager {
     private Material forcedMaterial = null;
     private String forcedTechnique = null;
     private RenderState forcedRenderState = null;
-    private final List<MatParamOverride> forcedOverrides = new ArrayList<>();
+    private final SafeArrayList<MatParamOverride> forcedOverrides = new SafeArrayList<>(MatParamOverride.class);
     private int viewX, viewY, viewWidth, viewHeight;
     private final Matrix4f orthoMatrix = new Matrix4f();
     private final LightList filteredLightList = new LightList(null);
@@ -462,7 +462,7 @@ public void removeForcedMatParam(MatParamOverride override) {
      *
      * @return The forced material parameters.
      */
-    public List<MatParamOverride> getForcedMatParams() {
+    public SafeArrayList<MatParamOverride> getForcedMatParams() {
         return forcedOverrides;
     }
 

File: jme3-core/src/main/java/com/jme3/util/SafeArrayList.java
Patch:
@@ -258,7 +258,7 @@ public boolean equals(Object o) {
             if( o1 == null || !o1.equals(o2) )
                 return false;
         }
-        return !(i1.hasNext() || !i2.hasNext());
+        return !(i1.hasNext() || i2.hasNext());
     }
 
     public int hashCode() {

File: jme3-core/src/main/java/com/jme3/environment/util/EnvMapUtils.java
Patch:
@@ -608,7 +608,7 @@ public static TextureCubeMap generateIrradianceMap(Vector3f[] shCoeffs, int targ
         }
 
         for (int i = 0; i < 6; i++) {
-            ByteBuffer buf = BufferUtils.createByteBuffer(targetMapSize * targetMapSize * store.getImage().getFormat().getBitsPerPixel()/8);
+            ByteBuffer buf = BufferUtils.createByteBuffer(targetMapSize * targetMapSize * irrCubeMap.getImage().getFormat().getBitsPerPixel()/8);
             irrCubeMap.getImage().setData(i, buf);
         }
 

File: jme3-core/src/main/java/com/jme3/environment/util/EnvMapUtils.java
Patch:
@@ -608,7 +608,7 @@ public static TextureCubeMap generateIrradianceMap(Vector3f[] shCoeffs, int targ
         }
 
         for (int i = 0; i < 6; i++) {
-            ByteBuffer buf = BufferUtils.createByteBuffer(targetMapSize * targetMapSize * store.getImage().getFormat().getBitsPerPixel()/8);
+            ByteBuffer buf = BufferUtils.createByteBuffer(targetMapSize * targetMapSize * irrCubeMap.getImage().getFormat().getBitsPerPixel()/8);
             irrCubeMap.getImage().setData(i, buf);
         }
 

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -992,8 +992,8 @@ public void write(JmeExporter ex) throws IOException {
     @Override
     public String toString() {
         return "Material[name=" + name + 
-                ", def=" + def.getName() + 
-                ", tech=" + technique.getDef().getName() + 
+                ", def=" + (def != null ? def.getName() : null) + 
+                ", tech=" + (technique != null && technique.getDef() != null ? technique.getDef().getName() : null) + 
                 "]";
     }
 

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -992,8 +992,8 @@ public void write(JmeExporter ex) throws IOException {
     @Override
     public String toString() {
         return "Material[name=" + name + 
-                ", def=" + def.getName() + 
-                ", tech=" + technique.getDef().getName() + 
+                ", def=" + (def != null ? def.getName() : null) + 
+                ", tech=" + (technique != null && technique.getDef() != null ? technique.getDef().getName() : null) + 
                 "]";
     }
 

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -448,7 +448,7 @@ public void reshape(ViewPort vp, int w, int h) {
         cameraInit = true;
         computeDepth = false;
 
-        if (renderFrameBuffer == null) {
+        if (renderFrameBuffer == null && renderFrameBufferMS == null) {
             outputBuffer = viewPort.getOutputFrameBuffer();
         }
 

File: jme3-core/src/main/java/com/jme3/animation/SkeletonControl.java
Patch:
@@ -255,7 +255,8 @@ private void controlRenderHardware() {
                     // is operating on this material, in that case, user
                     // is sharing materials between models which is NOT allowed
                     // when hardware skinning used.
-                    throw new UnsupportedOperationException(
+                    
+                    Logger.getLogger(SkeletonControl.class.getName()).log(Level.SEVERE,
                             "Material instances cannot be shared when hardware skinning is used. " +
                             "Ensure all models use unique material instances."
                     );

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -458,7 +458,7 @@ public int collideWith(Collidable other, CollisionResults results) {
     }
 
     @Override
-    public void depthFirstTraversal(SceneGraphVisitor visitor) {
+    public void depthFirstTraversal(SceneGraphVisitor visitor, DFSMode mode) {
         visitor.visit(this);
     }
 

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/modifiers/SubdivisionSurfaceModifier.java
Patch:
@@ -209,7 +209,6 @@ private void subdivideCatmullClark(TemporalMesh temporalMesh) {
      * @param temporalMesh
      *            the mesh to be subdivided
      */
-    @SuppressWarnings("unchecked")
     private void subdivideSimple(TemporalMesh temporalMesh) {
         Map<Edge, Integer> edgePoints = new HashMap<Edge, Integer>();
         Map<Face, Integer> facePoints = new HashMap<Face, Integer>();

File: jme3-core/src/main/java/com/jme3/animation/AnimationFactory.java
Patch:
@@ -44,18 +44,18 @@
  * Usage is : <br>
  * - Create the AnimationHelper<br>
  * - add some keyFrames<br>
- * - call the buildAnimation() method that will retruna new Animation<br>
+ * - call the buildAnimation() method that will return a new Animation<br>
  * - add the generated Animation to any existing AnimationControl<br>
  * <br><br>
- * Note that the first keyFrame (index 0) is defaulted with the identy transforms.
+ * Note that the first keyFrame (index 0) is defaulted with the identity transforms.
  * If you want to change that you have to replace this keyFrame with any transform you want.
  * 
  * @author Nehon
  */
 public class AnimationFactory {
 
     /**
-     * step for splitting rotation that have a n ange above PI/2
+     * step for splitting rotation that have a n angle above PI/2
      */
     private final static float EULER_STEP = FastMath.QUARTER_PI * 3;
 

File: jme3-core/src/main/java/com/jme3/animation/AudioTrack.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.logging.Logger;
 
 /**
- * AudioTrack is a track to add to an existing animation, to paly a sound during
+ * AudioTrack is a track to add to an existing animation, to play a sound during
  * an animations for example : gun shot, foot step, shout, etc...
  *
  * usage is
@@ -144,7 +144,7 @@ private void stop() {
     }
 
     /**
-     * Retruns the length of the track
+     * Return the length of the track
      *
      * @return length of the track
      */
@@ -170,7 +170,7 @@ public Track clone() {
     /**
      * This method clone the Track and search for the cloned counterpart of the
      * original audio node in the given cloned spatial. The spatial is assumed
-     * to be the Spatial holding the AnimControl controling the animation using
+     * to be the Spatial holding the AnimControl controlling the animation using
      * this Track.
      *
      * @param spatial the Spatial holding the AnimControl

File: jme3-core/src/main/java/com/jme3/animation/ClonableTrack.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * An interface that allow to clone a Track for a given Spatial.
- * The spatial fed to the method is the Spatial holding the AnimControl controling the Animation using this track.
+ * The spatial fed to the method is the Spatial holding the AnimControl controlling the Animation using this track.
  * 
  * Implement this interface only if you make your own Savable Track and that the track has a direct reference to a Spatial in the scene graph.
  * This Spatial is assumed to be a child of the spatial holding the AnimControl.
@@ -48,11 +48,11 @@ public interface ClonableTrack extends Track, JmeCloneable {
 
     /**
      * Allows to clone the track for a given Spatial.
-     * The spatial fed to the method is the Spatial holding the AnimControl controling the Animation using this track.
+     * The spatial fed to the method is the Spatial holding the AnimControl controlling the Animation using this track.
      * This method will be called during the loading process of a j3o model by the assetManager.
      * The assetManager keeps the original model in cache and returns a clone of the model.
      * 
-     * This method prupose is to find the cloned reference of the original spatial which it refers to in the cloned model.
+     * This method purpose is to find the cloned reference of the original spatial which it refers to in the cloned model.
      * 
      * See EffectTrack for a proper implementation.
      * 

File: jme3-core/src/main/java/com/jme3/cinematic/MotionPath.java
Patch:
@@ -69,10 +69,10 @@ public MotionPath() {
     }
 
     /**
-     * interpolate the path giving the time since the beginnin and the motionControl     
+     * interpolate the path giving the time since the beginning and the motionControl     
      * this methods sets the new localTranslation to the spatial of the MotionEvent control.
      * @param time the time since the animation started
-     * @param control the ocntrol over the moving spatial
+     * @param control the control over the moving spatial
      */
     public float interpolatePath(float time, MotionEvent control, float tpf) {
 

File: jme3-core/src/main/java/com/jme3/cinematic/MotionPathListener.java
Patch:
@@ -34,7 +34,7 @@
 import com.jme3.cinematic.events.MotionEvent;
 
 /**
- * Trigger the events appening on an motion path
+ * Trigger the events happening on an motion path
  * @author Nehon
  */
 public interface MotionPathListener {

File: jme3-core/src/main/java/com/jme3/cinematic/events/CinematicEvent.java
Patch:
@@ -136,7 +136,7 @@ public interface CinematicEvent extends Savable {
     public void initEvent(Application app, Cinematic cinematic);
     
     /**
-     * When this method is invoked, the event should fast forward to the given time according tim 0 is the start of the event.
+     * When this method is invoked, the event should fast forward to the given time according time 0 is the start of the event.
      * @param time the time to fast forward to
      */
     public void setTime(float time);    

File: jme3-core/src/main/java/com/jme3/cinematic/events/MotionEvent.java
Patch:
@@ -90,8 +90,8 @@ public enum Direction {
          */
         Path,
         /**
-         * The target rotates with the direction of the path but with the additon of a rtotation
-         * you need to use the setRotation mathod when using this Direction
+         * The target rotates with the direction of the path but with the addition of a rotation
+         * you need to use the setRotation method when using this Direction
          */
         PathAndRotation,
         /**

File: jme3-core/src/main/java/com/jme3/cinematic/events/SoundTrack.java
Patch:
@@ -43,15 +43,15 @@ public class SoundTrack extends SoundEvent {
 
     /**
      * creates a sound track from the given resource path
-     * @param path the path to an audi file (ie : "Sounds/mySound.wav")
+     * @param path the path to an audio file (ie : "Sounds/mySound.wav")
      */    
     public SoundTrack(String path) {
         super(path);
     }
 
     /**
      * creates a sound track from the given resource path
-     * @param path the path to an audi file (ie : "Sounds/mySound.wav")
+     * @param path the path to an audio file (ie : "Sounds/mySound.wav")
      * @param stream true to make the audio data streamed
      */    
     public SoundTrack(String path, boolean stream) {

File: jme3-core/src/main/java/com/jme3/light/SpotLight.java
Patch:
@@ -48,7 +48,7 @@
 /**
  * Represents a spot light.
  * A spot light emits a cone of light from a position and in a direction.
- * It can be used to fake torch lights or cars' lights.
+ * It can be used to fake torch lights or car's lights.
  * <p>
  * In addition to a position and a direction, spot lights also have a range which 
  * can be used to attenuate the influence of the light depending on the 
@@ -415,7 +415,7 @@ public void setSpotOuterAngle(float spotOuterAngle) {
 
     /**
      * for internal use only
-     * @return the cosines of the inner and outter angle packed in a float
+     * @return the cosines of the inner and outer angle packed in a float
      */
     public float getPackedAngleCos() {
         return packedAngleCos;

File: jme3-core/src/main/java/com/jme3/shader/Glsl150ShaderGenerator.java
Patch:
@@ -85,7 +85,7 @@ protected void declareVarying(StringBuilder source, ShaderNodeVariable var, bool
      * "out" keyword.
      *
      * after the "void main(){", the vertex output are declared and initialized
-     * and the frgament outputs are declared
+     * and the fragment outputs are declared
      */
     @Override
     protected void generateStartOfMainSection(StringBuilder source, ShaderGenerationInfo info, Shader.ShaderType type) {

File: jme3-core/src/main/java/com/jme3/shader/ShaderVariable.java
Patch:
@@ -43,7 +43,7 @@ public class ShaderVariable {
 
     /**
      * Name of the uniform as was declared in the shader.
-     * E.g name = "g_WorldMatrix" if the decleration was
+     * E.g name = "g_WorldMatrix" if the declaration was
      * "uniform mat4 g_WorldMatrix;".
      */
     protected String name = null;

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -621,7 +621,7 @@ public float getShadowZExtend() {
 
     /**
      * Set the distance from the eye where the shadows will be rendered default
-     * value is dynamicaly computed to the shadow casters/receivers union bound
+     * value is dynamically computed to the shadow casters/receivers union bound
      * zFar, capped to view frustum far value.
      *
      * @param zFar the zFar values that override the computed one
@@ -752,7 +752,7 @@ public void setFlushQueues(boolean flushQueues) {}
     /**
      * returns the pre shadows pass render state.
      * use it to adjust the RenderState parameters of the pre shadow pass.
-     * Note that this will be overriden if the preShadow technique in the material has a ForcedRenderState
+     * Note that this will be overridden if the preShadow technique in the material has a ForcedRenderState
      * @return the pre shadow render state.
      */
     public RenderState getPreShadowForcedRenderState() {

File: jme3-core/src/main/java/com/jme3/util/ListSort.java
Patch:
@@ -124,7 +124,7 @@ public ListSort() {
     }
 
     /**
-     * Allocate temp veriables for the given length This method should be called
+     * Allocate temp variables for the given length This method should be called
      * at least once, but only if the length of the list to sort changed before
      * sorting
      *
@@ -427,7 +427,7 @@ private void mergeForceCollapse() {
     /**
      * Merge runs A and B where A index in the stack is idx and B index is idx+1
      *
-     * @param idx index of the firts of two runs to merge
+     * @param idx index of the first of two runs to merge
      */
     private void mergeRuns(int idx) {
 

File: jme3-core/src/main/java/com/jme3/util/MaterialDebugAppState.java
Patch:
@@ -67,10 +67,10 @@
  * This appState is for debug purpose only, and was made to provide an easy way 
  * to test shaders, with a live update capability.
  * 
- * This calss provides and easy way to reload a material and catches compilation
+ * This class provides and easy way to reload a material and catches compilation
  * errors when needed and displays the error in the console.
  * 
- * If no error accur on compilation, the material is reloaded in the scene.
+ * If no error occur on compilation, the material is reloaded in the scene.
  * 
  * You can either trigger the reload when pressing a key (or whatever input is 
  * supported by Triggers you can attach to the input manager), or trigger it 

File: jme3-core/src/main/java/com/jme3/util/mikktspace/MikktspaceTangentGenerator.java
Patch:
@@ -23,7 +23,7 @@
  * https://developer.blender.org/diffusion/B/browse/master/intern/mikktspace/mikktspace.c
  * https://developer.blender.org/diffusion/B/browse/master/intern/mikktspace/mikktspace.h
  * 
- * MikkTspace looks like the new standard of tengent generation in 3D softwares.
+ * MikkTspace looks like the new standard of tangent generation in 3D softwares.
  * Xnormal, Blender, Substance painter, and many more use it.
  * 
  * Usage is :

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ConditionParser.java
Patch:
@@ -41,7 +41,7 @@
  * style.
  *
  * extractDefines is able to get a list of defines in an expression and update
- * the formatter expression with upercased defines
+ * the formatter expression with uppercased defines
  *
  * @author Nehon
  */

File: jme3-core/src/plugins/java/com/jme3/material/plugins/MatParseException.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * Custom Exception to report a j3md Material definition file parsing error.
- * This exception reports the line number where the error occured.
+ * This exception reports the line number where the error occurred.
  *
  * @author Nehon
  */
@@ -70,7 +70,7 @@ public MatParseException(String text, Statement statement) {
      * @param expected the expected value
      * @param got the actual value
      * @param statement the read statement
-     * @param cause the embed exception that occured
+     * @param cause the embed exception that occurred
      */
     public MatParseException(String expected, String got, Statement statement, Throwable cause) {
         super("Error On line " + statement.getLineNumber() + " : " + statement.getLine() + "\n->Expected " + (expected == null ? "a statement" : expected) + ", got '" + got + "'!", cause);
@@ -82,7 +82,7 @@ public MatParseException(String expected, String got, Statement statement, Throw
      *
      * @param text the error message
      * @param statement the statement where the error occur
-     * @param cause the embed exception that occured
+     * @param cause the embed exception that occurred
      */
     public MatParseException(String text, Statement statement, Throwable cause) {
         super("Error On line " + statement.getLineNumber() + " : " + statement.getLine() + "\n->" + text, cause);

File: jme3-core/src/main/java/com/jme3/shader/Glsl150ShaderGenerator.java
Patch:
@@ -85,7 +85,7 @@ protected void declareVarying(StringBuilder source, ShaderNodeVariable var, bool
      * "out" keyword.
      *
      * after the "void main(){", the vertex output are declared and initialized
-     * and the frgament outputs are declared
+     * and the fragment outputs are declared
      */
     @Override
     protected void generateStartOfMainSection(StringBuilder source, ShaderGenerationInfo info, Shader.ShaderType type) {

File: jme3-core/src/main/java/com/jme3/shader/ShaderVariable.java
Patch:
@@ -43,7 +43,7 @@ public class ShaderVariable {
 
     /**
      * Name of the uniform as was declared in the shader.
-     * E.g name = "g_WorldMatrix" if the decleration was
+     * E.g name = "g_WorldMatrix" if the declaration was
      * "uniform mat4 g_WorldMatrix;".
      */
     protected String name = null;

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ConditionParser.java
Patch:
@@ -41,7 +41,7 @@
  * style.
  *
  * extractDefines is able to get a list of defines in an expression and update
- * the formatter expression with upercased defines
+ * the formatter expression with uppercased defines
  *
  * @author Nehon
  */

File: jme3-core/src/plugins/java/com/jme3/material/plugins/MatParseException.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * Custom Exception to report a j3md Material definition file parsing error.
- * This exception reports the line number where the error occured.
+ * This exception reports the line number where the error occurred.
  *
  * @author Nehon
  */
@@ -70,7 +70,7 @@ public MatParseException(String text, Statement statement) {
      * @param expected the expected value
      * @param got the actual value
      * @param statement the read statement
-     * @param cause the embed exception that occured
+     * @param cause the embed exception that occurred
      */
     public MatParseException(String expected, String got, Statement statement, Throwable cause) {
         super("Error On line " + statement.getLineNumber() + " : " + statement.getLine() + "\n->Expected " + (expected == null ? "a statement" : expected) + ", got '" + got + "'!", cause);
@@ -82,7 +82,7 @@ public MatParseException(String expected, String got, Statement statement, Throw
      *
      * @param text the error message
      * @param statement the statement where the error occur
-     * @param cause the embed exception that occured
+     * @param cause the embed exception that occurred
      */
     public MatParseException(String text, Statement statement, Throwable cause) {
         super("Error On line " + statement.getLineNumber() + " : " + statement.getLine() + "\n->" + text, cause);

File: jme3-jogl/src/main/java/com/jme3/opencl/jocl/JoclBuffer.java
Patch:
@@ -140,6 +140,7 @@ public ByteBuffer map(CommandQueue queue, long size, long offset, MappingAccess
     public void unmap(CommandQueue queue, ByteBuffer ptr) {
         long q = ((JoclCommandQueue)queue).id;
         Utils.pointers[0].rewind();
+        ptr.position(0);
         int ret = cl.clEnqueueUnmapMemObject(q, id, ptr, 0, null, Utils.pointers[0]);
         Utils.checkError(ret, "clEnqueueUnmapMemObject");
         ret = cl.clWaitForEvents(1, Utils.pointers[0]);

File: jme3-jogl/src/main/java/com/jme3/opencl/jocl/JoclImage.java
Patch:
@@ -448,6 +448,7 @@ public ImageMapping mapAsync(CommandQueue queue, long[] origin, long[] region, M
     public void unmap(CommandQueue queue, ImageMapping mapping) {
         long q = ((JoclCommandQueue)queue).id;
         Utils.pointers[0].rewind();
+        mapping.buffer.position(0);
         int ret = cl.clEnqueueUnmapMemObject(q, id, mapping.buffer, 0, null, Utils.pointers[0]);
         Utils.checkError(ret, "clEnqueueUnmapMemObject");
         ret = cl.clWaitForEvents(1, Utils.pointers[0]);

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglBuffer.java
Patch:
@@ -136,6 +136,7 @@ public ByteBuffer map(CommandQueue queue, long size, long offset, MappingAccess
 
     @Override
     public void unmap(CommandQueue queue, ByteBuffer ptr) {
+        ptr.position(0);
         long q = ((LwjglCommandQueue) queue).getQueue();
         Utils.pointerBuffers[0].rewind();
         int ret = CL10.clEnqueueUnmapMemObject(q, buffer, ptr, null, Utils.pointerBuffers[0]);

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglImage.java
Patch:
@@ -449,6 +449,7 @@ public ImageMapping mapAsync(CommandQueue queue, long[] origin, long[] region, M
 
     @Override
     public void unmap(CommandQueue queue, ImageMapping mapping) {
+        mapping.buffer.position(0);
         long q = ((LwjglCommandQueue) queue).getQueue();
         Utils.pointerBuffers[0].rewind();
         int ret = CL10.clEnqueueUnmapMemObject(q, image, mapping.buffer, null, Utils.pointerBuffers[0]);

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglKernel.java
Patch:
@@ -162,8 +162,8 @@ public void setArg(int index, Matrix4f m) {
         buf.put(m.m00).put(m.m01).put(m.m02).put(m.m03);
         buf.put(m.m10).put(m.m11).put(m.m12).put(m.m13);
         buf.put(m.m20).put(m.m21).put(m.m22).put(m.m23);
-        buf.position(0);
         buf.put(m.m30).put(m.m31).put(m.m32).put(m.m33);
+        buf.position(0);
         int ret = CL10.clSetKernelArg(kernel, index, buf);
         Utils.checkError(ret, "clSetKernelArg");
     }

File: jme3-android-examples/src/main/java/jme3test/android/TestAndroidResources.java
Patch:
@@ -12,7 +12,9 @@
 import com.jme3.util.TangentBinormalGenerator;
 
 /**
- * Created by potterec on 4/29/2016.
+ * Test case to look for images stored in the Android drawable and mipmap directories.
+ *
+ * @author iwgeric
  */
 public class TestAndroidResources extends SimpleApplication {
 

File: jme3-jogl/src/main/java/com/jme3/opencl/jocl/JoclKernel.java
Patch:
@@ -224,6 +224,7 @@ public void setArg(int index, Matrix4f m) {
         buf.put(m.m10).put(m.m11).put(m.m12).put(m.m13);
         buf.put(m.m20).put(m.m21).put(m.m22).put(m.m23);
         buf.put(m.m30).put(m.m31).put(m.m32).put(m.m33);
+        buf.position(0);
         int ret = cl.clSetKernelArg(kernel, index, 16*4, buf);
         Utils.checkError(ret, "clSetKernelArg");
     }

File: jme3-lwjgl/src/main/java/com/jme3/opencl/lwjgl/LwjglBuffer.java
Patch:
@@ -136,6 +136,7 @@ public ByteBuffer map(CommandQueue queue, long size, long offset, MappingAccess
 
     @Override
     public void unmap(CommandQueue queue, ByteBuffer ptr) {
+        ptr.position(0);
         CLCommandQueue q = ((LwjglCommandQueue) queue).getQueue();
         Utils.pointerBuffers[0].rewind();
         int ret = CL10.clEnqueueUnmapMemObject(q, buffer, ptr, null, Utils.pointerBuffers[0]);

File: jme3-lwjgl/src/main/java/com/jme3/opencl/lwjgl/LwjglImage.java
Patch:
@@ -447,6 +447,7 @@ public ImageMapping mapAsync(CommandQueue queue, long[] origin, long[] region, M
 
     @Override
     public void unmap(CommandQueue queue, ImageMapping mapping) {
+        mapping.buffer.position(0);
         CLCommandQueue q = ((LwjglCommandQueue) queue).getQueue();
         Utils.pointerBuffers[0].rewind();
         int ret = CL10.clEnqueueUnmapMemObject(q, image, mapping.buffer, null, Utils.pointerBuffers[0]);

File: jme3-lwjgl/src/main/java/com/jme3/opencl/lwjgl/LwjglKernel.java
Patch:
@@ -207,6 +207,7 @@ public void setArg(int index, Matrix4f m) {
         buf.put(m.m10).put(m.m11).put(m.m12).put(m.m13);
         buf.put(m.m20).put(m.m21).put(m.m22).put(m.m23);
         buf.put(m.m30).put(m.m31).put(m.m32).put(m.m33);
+        buf.position(0);
         int ret = CL10.clSetKernelArg(kernel, index, buf);
         Utils.checkError(ret, "clSetKernelArg");
     }

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglKernel.java
Patch:
@@ -162,6 +162,7 @@ public void setArg(int index, Matrix4f m) {
         buf.put(m.m00).put(m.m01).put(m.m02).put(m.m03);
         buf.put(m.m10).put(m.m11).put(m.m12).put(m.m13);
         buf.put(m.m20).put(m.m21).put(m.m22).put(m.m23);
+        buf.position(0);
         buf.put(m.m30).put(m.m31).put(m.m32).put(m.m33);
         int ret = CL10.clSetKernelArg(kernel, index, buf);
         Utils.checkError(ret, "clSetKernelArg");

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglBuffer.java
Patch:
@@ -203,6 +203,7 @@ public void acquireBufferForSharingNoEvent(CommandQueue queue) {
 
     @Override
     public Event releaseBufferForSharingAsync(CommandQueue queue) {
+        Utils.assertSharingPossible();
         Utils.pointerBuffers[0].rewind();
         long q = ((LwjglCommandQueue) queue).getQueue();
         int ret = CL10GL.clEnqueueReleaseGLObjects(q, buffer, null, Utils.pointerBuffers[0]);
@@ -212,6 +213,7 @@ public Event releaseBufferForSharingAsync(CommandQueue queue) {
     }
     @Override
     public void releaseBufferForSharingNoEvent(CommandQueue queue) {
+        Utils.assertSharingPossible();
         long q = ((LwjglCommandQueue) queue).getQueue();
         int ret = CL10GL.clEnqueueReleaseGLObjects(q, buffer, null, null);
         Utils.checkError(ret, "clEnqueueReleaseGLObjects");

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglContext.java
Patch:
@@ -161,6 +161,7 @@ public ImageFormat[] querySupportedFormats(MemoryAccess access, Image.ImageType
 
     @Override
     public Buffer bindVertexBuffer(VertexBuffer vb, MemoryAccess access) {
+        Utils.assertSharingPossible();
         int id = vb.getId();
         if (id == -1) {
             throw new IllegalArgumentException("vertex buffer was not yet uploaded to the GPU or is CPU only");
@@ -174,6 +175,7 @@ public Buffer bindVertexBuffer(VertexBuffer vb, MemoryAccess access) {
 
     @Override
     public Image bindImage(com.jme3.texture.Image image, Texture.Type textureType, int miplevel, MemoryAccess access) {
+        Utils.assertSharingPossible();
         int imageID = image.getId();
         if (imageID == -1) {
             throw new IllegalArgumentException("image was not yet uploaded to the GPU");
@@ -188,6 +190,7 @@ public Image bindImage(com.jme3.texture.Image image, Texture.Type textureType, i
 
     @Override
     protected Image bindPureRenderBuffer(FrameBuffer.RenderBuffer buffer, MemoryAccess access) {
+        Utils.assertSharingPossible();
         int renderbuffer = buffer.getId();
         if (renderbuffer == -1) {
             throw new IllegalArgumentException("renderbuffer was not yet uploaded to the GPU");

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglImage.java
Patch:
@@ -544,6 +544,7 @@ public void acquireImageForSharingNoEvent(CommandQueue queue) {
     }
     @Override
     public Event releaseImageForSharingAsync(CommandQueue queue) {
+        Utils.assertSharingPossible();
         Utils.pointerBuffers[0].rewind();
         long q = ((LwjglCommandQueue) queue).getQueue();
         int ret = CL10GL.clEnqueueReleaseGLObjects(q, image, null, Utils.pointerBuffers[0]);
@@ -553,6 +554,7 @@ public Event releaseImageForSharingAsync(CommandQueue queue) {
     }
     @Override
     public void releaseImageForSharingNoEvent(CommandQueue queue) {
+        Utils.assertSharingPossible();
         long q = ((LwjglCommandQueue) queue).getQueue();
         int ret = CL10GL.clEnqueueReleaseGLObjects(q, image, null, null);
         Utils.checkError(ret, "clEnqueueReleaseGLObjects");

File: jme3-lwjgl3/src/main/java/com/jme3/opencl/lwjgl/LwjglProgram.java
Patch:
@@ -153,7 +153,7 @@ public ByteBuffer getBinary(Device d) {
         ByteBuffer binaries = ByteBuffer.allocateDirect(size);
         binaryPointers.put(index, binaries);
         
-        //TODO: why the hell does this throw a segfault ?!?
+        //Fixme: why the hell does this line throw a segfault ?!?
         ret = CL10.clGetProgramInfo(program, CL10.CL_PROGRAM_BINARIES, binaryPointers, null);
         Utils.checkError(ret, "clGetProgramInfo: CL_PROGRAM_BINARIES");
         

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/objects/FbxMesh.java
Patch:
@@ -320,7 +320,7 @@ private List<Geometry> createGeometries() throws IOException {
 			// Build reverse vertex mapping
 			reverseVertexMap = new ArrayList<>(srcVertexCount);
 			for(int i = 0; i < srcVertexCount; ++i)
-				reverseVertexMap.add(new ArrayList<>());
+				reverseVertexMap.add(new ArrayList<Integer>());
 			for(int i = 0; i < vCount; ++i) {
 				int index = vertexMap.get(i);
 				reverseVertexMap.get(index).add(i);

File: jme3-examples/src/main/java/jme3test/TestChooser.java
Patch:
@@ -32,7 +32,7 @@
 
 package jme3test;
 
-import com.jme3.app.Application;
+import com.jme3.app.LegacyApplication;
 import com.jme3.app.SimpleApplication;
 import com.jme3.system.JmeContext;
 import java.awt.*;
@@ -260,15 +260,15 @@ public void run(){
                     for (int i = 0; i < appClass.length; i++) {
                 	    Class<?> clazz = (Class)appClass[i];
                 		try {
-                			if (Application.class.isAssignableFrom(clazz)) {
+                			if (LegacyApplication.class.isAssignableFrom(clazz)) {
                     			Object app = clazz.newInstance();
                 			    if (app instanceof SimpleApplication) {
                 			        final Method settingMethod = clazz.getMethod("setShowSettings", boolean.class);
                 			        settingMethod.invoke(app, showSetting);
                 			    }
                 			    final Method mainMethod = clazz.getMethod("start");
                 			    mainMethod.invoke(app);
-                			    Field contextField = Application.class.getDeclaredField("context");
+                			    Field contextField = LegacyApplication.class.getDeclaredField("context");
                 			    contextField.setAccessible(true);
                 			    JmeContext context = null; 
                 			    while (context == null) {

File: jme3-core/src/main/java/com/jme3/audio/AudioListenerState.java
Patch:
@@ -70,7 +70,7 @@ public void update(float tpf) {
 
     @Override
     public void render(RenderManager rm) {
-        if (!isEnabled()) {
+        if (!isEnabled() || listener == null) {
             return;
         }
 

File: jme3-core/src/main/java/com/jme3/opencl/DefaultPlatformChooser.java
Patch:
@@ -29,7 +29,7 @@
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-package com.jme3.opencl.lwjgl;
+package com.jme3.opencl;
 
 import com.jme3.opencl.Device;
 import com.jme3.opencl.Platform;
@@ -42,8 +42,8 @@
  *
  * @author Sebastian Weiss
  */
-public class PlatformChooserImpl implements PlatformChooser {
-    private static final Logger LOG = Logger.getLogger(PlatformChooserImpl.class.getName());
+public class DefaultPlatformChooser implements PlatformChooser {
+    private static final Logger LOG = Logger.getLogger(DefaultPlatformChooser.class.getName());
 
     @Override
     public List<? extends Device> chooseDevices(List<? extends Platform> platforms) {

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -31,6 +31,7 @@
  */
 package com.jme3.system;
 
+import com.jme3.opencl.DefaultPlatformChooser;
 import com.jme3.opencl.PlatformChooser;
 import java.io.IOException;
 import java.io.InputStream;
@@ -162,6 +163,7 @@ public final class AppSettings extends HashMap<String, Object> {
         defaults.put("Resizable", false);
         defaults.put("SwapBuffers", true);
         defaults.put("OpenCL", false);
+        defaults.put("OpenCLPlatformChooser", DefaultPlatformChooser.class.getName());
         //  defaults.put("Icons", null);
     }
 
@@ -1039,7 +1041,7 @@ public boolean isOpenCLSupport() {
      * Sets a custom platform chooser. This chooser specifies which platform and
      * which devices are used for the OpenCL context.
      * 
-     * Default: not set, an implementation defined one is used.
+     * Default: an implementation defined one.
      * 
      * @param chooser the class of the chooser, must have a default constructor
      */

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -39,7 +39,7 @@
 import com.jme3.opencl.PlatformChooser;
 import com.jme3.opencl.lwjgl.LwjglDevice;
 import com.jme3.opencl.lwjgl.LwjglPlatform;
-import com.jme3.opencl.lwjgl.PlatformChooserImpl;
+import com.jme3.opencl.DefaultPlatformChooser;
 import com.jme3.renderer.Renderer;
 import com.jme3.renderer.RendererException;
 import com.jme3.renderer.lwjgl.LwjglGL;
@@ -319,7 +319,7 @@ protected void initOpenCL() {
             }
         }
         if (chooser == null) {
-            chooser = new PlatformChooserImpl();
+            chooser = new DefaultPlatformChooser();
         }
         List<? extends Device> choosenDevices = chooser.chooseDevices(platforms);
         List<CLDevice> devices = new ArrayList<>(choosenDevices.size());

File: jme3-core/src/main/java/com/jme3/audio/AudioNode.java
Patch:
@@ -78,7 +78,7 @@ public class AudioNode extends Node implements AudioSource {
     protected transient AudioData data = null;
     protected transient volatile AudioSource.Status status = AudioSource.Status.Stopped;
     protected transient volatile int channel = -1;
-    protected Vector3f previousWorldTranslation = Vector3f.NAN;
+    protected Vector3f previousWorldTranslation = Vector3f.NAN.clone();
     protected Vector3f velocity = new Vector3f();
     protected boolean reverbEnabled = false;
     protected float maxDistance = 200; // 200 meters

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -995,7 +995,7 @@ public int getSolverNumIterations() {
         return solverNumIterations;
     }
     
-    private static native void setSolverNumIterations(long physicsSpaceId, int numIterations);
+    private native void setSolverNumIterations(long physicsSpaceId, int numIterations);
     
     public static native void initNativePhysics();
 

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -621,9 +621,7 @@ private void readTechnique(Statement techStat) throws IOException{
             // Not sure if this is needed anymore, since shader caching
             // is now done by TechniqueDef.
             technique.setShaderFile(technique.hashCode() + "", technique.hashCode() + "", "GLSL100", "GLSL100");
-        }
-
-        if (shaderNames.containsKey(Shader.ShaderType.Vertex) && shaderNames.containsKey(Shader.ShaderType.Fragment)) {
+        }else if (shaderNames.containsKey(Shader.ShaderType.Vertex) && shaderNames.containsKey(Shader.ShaderType.Fragment)) {
             technique.setShaderFile(shaderNames, shaderLanguages);
         } else {
             technique = null;

File: jme3-core/src/main/java/com/jme3/system/NullRenderer.java
Patch:
@@ -175,4 +175,7 @@ public void setLinearizeSrgbImages(boolean linearize) {
     public void readFrameBufferWithFormat(FrameBuffer fb, ByteBuffer byteBuf, Image.Format format) {        
     }
 
+    @Override
+    public void setDefaultAnisotropicFilter(int level) {
+    }
 }

File: jme3-core/src/main/java/com/jme3/texture/image/LastTextureState.java
Patch:
@@ -58,7 +58,7 @@ public void reset() {
         rWrap = null;
         magFilter = null;
         minFilter = null;
-        anisoFilter = 0;
+        anisoFilter = 1;
         
         // The default in OpenGL is OFF, so we avoid setting this per texture
         // if its not used.

File: jme3-core/src/main/java/com/jme3/material/TechniqueDef.java
Patch:
@@ -134,13 +134,12 @@ public enum ShadowMode {
      * <p>
      * Used internally by the J3M/J3MD loader.
      *
-     * @param name The name of the technique, should be set to <code>null</code>
-     * for default techniques.
+     * @param name The name of the technique
      */
     public TechniqueDef(String name, int sortId){
         this();
         this.sortId = sortId;
-        this.name = name == null ? TechniqueDef.DEFAULT_TECHNIQUE_NAME : name;
+        this.name = name;
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -582,7 +582,9 @@ public void renderGeometry(Geometry g) {
         if (forcedTechnique != null) {
             MaterialDef matDef = g.getMaterial().getMaterialDef();
             if (matDef.getTechniqueDefs(forcedTechnique) != null) {
-                tmpTech = g.getMaterial().getActiveTechnique() != null ? g.getMaterial().getActiveTechnique().getDef().getName() : "Default";
+                tmpTech = g.getMaterial().getActiveTechnique() != null
+                        ? g.getMaterial().getActiveTechnique().getDef().getName()
+                        : TechniqueDef.DEFAULT_TECHNIQUE_NAME;
                 g.getMaterial().selectTechnique(forcedTechnique, this);
                 //saving forcedRenderState for future calls
                 RenderState tmpRs = forcedRenderState;

File: jme3-core/src/tools/java/jme3tools/shadercheck/ShaderCheck.java
Patch:
@@ -38,7 +38,7 @@ private static void checkMatDef(String matdefName) {
         MaterialDef def = (MaterialDef) assetManager.loadAsset(matdefName);
         EnumSet<Caps> rendererCaps = EnumSet.noneOf(Caps.class);
         rendererCaps.add(Caps.GLSL100);
-        for (TechniqueDef techDef : def.getTechniqueDefs("Default")) {
+        for (TechniqueDef techDef : def.getTechniqueDefs(TechniqueDef.DEFAULT_TECHNIQUE_NAME)) {
             DefineList defines = techDef.createDefineList();
             Shader shader = techDef.getShader(assetManager, rendererCaps, defines);
             for (Validator validator : validators) {

File: jme3-examples/src/main/java/jme3test/material/TestShaderNodes.java
Patch:
@@ -3,6 +3,7 @@
 import com.jme3.app.SimpleApplication;
 import com.jme3.material.Material;
 import com.jme3.material.Technique;
+import com.jme3.material.TechniqueDef;
 import com.jme3.math.ColorRGBA;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.shape.Box;
@@ -27,7 +28,7 @@ public void simpleInitApp() {
         Texture tex = assetManager.loadTexture("Interface/Logo/Monkey.jpg");
 
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/UnshadedNodes.j3md");
-        mat.selectTechnique("Default", renderManager);
+        mat.selectTechnique(TechniqueDef.DEFAULT_TECHNIQUE_NAME, renderManager);
         Technique t = mat.getActiveTechnique();
 
 //        for (Shader.ShaderSource shaderSource : t.getShader().getSources()) {

File: jme3-core/src/test/java/com/jme3/material/plugins/J3MLoaderTest.java
Patch:
@@ -107,7 +107,7 @@ public void newStyleTextureParameters_shouldBeSupported() throws Exception {
     }
 
     private TextureKey setupMockForTexture(final String paramName, final String path, final boolean flipY, final Texture texture) {
-        when(materialDef.getMaterialParam(paramName)).thenReturn(new MatParamTexture(VarType.Texture2D, paramName, texture, 0, null));
+        when(materialDef.getMaterialParam(paramName)).thenReturn(new MatParamTexture(VarType.Texture2D, paramName, texture, null));
 
         final TextureKey textureKey = new TextureKey(path, flipY);
         textureKey.setGenerateMips(true);

File: jme3-core/src/main/java/com/jme3/material/RenderState.java
Patch:
@@ -1501,7 +1501,7 @@ public RenderState copyMergedTo(RenderState additionalState, RenderState state)
         if (additionalState.applyBlendEquationAlpha) {
             state.blendEquationAlpha = additionalState.blendEquationAlpha;
         } else {
-            state.blendEquation = blendEquation;
+            state.blendEquationAlpha = blendEquationAlpha;
         }        
         if (additionalState.applyBlendMode) {
             state.blendMode = additionalState.blendMode;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLDebugDesktop.java
Patch:
@@ -102,7 +102,7 @@ public void glFramebufferTextureLayer(int param1, int param2, int param3, int pa
     }
 
     public void glBlendEquationSeparate(int colorMode, int alphaMode) {
-        gl2.glBlendEquationSeparate(colorMode, alphaMode);
+        gl.glBlendEquationSeparate(colorMode, alphaMode);
         checkError();
     }
 }

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -747,16 +747,17 @@ public void applyRenderState(RenderState state) {
                                 + state.getBlendMode());
                 }
                 
-                if (gl2 != null && (state.getBlendEquation() != context.blendEquation || state.getBlendEquationAlpha() != context.blendEquationAlpha)) {
+                if (state.getBlendEquation() != context.blendEquation || state.getBlendEquationAlpha() != context.blendEquationAlpha) {
                     int colorMode = convertBlendEquation(state.getBlendEquation());
                     int alphaMode;
                     if (state.getBlendEquationAlpha() == RenderState.BlendEquationAlpha.InheritColor) {
                         alphaMode = colorMode;
                     } else {
                         alphaMode = convertBlendEquationAlpha(state.getBlendEquationAlpha());
                     }
-                    gl2.glBlendEquationSeparate(colorMode, alphaMode);
+                    gl.glBlendEquationSeparate(colorMode, alphaMode);
                     context.blendEquation = state.getBlendEquation();
+                    context.blendEquationAlpha = state.getBlendEquationAlpha();
                 }
             }
 

File: jme3-ios/src/main/java/com/jme3/renderer/ios/JmeIosGLES.java
Patch:
@@ -142,6 +142,7 @@ public class JmeIosGLES {
 	public static native void glBindRenderbuffer(int target, int renderbuffer);
 	public static native void glBindTexture(int target, int texture);
 //	public static native void glBindVertexArray // TODO: Investigate this 
+    public static native void glBlendEquationSeparate(int colorMode, int alphaMode);
 	public static native void glBlendFunc(int sfactor, int dfactor);
 	public static native void glBufferData(int target, int size, Buffer data, int usage);
 	public static native void glBufferData2(int target, int size, byte[] data, int offset, int usage);

File: jme3-core/src/main/java/com/jme3/material/logic/MultiPassLightingLogic.java
Patch:
@@ -156,6 +156,8 @@ public void render(RenderManager renderManager, Shader shader, Geometry geometry
 
                     lightDir.setValue(VarType.Vector4, tmpLightDirection);
 
+                    break;
+                case Probe:
                     break;
                 default:
                     throw new UnsupportedOperationException("Unknown type of light: " + l.getType());

File: jme3-core/src/main/java/com/jme3/material/logic/SinglePassLightingLogic.java
Patch:
@@ -185,6 +185,8 @@ protected int updateLightListUniforms(Shader shader, Geometry g, LightList light
                     lightData.setVector4InArray(tmpVec.getX(), tmpVec.getY(), tmpVec.getZ(), spotAngleCos, lightDataIndex);
                     lightDataIndex++;
                     break;
+                case Probe:
+                    break;
                 default:
                     throw new UnsupportedOperationException("Unknown type of light: " + l.getType());
             }

File: jme3-core/src/main/java/com/jme3/util/clone/Cloner.java
Patch:
@@ -207,10 +207,10 @@ public <T> T clone( T object, boolean useFunctions ) {
 
         // Check the index to see if we already have it
         Object clone = index.get(object);
-        if( clone != null ) {
+        if( clone != null || index.containsKey(object) ) {
             if( log.isLoggable(Level.FINER) ) {
                 log.finer("cloned:" + object.getClass() + "@" + System.identityHashCode(object)
-                            + " as cached:" + clone.getClass() + "@" + System.identityHashCode(clone));
+                            + " as cached:" + (clone == null ? "null" : (clone.getClass() + "@" + System.identityHashCode(clone))));
             }
             return type.cast(clone);
         }

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -787,14 +787,14 @@ public void removeCollisionGroupListener(int collisionGroup) {
      * PhysicsRayTestResults
      */
     public List rayTest(Vector3f from, Vector3f to) {
-        List results = new LinkedList();
+        LinkedList<PhysicsRayTestResult> results = new LinkedList<PhysicsRayTestResult>();
         rayTest(from, to, results);
         
         if(results.getFirst().getHitFraction() > results.getLast().getHitFraction()) {
             Collections.reverse(results);
         }
         
-        return (List<PhysicsRayTestResult>) results;
+        return results;
     }
 
     /**

File: jme3-examples/src/main/java/jme3test/post/TestRenderToMemory.java
Patch:
@@ -116,7 +116,7 @@ public void paintComponent(Graphics gfx) {
             frames ++;
             t = t2;
 
-            if (total > 1000){
+            if (total > timer.getResolution()) {
                 fps = frames;
                 total = 0;
                 frames = 0;

File: jme3-examples/src/main/java/jme3test/material/TestParallax.java
Patch:
@@ -71,8 +71,7 @@ public void setupLighting() {
     Material mat;
 
     public void setupFloor() {
-        mat = assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall2.j3m");
-        //mat = assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m");
+        mat = assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m");
                 
         Node floorGeom = new Node("floorGeom");
         Quad q = new Quad(100, 100);

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglAbstractDisplay.java
Patch:
@@ -77,8 +77,6 @@ public abstract class JoglAbstractDisplay extends JoglContext implements GLEvent
     protected boolean wasAnimating = false;
 
     protected void initGLCanvas() {
-        loadNatives();
-        
         device = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
         
         GLCapabilities caps;

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglNewtAbstractDisplay.java
Patch:
@@ -73,7 +73,6 @@ public abstract class JoglNewtAbstractDisplay extends JoglContext implements GLE
     protected boolean wasAnimating = false;
 
     protected void initGLCanvas() {
-        loadNatives();
         GLCapabilities caps;
         if (settings.getRenderer().equals(AppSettings.JOGL_OPENGL_FORWARD_COMPATIBLE)) {
         	caps = new GLCapabilities(GLProfile.getMaxProgrammable(true));

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglOffscreenBuffer.java
Patch:
@@ -123,8 +123,7 @@ protected void deinitInThread(){
     }
 
     @Override
-	public void run(){
-        loadNatives();
+    public void run() {
         logger.log(Level.FINE, "Using JOGL {0}", JoglVersion.getInstance().getImplementationVersion());
         initInThread();
         while (!needClose.get()){

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -170,9 +170,6 @@ protected void loadNatives() {
             NativeLibraryLoader.loadNativeLibrary("jinput", true);
             NativeLibraryLoader.loadNativeLibrary("jinput-dx8", true);
         }
-        if (NativeLibraryLoader.isUsingNativeBullet()) {
-            NativeLibraryLoader.loadNativeLibrary("bulletjme", true);
-        }
         NativeLibraryLoader.loadNativeLibrary("lwjgl", true);
     }
     protected int getNumSamplesToUse() {

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java
Patch:
@@ -315,8 +315,6 @@ public void uncaughtException(Thread thread, Throwable thrown) {
                 });
             }
 
-            loadNatives();
-
             timer = new NanoTimer();
 
             // For canvas, this will create a pbuffer,

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -2708,7 +2708,7 @@ public void renderMesh(Mesh mesh, int lod, int count, VertexBuffer[] instanceDat
             throw new RendererException("Mesh instancing is not supported by the video hardware");
         }
 
-        if (context.lineWidth != mesh.getLineWidth()) {
+        if (mesh.getLineWidth() != 1f && context.lineWidth != mesh.getLineWidth()) {
             gl.glLineWidth(mesh.getLineWidth());
             context.lineWidth = mesh.getLineWidth();
         }

File: jme3-core/src/main/java/com/jme3/scene/Spatial.java
Patch:
@@ -1364,7 +1364,7 @@ public Spatial clone( boolean cloneMaterial ) {
         // the transforms and stuff get refreshed.
         clone.setTransformRefresh();
         clone.setLightListRefresh();
-		clone.setMatParamOverrideRefresh();
+        clone.setMatParamOverrideRefresh();
 
         return clone;
     }
@@ -1500,6 +1500,8 @@ public void cloneFields( Cloner cloner, Object original ) {
         this.localLights = cloner.clone(localLights);
         this.worldTransform = cloner.clone(worldTransform);
         this.localTransform = cloner.clone(localTransform);
+        this.worldOverrides = cloner.clone(worldOverrides);
+        this.localOverrides = cloner.clone(localOverrides);
         this.controls = cloner.clone(controls);
 
         // Cloner doesn't handle maps on its own just yet.

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -233,8 +233,8 @@ protected void initContextFirstTime() {
         if (GLContext.getCapabilities().GL_ARB_debug_output && settings.getBoolean("GraphicsDebug")) {
             ARBDebugOutput.glDebugMessageCallbackARB(new ARBDebugOutputCallback(new LwjglGLDebugOutputHandler()));
         }
-        renderer.setMainFrameBufferSrgb(settings.getGammaCorrection());
-        renderer.setLinearizeSrgbImages(settings.getGammaCorrection());
+        renderer.setMainFrameBufferSrgb(settings.isGammaCorrection());
+        renderer.setLinearizeSrgbImages(settings.isGammaCorrection());
 
         // Init input
         if (keyInput != null) {

File: jme3-core/src/test/java/com/jme3/material/MaterialMatParamOverrideTest.java
Patch:
@@ -63,7 +63,7 @@
 public class MaterialMatParamOverrideTest {
 
     private static final HashSet<String> IGNORED_UNIFORMS = new HashSet<String>(
-            Arrays.asList(new String[]{"m_ParallaxHeight", "m_Shininess"}));
+            Arrays.asList(new String[]{"m_ParallaxHeight", "m_Shininess", "m_BackfaceShadows"}));
 
     @Test
     public void testBoolMpoOnly() {

File: jme3-core/src/main/java/com/jme3/scene/Spatial.java
Patch:
@@ -603,6 +603,9 @@ protected void updateMatParamOverrides() {
      * @see MatParamOverride
      */
     public void addMatParamOverride(MatParamOverride override) {
+        if (override == null) {
+            throw new IllegalArgumentException("override cannot be null");
+        }
         localOverrides.add(override);
         setMatParamOverrideRefresh();
     }

File: jme3-core/src/main/java/com/jme3/shader/Uniform.java
Patch:
@@ -195,7 +195,7 @@ public void setValue(VarType type, Object value){
         }
 
         if (value == null) {
-            throw new NullPointerException();
+            throw new IllegalArgumentException("for uniform " + name + ": value cannot be null");
         }
 
         setByCurrentMaterial = true;

File: jme3-core/src/main/java/com/jme3/scene/Spatial.java
Patch:
@@ -608,16 +608,16 @@ public void addMatParamOverride(MatParamOverride override) {
     }
 
     public void removeMatParamOverride(MatParamOverride override) {
-        if (worldOverrides.remove(override)) {
+        if (localOverrides.remove(override)) {
             setMatParamOverrideRefresh();
         }
     }
 
     public void clearMatParamOverrides() {
-        if (!worldOverrides.isEmpty()) {
+        if (!localOverrides.isEmpty()) {
             setMatParamOverrideRefresh();
         }
-        worldOverrides.clear();
+        localOverrides.clear();
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/material/DefaultTechniqueDefLogic.java
Patch:
@@ -56,7 +56,7 @@ public DefaultTechniqueDefLogic(TechniqueDef techniqueDef) {
 
     @Override
     public Shader makeCurrent(AssetManager assetManager, RenderManager renderManager,
-            EnumSet<Caps> rendererCaps, DefineList defines) {
+            EnumSet<Caps> rendererCaps, LightList lights, DefineList defines) {
         return techniqueDef.getShader(assetManager, rendererCaps, defines);
     }
 

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -834,7 +834,7 @@ public void preload(RenderManager renderManager) {
             return;
         }
 
-        Shader shader = technique.makeCurrent(renderManager, rendererCaps);
+        Shader shader = technique.makeCurrent(renderManager, null, rendererCaps);
         updateShaderMaterialParameters(renderer, shader);
         renderManager.getRenderer().setShader(shader);
     }
@@ -939,7 +939,7 @@ public void render(Geometry geometry, LightList lights, RenderManager renderMana
         updateRenderState(renderManager, renderer, techniqueDef);
 
         // Select shader to use
-        Shader shader = technique.makeCurrent(renderManager, rendererCaps);
+        Shader shader = technique.makeCurrent(renderManager, lights, rendererCaps);
         
         // Begin tracking which uniforms were changed by material.
         clearUniformsSetByCurrent(shader);

File: jme3-core/src/main/java/com/jme3/material/SinglePassLightingLogic.java
Patch:
@@ -76,10 +76,10 @@ public SinglePassLightingLogic(TechniqueDef techniqueDef) {
 
     @Override
     public Shader makeCurrent(AssetManager assetManager, RenderManager renderManager,
-            EnumSet<Caps> rendererCaps, DefineList defines) {
+            EnumSet<Caps> rendererCaps, LightList lights, DefineList defines) {
         defines.set(nbLightsDefineId, renderManager.getSinglePassLightBatchSize() * 3);
         defines.set(singlePassLightingDefineId, true);
-        return super.makeCurrent(assetManager, renderManager, rendererCaps, defines);
+        return super.makeCurrent(assetManager, renderManager, rendererCaps, lights, defines);
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/material/Technique.java
Patch:
@@ -131,10 +131,10 @@ void notifyTechniqueSwitched() {
      * @param rendererCaps The renderer capabilities which the shader should support.
      * @return A compatible shader.
      */
-    Shader makeCurrent(RenderManager renderManager, EnumSet<Caps> rendererCaps) {
+    Shader makeCurrent(RenderManager renderManager, LightList lights, EnumSet<Caps> rendererCaps) {
         TechniqueDefLogic logic = def.getLogic();
         AssetManager assetManager = owner.getMaterialDef().getAssetManager();
-        return logic.makeCurrent(assetManager, renderManager, rendererCaps, dynamicDefines);
+        return logic.makeCurrent(assetManager, renderManager, rendererCaps, lights, dynamicDefines);
     }
     
     /**

File: jme3-core/src/main/java/com/jme3/material/TechniqueDefLogic.java
Patch:
@@ -66,14 +66,16 @@ public interface TechniqueDefLogic {
      * @param renderManager The render manager for which rendering is to be performed.
      * @param rendererCaps Renderer capabilities. The returned shader must
      * support these capabilities.
+     * @param lights The lights with which the geometry shall be rendered. This
+     * list must not include culled lights.
      * @param defines The define list used by the technique, any 
      * {@link TechniqueDef#addShaderUnmappedDefine(java.lang.String) unmapped defines}
      * should be set here to change shader behavior.
      * 
      * @return The shader to use for rendering.
      */
     public Shader makeCurrent(AssetManager assetManager, RenderManager renderManager, 
-                              EnumSet<Caps> rendererCaps, DefineList defines);
+            EnumSet<Caps> rendererCaps, LightList lights, DefineList defines);
     
     /**
      * Requests that the <code>TechniqueDefLogic</code> renders the given geometry.

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -49,7 +49,7 @@
 import com.jme3.renderer.queue.RenderQueue.Bucket;
 import com.jme3.renderer.queue.RenderQueue.ShadowMode;
 import com.jme3.scene.*;
-import com.jme3.shader.Uniform;
+import com.jme3.shader.Shader;
 import com.jme3.shader.UniformBinding;
 import com.jme3.shader.UniformBindingManager;
 import com.jme3.system.NullRenderer;
@@ -483,8 +483,8 @@ public void setWorldMatrix(Matrix4f mat) {
      * Updates the given list of uniforms with {@link UniformBinding uniform bindings}
      * based on the current world state.
      */
-    public void updateUniformBindings(List<Uniform> params) {
-        uniformBindingManager.updateUniformBindings(params);
+    public void updateUniformBindings(Shader shader) {
+        uniformBindingManager.updateUniformBindings(shader);
     }
 
     /**

File: jme3-examples/src/main/java/jme3test/material/TestShaderNodes.java
Patch:
@@ -30,9 +30,9 @@ public void simpleInitApp() {
         mat.selectTechnique("Default", renderManager);
         Technique t = mat.getActiveTechnique();
 
-        for (Shader.ShaderSource shaderSource : t.getShader().getSources()) {
-            System.out.println(shaderSource.getSource());
-        }
+//        for (Shader.ShaderSource shaderSource : t.getShader().getSources()) {
+//            System.out.println(shaderSource.getSource());
+//        }
 
         
         mat.setColor("Color", ColorRGBA.Yellow);

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglCanvas.java
Patch:
@@ -301,7 +301,7 @@ protected PixelFormat acquirePixelFormat(boolean forPbuffer){
             // crashes on bad drivers
             if (pbufferFormat == null){
                 pbufferFormat = new PixelFormat(settings.getBitsPerPixel(),
-                                                0,
+                                                settings.getAlphaBits(),
                                                 settings.getDepthBits(),
                                                 settings.getStencilBits(),
                                                 0, // samples
@@ -315,7 +315,7 @@ protected PixelFormat acquirePixelFormat(boolean forPbuffer){
             if (canvasFormat == null){
                 int samples = getNumSamplesToUse();
                 canvasFormat = new PixelFormat(settings.getBitsPerPixel(),
-                                               0,
+                                               settings.getAlphaBits(),
                                                settings.getDepthBits(),
                                                settings.getStencilBits(),
                                                samples,

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglDisplay.java
Patch:
@@ -84,7 +84,7 @@ protected void createContext(AppSettings settings) throws LWJGLException{
 
         int samples = getNumSamplesToUse();
         PixelFormat pf = new PixelFormat(settings.getBitsPerPixel(),
-                                         0,
+                                         settings.getAlphaBits(),
                                          settings.getDepthBits(),
                                          settings.getStencilBits(),
                                          samples, 
@@ -99,6 +99,7 @@ protected void createContext(AppSettings settings) throws LWJGLException{
 
         boolean pixelFormatChanged = false;
         if (created.get() && (pixelFormat.getBitsPerPixel() != pf.getBitsPerPixel()
+        					||pixelFormat.getAlphaBits() != pf.getAlphaBits()
                             ||pixelFormat.getDepthBits() != pf.getDepthBits()
                             ||pixelFormat.getStencilBits() != pf.getStencilBits()
                             ||pixelFormat.getSamples() != pf.getSamples())){

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglOffscreenBuffer.java
Patch:
@@ -62,7 +62,7 @@ protected void initInThread(){
 
         int samples = getNumSamplesToUse();
         pixelFormat = new PixelFormat(settings.getBitsPerPixel(),
-                                      0,
+                                      settings.getAlphaBits(),
                                       settings.getDepthBits(),
                                       settings.getStencilBits(),
                                       samples);

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL3.java
Patch:
@@ -58,6 +58,7 @@ public interface GL3 extends GL2 {
     public void glBindFragDataLocation(int param1, int param2, String param3); /// GL3+
     public void glBindVertexArray(int param1); /// GL3+
     public void glDeleteVertexArrays(IntBuffer arrays); /// GL3+
+    public void glFramebufferTextureLayer(int param1, int param2, int param3, int param4, int param5); /// GL3+
     public void glGenVertexArrays(IntBuffer param1); /// GL3+
     public String glGetString(int param1, int param2); /// GL3+
 }

File: jme3-core/src/main/java/com/jme3/shader/VarType.java
Patch:
@@ -55,7 +55,7 @@ public enum VarType {
     TextureBuffer(false,true,"sampler1D|sampler1DShadow"),
     Texture2D(false,true,"sampler2D|sampler2DShadow"),
     Texture3D(false,true,"sampler3D"),
-    TextureArray(false,true,"sampler2DArray"),
+    TextureArray(false,true,"sampler2DArray|sampler2DArrayShadow"),
     TextureCubeMap(false,true,"samplerCube"),
     Int("int");
 

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ShaderNodeLoaderDelegate.java
Patch:
@@ -752,6 +752,7 @@ public VariableMapping readInputMapping(Statement statement1) throws IOException
             }
             right.setNameSpace(node.getName());
             right.setType(var.getType());
+            right.setMultiplicity(var.getMultiplicity());
             mapping.setRightVariable(right);            
             storeVaryings(node, mapping.getRightVariable());
 

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ShaderNodeLoaderDelegate.java
Patch:
@@ -752,6 +752,7 @@ public VariableMapping readInputMapping(Statement statement1) throws IOException
             }
             right.setNameSpace(node.getName());
             right.setType(var.getType());
+            right.setMultiplicity(var.getMultiplicity());
             mapping.setRightVariable(right);            
             storeVaryings(node, mapping.getRightVariable());
 

File: jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
Patch:
@@ -540,7 +540,9 @@ public void startCanvas(boolean waitFor){
      * Internal use only.
      */
     public void reshape(int w, int h){
-        renderManager.notifyReshape(w, h);
+        if (renderManager != null) {
+            renderManager.notifyReshape(w, h);
+        }
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/app/LegacyApplication.java
Patch:
@@ -540,7 +540,9 @@ public void startCanvas(boolean waitFor){
      * Internal use only.
      */
     public void reshape(int w, int h){
-        renderManager.notifyReshape(w, h);
+        if (renderManager != null) {
+            renderManager.notifyReshape(w, h);
+        }
     }
 
     /**

File: jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwMouseInput.java
Patch:
@@ -136,7 +136,7 @@ public void invoke(long window, double xpos, double ypos) {
         glfwSetScrollCallback(context.getWindowHandle(), scrollCallback = new GLFWScrollCallback() {
             @Override
             public void invoke(final long window, final double xOffset, final double yOffset) {
-                onWheelScroll(window, xOffset, yOffset);
+                onWheelScroll(window, xOffset, yOffset * 120);
             }
         });
 
@@ -213,7 +213,7 @@ private long createGlfwCursor(JmeCursor jmeCursor) {
 
         // TODO: currently animated cursors are not supported
         IntBuffer imageData = jmeCursor.getImagesData();
-        ByteBuffer buf = BufferUtils.createByteBuffer(imageData.capacity());
+        ByteBuffer buf = BufferUtils.createByteBuffer(imageData.capacity() * 4);
         buf.asIntBuffer().put(imageData);
 
         glfwImage.set(jmeCursor.getWidth(), jmeCursor.getHeight(), buf);

File: jme3-core/src/main/java/com/jme3/util/clone/Cloner.java
Patch:
@@ -354,6 +354,9 @@ public void clearIndex() {
      *  clone() and objects without necessarily knowing their real type.</p>
      */
     public <T> T javaClone( T object ) throws CloneNotSupportedException {
+        if( object == null ) {
+            return null;
+        }
         Method m = methodCache.get(object.getClass());
         if( m == null ) {
             try {

File: jme3-core/src/main/java/com/jme3/audio/AudioNode.java
Patch:
@@ -730,6 +730,8 @@ public AudioNode clone(){
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         this.direction = cloner.clone(direction);
         this.velocity = cloner.clone(velocity);
 

File: jme3-core/src/main/java/com/jme3/effect/influencers/RadialParticleInfluencer.java
Patch:
@@ -125,6 +125,8 @@ public void setHorizontal(boolean horizontal) {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         // Change in behavior: the old origin was not cloned -pspeed
         this.origin = cloner.clone(origin);
     }

File: jme3-core/src/main/java/com/jme3/font/BitmapText.java
Patch:
@@ -90,6 +90,8 @@ public BitmapText clone() {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         for( int i = 0; i < textPages.length; i++ ) {
             textPages[i] = cloner.clone(textPages[i]);
         }

File: jme3-core/src/main/java/com/jme3/scene/AssetLinkNode.java
Patch:
@@ -76,6 +76,8 @@ public AssetLinkNode(String name, ModelKey key) {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         // This is a change in behavior because the old version did not clone
         // this list... changes to one clone would be reflected in all.
         // I think that's probably undesirable. -pspeed

File: jme3-core/src/main/java/com/jme3/scene/BatchNode.java
Patch:
@@ -727,6 +727,8 @@ public Node clone(boolean cloneMaterials) {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         this.batches = cloner.clone(batches);
         this.tmpFloat = cloner.clone(tmpFloat);
         this.tmpFloatN = cloner.clone(tmpFloatN);

File: jme3-core/src/main/java/com/jme3/scene/CameraNode.java
Patch:
@@ -100,6 +100,8 @@ public Camera getCamera() {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         // A change in behavior... I think previously CameraNode was probably
         // not really cloneable... or at least its camControl would be pointing
         // to the wrong control. -pspeed

File: jme3-core/src/main/java/com/jme3/scene/LightNode.java
Patch:
@@ -100,6 +100,8 @@ public Light getLight() {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         // A change in behavior... I think previously LightNode was probably
         // not really cloneable... or at least its lightControl would be pointing
         // to the wrong control. -pspeed

File: jme3-core/src/main/java/com/jme3/scene/Mesh.java
Patch:
@@ -307,7 +307,9 @@ public Mesh cloneForAnim(){
     @Override
     public Mesh jmeClone() {
         try {
-            return (Mesh)super.clone();
+            Mesh clone = (Mesh)super.clone();
+            clone.vertexArrayID = -1;
+            return clone;
         } catch (CloneNotSupportedException ex) {
             throw new AssertionError();
         }

File: jme3-core/src/main/java/com/jme3/scene/instancing/InstancedGeometry.java
Patch:
@@ -349,6 +349,8 @@ public VertexBuffer[] getAllInstanceData() {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         this.globalInstanceData = cloner.clone(globalInstanceData);
         this.transformInstanceData = cloner.clone(transformInstanceData);
         this.geometries = cloner.clone(geometries);

File: jme3-core/src/main/java/com/jme3/scene/instancing/InstancedNode.java
Patch:
@@ -350,6 +350,8 @@ public Node clone(boolean cloneMaterials) {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         this.control = cloner.clone(control);
         this.lookUp = cloner.clone(lookUp);
 

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/NormalRecalcControl.java
Patch:
@@ -84,6 +84,7 @@ public Object jmeClone() {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
         this.terrain = cloner.clone(terrain);
     }
 

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainPatch.java
Patch:
@@ -961,6 +961,7 @@ public TerrainPatch clone() {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
 
         this.stepScale = cloner.clone(stepScale);
         this.offset = cloner.clone(offset);

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -1813,6 +1813,8 @@ public TerrainQuad clone(boolean cloneMaterials) {
      */
     @Override
     public void cloneFields( Cloner cloner, Object original ) {
+        super.cloneFields(cloner, original);
+
         this.stepScale = cloner.clone(stepScale);
         this.offset = cloner.clone(offset);
 

File: jme3-examples/src/main/java/jme3test/bullet/PhysicsHoverControl.java
Patch:
@@ -192,6 +192,7 @@ public void render(RenderManager rm, ViewPort vp) {
     }
 
     public void setPhysicsSpace(PhysicsSpace space) {
+        createVehicle(space);
         if (space == null) {
             if (this.space != null) {
                 this.space.removeCollisionObject(this);

File: jme3-examples/src/main/java/jme3test/bullet/TestHoveringTank.java
Patch:
@@ -147,13 +147,13 @@ private void buildPlayer() {
         spaceCraft.setLocalRotation(new Quaternion(new float[]{0, 0.01f, 0}));
 
         hoverControl = new PhysicsHoverControl(colShape, 500);
-        hoverControl.setCollisionGroup(PhysicsCollisionObject.COLLISION_GROUP_02);
 
         spaceCraft.addControl(hoverControl);
 
 
         rootNode.attachChild(spaceCraft);
         getPhysicsSpace().add(hoverControl);
+        hoverControl.setCollisionGroup(PhysicsCollisionObject.COLLISION_GROUP_02);
 
         ChaseCamera chaseCam = new ChaseCamera(cam, inputManager);
         spaceCraft.addControl(chaseCam);

File: jme3-core/src/main/java/com/jme3/math/Spline.java
Patch:
@@ -458,7 +458,7 @@ public void write(JmeExporter ex) throws IOException {
     public void read(JmeImporter im) throws IOException {
         InputCapsule in = im.getCapsule(this);
 
-        controlPoints = (ArrayList<Vector3f>) in.readSavableArrayList("wayPoints", null);
+        controlPoints = (ArrayList<Vector3f>) in.readSavableArrayList("controlPoints", new ArrayList<Vector3f>()); /* Empty List as default, prevents null pointers */
         float list[] = in.readFloatArray("segmentsLength", null);
         if (list != null) {
             segmentsLength = new ArrayList<Float>();

File: jme3-core/src/main/java/com/jme3/shadow/DirectionalLightShadowRenderer.java
Patch:
@@ -215,6 +215,7 @@ protected void doDisplayFrustumDebug(int shadowMapIndex) {
     @Override
     protected void setMaterialParameters(Material material) {
         material.setColor("Splits", splits);
+        material.setVector3("LightDir", light.getDirection());
         if (fadeInfo != null) {
             material.setVector2("FadeInfo", fadeInfo);
         }
@@ -224,6 +225,7 @@ protected void setMaterialParameters(Material material) {
     protected void clearMaterialParameters(Material material) {
         material.clearParam("Splits");
         material.clearParam("FadeInfo");
+        material.clearParam("LightDir");
     }
 
     /**

File: jme3-plugins/src/main/java/com/jme3/material/plugin/export/material/J3MRootOutputCapsule.java
Patch:
@@ -91,7 +91,9 @@ public void write(boolean value, String name, boolean defVal) throws IOException
 
     @Override
     public void write(Savable object, String name, Savable defVal) throws IOException {
-        object.write(exporter);
+        if(object != null && !object.equals(defVal)) {
+            object.write(exporter);
+        }
     }
 
 }

File: jme3-examples/src/main/java/jme3test/light/TestSpotLight.java
Patch:
@@ -58,7 +58,7 @@ public static void main(String[] args){
     Geometry lightMdl;
     public void setupLighting(){
       AmbientLight al=new AmbientLight();
-      al.setColor(ColorRGBA.White.mult(0.8f));
+      al.setColor(ColorRGBA.White.mult(0.02f));
       rootNode.addLight(al);
         
       spot=new SpotLight();

File: jme3-examples/src/main/java/jme3test/light/TestSpotLightShadows.java
Patch:
@@ -65,7 +65,7 @@ public static void main(String[] args) {
 
     public void setupLighting() {
         AmbientLight al = new AmbientLight();
-        al.setColor(ColorRGBA.White.mult(0.3f));
+        al.setColor(ColorRGBA.White.mult(0.02f));
         rootNode.addLight(al);
 
         rootNode.setShadowMode(ShadowMode.CastAndReceive);

File: jme3-examples/src/main/java/jme3test/light/TestSpotLightTerrain.java
Patch:
@@ -95,7 +95,7 @@ public void simpleInitApp() {
         rootNode.addLight(sl);
 
         AmbientLight ambLight = new AmbientLight();
-        ambLight.setColor(new ColorRGBA(0.8f, 0.8f, 0.8f, 0.2f));
+        ambLight.setColor(ColorRGBA.Black);
         rootNode.addLight(ambLight);
 
         cam.setLocation(new Vector3f(-41.219646f, -84.8363f, -171.67267f));

File: jme3-examples/src/main/java/jme3test/bullet/PhysicsHoverControl.java
Patch:
@@ -94,7 +94,6 @@ public PhysicsHoverControl(CollisionShape shape, float mass) {
         createWheels();
     }
 
-    @Override
     public Control cloneForSpatial(Spatial spatial) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
@@ -180,6 +179,7 @@ public void render(RenderManager rm, ViewPort vp) {
     }
 
     public void setPhysicsSpace(PhysicsSpace space) {
+        createVehicle(space);
         if (space == null) {
             if (this.space != null) {
                 this.space.removeCollisionObject(this);

File: jme3-examples/src/main/java/jme3test/bullet/TestHoveringTank.java
Patch:
@@ -147,13 +147,13 @@ private void buildPlayer() {
         spaceCraft.setLocalRotation(new Quaternion(new float[]{0, 0.01f, 0}));
 
         hoverControl = new PhysicsHoverControl(colShape, 500);
-        hoverControl.setCollisionGroup(PhysicsCollisionObject.COLLISION_GROUP_02);
 
         spaceCraft.addControl(hoverControl);
 
 
         rootNode.attachChild(spaceCraft);
         getPhysicsSpace().add(hoverControl);
+        hoverControl.setCollisionGroup(PhysicsCollisionObject.COLLISION_GROUP_02);
 
         ChaseCamera chaseCam = new ChaseCamera(cam, inputManager);
         spaceCraft.addControl(chaseCam);
@@ -168,7 +168,7 @@ public void makeMissile() {
 
         Spatial missile = assetManager.loadModel("Models/SpaceCraft/Rocket.mesh.xml");
         missile.scale(0.5f);
-        missile.rotate(0, FastMath.PI, 0);
+        missile.rotate(FastMath.PI, FastMath.PI, 0);
         missile.updateGeometricState();
 
         BoundingBox box = (BoundingBox) missile.getWorldBound();

File: jme3-core/src/main/java/com/jme3/system/JmeSystemDelegate.java
Patch:
@@ -157,6 +157,8 @@ private boolean is64Bit(String arch) {
             return false;
         } else if (arch.equals("aarch64")) {
             return true;
+        } else if (arch.equals("armv7") || arch.equals("armv7l")) {
+            return false;
         } else if (arch.equals("arm")) {
             return false;
         } else {

File: jme3-core/src/main/java/com/jme3/system/JmeSystemDelegate.java
Patch:
@@ -157,6 +157,8 @@ private boolean is64Bit(String arch) {
             return false;
         } else if (arch.equals("aarch64")) {
             return true;
+        } else if (arch.equals("armv7") || arch.equals("armv7l")) {
+            return false;
         } else if (arch.equals("arm")) {
             return false;
         } else {

File: jme3-examples/src/main/java/jme3test/TestChooser.java
Patch:
@@ -260,8 +260,8 @@ public void run(){
                     for (int i = 0; i < appClass.length; i++) {
                 	    Class<?> clazz = (Class)appClass[i];
                 		try {
-                			Object app = clazz.newInstance();
-                			if (app instanceof Application) {
+                			if (Application.class.isAssignableFrom(clazz)) {
+                    			Object app = clazz.newInstance();
                 			    if (app instanceof SimpleApplication) {
                 			        final Method settingMethod = clazz.getMethod("setShowSettings", boolean.class);
                 			        settingMethod.invoke(app, showSetting);
@@ -283,7 +283,7 @@ public void run(){
                 			    }
                 			} else {
                                 final Method mainMethod = clazz.getMethod("main", (new String[0]).getClass());
-                                mainMethod.invoke(app, new Object[]{new String[0]});
+                                mainMethod.invoke(clazz, new Object[]{new String[0]});
                 			}
                 			// wait for destroy
                 			System.gc();

File: jme3-core/src/test/java/com/jme3/material/plugins/J3MLoaderTest.java
Patch:
@@ -80,6 +80,7 @@ public void newStyleTextureParameters_shouldBeSupported() throws Exception {
         final Texture textureMin = Mockito.mock(Texture.class);
         final Texture textureMag = Mockito.mock(Texture.class);
         final Texture textureCombined = Mockito.mock(Texture.class);
+        final Texture textureLooksLikeOldStyle = Mockito.mock(Texture.class);
 
         final TextureKey textureKeyNoParameters = setupMockForTexture("Empty", "empty.png", false, textureNoParameters);
         final TextureKey textureKeyFlip = setupMockForTexture("Flip", "flip.png", true, textureFlip);
@@ -88,6 +89,7 @@ public void newStyleTextureParameters_shouldBeSupported() throws Exception {
         setupMockForTexture("Min", "min.png", false, textureMin);
         setupMockForTexture("Mag", "mag.png", false, textureMag);
         setupMockForTexture("Combined", "combined.png", true, textureCombined);
+        setupMockForTexture("LooksLikeOldStyle", "oldstyle.png", true, textureLooksLikeOldStyle);
 
         j3MLoader.load(assetInfo);
 

File: jme3-core/src/main/java/com/jme3/scene/shape/Cylinder.java
Patch:
@@ -222,6 +222,7 @@ public void updateGeometry(int axisSamples, int radialSamples,
 //        VertexBuffer pvb = getBuffer(Type.Position);
 //        VertexBuffer nvb = getBuffer(Type.Normal);
 //        VertexBuffer tvb = getBuffer(Type.TexCoord);
+        axisSamples += (closed ? 2 : 0);
 
         // Vertices
         int vertCount = axisSamples * (radialSamples + 1) + (closed ? 2 : 0);

File: jme3-core/src/main/java/com/jme3/scene/BatchNode.java
Patch:
@@ -116,7 +116,7 @@ public void onMeshChange(Geometry geom) {
     }
 
     @Override
-    public void onGeoemtryUnassociated(Geometry geom) {
+    public void onGeometryUnassociated(Geometry geom) {
         setNeedsFullRebatch(true);
     }
 

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -344,7 +344,7 @@ public void unassociateFromGroupNode() {
         if (groupNode != null) {
             // Once the geometry is removed 
             // from the parent, the group node needs to be updated.
-            groupNode.onGeoemtryUnassociated(this);
+            groupNode.onGeometryUnassociated(this);
             groupNode = null;
             
             // change the default to -1 to make error detection easier

File: jme3-core/src/main/java/com/jme3/scene/GeometryGroupNode.java
Patch:
@@ -83,5 +83,5 @@ public GeometryGroupNode(String name) {
      * 
      * @param geom The Geometry which is being unassociated.
      */
-    public abstract void onGeoemtryUnassociated(Geometry geom);
+    public abstract void onGeometryUnassociated(Geometry geom);
 }

File: jme3-core/src/main/java/com/jme3/scene/instancing/InstancedNode.java
Patch:
@@ -329,7 +329,7 @@ public void onMeshChange(Geometry geom) {
     }
 
     @Override
-    public void onGeoemtryUnassociated(Geometry geom) {
+    public void onGeometryUnassociated(Geometry geom) {
         removeFromInstancedGeometry(geom);
     }
 }

File: sdk/jme3-welcome-screen/src/com/jme3/gde/welcome/WelcomeScreenTopComponent.java
Patch:
@@ -38,7 +38,7 @@
 @ActionID(category = "Window", id = "com.jme3.gde.welcome.WelcomeScreenTopComponent")
 @ActionReference(path = "Menu/Window" /*, position = 333 */)
 @TopComponent.OpenActionRegistration(
-    displayName = "#CTL_WelcomeScreenAction",
+    displayName = "CTL_WelcomeScreenAction", /* No # since it's not part of the Bundles.properties. See http://bits.netbeans.org/dev/javadoc/org-openide-awt/org/openide/awt/ActionRegistration.html#displayName-- */
 preferredID = "WelcomeScreenTopComponent")
 @Messages({
     "CTL_WelcomeScreenAction=Info Screen",

File: sdk/jme3-welcome-screen/src/com/jme3/gde/welcome/WelcomeScreenTopComponent.java
Patch:
@@ -38,7 +38,7 @@
 @ActionID(category = "Window", id = "com.jme3.gde.welcome.WelcomeScreenTopComponent")
 @ActionReference(path = "Menu/Window" /*, position = 333 */)
 @TopComponent.OpenActionRegistration(
-    displayName = "#CTL_WelcomeScreenAction",
+    displayName = "CTL_WelcomeScreenAction", /* No # since it's not part of the Bundles.properties. See http://bits.netbeans.org/dev/javadoc/org-openide-awt/org/openide/awt/ActionRegistration.html#displayName-- */
 preferredID = "WelcomeScreenTopComponent")
 @Messages({
     "CTL_WelcomeScreenAction=Info Screen",

File: jme3-core/src/main/java/com/jme3/scene/BatchNode.java
Patch:
@@ -116,7 +116,7 @@ public void onMeshChange(Geometry geom) {
     }
 
     @Override
-    public void onGeoemtryUnassociated(Geometry geom) {
+    public void onGeometryUnassociated(Geometry geom) {
         setNeedsFullRebatch(true);
     }
 

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -344,7 +344,7 @@ public void unassociateFromGroupNode() {
         if (groupNode != null) {
             // Once the geometry is removed 
             // from the parent, the group node needs to be updated.
-            groupNode.onGeoemtryUnassociated(this);
+            groupNode.onGeometryUnassociated(this);
             groupNode = null;
             
             // change the default to -1 to make error detection easier

File: jme3-core/src/main/java/com/jme3/scene/GeometryGroupNode.java
Patch:
@@ -83,5 +83,5 @@ public GeometryGroupNode(String name) {
      * 
      * @param geom The Geometry which is being unassociated.
      */
-    public abstract void onGeoemtryUnassociated(Geometry geom);
+    public abstract void onGeometryUnassociated(Geometry geom);
 }

File: jme3-core/src/main/java/com/jme3/scene/instancing/InstancedNode.java
Patch:
@@ -329,7 +329,7 @@ public void onMeshChange(Geometry geom) {
     }
 
     @Override
-    public void onGeoemtryUnassociated(Geometry geom) {
+    public void onGeometryUnassociated(Geometry geom) {
         removeFromInstancedGeometry(geom);
     }
 }

File: jme3-core/src/main/java/com/jme3/animation/Bone.java
Patch:
@@ -139,7 +139,7 @@ public Bone(String name) {
     /**
      * Special-purpose copy constructor. 
      * <p>
-     * Only copies the name, user control state and world inverse / local bind pose transforms from the original.
+     * Only copies the name, user control state and bind pose transforms from the original.
      * <p>
      * The rest of the data is <em>NOT</em> copied, as it will be
      * generated automatically when the bone is animated.

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java
Patch:
@@ -440,7 +440,6 @@ public void run() {
                     + "Must set with JmeContext.setSystemListener().");
         }
 
-        loadNatives();
         LOGGER.log(Level.FINE, "Using LWJGL {0}", Version.getVersion());
 
         if (!initInThread()) {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/EditableMatDefFile.java
Patch:
@@ -186,7 +186,7 @@ public String getShaderCode(String version, Shader.ShaderType type) {
             return "";
         } catch (Exception e) {
             Exceptions.printStackTrace(e);
-            return "error generating shader " + e.getMessage();
+            return "Error generating shader: " + e.getMessage();
         }
     }
 

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/MatDefDataObject.java
Patch:
@@ -142,6 +142,7 @@ public MatDefDataObject(FileObject pf, MultiFileLoader loader) throws DataObject
         findAssetManager();
         final MatDefMetaData metaData = new MatDefMetaData(this);
         lookupContents.add(metaData);
+        lookupContents.add(new MatDefNavigatorPanel());
         pf.addFileChangeListener(new FileChangeAdapter() {
             @Override
             public void fileChanged(FileEvent fe) {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/MaterialPreviewRenderer.java
Patch:
@@ -148,7 +148,7 @@ public void run() {
         });
     }
 
-    private int lastErrorHash = 0;
+    private static int lastErrorHash = 0;
 
     private void smartLog(String expText, String message) {
         int hash = message.hashCode();
@@ -183,7 +183,8 @@ public Material reloadMaterial(Material mat) {
             //compilation error, the shader code will be output to the console
             //the following code will output the error
             //System.err.println(e.getMessage());
-            Logger.getLogger(MaterialDebugAppState.class.getName()).log(Level.SEVERE, e.getMessage());
+            //Logger.getLogger(MaterialDebugAppState.class.getName()).log(Level.SEVERE, e.getMessage());
+            smartLog("{0}", e.getMessage());
 
             java.awt.EventQueue.invokeLater(new Runnable() {
                 public void run() {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/EditableMatDefFile.java
Patch:
@@ -186,7 +186,7 @@ public String getShaderCode(String version, Shader.ShaderType type) {
             return "";
         } catch (Exception e) {
             Exceptions.printStackTrace(e);
-            return "error generating shader " + e.getMessage();
+            return "Error generating shader: " + e.getMessage();
         }
     }
 

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/MatDefDataObject.java
Patch:
@@ -142,6 +142,7 @@ public MatDefDataObject(FileObject pf, MultiFileLoader loader) throws DataObject
         findAssetManager();
         final MatDefMetaData metaData = new MatDefMetaData(this);
         lookupContents.add(metaData);
+        lookupContents.add(new MatDefNavigatorPanel());
         pf.addFileChangeListener(new FileChangeAdapter() {
             @Override
             public void fileChanged(FileEvent fe) {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/MaterialPreviewRenderer.java
Patch:
@@ -148,7 +148,7 @@ public void run() {
         });
     }
 
-    private int lastErrorHash = 0;
+    private static int lastErrorHash = 0;
 
     private void smartLog(String expText, String message) {
         int hash = message.hashCode();
@@ -183,7 +183,8 @@ public Material reloadMaterial(Material mat) {
             //compilation error, the shader code will be output to the console
             //the following code will output the error
             //System.err.println(e.getMessage());
-            Logger.getLogger(MaterialDebugAppState.class.getName()).log(Level.SEVERE, e.getMessage());
+            //Logger.getLogger(MaterialDebugAppState.class.getName()).log(Level.SEVERE, e.getMessage());
+            smartLog("{0}", e.getMessage());
 
             java.awt.EventQueue.invokeLater(new Runnable() {
                 public void run() {

File: jme3-core/src/main/java/com/jme3/environment/LightProbeFactory.java
Patch:
@@ -153,7 +153,7 @@ public static LightProbe updateProbe(final LightProbe probe, final EnvironmentCa
         
         probe.setReady(false);
         
-        if(probe.getIrradianceMap() == null) {
+        if(probe.getIrradianceMap() != null) {
             probe.getIrradianceMap().getImage().dispose();
             probe.getPrefilteredEnvMap().getImage().dispose();
         }

File: jme3-core/src/main/java/com/jme3/light/Light.java
Patch:
@@ -228,7 +228,9 @@ public void setEnabled(boolean enabled) {
     @Override
     public Light clone(){
         try {
-            return (Light) super.clone();
+            Light l = (Light) super.clone();
+            l.color = color.clone();
+            return l;
         } catch (CloneNotSupportedException ex) {
             throw new AssertionError();
         }

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -1236,12 +1236,14 @@ public void write(JmeExporter ex) throws IOException {
         oc.write(def.getAssetName(), "material_def", null);
         oc.write(additionalState, "render_state", null);
         oc.write(transparent, "is_transparent", false);
+        oc.write(name, "name", null);
         oc.writeStringSavableMap(paramValues, "parameters", null);
     }
 
     public void read(JmeImporter im) throws IOException {
         InputCapsule ic = im.getCapsule(this);
 
+        name = ic.readString("name", null);
         additionalState = (RenderState) ic.readSavable("render_state", null);
         transparent = ic.readBoolean("is_transparent", false);
 

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -1236,12 +1236,14 @@ public void write(JmeExporter ex) throws IOException {
         oc.write(def.getAssetName(), "material_def", null);
         oc.write(additionalState, "render_state", null);
         oc.write(transparent, "is_transparent", false);
+        oc.write(name, "name", null);
         oc.writeStringSavableMap(paramValues, "parameters", null);
     }
 
     public void read(JmeImporter im) throws IOException {
         InputCapsule ic = im.getCapsule(this);
 
+        name = ic.readString("name", null);
         additionalState = (RenderState) ic.readSavable("render_state", null);
         transparent = ic.readBoolean("is_transparent", false);
 

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -713,12 +713,14 @@ private LightProbe extractIndirectLights(LightList lightList, boolean removeLigh
                 ambientLightColor.addLocal(l.getColor());
                 if(removeLights){
                     lightList.remove(l);
+                    j--;
                 }
             }
             if (l instanceof LightProbe) {
                 probe = (LightProbe)l;                
                 if(removeLights){
                     lightList.remove(l);
+                    j--;
                 }
             }
         }

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -713,12 +713,14 @@ private LightProbe extractIndirectLights(LightList lightList, boolean removeLigh
                 ambientLightColor.addLocal(l.getColor());
                 if(removeLights){
                     lightList.remove(l);
+                    j--;
                 }
             }
             if (l instanceof LightProbe) {
                 probe = (LightProbe)l;                
                 if(removeLights){
                     lightList.remove(l);
+                    j--;
                 }
             }
         }

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsVehicle.java
Patch:
@@ -456,7 +456,7 @@ public float getCurrentVehicleSpeedKmHour() {
     /**
      * Get the current forward vector of the vehicle in world coordinates
      * @param vector The object to write the forward vector values to.
-     * Passing null will cause a new {@link Vector3f) to be created.
+     * Passing null will cause a new {@link Vector3f} to be created.
      * @return The forward vector
      */
     public Vector3f getForwardVector(Vector3f vector) {

File: jme3-jbullet/src/main/java/com/jme3/bullet/objects/PhysicsVehicle.java
Patch:
@@ -456,7 +456,7 @@ public float getCurrentVehicleSpeedKmHour() {
     /**
      * Get the current forward vector of the vehicle in world coordinates
      * @param vector The object to write the forward vector values to.
-     * Passing null will cause a new {@link Vector3f) to be created.
+     * Passing null will cause a new {@link Vector3f} to be created.
      * @return The forward vector
      */
     public Vector3f getForwardVector(Vector3f vector) {

File: jme3-bullet/src/main/java/com/jme3/bullet/collision/shapes/SphereCollisionShape.java
Patch:
@@ -91,7 +91,7 @@ protected void createShape() {
 //        new SphereShape(radius);
 //        objectId.setLocalScaling(Converter.convert(getScale()));
 //        objectId.setMargin(margin);
-        setScale(scale);
+        super.setScale(scale); // Set the scale to 1
         setMargin(margin);
     }
     

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -963,7 +963,7 @@ public String getSettingsDialogImage() {
         return getString("SettingsDialogImage");
     }
 
-    public boolean getGammaCorrection() {
+    public boolean isGammaCorrection() {
         return getBoolean("GammaCorrection");
     }
     

File: jme3-desktop/src/main/java/com/jme3/app/SettingsDialog.java
Patch:
@@ -360,7 +360,7 @@ public void actionPerformed(ActionEvent e) {
         vsyncBox.setSelected(source.isVSync());
         
         gammaBox = new JCheckBox(resourceBundle.getString("checkbox.gamma"));
-        gammaBox.setSelected(source.getGammaCorrection());
+        gammaBox.setSelected(source.isGammaCorrection());
         
         gbc = new GridBagConstraints();
         gbc.weightx = 0.5;

File: jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwKeyInput.java
Patch:
@@ -66,7 +66,8 @@ public void initialize() {
         glfwSetKeyCallback(context.getWindowHandle(), keyCallback = new GLFWKeyCallback() {
             @Override
             public void invoke(long window, int key, int scancode, int action, int mods) {
-                final KeyInputEvent evt = new KeyInputEvent(scancode, (char) key, GLFW_PRESS == action, GLFW_REPEAT == action);
+                int jmeKey = GlfwKeyMap.toJmeKeyCode(key);
+                final KeyInputEvent evt = new KeyInputEvent(jmeKey, (char) key, GLFW_PRESS == action, GLFW_REPEAT == action);
                 evt.setTime(getInputTimeNanos());
                 keyInputEvents.add(evt);
             }

File: jme3-networking/src/main/java/com/jme3/network/base/MessageProtocol.java
Patch:
@@ -181,7 +181,7 @@ protected void createMessage( ByteBuffer buffer )
             Message m = (Message)obj;
             messages.add(m);
         } catch( IOException e ) {
-            throw new RuntimeException( "Error deserializing object, clas ID:" + buffer.getShort(0), e );   
+            throw new RuntimeException( "Error deserializing object, class ID:" + buffer.getShort(0), e );   
         }         
     }
 }

File: jme3-core/src/tools/java/jme3tools/optimize/TextureAtlas.java
Patch:
@@ -155,7 +155,7 @@ public boolean addGeometry(Geometry geometry) {
                 return false;
             } else {
                 if (normal != null && normal.getKey() != null) {
-                    addTexture(diffuse, "NormalMap", keyName);
+                    addTexture(normal, "NormalMap", keyName);
                 }
                 if (specular != null && specular.getKey() != null) {
                     addTexture(specular, "SpecularMap", keyName);

File: jme3-bullet/src/common/java/com/jme3/bullet/control/BetterCharacterControl.java
Patch:
@@ -171,6 +171,8 @@ public void prePhysicsTick(PhysicsSpace space, float tpf) {
         }
         TempVars vars = TempVars.get();
 
+        Vector3f currentVelocity = vars.vect2.set(velocity);
+        
         // dampen existing x/z forces
         float existingLeftVelocity = velocity.dot(localLeft);
         float existingForwardVelocity = velocity.dot(localForward);
@@ -194,7 +196,7 @@ public void prePhysicsTick(PhysicsSpace space, float tpf) {
             //add resulting vector to existing velocity
             velocity.addLocal(localWalkDirection);
         }
-        rigidBody.setLinearVelocity(velocity);
+        if(currentVelocity.distance(velocity) > FastMath.ZERO_TOLERANCE) rigidBody.setLinearVelocity(velocity);
         if (jump) {
             //TODO: precalculate jump force
             Vector3f rotatedJumpForce = vars.vect1;

File: jme3-bullet/src/common/java/com/jme3/bullet/control/BetterCharacterControl.java
Patch:
@@ -171,6 +171,8 @@ public void prePhysicsTick(PhysicsSpace space, float tpf) {
         }
         TempVars vars = TempVars.get();
 
+        Vector3f currentVelocity = vars.vect2.set(velocity);
+        
         // dampen existing x/z forces
         float existingLeftVelocity = velocity.dot(localLeft);
         float existingForwardVelocity = velocity.dot(localForward);
@@ -194,7 +196,7 @@ public void prePhysicsTick(PhysicsSpace space, float tpf) {
             //add resulting vector to existing velocity
             velocity.addLocal(localWalkDirection);
         }
-        rigidBody.setLinearVelocity(velocity);
+        if(currentVelocity.distance(velocity) > FastMath.ZERO_TOLERANCE) rigidBody.setLinearVelocity(velocity);
         if (jump) {
             //TODO: precalculate jump force
             Vector3f rotatedJumpForce = vars.vect1;

File: jme3-core/src/tools/java/jme3tools/optimize/TextureAtlas.java
Patch:
@@ -155,7 +155,7 @@ public boolean addGeometry(Geometry geometry) {
                 return false;
             } else {
                 if (normal != null && normal.getKey() != null) {
-                    addTexture(diffuse, "NormalMap", keyName);
+                    addTexture(normal, "NormalMap", keyName);
                 }
                 if (specular != null && specular.getKey() != null) {
                     addTexture(specular, "SpecularMap", keyName);

File: jme3-networking/src/main/java/com/jme3/network/service/rpc/msg/RpcResponseMessage.java
Patch:
@@ -84,6 +84,7 @@ public String getError() {
     @Override
     public String toString() {
         return getClass().getSimpleName() + "[#" + msgId + ", result=" + result
+                                          + (error != null ? ", error=" + error : "")
                                           + "]";
     }
 }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/curves/CurvesTemporalMesh.java
Patch:
@@ -180,8 +180,8 @@ private CurvesTemporalMesh(Structure curveStructure, Vector3f scale, boolean loa
         if (bevelObject != null && beziers.size() > 0) {
             this.append(this.applyBevelAndTaper(this, bevelObject, taperObject, blenderContext));
         } else {
-            int originalVerticesAmount = vertices.size();
             for (BezierLine bezierLine : beziers) {
+            	int originalVerticesAmount = vertices.size();
                 vertices.add(bezierLine.vertices[0]);
                 Vector3f v = bezierLine.vertices[1].subtract(bezierLine.vertices[0]).normalizeLocal();
                 float temp = v.x;

File: jme3-bullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -737,8 +737,8 @@ public void read(JmeImporter e) throws IOException {
         setKinematic(capsule.readBoolean("kinematic", false));
 
         setRestitution(capsule.readFloat("restitution", 0));
-        Vector3f angularFactor = (Vector3f) capsule.readSavable("angularFactor", Vector3f.NAN.clone());
-        if(angularFactor == Vector3f.NAN) {
+        Vector3f angularFactor = (Vector3f) capsule.readSavable("angularFactor", null);
+        if(angularFactor == null) {
             setAngularFactor(capsule.readFloat("angularFactor", 1));
         } else {
             setAngularFactor(angularFactor);

File: jme3-networking/src/main/java/com/jme3/network/service/AbstractService.java
Patch:
@@ -106,6 +106,6 @@ public void terminate( S serviceManager ) {
     
     @Override
     public String toString() {
-        return getClass().getName() + "[serviceManager.class=" + serviceManager.getClass() + "]";
+        return getClass().getName() + "[serviceManager.class=" + (serviceManager != null ? serviceManager.getClass() : "") + "]";
     }
 }

File: jme3-bullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -737,8 +737,8 @@ public void read(JmeImporter e) throws IOException {
         setKinematic(capsule.readBoolean("kinematic", false));
 
         setRestitution(capsule.readFloat("restitution", 0));
-        Vector3f angularFactor = (Vector3f) capsule.readSavable("angularFactor", Vector3f.NAN.clone());
-        if(angularFactor == Vector3f.NAN) {
+        Vector3f angularFactor = (Vector3f) capsule.readSavable("angularFactor", null);
+        if(angularFactor == null) {
             setAngularFactor(capsule.readFloat("angularFactor", 1));
         } else {
             setAngularFactor(angularFactor);

File: jme3-core/src/main/java/com/jme3/scene/Node.java
Patch:
@@ -195,7 +195,7 @@ private void addUpdateChildren( SafeArrayList<Spatial> results ) {
     void invalidateUpdateList() {
         updateListValid = false;
         if ( parent != null ) {
-          parent.invalidateUpdateList();
+            parent.invalidateUpdateList();
         }
     }
 

File: jme3-jogl/src/main/java/com/jme3/input/jogl/NewtMouseInput.java
Patch:
@@ -176,7 +176,7 @@ public void update() {
 
             // invert DY
             int actualX = lastKnownLocation.getX();
-            int actualY = component.getHeight() - lastKnownLocation.getY();
+            int actualY = component.getSurfaceHeight() - lastKnownLocation.getY();
             MouseMotionEvent evt = new MouseMotionEvent(actualX, actualY,
                                                         newX - lastEventX,
                                                         lastEventY - newY,
@@ -285,8 +285,8 @@ public void mouseMoved(MouseEvent awtEvt) {
     private void recenterMouse(final GLWindow component) {
         eventsSinceRecenter = 0;
         isRecentering = true;
-        centerLocation.setX(component.getWidth() / 2);
-        centerLocation.setY(component.getHeight() / 2);
+        centerLocation.setX(component.getSurfaceWidth() / 2);
+        centerLocation.setY(component.getSurfaceHeight() / 2);
         centerLocationOnScreen.setX(centerLocation.getX());
         centerLocationOnScreen.setY(centerLocation.getY());
         

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglOffscreenBuffer.java
Patch:
@@ -123,7 +123,7 @@ protected void runLoop(){
         }
 
         listener.update();
-        checkGLError();
+        assert checkGLError();
 
         renderer.postFrame();
         

File: jme3-desktop/src/main/java/com/jme3/system/NativeLibraryLoader.java
Patch:
@@ -149,7 +149,7 @@ public static void registerNativeLibrary(String name, Platform platform,
         registerNativeLibrary("glfw-lwjgl3", Platform.Windows32, "native/windows/glfw32.dll");
         registerNativeLibrary("glfw-lwjgl3", Platform.Windows64, "native/windows/glfw.dll");
         registerNativeLibrary("glfw-lwjgl3", Platform.Linux32, "native/linux/libglfw32.so");
-        registerNativeLibrary("glfw-lwjgl3", Platform.Linux64, "native/linux/libglfw.dll");
+        registerNativeLibrary("glfw-lwjgl3", Platform.Linux64, "native/linux/libglfw.so");
         registerNativeLibrary("glfw-lwjgl3", Platform.MacOSX32, "native/macosx/libglfw.dylib");
         registerNativeLibrary("glfw-lwjgl3", Platform.MacOSX64, "native/macosx/libglfw.dylib");
 

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/landscape/LandscapeHelper.java
Patch:
@@ -81,6 +81,7 @@ public FogFilter toFog(Structure worldStructure) {
         if ((mode & MODE_MIST) != 0) {
             LOGGER.fine("Loading fog.");
             result = new FogFilter();
+            result.setName("FIfog");
             result.setFogColor(this.toBackgroundColor(worldStructure));
         }
         return result;

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/CombinedTexture.java
Patch:
@@ -158,6 +158,9 @@ public void flatten(Geometry geometry, Long geometriesOMA, Map<String, List<Vect
                         } else {
                             resultUVS = userDefinedUVCoordinates.get(textureData.uvCoordinatesName);
                         }
+                        if(resultUVS == null && LOGGER.isLoggable(Level.WARNING)) {
+                            LOGGER.warning("The texture " + textureData.texture.getName() + " has assigned non existing UV coordinates group: " + textureData.uvCoordinatesName + ".");
+                        }
                         masterUserUVSetName = textureData.uvCoordinatesName;
                     } else {
                         TemporalMesh temporalMesh = (TemporalMesh) blenderContext.getLoadedFeature(geometriesOMA, LoadedDataType.TEMPORAL_MESH);

File: jme3-core/src/main/java/com/jme3/input/FlyByCamera.java
Patch:
@@ -277,8 +277,7 @@ protected void mapJoystick( Joystick joystick ) {
     }
 
     /**
-     * Registers the FlyByCamera to receive input events from the provided
-     * Dispatcher.
+     * Unregisters the FlyByCamera from the event Dispatcher.
      */
     public void unregisterInput(){
     

File: jme3-core/src/main/java/com/jme3/renderer/Limits.java
Patch:
@@ -77,4 +77,6 @@ public enum Limits {
     DepthTextureSamples,
 
     VertexUniformVectors,
+    
+    TextureAnisotropy,
 }

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL.java
Patch:
@@ -161,6 +161,7 @@ public interface GL {
         public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
         public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
         public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
+        public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
 	public static final int GL_TEXTURE_MAG_FILTER = 0x2800;
 	public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
 	public static final int GL_TEXTURE_MIN_FILTER = 0x2801;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL2.java
Patch:
@@ -44,7 +44,7 @@ public interface GL2 extends GL {
     public static final int GL_ALPHA_TEST = 0xBC0;
     public static final int GL_BGR = 0x80E0;
     public static final int GL_BGRA = 0x80E1;
-    public static final int GL_COMPARE_R_TO_TEXTURE = 0x884E;
+    public static final int GL_COMPARE_REF_TO_TEXTURE = 0x884E;
     public static final int GL_DEPTH_COMPONENT24 = 0x81A6;
     public static final int GL_DEPTH_COMPONENT32 = 0x81A7;
     public static final int GL_DEPTH_TEXTURE_MODE = 0x884B;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLExt.java
Patch:
@@ -68,6 +68,7 @@ public interface GLExt {
 	public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
         public static final int GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
 	public static final int GL_MAX_SAMPLES_EXT = 0x8D57;
+        public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
 	public static final int GL_MULTISAMPLE_ARB = 0x809D;
         public static final int GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
         public static final int GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;

File: jme3-core/src/main/java/com/jme3/scene/debug/Grid.java
Patch:
@@ -99,6 +99,7 @@ public Grid(int xLines, int yLines, float lineDist){
 
         updateBound();
         updateCounts();
+        setStatic();
     }
     
 }

File: jme3-core/src/main/java/com/jme3/scene/debug/WireFrustum.java
Patch:
@@ -35,6 +35,7 @@
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer;
 import com.jme3.scene.VertexBuffer.Type;
+import com.jme3.scene.VertexBuffer.Usage;
 import com.jme3.util.BufferUtils;
 import java.nio.FloatBuffer;
 
@@ -62,6 +63,7 @@ public WireFrustum(Vector3f[] points){
                      3, 7,
                 }
         );
+        getBuffer(Type.Index).setUsage(Usage.Static);
         setMode(Mode.Lines);
     }
 

File: jme3-core/src/main/java/com/jme3/scene/shape/Cylinder.java
Patch:
@@ -389,6 +389,7 @@ public void updateGeometry(int axisSamples, int radialSamples,
         }
 
         updateBound();
+        setStatic();
     }
 
     @Override

File: jme3-core/src/main/java/com/jme3/scene/shape/Quad.java
Patch:
@@ -124,6 +124,7 @@ public void updateGeometry(float width, float height, boolean flipCoords) {
         }
         
         updateBound();
+        setStatic();
     }
 
 

File: jme3-core/src/main/java/com/jme3/scene/shape/Sphere.java
Patch:
@@ -299,7 +299,6 @@ private void setGeometryData() {
         }
 
         updateBound();
-        setStatic();
     }
 
     /**
@@ -400,6 +399,7 @@ public void updateGeometry(int zSamples, int radialSamples, float radius, boolea
         this.interior = interior;
         setGeometryData();
         setIndexData();
+        setStatic();
     }
 
     public void read(JmeImporter e) throws IOException {

File: jme3-examples/src/main/java/jme3test/renderer/TestInconsistentCompareDetection.java
Patch:
@@ -63,7 +63,7 @@ public void simpleInitApp() {
         cam.setLocation(new Vector3f(-11.674385f, 7.892636f, 33.133106f));
         cam.setRotation(new Quaternion(0.06426433f, 0.90940624f, -0.15329266f, 0.38125014f));
         
-        Material m = new Material(assetManager, "Common/MatDefs/Misc/ColoredTextured.j3md");
+        Material m = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         m.setColor("Color", ColorRGBA.White);
         
         t1 = assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall.jpg");

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglNewtDisplay.java
Patch:
@@ -173,6 +173,8 @@ public void destroy(boolean waitFor){
         if (waitFor){
             waitFor(false);
         }
+        if (animator.isAnimating())
+            animator.stop();
     }
 
     public void restart() {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGL.java
Patch:
@@ -13,7 +13,7 @@
 import com.jme3.renderer.opengl.GL4;
 import org.lwjgl.opengl.*;
 
-public class LwjglGL implements GL, GL2, GL3, GL4 {
+public final class LwjglGL implements GL, GL2, GL3, GL4 {
     
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGLExt.java
Patch:
@@ -13,7 +13,7 @@
 import org.lwjgl.opengl.GL20;
 import org.lwjgl.opengl.GLSync;
 
-public class LwjglGLExt implements GLExt {
+public final class LwjglGLExt implements GLExt {
 
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGLFboEXT.java
Patch:
@@ -13,7 +13,7 @@
  * 
  * @author Kirill Vainer
  */
-public class LwjglGLFboEXT implements GLFbo {
+public final class LwjglGLFboEXT implements GLFbo {
 
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGLFboGL3.java
Patch:
@@ -11,7 +11,7 @@
  * 
  * @author Kirill Vainer
  */
-public class LwjglGLFboGL3 implements GLFbo {
+public final class LwjglGLFboGL3 implements GLFbo {
 
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglAbstractDisplay.java
Patch:
@@ -40,7 +40,6 @@
 import com.jme3.input.lwjgl.LwjglKeyInput;
 import com.jme3.input.lwjgl.LwjglMouseInput;
 import com.jme3.system.AppSettings;
-import com.jme3.system.JmeContext.Type;
 import com.jme3.system.JmeSystem;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglGLDebugOutputHandler.java
Patch:
@@ -73,6 +73,7 @@ public void handleMessage(int source, int type, int id, int severity, String mes
         String severityStr = constMap.get(severity);
         
         System.err.println(String.format(MESSAGE_FORMAT, id, sourceStr, typeStr, severityStr, message));
+        Thread.dumpStack();
     }
     
 }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneEditTool.java
Patch:
@@ -453,6 +453,9 @@ protected Node createAxisMarker() {
         Geometry arrowX = new Geometry("arrowX", new Arrow(new Vector3f(arrowSize, 0, 0)));
         Geometry arrowY = new Geometry("arrowY", new Arrow(new Vector3f(0, arrowSize, 0)));
         Geometry arrowZ = new Geometry("arrowZ", new Arrow(new Vector3f(0, 0, arrowSize)));
+        arrowX.getMesh().setLineWidth(2f);
+        arrowY.getMesh().setLineWidth(2f);
+        arrowZ.getMesh().setLineWidth(2f);   
         axis.attachChild(arrowX);
         axis.attachChild(arrowY);
         axis.attachChild(arrowZ);

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/landscape/LandscapeHelper.java
Patch:
@@ -81,6 +81,7 @@ public FogFilter toFog(Structure worldStructure) {
         if ((mode & MODE_MIST) != 0) {
             LOGGER.fine("Loading fog.");
             result = new FogFilter();
+            result.setName("FIfog");
             result.setFogColor(this.toBackgroundColor(worldStructure));
         }
         return result;

File: jme3-core/src/main/java/com/jme3/input/FlyByCamera.java
Patch:
@@ -277,8 +277,7 @@ protected void mapJoystick( Joystick joystick ) {
     }
 
     /**
-     * Registers the FlyByCamera to receive input events from the provided
-     * Dispatcher.
+     * Unregisters the FlyByCamera from the event Dispatcher.
      */
     public void unregisterInput(){
     

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/CombinedTexture.java
Patch:
@@ -158,6 +158,9 @@ public void flatten(Geometry geometry, Long geometriesOMA, Map<String, List<Vect
                         } else {
                             resultUVS = userDefinedUVCoordinates.get(textureData.uvCoordinatesName);
                         }
+                        if(resultUVS == null && LOGGER.isLoggable(Level.WARNING)) {
+                            LOGGER.warning("The texture " + textureData.texture.getName() + " has assigned non existing UV coordinates group: " + textureData.uvCoordinatesName + ".");
+                        }
                         masterUserUVSetName = textureData.uvCoordinatesName;
                     } else {
                         TemporalMesh temporalMesh = (TemporalMesh) blenderContext.getLoadedFeature(geometriesOMA, LoadedDataType.TEMPORAL_MESH);

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -138,7 +138,7 @@ public final class AppSettings extends HashMap<String, Object> {
         defaults.put("StencilBits", 0);
         defaults.put("Samples", 0);
         defaults.put("Fullscreen", false);
-        defaults.put("Title", "jMonkey Engine 3.0");
+        defaults.put("Title", JmeVersion.FULL_NAME);
         defaults.put("Renderer", LWJGL_OPENGL2);
         defaults.put("AudioRenderer", LWJGL_OPENAL);
         defaults.put("DisableJoysticks", true);

File: jme3-lwjgl3/src/main/java/com/jme3/system/lwjgl/LwjglWindow.java
Patch:
@@ -99,7 +99,7 @@ public JmeContext.Type getType() {
     /**
      * Set the title if its a windowed display
      *
-     * @param title
+     * @param title the title to set
      */
     public void setTitle(final String title) {
         if (created.get() && window != -1) {
@@ -121,7 +121,7 @@ public void restart() {
     /**
      * Apply the settings, changing resolution, etc.
      *
-     * @param settings
+     * @param settings the settings to apply when creating the context.
      */
     protected void createContext(final AppSettings settings) {
         glfwSetErrorCallback(errorCallback = new GLFWErrorCallback() {

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglAbstractDisplay.java
Patch:
@@ -40,7 +40,6 @@
 import com.jme3.input.lwjgl.LwjglKeyInput;
 import com.jme3.input.lwjgl.LwjglMouseInput;
 import com.jme3.system.AppSettings;
-import com.jme3.system.JmeContext.Type;
 import com.jme3.system.JmeSystem;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -380,14 +380,14 @@ private void loadCapabilitiesCommon() {
         }
 
         if (hasExtension("GL_EXT_framebuffer_object") 
-                || gl3 != null
+                || caps.contains(Caps.OpenGL30)
                 || caps.contains(Caps.OpenGLES20)) {
             caps.add(Caps.FrameBuffer);
 
             limits.put(Limits.RenderBufferSize, getInteger(GLFbo.GL_MAX_RENDERBUFFER_SIZE_EXT));
             limits.put(Limits.FrameBufferAttachments, getInteger(GLFbo.GL_MAX_COLOR_ATTACHMENTS_EXT));
 
-            if (hasExtension("GL_EXT_framebuffer_blit")) {
+            if (hasExtension("GL_EXT_framebuffer_blit") || caps.contains(Caps.OpenGL30)) {
                 caps.add(Caps.FrameBufferBlit);
             }
 
@@ -406,7 +406,7 @@ private void loadCapabilitiesCommon() {
                 }
             }
 
-            if (hasExtension("GL_ARB_draw_buffers") || gl3 != null) {
+            if (hasExtension("GL_ARB_draw_buffers") || caps.contains(Caps.OpenGL30)) {
                 limits.put(Limits.FrameBufferMrtAttachments, getInteger(GLExt.GL_MAX_DRAW_BUFFERS_ARB));
                 if (limits.get(Limits.FrameBufferMrtAttachments) > 1) {
                     caps.add(Caps.FrameBufferMRT);

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglGLDebugOutputHandler.java
Patch:
@@ -73,6 +73,7 @@ public void handleMessage(int source, int type, int id, int severity, String mes
         String severityStr = constMap.get(severity);
         
         System.err.println(String.format(MESSAGE_FORMAT, id, sourceStr, typeStr, severityStr, message));
+        Thread.dumpStack();
     }
     
 }

File: jme3-core/src/main/java/com/jme3/bounding/BoundingBox.java
Patch:
@@ -314,7 +314,7 @@ public BoundingVolume transform(Transform trans, BoundingVolume store) {
         transMatrix.absoluteLocal();
 
         Vector3f scale = trans.getScale();
-        vars.vect1.set(xExtent * scale.x, yExtent * scale.y, zExtent * scale.z);
+        vars.vect1.set(xExtent * FastMath.abs(scale.x), yExtent * FastMath.abs(scale.y), zExtent * FastMath.abs(scale.z));
         transMatrix.mult(vars.vect1, vars.vect2);
         // Assign the biggest rotations after scales.
         box.xExtent = FastMath.abs(vars.vect2.getX());

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglNewtDisplay.java
Patch:
@@ -173,6 +173,8 @@ public void destroy(boolean waitFor){
         if (waitFor){
             waitFor(false);
         }
+        if (animator.isAnimating())
+            animator.stop();
     }
 
     public void restart() {

File: jme3-core/src/main/java/com/jme3/bounding/BoundingBox.java
Patch:
@@ -314,7 +314,7 @@ public BoundingVolume transform(Transform trans, BoundingVolume store) {
         transMatrix.absoluteLocal();
 
         Vector3f scale = trans.getScale();
-        vars.vect1.set(xExtent * scale.x, yExtent * scale.y, zExtent * scale.z);
+        vars.vect1.set(xExtent * FastMath.abs(scale.x), yExtent * FastMath.abs(scale.y), zExtent * FastMath.abs(scale.z));
         transMatrix.mult(vars.vect1, vars.vect2);
         // Assign the biggest rotations after scales.
         box.xExtent = FastMath.abs(vars.vect2.getX());

File: jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwKeyInput.java
Patch:
@@ -35,7 +35,6 @@
 import com.jme3.input.KeyInput;
 import com.jme3.input.RawInputListener;
 import com.jme3.input.event.KeyInputEvent;
-import com.jme3.system.lwjgl.LwjglTimer;
 import com.jme3.system.lwjgl.LwjglWindow;
 import org.lwjgl.glfw.GLFWKeyCallback;
 
@@ -112,6 +111,6 @@ public void setInputListener(RawInputListener listener) {
     }
 
     public long getInputTimeNanos() {
-        return (long) (glfwGetTime() * LwjglTimer.LWJGL_TIME_TO_NANOS);
+        return (long) (glfwGetTime() * 1000000000);
     }
 }

File: jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwMouseInput.java
Patch:
@@ -37,7 +37,6 @@
 import com.jme3.input.RawInputListener;
 import com.jme3.input.event.MouseButtonEvent;
 import com.jme3.input.event.MouseMotionEvent;
-import com.jme3.system.lwjgl.LwjglTimer;
 import com.jme3.system.lwjgl.LwjglWindow;
 import org.lwjgl.glfw.GLFWCursorPosCallback;
 import org.lwjgl.glfw.GLFWMouseButtonCallback;
@@ -183,7 +182,7 @@ public void setInputListener(RawInputListener listener) {
     }
 
     public long getInputTimeNanos() {
-        return (long) (glfwGetTime() * LwjglTimer.LWJGL_TIME_TO_NANOS);
+        return (long) (glfwGetTime() * 1000000000);
     }
 
     public void setNativeCursor(final JmeCursor jmeCursor) {

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglAbstractDisplay.java
Patch:
@@ -206,7 +206,6 @@ public void run(){
                                           + "Must set with JmeContext.setSystemListner().");
         }
 
-        registerNatives();
         loadNatives();
         logger.log(Level.FINE, "Using LWJGL {0}", Sys.getVersion());
         if (!initInThread()) {

File: jme3-examples/src/main/java/jme3test/renderer/TestInconsistentCompareDetection.java
Patch:
@@ -63,7 +63,7 @@ public void simpleInitApp() {
         cam.setLocation(new Vector3f(-11.674385f, 7.892636f, 33.133106f));
         cam.setRotation(new Quaternion(0.06426433f, 0.90940624f, -0.15329266f, 0.38125014f));
         
-        Material m = new Material(assetManager, "Common/MatDefs/Misc/ColoredTextured.j3md");
+        Material m = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         m.setColor("Color", ColorRGBA.White);
         
         t1 = assetManager.loadTexture("Textures/Terrain/BrickWall/BrickWall.jpg");

File: jme3-bullet/src/main/java/com/jme3/bullet/collision/shapes/CapsuleCollisionShape.java
Patch:
@@ -93,7 +93,9 @@ public int getAxis() {
      */
     @Override
     public void setScale(Vector3f scale) {
-        Logger.getLogger(this.getClass().getName()).log(Level.WARNING, "CapsuleCollisionShape cannot be scaled");
+        if (!scale.equals(Vector3f.UNIT_XYZ)) {
+            Logger.getLogger(this.getClass().getName()).log(Level.WARNING, "CapsuleCollisionShape cannot be scaled");
+        }
     }
 
     public void write(JmeExporter ex) throws IOException {

File: jme3-core/src/main/java/com/jme3/animation/Bone.java
Patch:
@@ -553,7 +553,6 @@ void getOffsetTransform(Matrix4f outTransform, Quaternion tmp1, Vector3f tmp2, V
         Vector3f translate = modelPos.add(rotate.mult(scale.mult(modelBindInversePos, tmp2), tmp2), tmp2);
 
         // Populating the matrix
-        outTransform.loadIdentity();
         outTransform.setTransform(translate, scale, rotate.toRotationMatrix(tmp4));
     }
 

File: jme3-core/src/main/java/com/jme3/cinematic/Cinematic.java
Patch:
@@ -702,7 +702,9 @@ public void clear() {
         dispose();
         cinematicEvents.clear();
         timeLine.clear();
-        eventsData.clear();
+        if (eventsData != null) {
+            eventsData.clear();
+        }
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -300,7 +300,7 @@ private void renderFilterChain(Renderer r, FrameBuffer sceneFb) {
     public void postFrame(FrameBuffer out) {
 
         FrameBuffer sceneBuffer = renderFrameBuffer;
-        if (renderFrameBufferMS != null && !renderer.getCaps().contains(Caps.OpenGL31)) {
+        if (renderFrameBufferMS != null && !renderer.getCaps().contains(Caps.OpenGL32)) {
             renderer.copyFrameBuffer(renderFrameBufferMS, renderFrameBuffer, true);
         } else if (renderFrameBufferMS != null) {
             sceneBuffer = renderFrameBufferMS;
@@ -443,7 +443,7 @@ public void reshape(ViewPort vp, int w, int h) {
         //antialiasing on filters only supported in opengl 3 due to depth read problem
         if (numSamples > 1 && caps.contains(Caps.FrameBufferMultisample)) {
             renderFrameBufferMS = new FrameBuffer(width, height, numSamples);
-            if (caps.contains(Caps.OpenGL31)) {
+            if (caps.contains(Caps.OpenGL32)) {
                 Texture2D msColor = new Texture2D(width, height, numSamples, fbFormat);
                 Texture2D msDepth = new Texture2D(width, height, numSamples, Format.Depth);
                 renderFrameBufferMS.setDepthTexture(msDepth);
@@ -456,7 +456,7 @@ public void reshape(ViewPort vp, int w, int h) {
             }
         }
 
-        if (numSamples <= 1 || !caps.contains(Caps.OpenGL31)) {
+        if (numSamples <= 1 || !caps.contains(Caps.OpenGL32)) {
             renderFrameBuffer = new FrameBuffer(width, height, 1);
             renderFrameBuffer.setDepthBuffer(Format.Depth);
             filterTexture = new Texture2D(width, height, fbFormat);

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL.java
Patch:
@@ -161,6 +161,7 @@ public interface GL {
         public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
         public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
         public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
+        public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
 	public static final int GL_TEXTURE_MAG_FILTER = 0x2800;
 	public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
 	public static final int GL_TEXTURE_MIN_FILTER = 0x2801;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/TextureUtil.java
Patch:
@@ -90,9 +90,11 @@ public GLImageFormat getImageFormat(Format fmt, boolean isSrgb) {
     }
 
     public GLImageFormat getImageFormatWithError(Format fmt, boolean isSrgb) {
+        //if the passed format is one kind of depth there isno point in getting the srgb format;
+        isSrgb = isSrgb && fmt != Format.Depth && fmt != Format.Depth16 && fmt != Format.Depth24 && fmt != Format.Depth24Stencil8 && fmt != Format.Depth32 && fmt != Format.Depth32F;
         GLImageFormat glFmt = getImageFormat(fmt, isSrgb);
         if (glFmt == null && isSrgb) {
-            glFmt = getImageFormat(fmt, false);
+            glFmt = getImageFormat(fmt, false);               
             logger.log(Level.WARNING, "No sRGB format available for ''{0}''. Failling back to linear.", fmt);
         }
         if (glFmt == null) { 

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -54,6 +54,8 @@
  */
 public final class AppSettings extends HashMap<String, Object> {
 
+    private static final long serialVersionUID = 1L;
+    
     private static final AppSettings defaults = new AppSettings(false);
 
     /**

File: jme3-core/src/main/java/com/jme3/util/LittleEndien.java
Patch:
@@ -42,7 +42,6 @@
 public class LittleEndien extends InputStream implements DataInput {
 
     protected BufferedInputStream in;
-    protected BufferedReader inRead;
 
     /**
      * Creates a new LittleEndien reader from the given input stream.  The
@@ -51,7 +50,6 @@ public class LittleEndien extends InputStream implements DataInput {
      */
     public LittleEndien(InputStream in) {
         this.in = new BufferedInputStream(in);
-        inRead = new BufferedReader(new InputStreamReader(in));
     }
 
     public int read() throws IOException {
@@ -141,7 +139,7 @@ public int skipBytes(int n) throws IOException {
     }
 
     public String readLine() throws IOException {
-        return inRead.readLine();
+        throw new IOException("Unsupported operation");
     }
 
     public String readUTF() throws IOException {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGL.java
Patch:
@@ -13,7 +13,7 @@
 import com.jme3.renderer.opengl.GL4;
 import org.lwjgl.opengl.*;
 
-public class LwjglGL implements GL, GL2, GL3, GL4 {
+public final class LwjglGL implements GL, GL2, GL3, GL4 {
     
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGLExt.java
Patch:
@@ -13,7 +13,7 @@
 import org.lwjgl.opengl.GL20;
 import org.lwjgl.opengl.GLSync;
 
-public class LwjglGLExt implements GLExt {
+public final class LwjglGLExt implements GLExt {
 
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGLFboEXT.java
Patch:
@@ -13,7 +13,7 @@
  * 
  * @author Kirill Vainer
  */
-public class LwjglGLFboEXT implements GLFbo {
+public final class LwjglGLFboEXT implements GLFbo {
 
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGLFboGL3.java
Patch:
@@ -11,7 +11,7 @@
  * 
  * @author Kirill Vainer
  */
-public class LwjglGLFboGL3 implements GLFbo {
+public final class LwjglGLFboGL3 implements GLFbo {
 
     private static void checkLimit(Buffer buffer) {
         if (buffer == null) {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/editor/OutBusPanel.java
Patch:
@@ -110,7 +110,7 @@ protected void paintComponent(Graphics g1) {
 
         Polygon p = new Polygon(xs, ys, 8);
 
-        if (diagram.selectedItem == this) {
+        if (getDiagram().getSelectedItems().contains(this)) {
             int[] xs2 = {0, width - 30, width - 30, width, width - 32, width - 32, 0, 0};
             int[] ys2 = {10, 10, 0, getHeight() / 2 + 2, getHeight(), getHeight() - 8, getHeight() - 8, 10};
 
@@ -154,7 +154,7 @@ public void mousePressed(MouseEvent e) {
             return;
         }
         super.mousePressed(e);
-        diagram.select(this);
+        diagram.select(this, e.isShiftDown() || e.isControlDown());
     }
 
     @Override

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneEditTool.java
Patch:
@@ -453,6 +453,9 @@ protected Node createAxisMarker() {
         Geometry arrowX = new Geometry("arrowX", new Arrow(new Vector3f(arrowSize, 0, 0)));
         Geometry arrowY = new Geometry("arrowY", new Arrow(new Vector3f(0, arrowSize, 0)));
         Geometry arrowZ = new Geometry("arrowZ", new Arrow(new Vector3f(0, 0, arrowSize)));
+        arrowX.getMesh().setLineWidth(2f);
+        arrowY.getMesh().setLineWidth(2f);
+        arrowZ.getMesh().setLineWidth(2f);   
         axis.attachChild(arrowX);
         axis.attachChild(arrowY);
         axis.attachChild(arrowZ);

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneEditTool.java
Patch:
@@ -453,6 +453,9 @@ protected Node createAxisMarker() {
         Geometry arrowX = new Geometry("arrowX", new Arrow(new Vector3f(arrowSize, 0, 0)));
         Geometry arrowY = new Geometry("arrowY", new Arrow(new Vector3f(0, arrowSize, 0)));
         Geometry arrowZ = new Geometry("arrowZ", new Arrow(new Vector3f(0, 0, arrowSize)));
+        arrowX.getMesh().setLineWidth(2f);
+        arrowY.getMesh().setLineWidth(2f);
+        arrowZ.getMesh().setLineWidth(2f);   
         axis.attachChild(arrowX);
         axis.attachChild(arrowY);
         axis.attachChild(arrowZ);

File: jme3-lwjgl3/src/main/java/com/jme3/input/lwjgl/GlfwKeyInput.java
Patch:
@@ -45,17 +45,17 @@
 
 import static org.lwjgl.glfw.GLFW.*;
 
-public class LwjglKeyInput implements KeyInput {
+public class GlfwKeyInput implements KeyInput {
 
-    private static final Logger logger = Logger.getLogger(LwjglKeyInput.class.getName());
+    private static final Logger logger = Logger.getLogger(GlfwKeyInput.class.getName());
 
     private LwjglWindow context;
     private RawInputListener listener;
     private boolean initialized;
     private GLFWKeyCallback keyCallback;
     private Queue<KeyInputEvent> keyInputEvents = new LinkedList<KeyInputEvent>();
 
-    public LwjglKeyInput(LwjglWindow context) {
+    public GlfwKeyInput(LwjglWindow context) {
         this.context = context;
     }
 

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglAbstractDisplay.java
Patch:
@@ -127,6 +127,9 @@ public boolean run(GLAutoDrawable glad) {
         canvas.setSize(settings.getWidth(), settings.getHeight());
         canvas.setIgnoreRepaint(true);
         canvas.addGLEventListener(this);
+        
+        //FIXME not sure it is the best place to do that
+        renderable.set(true);
 
         //TODO remove this block once for all when the unified renderer is stable
         /*if (settings.getBoolean("GraphicsDebug")) {
@@ -193,9 +196,6 @@ protected void startGLCanvas() {
 
         animator.start();
         wasAnimating = true;
-        
-        //FIXME not sure it is the best place to do that
-        renderable.set(true);
     }
 
     protected void onCanvasAdded() {

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglNewtAbstractDisplay.java
Patch:
@@ -106,6 +106,9 @@ public boolean run(GLAutoDrawable glad) {
         canvas.requestFocus();
         canvas.setSize(settings.getWidth(), settings.getHeight());
         canvas.addGLEventListener(this);
+        
+        //FIXME not sure it is the best place to do that
+        renderable.set(true);
 
         //TODO remove this block once for all when the unified renderer is stable
         /*if (settings.getBoolean("GraphicsDebug")) {
@@ -172,9 +175,6 @@ protected void startGLCanvas() {
 
         animator.start();
         wasAnimating = true;
-        
-        //FIXME not sure it is the best place to do that
-        renderable.set(true);
     }
 
     protected void onCanvasAdded() {

File: jme3-jogl/src/main/java/com/jme3/renderer/jogl/JoglGLExt.java
Patch:
@@ -78,11 +78,11 @@ public Object glFenceSync(int condition, int flags) {
     
     @Override
     public int glClientWaitSync(Object sync, int flags, long timeout) {
-        return GLContext.getCurrentGL().getGL3ES3().glClientWaitSync((long) sync, flags, timeout);
+        return GLContext.getCurrentGL().getGL3ES3().glClientWaitSync(((Long) sync).longValue(), flags, timeout);
     }
 
     @Override
     public void glDeleteSync(Object sync) {
-        GLContext.getCurrentGL().getGL3ES3().glDeleteSync((long) sync);
+        GLContext.getCurrentGL().getGL3ES3().glDeleteSync(((Long) sync).longValue());
     }
 }

File: sdk/nbi/stub/ext/components/products/helloworld/src/org/mycompany/ConfigurationLogic.java
Patch:
@@ -213,7 +213,8 @@ public void install(Progress progress) throws InstallationException {
     }
     private static void setExecutableContents(File parent, String path) {
         File binDir = new File(parent, path);
-        for (File file : binDir.listFiles()) {
+        File[] fileList = binDir.listFiles();
+        for (File file : fileList) {
             try {
                 file.setExecutable(true, false);
             } catch (Exception ex) {

File: jme3-core/src/main/java/com/jme3/environment/generation/PrefilteredEnvMapFaceGenerator.java
Patch:
@@ -46,7 +46,6 @@
 import static com.jme3.environment.util.EnvMapUtils.getRoughnessFromMip;
 import static com.jme3.environment.util.EnvMapUtils.getSampleFromMip;
 import static com.jme3.environment.util.EnvMapUtils.getVectorFromCubemapFaceTexCoord;
-import com.jme3.math.FastMath;
 import java.util.concurrent.Callable;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: jme3-core/src/main/java/com/jme3/cinematic/Cinematic.java
Patch:
@@ -702,7 +702,9 @@ public void clear() {
         dispose();
         cinematicEvents.clear();
         timeLine.clear();
-        eventsData.clear();
+        if (eventsData != null) {
+            eventsData.clear();
+        }
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/renderer/opengl/TextureUtil.java
Patch:
@@ -90,9 +90,11 @@ public GLImageFormat getImageFormat(Format fmt, boolean isSrgb) {
     }
 
     public GLImageFormat getImageFormatWithError(Format fmt, boolean isSrgb) {
+        //if the passed format is one kind of depth there isno point in getting the srgb format;
+        isSrgb = isSrgb && fmt != Format.Depth && fmt != Format.Depth16 && fmt != Format.Depth24 && fmt != Format.Depth24Stencil8 && fmt != Format.Depth32 && fmt != Format.Depth32F;
         GLImageFormat glFmt = getImageFormat(fmt, isSrgb);
         if (glFmt == null && isSrgb) {
-            glFmt = getImageFormat(fmt, false);
+            glFmt = getImageFormat(fmt, false);               
             logger.log(Level.WARNING, "No sRGB format available for ''{0}''. Failling back to linear.", fmt);
         }
         if (glFmt == null) { 

File: jme3-core/src/main/java/com/jme3/renderer/opengl/TextureUtil.java
Patch:
@@ -90,9 +90,11 @@ public GLImageFormat getImageFormat(Format fmt, boolean isSrgb) {
     }
 
     public GLImageFormat getImageFormatWithError(Format fmt, boolean isSrgb) {
+        //if the passed format is one kind of depth there isno point in getting the srgb format;
+        isSrgb = isSrgb && fmt != Format.Depth && fmt != Format.Depth16 && fmt != Format.Depth24 && fmt != Format.Depth24Stencil8 && fmt != Format.Depth32 && fmt != Format.Depth32F;
         GLImageFormat glFmt = getImageFormat(fmt, isSrgb);
         if (glFmt == null && isSrgb) {
-            glFmt = getImageFormat(fmt, false);
+            glFmt = getImageFormat(fmt, false);               
             logger.log(Level.WARNING, "No sRGB format available for ''{0}''. Failling back to linear.", fmt);
         }
         if (glFmt == null) { 

File: jme3-core/src/main/java/com/jme3/util/TangentBinormalGenerator.java
Patch:
@@ -612,9 +612,9 @@ public static TriangleData processTriangle(int[] index,
             normal.normalizeLocal();
             
             return new TriangleData(
-                    tangent,
-                    binormal,
-                    normal);
+                    tangent.clone(),
+                    binormal.clone(),
+                    normal.clone());
         } finally {
             tmp.release();
         }

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -459,7 +459,7 @@ public void displayDebug() {
         debug = true;
     }
 
-    abstract void getReceivers(GeometryList lightReceivers);
+    protected abstract void getReceivers(GeometryList lightReceivers);
 
     public void postFrame(FrameBuffer out) {
         if (skipPostPass) {

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionIK.java
Patch:
@@ -182,7 +182,7 @@ public BonesChain(Bone bone, boolean useTail, int bonesAffected, Collection<Long
                 if (!useTail) {
                     bone = bone.getParent();
                 }
-                while (bone != null && this.size() < bonesAffected) {
+                while (bone != null && (bonesAffected <= 0 || this.size() < bonesAffected)) {
                     BoneContext boneContext = blenderContext.getBoneContext(bone);
                     this.add(boneContext);
                     alteredOmas.add(boneContext.getBoneOma());

File: jme3-networking/src/main/java/com/jme3/network/serializing/serializers/GZIPSerializer.java
Patch:
@@ -87,7 +87,8 @@ public void writeObject(ByteBuffer buffer, Object object) throws IOException {
         ByteArrayOutputStream byteArrayOutput = new ByteArrayOutputStream();
         GZIPOutputStream gzipOutput = new GZIPOutputStream(byteArrayOutput);
 
-        gzipOutput.write(tempBuffer.array());
+        tempBuffer.flip();
+		gzipOutput.write(tempBuffer.array(), 0, tempBuffer.limit());
         gzipOutput.flush();
         gzipOutput.finish();
         gzipOutput.close();

File: jme3-networking/src/main/java/com/jme3/network/serializing/serializers/ZIPSerializer.java
Patch:
@@ -98,7 +98,8 @@ public void writeObject(ByteBuffer buffer, Object object) throws IOException {
         ZipEntry zipEntry = new ZipEntry("zip");
 
         zipOutput.putNextEntry(zipEntry);
-        zipOutput.write(tempBuffer.array());
+        tempBuffer.flip();
+        zipOutput.write(tempBuffer.array(), 0, tempBuffer.limit());
         zipOutput.flush();
         zipOutput.closeEntry();
         zipOutput.close();

File: jme3-core/src/plugins/java/com/jme3/asset/plugins/ZipLocator.java
Patch:
@@ -82,6 +82,7 @@ public void setRootPath(String rootPath) {
 
     public AssetInfo locate(AssetManager manager, AssetKey key) {
         String name = key.getName();
+        if(name.startsWith("/"))name=name.substring(1);
         ZipEntry entry = zipfile.getEntry(name);
         if (entry == null)
             return null;

File: jme3-core/src/main/java/com/jme3/light/SpotLight.java
Patch:
@@ -63,7 +63,7 @@ public class SpotLight extends Light {
     protected float spotInnerAngle = FastMath.QUARTER_PI / 8;
     protected float spotOuterAngle = FastMath.QUARTER_PI / 6;
     protected float spotRange = 100;
-    protected float invSpotRange = 1 / 100;
+    protected float invSpotRange = 1f / 100;
     protected float packedAngleCos=0;
     
     protected float outerAngleCosSqr, outerAngleSinSqr;

File: jme3-core/src/main/java/com/jme3/light/SpotLight.java
Patch:
@@ -63,7 +63,7 @@ public class SpotLight extends Light {
     protected float spotInnerAngle = FastMath.QUARTER_PI / 8;
     protected float spotOuterAngle = FastMath.QUARTER_PI / 6;
     protected float spotRange = 100;
-    protected float invSpotRange = 1 / 100;
+    protected float invSpotRange = 1f / 100;
     protected float packedAngleCos=0;
     
     protected float outerAngleCosSqr, outerAngleSinSqr;

File: jme3-bullet/src/main/java/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -635,11 +635,9 @@ public Vector3f getAngularFactor() {
     private native void getAngularFactor(long objectId, Vector3f vec);
 
     public void setAngularFactor(float factor) {
-        setAngularFactor(objectId, factor);
+        setAngularFactor(objectId, new Vector3f(factor, factor, factor));
     }
 
-    private native void setAngularFactor(long objectId, float factor);
-
     public void setAngularFactor(Vector3f factor) {
 	setAngularFactor(objectId, factor);
     }

File: jme3-core/src/main/java/com/jme3/post/Filter.java
Patch:
@@ -233,12 +233,11 @@ protected Filter() {
      * @param vp the viewport
      * @param w the width
      * @param h the height
-     * @param numSamples the number of samples for anti aliasing
      */
-    protected final void init(AssetManager manager, RenderManager renderManager, ViewPort vp, int w, int h, int numSamples) {
+    protected final void init(AssetManager manager, RenderManager renderManager, ViewPort vp, int w, int h) {
         //  cleanup(renderManager.getRenderer());
         defaultPass = new Pass();
-        defaultPass.init(renderManager.getRenderer(), w, h, getDefaultPassTextureFormat(), getDefaultPassDepthFormat(), numSamples);
+        defaultPass.init(renderManager.getRenderer(), w, h, getDefaultPassTextureFormat(), getDefaultPassDepthFormat());
         initFilter(manager, renderManager, vp, w, h);
     }
 

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -170,10 +170,10 @@ private void initFilter(Filter filter, ViewPort vp) {
                 renderFrameBuffer.setDepthTexture(depthTexture);
             }
             computeDepth = true;
-            filter.init(assetManager, renderManager, vp, width, height, numSamples);
+            filter.init(assetManager, renderManager, vp, width, height);
             filter.setDepthTexture(depthTexture);
         } else {
-            filter.init(assetManager, renderManager, vp, width, height, numSamples);
+            filter.init(assetManager, renderManager, vp, width, height);
         }
     }
 

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -2670,7 +2670,7 @@ public void renderMesh(Mesh mesh, int lod, int count, VertexBuffer[] instanceDat
 
     public void setMainFrameBufferSrgb(boolean enableSrgb) {
         // Gamma correction
-        if (!caps.contains(Caps.Srgb)) {
+        if (!caps.contains(Caps.Srgb) && enableSrgb) {
             // Not supported, sorry.
             logger.warning("sRGB framebuffer is not supported " + 
                            "by video hardware, but was requested."); 

File: jme3-core/src/main/java/com/jme3/post/Filter.java
Patch:
@@ -233,11 +233,12 @@ protected Filter() {
      * @param vp the viewport
      * @param w the width
      * @param h the height
+     * @param numSamples the number of samples for anti aliasing
      */
-    protected final void init(AssetManager manager, RenderManager renderManager, ViewPort vp, int w, int h) {
+    protected final void init(AssetManager manager, RenderManager renderManager, ViewPort vp, int w, int h, int numSamples) {
         //  cleanup(renderManager.getRenderer());
         defaultPass = new Pass();
-        defaultPass.init(renderManager.getRenderer(), w, h, getDefaultPassTextureFormat(), getDefaultPassDepthFormat());
+        defaultPass.init(renderManager.getRenderer(), w, h, getDefaultPassTextureFormat(), getDefaultPassDepthFormat(), numSamples);
         initFilter(manager, renderManager, vp, w, h);
     }
 

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -170,10 +170,10 @@ private void initFilter(Filter filter, ViewPort vp) {
                 renderFrameBuffer.setDepthTexture(depthTexture);
             }
             computeDepth = true;
-            filter.init(assetManager, renderManager, vp, width, height);
+            filter.init(assetManager, renderManager, vp, width, height, numSamples);
             filter.setDepthTexture(depthTexture);
         } else {
-            filter.init(assetManager, renderManager, vp, width, height);
+            filter.init(assetManager, renderManager, vp, width, height, numSamples);
         }
     }
 

File: jme3-core/src/main/java/com/jme3/texture/pbr/CubeMapWrapper.java
Patch:
@@ -76,7 +76,7 @@ public CubeMapWrapper(TextureCubeMap cubeMap) {
             sizes = new int[1];
             sizes[0] = image.getWidth();
         }
-        raster = new DefaultImageRaster(image, 0);
+        raster = new DefaultImageRaster(image, 0,0 , false);
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/audio/AudioNode.java
Patch:
@@ -77,7 +77,7 @@ public class AudioNode extends Node implements AudioSource {
     protected transient volatile AudioSource.Status status = AudioSource.Status.Stopped;
     protected transient volatile int channel = -1;
     protected Vector3f velocity = new Vector3f();
-    protected boolean reverbEnabled = true;
+    protected boolean reverbEnabled = false;
     protected float maxDistance = 200; // 200 meters
     protected float refDistance = 10; // 10 meters
     protected Filter reverbFilter;

File: jme3-core/src/main/java/com/jme3/scene/shape/AbstractBox.java
Patch:
@@ -149,6 +149,7 @@ public final void updateGeometry() {
         duUpdateGeometryNormals();
         duUpdateGeometryTextures();
         duUpdateGeometryIndices();
+        setStatic();
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/animation/SkeletonControl.java
Patch:
@@ -82,7 +82,7 @@ public class SkeletonControl extends AbstractControl implements Cloneable {
     /**
      * User wishes to use hardware skinning if available.
      */
-    private transient boolean hwSkinningDesired = false;
+    private transient boolean hwSkinningDesired = true;
     
     /**
      * Hardware skinning is currently being used.

File: jme3-core/src/main/java/com/jme3/app/StatsView.java
Patch:
@@ -91,7 +91,7 @@ public StatsView(String name, AssetManager manager, Statistics stats){
     }
 
     public float getHeight() {
-        return statText.getLineHeight() * statText.getLineCount(); // labels[0].getLineHeight() * statLabels.length;
+        return statText.getLineHeight() * statLabels.length;
     }
     
     public void update(float tpf) {

File: jme3-core/src/main/java/com/jme3/texture/Image.java
Patch:
@@ -375,7 +375,7 @@ public boolean isFloatingPont(){
     // attributes relating to GL object
     protected boolean mipsWereGenerated = false;
     protected boolean needGeneratedMips = false;
-    protected final LastTextureState lastTextureState = new LastTextureState();
+    protected LastTextureState lastTextureState = new LastTextureState();
 
     /**
      * Internal use only.
@@ -490,6 +490,7 @@ public Image clone(){
         Image clone = (Image) super.clone();
         clone.mipMapSizes = mipMapSizes != null ? mipMapSizes.clone() : null;
         clone.data = data != null ? new ArrayList<ByteBuffer>(data) : null;
+        clone.lastTextureState = new LastTextureState();
         clone.setUpdateNeeded();
         return clone;
     }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/tools/RotateTool.java
Patch:
@@ -113,7 +113,7 @@ public void draggedPrimary(Vector2f screenCoord, boolean pressed, JmeNode rootNo
             }
 
             if (pickedMarker.equals(QUAD_XY) || pickedMarker.equals(QUAD_XZ) || pickedMarker.equals(QUAD_YZ)) {
-                Quaternion rotation = startRotate.mult(pickManager.getLocalRotation());
+                Quaternion rotation = startRotate.mult(pickManager.getRotation(startRotate.inverse()));
                 toolController.getSelectedSpatial().setLocalRotation(rotation);
                 lastRotate = rotation;
             }

File: jme3-networking/src/main/java/com/jme3/network/base/MessageProtocol.java
Patch:
@@ -181,7 +181,7 @@ protected void createMessage( ByteBuffer buffer )
             Message m = (Message)obj;
             messages.add(m);
         } catch( IOException e ) {
-            throw new RuntimeException( "Error deserializing object", e );   
+            throw new RuntimeException( "Error deserializing object, clas ID:" + buffer.getShort(0), e );   
         }         
     }
 }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/tools/RotateTool.java
Patch:
@@ -113,7 +113,7 @@ public void draggedPrimary(Vector2f screenCoord, boolean pressed, JmeNode rootNo
             }
 
             if (pickedMarker.equals(QUAD_XY) || pickedMarker.equals(QUAD_XZ) || pickedMarker.equals(QUAD_YZ)) {
-                Quaternion rotation = startRotate.mult(pickManager.getLocalRotation());
+                Quaternion rotation = startRotate.mult(pickManager.getRotation(startRotate.inverse()));
                 toolController.getSelectedSpatial().setLocalRotation(rotation);
                 lastRotate = rotation;
             }

File: jme3-networking/src/main/java/com/jme3/network/service/AbstractService.java
Patch:
@@ -106,6 +106,6 @@ public void terminate( S serviceManager ) {
     
     @Override
     public String toString() {
-        return getClass().getName() + "[serviceManager=" + serviceManager + "]";
+        return getClass().getName() + "[serviceManager.class=" + serviceManager.getClass() + "]";
     }
 }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/tools/ScaleTool.java
Patch:
@@ -122,7 +122,9 @@ public void draggedPrimary(Vector2f screenCoord, boolean pressed, JmeNode rootNo
             lastScale = scale;
             toolController.getSelectedSpatial().setLocalScale(scale);
         } else if (pickedMarker.equals(ARROW_X) || pickedMarker.equals(ARROW_Y) || pickedMarker.equals(ARROW_Z)) {
-            Vector3f diff = pickManager.getLocalTranslation(constraintAxis);
+            // Get the translation in the spatial Space
+            Quaternion worldToSpatial = toolController.getSelectedSpatial().getWorldRotation().inverse();
+            Vector3f diff = pickManager.getTranslation(worldToSpatial.mult(constraintAxis));
             diff.multLocal(0.5f);
             Vector3f scale = startScale.add(diff);
             lastScale = scale;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -140,7 +140,7 @@ public EnumMap<Limits, Integer> getLimits() {
 
     private HashSet<String> loadExtensions() {
         HashSet<String> extensionSet = new HashSet<String>(64);
-        if (gl3 != null) {
+        if (caps.contains(Caps.OpenGL30) {
             // If OpenGL3+ is available, use the non-deprecated way
             // of getting supported extensions.
             gl3.glGetInteger(GL3.GL_NUM_EXTENSIONS, intBuf16);

File: jme3-examples/src/main/java/jme3test/bullet/TestAttachDriver.java
Patch:
@@ -69,7 +69,7 @@ public class TestAttachDriver extends SimpleApplication implements ActionListene
     private float accelerationValue = 0;
     private Vector3f jumpForce = new Vector3f(0, 3000, 0);
     private BulletAppState bulletAppState;
-    
+
     public static void main(String[] args) {
         TestAttachDriver app = new TestAttachDriver();
         app.start();
@@ -79,7 +79,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
         setupKeys();
         setupFloor();
         buildPlayer();

File: jme3-examples/src/main/java/jme3test/bullet/TestAttachGhostObject.java
Patch:
@@ -85,7 +85,7 @@ public void onAnalog(String binding, float value, float tpf) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
         setupKeys();
         setupJoint();
     }

File: jme3-examples/src/main/java/jme3test/bullet/TestCollisionGroups.java
Patch:
@@ -61,8 +61,8 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
-        
+        bulletAppState.setDebugEnabled(true);
+
         // Add a physics sphere to the world
         Node physicsSphere = PhysicsTestHelper.createPhysicsTestNode(assetManager, new SphereCollisionShape(1), 1);
         physicsSphere.getControl(RigidBodyControl.class).setPhysicsLocation(new Vector3f(3, 6, 0));

File: jme3-examples/src/main/java/jme3test/bullet/TestCollisionShapeFactory.java
Patch:
@@ -67,7 +67,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
         createMaterial();
 
         Node node = new Node("node1");

File: jme3-examples/src/main/java/jme3test/bullet/TestGhostObject.java
Patch:
@@ -62,7 +62,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
 
         // Mesh to be shared across several boxes.
         Box boxGeom = new Box(Vector3f.ZERO, 1f, 1f, 1f);

File: jme3-examples/src/main/java/jme3test/bullet/TestLocalPhysics.java
Patch:
@@ -59,7 +59,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
 
         // Add a physics sphere to the world
         Node physicsSphere = PhysicsTestHelper.createPhysicsTestNode(assetManager, new SphereCollisionShape(1), 1);

File: jme3-examples/src/main/java/jme3test/bullet/TestPhysicsCar.java
Patch:
@@ -69,7 +69,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
         PhysicsTestHelper.createPhysicsTestWorld(rootNode, assetManager, bulletAppState.getPhysicsSpace());
         setupKeys();
         buildPlayer();

File: jme3-examples/src/main/java/jme3test/bullet/TestPhysicsHingeJoint.java
Patch:
@@ -76,7 +76,7 @@ else if(binding.equals("Swing")){
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
         setupKeys();
         setupJoint();
     }
@@ -102,7 +102,7 @@ public void setupJoint() {
 
     @Override
     public void simpleUpdate(float tpf) {
-        
+
     }
 
 

File: jme3-examples/src/main/java/jme3test/bullet/TestPhysicsReadWrite.java
Patch:
@@ -69,7 +69,7 @@ public static void main(String[] args){
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
         physicsRootNode=new Node("PhysicsRootNode");
         rootNode.attachChild(physicsRootNode);
 

File: jme3-examples/src/main/java/jme3test/bullet/TestRagDoll.java
Patch:
@@ -64,7 +64,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
         inputManager.addMapping("Pull ragdoll up", new MouseButtonTrigger(0));
         inputManager.addListener(this, "Pull ragdoll up");
         PhysicsTestHelper.createPhysicsTestWorld(rootNode, assetManager, bulletAppState.getPhysicsSpace());

File: jme3-examples/src/main/java/jme3test/bullet/TestSimplePhysics.java
Patch:
@@ -59,7 +59,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
 
         // Add a physics sphere to the world
         Node physicsSphere = PhysicsTestHelper.createPhysicsTestNode(assetManager, new SphereCollisionShape(1), 1);

File: jme3-examples/src/main/java/jme3test/bullet/TestSweepTest.java
Patch:
@@ -35,7 +35,7 @@ public static void main(String[] args) {
     public void simpleInitApp() {
         obstacleCollisionShape = new CapsuleCollisionShape(0.3f, 0.5f);
         capsuleCollisionShape = new CapsuleCollisionShape(1f, 1f);
-        
+
         stateManager.attach(bulletAppState);
 
         capsule = new Node("capsule");
@@ -52,7 +52,7 @@ public void simpleInitApp() {
         bulletAppState.getPhysicsSpace().add(obstacle);
         rootNode.attachChild(obstacle);
 
-        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.setDebugEnabled(true);
     }
 
     @Override
@@ -70,7 +70,7 @@ public void simpleUpdate(float tpf) {
                 colliding = true;
             }
         }
-        
+
         if (!colliding) {
             // if the sweep is clear then move the spatial
             capsule.move(move, 0, 0);

File: jme3-ios/src/main/java/com/jme3/renderer/ios/IosGL.java
Patch:
@@ -34,6 +34,7 @@
 import com.jme3.renderer.RendererException;
 import com.jme3.renderer.opengl.GL;
 import com.jme3.renderer.opengl.GLExt;
+import com.jme3.renderer.opengl.GLFbo;
 import java.nio.Buffer;
 import java.nio.BufferOverflowException;
 import java.nio.ByteBuffer;
@@ -46,7 +47,7 @@
  * 
  * @author Kirill Vainer
  */
-public class IosGL implements GL, GLExt {
+public class IosGL implements GL, GLExt, GLFbo {
     
     private final int[] temp_array = new int[16];
     

File: jme3-ios/src/main/java/com/jme3/renderer/ios/IosGL.java
Patch:
@@ -34,6 +34,7 @@
 import com.jme3.renderer.RendererException;
 import com.jme3.renderer.opengl.GL;
 import com.jme3.renderer.opengl.GLExt;
+import com.jme3.renderer.opengl.GLFbo;
 import java.nio.Buffer;
 import java.nio.BufferOverflowException;
 import java.nio.ByteBuffer;
@@ -46,7 +47,7 @@
  * 
  * @author Kirill Vainer
  */
-public class IosGL implements GL, GLExt {
+public class IosGL implements GL, GLExt, GLFbo {
     
     private final int[] temp_array = new int[16];
     

File: jme3-networking/src/main/java/com/jme3/network/Client.java
Patch:
@@ -31,6 +31,8 @@
  */
 package com.jme3.network;
 
+import com.jme3.network.service.ClientServiceManager;
+
 
 /**
  *  Represents a remote connection to a server that can be used

File: jme3-networking/src/main/java/com/jme3/network/service/serializer/ClientSerializerRegistrationsService.java
Patch:
@@ -55,6 +55,7 @@ protected void onInitialize( ClientServiceManager serviceManager ) {
         // This is the minimum we'd need just to be able to register
         // the rest... otherwise we can't even receive this message.
         Serializer.registerClass(SerializerRegistrationsMessage.class);
+        Serializer.registerClass(SerializerRegistrationsMessage.Registration.class);
         
         // Add our listener for that message type
         serviceManager.getClient().addMessageListener(this, SerializerRegistrationsMessage.class); 

File: jme3-networking/src/main/java/com/jme3/network/service/serializer/ServerSerializerRegistrationsService.java
Patch:
@@ -51,6 +51,7 @@ public class ServerSerializerRegistrationsService extends AbstractHostedService
     protected void onInitialize( HostedServiceManager serviceManager ) {
         // Make sure our message type is registered
         Serializer.registerClass(SerializerRegistrationsMessage.class);
+        Serializer.registerClass(SerializerRegistrationsMessage.Registration.class);
     }
     
     @Override

File: jme3-networking/src/main/java/com/jme3/network/service/Service.java
Patch:
@@ -53,7 +53,7 @@ public interface Service<S> {
     public void start();
     
     /**
-     *  Called when the service is shutting down.  All services
+     *  Called when the service manager is shutting down.  All services
      *  are stopped and any service manager resources are closed
      *  before the services are terminated.
      */

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -245,7 +245,7 @@ protected void initContextFirstTime(){
         }
         
         if (GLContext.getCapabilities().GL_ARB_debug_output && settings.getBoolean("GraphicsDebug")) {
-            ARBDebugOutput.glDebugMessageCallbackARB(new ARBDebugOutputCallback());
+            ARBDebugOutput.glDebugMessageCallbackARB(new ARBDebugOutputCallback(new LwjglGLDebugOutputHandler()));
         }
         
         renderer.setMainFrameBufferSrgb(settings.getGammaCorrection());

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -56,6 +56,7 @@
 import com.jme3.util.ListMap;
 import com.jme3.util.NativeObjectManager;
 import java.nio.*;
+import java.util.Arrays;
 import java.util.EnumMap;
 import java.util.EnumSet;
 import java.util.HashSet;

File: jme3-core/src/main/java/com/jme3/shader/Glsl100ShaderGenerator.java
Patch:
@@ -127,6 +127,7 @@ protected void generateDeclarativeSection(StringBuilder source, ShaderNode shade
             unIndent();
             startCondition(shaderNode.getCondition(), source);
             source.append(nodeSource);
+            source.append("\n");
             endCondition(shaderNode.getCondition(), source);
             indent();
         }

File: jme3-bullet/src/common/java/com/jme3/bullet/control/RigidBodyControl.java
Patch:
@@ -195,7 +195,7 @@ public boolean isApplyPhysicsLocal() {
 
     /**
      * When set to true, the physics coordinates will be applied to the local
-     * translation of the Spatial instead of the world traslation.
+     * translation of the Spatial instead of the world translation.
      * @param applyPhysicsLocal
      */
     public void setApplyPhysicsLocal(boolean applyPhysicsLocal) {

File: jme3-bullet/src/common/java/com/jme3/bullet/control/RigidBodyControl.java
Patch:
@@ -195,7 +195,7 @@ public boolean isApplyPhysicsLocal() {
 
     /**
      * When set to true, the physics coordinates will be applied to the local
-     * translation of the Spatial instead of the world traslation.
+     * translation of the Spatial instead of the world translation.
      * @param applyPhysicsLocal
      */
     public void setApplyPhysicsLocal(boolean applyPhysicsLocal) {

File: jme3-android/src/main/java/com/jme3/input/android/AndroidInputHandler14.java
Patch:
@@ -148,7 +148,8 @@ public boolean onKey(View view, int keyCode, KeyEvent event) {
         if (isJoystick && joyInput != null) {
 //            logger.log(Level.INFO, "onKey source: {0}, isJoystick: {1}",
 //                    new Object[]{source, isJoystick});
-            consumed = consumed || ((AndroidJoyInput14)joyInput).onKey(event);
+            // use inclusive OR to make sure the onKey method is called.
+            consumed = consumed | ((AndroidJoyInput14)joyInput).onKey(event);
         }
 
         return consumed;

File: sdk/jme3-materialeditor/src/com/jme3/gde/shadernodedefinition/wizard/SNDefWizardIterator.java
Patch:
@@ -102,7 +102,7 @@ public Set<?> instantiate() throws IOException {
 
         //Get the template and convert it:
         FileObject tplSnd = Templates.getTemplate(wizard);
-        FileObject tplShd = tplSnd.getParent().getChildren()[1];
+        FileObject tplShd = tplSnd.getParent().getChildren()[0];
 
         DataObject templateSnd = DataObject.find(tplSnd);
         DataObject templateShd = DataObject.find(tplShd);

File: jme3-core/src/main/java/com/jme3/material/TechniqueDef.java
Patch:
@@ -544,7 +544,7 @@ public void setShaderGenerationInfo(ShaderGenerationInfo shaderGenerationInfo) {
     //todo: make toString return something usefull
     @Override
     public String toString() {
-        return "TechniqueDef{" + "requiredCaps=" + requiredCaps + ", name=" + name /*+ ", vertName=" + vertName + ", fragName=" + fragName + ", vertLanguage=" + vertLanguage + ", fragLanguage=" + fragLanguage */+ ", presetDefines=" + presetDefines + ", usesShaders=" + usesShaders + ", usesNodes=" + usesNodes + ", shaderNodes=" + shaderNodes + ", shaderGenerationInfo=" + shaderGenerationInfo + ", renderState=" + renderState + ", forcedRenderState=" + forcedRenderState + ", lightMode=" + lightMode + ", shadowMode=" + shadowMode + ", defineParams=" + defineParams + ", worldBinds=" + worldBinds + '}';
+        return "TechniqueDef{" + "requiredCaps=" + requiredCaps + ", name=" + name /*+ ", vertName=" + vertName + ", fragName=" + fragName + ", vertLanguage=" + vertLanguage + ", fragLanguage=" + fragLanguage */+ ", presetDefines=" + presetDefines + ", usesNodes=" + usesNodes + ", shaderNodes=" + shaderNodes + ", shaderGenerationInfo=" + shaderGenerationInfo + ", renderState=" + renderState + ", forcedRenderState=" + forcedRenderState + ", lightMode=" + lightMode + ", shadowMode=" + shadowMode + ", defineParams=" + defineParams + ", worldBinds=" + worldBinds + '}';
     }   
 
     /**

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/animations/AnimationHelper.java
Patch:
@@ -71,7 +71,7 @@ public void applyAnimations(Node node, AnimationMatchMethod animationMatchMethod
         if (actions.size() > 0) {
             List<Animation> animations = new ArrayList<Animation>();
             for (BlenderAction action : actions) {
-                SpatialTrack[] tracks = action.toTracks(node);
+                SpatialTrack[] tracks = action.toTracks(node, blenderContext);
                 if (tracks != null && tracks.length > 0) {
                     Animation spatialAnimation = new Animation(action.getName(), action.getAnimationTime());
                     spatialAnimation.setTracks(tracks);
@@ -110,7 +110,7 @@ public void applyAnimations(Node node, Skeleton skeleton, AnimationMatchMethod a
         if (actions.size() > 0) {
             List<Animation> animations = new ArrayList<Animation>();
             for (BlenderAction action : actions) {
-                BoneTrack[] tracks = action.toTracks(skeleton);
+                BoneTrack[] tracks = action.toTracks(skeleton, blenderContext);
                 if (tracks != null && tracks.length > 0) {
                     Animation boneAnimation = new Animation(action.getName(), action.getAnimationTime());
                     boneAnimation.setTracks(tracks);

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglAbstractDisplay.java
Patch:
@@ -181,7 +181,9 @@ protected void runLoop(){
         
         // check input after we synchronize with framerate.
         // this reduces input lag.
-        Display.processMessages();
+        if (renderable.get()){
+            Display.processMessages();
+        }
         
         // Subclasses just call GLObjectManager clean up objects here
         // it is safe .. for now.

File: jme3-core/src/main/java/com/jme3/scene/shape/Dome.java
Patch:
@@ -266,7 +266,7 @@ public void updateGeometry(Vector3f center, int planes,
         vars.release();
 
         // pole
-        vb.put(center.x).put(center.y + radius).put(center.z);
+        vb.put(this.center.x).put(this.center.y + radius).put(this.center.z);
         nb.put(0).put(insideView ? -1 : 1).put(0);
         tb.put(0.5f).put(1.0f);
 

File: jme3-core/src/main/java/com/jme3/asset/ShaderNodeDefinitionKey.java
Patch:
@@ -39,8 +39,6 @@
  * Used for loading {@link ShaderNodeDefinition shader nodes definition}
  *
  * Tells if the defintion has to be loaded with or without its documentation
- *
- * @author Kirill Vainer
  */
 public class ShaderNodeDefinitionKey extends AssetKey<List<ShaderNodeDefinition>> {
 

File: jme3-core/src/main/java/com/jme3/asset/AssetConfig.java
Patch:
@@ -69,7 +69,7 @@ private static Class acquireClass(String name) {
     public static void loadText(AssetManager assetManager, URL configUrl) throws IOException{
         InputStream in = configUrl.openStream();
         try {
-            Scanner scan = new Scanner(in);
+            Scanner scan = new Scanner(in, "UTF-8");
             scan.useLocale(Locale.US); // Fix commas / periods ??
             while (scan.hasNext()){
                 String cmd = scan.next();

File: jme3-core/src/main/java/com/jme3/asset/DesktopAssetManager.java
Patch:
@@ -312,22 +312,21 @@ protected <T> T loadLocatedAsset(AssetKey<T> key, AssetInfo info, AssetProcessor
     protected <T> T registerAndCloneSmartAsset(AssetKey<T> key, T obj, AssetProcessor proc, AssetCache cache) {
         // object obj is the original asset
         // create an instance for user
-        T clone = (T) obj;
         if (proc == null) {
             throw new IllegalStateException("Asset implements "
                     + "CloneableSmartAsset but doesn't "
                     + "have processor to handle cloning");
         } else {
-            clone = (T) proc.createClone(obj);
+            T clone = (T) proc.createClone(obj);
             if (cache != null && clone != obj) {
                 cache.registerAssetClone(key, clone);
             } else {
                 throw new IllegalStateException("Asset implements "
                         + "CloneableSmartAsset but doesn't have cache or "
                         + "was not cloned");
             }
+            return clone;
         }
-        return clone;
     }
     
     @Override

File: jme3-core/src/main/java/com/jme3/asset/ImplHandler.java
Patch:
@@ -47,7 +47,7 @@
  * This is done by keeping an instance of each asset loader and asset
  * locator object in a thread local.
  */
-public class ImplHandler {
+final class ImplHandler {
 
     private static final Logger logger = Logger.getLogger(ImplHandler.class.getName());
 
@@ -75,15 +75,15 @@ public ImplHandler(AssetManager assetManager){
         this.assetManager = assetManager;
     }
 
-    protected class ImplThreadLocal<T> extends ThreadLocal {
+    protected static class ImplThreadLocal<T> extends ThreadLocal {
 
         private final Class<T> type;
         private final String path;
         private final String[] extensions;
 
         public ImplThreadLocal(Class<T> type, String[] extensions){
             this.type = type;
-            this.extensions = extensions;
+            this.extensions = extensions.clone();
             this.path = null;
         }
 

File: jme3-core/src/main/java/com/jme3/light/SpotLight.java
Patch:
@@ -56,7 +56,7 @@
  * the light intensity slowly decrease between the inner cone and the outer cone.
  *  @author Nehon
  */
-public class SpotLight extends Light implements Savable {
+public class SpotLight extends Light {
 
     protected Vector3f position = new Vector3f();
     protected Vector3f direction = new Vector3f(0,-1,0);

File: jme3-core/src/main/java/com/jme3/scene/BatchNode.java
Patch:
@@ -64,7 +64,7 @@
  * TODO more automagic (batch when needed in the updateLogicalState)
  * @author Nehon
  */
-public class BatchNode extends GeometryGroupNode implements Savable {
+public class BatchNode extends GeometryGroupNode {
 
     private static final Logger logger = Logger.getLogger(BatchNode.class.getName());
     /**

File: jme3-core/src/main/java/com/jme3/scene/Node.java
Patch:
@@ -58,7 +58,7 @@
  * @author Gregg Patton
  * @author Joshua Slack
  */
-public class Node extends Spatial implements Savable {
+public class Node extends Spatial {
 
     private static final Logger logger = Logger.getLogger(Node.class.getName());
 

File: jme3-core/src/main/java/com/jme3/scene/instancing/InstancedNode.java
Patch:
@@ -57,7 +57,7 @@ static void setGeometryStartIndex2(Geometry geom, int startIndex) {
         setGeometryStartIndex(geom, startIndex);
     }
     
-    private static class InstanceTypeKey implements Cloneable {
+    private static final class InstanceTypeKey implements Cloneable {
 
         Mesh mesh;
         Material material;

File: jme3-core/src/main/java/com/jme3/shader/DefineList.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-public class DefineList implements Savable, Cloneable {
+public final class DefineList implements Savable, Cloneable {
 
     private static final String ONE = "1";
     

File: jme3-core/src/main/java/com/jme3/util/IntMap.java
Patch:
@@ -34,6 +34,7 @@
 import com.jme3.util.IntMap.Entry;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.NoSuchElementException;
 
 /**
  * Similar to a {@link Map} except that ints are used as keys.
@@ -234,7 +235,7 @@ public boolean hasNext() {
 
         public Entry next() {
             if (el >= size)
-                throw new IllegalStateException("No more elements!");
+                throw new NoSuchElementException("No more elements!");
 
             if (cur != null){
                 Entry e = cur;

File: jme3-core/src/main/java/com/jme3/util/blockparser/BlockLanguageParser.java
Patch:
@@ -71,7 +71,7 @@ private void pushStatement(StringBuilder buffer){
     private void load(InputStream in) throws IOException{
         reset();
         
-        reader = new InputStreamReader(in);
+        reader = new InputStreamReader(in, "UTF-8");
         
         StringBuilder buffer = new StringBuilder();
         boolean insideComment = false;

File: jme3-core/src/plugins/java/com/jme3/audio/plugins/WAVLoader.java
Patch:
@@ -196,7 +196,7 @@ private AudioData load(AssetInfo info, InputStream inputStream, boolean stream)
                     break;
                 case i_data:
                     // Compute duration based on data chunk size
-                    duration = len / bytesPerSec;
+                    duration = (float)(len / bytesPerSec);
 
                     if (readStream) {
                         readDataChunkForStream(inOffset, len);

File: jme3-core/src/plugins/java/com/jme3/export/binary/BinaryImporter.java
Patch:
@@ -270,9 +270,7 @@ public Savable load(File f, ReadListener listener) throws IOException {
         try {
             return load(fis, listener);
         } finally {
-            if (fis != null) {
-                fis.close();
-            }
+            fis.close();
         }
     }
 

File: jme3-core/src/main/java/com/jme3/material/TechniqueDef.java
Patch:
@@ -176,8 +176,8 @@ public void setLightMode(LightMode lightMode) {
         if(lightSpace == null){
             if(lightMode== LightMode.MultiPass){
                 lightSpace = LightSpace.Legacy;
-            }else if(lightMode== LightMode.SinglePass){
-                lightSpace = LightSpace.View;
+            }else{
+                lightSpace = LightSpace.World;
             }
         }
     }

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/EditableMaterialFile.java
Patch:
@@ -532,7 +532,7 @@ private void checkPackedTextureProps(Material mat) {
                             //TODO: seems like flip is removed due to ImageToAwt
                             texKey.setFlipY(false);
                             Texture texture = manager.loadTexture(texKey);
-                            MatParamTexture newParam = new MatParamTexture(texParam.getVarType(), texParam.getName(), texture, texParam.getUnit());
+                            MatParamTexture newParam = new MatParamTexture(texParam.getVarType(), texParam.getName(), texture, texParam.getUnit(), null);
                             materialParameters.put(newParam.getName(), new MaterialProperty(newParam));
                         } catch (Exception ex) {
                             Exceptions.printStackTrace(ex);

File: jme3-core/src/main/java/com/jme3/post/Filter.java
Patch:
@@ -201,7 +201,7 @@ public void cleanup(Renderer r) {
 
     /**
      * returns the default pass texture format
-     * default is {@link Format#RGB10_A2}
+     * default is {@link Format#RGB111110F}
      * 
      * @return
      */

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -2089,9 +2089,7 @@ public void updateTexImageData(Image img, Texture.Type type, int unit) {
 
         if (caps.contains(Caps.OpenGL30) || gl2 == null) {
             if (!img.hasMipmaps() && img.isGeneratedMipmapsRequired() && img.getData(0) != null) {
-                if (gl2 != null) gl2.glEnable(target); // XXX: Required for ATI
                 glfbo.glGenerateMipmapEXT(target);
-                if (gl2 != null) gl2.glDisable(target);
                 img.setMipmapsGenerated(true);
             }
         }

File: jme3-core/src/main/java/com/jme3/audio/openal/ALAudioRenderer.java
Patch:
@@ -1132,6 +1132,7 @@ public void deleteFilter(Filter filter) {
             ib.position(0).limit(1);
             ib.put(id).flip();
             efx.alDeleteFilters(1, ib);
+            filter.resetObject();
         }
     }
 

File: jme3-core/src/main/java/com/jme3/cinematic/Cinematic.java
Patch:
@@ -702,7 +702,9 @@ public void clear() {
         dispose();
         cinematicEvents.clear();
         timeLine.clear();
-        eventsData.clear();
+        if (eventsData != null) {
+            eventsData.clear();
+        }
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/scene/BatchNode.java
Patch:
@@ -131,6 +131,7 @@ public void updateGeometricState() {
             updateWorldTransforms();
         }
 
+        refreshFlags &= ~RF_CHILD_LIGHTLIST;
         if (!children.isEmpty()) {
             // the important part- make sure child geometric state is refreshed
             // first before updating own world bound. This saves

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL4.java
Patch:
@@ -39,8 +39,8 @@
  * @author Kirill Vainer
  */
 public interface GL4 extends GL3 {
-    public static final int GL_TESS_CONTROL_SHADER=0x8E87;
-    public static final int GL_TESS_EVALUATION_SHADER=0x8E88;
+    public static final int GL_TESS_CONTROL_SHADER=0x8E88;
+    public static final int GL_TESS_EVALUATION_SHADER=0x8E87;
     public static final int GL_PATCHES=0xE;
     public void glPatchParameter(int count);
 }

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL4.java
Patch:
@@ -39,8 +39,8 @@
  * @author Kirill Vainer
  */
 public interface GL4 extends GL3 {
-    public static final int GL_TESS_CONTROL_SHADER=0x8E87;
-    public static final int GL_TESS_EVALUATION_SHADER=0x8E88;
+    public static final int GL_TESS_CONTROL_SHADER=0x8E88;
+    public static final int GL_TESS_EVALUATION_SHADER=0x8E87;
     public static final int GL_PATCHES=0xE;
     public void glPatchParameter(int count);
 }

File: jme3-core/src/main/java/com/jme3/asset/cache/WeakRefCloneAssetCache.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.logging.Logger;
 
 /**
- * <codeWeakRefCloneAssetCache</code> caches cloneable assets in a weak-key
+ * <code>WeakRefCloneAssetCache</code> caches cloneable assets in a weak-key
  * cache, allowing them to be collected when memory is low.
  * The cache stores weak references to the asset keys, so that
  * when all clones of the original asset are collected, will cause the 

File: jme3-core/src/main/java/com/jme3/material/TechniqueDef.java
Patch:
@@ -49,9 +49,7 @@ public class TechniqueDef implements Savable {
      * Version #1: Separate shader language for each shader source.
      */
     public static final int SAVABLE_VERSION = 1;
-
-
-
+    
     /**
      * Describes light rendering mode.
      */

File: jme3-core/src/main/java/com/jme3/renderer/Caps.java
Patch:
@@ -315,6 +315,7 @@ public enum Caps {
      * Supports 32-bit index buffers.
      */
     IntegerIndexBuffer,
+    
     /**
      * Partial support for non-power-of-2 textures, typically found
      * on OpenGL ES 2 devices.

File: jme3-core/src/main/java/com/jme3/shader/ShaderKey.java
Patch:
@@ -100,6 +100,9 @@ public int hashCode() {
             int hash = 7;
             hash = 41 * hash + name.hashCode();
             hash = 41 * hash + shaderName.get(Shader.ShaderType.Fragment).hashCode();
+            hash = shaderName.get(Shader.ShaderType.Geometry) == null ? hash : 41 * hash + shaderName.get(Shader.ShaderType.Geometry).hashCode();
+            hash = shaderName.get(Shader.ShaderType.TessellationControl) == null ? hash : 41 * hash + shaderName.get(Shader.ShaderType.TessellationControl).hashCode();
+            hash = shaderName.get(Shader.ShaderType.TessellationEvaluation) == null ? hash : 41 * hash + shaderName.get(Shader.ShaderType.TessellationEvaluation).hashCode();
             hash = 41 * hash + (defines != null ? defines.hashCode() : 0);
             cachedHashedCode = hash;
         }

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -411,8 +411,8 @@ private void readTechniqueStatement(Statement statement) throws IOException {
         if (split[0].equals("VertexShader") ||
                 split[0].equals("FragmentShader") ||
                 split[0].equals("GeometryShader") ||
-                split[0].equals("TesselationControlShader") ||
-                split[0].equals("TesselationEvaluationShader")) {
+                split[0].equals("TessellationControlShader") ||
+                split[0].equals("TessellationEvaluationShader")) {
             readShaderStatement(statement.getLine());
         } else if (split[0].equals("LightMode")) {
             readLightMode(statement.getLine());

File: jme3-core/src/main/java/com/jme3/shader/Shader.java
Patch:
@@ -78,11 +78,11 @@ public static enum ShaderType {
         /**
          * Controls tesselation factor (e.g how often a input patch should be subdivided)
          */
-        TesselationControl,
+        TessellationControl,
         /**
          * Controls tesselation transform (e.g similar to the vertex shader, but required to mix inputs manual)
          */
-        TesselationEvaluation;
+        TessellationEvaluation;
     }
 
     /**

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -865,8 +865,8 @@ private void setViewPort(Camera cam) {
         if (cam != prevCam || cam.isViewportChanged()) {
             viewX = (int) (cam.getViewPortLeft() * cam.getWidth());
             viewY = (int) (cam.getViewPortBottom() * cam.getHeight());
-            viewWidth = (int) ((cam.getViewPortRight() - cam.getViewPortLeft()) * cam.getWidth());
-            viewHeight = (int) ((cam.getViewPortTop() - cam.getViewPortBottom()) * cam.getHeight());
+            viewWidth = ((int)(cam.getViewPortRight() * cam.getWidth())) - ((int)(cam.getViewPortLeft() * cam.getWidth()));
+            viewHeight = ((int)(cam.getViewPortTop() * cam.getHeight())) - ((int)(cam.getViewPortBottom() * cam.getHeight()));
             uniformBindingManager.setViewPort(viewX, viewY, viewWidth, viewHeight);
             renderer.setViewPort(viewX, viewY, viewWidth, viewHeight);
             renderer.setClipRect(viewX, viewY, viewWidth, viewHeight);

File: jme3-core/src/main/java/com/jme3/util/MaterialDebugAppState.java
Patch:
@@ -317,7 +317,7 @@ public void reload() {
                     if (field.getType().isInstance(p)) {
                         field.setAccessible(true);
                         p = (Filter.Pass) field.get(filter);
-                        if (p.getPassMaterial() != null) {
+                        if (p!= null && p.getPassMaterial() != null) {
                             Material mat = reloadMaterial(p.getPassMaterial());
                             if (mat == null) {
                                 return;

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -865,8 +865,8 @@ private void setViewPort(Camera cam) {
         if (cam != prevCam || cam.isViewportChanged()) {
             viewX = (int) (cam.getViewPortLeft() * cam.getWidth());
             viewY = (int) (cam.getViewPortBottom() * cam.getHeight());
-            viewWidth = (int) ((cam.getViewPortRight() - cam.getViewPortLeft()) * cam.getWidth());
-            viewHeight = (int) ((cam.getViewPortTop() - cam.getViewPortBottom()) * cam.getHeight());
+            viewWidth = ((int)(cam.getViewPortRight() * cam.getWidth())) - ((int)(cam.getViewPortLeft() * cam.getWidth()));
+            viewHeight = ((int)(cam.getViewPortTop() * cam.getHeight())) - ((int)(cam.getViewPortBottom() * cam.getHeight()));
             uniformBindingManager.setViewPort(viewX, viewY, viewWidth, viewHeight);
             renderer.setViewPort(viewX, viewY, viewWidth, viewHeight);
             renderer.setClipRect(viewX, viewY, viewWidth, viewHeight);

File: jme3-networking/src/main/java/com/jme3/network/serializing/serializers/SavableSerializer.java
Patch:
@@ -93,7 +93,7 @@ public int read(byte[] b){
         @Override
         public int read(byte[] b, int off, int len){
             int toRead = len > input.remaining() ? input.remaining() : len;
-            input.get(b, off, len);
+            input.get(b, off, toRead);
             return toRead;
         }
 

File: jme3-networking/src/main/java/com/jme3/network/serializing/serializers/SavableSerializer.java
Patch:
@@ -93,7 +93,7 @@ public int read(byte[] b){
         @Override
         public int read(byte[] b, int off, int len){
             int toRead = len > input.remaining() ? input.remaining() : len;
-            input.get(b, off, len);
+            input.get(b, off, toRead);
             return toRead;
         }
 

File: jme3-core/src/plugins/java/com/jme3/asset/plugins/HttpZipLocator.java
Patch:
@@ -298,8 +298,8 @@ && get32(header, i) == ZipEntry.ENDSIG){
     }
 
     public void load(URL url) throws IOException {
-        if (!url.getProtocol().equals("http"))
-            throw new UnsupportedOperationException();
+        if (!url.getProtocol().equals("http") && !url.getProtocol().equals("https"))
+            throw new UnsupportedOperationException("HttpZipLocator only supports HTTP(S) URLs");
 
         zipUrl = url;
         readEndHeader();

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -658,8 +658,6 @@ public void preloadScene(Spatial scene) {
     public void renderScene(Spatial scene, ViewPort vp) {
         //reset of the camera plane state for proper culling (must be 0 for the first note of the scene to be rendered)
         vp.getCamera().setPlaneState(0);
-        //remember the scene for possible later use
-        vp.getQueue().setRootScene(scene);
         //rendering the scene
         renderSubScene(scene, vp);
     }

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -489,9 +489,6 @@ public void postFrame(FrameBuffer out) {
 
             //rendering the post shadow pass
             viewPort.getQueue().renderShadowQueue(lightReceivers, renderManager, cam, false);
-            if (flushQueues) {
-                sceneReceivers.clear();
-            }
 
             //resetting renderManager settings
             renderManager.setForcedTechnique(null);
@@ -502,6 +499,9 @@ public void postFrame(FrameBuffer out) {
             clearMatParams();
         }
 
+        if (flushQueues) {
+            sceneReceivers.clear();
+        }
     }
     
     /**

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -1563,13 +1563,13 @@ public void setFrameBuffer(FrameBuffer fb) {
                 updateFrameBuffer(fb);
             }
 
+            // update viewport to reflect framebuffer's resolution
+            setViewPort(0, 0, fb.getWidth(), fb.getHeight());
+            
             if (context.boundFBO != fb.getId()) {
                 glfbo.glBindFramebufferEXT(GLExt.GL_FRAMEBUFFER_EXT, fb.getId());
                 statistics.onFrameBufferUse(fb, true);
 
-                // update viewport to reflect framebuffer's resolution
-                setViewPort(0, 0, fb.getWidth(), fb.getHeight());
-
                 context.boundFBO = fb.getId();
             } else {
                 statistics.onFrameBufferUse(fb, false);

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -2111,8 +2111,9 @@ public void setTexture(int unit, Texture tex) {
     }
 
     public void modifyTexture(Texture tex, Image pixels, int x, int y) {
-//        setTexture(0, tex);
-//        texUtil.uploadSubTexture(caps, pixels, convertTextureType(tex.getType(), pixels.getMultiSamples(), -1), 0, x, y, linearizeSrgbImages);
+        setTexture(0, tex);
+        int target = convertTextureType(tex.getType(), pixels.getMultiSamples(), -1);
+        texUtil.uploadSubTexture(pixels, target, 0, x, y, linearizeSrgbImages);
     }
 
     public void deleteImage(Image image) {

File: jme3-desktop/src/main/java/com/jme3/system/NativeLibraryLoader.java
Patch:
@@ -254,7 +254,7 @@ private static int computeNativesHash() {
         URLConnection conn = null;
         try {
             String classpath = System.getProperty("java.class.path");
-            URL url = Thread.currentThread().getContextClassLoader().getResource("com/jme3/system/NativeLibraryLoder.class");
+            URL url = Thread.currentThread().getContextClassLoader().getResource("com/jme3/system/NativeLibraryLoader.class");
 
             StringBuilder sb = new StringBuilder(url.toString());
             if (sb.indexOf("jar:") == 0) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -1094,7 +1094,7 @@ public void updateShaderSourceData(ShaderSource source) {
             source.clearUpdateNeeded();
         } else {
             logger.log(Level.WARNING, "Bad compile of:\n{0}",
-                    new Object[]{ShaderDebug.formatShaderSource(source.getDefines(), source.getSource(), stringBuf.toString())});
+                    new Object[]{ShaderDebug.formatShaderSource(stringBuf.toString() + source.getDefines() + source.getSource())});
             if (infoLog != null) {
                 throw new RendererException("compile error in: " + source + "\n" + infoLog);
             } else {

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLRenderer.java
Patch:
@@ -1096,7 +1096,7 @@ public void updateShaderSourceData(ShaderSource source) {
             source.clearUpdateNeeded();
         } else {
             logger.log(Level.WARNING, "Bad compile of:\n{0}",
-                    new Object[]{ShaderDebug.formatShaderSource(source.getDefines(), source.getSource(), stringBuf.toString())});
+                    new Object[]{ShaderDebug.formatShaderSource(stringBuf.toString())});
             if (infoLog != null) {
                 throw new RendererException("compile error in: " + source + "\n" + infoLog);
             } else {

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ShaderNodeLoaderDelegate.java
Patch:
@@ -1058,12 +1058,12 @@ protected void checkTypes(VariableMapping mapping, Statement statement1) throws
         if (!ShaderUtils.typesMatch(mapping)) {
             String ls = mapping.getLeftSwizzling().length() == 0 ? "" : "." + mapping.getLeftSwizzling();
             String rs = mapping.getRightSwizzling().length() == 0 ? "" : "." + mapping.getRightSwizzling();
-            throw new MatParseException("Type mismatch, cannot convert" + mapping.getLeftVariable().getType() + ls + " to " + mapping.getRightVariable().getType() + rs, statement1);
+            throw new MatParseException("Type mismatch, cannot convert " + mapping.getRightVariable().getType() + rs + " to " + mapping.getLeftVariable().getType() + ls, statement1);
         }
         if (!ShaderUtils.multiplicityMatch(mapping)) {
             String type1 = mapping.getLeftVariable().getType() + "[" + mapping.getLeftVariable().getMultiplicity() + "]";
             String type2 = mapping.getRightVariable().getType() + "[" + mapping.getRightVariable().getMultiplicity() + "]";
-            throw new MatParseException("Type mismatch, cannot convert" + type1 + " to " + type2, statement1);
+            throw new MatParseException("Type mismatch, cannot convert " + type1 + " to " + type2, statement1);
         }
     }
 

File: jme3-core/src/main/java/com/jme3/texture/Texture.java
Patch:
@@ -620,7 +620,7 @@ public void read(JmeImporter e) throws IOException {
                 image = loadedTex.getImage();
             } catch (AssetNotFoundException ex){
                 Logger.getLogger(Texture.class.getName()).log(Level.SEVERE, "Cannot locate texture {0}", key);
-                image = PlaceholderAssets.getPlaceholderImage();
+                image = PlaceholderAssets.getPlaceholderImage(e.getAssetManager());
             }
         }else{
             // no key is set on the texture. Attempt to load an embedded image

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -165,7 +165,7 @@ private Object readValue(VarType type, String value) throws IOException{
                     tex.setWrap(WrapMode.Repeat);
                 }                
             }else{
-                tex = new Texture2D(PlaceholderAssets.getPlaceholderImage());
+                tex = new Texture2D(PlaceholderAssets.getPlaceholderImage(assetManager));
                 if (repeat){
                     tex.setWrap(WrapMode.Repeat);
                 }

File: jme3-core/src/plugins/java/com/jme3/scene/plugins/MTLLoader.java
Patch:
@@ -182,7 +182,7 @@ protected Texture loadTexture(String path){
             texture.setWrap(WrapMode.Repeat);
         } catch (AssetNotFoundException ex){
             logger.log(Level.WARNING, "Cannot locate {0} for material {1}", new Object[]{texKey, key});
-            texture = new Texture2D(PlaceholderAssets.getPlaceholderImage());
+            texture = new Texture2D(PlaceholderAssets.getPlaceholderImage(assetManager));
             texture.setWrap(WrapMode.Repeat);
             texture.setKey(key);
         }

File: jme3-core/src/main/java/com/jme3/shader/Glsl100ShaderGenerator.java
Patch:
@@ -517,7 +517,7 @@ protected String updateDefinesName(String nodeSource, ShaderNode shaderNode) {
      * @return the modified source code
      */
     protected String replace(String nodeSource, ShaderNodeVariable var, String newName) {
-        nodeSource = nodeSource.replaceAll("(\\W)" + var.getName() + "(\\W)", "$1" + newName + "$2");
+        nodeSource = nodeSource.replaceAll("(?<=\\W)" + var.getName() + "(?=\\W)",  newName);
         return nodeSource;
     }
 

File: jme3-core/src/main/java/com/jme3/shader/ShaderGenerator.java
Patch:
@@ -71,7 +71,6 @@ public void initialize(Technique technique){
     /**
      * Generate vertex and fragment shaders for the given technique
      *
-     * @param technique the technique to use to generate the shaders
      * @return a Shader program
      */
     public Shader generateShader() {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/dialog/AddNodeDialog.java
Patch:
@@ -204,7 +204,7 @@ private void loadDefs(ProjectAssetManager mgr) {
     private void createDoc(ShaderNodeDefinition def) {
         JTextPane doc = new JTextPane();
         doc.setEditable(false);
-        doc.setBackground(new java.awt.Color(240, 240, 240));
+        //doc.setBackground(new java.awt.Color(240, 240, 240));
         doc.setMaximumSize(new java.awt.Dimension(300, 300));
         doc.setMinimumSize(new java.awt.Dimension(300, 300));
         doc.setPreferredSize(new java.awt.Dimension(300, 300));

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -887,10 +887,10 @@ protected void renderMultipassLighting(Shader shader, Geometry g, LightList ligh
                 case Directional:
                     DirectionalLight dl = (DirectionalLight) l;
                     Vector3f dir = dl.getDirection();
-                    //FIXME : there is an inconstencie here due to backward 
+                    //FIXME : there is an inconstency here due to backward 
                     //compatibility of the lighting shader.
                     //The directional light direction is passed in the 
-                    //LightPosition uniform. The lightinf shader needs to be 
+                    //LightPosition uniform. The lighting shader needs to be 
                     //reworked though in order to fix this.
                     tmpLightPosition.set(dir.getX(), dir.getY(), dir.getZ(), -1);
                     lightPos.setValue(VarType.Vector4, tmpLightPosition);

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLDebugDesktop.java
Patch:
@@ -3,12 +3,12 @@
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 
-public class GLDebugGL2 extends GLDebugES {
+public class GLDebugDesktop extends GLDebugES implements GL2, GL3 {
 
     private final GL2 gl2;
     private final GL3 gl3;
     
-    public GLDebugGL2(GL gl, GLFbo glfbo) {
+    public GLDebugDesktop(GL gl, GLFbo glfbo) {
         super(gl, glfbo);
         this.gl2 = gl instanceof GL2 ? (GL2) gl : null;
         this.gl3 = gl instanceof GL3 ? (GL3) gl : null;

File: jme3-core/src/main/java/com/jme3/renderer/RenderContext.java
Patch:
@@ -265,6 +265,8 @@ public class RenderContext {
     
     public ColorRGBA clearColor = new ColorRGBA(0,0,0,0);
     
+    public boolean seamlessCubemap = false;
+    
     /**
      * Reset the RenderContext to default GL state
      */
@@ -317,5 +319,6 @@ public void reset(){
         depthFunc = RenderState.TestFunction.LessOrEqual;    
         alphaFunc = RenderState.TestFunction.Greater;
         clearColor.set(0,0,0,0);
+        seamlessCubemap = false;
     }
 }

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLExt.java
Patch:
@@ -67,6 +67,7 @@ public interface GLExt extends GLFbo {
         public static final int GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
 	public static final int GL_MAX_SAMPLES_EXT = 0x8D57;
 	public static final int GL_MULTISAMPLE_ARB = 0x809D;
+        public static final int GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
 	public static final int GL_R11F_G11F_B10F_EXT = 0x8C3A;
         public static final int GL_RGBA8 = 0x8058;
 	public static final int GL_RGB16F_ARB = 0x881B;
@@ -85,6 +86,7 @@ public interface GLExt extends GLFbo {
 	public static final int GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
 	public static final int GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
 	public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
+        public static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
 	public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
 	public static final int GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
 	public static final int GL_UNSIGNED_INT_24_8_EXT = 0x84FA;

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -42,7 +42,7 @@
 import com.jme3.renderer.opengl.GL;
 import com.jme3.renderer.opengl.GL2;
 import com.jme3.renderer.opengl.GL3;
-import com.jme3.renderer.opengl.GLDebugGL2;
+import com.jme3.renderer.opengl.GLDebugDesktop;
 import com.jme3.renderer.opengl.GLExt;
 import com.jme3.renderer.opengl.GLFbo;
 import com.jme3.renderer.opengl.GLRenderer;
@@ -218,12 +218,12 @@ protected void initContextFirstTime(){
             GLFbo glfbo = new LwjglGLExt();
             
             if (settings.getBoolean("GraphicsDebug")) {
-                gl    = new GLDebugGL2(gl, glfbo);
+                gl    = new GLDebugDesktop(gl, glfbo);
                 glfbo = (GLFbo) gl;
             }
             
             if (settings.getBoolean("GraphicsTrace")) {
-                gl    = (GL) GLTracer.createDesktopGlTracer(gl, GL2.class);
+                gl    = (GL) GLTracer.createDesktopGlTracer(gl, GL.class, GL2.class, GL3.class);
                 glfbo = (GLFbo) GLTracer.createDesktopGlTracer(glfbo, GLExt.class);
             }
             

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MaterialLoader.java
Patch:
@@ -152,6 +152,7 @@ private void readTextureImage(String content){
         } catch (AssetNotFoundException ex){
             logger.log(Level.WARNING, "Cannot locate {0} for material {1}", new Object[]{texKey, matName});
             textures[texUnit].setImage(PlaceholderAssets.getPlaceholderImage());
+            textures[texUnit].setKey(texKey);
         }
     }
 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/GenerateLODVisualPanel1.java
Patch:
@@ -146,7 +146,6 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
             }
         });
 
-        reductionDescription.setBackground(new java.awt.Color(240, 240, 240));
         jScrollPane1.setViewportView(reductionDescription);
 
         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
@@ -436,7 +435,7 @@ public void keyReleased(java.awt.event.KeyEvent evt) {
         jPanel2Layout.setHorizontalGroup(
             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addComponent(valuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
+            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
         );
         jPanel2Layout.setVerticalGroup(
             jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/GenerateTangentsVisualPanel1.java
Patch:
@@ -65,7 +65,6 @@ private void initComponents() {
 
         org.openide.awt.Mnemonics.setLocalizedText(splitMirrored, org.openide.util.NbBundle.getMessage(GenerateTangentsVisualPanel1.class, "GenerateTangentsVisualPanel1.splitMirrored.text")); // NOI18N
 
-        jTextPane1.setBackground(new java.awt.Color(240, 240, 240));
         jTextPane1.setText(org.openide.util.NbBundle.getMessage(GenerateTangentsVisualPanel1.class, "GenerateTangentsVisualPanel1.jTextPane1.text")); // NOI18N
         jScrollPane1.setViewportView(jTextPane1);
 

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/editor/NodePanel.java
Patch:
@@ -312,6 +312,7 @@ private void initComponents() {
             icon = Icons.frag;
         }
         header = new JLabel(icon);
+        header.setForeground(Color.BLACK);
         header.addMouseListener(labelMouseMotionListener);
         header.addMouseMotionListener(labelMouseMotionListener);
         header.setHorizontalAlignment(SwingConstants.LEFT);
@@ -396,6 +397,7 @@ public void mouseClicked(MouseEvent e) {
 
     public JLabel createLabel(String glslType, String txt, Dot.ParamType type) {
         JLabel label = new JLabel(txt);
+        label.setForeground(Color.BLACK);
         label.setToolTipText(glslType + " " + txt);
         label.setOpaque(false);
         //label.setPreferredSize(new Dimension(50, 15));        

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/multiview/widgets/MaterialPreviewWidget.java
Patch:
@@ -93,6 +93,8 @@ private void initComponents() {
 
         previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
         previewLabel.setText(org.openide.util.NbBundle.getMessage(MaterialPreviewWidget.class, "MaterialPreviewWidget.previewLabel.text")); // NOI18N
+        previewLabel.setMaximumSize(new java.awt.Dimension(120, 120));
+        previewLabel.setMinimumSize(new java.awt.Dimension(120, 120));
 
         jToolBar1.setFloatable(false);
         jToolBar1.setRollover(true);

File: jme3-android/src/main/java/com/jme3/app/AndroidHarnessFragment.java
Patch:
@@ -362,7 +362,7 @@ public void onStop() {
     @Override
     public void onDestroyView() {
         logger.fine("onDestroyView");
-        if (splashImageView != null) {
+        if (splashImageView != null && splashImageView.getParent() != null) {
             ((ViewGroup) splashImageView.getParent()).removeView(splashImageView);
         }
         if (view.getParent() != null) {

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/browser/nodes/AssetPackBrowserItem.java
Patch:
@@ -63,7 +63,7 @@ public AssetPackBrowserItem(Element item, Project proj) {
     private void setImage() {
         try {
             String add = item.getAttribute("type");
-            icon = ImageUtilities.loadImage("/com/jme3/gde/assetpack/icons/" + add + ".gif");
+            icon = ImageUtilities.loadImage("com/jme3/gde/assetpack/icons/" + add + ".gif");
         } catch (Exception e) {
         }
     }

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/browser/nodes/AssetPackBrowserFolder.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class AssetPackBrowserFolder extends AbstractNode {
 
-    Image icon = ImageUtilities.loadImage("/com/jme3/gde/assetpack/icons/assets.gif");
+    Image icon = ImageUtilities.loadImage("com/jme3/gde/assetpack/icons/assets.gif");
     Project proj;
 
     public AssetPackBrowserFolder(Element[] elem, Project lib, String[] categories, String[] tags) {

File: sdk/jme3-core/src/com/jme3/gde/core/filters/FilterExplorerTopComponent.java
Patch:
@@ -51,6 +51,7 @@
 import org.openide.nodes.Node;
 import org.openide.util.HelpCtx;
 import org.openide.util.NbBundle;
+import org.openide.util.actions.SystemAction;
 import org.openide.windows.TopComponent;
 import org.openide.windows.WindowManager;
 
@@ -84,8 +85,8 @@ public FilterExplorerTopComponent() {
         setToolTipText(NbBundle.getMessage(FilterExplorerTopComponent.class, "HINT_FilterExplorerTopComponent"));
         ActionMap map = getActionMap();
         map.put("delete", ExplorerUtils.actionDelete(explorerManager, true));
-        map.put("moveup", new MoveUpAction());
-        map.put("movedown", new MoveDownAction());
+        map.put("moveup", SystemAction.get(MoveUpAction.class));
+        map.put("movedown", SystemAction.get(MoveDownAction.class));
         associateLookup(ExplorerUtils.createLookup(explorerManager, map));
 
     }

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/AssetPackLoader.java
Patch:
@@ -96,7 +96,7 @@ public static Spatial loadAssetPackModel(ProjectAssetManager pm, AssetConfigurat
             if (model != null && node != null) {
                 node.attachChild(model);
             } else {
-                Logger.getLogger(AssetPackLoader.class.getName()).log(Level.WARNING, "Error loading model");
+                Logger.getLogger(AssetPackLoader.class.getName()).log(Level.INFO, "Error loading model");
             }
         }
         if (node != null) {

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/actions/AddAssetAction.java
Patch:
@@ -53,7 +53,7 @@ public void actionPerformed(ActionEvent ev) {
                 SceneComposerTopComponent.findInstance().addModel(model);
                 AssetPackLoader.addModelFiles(pm, scenePm, conf);
             } else {
-                Logger.getLogger(this.getClass().getName()).log(Level.WARNING, "Error loading model");
+                Logger.getLogger(this.getClass().getName()).log(Level.INFO, "Error loading model");
             }
         } else {
             AssetConfiguration conf = new AssetConfiguration(assetElement);

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/actions/AddToProjectAction.java
Patch:
@@ -71,7 +71,7 @@ public void actionPerformed(ActionEvent ev) {
                         DialogDisplayer.getDefault().notifyLater(msg);
                     }
                 } else {
-                    Logger.getLogger(this.getClass().getName()).log(Level.WARNING, "Error loading model");
+                    Logger.getLogger(this.getClass().getName()).log(Level.INFO, "Error loading model");
                 }
             } else {
                 AssetConfiguration conf = new AssetConfiguration(assetElement);

File: sdk/jme3-core/src/com/jme3/gde/core/appstates/AppStateExplorerTopComponent.java
Patch:
@@ -59,7 +59,7 @@
     preferredID = "AppStateExplorerTopComponent",
 //iconBase="SET/PATH/TO/ICON/HERE", 
 persistenceType = TopComponent.PERSISTENCE_ALWAYS)
-@TopComponent.Registration(mode = "explorer", openAtStartup = true)
+@TopComponent.Registration(mode = "explorer", openAtStartup = true, position = 400)
 @ActionID(category = "Window", id = "com.jme3.gde.core.appstates.AppStateExplorerTopComponent")
 @ActionReference(path = "Menu/Window" /*, position = 333 */)
 @TopComponent.OpenActionRegistration(

File: sdk/jme3-ogrexml/src/com/jme3/gde/ogrexml/OgreSceneDataObject.java
Patch:
@@ -45,8 +45,7 @@
 @MIMEResolver.NamespaceRegistration(
         displayName = "OgreXML Scene",
         mimeType = "text/ogrescene+xml",
-        elementNS = {"scene"},
-        acceptedExtension = { "scene", "xml" },
+        elementName = "scene",
         checkedExtension = { "scene", "xml" }
 )
 @DataObject.Registration(displayName = "OgreXML Scene", mimeType = "text/ogrescene+xml", iconBase = "com/jme3/gde/ogrexml/ogre-scene.png")

File: sdk/jme3-ogrexml/src/com/jme3/gde/ogrexml/OgreXMLDataObject.java
Patch:
@@ -54,8 +54,7 @@
 @MIMEResolver.NamespaceRegistration(
         displayName = "OgreXML File",
         mimeType = "text/ogrexml+xml",
-        elementNS = {"mesh"},
-        acceptedExtension = { "xml", "meshxml" },
+        elementName = "mesh",
         checkedExtension = {"xml", "meshxml"}
 )
 @DataObject.Registration(displayName = "OgreXML File", mimeType = "text/ogrexml+xml", iconBase = "com/jme3/gde/ogrexml/ogre-logo.png")

File: sdk/jme3-ogrexml/src/com/jme3/gde/ogrexml/OgreXMLSkeletonDataObject.java
Patch:
@@ -42,8 +42,8 @@
 @MIMEResolver.NamespaceRegistration(
         displayName = "OgreXML Skeleton",
         mimeType = "text/ogrexmlskeleton+xml",
-        elementNS = {"skeleton"},
-        acceptedExtension = {"xml", "skeleton"}
+        elementName = "skeleton",
+        checkedExtension = {"xml", "skeleton"}
 )
 @DataObject.Registration(displayName = "OgreXML Skeleton", mimeType = "text/ogrexmlskeleton+xml", iconBase = "com/jme3/gde/ogrexml/ogre-logo.png")
 public class OgreXMLSkeletonDataObject extends SpatialAssetDataObject {

File: sdk/jme3-core/src/com/jme3/gde/core/scene/OffScenePanel.java
Patch:
@@ -219,7 +219,7 @@ public void postQueue(RenderQueue rq) {
 
     public void postFrame(FrameBuffer fb) {
 //        cpuBuf.clear();
-        SceneApplication.getApplication().getRenderer().readFrameBuffer(offBuffer, cpuBuf);
+        SceneApplication.getApplication().getRenderer().readFrameBufferWithFormat(offBuffer, cpuBuf,Format.BGRA8);
 //
 //        // copy native memory to java memory
 //        cpuBuf.clear();

File: sdk/jme3-core/src/com/jme3/gde/core/scene/ScenePreviewProcessor.java
Patch:
@@ -169,7 +169,7 @@ public void postQueue(RenderQueue rq) {
     public void postFrame(FrameBuffer fb) {
         if (currentPreviewRequest != null) {
             cpuBuf.clear();
-            SceneApplication.getApplication().getRenderer().readFrameBuffer(offBuffer, cpuBuf);
+            SceneApplication.getApplication().getRenderer().readFrameBufferWithFormat(offBuffer, cpuBuf, Format.BGRA8);
 
             // copy native memory to java memory
             cpuBuf.clear();

File: sdk/jme3-materialeditor/src/com/jme3/gde/shadernodedefinition/wizard/SNDefWizardIterator.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.Set;
 import javax.swing.JComponent;
 import javax.swing.event.ChangeListener;
-import javax.xml.transform.Templates;
 import org.netbeans.api.project.Project;
 import org.netbeans.api.project.ProjectUtils;
 import org.netbeans.api.project.SourceGroup;

File: jme3-examples/src/main/java/jme3test/texture/TestTextureArrayCompressed.java
Patch:
@@ -80,7 +80,7 @@ public void simpleInitApp()
     */
    public static void main(String[] args)
    {
-       TestTextureArray app = new TestTextureArray();
+       TestTextureArrayCompressed app = new TestTextureArrayCompressed();
        app.start();
    }
 

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -301,7 +301,7 @@ public void postFrame(FrameBuffer out) {
 
         FrameBuffer sceneBuffer = renderFrameBuffer;
         if (renderFrameBufferMS != null && !renderer.getCaps().contains(Caps.OpenGL31)) {
-            renderer.copyFrameBuffer(renderFrameBufferMS, renderFrameBuffer);
+            renderer.copyFrameBuffer(renderFrameBufferMS, renderFrameBuffer, true);
         } else if (renderFrameBufferMS != null) {
             sceneBuffer = renderFrameBufferMS;
         }

File: jme3-core/src/main/java/com/jme3/post/HDRRenderer.java
Patch:
@@ -352,7 +352,7 @@ public void postFrame(FrameBuffer out) {
 //            renderManager.renderViewPortRaw(viewPort);
 
             // render back to non-multisampled FB
-            renderer.copyFrameBuffer(msFB, mainSceneFB);
+            renderer.copyFrameBuffer(msFB, mainSceneFB, true);
         }else{
 //            renderer.setFrameBuffer(mainSceneFB);
 //            renderer.clearBuffers(true,true,false);

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GL2.java
Patch:
@@ -62,6 +62,8 @@ public interface GL2 extends GL {
     public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
     public static final int GL_READ_BUFFER = 0xC02;
     public static final int GL_RGB8 = 0x8051;
+    public static final int GL_STACK_OVERFLOW = 0x503;
+    public static final int GL_STACK_UNDERFLOW = 0x504;
     public static final int GL_TEXTURE_3D = 0x806F;
     public static final int GL_POINT_SPRITE = 0x8861;
     public static final int GL_TEXTURE_COMPARE_FUNC = 0x884D;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLExt.java
Patch:
@@ -43,7 +43,6 @@
  */
 public interface GLExt extends GLFbo {
 
-        public static final int GL_ETC1_RGB8_OES = 0x8D64;
 	public static final int GL_COMPRESSED_RGB8_ETC2 = 0x9274;
 	public static final int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
 	public static final int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
@@ -56,6 +55,7 @@ public interface GLExt extends GLFbo {
         public static final int GL_DEPTH_COMPONENT32F = 0x8CAC;
 	public static final int GL_DEPTH24_STENCIL8_EXT = 0x88F0;
 	public static final int GL_DEPTH_STENCIL_EXT = 0x84F9;
+        public static final int GL_ETC1_RGB8_OES = 0x8D64;
 	public static final int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
 	public static final int GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
 	public static final int GL_HALF_FLOAT_ARB = 0x140B;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLFbo.java
Patch:
@@ -60,6 +60,7 @@ public interface GLFbo {
     public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
     public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
     public static final int GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
+    public static final int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x506;
     public static final int GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
     public static final int GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
     public static final int GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;

File: jme3-core/src/main/java/com/jme3/renderer/opengl/GLImageFormats.java
Patch:
@@ -126,6 +126,7 @@ public static GLImageFormat[][] getFormatsForCaps(EnumSet<Caps> caps) {
             format(formatToGL, Format.RGB8,             GLExt.GL_RGBA8, GL.GL_RGB,             GL.GL_UNSIGNED_BYTE);
             format(formatToGL, Format.RGBA8,            GLExt.GL_RGBA8, GL.GL_RGBA,            GL.GL_UNSIGNED_BYTE);
         } else {
+            // Actually, the internal format isn't used for OpenGL ES 2! This is the same as the above..
             format(formatToGL, Format.Alpha8,           GL.GL_RGBA4,   GL.GL_ALPHA,           GL.GL_UNSIGNED_BYTE);
             format(formatToGL, Format.Luminance8,       GL.GL_RGB565,  GL.GL_LUMINANCE,       GL.GL_UNSIGNED_BYTE);
             format(formatToGL, Format.Luminance8Alpha8, GL.GL_RGBA4,   GL.GL_LUMINANCE_ALPHA, GL.GL_UNSIGNED_BYTE);

File: jme3-core/src/main/java/com/jme3/system/NullRenderer.java
Patch:
@@ -80,7 +80,7 @@ public void applyRenderState(RenderState state) {
     public void setDepthRange(float start, float end) {
     }
 
-    public void onFrame() {
+    public void postFrame() {
     }
 
     public void setWorldMatrix(Matrix4f worldMatrix) {

File: jme3-ios/src/main/java/com/jme3/renderer/ios/IGLESShaderRenderer.java
Patch:
@@ -335,7 +335,7 @@ public void setDepthRange(float start, float end) {
     /**
      * Called when a new frame has been rendered.
      */
-    public void onFrame() {
+    public void postFrame() {
         logger.log(Level.FINE, "IGLESShaderRenderer onFrame");
         //JmeIosGLES.checkGLErrorForced();
         JmeIosGLES.checkGLError();

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglCanvas.java
Patch:
@@ -125,7 +125,7 @@ public void display(GLAutoDrawable glad) {
         }
 
         listener.update();
-        renderer.onFrame();
+        renderer.postFrame();
 
     }
 

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglDisplay.java
Patch:
@@ -351,6 +351,6 @@ public void display(GLAutoDrawable drawable) {
         }
 
         listener.update();
-        renderer.onFrame();
+        renderer.postFrame();
     }
 }

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglNewtCanvas.java
Patch:
@@ -145,7 +145,7 @@ public void display(GLAutoDrawable glad) {
         }
             
         listener.update();
-        renderer.onFrame();
+        renderer.postFrame();
 
     }
 

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglNewtDisplay.java
Patch:
@@ -239,7 +239,7 @@ public void display(GLAutoDrawable drawable) {
         }
 
         listener.update();
-        renderer.onFrame();
+        renderer.postFrame();
     }
 }
 

File: jme3-jogl/src/main/java/com/jme3/system/jogl/JoglOffscreenBuffer.java
Patch:
@@ -101,7 +101,7 @@ protected void runLoop(){
         listener.update();
         checkGLError();
 
-        renderer.onFrame();
+        renderer.postFrame();
 
         int frameRate = settings.getFrameRate();
         if (frameRate >= 1) {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/TextureUtil.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import static org.lwjgl.opengl.ARBDepthBufferFloat.*;
-import org.lwjgl.opengl.ARBES3Compatibility;
+import static org.lwjgl.opengl.ARBES3Compatibility.*;
 import static org.lwjgl.opengl.ARBHalfFloatPixel.*;
 import static org.lwjgl.opengl.ARBTextureFloat.*;
 import static org.lwjgl.opengl.ARBTextureMultisample.*;
@@ -139,7 +139,7 @@ private static void setFormat(Format format, int glInternalFormat, int glFormat,
         // ETC1 support on regular OpenGL requires ES3 compatibility extension.
         // NOTE: ETC2 is backwards compatible with ETC1, so we can 
         // upload ETC1 textures as ETC2.
-        setFormat(Format.ETC1, ARBES3Compatibility.GL_COMPRESSED_RGB8_ETC2, GL_RGB, GL_UNSIGNED_BYTE, true);
+        setFormat(Format.ETC1, GL_COMPRESSED_RGB8_ETC2, GL_RGB, GL_UNSIGNED_BYTE, true);
     }
     
     //sRGB formats        

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglAbstractDisplay.java
Patch:
@@ -184,7 +184,7 @@ protected void runLoop(){
 
         // Subclasses just call GLObjectManager clean up objects here
         // it is safe .. for now.
-        renderer.onFrame();
+        renderer.postFrame();
     }
 
     /**

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglOffscreenBuffer.java
Patch:
@@ -125,7 +125,7 @@ protected void runLoop(){
         listener.update();
         checkGLError();
 
-        renderer.onFrame();
+        renderer.postFrame();
 
         int frameRate = settings.getFrameRate();
         if (frameRate >= 1) {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/editor/MatPanel.java
Patch:
@@ -4,7 +4,6 @@
  */
 package com.jme3.gde.materialdefinition.editor;
 
-import com.jme3.gde.core.assets.ProjectAssetManager;
 import com.jme3.gde.materials.MaterialPreviewRenderer;
 import com.jme3.material.Material;
 import java.awt.Component;

File: jme3-desktop/src/main/java/com/jme3/system/NativeLibraryLoader.java
Patch:
@@ -144,8 +144,8 @@ public static void registerNativeLibrary(String name, Platform platform,
         registerNativeLibrary("bulletjme", Platform.Windows64, "native/windows/x86_64/bulletjme.dll");
         registerNativeLibrary("bulletjme", Platform.Linux32,   "native/linux/x86/libbulletjme.so");
         registerNativeLibrary("bulletjme", Platform.Linux64,   "native/linux/x86_64/libbulletjme.so");
-        registerNativeLibrary("bulletjme", Platform.MacOSX32,  "native/macosx/x86/libbulletjme.dylib");
-        registerNativeLibrary("bulletjme", Platform.MacOSX64,  "native/macosx/x86_64/libbulletjme.dylib");
+        registerNativeLibrary("bulletjme", Platform.MacOSX32,  "native/osx/x86/libbulletjme.dylib");
+        registerNativeLibrary("bulletjme", Platform.MacOSX64,  "native/osx/x86_64/libbulletjme.dylib");
         
         // JInput
         registerNativeLibrary("jinput", Platform.Windows32, "native/windows/jinput-raw.dll");

File: jme3-desktop/src/main/java/com/jme3/system/NativeLibraryLoader.java
Patch:
@@ -144,8 +144,8 @@ public static void registerNativeLibrary(String name, Platform platform,
         registerNativeLibrary("bulletjme", Platform.Windows64, "native/windows/x86_64/bulletjme.dll");
         registerNativeLibrary("bulletjme", Platform.Linux32,   "native/linux/x86/libbulletjme.so");
         registerNativeLibrary("bulletjme", Platform.Linux64,   "native/linux/x86_64/libbulletjme.so");
-        registerNativeLibrary("bulletjme", Platform.MacOSX32,  "native/macosx/x86/libbulletjme.jnilib");
-        registerNativeLibrary("bulletjme", Platform.MacOSX64,  "native/macosx/x86_64/libbulletjme.jnilib");
+        registerNativeLibrary("bulletjme", Platform.MacOSX32,  "native/macosx/x86/libbulletjme.dylib");
+        registerNativeLibrary("bulletjme", Platform.MacOSX64,  "native/macosx/x86_64/libbulletjme.dylib");
         
         // JInput
         registerNativeLibrary("jinput", Platform.Windows32, "native/windows/jinput-raw.dll");
@@ -250,7 +250,7 @@ private static int computeNativesHash() {
         URLConnection conn = null;
         try {
             String classpath = System.getProperty("java.class.path");
-            URL url = Thread.currentThread().getContextClassLoader().getResource("com/jme3/system/Natives.class");
+            URL url = Thread.currentThread().getContextClassLoader().getResource("com/jme3/system/NativeLibraryLoder.class");
 
             StringBuilder sb = new StringBuilder(url.toString());
             if (sb.indexOf("jar:") == 0) {

File: jme3-android/src/main/java/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -42,6 +42,7 @@
 import com.jme3.system.JmeSystem;
 import com.jme3.system.Timer;
 import com.jme3.texture.FrameBuffer;
+import com.jme3.texture.Image;
 import com.jme3.util.AndroidScreenshots;
 import com.jme3.util.BufferUtils;
 import java.io.File;
@@ -234,7 +235,7 @@ public void addImage(Renderer renderer, FrameBuffer out) {
                 final WorkItem item = freeItems.take();
                 usedItems.add(item);
                 item.buffer.clear();
-                renderer.readFrameBuffer(out, item.buffer);
+                renderer.readFrameBufferWithFormat(out, item.buffer, Image.Format.BGRA8);
                 executor.submit(new Callable<Void>() {
 
                     public Void call() throws Exception {

File: jme3-core/src/main/java/com/jme3/app/state/ScreenshotAppState.java
Patch:
@@ -44,6 +44,7 @@
 import com.jme3.renderer.queue.RenderQueue;
 import com.jme3.system.JmeSystem;
 import com.jme3.texture.FrameBuffer;
+import com.jme3.texture.Image;
 import com.jme3.util.BufferUtils;
 import java.io.File;
 import java.io.FileOutputStream;
@@ -229,7 +230,7 @@ public void postFrame(FrameBuffer out) {
             int viewHeight = (int) ((curCamera.getViewPortTop() - curCamera.getViewPortBottom()) * curCamera.getHeight());
 
             renderer.setViewPort(0, 0, width, height);
-            renderer.readFrameBuffer(out, outBuf);
+            renderer.readFrameBufferWithFormat(out, outBuf, Image.Format.BGRA8);
             renderer.setViewPort(viewX, viewY, viewWidth, viewHeight);
 
             File file;

File: jme3-desktop/src/main/java/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -40,6 +40,7 @@
 import com.jme3.renderer.queue.RenderQueue;
 import com.jme3.system.Timer;
 import com.jme3.texture.FrameBuffer;
+import com.jme3.texture.Image;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.Screenshots;
 import java.awt.image.BufferedImage;
@@ -228,7 +229,7 @@ public void addImage(Renderer renderer, FrameBuffer out) {
                 final WorkItem item = freeItems.take();
                 usedItems.add(item);
                 item.buffer.clear();
-                renderer.readFrameBuffer(out, item.buffer);
+                renderer.readFrameBufferWithFormat(out, item.buffer, Image.Format.BGRA8);
                 executor.submit(new Callable<Void>() {
 
                     public Void call() throws Exception {

File: jme3-desktop/src/main/java/com/jme3/system/awt/AwtPanel.java
Patch:
@@ -155,7 +155,7 @@ public boolean checkVisibilityState(){
     public void repaintInThread(){
         // Convert screenshot.
         byteBuf.clear();
-        rm.getRenderer().readFrameBuffer(fb, byteBuf);
+        rm.getRenderer().readFrameBufferWithFormat(fb, byteBuf,Format.BGRA8);
         
         synchronized (lock){
             // All operations on img must be synchronized
@@ -168,7 +168,7 @@ public void repaintInThread(){
     public void drawFrameInThread(){
         // Convert screenshot.
         byteBuf.clear();
-        rm.getRenderer().readFrameBuffer(fb, byteBuf);
+        rm.getRenderer().readFrameBufferWithFormat(fb, byteBuf,Format.BGRA8);
         Screenshots.convertScreenShot2(intBuf, img);
         
         synchronized (lock){

File: jme3-examples/src/main/java/jme3test/post/TestRenderToMemory.java
Patch:
@@ -48,6 +48,7 @@
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeContext.Type;
 import com.jme3.texture.FrameBuffer;
+import com.jme3.texture.Image;
 import com.jme3.texture.Image.Format;
 import com.jme3.texture.Texture2D;
 import com.jme3.util.BufferUtils;
@@ -158,7 +159,7 @@ public void windowClosed(WindowEvent e){
 
     public void updateImageContents(){
         cpuBuf.clear();
-        renderer.readFrameBuffer(offBuffer, cpuBuf);
+        renderer.readFrameBufferWithFormat(offBuffer, cpuBuf, Image.Format.BGRA8);
 
         synchronized (image) {
             Screenshots.convertScreenShot(cpuBuf, image);    

File: jme3-examples/src/main/java/jme3test/post/TestRenderToCubemap.java
Patch:
@@ -97,7 +97,7 @@ public Texture setupOffscreenView(){
         offView.setOutputFrameBuffer(offBuffer);
  
         // setup framebuffer's scene
-        Box boxMesh = new Box(Vector3f.ZERO, 1,1,1);
+        Box boxMesh = new Box( 1,1,1);
         Material material = assetManager.loadMaterial("Interface/Logo/Logo.j3m");
         offBox = new Geometry("box", boxMesh);
         offBox.setMaterial(material);

File: jme3-core/src/main/java/com/jme3/scene/Node.java
Patch:
@@ -199,15 +199,15 @@ private void addUpdateChildren( SafeArrayList<Spatial> results ) {
     }
 
     /**
-     *  Called to invalide the root node's update list.  This is
+     *  Called to invalidate the root node's update list.  This is
      *  called whenever a spatial is attached/detached as well as
      *  when a control is added/removed from a Spatial in a way
      *  that would change state.
      */
     void invalidateUpdateList() {
         updateListValid = false;
-        for( Node n = parent; n != null; n = n.getParent() ) {
-            n.invalidateUpdateList();
+        if ( parent != null ) {
+          parent.invalidateUpdateList();
         }
     }
 

File: jme3-core/src/main/java/com/jme3/scene/Node.java
Patch:
@@ -199,15 +199,15 @@ private void addUpdateChildren( SafeArrayList<Spatial> results ) {
     }
 
     /**
-     *  Called to invalide the root node's update list.  This is
+     *  Called to invalidate the root node's update list.  This is
      *  called whenever a spatial is attached/detached as well as
      *  when a control is added/removed from a Spatial in a way
      *  that would change state.
      */
     void invalidateUpdateList() {
         updateListValid = false;
-        for( Node n = parent; n != null; n = n.getParent() ) {
-            n.invalidateUpdateList();
+        if ( parent != null ) {
+          parent.invalidateUpdateList();
         }
     }
 

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/SceneLoader.java
Patch:
@@ -458,7 +458,7 @@ private void loadImage(FBXElement element) {
 			for(FBXElement e : element.children) {
 				if(e.id.equals("Type"))
 					data.type = (String) e.properties.get(0);
-				else if(e.id.equals("Filename"))
+				else if(e.id.equals("FileName"))
 					data.filename = (String) e.properties.get(0);
 				else if(e.id.equals("RelativeFilename"))
 					data.relativeFilename = (String) e.properties.get(0);

File: jme3-plugins/src/fbx/java/com/jme3/scene/plugins/fbx/SceneLoader.java
Patch:
@@ -458,7 +458,7 @@ private void loadImage(FBXElement element) {
 			for(FBXElement e : element.children) {
 				if(e.id.equals("Type"))
 					data.type = (String) e.properties.get(0);
-				else if(e.id.equals("Filename"))
+				else if(e.id.equals("FileName"))
 					data.filename = (String) e.properties.get(0);
 				else if(e.id.equals("RelativeFilename"))
 					data.relativeFilename = (String) e.properties.get(0);

File: jme3-core/src/main/java/com/jme3/texture/image/ImageCodec.java
Patch:
@@ -149,9 +149,9 @@ public ImageCodec(int bpp, int flags, int maxAlpha, int maxRed, int maxGreen, in
                                                             12, 0, 4, 8));
     }
     
-    public abstract void readComponents(ByteBuffer buf, int x, int y, int width, int[] components, byte[] tmp);
+    public abstract void readComponents(ByteBuffer buf, int x, int y, int width, int offset, int[] components, byte[] tmp);
     
-    public abstract void writeComponents(ByteBuffer buf, int x, int y, int width, int[] components, byte[] tmp);
+    public abstract void writeComponents(ByteBuffer buf, int x, int y, int width, int offset, int[] components, byte[] tmp);
     
     /**
      * Looks up the format in the codec registry.

File: jme3-core/src/main/java/com/jme3/font/BitmapText.java
Patch:
@@ -352,7 +352,7 @@ public void setColor(String regexp, ColorRGBA color) {
     public void setTabPosition(float... tabs) {
         block.setTabPosition(tabs);
         letters.invalidate();
-        needRefresh = false;
+        needRefresh = true;
     }
 
     /**
@@ -362,7 +362,7 @@ public void setTabPosition(float... tabs) {
     public void setTabWidth(float width) {
         block.setTabWidth(width);
         letters.invalidate();
-        needRefresh = false;
+        needRefresh = true;
     }
 
     /**
@@ -373,7 +373,7 @@ public void setTabWidth(float width) {
     public void setEllipsisChar(char c) {
         block.setEllipsisChar(c);
         letters.invalidate();
-        needRefresh = false;
+        needRefresh = true;
     }
 
     /**

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionDistLimit.java
Patch:
@@ -34,6 +34,9 @@ public void bake(Space ownerSpace, Space targetSpace, Transform targetTransform,
             // distance limit does not work on bones who are connected to their parent
             return;
         }
+        if(influence == 0 || targetTransform == null) {
+            return ;// no need to do anything
+        }
         
         Transform ownerTransform = this.getOwnerTransform(ownerSpace);
 

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionLocLike.java
Patch:
@@ -49,6 +49,9 @@ public void bake(Space ownerSpace, Space targetSpace, Transform targetTransform,
             // location copy does not work on bones who are connected to their parent
             return;
         }
+        if(influence == 0 || targetTransform == null) {
+            return ;// no need to do anything
+        }
         
         Transform ownerTransform = this.getOwnerTransform(ownerSpace);
         

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionRotLike.java
Patch:
@@ -29,6 +29,9 @@ public ConstraintDefinitionRotLike(Structure constraintData, Long ownerOMA, Blen
 
     @Override
     public void bake(Space ownerSpace, Space targetSpace, Transform targetTransform, float influence) {
+        if(influence == 0 || targetTransform == null) {
+            return ;// no need to do anything
+        }
         Transform ownerTransform = this.getOwnerTransform(ownerSpace);
         
         Quaternion ownerRotation = ownerTransform.getRotation();

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionSizeLike.java
Patch:
@@ -32,6 +32,9 @@ public ConstraintDefinitionSizeLike(Structure constraintData, Long ownerOMA, Ble
     
     @Override
     public void bake(Space ownerSpace, Space targetSpace, Transform targetTransform, float influence) {
+        if(influence == 0 || targetTransform == null) {
+            return;// no need to do anything
+        }
         Transform ownerTransform = this.getOwnerTransform(ownerSpace);
         
         Vector3f ownerScale = ownerTransform.getScale();

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionTransLike.java
Patch:
@@ -35,6 +35,9 @@ public ConstraintDefinitionTransLike(Structure constraintData, Long ownerOMA, Bl
 
     @Override
     public void bake(Space ownerSpace, Space targetSpace, Transform targetTransform, float influence) {
+        if(influence == 0 || targetTransform == null) {
+            return ;// no need to do anything
+        }
         Object target = this.getTarget();// Bone or Node
         Object owner = this.getOwner();// Bone or Node
         if (!target.getClass().equals(owner.getClass())) {

File: jme3-android/src/main/java/com/jme3/system/android/JmeAndroidSystem.java
Patch:
@@ -32,7 +32,7 @@
 public class JmeAndroidSystem extends JmeSystemDelegate {
 
     private static Activity activity;
-    private static String audioRendererType = AppSettings.ANDROID_MEDIAPLAYER;
+    private static String audioRendererType = AppSettings.ANDROID_OPENAL_SOFT;
 
     static {
         try {

File: jme3-android/src/main/java/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -220,7 +220,7 @@ public void initialize() {
         }
 
         // Check shader language version
-        glslVer = extractVersion("OpenGL ES GLSL ES ", GLES20.glGetString(GLES20.GL_SHADING_LANGUAGE_VERSION));
+        glslVer = extractVersion("OpenGL ES GLSL ", GLES20.glGetString(GLES20.GL_SHADING_LANGUAGE_VERSION));
         switch (glslVer) {
             // TODO: When new versions of OpenGL ES shader language come out,
             // update this.

File: jme3-ios/src/main/java/com/jme3/system/ios/JmeIosSystem.java
Patch:
@@ -33,7 +33,6 @@
 
 import com.jme3.asset.AssetManager;
 import com.jme3.audio.AudioRenderer;
-import com.jme3.audio.android.AndroidOpenALSoftAudioRenderer;
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeContext;
 import com.jme3.system.JmeSystemDelegate;
@@ -98,7 +97,7 @@ public JmeContext newContext(AppSettings settings, JmeContext.Type contextType)
 
     @Override
     public AudioRenderer newAudioRenderer(AppSettings settings) {
-        return new AndroidOpenALSoftAudioRenderer();
+        return null;
     }
 
     @Override

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -430,7 +430,7 @@ private void startVertexBuffer(Attributes attribs) throws SAXException {
         int texCoords = parseInt(attribs.getValue("texture_coords"), 0);
         for (int i = 0; i < texCoords; i++) {
             String dimsStr = attribs.getValue("texture_coord_dimensions_" + i);
-            if (dimsStr.startsWith("float")) {
+            if (dimsStr != null && dimsStr.startsWith("float")) {
                 dimsStr = dimsStr.substring("float".length());
             }
             int dims = parseInt(dimsStr, 2);

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -429,7 +429,7 @@ private void startVertexBuffer(Attributes attribs) throws SAXException {
 
         int texCoords = parseInt(attribs.getValue("texture_coords"), 0);
         for (int i = 0; i < texCoords; i++) {
-            int dims = parseInt(attribs.getValue("texture_coord_dimensions_" + i), 2);
+            int dims = parseInt(attribs.getValue("texture_coord_dimensions_" + i).replaceAll("float2", "2"), 2);
             if (dims < 1 || dims > 4) {
                 throw new SAXException("Texture coord dimensions must be 1 <= dims <= 4");
             }

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -429,7 +429,7 @@ private void startVertexBuffer(Attributes attribs) throws SAXException {
 
         int texCoords = parseInt(attribs.getValue("texture_coords"), 0);
         for (int i = 0; i < texCoords; i++) {
-            int dims = parseInt(attribs.getValue("texture_coord_dimensions_" + i), 2);
+            int dims = parseInt(attribs.getValue("texture_coord_dimensions_" + i).replaceAll("float2", "2"), 2);
             if (dims < 1 || dims > 4) {
                 throw new SAXException("Texture coord dimensions must be 1 <= dims <= 4");
             }

File: jme3-core/src/main/java/com/jme3/material/Material.java
Patch:
@@ -1325,9 +1325,9 @@ public void read(JmeImporter im) throws IOException {
                 param.setName(param.getName().substring(2));
             }
             
-            if (def.getMaterialParam(name) == null) {
-                logger.log(Level.WARNING, "The material parameter is not defined: " + 
-                                          name + ". Ignoring..");
+            if (def.getMaterialParam(param.getName()) == null) {
+                logger.log(Level.WARNING, "The material parameter is not defined: {0}. Ignoring..", 
+                                          param.getName());
             } else {
                 checkSetParam(param.getVarType(), param.getName());
                 paramValues.put(param.getName(), param);

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MaterialLoader.java
Patch:
@@ -338,7 +338,7 @@ private Material compileMaterial(){
 //            rs.setDepthWrite(false);
             mat.setTransparent(true);
             if (!noLight){
-                mat.setBoolean("UseAlpha", true);
+                // mat.setBoolean("UseAlpha", true);
             }
         }else{
             if (twoSide){

File: jme3-android/src/main/java/com/jme3/texture/plugins/AndroidNativeImageLoader.java
Patch:
@@ -17,10 +17,10 @@
  */
 public class AndroidNativeImageLoader  implements AssetLoader {
     
-    private final byte[] tmpArray = new byte[1024];
+    private final byte[] tmpArray = new byte[10 * 1024];
     
     static {
-         System.loadLibrary("stbijme");
+         System.loadLibrary("decodejme");
     }
     
     private static native Image load(InputStream in, boolean flipY, byte[] tmpArray) throws IOException;

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/materials/MaterialContext.java
Patch:
@@ -134,13 +134,11 @@ public void applyMaterial(Geometry geometry, Long geometriesOMA, Map<String, Lis
             material.setBoolean("UseMaterialColors", Boolean.TRUE);
 
             // setting the colors
-            material.setBoolean("Minnaert", diffuseShader == DiffuseShader.MINNAERT);
             if (!transparent) {
                 diffuseColor.a = 1;
             }
             material.setColor("Diffuse", diffuseColor);
 
-            material.setBoolean("WardIso", specularShader == SpecularShader.WARDISO);
             material.setColor("Specular", specularColor);
             material.setFloat("Shininess", shininess);
 

File: jme3-core/src/plugins/java/com/jme3/scene/plugins/MTLLoader.java
Patch:
@@ -221,7 +221,7 @@ protected boolean readLine(){
             
         }else if (cmd.equals("d") || cmd.equals("tr")){
             float tempAlpha = scan.nextFloat();
-            if (tempAlpha != 0){
+            if (tempAlpha > 0.0f && tempAlpha < 1.0f){
                 alpha = tempAlpha;
                 transparent = true;
             }

File: jme3-ios/src/main/java/com/jme3/renderer/ios/IGLESShaderRenderer.java
Patch:
@@ -2235,7 +2235,7 @@ private void updateRenderBuffer(FrameBuffer fb, RenderBuffer rb) {
 
     private int convertAttachmentSlot(int attachmentSlot) {
         // can also add support for stencil here
-        if (attachmentSlot == -100) {
+        if (attachmentSlot == FrameBuffer.SLOT_DEPTH) {
             return JmeIosGLES.GL_DEPTH_ATTACHMENT;
         } else if (attachmentSlot == 0) {
             return JmeIosGLES.GL_COLOR_ATTACHMENT0;

File: jme3-android/src/main/java/com/jme3/app/AndroidHarness.java
Patch:
@@ -6,6 +6,7 @@
 import android.content.pm.ActivityInfo;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.NinePatchDrawable;
+import android.opengl.GLSurfaceView;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.*;
@@ -21,7 +22,6 @@
 import com.jme3.input.controls.TouchListener;
 import com.jme3.input.controls.TouchTrigger;
 import com.jme3.input.event.TouchEvent;
-import com.jme3.renderer.android.AndroidGLSurfaceView;
 import com.jme3.system.AppSettings;
 import com.jme3.system.SystemListener;
 import com.jme3.system.android.AndroidConfigChooser.ConfigType;
@@ -195,7 +195,7 @@ public class AndroidHarness extends Activity implements TouchListener, DialogInt
      */
     protected int screenOrientation = ActivityInfo.SCREEN_ORIENTATION_SENSOR;
     protected OGLESContext ctx;
-    protected AndroidGLSurfaceView view = null;
+    protected GLSurfaceView view = null;
     protected boolean isGLThreadPaused = true;
     protected ImageView splashImageView = null;
     protected FrameLayout frameLayout = null;

File: jme3-android/src/main/java/com/jme3/input/android/AndroidInputHandler.java
Patch:
@@ -32,6 +32,7 @@
 
 package com.jme3.input.android;
 
+import android.opengl.GLSurfaceView;
 import android.os.Build;
 import android.view.View;
 import com.jme3.input.RawInputListener;
@@ -41,7 +42,6 @@
 import com.jme3.input.event.MouseButtonEvent;
 import com.jme3.input.event.MouseMotionEvent;
 import com.jme3.input.event.TouchEvent;
-import com.jme3.renderer.android.AndroidGLSurfaceView;
 import com.jme3.system.AppSettings;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.logging.Level;
@@ -67,7 +67,7 @@ public class AndroidInputHandler implements TouchInput {
     
     
     // Internal
-    private AndroidGLSurfaceView view;
+    private GLSurfaceView view;
     private AndroidTouchHandler touchHandler;
     private AndroidKeyHandler keyHandler;
     private AndroidGestureHandler gestureHandler;
@@ -112,7 +112,7 @@ public void setView(View view) {
         if (gestureHandler != null) {
             gestureHandler.setView(view);
         }
-        this.view = (AndroidGLSurfaceView)view;
+        this.view = (GLSurfaceView)view;
     }
     
     public View getView() {

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/LwjglGL1Renderer.java
Patch:
@@ -802,7 +802,7 @@ public void updateTexImageData(Image img, Texture.Type type, int unit) {
         TextureUtil.uploadTexture(img, target, i, 0, tdc);
         }
         } else {*/
-        TextureUtil.uploadTexture(ctxCaps, img, target, 0, 0, false);
+        TextureUtil.uploadTexture(caps, img, target, 0, 0, false);
         //}
 
         img.clearUpdateNeeded();
@@ -853,7 +853,7 @@ public void setTexture(int unit, Texture tex) {
 
     public void modifyTexture(Texture tex, Image pixels, int x, int y) {
       setTexture(0, tex);
-      TextureUtil.uploadSubTexture(ctxCaps, pixels, convertTextureType(tex.getType()), 0, x, y, false);
+      TextureUtil.uploadSubTexture(caps, pixels, convertTextureType(tex.getType()), 0, x, y, false);
     }
 
     private void clearTextureUnits() {

File: jme3-android/src/main/java/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -1283,7 +1283,7 @@ private void updateRenderBuffer(FrameBuffer fb, RenderBuffer rb) {
                     + ":" + fb.getHeight() + " is not supported.");
         }
 
-        AndroidGLImageFormat imageFormat = TextureUtil.getImageFormat(rb.getFormat());
+        AndroidGLImageFormat imageFormat = TextureUtil.getImageFormat(rb.getFormat(), true);
         if (imageFormat.renderBufferStorageFormat == 0) {
             throw new RendererException("The format '" + rb.getFormat() + "' cannot be used for renderbuffers.");
         }

File: jme3-effects/src/main/java/com/jme3/post/filters/FXAAFilter.java
Patch:
@@ -85,7 +85,7 @@ public void setSpanMax(float spanMax) {
     public void setSubPixelShift(float subPixelShift) {
         this.subPixelShift = subPixelShift;
         if (material != null) {
-            material.setFloat("SubPixelShif", this.subPixelShift);
+            material.setFloat("SubPixelShift", this.subPixelShift);
         }
     }
 

File: jme3-core/src/main/java/com/jme3/util/MaterialDebugAppState.java
Patch:
@@ -267,7 +267,7 @@ public GeometryBinding(Trigger trigger, Geometry geom) {
 
         public void reload() {
             Material reloadedMat = reloadMaterial(geom.getMaterial());
-            //if the reload is successful, we re setupt the material with its params and reassign it to the box
+            //if the reload is successful, we re setup the material with its params and reassign it to the box
             if (reloadedMat != null) {
                 // setupMaterial(reloadedMat);
                 geom.setMaterial(reloadedMat);

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/meshes/TemporalMesh.java
Patch:
@@ -406,7 +406,7 @@ protected void prepareFacesGeometry(List<Geometry> result, MeshHelper meshHelper
                     tempNormals[i] = normals.get(vertIndex);
                     tempVertColors[i] = vertexColors != null ? vertexColors.get(face.getIndexes().indexOf(vertIndex)) : null;
 
-                    if (boneIndexes.size() > 0) {
+                    if (boneIndexes.size() > 0 && vertexGroups.size() > 0) {
                         Map<Float, Integer> boneBuffersForVertex = new HashMap<Float, Integer>();
                         Map<String, Float> vertexGroupsForVertex = vertexGroups.get(vertIndex);
                         for (Entry<String, Integer> entry : boneIndexes.entrySet()) {

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/SimulationNode.java
Patch:
@@ -295,7 +295,7 @@ private void simulateSkeleton() {
                             
                             // track contains differences between the frame position and bind positions of bones/spatials
                             Vector3f bonePositionDifference = bone.getLocalPosition().subtract(startTransform.getTranslation());
-                            Quaternion boneRotationDifference = bone.getLocalRotation().mult(startTransform.getRotation().inverse()).normalizeLocal();
+                            Quaternion boneRotationDifference = startTransform.getRotation().inverse().mult(bone.getLocalRotation()).normalizeLocal();
                             Vector3f boneScaleDifference = bone.getLocalScale().divide(startTransform.getScale());
                             
                             trackEntry.getValue().setTransform(frame, new Transform(bonePositionDifference, boneRotationDifference, boneScaleDifference));

File: jme3-core/src/main/java/com/jme3/cinematic/events/MotionEvent.java
Patch:
@@ -171,10 +171,10 @@ public void update(float tpf) {
     public void internalUpdate(float tpf) {
         if (playState == PlayState.Playing) {
             time = time + (tpf * speed);
-            if (loopMode == loopMode.Loop && time < 0) {
+            if (loopMode == LoopMode.Loop && time < 0) {
                 time = initialDuration;
             }            
-            if ((time >= initialDuration || time < 0) && loopMode == loopMode.DontLoop) {
+            if ((time >= initialDuration || time < 0) && loopMode == LoopMode.DontLoop) {
                 if (time >= initialDuration) {
                     path.triggerWayPointReach(path.getNbWayPoints() - 1, this);
                 }

File: jme3-core/src/main/java/com/jme3/math/Spline.java
Patch:
@@ -316,7 +316,7 @@ public float getCurveTension() {
      */
     public void setCurveTension(float curveTension) {
         this.curveTension = curveTension;
-        if(type==SplineType.CatmullRom) {
+        if(type==SplineType.CatmullRom && !getControlPoints().isEmpty()) {            
         	this.computeTotalLentgh();
         }
     }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/meshes/Face.java
Patch:
@@ -180,7 +180,7 @@ private List<Face> detachTriangle(Integer[] triangleIndexes) throws BlenderFileE
                 }
                 if (detachedFaces.size() == 0 && path.size() < indexes.size()) {
                     Integer[] indexesSublist = path.toArray(new Integer[path.size()]);
-                    detachedFaces.add(new Face(indexesSublist, smooth, materialNumber, meshHelper.selectUVSubset(this, indexesSublist), vertexColors, temporalMesh));
+                    detachedFaces.add(new Face(indexesSublist, smooth, materialNumber, meshHelper.selectUVSubset(this, indexesSublist), meshHelper.selectVertexColorSubset(this, indexesSublist), temporalMesh));
                     for (int j = 0; j < path.size() - 1; ++j) {
                         indexes.removeEdge(path.get(j), path.get(j + 1));
                     }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/meshes/TemporalMesh.java
Patch:
@@ -402,7 +402,7 @@ protected void prepareFacesGeometry(List<Geometry> result, MeshHelper meshHelper
                     int vertIndex = indexes.get(i);
                     tempVerts[i] = vertices.get(vertIndex);
                     tempNormals[i] = normals.get(vertIndex);
-                    tempVertColors[i] = vertexColors != null ? vertexColors.get(i) : null;
+                    tempVertColors[i] = vertexColors != null ? vertexColors.get(face.getIndexes().indexOf(vertIndex)) : null;
 
                     if (boneIndexes.size() > 0) {
                         Map<Float, Integer> boneBuffersForVertex = new HashMap<Float, Integer>();

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/meshes/Edge.java
Patch:
@@ -18,7 +18,7 @@
  * 
  * @author Marcin Roguski (Kaelthas)
  */
-/* package */class Edge extends Line {
+public class Edge extends Line {
     private static final long   serialVersionUID = 7172714692126675311L;
 
     private static final Logger LOGGER           = Logger.getLogger(Edge.class.getName());

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/meshes/Point.java
Patch:
@@ -17,7 +17,7 @@
  * 
  * @author Marcin Roguski (Kaelthas)
  */
-/* package */class Point {
+public class Point {
     private static final Logger LOGGER = Logger.getLogger(Point.class.getName());
 
     /** The point's index. */

File: jme3-bullet/src/main/java/com/jme3/bullet/collision/PhysicsCollisionEvent.java
Patch:
@@ -229,7 +229,7 @@ public Vector3f getPositionWorldOnA() {
     }
 
     public Vector3f getPositionWorldOnA(Vector3f positionWorldOnA) {
-        getPositionWorldOnA(positionWorldOnA);
+        getPositionWorldOnA(manifoldPointObjectId, positionWorldOnA);
         return positionWorldOnA;
     }
     private native void getPositionWorldOnA(long manifoldPointObjectId, Vector3f positionWorldOnA);

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -683,7 +683,7 @@ public Collection<PhysicsVehicle> getVehicleList() {
      * @param gravity
      */
     public void setGravity(Vector3f gravity) {
-        gravity.set(gravity);
+        this.gravity.set(gravity);
         setGravity(physicsSpaceId, gravity);
     }
 

File: jme3-examples/src/main/java/jme3test/scene/instancing/TestInstanceNode.java
Patch:
@@ -166,8 +166,8 @@ public void simpleUpdate(float tpf) {
         
         for (Spatial child : instancedNode.getChildren()) {
             if (!(child instanceof InstancedGeometry)) {
-                float val = child.getUserData("height");
-                float dir = child.getUserData("dir");
+                float val = ((Float)child.getUserData("height")).floatValue();
+                float dir = ((Float)child.getUserData("dir")).floatValue();
 
                 val += (dir + ((FastMath.nextRandomFloat() * 0.5f) - 0.25f)) * tpf;
 

File: jme3-effects/src/main/java/com/jme3/water/WaterFilter.java
Patch:
@@ -71,7 +71,6 @@ public class WaterFilter extends Filter {
     private Texture2D foamTexture;
     private Texture2D causticsTexture;
     private Texture2D heightTexture;
-    private Plane plane;
     private Camera reflectionCam;
     protected Ray ray = new Ray();
     private Vector3f targetLocation = new Vector3f();
@@ -90,6 +89,7 @@ public class WaterFilter extends Filter {
     private Vector3f lightDirection = new Vector3f(0, -1, 0);
     private ColorRGBA lightColor = ColorRGBA.White;
     private float waterHeight = 0.0f;
+    private Plane plane = new Plane(Vector3f.UNIT_Y, waterHeight);
     private ColorRGBA waterColor = new ColorRGBA(0.0078f, 0.3176f, 0.5f, 1.0f);
     private ColorRGBA deepWaterColor = new ColorRGBA(0.0039f, 0.00196f, 0.145f, 1.0f);
     private Vector3f colorExtinction = new Vector3f(5.0f, 20.0f, 30.0f);

File: jme3-core/src/main/java/com/jme3/util/ListSort.java
Patch:
@@ -850,7 +850,8 @@ private void mergeHigh(int idxA, int lenA, int idxB, int lenB) {
             // The first element of run B belongs at the front of the merge. 
             arr[dest] = tempArray[iterB];  
         } else if (lengthB == 0) {
-              throw new UnsupportedOperationException("Inconsistant comparison function");
+              throw new UnsupportedOperationException("Compare function result changed! " +
+                                                      "Make sure you do not modify the scene from another thread!");
         } else {//Fail label                        
             System.arraycopy(tempArray, 0, arr, dest - (lengthB - 1), lengthB);
         }

File: jme3-core/src/main/java/com/jme3/util/ListSort.java
Patch:
@@ -699,7 +699,8 @@ private void mergeLow(int idxA, int lenA, int idxB, int lenB) {
             // The last element of run A belongs at the end of the merge.
             arr[dest + lengthB] = tempArray[iterA];
         } else if(lengthA== 0){
-            throw new UnsupportedOperationException("Inconsistant comparison function");
+            throw new UnsupportedOperationException("Compare function result changed! " +
+                                                    "Make sure you do not modify the scene from another thread!");
         } else {//Fail label
             System.arraycopy(tempArray, iterA, arr, dest, lengthA);
         }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/constraints/Constraint.java
Patch:
@@ -123,7 +123,7 @@ public Set<Long> getAlteredOmas() {
      */
     public void apply(int frame) {
         Transform targetTransform = targetOMA != null ? constraintHelper.getTransform(targetOMA, subtargetName, targetSpace) : null;
-        constraintDefinition.bake(ownerSpace, targetSpace, targetTransform, ipo.calculateValue(frame));
+        constraintDefinition.bake(ownerSpace, targetSpace, targetTransform, (float)ipo.calculateValue(frame));
     }
 
     @Override

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/curves/CurvesHelper.java
Patch:
@@ -289,7 +289,7 @@ protected List<Geometry> loadBezierCurve(Vector3f loc, Structure nurb, List<Geom
                 int triplesCount = controlPoints.size() / 3;
                 List<Vector3f> taperControlPoints = new ArrayList<Vector3f>(triplesCount);
                 for (int i = 0; i < triplesCount; ++i) {
-                    taperControlPoints.add(new Vector3f(controlPoints.get(i * 3 + 1).x, bezierCurve.getRadius(i), 0));
+                    taperControlPoints.add(new Vector3f(controlPoints.get(i * 3 + 1).x, (float)bezierCurve.getRadius(i), 0));
                 }
                 taperObject = new Spline(SplineType.Linear, taperControlPoints, 0, false);
             }

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/NiftyPreviewPanel.java
Patch:
@@ -8,7 +8,7 @@
 import com.jme3.gde.core.assets.ProjectAssetManager;
 import com.jme3.gde.core.scene.OffScenePanel;
 import com.jme3.gde.core.scene.SceneApplication;
-import com.jme3.gde.gui.NiftyGuiDataObject;
+import com.jme3.gde.gui.OldNiftyGuiDataObject;
 import com.jme3.renderer.ViewPort;
 import de.lessvoid.nifty.Nifty;
 import java.awt.Dimension;
@@ -50,7 +50,7 @@
  */
 public class NiftyPreviewPanel extends PanelView implements ErrorHandler {
 
-    private NiftyGuiDataObject niftyObject;
+    private OldNiftyGuiDataObject niftyObject;
     private OffScenePanel offPanel;
     private Nifty nifty;
     private Document doc;
@@ -62,7 +62,7 @@ public class NiftyPreviewPanel extends PanelView implements ErrorHandler {
     private int width = 640, height = 480;
     private ErrorPanel errors;
 
-    public NiftyPreviewPanel(NiftyGuiDataObject niftyObject, ToolBarDesignEditor comp) {
+    public NiftyPreviewPanel(OldNiftyGuiDataObject niftyObject, ToolBarDesignEditor comp) {
         super();
         setRoot(Node.EMPTY);
         this.niftyObject = niftyObject;

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/PreviewToolbarElement.java
Patch:
@@ -5,7 +5,7 @@
 
 package com.jme3.gde.gui.multiview;
 
-import com.jme3.gde.gui.NiftyGuiDataObject;
+import com.jme3.gde.gui.OldNiftyGuiDataObject;
 import org.netbeans.modules.xml.multiview.ToolBarMultiViewElement;
 import org.netbeans.modules.xml.multiview.ui.SectionView;
 import org.netbeans.modules.xml.multiview.ui.ToolBarDesignEditor;
@@ -20,7 +20,7 @@ public class PreviewToolbarElement extends ToolBarMultiViewElement {
     private ToolBarDesignEditor comp;
     private NiftyPreviewPanel viewPanel;
 
-    public PreviewToolbarElement(NiftyGuiDataObject dObj) {
+    public PreviewToolbarElement(OldNiftyGuiDataObject dObj) {
         super(dObj);
 //        this.dObj = dObj;
         comp = new ToolBarDesignEditor();

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/PreviewView.java
Patch:
@@ -4,7 +4,7 @@
  */
 package com.jme3.gde.gui.multiview;
 
-import com.jme3.gde.gui.NiftyGuiDataObject;
+import com.jme3.gde.gui.OldNiftyGuiDataObject;
 import org.netbeans.modules.xml.multiview.DesignMultiViewDesc;
 
 /**
@@ -15,13 +15,13 @@ public class PreviewView extends DesignMultiViewDesc {
 
     private int type;
 
-    public PreviewView(NiftyGuiDataObject dObj, int type) {
+    public PreviewView(OldNiftyGuiDataObject dObj, int type) {
         super(dObj, "Design");
         this.type = type;
     }
 
     public org.netbeans.core.spi.multiview.MultiViewElement createElement() {
-        NiftyGuiDataObject dObj = (NiftyGuiDataObject) getDataObject();
+        OldNiftyGuiDataObject dObj = (OldNiftyGuiDataObject) getDataObject();
         return new PreviewToolbarElement(dObj);
     }
 

File: jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -415,6 +415,7 @@ public void addCollisionObject(PhysicsCollisionObject obj) {
 
     /**
      * removes an object from the physics space
+     *
      * @param obj the PhysicsControl or Spatial with PhysicsControl to remove
      */
     public void remove(Object obj) {

File: jme3-core/src/main/java/com/jme3/animation/SkeletonControl.java
Patch:
@@ -671,7 +671,7 @@ private void applySkinningTangents(Mesh mesh, Matrix4f[] offsetMatrices, VertexB
 
                 for (int w = maxWeightsPerVert - 1; w >= 0; w--) {
                     float weight = weights[idxWeights];
-                    Matrix4f mat = offsetMatrices[indices[idxWeights++]];
+                    Matrix4f mat = offsetMatrices[indices[idxWeights++] & 0xff];
 
                     rx += (mat.m00 * vtx + mat.m01 * vty + mat.m02 * vtz + mat.m03) * weight;
                     ry += (mat.m10 * vtx + mat.m11 * vty + mat.m12 * vtz + mat.m13) * weight;

File: jme3-core/src/main/java/com/jme3/bounding/BoundingVolume.java
Patch:
@@ -121,7 +121,7 @@ public final BoundingVolume transform(Transform trans) {
      * @param trans
      *            the transform to affect the bound.
      * @param store
-     *            sphere to store result in
+     *            bounding volume to store result in
      * @return the new bounding volume.
      */
     public abstract BoundingVolume transform(Transform trans, BoundingVolume store);

File: jme3-effects/src/main/java/com/jme3/water/WaterUtils.java
Patch:
@@ -34,15 +34,15 @@ public static void updateReflectionCam(Camera reflectionCam, Plane plane, Camera
                 sceneCam.getFrustumBottom());
         reflectionCam.setParallelProjection(sceneCam.isParallelProjection());
 
-        sceneTarget.set(sceneCam.getLocation()).addLocal(sceneCam.getDirection());
+        sceneTarget.set(sceneCam.getLocation()).addLocal(sceneCam.getDirection(vars.vect6));
         reflectDirection = plane.reflect(sceneTarget, reflectDirection);
         reflectDirection.subtractLocal(camLoc);
 
-        sceneTarget.set(sceneCam.getLocation()).subtractLocal(sceneCam.getUp());
+        sceneTarget.set(sceneCam.getLocation()).subtractLocal(sceneCam.getUp(vars.vect6));
         reflectUp = plane.reflect(sceneTarget, reflectUp);
         reflectUp.subtractLocal(camLoc);
 
-        sceneTarget.set(sceneCam.getLocation()).addLocal(sceneCam.getLeft());
+        sceneTarget.set(sceneCam.getLocation()).addLocal(sceneCam.getLeft(vars.vect6));
         reflectLeft = plane.reflect(sceneTarget, reflectLeft);
         reflectLeft.subtractLocal(camLoc);
 

File: jme3-core/src/main/java/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -888,7 +888,7 @@ private int collideWithTri(Triangle tri, CollisionResults results) {
     
             t = -edge.dot(base) / edge.dot(edge);
             if( t >= 0 && t <= 1 ) {
-                Vector3f Q = base.add(edge.mult(t, tvars.vect7), tvars.vect8);
+                Vector3f Q = base.add(edge.mult(t, tvars.vect7), tvars.vect9);
                 float distSq = Q.dot(Q); // distance squared to origin
                 if( distSq < nearestDist ) {
                     nearestPt = Q;
@@ -903,7 +903,7 @@ private int collideWithTri(Triangle tri, CollisionResults results) {
     
             t = -edge.dot(base) / edge.dot(edge);
             if( t >= 0 && t <= 1 ) {
-                Vector3f Q = base.add(edge.mult(t, tvars.vect7), tvars.vect8);
+                Vector3f Q = base.add(edge.mult(t, tvars.vect7), tvars.vect10);
                 float distSq = Q.dot(Q); // distance squared to origin
                 if( distSq < nearestDist ) {
                     nearestPt = Q;

File: jme3-core/src/main/java/com/jme3/bounding/BoundingVolume.java
Patch:
@@ -121,7 +121,7 @@ public final BoundingVolume transform(Transform trans) {
      * @param trans
      *            the transform to affect the bound.
      * @param store
-     *            sphere to store result in
+     *            bounding volume to store result in
      * @return the new bounding volume.
      */
     public abstract BoundingVolume transform(Transform trans, BoundingVolume store);

File: jme3-core/src/main/java/com/jme3/renderer/RenderManager.java
Patch:
@@ -575,7 +575,7 @@ private void renderShadow(Spatial s, RenderQueue rq) {
             Geometry gm = (Geometry) s;
 
             RenderQueue.ShadowMode shadowMode = s.getShadowMode();
-            if (shadowMode != RenderQueue.ShadowMode.Off && shadowMode != RenderQueue.ShadowMode.Receive) {
+            if (shadowMode != RenderQueue.ShadowMode.Off && shadowMode != RenderQueue.ShadowMode.Receive && !gm.isGrouped()) {
                 //forcing adding to shadow cast mode, culled objects doesn't have to be in the receiver queue
                 rq.addToShadowQueue(gm, RenderQueue.ShadowMode.Cast);
             }

File: jme3-core/src/main/java/com/jme3/scene/Geometry.java
Patch:
@@ -486,9 +486,9 @@ public Geometry clone(boolean cloneMaterial) {
         
         // This geometry is managed,
         // but the cloned one is not attached to anything, hence not managed.
-        if (isGrouped()) {
-            groupNode = null;
-            startIndex = -1;
+        if (geomClone.isGrouped()) {
+            geomClone.groupNode = null;
+            geomClone.startIndex = -1;
         }
         
         geomClone.cachedWorldMat = cachedWorldMat.clone();

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerTopComponent.java
Patch:
@@ -864,6 +864,7 @@ private void setSceneInfo(final JmeNode jmeNode, final FileObject file, final bo
             sceneInfoLabel2.setToolTipText("");
             close();
         } else {
+            result.addLookupListener(this);
             showSelectionToggleButton.setSelected(true);
             showGridToggleButton.setSelected(false);
             //TODO: threading
@@ -881,7 +882,6 @@ private void setSceneInfo(final JmeNode jmeNode, final FileObject file, final bo
     public void openScene(Spatial spat, AssetDataObject file, ProjectAssetManager manager) {
         cleanupControllers();
         SceneApplication.getApplication().addSceneListener(this);
-        result.addLookupListener(this);
         Node node;
         if (spat instanceof Node) {
             node = (Node) spat;

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerTopComponent.java
Patch:
@@ -864,6 +864,7 @@ private void setSceneInfo(final JmeNode jmeNode, final FileObject file, final bo
             sceneInfoLabel2.setToolTipText("");
             close();
         } else {
+            result.addLookupListener(this);
             showSelectionToggleButton.setSelected(true);
             showGridToggleButton.setSelected(false);
             //TODO: threading
@@ -881,7 +882,6 @@ private void setSceneInfo(final JmeNode jmeNode, final FileObject file, final bo
     public void openScene(Spatial spat, AssetDataObject file, ProjectAssetManager manager) {
         cleanupControllers();
         SceneApplication.getApplication().addSceneListener(this);
-        result.addLookupListener(this);
         Node node;
         if (spat instanceof Node) {
             node = (Node) spat;

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/NewGeometrySettings.java
Patch:
@@ -355,7 +355,7 @@ protected void putVector3f(String baseName, Vector3f value) {
     }
 
     protected Mode getMode(String baseName) {
-        return Mode.values()[pref.getInt(baseName, Mode.Lines.ordinal())];
+        return Mode.values()[pref.getInt(baseName, Mode.Triangles.ordinal())];
     }
 
     public void putMode(String baseName, Mode value) {

File: jme3-examples/src/main/java/jme3test/app/TestNativeLoader.java
Patch:
@@ -105,7 +105,6 @@ private static void tryLoadBulletJme() {
             NativeLibraryLoader.loadNativeLibrary("bulletjme", true);
 
             com.jme3.bullet.PhysicsSpace physSpace = new com.jme3.bullet.PhysicsSpace();
-            com.jme3.bullet.PhysicsSpace.initNativePhysics();
 
             System.out.println("Succeeded in loading BulletJme.");
         } else {

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglOffscreenBuffer.java
Patch:
@@ -145,6 +145,7 @@ protected void deinitInThread(){
     }
 
     public void run(){
+        loadNatives();
         logger.log(Level.FINE, "Using LWJGL {0}", Sys.getVersion());
         initInThread();
         while (!needClose.get()){

File: sdk/jme3-core/src/com/jme3/gde/core/Installer.java
Patch:
@@ -109,8 +109,8 @@ public void restored() {
             logger.log(Level.INFO, "Create settings dir {0}", projectDir);
             file.mkdirs();
         }
-        com.jme3.system.Natives.setExtractionDir(jmpDir);
-
+        
+        com.jme3.system.NativeLibraryLoader.setCustomExtractionFolder(jmpDir);
         //avoid problems with lightweight popups
         JPopupMenu.setDefaultLightWeightPopupEnabled(false);
     }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/UserDataDialog.java
Patch:
@@ -137,8 +137,8 @@ protected Property makeProperty(Object obj, Class returntype, String method, Str
         try {
 
             prop = new SceneExplorerProperty(obj.getClass().cast(obj), returntype, method, setter);
-
             prop.setName(name);
+            ((SceneExplorerProperty)prop).syncValue();
 
         } catch (NoSuchMethodException ex) {
             Exceptions.printStackTrace(ex);

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/TextureUtil.java
Patch:
@@ -118,7 +118,7 @@ private static void setFormat(Format format, int glInternalFormat, int glFormat,
         setFormat(Format.RGB9E5,               GL30.GL_RGB9_E5,         GL11.GL_RGB, GL30.GL_UNSIGNED_INT_5_9_9_9_REV, false);
         setFormat(Format.RGB16F_to_RGB111110F, GL30.GL_R11F_G11F_B10F, GL11.GL_RGB, GL30.GL_HALF_FLOAT, false);
         setFormat(Format.RGB16F_to_RGB9E5,     GL30.GL_RGB9_E5,         GL11.GL_RGB, GL30.GL_HALF_FLOAT, false);
-        setFormat(Format.RGB10_A2,             GL11.GL_RGB10_A2,        GL11.GL_RGB, GL12.GL_UNSIGNED_INT_10_10_10_2, false);
+        setFormat(Format.RGB10_A2,             GL11.GL_RGB10_A2,        GL11.GL_RGBA, GL12.GL_UNSIGNED_INT_10_10_10_2, false);
         
         // RGBA formats
         setFormat(Format.ABGR8,   GL11.GL_RGBA8,  GL11.GL_RGBA, GL12.GL_UNSIGNED_INT_8_8_8_8, false);

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/TextureUtil.java
Patch:
@@ -118,7 +118,7 @@ private static void setFormat(Format format, int glInternalFormat, int glFormat,
         setFormat(Format.RGB9E5,               GL30.GL_RGB9_E5,         GL11.GL_RGB, GL30.GL_UNSIGNED_INT_5_9_9_9_REV, false);
         setFormat(Format.RGB16F_to_RGB111110F, GL30.GL_R11F_G11F_B10F, GL11.GL_RGB, GL30.GL_HALF_FLOAT, false);
         setFormat(Format.RGB16F_to_RGB9E5,     GL30.GL_RGB9_E5,         GL11.GL_RGB, GL30.GL_HALF_FLOAT, false);
-        setFormat(Format.RGB10_A2,             GL11.GL_RGB10_A2,        GL11.GL_RGB, GL12.GL_UNSIGNED_INT_10_10_10_2, false);
+        setFormat(Format.RGB10_A2,             GL11.GL_RGB10_A2,        GL11.GL_RGBA, GL12.GL_UNSIGNED_INT_10_10_10_2, false);
         
         // RGBA formats
         setFormat(Format.ABGR8,   GL11.GL_RGBA8,  GL11.GL_RGBA, GL12.GL_UNSIGNED_INT_8_8_8_8, false);

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeBone.java
Patch:
@@ -63,7 +63,6 @@ public JmeBone() {
 
     public JmeBone(JmeSkeletonControl jmeSkeletonControl, Bone bone, JmeBoneChildren children) {
         super(children);
-        this.jmeChildren = children;
         this.jmeSkeletonControl = jmeSkeletonControl;
         getLookupContents().add(bone);
         getLookupContents().add(this);

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeNode.java
Patch:
@@ -75,7 +75,6 @@ public JmeNode() {
 
     public JmeNode(Node spatial, JmeSpatialChildren children) {
         super(spatial, children);
-        getLookupContents().add(spatial);
         this.node = spatial;
     }
 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeSpatial.java
Patch:
@@ -83,7 +83,6 @@ public JmeSpatial() {
 
     public JmeSpatial(Spatial spatial, JmeSpatialChildren factory) {
         super(factory);
-        this.jmeChildren = factory;
         this.spatial = spatial;
         getLookupContents().add(spatial);
         getLookupContents().add(this);

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeNode.java
Patch:
@@ -75,7 +75,6 @@ public JmeNode() {
 
     public JmeNode(Node spatial, JmeSpatialChildren children) {
         super(spatial, children);
-        getLookupContents().add(spatial);
         this.node = spatial;
     }
 

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglCanvas.java
Patch:
@@ -323,8 +323,7 @@ protected PixelFormat acquirePixelFormat(boolean forPbuffer){
                                                0,
                                                0, 
                                                0, 
-                                               settings.useStereo3D())
-                                    .withSRGB(settings.getGammaCorrection());
+                                               settings.useStereo3D());
             }
             return canvasFormat;
         }

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglDisplay.java
Patch:
@@ -91,8 +91,7 @@ protected void createContext(AppSettings settings) throws LWJGLException{
                                          0, 
                                          0, 
                                          0, 
-                                         settings.useStereo3D())
-                                .withSRGB(settings.getGammaCorrection());
+                                         settings.useStereo3D());
         
         frameRate = settings.getFrameRate();
         logger.log(Level.FINE, "Selected display mode: {0}", displayMode);

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglOffscreenBuffer.java
Patch:
@@ -65,8 +65,7 @@ protected void initInThread(){
                                       0,
                                       settings.getDepthBits(),
                                       settings.getStencilBits(),
-                                      samples)
-                            .withSRGB(settings.getGammaCorrection());
+                                      samples);
         
         width = settings.getWidth();
         height = settings.getHeight();

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeGeometry.java
Patch:
@@ -155,7 +155,9 @@ public void propertyChange(String type, String name, final Object before, final
 
                 public void run() {
                     try {
-                        SceneExplorerTopComponent.findInstance().swapMaterialChangeListener(JmeGeometry.this, ((Material) before).getAssetName(), ((Material) after).getAssetName());
+                        String beforeName = (before == null)? null : ((Material) before).getAssetName();
+                        String afterName = (after == null)? null : ((Material) after).getAssetName();
+                        SceneExplorerTopComponent.findInstance().swapMaterialChangeListener(JmeGeometry.this, beforeName, afterName);
                     } catch (Exception e) {
                         Exceptions.printStackTrace(e);
                     }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeGeometry.java
Patch:
@@ -155,7 +155,9 @@ public void propertyChange(String type, String name, final Object before, final
 
                 public void run() {
                     try {
-                        SceneExplorerTopComponent.findInstance().swapMaterialChangeListener(JmeGeometry.this, ((Material) before).getAssetName(), ((Material) after).getAssetName());
+                        String beforeName = (before == null)? null : ((Material) before).getAssetName();
+                        String afterName = (after == null)? null : ((Material) after).getAssetName();
+                        SceneExplorerTopComponent.findInstance().swapMaterialChangeListener(JmeGeometry.this, beforeName, afterName);
                     } catch (Exception e) {
                         Exceptions.printStackTrace(e);
                     }

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/TextureUtil.java
Patch:
@@ -347,7 +347,7 @@ public static void uploadTexture(Image image,
                     // or upload slice
                     if (index == -1){
                         GL12.glTexImage3D(target,
-                                          0,
+                                          i,
                                           glFmt.internalFormat,
                                           mipWidth,
                                           mipHeight,

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/TextureHelper.java
Patch:
@@ -464,7 +464,6 @@ protected Texture loadImageFromFile(String name, int imaflag, BlenderContext ble
             // Directly try to load texture so AssetManager can report missing textures
             try {
                 TextureKey key = new TextureKey(absoluteName);
-                key.setAsCube(false);
                 key.setFlipY(true);
                 key.setGenerateMips(generateMipmaps);
                 result = assetManager.loadTexture(key);
@@ -494,7 +493,6 @@ protected Texture loadImageFromFile(String name, int imaflag, BlenderContext ble
             for (String assetName : assetNames) {
                 try {
                     TextureKey key = new TextureKey(assetName);
-                    key.setAsCube(false);
                     key.setFlipY(true);
                     key.setGenerateMips(generateMipmaps);
                     AssetInfo info = assetManager.locateAsset(key);

File: jme3-core/src/main/java/com/jme3/texture/TextureProcessor.java
Patch:
@@ -38,6 +38,7 @@
 
 public class TextureProcessor implements AssetProcessor {
 
+    @Override
     public Object postProcess(AssetKey key, Object obj) {
         TextureKey texKey = (TextureKey) key;
         Image img = (Image) obj;
@@ -46,15 +47,15 @@ public Object postProcess(AssetKey key, Object obj) {
         }
 
         Texture tex;
-        if (texKey.isAsCube()) {
+        if (texKey.getTextureTypeHint() == Texture.Type.CubeMap) {
             if (texKey.isFlipY()) {
                 // also flip -y and +y image in cubemap
                 ByteBuffer pos_y = img.getData(2);
                 img.setData(2, img.getData(3));
                 img.setData(3, pos_y);
             }
             tex = new TextureCubeMap();
-        } else if (texKey.isAsTexture3D()) {
+        } else if (texKey.getTextureTypeHint() == Texture.Type.ThreeDimensional) {
             tex = new Texture3D();
         } else {
             tex = new Texture2D();

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/DDSLoader.java
Patch:
@@ -36,7 +36,7 @@
 import com.jme3.asset.TextureKey;
 import com.jme3.texture.Image;
 import com.jme3.texture.Image.Format;
-import com.jme3.texture.Texture.Type;
+import com.jme3.texture.Texture;
 import com.jme3.texture.image.ColorSpace;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.LittleEndien;
@@ -128,9 +128,9 @@ public Object load(AssetInfo info) throws IOException {
             in = new LittleEndien(stream);
             loadHeader();
             if (texture3D) {
-                ((TextureKey) info.getKey()).setTextureTypeHint(Type.ThreeDimensional);
+                ((TextureKey) info.getKey()).setTextureTypeHint(Texture.Type.ThreeDimensional);
             } else if (depth > 1) {
-                ((TextureKey) info.getKey()).setTextureTypeHint(Type.CubeMap);
+                ((TextureKey) info.getKey()).setTextureTypeHint(Texture.Type.CubeMap);
             }
             ArrayList<ByteBuffer> data = readData(((TextureKey) info.getKey()).isFlipY());
             return new Image(pixelFormat, width, height, depth, data, sizes, ColorSpace.sRGB);

File: jme3-examples/src/main/java/jme3test/light/TestEnvironmentMapping.java
Patch:
@@ -31,7 +31,7 @@ public void simpleInitApp() {
 
         TextureKey key = new TextureKey("Textures/Sky/Bright/BrightSky.dds", true);
         key.setGenerateMips(true);
-        key.setAsCube(true);
+        key.setTextureTypeHint(Texture.Type.CubeMap);
         final Texture tex = assetManager.loadTexture(key);
 
         for (Spatial geom : buggy.getChildren()) {

File: jme3-examples/src/main/java/jme3test/texture/TestTexture3DLoading.java
Patch:
@@ -60,7 +60,7 @@ public void simpleInitApp() {
         Material material = new Material(assetManager, "jme3test/texture/tex3DThumb.j3md");
         TextureKey key = new TextureKey("Textures/3D/flame.dds");
         key.setGenerateMips(true);
-        key.setAsTexture3D(true);
+        key.setTextureTypeHint(Texture.Type.ThreeDimensional);
 
         Texture t = assetManager.loadTexture(key);
 

File: jme3-niftygui/src/main/java/com/jme3/niftygui/JmeBatchRenderBackend.java
Patch:
@@ -193,7 +193,6 @@ public void clearAtlasTexture(final int width, final int height) {
   public Image loadImage(final String filename) {
     TextureKey key = new TextureKey(filename, false);
     key.setAnisotropy(0);
-    key.setAsCube(false);
     key.setGenerateMips(false);
 
     Texture2D texture = (Texture2D) display.getAssetManager().loadTexture(key);

File: jme3-niftygui/src/main/java/com/jme3/niftygui/RenderImageJme.java
Patch:
@@ -49,7 +49,6 @@ public RenderImageJme(String filename, boolean linear, NiftyJmeDisplay display){
         TextureKey key = new TextureKey(filename, true);
 
         key.setAnisotropy(0);
-        key.setAsCube(false);
         key.setGenerateMips(false);
         
         texture = (Texture2D) display.getAssetManager().loadTexture(key);

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/MaterialLoader.java
Patch:
@@ -130,7 +130,9 @@ private void readTextureImage(String content){
 
         TextureKey texKey = new TextureKey(folderName + path, false);
         texKey.setGenerateMips(genMips);
-        texKey.setAsCube(cubic);
+        if (cubic) {
+            texKey.setTextureTypeHint(Texture.Type.CubeMap);
+        }
 
         try {
             Texture loadedTexture = assetManager.loadTexture(texKey);

File: jme3-plugins/src/ogre/java/com/jme3/scene/plugins/ogre/matext/MaterialExtensionLoader.java
Patch:
@@ -74,7 +74,6 @@ private void readExtendingMaterialStatement(Statement statement) throws IOExcept
 
             TextureKey texKey = new TextureKey(texturePath, false);
             texKey.setGenerateMips(true);
-            texKey.setAsCube(false);
             Texture tex;
             
             try {

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/RenameTerrainAction.java
Patch:
@@ -193,8 +193,6 @@ private String cleanFileName(String name) {
     private TextureKey cloneKeyParams(TextureKey tkOrig, String path) {
         TextureKey tk = new TextureKey(path, false);
         tk.setAnisotropy(tkOrig.getAnisotropy());
-        tk.setAsCube(tkOrig.isAsCube());
-        tk.setAsTexture3D(tkOrig.isAsTexture3D());
         tk.setGenerateMips(tkOrig.isGenerateMips());
         tk.setTextureTypeHint(tkOrig.getTextureTypeHint());
         return tk;

File: jme3-android/src/main/java/com/jme3/app/AndroidHarness.java
Patch:
@@ -77,7 +77,7 @@ public class AndroidHarness extends Activity implements TouchListener, DialogInt
      * how the surfaceview is able to display Android views that are located
      * under the surfaceview jME uses to render the scenegraph.
      * 0 = Opaque surfaceview background (fastest)
-     * 1->7 = Transparent surfaceview background
+     * 1-&gt;7 = Transparent surfaceview background
      * 8 or higher = Translucent surfaceview background
      * (default = 0)
      */

File: jme3-android/src/main/java/com/jme3/audio/android/AndroidMediaPlayerAudioRenderer.java
Patch:
@@ -309,7 +309,7 @@ public void onCompletion(MediaPlayer mp) {
      * the channel of the last played instance.
      *
      * It is not possible to get information about the state of the soundpool of
-     * a specific streamid, so removing is not possilbe -> noone knows when
+     * a specific streamid, so removing is not possilbe -&gt; noone knows when
      * sound finished.
      */
     public void playSourceInstance(AudioSource src) {

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -247,7 +247,7 @@ private MeshWeightsData readVerticesWeightsData(MeshContext meshContext, Skeleto
                                 if (boneEnvelope.isInEnvelope(pos)) {
                                     vertexGroup.addVertex(index, boneEnvelope.getWeight());
                                 } else if (boneIndex == 5) {
-                                    System.out.println("Si� nie za�apa�: " + pos);
+                                    System.out.println("Si nie zaapa: " + pos);
                                 }
                             }
                         }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/textures/generating/TextureGenerator.java
Patch:
@@ -70,9 +70,6 @@ public void readData(Structure tex, BlenderContext blenderContext) {
 
     /**
      * This method applies brightness and contrast for RGB textures.
-     * @param tex
-     *            texture structure
-     * @param texres
      */
     protected void applyBrightnessAndContrast(BrightnessAndContrastData bacd, TexturePixel texres) {
         texres.red = (texres.red - 0.5f) * bacd.contrast + bacd.brightness;

File: jme3-bullet/src/common/java/com/jme3/bullet/collision/PhysicsCollisionListener.java
Patch:
@@ -38,7 +38,8 @@
 public interface PhysicsCollisionListener {
 
     /**
-     * Called when a collision happened in the PhysicsSpace, <i>called from render thread</i>.<br/>
+     * Called when a collision happened in the PhysicsSpace, <i>called from render thread</i>.
+     * 
      * Do not store the event object as it will be cleared after the method has finished.
      * @param event the CollisionEvent
      */

File: jme3-core/src/main/java/com/jme3/animation/Bone.java
Patch:
@@ -61,14 +61,14 @@ public final class Bone implements Savable {
     private Node attachNode;
     /**
      * Initial transform is the local bind transform of this bone.
-     * PARENT SPACE -> BONE SPACE
+     * PARENT SPACE -&gt; BONE SPACE
      */
     private Vector3f initialPos;
     private Quaternion initialRot;
     private Vector3f initialScale;
     /**
      * The inverse world bind transform.
-     * BONE SPACE -> MODEL SPACE
+     * BONE SPACE -&gt; MODEL SPACE
      */
     private Vector3f worldBindInversePos;
     private Quaternion worldBindInverseRot;
@@ -80,7 +80,7 @@ public final class Bone implements Savable {
     private Quaternion localRot = new Quaternion();
     private Vector3f localScale = new Vector3f(1.0f, 1.0f, 1.0f);
     /**
-     * MODEL SPACE -> BONE SPACE (in animated state)
+     * MODEL SPACE -&gt; BONE SPACE (in animated state)
      */
     private Vector3f worldPos = new Vector3f();
     private Quaternion worldRot = new Quaternion();

File: jme3-core/src/main/java/com/jme3/asset/AssetManager.java
Patch:
@@ -219,8 +219,9 @@ public interface AssetManager {
     public void setAssetEventListener(AssetEventListener listener);
 
     /**
-     * Manually locates an asset with the given {@link AssetKey}. This method
-     * should be used for debugging or internal uses. <br/>
+     * Manually locates an asset with the given {@link AssetKey}. 
+     * This method should be used for debugging or internal uses.
+     * <br>
      * The call will attempt to locate the asset by invoking the
      * {@link AssetLocator} that are registered with this <code>AssetManager</code>,
      * in the same way that the {@link AssetManager#loadAsset(com.jme3.asset.AssetKey) }

File: jme3-core/src/main/java/com/jme3/cinematic/Cinematic.java
Patch:
@@ -470,7 +470,7 @@ public boolean removeCinematicEvent(KeyFrame keyFrame, CinematicEvent cinematicE
     /**
      * called internally
      *
-     * @see AppState#render()
+     * @see AppState#render(com.jme3.renderer.RenderManager) 
      */
     public void render(RenderManager rm) {
     }

File: jme3-core/src/main/java/com/jme3/input/FlyByCamera.java
Patch:
@@ -279,7 +279,6 @@ protected void mapJoystick( Joystick joystick ) {
     /**
      * Registers the FlyByCamera to receive input events from the provided
      * Dispatcher.
-     * @param inputManager
      */
     public void unregisterInput(){
     

File: jme3-core/src/main/java/com/jme3/scene/shape/Box.java
Patch:
@@ -95,7 +95,7 @@ public Box(float x, float y, float z) {
      * the given amount in <em>each</em> direction. So, for example, a box
      * with extent of 0.5 would be the unit cube.
      * 
-     * @Deprecated: Due to constant confusion of geometry centers and the center
+     * @deprecated Due to constant confusion of geometry centers and the center
      * of the box mesh this method has been deprecated.
      * 
      * @param center the center of the box.

File: jme3-core/src/main/java/com/jme3/scene/shape/Dome.java
Patch:
@@ -73,7 +73,7 @@ public Dome() {
      * Constructs a dome for use as a SkyDome. The SkyDome is centered at the origin 
      * and only visible from the inside. 
      * @param planes
-     *            The number of planes along the Z-axis. Must be >= 2.
+     *            The number of planes along the Z-axis. Must be &gt;= 2.
      *            Influences how round the arch of the dome is.
      * @param radialSamples
      *            The number of samples along the radial.
@@ -95,7 +95,7 @@ public Dome(int planes, int radialSamples, float radius) {
      * @param center
      *            Center of the dome.
      * @param planes
-     *            The number of planes along the Z-axis. Must be >= 2.
+     *            The number of planes along the Z-axis. Must be &gt;= 2.
      *            Influences how round the arch of the dome is.
      * @param radialSamples
      *            The number of samples along the radial. 
@@ -119,7 +119,7 @@ public Dome(Vector3f center, int planes, int radialSamples,
      * @param center
      *            Center of the dome.
      * @param planes
-     *            The number of planes along the Z-axis. Must be >= 2.
+     *            The number of planes along the Z-axis. Must be &gt;= 2.
      *            Influences how round the arch of the dome is.
      * @param radialSamples
      *            The number of samples along the radial.

File: jme3-core/src/main/java/com/jme3/texture/FrameBuffer.java
Patch:
@@ -519,7 +519,7 @@ public long getUniqueId() {
      * for this option to take any effect.
      *
      * Rendering operations performed on this framebuffer shall undergo a linear
-     * -> sRGB color space conversion when this flag is enabled. If
+     * -&gt; sRGB color space conversion when this flag is enabled. If
      * {@link RenderState#getBlendMode() blending} is enabled, it will be
      * performed in linear space by first decoding the stored sRGB pixel values
      * into linear, combining with the shader result, and then converted back to

File: jme3-core/src/main/java/com/jme3/texture/Image.java
Patch:
@@ -895,7 +895,7 @@ public int[] getMipMapSizes() {
      * such conversion must not be performed, for example, when loading normal
      * maps.
      *
-     * @param colorSpace @see ColorSpace. Set to sRGB to enable srgb -> linear 
+     * @param colorSpace @see ColorSpace. Set to sRGB to enable srgb -&gt; linear 
      * conversion, Linear otherwise.
      *
      * @seealso Renderer#setLinearizeSrgbImages(boolean)
@@ -907,7 +907,7 @@ public void setColorSpace(ColorSpace colorSpace) {
 
     /**
      * Specifies that this image is an SRGB image and therefore must undergo an
-     * sRGB -> linear RGB color conversion prior to being read by a shader and
+     * sRGB -&gt; linear RGB color conversion prior to being read by a shader and
      * with the {@link Renderer#setLinearizeSrgbImages(boolean)} option is
      * enabled.
      *

File: jme3-core/src/main/java/com/jme3/texture/image/ImageRaster.java
Patch:
@@ -72,8 +72,8 @@ public abstract class ImageRaster {
      * @param slice Which slice to use. Only applies to 3D images, 2D image
      * arrays or cubemaps.
      */
-    public static ImageRaster create(Image image, int slices) {
-        return JmeSystem.createImageRaster(image, slices);
+    public static ImageRaster create(Image image, int slice) {
+        return JmeSystem.createImageRaster(image, slice);
     }
     
     /**

File: jme3-core/src/plugins/java/com/jme3/cursors/plugins/JmeCursor.java
Patch:
@@ -36,8 +36,9 @@
 /**
  * A Jme representation of the LWJGL Cursor class.
  *
+ * Created Jun 6, 2012 12:12:38 PM
+ * 
  * @author MadJack
- * @creation Jun 6, 2012 12:12:38 PM
  */
 public class JmeCursor {
 

File: jme3-core/src/plugins/java/com/jme3/material/plugins/ConditionParser.java
Patch:
@@ -80,11 +80,13 @@ public static void main(String argv[]) {
      * defines names
      * 
      * supported expression syntax example: 
+     * <code>
      * "(LightMap && SeparateTexCoord) || !ColorMap"
      * "#if (defined(LightMap) && defined(SeparateTexCoord)) || !defined(ColorMap)"
      * "#ifdef LightMap"
      * "#ifdef (LightMap && SeparateTexCoord) || !ColorMap"
-     *
+     * </code>
+     * 
      * @param expression the expression to parse
      * @return the list of defines
      */

File: jme3-desktop/src/main/java/com/jme3/cursors/plugins/CursorLoader.java
Patch:
@@ -51,9 +51,8 @@
 import javax.imageio.ImageIO;
 
 /**
- *
+ * Created Jun 5, 2012 9:45:58 AM
  * @author MadJack
- * @creation Jun 5, 2012 9:45:58 AM
  */
 public class CursorLoader implements AssetLoader {
     final private static int FDE_OFFSET = 6; // first directory entry offset

File: jme3-networking/src/main/java/com/jme3/network/MessageConnection.java
Patch:
@@ -34,7 +34,7 @@
 
 /**
  *  The source of a received message and the common abstract interface
- *  of client->server and server->client objects. 
+ *  of client-&gt;server and server-&gt;client objects. 
  *
  *  @version   $Revision$
  *  @author    Paul Speed

File: jme3-networking/src/main/java/com/jme3/network/kernel/tcp/SelectorKernel.java
Patch:
@@ -227,7 +227,7 @@ protected class SelectorThread extends Thread
 
         /**
          *  Because we want to keep the keys to ourselves, we'll do
-         *  the endpoint -> key mapping internally.
+         *  the endpoint -&gt; key mapping internally.
          */
         private Map<NioEndpoint,SelectionKey> endpointKeys = new ConcurrentHashMap<NioEndpoint,SelectionKey>();
 

File: jme3-niftygui/src/main/java/com/jme3/niftygui/NiftyJmeDisplay.java
Patch:
@@ -145,7 +145,7 @@ public NiftyJmeDisplay(
      * @param assetManager jME AssetManager
      * @param inputManager jME InputManager
      * @param audioRenderer jME AudioRenderer
-     * @param viewport Viewport to use
+     * @param vp Viewport to use
      */
     public NiftyJmeDisplay(AssetManager assetManager, 
                            InputManager inputManager,

File: jme3-plugins/src/xml/java/com/jme3/export/xml/DOMSerializer.java
Patch:
@@ -108,9 +108,6 @@ public void serialize(Document doc, OutputStream out) throws IOException {
      * 
      * @param encoding the encoding to use, passing in {@code null} results in the
      *  default encoding (UTF-8) being set.
-     * @throws IllegalCharsetNameException if the given charset name is illegal.
-     * @throws UnsupportedCharsetException if the given charset is not supported by the
-     *  current JVM.
      */
     public void setEncoding(String encoding) {
         this.encoding = Charset.forName(encoding);

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/NeighbourFinder.java
Patch:
@@ -43,7 +43,7 @@
  * The general orientation of TerrainQuads and their sub-quads is as such:
  * 
  * 
- *  +-- x+ ---->
+ *  +-- x+ ----&gt;
  *  |
  *  |    1 | 3 (quadrants)
  *  z+   --+--

File: jme3-terrain/src/main/java/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -100,7 +100,7 @@
  *  | :     :
  *  | :     :
  *  | 0.....:
- *  +---------> +z
+ *  +---------&gt; +z
  * (world coordinates)
  * </pre>
  * @author Brent Owens

File: jme3-terrain/src/main/java/com/jme3/terrain/noise/Basis.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * Interface for - basically 3D - noise generation algorithms, based on the
- * book: Texturing & Modeling - A Procedural Approach
+ * book: Texturing &amp; Modeling - A Procedural Approach
  * 
  * The main concept is to look at noise as a basis for generating fractals.
  * Basis can be anything, like a simple:

File: jme3-terrain/src/main/java/com/jme3/terrain/noise/ShaderUtils.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  * Helper class containing useful functions explained in the book:
- * Texturing & Modeling - A Procedural Approach
+ * Texturing &amp; Modeling - A Procedural Approach
  * 
  * @author Anthyon
  * 

File: sdk/JME3TestsTemplateAndroid/mobile/src/com/jmonkeyengine/tests/TestsHarness.java
Patch:
@@ -11,7 +11,7 @@ public class TestsHarness extends AndroidHarness{
     /*
      * Note that you can ignore the errors displayed in this file,
      * the android project will build regardless.
-     * Install the 'Android' plugin under Tools->Plugins->Available Plugins
+     * Install the 'Android' plugin under Tools-&gt;Plugins-&gt;Available Plugins
      * to get error checks and code completion for the Android project files.
      */
 

File: jme3-core/src/main/java/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -953,7 +953,7 @@ private void updateParticle(Particle p, float tpf, Vector3f min, Vector3f max){
 
         // affecting color, size and angle
         float b = (p.startlife - p.life) / p.startlife;
-        p.color.interpolate(startColor, endColor, b);
+        p.color.interpolateLocal(startColor, endColor, b);
         p.size = FastMath.interpolateLinear(b, startSize, endSize);
         p.angle += p.rotateSpeed * tpf;
 

File: jme3-examples/src/main/java/jme3test/material/TestColoredTexture.java
Patch:
@@ -75,7 +75,7 @@ public void simpleUpdate(float tpf){
             nextColor = ColorRGBA.randomColor();
         }
         ColorRGBA currentColor = new ColorRGBA();
-        currentColor.interpolate(prevColor, nextColor, time);
+        currentColor.interpolateLocal(prevColor, nextColor, time);
 
         mat.setColor("Color", currentColor);
     }

File: jme3-effects/src/main/java/com/jme3/post/filters/GammaCorrectionFilter.java
Patch:
@@ -64,7 +64,7 @@ protected Material getMaterial() {
     @Override
     protected void initFilter(AssetManager manager,
             RenderManager renderManager, ViewPort vp, int w, int h) {
-        material = new Material(manager, "Materials/Filter/GammaCorrection.j3md");
+        material = new Material(manager, "Common/MatDefs/Post/GammaCorrection.j3md");
         material.setFloat("InvGamma", 1.0f/gamma);        
     }
 

File: jme3-core/src/main/java/com/jme3/asset/DesktopAssetManager.java
Patch:
@@ -342,7 +342,7 @@ public Object loadAsset(String name){
         return loadAsset(new AssetKey(name));
     }
 
-    public Texture loadTexture(TextureKey key){
+    public Texture loadTexture(TextureKey key){                
         return (Texture) loadAsset(key);
     }
 

File: jme3-core/src/main/java/com/jme3/system/AppSettings.java
Patch:
@@ -143,7 +143,7 @@ public final class AppSettings extends HashMap<String, Object> {
         defaults.put("SettingsDialogImage", "/com/jme3/app/Monkey.png");
         defaults.put("MinHeight", 0);
         defaults.put("MinWidth", 0);
-        defaults.put("GammaCorrection", true);
+        defaults.put("GammaCorrection", false);
       //  defaults.put("Icons", null);
     }
 

File: jme3-core/src/main/java/com/jme3/system/JmeVersion.java
Patch:
@@ -32,7 +32,7 @@
 package com.jme3.system;
 
 public class JmeVersion {
-    private static final String FULL_NAME = "jMonkeyEngine 3.x";
+    private static final String FULL_NAME = "jMonkeyEngine 3.0.10 (pre-alpha-svn)";
     
     public static String getFullName() {
         return FULL_NAME;

File: jme3-core/src/main/java/com/jme3/system/NullRenderer.java
Patch:
@@ -155,4 +155,7 @@ public void setAlphaToCoverage(boolean value) {
     public void setMainFrameBufferSrgb(boolean srgb) {     
     }
 
+    public void setLinearizeSrgbImages(boolean linearize) {    
+    }
+
 }

File: jme3-core/src/main/java/com/jme3/texture/Texture2D.java
Patch:
@@ -76,7 +76,7 @@ public Texture2D(Image img){
      * @param format
      */
     public Texture2D(int width, int height, Image.Format format){
-        this(new Image(format, width, height, null));
+        this(new Image(format, width, height, null, false));
     }
 
     /**
@@ -91,7 +91,7 @@ public Texture2D(int width, int height, Image.Format format){
      * @param numSamples
      */
     public Texture2D(int width, int height, int numSamples, Image.Format format){
-        this(new Image(format, width, height, null));
+        this(new Image(format, width, height, null, false));
         getImage().setMultiSamples(numSamples);
     }
 

File: jme3-core/src/main/java/com/jme3/texture/Texture3D.java
Patch:
@@ -78,7 +78,7 @@ public Texture3D(Image img) {
      * @param format
      */
     public Texture3D(int width, int height, int depth, Image.Format format) {
-        this(new Image(format, width, height, depth, null));
+        this(new Image(format, width, height, depth, null, false));
     }
 
     /**
@@ -93,7 +93,7 @@ public Texture3D(int width, int height, int depth, Image.Format format) {
      * @param numSamples
      */
     public Texture3D(int width, int height, int depth, int numSamples, Image.Format format) {
-        this(new Image(format, width, height, depth, null));
+        this(new Image(format, width, height, depth, null, false));
         getImage().setMultiSamples(numSamples);
     }
 

File: jme3-core/src/main/java/com/jme3/texture/TextureArray.java
Patch:
@@ -70,7 +70,8 @@ public TextureArray(List<Image> images) {
         int width = images.get(0).getWidth();
         int height = images.get(0).getHeight();
         Format format = images.get(0).getFormat();
-        Image arrayImage = new Image(format, width, height, null);
+        boolean isSRGB = images.get(0).isSrgb();
+        Image arrayImage = new Image(format, width, height, null, isSRGB);
 
         for (Image img : images) {
             if (img.getHeight() != height || img.getWidth() != width) {

File: jme3-core/src/main/java/com/jme3/texture/TextureCubeMap.java
Patch:
@@ -88,7 +88,7 @@ private static Image createEmptyLayeredImage(int width, int height,
         for(int i = 0; i < layerCount; i++) {
             layers.add(null);
         }
-        Image image = new Image(format, width, height, 0, layers);
+        Image image = new Image(format, width, height, 0, layers, false);
         return image;
     }
 

File: jme3-core/src/main/java/com/jme3/util/PlaceholderAssets.java
Patch:
@@ -73,7 +73,7 @@ public class PlaceholderAssets {
     public static Image getPlaceholderImage(){
         ByteBuffer tempData = BufferUtils.createByteBuffer(3 * 4 * 4);
         tempData.put(imageData).flip();
-        return new Image(Format.RGB8, 4, 4, tempData);
+        return new Image(Format.RGB8, 4, 4, tempData, null, false);
     }
     
     public static Material getPlaceholderMaterial(AssetManager assetManager){

File: jme3-core/src/main/java/com/jme3/util/SkyFactory.java
Patch:
@@ -243,7 +243,7 @@ public static Spatial createSky(AssetManager assetManager, Texture west,
 
         checkImagesForCubeMap(westImg, eastImg, northImg, southImg, upImg, downImg);
 
-        Image cubeImage = new Image(westImg.getFormat(), westImg.getWidth(), westImg.getHeight(), null);
+        Image cubeImage = new Image(westImg.getFormat(), westImg.getWidth(), westImg.getHeight(), null, westImg.isSrgb());
 
         cubeImage.addData(westImg.getData(0));
         cubeImage.addData(eastImg.getData(0));

File: jme3-core/src/plugins/java/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -152,14 +152,14 @@ private Object readValue(VarType type, String value) throws IOException{
             if (tex != null){
                 if (repeat){
                     tex.setWrap(WrapMode.Repeat);
-                }
+                }                
             }else{
                 tex = new Texture2D(PlaceholderAssets.getPlaceholderImage());
                 if (repeat){
                     tex.setWrap(WrapMode.Repeat);
                 }
                 tex.setKey(texKey);
-            }
+            }         
             return tex;
         }else{
             String[] split = value.trim().split(whitespacePattern);

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/DDSLoader.java
Patch:
@@ -132,7 +132,7 @@ public Object load(AssetInfo info) throws IOException {
                 ((TextureKey) info.getKey()).setTextureTypeHint(Type.CubeMap);
             }
             ArrayList<ByteBuffer> data = readData(((TextureKey) info.getKey()).isFlipY());
-            return new Image(pixelFormat, width, height, depth, data, sizes);
+            return new Image(pixelFormat, width, height, depth, data, sizes, true);
         } finally {
             if (stream != null){
                 stream.close();
@@ -144,7 +144,7 @@ public Image load(InputStream stream) throws IOException {
         in = new LittleEndien(stream);
         loadHeader();
         ArrayList<ByteBuffer> data = readData(false);
-        return new Image(pixelFormat, width, height, depth, data, sizes);
+        return new Image(pixelFormat, width, height, depth, data, sizes, true);
     }
 
     private void loadDX10Header() throws IOException {

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/HDRLoader.java
Patch:
@@ -308,7 +308,8 @@ public Image load(InputStream in, boolean flipY) throws IOException{
         in.close();
 
         dataStore.rewind();
-        return new Image(pixelFormat, width, height, dataStore);
+        //TODO, HDR color space? considered linear here
+        return new Image(pixelFormat, width, height, dataStore, false);
     }
 
     public Object load(AssetInfo info) throws IOException {

File: jme3-core/src/plugins/java/com/jme3/texture/plugins/PFMLoader.java
Patch:
@@ -129,7 +129,7 @@ private Image load(InputStream in, boolean needYFlip) throws IOException{
         }
         imageData.rewind();
 
-        return new Image(format, width, height, imageData);
+        return new Image(format, width, height, imageData, null, false);
     }
 
     public Object load(AssetInfo info) throws IOException {

File: jme3-examples/src/main/java/jme3test/texture/TestImageRaster.java
Patch:
@@ -27,7 +27,7 @@ private Image convertImage(Image image, Format newFormat) {
         int width = image.getWidth();
         int height = image.getHeight();
         ByteBuffer data = BufferUtils.createByteBuffer( (int)Math.ceil(newFormat.getBitsPerPixel() / 8.0) * width * height);
-        Image convertedImage = new Image(newFormat, width, height, data);
+        Image convertedImage = new Image(newFormat, width, height, data,null, image.isSrgb());
         
         ImageRaster sourceReader = ImageRaster.create(image);
         ImageRaster targetWriter = ImageRaster.create(convertedImage);
@@ -66,7 +66,7 @@ private void convertAndPutImage(Image image, float posX, float posY) {
     }
     
     private Image createTestImage() {
-        Image testImage = new Image(Format.BGR8, 4, 3, BufferUtils.createByteBuffer(4 * 4 * 3));
+        Image testImage = new Image(Format.BGR8, 4, 3, BufferUtils.createByteBuffer(4 * 4 * 3), null, false);
         
         ImageRaster io = ImageRaster.create(testImage);
         io.setPixel(0, 0, ColorRGBA.Black);

File: jme3-examples/src/main/java/jme3test/texture/TestTexture3D.java
Patch:
@@ -125,6 +125,6 @@ private Texture getTexture() throws IOException {
         }
         bb.rewind();
         data.add(bb);
-        return new Texture3D(new Image(Format.RGB8, 10, 10, 10, data));
+        return new Texture3D(new Image(Format.RGB8, 10, 10, 10, data, null, false));
     }
 }
\ No newline at end of file

File: jme3-lwjgl/src/main/java/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -238,6 +238,7 @@ protected void initContextFirstTime(){
             assert false;
         }
         renderer.setMainFrameBufferSrgb(settings.getGammaCorrection());
+        renderer.setLinearizeSrgbImages(settings.getGammaCorrection());
 
         // Init input
         if (keyInput != null) {

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/NiftyPreviewPanel.java
Patch:
@@ -8,7 +8,7 @@
 import com.jme3.gde.core.assets.ProjectAssetManager;
 import com.jme3.gde.core.scene.OffScenePanel;
 import com.jme3.gde.core.scene.SceneApplication;
-import com.jme3.gde.gui.NiftyGuiDataObject;
+import com.jme3.gde.gui.OldNiftyGuiDataObject;
 import com.jme3.renderer.ViewPort;
 import de.lessvoid.nifty.Nifty;
 import java.awt.Dimension;
@@ -50,7 +50,7 @@
  */
 public class NiftyPreviewPanel extends PanelView implements ErrorHandler {
 
-    private NiftyGuiDataObject niftyObject;
+    private OldNiftyGuiDataObject niftyObject;
     private OffScenePanel offPanel;
     private Nifty nifty;
     private Document doc;
@@ -62,7 +62,7 @@ public class NiftyPreviewPanel extends PanelView implements ErrorHandler {
     private int width = 640, height = 480;
     private ErrorPanel errors;
 
-    public NiftyPreviewPanel(NiftyGuiDataObject niftyObject, ToolBarDesignEditor comp) {
+    public NiftyPreviewPanel(OldNiftyGuiDataObject niftyObject, ToolBarDesignEditor comp) {
         super();
         setRoot(Node.EMPTY);
         this.niftyObject = niftyObject;

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/PreviewToolbarElement.java
Patch:
@@ -5,7 +5,7 @@
 
 package com.jme3.gde.gui.multiview;
 
-import com.jme3.gde.gui.NiftyGuiDataObject;
+import com.jme3.gde.gui.OldNiftyGuiDataObject;
 import org.netbeans.modules.xml.multiview.ToolBarMultiViewElement;
 import org.netbeans.modules.xml.multiview.ui.SectionView;
 import org.netbeans.modules.xml.multiview.ui.ToolBarDesignEditor;
@@ -20,7 +20,7 @@ public class PreviewToolbarElement extends ToolBarMultiViewElement {
     private ToolBarDesignEditor comp;
     private NiftyPreviewPanel viewPanel;
 
-    public PreviewToolbarElement(NiftyGuiDataObject dObj) {
+    public PreviewToolbarElement(OldNiftyGuiDataObject dObj) {
         super(dObj);
 //        this.dObj = dObj;
         comp = new ToolBarDesignEditor();

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/PreviewView.java
Patch:
@@ -4,7 +4,7 @@
  */
 package com.jme3.gde.gui.multiview;
 
-import com.jme3.gde.gui.NiftyGuiDataObject;
+import com.jme3.gde.gui.OldNiftyGuiDataObject;
 import org.netbeans.modules.xml.multiview.DesignMultiViewDesc;
 
 /**
@@ -15,13 +15,13 @@ public class PreviewView extends DesignMultiViewDesc {
 
     private int type;
 
-    public PreviewView(NiftyGuiDataObject dObj, int type) {
+    public PreviewView(OldNiftyGuiDataObject dObj, int type) {
         super(dObj, "Design");
         this.type = type;
     }
 
     public org.netbeans.core.spi.multiview.MultiViewElement createElement() {
-        NiftyGuiDataObject dObj = (NiftyGuiDataObject) getDataObject();
+        OldNiftyGuiDataObject dObj = (OldNiftyGuiDataObject) getDataObject();
         return new PreviewToolbarElement(dObj);
     }
 

File: jme3-core/src/main/java/com/jme3/shader/Glsl100ShaderGenerator.java
Patch:
@@ -581,7 +581,7 @@ protected void indent() {
     }
 
     /**
-     * makes sure inPosition attribut is of type vec or vec4
+     * makes sure inPosition attribute is of type vec3 or vec4
      * @param var the inPosition attribute
      */
     private void fixInPositionType(ShaderNodeVariable var) {

File: jme3-core/src/main/java/com/jme3/shader/ShaderUtils.java
Patch:
@@ -117,7 +117,7 @@ public static int getCardinality(String type, String swizzling) {
                     card = 0;
                 }
             } else {
-                card = Integer.parseInt(type.replaceAll("vec", ""));
+                card = Integer.parseInt(type.replaceAll(".*vec", ""));
 
                 if (swizzling.length() > 0) {
                     if (card >= swizzling.length()) {
@@ -138,6 +138,6 @@ public static int getCardinality(String type, String swizzling) {
      * @return true if a variable of the given type can have a swizzle
      */
     public static boolean isSwizzlable(String type) {
-        return type.equals("vec4") || type.equals("vec3") || type.equals("vec2") || type.equals("float");
+        return type.indexOf("vec4")>-1 || type.indexOf("vec3")>-1 || type.indexOf("vec2")>-1 || type.equals("float");
     }
 }

File: jme3-core/src/main/java/com/jme3/texture/Texture.java
Patch:
@@ -339,7 +339,7 @@ public void setMinFilter(MinFilter minificationFilter) {
                     "minificationFilter can not be null.");
         }
         this.minificationFilter = minificationFilter;
-        if (minificationFilter.usesMipMapLevels() && image != null && !image.isGeneratedMipmapsRequired()) {
+        if (minificationFilter.usesMipMapLevels() && image != null && !image.isGeneratedMipmapsRequired() && !image.hasMipmaps()) {
             image.setNeedGeneratedMipmaps();
         }
     }
@@ -631,4 +631,4 @@ public void compareModeUpdated() {
     }
     
     
-}
\ No newline at end of file
+}

File: jme3-core/src/main/java/com/jme3/texture/Texture.java
Patch:
@@ -339,7 +339,7 @@ public void setMinFilter(MinFilter minificationFilter) {
                     "minificationFilter can not be null.");
         }
         this.minificationFilter = minificationFilter;
-        if (minificationFilter.usesMipMapLevels() && image != null && !image.isGeneratedMipmapsRequired()) {
+        if (minificationFilter.usesMipMapLevels() && image != null && !image.isGeneratedMipmapsRequired() && !image.hasMipmaps()) {
             image.setNeedGeneratedMipmaps();
         }
     }
@@ -631,4 +631,4 @@ public void compareModeUpdated() {
     }
     
     
-}
\ No newline at end of file
+}

File: jme3-lwjgl/src/main/java/com/jme3/renderer/lwjgl/TextureUtil.java
Patch:
@@ -307,7 +307,7 @@ public static void uploadTexture(Image image,
                     // or upload slice
                     if (index == -1){
                         GL12.glTexImage3D(target,
-                                          0,
+                                          i,
                                           glFmt.internalFormat,
                                           mipWidth,
                                           mipHeight,

File: jme3-desktop/src/main/java/com/jme3/system/ErrorDialog.java
Patch:
@@ -59,7 +59,7 @@ public ErrorDialog(String message){
      * @param message 
      */
     public static void showDialog(String message){
-        ErrorDialog dialog = new ErrorDialog("Opps, this was bad =S");
+        ErrorDialog dialog = new ErrorDialog(message);
         dialog.setVisible(true);
     }
 }

File: jme3-desktop/src/main/java/com/jme3/system/ErrorDialog.java
Patch:
@@ -59,7 +59,7 @@ public ErrorDialog(String message){
      * @param message 
      */
     public static void showDialog(String message){
-        ErrorDialog dialog = new ErrorDialog("Opps, this was bad =S");
+        ErrorDialog dialog = new ErrorDialog(message);
         dialog.setVisible(true);
     }
 }

File: jme3-core/src/main/java/com/jme3/animation/AnimChannel.java
Patch:
@@ -343,7 +343,7 @@ void update(float tpf, TempVars vars) {
         }
         
         animation.setTime(time, blendAmount, control, this, vars);
-        
+        time += tpf * speed;      
         if (animation.getLength() > 0){
             if (!notified && (time >= animation.getLength() || time < 0)) {
                 if (loopMode == LoopMode.DontLoop) {
@@ -355,7 +355,6 @@ void update(float tpf, TempVars vars) {
                 control.notifyAnimCycleDone(this, animation.getName());
             } 
         }
-        time += tpf * speed;      
         time = AnimationUtils.clampWrapTime(time, animation.getLength(), loopMode);
         if (time < 0){
             // Negative time indicates that speed should be inverted

File: jme3-desktop/src/main/java/com/jme3/system/JmeDesktopSystem.java
Patch:
@@ -52,7 +52,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import javax.imageio.ImageIO;
-import javax.swing.JOptionPane;
 import javax.swing.SwingUtilities;
 
 /**
@@ -87,10 +86,9 @@ public AssetManager newAssetManager() {
     @Override
     public void showErrorDialog(String message) {
         final String msg = message;
-        final String title = "Error in application";
         EventQueue.invokeLater(new Runnable() {
             public void run() {
-                JOptionPane.showMessageDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);
+                ErrorDialog.showDialog(msg);
             }
         });
     }

File: jme3-desktop/src/main/java/com/jme3/system/JmeDesktopSystem.java
Patch:
@@ -52,7 +52,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import javax.imageio.ImageIO;
-import javax.swing.JOptionPane;
 import javax.swing.SwingUtilities;
 
 /**
@@ -87,10 +86,9 @@ public AssetManager newAssetManager() {
     @Override
     public void showErrorDialog(String message) {
         final String msg = message;
-        final String title = "Error in application";
         EventQueue.invokeLater(new Runnable() {
             public void run() {
-                JOptionPane.showMessageDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);
+                ErrorDialog.showDialog(msg);
             }
         });
     }

File: sdk/jme3-core/src/com/jme3/gde/core/appstates/AppStateNode.java
Patch:
@@ -114,7 +114,7 @@ public void syncSceneData(float tpf) {
         for (PropertySet propertySet : getPropertySets()) {
             for (Property<?> property : propertySet.getProperties()) {
                 if (property instanceof SceneExplorerProperty) {
-                    SceneExplorerProperty prop = (SceneExplorerProperty) property;
+                    SceneExplorerProperty<?> prop = (SceneExplorerProperty) property;
                     prop.syncValue();
                 }
             }
@@ -157,7 +157,7 @@ protected Sheet createSheet() {
         return sheet;
     }
 
-    protected Property<?> makeProperty(Object obj, Class returntype, String method, String name) {
+    protected Property<?> makeProperty(Object obj, Class<?> returntype, String method, String name) {
         Property<?> prop = null;
         try {
             prop = new SceneExplorerProperty(appState.getClass().cast(obj), returntype, method, null, this);

File: sdk/jme3-core/src/com/jme3/gde/core/assets/ProjectAssetManager.java
Patch:
@@ -280,7 +280,7 @@ public void assetDependencyNotFound(AssetKey ak, AssetKey ak1) {
      * @param assetKey The asset key to get the file object for
      * @return Either a FileObject for the asset or null if not found.
      */
-    public FileObject getAssetFileObject(AssetKey assetKey) {
+    public FileObject getAssetFileObject(AssetKey<?> assetKey) {
         String name = assetKey.getName();
         return getAssetFileObject(name);
     }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeNode.java
Patch:
@@ -177,12 +177,12 @@ public Action[] getActions(boolean context) {
     }
 
     @Override
-    public Class getExplorerObjectClass() {
+    public Class<?> getExplorerObjectClass() {
         return Node.class;
     }
 
     @Override
-    public Class getExplorerNodeClass() {
+    public Class<?> getExplorerNodeClass() {
         return JmeNode.class;
     }
 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeSpatial.java
Patch:
@@ -343,12 +343,12 @@ protected Sheet createSheet() {
 
     }
 
-    public Class getExplorerObjectClass() {
+    public Class<?> getExplorerObjectClass() {
         return Spatial.class;
     }
 
     @Override
-    public Class getExplorerNodeClass() {
+    public Class<?> getExplorerNodeClass() {
         return JmeSpatial.class;
     }
 

File: engine/src/core/com/jme3/app/StatsAppState.java
Patch:
@@ -81,7 +81,7 @@ public StatsAppState( Node guiNode, BitmapFont guiFont ) {
      *  is because several applications expect to directly access
      *  fpsText... unfortunately.
      */
-    void setFont( BitmapFont guiFont ) {
+    public void setFont( BitmapFont guiFont ) {
         this.guiFont = guiFont;
         this.fpsText = new BitmapText(guiFont, false);
     }

File: jme3-core/src/main/java/com/jme3/app/StatsAppState.java
Patch:
@@ -81,7 +81,7 @@ public StatsAppState( Node guiNode, BitmapFont guiFont ) {
      *  is because several applications expect to directly access
      *  fpsText... unfortunately.
      */
-    void setFont( BitmapFont guiFont ) {
+    public void setFont( BitmapFont guiFont ) {
         this.guiFont = guiFont;
         this.fpsText = new BitmapText(guiFont, false);
     }

File: engine/src/bullet-common/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -210,7 +210,7 @@ public static CollisionShape createBoxShape(Spatial spatial) {
     private static MeshCollisionShape createSingleMeshShape(Geometry geom, Spatial parent) {
         Mesh mesh = geom.getMesh();
         Transform trans = getTransform(geom, parent);
-        if (mesh != null) {
+        if (mesh != null && mesh.getMode() == Mesh.Mode.Triangles) {
             MeshCollisionShape mColl = new MeshCollisionShape(mesh);
             mColl.setScale(trans.getScale());
             return mColl;

File: jme3-bullet/src/common/java/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -210,7 +210,7 @@ public static CollisionShape createBoxShape(Spatial spatial) {
     private static MeshCollisionShape createSingleMeshShape(Geometry geom, Spatial parent) {
         Mesh mesh = geom.getMesh();
         Transform trans = getTransform(geom, parent);
-        if (mesh != null) {
+        if (mesh != null && mesh.getMode() == Mesh.Mode.Triangles) {
             MeshCollisionShape mColl = new MeshCollisionShape(mesh);
             mColl.setScale(trans.getScale());
             return mColl;

File: engine/src/core/com/jme3/scene/Mesh.java
Patch:
@@ -240,8 +240,8 @@ public Mesh deepClone(){
             }
             
             clone.vertexArrayID = -1;
-            clone.vertCount = -1;
-            clone.elementCount = -1;
+            clone.vertCount = vertCount;
+            clone.elementCount = elementCount;
             
             // although this could change
             // if the bone weight/index buffers are modified

File: jme3-core/src/main/java/com/jme3/scene/Mesh.java
Patch:
@@ -240,8 +240,8 @@ public Mesh deepClone(){
             }
             
             clone.vertexArrayID = -1;
-            clone.vertCount = -1;
-            clone.elementCount = -1;
+            clone.vertCount = vertCount;
+            clone.elementCount = elementCount;
             
             // although this could change
             // if the bone weight/index buffers are modified

File: engine/src/core/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -610,7 +610,7 @@ public void read(JmeImporter im) throws IOException {
         InputCapsule ic = (InputCapsule) im.getCapsule(this);
         assetManager = im.getAssetManager();
         nbShadowMaps = ic.readInt("nbShadowMaps", 1);
-        shadowMapSize = ic.readInt("shadowMapSize", 0);
+        shadowMapSize = ic.readFloat("shadowMapSize", 0f);
         shadowIntensity = ic.readFloat("shadowIntensity", 0.7f);
         edgeFilteringMode = ic.readEnum("edgeFilteringMode", EdgeFilteringMode.class, EdgeFilteringMode.Bilinear);
         shadowCompareMode = ic.readEnum("shadowCompareMode", CompareMode.class, CompareMode.Hardware);
@@ -631,4 +631,4 @@ public void write(JmeExporter ex) throws IOException {
         oc.write(flushQueues, "flushQueues", false);
         oc.write(edgesThickness, "edgesThickness", 1.0f);
     }
-}
+}
\ No newline at end of file

File: jme3-core/src/main/java/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -610,7 +610,7 @@ public void read(JmeImporter im) throws IOException {
         InputCapsule ic = (InputCapsule) im.getCapsule(this);
         assetManager = im.getAssetManager();
         nbShadowMaps = ic.readInt("nbShadowMaps", 1);
-        shadowMapSize = ic.readInt("shadowMapSize", 0);
+        shadowMapSize = ic.readFloat("shadowMapSize", 0f);
         shadowIntensity = ic.readFloat("shadowIntensity", 0.7f);
         edgeFilteringMode = ic.readEnum("edgeFilteringMode", EdgeFilteringMode.class, EdgeFilteringMode.Bilinear);
         shadowCompareMode = ic.readEnum("shadowCompareMode", CompareMode.class, CompareMode.Hardware);

File: engine/src/core/com/jme3/scene/shape/Dome.java
Patch:
@@ -250,7 +250,7 @@ public void updateGeometry(Vector3f center, int planes,
                 BufferUtils.populateFromBuffer(tempVa, vb, i);
                 kNormal = tempVa.subtractLocal(center);
                 kNormal.normalizeLocal();
-                if (insideView) {
+                if (!insideView) {
                     nb.put(kNormal.x).put(kNormal.y).put(kNormal.z);
                 } else {
                     nb.put(-kNormal.x).put(-kNormal.y).put(-kNormal.z);
@@ -267,7 +267,7 @@ public void updateGeometry(Vector3f center, int planes,
 
         // pole
         vb.put(center.x).put(center.y + radius).put(center.z);
-        nb.put(0).put(insideView ? 1 : -1).put(0);
+        nb.put(0).put(insideView ? -1 : 1).put(0);
         tb.put(0.5f).put(1.0f);
 
         // allocate connectivity

File: jme3-core/src/main/java/com/jme3/scene/shape/Dome.java
Patch:
@@ -250,7 +250,7 @@ public void updateGeometry(Vector3f center, int planes,
                 BufferUtils.populateFromBuffer(tempVa, vb, i);
                 kNormal = tempVa.subtractLocal(center);
                 kNormal.normalizeLocal();
-                if (insideView) {
+                if (!insideView) {
                     nb.put(kNormal.x).put(kNormal.y).put(kNormal.z);
                 } else {
                     nb.put(-kNormal.x).put(-kNormal.y).put(-kNormal.z);
@@ -267,7 +267,7 @@ public void updateGeometry(Vector3f center, int planes,
 
         // pole
         vb.put(center.x).put(center.y + radius).put(center.z);
-        nb.put(0).put(insideView ? 1 : -1).put(0);
+        nb.put(0).put(insideView ? -1 : 1).put(0);
         tb.put(0.5f).put(1.0f);
 
         // allocate connectivity

File: engine/src/core/com/jme3/input/KeyNames.java
Patch:
@@ -149,7 +149,7 @@ public class KeyNames {
         KEY_NAMES[KEY_BACK] = "Backspace";
         KEY_NAMES[KEY_TAB] = "Tab";
         
-        KEY_NAMES[KEY_SYSRQ] = "SysEq";
+        KEY_NAMES[KEY_SYSRQ] = "SysRq";
         KEY_NAMES[KEY_PAUSE] = "Pause";
         
         KEY_NAMES[KEY_HOME] = "Home";

File: jme3-core/src/main/java/com/jme3/input/KeyNames.java
Patch:
@@ -149,7 +149,7 @@ public class KeyNames {
         KEY_NAMES[KEY_BACK] = "Backspace";
         KEY_NAMES[KEY_TAB] = "Tab";
         
-        KEY_NAMES[KEY_SYSRQ] = "SysEq";
+        KEY_NAMES[KEY_SYSRQ] = "SysRq";
         KEY_NAMES[KEY_PAUSE] = "Pause";
         
         KEY_NAMES[KEY_HOME] = "Home";

File: sdk/jme3-blender/src/com/jme3/gde/blender/filetypes/BlenderFbxDataObject.java
Patch:
@@ -83,7 +83,7 @@ public class BlenderFbxDataObject extends AbstractBlenderImportDataObject {
 
     public BlenderFbxDataObject(FileObject pf, MultiFileLoader loader) throws DataObjectExistsException, IOException {
         super(pf, loader);
-        SUFFIX = "3ds";
+        SUFFIX = "fbx";
 //        registerEditor("application/fbx", false);
     }
 //    @Override

File: jme3-core/src/main/java/com/jme3/shadow/SpotLightShadowRenderer.java
Patch:
@@ -164,6 +164,8 @@ protected void doDisplayFrustumDebug(int shadowMapIndex) {
 
     @Override
     protected void setMaterialParameters(Material material) {    
+         material.setVector3("LightPos", light.getPosition());
+         material.setVector3("LightDir", light.getDirection());
     }
 
     /**

File: engine/src/core/com/jme3/shadow/SpotLightShadowRenderer.java
Patch:
@@ -164,6 +164,8 @@ protected void doDisplayFrustumDebug(int shadowMapIndex) {
 
     @Override
     protected void setMaterialParameters(Material material) {    
+         material.setVector3("LightPos", light.getPosition());
+         material.setVector3("LightDir", light.getDirection());
     }
 
     /**

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/tools/TerrainTool.java
Patch:
@@ -75,7 +75,7 @@ public abstract class TerrainTool {
     protected Geometry markerSecondary;
     protected float radius;
     protected float weight;
-    protected float maxToolSize = 20; // override in sub classes
+    protected float maxToolSize = 50; // override in sub classes
     private boolean doStraightline = false;
     private Vector3f startPress;
     private Vector3f axis;
@@ -212,7 +212,7 @@ else if (markerPrimary.getMesh() instanceof Box)
     }
     
     /**
-     * Changes the appearence of the markers according to the {@code mesh} param.
+     * Changes the appearance of the markers according to the {@code mesh} param.
      * @param mesh possible values are: {@code sphere, box}.
      */
     public void setMesh(Meshes mesh) {

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -126,7 +126,9 @@ public Spatial load(AssetInfo assetInfo) throws IOException {
                             if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
                                 LandscapeHelper landscapeHelper = blenderContext.getHelper(LandscapeHelper.class);
                                 Light ambientLight = landscapeHelper.toAmbientLight(worldStructure);
-                                loadingResults.addLight(new LightNode(null, ambientLight));
+                                if(ambientLight != null) {
+                                    loadingResults.addLight(new LightNode(null, ambientLight));
+                                }
                                 loadingResults.setSky(landscapeHelper.toSky(worldStructure));
                                 loadingResults.setBackgroundColor(landscapeHelper.toBackgroundColor(worldStructure));
                             }

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -126,7 +126,9 @@ public Spatial load(AssetInfo assetInfo) throws IOException {
                             if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
                                 LandscapeHelper landscapeHelper = blenderContext.getHelper(LandscapeHelper.class);
                                 Light ambientLight = landscapeHelper.toAmbientLight(worldStructure);
-                                loadingResults.addLight(new LightNode(null, ambientLight));
+                                if(ambientLight != null) {
+                                    loadingResults.addLight(new LightNode(null, ambientLight));
+                                }
                                 loadingResults.setSky(landscapeHelper.toSky(worldStructure));
                                 loadingResults.setBackgroundColor(landscapeHelper.toBackgroundColor(worldStructure));
                             }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -43,6 +43,7 @@
 import com.jme3.asset.BlenderKey.FeaturesToLoad;
 import com.jme3.asset.BlenderKey.LoadingResults;
 import com.jme3.asset.ModelKey;
+import com.jme3.light.Light;
 import com.jme3.scene.CameraNode;
 import com.jme3.scene.LightNode;
 import com.jme3.scene.Node;
@@ -124,7 +125,8 @@ public Spatial load(AssetInfo assetInfo) throws IOException {
                             String worldName = worldStructure.getName();
                             if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
                                 LandscapeHelper landscapeHelper = blenderContext.getHelper(LandscapeHelper.class);
-                                loadingResults.addLight(landscapeHelper.toAmbientLight(worldStructure));
+                                Light ambientLight = landscapeHelper.toAmbientLight(worldStructure);
+                                loadingResults.addLight(new LightNode(null, ambientLight));
                                 loadingResults.setSky(landscapeHelper.toSky(worldStructure));
                                 loadingResults.setBackgroundColor(landscapeHelper.toBackgroundColor(worldStructure));
                             }

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -43,6 +43,7 @@
 import com.jme3.asset.BlenderKey.FeaturesToLoad;
 import com.jme3.asset.BlenderKey.LoadingResults;
 import com.jme3.asset.ModelKey;
+import com.jme3.light.Light;
 import com.jme3.scene.CameraNode;
 import com.jme3.scene.LightNode;
 import com.jme3.scene.Node;
@@ -124,7 +125,8 @@ public Spatial load(AssetInfo assetInfo) throws IOException {
                             String worldName = worldStructure.getName();
                             if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {
                                 LandscapeHelper landscapeHelper = blenderContext.getHelper(LandscapeHelper.class);
-                                loadingResults.addLight(landscapeHelper.toAmbientLight(worldStructure));
+                                Light ambientLight = landscapeHelper.toAmbientLight(worldStructure);
+                                loadingResults.addLight(new LightNode(null, ambientLight));
                                 loadingResults.setSky(landscapeHelper.toSky(worldStructure));
                                 loadingResults.setBackgroundColor(landscapeHelper.toBackgroundColor(worldStructure));
                             }

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/BlenderContext.java
Patch:
@@ -420,7 +420,7 @@ public void addAnimation(Long ownerOMA, Animation animation) {
             animList = new ArrayList<Animation>();
             animations.put(ownerOMA, animList);
         }
-        animations.put(ownerOMA, animList);
+        animList.add(animation);
     }
     
     /**

File: jme3-blender/src/main/java/com/jme3/scene/plugins/blender/animations/BoneContext.java
Patch:
@@ -140,7 +140,9 @@ public Bone buildBone(List<Bone> bones, Long skeletonOwnerOma, BlenderContext bl
         ObjectHelper objectHelper = blenderContext.getHelper(ObjectHelper.class);
 
         Structure skeletonOwnerObjectStructure = (Structure) blenderContext.getLoadedFeature(skeletonOwnerOma, LoadedFeatureDataType.LOADED_STRUCTURE);
-        Matrix4f invertedObjectOwnerGlobalMatrix = objectHelper.getMatrix(skeletonOwnerObjectStructure, "imat", blenderContext.getBlenderKey().isFixUpAxis());
+        // I could load 'imat' here, but apparently in some older blenders there were bugs or unfinished functionalities that stored ZERO matrix in imat field
+        // loading 'obmat' and inverting it makes us avoid errors in such cases
+        Matrix4f invertedObjectOwnerGlobalMatrix = objectHelper.getMatrix(skeletonOwnerObjectStructure, "obmat", blenderContext.getBlenderKey().isFixUpAxis()).invertLocal();
         if (objectHelper.isParent(skeletonOwnerOma, armatureObjectOMA)) {
             boneMatrixInModelSpace = globalBoneMatrix.mult(invertedObjectOwnerGlobalMatrix);
         } else {

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderContext.java
Patch:
@@ -420,7 +420,7 @@ public void addAnimation(Long ownerOMA, Animation animation) {
             animList = new ArrayList<Animation>();
             animations.put(ownerOMA, animList);
         }
-        animations.put(ownerOMA, animList);
+        animList.add(animation);
     }
     
     /**

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/BoneContext.java
Patch:
@@ -140,7 +140,9 @@ public Bone buildBone(List<Bone> bones, Long skeletonOwnerOma, BlenderContext bl
         ObjectHelper objectHelper = blenderContext.getHelper(ObjectHelper.class);
 
         Structure skeletonOwnerObjectStructure = (Structure) blenderContext.getLoadedFeature(skeletonOwnerOma, LoadedFeatureDataType.LOADED_STRUCTURE);
-        Matrix4f invertedObjectOwnerGlobalMatrix = objectHelper.getMatrix(skeletonOwnerObjectStructure, "imat", blenderContext.getBlenderKey().isFixUpAxis());
+        // I could load 'imat' here, but apparently in some older blenders there were bugs or unfinished functionalities that stored ZERO matrix in imat field
+        // loading 'obmat' and inverting it makes us avoid errors in such cases
+        Matrix4f invertedObjectOwnerGlobalMatrix = objectHelper.getMatrix(skeletonOwnerObjectStructure, "obmat", blenderContext.getBlenderKey().isFixUpAxis()).invertLocal();
         if (objectHelper.isParent(skeletonOwnerOma, armatureObjectOMA)) {
             boneMatrixInModelSpace = globalBoneMatrix.mult(invertedObjectOwnerGlobalMatrix);
         } else {

File: jme3-bullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -190,7 +190,6 @@ public void create() {
 
     private void preTick_native(float f) {
         AppTask task = pQueue.poll();
-        task = pQueue.poll();
         while (task != null) {
             while (task.isCancelled()) {
                 task = pQueue.poll();

File: jme3-jbullet/src/main/java/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -242,7 +242,6 @@ private void setTickCallback() {
             public void internalTick(DynamicsWorld dw, float f) {
                 //execute task list
                 AppTask task = pQueue.poll();
-                task = pQueue.poll();
                 while (task != null) {
                     while (task.isCancelled()) {
                         task = pQueue.poll();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/BoneConstraint.java
Patch:
@@ -6,11 +6,11 @@
 import com.jme3.scene.Spatial;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.BlenderContext.LoadedFeatureDataType;
-import com.jme3.scene.plugins.blender.animations.ArmatureHelper;
 import com.jme3.scene.plugins.blender.animations.BoneContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.file.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import com.jme3.scene.plugins.blender.objects.ObjectHelper;
 
 /**
  * Constraint applied on the bone.
@@ -48,7 +48,7 @@ public boolean validate() {
             }
             // the second part of the if expression verifies if the found node
             // (if any) is an armature node
-            if (blenderContext.getMarkerValue(ArmatureHelper.ARMATURE_NODE_MARKER, nodeTarget) != null) {
+            if (blenderContext.getMarkerValue(ObjectHelper.ARMATURE_NODE_MARKER, nodeTarget) != null) {
                 if (subtargetName.trim().isEmpty()) {
                     LOGGER.log(Level.WARNING, "No bone target specified for constraint: {0}.", name);
                     return false;
@@ -64,7 +64,7 @@ public boolean validate() {
         }
         return true;
     }
-    
+
     @Override
     public void apply(int frame) {
         super.apply(frame);

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -280,7 +280,7 @@ private void renderFilterChain(Renderer r, FrameBuffer sceneFb) {
 
                 }
                 renderProcessing(r, buff, mat);
-                filter.outputdebug();
+                filter.postFilter(r, buff);
             }
         }
     }
@@ -561,4 +561,4 @@ private void setupViewPortFrameBuffer() {
             viewPort.setOutputFrameBuffer(renderFrameBuffer);
         }
     }
-}
+    }

File: engine/src/core/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -280,7 +280,7 @@ private void renderFilterChain(Renderer r, FrameBuffer sceneFb) {
 
                 }
                 renderProcessing(r, buff, mat);
-                filter.outputdebug();
+                filter.postFilter(r, buff);
             }
         }
     }

File: engine/src/core/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -280,6 +280,7 @@ private void renderFilterChain(Renderer r, FrameBuffer sceneFb) {
 
                 }
                 renderProcessing(r, buff, mat);
+                filter.outputdebug();
             }
         }
     }

File: jme3-core/src/main/java/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -280,6 +280,7 @@ private void renderFilterChain(Renderer r, FrameBuffer sceneFb) {
 
                 }
                 renderProcessing(r, buff, mat);
+                filter.outputdebug();
             }
         }
     }

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/ArmatureHelper.java
Patch:
@@ -183,7 +183,7 @@ private BoneTrack[] getTracks250(Structure actionStructure, Skeleton skeleton, B
 
                 Bone bone = skeleton.getBone(boneIndex);
                 Ipo ipo = new Ipo(bezierCurves, fixUpAxis, blenderContext.getBlenderVersion());
-                tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalPosition(), bone.getLocalRotation(), bone.getLocalScale(), 0, ipo.getLastFrame(), fps, false));
+                tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalPosition(), bone.getLocalRotation(), bone.getLocalScale(), 1, ipo.getLastFrame(), fps, false));
             }
         }
         this.equaliseBoneTracks(tracks);
@@ -221,7 +221,7 @@ private BoneTrack[] getTracks249(Structure actionStructure, Skeleton skeleton, B
                     Bone bone = skeleton.getBone(boneIndex);
                     Ipo ipo = ipoHelper.fromIpoStructure(ipoStructure, blenderContext);
                     if (ipo != null) {
-                        tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalPosition(), bone.getLocalRotation(), bone.getLocalScale(), 0, ipo.getLastFrame(), fps, false));
+                        tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalPosition(), bone.getLocalRotation(), bone.getLocalScale(), 1, ipo.getLastFrame(), fps, false));
                     }
                 }
             }

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ObjectAnimationModifier.java
Patch:
@@ -53,7 +53,7 @@ public ObjectAnimationModifier(Ipo ipo, String objectAnimationName, Long objectO
 
         Spatial object = (Spatial) blenderContext.getLoadedFeature(objectOMA, LoadedFeatureDataType.LOADED_FEATURE);
         // calculating track
-        SpatialTrack track = (SpatialTrack) ipo.calculateTrack(-1, object.getLocalTranslation(), object.getLocalRotation(), object.getLocalScale(), 0, ipo.getLastFrame(), fps, true);
+        SpatialTrack track = (SpatialTrack) ipo.calculateTrack(-1, object.getLocalTranslation(), object.getLocalRotation(), object.getLocalScale(), 1, ipo.getLastFrame(), fps, true);
 
         Animation animation = new Animation(objectAnimationName, ipo.getLastFrame() / (float) fps);
         animation.setTracks(new SpatialTrack[] { track });

File: engine/src/desktop/com/jme3/system/Natives.java
Patch:
@@ -152,7 +152,7 @@ public static void extractNativeLib(String sysName, String name, boolean load, b
         // Also check for binaries that are not packed in folders by jme team, e.g. maven artifacts
         if(url == null){
             path = fullname;
-            if(sysName.equals("macosx") && !fullname.contains(".")){
+            if(sysName.equals("macosx") && !name.contains(".")){
                 path = path.replaceAll("dylib","jnilib");
             }
             url = Thread.currentThread().getContextClassLoader().getResource(path);

File: engine/src/core/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -725,6 +725,7 @@ public boolean intersects(Ray ray) {
         float radiusSquared = getRadius() * getRadius();
         float a = diff.dot(diff) - radiusSquared;
         if (a <= 0.0) {
+            vars.release();
             // in sphere
             return true;
         }

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/ArmatureHelper.java
Patch:
@@ -183,7 +183,7 @@ private BoneTrack[] getTracks250(Structure actionStructure, Skeleton skeleton, B
 
                 Bone bone = skeleton.getBone(boneIndex);
                 Ipo ipo = new Ipo(bezierCurves, fixUpAxis, blenderContext.getBlenderVersion());
-                tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalRotation(), 0, ipo.getLastFrame(), fps, false));
+                tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalPosition(), bone.getLocalRotation(), bone.getLocalScale(), 0, ipo.getLastFrame(), fps, false));
             }
         }
         this.equaliseBoneTracks(tracks);
@@ -221,7 +221,7 @@ private BoneTrack[] getTracks249(Structure actionStructure, Skeleton skeleton, B
                     Bone bone = skeleton.getBone(boneIndex);
                     Ipo ipo = ipoHelper.fromIpoStructure(ipoStructure, blenderContext);
                     if (ipo != null) {
-                        tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalRotation(), 0, ipo.getLastFrame(), fps, false));
+                        tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, bone.getLocalPosition(), bone.getLocalRotation(), bone.getLocalScale(), 0, ipo.getLastFrame(), fps, false));
                     }
                 }
             }

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ObjectAnimationModifier.java
Patch:
@@ -26,7 +26,7 @@
     private static final Logger LOGGER = Logger.getLogger(ObjectAnimationModifier.class.getName());
 
     /** Loaded animation data. */
-    private AnimationData            animationData;
+    private AnimationData       animationData;
 
     /**
      * This constructor reads animation of the object itself (without bones) and
@@ -53,7 +53,7 @@ public ObjectAnimationModifier(Ipo ipo, String objectAnimationName, Long objectO
 
         Spatial object = (Spatial) blenderContext.getLoadedFeature(objectOMA, LoadedFeatureDataType.LOADED_FEATURE);
         // calculating track
-        SpatialTrack track = (SpatialTrack) ipo.calculateTrack(-1, object.getLocalRotation(), 0, ipo.getLastFrame(), fps, true);
+        SpatialTrack track = (SpatialTrack) ipo.calculateTrack(-1, object.getLocalTranslation(), object.getLocalRotation(), object.getLocalScale(), 0, ipo.getLastFrame(), fps, true);
 
         Animation animation = new Animation(objectAnimationName, ipo.getLastFrame() / (float) fps);
         animation.setTracks(new SpatialTrack[] { track });

File: engine/src/blender/com/jme3/scene/plugins/blender/file/Structure.java
Patch:
@@ -316,7 +316,7 @@ public static DataType getDataType(String type, BlenderContext blenderContext) t
         /**
          * @return a collection of known primary types names
          */
-        /* package */Collection<String> getKnownPrimaryTypesNames() {
+        /* package */static Collection<String> getKnownPrimaryTypesNames() {
             return PRIMARY_TYPES.keySet();
         }
     }

File: engine/src/core/com/jme3/app/FlyCamAppState.java
Patch:
@@ -87,7 +87,9 @@ public void setEnabled(boolean enabled) {
     public void cleanup() {
         super.cleanup();
 
-        flyCam.unregisterInput();        
+        if (app.getInputManager() != null) {        
+            flyCam.unregisterInput();
+        }        
     }
 
 

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/BoneContext.java
Patch:
@@ -218,6 +218,6 @@ public boolean is(int flagMask) {
 
     @Override
     public String toString() {
-        return "BoneContext: " + bone.getName();
+        return "BoneContext: " + boneName;
     }
 }

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/BoneContext.java
Patch:
@@ -104,7 +104,7 @@ private BoneContext(Structure boneStructure, Long armatureObjectOMA, BoneContext
 
         Spatial armature = (Spatial) objectHelper.toObject(blenderContext.getFileBlock(armatureObjectOMA).getStructure(blenderContext), blenderContext);
         ConstraintHelper constraintHelper = blenderContext.getHelper(ConstraintHelper.class);
-        Matrix4f armatureWorldMatrix = constraintHelper.toMatrix(armature.getWorldTransform());
+        Matrix4f armatureWorldMatrix = constraintHelper.toMatrix(armature.getWorldTransform(), new Matrix4f());
 
         // and now compute the final bone matrix in world space
         globalBoneMatrix = armatureWorldMatrix.mult(globalBoneMatrix);

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintHelper.java
Patch:
@@ -221,7 +221,7 @@ public Transform getTransform(Long oma, String subtargetName, Space space) {
         boolean isArmature = blenderContext.getMarkerValue(ArmatureHelper.ARMATURE_NODE_MARKER, feature) != null;
         if (isArmature) {
             blenderContext.getSkeleton(oma).updateWorldVectors();
-            BoneContext targetBoneContext = blenderContext.getBoneByName(subtargetName);
+            BoneContext targetBoneContext = blenderContext.getBoneByName(oma, subtargetName);
             Bone bone = targetBoneContext.getBone();
             
             if(bone.getParent() == null && (space == Space.CONSTRAINT_SPACE_LOCAL || space == Space.CONSTRAINT_SPACE_PARLOCAL)) {
@@ -298,7 +298,7 @@ public void applyTransform(Long oma, String subtargetName, Space space, Transfor
         boolean isArmature = blenderContext.getMarkerValue(ArmatureHelper.ARMATURE_NODE_MARKER, feature) != null;
         if (isArmature) {
             Skeleton skeleton = blenderContext.getSkeleton(oma);
-            BoneContext targetBoneContext = blenderContext.getBoneByName(subtargetName);
+            BoneContext targetBoneContext = blenderContext.getBoneByName(oma, subtargetName);
             Bone bone = targetBoneContext.getBone();
             
             if(bone.getParent() == null && (space == Space.CONSTRAINT_SPACE_LOCAL || space == Space.CONSTRAINT_SPACE_PARLOCAL)) {

File: engine/src/blender/com/jme3/scene/plugins/blender/objects/ObjectHelper.java
Patch:
@@ -276,7 +276,7 @@ public boolean isParent(Long supposedParentOMA, Long spatialOMA) {
      * @return objects transformation relative to its parent
      */
     public Transform getTransformation(Structure objectStructure, BlenderContext blenderContext) {
-        Matrix4f parentInv = Matrix4f.IDENTITY;
+        Matrix4f parentInv = Matrix4f.IDENTITY.clone();
         Pointer pParent = (Pointer) objectStructure.getFieldValue("parent");
         if(pParent.isNotNull()) {
             Structure parentObjectStructure = (Structure) blenderContext.getLoadedFeature(pParent.getOldMemoryAddress(), LoadedFeatureDataType.LOADED_STRUCTURE);

File: engine/src/core-plugins/com/jme3/shader/plugins/GLSLLoader.java
Patch:
@@ -82,8 +82,8 @@ private ShaderDependencyNode loadNode(Reader reader, String nodeName) {
         StringBuilder sb = new StringBuilder();
         BufferedReader bufReader = new BufferedReader(reader);
         try {
-            while (bufReader.ready()) {
-                String ln = bufReader.readLine();
+            String ln;
+            while ((ln = bufReader.readLine()) != null) {                
                 if (ln.trim().startsWith("#import ")) {
                     ln = ln.trim().substring(8).trim();
                     if (ln.startsWith("\"") && ln.endsWith("\"") && ln.length() > 3) {

File: engine/src/core/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -361,7 +361,7 @@ private void updateLastFilterIndex() {
                 return;
             }
         }
-        if (lastFilterIndex == -1) {
+        if (isInitialized() && lastFilterIndex == -1) {
             //There is no enabled filter, we restore the original framebuffer 
             //to the viewport to bypass the fpp.
             viewPort.setOutputFrameBuffer(outputBuffer);

File: engine/src/core/com/jme3/scene/Node.java
Patch:
@@ -229,7 +229,7 @@ public int getVertexCount() {
      * @param child
      *            the child to attach to this node.
      * @return the number of children maintained by this node.
-     * @throws NullPointerException If child is null.
+     * @throws IllegalArgumentException if child is null.
      */
     public int attachChild(Spatial child) {
         if (child == null)

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshBuilder.java
Patch:
@@ -143,7 +143,7 @@ public void appendFace(int v1, int v2, int v3, boolean smooth, int materialNumbe
             globalVertexReferenceMap.put(materialNumber, vertexReferenceMap);
         }
 
-        faceIndex *= 4;
+        faceIndex *= 3;
         if (quad) {
             vertexColorIndex[1] = 2;
             vertexColorIndex[2] = 3;

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshHelper.java
Patch:
@@ -496,7 +496,7 @@ private List<byte[]> getVerticesColors(Structure meshStructure, BlenderContext b
                 byte g = ((Number) color.getFieldValue("g")).byteValue();
                 byte b = ((Number) color.getFieldValue("b")).byteValue();
                 byte a = ((Number) color.getFieldValue("a")).byteValue();
-                verticesColors.add(new byte[] { b, g, r, a });
+                verticesColors.add(new byte[] { r, g, b, a });
             }
         }
         return verticesColors;
@@ -523,7 +523,7 @@ private Vector3f[][] getVerticesAndNormals(Structure meshStructure, BlenderConte
 
         Pointer pMVert = (Pointer) meshStructure.getFieldValue("mvert");
         List<Structure> mVerts = pMVert.fetchData(blenderContext.getInputStream());
-        if (this.fixUpAxis) {
+        if (fixUpAxis) {
             for (int i = 0; i < count; ++i) {
                 DynamicArray<Number> coordinates = (DynamicArray<Number>) mVerts.get(i).getFieldValue("co");
                 result[i][0] = new Vector3f(coordinates.get(0).floatValue(), coordinates.get(2).floatValue(), -coordinates.get(1).floatValue());

File: engine/src/core/com/jme3/util/NativeObjectManager.java
Patch:
@@ -237,6 +237,7 @@ public void resetObjects(){
             }
         }
         refMap.clear();
+        refQueue = new ReferenceQueue<Object>();
     }
 
 //    public void printObjects(){

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -142,6 +142,8 @@ public Spatial load(AssetInfo assetInfo) throws IOException {
             return loadingResults;
         } catch (BlenderFileException e) {
             throw new IOException(e.getLocalizedMessage(), e);
+        } catch (Exception e) {
+            throw new IOException("Unexpected importer exception occured: " + e.getLocalizedMessage(), e);
         } finally {
             this.clear();
         }

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderModelLoader.java
Patch:
@@ -96,6 +96,8 @@ public Spatial load(AssetInfo assetInfo) throws IOException {
             return modelRoot;
         } catch (BlenderFileException e) {
             throw new IOException(e.getLocalizedMessage(), e);
+        } catch (Exception e) {
+            throw new IOException("Unexpected importer exception occured: " + e.getLocalizedMessage(), e);
         } finally {
             this.clear();
         }

File: engine/src/niftygui/com/jme3/niftygui/JmeBatchRenderBackend.java
Patch:
@@ -451,6 +451,7 @@ public void render() {
       renderManager.setForcedRenderState(renderState);
 
       material.setTexture("ColorMap", textureAtlas);
+      mesh.updateCounts();
       material.render(meshGeometry, renderManager);
       renderManager.setForcedRenderState(null);
     }

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/CombinedTexture.java
Patch:
@@ -206,7 +206,7 @@ public void flatten(Geometry geometry, Long geometriesOMA, LinkedHashMap<String,
                         triangulatedTexture.castToUVS((TriangulatedTexture) resultTexture, blenderContext);
                         // merge triangulated textures
                         for (int i = 0; i < ((TriangulatedTexture) resultTexture).getFaceTextureCount(); ++i) {
-                            ImageUtils.merge(((TriangulatedTexture) resultTexture).getFaceTextureElement(i).image, triangulatedTexture.getImage());
+                            ImageUtils.merge(((TriangulatedTexture) resultTexture).getFaceTextureElement(i).image, triangulatedTexture.getFaceTextureElement(i).image);
                         }
                     }
                 }

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderAWT.java
Patch:
@@ -79,7 +79,7 @@ public Image blend(Image image, Image baseImage, BlenderContext blenderContext)
         for (int dataLayerIndex = 0; dataLayerIndex < depth; ++dataLayerIndex) {
             ByteBuffer data = image.getData(dataLayerIndex);
             data.rewind();
-            ByteBuffer newData = BufferUtils.createByteBuffer(width * height * 4);
+            ByteBuffer newData = BufferUtils.createByteBuffer(data.limit());
 
             int dataIndex = 0, x = 0, y = 0, index = 0;
             while (index < data.limit()) {

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderLuminance.java
Patch:
@@ -50,7 +50,7 @@ public Image blend(Image image, Image baseImage, BlenderContext blenderContext)
         for (int dataLayerIndex = 0; dataLayerIndex < depth; ++dataLayerIndex) {
             ByteBuffer data = image.getData(dataLayerIndex);
             data.rewind();
-            ByteBuffer newData = BufferUtils.createByteBuffer(width * height * 4);
+            ByteBuffer newData = BufferUtils.createByteBuffer(data.limit());
 
             int dataIndex = 0, x = 0, y = 0;
             while (data.hasRemaining()) {

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinition.java
Patch:
@@ -48,7 +48,7 @@ public ConstraintDefinition(Structure constraintData, Long ownerOMA, BlenderCont
             }
         }
         this.blenderContext = blenderContext;
-        constraintHelper = blenderContext.getHelper(ConstraintHelper.class);
+        constraintHelper = (ConstraintHelper) (blenderContext == null ? null : blenderContext.getHelper(ConstraintHelper.class));
         this.ownerOMA = ownerOMA;
     }
 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeTerrainQuad.java
Patch:
@@ -34,7 +34,10 @@
 import com.jme3.gde.core.icons.IconList;
 import com.jme3.terrain.geomipmap.TerrainQuad;
 import java.awt.Image;
+import java.io.IOException;
+import org.openide.cookies.SaveCookie;
 import org.openide.loaders.DataObject;
+import org.openide.nodes.Node;
 import org.openide.nodes.Sheet;
 
 /**

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerTopComponent.java
Patch:
@@ -571,7 +571,7 @@ private void resetCursorButtonActionPerformed(java.awt.event.ActionEvent evt) {/
     }//GEN-LAST:event_resetCursorButtonActionPerformed
 
     private void camToCursorSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camToCursorSelectionButtonActionPerformed
-        camController.setCamFocus(toolController.getCursorLocation());
+        camController.setCamFocus(toolController.getCursorLocation(), true);
     }//GEN-LAST:event_camToCursorSelectionButtonActionPerformed
 
     private void cursorToSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursorToSelectionButtonActionPerformed
@@ -1017,7 +1017,8 @@ public void sceneOpened(SceneRequest request) {
 
             editorController.setToolController(toolController);
             toolController.refreshNonSpatialMarkers();
-
+            toolController.setCamController(camController);
+            
             editorController.setTerrainLodCamera();
             final SpatialAssetDataObject dobj = ((SpatialAssetDataObject) currentRequest.getDataObject());
             listener = new ProjectAssetManager.ClassPathChangeListener() {

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/tools/SelectTool.java
Patch:
@@ -421,7 +421,7 @@ public void actionPrimary(Vector2f screenCoord, boolean pressed, final JmeNode r
                         if (toolController.isSnapToGrid()) {
                             result.set(Math.round(result.x), result.y, Math.round(result.z));
                         }
-                        toolController.doSetCursorLocation(result);
+                        toolController.setCursorLocation(result);
                     }
                 }
             }

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/TerrainToolController.java
Patch:
@@ -80,6 +80,7 @@ public void setEditorController(TerrainEditorController editorController) {
 
     public void setCameraController(TerrainCameraController cameraController) {
         this.cameraController = cameraController;
+        super.setCamController(cameraController);
     }
 
     public void setTopComponent(TerrainEditorTopComponent topComponent) {

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionFactory.java
Patch:
@@ -50,6 +50,7 @@ public class ConstraintDefinitionFactory {
         CONSTRAINT_CLASSES.put("bRotLimitConstraint", ConstraintDefinitionRotLimit.class);
         CONSTRAINT_CLASSES.put("bSizeLikeConstraint", ConstraintDefinitionSizeLike.class);
         CONSTRAINT_CLASSES.put("bSizeLimitConstraint", ConstraintDefinitionSizeLimit.class);
+        CONSTRAINT_CLASSES.put("bKinematicConstraint", ConstraintDefinitionIK.class);
     }
 
     private static final Map<String, String>                                UNSUPPORTED_CONSTRAINTS = new HashMap<String, String>();
@@ -58,7 +59,6 @@ public class ConstraintDefinitionFactory {
         UNSUPPORTED_CONSTRAINTS.put("bChildOfConstraint", "Child of");
         UNSUPPORTED_CONSTRAINTS.put("bClampToConstraint", "Clamp to");
         UNSUPPORTED_CONSTRAINTS.put("bFollowPathConstraint", "Follow path");
-        UNSUPPORTED_CONSTRAINTS.put("bKinematicConstraint", "Inverse kinematic");
         UNSUPPORTED_CONSTRAINTS.put("bLockTrackConstraint", "Lock track");
         UNSUPPORTED_CONSTRAINTS.put("bMinMaxConstraint", "Min max");
         UNSUPPORTED_CONSTRAINTS.put("bPythonConstraint", "Python/Script");

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinitionNull.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.jme3.math.Transform;
 import com.jme3.scene.plugins.blender.BlenderContext;
+import com.jme3.scene.plugins.blender.constraints.ConstraintHelper.Space;
 import com.jme3.scene.plugins.blender.file.Structure;
 
 /**
@@ -16,7 +17,7 @@ public ConstraintDefinitionNull(Structure constraintData, Long ownerOMA, Blender
     }
 
     @Override
-    public void bake(Transform ownerTransform, Transform targetTransform, float influence) {
+    public void bake(Space ownerSpace, Space targetSpace, Transform targetTransform, float influence) {
         // null constraint does nothing so no need to implement this one
     }
 

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/definitions/UnsupportedConstraintDefinition.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints.definitions;
 
 import com.jme3.math.Transform;
+import com.jme3.scene.plugins.blender.constraints.ConstraintHelper.Space;
 
 /**
  * This class represents a constraint that is defined by blender but not
@@ -18,7 +19,7 @@ public UnsupportedConstraintDefinition(String typeName) {
     }
 
     @Override
-    public void bake(Transform ownerTransform, Transform targetTransform, float influence) {
+    public void bake(Space ownerSpace, Space targetSpace, Transform targetTransform, float influence) {
     }
 
     @Override

File: engine/src/core/com/jme3/light/SpotLight.java
Patch:
@@ -76,8 +76,7 @@ private void computePackedCos() {
         if(((int)packedAngleCos)== ((int)(outerCos*1000)) ){
             outerCos -= 0.001f;
         }
-        packedAngleCos+=outerCos;
-        System.out.println("anfle"+ packedAngleCos);
+        packedAngleCos+=outerCos;        
     }
 
     @Override

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintHelper.java
Patch:
@@ -390,7 +390,7 @@ public void applyTransform(Long oma, String subtargetName, Space space, Transfor
      *            the transform to be converted
      * @return 4x4 matrix that represents the given transform
      */
-    private Matrix4f toMatrix(Transform transform) {
+    public Matrix4f toMatrix(Transform transform) {
         Matrix4f result = Matrix4f.IDENTITY;
         if (transform != null) {
             result = this.toMatrix(transform.getTranslation(), transform.getRotation(), transform.getScale());

File: engine/src/test/jme3test/audio/TestMusicStreaming.java
Patch:
@@ -47,6 +47,8 @@ public static void main(String[] args){
     public void simpleInitApp(){
         assetManager.registerLocator("http://www.vorbis.com/music/", UrlLocator.class);
         AudioNode audioSource = new AudioNode(assetManager, "Lumme-Badloop.ogg", true);
+        audioSource.setPositional(false);
+        audioSource.setReverbEnabled(false);
         audioSource.play();
     }
 

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/CombinedTexture.java
Patch:
@@ -269,7 +269,7 @@ public TextureCubeMap generateSkyTexture(ColorRGBA horizontalColor, ColorRGBA ze
         for (TextureData textureData : textureDatas) {
             TextureCubeMap texture = null;
             if (textureData.texture instanceof GeneratedTexture) {
-                texture = ((GeneratedTexture) textureData.texture).generateSkyTexture(size, horizontalColor, zenithColor);
+                texture = ((GeneratedTexture) textureData.texture).generateSkyTexture(size, horizontalColor, zenithColor, blenderContext);
             } else {
                 // first create a grayscale version of the image
                 Image image = textureData.texture.getImage();

File: engine/src/blender/com/jme3/scene/plugins/blender/objects/ObjectHelper.java
Patch:
@@ -214,7 +214,7 @@ public Object toObject(Structure objectStructure, BlenderContext blenderContext)
                 Properties properties = this.loadProperties(objectStructure, blenderContext);
                 // the loaded property is a group property, so we need to get
                 // each value and set it to Spatial
-                if (result instanceof Spatial && properties != null && properties.getValue() != null) {
+                if (properties != null && properties.getValue() != null) {
                     this.applyProperties(result, properties);
                 }
             }

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/ImageUtils.java
Patch:
@@ -336,7 +336,8 @@ public static Image decompress(Image image) {
                             TexturePixel[] colors = new TexturePixel[] { new TexturePixel(), new TexturePixel(), new TexturePixel(), new TexturePixel() };
                             alphas[0] = data.get() * 255.0f;
                             alphas[1] = data.get() * 255.0f;
-                            long alphaIndices = data.get() | data.get() << 8 | data.get() << 16 | data.get() << 24 | data.get() << 32 | data.get() << 40;
+                            //the casts to long must be done here because otherwise 32-bit integers would be shifetd by 32 and 40 bits which would result in improper values
+                            long alphaIndices = (long)data.get() | (long)data.get() << 8 | (long)data.get() << 16 | (long)data.get() << 24 | (long)data.get() << 32 | (long)data.get() << 40;
                             if (alphas[0] > alphas[1]) {// 6 interpolated alpha values.
                                 alphas[2] = (6 * alphas[0] + alphas[1]) / 7;
                                 alphas[3] = (5 * alphas[0] + 2 * alphas[1]) / 7;

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/io/DDSPixelInputOutput.java
Patch:
@@ -102,7 +102,8 @@ public void read(Image image, int layer, TexturePixel pixel, int x, int y) {
                 alphas = new float[8];
                 alphas[0] = data.get() * 255.0f;
                 alphas[1] = data.get() * 255.0f;
-                alphaIndexes = data.get() | data.get() << 8 | data.get() << 16 | data.get() << 24 | data.get() << 32 | data.get() << 40;
+                // the casts to long must be done here because otherwise 32-bit integers would be shifetd by 32 and 40 bits which would result in improper values
+                alphaIndexes = (long)data.get() | (long)data.get() << 8 | (long)data.get() << 16 | (long)data.get() << 24 | (long)data.get() << 32 | (long)data.get() << 40;
                 if (alphas[0] > alphas[1]) {// 6 interpolated alpha values.
                     alphas[2] = (6 * alphas[0] + alphas[1]) / 7;
                     alphas[3] = (5 * alphas[0] + 2 * alphas[1]) / 7;

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureHelper.java
Patch:
@@ -97,6 +97,7 @@ public class TextureHelper extends AbstractBlenderHelper {
     public static final int         TEX_DISTNOISE    = 13;
     public static final int         TEX_POINTDENSITY = 14; // v. 25+
     public static final int         TEX_VOXELDATA    = 15; // v. 25+
+    public static final int         TEX_OCEAN        = 16; // v. 26+
 
     public static final Type[]      TEXCOORD_TYPES = new Type[] { Type.TexCoord, Type.TexCoord2, Type.TexCoord3, Type.TexCoord4, Type.TexCoord5, Type.TexCoord6, Type.TexCoord7, Type.TexCoord8 };
     
@@ -167,6 +168,7 @@ public Texture getTexture(Structure tex, Structure mTex, BlenderContext blenderC
             case TEX_VOXELDATA:
             case TEX_PLUGIN:
             case TEX_ENVMAP:
+            case TEX_OCEAN:
                 LOGGER.log(Level.WARNING, "Unsupported texture type: {0} for texture: {1}", new Object[] { type, tex.getName() });
                 break;
             default:

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/Modifier.java
Patch:
@@ -37,9 +37,8 @@ public abstract class Modifier {
      *            the node that will have modifier applied
      * @param blenderContext
      *            the blender context
-     * @return the node with applied modifier
      */
-    public abstract Node apply(Node node, BlenderContext blenderContext);
+    public abstract void apply(Node node, BlenderContext blenderContext);
 
     /**
      * Determines if the modifier can be applied multiple times over one mesh.

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ObjectAnimationModifier.java
Patch:
@@ -65,7 +65,7 @@ public ObjectAnimationModifier(Ipo ipo, String objectAnimationName, Long objectO
     }
 
     @Override
-    public Node apply(Node node, BlenderContext blenderContext) {
+    public void apply(Node node, BlenderContext blenderContext) {
         if (invalid) {
             LOGGER.log(Level.WARNING, "Armature modifier is invalid! Cannot be applied to: {0}", node.getName());
         }// if invalid, animData will be null
@@ -85,6 +85,5 @@ public Node apply(Node node, BlenderContext blenderContext) {
                 node.addControl(control);
             }
         }
-        return node;
     }
 }

File: engine/src/blender/com/jme3/scene/plugins/blender/materials/MaterialContext.java
Patch:
@@ -158,7 +158,7 @@ public final class MaterialContext {
         boolean transparent = false;
         if (diffuseColor != null) {
             transparent = diffuseColor.a < 1.0f;
-            if (textureDataMap.size() > 0) {// texutre covers the material color
+            if (loadedTextures.size() > 0) {// texutre covers the material color
                 diffuseColor.set(1, 1, 1, 1);
             }
         }

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/tools/SlopeTerrainTool.java
Patch:
@@ -171,7 +171,7 @@ private void updateAngle() {
         float angle = ((FastMath.asin(temp.distance(higher) / lower.distance(higher))) * FastMath.RAD_TO_DEG);
 
         angleText.setText(angle + " degrees");
-        angleText.setLocalTranslation(new Vector3f().interpolate(point1, point2, 0.5f));
+        angleText.setLocalTranslation(new Vector3f().interpolateLocal(point1, point2, 0.5f));
 
         if (line.getParent() == null) {
             parent.attachChild(line);

File: engine/src/core/com/jme3/scene/Mesh.java
Patch:
@@ -1166,7 +1166,9 @@ public void extractVertexData(Mesh other) {
         // Now, create the vertex buffers
         SafeArrayList<VertexBuffer> oldVertexData = other.getBufferList();
         for (VertexBuffer oldVb : oldVertexData) {
-            if (oldVb.getBufferType() == VertexBuffer.Type.Index) {
+            if (oldVb.getBufferType() == VertexBuffer.Type.Index
+                    ||oldVb.getBufferType() == VertexBuffer.Type.HWBoneIndex 
+                    || oldVb.getBufferType() == VertexBuffer.Type.HWBoneWeight  ) {
                 // ignore the index buffer
                 continue;
             }

File: engine/src/core-effects/com/jme3/water/WaterFilter.java
Patch:
@@ -1024,7 +1024,7 @@ public float getReflectionDisplace() {
     public void setReflectionDisplace(float reflectionDisplace) {
         this.reflectionDisplace = reflectionDisplace;
         if (material != null) {
-            material.setFloat("m_ReflectionDisplace", reflectionDisplace);
+            material.setFloat("ReflectionDisplace", reflectionDisplace);
         }
     }
 

File: engine/src/desktop/com/jme3/system/JmeDesktopSystem.java
Patch:
@@ -191,6 +191,9 @@ private JmeContext newContextJogl(AppSettings settings, JmeContext.Type type) {
                 case Canvas:
                     ctxClazz = (Class<? extends JmeContext>) Class.forName("com.jme3.system.jogl.JoglNewtCanvas");
                     break;
+                case OffscreenSurface:
+                    ctxClazz = (Class<? extends JmeContext>) Class.forName("com.jme3.system.jogl.JoglOffscreenBuffer");
+                    break;
                 default:
                     throw new IllegalArgumentException("Unsupported context type " + type);
             }

File: engine/src/jogl/com/jme3/renderer/jogl/TextureUtil.java
Patch:
@@ -297,7 +297,7 @@ public static void uploadTexture(Image image,
                                                 mipWidth,
                                                 mipHeight,
                                                 mipDepth,
-                                                0,
+                                                data.remaining(),
                                                 border,
                                                 data);
                 }else{
@@ -307,7 +307,7 @@ public static void uploadTexture(Image image,
                                                 glFmt.internalFormat,
                                                 mipWidth,
                                                 mipHeight,
-                                                0,
+                                                data.remaining(),
                                                 border,
                                                 data);
                 }

File: engine/src/core/com/jme3/app/Application.java
Patch:
@@ -380,8 +380,6 @@ public void start(JmeContext.Type contextType){
         if (settings == null){
             settings = new AppSettings(true);
         }
-        settings.setRenderer("JOGL");
-        settings.setAudioRenderer("JOAL");
 
         logger.log(Level.FINE, "Starting application: {0}", getClass().getName());
         context = JmeSystem.newContext(settings, contextType);

File: engine/src/core/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -448,7 +448,7 @@ public void postFrame(FrameBuffer out) {
             renderManager.setForcedTechnique(postTechniqueName);
 
             //rendering the post shadow pass
-            viewPort.getQueue().renderShadowQueue(lightReceivers, renderManager, cam, flushQueues);
+            viewPort.getQueue().renderShadowQueue(lightReceivers, renderManager, cam, false);
             if (flushQueues) {
                 sceneReceivers.clear();
             }

File: engine/src/core/com/jme3/shadow/PointLightShadowRenderer.java
Patch:
@@ -127,6 +127,7 @@ protected GeometryList getOccludersToRender(int shadowMapIndex, GeometryList sce
 
     @Override
     GeometryList getReceivers(GeometryList sceneReceivers, GeometryList lightReceivers) {
+        lightReceivers.clear();
         ShadowUtil.getGeometriesInLightRadius(sceneReceivers, shadowCams, lightReceivers);
         return lightReceivers;
     }

File: engine/src/core/com/jme3/shadow/SpotLightShadowRenderer.java
Patch:
@@ -143,6 +143,7 @@ protected GeometryList getOccludersToRender(int shadowMapIndex, GeometryList sce
 
     @Override
     GeometryList getReceivers(GeometryList sceneReceivers, GeometryList lightReceivers) {
+        lightReceivers.clear();
         ShadowUtil.getGeometriesInCamFrustum(sceneReceivers, shadowCam, lightReceivers);
         return lightReceivers;
     }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerToolController.java
Patch:
@@ -450,13 +450,11 @@ protected AudioNode getAudioNode() {
         @Override
         public void setLocalTranslation(Vector3f location) {
             super.setLocalTranslation(location);
-            audio.setLocalTranslation(location);
         }
         
         @Override
         public void setLocalTranslation(float x, float y, float z) {
             super.setLocalTranslation(x, y, z);
-            audio.setLocalTranslation(x, y, z);
         }
     }
     

File: engine/src/test/jme3test/helloworld/HelloTerrain.java
Patch:
@@ -38,7 +38,6 @@
 import com.jme3.terrain.geomipmap.TerrainQuad;
 import com.jme3.terrain.geomipmap.lodcalc.DistanceLodCalculator;
 import com.jme3.terrain.heightmap.AbstractHeightMap;
-import com.jme3.terrain.heightmap.HillHeightMap; // second example
 import com.jme3.terrain.heightmap.ImageBasedHeightMap;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;

File: engine/src/android/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -128,7 +128,7 @@ public Statistics getStatistics() {
     public EnumSet<Caps> getCaps() {
         return caps;
     }
-
+    
     private int extractVersion(String prefixStr, String versionStr) {
         if (versionStr != null) {
             int spaceIdx = versionStr.indexOf(" ", prefixStr.length());
@@ -137,6 +137,8 @@ private int extractVersion(String prefixStr, String versionStr) {
             } else {
                 versionStr = versionStr.substring(prefixStr.length()).trim();
             }
+            //some device have ":" at the end of the version.
+            versionStr = versionStr.replaceAll("\\:", "");
             float version = Float.parseFloat(versionStr);
             return (int) (version * 100);
         } else {

File: engine/src/core/com/jme3/shadow/AbstractShadowRenderer.java
Patch:
@@ -448,7 +448,7 @@ public void postFrame(FrameBuffer out) {
             renderManager.setForcedTechnique(postTechniqueName);
 
             //rendering the post shadow pass
-            viewPort.getQueue().renderShadowQueue(lightReceivers, renderManager, cam, true);
+            viewPort.getQueue().renderShadowQueue(lightReceivers, renderManager, cam, flushQueues);
             if (flushQueues) {
                 sceneReceivers.clear();
             }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/GenerateLODVisualPanel1.java
Patch:
@@ -502,10 +502,10 @@ private void clear(){
     private void reductionMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reductionMethodActionPerformed
         switch ((LodGenerator.TriangleReductionMethod) reductionMethod.getSelectedItem()) {
             case PROPORTIONAL:
-                reductionDescription.setText("Enter float values from 0 to 1.\n each values represent the proportion of triangle to remove from the full mesh.");
+                reductionDescription.setText("Enter float values from 0 to 1.\n each value represent the proportion of triangles to remove from the full mesh.");
                 break;
             case CONSTANT:
-                reductionDescription.setText("Enter integrer values from 0 to " + triSize + " of the mesh.\n each values represent the number of triangle to remove from the full mesh. ");
+                reductionDescription.setText("Enter integrer values from 0 to " + triSize + " of the mesh.\n each value represent the number of triangles to remove from the full mesh. ");
                 break;
             case COLLAPSE_COST:
                 reductionDescription.setText("Don't use this");

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/NiftyJmeDisplay.java
Patch:
@@ -87,11 +87,11 @@ public NiftyJmeDisplay(AssetManager assetManager,
         soundDev = new SoundDeviceJme(assetManager, audioRenderer);
         renderDev = new RenderDeviceJme(this);
         nifty = new Nifty(renderDev, soundDev, inputManager, new TimeProvider());
+        nifty.getResourceLoader().addResourceLocation(resourceLocation);
     }
 
     @Override
     public void initialize(RenderManager rm, ViewPort vp) {
-        nifty.getResourceLoader().addResourceLocation(resourceLocation);
         this.renderManager = rm;
         renderDev.setRenderManager(rm);
         inited = true;

File: sdk/jme3-core/src/com/jme3/gde/core/scene/SceneApplication.java
Patch:
@@ -392,8 +392,8 @@ public void createPreview(final PreviewRequest request) {
      * @param request
      */
     public void openScene(final SceneRequest request) {
-        if (failMessageShown) {
-            NotifyUtil.show("Error starting OpenGL context!", "Click here to go to troubleshooting web page.", MessageType.EXCEPTION, lst, 0);
+        if (!started) {
+            NotifyUtil.show("OpenGL context not started!", "Click here to go to troubleshooting web page.", MessageType.WARNING, lst, 0);
             return;
         }
         closeScene(currentSceneRequest, request);

File: sdk/jme3-upgrader/src/org/netbeans/upgrade/AutoUpgrade.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.swing.JDialog;
 import javax.swing.JOptionPane;
@@ -60,6 +61,7 @@
 import org.openide.filesystems.MultiFileSystem;
 import org.openide.filesystems.XMLFileSystem;
 import org.openide.modules.InstalledFileLocator;
+import org.openide.util.Exceptions;
 import org.openide.util.NbBundle;
 import org.openide.util.Utilities;
 import org.xml.sax.SAXException;

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -600,7 +600,7 @@ private void startSkeleton(String name) {
 
     private void startSubmeshName(String indexStr, String nameStr) {
         int index = Integer.parseInt(indexStr);
-        if (geoms.size() >= index) {
+        if (index >= geoms.size()) {
             logger.log(Level.WARNING, "Submesh name index is larger than number of geometries: {0} >= {1}",
                     new Object[]{index, geoms.size()});
         } else {

File: engine/src/tools/jme3tools/optimize/GeometryBatchFactory.java
Patch:
@@ -333,10 +333,10 @@ public static List<Geometry> makeBatches(Collection<Geometry> geometries, boolea
                 makeLods(geomsForMat, mesh);
             }
             mesh.updateCounts();
-            mesh.updateBound();
-
+           
             Geometry out = new Geometry("batch[" + (batchNum++) + "]", mesh);
             out.setMaterial(mat);
+            out.updateModelBound();
             retVal.add(out);
         }
 

File: engine/src/android/com/jme3/app/AndroidHarness.java
Patch:
@@ -86,7 +86,7 @@ public class AndroidHarness extends Activity implements TouchListener, DialogInt
     protected String audioRendererType = AppSettings.ANDROID_MEDIAPLAYER;
 
     /**
-     * If true Android Sensors are used as simulated Joysticks Users can use the
+     * If true Android Sensors are used as simulated Joysticks. Users can use the
      * Android sensor feedback through the RawInputListener or by registering
      * JoyAxisTriggers.
      */

File: engine/src/niftygui/com/jme3/niftygui/JmeBatchRenderBackend.java
Patch:
@@ -452,6 +452,7 @@ public void render() {
 
       material.setTexture("ColorMap", textureAtlas);
       material.render(meshGeometry, renderManager);
+      renderManager.setForcedRenderState(null);
     }
 
     private RenderState.BlendMode convertBlend(final BlendMode blendMode) {

File: engine/src/core/com/jme3/util/NativeObject.java
Patch:
@@ -208,7 +208,7 @@ void deleteNativeBuffersInternal() {
      */
     public void dispose() {
         if (objectManager != null) {
-            objectManager.markUnusedObject(this);
+            objectManager.enqueueUnusedObject(this);
         }
     }
 }

File: engine/src/android/com/jme3/audio/android/AndroidOpenALSoftAudioRenderer.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-public class AndroidOpenALSoftAudioRenderer implements AudioRenderer, Runnable {
+public class AndroidOpenALSoftAudioRenderer implements AndroidAudioRenderer, Runnable {
 
     private static final Logger logger = Logger.getLogger(AndroidOpenALSoftAudioRenderer.class.getName());
     private final NativeObjectManager objManager = new NativeObjectManager();

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -150,8 +150,7 @@ public PhysicsSpace(Vector3f worldMin, Vector3f worldMax, BroadphaseType broadph
      * Has to be called from the (designated) physics thread
      */
     public void create() {
-        //TODO: boroadphase!
-        physicsSpaceId = createPhysicsSpace(worldMin.x, worldMin.y, worldMin.z, worldMax.x, worldMax.y, worldMax.z, 3, false);
+        physicsSpaceId = createPhysicsSpace(worldMin.x, worldMin.y, worldMin.z, worldMax.x, worldMax.y, worldMax.z, broadphaseType.ordinal(), false);
         pQueueTL.set(pQueue);
         physicsSpaceTL.set(this);
 

File: engine/src/core/com/jme3/scene/shape/Line.java
Patch:
@@ -73,7 +73,7 @@ protected void updateGeometry(Vector3f start, Vector3f end) {
         setBuffer(Type.Normal, 3, new float[]{0, 0, 1,
                                               0, 0, 1});
 
-        setBuffer(Type.Index, 3, new short[]{0, 1});
+        setBuffer(Type.Index, 2, new short[]{0, 1});
 
         updateBound();
     }

File: engine/src/blender/com/jme3/scene/plugins/blender/file/DnaBlockData.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * The data block containing the description of the file.
- * @author Marcin Roguski
+ * @author Marcin Roguski (Kaelthas)
  */
 public class DnaBlockData {
 

File: engine/src/blender/com/jme3/scene/plugins/blender/file/Field.java
Patch:
@@ -281,7 +281,7 @@ private void removeWhitespaces(StringBuilder text) {
      * This method builds the full name of the field (with function, pointer and table indications).
      * @return the full name of the field
      */
-    public String getFullName() {
+    /*package*/ String getFullName() {
         StringBuilder result = new StringBuilder();
         if (function) {
             result.append('(');

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderAWT.java
Patch:
@@ -51,6 +51,7 @@ public TextureBlenderAWT(int flag, boolean negateTexture, int blendType, float[]
         super(flag, negateTexture, blendType, materialColor, color, blendFactor);
     }
 
+    @Override
     public Image blend(Image image, Image baseImage, BlenderContext blenderContext) {
         this.prepareImagesForBlending(image, baseImage);
 

File: engine/src/desktop/com/jme3/app/SettingsDialog.java
Patch:
@@ -59,7 +59,7 @@
  * @author Eric Woroshow
  * @author Joshua Slack - reworked for proper use of GL commands.
  */
-public final class SettingsDialog extends JDialog {
+public final class SettingsDialog extends JFrame {
 
     public static interface SelectionListener {
 
@@ -141,7 +141,7 @@ public SettingsDialog(AppSettings source, URL imageFile, boolean loadSettings) {
         this.source = source;
         this.imageFile = imageFile;
 
-        setModal(true);
+        //setModal(true);
         setAlwaysOnTop(true);
         setResizable(false);
 

File: engine/src/core/com/jme3/app/state/AppStateManager.java
Patch:
@@ -51,7 +51,7 @@
  *                       the state was attached.
  * <li>initialize() : called ONCE on the render thread at the beginning of the next
  *                    AppStateManager.update().
- * <li>stateDetached() : called when the state is attached on the thread on which
+ * <li>stateDetached() : called when the state is detached on the thread on which
  *                       the state was detached.  This is not necessarily on the
  *                       render thread and it is not necessarily safe to modify
  *                       the scene graph, etc..

File: engine/src/core/com/jme3/math/Rectangle.java
Patch:
@@ -39,7 +39,7 @@
  * 
  * <code>Rectangle</code> defines a finite plane within three dimensional space
  * that is specified via three points (A, B, C). These three points define a
- * triangle with the forth point defining the rectangle ((B + C) - A.
+ * triangle with the fourth point defining the rectangle ((B + C) - A.
  * 
  * @author Mark Powell
  * @author Joshua Slack

File: engine/src/test/jme3test/audio/TestAmbient.java
Patch:
@@ -62,6 +62,7 @@ public void simpleInitApp() {
     waves.setRefDistance(5);
 
     nature = new AudioNode(assetManager, "Sound/Environment/Nature.ogg", true);
+    nature.setPositional(false);
     nature.setVolume(3);
     
     waves.playInstance();

File: engine/src/test/jme3test/asset/TestUrlLoading.java
Patch:
@@ -60,9 +60,9 @@ public void simpleInitApp() {
 
         Geometry quad = new Geometry("Textured Quad", quadMesh);
 
-        assetManager.registerLocator("http://www.jmonkeyengine.com/wp-content/uploads/2010/09/",
+        assetManager.registerLocator("https://jmonkeyengine.googlecode.com/svn/BookSamples/assets/Textures/",
                                 UrlLocator.class);
-        TextureKey key = new TextureKey("planet-2.jpg", false);
+        TextureKey key = new TextureKey("mucha-window.png", false);
         key.setGenerateMips(true);
         Texture tex = assetManager.loadTexture(key);
 

File: engine/src/core/com/jme3/animation/AnimChannel.java
Patch:
@@ -362,7 +362,7 @@ public void reset(boolean rewind){
             }
         }
         animation = null;
-        System.out.println("Setting notified false");
+       // System.out.println("Setting notified false");
         notified = false;
     }
 

File: engine/src/test/jme3test/model/shape/TestBox.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String[] args){
 
     @Override
     public void simpleInitApp() {
-        Box b = new Box(Vector3f.ZERO, 1, 1, 1);
+        Box b = new Box(1, 1, 1);
         Geometry geom = new Geometry("Box", b);
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         mat.setTexture("ColorMap", assetManager.loadTexture("Interface/Logo/Monkey.jpg"));

File: engine/src/core/com/jme3/animation/SkeletonControl.java
Patch:
@@ -120,6 +120,7 @@ public void setUseHwSkinning(boolean useHwSkinning) {
                 } catch (java.lang.IllegalArgumentException e) {
                     Logger.getLogger(SkeletonControl.class.getName()).log(Level.INFO, "{0} material doesn't support Hardware Skinning reverting to software", new String[]{m.getName()});
                     setUseHwSkinning(false);
+                    return;
                 }
             } else {
                 if (m.getParam("NumberOfBones") != null) {
@@ -133,8 +134,6 @@ public void setUseHwSkinning(boolean useHwSkinning) {
                 mesh.prepareForAnim(!useHwSkinning); // prepare for software animation
             }
         }
-        if (useHwSkinning) {
-        }
     }
 
     public boolean isUseHwSkinning() {

File: engine/src/core/com/jme3/scene/VertexBuffer.java
Patch:
@@ -145,7 +145,8 @@ public static enum Type {
          * Bone indices, used with animation (4 ubytes).
          * If used with software skinning, the usage should be 
          * {@link Usage#CpuOnly}, and the buffer should be allocated
-         * on the heap.
+         * on the heap as a ubytes buffer. For Hardware skinning this should be
+         * either an int or float buffer due to shader attribute types restrictions.
          */
         BoneIndex,
 

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -100,8 +100,9 @@ public ArmatureModifier(Structure objectStructure, Structure modifierStructure,
                 ObjectHelper objectHelper = blenderContext.getHelper(ObjectHelper.class);
                 
                 if(objectHelper.isLineage(armatureObject, objectStructure, blenderContext)) {
-	                Matrix4f armatureObjectMatrix = objectHelper.getMatrix(armatureObject, "obmat", blenderContext.getBlenderKey().isFixUpAxis());
-	                Matrix4f inverseMeshObjectMatrix = objectHelper.getMatrix(objectStructure, "obmat", true).invertLocal();
+                    boolean fixUpAxis = blenderContext.getBlenderKey().isFixUpAxis();
+	                Matrix4f armatureObjectMatrix = objectHelper.getMatrix(armatureObject, "obmat", fixUpAxis);
+	                Matrix4f inverseMeshObjectMatrix = objectHelper.getMatrix(objectStructure, "imat", fixUpAxis);
 	                objectToArmatureTransformation = armatureObjectMatrix.multLocal(inverseMeshObjectMatrix);
 	                Matrix3f rot = objectToArmatureTransformation.toRotationMatrix();
 	                objectToArmatureTransformation = new Matrix4f();

File: engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -2256,7 +2256,7 @@ public void drawTriangleList(VertexBuffer indexBuf, Mesh mesh, int count) {
                 if (i == stripStart) {
                     elMode = convertElementMode(Mode.TriangleStrip);
                 } else if (i == fanStart) {
-                    elMode = convertElementMode(Mode.TriangleStrip);
+                    elMode = convertElementMode(Mode.TriangleFan);
                 }
                 int elementLength = elementLengths[i];
 

File: engine/src/test/jme3test/model/shape/TestCustomMesh.java
Patch:
@@ -75,12 +75,12 @@ public void simpleInitApp() {
         texCoord[3] = new Vector2f(1,1);
 
         // Indexes. We define the order in which mesh should be constructed
-        int [] indexes = {2,0,1,1,3,2};
+        short[] indexes = {2, 0, 1, 1, 3, 2};
 
         // Setting buffers
         m.setBuffer(Type.Position, 3, BufferUtils.createFloatBuffer(vertices));
         m.setBuffer(Type.TexCoord, 2, BufferUtils.createFloatBuffer(texCoord));
-        m.setBuffer(Type.Index, 1, BufferUtils.createIntBuffer(indexes));
+        m.setBuffer(Type.Index, 1, BufferUtils.createShortBuffer(indexes));
         m.updateBound();
 
         // *************************************************************************

File: engine/src/core/com/jme3/shadow/ShadowUtil.java
Patch:
@@ -473,7 +473,8 @@ public static void updateShadowCamera(GeometryList occluders,
         //from Practical Cascaded Shadow maps adapted to PSSM
         //scale stabilization
         float halfTextureSize = shadowMapSize * 0.5f;
-        if (halfTextureSize != 0) {
+
+        if (halfTextureSize != 0 && scaleX >0 && scaleY>0) {
             float scaleQuantizer = 0.1f;            
             scaleX = 1.0f / FastMath.ceil(1.0f / scaleX * scaleQuantizer) * scaleQuantizer;
             scaleY = 1.0f / FastMath.ceil(1.0f / scaleY * scaleQuantizer) * scaleQuantizer;
@@ -486,7 +487,7 @@ public static void updateShadowCamera(GeometryList occluders,
         //Shadow map stabilization approximation from shaderX 7
         //from Practical Cascaded Shadow maps adapted to PSSM
         //offset stabilization
-        if (halfTextureSize != 0) {
+        if (halfTextureSize != 0  && scaleX >0 && scaleY>0) {
             offsetX = FastMath.ceil(offsetX * halfTextureSize) / halfTextureSize;
             offsetY = FastMath.ceil(offsetY * halfTextureSize) / halfTextureSize;
         }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeAudioNode.java
Patch:
@@ -32,7 +32,7 @@
 package com.jme3.gde.core.sceneexplorer.nodes;
 
 import com.jme3.audio.AudioNode;
-import com.jme3.audio.AudioNode.Status;
+import com.jme3.audio.AudioSource;
 import com.jme3.audio.Filter;
 import com.jme3.gde.core.icons.IconList;
 import com.jme3.gde.core.properties.AudioDataProperty;
@@ -100,7 +100,7 @@ protected Sheet createSheet() {
         set.put(makeProperty(obj, float.class, "getRefDistance", "setRefDistance", "Ref Distance"));
         set.put(makeProperty(obj, float.class, "getTimeOffset", "setTimeOffset", "Time Offset"));
 
-        set.put(makeProperty(obj, Status.class, "getStatus", "setStatus", "Status"));
+        set.put(makeProperty(obj, AudioSource.Status.class, "getStatus", "setStatus", "Status"));
 
         set.put(makeProperty(obj, float.class, "getVolume", "setVolume", "Volume"));
         set.put(makeProperty(obj, Vector3f.class, "getVelocity", "setVelocity", "Velocity"));

File: engine/src/desktop/com/jme3/app/SettingsDialog.java
Patch:
@@ -258,9 +258,8 @@ public void setImage(String image) {
         try {
             URL file = new URL("file:" + image);
             setImage(file);
-            // We can safely ignore the exception - it just means that the user
-            // gave us a bogus file
         } catch (MalformedURLException e) {
+           logger.log(Level.WARNING, "Couldn’t read from file '" + image + "'", e);
         }
     }
 
@@ -503,7 +502,7 @@ private void safeSetIconImages(List<? extends Image> icons) {
             Method setIconImages = getClass().getMethod("setIconImages", List.class);
             setIconImages.invoke(this, icons);
         } catch (Exception e) {
-            return;
+            logger.log(Level.WARNING, "Error setting icon images", e);
         }
     }
 
@@ -697,6 +696,7 @@ private static URL getURL(String file) {
         try {
             url = new URL("file:" + file);
         } catch (MalformedURLException e) {
+            logger.log(Level.WARNING, "Invalid file name '" + file + "'", e);
         }
         return url;
     }

File: engine/src/core/com/jme3/util/BufferUtils.java
Patch:
@@ -195,7 +195,7 @@ public static FloatBuffer createFloatBuffer(Quaternion... data) {
             if (element != null) {
                 buff.put(element.getX()).put(element.getY()).put(element.getZ()).put(element.getW());
             } else {
-                buff.put(0).put(0).put(0);
+                buff.put(0).put(0).put(0).put(0);
             }
         }
         buff.flip();
@@ -217,7 +217,7 @@ public static FloatBuffer createFloatBuffer(Vector4f... data) {
             if (data[x] != null) {
                 buff.put(data[x].getX()).put(data[x].getY()).put(data[x].getZ()).put(data[x].getW());
             } else {
-                buff.put(0).put(0).put(0);
+                buff.put(0).put(0).put(0).put(0);
             }
         }
         buff.flip();

File: sdk/jme3-android/src/com/jme3/gde/android/AndroidSdkTool.java
Patch:
@@ -398,6 +398,8 @@ private static String mainActivityString(String mainClass, String packag) {
                 + "import com.jme3.app.AndroidHarness;\n"
                 + "import android.content.pm.ActivityInfo;\n"
                 + "import com.jme3.system.android.AndroidConfigChooser.ConfigType;\n"
+                + "import java.util.logging.Level;\n"
+                + "import java.util.logging.LogManager;\n"
                 + " \n"
                 + "public class MainActivity extends AndroidHarness{\n"
                 + " \n"

File: sdk/jme3-android/src/com/jme3/gde/android/AndroidSdkTool.java
Patch:
@@ -422,6 +422,8 @@ private static String mainActivityString(String mainClass, String packag) {
                 + "        screenOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n"
                 + "        // Enable MouseEvents being generated from TouchEvents (default = true)\n"
                 + "        mouseEventsEnabled = true;\n"
+                + "        // Set the default logging level (default=Level.INFO, Level.ALL=All Debug Info)\n"
+                + "        LogManager.getLogManager().getLogger(\"\").setLevel(Level.INFO);\n"
                 + "    }\n"
                 + " \n"
                 + "}\n";

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/EditableMatDefFile.java
Patch:
@@ -97,7 +97,7 @@ public final void load(Lookup lookup) {
             lock = matDefFile.lock();
             List<Statement> sta = BlockLanguageParser.parse(obj.getPrimaryFile().getInputStream());
             matDefStructure = new MatDefBlock(sta.get(0));
-            AssetKey matDefKey = new AssetKey(assetManager.getRelativeAssetPath(assetManager.getRelativeAssetPath(matDefFile.getPath())));
+            AssetKey<MaterialDef> matDefKey = new AssetKey<MaterialDef>(assetManager.getRelativeAssetPath(assetManager.getRelativeAssetPath(matDefFile.getPath())));
             assetManager.deleteFromCache(matDefKey);
             materialDef = (MaterialDef) assetManager.loadAsset(assetManager.getRelativeAssetPath(matDefFile.getPath()));
             lock.releaseLock();
@@ -293,7 +293,7 @@ public void propertyChange(PropertyChangeEvent evt) {
     private void applyChange() {
 
         try {
-            EditorCookie ec = (EditorCookie) lookup.lookup(EditorCookie.class);
+            EditorCookie ec = lookup.lookup(EditorCookie.class);
             final StyledDocument doc = ec.getDocument();
             final BadLocationException[] exc = new BadLocationException[]{null};
             NbDocument.runAtomicAsUser(ec.getDocument(), new Runnable() {

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/editor/MatDefEditorlElement.java
Patch:
@@ -210,7 +210,7 @@ private void initDiagram(Lookup lkp) throws NumberFormatException {
         final Lookup.Result<Material> resMat = obj.getLookup().lookupResult(Material.class);
         resMat.addLookupListener(new LookupListener() {
             public void resultChanged(LookupEvent ev) {
-                Collection<Material> col = (Collection<Material>) resMat.allInstances();
+                Collection<? extends Material> col = (Collection<? extends Material>) resMat.allInstances();
                 if (!col.isEmpty()) {
                     Material material = col.iterator().next();
                     diagram1.refreshPreviews(material);

File: engine/src/jogl/com/jme3/input/jogl/NewtKeyInput.java
Patch:
@@ -110,7 +110,6 @@ public void keyPressed(KeyEvent evt) {
             synchronized (eventQueue){
                 eventQueue.add(keyEvent);
             }
-            System.out.println(evt);
         }
     }
 
@@ -125,7 +124,6 @@ public void keyReleased(KeyEvent evt) {
             synchronized (eventQueue){
                 eventQueue.add(keyEvent);
             }
-            System.out.println(evt);
         }
     }
 

File: engine/src/jogl/com/jme3/system/jogl/JoglNewtDisplay.java
Patch:
@@ -47,7 +47,7 @@
 
 public class JoglNewtDisplay extends JoglNewtAbstractDisplay {
     
-    private static final Logger logger = Logger.getLogger(JoglDisplay.class.getName());
+    private static final Logger logger = Logger.getLogger(JoglNewtDisplay.class.getName());
 
     protected AtomicBoolean windowCloseRequest = new AtomicBoolean(false);
     protected AtomicBoolean needClose = new AtomicBoolean(false);

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/fileStructure/MatDefBlock.java
Patch:
@@ -80,7 +80,7 @@ public void removeMatParam(MatParamBlock matParam) {
             techniqueBlock.cleanMappings(vblock, "MatParam", matParam.getName());
             techniqueBlock.cleanMappings(fblock, "MatParam", matParam.getName());
         }
-        fire(REMOVE_MAT_PARAM, null, matParam);
+        fire(REMOVE_MAT_PARAM, matParam, null);
     }
 
     public List<TechniqueBlock> getTechniques() {

File: engine/src/jogl/com/jme3/input/jogl/NewtMouseInput.java
Patch:
@@ -207,7 +207,7 @@ public void mouseExited(MouseEvent awtEvt) {
 
     public void mouseWheelMoved(MouseEvent awtEvt) {
         //FIXME not sure this is the right way to handle this case
-        int dwheel = awtEvt.getWheelRotation();
+        float dwheel = awtEvt.getWheelRotation();
         wheelPos += dwheel * WHEEL_AMP;
         cursorMoved = true;
     }

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/dialog/AddAttributeDialog.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.jme3.gde.materialdefinition.editor.Diagram;
 import com.jme3.scene.VertexBuffer;
-import com.jme3.shader.UniformBinding;
 import java.awt.Point;
 import javax.swing.DefaultComboBoxModel;
 
@@ -25,7 +24,7 @@ public class AddAttributeDialog extends javax.swing.JDialog {
     public AddAttributeDialog(java.awt.Frame parent, boolean modal, Diagram diagram, Point clickPosition) {
         super(parent, modal);
         initComponents();
-        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();
+        DefaultComboBoxModel model = new DefaultComboBoxModel();
 
         for (VertexBuffer.Type attr : VertexBuffer.Type.values()) {
             model.addElement("in" + attr.name());

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/dialog/AddMaterialParameterDialog.java
Patch:
@@ -25,7 +25,7 @@ public class AddMaterialParameterDialog extends javax.swing.JDialog {
     public AddMaterialParameterDialog(java.awt.Frame parent, boolean modal, Diagram diagram, Point clickPosition) {
         super(parent, modal);
         initComponents();
-        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();
+        DefaultComboBoxModel model = new DefaultComboBoxModel();
         model.addElement("Color");
         for (VarType varType : VarType.values()) {
 

File: sdk/jme3-materialeditor/src/com/jme3/gde/materialdefinition/dialog/AddWorldParameterDialog.java
Patch:
@@ -24,7 +24,7 @@ public class AddWorldParameterDialog extends javax.swing.JDialog {
     public AddWorldParameterDialog(java.awt.Frame parent, boolean modal, Diagram diagram, Point clickPosition) {
         super(parent, modal);
         initComponents();
-        DefaultComboBoxModel<UniformBinding> model = new DefaultComboBoxModel<UniformBinding>();
+        DefaultComboBoxModel model = new DefaultComboBoxModel();
 
         for (UniformBinding binding : UniformBinding.values()) {
             model.addElement(binding);

File: engine/src/jogl/com/jme3/system/jogl/JoglNewtAbstractDisplay.java
Patch:
@@ -75,7 +75,8 @@ public abstract class JoglNewtAbstractDisplay extends JoglContext implements GLE
     protected void initGLCanvas() {
         //FIXME use the settings to know whether to use the max programmable profile
         //then call GLProfile.getMaxProgrammable(true);
-        GLCapabilities caps = new GLCapabilities(GLProfile.getMaxFixedFunc(true));
+        //FIXME use the default profile only on embedded devices
+        GLCapabilities caps = new GLCapabilities(GLProfile.getDefault());
         caps.setHardwareAccelerated(true);
         caps.setDoubleBuffered(true);
         caps.setStencilBits(settings.getStencilBits());

File: engine/src/core/com/jme3/animation/AudioTrack.java
Patch:
@@ -68,6 +68,7 @@ public class AudioTrack implements ClonableTrack {
     private float length = 0;
     private boolean initialized = false;
     private boolean started = false;
+    private boolean played = false;
 
     //Animation listener to stop the sound when the animation ends or is changed
     private class OnEndListener implements AnimEventListener {
@@ -121,7 +122,7 @@ public AudioTrack(AudioNode audio, float length, float startOffset) {
      */
     public void setTime(float time, float weight, AnimControl control, AnimChannel channel, TempVars vars) {
 
-        if (time == length) {
+        if (time >= length) {
             return;
         }
         if (!initialized) {

File: engine/src/core/com/jme3/animation/EffectTrack.java
Patch:
@@ -192,7 +192,7 @@ public EffectTrack(ParticleEmitter emitter, float length, float startOffset) {
      */
     public void setTime(float time, float weight, AnimControl control, AnimChannel channel, TempVars vars) {
 
-        if (time == length) {
+        if (time >= length) {
             return;
         }
         //first time adding the Animation listener to stop the track at the end of the animation

File: engine/src/terrain/com/jme3/terrain/geomipmap/MultiTerrainLodControl.java
Patch:
@@ -80,7 +80,7 @@ public void addTerrain(TerrainQuad tq) {
      * the render thread.
      */
     public void removeTerrain(TerrainQuad tq) {
-        removedTerrains.remove(tq);
+        removedTerrains.add(tq);
     }
     
     @Override

File: sdk/jme3-desktop-executables/src/com/jme3/gde/desktop/executables/DesktopExeCompositeProvider.java
Patch:
@@ -65,7 +65,7 @@ public SavePropsListener(ProjectExtensionProperties props, Project project) {
             launch4j = new ProjectExtensionManager("launch4j", "v1.4", new String[]{"jar", "-launch4j-exe"});
             launch4j.setAntTaskLibrary("launch4j");
             launch4j.setDataZip("nbres:/com/jme3/gde/desktop/executables/winapp-data.zip");
-            macapp = new ProjectExtensionManager("macapp", "v1.2", new String[]{"jar", "-mac-app"});
+            macapp = new ProjectExtensionManager("macapp", "v2.0", new String[]{"jar", "-mac-app"});
             macapp.setDataZip("nbres:/com/jme3/gde/desktop/executables/macapp-data.zip");
             linux = new ProjectExtensionManager("linuxlauncher", "v1.1", new String[]{"jar", "-linux-launcher"});
         }

File: engine/src/niftygui/com/jme3/niftygui/SoundHandleJme.java
Patch:
@@ -33,7 +33,7 @@
 
 import com.jme3.asset.AssetManager;
 import com.jme3.audio.AudioNode;
-import com.jme3.audio.AudioNode.Status;
+import com.jme3.audio.AudioSource.Status;
 import com.jme3.audio.AudioRenderer;
 import de.lessvoid.nifty.spi.sound.SoundHandle;
 

File: engine/src/core/com/jme3/cinematic/events/SoundEvent.java
Patch:
@@ -34,6 +34,7 @@
 import com.jme3.animation.LoopMode;
 import com.jme3.app.Application;
 import com.jme3.audio.AudioNode;
+import com.jme3.audio.AudioSource;
 import com.jme3.cinematic.Cinematic;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
@@ -185,7 +186,7 @@ public void onPause() {
 
     @Override
     public void onUpdate(float tpf) {
-        if (audioNode.getStatus() == AudioNode.Status.Stopped) {
+        if (audioNode.getStatus() == AudioSource.Status.Stopped) {
             stop();
         }
     }

File: engine/src/test/jme3test/audio/TestMusicPlayer.java
Patch:
@@ -35,7 +35,7 @@
 import com.jme3.asset.AssetInfo;
 import com.jme3.asset.AssetLoader;
 import com.jme3.audio.*;
-import com.jme3.audio.AudioNode.Status;
+import com.jme3.audio.AudioSource.Status;
 import com.jme3.audio.plugins.OGGLoader;
 import com.jme3.audio.plugins.WAVLoader;
 import com.jme3.system.AppSettings;

File: engine/src/test/jme3test/audio/TestOgg.java
Patch:
@@ -34,6 +34,7 @@
 
 import com.jme3.app.SimpleApplication;
 import com.jme3.audio.AudioNode;
+import com.jme3.audio.AudioSource;
 import com.jme3.audio.LowPassFilter;
 
 public class TestOgg extends SimpleApplication {
@@ -54,7 +55,7 @@ public void simpleInitApp(){
 
     @Override
     public void simpleUpdate(float tpf){
-        if (audioSource.getStatus() != AudioNode.Status.Playing){
+        if (audioSource.getStatus() != AudioSource.Status.Playing){
             audioRenderer.deleteAudioData(audioSource.getAudioData());
 
             System.out.println("Playing with low pass filter");

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -232,8 +232,8 @@ private void applyMaterial(Geometry geom, String matName) {
         
         if (mat == null) {
             logger.log(Level.WARNING, "Cannot locate {0} for model {1}", new Object[]{matName, key});
-            mat = PlaceholderAssets.getPlaceholderMaterial(assetManager);
-            mat.setKey(key);
+            mat = PlaceholderAssets.getPlaceholderMaterial(assetManager);          
+            mat.setKey(new MaterialKey(matName));
         }
 
         if (mat.isTransparent()) {

File: engine/src/test/jme3test/bullet/TestBetterCharacter.java
Patch:
@@ -96,7 +96,6 @@ public void simpleInitApp() {
         // Add a character control to the node so we can add other things and
         // control the model rotation
         physicsCharacter = new BetterCharacterControl(0.3f, 2.5f, 8f);
-        physicsCharacter.setDebugTools(new DebugTools(assetManager));
         characterNode.addControl(physicsCharacter);
         getPhysicsSpace().add(physicsCharacter);
 

File: engine/src/test/jme3test/games/WorldOfInception.java
Patch:
@@ -463,6 +463,7 @@ public String getCoordinates() {
             InceptionLevel cur = this;
             StringBuilder strb = new StringBuilder();
             strb.insert(0, this.getPlayerPosition());
+            strb.insert(0, this.getPositionInParent() + " / ");
             cur = cur.getParent();
             while (cur != null) {
                 strb.insert(0, cur.getPositionInParent() + " / ");

File: engine/src/test/jme3test/games/WorldOfInception.java
Patch:
@@ -465,7 +465,7 @@ public String getCoordinates() {
             strb.insert(0, this.getPlayerPosition());
             cur = cur.getParent();
             while (cur != null) {
-                strb.insert(0, this.getPositionInParent() + " / ");
+                strb.insert(0, cur.getPositionInParent() + " / ");
                 cur = cur.getParent();
             }
             return strb.toString();

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneEditorController.java
Patch:
@@ -578,9 +578,10 @@ public void doAddModel(SpatialAssetDataObject file, Node selected, Vector3f loca
                     selected.worldToLocal(location, localVec);
                     linkNode.setLocalTranslation(localVec);
                 }
+                addSpatialUndo(selected, linkNode, null, jmeRootNode);
             }
+            file.closeAsset();
             refreshSelected();
-            addSpatialUndo(selected, linkNode, null, jmeRootNode);
         } catch (Exception ex) {
             Confirmation msg = new NotifyDescriptor.Confirmation(
                     "Error importing " + file.getName() + "\n" + ex.toString(),

File: engine/src/android/com/jme3/app/AndroidHarness.java
Patch:
@@ -80,12 +80,12 @@ public class AndroidHarness extends Activity implements TouchListener, DialogInt
     /**
      * Flip X axis
      */
-    protected boolean mouseEventsInvertX = true;
+    protected boolean mouseEventsInvertX = false;
 
     /**
      * Flip Y axis
      */
-    protected boolean mouseEventsInvertY = true;
+    protected boolean mouseEventsInvertY = false;
 
     /**
      * if true finish this activity when the jme app is stopped

File: engine/src/core/com/jme3/scene/Spatial.java
Patch:
@@ -1183,7 +1183,7 @@ public Spatial clone(boolean cloneMaterial) {
             clone.controls = new SafeArrayList<Control>(Control.class);
             for (int i = 0; i < controls.size(); i++) {
                 Control newControl = controls.get(i).cloneForSpatial(clone);
-                newControl.setSpatial(this);
+                newControl.setSpatial(clone);
                 clone.controls.add(newControl);
             }
 

File: engine/src/bullet-common/com/jme3/bullet/control/BetterCharacterControl.java
Patch:
@@ -384,6 +384,9 @@ public Vector3f getViewDirection() {
      * gravity vector!
      */
     public void resetForward(Vector3f vec) {
+        if (vec == null) {
+            vec = Vector3f.UNIT_Z;
+        }
         localForward.set(vec);
         updateLocalCoordinateSystem();
     }

File: engine/src/bullet-common/com/jme3/bullet/debug/BulletCharacterDebugControl.java
Patch:
@@ -31,10 +31,7 @@
  */
 package com.jme3.bullet.debug;
 
-import com.jme3.bullet.collision.shapes.CapsuleCollisionShape;
 import com.jme3.bullet.collision.shapes.CollisionShape;
-import com.jme3.bullet.collision.shapes.CylinderCollisionShape;
-import com.jme3.bullet.collision.shapes.SphereCollisionShape;
 import com.jme3.bullet.objects.PhysicsCharacter;
 import com.jme3.bullet.util.DebugShapeFactory;
 import com.jme3.math.Quaternion;
@@ -82,6 +79,7 @@ protected void controlUpdate(float tpf) {
             Node node = (Node) this.spatial;
             node.detachChild(geom);
             geom = DebugShapeFactory.getDebugShape(body.getCollisionShape());
+            geom.setMaterial(debugAppState.DEBUG_PINK);
             node.attachChild(geom);
         }
         applyPhysicsTransform(body.getPhysicsLocation(location), Quaternion.IDENTITY);

File: engine/src/bullet-common/com/jme3/bullet/debug/BulletRigidBodyDebugControl.java
Patch:
@@ -31,10 +31,7 @@
  */
 package com.jme3.bullet.debug;
 
-import com.jme3.bullet.collision.shapes.CapsuleCollisionShape;
 import com.jme3.bullet.collision.shapes.CollisionShape;
-import com.jme3.bullet.collision.shapes.CylinderCollisionShape;
-import com.jme3.bullet.collision.shapes.SphereCollisionShape;
 import com.jme3.bullet.objects.PhysicsRigidBody;
 import com.jme3.bullet.util.DebugShapeFactory;
 import com.jme3.math.Quaternion;
@@ -83,6 +80,7 @@ protected void controlUpdate(float tpf) {
             Node node = (Node) this.spatial;
             node.detachChild(geom);
             geom = DebugShapeFactory.getDebugShape(body.getCollisionShape());
+            geom.setMaterial(debugAppState.DEBUG_BLUE);
             node.attachChild(geom);
         }
         applyPhysicsTransform(body.getPhysicsLocation(location), body.getPhysicsRotation(rotation));

File: engine/src/bullet-common/com/jme3/bullet/debug/BulletCharacterDebugControl.java
Patch:
@@ -84,6 +84,7 @@ protected void controlUpdate(float tpf) {
             }
         }
         applyPhysicsTransform(body.getPhysicsLocation(location), Quaternion.IDENTITY);
+        geom.setLocalScale(body.getCollisionShape().getScale());
     }
 
     @Override

File: engine/src/bullet-common/com/jme3/bullet/debug/BulletGhostObjectDebugControl.java
Patch:
@@ -83,6 +83,7 @@ protected void controlUpdate(float tpf) {
             }
         }
         applyPhysicsTransform(body.getPhysicsLocation(location), Quaternion.IDENTITY);
+        geom.setLocalScale(body.getCollisionShape().getScale());
     }
 
     @Override

File: engine/src/bullet-common/com/jme3/bullet/debug/BulletRigidBodyDebugControl.java
Patch:
@@ -87,6 +87,7 @@ protected void controlUpdate(float tpf) {
             }
         }
         applyPhysicsTransform(body.getPhysicsLocation(location), body.getPhysicsRotation(rotation));
+        geom.setLocalScale(body.getCollisionShape().getScale());
     }
 
     @Override

File: sdk/jme3-vehicle-creator/src/com/jme3/gde/vehiclecreator/VehicleEditorController.java
Patch:
@@ -177,7 +177,7 @@ public void doTestVehicle(Node vehicleNode) {
         testing = true;
         bulletState.getPhysicsSpace().addAll(toolsNode);
         bulletState.getPhysicsSpace().add(vehicleControl);
-        vehicleControl.detachDebugShape();
+//        vehicleControl.detachDebugShape();
 //        cameraController.disable();
 //        if (chaseCam == null) {
 //            chaseCam = new ChaseCamera(SceneApplication.getApplication().getCamera(), vehicleNode);

File: engine/src/bullet-common/com/jme3/bullet/BulletAppState.java
Patch:
@@ -173,7 +173,6 @@ public void initialize(AppStateManager stateManager, Application app) {
         }
         this.app = app;
         this.stateManager = stateManager;
-        initialized = true;
     }
 
     public boolean isInitialized() {
@@ -273,6 +272,7 @@ public void cleanup() {
             executor.shutdown();
             executor = null;
         }
+        initialized = false;
         pSpace.removeTickListener(this);
         pSpace.destroy();
     }

File: engine/src/bullet-common/com/jme3/bullet/BulletAppState.java
Patch:
@@ -171,6 +171,7 @@ public void initialize(AppStateManager stateManager, Application app) {
         if (!initialized) {
             startPhysics();
         }
+        this.app = app;
         this.stateManager = stateManager;
         initialized = true;
     }
@@ -339,5 +340,6 @@ public enum ThreadingType {
          * parallel, update order is kept.<br/> Multiple BulletAppStates will
          * execute in parallel in this mode.
          */
-        PARALLEL,}
+        PARALLEL,
+    }
 }

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -920,7 +920,7 @@ public void setWorldMax(Vector3f worldMax) {
     /**
      * Enable debug display for physics
      * @param manager AssetManager to use to create debug materials
-     * @Deprecated in favor of BulletDebugAppState, use BulletAppState.enableDebug() to add automatically
+     * @Deprecated in favor of BulletDebugAppState, use BulletAppState.setDebugEnabled(boolean) to add automatically
      */
     @Deprecated
     public void enableDebug(AssetManager manager) {

File: engine/src/jbullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -859,7 +859,7 @@ public void setWorldMax(Vector3f worldMax) {
     /**
      * Enable debug display for physics
      * @param manager AssetManager to use to create debug materials
-     * @Deprecated in favor of BulletDebugAppState, use BulletAppState.enableDebug() to add automatically
+     * @Deprecated in favor of BulletDebugAppState, use BulletAppState.setDebugEnabled(boolean) to add automatically
      */
     @Deprecated
     public void enableDebug(AssetManager manager) {

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -920,7 +920,9 @@ public void setWorldMax(Vector3f worldMax) {
     /**
      * Enable debug display for physics
      * @param manager AssetManager to use to create debug materials
+     * @Deprecated in favor of BulletDebugAppState, use BulletAppState.enableDebug() to add automatically
      */
+    @Deprecated
     public void enableDebug(AssetManager manager) {
         debugManager = manager;
     }

File: engine/src/jbullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -859,7 +859,9 @@ public void setWorldMax(Vector3f worldMax) {
     /**
      * Enable debug display for physics
      * @param manager AssetManager to use to create debug materials
+     * @Deprecated in favor of BulletDebugAppState, use BulletAppState.enableDebug() to add automatically
      */
+    @Deprecated
     public void enableDebug(AssetManager manager) {
         debugManager = manager;
     }

File: engine/src/bullet-common/com/jme3/bullet/control/AbstractPhysicsControl.java
Patch:
@@ -119,19 +119,20 @@ protected Quaternion getSpatialRotation() {
     }
 
     /**
-     * Applies a physics location to the spatial
+     * Applies a physics transform to the spatial
      *
      * @param worldLocation
      * @param worldRotation
      */
-    protected void applyPhysicsLocation(Vector3f worldLocation, Quaternion worldRotation) {
+    protected void applyPhysicsTransform(Vector3f worldLocation, Quaternion worldRotation) {
         if (enabled && spatial != null) {
             Vector3f localLocation = spatial.getLocalTranslation();
             Quaternion localRotationQuat = spatial.getLocalRotation();
             if (!applyLocal && spatial.getParent() != null) {
                 localLocation.set(worldLocation).subtractLocal(spatial.getParent().getWorldTranslation());
                 localLocation.divideLocal(spatial.getParent().getWorldScale());
                 tmp_inverseWorldRotation.set(spatial.getParent().getWorldRotation()).inverseLocal().multLocal(localLocation);
+                localRotationQuat.set(worldRotation);
                 tmp_inverseWorldRotation.set(spatial.getParent().getWorldRotation()).inverseLocal().mult(localRotationQuat, localRotationQuat);
 
                 spatial.setLocalTranslation(localLocation);

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -64,7 +64,7 @@
  */
 public class PhysicsSpace {
     
-    private static final Logger logger = logger;
+    private static final Logger logger = Logger.getLogger(PhysicsSpace.class.getName());
     public static final int AXIS_X = 0;
     public static final int AXIS_Y = 1;
     public static final int AXIS_Z = 2;

File: engine/src/jbullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -84,7 +84,7 @@
  */
 public class PhysicsSpace {
 
-    private static final Logger logger = logger;
+    private static final Logger logger = Logger.getLogger(PhysicsSpace.class.getName());
     public static final int AXIS_X = 0;
     public static final int AXIS_Y = 1;
     public static final int AXIS_Z = 2;

File: sdk/jme3-vehicle-creator/src/com/jme3/gde/vehiclecreator/VehicleEditorController.java
Patch:
@@ -210,7 +210,7 @@ public void doStopVehicle() {
         vehicleControl.setLinearVelocity(Vector3f.ZERO);
         vehicleControl.setAngularVelocity(Vector3f.ZERO);
         vehicleControl.resetSuspension();
-        vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
+//        vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
         bulletState.getPhysicsSpace().removeAll(toolsNode);
         bulletState.getPhysicsSpace().remove(vehicleControl);
 //        chaseCam.setEnabled(false);
@@ -376,12 +376,12 @@ public boolean doCheckVehicle(Node rootNode) {
         VehicleControl control = rootNode.getControl(VehicleControl.class);
         if (control == null) {
             vehicleControl = new VehicleControl(new BoxCollisionShape(Vector3f.UNIT_XYZ), 200);
-            vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
+//            vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
             rootNode.addControl(vehicleControl);
             return true;
         } else {
             vehicleControl = control;
-            vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
+//            vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
             return false;
         }
     }

File: sdk/jme3-core/src/com/jme3/gde/core/assets/AssetDataObject.java
Patch:
@@ -253,12 +253,10 @@ public synchronized void saveAsset() throws IOException {
     public synchronized void closeAsset() {
         ProjectAssetManager mgr = getLookup().lookup(ProjectAssetManager.class);
         if (mgr != null && savable != null) {
-            logger.log(Level.INFO, "Closing asset {0}, deleting from cache.", getName());
-            mgr.deleteFromCache(getAssetKey());
             //delete referenced assets too
             for (Iterator<AssetKey> it = assetKeyList.iterator(); it.hasNext();) {
                 AssetKey assetKey1 = it.next();
-                logger.log(Level.INFO, "Removing linked asset {0}, from cache via main asset {1}.", new Object[]{assetKey1.getName(), getName()});
+                logger.log(Level.INFO, "Removing asset {0}, from cache via main asset {1}.", new Object[]{assetKey1.getName(), getName()});
                 mgr.deleteFromCache(assetKey1);
             }
             savable = null;

File: engine/src/lwjgl/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -74,7 +74,7 @@ public void setSystemListener(SystemListener listener){
     }
 
     protected void printContextInitInfo(){
-        logger.log(Level.INFO, "Lwjgl context running on thread {1}", Thread.currentThread().getName());
+        logger.log(Level.INFO, "Lwjgl context running on thread {0}", Thread.currentThread().getName());
 
         logger.log(Level.INFO, "Adapter: {0}", Display.getAdapter());
         logger.log(Level.INFO, "Driver Version: {0}", Display.getVersion());

File: sdk/jme3-core/src/com/jme3/gde/core/assets/ExternalChangeScanner.java
Patch:
@@ -35,8 +35,6 @@
 import com.jme3.gde.core.scene.ApplicationLogHandler;
 import com.jme3.gde.core.scene.SceneApplication;
 import com.jme3.gde.core.util.SpatialUtil;
-import com.jme3.scene.Geometry;
-import com.jme3.scene.SceneGraphVisitorAdapter;
 import com.jme3.scene.Spatial;
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -164,7 +162,7 @@ private void setObservedFilePath(String after) {
                 logger.log(Level.INFO, "{0} listening for external changes on {1}", new Object[]{assetDataObject.getName(), fileObject});
                 originalObject = fileObject;
             } else {
-                logger.log(Level.INFO, "Ignoring old reference to self for {0}", assetDataObject.getName());
+                logger.log(Level.FINE, "Ignoring old reference to self for {0}", assetDataObject.getName());
             }
         } else {
             logger.log(Level.INFO, "Could not get FileObject for file when trying to find original model file. Possibly deleted.");

File: sdk/jme3-core/src/com/jme3/gde/core/scene/ApplicationLogHandler.java
Patch:
@@ -116,15 +116,15 @@ public void publish(LogRecord record) {
                 NotifyUtil.error(thrown);
                 thrown.printStackTrace(io.getErr());
             } else {
-                NotifyUtil.show("Error", formatter.format(record), MessageType.ERROR, listener, 10000);
+                NotifyUtil.show("Error", formatter.format(record), MessageType.ERROR, listener, 0);
                 io.getErr().println(formatter.formatMessage(record));
             }
         } else if (record.getLevel().equals(Level.WARNING)) {
-            NotifyUtil.show("Warning", formatter.formatMessage(record), MessageType.WARNING, listener, 5000);
+            NotifyUtil.show("Warning", formatter.formatMessage(record), MessageType.WARNING, listener, 10000);
             io.getErr().println(formatter.formatMessage(record));
         } else if (record.getLevel().intValue() > 800) {
             //larger than INFO:
-            NotifyUtil.show("Info", formatter.formatMessage(record), MessageType.INFO, listener, 3000);
+            NotifyUtil.show("Info", formatter.formatMessage(record), MessageType.INFO, listener, 6000);
             io.getOut().println(formatter.formatMessage(record));
         } else if (record.getLevel().equals(Level.INFO)) {
             io.getOut().println(formatter.formatMessage(record));

File: engine/src/blender/com/jme3/asset/BlenderKey.java
Patch:
@@ -92,7 +92,7 @@ public class BlenderKey extends ModelKey {
 	 */
 	protected Material							defaultMaterial;
 	/** Face cull mode. By default it is disabled. */
-	protected FaceCullMode						faceCullMode			= FaceCullMode.Off;
+	protected FaceCullMode						faceCullMode			= FaceCullMode.Back;
 	/**
 	 * Variable describes which layers will be loaded. N-th bit set means N-th layer will be loaded.
 	 * If set to -1 then the current layer will be loaded.

File: sdk/jme3-blender/src/com/jme3/gde/blender/BlenderTool.java
Patch:
@@ -374,7 +374,7 @@ private static boolean runBlender(final String file, boolean async) {
         }
         final Frame mainWin = WindowManager.getDefault().getMainWindow();
         assert (mainWin != null);
-        mainWin.setState(Frame.ICONIFIED);
+        mainWin.setExtendedState(Frame.ICONIFIED);
         Runnable r = new Runnable() {
             public void run() {
                 try {
@@ -399,15 +399,15 @@ public void run() {
                     }
                 } catch (Exception ex) {
                     Exceptions.printStackTrace(ex);
+                    successful.set(false);
                 } finally {
                     blenderOpened.set(false);
                     java.awt.EventQueue.invokeLater(new Runnable() {
                         public void run() {
-                            mainWin.setState(Frame.NORMAL);
+                            mainWin.setExtendedState(Frame.NORMAL);
                             mainWin.requestFocus();
                         }
                     });
-                    successful.set(false);
                 }
             }
         };

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/ImageLoader.java
Patch:
@@ -101,21 +101,21 @@ public Image loadImage(InputStream inputStream, ImageType imageType, boolean fli
 				try {
 					result = this.load(inputStream, flipY);
 				} catch (Exception e) {
-					logger.warning("Unable to load image using AWT loader!");
+					LOGGER.warning("Unable to load image using AWT loader!");
 				}
 				break;
 			case DDS:
 				try {
 					result = ddsLoader.load(inputStream);
 				} catch (Exception e) {
-					logger.warning("Unable to load image using DDS loader!");
+					LOGGER.warning("Unable to load image using DDS loader!");
 				}
 				break;
 			case TGA:
 				try {
 					result = TGALoader.load(inputStream, flipY);
 				} catch (Exception e) {
-					logger.warning("Unable to load image using TGA loader!");
+					LOGGER.warning("Unable to load image using TGA loader!");
 				}
 				break;
 			default:

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureHelper.java
Patch:
@@ -504,7 +504,7 @@ protected Texture loadTexture(Structure imageStructure, BlenderContext blenderCo
 				LOGGER.log(Level.FINE, "Reading texture from file: {0}", texturePath);
 				result = this.loadImageFromFile(texturePath, blenderContext);
 			} else {
-				logger.fine("Packed texture. Reading directly from the blend file!");
+				LOGGER.fine("Packed texture. Reading directly from the blend file!");
 				Structure packedFile = pPackedFile.fetchData(blenderContext.getInputStream()).get(0);
 				Pointer pData = (Pointer) packedFile.getFieldValue("data");
 				FileBlockHeader dataFileBlock = blenderContext.getFileBlock(pData.getOldMemoryAddress());

File: sdk/jme3-core/src/com/jme3/gde/core/scene/FakeApplication.java
Patch:
@@ -453,7 +453,7 @@ private void defaultFakeError(boolean severe) {
                 break;
             }
         }
-        showError("Fake app is fake!" + (severe ? "And WTF are you trying to do anyway?\n" : "\n") + trace);
+        showError("Fake app is fake!" + (severe ? "\nAnd WTF are you trying to do anyway?\n" : "\n") + trace);
     }
 
     private void showError(String msg) {

File: engine/src/desktop/com/jme3/system/JmeDesktopSystem.java
Patch:
@@ -186,10 +186,10 @@ private JmeContext newContextJogl(AppSettings settings, JmeContext.Type type) {
             Class<? extends JmeContext> ctxClazz = null;
             switch (type) {
                 case Display:
-                    ctxClazz = (Class<? extends JmeContext>) Class.forName("com.jme3.system.jogl.JoglDisplay");
+                    ctxClazz = (Class<? extends JmeContext>) Class.forName("com.jme3.system.jogl.JoglNewtDisplay");
                     break;
                 case Canvas:
-                    ctxClazz = (Class<? extends JmeContext>) Class.forName("com.jme3.system.jogl.JoglCanvas");
+                    ctxClazz = (Class<? extends JmeContext>) Class.forName("com.jme3.system.jogl.JoglNewtCanvas");
                     break;
                 default:
                     throw new IllegalArgumentException("Unsupported context type " + type);

File: sdk/jme3-core/src/com/jme3/gde/core/scene/SceneApplication.java
Patch:
@@ -291,8 +291,8 @@ public void update() {
         if (!started) {
             try {
                 runQueuedTasks();
-            } catch (Exception e) {
                 getStateManager().update(0);
+            } catch (Exception e) {
                 logger.log(Level.INFO, "Exception calling Tasks:", e);
             }
         } else {

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -333,7 +333,7 @@ private VertexBuffer[] getBoneWeightAndIndexBuffer(Structure meshStructure, int
 								} else if(weight > 0) {//if weight is zero the simply ignore it
 									warnAboutTooManyVertexWeights = true;
 									Entry<Float, Integer> lowestWeightAndIndex = weightToIndexMap.firstEntry();
-									if(lowestWeightAndIndex.getKey() < weight) {
+									if(lowestWeightAndIndex != null && lowestWeightAndIndex.getKey() < weight) {
 										weightsFloatData.put(lowestWeightAndIndex.getValue(), weight);
 										indicesData.put(lowestWeightAndIndex.getValue(), boneIndex.byteValue());
 										weightToIndexMap.remove(lowestWeightAndIndex.getKey());

File: sdk/nbi/stub/ext/components/products/helloworld/src/org/mycompany/ConfigurationLogic.java
Patch:
@@ -190,7 +190,7 @@ public void install(Progress progress) throws InstallationException {
         }
         //normen - JDK install - uses package on OSX
         if (!SystemUtils.isMacOS()) {
-            File javaHome = new File(System.getProperty("java.home"));
+            File javaHome = new File(System.getProperty("java.home")).getParentFile();
             File target = new File(installLocation, "jdk");
             try {
                 FileUtils.copyFile(javaHome, target, true); //FileUtils is one of the NBI core classes, already imported in ConfigurationLogic.java

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/UberAssetLocator.java
Patch:
@@ -148,7 +148,7 @@ private FileObject findFile(AssetKey key) {
         //TODO: better attempt to actually find file.. :)
         String rootPath = this.rootPath != null ? this.rootPath.replace("\\", "/") : null;
         if (rootPath != null) {
-            File file = new File(rootPath + "/" + key.getName());
+            File file = new File(rootPath + key.getName());
             file = FileUtil.normalizeFile(file);
             FileObject fileObject = FileUtil.toFileObject(file);
             if (fileObject != null) {
@@ -198,6 +198,8 @@ public String getDescription() {
         if (file == null) {
             return null;
         }
+        logger.log(Level.INFO, "Got user file input");
+        file = FileUtil.normalizeFile(file);
         return FileUtil.toFileObject(file);
     }
 

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ImportModel.java
Patch:
@@ -265,6 +265,7 @@ public void visit(Geometry geom) {
                                     AssetKey curKey = tex.getKey();
                                     UberAssetInfo newInfo = UberAssetLocator.getInfo(curKey);
                                     if (newInfo != null) {
+                                        logger.log(Level.INFO, "Create new key with name {0}", newInfo.getNewAssetName());
                                         TextureKey newKey = new TextureKey(newInfo.getNewAssetName());
                                         Beans.copyProperties(curKey, newKey);
                                         Texture texture = mgr.loadTexture(newKey);

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/UberAssetLocator.java
Patch:
@@ -99,7 +99,7 @@ public static UberAssetInfo getInfo(AssetKey key) {
             String normalName = uberAssetInfo.getKey().getName();
             if (assetBaseFolder != null) {
                 //sanitize filename by creating new asset key
-                String extendedName = new AssetKey(assetBaseFolder + "/" + normalName).getName();
+                String extendedName = new AssetKey(assetBaseFolder + normalName).getName();
                 logger.log(Level.INFO, "Looking for extended name {0}", extendedName);
                 if (extendedName.equals(key.getName())) {
                     logger.log(Level.INFO, "Found extended name {0}", extendedName);

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ImportModel.java
Patch:
@@ -84,7 +84,6 @@ public void actionPerformed(ActionEvent ev) {
         dialog.setVisible(true);
         dialog.toFront();
         boolean cancelled = wiz.getValue() != WizardDescriptor.FINISH_OPTION;
-        ((ModelImporterWizardPanel3) panels[1]).cleanup();
         if (!cancelled) {
             new Thread(new Runnable() {
                 public void run() {

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ModelImporterWizardPanel3.java
Patch:
@@ -85,7 +85,4 @@ public void storeSettings(Object settings) {
         component.applySettings((WizardDescriptor) settings);
     }
 
-    public void cleanup() {
-        component.cleanup();
-    }
 }

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ImportModel.java
Patch:
@@ -143,8 +143,8 @@ private void copyModel(WizardDescriptor wiz) {
                 if (fileObj != null) {
                     DataObject obj = DataObject.find(fileObj);
                     AssetData data = obj.getLookup().lookup(AssetData.class);
-                    AssetKey assetKey = data.getAssetKey();
                     if (data != null) {
+                        AssetKey assetKey = data.getAssetKey();
                         if (obj instanceof SpatialAssetDataObject) {
                             // Delete models that are not J3O.
                             if (!(obj instanceof BinaryModelDataObject)) {

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ModelImporterVisualPanel1.java
Patch:
@@ -80,7 +80,7 @@ public synchronized void loadKey(File path) {
         manager = null;
         dataObject = null;
         data = null;
-        manager = new ProjectAssetManager(FileUtil.toFileObject(path).getParent(), true);
+        manager = new ProjectAssetManager(FileUtil.toFileObject(path).getParent());
         try {
             dataObject = DataObject.find(FileUtil.toFileObject(path));
             data = dataObject != null ? dataObject.getLookup().lookup(AssetData.class) : null;

File: sdk/jme3-core/src/com/jme3/gde/core/assets/AssetDataObject.java
Patch:
@@ -286,7 +286,7 @@ public void assetRequested(AssetKey ak) {
             if (pm == null || loadingThread != Thread.currentThread()) {
                 return;
             }
-            FileObject obj = pm.getAssetFolder().getFileObject(ak.getName());
+            FileObject obj = pm.getAssetFileObject(ak);
             if (obj != null && !assetList.contains(obj)) {
                 assetList.add(obj);
                 assetKeyList.add(ak);
@@ -298,7 +298,7 @@ public void assetDependencyNotFound(AssetKey ak, AssetKey ak1) {
             if (pm == null || loadingThread != Thread.currentThread()) {
                 return;
             }
-            FileObject obj = pm.getAssetFolder().getFileObject(ak1.getName());
+            FileObject obj = pm.getAssetFileObject(ak1);
             if (obj != null && assetList.contains(obj)) {
                 assetList.remove(obj);
                 assetKeyList.remove(ak1);

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ModelImporterVisualPanel1.java
Patch:
@@ -80,7 +80,7 @@ public synchronized void loadKey(File path) {
         manager = null;
         dataObject = null;
         data = null;
-        manager = new ProjectAssetManager(FileUtil.toFileObject(path).getParent());
+        manager = new ProjectAssetManager(FileUtil.toFileObject(path).getParent(), true);
         try {
             dataObject = DataObject.find(FileUtil.toFileObject(path));
             data = dataObject != null ? dataObject.getLookup().lookup(AssetData.class) : null;

File: engine/src/core/com/jme3/animation/SkeletonControl.java
Patch:
@@ -385,7 +385,7 @@ private void applySkinning(Mesh mesh, Matrix4f[] offsetMatrices) {
 
                 for (int w = maxWeightsPerVert - 1; w >= 0; w--) {
                     float weight = weights[idxWeights];
-                    Matrix4f mat = offsetMatrices[indices[idxWeights++]];
+                    Matrix4f mat = offsetMatrices[indices[idxWeights++] & 0xff];
 
                     rx += (mat.m00 * vtx + mat.m01 * vty + mat.m02 * vtz + mat.m03) * weight;
                     ry += (mat.m10 * vtx + mat.m11 * vty + mat.m12 * vtz + mat.m13) * weight;

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/Ipo.java
Patch:
@@ -140,7 +140,6 @@ public Track calculateTrack(int targetIndex, Quaternion localQuaternionRotation,
 		if (calculatedTrack == null) {
 			// preparing data for track
 			int framesAmount = stopFrame - startFrame;
-			float start = (startFrame - 1.0f) / fps;
 			float timeBetweenFrames = 1.0f / fps;
 
 			float[] times = new float[framesAmount + 1];
@@ -159,7 +158,7 @@ public Track calculateTrack(int targetIndex, Quaternion localQuaternionRotation,
 			// calculating track data
 			for (int frame = startFrame; frame <= stopFrame; ++frame) {
 				int index = frame - startFrame;
-				times[index] = start + (frame - 1) * timeBetweenFrames;
+				times[index] = index * timeBetweenFrames;//start + (frame - 1) * timeBetweenFrames;
 				for (int j = 0; j < bezierCurves.length; ++j) {
 					double value = bezierCurves[j].evaluate(frame, BezierCurve.Y_VALUE);
 					switch (bezierCurves[j].getType()) {

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/IpoHelper.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.animations;
 
 import com.jme3.animation.BoneTrack;
+import com.jme3.math.Quaternion;
 import com.jme3.scene.plugins.blender.AbstractBlenderHelper;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.curves.BezierCurve;
@@ -194,7 +195,7 @@ public int getCurvesAmount() {
 		}
 
 		@Override
-		public BoneTrack calculateTrack(int boneIndex, int startFrame, int stopFrame, int fps, boolean boneTrack) {
+		public BoneTrack calculateTrack(int boneIndex, Quaternion localQuaternionRotation, int startFrame, int stopFrame, int fps, boolean boneTrack) {
 			throw new IllegalStateException("Constatnt ipo object cannot be used for calculating bone tracks!");
 		}
 	}

File: sdk/jme3-core/src/com/jme3/gde/core/appstates/AppStateExplorerTopComponent.java
Patch:
@@ -59,7 +59,7 @@
     preferredID = "AppStateExplorerTopComponent",
 //iconBase="SET/PATH/TO/ICON/HERE", 
 persistenceType = TopComponent.PERSISTENCE_ALWAYS)
-@TopComponent.Registration(mode = "navigator", openAtStartup = true)
+@TopComponent.Registration(mode = "explorer", openAtStartup = true)
 @ActionID(category = "Window", id = "com.jme3.gde.core.appstates.AppStateExplorerTopComponent")
 @ActionReference(path = "Menu/Window" /*, position = 333 */)
 @TopComponent.OpenActionRegistration(

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/AbstractSceneExplorerNode.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.jme3.gde.core.properties.SceneExplorerProperty;
 import com.jme3.gde.core.properties.ScenePropertyChangeListener;
+import com.jme3.gde.core.scene.SceneSyncListener;
 import com.jme3.gde.core.util.DynamicLookup;
 import com.jme3.gde.core.util.PropertyUtils;
 import java.beans.PropertyDescriptor;
@@ -55,7 +56,7 @@
  * @author normenhansen
  */
 @SuppressWarnings("unchecked")
-public abstract class AbstractSceneExplorerNode extends AbstractNode implements SceneExplorerNode, ScenePropertyChangeListener {
+public abstract class AbstractSceneExplorerNode extends AbstractNode implements SceneExplorerNode, ScenePropertyChangeListener, SceneSyncListener {
 
     protected Children jmeChildren;
     protected final InstanceContent lookupContents;
@@ -200,7 +201,7 @@ protected Sheet createSheet() {
         return Sheet.createDefault();
     }
     
-    public void syncSceneData() {
+    public void syncSceneData(float tpf) {
         //TODO: precache structure to avoid locks? Do it backwards, sending the actual bean value?
         for (PropertySet propertySet : getPropertySets()) {
             for (Property<?> property : propertySet.getProperties()) {

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/AtlasBatchGeometry.java
Patch:
@@ -141,7 +141,7 @@ protected Object showWizard(org.openide.nodes.Node node) {
         WizardDescriptor wiz = new WizardDescriptor(new WizardDescriptor.ArrayIterator<WizardDescriptor>(panels));
         // {0} will be replaced by WizardDesriptor.Panel.getComponent().getName()
         wiz.setTitleFormat(new MessageFormat("{0}"));
-        wiz.setTitle("...dialog title...");
+        wiz.setTitle("Create Batch with Texture Atlas");
         if (DialogDisplayer.getDefault().notify(wiz) == WizardDescriptor.FINISH_OPTION) {
             // do something
             return wiz;

File: sdk/jme3-core/src/com/jme3/gde/core/assets/ProjectAssetManager.java
Patch:
@@ -330,7 +330,7 @@ public String[] getMatDefs() {
         return filesWithSuffix("j3md");
     }
     
-    public String[] getFilesWithSuffix(String string){
+    public String[] getAssetsWithSuffix(String string){
         return filesWithSuffix(string);
     }
     

File: sdk/jme3-core/src/com/jme3/gde/core/completion/AssetCompletionProvider.java
Patch:
@@ -162,21 +162,21 @@ protected void query(CompletionResultSet completionResultSet, Document document,
                         }
                         break;
                     case Font:
-                        for (String string : manager.getFilesWithSuffix("fnt")) {
+                        for (String string : manager.getAssetsWithSuffix("fnt")) {
                             if (string.startsWith(filter)) {
                                 completionResultSet.addItem(new AssetCompletionItem(type, string, startOffset, caretOffset));
                             }
                         }
                         break;
                     case Filter:
-                        for (String string : manager.getFilesWithSuffix("j3f")) {
+                        for (String string : manager.getAssetsWithSuffix("j3f")) {
                             if (string.startsWith(filter)) {
                                 completionResultSet.addItem(new AssetCompletionItem(type, string, startOffset, caretOffset));
                             }
                         }
                         break;
                     case Xml:
-                        for (String string : manager.getFilesWithSuffix("xml")) {
+                        for (String string : manager.getAssetsWithSuffix("xml")) {
                             if (string.startsWith(filter)) {
                                 completionResultSet.addItem(new AssetCompletionItem(type, string, startOffset, caretOffset));
                             }

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -177,6 +177,8 @@ public ArmatureModifier(Structure objectStructure, Structure modifierStructure,
 						blenderContext.setAnimData(boneOma, animData);
 					}
 				}
+			} else {
+				modifying = false;
 			}
 		}
 	}

File: sdk/jme3-core/src/com/jme3/gde/core/filters/actions/EnableFiterAction.java
Patch:
@@ -59,7 +59,7 @@ public Void call() throws Exception {
                 Filter filter=context.getFilter();
                 filter.setEnabled(!filter.isEnabled());                        
                 Logger.getLogger(EnableFiterAction.class.getName()).info( (filter.isEnabled()?"Enabled":"Disabled")+" "+filter.getName());
-                context.propertyChange("Enabled", !filter.isEnabled(), filter.isEnabled());
+                context.propertyChange("PROP_USER_CHANGE", "Enabled", !filter.isEnabled(), filter.isEnabled());
               
                 return null;
             }

File: sdk/jme3-core/src/com/jme3/gde/core/properties/AudioTrackProperty.java
Patch:
@@ -85,7 +85,7 @@ public void removePropertyChangeListener(ScenePropertyChangeListener listener) {
     private void notifyListeners(Object before, Object after) {
         for (Iterator<ScenePropertyChangeListener> it = listeners.iterator(); it.hasNext();) {
             ScenePropertyChangeListener propertyChangeListener = it.next();
-            propertyChangeListener.propertyChange(getName(), before, after);
+            propertyChangeListener.propertyChange("PROP_USER_CHANGE", getName(), before, after);
         }
 
     }

File: sdk/jme3-core/src/com/jme3/gde/core/properties/EffectTrackEmitterProperty.java
Patch:
@@ -85,7 +85,7 @@ public void removePropertyChangeListener(ScenePropertyChangeListener listener) {
     private void notifyListeners(Object before, Object after) {
         for (Iterator<ScenePropertyChangeListener> it = listeners.iterator(); it.hasNext();) {
             ScenePropertyChangeListener propertyChangeListener = it.next();
-            propertyChangeListener.propertyChange(getName(), before, after);
+            propertyChangeListener.propertyChange("PROP_USER_CHANGE", getName(), before, after);
         }
 
     }

File: sdk/jme3-core/src/com/jme3/gde/core/properties/ParticleInfluencerProperty.java
Patch:
@@ -88,7 +88,7 @@ public void removePropertyChangeListener(ScenePropertyChangeListener listener) {
     private void notifyListeners(Object before, Object after) {
         for (Iterator<ScenePropertyChangeListener> it = listeners.iterator(); it.hasNext();) {
             ScenePropertyChangeListener propertyChangeListener = it.next();
-            propertyChangeListener.propertyChange(getName(), before, after);
+            propertyChangeListener.propertyChange("PROP_USER_CHANGE", getName(), before, after);
         }
 
     }

File: sdk/jme3-core/src/com/jme3/gde/core/properties/ScenePropertyChangeListener.java
Patch:
@@ -37,5 +37,5 @@
  * @author normenhansen
  */
 public interface ScenePropertyChangeListener {
-    public void propertyChange(String property, Object oldValue, Object newValue);
+    public void propertyChange(String type, String name, Object oldValue, Object newValue);
 }

File: sdk/jme3-core/src/com/jme3/gde/core/properties/UserDataProperty.java
Patch:
@@ -159,7 +159,7 @@ public void removePropertyChangeListener(ScenePropertyChangeListener listener) {
     private void notifyListeners(Object before, Object after) {
         for (Iterator<ScenePropertyChangeListener> it = listeners.iterator(); it.hasNext();) {
             ScenePropertyChangeListener propertyChangeListener = it.next();
-            propertyChangeListener.propertyChange(getName(), before, after);
+            propertyChangeListener.propertyChange("PROP_USER_CHANGE", getName(), before, after);
         }
     }
 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/SceneExplorerTopComponent.java
Patch:
@@ -118,6 +118,7 @@ private void initComponents() {
         jToolBar1 = new javax.swing.JToolBar();
         jButton1 = new javax.swing.JButton();
 
+        jToolBar1.setFloatable(false);
         jToolBar1.setRollover(true);
 
         org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(SceneExplorerTopComponent.class, "SceneExplorerTopComponent.jButton1.text")); // NOI18N

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeGeometry.java
Patch:
@@ -41,7 +41,6 @@
 import java.io.IOException;
 import java.util.concurrent.Callable;
 import org.openide.loaders.DataObject;
-import org.openide.nodes.AbstractNode;
 import org.openide.nodes.Sheet;
 import org.openide.util.ImageUtilities;
 
@@ -144,8 +143,8 @@ public org.openide.nodes.Node[] createNodes(Object key, DataObject key2, boolean
     }
 
     @Override
-    public void propertyChange(String name, final Object before, final Object after) {
-        super.propertyChange(name, before, after);        
+    public void propertyChange(String type, String name, final Object before, final Object after) {
+        super.propertyChange(type, name, before, after);        
         if (name.equals("Material")) {           
             java.awt.EventQueue.invokeLater(new Runnable() {
 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeParticleEmitter.java
Patch:
@@ -154,8 +154,8 @@ protected void createEmbedFields(Class c, Sheet.Set set, Object obj) throws Secu
     }
 
     @Override
-    public void propertyChange(String name, Object before, Object after) {
-        super.propertyChange(name, before, after);
+    public void propertyChange(String type, String name, Object before, Object after) {
+        super.propertyChange(type, name, before, after);
         if (!name.equals("Emit all particles")) {
             fireSave(true);
             firePropertyChange(name, before, after);

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeSpatial.java
Patch:
@@ -294,7 +294,7 @@ public Void call() throws Exception {
 
     @Override
     protected Sheet createSheet() {
-        Sheet sheet = Sheet.createDefault();
+        Sheet sheet = super.createSheet();        
 
         //TODO: multithreading.. but we only read
         Collection<String> dataKeys = spatial.getUserDataKeys();

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeTrack.java
Patch:
@@ -253,8 +253,8 @@ public org.openide.nodes.Node[] createNodes(Object key, DataObject key2, boolean
     }
 
     @Override
-    public void propertyChange(String name, Object before, Object after) {
-        super.propertyChange(name, before, after);
+    public void propertyChange(String type, String name, Object before, Object after) {
+        super.propertyChange(type, name, before, after);
         setName();
     }
     

File: sdk/jme3-core/src/com/jme3/gde/core/appstates/AppStateManagerNode.java
Patch:
@@ -32,7 +32,7 @@
 package com.jme3.gde.core.appstates;
 
 import com.jme3.app.state.AppState;
-import com.jme3.gde.core.appstates.FakeApplication.FakeAppStateManager;
+import com.jme3.gde.core.scene.FakeApplication.FakeAppStateManager;
 import java.util.LinkedList;
 import java.util.List;
 import org.openide.nodes.AbstractNode;

File: engine/src/blender/com/jme3/scene/plugins/blender/curves/CurvesHelper.java
Patch:
@@ -421,6 +421,9 @@ protected List<Geometry> loadNurb(Vector3f loc, Structure nurb, List<Geometry> b
 	 * @return scale on the pointed place along the curve
 	 */
 	protected float getTaperScale(Spline taper, float percent) {
+		if(taper == null) {
+			return 1;//return scale = 1 if no taper is applied
+		}
 		percent = FastMath.clamp(percent, 0, 1);
 		List<Float> segmentLengths = taper.getSegmentsLength();
 		float percentLength = taper.getTotalLength() * percent;

File: engine/src/android/com/jme3/input/android/AndroidInput.java
Patch:
@@ -264,7 +264,7 @@ public boolean onTouch(View view, MotionEvent event) {
             case MotionEvent.ACTION_MOVE:
                 // Convert all pointers into events
                 for (int p = 0; p < event.getPointerCount(); p++) {
-                    lastPos = lastPositions.get(p);
+                    lastPos = lastPositions.get(event.getPointerId(p));
                     if (lastPos == null) {
                         lastPos = new Vector2f(event.getX(p), view.getHeight() - event.getY(p));
                         lastPositions.put(event.getPointerId(p), lastPos);

File: engine/src/core/com/jme3/cinematic/events/MotionEvent.java
Patch:
@@ -62,7 +62,7 @@ public class MotionEvent extends AbstractCinematicEvent implements Control {
     protected float currentValue;
     protected Vector3f direction = new Vector3f();
     protected Vector3f lookAt;
-    protected Vector3f upVector;
+    protected Vector3f upVector = Vector3f.UNIT_Y;
     protected Quaternion rotation;
     protected Direction directionType = Direction.None;
     protected MotionPath path;

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -234,7 +234,7 @@ protected void readFace(){
         vertList.clear();
 
         String line = scan.nextLine().trim();
-        String[] verticies = line.split("\\s");
+        String[] verticies = line.split("\\s+");
         for (String vertex : verticies){
             int v = 0;
             int vt = 0;

File: engine/src/core/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -194,7 +194,7 @@ public ParticleEmitter clone(boolean cloneMaterial) {
 
     public ParticleEmitter(String name, Type type, int numParticles) {
         super(name);
-
+        setBatchHint(BatchHint.Never);
         // ignore world transform, unless user sets inLocalSpace
         this.setIgnoreTransform(true);
 
@@ -235,6 +235,7 @@ public ParticleEmitter(String name, Type type, int numParticles) {
      */
     public ParticleEmitter() {
         super();
+        setBatchHint(BatchHint.Never);
     }
 
     public void setShape(EmitterShape shape) {

File: engine/src/core/com/jme3/font/BitmapTextPage.java
Patch:
@@ -59,7 +59,7 @@ class BitmapTextPage extends Geometry {
 
     BitmapTextPage(BitmapFont font, boolean arrayBased, int page) {
         super("BitmapFont", new Mesh());
-
+        setBatchHint(BatchHint.Never);
         if (font == null) {
             throw new IllegalArgumentException("font cannot be null.");
         }

File: engine/src/core/com/jme3/scene/BatchNode.java
Patch:
@@ -247,7 +247,7 @@ protected void doBatch() {
 
     private void gatherGeomerties(Map<Material, List<Geometry>> map, Spatial n, boolean rebatch) {
 
-        if (n.getClass() == Geometry.class) {
+        if (n instanceof Geometry) {
 
             if (!isBatch(n) && n.getBatchHint() != BatchHint.Never) {
                 Geometry g = (Geometry) n;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainPatch.java
Patch:
@@ -113,10 +113,12 @@ public class TerrainPatch extends Geometry {
 
     public TerrainPatch() {
         super("TerrainPatch");
+        setBatchHint(BatchHint.Never);
     }
     
     public TerrainPatch(String name) {
         super(name);
+        setBatchHint(BatchHint.Never);
     }
 
     public TerrainPatch(String name, int size) {
@@ -171,6 +173,7 @@ public TerrainPatch(String name, int size, Vector3f stepScale,
                     float[] heightMap, Vector3f origin, int totalSize,
                     Vector2f offset, float offsetAmount) {
         super(name);
+        setBatchHint(BatchHint.Never);
         this.size = size;
         this.stepScale = stepScale;
         this.totalSize = totalSize;

File: engine/src/core/com/jme3/math/Quaternion.java
Patch:
@@ -278,6 +278,7 @@ public Quaternion fromAngles(float xAngle, float yAngle, float zAngle) {
     /**
      * <code>toAngles</code> returns this quaternion converted to Euler
      * rotation angles (yaw,roll,pitch).<br/>
+     * Note that the result is not always 100% accurate due to the implications of euler angles.
      * @see <a href="http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm">http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/index.htm</a>
      * 
      * @param angles

File: engine/src/core/com/jme3/math/Quaternion.java
Patch:
@@ -826,7 +826,7 @@ public Quaternion mult(Quaternion q) {
      * quaternion multiplication is not commutative so q * p != p * q.
      *
      * It IS safe for q and res to be the same object.
-     * It IS safe for this and res to be the same object.
+     * It IS NOT safe for this and res to be the same object.
      *
      * @param q
      *            the quaternion to multiply this quaternion by.

File: engine/src/core-effects/com/jme3/post/filters/FadeFilter.java
Patch:
@@ -91,13 +91,11 @@ protected void preFrame(float tpf) {
             if (direction > 0 && value > 1) {
                 value = 1;
                 playing = false;
-                setEnabled(false);
             }
             if (direction < 0 && value < 0) {
                 value = 0;
                 playing = false;
-                setEnabled(false);
-            }
+            }    
         }
     }
 

File: engine/src/core/com/jme3/renderer/RenderManager.java
Patch:
@@ -596,7 +596,7 @@ public void preloadScene(Spatial scene) {
             Mesh mesh = gm.getMesh();
             if (mesh != null) {
                 for (VertexBuffer vb : mesh.getBufferList().getArray()) {
-                    if (vb.getData() != null) {
+                    if (vb.getData() != null && vb.getUsage() != VertexBuffer.Usage.CpuOnly) {
                         renderer.updateBufferData(vb);
                     }
                 }

File: engine/src/niftygui/com/jme3/niftygui/NiftyJmeDisplay.java
Patch:
@@ -174,10 +174,8 @@ public void preFrame(float tpf) {
     public void postQueue(RenderQueue rq) {
         // render nifty before anything else
         renderManager.setCamera(vp.getCamera(), true);
-        renderer.setDepthRange(0, 0);
         //nifty.update();
         nifty.render(false);
-        renderer.setDepthRange(0, 1);
         renderManager.setCamera(vp.getCamera(), false);
     }
 

File: engine/src/jbullet/com/jme3/bullet/collision/shapes/ConeCollisionShape.java
Patch:
@@ -106,15 +106,15 @@ public void write(JmeExporter ex) throws IOException {
         OutputCapsule capsule = ex.getCapsule(this);
         capsule.write(radius, "radius", 0.5f);
         capsule.write(height, "height", 0.5f);
-        capsule.write(axis, "axis", 0.5f);
+        capsule.write(axis, "axis", PhysicsSpace.AXIS_Y);
     }
 
     public void read(JmeImporter im) throws IOException {
         super.read(im);
         InputCapsule capsule = im.getCapsule(this);
         radius = capsule.readFloat("radius", 0.5f);
-        radius = capsule.readFloat("height", 0.5f);
-        radius = capsule.readFloat("axis", 0.5f);
+        height = capsule.readFloat("height", 0.5f);
+        axis = capsule.readInt("axis", PhysicsSpace.AXIS_Y);
         createShape();
     }
 

File: engine/src/niftygui/com/jme3/niftygui/NiftyJmeDisplay.java
Patch:
@@ -100,7 +100,7 @@ public NiftyJmeDisplay(AssetManager assetManager,
 
         soundDev = new SoundDeviceJme(assetManager, audioRenderer);
         renderDev = new RenderDeviceJme(this);
-        inputSys = new InputSystemJme();
+        inputSys = new InputSystemJme(inputManager);
         
         nifty = new Nifty(renderDev, soundDev, inputSys, new TimeProvider());
         inputSys.setNifty(nifty);
@@ -114,7 +114,7 @@ public void initialize(RenderManager rm, ViewPort vp) {
         this.renderManager = rm;
         renderDev.setRenderManager(rm);
         if (inputManager != null) {
-            inputSys.setInputManager(inputManager);
+//            inputSys.setInputManager(inputManager);
             inputManager.addRawInputListener(inputSys);
         }
         inited = true;

File: engine/src/jogl/com/jme3/system/jogl/JoglOffscreenBuffer.java
Patch:
@@ -75,7 +75,7 @@ protected void initInThread(){
         caps.setSampleBuffers(true);
         caps.setNumSamples(samples);
 
-        offscreenDrawable = GLDrawableFactory.getFactory(GLProfile.getMaxFixedFunc(true)).createOffscreenAutoDrawable(null, caps, null, width, width, null);
+        offscreenDrawable = GLDrawableFactory.getFactory(GLProfile.getMaxFixedFunc(true)).createOffscreenAutoDrawable(null, caps, null, width, height, null);
         
         offscreenDrawable.display();
         

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/ArmatureHelper.java
Patch:
@@ -236,7 +236,9 @@ private BoneTrack[] getTracks249(Structure actionStructure, Skeleton skeleton, B
 				if (!p.isNull()) {
 					Structure ipoStructure = p.fetchData(blenderContext.getInputStream()).get(0);
 					Ipo ipo = ipoHelper.fromIpoStructure(ipoStructure, blenderContext);
-					tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, 0, ipo.getLastFrame(), fps, false));
+					if(ipo != null) {
+						tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, 0, ipo.getLastFrame(), fps, false));
+					}
 				}
 			}
 		}

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -325,7 +325,6 @@ private VertexBuffer[] getBoneWeightAndIndexBuffer(Structure meshStructure, int
 							if (boneIndex != null) {
 								float weight = ((Number) deformWeight.getFieldValue("weight")).floatValue();
 								if (weight == 0.0f) {
-									weight = 1;
 									boneIndex = Integer.valueOf(0);
 								}
 								// we apply the weight to all referenced vertices

File: engine/src/core/com/jme3/animation/AnimChannel.java
Patch:
@@ -235,7 +235,7 @@ public float getAnimMaxTime(){
      */
     public void setAnim(String name, float blendTime){
         if (name == null)
-            throw new NullPointerException();
+            throw new IllegalArgumentException("name cannot be null");
 
         if (blendTime < 0f)
             throw new IllegalArgumentException("blendTime cannot be less than zero");

File: engine/src/core/com/jme3/effect/shapes/EmitterBoxShape.java
Patch:
@@ -48,7 +48,7 @@ public EmitterBoxShape() {
 
     public EmitterBoxShape(Vector3f min, Vector3f max) {
         if (min == null || max == null) {
-            throw new NullPointerException();
+            throw new IllegalArgumentException("min or max cannot be null");
         }
 
         this.min = min;

File: engine/src/core/com/jme3/effect/shapes/EmitterSphereShape.java
Patch:
@@ -49,7 +49,7 @@ public EmitterSphereShape() {
 
     public EmitterSphereShape(Vector3f center, float radius) {
         if (center == null) {
-            throw new NullPointerException();
+            throw new IllegalArgumentException("center cannot be null");
         }
 
         if (radius <= 0) {

File: engine/src/core/com/jme3/font/BitmapTextPage.java
Patch:
@@ -61,7 +61,7 @@ class BitmapTextPage extends Geometry {
         super("BitmapFont", new Mesh());
 
         if (font == null) {
-            throw new NullPointerException("'font' cannot be null.");
+            throw new IllegalArgumentException("font cannot be null.");
         }
 
         this.page = page;

File: engine/src/core/com/jme3/input/InputManager.java
Patch:
@@ -131,7 +131,7 @@ public Mapping(String name) {
      */
     public InputManager(MouseInput mouse, KeyInput keys, JoyInput joystick, TouchInput touch) {
         if (keys == null || mouse == null) {
-            throw new NullPointerException("Mouse or keyboard cannot be null");
+            throw new IllegalArgumentException("Mouse or keyboard cannot be null");
         }
 
         this.keys = keys;

File: engine/src/core/com/jme3/scene/Node.java
Patch:
@@ -233,7 +233,7 @@ public int getVertexCount() {
      */
     public int attachChild(Spatial child) {
         if (child == null)
-            throw new NullPointerException();
+            throw new IllegalArgumentException("child cannot be null");
 
         if (child.getParent() != this && child != this) {
             if (child.getParent() != null) {

File: engine/src/core/com/jme3/shadow/BasicShadowRenderer.java
Patch:
@@ -52,7 +52,9 @@
  * it's useful to render shadows in a small scene, but edges might look a bit jagged.
  * 
  * @author Kirill Vainer
+ * @deprecated use {@link DirectionalLightShadowRenderer} with one split.
  */
+@Deprecated
 public class BasicShadowRenderer implements SceneProcessor {
 
     private RenderManager renderManager;
@@ -79,7 +81,7 @@ public BasicShadowRenderer(AssetManager manager, int size) {
         shadowCam = new Camera(size, size);
 
         preshadowMat = new Material(manager, "Common/MatDefs/Shadow/PreShadow.j3md");
-        postshadowMat = new Material(manager, "Common/MatDefs/Shadow/PostShadow.j3md");
+        postshadowMat = new Material(manager, "Common/MatDefs/Shadow/BasicPostShadow.j3md");
         postshadowMat.setTexture("ShadowMap", shadowMap);
 
         dispPic.setTexture(manager, shadowMap, false);

File: engine/src/core/com/jme3/shadow/PssmShadowFilter.java
Patch:
@@ -61,7 +61,9 @@
  * API is basically the same as the PssmShadowRenderer;
  * 
  * @author Rémy Bouquet aka Nehon
+ * @deprecated use {@link DirectionalLightShadowFilter}
  */
+@Deprecated
 public class PssmShadowFilter extends Filter {
 
     private PssmShadowRenderer pssmRenderer;

File: sdk/jme3-welcome-screen/src/com/jme3/gde/welcome/WelcomeScreenTopComponent.java
Patch:
@@ -102,7 +102,6 @@ private void initComponents() {
         jTextPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(WelcomeScreenTopComponent.class, "WelcomeScreenTopComponent.jTextPane1.border.title"))); // NOI18N
         jTextPane1.setFont(new java.awt.Font("Lucida Grande", 2, 12)); // NOI18N
         jTextPane1.setForeground(new java.awt.Color(0, 0, 204));
-        jTextPane1.setCaret(null);
         jTextPane1.setCaretColor(new java.awt.Color(255, 255, 255));
         jTextPane1.setDisabledTextColor(new java.awt.Color(0, 0, 204));
         jTextPane1.setOpaque(false);

File: engine/src/core/com/jme3/font/BitmapFont.java
Patch:
@@ -167,7 +167,7 @@ public void read(JmeImporter im) throws IOException {
     }
 
     public float getLineWidth(CharSequence text){
-    
+
         // This method will probably always be a bit of a maintenance
         // nightmare since it basis its calculation on a different 
         // routine than the Letters class.  The ideal situation would
@@ -243,8 +243,8 @@ public float getLineWidth(CharSequence text){
                 // that we don't care about.
                 if (i == text.length() - 1) {
                     lineWidth += c.getWidth() * sizeScale;
-                    
-                    // Since theh width includes the xOffset then we need
+ 
+                    // Since the width includes the xOffset then we need
                     // to take it out again by adding it, ie: offset the width
                     // we just added by the appropriate amount.
                     lineWidth += c.getXOffset() * sizeScale;                      

File: engine/src/core/com/jme3/font/BitmapText.java
Patch:
@@ -382,6 +382,7 @@ public void setEllipsisChar(char c) {
      * @param wrap NoWrap   : Letters over the text bound is not shown. the last character is set to '...'(0x2026)
      *             Character: Character is split at the end of the line.
      *             Word     : Word is split at the end of the line.
+     *             Clip     : The text is hard-clipped at the border including showing only a partial letter if it goes beyond the text bound.
      */
     public void setLineWrapMode(LineWrapMode wrap) {
         if (block.getLineWrapMode() != wrap) {

File: engine/src/core/com/jme3/font/LineWrapMode.java
Patch:
@@ -38,5 +38,6 @@
 public enum LineWrapMode {
     NoWrap,
     Character,
-    Word
+    Word,
+    Clip
 }

File: engine/src/niftygui/com/jme3/niftygui/NiftyJmeDisplay.java
Patch:
@@ -171,8 +171,10 @@ public void preFrame(float tpf) {
     public void postQueue(RenderQueue rq) {
         // render nifty before anything else
         renderManager.setCamera(vp.getCamera(), true);
+        renderer.setDepthRange(0, 0);
         //nifty.update();
         nifty.render(false);
+        renderer.setDepthRange(0, 1);
         renderManager.setCamera(vp.getCamera(), false);
     }
 

File: sdk/jme3-core/src/com/jme3/gde/core/properties/EmitterShapePropertyEditor.java
Patch:
@@ -123,7 +123,7 @@ public String getAsText() {
     public void setAsText(String text) throws IllegalArgumentException {
         text = text.replace('[', ' ').trim();
         text = text.replace(']', ' ').trim();
-        String[] strings = text.split(",");
+        String[] strings = text.split("\\s*(,|\\s)\\s*");
         EmitterShape old=emitter;
         if (strings.length == 0) {
             return;

File: engine/src/core/com/jme3/shadow/PssmShadowFilter.java
Patch:
@@ -146,7 +146,7 @@ public float getLambda() {
         return pssmRenderer.getLambda();
     }
 
-    /*
+    /**
      * Adjust the repartition of the different shadow maps in the shadow extend
      * usualy goes from 0.0 to 1.0
      * a low value give a more linear repartition resulting in a constant quality in the shadow over the extends, but near shadows could look very jagged

File: sdk/jme3-core/src/com/jme3/gde/core/util/ZipExtensionTool.java
Patch:
@@ -77,11 +77,11 @@ public ZipExtensionTool(String packageName, String extensionName) {
     }
 
     public void install() {
-        ProgressHandle progressHandle = ProgressHandleFactory.createHandle("Installing " + extensionName + " data");
-        progressHandle.start();
         if (new File(settingsFolder + File.separator + extensionName).exists()) {
             return;
         }
+        ProgressHandle progressHandle = ProgressHandleFactory.createHandle("Installing " + extensionName + " data");
+        progressHandle.start();
         if (Utilities.isWindows()) {
             extractToolsJava(packageName + "/" + extensionName + "-" + SUFFIX_WIN + ".zip", settingsFolder + File.separator + extensionName);
         } else if (Utilities.isMac()) {

File: sdk/jme3-desktop-executables/src/com/jme3/gde/desktop/executables/DesktopExeCompositeProvider.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author normenhansen
  */
-@ProjectCustomizer.CompositeCategoryProvider.Registration(projectType = "org-netbeans-modules-java-j2seproject", category = "Application", position = 400)
+@ProjectCustomizer.CompositeCategoryProvider.Registration(projectType = "org-netbeans-modules-java-j2seproject", category = "Application", position = 420)
 public class DesktopExeCompositeProvider implements ProjectCustomizer.CompositeCategoryProvider {
 
     private static final String CAT_LWJGL_APPLET = "DesktopExe"; // NOI18N

File: engine/src/jogl/com/jme/audio/joal/JoalAudioRenderer.java
Patch:
@@ -49,7 +49,7 @@
 
 public class JoalAudioRenderer implements AudioRenderer, Runnable {
 
-    private static final Logger logger = Logger.getLogger(com.jme3.audio.lwjgl.LwjglAudioRenderer.class.getName());
+    private static final Logger logger = Logger.getLogger(JoalAudioRenderer.class.getName());
     private final NativeObjectManager objManager = new NativeObjectManager();
     // When multiplied by STREAMING_BUFFER_COUNT, will equal 44100 * 2 * 2
     // which is exactly 1 second of audio.

File: sdk/jme3-desktop-executables/src/com/jme3/gde/desktop/executables/DesktopExeCompositeProvider.java
Patch:
@@ -62,7 +62,7 @@ private class SavePropsListener implements ActionListener {
         public SavePropsListener(ProjectExtensionProperties props, Project project) {
             this.properties = props;
             this.project = project;
-            launch4j = new ProjectExtensionManager("launch4j", "v1.3", new String[]{"jar", "-launch4j-exe"});
+            launch4j = new ProjectExtensionManager("launch4j", "v1.4", new String[]{"jar", "-launch4j-exe"});
             launch4j.setAntTaskLibrary("launch4j");
             launch4j.setDataZip("nbres:/com/jme3/gde/desktop/executables/winapp-data.zip");
             macapp = new ProjectExtensionManager("macapp", "v1.2", new String[]{"jar", "-mac-app"});

File: sdk/jme3-core/src/com/jme3/gde/core/properties/EmitterShapePropertyEditor.java
Patch:
@@ -92,9 +92,9 @@ public String getAsText() {
                     + ", "
                     + (shape.getMin().x + shape.getLen().x)
                     + ", "
-                    + (shape.getMin().x + shape.getLen().y)
+                    + (shape.getMin().y + shape.getLen().y)
                     + ", "
-                    + (shape.getMin().x + shape.getLen().z)
+                    + (shape.getMin().z + shape.getLen().z)
                     + "]";
         } else if (emitter instanceof EmitterPointShape) {
             EmitterPointShape shape = (EmitterPointShape) emitter;

File: sdk/jme3-core/src/com/jme3/gde/core/assets/ProjectAssetManager.java
Patch:
@@ -35,6 +35,7 @@
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetManager;
 import com.jme3.asset.DesktopAssetManager;
+import com.jme3.system.JmeSystem;
 import java.io.FileNotFoundException;
 import java.io.InputStream;
 import java.net.URL;
@@ -369,7 +370,7 @@ private String[] collectFilesWithSuffix(String suffix) {
     }
 
     public InputStream getResourceAsStream(String name) {
-        InputStream in = this.getClass().getResourceAsStream(name);
+        InputStream in = null;//JmeSystem.getResourceAsStream(name);
 
         if (in == null && classPathItems != null) {
             // TODO I need to find out if classPathItems contains all jars added to a project

File: engine/src/blender/com/jme3/scene/plugins/blender/AbstractBlenderLoader.java
Patch:
@@ -106,7 +106,7 @@ public Node toScene(Structure structure) {
 	public CameraNode toCamera(Structure structure) throws BlenderFileException {
 		CameraHelper cameraHelper = blenderContext.getHelper(CameraHelper.class);
 		if (cameraHelper.shouldBeLoaded(structure, blenderContext)) {
-			return cameraHelper.toCamera(structure);
+			return cameraHelper.toCamera(structure, blenderContext);
 		}
 		return null;
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/objects/ObjectHelper.java
Patch:
@@ -207,7 +207,7 @@ public Object toObject(Structure objectStructure, BlenderContext blenderContext)
 					if(pCamera.isNotNull()) {
 						CameraHelper cameraHelper = blenderContext.getHelper(CameraHelper.class);
 						List<Structure> camerasArray = pCamera.fetchData(blenderContext.getInputStream());
-						CameraNode camera = cameraHelper.toCamera(camerasArray.get(0));
+						CameraNode camera = cameraHelper.toCamera(camerasArray.get(0), blenderContext);
 						camera.setName(name);
 						camera.setLocalTransform(t);
 						result = camera;

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ImportModel.java
Patch:
@@ -106,6 +106,7 @@ private void copyModel(WizardDescriptor wiz) {
         boolean keepFiles = (Boolean) wiz.getProperty("keepfiles");
         List<FileObject> assetList = (List<FileObject>) wiz.getProperty("assetfiles");
         String importPath = (String) wiz.getProperty("destpath");
+        Project context = (Project) wiz.getProperty("project");
         ProjectAssetManager importManager = (ProjectAssetManager) wiz.getProperty("manager");
         ProjectAssetManager manager = context.getLookup().lookup(ProjectAssetManager.class);
         if (manager == null) {

File: sdk/jme3-core/src/com/jme3/gde/core/properties/EmitterShapePropertyEditor.java
Patch:
@@ -90,11 +90,11 @@ public String getAsText() {
                     + ", "
                     + shape.getMin().z
                     + ", "
-                    + shape.getMin().x + shape.getLen().x
+                    + (shape.getMin().x + shape.getLen().x)
                     + ", "
-                    + shape.getMin().x + shape.getLen().y
+                    + (shape.getMin().x + shape.getLen().y)
                     + ", "
-                    + shape.getMin().x + shape.getLen().z
+                    + (shape.getMin().x + shape.getLen().z)
                     + "]";
         } else if (emitter instanceof EmitterPointShape) {
             EmitterPointShape shape = (EmitterPointShape) emitter;

File: sdk/jme3-desktop-executables/src/com/jme3/gde/desktop/executables/DesktopExeCompositeProvider.java
Patch:
@@ -62,7 +62,7 @@ private class SavePropsListener implements ActionListener {
         public SavePropsListener(ProjectExtensionProperties props, Project project) {
             this.properties = props;
             this.project = project;
-            launch4j = new ProjectExtensionManager("launch4j", "v1.2", new String[]{"jar", "-launch4j-exe"});
+            launch4j = new ProjectExtensionManager("launch4j", "v1.3", new String[]{"jar", "-launch4j-exe"});
             launch4j.setAntTaskLibrary("launch4j");
             launch4j.setDataZip("nbres:/com/jme3/gde/desktop/executables/winapp-data.zip");
             macapp = new ProjectExtensionManager("macapp", "v1.2", new String[]{"jar", "-mac-app"});

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -187,7 +187,7 @@ public Node apply(Node node, BlenderContext blenderContext) {
 		if (invalid) {
 			LOGGER.log(Level.WARNING, "Armature modifier is invalid! Cannot be applied to: {0}", node.getName());
 		}// if invalid, animData will be null
-		if (animData == null) {
+		if (animData == null || skeleton == null) {
 			return node;
 		}
 

File: engine/src/lwjgl/com/jme3/input/lwjgl/JInputJoyInput.java
Patch:
@@ -118,7 +118,7 @@ public void update() {
                     }else if (v == POV.DOWN_LEFT){
                         x = -1f; y = -1f;
                     }else if (v == POV.DOWN_RIGHT){
-                        x = -1f; y = 1f;
+                        x = 1f; y = -1f;
                     }else if (v == POV.LEFT){
                         x = -1f; y = 0;
                     }else if (v == POV.RIGHT){

File: engine/src/ogre/com/jme3/scene/plugins/ogre/SceneLoader.java
Patch:
@@ -496,7 +496,7 @@ public Object load(AssetInfo info) throws IOException {
             // == Run 1st pass over XML file to determine material list ==
             materialList = materialLoader.load(assetManager, folderName, info.openStream());
 
-            if (materialList.isEmpty()) {
+            if (materialList == null || materialList.isEmpty()) {
                 // NOTE: No materials were found by searching the externals section.
                 // Try finding a similarly named material file in the same folder.
                 // (Backward compatibility only!)

File: engine/src/test/jme3test/light/TestPssmShadow.java
Patch:
@@ -146,7 +146,7 @@ public void simpleInitApp() {
         loadScene();
 
         pssmRenderer = new PssmShadowRenderer(assetManager, 1024, 3);
-        pssmRenderer.setDirection(new Vector3f(-1, -1, -1).normalizeLocal());
+        pssmRenderer.setDirection(new Vector3f(0.5973172f, -0.16583486f, 0.7846725f).normalizeLocal());
         pssmRenderer.setLambda(0.55f);
         pssmRenderer.setShadowIntensity(0.6f);
         pssmRenderer.setCompareMode(CompareMode.Software);

File: engine/src/core/com/jme3/scene/BatchNode.java
Patch:
@@ -122,7 +122,7 @@ public void updateGeometricState() {
 
             for (Batch batch : batches.getArray()) {
                 if (batch.needMeshUpdate) {
-                    batch.geometry.getMesh().updateBound();
+                    batch.geometry.updateModelBound();
                     batch.geometry.updateWorldBound();
                     batch.needMeshUpdate = false;
 

File: engine/src/lwjgl/com/jme3/system/lwjgl/LwjglOffscreenBuffer.java
Patch:
@@ -118,7 +118,7 @@ protected void runLoop(){
         }
 
         listener.update();
-        assert checkGLError();
+        checkGLError();
 
         renderer.onFrame();
 
@@ -135,6 +135,8 @@ protected void deinitInThread(){
         renderer.cleanup();
         pbuffer.destroy();
         logger.info("Offscreen buffer destroyed.");
+        
+        super.internalDestroy();
     }
 
     public void run(){

File: engine/src/test/jme3test/light/TestTransparentShadow.java
Patch:
@@ -72,7 +72,7 @@ public void simpleInitApp() {
         
         geom.rotate(-FastMath.HALF_PI, 0, 0);
         geom.center();
-        geom.setShadowMode(ShadowMode.Receive);
+        geom.setShadowMode(ShadowMode.CastAndReceive);
         rootNode.attachChild(geom);
 
         // create the geometry and attach it
@@ -132,6 +132,6 @@ public void simpleInitApp() {
         pssmRenderer.setCompareMode(CompareMode.Software);
         pssmRenderer.setFilterMode(FilterMode.PCF4);
         //pssmRenderer.displayDebug();
-        viewPort.addProcessor(pssmRenderer);
+         viewPort.addProcessor(pssmRenderer);
     }
 }

File: engine/src/test/jme3test/post/TestTransparentSSAO.java
Patch:
@@ -12,6 +12,7 @@
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.Quad;
+import com.jme3.util.TangentBinormalGenerator;
 
 public class TestTransparentSSAO extends SimpleApplication {
 
@@ -39,6 +40,7 @@ public void simpleInitApp() {
         geom.rotate(-FastMath.HALF_PI, 0, 0);
         geom.center();
         geom.setShadowMode(ShadowMode.Receive);
+        TangentBinormalGenerator.generate(geom);
         rootNode.attachChild(geom);
 
         // create the geometry and attach it
@@ -64,7 +66,7 @@ public void simpleInitApp() {
 
         FilterPostProcessor fpp = new FilterPostProcessor(assetManager);
 
-        SSAOFilter ssao = new SSAOFilter(0.49997783f, 42.598858f, 35.999966f, 0.39299846f);
+        SSAOFilter ssao = new SSAOFilter();//0.49997783f, 42.598858f, 35.999966f, 0.39299846f
         fpp.addFilter(ssao);
 
         SSAOUI ui = new SSAOUI(inputManager, ssao);

File: engine/src/core/com/jme3/renderer/RenderContext.java
Patch:
@@ -58,7 +58,7 @@ public class RenderContext {
     /**
      * @see RenderState#setAlphaTest(boolean) 
      */
-    public boolean alphaTestEnabled = false;
+    public float alphaTestFallOff = 0f;
 
     /**
      * @see RenderState#setDepthWrite(boolean) 
@@ -271,7 +271,7 @@ public class RenderContext {
     public void reset(){
         cullMode = RenderState.FaceCullMode.Off;
         depthTestEnabled = false;
-        alphaTestEnabled = false;
+        alphaTestFallOff = 0f;
         depthWriteEnabled = false;
         colorWriteEnabled = false;
         clipRectEnabled = false;

File: engine/src/core/com/jme3/renderer/RenderManager.java
Patch:
@@ -500,11 +500,14 @@ public void renderGeometry(Geometry g) {
         //else the geom is not rendered
         if (forcedTechnique != null) {
             if (g.getMaterial().getMaterialDef().getTechniqueDef(forcedTechnique) != null) {
+                RenderState s = forcedRenderState;
+                forcedRenderState = g.getMaterial().getMaterialDef().getTechniqueDef(forcedTechnique).getRenderState();
                 tmpTech = g.getMaterial().getActiveTechnique() != null ? g.getMaterial().getActiveTechnique().getDef().getName() : "Default";
                 g.getMaterial().selectTechnique(forcedTechnique, this);
                 // use geometry's material
                 g.getMaterial().render(g, this);
                 g.getMaterial().selectTechnique(tmpTech, this);
+                forcedRenderState = s;
                 //Reverted this part from revision 6197
                 //If forcedTechnique does not exists, and frocedMaterial is not set, the geom MUST NOT be rendered
             } else if (forcedMaterial != null) {

File: engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglGL1Renderer.java
Patch:
@@ -225,8 +225,7 @@ private void resetFixedFuncBindings(){
         context.useVertexColor = false;
     }
     
-    public void setFixedFuncBinding(FixedFuncBinding ffBinding, Object val) {
-        float falloff;
+        public void setFixedFuncBinding(FixedFuncBinding ffBinding, Object val) {        
         switch (ffBinding) {
             case Color:
                 context.color = (ColorRGBA) val;

File: engine/src/android/com/jme3/renderer/android/TextureUtil.java
Patch:
@@ -253,7 +253,7 @@ private static void uploadTexture(Image img,
         
         if (!NPOT) {
             // Check if texture is POT
-            if (!FastMath.isPowerOfTwo(width) || width != height) {
+            if (!FastMath.isPowerOfTwo(width) || !FastMath.isPowerOfTwo(height)) {
                 throw new RendererException("Non-power-of-2 textures "
                         + "are not supported by the video hardware "
                         + "and no scaling path available for image: " + img);

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -338,8 +338,9 @@ private VertexBuffer[] getBoneWeightAndIndexBuffer(Structure meshStructure, int
 						}
 						bonesGroups[0] = Math.max(bonesGroups[0], weightIndex);
 					} else {
+						// 0.0 weight indicates, do not transform this vertex, but keep it in bind pose.
 						for (Integer index : vertexIndices) {
-							weightsFloatData.put(index * MAXIMUM_WEIGHTS_PER_VERTEX, 1.0f);
+							weightsFloatData.put(index * MAXIMUM_WEIGHTS_PER_VERTEX, 0.0f);
 							indicesData.put(index * MAXIMUM_WEIGHTS_PER_VERTEX, (byte) 0);
 						}
 					}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/definitions/ConstraintDefinition.java
Patch:
@@ -34,7 +34,7 @@ public void bake(Transform ownerTransform, Transform targetTransform, Track owne
 		TrackWrapper ownerWrapperTrack = ownerTrack != null ? new TrackWrapper(ownerTrack) : null;
 		TrackWrapper targetWrapperTrack = targetTrack != null ? new TrackWrapper(targetTrack) : null;
 		
-		//uruchamiamy bake dla transformat zale�nie od tego, kt�re argumenty s� nullami, a kt�re - nie
+		//uruchamiamy bake dla transformat zalenie od tego, ktre argumenty s nullami, a ktre - nie
 		this.bake(ownerTransform, targetTransform, influenceIpo.calculateValue(0));
 		if(ownerWrapperTrack != null) {
 			float[] ownerTimes = ownerWrapperTrack.getTimes();

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshHelper.java
Patch:
@@ -253,7 +253,7 @@ public List<Geometry> toMesh(Structure structure, BlenderContext blenderContext)
     private boolean isBMeshCompatible(Structure meshStructure) {
     	Pointer pMLoop = (Pointer) meshStructure.getFieldValue("mloop");
 		Pointer pMPoly = (Pointer) meshStructure.getFieldValue("mpoly");
-		return pMLoop != null && pMPoly != null;
+		return pMLoop != null && pMPoly != null && pMLoop.isNotNull() && pMPoly.isNotNull();
     }
     
 	/**

File: engine/src/core/com/jme3/scene/control/CameraControl.java
Patch:
@@ -64,7 +64,7 @@ public static enum ControlDirection {
         SpatialToCamera;
     }
     private Camera camera;
-    private ControlDirection controlDir = ControlDirection.CameraToSpatial;
+    private ControlDirection controlDir = ControlDirection.SpatialToCamera;
 
     /**
      * Constructor used for Serialization.

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/ArmatureHelper.java
Patch:
@@ -199,7 +199,7 @@ private BoneTrack[] getTracks250(Structure actionStructure, Skeleton skeleton, B
 					bezierCurves[channelCounter++] = new BezierCurve(type, bezTriples, 2);
 				}
 
-				Ipo ipo = new Ipo(bezierCurves, fixUpAxis);
+				Ipo ipo = new Ipo(bezierCurves, fixUpAxis, blenderContext.getBlenderVersion());
 				tracks.add((BoneTrack) ipo.calculateTrack(boneIndex, 0, ipo.getLastFrame(), fps, false));
 			}
 		}

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/IpoHelper.java
Patch:
@@ -63,7 +63,7 @@ public Ipo fromIpoStructure(Structure ipoStructure, BlenderContext blenderContex
 				bezierCurves[frame++] = new BezierCurve(type, bezTriples, 2);
 			}
 			curves.clear();
-			result = new Ipo(bezierCurves, fixUpAxis);
+			result = new Ipo(bezierCurves, fixUpAxis, blenderContext.getBlenderVersion());
 			blenderContext.addLoadedFeatures(ipoStructure.getOldMemoryAddress(), ipoStructure.getName(), ipoStructure, result);
 		}
 		return result;
@@ -95,7 +95,7 @@ public Ipo fromAction(Structure actionStructure, BlenderContext blenderContext)
 				bezierCurves[frame++] = new BezierCurve(type, bezTriples, 2);
 			}
 			curves.clear();
-			result = new Ipo(bezierCurves, fixUpAxis);
+			result = new Ipo(bezierCurves, fixUpAxis, blenderContext.getBlenderVersion());
 		}
 		return result;
 	}
@@ -174,7 +174,7 @@ private class ConstIpo extends Ipo {
 		 *            the constant value of this ipo
 		 */
 		public ConstIpo(float constValue) {
-			super(null, false);
+			super(null, false, 0);//the version is not important here
 			this.constValue = constValue;
 		}
 

File: engine/src/core/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -718,8 +718,9 @@ public float getParticlesPerSec() {
      */
     public void setParticlesPerSec(float particlesPerSec) {
         this.particlesPerSec = particlesPerSec;
+        timeDifference = 0;
     }
-
+    
     /**
      * Get the start color of the particles spawned.
      * 

File: engine/src/core/com/jme3/bounding/BoundingBox.java
Patch:
@@ -224,8 +224,8 @@ public void containAABB(FloatBuffer points) {
         
         float[] tmpArray = vars.skinPositions;
 
-        float minX = Float.MAX_VALUE, minY = Float.MAX_VALUE, minZ = Float.MAX_VALUE;
-        float maxX = Float.MIN_VALUE, maxY = Float.MIN_VALUE, maxZ = Float.MIN_VALUE;
+        float minX = Float.POSITIVE_INFINITY, minY = Float.POSITIVE_INFINITY, minZ = Float.POSITIVE_INFINITY;
+        float maxX = Float.NEGATIVE_INFINITY, maxY = Float.NEGATIVE_INFINITY, maxZ = Float.NEGATIVE_INFINITY;
         
         int iterations = (int) FastMath.ceil(points.limit() / ((float) tmpArray.length));
         for (int i = iterations - 1; i >= 0; i--) {

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -299,7 +299,7 @@ protected Vector2f readVector2(){
         Vector2f v = new Vector2f();
 
         String line = scan.nextLine().trim();
-        String[] split = line.split("\\s++");
+        String[] split = line.split("\\s+");
         v.setX( Float.parseFloat(split[0].trim()) );
         v.setY( Float.parseFloat(split[1].trim()) );
 

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -299,7 +299,7 @@ protected Vector2f readVector2(){
         Vector2f v = new Vector2f();
 
         String line = scan.nextLine().trim();
-        String[] split = line.split("\\s");
+        String[] split = line.split("\\s++");
         v.setX( Float.parseFloat(split[0].trim()) );
         v.setY( Float.parseFloat(split[1].trim()) );
 

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshBuilder.java
Patch:
@@ -168,7 +168,7 @@ public void appendFace(int v1, int v2, int v3, boolean smooth, int materialNumbe
             			index[i] = vertexList.size() - 1;
             		}
             	} else {
-            		index[i] = vertexList.indexOf(verticesAndNormals[index[i]]);
+            		index[i] = vertexList.indexOf(verticesAndNormals[index[i]][0]);
             	}
         		indexList.add(index[i]);
         	}

File: engine/src/android/com/jme3/system/android/JmeAndroidSystem.java
Patch:
@@ -63,7 +63,7 @@ public AssetManager newAssetManager() {
     @Override
     public void showErrorDialog(String message) {
         final String finalMsg = message;
-        final String finalTitle = "Error in jMonkeyEngine app";
+        final String finalTitle = "Error in application";
         final Activity context = JmeAndroidSystem.getActivity();
         
         context.runOnUiThread(new Runnable() {

File: engine/src/desktop/com/jme3/system/JmeDesktopSystem.java
Patch:
@@ -78,7 +78,7 @@ public AssetManager newAssetManager() {
     @Override
     public void showErrorDialog(String message) {
         final String msg = message;
-        final String title = "Error in jMonkeyEngine app";
+        final String title = "Error in application";
         EventQueue.invokeLater(new Runnable() {
             public void run() {
                 JOptionPane.showMessageDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);

File: sdk/jme3-android/src/com/jme3/gde/android/MobileCompositeProvider.java
Patch:
@@ -57,7 +57,7 @@ public JComponent createComponent(ProjectCustomizer.Category category, Lookup co
     private class SavePropsListener implements ActionListener {
 
         private String extensionName = "mobile";
-        private String extensionVersion = "v0.17";
+        private String extensionVersion = "v0.18";
         private String[] extensionDependencies = new String[]{"jar", "-mobile-deployment"};
         private ProjectExtensionManager manager = new ProjectExtensionManager(extensionName, extensionVersion, extensionDependencies);
         private ProjectExtensionProperties properties;

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeSpatial.java
Patch:
@@ -304,7 +304,7 @@ protected Sheet createSheet() {
             set.setName(Spatial.class.getName() + "_UserData");
             for (Iterator<String> it = dataKeys.iterator(); it.hasNext();) {
                 String string = it.next();
-                UserDataProperty prop = new UserDataProperty(spatial, string);
+                UserDataProperty prop = new UserDataProperty(this, string);
                 prop.addPropertyChangeListener(this);
                 set.put(prop);
             }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/AddUserDataAction.java
Patch:
@@ -43,7 +43,7 @@ public final class AddUserDataAction implements ActionListener {
 
     public AddUserDataAction(JmeSpatial context) {
         this.context = context;
-        dialog=new UserDataDialog(new JFrame(), true, context);
+        dialog=new UserDataDialog(new JFrame(), true, context,null);
     }
 
     public void actionPerformed(ActionEvent ev) {

File: sdk/jme3-core/src/com/jme3/gde/core/properties/AudioTrackProperty.java
Patch:
@@ -32,9 +32,7 @@
 package com.jme3.gde.core.properties;
 
 import com.jme3.animation.AudioTrack;
-import com.jme3.animation.EffectTrack;
 import com.jme3.audio.AudioNode;
-import com.jme3.effect.ParticleEmitter;
 import com.jme3.scene.Spatial;
 import java.beans.PropertyEditor;
 import java.lang.reflect.InvocationTargetException;
@@ -67,7 +65,7 @@ public AudioNode getValue() throws IllegalAccessException, InvocationTargetExcep
     @Override
     public void setValue(final AudioNode val) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
         AudioNode au = getValue();
-        track.setAudio(au);
+        track.setAudio(val);
         notifyListeners(au, val);
     }
 

File: engine/src/core/com/jme3/effect/influencers/NewtonianParticleInfluencer.java
Patch:
@@ -115,7 +115,7 @@ protected void applyVelocityVariation(Particle particle) {
     public ParticleInfluencer clone() {
         NewtonianParticleInfluencer result = new NewtonianParticleInfluencer();
         result.normalVelocity = normalVelocity;
-        result.startVelocity = startVelocity;
+        result.initialVelocity = initialVelocity;
         result.velocityVariation = velocityVariation;
         result.surfaceTangentFactor = surfaceTangentFactor;
         result.surfaceTangentRotation = surfaceTangentRotation;

File: engine/src/core/com/jme3/texture/image/ImageRaster.java
Patch:
@@ -26,9 +26,9 @@
  * Usage example:<br>
  * <code>
  * Image myImage = ...
- * ImageReadWrite imageRW = new ImageReadWrite(myImage);
- * imageRW.setPixel(1, 5, ColorRGBA.Green);
- * System.out.println( imageRW.getPixel(1, 5) ); // Will print [0.0, 1.0, 0.0, 1.0].
+ * ImageRaster raster = new ImageRaster(myImage);
+ * raster.setPixel(1, 5, ColorRGBA.Green);
+ * System.out.println( raster.getPixel(1, 5) ); // Will print [0.0, 1.0, 0.0, 1.0].
  * </code>
  * 
  * @author Kirill Vainer

File: engine/src/core/com/jme3/system/JmeSystem.java
Patch:
@@ -167,7 +167,7 @@ private static void checkDelegate() {
                     if (systemDelegate == null) {
                         // None of the system delegates were found ..
                         Logger.getLogger(JmeSystem.class.getName()).log(Level.SEVERE,
-                                "Failed to find a JmeSystem delegate!"
+                                "Failed to find a JmeSystem delegate!\n"
                                 + "Ensure either desktop or android jME3 jar is in the classpath.");
                     }
                 }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/tools/MoveManager.java
Patch:
@@ -119,10 +119,10 @@ private void worldToLocalMove(boolean gridSnap) {
             newPos.set(Math.round(newPos.x), Math.round(newPos.y), Math.round(newPos.z));
         }
 
-        //computing the inverse world transform to get the new localtranslation
+        //computing the inverse world transform to get the new localtranslation        
         newPos.subtractLocal(spatial.getParent().getWorldTranslation());
         newPos = spatial.getParent().getWorldRotation().inverse().normalizeLocal().multLocal(newPos);
-        newPos.divideLocal(spatial.getWorldScale());
+       
         lastLoc = newPos;
         spatial.setLocalTranslation(newPos);
 

File: engine/src/core/com/jme3/audio/AudioNode.java
Patch:
@@ -63,6 +63,8 @@
  */
 public class AudioNode extends Node {
 
+    //Version #1 : AudioKey is now stored into "audio_key" instead of "key"
+    public static final int SAVABLE_VERSION = 1;
     protected boolean loop = false;
     protected float volume = 1;
     protected float pitch = 1;

File: sdk/jme3-core/src/com/jme3/gde/core/codeless/CodelessProject.java
Patch:
@@ -105,6 +105,7 @@ public Lookup getLookup() {
             lkp = Lookups.fixed(new Object[]{
                         this, //project spec requires a project be in its own lookup
                         state, //allow outside code to mark the project as needing saving
+                        projectAssetManager,
                         new ActionProviderImpl(), //Provides standard actions like Build and Clean
                         new DemoDeleteOperation(),
                         new DemoCopyOperation(this),

File: engine/src/core/com/jme3/font/BitmapText.java
Patch:
@@ -361,17 +361,17 @@ public void updateLogicalState(float tpf) {
     private void assemble() {
         // first generate quadlist
         letters.update();
-
         for (int i = 0; i < textPages.length; i++) {
             textPages[i].assemble(letters);
         }
         needRefresh = false;
     }
 
-    public void render(RenderManager rm) {
+    public void render(RenderManager rm, ColorRGBA color) {
         for (BitmapTextPage page : textPages) {
             Material mat = page.getMaterial();
-            mat.setTexture("Texture", page.getTexture());
+            mat.setTexture("ColorMap", page.getTexture());
+            mat.setColor("Color", color);
             mat.render(page, rm);
         }
     }

File: engine/src/niftygui/com/jme3/niftygui/RenderImageJme.java
Patch:
@@ -63,8 +63,9 @@ public RenderImageJme(String filename, boolean linear, NiftyJmeDisplay display){
     }
 
     public RenderImageJme(Texture2D texture){
-        if (texture.getImage() == null)
+        if (texture.getImage() == null) {
             throw new IllegalArgumentException("texture.getImage() cannot be null");
+        }
         
         this.texture = texture;
         this.image = texture.getImage();

File: engine/src/core/com/jme3/material/Technique.java
Patch:
@@ -122,10 +122,10 @@ void notifyParamChanged(String paramName, VarType type, Object value) {
             
             if (value == null) {
                 // Clear the define.
-                needReload = defines.remove(defineName);
+                needReload = defines.remove(defineName) || needReload;
             } else {
                 // Set the define.
-                needReload = defines.set(defineName, type, value);
+                needReload = defines.set(defineName, type, value) || needReload;
             }
         }
     }

File: engine/src/core/com/jme3/renderer/Camera.java
Patch:
@@ -1169,11 +1169,11 @@ public void onFrustumChange() {
             float topSquared = frustumTop * frustumTop;
 
             float inverseLength = FastMath.invSqrt(nearSquared + leftSquared);
-            coeffLeft[0] = frustumNear * inverseLength;
+            coeffLeft[0] = -frustumNear * inverseLength;
             coeffLeft[1] = -frustumLeft * inverseLength;
 
             inverseLength = FastMath.invSqrt(nearSquared + rightSquared);
-            coeffRight[0] = -frustumNear * inverseLength;
+            coeffRight[0] = frustumNear * inverseLength;
             coeffRight[1] = frustumRight * inverseLength;
 
             inverseLength = FastMath.invSqrt(nearSquared + bottomSquared);

File: engine/src/niftygui/com/jme3/niftygui/InputSystemJme.java
Patch:
@@ -216,6 +216,9 @@ public void onJoyAxisEvent(JoyAxisEvent evt) {
     public void onJoyButtonEvent(JoyButtonEvent evt) {
     }
 
+    public void onMotionSensorEvent(MotionSensorEvent evt) {
+    }
+
     public void onKeyEvent(KeyInputEvent evt) {
         inputQueue.add(evt);
     }

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -1066,8 +1066,8 @@ protected float getHeight(int x, int z, float xm, float zm) {
 
     public Vector3f getNormal(Vector2f xz) {
         // offset
-        float x = (float)(((xz.x - getWorldTranslation().x) / getWorldScale().x) + (float)totalSize / 2f);
-        float z = (float)(((xz.y - getWorldTranslation().z) / getWorldScale().z) + (float)totalSize / 2f);
+        float x = (float)(((xz.x - getWorldTranslation().x) / getWorldScale().x) + (float)(totalSize-1) / 2f);
+        float z = (float)(((xz.y - getWorldTranslation().z) / getWorldScale().z) + (float)(totalSize-1) / 2f);
         Vector3f normal = getNormal(x, z, xz);
         
         return normal;

File: engine/src/core/com/jme3/scene/BatchNode.java
Patch:
@@ -259,7 +259,7 @@ private void gatherGeomerties(Map<Material, List<Geometry>> map, Spatial n, bool
                     if (list == null) {
                         //trying to compare materials with the isEqual method 
                         for (Map.Entry<Material, List<Geometry>> mat : map.entrySet()) {
-                            if (g.getMaterial().contentEquals(mat)) {
+                            if (g.getMaterial().contentEquals(mat.getKey())) {
                                 list = mat.getValue();
                             }
                         }

File: engine/src/core/com/jme3/renderer/ViewPort.java
Patch:
@@ -290,6 +290,7 @@ public void attachScene(Spatial scene){
             throw new IllegalArgumentException( "Scene cannot be null." );
         }
         sceneList.add(scene);
+        scene.forceRefresh(true, false, true);
     }
 
     /**
@@ -304,6 +305,7 @@ public void detachScene(Spatial scene){
             throw new IllegalArgumentException( "Scene cannot be null." );
         }
         sceneList.remove(scene);
+        scene.forceRefresh(true, false, true);
     }
 
     /**

File: engine/src/core/com/jme3/renderer/RenderManager.java
Patch:
@@ -813,6 +813,7 @@ private void setViewPort(Camera cam) {
             viewY = (int) (cam.getViewPortBottom() * cam.getHeight());
             viewWidth = (int) ((cam.getViewPortRight() - cam.getViewPortLeft()) * cam.getWidth());
             viewHeight = (int) ((cam.getViewPortTop() - cam.getViewPortBottom()) * cam.getHeight());
+            uniformBindingManager.setViewPort(viewX, viewY, viewWidth, viewHeight);
             renderer.setViewPort(viewX, viewY, viewWidth, viewHeight);
             renderer.setClipRect(viewX, viewY, viewWidth, viewHeight);
             cam.clearViewportChanged();

File: engine/src/tools/jme3tools/savegame/SaveGame.java
Patch:
@@ -38,7 +38,7 @@ public static void saveGame(String gamePath, String dataName, Savable data) {
         BinaryExporter ex = BinaryExporter.getInstance();
         OutputStream os = null;
         try {
-            File daveFolder = new File(JmeSystem.getStorageFolder().getAbsolutePath() + File.separator + gamePath.replaceAll("/", File.separator));
+            File daveFolder = new File(JmeSystem.getStorageFolder().getAbsolutePath() + File.separator + gamePath.replace('/', File.separatorChar));
             if (!daveFolder.exists() && !daveFolder.mkdirs()) {
                 Logger.getLogger(SaveGame.class.getName()).log(Level.SEVERE, "Error creating save file!");
                 throw new IllegalStateException("SaveGame dataset cannot be created");
@@ -90,7 +90,7 @@ public static Savable loadGame(String gamePath, String dataName, AssetManager ma
         InputStream is = null;
         Savable sav = null;
         try {
-            File file = new File(JmeSystem.getStorageFolder().getAbsolutePath() + File.separator + gamePath.replaceAll("/", File.separator) + File.separator + dataName);
+            File file = new File(JmeSystem.getStorageFolder().getAbsolutePath() + File.separator + gamePath.replace('/', File.separatorChar) + File.separator + dataName);
             if(!file.exists()){
                 return null;
             }

File: engine/src/core/com/jme3/animation/SkeletonControl.java
Patch:
@@ -325,11 +325,10 @@ private void applySkinning(Mesh mesh, Matrix4f[] offsetMatrices) {
 
         TempVars vars = TempVars.get();
 
-
         float[] posBuf = vars.skinPositions;
         float[] normBuf = vars.skinNormals;
 
-        int iterations = (int) FastMath.ceil(fvb.capacity() / ((float) posBuf.length));
+        int iterations = (int) FastMath.ceil(fvb.limit() / ((float) posBuf.length));
         int bufLength = posBuf.length;
         for (int i = iterations - 1; i >= 0; i--) {
             // read next set of positions and normals from native buffer
@@ -439,7 +438,7 @@ private void applySkinningTangents(Mesh mesh, Matrix4f[] offsetMatrices, VertexB
         float[] normBuf = vars.skinNormals;
         float[] tanBuf = vars.skinTangents;
 
-        int iterations = (int) FastMath.ceil(fvb.capacity() / ((float) posBuf.length));
+        int iterations = (int) FastMath.ceil(fvb.limit() / ((float) posBuf.length));
         int bufLength = 0;
         int tanLength = 0;
         for (int i = iterations - 1; i >= 0; i--) {

File: engine/src/core/com/jme3/audio/AudioBuffer.java
Patch:
@@ -70,7 +70,7 @@ public DataType getDataType() {
     public float getDuration(){
         int bytesPerSec = (bitsPerSample / 8) * channels * sampleRate;
         if (audioData != null)
-            return (float) audioData.capacity() / bytesPerSec;
+            return (float) audioData.limit() / bytesPerSec;
         else
             return Float.NaN; // unknown
     }

File: engine/src/core/com/jme3/scene/BatchNode.java
Patch:
@@ -665,7 +665,7 @@ private void doCopyBuffer(FloatBuffer inBuf, int offset, FloatBuffer outBuf, int
         // convert to be in component units
         offset *= componentSize;
 
-        for (int i = 0; i < inBuf.capacity() / componentSize; i++) {
+        for (int i = 0; i < inBuf.limit() / componentSize; i++) {
             pos.x = inBuf.get(i * componentSize + 0);
             pos.y = inBuf.get(i * componentSize + 1);
             pos.z = inBuf.get(i * componentSize + 2);

File: engine/src/terrain/com/jme3/terrain/geomipmap/lodcalc/util/EntropyComputeUtil.java
Patch:
@@ -47,7 +47,7 @@ public static float computeLodEntropy(Mesh terrainBlock, IntBuffer lodIndices){
         terrainBlock.createCollisionData();
 
         float entropy = 0;
-        for (int i = 0; i < positions.capacity() / 3; i++){
+        for (int i = 0; i < positions.limit() / 3; i++){
             BufferUtils.populateFromBuffer(pos, positions, i);
 
             float realHeight = pos.y;

File: engine/src/tools/jme3tools/optimize/TextureAtlas.java
Patch:
@@ -657,7 +657,7 @@ public void transformTextureCoords(FloatBuffer inBuf, int offset, FloatBuffer ou
             // convert to be in component units
             offset *= 2;
 
-            for (int i = 0; i < inBuf.capacity() / 2; i++) {
+            for (int i = 0; i < inBuf.limit() / 2; i++) {
                 tex.x = inBuf.get(i * 2 + 0);
                 tex.y = inBuf.get(i * 2 + 1);
                 Vector2f location = getLocation(tex);

File: engine/src/tools/jme3tools/shadercheck/ShaderCheck.java
Patch:
@@ -42,7 +42,8 @@ private static void checkMatDef(String matdefName){
                 ShaderKey shaderKey = new ShaderKey(techDef.getVertexShaderName(),
                                                     techDef.getFragmentShaderName(),
                                                     dl,
-                                                    techDef.getShaderLanguage());
+                                                    techDef.getVertexShaderLanguage(),
+                                                    techDef.getFragmentShaderLanguage());
                 Shader shader = assetManager.loadShader(shaderKey);
                 
                 for (Validator validator : validators){

File: engine/src/core/com/jme3/material/MaterialDef.java
Patch:
@@ -157,10 +157,10 @@ public Collection<MatParam> getMaterialParams(){
      * 
      * @param technique The technique definition to add.
      */
-    public void addTechniqueDef(TechniqueDef technique){
-        if (technique.getName().equals("Default")){
+    public void addTechniqueDef(TechniqueDef technique) {
+        if (technique.getName().equals("Default")) {
             defaultTechs.add(technique);
-        }else{
+        } else {
             techniques.put(technique.getName(), technique);
         }
     }

File: engine/src/core/com/jme3/system/JmeSystemDelegate.java
Patch:
@@ -100,6 +100,8 @@ public SoftTextDialogInput getSoftTextDialogInput() {
 
     public abstract AssetManager newAssetManager();
 
+    public abstract void showErrorDialog(String message);
+    
     public abstract boolean showSettingsDialog(AppSettings sourceSettings, boolean loadFromRegistry);
 
     private boolean is64Bit(String arch) {

File: engine/src/core/com/jme3/cinematic/events/MotionTrack.java
Patch:
@@ -169,7 +169,7 @@ public void update(float tpf) {
     public void internalUpdate(float tpf) {
         if (playState == PlayState.Playing) {
             time = time + (tpf * speed);
-            if( loopMode == loopMode.Loop && time<0){
+            if (loopMode == loopMode.Loop && time < 0) {
                 time = initialDuration;
             }
             if ((time >= initialDuration || time < 0) && loopMode == loopMode.DontLoop) {
@@ -196,7 +196,7 @@ public void setTime(float time) {
     }
 
     public void onUpdate(float tpf) {
-        traveledDistance = path.interpolatePath(time, this);
+        traveledDistance = path.interpolatePath(time, this, tpf);
         computeTargetDirection();
     }
 

File: engine/src/core/com/jme3/math/FastMath.java
Patch:
@@ -784,7 +784,7 @@ public static float nextRandomFloat() {
     }
 
     /**
-     * Returns a random float between min and max.
+     * Returns a random integer between min and max.
      * 
      * @return A random int between <tt>min</tt> (inclusive) to
      *         <tt>max</tt> (inclusive).

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/ArmatureHelper.java
Patch:
@@ -130,9 +130,9 @@ public Map<Integer, Integer> getGroupToBoneIndexMap(Structure defBaseStructure,
 			int groupIndex = 0;
 			for (Structure deformGroup : deformGroups) {
 				String deformGroupName = deformGroup.getFieldValue("name").toString();
-				Integer boneIndex = this.getBoneIndex(skeleton, deformGroupName);
-				if (boneIndex != null) {
-					result.put(Integer.valueOf(groupIndex), boneIndex);
+				int boneIndex = this.getBoneIndex(skeleton, deformGroupName);
+				if (boneIndex >= 0) {
+					result.put(groupIndex, boneIndex);
 				}
 				++groupIndex;
 			}

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshBuilder.java
Patch:
@@ -150,7 +150,7 @@ public void appendFace(int v1, int v2, int v3, boolean smooth, int materialNumbe
         		indexList.add(index[i]);
         	}
         } else {
-        	Vector3f n = FastMath.computeNormal(verticesAndNormals[v1][0], verticesAndNormals[v2][0], verticesAndNormals[v3][0]);
+        	Vector3f n = smooth ? null : FastMath.computeNormal(verticesAndNormals[v1][0], verticesAndNormals[v2][0], verticesAndNormals[v3][0]);
         	for (int i = 0; i < 3; ++i) {
         		indexList.add(vertexList.size());
         		this.appendVertexReference(index[i], vertexList.size(), vertexReferenceMap);
@@ -162,7 +162,7 @@ public void appendFace(int v1, int v2, int v3, boolean smooth, int materialNumbe
         		if(verticesColors != null) {
         			vertexColorsList.add(verticesColors.get(faceIndex + vertexColorIndex[i]));
         		}
-        		normalList.add(n);
+        		normalList.add(smooth ? verticesAndNormals[index[i]][1] : n);
         	}
         }
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshHelper.java
Patch:
@@ -195,7 +195,7 @@ public List<Geometry> toMesh(Structure structure, BlenderContext blenderContext)
             // creating the result
             Geometry geometry = new Geometry(name + (geometries.size() + 1), mesh);
             if (properties != null && properties.getValue() != null) {
-                geometry.setUserData("properties", properties);
+            	this.applyProperties(geometry, properties);
             }
             geometries.add(geometry);
             meshContext.putGeometry(materialIndex, geometry);

File: engine/src/blender/com/jme3/scene/plugins/blender/curves/CurvesHelper.java
Patch:
@@ -193,7 +193,7 @@ public List<Geometry> toCurve(Structure curveStructure, BlenderContext blenderCo
                 if (nurbGeoms != null) {//setting the name and assigning materials
                     for (Geometry nurbGeom : nurbGeoms) {
                     	if(materialContexts != null) {
-                    		materialContexts[nurbEntry.getKey().intValue()].applyMaterial(nurbGeom, curveStructure.getOldMemoryAddress(), false, null, blenderContext);
+                    		materialContexts[nurbEntry.getKey().intValue()].applyMaterial(nurbGeom, curveStructure.getOldMemoryAddress(), null, blenderContext);
                     	} else {
                     		nurbGeom.setMaterial(defaultMaterial);
                     	}

File: engine/src/blender/com/jme3/scene/plugins/blender/materials/MaterialHelper.java
Patch:
@@ -168,7 +168,7 @@ public MaterialContext toMaterialContext(Structure structure, BlenderContext ble
 		}
 		
 		result = new MaterialContext(structure, blenderContext);
-		LOGGER.log(Level.INFO, "Material's name: {0}", result.name);
+		LOGGER.log(Level.INFO, "Material''s name: {0}", result.name);
 		blenderContext.addLoadedFeatures(structure.getOldMemoryAddress(), structure.getName(), structure, result);
 		return result;
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/materials/MaterialHelper.java
Patch:
@@ -337,7 +337,7 @@ public MaterialContext[] getMaterials(Structure structureWithMaterials, BlenderC
 				materials = new MaterialContext[materialStructures.size()];
 				int i = 0;
 				for (Structure s : materialStructures) {
-					materials[i++] = materialHelper.toMaterialContext(s, blenderContext);
+					materials[i++] = s == null ? null : materialHelper.toMaterialContext(s, blenderContext);
 				}
 			}
 		}

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ModifierHelper.java
Patch:
@@ -140,8 +140,7 @@ private Modifier readAnimationModifier249(Structure objectStructure, BlenderCont
 		if (pAction.isNotNull()) {
 			Structure action = pAction.fetchData(blenderContext.getInputStream()).get(0);
 			List<Structure> actionChannels = ((Structure) action.getFieldValue("chanbase")).evaluateListBase(blenderContext);
-			if (actionChannels.size() == 1) {// object's animtion action has
-												// only one channel
+			if (actionChannels.size() == 1) {// object's animtion action has only one channel
 				Pointer pChannelIpo = (Pointer) actionChannels.get(0).getFieldValue("ipo");
 				Structure ipoStructure = pChannelIpo.fetchData(blenderContext.getInputStream()).get(0);
 				Ipo ipo = ipoHelper.fromIpoStructure(ipoStructure, blenderContext);

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/GeneratedTexture.java
Patch:
@@ -107,8 +107,10 @@ public int compare(TriangleTextureElement o1, TriangleTextureElement o2) {
 				return o1.faceIndex - o2.faceIndex;
 			}
 		});
+		int[] indices = new int[3];
 		for (int i = 0; i < mesh.getTriangleCount(); ++i) {
-			triangleTextureElements.add(new TriangleTextureElement(i, boundingBox, this, uvsArray, blenderContext));
+			mesh.getTriangle(i, indices);
+			triangleTextureElements.add(new TriangleTextureElement(i, boundingBox, this, uvsArray, indices, blenderContext));
 		}
 		return new TriangulatedTexture(triangleTextureElements, blenderContext);
 	}

File: engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -1057,6 +1057,9 @@ public void updateShaderData(Shader shader) {
         if (caps.contains(Caps.OpenGL30)) {
             // Check if GLSL version is 1.5 for shader
             GL30.glBindFragDataLocation(id, 0, "outFragColor");
+            for(int i = 0 ; i < maxMRTFBOAttachs ; i++) {
+                GL30.glBindFragDataLocation(id, i, "outFragData[" + i + "]");
+            }
         }
 
         // link shaders to program

File: engine/src/core/com/jme3/material/MatParam.java
Patch:
@@ -310,6 +310,7 @@ public void read(JmeImporter im) throws IOException {
         InputCapsule ic = im.getCapsule(this);
         type = ic.readEnum("varType", VarType.class, null);
         name = ic.readString("name", null);
+        prefixedName = "m_" + name;
         ffBinding = ic.readEnum("ff_binding", FixedFuncBinding.class, null);
         switch (getVarType()) {
             case Boolean:

File: engine/src/core/com/jme3/material/MatParam.java
Patch:
@@ -144,7 +144,7 @@ public void setValue(Object value) {
     void apply(Renderer r, Technique technique) {
         TechniqueDef techDef = technique.getDef();
         if (techDef.isUsingShaders()) {
-            technique.updateUniformParam(getPrefixedName(), getVarType(), getValue(), true);
+            technique.updateUniformParam(getPrefixedName(), getVarType(), getValue());
         }
         if (ffBinding != null && r instanceof GL1Renderer) {
             ((GL1Renderer) r).setFixedFuncBinding(ffBinding, getValue());

File: engine/src/core/com/jme3/material/MatParamTexture.java
Patch:
@@ -45,7 +45,7 @@ public void apply(Renderer r, Technique technique) {
         TechniqueDef techDef = technique.getDef();
         r.setTexture(getUnit(), getTextureValue());
         if (techDef.isUsingShaders()) {
-            technique.updateUniformParam(getPrefixedName(), getVarType(), getUnit(), true);
+            technique.updateUniformParam(getPrefixedName(), getVarType(), getUnit());
         }
     }
 

File: engine/src/tools/jme3tools/converters/model/FloatToFixed.java
Patch:
@@ -46,6 +46,7 @@
 import com.jme3.util.BufferUtils;
 import java.nio.*;
 
+@Deprecated
 public class FloatToFixed {
 
     private static final float shortSize = Short.MAX_VALUE - Short.MIN_VALUE;
@@ -54,6 +55,7 @@ public class FloatToFixed {
     private static final float byteSize = Byte.MAX_VALUE - Byte.MIN_VALUE;
     private static final float byteOff  = (Byte.MAX_VALUE + Byte.MIN_VALUE) * 0.5f;
 
+    @Deprecated
     public static void convertToFixed(Geometry geom, Format posFmt, Format nmFmt, Format tcFmt){
         geom.updateModelBound();
         BoundingBox bbox = (BoundingBox) geom.getModelBound();

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ImportModel.java
Patch:
@@ -114,8 +114,6 @@ private void copyModel(WizardDescriptor wiz) {
                         if (!(assetKey instanceof TextureKey)) {
                             deleteList.add(fileObj);
                         }
-                    } else{
-                        deleteList.add(fileObj);
                     }
                 }
             } catch (Exception ex) {

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/Ipo.java
Patch:
@@ -134,7 +134,7 @@ public Track calculateTrack(int targetIndex, int startFrame, int stopFrame, int
 			Vector3f[] translations = new Vector3f[framesAmount + 1];
 			float[] translation = new float[3];
 			Quaternion[] rotations = new Quaternion[framesAmount + 1];
-			float[] quaternionRotation = new float[4];
+			float[] quaternionRotation = new float[] { 0, 0, 0, 1 };
 			float[] objectRotation = new float[3];
 			Vector3f[] scales = new Vector3f[framesAmount + 1];
 			float[] scale = new float[] { 1.0f, 1.0f, 1.0f };

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -252,8 +252,8 @@ public boolean contentEquals(Object otherObj) {
             // E.g. if user chose custom technique for one material but 
             // uses default technique for other material, the materials 
             // are not equal.
-            String thisDefName = this.technique != null ? this.technique.getDef().getName() : "";
-            String otherDefName = other.technique != null ? other.technique.getDef().getName() : "";
+            String thisDefName = this.technique != null ? this.technique.getDef().getName() : "Default";
+            String otherDefName = other.technique != null ? other.technique.getDef().getName() : "Default";
             if (!thisDefName.equals(otherDefName)) {
                 return false;
             }

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -252,8 +252,8 @@ public boolean contentEquals(Object otherObj) {
             // E.g. if user chose custom technique for one material but 
             // uses default technique for other material, the materials 
             // are not equal.
-            String thisDefName = this.technique != null ? this.technique.getDef().getName() : null;
-            String otherDefName = other.technique != null ? other.technique.getDef().getName() : null;
+            String thisDefName = this.technique != null ? this.technique.getDef().getName() : "";
+            String otherDefName = other.technique != null ? other.technique.getDef().getName() : "";
             if (!thisDefName.equals(otherDefName)) {
                 return false;
             }

File: engine/src/android/com/jme3/app/AndroidHarness.java
Patch:
@@ -8,8 +8,8 @@
 import android.graphics.drawable.NinePatchDrawable;
 import android.opengl.GLSurfaceView;
 import android.os.Bundle;
-import android.view.ViewGroup.LayoutParams;
 import android.view.*;
+import android.view.ViewGroup.LayoutParams;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.TextView;
@@ -20,7 +20,6 @@
 import com.jme3.input.controls.TouchTrigger;
 import com.jme3.input.event.TouchEvent;
 import com.jme3.system.AppSettings;
-import com.jme3.system.JmeSystem;
 import com.jme3.system.SystemListener;
 import com.jme3.system.android.AndroidConfigChooser.ConfigType;
 import com.jme3.system.android.JmeAndroidSystem;

File: engine/src/android/com/jme3/audio/android/AndroidAudioRenderer.java
Patch:
@@ -38,10 +38,9 @@
 import android.media.AudioManager;
 import android.media.MediaPlayer;
 import android.media.SoundPool;
-
 import com.jme3.asset.AssetKey;
-import com.jme3.audio.AudioNode.Status;
 import com.jme3.audio.*;
+import com.jme3.audio.AudioNode.Status;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
 import java.io.IOException;

File: engine/src/android/com/jme3/system/android/JmeAndroidSystem.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.app.Activity;
 import android.os.Environment;
-import android.util.Log;
 import com.jme3.asset.AndroidAssetManager;
 import com.jme3.asset.AssetManager;
 import com.jme3.audio.AudioRenderer;

File: engine/src/android/jme3test/android/DemoMainActivity.java
Patch:
@@ -4,9 +4,9 @@
 import android.content.pm.ActivityInfo;
 import android.os.Bundle;
 import android.view.View;
+import android.widget.*;
 import android.widget.AdapterView.OnItemClickListener;
 import android.widget.AdapterView.OnItemSelectedListener;
-import android.widget.*;
 import java.util.ArrayList;
 import java.util.List;
 

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/IpoHelper.java
Patch:
@@ -1,7 +1,5 @@
 package com.jme3.scene.plugins.blender.animations;
 
-import java.util.List;
-
 import com.jme3.animation.BoneTrack;
 import com.jme3.scene.plugins.blender.AbstractBlenderHelper;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -11,6 +9,7 @@
 import com.jme3.scene.plugins.blender.file.FileBlockHeader;
 import com.jme3.scene.plugins.blender.file.Pointer;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.List;
 
 /**
  * This class helps to compute values from interpolation curves for features

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/BlenderTrack.java
Patch:
@@ -1,7 +1,5 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.io.IOException;
-
 import com.jme3.animation.AnimChannel;
 import com.jme3.animation.AnimControl;
 import com.jme3.animation.BoneTrack;
@@ -12,6 +10,7 @@
 import com.jme3.math.Quaternion;
 import com.jme3.math.Vector3f;
 import com.jme3.util.TempVars;
+import java.io.IOException;
 
 /**
  * This class holds either the bone track or spatial track. Is made to improve

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintDampTrack.java
Patch:
@@ -1,12 +1,11 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * The damp track constraint. Available for blender 2.50+.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintPivot.java
Patch:
@@ -1,12 +1,11 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * The pivot constraint. Available for blender 2.50+.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSplineInverseKinematic.java
Patch:
@@ -1,12 +1,11 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * The spline inverse kinematic constraint. Available for blender 2.50+.

File: engine/src/blender/com/jme3/scene/plugins/blender/curves/CurvesHelper.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.jme3.material.Material;
 import com.jme3.material.RenderState.FaceCullMode;
-import com.jme3.math.Spline.SplineType;
 import com.jme3.math.*;
+import com.jme3.math.Spline.SplineType;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderAWT.java
Patch:
@@ -1,8 +1,5 @@
 package com.jme3.scene.plugins.blender.textures.blending;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.textures.TexturePixel;
@@ -11,6 +8,8 @@
 import com.jme3.texture.Image;
 import com.jme3.texture.Image.Format;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * The class that is responsible for blending the following texture types:

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderFactory.java
Patch:
@@ -31,12 +31,11 @@
  */
 package com.jme3.scene.plugins.blender.textures.blending;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.texture.Image;
 import com.jme3.texture.Image.Format;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class creates the texture blending class depending on the texture type.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/generating/NoiseGenerator.java
Patch:
@@ -36,7 +36,6 @@
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
 import com.jme3.scene.plugins.blender.textures.generating.TextureGeneratorMusgrave.MusgraveData;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.ObjectInputStream;

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/io/LuminancePixelInputOutput.java
Patch:
@@ -1,10 +1,9 @@
 package com.jme3.scene.plugins.blender.textures.io;
 
-import java.nio.ByteBuffer;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.textures.TexturePixel;
 import com.jme3.texture.Image;
+import java.nio.ByteBuffer;
 
 /**
  * Implemens read/write operations for luminance images.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/io/PixelIOFactory.java
Patch:
@@ -1,10 +1,9 @@
 package com.jme3.scene.plugins.blender.textures.io;
 
+import com.jme3.texture.Image.Format;
 import java.util.HashMap;
 import java.util.Map;
 
-import com.jme3.texture.Image.Format;
-
 /**
  * This class creates a pixel IO object for the specified image format.
  * 

File: engine/src/core-effects/com/jme3/post/filters/TranslucentBucketFilter.java
Patch:
@@ -14,7 +14,6 @@
 import com.jme3.renderer.ViewPort;
 import com.jme3.renderer.queue.RenderQueue;
 import com.jme3.scene.Node;
-
 import com.jme3.scene.Spatial;
 import com.jme3.texture.FrameBuffer;
 import com.jme3.texture.Texture;

File: engine/src/core-plugins/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -33,9 +33,9 @@
 package com.jme3.material.plugins;
 
 import com.jme3.asset.*;
+import com.jme3.material.*;
 import com.jme3.material.RenderState.BlendMode;
 import com.jme3.material.RenderState.FaceCullMode;
-import com.jme3.material.*;
 import com.jme3.material.TechniqueDef.LightMode;
 import com.jme3.material.TechniqueDef.ShadowMode;
 import com.jme3.math.ColorRGBA;

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -38,8 +38,8 @@
 import com.jme3.math.Vector2f;
 import com.jme3.math.Vector3f;
 import com.jme3.renderer.queue.RenderQueue.Bucket;
-import com.jme3.scene.Mesh.Mode;
 import com.jme3.scene.*;
+import com.jme3.scene.Mesh.Mode;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.scene.mesh.IndexBuffer;
 import com.jme3.scene.mesh.IndexIntBuffer;
@@ -52,8 +52,8 @@
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
-import java.util.Map.Entry;
 import java.util.*;
+import java.util.Map.Entry;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 

File: engine/src/core/checkers/quals/Unused.java
Patch:
@@ -1,7 +1,7 @@
 package checkers.quals;
 
-import static java.lang.annotation.ElementType.FIELD;
 import java.lang.annotation.*;
+import static java.lang.annotation.ElementType.FIELD;
 
 /**
  * Declares that the field may not be accessed if the receiver is of the

File: engine/src/core/com/jme3/app/Application.java
Patch:
@@ -43,8 +43,8 @@
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.Renderer;
 import com.jme3.renderer.ViewPort;
-import com.jme3.system.JmeContext.Type;
 import com.jme3.system.*;
+import com.jme3.system.JmeContext.Type;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.concurrent.Callable;

File: engine/src/core/com/jme3/app/SimpleApplication.java
Patch:
@@ -38,16 +38,13 @@
 import com.jme3.input.KeyInput;
 import com.jme3.input.controls.ActionListener;
 import com.jme3.input.controls.KeyTrigger;
-import com.jme3.math.Quaternion;
-import com.jme3.math.Vector3f;
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.queue.RenderQueue.Bucket;
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial.CullHint;
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeContext.Type;
 import com.jme3.system.JmeSystem;
-import com.jme3.util.BufferUtils;
 
 /**
  * <code>SimpleApplication</code> extends the {@link com.jme3.app.Application}

File: engine/src/core/com/jme3/app/StatsAppState.java
Patch:
@@ -35,7 +35,6 @@
 import com.jme3.app.state.AppStateManager;
 import com.jme3.font.BitmapFont;
 import com.jme3.font.BitmapText;
-import com.jme3.renderer.RenderManager;
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial.CullHint;
 

File: engine/src/core/com/jme3/asset/AssetConfig.java
Patch:
@@ -32,7 +32,6 @@
 
 package com.jme3.asset;
 
-import java.io.DataInput;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Scanner;

File: engine/src/core/com/jme3/cinematic/events/MotionTrack.java
Patch:
@@ -41,13 +41,11 @@
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.Quaternion;
-import com.jme3.math.Vector2f;
 import com.jme3.math.Vector3f;
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.ViewPort;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.control.Control;
-import com.jme3.util.TempVars;
 import java.io.IOException;
 
 /**

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -29,9 +29,9 @@
  */
 package com.jme3.material;
 
-import com.jme3.asset.CloneableSmartAsset;
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetManager;
+import com.jme3.asset.CloneableSmartAsset;
 import com.jme3.export.*;
 import com.jme3.light.*;
 import com.jme3.material.RenderState.BlendMode;

File: engine/src/core/com/jme3/renderer/RenderManager.java
Patch:
@@ -47,7 +47,6 @@
 import com.jme3.shader.VarType;
 import com.jme3.system.NullRenderer;
 import com.jme3.system.Timer;
-import com.jme3.util.IntMap.Entry;
 import com.jme3.util.TempVars;
 import java.util.ArrayList;
 import java.util.Collections;

File: engine/src/core/com/jme3/scene/AssetLinkNode.java
Patch:
@@ -42,8 +42,8 @@
 import com.jme3.export.binary.BinaryImporter;
 import com.jme3.util.SafeArrayList;
 import java.io.IOException;
-import java.util.Map.Entry;
 import java.util.*;
+import java.util.Map.Entry;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 

File: engine/src/core/com/jme3/shadow/PssmShadowRenderer.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.jme3.asset.AssetManager;
 import com.jme3.material.Material;
-import com.jme3.material.RenderState;
 import com.jme3.math.ColorRGBA;
 import com.jme3.math.Matrix4f;
 import com.jme3.math.Vector3f;

File: engine/src/core/com/jme3/util/ListMap.java
Patch:
@@ -33,8 +33,8 @@
 package com.jme3.util;
 
 import java.io.Serializable;
-import java.util.Map.Entry;
 import java.util.*;
+import java.util.Map.Entry;
 
 /**
  * Implementation of a Map that favors iteration speed rather than

File: engine/src/desktop/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -1,8 +1,6 @@
 package com.jme3.app.state;
 
 import com.jme3.app.Application;
-import com.jme3.app.state.AbstractAppState;
-import com.jme3.app.state.AppStateManager;
 import com.jme3.post.SceneProcessor;
 import com.jme3.renderer.Camera;
 import com.jme3.renderer.RenderManager;

File: engine/src/jbullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -36,9 +36,9 @@
 import com.bulletphysics.ContactDestroyedCallback;
 import com.bulletphysics.ContactProcessedCallback;
 import com.bulletphysics.collision.broadphase.*;
+import com.bulletphysics.collision.dispatch.*;
 import com.bulletphysics.collision.dispatch.CollisionWorld.LocalConvexResult;
 import com.bulletphysics.collision.dispatch.CollisionWorld.LocalRayResult;
-import com.bulletphysics.collision.dispatch.*;
 import com.bulletphysics.collision.narrowphase.ManifoldPoint;
 import com.bulletphysics.collision.shapes.ConvexShape;
 import com.bulletphysics.dynamics.DiscreteDynamicsWorld;

File: engine/src/lwjgl/com/jme3/audio/lwjgl/LwjglAudioRenderer.java
Patch:
@@ -32,8 +32,8 @@
 
 package com.jme3.audio.lwjgl;
 
-import com.jme3.audio.AudioNode.Status;
 import com.jme3.audio.*;
+import com.jme3.audio.AudioNode.Status;
 import com.jme3.math.Vector3f;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.NativeObjectManager;
@@ -45,8 +45,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.lwjgl.LWJGLException;
-import static org.lwjgl.openal.AL10.*;
 import org.lwjgl.openal.*;
+import static org.lwjgl.openal.AL10.*;
 
 public class LwjglAudioRenderer implements AudioRenderer, Runnable {
 

File: engine/src/lwjgl/com/jme3/input/lwjgl/JInputJoyInput.java
Patch:
@@ -8,11 +8,11 @@
 import com.jme3.input.event.JoyButtonEvent;
 import com.jme3.util.IntMap;
 import java.util.HashMap;
+import net.java.games.input.*;
 import net.java.games.input.Component.Identifier;
 import net.java.games.input.Component.Identifier.Axis;
 import net.java.games.input.Component.Identifier.Button;
 import net.java.games.input.Component.POV;
-import net.java.games.input.*;
 
 public class JInputJoyInput implements JoyInput {
 

File: engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglGL1Renderer.java
Patch:
@@ -23,8 +23,6 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapAxis;
 import com.jme3.util.BufferUtils;
-import com.jme3.util.IntMap;
-import com.jme3.util.IntMap.Entry;
 import com.jme3.util.NativeObjectManager;
 import java.nio.*;
 import java.util.ArrayList;

File: engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -53,7 +53,6 @@
 import com.jme3.texture.Image;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapAxis;
-import com.jme3.util.IntMap.Entry;
 import com.jme3.util.*;
 import java.nio.*;
 import java.util.EnumSet;
@@ -62,6 +61,7 @@
 import java.util.logging.Logger;
 import jme3tools.converters.MipMapGenerator;
 import jme3tools.shader.ShaderDebug;
+import org.lwjgl.opengl.*;
 import static org.lwjgl.opengl.ARBTextureMultisample.*;
 import static org.lwjgl.opengl.EXTFramebufferBlit.*;
 import static org.lwjgl.opengl.EXTFramebufferMultisample.*;
@@ -72,7 +72,6 @@
 import static org.lwjgl.opengl.GL14.*;
 import static org.lwjgl.opengl.GL15.*;
 import static org.lwjgl.opengl.GL20.*;
-import org.lwjgl.opengl.*;
 //import static org.lwjgl.opengl.ARBDrawInstanced.*;
 
 public class LwjglRenderer implements Renderer {

File: engine/src/networking/com/jme3/network/base/DefaultClient.java
Patch:
@@ -32,8 +32,8 @@
 
 package com.jme3.network.base;
 
-import com.jme3.network.ClientStateListener.DisconnectInfo;
 import com.jme3.network.*;
+import com.jme3.network.ClientStateListener.DisconnectInfo;
 import com.jme3.network.kernel.Connector;
 import com.jme3.network.message.ChannelInfoMessage;
 import com.jme3.network.message.ClientRegistrationMessage;

File: engine/src/networking/com/jme3/network/rmi/ObjectStore.java
Patch:
@@ -32,8 +32,8 @@
 
 package com.jme3.network.rmi;
 
-import com.jme3.network.ClientStateListener.DisconnectInfo;
 import com.jme3.network.*;
+import com.jme3.network.ClientStateListener.DisconnectInfo;
 import com.jme3.network.serializing.Serializer;
 import com.jme3.util.IntMap;
 import com.jme3.util.IntMap.Entry;

File: engine/src/networking/com/jme3/network/serializing/serializers/FieldSerializer.java
Patch:
@@ -40,7 +40,6 @@
 import java.nio.BufferOverflowException;
 import java.nio.ByteBuffer;
 import java.util.*;
-import java.util.logging.Level;
 
 /**
  * The field serializer is the default serializer used for custom class.

File: engine/src/niftygui/com/jme3/cinematic/events/GuiTrack.java
Patch:
@@ -38,7 +38,6 @@
 import com.jme3.export.OutputCapsule;
 import de.lessvoid.nifty.Nifty;
 import de.lessvoid.nifty.screen.NullScreen;
-import de.lessvoid.nifty.screen.Screen;
 import java.io.IOException;
 
 /**

File: engine/src/niftygui/com/jme3/niftygui/InputSystemJme.java
Patch:
@@ -43,9 +43,9 @@
 import de.lessvoid.nifty.controls.TextField;
 import de.lessvoid.nifty.controls.nullobjects.TextFieldNull;
 import de.lessvoid.nifty.elements.Element;
-import de.lessvoid.nifty.tools.resourceloader.NiftyResourceLoader;
 import de.lessvoid.nifty.input.keyboard.KeyboardInputEvent;
 import de.lessvoid.nifty.spi.input.InputSystem;
+import de.lessvoid.nifty.tools.resourceloader.NiftyResourceLoader;
 import java.util.ArrayList;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/terrain/com/jme3/terrain/Terrain.java
Patch:
@@ -34,7 +34,6 @@
 import com.jme3.material.Material;
 import com.jme3.math.Vector2f;
 import com.jme3.math.Vector3f;
-import com.jme3.terrain.geomipmap.lodcalc.LodCalculator;
 import java.util.List;
 
 /**

File: engine/src/terrain/com/jme3/terrain/geomipmap/LODGeomap.java
Patch:
@@ -34,7 +34,6 @@
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.math.FastMath;
-import com.jme3.math.Plane;
 import com.jme3.math.Triangle;
 import com.jme3.math.Vector2f;
 import com.jme3.math.Vector3f;

File: engine/src/terrain/com/jme3/terrain/geomipmap/grid/FractalTileLoader.java
Patch:
@@ -5,17 +5,16 @@
 package com.jme3.terrain.geomipmap.grid;
 
 
-import com.jme3.asset.AssetManager;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.math.Vector3f;
 import com.jme3.terrain.geomipmap.TerrainGridTileLoader;
 import com.jme3.terrain.geomipmap.TerrainQuad;
 import com.jme3.terrain.heightmap.AbstractHeightMap;
 import com.jme3.terrain.heightmap.HeightMap;
+import com.jme3.terrain.noise.Basis;
 import java.io.IOException;
 import java.nio.FloatBuffer;
-import com.jme3.terrain.noise.Basis;
 
 /**
  *

File: engine/src/terrain/com/jme3/terrain/heightmap/ImageBasedHeightMap.java
Patch:
@@ -32,9 +32,9 @@
 
 package com.jme3.terrain.heightmap;
 
-import java.nio.ByteBuffer;
 import com.jme3.math.ColorRGBA;
 import com.jme3.texture.Image;
+import java.nio.ByteBuffer;
 import java.nio.ShortBuffer;
 
 /**

File: engine/src/terrain/com/jme3/terrain/heightmap/ImageHeightmap.java
Patch:
@@ -4,8 +4,6 @@
  */
 package com.jme3.terrain.heightmap;
 
-import com.jme3.texture.Image;
-
 /**
  * A heightmap that is built off an image.
  * If you want to be able to supply different Image types to 

File: engine/src/terrain/com/jme3/terrain/noise/Basis.java
Patch:
@@ -29,10 +29,9 @@
  */
 package com.jme3.terrain.noise;
 
-import java.nio.FloatBuffer;
-
 import com.jme3.terrain.noise.basis.ImprovedNoise;
 import com.jme3.terrain.noise.modulator.Modulator;
+import java.nio.FloatBuffer;
 
 /**
  * Interface for - basically 3D - noise generation algorithms, based on the

File: engine/src/terrain/com/jme3/terrain/noise/filter/AbstractFilter.java
Patch:
@@ -29,12 +29,11 @@
  */
 package com.jme3.terrain.noise.filter;
 
+import com.jme3.terrain.noise.Filter;
 import java.nio.FloatBuffer;
 import java.util.ArrayList;
 import java.util.List;
 
-import com.jme3.terrain.noise.Filter;
-
 public abstract class AbstractFilter implements Filter {
 
 	protected List<Filter> preFilters = new ArrayList<Filter>();

File: engine/src/terrain/com/jme3/terrain/noise/filter/HydraulicErodeFilter.java
Patch:
@@ -29,9 +29,8 @@
  */
 package com.jme3.terrain.noise.filter;
 
-import java.nio.FloatBuffer;
-
 import com.jme3.terrain.noise.Basis;
+import java.nio.FloatBuffer;
 
 public class HydraulicErodeFilter extends AbstractFilter {
 

File: engine/src/terrain/com/jme3/terrain/noise/filter/IterativeFilter.java
Patch:
@@ -29,12 +29,11 @@
  */
 package com.jme3.terrain.noise.filter;
 
+import com.jme3.terrain.noise.Filter;
 import java.nio.FloatBuffer;
 import java.util.ArrayList;
 import java.util.List;
 
-import com.jme3.terrain.noise.Filter;
-
 public class IterativeFilter extends AbstractFilter {
 
 	private int iterations;

File: engine/src/terrain/com/jme3/terrain/noise/filter/PerturbFilter.java
Patch:
@@ -29,11 +29,10 @@
  */
 package com.jme3.terrain.noise.filter;
 
-import java.nio.FloatBuffer;
-import java.util.logging.Logger;
-
 import com.jme3.terrain.noise.ShaderUtils;
 import com.jme3.terrain.noise.fractal.FractalSum;
+import java.nio.FloatBuffer;
+import java.util.logging.Logger;
 
 public class PerturbFilter extends AbstractFilter {
 

File: engine/src/terrain/com/jme3/terrain/noise/modulator/CatRom2.java
Patch:
@@ -29,11 +29,10 @@
  */
 package com.jme3.terrain.noise.modulator;
 
+import com.jme3.terrain.noise.ShaderUtils;
 import java.util.HashMap;
 import java.util.Map;
 
-import com.jme3.terrain.noise.ShaderUtils;
-
 public class CatRom2 implements Modulator {
 
 	private int sampleRate = 100;

File: engine/src/test/jme3test/animation/TestCinematic.java
Patch:
@@ -47,7 +47,6 @@
 import com.jme3.material.Material;
 import com.jme3.math.ColorRGBA;
 import com.jme3.math.FastMath;
-import com.jme3.math.Quaternion;
 import com.jme3.math.Vector3f;
 import com.jme3.niftygui.NiftyJmeDisplay;
 import com.jme3.post.FilterPostProcessor;

File: engine/src/test/jme3test/audio/TestMusicPlayer.java
Patch:
@@ -34,8 +34,8 @@
 
 import com.jme3.asset.AssetInfo;
 import com.jme3.asset.AssetLoader;
-import com.jme3.audio.AudioNode.Status;
 import com.jme3.audio.*;
+import com.jme3.audio.AudioNode.Status;
 import com.jme3.audio.plugins.OGGLoader;
 import com.jme3.audio.plugins.WAVLoader;
 import com.jme3.system.AppSettings;

File: engine/src/test/jme3test/games/CubeField.java
Patch:
@@ -46,7 +46,6 @@
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Node;
-import com.jme3.scene.Spatial.CullHint;
 import com.jme3.scene.shape.Box;
 import com.jme3.scene.shape.Dome;
 import java.util.ArrayList;

File: engine/src/test/jme3test/input/TestJoystick.java
Patch:
@@ -5,7 +5,6 @@
 import com.jme3.input.Joystick;
 import com.jme3.input.controls.ActionListener;
 import com.jme3.input.controls.AnalogListener;
-import com.jme3.input.controls.JoyAxisTrigger;
 import com.jme3.system.AppSettings;
 
 public class TestJoystick extends SimpleApplication implements AnalogListener, ActionListener {

File: engine/src/test/jme3test/input/combomoves/TestComboMoves.java
Patch:
@@ -38,7 +38,6 @@
 import com.jme3.input.controls.ActionListener;
 import com.jme3.input.controls.KeyTrigger;
 import com.jme3.math.ColorRGBA;
-import com.jme3.scene.Spatial.CullHint;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;

File: engine/src/test/jme3test/light/TestSpotLightTerrain.java
Patch:
@@ -52,7 +52,6 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;
 import com.jme3.util.SkyFactory;
-import jme3tools.converters.ImageToAwt;
 
 /**
  * Uses the terrain's lighting texture with normal maps and lights.

File: engine/src/test/jme3test/material/TestMaterialCompare.java
Patch:
@@ -32,7 +32,6 @@
 package jme3test.material;
 
 import com.jme3.asset.AssetManager;
-import com.jme3.asset.GeneratedTextureKey;
 import com.jme3.asset.TextureKey;
 import com.jme3.material.Material;
 import com.jme3.material.RenderState.BlendMode;

File: engine/src/test/jme3test/post/TestLightScattering.java
Patch:
@@ -33,8 +33,6 @@
 package jme3test.post;
 
 import com.jme3.app.SimpleApplication;
-import com.jme3.app.StatsView;
-import com.jme3.font.BitmapText;
 import com.jme3.light.DirectionalLight;
 import com.jme3.material.Material;
 import com.jme3.math.ColorRGBA;

File: engine/src/test/jme3test/terrain/TerrainTest.java
Patch:
@@ -49,7 +49,6 @@
 import com.jme3.terrain.heightmap.ImageBasedHeightMap;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;
-import com.jme3.asset.TextureKey;
 
 /**
  * Demonstrates how to use terrain.

File: engine/src/test/jme3test/terrain/TerrainTestAdvanced.java
Patch:
@@ -43,7 +43,9 @@
 import com.jme3.math.ColorRGBA;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Geometry;
+import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
+import com.jme3.scene.debug.Arrow;
 import com.jme3.terrain.geomipmap.TerrainLodControl;
 import com.jme3.terrain.geomipmap.TerrainQuad;
 import com.jme3.terrain.geomipmap.lodcalc.DistanceLodCalculator;
@@ -52,8 +54,6 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;
 import com.jme3.util.SkyFactory;
-import com.jme3.scene.Node;
-import com.jme3.scene.debug.Arrow;
 
 /**
  * Uses the terrain's lighting texture with normal maps and lights.

File: engine/src/test/jme3test/terrain/TerrainTestCollision.java
Patch:
@@ -31,7 +31,6 @@
  */
 package jme3test.terrain;
 
-import com.jme3.bullet.collision.shapes.SphereCollisionShape;
 import com.jme3.app.SimpleApplication;
 import com.jme3.bounding.BoundingBox;
 import com.jme3.bullet.BulletAppState;
@@ -63,7 +62,6 @@
 import com.jme3.terrain.heightmap.ImageBasedHeightMap;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;
-import jme3tools.converters.ImageToAwt;
 
 /**
  * Creates a terrain object and a collision node to go with it. Then

File: engine/src/tools/jme3tools/converters/model/ModelConverter.java
Patch:
@@ -32,8 +32,8 @@
 
 package jme3tools.converters.model;
 
-import com.jme3.scene.Mesh.Mode;
 import com.jme3.scene.*;
+import com.jme3.scene.Mesh.Mode;
 import com.jme3.scene.VertexBuffer.Format;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.scene.mesh.IndexBuffer;

File: engine/src/tools/jme3tools/optimize/GeometryBatchFactory.java
Patch:
@@ -4,14 +4,13 @@
 import com.jme3.math.Matrix4f;
 import com.jme3.math.Transform;
 import com.jme3.math.Vector3f;
-import com.jme3.scene.Mesh.Mode;
 import com.jme3.scene.*;
+import com.jme3.scene.Mesh.Mode;
 import com.jme3.scene.VertexBuffer.Format;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.scene.VertexBuffer.Usage;
 import com.jme3.scene.mesh.IndexBuffer;
 import com.jme3.util.BufferUtils;
-import com.jme3.util.IntMap.Entry;
 import java.nio.Buffer;
 import java.nio.FloatBuffer;
 import java.nio.ShortBuffer;

File: engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -1846,7 +1846,7 @@ public void updateTexImageData(Image img, Texture.Type type, boolean mips, int u
         } else {
 //          glTexParameteri(target, GL_TEXTURE_BASE_LEVEL, 0 );
             if (img.getMipMapSizes() != null) {
-                glTexParameteri(target, GL_TEXTURE_MAX_LEVEL, img.getMipMapSizes().length);
+                glTexParameteri(target, GL_TEXTURE_MAX_LEVEL, img.getMipMapSizes().length - 1);
             }
         }
 

File: engine/src/core/com/jme3/audio/AudioNode.java
Patch:
@@ -372,14 +372,14 @@ public void setVolume(float volume) {
     }
 
     /**
-     * @return The time offset in seconds when the sound will start playing.
+     * @return the time offset in the sound sample when to start playing.
      */
     public float getTimeOffset() {
         return timeOffset;
     }
 
     /**
-     * Set the time offset in seconds when the sound will start playing.
+     * Set the time offset in the sound sample when to start playing.
      * 
      * @param timeOffset The time offset
      * @throws IllegalArgumentException If timeOffset is negative

File: engine/src/core/com/jme3/util/IntMap.java
Patch:
@@ -61,11 +61,11 @@ public IntMap(int initialCapacity, float loadFactor) {
         if (initialCapacity > 1 << 30){
             throw new IllegalArgumentException("initialCapacity is too large.");
         }
-        if (initialCapacity < 0){
+        if (initialCapacity <= 0){
             throw new IllegalArgumentException("initialCapacity must be greater than zero.");
         }
         if (loadFactor <= 0){
-            throw new IllegalArgumentException("initialCapacity must be greater than zero.");
+            throw new IllegalArgumentException("loadFactor must be greater than zero.");
         }
         capacity = 1;
         while (capacity < initialCapacity){

File: engine/src/core-plugins/com/jme3/asset/plugins/FileLocator.java
Patch:
@@ -51,7 +51,7 @@ public void setRootPath(String rootPath) {
         try {
             root = new File(rootPath).getCanonicalFile();
             if (!root.isDirectory()){
-                throw new IllegalArgumentException("Given root path \"" + root + "\" not a directory");
+                throw new IllegalArgumentException("Given root path \"" + root + "\" is not a directory");
             }
         } catch (IOException ex) {
             throw new AssetLoadException("Root path is invalid", ex);

File: engine/src/android/com/jme3/audio/android/AndroidAudioRenderer.java
Patch:
@@ -436,7 +436,9 @@ public void pauseAll() {
         if (soundPool != null) {
             soundPool.autoPause();
             for (MediaPlayer mp : musicPlaying.values()) {
-                mp.pause();
+                if(mp.isPlaying()){
+                    mp.pause();
+                }
             }
         }
     }

File: engine/src/core/com/jme3/scene/SimpleBatchNode.java
Patch:
@@ -37,7 +37,8 @@ public int attachChild(Spatial child) {
 
     @Override
     protected void setTransformRefresh() {
-        super.setTransformRefresh();
+        refreshFlags |= RF_TRANSFORM;
+        setBoundRefresh();
         for (Batch batch : batches.getArray()) {
             batch.geometry.setTransformRefresh();
         }

File: engine/src/core/com/jme3/font/BitmapText.java
Patch:
@@ -111,8 +111,6 @@ public void setText(CharSequence text) {
      * @param text String to change text to
      */
     public void setText(String text) {
-        System.out.println("HI");
-
         text = text == null ? "" : text;
         if (block.getText().equals(text)) {
             return;

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -561,6 +561,8 @@ public void removeAll(Spatial spatial) {
     private native void removeVehicle(long space, long id);
 
     private native void addConstraint(long space, long id);
+    
+    private native void addConstraintC(long space, long id, boolean collision);
 
     private native void removeConstraint(long space, long id);
 
@@ -626,7 +628,7 @@ private void removeRigidBody(PhysicsRigidBody node) {
     private void addJoint(PhysicsJoint joint) {
         Logger.getLogger(PhysicsSpace.class.getName()).log(Level.INFO, "Adding Joint {0} to physics space.", Long.toHexString(joint.getObjectId()));
         physicsJoints.add(joint);
-        addConstraint(physicsSpaceId, joint.getObjectId());
+        addConstraintC(physicsSpaceId, joint.getObjectId(), !joint.isCollisionBetweenLinkedBodys());
 //        dynamicsWorld.addConstraint(joint.getObjectId(), !joint.isCollisionBetweenLinkedBodys());
     }
 

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/IpoHelper.java
Patch:
@@ -130,7 +130,7 @@ public int getCurveType(Structure structure, BlenderContext blenderContext) {
 		if (rnaPath.endsWith("scale")) {
 			return Ipo.AC_SIZE_X + arrayIndex;
 		}
-		if (rnaPath.endsWith("rotation")) {
+		if (rnaPath.endsWith("rotation") || rnaPath.endsWith("rotation_euler")) {
 			return Ipo.OB_ROT_X + arrayIndex;
 		}
 		throw new IllegalStateException("Unknown curve rna path: " + rnaPath);

File: engine/src/core/com/jme3/export/SavableClassUtil.java
Patch:
@@ -70,6 +70,7 @@ private static void addRemapping(String oldClass, Class<? extends Savable> newCl
         addRemapping("com.jme3.material.Material$MatParamTexture", MatParamTexture.class);
         addRemapping("com.jme3.animation.BoneAnimation", Animation.class);
         addRemapping("com.jme3.animation.SpatialAnimation", Animation.class);
+        addRemapping("com.jme3.scene.plugins.blender.objects.Properties", NullSavable.class);
     }
     
     private static String remapClass(String className) throws ClassNotFoundException {

File: engine/src/android/com/jme3/asset/AndroidImageInfo.java
Patch:
@@ -9,7 +9,7 @@
 import java.io.InputStream;
 
 /**
-  * <code>AndroidImageInfo</code> is set in a jME3 image via the {@link Image#setEfficientData(java.lang.Object)}
+  * <code>AndroidImageInfo</code> is set in a jME3 image via the {@link Image#setEfficentData(java.lang.Object) }
   * method to retrieve a {@link Bitmap} when it is needed by the renderer. 
   * User code may extend <code>AndroidImageInfo</code> and provide their own implementation of the 
   * {@link AndroidImageInfo#loadBitmap()} method to acquire a bitmap by their own means.

File: engine/src/core/com/jme3/asset/CloneableSmartAsset.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -47,7 +47,7 @@
  * If the {@link AssetManager#loadAsset(com.jme3.asset.AssetKey) } method
  * is called twice with the same asset key (equals() wise, not necessarily reference wise)
  * then both assets will have the same asset key set (reference wise) via
- * {@link Asset#setKey(com.jme3.asset.AssetKey) }, then this asset key
+ * {@link AssetKey#AssetKey() }, then this asset key
  * is used to track all instances of that asset. Once all clones of the asset 
  * are garbage collected, the shared asset key becomes unreachable and at that 
  * point it is removed from the smart asset cache. 

File: engine/src/core/com/jme3/export/JmeExporter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -68,7 +68,7 @@ public interface JmeExporter {
      * Returns the {@link OutputCapsule} for the given savable object.
      * 
      * @param object The object to retrieve an output capsule for.
-     * @return  
+     * @return  the {@link OutputCapsule} for the given savable object.
      */
     public OutputCapsule getCapsule(Savable object);
 }

File: engine/src/core/com/jme3/material/RenderState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -213,8 +213,8 @@ public enum FaceCullMode {
      * com.jme3.material.RenderState.StencilOperation,
      * com.jme3.material.RenderState.StencilOperation,
      * com.jme3.material.RenderState.StencilOperation,
-     * com.jme3.material.RenderState.StencilFunction,
-     * com.jme3.material.RenderState.StencilFunction)}
+     * com.jme3.material.RenderState.TestFunction,
+     * com.jme3.material.RenderState.TestFunction) }
      */
     public enum StencilOperation {
 

File: engine/src/desktop/com/jme3/app/SettingsDialog.java
Patch:
@@ -52,11 +52,10 @@
  * <code>GameSettings</code> class. The <code>GameSettings</code> object
  * is still created by the client application, and passed during construction.
  * 
- * @see com.jme.system.GameSettings
+ * @see AppSettings
  * @author Mark Powell
  * @author Eric Woroshow
  * @author Joshua Slack - reworked for proper use of GL commands.
- * @version $Id: LWJGLPropertiesDialog.java 4131 2009-03-19 20:15:28Z blaine.dev $
  */
 public final class SettingsDialog extends JDialog {
 

File: engine/src/desktop/jme3tools/navigation/MapModel2D.java
Patch:
@@ -290,7 +290,7 @@ public void setYCentre(int yCentre) {
 
     /**
      * Returns the pixel (x,y) centre of the map
-     * @return {@link Point) object marking the map's (x,y) centre
+     * @return {@link Point} object marking the map's (x,y) centre
      * @since 1.0
      */
     public Point getPixelCentre() {

File: engine/src/core-effects/com/jme3/water/SimpleWaterProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -359,7 +359,7 @@ public int getRenderHeight() {
     /**
      * Set the reflection Texture render size,
      * set before adding the processor!
-     * @param with
+     * @param width
      * @param height
      */
     public void setRenderSize(int width, int height) {

File: engine/src/core/com/jme3/input/event/JoyButtonEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -67,7 +67,7 @@ public int getButtonIndex() {
      * 
      * @return joystick index.
      * 
-     * @see InputManager#getJoysticks() 
+     * @see com.jme3.input.InputManager#getJoysticks() 
      */
     public int getJoyIndex() {
         return joyIdx;

File: engine/src/core/com/jme3/scene/SceneGraphVisitorAdapter.java
Patch:
@@ -18,7 +18,7 @@ public class SceneGraphVisitorAdapter implements SceneGraphVisitor {
     public void visit(Geometry geom) {}
     
     /**
-     * Called when a {@link visit} is visited.
+     * Called when a {@link Node} is visited.
      * 
      * @param geom The visited node
      */

File: engine/src/core/com/jme3/scene/shape/Box.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -111,7 +111,8 @@ public Box(Vector3f center, float x, float y, float z) {
      * <p>
      * The minimum and maximum point are provided, these two points define the
      * shape and size of the box but not it's orientation or position. You should
-     * use the {@link #setLocalTranslation()} and {@link #setLocalRotation()}
+     * use the {@link com.jme3.scene.Spatial#setLocalTranslation(com.jme3.math.Vector3f) }
+     * and {@link com.jme3.scene.Spatial#setLocalRotation(com.jme3.math.Quaternion) }
      * methods to define those properties.
      * 
      * @param min the minimum point that defines the box.

File: engine/src/core/com/jme3/scene/shape/Dome.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -80,7 +80,7 @@ public Dome() {
      *            Influences how round the base of the dome is.
      * @param radius
      *            Radius of the dome.
-     * @see #Dome(java.lang.String, com.jme.math.Vector3f, int, int, float)
+     * @see #Dome(com.jme.math.Vector3f, int, int, float)
      */
     public Dome(int planes, int radialSamples, float radius) {
         this(new Vector3f(0, 0, 0), planes, radialSamples, radius);

File: engine/src/core/com/jme3/scene/shape/StripBox.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -110,7 +110,7 @@ public StripBox(Vector3f center, float x, float y, float z) {
      * <p>
      * The minimum and maximum point are provided, these two points define the
      * shape and size of the box but not it’s orientation or position. You should
-     * use the {@link #setLocalTranslation()} and {@link #setLocalRotation()}
+     * use the {@link com.jme3.scene.Spatial#setLocalTranslation(com.jme3.math.Vector3f) } and {@link com.jme3.scene.Spatial#setLocalRotation(com.jme3.math.Quaternion) }
      * methods to define those properties.
      * 
      * @param min the minimum point that defines the box.

File: engine/src/core/com/jme3/texture/Texture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -302,7 +302,7 @@ public enum ShadowCompareMode {
     private int anisotropicFilter;
 
     /**
-     * @return
+     * @return A cloned Texture object.
      */
     @Override
     public Texture clone(){

File: engine/src/core/com/jme3/util/BufferUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009-2010 jMonkeyEngine
+ * Copyright (c) 2009-2012 jMonkeyEngine
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -433,7 +433,7 @@ public static void multInBuffer(Vector3f toMult, FloatBuffer buf, int index) {
      * @param index
      *            the position (in terms of vectors, not floats) of the vector
      *            in the buffer to check against
-     * @return
+     * @return true if the data is equivalent, otherwise false.
      */
     public static boolean equals(Vector3f check, FloatBuffer buf, int index) {
         TempVars vars = TempVars.get();
@@ -638,7 +638,7 @@ public static void multInBuffer(Vector2f toMult, FloatBuffer buf, int index) {
      * @param index
      *            the position (in terms of vectors, not floats) of the vector
      *            in the buffer to check against
-     * @return
+     * @return true if the data is equivalent, otherwise false.
      */
     public static boolean equals(Vector2f check, FloatBuffer buf, int index) {
         TempVars vars = TempVars.get();

File: engine/src/desktop/jme3tools/navigation/StringUtil.java
Patch:
@@ -19,7 +19,7 @@ public class StringUtil {
      *
      * @param str the string to split up
      * @param delimiter the delimiter to use in splitting
-     * @returns an array of String objects equivalent to str
+     * @return an array of String objects equivalent to str
      */
     public String[] splitDelimitedStr(String str, String delimiter) {
         Pattern pttn = Pattern.compile(delimiter);
@@ -213,9 +213,9 @@ public String padNumZero(float num, int wholeLen, int decimalPlaces) {
     }
 
     /**
-     * Right aligns a float number with zeros for printing
+     * Right aligns a {@link String} with zeros for printing
      *
-     * @param num the number to be aligned
+     * @param input the String to be aligned
      * @param wholeLen the total length of the padded string
      * @return the padded number
      */

File: sdk/jme3-core/src/com/jme3/gde/core/assets/AssetDataObject.java
Patch:
@@ -193,7 +193,7 @@ public synchronized Savable loadAsset() {
 
     public synchronized void saveAsset() throws IOException {
         if (savable == null) {
-            Logger.getLogger(AssetDataObject.class.getName()).log(Level.WARNING, "Trying to save asset that has not been loaded before or does not support saving!");
+            Logger.getLogger(AssetDataObject.class.getName()).log(Level.WARNING, "Trying to write asset failed, asset data null!\nImport failed?");
             return;
         }
         final Savable savable = this.savable;

File: engine/src/test/jme3test/water/TestSimpleWater.java
Patch:
@@ -81,7 +81,7 @@ public void simpleInitApp() {
 
         //create water quad
         //waterPlane = waterProcessor.createWaterGeometry(100, 100);
-        waterPlane=(Spatial)  assetManager.loadAsset("Models/WaterTest/WaterTest.mesh.xml");
+        waterPlane=(Spatial)  assetManager.loadModel("Models/WaterTest/WaterTest.mesh.xml");
         waterPlane.setMaterial(waterProcessor.getMaterial());
         waterPlane.setLocalScale(40);
         waterPlane.setLocalTranslation(-5, 0, 5);

File: engine/src/core/com/jme3/asset/AssetManager.java
Patch:
@@ -34,8 +34,8 @@
 
 import com.jme3.asset.plugins.ClasspathLocator;
 import com.jme3.asset.plugins.FileLocator;
+import com.jme3.audio.AudioData;
 import com.jme3.audio.AudioKey;
-import com.jme3.audio.AudioNode;
 import com.jme3.font.BitmapFont;
 import com.jme3.material.Material;
 import com.jme3.scene.Spatial;
@@ -288,7 +288,7 @@ public interface AssetManager {
      *
      * @see AssetManager#loadAsset(com.jme3.asset.AssetKey)
      */
-    public AudioNode loadAudio(AudioKey key);
+    public AudioData loadAudio(AudioKey key);
 
     /**
      * Load audio file, supported types are WAV or OGG.
@@ -298,7 +298,7 @@ public interface AssetManager {
      *
      * @see AssetManager#loadAsset(com.jme3.asset.AssetKey)
      */
-    public AudioNode loadAudio(String name);
+    public AudioData loadAudio(String name);
 
     /**
      * Loads a 3D model with a ModelKey. 

File: engine/src/core/com/jme3/audio/AudioKey.java
Patch:
@@ -47,7 +47,7 @@
  *
  * @author Kirill Vainer
  */
-public class AudioKey extends AssetKey<AudioNode> {
+public class AudioKey extends AssetKey<AudioData> {
 
     private boolean stream;
     private boolean streamCache;
@@ -159,7 +159,7 @@ public int hashCode() {
     
     @Override
     public Class<? extends AssetProcessor> getProcessorType() {
-        return AudioProcessor.class;
+        return null;
     }
     
     @Override

File: engine/src/core/com/jme3/audio/AudioNode.java
Patch:
@@ -136,7 +136,7 @@ public AudioNode(AudioData audioData, AudioKey audioKey) {
      */
     public AudioNode(AssetManager assetManager, String name, boolean stream, boolean streamCache) {
         this.audioKey = new AudioKey(name, stream, streamCache);
-        this.data = (AudioData) assetManager.loadAsset(audioKey).data;
+        this.data = (AudioData) assetManager.loadAsset(audioKey);
     }
 
     /**
@@ -729,7 +729,7 @@ public void read(JmeImporter im) throws IOException {
         
         if (audioKey != null) {
             try {
-                data = im.getAssetManager().loadAsset(audioKey).data;
+                data = im.getAssetManager().loadAsset(audioKey);
             } catch (AssetNotFoundException ex){
                 Logger.getLogger(AudioNode.class.getName()).log(Level.FINE, "Cannot locate {0} for audio node {1}", new Object[]{audioKey, key});
                 data = PlaceholderAssets.getPlaceholderAudio();

File: engine/src/test/jme3test/asset/TestAbsoluteLocators.java
Patch:
@@ -35,7 +35,7 @@
 import com.jme3.asset.AssetManager;
 import com.jme3.asset.DesktopAssetManager;
 import com.jme3.asset.plugins.ClasspathLocator;
-import com.jme3.audio.AudioNode;
+import com.jme3.audio.AudioData;
 import com.jme3.audio.plugins.WAVLoader;
 import com.jme3.texture.Texture;
 import com.jme3.texture.plugins.AWTLoader;
@@ -51,7 +51,7 @@ public static void main(String[] args){
         am.registerLocator("/",  ClasspathLocator.class);
 
         // find a sound
-        AudioNode audio = am.loadAudio("Sound/Effects/Gun.wav");
+        AudioData audio = am.loadAudio("Sound/Effects/Gun.wav");
 
         // find a texture
         Texture tex = am.loadTexture("Textures/Terrain/Pond/Pond.jpg");

File: engine/src/test/jme3test/water/TestPostWater.java
Patch:
@@ -137,7 +137,7 @@ public void simpleInitApp() {
         water.setWaterHeight(initialWaterHeight);
       uw=cam.getLocation().y<waterHeight; 
       
-        waves = new AudioNode(audioRenderer, assetManager, "Sound/Environment/Ocean Waves.ogg", false);
+        waves = new AudioNode(assetManager, "Sound/Environment/Ocean Waves.ogg", false);
         waves.setLooping(true);
         waves.setReverbEnabled(true);
         if(uw){

File: engine/src/core/com/jme3/audio/AudioData.java
Patch:
@@ -70,7 +70,7 @@ protected AudioData(int id){
      * @return the duration in seconds of the audio clip.
      */
     public abstract float getDuration();
-
+    
     /**
      * @return Bits per single sample from a channel.
      */
@@ -106,5 +106,4 @@ public void setupFormat(int channels, int bitsPerSample, int sampleRate){
         this.bitsPerSample = bitsPerSample;
         this.sampleRate = sampleRate;
     }
-
 }

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -29,7 +29,7 @@
  */
 package com.jme3.material;
 
-import com.jme3.asset.Asset;
+import com.jme3.asset.CloneableSmartAsset;
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetManager;
 import com.jme3.export.*;
@@ -66,7 +66,7 @@
  * 
  * @author Kirill Vainer
  */
-public class Material implements Asset, Cloneable, Savable {
+public class Material implements CloneableSmartAsset, Cloneable, Savable {
 
     // Version #2: Fixed issue with RenderState.apply*** flags not getting exported
     public static final int SAVABLE_VERSION = 2;

File: engine/src/core/com/jme3/scene/Spatial.java
Patch:
@@ -31,8 +31,8 @@
  */
 package com.jme3.scene;
 
-import com.jme3.asset.Asset;
 import com.jme3.asset.AssetKey;
+import com.jme3.asset.CloneableSmartAsset;
 import com.jme3.bounding.BoundingVolume;
 import com.jme3.collision.Collidable;
 import com.jme3.export.*;
@@ -63,7 +63,7 @@
  * @author Joshua Slack
  * @version $Revision: 4075 $, $Data$
  */
-public abstract class Spatial implements Savable, Cloneable, Collidable, Asset {
+public abstract class Spatial implements Savable, Cloneable, Collidable, CloneableSmartAsset {
 
     private static final Logger logger = Logger.getLogger(Spatial.class.getName());
 

File: engine/src/core/com/jme3/texture/Texture.java
Patch:
@@ -34,7 +34,7 @@
 
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetNotFoundException;
-import com.jme3.asset.Asset;
+import com.jme3.asset.CloneableSmartAsset;
 import com.jme3.asset.TextureKey;
 import com.jme3.export.*;
 import com.jme3.util.PlaceholderAssets;
@@ -57,7 +57,7 @@
  * @author Joshua Slack
  * @version $Id: Texture.java 4131 2009-03-19 20:15:28Z blaine.dev $
  */
-public abstract class Texture implements Asset, Savable, Cloneable {
+public abstract class Texture implements CloneableSmartAsset, Savable, Cloneable {
 
     public enum Type {
 

File: engine/src/android/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -1051,7 +1051,7 @@ public void updateShaderSourceData(ShaderSource source, String language) {
             }
         } else {
            logger.log(Level.WARNING, "Bad compile of:\n{0}",
-                    new Object[]{ShaderDebug.formatShaderSource(source.getDefines(), source.getSource())});
+                    new Object[]{ShaderDebug.formatShaderSource(source.getDefines(), source.getSource(),stringBuf.toString())});
             if (infoLog != null) {
                 throw new RendererException("compile error in:" + source + " error:" + infoLog);
             } else {

File: engine/src/lwjgl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -995,10 +995,10 @@ public void updateShaderSourceData(ShaderSource source, String language) {
                         new Object[]{source.getName(), infoLog});
             } else {
                 logger.log(Level.FINE, "{0} compile success", source.getName());
-            }
-        } else {            
+            }            
+        } else {                        
             logger.log(Level.WARNING, "Bad compile of:\n{0}",
-                    new Object[]{ShaderDebug.formatShaderSource(source.getDefines(), source.getSource())});
+                    new Object[]{ShaderDebug.formatShaderSource(source.getDefines(), source.getSource(),stringBuf.toString())});
             if (infoLog != null) {
                 throw new RendererException("compile error in:" + source + " error:" + infoLog);
             } else {

File: engine/src/android/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -63,6 +63,7 @@
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import jme3tools.shader.ShaderDebug;
 
 public class OGLESShaderRenderer implements Renderer {
 
@@ -1049,8 +1050,8 @@ public void updateShaderSourceData(ShaderSource source, String language) {
                 logger.log(Level.FINE, "compile success: " + source.getName());
             }
         } else {
-           logger.log(Level.WARNING, "Bad compile of:\n{0}{1}",
-                    new Object[]{source.getDefines(), source.getSource()});
+           logger.log(Level.WARNING, "Bad compile of:\n{0}",
+                    new Object[]{ShaderDebug.formatShaderSource(source.getDefines(), source.getSource())});
             if (infoLog != null) {
                 throw new RendererException("compile error in:" + source + " error:" + infoLog);
             } else {

File: engine/src/test/jme3test/material/TestMaterialCompare.java
Patch:
@@ -86,7 +86,7 @@ public void simpleInitApp() {
     }
 
     private void testMats(Material mat1, Material mat2, boolean expected) {
-        if (mat2.isEqual(mat1)) {
+        if (mat2.equals(mat1)) {
             System.out.print(mat1.getName() + " equals " + mat2.getName());
             if(expected){
                 System.out.println(" success");

File: engine/src/tools/jme3tools/optimize/GeometryBatchFactory.java
Patch:
@@ -291,7 +291,7 @@ public static List<Geometry> makeBatches(Collection<Geometry> geometries, boolea
             if (outList == null) {
                 //trying to compare materials with the isEqual method 
                 for (Material mat : matToGeom.keySet()) {
-                    if (geom.getMaterial().isEqual(mat)) {
+                    if (geom.getMaterial().equals(mat)) {
                         outList = matToGeom.get(mat);
                     }
                 }

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -29,7 +29,7 @@
  */
 package com.jme3.material;
 
-import com.jme3.asset.CloneableSmartAsset;
+import com.jme3.asset.Asset;
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetManager;
 import com.jme3.export.*;
@@ -66,7 +66,7 @@
  * 
  * @author Kirill Vainer
  */
-public class Material implements CloneableSmartAsset, Cloneable, Savable {
+public class Material implements Asset, Cloneable, Savable {
 
     // Version #2: Fixed issue with RenderState.apply*** flags not getting exported
     public static final int SAVABLE_VERSION = 2;

File: engine/src/core/com/jme3/texture/Texture.java
Patch:
@@ -34,7 +34,7 @@
 
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetNotFoundException;
-import com.jme3.asset.CloneableSmartAsset;
+import com.jme3.asset.Asset;
 import com.jme3.asset.TextureKey;
 import com.jme3.export.*;
 import com.jme3.util.PlaceholderAssets;
@@ -57,7 +57,7 @@
  * @author Joshua Slack
  * @version $Id: Texture.java 4131 2009-03-19 20:15:28Z blaine.dev $
  */
-public abstract class Texture implements CloneableSmartAsset, Savable, Cloneable {
+public abstract class Texture implements Asset, Savable, Cloneable {
 
     public enum Type {
 

File: engine/src/core/com/jme3/util/BufferUtils.java
Patch:
@@ -1062,7 +1062,7 @@ public static FloatBuffer ensureLargeEnough(FloatBuffer buffer, int required) {
             int position = (buffer != null ? buffer.position() : 0);
             FloatBuffer newVerts = createFloatBuffer(position + required);
             if (buffer != null) {
-                buffer.rewind();
+                buffer.flip();
                 newVerts.put(buffer);
                 newVerts.position(position);
             }
@@ -1076,7 +1076,7 @@ public static ShortBuffer ensureLargeEnough(ShortBuffer buffer, int required) {
             int position = (buffer != null ? buffer.position() : 0);
             ShortBuffer newVerts = createShortBuffer(position + required);
             if (buffer != null) {
-                buffer.rewind();
+                buffer.flip();
                 newVerts.put(buffer);
                 newVerts.position(position);
             }
@@ -1090,7 +1090,7 @@ public static ByteBuffer ensureLargeEnough(ByteBuffer buffer, int required) {
             int position = (buffer != null ? buffer.position() : 0);
             ByteBuffer newVerts = createByteBuffer(position + required);
             if (buffer != null) {
-                buffer.rewind();
+                buffer.flip();
                 newVerts.put(buffer);
                 newVerts.position(position);
             }

File: engine/src/core/com/jme3/math/Quaternion.java
Patch:
@@ -238,13 +238,13 @@ public Quaternion fromAngles(float[] angles) {
      * @see <a href="http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm">http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm</a>
      * 
      * @param xAngle
-     *            the Euler pitch of rotation (in radians). (aka Bank, often rot
+     *            the Euler pitch of rotation (in radians). (aka Attitude, often rot
      *            around x)
      * @param yAngle
      *            the Euler yaw of rotation (in radians). (aka Heading, often
      *            rot around y)
      * @param zAngle
-     *            the Euler roll of rotation (in radians). (aka Attitude, often
+     *            the Euler roll of rotation (in radians). (aka Bank, often
      *            rot around z)
      */
     public Quaternion fromAngles(float xAngle, float yAngle, float zAngle) {

File: engine/src/core/com/jme3/cinematic/events/MotionTrack.java
Patch:
@@ -284,6 +284,7 @@ public void onPlay() {
 
     @Override
     public void onStop() {
+        setCurrentWayPoint(path.getNbWayPoints()-1);
         currentWayPoint = 0;
     }
 

File: engine/src/core/com/jme3/cinematic/events/SoundTrack.java
Patch:
@@ -116,10 +116,11 @@ public void initEvent(Application app, Cinematic cinematic) {
     public void setTime(float time) {
         super.setTime(time);
         //can occur on rewind
-        if (time < 0) {            
+        if (time < 0f) {            
             stop();
+        }else{
+            audioNode.setTimeOffset(time);
         }
-        audioNode.setTimeOffset(time);
     }
 
     @Override

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/blending/TextureBlenderAWT.java
Patch:
@@ -56,8 +56,8 @@ public Texture blend(float[] materialColor, Texture texture, float[] color, floa
 		float[] resultPixel = new float[4];
 		int dataIndex = 0;
 		while (data.hasRemaining()) {
-			float tin = this.setupMaterialColor(data, format, neg, pixelColor);
-			this.blendPixel(resultPixel, materialColor, color, tin, blendType, blenderContext);
+			this.setupMaterialColor(data, format, neg, pixelColor);
+			this.blendPixel(resultPixel, materialColor, pixelColor, affectFactor, blendType, blenderContext);
 			newData.put(dataIndex++, (byte) (resultPixel[0] * 255.0f));
 			newData.put(dataIndex++, (byte) (resultPixel[1] * 255.0f));
 			newData.put(dataIndex++, (byte) (resultPixel[2] * 255.0f));

File: engine/src/core/com/jme3/util/BufferUtils.java
Patch:
@@ -1179,7 +1179,7 @@ private static void loadCleanerMethods() {
             viewedBufferMethod = loadMethod("sun.nio.ch.DirectBuffer", "viewedBuffer");
             
             // Apache Harmony
-            freeMethod = loadMethod("java.nio.DirectByteBuffer", "free");
+            freeMethod = loadMethod("org.apache.harmony.nio.internal.DirectBuffer", "free");
             
             // GUN Classpath (not likely)
             //finalizeMethod = loadMethod("java.nio.DirectByteBufferImpl", "finalize");

File: engine/src/core/com/jme3/renderer/RenderManager.java
Patch:
@@ -376,7 +376,7 @@ public void updateUniformBindings(List<Uniform> params) {
                     u.setValue(VarType.Matrix4, tempMat4);
                     break;
                 case WorldMatrixInverse:
-                    tempMat4.multLocal(worldMatrix);
+                    tempMat4.set(worldMatrix);
                     tempMat4.invertLocal();
                     u.setValue(VarType.Matrix4, tempMat4);
                     break;

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteExplosion.java
Patch:
@@ -47,7 +47,7 @@ public JmePaletteExplosion() {
 
     private String createBody() {
 
-        String body = "    /** Explosion effect. Uses Texture from jme3-test-data library! */ \n    ParticleEmitter debris = new ParticleEmitter(\"Debris\", ParticleMesh.Type.Triangle, 10);\n    Material debris_mat = new Material(assetManager, \"Common/MatDefs/Misc/Particle.j3md\");\n    debris_mat.setTexture(\"Texture\", assetManager.loadTexture(\"Effects/Explosion/Debris.png\"));\n    debris.setMaterial(debris_mat);\n    debris.setImagesX(3); debris.setImagesY(3); // 3x3 texture animation\n    debris.setRotateSpeed(4);\n    debris.setSelectRandomImage(true);\n    debris.setStartVel(new Vector3f(0, 4, 0));\n    debris.setStartColor(new ColorRGBA(1f, 1f, 1f, 1f));\n    debris.setGravity(6f);\n    debris.setVariation(.60f);\n    rootNode.attachChild(debris);\n    debris.emitAllParticles();\n";
+        String body = "    /** Explosion effect. Uses Texture from jme3-test-data library! */ \n    ParticleEmitter debris = new ParticleEmitter(\"Debris\", ParticleMesh.Type.Triangle, 10);\n    Material debris_mat = new Material(assetManager, \"Common/MatDefs/Misc/Particle.j3md\");\n    debris_mat.setTexture(\"Texture\", assetManager.loadTexture(\"Effects/Explosion/Debris.png\"));\n    debris.setMaterial(debris_mat);\n    debris.setImagesX(3); debris.setImagesY(3); // 3x3 texture animation\n    debris.setRotateSpeed(4);\n    debris.setSelectRandomImage(true);\n    debris.getParticleInfluencer().setInitialVelocity(new Vector3f(0, 4, 0));\n    debris.setStartColor(new ColorRGBA(1f, 1f, 1f, 1f));\n    debris.setGravity(0f,6f,0f);\n    debris.getParticleInfluencer().setVelocityVariation(.60f);\n    rootNode.attachChild(debris);\n    debris.emitAllParticles();\n";
         return body;
     }
 

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteFire.java
Patch:
@@ -47,7 +47,7 @@ public JmePaletteFire() {
 
     private String createBody() {
 
-        String body = "    /** Uses Texture from jme3-test-data library! */\n    ParticleEmitter fire = new ParticleEmitter(\"Emitter\", ParticleMesh.Type.Triangle, 30);\n    Material mat_red = new Material(assetManager, \"Common/MatDefs/Misc/Particle.j3md\");\n    //mat_red.setTexture(\"Texture\", assetManager.loadTexture(\"Effects/Explosion/flame.png\"));\n    fire.setMaterial(mat_red);\n    fire.setImagesX(2); fire.setImagesY(2); // 2x2 texture animation\n    fire.setEndColor(  new ColorRGBA(1f, 0f, 0f, 1f));   // red\n    fire.setStartColor(new ColorRGBA(1f, 1f, 0f, 0.5f)); // yellow\n    fire.setStartVel(new Vector3f(0, 2, 0));\n    fire.setStartSize(0.6f);\n    fire.setEndSize(0.1f);\n    fire.setGravity(0);\n    fire.setLowLife(0.5f);\n    fire.setHighLife(3f);\n    fire.setVariation(0.3f);\n    rootNode.attachChild(fire);\n";
+        String body = "    /** Uses Texture from jme3-test-data library! */\n    ParticleEmitter fire = new ParticleEmitter(\"Emitter\", ParticleMesh.Type.Triangle, 30);\n    Material mat_red = new Material(assetManager, \"Common/MatDefs/Misc/Particle.j3md\");\n    //mat_red.setTexture(\"Texture\", assetManager.loadTexture(\"Effects/Explosion/flame.png\"));\n    fire.setMaterial(mat_red);\n    fire.setImagesX(2); fire.setImagesY(2); // 2x2 texture animation\n    fire.setEndColor(  new ColorRGBA(1f, 0f, 0f, 1f));   // red\n    fire.setStartColor(new ColorRGBA(1f, 1f, 0f, 0.5f)); // yellow\n    fire.getParticleInfluencer().setInitialVelocity(new Vector3f(0, 2, 0));\n    fire.setStartSize(0.6f);\n    fire.setEndSize(0.1f);\n    fire.setGravity(0f,0f,0f);\n    fire.setLowLife(0.5f);\n    fire.setHighLife(3f);\n    fire.getParticleInfluencer().setVelocityVariation(0.3f);\n    rootNode.attachChild(fire);\n";
         return body;
     }
 

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteInputListener.java
Patch:
@@ -47,7 +47,7 @@ public JmePaletteInputListener() {
 
     private String createBody() {
 
-        String body = "/**Use ActionListener to respond to pressed/released inputs (keys presses, mouse clicks) */ \n private ActionListener actionListener = new ActionListener(){\n        public void onAction(String name, boolean pressed, float tpf){\n            System.out.println(name + \" = \" + pressed);\n        }\n};\n /** Use AnalogListener to respond to continuous inputs (key presses, mouse clicks) */\n private AnalogListener analogListener = new AnalogListener() {\n        public void onAnalog(String name, float value, float tpf) {\n            System.out.println(name + \" = \" + value);\n        }\n}; \n";
+        String body = "/**Use ActionListener to respond to pressed/released inputs (key presses, mouse clicks) */ \n private ActionListener actionListener = new ActionListener(){\n        public void onAction(String name, boolean pressed, float tpf){\n            System.out.println(name + \" = \" + pressed);\n        }\n};\n /** Use AnalogListener to respond to continuous inputs (key presses, mouse clicks) */\n private AnalogListener analogListener = new AnalogListener() {\n        public void onAnalog(String name, float value, float tpf) {\n            System.out.println(name + \" = \" + value);\n        }\n};";
         return body;
     }
 

File: engine/src/test/jme3test/helloworld/HelloMaterial.java
Patch:
@@ -95,6 +95,9 @@ public void simpleInitApp() {
     Material mat_lit = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
     mat_lit.setTexture("DiffuseMap", assetManager.loadTexture("Textures/Terrain/Pond/Pond.jpg"));
     mat_lit.setTexture("NormalMap", assetManager.loadTexture("Textures/Terrain/Pond/Pond_normal.png"));
+    mat_lit.setBoolean("UseMaterialColors",true);    
+    mat_lit.setColor("Specular",ColorRGBA.White);
+    mat_lit.setColor("Diffuse",ColorRGBA.White);
     mat_lit.setFloat("Shininess", 5f); // [0,128]
     shiny_rock.setMaterial(mat_lit);
     shiny_rock.setLocalTranslation(0,2,-2); // Move it a bit

File: engine/src/core-plugins/com/jme3/texture/plugins/HDRLoader.java
Patch:
@@ -237,7 +237,7 @@ public Image load(InputStream in, boolean flipY) throws IOException{
                 continue; // comment or empty statement
             } else if (ln.startsWith("+") || ln.startsWith("-")){
                 // + or - mark image resolution and start of data
-                String[] resData = ln.split(" ");
+                String[] resData = ln.split("\\s");
                 if (resData.length != 4){
                     throw new IOException("Invalid resolution string in HDR file");
                 }

File: engine/src/core/com/jme3/animation/Bone.java
Patch:
@@ -485,7 +485,7 @@ public Transform getCombinedTransform(Vector3f position, Quaternion rotation) {
      * Attach models and effects to this node to make
      * them follow this bone's motions.
      */
-    public Node getAttachmentsNode() {
+    Node getAttachmentsNode() {
         if (attachNode == null) {
             attachNode = new Node(name + "_attachnode");
             attachNode.setUserData("AttachedBone", this);

File: engine/src/core/com/jme3/bounding/BoundingBox.java
Patch:
@@ -180,7 +180,7 @@ public void computeFromTris(int[] indices, Mesh mesh, int start, int end) {
         vars.release();
     }
 
-    public static final void checkMinMax(Vector3f min, Vector3f max, Vector3f point) {
+    public static void checkMinMax(Vector3f min, Vector3f max, Vector3f point) {
         if (point.x < min.x) {
             min.x = point.x;
         }

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MaterialLoader.java
Patch:
@@ -73,7 +73,7 @@ public class MaterialLoader implements AssetLoader {
     private int texUnit = 0;
 
     private ColorRGBA readColor(String content){
-        String[] split = content.split(" ");
+        String[] split = content.split("\\s");
         
         ColorRGBA color = new ColorRGBA();
         color.r = Float.parseFloat(split[0]);
@@ -228,7 +228,7 @@ private void readPassStatement(Statement statement){
         }else if (keyword.equals("emissive")){
             emissive = readColor(split[1]);
         }else if (keyword.equals("specular")){
-            String[] subsplit = split[1].split(" ");
+            String[] subsplit = split[1].split("\\s");
             specular = new ColorRGBA();
             specular.r = Float.parseFloat(subsplit[0]);
             specular.g = Float.parseFloat(subsplit[1]);
@@ -304,7 +304,7 @@ private void readMaterialStatement(Statement statement){
         if (statement.getLine().startsWith("technique")){
             readTechnique(statement);
         }else if (statement.getLine().startsWith("receive_shadows")){
-            String isOn = statement.getLine().split(" ")[1];
+            String isOn = statement.getLine().split("\\s")[1];
             if (isOn != null && isOn.equals("true")){
             }
         }

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -493,7 +493,7 @@ private void pushTexCoord(Attributes attribs) throws SAXException {
     private void pushColor(Attributes attribs) throws SAXException {
         FloatBuffer buf = (FloatBuffer) mesh.getBuffer(Type.Color).getData();
         String value = parseString(attribs.getValue("value"));
-        String[] vals = value.split(" ");
+        String[] vals = value.split("\\s");
         if (vals.length != 3 && vals.length != 4) {
             throw new SAXException("Color value must contain 3 or 4 components");
         }

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -235,7 +235,7 @@ protected void readFace(){
         vertList.clear();
 
         String line = scan.nextLine().trim();
-        String[] verticies = line.split("\\s ");
+        String[] verticies = line.split("\\s");
         for (String vertex : verticies){
             int v = 0;
             int vt = 0;

File: engine/src/android/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -36,6 +36,7 @@
 import android.opengl.GLES11;
 import android.opengl.GLES20;
 import android.os.Build;
+import com.jme3.asset.AndroidImageInfo;
 import com.jme3.light.LightList;
 import com.jme3.material.RenderState;
 import com.jme3.math.*;
@@ -1915,15 +1916,15 @@ public void updateTexImageData(Image img, Texture.Type type, boolean mips) {
         if (target == GLES20.GL_TEXTURE_CUBE_MAP) {
             // Upload a cube map / sky box
             @SuppressWarnings("unchecked")
-            List<Bitmap> bmps = (List<Bitmap>) img.getEfficentData();
+            List<AndroidImageInfo> bmps = (List<AndroidImageInfo>) img.getEfficentData();
             if (bmps != null) {
                 // Native android bitmap                                       
                 if (bmps.size() != 6) {
                     throw new UnsupportedOperationException("Invalid texture: " + img
                             + "Cubemap textures must contain 6 data units.");
                 }
                 for (int i = 0; i < 6; i++) {
-                    TextureUtil.uploadTextureBitmap(GLES20.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, bmps.get(i), false, powerOf2);
+                    TextureUtil.uploadTextureBitmap(GLES20.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, bmps.get(i).getBitmap(), false, powerOf2);
                 }
             } else {
                 // Standard jme3 image data

File: engine/src/core/com/jme3/shader/UniformBinding.java
Patch:
@@ -73,7 +73,7 @@ public enum UniformBinding {
     WorldViewProjectionMatrix,
 
     /**
-     * The view projection matrix. Converts View space to Clip/Projection
+     * The view projection matrix. Converts Model space to Clip/Projection
      * space.
      * Type: mat4
      */

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteSetJ3M.java
Patch:
@@ -40,14 +40,14 @@
  *
  * @author normenhansen, zathras
  */
-public class JmePaletteWireframe implements ActiveEditorDrop {
+public class JmePaletteSetJ3M implements ActiveEditorDrop {
 
-    public JmePaletteWireframe() {
+    public JmePaletteSetJ3M() {
     }
 
     private String createBody() {
 
-        String body = "mat.getAdditionalRenderState().setWireframe(true);\n";
+        String body = "Material mat = assetManager.loadMaterial(\"Common/Materials/RedColor.j3m\");\n";
         return body;
     }
 

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteWireframe.java
Patch:
@@ -40,14 +40,14 @@
  *
  * @author normenhansen, zathras
  */
-public class JmePaletteSetJ3M implements ActiveEditorDrop {
+public class JmePaletteWireframe implements ActiveEditorDrop {
 
-    public JmePaletteSetJ3M() {
+    public JmePaletteWireframe() {
     }
 
     private String createBody() {
 
-        String body = "Material mat = assetManager.loadMaterial(\"Common/Materials/RedColor.j3m\");\n";
+        String body = "mat.getAdditionalRenderState().setWireframe(true);\n";
         return body;
     }
 

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteFog.java
Patch:
@@ -47,8 +47,7 @@ public JmePaletteFog() {
 
     private String createBody() {
 
-        String body = " /** Add fog to a scene */\n FilterPostProcessor fpp=new FilterPostProcessor(assetManager);\n FogFilter fog=new FogFilter();\n fog.setFogColor(new ColorRGBA(0.9f, 0.9f, 0.9f, 1.0f));\n fog.setFogDistance(155);\n fog.setFogDensity(2.0f);\n fpp.addFilter(fog);\n viewPort.addProcessor(fpp);
- \n";
+        String body = " /** Add fog to a scene */\n FilterPostProcessor fpp=new FilterPostProcessor(assetManager);\n FogFilter fog=new FogFilter();\n fog.setFogColor(new ColorRGBA(0.9f, 0.9f, 0.9f, 1.0f));\n fog.setFogDistance(155);\n fog.setFogDensity(2.0f);\n fpp.addFilter(fog);\n viewPort.addProcessor(fpp);\n";
         return body;
     }
 

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteSetJ3M.java
Patch:
@@ -40,14 +40,14 @@
  *
  * @author normenhansen, zathras
  */
-public class JmePaletteSetJ3M implements ActiveEditorDrop {
+public class JmePaletteWireframe implements ActiveEditorDrop {
 
-    public JmePaletteSetJ3M() {
+    public JmePaletteWireframe() {
     }
 
     private String createBody() {
 
-        String body = "    myj3oModel.setMaterial( (Material)assetManager.loadAsset( \"mymaterial.j3m\") );\n";
+        String body = "mat.getAdditionalRenderState().setWireframe(true);\n";
         return body;
     }
 

File: sdk/jme3-codepalette/src/com/jme3/gde/codepalette/scene/JmePaletteSunLight.java
Patch:
@@ -47,7 +47,7 @@ public JmePaletteSunLight() {
 
     private String createBody() {
 
-        String body = "    /** A white, directional light source */ \n    DirectionalLight sun = new DirectionalLight();\n    sun.setDirection(new Vector3f(1,0,-2).normalizeLocal());\n    sun.setColor(ColorRGBA.White);\n    rootNode.addLight(sun); ";
+        String body = "    /** A white, directional light source */ \n    DirectionalLight sun = new DirectionalLight();\n    sun.setDirection((new Vector3f(-0.5f, -0.5f, -0.5f)).normalize());\n    sun.setColor(ColorRGBA.White);\n    rootNode.addLight(sun); ";
         return body;
     }
 

File: engine/src/terrain/com/jme3/terrain/geomipmap/LODGeomap.java
Patch:
@@ -1063,7 +1063,7 @@ protected Triangle[] getGridTrianglesAtPoint(float x, float z) {
     protected Triangle getTriangleAtPoint(float x, float z) {
         Triangle[] triangles = getGridTrianglesAtPoint(x, z);
         if (triangles == null) {
-            System.out.println("x,z: " + x + "," + z);
+            //System.out.println("x,z: " + x + "," + z);
             return null;
         }
         Vector2f point = new Vector2f(x, z);

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -184,6 +184,7 @@ protected void setup(AssetInfo assetInfo) throws BlenderFileException {
 		blocks = new ArrayList<FileBlockHeader>();
 		FileBlockHeader fileBlock;
 		blenderContext = new BlenderContext();
+		blenderContext.setBlenderVersion(inputStream.getVersionNumber());
 		blenderContext.setAssetManager(assetInfo.getManager());
 		blenderContext.setInputStream(inputStream);
 		blenderContext.setBlenderKey(blenderKey);

File: engine/src/core/com/jme3/input/InputManager.java
Patch:
@@ -651,8 +651,8 @@ public Vector2f getCursorPosition() {
      * @return an array of all joysticks installed on the system.
      */
     public Joystick[] getJoysticks() {
-	   if (joyInput == null){
-            throw new InvalidStateException("Joystick Input is disabled");
+	   if (joystick == null){
+            throw new IllegalStateException("Joystick Input is disabled");
         }
         return joysticks;
     }

File: engine/src/tools/jme3tools/optimize/TextureAtlas.java
Patch:
@@ -112,7 +112,7 @@
  * Geometry geom = scene.getChild("MyGeometry");
  * atlas.applyCoords(geom);
  * geom.setMaterial(mat);
- * </pre></
+ * </pre>
  * 
  * @author normenhansen, Lukasz Bruun - lukasz.dk
  */

File: engine/src/blender/com/jme3/scene/plugins/blender/lights/LightHelper.java
Patch:
@@ -86,13 +86,12 @@ public Light toLight(Structure structure, BlenderContext blenderContext) throws
             	//range
             	((SpotLight)result).setSpotRange(((Number) structure.getFieldValue("dist")).floatValue());
             	//outer angle
-            	float outerAngle = ((Number) structure.getFieldValue("spotsize")).floatValue()*FastMath.DEG_TO_RAD;
+            	float outerAngle = ((Number) structure.getFieldValue("spotsize")).floatValue()*FastMath.DEG_TO_RAD * 0.5f;
             	((SpotLight)result).setSpotOuterAngle(outerAngle);
             	
             	//inner angle
             	float spotblend = ((Number) structure.getFieldValue("spotblend")).floatValue();
                 spotblend = FastMath.clamp(spotblend, 0, 1);
-            	//float innerAngle = 2.0f * (float)Math.atan((1.0f-spotblend)*Math.tan(spotblend/2.0f));
                 float innerAngle = outerAngle * (1 - spotblend);
             	((SpotLight)result).setSpotInnerAngle(innerAngle);
                 break;

File: engine/src/core/com/jme3/input/InputManager.java
Patch:
@@ -651,6 +651,9 @@ public Vector2f getCursorPosition() {
      * @return an array of all joysticks installed on the system.
      */
     public Joystick[] getJoysticks() {
+	   if (joyInput == null){
+            throw new InvalidStateException("Joystick Input is disabled");
+        }
         return joysticks;
     }
 

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintHelper.java
Patch:
@@ -93,7 +93,7 @@ public void loadConstraints(Structure objectStructure, BlenderContext blenderCon
 						Pointer pIpo = (Pointer) constraintChannel.getFieldValue("ipo");
 						if (pIpo.isNotNull()) {
 							String constraintName = constraintChannel.getFieldValue("name").toString();
-							Ipo ipo = ipoHelper.createIpo(pIpo.fetchData(blenderContext.getInputStream()).get(0), blenderContext);
+							Ipo ipo = ipoHelper.fromIpoStructure(pIpo.fetchData(blenderContext.getInputStream()).get(0), blenderContext);
 							ipos.put(constraintName, ipo);
 						}
 					}
@@ -120,7 +120,7 @@ public void loadConstraints(Structure objectStructure, BlenderContext blenderCon
 					Ipo ipo = ipoMap==null ? null : ipoMap.get(constraintName);
 					if (ipo == null) {
 						float enforce = ((Number) constraint.getFieldValue("enforce")).floatValue();
-						ipo = ipoHelper.createIpo(enforce);
+						ipo = ipoHelper.fromValue(enforce);
 					}
 					constraintsList.add(this.createConstraint(constraint, boneOMA, ipo, blenderContext));
 				}
@@ -140,7 +140,7 @@ public void loadConstraints(Structure objectStructure, BlenderContext blenderCon
 			Ipo ipo = objectConstraintsIpos!=null ? objectConstraintsIpos.get(constraintName) : null;
 			if (ipo == null) {
 				float enforce = ((Number) constraint.getFieldValue("enforce")).floatValue();
-				ipo = ipoHelper.createIpo(enforce);
+				ipo = ipoHelper.fromValue(enforce);
 			}
 			constraintsList.add(this.createConstraint(constraint, objectStructure.getOldMemoryAddress(), ipo, blenderContext));
 		}

File: engine/src/blender/com/jme3/scene/plugins/blender/objects/ObjectHelper.java
Patch:
@@ -261,7 +261,7 @@ public Object toObject(Structure objectStructure, BlenderContext blenderContext)
 			List<Constraint> objectConstraints = blenderContext.getConstraints(objectStructure.getOldMemoryAddress());
 			if(objectConstraints!=null) {
 				for(Constraint objectConstraint : objectConstraints) {
-					objectConstraint.bake(Constraint.BAKE_STATIC);
+					objectConstraint.bake();
 				}
 			}
 			

File: engine/src/networking/com/jme3/network/base/DefaultServer.java
Patch:
@@ -95,12 +95,11 @@ public DefaultServer( String gameName, int version, Kernel reliable, Kernel fast
         this.version = version;
         
         reliableAdapter = new KernelAdapter( this, reliable, dispatcher, true );
+        channels.add( reliableAdapter );
         if( fast != null ) {
             fastAdapter = new KernelAdapter( this, fast, dispatcher, false );
+            channels.add( fastAdapter );
         }
-        
-        channels.add( reliableAdapter );
-        channels.add( fastAdapter );
     }   
 
     public String getGameName()

File: engine/src/lwjgl/com/jme3/input/lwjgl/JInputJoyInput.java
Patch:
@@ -89,8 +89,7 @@ public Joystick[] loadJoysticks(InputManager inputManager){
 
         for (int i = 0; i < cs.length; i++){
             Controller c = cs[i];
-            if (c.getType() == Controller.Type.UNKNOWN
-             || c.getType() == Controller.Type.KEYBOARD
+            if (c.getType() == Controller.Type.KEYBOARD
              || c.getType() == Controller.Type.MOUSE)
                 continue;
 

File: engine/src/lwjgl/com/jme3/input/lwjgl/JInputJoyInput.java
Patch:
@@ -72,8 +72,7 @@ public Joystick[] loadJoysticks(InputManager inputManager){
         Controller[] cs = ce.getControllers();
         for (int i = 0; i < cs.length; i++){
             Controller c = cs[i];
-            if (c.getType() == Controller.Type.UNKNOWN
-             || c.getType() == Controller.Type.KEYBOARD
+            if (c.getType() == Controller.Type.KEYBOARD
              || c.getType() == Controller.Type.MOUSE)
                 continue;
 

File: engine/src/niftygui/com/jme3/niftygui/InputSystemJme.java
Patch:
@@ -191,7 +191,7 @@ public void onMouseMotionEvent(MouseMotionEvent evt) {
     }
 
     public void onMouseButtonEvent(MouseButtonEvent evt) {
-        if (inputManager.isCursorVisible() && evt.getButtonIndex() >= 0 || evt.getButtonIndex() <= 2){
+        if (inputManager.isCursorVisible() && evt.getButtonIndex() >= 0 && evt.getButtonIndex() <= 2){
             inputQueue.add(evt);
         }
     }

File: sdk/jme3-navmesh-gen/src/com/jme3/gde/nmgen/NavMeshGenerator.java
Patch:
@@ -161,7 +161,7 @@ public Mesh terrain2mesh(Terrain terr) {
         for (int z = 0; z < side; z++) {
             for (int x = 0; x < side; x++) {
                 vertices[i++] = x + offsetX;
-                vertices[i++] = heights[z * side + x] * scale.y;
+                vertices[i++] = heights[z * side + x];// * scale.y;
                 vertices[i++] = z + offsetZ;
             }
         }

File: sdk/jme3-navmesh-gen/src/com/jme3/gde/nmgen/NavMeshGenerator.java
Patch:
@@ -153,8 +153,8 @@ public Mesh terrain2mesh(Terrain terr) {
         Vector3f trans = ((Node) terr).getWorldTranslation().clone();
         trans.x -= terr.getTerrainSize() / 2f;
         trans.z -= terr.getTerrainSize() / 2f;
-        float offsetX = trans.x * scale.x;
-        float offsetZ = trans.z * scale.z;
+        float offsetX = trans.x;// * scale.x;
+        float offsetZ = trans.z;// * scale.z;
 
         // do vertices
         int i = 0;

File: engine/src/android/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -164,6 +164,8 @@ public void initialize() {
         int spaceIdx = versionStr.indexOf(" ", openGlEsStr.length());
         if (spaceIdx >= 1) {
             versionStr = versionStr.substring(openGlEsStr.length(), spaceIdx).trim();
+        }else{
+            versionStr = versionStr.substring(openGlEsStr.length()).trim();
         }
 
         float version = Float.parseFloat(versionStr);

File: engine/src/core/com/jme3/export/SavableClassUtil.java
Patch:
@@ -140,7 +140,6 @@ public static int getSavedSavableVersion(Object savable, Class<? extends Savable
                                                desiredClass.getName() + "!");
         }else if (count >= versions.length){
             if (formatVersion <= 1){
-                System.out.println("BUGGY J3O ALERT");
                 return 0; // for buggy versions of j3o
             }else{
                 throw new IllegalArgumentException(savable.getClass().getName() + 

File: engine/src/core-plugins/com/jme3/export/binary/BinaryInputCapsule.java
Patch:
@@ -260,7 +260,7 @@ public void setContent(byte[] content, int start, int limit) {
     
     public int getSavableVersion(Class<? extends Savable> desiredClass){
         return SavableClassUtil.getSavedSavableVersion(savable, desiredClass, 
-                                            cObj.classHierarchyVersions);
+                                            cObj.classHierarchyVersions, importer.getFormatVersion());
     }
 
     public BitSet readBitSet(String name, BitSet defVal) throws IOException {

File: engine/src/core/com/jme3/export/FormatVersion.java
Patch:
@@ -10,7 +10,7 @@ public final class FormatVersion {
     /**
      * Version number of the format
      */
-    public static final int VERSION = 1;
+    public static final int VERSION = 2;
     
     /**
      * Signature of the format. Currently "JME3" as ASCII

File: engine/src/xml/com/jme3/export/xml/DOMOutputCapsule.java
Patch:
@@ -32,6 +32,7 @@
 
 package com.jme3.export.xml;
 
+import com.jme3.export.FormatVersion;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.OutputCapsule;
 import com.jme3.export.Savable;
@@ -77,9 +78,9 @@ public Document getDoc() {
      * currentElement to be new Element, and returns the new Element as well
      */
     private Element appendElement(String name) {
-        Element ret = null;
-            ret = doc.createElement(name);
+        Element ret = doc.createElement(name);
         if (currentElement == null) {
+            ret.setAttribute("format_version", Integer.toString(FormatVersion.VERSION));
             doc.appendChild(ret);
         } else {
             currentElement.appendChild(ret);

File: engine/src/xml/com/jme3/export/xml/XMLImporter.java
Patch:
@@ -54,12 +54,13 @@ public class XMLImporter implements JmeImporter {
 
     private AssetManager assetManager;
     private DOMInputCapsule domIn;
+    int formatVersion = 0;
     
     public XMLImporter() {
     }
 
     public int getFormatVersion() {
-        return 0;
+        return formatVersion;
     }
     
     public AssetManager getAssetManager(){

File: engine/src/core/com/jme3/texture/FrameBuffer.java
Patch:
@@ -290,7 +290,7 @@ public void setTargetIndex(int index){
             throw new IllegalArgumentException("The target at " + index + " is not set!");
 
         colorBufIndex = index;
-//        setRefreshNeeded();
+        setUpdateNeeded();
     }
 
     /**

File: sdk/jme3-android/src/com/jme3/gde/android/AndroidSdkTool.java
Patch:
@@ -300,7 +300,7 @@ private static void updateAndroidManifest(Project project) {
             if (screensElement == null) {
                 screensElement = configuration.createElement("supports-screens");
                 screensElement.setAttribute("android:anyDensity", "true");
-                screensElement.setAttribute("android:xlargeScreens", "true");
+//                screensElement.setAttribute("android:xlargeScreens", "true");
                 screensElement.setAttribute("android:largeScreens", "true");
                 screensElement.setAttribute("android:smallScreens", "true");
                 screensElement.setAttribute("android:normalScreens", "true");

File: engine/src/core/com/jme3/texture/FrameBuffer.java
Patch:
@@ -290,7 +290,7 @@ public void setTargetIndex(int index){
             throw new IllegalArgumentException("The target at " + index + " is not set!");
 
         colorBufIndex = index;
-        setRefreshNeeded();
+//        setRefreshNeeded();
     }
 
     /**

File: engine/src/tools/jme3tools/optimize/TextureAtlas.java
Patch:
@@ -269,8 +269,8 @@ public boolean applyCoords(Geometry geom) {
     }
 
     /**
-     * Applies the texture coordinates to the given geometry
-     * if its DiffuseMap or ColorMap exists in the atlas.
+     * Applies the texture coordinates to the given output mesh
+     * if the DiffuseMap or ColorMap of the input geometry exist in the atlas.
      * @param geom The geometry to change the texture coordinate buffer on.
      * @param offset Target buffer offset
      * @param outMesh The mesh to set the coords in (can be same as input)

File: engine/src/tools/jme3tools/optimize/GeometryBatchFactory.java
Patch:
@@ -15,12 +15,10 @@
 import com.jme3.texture.Texture;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.IntMap.Entry;
-import com.jme3.util.TangentBinormalGenerator;
 import java.nio.Buffer;
 import java.nio.FloatBuffer;
 import java.nio.ShortBuffer;
 import java.util.*;
-import java.util.logging.Level;
 import java.util.logging.Logger;
 import jme3tools.optimize.TextureAtlas.TextureAtlasTile;
 
@@ -358,6 +356,7 @@ public static Geometry makeAtlasBatch(Spatial spat, AssetManager mgr, int atlasS
         geom.setMesh(mesh);
 
         Material mat = new Material(mgr, "Common/MatDefs/Light/Lighting.j3md");
+        mat.getAdditionalRenderState().setAlphaTest(true);
         Texture diffuseMap = atlas.getAtlasTexture("DiffuseMap");
         Texture normalMap = atlas.getAtlasTexture("NormalMap");
         Texture specularMap = atlas.getAtlasTexture("SpecularMap");

File: engine/src/tools/jme3tools/optimize/TextureAtlas.java
Patch:
@@ -183,13 +183,13 @@ private void drawImage(Image source, int x, int y, String mapName) {
                     image[i + 3] = sourceData.get(j + 3); //r
                 } else if (source.getFormat() == Format.BGR8) {
                     int j = (xPos + yPos * width) * 3;
-                    image[i] = 0; //a
+                    image[i] = 1; //a
                     image[i + 1] = sourceData.get(j); //b
                     image[i + 2] = sourceData.get(j + 1); //g
                     image[i + 3] = sourceData.get(j + 2); //r
                 } else if (source.getFormat() == Format.RGB8) {
                     int j = (xPos + yPos * width) * 3;
-                    image[i] = 0; //a
+                    image[i] = 1; //a
                     image[i + 1] = sourceData.get(j + 2); //b
                     image[i + 2] = sourceData.get(j + 1); //g
                     image[i + 3] = sourceData.get(j); //r

File: engine/src/tools/jme3tools/optimize/GeometryBatchFactory.java
Patch:
@@ -352,6 +352,8 @@ public static Geometry makeAtlasBatch(Spatial spat, AssetManager mgr, int atlasS
         Geometry geom = new Geometry();
         Mesh mesh = new Mesh();
         mergeGeometries(geometries, mesh, atlas);
+        mesh.updateCounts();
+        mesh.updateBound();
         geom.setMesh(mesh);
 
         Material mat = new Material(mgr, "Common/MatDefs/Light/Lighting.j3md");

File: engine/src/jbullet/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -262,7 +262,7 @@ public Matrix3f getInterpolatedPhysicsRotation(Matrix3f rotation) {
 
     /**
      * Sets the node to kinematic mode. in this mode the node is not affected by physics
-     * but affects other physics objects. Iits kinetic force is calculated by the amount
+     * but affects other physics objects. Its kinetic force is calculated by the amount
      * of movement it is exposed to and its weight.
      * @param kinematic
      */

File: engine/src/core/com/jme3/math/Ray.java
Patch:
@@ -442,11 +442,11 @@ public void setOrigin(Vector3f origin) {
     }
 
     /**
-     * <code>getLimit</code> returns the limit or the ray, aka the length.
+     * <code>getLimit</code> returns the limit of the ray, aka the length.
      * If the limit is not infinity, then this ray is a line with length <code>
      * limit</code>.
      * 
-     * @return the limit or the ray, aka the length.
+     * @return the limit of the ray, aka the length.
      */
     public float getLimit() {
         return limit;

File: sdk/jme3-core/src/com/jme3/gde/core/filters/FilterExplorerTopComponent.java
Patch:
@@ -154,11 +154,12 @@ public void loadFile(FilterDataObject object) {
         node = object.getLookup().lookup(FilterPostProcessorNode.class);
         setActivatedNodes(new Node[]{object.getNodeDelegate()});
         open();
+        boolean wasAdded = added;
         if (currentFile != null && added) {
             setFilterEnabled(false);
         }
         currentFile = object;
-        if (added) {
+        if (wasAdded) {
             setFilterEnabled(true);
         }
         requestVisible();

File: sdk/jme3-navmesh-gen/src/com/jme3/gde/nmgen/wizard/NewNavMeshVisualPanel1.java
Patch:
@@ -24,7 +24,7 @@ public NewNavMeshVisualPanel1() {
 
     @Override
     public String getName() {
-        return "Step #1";
+        return "Specify Settings";
     }
     
     public void loadSettings(WizardDescriptor wiz){

File: sdk/jme3-navmesh-gen/src/com/jme3/gde/nmgen/wizard/NewNavMeshWizardAction.java
Patch:
@@ -42,7 +42,7 @@ protected Object showWizard(org.openide.nodes.Node node) {
         WizardDescriptor wizardDescriptor = new WizardDescriptor(getPanels());
         // {0} will be replaced by WizardDesriptor.Panel.getComponent().getName()
         wizardDescriptor.setTitleFormat(new MessageFormat("{0}"));
-        wizardDescriptor.setTitle("Your wizard dialog title here");
+        wizardDescriptor.setTitle("Create NavMesh");
         NavMeshGenerator gen = new NavMeshGenerator();
         wizardDescriptor.putProperty("generator", gen);
 

File: engine/src/core/com/jme3/cinematic/events/MotionTrack.java
Patch:
@@ -202,7 +202,9 @@ public void setTime(float time) {
     }
 
     public void onUpdate(float tpf) {
+        System.out.println("time "+time);
         traveledDistance = path.interpolatePath(time, this);
+        System.out.println("dist "+traveledDistance);
         computeTargetDirection();
 
         if (currentValue >= 1.0f) {
@@ -305,6 +307,7 @@ public Control cloneForSpatial(Spatial spatial) {
 
     @Override
     public void onPlay() {
+        traveledDistance = 0;
     }
 
     @Override

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -147,7 +147,8 @@ public void run() {
                             log.log(Level.FINE, "Loaded TerrainQuad {0} from HeightMapGrid", q.getName());
                         } else if (gridTileLoader != null) {
                             q = gridTileLoader.getTerrainQuadAt(quadCell);
-                            q.setMaterial(material.clone());
+                            // only clone the material to the quad if it doesn't have a material of its own
+                            if(q.getMaterial()==null) q.setMaterial(material.clone());
                             log.log(Level.FINE, "Loaded TerrainQuad {0} from TerrainQuadGrid", q.getName());
                         }
                     }

File: engine/src/core/com/jme3/cinematic/events/AnimationTrack.java
Patch:
@@ -63,6 +63,7 @@ public AnimationTrack() {
     public AnimationTrack(Spatial model, String animationName) {
         modelName = model.getName();
         this.animationName = animationName;
+        initialDuration = model.getControl(AnimControl.class).getAnimationLength(animationName);
     }
 
     public AnimationTrack(Spatial model, String animationName, float initialDuration) {
@@ -73,6 +74,7 @@ public AnimationTrack(Spatial model, String animationName, float initialDuration
 
     public AnimationTrack(Spatial model, String animationName, LoopMode loopMode) {
         super(loopMode);
+        initialDuration = model.getControl(AnimControl.class).getAnimationLength(animationName);
         modelName = model.getName();
         this.animationName = animationName;
     }

File: engine/src/core/com/jme3/scene/Spatial.java
Patch:
@@ -96,7 +96,7 @@ public enum CullHint {
     }
 
     /**
-     * Specifies is this spatial should be batched
+     * Specifies if this spatial should be batched
      */
     public enum BatchHint {
 
@@ -105,11 +105,11 @@ public enum BatchHint {
          */
         Inherit,
         /** 
-         * this spatial will always be batched when attached to a BatchNode
+         * This spatial will always be batched when attached to a BatchNode.
          */
         Always,
         /** 
-         * this spatial will naver be batched when attached to a BatchNode
+         * This spatial will never be batched when attached to a BatchNode.
          */
         Never;
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/FieldSerializer.java
Patch:
@@ -179,8 +179,7 @@ public void writeObject(ByteBuffer buffer, Object object) throws IOException {
             } catch (BufferOverflowException boe) {
                 throw boe;
             } catch (Exception e) {
-                log.log(Level.WARNING, "[FieldSerializer][???] Exception occurred on writing. Maybe you've forgotten to register a class, or maybe a class member does not have a serializer.");
-                throw new SerializerException( "Error writing object", e);
+                throw new SerializerException( "Error writing object for field:" + savedField.field, e );
             }
         }
     }

File: engine/src/test/jme3test/audio/TestMusicPlayer.java
Patch:
@@ -63,6 +63,7 @@ private void initAudioPlayer(){
         ar = JmeSystem.newAudioRenderer(settings);
         ar.initialize();
         ar.setListener(listener);
+        AudioContext.setAudioRenderer(ar);
     }
 
     /** This method is called from within the constructor to

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -954,10 +954,10 @@ protected void setNormalRecalcNeeded(Vector2f changedPoint) {
         }
 
         if (affectedAreaBBox == null) {
-            affectedAreaBBox = new BoundingBox(new Vector3f(changedPoint.x, 0, changedPoint.y), 0.5f, Float.MAX_VALUE, 0.5f); // unit length
+            affectedAreaBBox = new BoundingBox(new Vector3f(changedPoint.x, 0, changedPoint.y), 1f, Float.MAX_VALUE, 1f); // unit length
         } else {
             // adjust size of box to be larger
-            affectedAreaBBox.mergeLocal(new BoundingBox(new Vector3f(changedPoint.x, 0, changedPoint.y), 0.5f, Float.MAX_VALUE, 0.5f));
+            affectedAreaBBox.mergeLocal(new BoundingBox(new Vector3f(changedPoint.x, 0, changedPoint.y), 1f, Float.MAX_VALUE, 1f));
         }
     }
 

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintAction.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintAction(Structure constraintStructure, Long ownerOMA,
 	}
 	
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement 'Action' constraint
 		LOGGER.log(Level.WARNING, "'Action' constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement 'Action' constraint
 		LOGGER.log(Level.WARNING, "'Action' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintChildOf.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintChildOf(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement ChildOf constraint
 		LOGGER.log(Level.WARNING, "ChildOf constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement ChildOf constraint
 		LOGGER.log(Level.WARNING, "ChildOf constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintClampTo.java
Patch:
@@ -36,13 +36,13 @@ public ConstraintClampTo(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		//TODO: implement when curves are implemented
 		LOGGER.log(Level.INFO, "'Clamp to' not yet implemented! Curves not yet implemented!", name);
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		//TODO: implement when curves are implemented
 		LOGGER.log(Level.INFO, "'Clamp to' not yet implemented! Curves not yet implemented!", name);
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintDampTrack.java
Patch:
@@ -36,13 +36,13 @@ public ConstraintDampTrack(Structure constraintStructure, Long ownerOMA, Ipo inf
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO Auto-generated method stub
 		LOGGER.log(Level.WARNING, "'Damp Track' constraint NOT implemented!");
 	}
 
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO Auto-generated method stub
 		LOGGER.log(Level.WARNING, "'Damp Track' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintDistLimit.java
Patch:
@@ -47,7 +47,7 @@ public ConstraintDistLimit(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		AnimData animData = blenderContext.getAnimData(this.owner.getOma());
 		if(animData != null) {
 			Object owner = this.owner.getObject();
@@ -69,7 +69,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		Matrix4f targetWorldMatrix = target.getWorldTransformMatrix();
 		Vector3f targetLocation = targetWorldMatrix.toTranslationVector();
 		Matrix4f m = owner.getParentWorldTransformMatrix();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintFollowPath.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintFollowPath(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		//TODO: implement when curves are implemented
 		LOGGER.log(Level.INFO, "'Follow path' not implemented! Curves not yet implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		//TODO: implement when curves are implemented
 		LOGGER.log(Level.INFO, "'Follow path' not implemented! Curves not yet implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintInverseKinematics.java
Patch:
@@ -38,7 +38,7 @@ public ConstraintInverseKinematics(Structure constraintStructure,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 //		try {
 			// IK solver is only attached to bones
 //			Bone ownerBone = (Bone) blenderContext.getLoadedFeature(ownerOMA, LoadedFeatureDataType.LOADED_FEATURE);
@@ -128,7 +128,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO Auto-generated method stub
 		
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLocLike.java
Patch:
@@ -61,7 +61,7 @@ public ConstraintLocLike(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		AnimData animData = blenderContext.getAnimData(owner.getOma());
 		if(animData != null) {
 			Object owner = this.owner.getObject();
@@ -79,7 +79,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		Transform targetTransform = this.target.getTransform();
 		Transform ownerTransform = this.owner.getTransform();
 		Vector3f ownerLocation = ownerTransform.getTranslation();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLocLimit.java
Patch:
@@ -73,7 +73,7 @@ public ConstraintLocLimit(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		Object owner = this.owner.getObject();
 		AnimData animData = blenderContext.getAnimData(this.owner.getOma());
 		if(animData != null) {
@@ -90,7 +90,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		Transform ownerTransform = this.owner.getTransform();
 		Vector3f ownerLocation = ownerTransform.getTranslation();
 		this.locLimit(ownerLocation, ipo.calculateValue(0));

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLockTrack.java
Patch:
@@ -36,13 +36,13 @@ public ConstraintLockTrack(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement 'Lock track' constraint
 		LOGGER.log(Level.WARNING, "'Lock track' constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement 'Lock track' constraint
 		LOGGER.log(Level.WARNING, "'Lock track' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintMinMax.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintMinMax(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement 'Min max' constraint
 		LOGGER.log(Level.WARNING, "'Min max' constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement 'Min max' constraint
 		LOGGER.log(Level.WARNING, "'Min max' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintNull.java
Patch:
@@ -33,8 +33,8 @@ public ConstraintNull(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {}
+	protected void bakeDynamic() {}
 	
 	@Override
-	public void bakeStatic() {}
+	protected void bakeStatic() {}
 }

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintPivot.java
Patch:
@@ -37,13 +37,13 @@ public ConstraintPivot(Structure constraintStructure, Long ownerOMA, Ipo influen
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO Auto-generated method stub
 		LOGGER.log(Level.WARNING, "'Pivot' constraint NOT implemented!");
 	}
 
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO Auto-generated method stub
 		LOGGER.log(Level.WARNING, "'Pivot' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintPython.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintPython(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement 'Python' constraint
 		LOGGER.log(Level.WARNING, "'Python' constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement 'Python' constraint
 		LOGGER.log(Level.WARNING, "'Python' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRigidBodyJoint.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintRigidBodyJoint(Structure constraintStructure,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement 'Rigid body joint' constraint
 		LOGGER.log(Level.WARNING, "'Rigid body joint' constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement 'Rigid body joint' constraint
 		LOGGER.log(Level.WARNING, "'Rigid body joint' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRotLike.java
Patch:
@@ -47,7 +47,7 @@ public ConstraintRotLike(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		AnimData animData = blenderContext.getAnimData(this.owner.getOma());
 		if(animData != null) {
 			Object owner = this.owner.getObject();
@@ -69,7 +69,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		Transform targetTransform = this.target.getTransform();
 		Transform ownerTransform = this.owner.getTransform();
 		Quaternion ownerRotation = ownerTransform.getRotation();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRotLimit.java
Patch:
@@ -68,7 +68,7 @@ public ConstraintRotLimit(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		AnimData animData = blenderContext.getAnimData(owner.getOma());
 		if(animData != null) {
 			Object owner = this.owner.getObject();
@@ -88,7 +88,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		Transform ownerTransform = this.owner.getTransform();
 		float[] angles = ownerTransform.getRotation().toAngles(null);
 		this.rotLimit(angles, ipo.calculateValue(0));

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintShrinkWrap.java
Patch:
@@ -45,7 +45,7 @@ public ConstraintShrinkWrap(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		//loading mesh points (blender ensures that the target is a mesh-object)
 		List<Vector3f> pts = new ArrayList<Vector3f>();
 		Node target = (Node) this.target.getObject();
@@ -89,7 +89,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO Auto-generated method stub
 		
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSizeLike.java
Patch:
@@ -52,7 +52,7 @@ public ConstraintSizeLike(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		AnimData animData = blenderContext.getAnimData(this.owner.getOma());
 		if(animData != null) {
 			Object owner = this.owner.getObject();
@@ -71,7 +71,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		Transform targetTransform = this.target.getTransform();
 		Transform ownerTransform = this.owner.getTransform();
 		this.sizeLike(ownerTransform.getScale(), targetTransform.getScale(), ipo.calculateValue(0));

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSizeLimit.java
Patch:
@@ -73,7 +73,7 @@ public ConstraintSizeLimit(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		AnimData animData = blenderContext.getAnimData(this.owner.getOma());
 		if(animData != null) {
 			Object owner = this.owner.getObject();
@@ -90,7 +90,7 @@ public void bakeDynamic() {
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		Transform ownerTransform = this.owner.getTransform();
 		this.sizeLimit(ownerTransform.getScale(), ipo.calculateValue(0));
 		this.owner.applyTransform(ownerTransform);

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSplineInverseKinematic.java
Patch:
@@ -37,13 +37,13 @@ public ConstraintSplineInverseKinematic(Structure constraintStructure, Long owne
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO Auto-generated method stub
 		LOGGER.log(Level.WARNING, "'Splie IK' constraint NOT implemented!");
 	}
 
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO Auto-generated method stub
 		LOGGER.log(Level.WARNING, "'Spline IK' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintStretchTo.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintStretchTo(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement 'Stretch to' constraint
 		LOGGER.log(Level.WARNING, "'Stretch to' constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement 'Stretch to' constraint
 		LOGGER.log(Level.WARNING, "'Stretch to' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintTransform.java
Patch:
@@ -35,13 +35,13 @@ public ConstraintTransform(Structure constraintStructure, Long ownerOMA,
 	}
 
 	@Override
-	public void bakeDynamic() {
+	protected void bakeDynamic() {
 		// TODO: implement 'Transform' constraint
 		LOGGER.log(Level.WARNING, "'Transform' constraint NOT implemented!");
 	}
 	
 	@Override
-	public void bakeStatic() {
+	protected void bakeStatic() {
 		// TODO: implement 'Transform' constraint
 		LOGGER.log(Level.WARNING, "'Transform' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -186,18 +186,17 @@ public Node apply(Node node, BlenderContext blenderContext) {
 		}
 
 		// applying animations
+		AnimControl control = new AnimControl(animData.skeleton);
 		ArrayList<Animation> animList = animData.anims;
 		if (animList != null && animList.size() > 0) {
 			HashMap<String, Animation> anims = new HashMap<String, Animation>(animList.size());
 			for (int i = 0; i < animList.size(); ++i) {
 				Animation animation = animList.get(i);
 				anims.put(animation.getName(), animation);
 			}
-
-			AnimControl control = new AnimControl(animData.skeleton);
 			control.setAnimations(anims);
-			node.addControl(control);
 		}
+		node.addControl(control);
 		node.addControl(new SkeletonControl(animData.skeleton));
 
 		return node;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLocLimit.java
Patch:
@@ -1,7 +1,6 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
-import com.jme3.animation.Track;
 import com.jme3.math.Transform;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -86,8 +85,6 @@ public void bakeDynamic() {
 					this.locLimit(translations[frame], ipo.calculateValue(frame));
 				}
 				track.setKeyframes(track.getTimes(), translations, track.getRotations(), track.getScales());
-				translations = track.getTranslations();
-				animation.setTracks(new Track[] {track.getTrack()});
 			}
 		}
 	}

File: engine/src/networking/com/jme3/network/base/KernelAdapter.java
Patch:
@@ -120,6 +120,9 @@ protected void reportError( Endpoint p, Object context, Exception e )
         // Should really be queued up so the outer thread can
         // retrieve them.  For now we'll just log it.  FIXME
         log.log( Level.SEVERE, "Unhandled error, endpoint:" + p + ", context:" + context, e );
+        
+        // In lieu of other options, at least close the endpoint
+        p.close();
     }                                                      
 
     protected HostedConnection getConnection( Endpoint p )

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/TerrainEditorTopComponent.java
Patch:
@@ -1376,8 +1376,8 @@ protected void addNewTexture(int newIndex) {
             addRow(new Object[]{"", newIndex, null, scale}); // add to the table model
 
             // and add it to the actual material
-            setTexture(newIndex, (String) null);
             setTextureScale(newIndex, scale);
+            setTexture(newIndex, (String) null);
             editorController.enableTextureButtons();
         }
 

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintInverseKinematics.java
Patch:
@@ -44,7 +44,7 @@ public void bakeDynamic() {
 //			Bone ownerBone = (Bone) blenderContext.getLoadedFeature(ownerOMA, LoadedFeatureDataType.LOADED_FEATURE);
 //			AnimData animData = blenderContext.getAnimData(ownerOMA);
 //			if(animData == null) {
-				//TODO: to nie mo�e by� null, utworzy� dane bez ruchu, w zale�no�ci czy target si� rusza
+				//TODO: to nie moxe byx null, utworzyx dane bez ruchu, w zalexnoxci czy target six rusza
 //			}
 			
 			//prepare a list of all parents of this bone

File: engine/src/test/jme3test/post/TestTransparentCartoonEdge.java
Patch:
@@ -44,7 +44,7 @@ public void simpleInitApp() {
         rootNode.attachChild(geom);
 
         // create the geometry and attach it
-        Spatial teaGeom = assetManager.loadModel("Models/Tree/Tree2.mesh.xml");
+        Spatial teaGeom = assetManager.loadModel("Models/Tree/Tree.mesh.j3o");
         teaGeom.setQueueBucket(Bucket.Transparent);
         teaGeom.setShadowMode(ShadowMode.Cast);
         makeToonish(teaGeom);

File: engine/src/test/jme3test/post/TestTransparentSSAO.java
Patch:
@@ -42,7 +42,7 @@ public void simpleInitApp() {
         rootNode.attachChild(geom);
 
         // create the geometry and attach it
-        Spatial teaGeom = assetManager.loadModel("Models/Tree/Tree2.mesh.xml");
+        Spatial teaGeom = assetManager.loadModel("Models/Tree/Tree.mesh.j3o");
         teaGeom.setQueueBucket(Bucket.Transparent);
         teaGeom.setShadowMode(ShadowMode.Cast);
 

File: engine/src/test/jme3test/light/TestTransparentShadow.java
Patch:
@@ -76,7 +76,7 @@ public void simpleInitApp() {
         rootNode.attachChild(geom);
 
         // create the geometry and attach it
-        Spatial teaGeom = assetManager.loadModel("Models/Tree/Tree2.mesh.xml");
+        Spatial teaGeom = assetManager.loadModel("Models/Tree/Tree.mesh.j3o");
         teaGeom.setQueueBucket(Bucket.Transparent);
         teaGeom.setShadowMode(ShadowMode.Cast);
 

File: engine/src/desktop/com/jme3/texture/plugins/AWTLoader.java
Patch:
@@ -90,7 +90,7 @@ private void flipImage(byte[] img, int width, int height, int bpp){
     private void flipImage(short[] img, int width, int height, int bpp){
         int scSz = (width * bpp) / 8;
         scSz /= 2; // Because shorts are 2 bytes
-        byte[] sln = new byte[scSz];
+        short[] sln = new short[scSz];
         int y2 = 0;
         for (int y1 = 0; y1 < height / 2; y1++){
             y2 = height - y1 - 1;

File: engine/src/test/jme3test/animation/TestMotionPath.java
Patch:
@@ -83,7 +83,7 @@ public void simpleInitApp() {
         motionControl.setDirectionType(MotionTrack.Direction.PathAndRotation);
         motionControl.setRotation(new Quaternion().fromAngleNormalAxis(-FastMath.HALF_PI, Vector3f.UNIT_Y));
         motionControl.setInitialDuration(10f);
-        motionControl.setSpeed(0.1f);
+        motionControl.setSpeed(2f);
 
         guiFont = assetManager.loadFont("Interface/Fonts/Default.fnt");
         final BitmapText wayPointsText = new BitmapText(guiFont, false);

File: engine/src/core/com/jme3/scene/Mesh.java
Patch:
@@ -293,7 +293,8 @@ public Mesh cloneForAnim(){
     }
 
     /**
-     * Generates the {@link Type#BindPosePosition} and {@link Type#BindPoseNormal}
+     * Generates the {@link Type#BindPosePosition}, {@link Type#BindPoseNormal},
+     * and {@link Type#BindPoseTangent} 
      * buffers for this mesh by duplicating them based on the position and normal
      * buffers already set on the mesh.
      * This method does nothing if the mesh has no bone weight or index

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -103,7 +103,7 @@ public ArmatureModifier(Structure objectStructure, Structure modifierStructure,
 				}
 
 				ObjectHelper objectHelper = blenderContext.getHelper(ObjectHelper.class);
-				Matrix4f armatureObjectMatrix = objectHelper.getMatrix(armatureObject, "obmat", true);//TODO: fixupaxis ???
+				Matrix4f armatureObjectMatrix = objectHelper.getMatrix(armatureObject, "obmat", true);
 				Matrix4f inverseMeshObjectMatrix = objectHelper.getMatrix(objectStructure, "obmat", true).invertLocal();
 				Matrix4f objectToArmatureTransformation = armatureObjectMatrix.multLocal(inverseMeshObjectMatrix);
 				
@@ -218,8 +218,8 @@ public Node apply(Node node, BlenderContext blenderContext) {
 			AnimControl control = new AnimControl(animData.skeleton);
 			control.setAnimations(anims);
 			node.addControl(control);
-			node.addControl(new SkeletonControl(animData.skeleton));
 		}
+		node.addControl(new SkeletonControl(animData.skeleton));
 
 		return node;
 	}

File: engine/src/core/com/jme3/system/Natives.java
Patch:
@@ -268,7 +268,7 @@ public static void extractNativeLibs(Platform platform, AppSettings settings) th
                     extractNativeLib("linux", "openal64");
                 }
                 if (needNativeBullet) {
-                    extractNativeLib("linux", "bulletjme", true, false);
+                    extractNativeLib("linux", "bulletjme64", true, false);
                 }
                 break;
             case Linux32:

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/NoiseGenerator.java
Patch:
@@ -96,7 +96,7 @@
      *        the number of blender version
      */
     public NoiseGenerator(String blenderVersion) {
-        super(blenderVersion);
+        super(blenderVersion, false);
         this.loadConstants();
     }
 

File: engine/src/core/com/jme3/math/Ray.java
Patch:
@@ -80,7 +80,7 @@ public Ray() {
      * @param direction the direction the ray travels in.
      */
     public Ray(Vector3f origin, Vector3f direction) {
-        setOrigin(origin)
+        setOrigin(origin);
         setDirection(direction);
     }
 

File: engine/src/android/com/jme3/audio/plugins/AndroidAudioLoader.java
Patch:
@@ -1,11 +1,10 @@
 package com.jme3.audio.plugins;
 
-import java.io.IOException;
-import java.io.InputStream;
-
 import com.jme3.asset.AssetInfo;
 import com.jme3.asset.AssetLoader;
 import com.jme3.audio.android.AndroidAudioData;
+import java.io.IOException;
+import java.io.InputStream;
 
 public class AndroidAudioLoader implements AssetLoader 
 {

File: engine/src/android/com/jme3/input/android/AndroidInput.java
Patch:
@@ -1,7 +1,5 @@
 package com.jme3.input.android;
 
-import java.util.HashMap;
-import java.util.logging.Logger;
 import android.content.Context;
 import android.opengl.GLSurfaceView;
 import android.util.AttributeSet;
@@ -18,6 +16,8 @@
 import com.jme3.input.event.TouchEvent.Type;
 import com.jme3.math.Vector2f;
 import com.jme3.util.RingBuffer;
+import java.util.HashMap;
+import java.util.logging.Logger;
 
 
 /**

File: engine/src/android/com/jme3/input/android/AndroidTouchInputListener.java
Patch:
@@ -1,10 +1,9 @@
 package com.jme3.input.android;
 
-import com.jme3.input.RawInputListener;
-import com.jme3.input.event.TouchEvent;
-
 import android.view.KeyEvent;
 import android.view.MotionEvent;
+import com.jme3.input.RawInputListener;
+import com.jme3.input.event.TouchEvent;
 
 /**
  * AndroidTouchInputListener is an inputlistener interface which defines callbacks/events for android touch screens

File: engine/src/android/com/jme3/texture/plugins/AndroidImageLoader.java
Patch:
@@ -3,7 +3,6 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Matrix;
-
 import com.jme3.asset.AssetInfo;
 import com.jme3.asset.AssetLoader;
 import com.jme3.asset.TextureKey;

File: engine/src/android/jme3test/android/DemoAndroidHarness.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.pm.ActivityInfo;
 import android.os.Bundle;
-
 import com.jme3.app.AndroidHarness;
 import com.jme3.system.android.AndroidConfigChooser.ConfigType;
 

File: engine/src/android/jme3test/android/DemoLaunchAdapter.java
Patch:
@@ -1,14 +1,13 @@
 package jme3test.android;
 
-import java.util.List;
-
 import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.View.OnClickListener;
+import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
+import java.util.List;
 
 /**
  * The view adapter which gets a list of LaunchEntries and displaqs them

File: engine/src/android/jme3test/android/TestBumpModel.java
Patch:
@@ -33,7 +33,6 @@
 package jme3test.android;
 
 import com.jme3.app.SimpleApplication;
-import com.jme3.asset.AssetKey;
 import com.jme3.light.AmbientLight;
 import com.jme3.light.DirectionalLight;
 import com.jme3.light.PointLight;

File: engine/src/android/jme3test/android/TestMovingParticle.java
Patch:
@@ -34,10 +34,8 @@
 import com.jme3.app.SimpleApplication;
 import com.jme3.effect.ParticleEmitter;
 import com.jme3.effect.ParticleMesh.Type;
-import com.jme3.effect.shapes.EmitterSphereShape;
 import com.jme3.input.KeyInput;
 import com.jme3.input.controls.ActionListener;
-import com.jme3.input.controls.InputListener;
 import com.jme3.input.controls.KeyTrigger;
 import com.jme3.light.AmbientLight;
 import com.jme3.material.Material;

File: engine/src/blender/com/jme3/scene/plugins/blender/AbstractBlenderHelper.java
Patch:
@@ -31,16 +31,15 @@
  */
 package com.jme3.scene.plugins.blender;
 
-import java.nio.FloatBuffer;
-import java.util.List;
-
 import com.jme3.math.FastMath;
 import com.jme3.math.Quaternion;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Pointer;
 import com.jme3.scene.plugins.blender.file.Structure;
 import com.jme3.scene.plugins.blender.objects.Properties;
 import com.jme3.util.BufferUtils;
+import java.nio.FloatBuffer;
+import java.util.List;
 
 /**
  * A purpose of the helper class is to split calculation code into several classes. Each helper after use should be cleared because it can

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/CalculationBone.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.animations;
 
-import java.util.Arrays;
-
 import com.jme3.animation.Bone;
 import com.jme3.animation.BoneTrack;
 import com.jme3.math.Quaternion;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
+import java.util.Arrays;
 
 /**
  * The purpose of this class is to imitate bone's movement when calculating inverse kinematics.

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/IpoHelper.java
Patch:
@@ -1,14 +1,13 @@
 package com.jme3.scene.plugins.blender.animations;
 
-import java.util.List;
-
 import com.jme3.animation.BoneTrack;
 import com.jme3.scene.plugins.blender.AbstractBlenderHelper;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.curves.BezierCurve;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Pointer;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.List;
 
 /**
  * This class helps to compute values from interpolation curves for features like animation or constraint influence. The

File: engine/src/blender/com/jme3/scene/plugins/blender/cameras/CameraHelper.java
Patch:
@@ -1,14 +1,13 @@
 package com.jme3.scene.plugins.blender.cameras;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.asset.BlenderKey.FeaturesToLoad;
 import com.jme3.renderer.Camera;
 import com.jme3.scene.plugins.blender.AbstractBlenderHelper;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * A class that is used to load cameras into the scene.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintAction.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Action' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintChildOf.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'ChildOf' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintClampTo.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Clamp to' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintDistLimit.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
-import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintFollowPath.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Follow path' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintInverseKinematics.java
Patch:
@@ -1,12 +1,11 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Inverse kinematics' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLocLike.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
-import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLocLimit.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
-import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLockTrack.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Action' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintMinMax.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Min max' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintPython.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Python' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRigidBodyJoint.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Rigid body joint' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRotLike.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
-import com.jme3.animation.Track;
 import com.jme3.math.Quaternion;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRotLimit.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
-import com.jme3.animation.Track;
 import com.jme3.math.FastMath;
 import com.jme3.math.Quaternion;
 import com.jme3.scene.plugins.blender.BlenderContext;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSizeLike.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
-import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSizeLimit.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
-import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintStretchTo.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Stretch to' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintTransform.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * This class represents 'Transform' constraint type in blender.

File: engine/src/blender/com/jme3/scene/plugins/blender/curves/BezierCurve.java
Patch:
@@ -1,11 +1,10 @@
 package com.jme3.scene.plugins.blender.curves;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.file.DynamicArray;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * A class that helps to calculate the bezier curves calues. It uses doubles for performing calculations to minimize

File: engine/src/blender/com/jme3/scene/plugins/blender/file/BlenderInputStream.java
Patch:
@@ -31,16 +31,15 @@
  */
 package com.jme3.scene.plugins.blender.file;
 
+import com.jme3.asset.AssetManager;
+import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.logging.Logger;
 import java.util.zip.GZIPInputStream;
 
-import com.jme3.asset.AssetManager;
-import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
-
 /**
  * An input stream with random access to data.
  * @author Marcin Roguski

File: engine/src/blender/com/jme3/scene/plugins/blender/file/DnaBlockData.java
Patch:
@@ -31,11 +31,10 @@
  */
 package com.jme3.scene.plugins.blender.file;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
+import java.util.HashMap;
+import java.util.Map;
 
 /**
  * The data block containing the description of the file.

File: engine/src/blender/com/jme3/scene/plugins/blender/file/Field.java
Patch:
@@ -1,11 +1,10 @@
 package com.jme3.scene.plugins.blender.file;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure.DataType;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * This class represents a single field in the structure. It can be either a primitive type or a table or a reference to

File: engine/src/blender/com/jme3/scene/plugins/blender/file/Pointer.java
Patch:
@@ -31,11 +31,10 @@
  */
 package com.jme3.scene.plugins.blender.file;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * A class that represents a pointer of any level that can be stored in the file.

File: engine/src/blender/com/jme3/scene/plugins/blender/file/Structure.java
Patch:
@@ -31,14 +31,13 @@
  */
 package com.jme3.scene.plugins.blender.file;
 
+import com.jme3.scene.plugins.blender.BlenderContext;
+import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
-import com.jme3.scene.plugins.blender.BlenderContext;
-import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
-
 /**
  * A class representing a single structure in the file.
  * @author Marcin Roguski

File: engine/src/blender/com/jme3/scene/plugins/blender/lights/LightHelper.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.lights;
 
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
 import com.jme3.asset.BlenderKey.FeaturesToLoad;
 import com.jme3.light.DirectionalLight;
 import com.jme3.light.Light;
@@ -46,6 +43,8 @@
 import com.jme3.scene.plugins.blender.BlenderContext.LoadedFeatureDataType;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 /**
  * A class that is used in light calculations.

File: engine/src/blender/com/jme3/scene/plugins/blender/particles/ParticlesHelper.java
Patch:
@@ -1,12 +1,10 @@
 package com.jme3.scene.plugins.blender.particles;
 
-import java.util.logging.Logger;
-
 import com.jme3.effect.ParticleEmitter;
 import com.jme3.effect.ParticleMesh.Type;
 import com.jme3.effect.influencers.EmptyParticleInfluencer;
-import com.jme3.effect.influencers.ParticleInfluencer;
 import com.jme3.effect.influencers.NewtonianParticleInfluencer;
+import com.jme3.effect.influencers.ParticleInfluencer;
 import com.jme3.effect.shapes.EmitterMeshConvexHullShape;
 import com.jme3.effect.shapes.EmitterMeshFaceShape;
 import com.jme3.effect.shapes.EmitterMeshVertexShape;
@@ -17,6 +15,7 @@
 import com.jme3.scene.plugins.blender.file.DynamicArray;
 import com.jme3.scene.plugins.blender.file.Pointer;
 import com.jme3.scene.plugins.blender.file.Structure;
+import java.util.logging.Logger;
 
 public class ParticlesHelper extends AbstractBlenderHelper {
 	private static final Logger			LOGGER		= Logger.getLogger(ParticlesHelper.class.getName());

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/ImageLoader.java
Patch:
@@ -31,14 +31,13 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.io.InputStream;
-import java.util.logging.Logger;
-
 import com.jme3.scene.plugins.blender.file.BlenderInputStream;
 import com.jme3.texture.Image;
 import com.jme3.texture.plugins.AWTLoader;
 import com.jme3.texture.plugins.DDSLoader;
 import com.jme3.texture.plugins.TGALoader;
+import java.io.InputStream;
+import java.util.logging.Logger;
 
 /**
  * An image loader class. It uses three loaders (AWTLoader, TGALoader and DDSLoader) in an attempt to load the image from the given

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorBlend.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
@@ -42,6 +39,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'blend' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorClouds.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
@@ -42,6 +39,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'clouds' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorDistnoise.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
@@ -43,6 +40,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'distorted noise' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorMagic.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
@@ -42,6 +39,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'magic' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorMarble.java
Patch:
@@ -31,16 +31,15 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
 import com.jme3.texture.Image;
 import com.jme3.texture.Image.Format;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'marble' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorMusgrave.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
 import com.jme3.scene.plugins.blender.textures.NoiseGenerator.MusgraveFunction;
@@ -42,6 +39,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'musgrave' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorNoise.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
@@ -42,6 +39,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'noise' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorStucci.java
Patch:
@@ -31,16 +31,15 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
 import com.jme3.texture.Image;
 import com.jme3.texture.Image.Format;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'stucci' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorVoronoi.java
Patch:
@@ -31,9 +31,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
@@ -43,6 +40,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'voronoi' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorWood.java
Patch:
@@ -30,9 +30,6 @@
  */
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-
 import com.jme3.math.FastMath;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.file.Structure;
@@ -41,6 +38,8 @@
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture3D;
 import com.jme3.util.BufferUtils;
+import java.nio.ByteBuffer;
+import java.util.ArrayList;
 
 /**
  * This class generates the 'wood' texture.

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TexturePixel.java
Patch:
@@ -1,12 +1,11 @@
 package com.jme3.scene.plugins.blender.textures;
 
+import com.jme3.math.ColorRGBA;
+import com.jme3.texture.Image.Format;
 import java.nio.ByteBuffer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.math.ColorRGBA;
-import com.jme3.texture.Image.Format;
-
 /*package*/ class TexturePixel implements Cloneable {
 	private static final Logger LOGGER = Logger.getLogger(TexturePixel.class.getName());
 	

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/UVProjectionGenerator.java
Patch:
@@ -1,7 +1,5 @@
 package com.jme3.scene.plugins.blender.textures;
 
-import java.nio.FloatBuffer;
-
 import com.jme3.bounding.BoundingBox;
 import com.jme3.bounding.BoundingSphere;
 import com.jme3.math.FastMath;
@@ -10,6 +8,7 @@
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer;
 import com.jme3.scene.plugins.blender.textures.UVCoordinatesGenerator.BoundingTube;
+import java.nio.FloatBuffer;
 
 /**
  * This class helps with projection calculations.

File: engine/src/bullet-common/com/jme3/bullet/control/RigidBodyControl.java
Patch:
@@ -20,7 +20,6 @@
 import com.jme3.renderer.ViewPort;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Mesh;
-import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.control.Control;
 import com.jme3.scene.shape.Box;

File: engine/src/bullet-common/com/jme3/bullet/control/VehicleControl.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.jme3.bullet.PhysicsSpace;
 import com.jme3.bullet.collision.shapes.CollisionShape;
-import com.jme3.bullet.joints.PhysicsJoint;
 import com.jme3.bullet.objects.PhysicsVehicle;
 import com.jme3.bullet.objects.VehicleWheel;
 import com.jme3.export.InputCapsule;

File: engine/src/bullet/com/jme3/bullet/collision/shapes/BoxCollisionShape.java
Patch:
@@ -31,11 +31,11 @@
  */
 package com.jme3.bullet.collision.shapes;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.math.Vector3f;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/bullet/com/jme3/bullet/collision/shapes/CompoundCollisionShape.java
Patch:
@@ -32,12 +32,12 @@
 package com.jme3.bullet.collision.shapes;
 
 import com.jme3.bullet.collision.shapes.infos.ChildCollisionShape;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
+import com.jme3.export.OutputCapsule;
 import com.jme3.math.Matrix3f;
 import com.jme3.math.Vector3f;
-import com.jme3.export.InputCapsule;
-import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;

File: engine/src/bullet/com/jme3/bullet/collision/shapes/CylinderCollisionShape.java
Patch:
@@ -31,11 +31,11 @@
  */
 package com.jme3.bullet.collision.shapes;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.math.Vector3f;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/bullet/com/jme3/bullet/collision/shapes/HeightfieldCollisionShape.java
Patch:
@@ -14,7 +14,6 @@
 import com.jme3.util.BufferUtils;
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 

File: engine/src/bullet/com/jme3/bullet/collision/shapes/HullCollisionShape.java
Patch:
@@ -1,6 +1,5 @@
 package com.jme3.bullet.collision.shapes;
 
-import java.nio.FloatBuffer;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
@@ -10,7 +9,7 @@
 import com.jme3.util.BufferUtils;
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 

File: engine/src/bullet/com/jme3/bullet/collision/shapes/MeshCollisionShape.java
Patch:
@@ -32,11 +32,11 @@
 package com.jme3.bullet.collision.shapes;
 
 import com.jme3.bullet.util.NativeMeshUtil;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.scene.Mesh;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
+import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.scene.mesh.IndexBuffer;
 import com.jme3.util.BufferUtils;

File: engine/src/bullet/com/jme3/bullet/joints/ConeJoint.java
Patch:
@@ -31,13 +31,13 @@
  */
 package com.jme3.bullet.joints;
 
-import com.jme3.math.Matrix3f;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.objects.PhysicsRigidBody;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Matrix3f;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/bullet/com/jme3/bullet/joints/HingeJoint.java
Patch:
@@ -31,12 +31,12 @@
  */
 package com.jme3.bullet.joints;
 
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.objects.PhysicsRigidBody;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/bullet/com/jme3/bullet/joints/Point2PointJoint.java
Patch:
@@ -31,12 +31,12 @@
  */
 package com.jme3.bullet.joints;
 
-import com.jme3.export.JmeExporter;
-import com.jme3.export.JmeImporter;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.objects.PhysicsRigidBody;
 import com.jme3.export.InputCapsule;
+import com.jme3.export.JmeExporter;
+import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/bullet/com/jme3/bullet/joints/SliderJoint.java
Patch:
@@ -31,13 +31,13 @@
  */
 package com.jme3.bullet.joints;
 
-import com.jme3.export.JmeExporter;
-import com.jme3.math.Matrix3f;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.objects.PhysicsRigidBody;
 import com.jme3.export.InputCapsule;
+import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Matrix3f;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/bullet/com/jme3/bullet/objects/PhysicsCharacter.java
Patch:
@@ -32,13 +32,13 @@
 package com.jme3.bullet.objects;
 
 import com.jme3.bullet.collision.PhysicsCollisionObject;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.collision.shapes.CollisionShape;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.Quaternion;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/bullet/com/jme3/bullet/objects/PhysicsGhostObject.java
Patch:
@@ -31,16 +31,16 @@
  */
 package com.jme3.bullet.objects;
 
-import com.jme3.math.Matrix3f;
-import com.jme3.math.Quaternion;
-import com.jme3.scene.Spatial;
 import com.jme3.bullet.collision.PhysicsCollisionObject;
 import com.jme3.bullet.collision.shapes.CollisionShape;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Matrix3f;
+import com.jme3.math.Quaternion;
 import com.jme3.math.Vector3f;
+import com.jme3.scene.Spatial;
 import java.io.IOException;
 import java.util.LinkedList;
 import java.util.List;

File: engine/src/bullet/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -31,8 +31,6 @@
  */
 package com.jme3.bullet.objects;
 
-import com.jme3.math.Vector3f;
-import com.jme3.scene.Spatial;
 import com.jme3.bullet.PhysicsSpace;
 import com.jme3.bullet.collision.PhysicsCollisionObject;
 import com.jme3.bullet.collision.shapes.CollisionShape;
@@ -45,8 +43,10 @@
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.Matrix3f;
 import com.jme3.math.Quaternion;
+import com.jme3.math.Vector3f;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Node;
+import com.jme3.scene.Spatial;
 import com.jme3.scene.debug.Arrow;
 import java.io.IOException;
 import java.util.ArrayList;

File: engine/src/core-plugins/com/jme3/asset/plugins/UrlAssetInfo.java
Patch:
@@ -4,7 +4,6 @@
 import com.jme3.asset.AssetKey;
 import com.jme3.asset.AssetLoadException;
 import com.jme3.asset.AssetManager;
-import com.jme3.asset.AssetNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;

File: engine/src/core-plugins/com/jme3/audio/plugins/WAVLoader.java
Patch:
@@ -32,12 +32,12 @@
 
 package com.jme3.audio.plugins;
 
-import com.jme3.audio.AudioBuffer;
-import com.jme3.audio.AudioData;
-import com.jme3.audio.AudioStream;
 import com.jme3.asset.AssetInfo;
 import com.jme3.asset.AssetLoader;
+import com.jme3.audio.AudioBuffer;
+import com.jme3.audio.AudioData;
 import com.jme3.audio.AudioKey;
+import com.jme3.audio.AudioStream;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.LittleEndien;
 import java.io.IOException;

File: engine/src/core-plugins/com/jme3/texture/plugins/DDSLoader.java
Patch:
@@ -43,7 +43,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteBuffer;
-
 import java.util.ArrayList;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: engine/src/core/checkers/quals/DefaultQualifier.java
Patch:
@@ -1,7 +1,9 @@
 package checkers.quals;
 
-import java.lang.annotation.*;
+import java.lang.annotation.Documented;
 import static java.lang.annotation.ElementType.*;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**

File: engine/src/core/checkers/quals/Unused.java
Patch:
@@ -1,7 +1,6 @@
 package checkers.quals;
 
-import static java.lang.annotation.ElementType.*;
-
+import static java.lang.annotation.ElementType.FIELD;
 import java.lang.annotation.*;
 
 /**

File: engine/src/core/com/jme3/animation/SpatialTrack.java
Patch:
@@ -1,7 +1,5 @@
 package com.jme3.animation;
 
-import java.io.IOException;
-
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
@@ -10,6 +8,7 @@
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Spatial;
 import com.jme3.util.TempVars;
+import java.io.IOException;
 import java.util.Arrays;
 
 /**

File: engine/src/core/com/jme3/asset/AssetManager.java
Patch:
@@ -32,8 +32,8 @@
 
 package com.jme3.asset;
 
-import com.jme3.audio.AudioKey;
 import com.jme3.audio.AudioData;
+import com.jme3.audio.AudioKey;
 import com.jme3.font.BitmapFont;
 import com.jme3.material.Material;
 import com.jme3.scene.Spatial;

File: engine/src/core/com/jme3/asset/DesktopAssetManager.java
Patch:
@@ -33,8 +33,8 @@
 package com.jme3.asset;
 
 import com.jme3.asset.AssetCache.SmartAssetInfo;
-import com.jme3.audio.AudioKey;
 import com.jme3.audio.AudioData;
+import com.jme3.audio.AudioKey;
 import com.jme3.font.BitmapFont;
 import com.jme3.material.Material;
 import com.jme3.scene.Spatial;

File: engine/src/core/com/jme3/audio/AudioKey.java
Patch:
@@ -33,9 +33,9 @@
 package com.jme3.audio;
 
 import com.jme3.asset.AssetKey;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 

File: engine/src/core/com/jme3/audio/LowPassFilter.java
Patch:
@@ -32,9 +32,9 @@
 
 package com.jme3.audio;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.util.NativeObject;
 import java.io.IOException;

File: engine/src/core/com/jme3/bounding/Intersection.java
Patch:
@@ -31,13 +31,12 @@
  */
 package com.jme3.bounding;
 
-import com.jme3.util.TempVars;
 import com.jme3.math.FastMath;
 import com.jme3.math.Plane;
 import com.jme3.math.Vector3f;
-
-import static java.lang.Math.min;
+import com.jme3.util.TempVars;
 import static java.lang.Math.max;
+import static java.lang.Math.min;
 
 /**
  * This class includes some utility methods for computing intersection

File: engine/src/core/com/jme3/cinematic/events/SoundTrack.java
Patch:
@@ -34,7 +34,6 @@
 import com.jme3.animation.LoopMode;
 import com.jme3.app.Application;
 import com.jme3.audio.AudioNode;
-import com.jme3.audio.AudioRenderer;
 import com.jme3.cinematic.Cinematic;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;

File: engine/src/core/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -37,9 +37,9 @@
 import com.jme3.effect.influencers.ParticleInfluencer;
 import com.jme3.effect.shapes.EmitterPointShape;
 import com.jme3.effect.shapes.EmitterShape;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.ColorRGBA;
 import com.jme3.math.FastMath;

File: engine/src/core/com/jme3/effect/influencers/DefaultParticleInfluencer.java
Patch:
@@ -1,7 +1,5 @@
 package com.jme3.effect.influencers;
 
-import java.io.IOException;
-
 import com.jme3.effect.Particle;
 import com.jme3.effect.shapes.EmitterShape;
 import com.jme3.export.InputCapsule;
@@ -10,6 +8,7 @@
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
+import java.io.IOException;
 
 /**
  * This emitter influences the particles so that they move all in the same direction.

File: engine/src/core/com/jme3/effect/influencers/EmptyParticleInfluencer.java
Patch:
@@ -1,12 +1,11 @@
 package com.jme3.effect.influencers;
 
-import java.io.IOException;
-
 import com.jme3.effect.Particle;
 import com.jme3.effect.shapes.EmitterShape;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.math.Vector3f;
+import java.io.IOException;
 
 /**
  * This influencer does not influence particle at all.

File: engine/src/core/com/jme3/effect/influencers/NewtonianParticleInfluencer.java
Patch:
@@ -1,7 +1,5 @@
 package com.jme3.effect.influencers;
 
-import java.io.IOException;
-
 import com.jme3.effect.Particle;
 import com.jme3.effect.shapes.EmitterShape;
 import com.jme3.export.InputCapsule;
@@ -10,6 +8,7 @@
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Matrix3f;
+import java.io.IOException;
 
 /**
  * This influencer calculates initial velocity with the use of the emitter's shape.

File: engine/src/core/com/jme3/effect/shapes/EmitterBoxShape.java
Patch:
@@ -31,9 +31,9 @@
  */
 package com.jme3.effect.shapes;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;

File: engine/src/core/com/jme3/effect/shapes/EmitterMeshConvexHullShape.java
Patch:
@@ -1,10 +1,9 @@
 package com.jme3.effect.shapes;
 
-import java.util.List;
-
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Mesh;
+import java.util.List;
 
 /**
  * This emiter shape emits the particles from the given shape's interior constrained by its convex hull

File: engine/src/core/com/jme3/effect/shapes/EmitterMeshFaceShape.java
Patch:
@@ -1,13 +1,12 @@
 package com.jme3.effect.shapes;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.util.BufferUtils;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * This emiter shape emits the particles from the given shape's faces.

File: engine/src/core/com/jme3/effect/shapes/EmitterSphereShape.java
Patch:
@@ -31,9 +31,9 @@
  */
 package com.jme3.effect.shapes;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;

File: engine/src/core/com/jme3/font/ColorTags.java
Patch:
@@ -1,11 +1,10 @@
 package com.jme3.font;
 
+import com.jme3.math.ColorRGBA;
 import java.util.LinkedList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import com.jme3.math.ColorRGBA;
-
 /**
  * Contains the color information tagged in a text string
  * Format: \#rgb#

File: engine/src/core/com/jme3/font/LetterQuad.java
Patch:
@@ -1,11 +1,10 @@
 package com.jme3.font;
 
+import com.jme3.math.ColorRGBA;
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.ShortBuffer;
 
-import com.jme3.math.ColorRGBA;
-
 /**
  * LetterQuad contains the position, color, uv texture information for a character in text.
  * @author YongHoon

File: engine/src/core/com/jme3/font/Letters.java
Patch:
@@ -1,11 +1,10 @@
 package com.jme3.font;
 
-import java.util.LinkedList;
-
 import com.jme3.font.BitmapFont.Align;
 import com.jme3.font.BitmapFont.VAlign;
 import com.jme3.font.ColorTags.Range;
 import com.jme3.math.ColorRGBA;
+import java.util.LinkedList;
 
 /**
  * Manage and align LetterQuads

File: engine/src/core/com/jme3/input/event/TouchEvent.java
Patch:
@@ -31,8 +31,6 @@
  */
 package com.jme3.input.event;
 
-import com.jme3.math.Vector2f;
-
 /**
  * <code>TouchEvent</code> represents a single event from multi-touch input devices
  * @author larynx

File: engine/src/core/com/jme3/light/DirectionalLight.java
Patch:
@@ -32,9 +32,9 @@
 
 package com.jme3.light;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Spatial;

File: engine/src/core/com/jme3/light/PointLight.java
Patch:
@@ -32,9 +32,9 @@
 package com.jme3.light;
 
 import com.jme3.bounding.BoundingVolume;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Spatial;

File: engine/src/core/com/jme3/math/AbstractTriangle.java
Patch:
@@ -32,7 +32,8 @@
 
 package com.jme3.math;
 
-import com.jme3.collision.*;
+import com.jme3.collision.Collidable;
+import com.jme3.collision.CollisionResults;
 
 public abstract class AbstractTriangle implements Collidable {
 

File: engine/src/core/com/jme3/math/CurveAndSurfaceMath.java
Patch:
@@ -1,8 +1,7 @@
 package com.jme3.math;
 
-import java.util.List;
-
 import com.jme3.math.Spline.SplineType;
+import java.util.List;
 
 /**
  * This class offers methods to help with curves and surfaces calculations.

File: engine/src/core/com/jme3/scene/Geometry.java
Patch:
@@ -35,9 +35,9 @@
 import com.jme3.bounding.BoundingVolume;
 import com.jme3.collision.Collidable;
 import com.jme3.collision.CollisionResults;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.material.Material;
 import com.jme3.math.Matrix4f;

File: engine/src/core/com/jme3/scene/control/AbstractControl.java
Patch:
@@ -32,9 +32,9 @@
 
 package com.jme3.scene.control;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.ViewPort;

File: engine/src/core/com/jme3/scene/control/BillboardControl.java
Patch:
@@ -32,8 +32,6 @@
 
 package com.jme3.scene.control;
 
-import java.io.IOException;
-
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
@@ -47,6 +45,7 @@
 import com.jme3.renderer.ViewPort;
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
+import java.io.IOException;
 
 public class BillboardControl extends AbstractControl {
 

File: engine/src/core/com/jme3/scene/control/LightControl.java
Patch:
@@ -36,9 +36,7 @@
 import com.jme3.light.DirectionalLight;
 import com.jme3.light.Light;
 import com.jme3.light.PointLight;
-import com.jme3.math.Quaternion;
 import com.jme3.math.Vector3f;
-import com.jme3.renderer.Camera;
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.ViewPort;
 import com.jme3.scene.Spatial;

File: engine/src/core/com/jme3/scene/control/LodControl.java
Patch:
@@ -33,9 +33,9 @@
 package com.jme3.scene.control;
 
 import com.jme3.bounding.BoundingVolume;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.renderer.Camera;

File: engine/src/core/com/jme3/scene/debug/SkeletonWire.java
Patch:
@@ -41,7 +41,6 @@
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.scene.VertexBuffer.Usage;
 import com.jme3.util.BufferUtils;
-import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.ShortBuffer;
 

File: engine/src/core/com/jme3/scene/shape/AbstractBox.java
Patch:
@@ -32,9 +32,9 @@
 
 package com.jme3.scene.shape;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Mesh;

File: engine/src/core/com/jme3/scene/shape/Cylinder.java
Patch:
@@ -39,12 +39,11 @@
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
-import com.jme3.scene.mesh.IndexBuffer;
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;
+import com.jme3.scene.mesh.IndexBuffer;
 import com.jme3.util.BufferUtils;
 import static com.jme3.util.BufferUtils.*;
-
 import java.io.IOException;
 import java.nio.FloatBuffer;
 

File: engine/src/core/com/jme3/scene/shape/Dome.java
Patch:
@@ -32,13 +32,13 @@
 // $Id: Dome.java 4131 2009-03-19 20:15:28Z blaine.dev $
 package com.jme3.scene.shape;
 
-import com.jme3.scene.*;
-import com.jme3.export.JmeImporter;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
+import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
+import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.TempVars;

File: engine/src/core/com/jme3/scene/shape/PQTorus.java
Patch:
@@ -33,16 +33,15 @@
 // $Id: PQTorus.java 4131 2009-03-19 20:15:28Z blaine.dev $
 package com.jme3.scene.shape;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;
 import static com.jme3.util.BufferUtils.*;
-
 import java.io.IOException;
 import java.nio.FloatBuffer;
 import java.nio.ShortBuffer;

File: engine/src/core/com/jme3/scene/shape/Sphere.java
Patch:
@@ -32,13 +32,13 @@
 // $Id: Sphere.java 4163 2009-03-25 01:14:55Z matt.yellen $
 package com.jme3.scene.shape;
 
-import com.jme3.scene.*;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;
+import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer.Type;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.TempVars;

File: engine/src/core/com/jme3/scene/shape/Torus.java
Patch:
@@ -33,9 +33,9 @@
 // $Id: Torus.java 4131 2009-03-19 20:15:28Z blaine.dev $
 package com.jme3.scene.shape;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import com.jme3.math.FastMath;
 import com.jme3.math.Vector3f;

File: engine/src/core/com/jme3/shader/UniformBinding.java
Patch:
@@ -32,8 +32,6 @@
 
 package com.jme3.shader;
 
-import com.jme3.light.AmbientLight;
-
 public enum UniformBinding {
 
     /**

File: engine/src/core/com/jme3/system/AppSettings.java
Patch:
@@ -31,7 +31,6 @@
  */
 package com.jme3.system;
 
-import com.jme3.renderer.Renderer;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;

File: engine/src/core/com/jme3/texture/FrameBuffer.java
Patch:
@@ -33,9 +33,9 @@
 package com.jme3.texture;
 
 import com.jme3.renderer.Caps;
-import com.jme3.util.NativeObject;
 import com.jme3.renderer.Renderer;
 import com.jme3.texture.Image.Format;
+import com.jme3.util.NativeObject;
 import java.util.ArrayList;
 
 /**

File: engine/src/core/com/jme3/texture/Texture2D.java
Patch:
@@ -32,9 +32,9 @@
 
 package com.jme3.texture;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 

File: engine/src/core/com/jme3/texture/Texture3D.java
Patch:
@@ -31,9 +31,9 @@
  */
 package com.jme3.texture;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 

File: engine/src/core/com/jme3/texture/TextureCubeMap.java
Patch:
@@ -32,9 +32,9 @@
 
 package com.jme3.texture;
 
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
-import com.jme3.export.InputCapsule;
 import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 

File: engine/src/core/com/jme3/ui/Picture.java
Patch:
@@ -32,13 +32,13 @@
 
 package com.jme3.ui;
 
-import com.jme3.material.Material;
-import com.jme3.math.Vector3f;
-import com.jme3.renderer.queue.RenderQueue.Bucket;
 import com.jme3.asset.AssetManager;
 import com.jme3.asset.TextureKey;
+import com.jme3.material.Material;
 import com.jme3.material.RenderState.BlendMode;
 import com.jme3.math.ColorRGBA;
+import com.jme3.math.Vector3f;
+import com.jme3.renderer.queue.RenderQueue.Bucket;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.shape.Quad;
 import com.jme3.texture.Texture2D;

File: engine/src/core/com/jme3/util/NativeObject.java
Patch:
@@ -32,8 +32,6 @@
 
 package com.jme3.util;
 
-import com.jme3.renderer.Renderer;
-
 /**
  * Describes a native object. An encapsulation of a certain object 
  * on the native side of the graphics or audio library.

File: engine/src/core/com/jme3/util/PlaceholderAssets.java
Patch:
@@ -3,13 +3,13 @@
 import com.jme3.asset.AssetManager;
 import com.jme3.audio.AudioBuffer;
 import com.jme3.audio.AudioData;
-import com.jme3.texture.Image;
-import com.jme3.texture.Image.Format;
 import com.jme3.material.Material;
 import com.jme3.math.ColorRGBA;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.shape.Box;
+import com.jme3.texture.Image;
+import com.jme3.texture.Image.Format;
 import java.nio.ByteBuffer;
 
 public class PlaceholderAssets {

File: engine/src/desktop-fx/com/jme3/post/filters/DepthOfFieldFilter.java
Patch:
@@ -32,8 +32,8 @@
 package com.jme3.post.filters;
 
 import com.jme3.asset.AssetManager;
-import com.jme3.post.Filter;
 import com.jme3.material.Material;
+import com.jme3.post.Filter;
 import com.jme3.renderer.RenderManager;
 import com.jme3.renderer.ViewPort;
 

File: engine/src/desktop-fx/com/jme3/shadow/ShadowUtil.java
Patch:
@@ -39,13 +39,12 @@
 import com.jme3.math.Vector3f;
 import com.jme3.renderer.Camera;
 import com.jme3.renderer.queue.GeometryList;
-
 import com.jme3.scene.Geometry;
+import static java.lang.Math.max;
+import static java.lang.Math.min;
 import java.util.ArrayList;
 import java.util.List;
 
-import static java.lang.Math.*;
-
 /**
  * Includes various useful shadow mapping functions.
  *

File: engine/src/desktop/com/jme3/app/AppletHarness.java
Patch:
@@ -43,8 +43,6 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.HashMap;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import javax.swing.JOptionPane;
 import javax.swing.SwingUtilities;
 

File: engine/src/desktop/jme3tools/navigation/Coordinate.java
Patch:
@@ -4,10 +4,7 @@
  */
 package jme3tools.navigation;
 
-import jme3tools.navigation.InvalidPositionException;
 import java.text.DecimalFormat;
-import jme3tools.navigation.StringUtil;
-import jme3tools.navigation.NumUtil;
 
 /**
  * Coordinate class. Used to store a coordinate in [DD]D MM.M format.

File: engine/src/desktop/jme3tools/navigation/MapModel2D.java
Patch:
@@ -1,9 +1,6 @@
 package jme3tools.navigation;
-import jme3tools.navigation.InvalidPositionException;
 import java.awt.Point;
 import java.text.DecimalFormat;
-import jme3tools.navigation.Position;
-import jme3tools.navigation.NavCalculator;
 
 /*
  * To change this template, choose Tools | Templates

File: engine/src/desktop/jme3tools/navigation/NavCalculator.java
Patch:
@@ -4,9 +4,6 @@
  */
 package jme3tools.navigation;
 
-import jme3tools.navigation.InvalidPositionException;
-import jme3tools.navigation.Position;
-
 
 
 /**

File: engine/src/desktop/jme3tools/navigation/Position.java
Patch:
@@ -4,8 +4,6 @@
  */
 package jme3tools.navigation;
 
-import jme3tools.navigation.InvalidPositionException;
-
 /**
  * This class represents the position of an entity in the world.
  * 

File: engine/src/desktop/jme3tools/navigation/StringUtil.java
Patch:
@@ -4,7 +4,7 @@
  */
 package jme3tools.navigation;
 
-import java.util.regex.*;
+import java.util.regex.Pattern;
 
 /**
  * A collection of String utilities.

File: engine/src/jbullet/com/jme3/bullet/collision/PhysicsCollisionEvent.java
Patch:
@@ -32,8 +32,8 @@
 package com.jme3.bullet.collision;
 
 import com.bulletphysics.collision.narrowphase.ManifoldPoint;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.util.Converter;
+import com.jme3.math.Vector3f;
 import com.jme3.scene.Spatial;
 import java.util.EventObject;
 

File: engine/src/jbullet/com/jme3/bullet/collision/shapes/BoxCollisionShape.java
Patch:
@@ -32,12 +32,12 @@
 package com.jme3.bullet.collision.shapes;
 
 import com.bulletphysics.collision.shapes.BoxShape;
-import com.jme3.export.JmeExporter;
-import com.jme3.export.JmeImporter;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.util.Converter;
 import com.jme3.export.InputCapsule;
+import com.jme3.export.JmeExporter;
+import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 
 /**

File: engine/src/jbullet/com/jme3/bullet/collision/shapes/CompoundCollisionShape.java
Patch:
@@ -34,13 +34,13 @@
 import com.bulletphysics.collision.shapes.CompoundShape;
 import com.bulletphysics.linearmath.Transform;
 import com.jme3.bullet.collision.shapes.infos.ChildCollisionShape;
+import com.jme3.bullet.util.Converter;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
+import com.jme3.export.OutputCapsule;
 import com.jme3.math.Matrix3f;
 import com.jme3.math.Vector3f;
-import com.jme3.bullet.util.Converter;
-import com.jme3.export.InputCapsule;
-import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;

File: engine/src/jbullet/com/jme3/bullet/collision/shapes/CylinderCollisionShape.java
Patch:
@@ -34,12 +34,12 @@
 import com.bulletphysics.collision.shapes.CylinderShape;
 import com.bulletphysics.collision.shapes.CylinderShapeX;
 import com.bulletphysics.collision.shapes.CylinderShapeZ;
-import com.jme3.export.JmeExporter;
-import com.jme3.export.JmeImporter;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.util.Converter;
 import com.jme3.export.InputCapsule;
+import com.jme3.export.JmeExporter;
+import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 
 /**

File: engine/src/jbullet/com/jme3/bullet/collision/shapes/GImpactCollisionShape.java
Patch:
@@ -34,13 +34,13 @@
 import com.bulletphysics.collision.shapes.IndexedMesh;
 import com.bulletphysics.collision.shapes.TriangleIndexVertexArray;
 import com.bulletphysics.extras.gimpact.GImpactMeshShape;
+import com.jme3.bullet.util.Converter;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
+import com.jme3.export.OutputCapsule;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Mesh;
-import com.jme3.bullet.util.Converter;
-import com.jme3.export.InputCapsule;
-import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 

File: engine/src/jbullet/com/jme3/bullet/collision/shapes/MeshCollisionShape.java
Patch:
@@ -34,13 +34,13 @@
 import com.bulletphysics.collision.shapes.BvhTriangleMeshShape;
 import com.bulletphysics.collision.shapes.IndexedMesh;
 import com.bulletphysics.collision.shapes.TriangleIndexVertexArray;
+import com.jme3.bullet.util.Converter;
+import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
+import com.jme3.export.OutputCapsule;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.Mesh;
-import com.jme3.bullet.util.Converter;
-import com.jme3.export.InputCapsule;
-import com.jme3.export.OutputCapsule;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 

File: engine/src/jbullet/com/jme3/bullet/joints/ConeJoint.java
Patch:
@@ -33,14 +33,14 @@
 
 import com.bulletphysics.dynamics.constraintsolver.ConeTwistConstraint;
 import com.bulletphysics.linearmath.Transform;
-import com.jme3.math.Matrix3f;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.objects.PhysicsRigidBody;
 import com.jme3.bullet.util.Converter;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Matrix3f;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 
 /**

File: engine/src/jbullet/com/jme3/bullet/joints/HingeJoint.java
Patch:
@@ -32,13 +32,13 @@
 package com.jme3.bullet.joints;
 
 import com.bulletphysics.dynamics.constraintsolver.HingeConstraint;
-import com.jme3.math.Vector3f;
 import com.jme3.bullet.objects.PhysicsRigidBody;
 import com.jme3.bullet.util.Converter;
 import com.jme3.export.InputCapsule;
 import com.jme3.export.JmeExporter;
 import com.jme3.export.JmeImporter;
 import com.jme3.export.OutputCapsule;
+import com.jme3.math.Vector3f;
 import java.io.IOException;
 
 /**

File: sdk/jme3-android/src/com/jme3/gde/android/MobileCompositeProvider.java
Patch:
@@ -57,7 +57,7 @@ public JComponent createComponent(ProjectCustomizer.Category category, Lookup co
     private class SavePropsListener implements ActionListener {
 
         private String extensionName = "mobile";
-        private String extensionVersion = "v0.15";
+        private String extensionVersion = "v0.16";
         private String[] extensionDependencies = new String[]{"jar", "-mobile-deployment"};
         private ProjectExtensionManager manager = new ProjectExtensionManager(extensionName, extensionVersion, extensionDependencies);
         private ProjectExtensionProperties properties;

File: engine/src/desktop-fx/com/jme3/shadow/ShadowUtil.java
Patch:
@@ -177,7 +177,7 @@ public static BoundingBox computeUnionBound(GeometryList list, Transform transfo
             BoundingVolume vol = list.get(i).getWorldBound();
             BoundingVolume newVol = vol.transform(transform);
             //Nehon : prevent NaN and infinity values to screw the final bounding box
-            if (newVol.getCenter().x != Float.NaN && newVol.getCenter().x != Float.POSITIVE_INFINITY && newVol.getCenter().x != Float.NEGATIVE_INFINITY) {
+            if (!Float.isNaN(newVol.getCenter().x) && newVol.getCenter().x != Float.POSITIVE_INFINITY && newVol.getCenter().x != Float.NEGATIVE_INFINITY) {
                 bbox.mergeLocal(newVol);
             }
         }
@@ -197,7 +197,7 @@ public static BoundingBox computeUnionBound(GeometryList list, Matrix4f mat) {
             BoundingVolume vol = list.get(i).getWorldBound();
             store = vol.clone().transform(mat, null);
             //Nehon : prevent NaN and infinity values to screw the final bounding box
-            if (store.getCenter().x != Float.NaN && store.getCenter().x != Float.POSITIVE_INFINITY && store.getCenter().x != Float.NEGATIVE_INFINITY) {
+            if (!Float.isNaN(store.getCenter().x) && store.getCenter().x != Float.POSITIVE_INFINITY && store.getCenter().x != Float.NEGATIVE_INFINITY) {
                 bbox.mergeLocal(store);
             }
         }

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/multiview/MaterialEditorTopComponent.java
Patch:
@@ -539,6 +539,7 @@ public void setMatDefList(final String[] strings, String selected) {
         jComboBox1.addItem("Common/MatDefs/Misc/Particle.j3md");
         jComboBox1.addItem("Common/MatDefs/Misc/Sky.j3md");
         jComboBox1.addItem("Common/MatDefs/Gui/Gui.j3md");
+        jComboBox1.addItem("Common/MatDefs/Terrain/TerrainLighting.j3md");
         jComboBox1.addItem("Common/MatDefs/Terrain/Terrain.j3md");
 //        jComboBox1.addItem("Common/MatDefs/Misc/ShowNormals.j3md");
         jComboBox1.setSelectedItem(selected);

File: engine/src/test/jme3test/terrain/TerrainFractalGridTest.java
Patch:
@@ -138,7 +138,7 @@ public float value(float... in) {
 
         this.viewPort.setBackgroundColor(new ColorRGBA(0.7f, 0.8f, 1f, 1f));
 
-        this.terrain.initialize(cam.getLocation());
+        
     }
 
     @Override

File: engine/src/test/jme3test/terrain/TerrainGridSerializationTest.java
Patch:
@@ -97,7 +97,7 @@ public void tileDetached(Vector3f cell, TerrainQuad quad) {
 
             });
         }
-        this.terrain.initialize(cam.getLocation());
+        
         this.initKeys();
     }
 

File: engine/src/test/jme3test/terrain/TerrainGridTest.java
Patch:
@@ -158,7 +158,7 @@ public void tileDetached(Vector3f cell, TerrainQuad quad) {
 
             });
         }
-        this.terrain.initialize(cam.getLocation());
+        
         this.initKeys();
     }
 

File: engine/src/test/jme3test/terrain/TerrainGridTileLoaderTest.java
Patch:
@@ -154,7 +154,7 @@ public void tileDetached(Vector3f cell, TerrainQuad quad) {
 
             });
         }
-        this.terrain.initialize(cam.getLocation());
+        
         this.initKeys();
     }
 

File: engine/src/test/jme3test/terrain/TerrainTestAdvanced.java
Patch:
@@ -97,6 +97,7 @@ public void simpleInitApp() {
         // TERRAIN TEXTURE material
         matTerrain = new Material(assetManager, "Common/MatDefs/Terrain/TerrainLighting.j3md");
         matTerrain.setBoolean("useTriPlanarMapping", false);
+        matTerrain.setFloat("Shininess", 0.0f);
 
         // ALPHA map (for splat textures)
         matTerrain.setTexture("AlphaMap", assetManager.loadTexture("Textures/Terrain/splat/alpha1.png"));

File: engine/src/test/jme3test/terrain/TerrainTestModifyHeight.java
Patch:
@@ -408,7 +408,7 @@ public float value(float... in) {
         terrain.setMaterial(matTerrain);
         terrain.setLocalTranslation(0, 0, 0);
         terrain.setLocalScale(2f, 1f, 2f);
-        ((TerrainGrid)terrain).initialize(Vector3f.ZERO);
+        
         rootNode.attachChild(this.terrain);
 
         TerrainLodControl control = new TerrainLodControl(this.terrain, getCamera());

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -105,7 +105,7 @@
 public class TerrainGrid extends TerrainQuad {
 
     protected static final Logger log = Logger.getLogger(TerrainGrid.class.getCanonicalName());
-    protected Vector3f currentCamCell;
+    protected Vector3f currentCamCell = Vector3f.ZERO;
     protected int quarterSize; // half of quadSize
     protected int quadSize;
     protected HeightMapGrid heightMapGrid;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainLodControl.java
Patch:
@@ -93,6 +93,7 @@ public TerrainLodControl(Terrain terrain, Camera camera) {
     public TerrainLodControl(Terrain terrain, List<Camera> cameras) {
         this.terrain = terrain;
         this.cameras = cameras;
+        lodCalculator = new DistanceLodCalculator(65, 2.7f); // a default calculator
     }
 
     @Override

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/NiftyJmeDisplay.java
Patch:
@@ -73,6 +73,8 @@ public URL getResource(String path) {
         }
     }
     
+    private ResourceLocation resourceLocation = new ResourceLocationJmp();
+    
     public NiftyJmeDisplay(AssetManager assetManager, 
                            InputSystem inputManager,
                            AudioRenderer audioRenderer,
@@ -90,8 +92,6 @@ public NiftyJmeDisplay(AssetManager assetManager,
 
     @Override
     public void initialize(RenderManager rm, ViewPort vp) {
-        ResourceLocationJmp resourceLocation = new ResourceLocationJmp();
-        ResourceLoader.removeAllResourceLocations();
         ResourceLoader.addResourceLocation(resourceLocation);
         this.renderManager = rm;
         renderDev.setRenderManager(rm);
@@ -160,6 +160,7 @@ public void postFrame(FrameBuffer out) {
 
     @Override
     public void cleanup() {
+        ResourceLoader.removeResourceLocation(resourceLocation);
         inited = false;
 //        nifty.exit();
     }

File: engine/src/terrain/com/jme3/terrain/GeoMap.java
Patch:
@@ -58,7 +58,8 @@ public GeoMap() {}
     
     @Deprecated
     public GeoMap(FloatBuffer heightData, int width, int height, int maxval){
-        this(new float[heightData.limit()], width, height, maxval);
+        hdata = new float[heightData.limit()];
+        heightData.get(hdata);
         this.width = width;
         this.height = height;
         this.maxval = maxval;

File: engine/src/terrain/com/jme3/terrain/geomipmap/LODGeomap.java
Patch:
@@ -72,7 +72,7 @@ public LODGeomap() {
 
     @Deprecated
     public LODGeomap(int size, FloatBuffer heightMap) {
-        this(size, new float[heightMap.limit()]);
+        super(heightMap, size, size, 1);
     }
     
     public LODGeomap(int size, float[] heightMap) {

File: engine/src/terrain/com/jme3/terrain/GeoMap.java
Patch:
@@ -355,7 +355,8 @@ public void read(JmeImporter im) throws IOException {
         if (hdata == null) {
             FloatBuffer buf = ic.readFloatBuffer("hdata", null);
             if (buf != null) {
-                hdata = buf.array();
+                hdata = new float[buf.limit()];
+                buf.get(hdata);
             }
         }
         width = ic.readInt("width", 0);

File: engine/src/bullet/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -96,7 +96,7 @@ private static CompoundCollisionShape createCompoundShape(Node realRootNode,
                 }
                 TerrainQuad terrain = (TerrainQuad) spatial;
                 Transform trans = getTransform(spatial, realRootNode);
-                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale()),
+                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightMap(), trans.getScale()),
                         trans.getTranslation(),
                         trans.getRotation().toRotationMatrix());
             } else if (spatial instanceof Node) {

File: engine/src/jbullet/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -96,7 +96,7 @@ private static CompoundCollisionShape createCompoundShape(Node realRootNode,
                 }
                 TerrainQuad terrain = (TerrainQuad) spatial;
                 Transform trans = getTransform(spatial, realRootNode);
-                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale()),
+                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightMap(), trans.getScale()),
                         trans.getTranslation(),
                         trans.getRotation().toRotationMatrix());
             } else if (spatial instanceof Node) {

File: engine/src/bullet/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -130,7 +130,7 @@ private static CompoundCollisionShape createCompoundShape(Node realRootNode,
                 }
                 TerrainPatch terrain = (TerrainPatch) spatial;
                 Transform trans = getTransform(spatial, realRootNode);
-                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightmap(), terrain.getLocalScale()),
+                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale()),
                         trans.getTranslation(),
                         trans.getRotation().toRotationMatrix());
             }
@@ -175,7 +175,7 @@ public static CollisionShape createMeshShape(Spatial spatial) {
             return new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale());
         } else if (spatial instanceof TerrainPatch) {
             TerrainPatch terrain = (TerrainPatch) spatial;
-            return new HeightfieldCollisionShape(terrain.getHeightmap(), terrain.getLocalScale());
+            return new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale());
         } else if (spatial instanceof Geometry) {
             return createSingleMeshShape((Geometry) spatial, spatial);
         } else if (spatial instanceof Node) {

File: engine/src/jbullet/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -130,7 +130,7 @@ private static CompoundCollisionShape createCompoundShape(Node realRootNode,
                 }
                 TerrainPatch terrain = (TerrainPatch) spatial;
                 Transform trans = getTransform(spatial, realRootNode);
-                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightmap(), terrain.getLocalScale()),
+                shape.addChildShape(new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale()),
                         trans.getTranslation(),
                         trans.getRotation().toRotationMatrix());
             }
@@ -175,7 +175,7 @@ public static CollisionShape createMeshShape(Spatial spatial) {
             return new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale());
         } else if (spatial instanceof TerrainPatch) {
             TerrainPatch terrain = (TerrainPatch) spatial;
-            return new HeightfieldCollisionShape(terrain.getHeightmap(), terrain.getLocalScale());
+            return new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale());
         } else if (spatial instanceof Geometry) {
             return createSingleMeshShape((Geometry) spatial, spatial);
         } else if (spatial instanceof Node) {

File: engine/src/bullet/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -154,7 +154,7 @@ public static CollisionShape createMeshShape(Spatial spatial) {
             return new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale());
         } else if (spatial instanceof TerrainPatch) {
             TerrainPatch terrain = (TerrainPatch) spatial;
-            return new HeightfieldCollisionShape(terrain.getHeightmap().array(), terrain.getLocalScale());
+            return new HeightfieldCollisionShape(terrain.getHeightmap(), terrain.getLocalScale());
         } else if (spatial instanceof Geometry) {
             return createSingleMeshShape((Geometry) spatial, spatial);
         } else if (spatial instanceof Node) {

File: engine/src/jbullet/com/jme3/bullet/util/CollisionShapeFactory.java
Patch:
@@ -155,7 +155,7 @@ public static CollisionShape createMeshShape(Spatial spatial) {
             return new HeightfieldCollisionShape(terrain.getHeightMap(), terrain.getLocalScale());
         } else if (spatial instanceof TerrainPatch) {
             TerrainPatch terrain = (TerrainPatch) spatial;
-            return new HeightfieldCollisionShape(terrain.getHeightmap().array(), terrain.getLocalScale());
+            return new HeightfieldCollisionShape(terrain.getHeightmap(), terrain.getLocalScale());
         } else if (spatial instanceof Geometry) {
             return createSingleMeshShape((Geometry) spatial, spatial);
         } else if (spatial instanceof Node) {

File: engine/src/desktop/com/jme3/app/state/VideoRecorderAppState.java
Patch:
@@ -58,7 +58,7 @@ public IsoTimer(float framerate) {
         }
 
         public long getTime() {
-            return (long) (this.ticks / this.framerate);
+            return (long) (this.ticks * (1.0f / this.framerate));
         }
 
         public long getResolution() {

File: engine/src/terrain/com/jme3/terrain/geomipmap/grid/FractalTileLoader.java
Patch:
@@ -63,9 +63,9 @@ private HeightMap getHeightMapAt(Vector3f location) {
 				heightmap.setHeightScale(heightScale);
 			} catch (IOException e) {}
 		} else {
-			FloatBuffer buffer = this.base.getBuffer(location.x * (this.patchSize - 1), location.z * (this.patchSize - 1), 0, this.patchSize);
+			FloatBuffer buffer = this.base.getBuffer(location.x * (this.quadSize - 1), location.z * (this.quadSize - 1), 0, this.quadSize);
 			if (this.cacheDir != null) {
-				MapUtils.saveImage(MapUtils.toGrayscale16Image(buffer, this.patchSize), new File(this.cacheDir, "terrain_" + (int) location.x
+				MapUtils.saveImage(MapUtils.toGrayscale16Image(buffer, this.quadSize), new File(this.cacheDir, "terrain_" + (int) location.x
 						+ "_" + (int) location.z + ".png"));
 			}
 			float[] arr = buffer.array();

File: engine/src/terrain/com/jme3/terrain/geomipmap/grid/FractalTileLoader.java
Patch:
@@ -8,6 +8,7 @@
 import com.jme3.export.JmeImporter;
 import com.jme3.math.Vector3f;
 import com.jme3.terrain.MapUtils;
+import com.jme3.terrain.geomipmap.TerrainGridTileLoader;
 import com.jme3.terrain.geomipmap.TerrainQuad;
 import com.jme3.terrain.heightmap.AbstractHeightMap;
 import com.jme3.terrain.heightmap.Grayscale16BitHeightMap;
@@ -23,7 +24,7 @@
  *
  * @author Anthyon, normenhansen
  */
-public class FractalTileLoader {
+public class FractalTileLoader implements TerrainGridTileLoader{
 	public class FloatBufferHeightMap extends AbstractHeightMap {
 
 		private final FloatBuffer buffer;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -204,6 +204,7 @@ public TerrainGrid(String name, int patchSize, int maxVisibleSize, Vector3f scal
         terrainQuadGrid.setSize(this.size);
         terrainQuadGrid.setPatchSize(this.patchSize);
         terrainQuadGrid.setQuadSize(this.quadSize);
+        addControl(new UpdateControl());
     }
 
     public TerrainGrid(String name, int patchSize, int maxVisibleSize, Vector3f scale, TerrainGridTileLoader terrainQuadGrid) {
@@ -225,6 +226,7 @@ public TerrainGrid(String name, int patchSize, int maxVisibleSize, Vector3f scal
         initData();
         this.heightMapGrid = heightMapGrid;
         heightMapGrid.setSize(this.quadSize);
+        addControl(new UpdateControl());
     }
 
     public TerrainGrid(String name, int patchSize, int maxVisibleSize, Vector3f scale, HeightMapGrid heightMapGrid) {
@@ -260,7 +262,6 @@ private void initData() {
             new Vector3f(-1, 0, 1), new Vector3f(0, 0, 1), new Vector3f(1, 0, 1), new Vector3f(2, 0, 1),
             new Vector3f(-1, 0, 2), new Vector3f(0, 0, 2), new Vector3f(1, 0, 2), new Vector3f(2, 0, 2)};
 
-        addControl(new UpdateControl());
     }
 
     public void initialize(Vector3f location) {

File: engine/src/test/jme3test/terrain/TerrainFractalGridTest.java
Patch:
@@ -185,9 +185,6 @@ public void tileAttached(Vector3f cell, TerrainQuad quad) {
 //                        Logger.getLogger(TerrainFractalGridTest.class.getName()).log(Level.SEVERE, null, ex);
 //                    }
                     //workaround for bugged test j3o's
-                    while(quad.getControl(RigidBodyControl.class)!=null){
-                        quad.removeControl(RigidBodyControl.class);
-                    }
                     quad.addControl(new RigidBodyControl(new HeightfieldCollisionShape(quad.getHeightMap(), terrain.getLocalScale()), 0));
                     bulletAppState.getPhysicsSpace().add(quad);
                 }

File: engine/src/test/jme3test/terrain/TerrainQuadGridTest.java
Patch:
@@ -144,6 +144,9 @@ public Material tileLoaded(Material material, Vector3f cell) {
                 }
 
                 public void tileAttached(Vector3f cell, TerrainQuad quad) {
+                    while(quad.getControl(RigidBodyControl.class)!=null){
+                        quad.removeControl(RigidBodyControl.class);
+                    }
                     quad.addControl(new RigidBodyControl(new HeightfieldCollisionShape(quad.getHeightMap(), terrain.getLocalScale()), 0));
                     bulletAppState.getPhysicsSpace().add(quad);
                 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeTerrainGrid.java
Patch:
@@ -85,7 +85,7 @@ protected Sheet createSheet() {
             return sheet;
         }
 
-        createFields(obj.getClass(), set, obj);
+//        createFields(obj.getClass(), set, obj);
 
         sheet.put(set);
         return sheet;

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeTerrainQuad.java
Patch:
@@ -80,7 +80,8 @@ protected Sheet createSheet() {
             return sheet;
         }
 
-        createFields(obj.getClass(), set, obj);
+        set.put(makeProperty(obj, int.class, "getMaxLod", "Max Lod"));
+        set.put(makeProperty(obj, short.class, "getQuadrant", "setQuadrant", "Quadrant"));
 
         sheet.put(set);
         return sheet;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -451,10 +451,10 @@ public void read(JmeImporter im) throws IOException {
         offset = (Vector2f) c.readSavable("offset", null);
         offsetAmount = c.readFloat("offsetAmount", 0);
         terrainQuadGrid = (TerrainQuadGrid) c.readSavable("terrainQuadGrid", null);
+        initData();
         terrainQuadGrid.setSize(this.size);
         terrainQuadGrid.setPatchSize(this.patchSize);
         terrainQuadGrid.setQuadSize(this.quadSize);
-        initData();
     }
 
     @Override

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -147,7 +147,7 @@ public void run() {
                             q.setMaterial(material.clone());
                             log.log(Level.FINE, "Loaded TerrainQuad {0} from HeightMapGrid", q.getName());
                         } else if (terrainQuadGrid != null) {
-                            q = terrainQuadGrid.getTerrainQuadAt(location);
+                            q = terrainQuadGrid.getTerrainQuadAt(temp);
                             q.setMaterial(material);
                             log.log(Level.FINE, "Loaded TerrainQuad {0} from TerrainQuadGrid", q.getName());
                         }

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -105,6 +105,7 @@ public void run() {
 
                             public Object call() throws Exception {
                                 attachQuadAt(newQuad, quadrant, temp);
+                                newQuad.resetCachedNeighbours();
                                 return null;
                             }
                         });
@@ -255,7 +256,6 @@ protected void attachQuadAt(TerrainQuad q, int quadrant, Vector3f cam) {
         for (TerrainGridListener l : listeners.values()) {
             l.tileAttached(cam, q);
         }
-        System.err.println("attachQuadAt "+quadrant+", children: "+this.getChildren().size());
         updateModelBound();
     }
 

File: engine/src/networking/com/jme3/network/kernel/tcp/SelectorKernel.java
Patch:
@@ -265,6 +265,9 @@ public void close() throws IOException, InterruptedException
             // Make sure the channel is closed
             serverChannel.close();
 
+            // Force the selector to stop blocking
+            wakeupSelector();
+
             // And wait for it
             join();
         }

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/TerrainEditorTopComponent.java
Patch:
@@ -1102,8 +1102,8 @@ public void sceneClosed(SceneRequest request) {
         if (request.equals(currentRequest)) {
             setActivatedNodes(new org.openide.nodes.Node[]{});
             SceneApplication.getApplication().removeSceneListener(this);
-            setSceneInfo(null, false);
             currentRequest = null;
+            setSceneInfo(null, false);
             cleanupControllers();
         }
     }

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/browser/OnlineBrowser.java
Patch:
@@ -71,7 +71,7 @@ public void run() {
                     }
                     handle.finish();
                     Confirmation msg = new NotifyDescriptor.Confirmation(
-                            "Successfully downloades asset pack!\n" + name,
+                            "Successfully downloaded asset pack!\n" + name,
                             NotifyDescriptor.OK_CANCEL_OPTION,
                             NotifyDescriptor.INFORMATION_MESSAGE);
                     DialogDisplayer.getDefault().notifyLater(msg);

File: engine/src/core/com/jme3/light/AmbientLight.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * An ambient light adds a constant color to the scene.
  * <p>
- * Ambient lights are uneffected by the surface normal, and are constant
+ * Ambient lights are unaffected by the surface normal, and are constant
  * regardless of the model's location. The material's ambient color is
  * multiplied by the ambient light color to get the final ambient color of
  * an object.

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerTopComponent.java
Patch:
@@ -920,7 +920,7 @@ public void classPathChanged(final ProjectAssetManager manager) {
                         Confirmation msg = new NotifyDescriptor.Confirmation(
                                 "Classes have been changed, reload scene?",
                                 NotifyDescriptor.OK_CANCEL_OPTION,
-                                NotifyDescriptor.ERROR_MESSAGE);
+                                NotifyDescriptor.INFORMATION_MESSAGE);
                         Object result = DialogDisplayer.getDefault().notify(msg);
                         if (!NotifyDescriptor.OK_OPTION.equals(result)) {
                             return;

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/tools/SelectTool.java
Patch:
@@ -4,9 +4,9 @@
  */
 package com.jme3.gde.scenecomposer.tools;
 
-import com.jme3.gde.core.scene.SceneApplication;
 import com.jme3.gde.core.sceneexplorer.SceneExplorerTopComponent;
 import com.jme3.gde.core.sceneexplorer.nodes.JmeNode;
+import com.jme3.gde.core.sceneviewer.SceneViewerTopComponent;
 import com.jme3.gde.scenecomposer.SceneEditTool;
 import com.jme3.math.Vector2f;
 import com.jme3.math.Vector3f;
@@ -33,11 +33,11 @@ public void actionPrimary(Vector2f screenCoord, boolean pressed, final JmeNode r
                 public void run() {
                     if (result != null) {
 //                        System.out.println(rootNode.getChild(result).getName());
-//                        SceneExplorerTopComponent.findInstance().setActivatedNodes(new org.openide.nodes.Node[]{rootNode.getChild(result)});
+                        SceneViewerTopComponent.findInstance().setActivatedNodes(new org.openide.nodes.Node[]{rootNode.getChild(result)});
                         SceneExplorerTopComponent.findInstance().setSelectedNode(rootNode.getChild(result));
 
                     } else {
-                       // SceneExplorerTopComponent.findInstance().setActivatedNodes(new org.openide.nodes.Node[]{rootNode});
+                        SceneViewerTopComponent.findInstance().setActivatedNodes(new org.openide.nodes.Node[]{rootNode});
                         SceneExplorerTopComponent.findInstance().setSelectedNode(rootNode);
                     }
                 }

File: sdk/jme3-vehicle-creator/src/com/jme3/gde/vehiclecreator/VehicleCreatorTopComponent.java
Patch:
@@ -893,7 +893,7 @@ public void sceneClosed(SceneRequest request) {
 
                 public Void call() throws Exception {
                     controller.cleanupApplication();
-//                    current.getRootNode().removeLight(dirLight);
+                    current.getRootNode().getParent().removeLight(dirLight);
                     return null;
                 }
             });
@@ -910,7 +910,7 @@ public void sceneOpened(final SceneRequest request) {
 
                 public Void call() throws Exception {
                     controller.prepareApplication();
-//                    request.getRootNode().addLight(dirLight);
+                    request.getRootNode().getParent().addLight(dirLight);
                     return null;
                 }
             });

File: sdk/jme3-vehicle-creator/src/com/jme3/gde/vehiclecreator/VehicleEditorController.java
Patch:
@@ -99,6 +99,7 @@ public void resultChanged(LookupEvent ev) {
     }
 
     public void prepareApplication() {
+        SceneApplication.getApplication().getStateManager().attach(getBulletState());
         SceneApplication.getApplication().getInputManager().addMapping("VehicleEditor_Left", new KeyTrigger(KeyInput.KEY_A));
         SceneApplication.getApplication().getInputManager().addMapping("VehicleEditor_Right", new KeyTrigger(KeyInput.KEY_D));
         SceneApplication.getApplication().getInputManager().addMapping("VehicleEditor_Up", new KeyTrigger(KeyInput.KEY_W));
@@ -116,6 +117,7 @@ public void cleanupApplication() {
         SceneApplication.getApplication().getInputManager().removeListener(this);
         cameraController.disable();
         cameraController = null;
+        SceneApplication.getApplication().getStateManager().detach(getBulletState());
     }
 
     public JmeSpatial getJmeRootNode() {

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/NewCustomControlWizardAction.java
Patch:
@@ -117,7 +117,7 @@ protected Control doCreateControl(Spatial spatial, Object configuration) {
                 DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message("Error instatiating class!"));
             }
         } else {
-            DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message("Cannot find class:\n" + className+ "\nMake sure the name is correct, also make sure\nyour projects classes are compiled, best enable\n 'Save on Compile' in the project preferences under 'build'"));
+            DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message("Cannot find class: " + className+ "\nMake sure the name is correct and the project is compiled,\nbest enable 'Save on Compile' in the project preferences."));
         }
         return null;
     }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/NewCustomControlWizardAction.java
Patch:
@@ -66,7 +66,7 @@ protected Object showWizard(Node node) {
         WizardDescriptor wizardDescriptor = new WizardDescriptor(getPanels());
         // {0} will be replaced by WizardDesriptor.Panel.getComponent().getName()
         wizardDescriptor.setTitleFormat(new MessageFormat("{0}"));
-        wizardDescriptor.setTitle("Your wizard dialog title here");
+        wizardDescriptor.setTitle("Create Custom Control");
         wizardDescriptor.putProperty("asset_manager", node.getLookup().lookup(ProjectAssetManager.class));
         Dialog dialog = DialogDisplayer.getDefault().createDialog(wizardDescriptor);
         dialog.setVisible(true);

File: sdk/jme3-core/src/com/jme3/gde/core/assets/ProjectAssetManager.java
Patch:
@@ -129,9 +129,9 @@ public void updateClassLoader() {
                     try {
                         FileObject[] roots = path.getRoots();
                         for (FileObject fileObject : roots) {
+                            urls.add(fileObject.getURL());
                             if(fileObject.getURL().toExternalForm().startsWith("jar")){
                                 Logger.getLogger(this.getClass().getName()).log(Level.INFO, "Add classpath locator:{0}", fileObject.getURL());
-                                urls.add(fileObject.getURL());
                                 classPathItems.add(fileObject);
                                 registerLocator(fileObject.getURL().toExternalForm(),
                                         "com.jme3.asset.plugins.UrlLocator");

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ModelImporterVisualPanel1.java
Patch:
@@ -151,6 +151,9 @@ public void assetRequested(AssetKey ak) {
     public void assetLoaded(AssetKey ak) {
     }
 
+    public void assetDependencyNotFound(AssetKey ak, AssetKey ak1) {
+    }
+            
     public void cleanup() {
         offPanel.stopPreview();
     }

File: engine/src/core/com/jme3/animation/AnimControl.java
Patch:
@@ -120,6 +120,7 @@ public Control cloneForSpatial(Spatial spatial) {
             AnimControl clone = (AnimControl) super.clone();
             clone.spatial = spatial;
             clone.channels = new ArrayList<AnimChannel>();
+            clone.listeners = new ArrayList<AnimEventListener>();
             
             if (skeleton != null){
                 clone.skeleton = new Skeleton(skeleton);

File: engine/src/core/com/jme3/app/Application.java
Patch:
@@ -59,6 +59,7 @@
 import java.util.logging.Logger;
 import com.jme3.system.JmeContext.Type;
 import com.jme3.system.JmeSystem;
+import com.jme3.system.NanoTimer;
 import com.jme3.system.SystemListener;
 import com.jme3.system.Timer;
 
@@ -87,7 +88,7 @@ public class Application implements SystemListener {
 
     protected JmeContext context;
     protected AppSettings settings;
-    protected Timer timer;
+    protected Timer timer = new NanoTimer();
     protected Camera cam;
     protected Listener listener;
 

File: sdk/jme3-model-importer/src/com/jme3/gde/modelimporter/ModelImporterVisualPanel1.java
Patch:
@@ -306,11 +306,11 @@ private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRS
         if (loading.get()) {
             return;
         }
-        loading.set(true);
         FileChooserBuilder builder = new FileChooserBuilder(this.getClass());
         builder.setTitle("Select Model File");
         final File file = builder.showOpenDialog();
         if (file != null) {
+            loading.set(true);
             jTextField1.setText(file.getAbsolutePath());
             new Thread(new Runnable() {
 

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -327,7 +327,7 @@ protected void loadMtlLib(String name) throws IOException{
         try {
             matList = (MaterialList) assetManager.loadAsset(key.getFolder() + name);
         } catch (AssetNotFoundException ex){
-            throw new AssetNotFoundException("Cannot find material " + name + " for model " + key.getName());
+            throw new AssetNotFoundException("Cannot load or find material " + name + " for model " + key.getName(), ex);
         }
 
         if (matList != null){

File: engine/src/core/com/jme3/asset/AssetNotFoundException.java
Patch:
@@ -11,4 +11,7 @@ public class AssetNotFoundException extends RuntimeException {
     public AssetNotFoundException(String message){
         super(message);
     }
+    public AssetNotFoundException(String message, Exception ex){
+        super(message, ex);
+    }
 }

File: engine/src/core/com/jme3/audio/AudioData.java
Patch:
@@ -37,8 +37,8 @@
 /**
  * <code>AudioData</code> is an abstract representation
  * of audio data. There are two ways to handle audio data, short audio files
- * are to be stored entirely in memory, while long audio files (music) is
- * streamed from the hard drive as it is played.
+ * are to be stored entirely in memory, while long audio files (music) are
+ * streamed from the hard drive as they are played.
  *
  * @author Kirill Vainer
  */

File: engine/src/test/jme3test/terrain/TerrainGridTest.java
Patch:
@@ -103,7 +103,7 @@ public String getName(int x, int y) {
 
         this.terrain.setMaterial(this.mat_terrain);
         this.terrain.setLocalTranslation(0, 0, 0);
-        this.terrain.setLocalScale(2f, 1f, 2f);
+        this.terrain.setLocalScale(1f, 1f, 1f);
         this.rootNode.attachChild(this.terrain);
 
         TerrainLodControl control = new TerrainLodControl(this.terrain, getCamera());

File: engine/src/core/com/jme3/util/TempVars.java
Patch:
@@ -157,6 +157,8 @@ public void release() {
      */
     public final float[] skinPositions = new float[512 * 3];
     public final float[] skinNormals = new float[512 * 3];
+     //tangent buffer as 4 components by elements
+    public final float[] skinTangents = new float[512 * 4];
     /**
      * Fetching triangle from mesh
      */

File: engine/src/blender/com/jme3/scene/plugins/blender/objects/ObjectHelper.java
Patch:
@@ -312,7 +312,7 @@ public Transform getTransformation(Structure objectStructure, BlenderContext ble
 			
 			y=scale.y;
 			scale.y = scale.z;
-			scale.z = -y;
+			scale.z = y;
 		}
 		
 		//create the result

File: engine/src/core/com/jme3/scene/LightNode.java
Patch:
@@ -79,15 +79,15 @@ public void setControlDir(ControlDirection controlDir) {
         lightControl.setControlDir(controlDir);
     }
 
-    public void setCamera(Light light) {
+    public void setLight(Light light) {
         lightControl.setLight(light);
     }
 
     public ControlDirection getControlDir() {
         return lightControl.getControlDir();
     }
 
-    public Light getCamera() {
+    public Light getLight() {
         return lightControl.getLight();
     }
 }

File: engine/src/core/com/jme3/math/LineSegment.java
Patch:
@@ -89,7 +89,7 @@ public LineSegment(Vector3f origin, Vector3f direction, float extent) {
     public LineSegment(Vector3f start, Vector3f end) {
         this.origin = new Vector3f(0.5f * (start.x + end.x), 0.5f * (start.y + end.y), 0.5f * (start.z + end.z));
         this.direction = end.subtract(start);
-        this.extent = direction.length();
+        this.extent = direction.length() * 0.5f;
         direction.normalizeLocal();
     }
 

File: engine/src/core/com/jme3/cinematic/events/MotionTrack.java
Patch:
@@ -160,7 +160,7 @@ public void update(float tpf) {
         if (isControl) {
 
             if (playState == PlayState.Playing) {
-                time = (elapsedTimePause + timer.getTimeInSeconds()) * speed;
+                time = (elapsedTimePause + timer.getTimeInSeconds() - start) * speed;
                 onUpdate(tpf);
                 if (time >= initialDuration && loopMode == loopMode.DontLoop) {
                     stop();

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -210,7 +210,9 @@ protected void setup(AssetInfo assetInfo) throws BlenderFileException {
 			helper = blenderContext.getHelper(CurvesHelper.class);
 			helper.setyIsUpAxis(true);
 			helper = blenderContext.getHelper(ArmatureHelper.class);
-			helper.setyIsUpAxis(true);			
+			helper.setyIsUpAxis(true);
+			helper = blenderContext.getHelper(MeshHelper.class);
+			helper.setyIsUpAxis(true);
 		}
 		MaterialHelper materialHelper = blenderContext.getHelper(MaterialHelper.class);
 		materialHelper.setFaceCullMode(blenderKey.getFaceCullMode());

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -615,17 +615,14 @@ private void addRigidBody(PhysicsRigidBody node) {
         Logger.getLogger(PhysicsSpace.class.getName()).log(Level.INFO, "Adding RigidBody {0} to physics space.", node.getObjectId());
         if (node instanceof PhysicsVehicle) {
             Logger.getLogger(PhysicsSpace.class.getName()).log(Level.INFO, "Adding vehicle constraint {0} to physics space.", Long.toHexString(((PhysicsVehicle) node).getVehicleId()));
-            ((PhysicsVehicle) node).createVehicle(this);
             addVehicle(physicsSpaceId, ((PhysicsVehicle) node).getVehicleId());
-//            dynamicsWorld.addVehicle(((PhysicsVehicle) node).getVehicleId());
         }
     }
 
     private void removeRigidBody(PhysicsRigidBody node) {
         if (node instanceof PhysicsVehicle) {
             Logger.getLogger(PhysicsSpace.class.getName()).log(Level.INFO, "Removing vehicle constraint {0} from physics space.", Long.toHexString(((PhysicsVehicle) node).getVehicleId()));
             removeVehicle(physicsSpaceId, ((PhysicsVehicle) node).getVehicleId());
-//            dynamicsWorld.removeVehicle(((PhysicsVehicle) node).getVehicleId());
         }
         Logger.getLogger(PhysicsSpace.class.getName()).log(Level.INFO, "Removing RigidBody {0} from physics space.", Long.toHexString(node.getObjectId()));
         physicsNodes.remove(node.getObjectId());

File: engine/src/bullet/com/jme3/bullet/objects/VehicleWheel.java
Patch:
@@ -418,7 +418,7 @@ public void setApplyLocal(boolean applyLocal) {
     protected void finalize() throws Throwable {
         super.finalize();
         Logger.getLogger(this.getClass().getName()).log(Level.INFO, "Finalizing Wheel {0}", Long.toHexString(wheelId));
-        finalizeNative(wheelId);
+//        finalizeNative(wheelId);
     }
 
     private native void finalizeNative(long wheelId);

File: engine/src/core/com/jme3/font/Letters.java
Patch:
@@ -77,7 +77,7 @@ void update() {
         int lineCount = 1;
         BitmapCharacter ellipsis = font.getCharSet().getCharacter(block.getEllipsisChar());
         float ellipsisWidth = ellipsis!=null? ellipsis.getWidth()*getScale(): 0;
-        
+ 
         while (!l.isTail()) {
             if (l.isInvalid()) {
                 l.update(block);

File: engine/src/desktop-fx/com/jme3/post/filters/BloomFilter.java
Patch:
@@ -111,8 +111,8 @@ public BloomFilter(GlowMode glowMode) {
 
     @Override
     protected void initFilter(AssetManager manager, RenderManager renderManager, ViewPort vp, int w, int h) {
-        screenWidth = (int) (w / downSamplingFactor);
-        screenHeight = (int) (h / downSamplingFactor);
+        screenWidth = (int) Math.max(1, (w / downSamplingFactor));
+        screenHeight = (int) Math.max(1, (h / downSamplingFactor));
         //    System.out.println(screenWidth + " " + screenHeight);
         if (glowMode != GlowMode.Scene) {
             preGlowPass = new Pass();

File: engine/src/niftygui/com/jme3/niftygui/RenderImageJme.java
Patch:
@@ -54,8 +54,8 @@ public RenderImageJme(String filename, boolean linear, NiftyJmeDisplay display){
         key.setGenerateMips(false);
         
         texture = (Texture2D) display.getAssetManager().loadTexture(key);
-        texture.setMagFilter(MagFilter.Bilinear);
-        texture.setMinFilter(MinFilter.BilinearNoMipMaps);
+        texture.setMagFilter(linear ? MagFilter.Bilinear : MagFilter.Nearest);
+        texture.setMinFilter(linear ? MinFilter.BilinearNoMipMaps : MinFilter.NearestNoMipMaps);
         image = texture.getImage();
 
         width = image.getWidth();

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshHelper.java
Patch:
@@ -128,6 +128,8 @@ public List<Geometry> toMesh(Structure structure, BlenderContext blenderContext)
             if (mFaces == null || mFaces.size() == 0) {
                 return new ArrayList<Geometry>(0);
             }
+        } else{
+        	mFaces = new ArrayList<Structure>(0);
         }
 
         Pointer pMTFace = (Pointer) structure.getFieldValue("mtface");

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -72,9 +72,9 @@
 /**
  * <code>Material</code> describes the rendering style for a given
  * {@link Geometry}.
- * <p>A material is essentially a list of {
- * @link MatParam parameters}, those parameters map to uniforms which are
- * defined in a shader.  Setting the parameters can modify the behavior of a
+ * <p>A material is essentially a list of {@link MatParam parameters},
+ * those parameters map to uniforms which are defined in a shader.
+ * Setting the parameters can modify the behavior of a
  * shader.
  * <p/>
  * @author Kirill Vainer

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainLodControl.java
Patch:
@@ -78,7 +78,7 @@ public TerrainLodControl(Terrain terrain, Camera camera) {
         cams.add(camera);
         this.terrain = terrain;
         this.cameras = cams;
-        lodCalculator = new DistanceLodCalculator(); // a default calculator
+        lodCalculator = new DistanceLodCalculator(65, 2.7f); // a default calculator
     }
     
     /**

File: engine/src/test/jme3test/light/TestSpotLightTerrain.java
Patch:
@@ -53,6 +53,7 @@
 import com.jme3.terrain.heightmap.AbstractHeightMap;
 import com.jme3.terrain.heightmap.ImageBasedHeightMap;
 import com.jme3.terrain.geomipmap.TerrainQuad;
+import com.jme3.terrain.geomipmap.lodcalc.DistanceLodCalculator;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;
 import com.jme3.util.SkyFactory;
@@ -194,6 +195,7 @@ private void makeTerrain() {
 
         terrain = new TerrainQuad("terrain", 65, 513, heightmap.getHeightMap());//, new LodPerspectiveCalculatorFactory(getCamera(), 4)); // add this in to see it use entropy for LOD calculations
         TerrainLodControl control = new TerrainLodControl(terrain, getCamera());
+        control.setLodCalculator( new DistanceLodCalculator(65, 2.7f) );
         terrain.addControl(control);
         terrain.setMaterial(matTerrain);
         terrain.setModelBound(new BoundingBox());

File: engine/src/test/jme3test/bullet/TestWalkingChar.java
Patch:
@@ -186,7 +186,7 @@ private void createWall() {
 
     private void addBrick(Vector3f ori) {
         Geometry reBoxg = new Geometry("brick", brick);
-        reBoxg.setMaterial(matRock);
+        reBoxg.setMaterial(matBullet);
         reBoxg.setLocalTranslation(ori);
         reBoxg.addControl(new RigidBodyControl(1.5f));
         reBoxg.setShadowMode(ShadowMode.CastAndReceive);
@@ -397,7 +397,7 @@ private void bulletControl() {
         Geometry bulletg = new Geometry("bullet", bullet);
         bulletg.setMaterial(matBullet);
         bulletg.setShadowMode(ShadowMode.CastAndReceive);
-        bulletg.setLocalTranslation(character.getPhysicsLocation().add(cam.getDirection().mult(2)));
+        bulletg.setLocalTranslation(character.getPhysicsLocation().add(cam.getDirection().mult(5)));
         RigidBodyControl bulletControl = new BombControl(bulletCollisionShape, 1);
         bulletControl.setCcdMotionThreshold(0.1f);
         bulletControl.setLinearVelocity(cam.getDirection().mult(80));

File: engine/src/core/com/jme3/scene/shape/Box.java
Patch:
@@ -110,7 +110,7 @@ public Box(Vector3f center, float x, float y, float z) {
      * Constructor instantiates a new <code>Box</code> object.
      * <p>
      * The minimum and maximum point are provided, these two points define the
-     * shape and size of the box but not it’s orientation or position. You should
+     * shape and size of the box but not it's orientation or position. You should
      * use the {@link #setLocalTranslation()} and {@link #setLocalRotation()}
      * methods to define those properties.
      * 
@@ -132,7 +132,7 @@ public Box(){
     /**
      * Creates a clone of this box.
      * <p>
-     * The cloned box will have ‘_clone’ appended to it’s name, but all other
+     * The cloned box will have '_clone' appended to it's name, but all other
      * properties will be the same as this box.
      */
     @Override

File: engine/src/core/com/jme3/scene/shape/Box.java
Patch:
@@ -80,7 +80,6 @@ public class Box extends AbstractBox {
      * the given amount in <em>each</em> direction. So, for example, a box
      * with extent of 0.5 would be the unit cube.
      *
-     * @param name the name of the box.
      * @param x the size of the box along the x axis, in both directions.
      * @param y the size of the box along the y axis, in both directions.
      * @param z the size of the box along the z axis, in both directions.
@@ -97,7 +96,6 @@ public Box(float x, float y, float z) {
      * the given amount in <em>each</em> direction. So, for example, a box
      * with extent of 0.5 would be the unit cube.
      * 
-     * @param name the name of the box.
      * @param center the center of the box.
      * @param x the size of the box along the x axis, in both directions.
      * @param y the size of the box along the y axis, in both directions.
@@ -116,7 +114,6 @@ public Box(Vector3f center, float x, float y, float z) {
      * use the {@link #setLocalTranslation()} and {@link #setLocalRotation()}
      * methods to define those properties.
      * 
-     * @param name the name of the box.
      * @param min the minimum point that defines the box.
      * @param max the maximum point that defines the box.
      */

File: engine/src/desktop/com/jme3/asset/plugins/UrlLocator.java
Patch:
@@ -43,10 +43,10 @@
 import java.util.logging.Logger;
 
 /**
- * <code>UrlLocator</code> is a locator that combines a root url
- * and the given path in the AssetKey to construct a new url
+ * <code>UrlLocator</code> is a locator that combines a root URL
+ * and the given path in the AssetKey to construct a new URL
  * that allows locating the asset.
- * @author Kiirill Vainer
+ * @author Kirill Vainer
  */
 public class UrlLocator implements AssetLocator {
 

File: engine/src/core/com/jme3/cinematic/events/AnimationTrack.java
Patch:
@@ -85,6 +85,7 @@ public AnimationTrack(Spatial model, String animationName, float initialDuration
 
     @Override
     public void initEvent(Application app, Cinematic cinematic) {
+        super.initEvent(app, cinematic);
         if (channel == null) {
             Object s = cinematic.getEventData("modelChannels", modelName);
             if (s != null && s instanceof AnimChannel) {
@@ -107,6 +108,7 @@ public void onPlay() {
         channel.getControl().setEnabled(true);
         if (playState == PlayState.Stopped) {
             channel.setAnim(animationName);
+            channel.setSpeed(speed);
         }
     }
 
@@ -117,6 +119,7 @@ public void onUpdate(float tpf) {
     @Override
     public void onStop() {
         channel.getControl().setEnabled(false);
+        channel.setTime(0);
     }
 
     @Override

File: engine/src/core/com/jme3/cinematic/events/GuiTrack.java
Patch:
@@ -75,12 +75,13 @@ public GuiTrack(String screen, float initialDuration, LoopMode loopMode) {
 
     @Override
     public void initEvent(Application app, Cinematic cinematic) {
+        super.initEvent(app, cinematic);
         nifty = cinematic.getNifty();
     }
 
     @Override
     public void onPlay() {
-        nifty.gotoScreen(screen);
+        nifty.gotoScreen(screen);        
     }
 
     @Override

File: engine/src/core/com/jme3/cinematic/events/PositionTrack.java
Patch:
@@ -78,7 +78,7 @@ public void onPlay() {
         if (playState != playState.Paused) {
             startPosition = spatial.getWorldTranslation().clone();
         }
-        if (duration == 0 && spatial != null) {
+        if (initialDuration == 0 && spatial != null) {
 
             spatial.setLocalTranslation(endPosition);
         }
@@ -87,7 +87,7 @@ public void onPlay() {
     @Override
     public void onUpdate(float tpf) {
         if (spatial != null) {
-            value += Math.min(tpf * speed / duration, 1.0f);
+            value = Math.min(time / initialDuration, 1.0f);
             Vector3f pos = FastMath.interpolateLinear(value, startPosition, endPosition);
             spatial.setLocalTranslation(pos);
         }

File: engine/src/core/com/jme3/cinematic/events/RotationTrack.java
Patch:
@@ -78,7 +78,7 @@ public void onPlay() {
         if (playState != playState.Paused) {
             startRotation.set(spatial.getWorldRotation());
         }
-        if (duration == 0 && spatial != null) {
+        if (initialDuration == 0 && spatial != null) {
             spatial.setLocalRotation(endRotation);
             stop();
         }
@@ -87,7 +87,7 @@ public void onPlay() {
     @Override
     public void onUpdate(float tpf) {
         if (spatial != null) {
-            value += Math.min(tpf * speed / duration, 1.0f);
+            value = Math.min(time / initialDuration, 1.0f);         
             TempVars vars = TempVars.get();
             Quaternion q = vars.quat1;
             q.set(startRotation).slerp(endRotation, value);

File: engine/src/core/com/jme3/cinematic/events/ScaleTrack.java
Patch:
@@ -78,7 +78,7 @@ public void onPlay() {
         if (playState != playState.Paused) {
             startScale = spatial.getWorldScale().clone();
         }
-        if (duration == 0 && spatial != null) {
+        if (initialDuration == 0 && spatial != null) {
             spatial.setLocalScale(endScale);
             stop();
         }
@@ -87,7 +87,7 @@ public void onPlay() {
     @Override
     public void onUpdate(float tpf) {
         if (spatial != null) {
-            value += Math.min(tpf * speed / duration, 1.0f);
+            value = Math.min(time / initialDuration, 1.0f);
             spatial.setLocalScale(FastMath.interpolateLinear(value, startScale, endScale));
         }
     }

File: engine/src/core/com/jme3/cinematic/events/SoundTrack.java
Patch:
@@ -107,7 +107,8 @@ public SoundTrack() {
     }
 
     @Override
-    public void initEvent(Application app, Cinematic cinematic) {        
+    public void initEvent(Application app, Cinematic cinematic) {    
+        super.initEvent(app, cinematic);
         audioNode = new AudioNode(app.getAssetManager(), path, stream);
         setLoopMode(loopMode);
 

File: engine/src/test/jme3test/animation/SubtitleTrack.java
Patch:
@@ -23,8 +23,7 @@ public SubtitleTrack(String screen,float initialDuration, String text) {
     @Override
     public void onPlay() {
         super.onPlay();
-		//REMY FIX THIS
-        //nifty.getScreen(screen).findElementByName("text").getRenderer(TextRenderer.class).changeText(text);
+        nifty.getScreen(screen).findElementByName("text").getRenderer(TextRenderer.class).setText(text);
     }
 
 

File: sdk/jme3-core/src/com/jme3/gde/core/Installer.java
Patch:
@@ -65,7 +65,6 @@ public void restored() {
         //select project folder
         String projectDir = NbPreferences.forModule(Installer.class).get("projects_path", null);
         if (projectDir == null) {
-            //set extraction dir for platform natives
             javax.swing.JFileChooser fr = new javax.swing.JFileChooser();
             javax.swing.filechooser.FileSystemView fw = fr.getFileSystemView();
             projectDir = fw.getDefaultDirectory().getAbsolutePath();

File: engine/src/tools/jme3tools/savegame/SaveGame.java
Patch:
@@ -78,12 +78,14 @@ public static Savable loadGame(String gamePath, String dataName, AssetManager ma
             sav = imp.load(is);
         } catch (IOException ex) {
             Logger.getLogger(SaveGame.class.getName()).log(Level.SEVERE, "Error loading data: {0}", ex);
+            ex.printStackTrace();
         } finally {
             if (is != null) {
                 try {
                     is.close();
                 } catch (IOException ex) {
                     Logger.getLogger(SaveGame.class.getName()).log(Level.SEVERE, "Error loading data: {0}", ex);
+                    ex.printStackTrace();
                 }
             }
         }

File: sdk/jme3-core/src/com/jme3/gde/core/Installer.java
Patch:
@@ -64,6 +64,9 @@ public void restored() {
 //            myProjectsDir.mkdirs();
 //        }
 
+        //Fixes online urls in panels
+        System.setProperty("http.agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");
+
         //select project folder
         String projectDir = NbPreferences.forModule(Installer.class).get("projects_path", null);
         if (projectDir == null) {

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ObjectAnimationModifier.java
Patch:
@@ -9,6 +9,7 @@
 import com.jme3.animation.AnimControl;
 import com.jme3.animation.Animation;
 import com.jme3.animation.BoneTrack;
+import com.jme3.animation.SpatialTrack;
 import com.jme3.animation.Track;
 import com.jme3.scene.Node;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -83,10 +84,10 @@ public ObjectAnimationModifier(Structure objectStructure, BlenderContext blender
 			int fps = blenderContext.getBlenderKey().getFps();
 
 			// calculating track for the only bone in this skeleton
-			BoneTrack track = (BoneTrack) ipo.calculateTrack(-1, 0, ipo.getLastFrame(), fps);
+			SpatialTrack track = (SpatialTrack) ipo.calculateTrack(-1, 0, ipo.getLastFrame(), fps);
 			
 			Animation animation = new Animation(objectAnimationName, ipo.getLastFrame() / fps);
-			animation.setTracks(new BoneTrack[] { track });
+			animation.setTracks(new SpatialTrack[] { track });
 			ArrayList<Animation> animations = new ArrayList<Animation>(1);
 			animations.add(animation);
 

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintDistLimit.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -40,7 +41,7 @@ public ConstraintDistLimit(Structure constraintStructure, Long boneOMA,
 	@Override
 	public void affectAnimation(Animation animation, int targetIndex) {
 		Vector3f targetLocation = this.getTargetLocation();
-		Track<?> boneTrack = this.getTrack(animation, targetIndex);
+		BoneTrack boneTrack = (BoneTrack) this.getTrack(animation, targetIndex);
 		if (boneTrack != null) {
 			//TODO: target vertex group !!!
 			float dist = ((Number) data.getFieldValue("dist")).floatValue();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLocLike.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -45,7 +46,7 @@ public ConstraintLocLike(Structure constraintStructure, Long boneOMA,
 
 	@Override
 	public void affectAnimation(Animation animation, int targetIndex) {
-		Track<?> track = this.getTrack(animation, targetIndex);
+		BoneTrack track = (BoneTrack) this.getTrack(animation, targetIndex);
 		if (track != null) {
 			Vector3f targetLocation = this.getTargetLocation();
 			int flag = ((Number) data.getFieldValue("flag")).intValue();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLocLimit.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -42,7 +43,7 @@ public ConstraintLocLimit(Structure constraintStructure, Long boneOMA,
 
 	@Override
 	public void affectAnimation(Animation animation, int targetIndex) {
-		Track<?> track = this.getTrack(animation, targetIndex);
+		BoneTrack track = (BoneTrack) this.getTrack(animation, targetIndex);
 		if (track != null) {
 			int flag = ((Number) data.getFieldValue("flag")).intValue();
 			Vector3f[] translations = track.getTranslations();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRotLike.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.Quaternion;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -43,7 +44,7 @@ public ConstraintRotLike(Structure constraintStructure, Long boneOMA,
 
 	@Override
 	public void affectAnimation(Animation animation, int targetIndex) {
-		Track<?> track = this.getTrack(animation, targetIndex);
+		BoneTrack track = (BoneTrack) this.getTrack(animation, targetIndex);
 		if (track != null) {
 			Quaternion targetRotation = this.getTargetRotation();
 			int flag = ((Number) data.getFieldValue("flag")).intValue();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRotLimit.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.FastMath;
 import com.jme3.math.Quaternion;
@@ -40,7 +41,7 @@ public ConstraintRotLimit(Structure constraintStructure, Long boneOMA,
 
 	@Override
 	public void affectAnimation(Animation animation, int targetIndex) {
-		Track<?> track = this.getTrack(animation, targetIndex);
+		BoneTrack track = (BoneTrack) this.getTrack(animation, targetIndex);
 		if (track != null) {
 			int flag = ((Number) data.getFieldValue("flag")).intValue();
 			Quaternion[] rotations = track.getRotations();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintShrinkWrap.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.logging.Logger;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.Quaternion;
 import com.jme3.math.Vector3f;
@@ -64,7 +65,7 @@ public void affectAnimation(Animation animation, int targetIndex) {
 			}
 			
 			//modifying traces
-			Track<?> track = this.getTrack(animation, targetIndex);
+			BoneTrack track = (BoneTrack) this.getTrack(animation, targetIndex);
 			if (track != null) {
 				Vector3f[] translations = track.getTranslations();
 				Quaternion[] rotations = track.getRotations();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSizeLike.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -41,7 +42,7 @@ public ConstraintSizeLike(Structure constraintStructure, Long boneOMA,
 	@Override
 	public void affectAnimation(Animation animation, int targetIndex) {
 		Vector3f targetScale = this.getTargetLocation();
-		Track<?> track = this.getTrack(animation, targetIndex);
+		BoneTrack track = (BoneTrack) this.getTrack(animation, targetIndex);
 		if (track != null) {
 			int flag = ((Number) data.getFieldValue("flag")).intValue();
 			Vector3f[] scales = track.getScales();

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintSizeLimit.java
Patch:
@@ -1,6 +1,7 @@
 package com.jme3.scene.plugins.blender.constraints;
 
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.math.Vector3f;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -42,7 +43,7 @@ public ConstraintSizeLimit(Structure constraintStructure, Long boneOMA,
 
 	@Override
 	public void affectAnimation(Animation animation, int targetIndex) {
-		Track<?> track = this.getTrack(animation, targetIndex);
+		BoneTrack track = (BoneTrack) this.getTrack(animation, targetIndex);
 		if (track != null) {
 			int flag = ((Number) data.getFieldValue("flag")).intValue();
 			Vector3f[] scales = track.getScales();

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ArmatureModifier.java
Patch:
@@ -12,6 +12,7 @@
 import com.jme3.animation.AnimControl;
 import com.jme3.animation.Animation;
 import com.jme3.animation.Bone;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Skeleton;
 import com.jme3.animation.SkeletonControl;
 import com.jme3.animation.Track;
@@ -123,10 +124,10 @@ public ArmatureModifier(Structure objectStructure, Structure modifierStructure,
 						Structure actionStructure = header.getStructure(blenderContext);
 						String actionName = actionStructure.getName();
 						
-						Track<?>[] tracks = armatureHelper.getTracks(actionStructure, blenderContext);
+						BoneTrack[] tracks = armatureHelper.getTracks(actionStructure, blenderContext);
 						//determining the animation  time
 						float maximumTrackLength = 0;
-						for(Track<?> track : tracks) {
+						for(BoneTrack track : tracks) {
 							float length = track.getLength();
 							if(length > maximumTrackLength) {
 								maximumTrackLength = length;

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ObjectAnimationModifier.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.jme3.animation.AnimControl;
 import com.jme3.animation.Animation;
+import com.jme3.animation.BoneTrack;
 import com.jme3.animation.Track;
 import com.jme3.scene.Node;
 import com.jme3.scene.plugins.blender.BlenderContext;
@@ -82,10 +83,10 @@ public ObjectAnimationModifier(Structure objectStructure, BlenderContext blender
 			int fps = blenderContext.getBlenderKey().getFps();
 
 			// calculating track for the only bone in this skeleton
-			Track<?> track = ipo.calculateTrack(-1, 0, ipo.getLastFrame(), fps);
+			BoneTrack track = (BoneTrack) ipo.calculateTrack(-1, 0, ipo.getLastFrame(), fps);
 			
 			Animation animation = new Animation(objectAnimationName, ipo.getLastFrame() / fps);
-			animation.setTracks(new Track<?>[] { track });
+			animation.setTracks(new BoneTrack[] { track });
 			ArrayList<Animation> animations = new ArrayList<Animation>(1);
 			animations.add(animation);
 

File: engine/src/core/com/jme3/animation/Skeleton.java
Patch:
@@ -54,6 +54,7 @@ public final class Skeleton implements Savable {
 
     private Bone[] rootBones;
     private Bone[] boneList;
+    
     /**
      * Contains the skinning matrices, multiplying it by a vertex effected by a bone
      * will cause it to go to the animated position.

File: engine/src/core/com/jme3/animation/SkeletonControl.java
Patch:
@@ -75,7 +75,7 @@ public SkeletonControl(Skeleton skeleton) {
      * @param skeleton the skeleton
      */
     @Deprecated
-    public SkeletonControl(Mesh[] targets, Skeleton skeleton){
+    SkeletonControl(Mesh[] targets, Skeleton skeleton){
         this.skeleton = skeleton;
         this.targets = targets;
     }

File: engine/src/core/com/jme3/export/SavableClassUtil.java
Patch:
@@ -31,6 +31,7 @@
  */
 package com.jme3.export;
 
+import com.jme3.animation.Animation;
 import com.jme3.effect.shapes.EmitterBoxShape;
 import com.jme3.effect.shapes.EmitterMeshConvexHullShape;
 import com.jme3.effect.shapes.EmitterMeshFaceShape;
@@ -73,6 +74,8 @@ private static void addRemapping(String oldClass, Class<? extends Savable> newCl
         addRemapping("com.jme3.effect.EmitterMeshVertexShape", EmitterMeshVertexShape.class);
         addRemapping("com.jme3.effect.EmitterPointShape", EmitterPointShape.class);
         addRemapping("com.jme3.material.Material$MatParamTexture", MatParamTexture.class);
+        addRemapping("com.jme3.animation.BoneAnimation", Animation.class);
+        addRemapping("com.jme3.animation.SpatialAnimation", Animation.class);
     }
     
     private static String remapClass(String className) throws ClassNotFoundException {

File: engine/src/bullet/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -420,7 +420,7 @@ public float getRestitution() {
      * @param restitution
      */
     public void setRestitution(float restitution) {
-        setRestitution(objectId, mass);
+        setRestitution(objectId, restitution);
     }
 
     private native void setRestitution(long objectId, float factor);

File: engine/src/niftygui/com/jme3/niftygui/RenderDeviceJme.java
Patch:
@@ -195,13 +195,13 @@ public void renderFont(RenderFont font, String str, int x, int y, Color color, f
 
         RenderFontJme jmeFont = (RenderFontJme) font;
         
-        BitmapText text = textCacheLastFrame.get(str);
+        BitmapText text = textCacheLastFrame.get(font+str+color);
         if (text == null) {
             text = jmeFont.createText();
             text.setText(str);
             text.updateLogicalState(0);
         }
-        textCacheCurrentFrame.put(str, text);
+        textCacheCurrentFrame.put(font+str+color, text);
 
         niftyMat.setColor("Color", convertColor(color, tempColor));
         niftyMat.setBoolean("UseTex", true);

File: engine/src/core/com/jme3/animation/Animation.java
Patch:
@@ -199,6 +199,8 @@ public void read(JmeImporter im) throws IOException {
 		InputCapsule in = im.getCapsule(this);
         name = in.readString("name", null);
         length = in.readFloat("length", 0f);
-        tracks = (Track<?>[]) in.readSavableArray("tracks", null);
+        Object[] arr = in.readSavableArray("tracks", null);
+        tracks = new Track<?>[arr.length];
+        System.arraycopy(arr, 0, tracks, 0, arr.length);
 	}
 }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerToolController.java
Patch:
@@ -73,7 +73,8 @@ public void setCameraController(ComposerCameraController cameraController) {
     @Override
     public void cleanup() {
         super.cleanup();
-        SceneApplication.getApplication().getRenderManager().removeMainView(overlayView);
+        //SceneApplication.getApplication().getRenderManager().removeMainView(overlayView);
+        overlayView.detachScene(onTopToolsNode);
         cameraController = null;
         editorController = null;
         onTopToolsNode.detachAllChildren();

File: engine/src/niftygui/com/jme3/niftygui/RenderFontJme.java
Patch:
@@ -104,8 +104,8 @@ public int getWidth(final String str) {
      * @param size font size
      * @return width of the character or null when no information for the character is available
      */
-    public Integer getCharacterAdvance(final char currentCharacter, final char nextCharacter, final float size) {
-        return Integer.valueOf( Math.round(font.getCharacterAdvance(currentCharacter, nextCharacter, size)) );
+    public int getCharacterAdvance(final char currentCharacter, final char nextCharacter, final float size) {
+        return Math.round(font.getCharacterAdvance(currentCharacter, nextCharacter, size));
     }
 
     public void dispose() {

File: engine/src/test/jme3test/awt/TestAwtPanels.java
Patch:
@@ -8,6 +8,7 @@
 import com.jme3.system.AppSettings;
 import com.jme3.system.awt.AwtPanel;
 import com.jme3.system.awt.AwtPanelsContext;
+import com.jme3.system.awt.PaintMode;
 import java.awt.BorderLayout;
 import java.awt.Dimension;
 import java.awt.Toolkit;
@@ -56,11 +57,11 @@ public static void main(String[] args){
         SwingUtilities.invokeLater(new Runnable(){
             public void run(){
                 final AwtPanelsContext ctx = (AwtPanelsContext) app.getContext();
-                panel = ctx.createPanel(true);
+                panel = ctx.createPanel(PaintMode.Accelerated);
                 panel.setPreferredSize(new Dimension(400, 300));
                 ctx.setInputSource(panel);
                 
-                panel2 = ctx.createPanel(true);
+                panel2 = ctx.createPanel(PaintMode.Accelerated);
                 panel2.setPreferredSize(new Dimension(400, 300));
                 
                 createWindowForPanel(panel, 300);

File: sdk/jme3-core/src/com/jme3/gde/core/scene/SceneApplication.java
Patch:
@@ -147,7 +147,7 @@ public SceneApplication() {
     public AwtPanel getMainPanel() {
         if (panel == null) {
             panel = ((AwtPanelsContext) getContext()).createPanel(true);
-            panel.attachTo(viewPort, guiViewPort, overlayView);
+            panel.attachTo(viewPort, overlayView, guiViewPort);
             ((AwtPanelsContext) getContext()).setInputSource(panel);
         }
         return panel;

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerToolController.java
Patch:
@@ -65,8 +65,8 @@ public void setCameraController(ComposerCameraController cameraController) {
 
         // a node in a viewport that will always render on top
         onTopToolsNode = new Node("OverlayNode");
-        overlayView = SceneApplication.getApplication().getRenderManager().createMainView("Overlay", this.cameraController.getCamera());
-        overlayView.setClearFlags(false, true, false);
+        overlayView = SceneApplication.getApplication().getOverlayView();
+//        overlayView.setClearFlags(false, true, false);
         overlayView.attachScene(onTopToolsNode);
     }
 

File: engine/src/desktop/com/jme3/system/awt/AwtPanelsContext.java
Patch:
@@ -138,7 +138,8 @@ private void destroyInThread(){
     }
     
     public void setSettings(AppSettings settings) {
-        settings.copyFrom(settings);
+        this.settings.copyFrom(settings);
+        this.settings.setRenderer(AppSettings.LWJGL_OPENGL2);
         if (actualContext != null){
             actualContext.setSettings(settings);
         }

File: engine/src/desktop/com/jme3/util/Screenshots.java
Patch:
@@ -5,17 +5,18 @@
 import java.awt.image.DataBufferInt;
 import java.awt.image.WritableRaster;
 import java.nio.ByteBuffer;
+import java.nio.IntBuffer;
 
 public final class Screenshots {
     
-    public static void convertScreenShot2(ByteBuffer bgraBuf, BufferedImage out){
+    public static void convertScreenShot2(IntBuffer bgraBuf, BufferedImage out){
         WritableRaster wr = out.getRaster();
         DataBufferInt db = (DataBufferInt) wr.getDataBuffer();
         
         int[] cpuArray = db.getData();
         
         bgraBuf.clear();
-        bgraBuf.asIntBuffer().get(cpuArray);
+        bgraBuf.get(cpuArray);
         
 //        int width  = wr.getWidth();
 //        int height = wr.getHeight();

File: engine/src/test/jme3test/awt/TestAwtPanels.java
Patch:
@@ -49,6 +49,7 @@ public static void main(String[] args){
         app.setShowSettings(false);
         AppSettings settings = new AppSettings(true);
         settings.setCustomRenderer(AwtPanelsContext.class);
+        settings.setFrameRate(60);
         app.setSettings(settings);
         app.start();
         

File: engine/src/blender/com/jme3/asset/BlenderKey.java
Patch:
@@ -68,11 +68,11 @@ public class BlenderKey extends ModelKey {
 	 */
 	protected int								fps						= DEFAULT_FPS;
 	/** Width of generated textures (in pixels). */
-	protected int								generatedTextureWidth	= 20;
+	protected int								generatedTextureWidth	= 60;
 	/** Height of generated textures (in pixels). */
-	protected int								generatedTextureHeight	= 20;
+	protected int								generatedTextureHeight	= 60;
 	/** Depth of generated textures (in pixels). */
-	protected int								generatedTextureDepth	= 20;
+	protected int								generatedTextureDepth	= 60;
 	/**
 	 * This variable is a bitwise flag of FeatureToLoad interface values; By default everything is being loaded.
 	 */

File: engine/src/core/com/jme3/renderer/RenderContext.java
Patch:
@@ -32,7 +32,6 @@
 
 package com.jme3.renderer;
 
-import com.jme3.material.Material;
 import com.jme3.material.RenderState;
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer;

File: engine/src/core/com/jme3/system/AppSettings.java
Patch:
@@ -400,11 +400,11 @@ public void setRenderer(String renderer) {
 
     /**
      * Set a custom graphics renderer to use. The class should implement 
-     * the {@link Renderer} interface.
-     * @param clazz The custom graphics renderer class.
+     * the {@link JmeContext} interface.
+     * @param clazz The custom context class.
      * (Default: not set)
      */
-    public void setCustomRenderer(Class clazz){
+    public void setCustomRenderer(Class<? extends JmeContext> clazz){
         put("Renderer", "CUSTOM" + clazz.getName());
     }
 

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/tools/PaintTerrainToolAction.java
Patch:
@@ -105,7 +105,7 @@ public Vector2f getPointPercentagePosition(Terrain terrain, Vector3f worldLoc) {
         Vector2f uv = new Vector2f(worldLoc.x,-worldLoc.z);
         float scale = ((Node)terrain).getLocalScale().x;
         
-        uv.subtractLocal(((Node)terrain).getLocalTranslation().x*scale, ((Node)terrain).getLocalTranslation().z*scale); // center it on 0,0
+        uv.subtractLocal(((Node)terrain).getWorldTranslation().x*scale, ((Node)terrain).getWorldTranslation().z*scale); // center it on 0,0
         float scaledSize = terrain.getTerrainSize()*scale;
         uv.addLocal(scaledSize/2, scaledSize/2); // shift the bottom left corner up to 0,0
         uv.divideLocal(scaledSize); // get the location as a percentage

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/AbstractStatefulGLToolAction.java
Patch:
@@ -91,6 +91,8 @@ public void sceneRedo() throws CannotRedoException {
     }
 
     protected void setModified(final AbstractSceneExplorerNode rootNode, final DataObject dataObject) {
+        if (dataObject.isModified())
+            return;
         java.awt.EventQueue.invokeLater(new Runnable() {
 
             public void run() {

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintAction.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -38,7 +37,7 @@ public ConstraintAction(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement 'Action' constraint
 		LOGGER.log(Level.WARNING, "'Action' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintChildOf.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -38,7 +37,7 @@ public ConstraintChildOf(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement ChildOf constraint
 		LOGGER.log(Level.WARNING, "ChildOf constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintClampTo.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -39,7 +38,7 @@ public ConstraintClampTo(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		//TODO: implement when curves are implemented
 		LOGGER.log(Level.INFO, "'Clamp to' not yet implemented! Curves not yet implemented!", this.getName());
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintFollowPath.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -38,7 +37,7 @@ public ConstraintFollowPath(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		//TODO: implement when curves are implemented
 		LOGGER.log(Level.INFO, "'Follow path' not implemented! Curves not yet implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintLockTrack.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -39,7 +38,7 @@ public ConstraintLockTrack(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement 'Lock track' constraint
 		LOGGER.log(Level.WARNING, "'Lock track' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintMinMax.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -38,7 +37,7 @@ public ConstraintMinMax(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement 'Min max' constraint
 		LOGGER.log(Level.WARNING, "'Min max' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintNull.java
Patch:
@@ -1,7 +1,6 @@
 package com.jme3.scene.plugins.blender.constraints;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -35,7 +34,7 @@ public ConstraintNull(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {}
+	public void affectAnimation(Animation animation, int targetIndex) {}
 	
 	@Override
 	public ConstraintType getType() {

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintPython.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -38,7 +37,7 @@ public ConstraintPython(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement 'Python' constraint
 		LOGGER.log(Level.WARNING, "'Python' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintRigidBodyJoint.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -38,7 +37,7 @@ public ConstraintRigidBodyJoint(Structure constraintStructure,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement 'Rigid body joint' constraint
 		LOGGER.log(Level.WARNING, "'Rigid body joint' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintStretchTo.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -39,7 +38,7 @@ public ConstraintStretchTo(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement 'Stretch to' constraint
 		LOGGER.log(Level.WARNING, "'Stretch to' constraint NOT implemented!");
 	}

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintTransform.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.jme3.animation.BoneAnimation;
-import com.jme3.animation.Skeleton;
+import com.jme3.animation.Animation;
 import com.jme3.scene.plugins.blender.BlenderContext;
 import com.jme3.scene.plugins.blender.animations.Ipo;
 import com.jme3.scene.plugins.blender.exceptions.BlenderFileException;
@@ -38,7 +37,7 @@ public ConstraintTransform(Structure constraintStructure, Long boneOMA,
 	}
 
 	@Override
-	public void affectAnimation(Skeleton skeleton, BoneAnimation boneAnimation) {
+	public void affectAnimation(Animation animation, int targetIndex) {
 		// TODO: implement 'Transform' constraint
 		LOGGER.log(Level.WARNING, "'Transform' constraint NOT implemented!");
 	}

File: engine/src/android/jme3test/android/TestAmbient.java
Patch:
@@ -83,10 +83,10 @@ public void simpleInitApp()
         audioRenderer.playSource(beep);
         */
         
-        waves  = new AudioNode(audioRenderer, assetManager, "Sound/Environment/Ocean Waves.ogg", true);
+        waves  = new AudioNode(assetManager, "Sound/Environment/Ocean Waves.ogg", true);
         waves.setPositional(true);
 
-        nature = new AudioNode(audioRenderer, assetManager, "Sound/Environment/Nature.ogg", true);
+        nature = new AudioNode(assetManager, "Sound/Environment/Nature.ogg", true);
         
         waves.setLocalTranslation(new Vector3f(4, -1, 30));
         waves.setMaxDistance(5);

File: engine/src/android/jme3test/android/TestSkyLoadingLagoon.java
Patch:
@@ -36,7 +36,6 @@
 import com.jme3.scene.Spatial;
 import com.jme3.texture.Texture;
 import com.jme3.util.SkyFactory;
-import com.jme3.util.android.AndroidSkyFactory;
 
 public class TestSkyLoadingLagoon extends SimpleApplication {
 
@@ -64,7 +63,7 @@ public void simpleInitApp() {
         Texture down = assetManager.loadTexture("Textures/Sky/Primitives/primitives_negative_y.png");
         */
         
-        Spatial sky = AndroidSkyFactory.createSky(assetManager, west, east, north, south, up, down);
+        Spatial sky = SkyFactory.createSky(assetManager, west, east, north, south, up, down);
         rootNode.attachChild(sky);
     }
 

File: engine/src/android/jme3test/android/TestSkyLoadingPrimitives.java
Patch:
@@ -36,7 +36,6 @@
 import com.jme3.scene.Spatial;
 import com.jme3.texture.Texture;
 import com.jme3.util.SkyFactory;
-import com.jme3.util.android.AndroidSkyFactory;
 
 public class TestSkyLoadingPrimitives extends SimpleApplication {
 
@@ -62,7 +61,7 @@ public void simpleInitApp() {
         Texture up = assetManager.loadTexture("Textures/Sky/Primitives/primitives_positive_y.png");
         Texture down = assetManager.loadTexture("Textures/Sky/Primitives/primitives_negative_y.png");
         
-        Spatial sky = AndroidSkyFactory.createSky(assetManager, west, east, north, south, up, down);
+        Spatial sky = SkyFactory.createSky(assetManager, west, east, north, south, up, down);
         rootNode.attachChild(sky);
     }
 

File: engine/src/core/com/jme3/animation/Bone.java
Patch:
@@ -102,6 +102,9 @@ public final class Bone implements Savable {
      * @param name Name to give to this bone
      */
     public Bone(String name) {
+        if (name == null)
+            throw new IllegalArgumentException("Name cannot be null");
+        
         this.name = name;
 
         initialPos = new Vector3f();

File: engine/src/core/com/jme3/animation/Skeleton.java
Patch:
@@ -210,7 +210,6 @@ public Bone getBone(String name) {
                 return boneList[i];
             }
         }
-
         return null;
     }
 

File: engine/src/core/com/jme3/renderer/Camera.java
Patch:
@@ -286,6 +286,7 @@ public Camera clone() {
             cam.viewMatrix = viewMatrix.clone();
             cam.projectionMatrix = projectionMatrix.clone();
             cam.viewProjectionMatrix = viewProjectionMatrix.clone();
+            cam.guiBounding = (BoundingBox) guiBounding.clone();
 
             cam.update();
 
@@ -1227,6 +1228,7 @@ public boolean isParallelProjection() {
      */
     public void setParallelProjection(final boolean value) {
         this.parallelProjection = value;
+        onFrustumChange();
     }
 
     /**

File: engine/src/lwjgl-ogl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -1530,7 +1530,9 @@ public Vector2f[] getFrameBufferSamplePositions(FrameBuffer fb) {
 
     public void setFrameBuffer(FrameBuffer fb) {
         if (lastFb == fb) {
-            return;
+            if (fb == null || !fb.isUpdateNeeded()){
+                return;
+            }
         }
 
         // generate mipmaps for last FB if needed

File: engine/src/blender/com/jme3/scene/plugins/blender/animations/CalculationBone.java
Patch:
@@ -113,7 +113,7 @@ public Spatial rotate(Quaternion rot, int frame) {
 
 	public void applyCalculatedTracks() {
 		if(track != null) {
-			track.setKeyframes(track.getTimes(), translations, rotations);//TODO:scales
+			track.setKeyframes(track.getTimes(), translations, rotations, scales);
 		} else {
 			bone.setUserControl(true);
 			bone.setUserTransforms(translations[0], rotations[0], scales[0]);

File: engine/src/blender/com/jme3/scene/plugins/blender/AbstractBlenderLoader.java
Patch:
@@ -82,7 +82,7 @@ public Node toScene(Structure structure) {
 				if(pObject.isNotNull()) {
 					Structure objectStructure = pObject.fetchData(blenderContext.getInputStream()).get(0);
 					Object object = this.toObject(objectStructure);
-					if(object instanceof Spatial) {
+					if(object instanceof Spatial && ((Spatial) object).getParent()==null) {
 						result.attachChild((Spatial) object);
 					} else if(object instanceof Light) {
 						result.addLight((Light)object);

File: sdk/jme3-ogretools/src/com/jme3/gde/ogretools/convert/AdvOgreXMLConvertAction.java
Patch:
@@ -4,7 +4,6 @@
  */
 package com.jme3.gde.ogretools.convert;
 
-import com.jme3.asset.DesktopAssetManager;
 import com.jme3.export.binary.BinaryExporter;
 import com.jme3.gde.core.assets.ProjectAssetManager;
 import com.jme3.scene.Spatial;
@@ -17,7 +16,6 @@
 import org.openide.DialogDisplayer;
 import org.openide.NotifyDescriptor;
 import org.openide.NotifyDescriptor.Confirmation;
-import org.openide.filesystems.FileLock;
 import org.openide.filesystems.FileObject;
 import org.openide.filesystems.FileUtil;
 import org.openide.loaders.DataObject;
@@ -59,7 +57,7 @@ public void run() {
                     return;
                 }
                 FileObject sourceMatFile = FileUtil.toFileObject(new File(options.getSourceFile().replaceAll("mesh.xml", "material")));
-                if (sourceMatFile.isValid()) {
+                if (sourceMatFile != null && sourceMatFile.isValid()) {
                     try {
                         sourceMatFile.copy(sourceMatFile.getParent(), "+" + sourceMatFile.getName(), sourceMatFile.getExt());
                     } catch (IOException ex) {

File: engine/src/desktop-fx/com/jme3/post/HDRRenderer.java
Patch:
@@ -302,7 +302,7 @@ public void initialize(RenderManager rm, ViewPort vp){
         // loadInitial()
         fsQuad = new Picture("HDR Fullscreen Quad");
 
-        Format lumFmt = Format.Luminance8;
+        Format lumFmt = Format.RGB8;
         scene64FB = new FrameBuffer(64, 64, 1);
         scene64 = new Texture2D(64, 64, lumFmt);
         scene64FB.setColorTexture(scene64);

File: sdk/jme3-core/src/com/jme3/gde/core/properties/UserDataProperty.java
Patch:
@@ -75,7 +75,7 @@ public static int getObjectType(Object type) {
         } else if (type instanceof Long) {
             return 4;
         } else {
-            Logger.getLogger(UserDataProperty.class.getName()).log(Level.WARNING, "UserData not editable" + type.getClass());
+            Logger.getLogger(UserDataProperty.class.getName()).log(Level.WARNING, "UserData not editable" + (type == null ? "null" : type.getClass()));
             return -1;
         }
     }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerTopComponent.java
Patch:
@@ -897,6 +897,8 @@ public void sceneRequested(SceneRequest request) {
             
             editorController.setToolController(toolController);
             toolController.refreshNonSpatialMarkers();
+            
+            editorController.setTerrainLodCamera();
         }/* else {
          SceneApplication.getApplication().removeSceneListener(this);
          currentRequest = null;
@@ -926,5 +928,6 @@ public void run() {
 
     public void previewRequested(PreviewRequest request) {
     }
+
     
 }

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/TerrainEditorTopComponent.java
Patch:
@@ -1013,7 +1013,6 @@ public void openScene(Spatial spat, AssetDataObject file, ProjectAssetManager ma
         terrainDeletedNodeListener = new TerrainNodeListener();
         editorController.enableTextureButtons();
 
-        editorController.enableLodControl();
     }
 
     // run on GL thread
@@ -1063,6 +1062,8 @@ public void sceneRequested(SceneRequest request) {
             toolController.setHeightToolRadius((float) radiusSlider.getValue() / (float) radiusSlider.getMaximum());
             toolController.setHeightToolHeight((float) heightSlider.getValue() / (float) heightSlider.getMaximum());
 
+            editorController.setTerrainLodCamera();
+            
             java.awt.EventQueue.invokeLater(new Runnable() {
 
                 public void run() {
@@ -1072,7 +1073,6 @@ public void run() {
                     }
                 }
             });
-            //editorController.getAlphaSaveDataObject(this);
         }
     }
 

File: engine/src/terrain/com/jme3/terrain/geomipmap/LODGeomap.java
Patch:
@@ -135,8 +135,8 @@ public Vector2f getUV(int x, int y, Vector2f store, Vector2f offset, float offse
         float offsetX = offset.x + (offsetAmount * 1.0f);
         float offsetY = -offset.y + (offsetAmount * 1.0f);//note the -, we flip the tex coords
 
-        store.set((((float) x) + offsetX) / (float) (totalSize ), // calculates percentage of texture here
-                (((float) y) + offsetY) / (float) (totalSize ));
+        store.set((((float) x) + offsetX) / (float) (totalSize - 1), // calculates percentage of texture here
+                (((float) y) + offsetY) / (float) (totalSize - 1));
         return store;
     }
 

File: engine/src/android/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -178,7 +178,7 @@ public void initialize() {
         if (versionStr == null || versionStr.equals("")) {
             glslVer = -1;
             throw new UnsupportedOperationException("GLSL and OpenGL2 is "
-                    + "required for the LWJGL "
+                    + "required for the OpenGL ES "
                     + "renderer!");
         }
 

File: engine/src/desktop/com/jme3/system/Natives.java
Patch:
@@ -31,7 +31,6 @@
  */
 package com.jme3.system;
 
-import com.jme3.system.JmeSystem.Platform;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglCanvas.java
Patch:
@@ -36,13 +36,12 @@
 import com.jme3.system.JmeCanvasContext;
 import com.jme3.system.JmeContext.Type;
 import com.jme3.system.JmeSystem;
-import com.jme3.system.JmeSystem.Platform;
+import com.jme3.system.Platform;
 import java.awt.Canvas;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.swing.SwingUtilities;
 import org.lwjgl.LWJGLException;
-import org.lwjgl.LWJGLUtil;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureHelper.java
Patch:
@@ -716,7 +716,8 @@ protected Texture loadTextureFromFile(String name, DataRepository dataRepository
 			String relativePath = name.substring(2);
 			//augument the path with blender key path
 			BlenderKey blenderKey = dataRepository.getBlenderKey();
-			String blenderAssetFolder = blenderKey.getName().substring(0, blenderKey.getName().lastIndexOf('/'));
+            int idx = blenderKey.getName().lastIndexOf('/');
+			String blenderAssetFolder = blenderKey.getName().substring(0, idx != -1 ? idx : 0);
 			assetNames.add(blenderAssetFolder+'/'+relativePath);
 		} else {//use every path from the asset name to the root (absolute path)
 			String[] paths = name.split("\\/");

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureHelper.java
Patch:
@@ -713,8 +713,7 @@ protected Texture loadTextureFromFile(String name, DataRepository dataRepository
 
 		List<String> assetNames = new ArrayList<String>();
 		if (name.startsWith("//")) {
-			String relativePath = name.substring(1);
-			assetNames.add(relativePath);//use relative path to the asset root folder
+			String relativePath = name.substring(2);
 			//augument the path with blender key path
 			BlenderKey blenderKey = dataRepository.getBlenderKey();
 			String blenderAssetFolder = blenderKey.getName().substring(0, blenderKey.getName().lastIndexOf('/'));
@@ -727,7 +726,7 @@ protected Texture loadTextureFromFile(String name, DataRepository dataRepository
 			for(int i=paths.length-2;i>=0;--i) {
 				sb.insert(0, '/');
 				sb.insert(0, paths[i]);
-				assetNames.add(sb.toString());
+				assetNames.add(0, sb.toString());
 			}
 		}
 

File: sdk/jme3-lwjgl-applet/src/com/jme3/gde/lwjgl/applet/LwjglAppletCompositeProvider.java
Patch:
@@ -61,7 +61,7 @@ public JComponent createComponent(ProjectCustomizer.Category category, Lookup co
     private class SavePropsListener implements ActionListener {
 
         private String extensionName = "lwjglapplet";
-        private String extensionVersion = "v0.96";
+        private String extensionVersion = "v0.97";
         private String[] extensionDependencies = new String[]{"jar", "-lwjgl-applet"};
         private ProjectExtensionManager manager = new ProjectExtensionManager(extensionName, extensionVersion, extensionDependencies);
         private ProjectExtensionProperties properties;

File: sdk/jme3-android/src/com/jme3/gde/android/AndroidSdkTool.java
Patch:
@@ -276,7 +276,7 @@ private static String mainActivityString(String mainClass, String packag) {
                 + "        exitDialogTitle = \"Exit?\";\n"
                 + "        exitDialogMessage = \"Press Yes\";\n"
                 + "        // Edit: 25.06.2011: Enable verbose logging\n"
-                + "        eglConfigVerboseLogging= true;\n"
+                + "        eglConfigVerboseLogging = false;\n"
                 + "        // Edit: 30.06.2011: Choose screen orientation\n"
                 + "        screenOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n"
                 + "        // Edit 12.07.2011: Invert the MouseEvents X (default = true)\n"

File: sdk/jme3-android/src/com/jme3/gde/android/AndroidSdkTool.java
Patch:
@@ -125,7 +125,7 @@ public static String getAndroidToolPath() {
             return null;
         }
         if (Utilities.isWindows()) {
-            executable = folder.getFileObject("tools/android.exe");
+            executable = folder.getFileObject("tools/android.bat");
         } else {
             executable = folder.getFileObject("tools/android");
         }

File: engine/src/test/jme3test/app/TestBareBonesApp.java
Patch:
@@ -78,7 +78,7 @@ public void update(){
         boxGeom.updateGeometricState();
 
         // render the viewports
-        renderManager.render(tpf, true);
+        renderManager.render(tpf, context.isRenderable());
     }
 
     @Override

File: engine/src/test/jme3test/app/state/TestAppStates.java
Patch:
@@ -88,7 +88,7 @@ public void update(){
         stateManager.render(renderManager);
 
         // render the viewports
-        renderManager.render(tpf, true);
+        renderManager.render(tpf, context.isRenderable());
     }
 
     @Override

File: engine/src/test/jme3test/bullet/TestWalkingChar.java
Patch:
@@ -225,7 +225,7 @@ private void prepareEffect() {
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/Particle.j3md");
         mat.setTexture("Texture", assetManager.loadTexture("Effects/Explosion/flame.png"));
         effect.setMaterial(mat);
-        effect.setLocalScale(100);
+//        effect.setLocalScale(100);
         rootNode.attachChild(effect);
     }
 

File: engine/src/android/com/jme3/app/android/AndroidApplication.java
Patch:
@@ -222,7 +222,7 @@ public void update() {
 
         // render states
         stateManager.render(renderManager);
-        renderManager.render(tpf);
+        renderManager.render(tpf, true);
         render(renderManager);
         stateManager.postRender();
     }

File: engine/src/test/jme3test/app/TestBareBonesApp.java
Patch:
@@ -78,7 +78,7 @@ public void update(){
         boxGeom.updateGeometricState();
 
         // render the viewports
-        renderManager.render(tpf, false);
+        renderManager.render(tpf, true);
     }
 
     @Override

File: engine/src/test/jme3test/app/state/TestAppStates.java
Patch:
@@ -88,7 +88,7 @@ public void update(){
         stateManager.render(renderManager);
 
         // render the viewports
-        renderManager.render(tpf, false);
+        renderManager.render(tpf, true);
     }
 
     @Override

File: engine/src/test/jme3test/app/TestBareBonesApp.java
Patch:
@@ -78,7 +78,7 @@ public void update(){
         boxGeom.updateGeometricState();
 
         // render the viewports
-        renderManager.render(tpf);
+        renderManager.render(tpf, false);
     }
 
     @Override

File: engine/src/test/jme3test/app/state/TestAppStates.java
Patch:
@@ -88,7 +88,7 @@ public void update(){
         stateManager.render(renderManager);
 
         // render the viewports
-        renderManager.render(tpf);
+        renderManager.render(tpf, false);
     }
 
     @Override

File: engine/src/core/com/jme3/app/SimpleApplication.java
Patch:
@@ -260,9 +260,7 @@ public void update() {
 
         // render states
         stateManager.render(renderManager);
-        if (context.isRenderable()){
-            renderManager.render(tpf);
-        }
+        renderManager.render(tpf, context.isRenderable());
         simpleRender(renderManager);
         stateManager.postRender();
     }

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MaterialLoader.java
Patch:
@@ -458,6 +458,8 @@ private MaterialList load(AssetManager assetManager, AssetKey key, InputStream i
                 list.put(matName, mat);
             }
         }
+        
+        return list;
     }
 
     public Object load(AssetInfo info) throws IOException {

File: engine/src/blender/com/jme3/scene/plugins/blender/constraints/ConstraintHelper.java
Patch:
@@ -44,7 +44,7 @@ public ConstraintHelper(String blenderVersion, DataRepository dataRepository) {
 	 * @throws BlenderFileException
 	 */
 	public Map<Long, List<Constraint>> loadConstraints(Structure objectStructure, DataRepository dataRepository) throws BlenderFileException {
-		if (blenderVersion < 250) {//TODO
+		if (blenderVersion >= 250) {//TODO
 			LOGGER.warning("Loading of constraints not yet implemented for version 2.5x !");
 			return new HashMap<Long, List<Constraint>>(0);
 		}

File: sdk/jme3-lwjgl-applet/src/com/jme3/gde/lwjgl/applet/LwjglAppletCompositeProvider.java
Patch:
@@ -61,7 +61,7 @@ public JComponent createComponent(ProjectCustomizer.Category category, Lookup co
     private class SavePropsListener implements ActionListener {
 
         private String extensionName = "lwjglapplet";
-        private String extensionVersion = "v0.95";
+        private String extensionVersion = "v0.96";
         private String[] extensionDependencies = new String[]{"jar", "-lwjgl-applet"};
         private ProjectExtensionManager manager = new ProjectExtensionManager(extensionName, extensionVersion, extensionDependencies);
         private ProjectExtensionProperties properties;

File: engine/src/desktop-fx/com/jme3/shadow/PssmShadowRenderer.java
Patch:
@@ -185,6 +185,7 @@ public PssmShadowRenderer(AssetManager manager, int size, int nbSplits) {
 
         setCompareMode(CompareMode.Hardware);
         setFilterMode(FilterMode.Bilinear);
+        setShadowIntensity(0.7f);
 
         shadowCam = new Camera(size, size);
         shadowCam.setParallelProjection(true);

File: engine/src/core/com/jme3/math/Matrix3f.java
Patch:
@@ -987,7 +987,7 @@ public Matrix3f invert(Matrix3f store) {
      */
     public Matrix3f invertLocal() {
         float det = determinant();
-        if (FastMath.abs(det) <= FastMath.FLT_EPSILON) {
+        if (FastMath.abs(det) <= 0f) {
             return zero();
         }
 

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -408,7 +408,7 @@ protected Geometry createGeometry(ArrayList<Face> faceList, String matName) thro
             geom.setQueueBucket(Bucket.Opaque);
         
         if (material.getMaterialDef().getName().contains("Lighting")
-          || mesh.getFloatBuffer(Type.Normal) == null){
+          && mesh.getFloatBuffer(Type.Normal) == null){
             logger.log(Level.WARNING, "OBJ mesh {0} doesn't contain normals! "
                                     + "It might not display correctly", geom.getName());
         }

File: engine/src/core/com/jme3/effect/ParticleEmitter.java
Patch:
@@ -44,7 +44,6 @@
 import com.jme3.math.ColorRGBA;
 import com.jme3.math.FastMath;
 import com.jme3.math.Matrix3f;
-import com.jme3.math.Quaternion;
 import com.jme3.math.Vector3f;
 import com.jme3.renderer.Camera;
 import com.jme3.renderer.RenderManager;

File: engine/src/niftygui/com/jme3/niftygui/RenderDeviceJme.java
Patch:
@@ -187,9 +187,7 @@ public void renderFont(RenderFont font, String str, int x, int y, Color color, f
         RenderFontJme jmeFont = (RenderFontJme) font;
         BitmapText text = jmeFont.getText();
 
-        // WARNING: Not compatible with OpenGL1 implementations..
         niftyMat.setColor("Color", convertColor(color, tempColor));
-        
         niftyMat.setBoolean("UseTex", true);
         niftyMat.getAdditionalRenderState().setBlendMode(convertBlend());
         text.setMaterial(niftyMat);

File: engine/src/niftygui/com/jme3/niftygui/RenderFontJme.java
Patch:
@@ -34,8 +34,6 @@
 
 import com.jme3.font.BitmapFont;
 import com.jme3.font.BitmapText;
-import com.jme3.texture.Texture;
-import com.jme3.texture.Texture2D;
 import de.lessvoid.nifty.spi.render.RenderFont;
 
 public class RenderFontJme implements RenderFont {

File: engine/src/core/com/jme3/scene/Mesh.java
Patch:
@@ -778,6 +778,7 @@ public void getTriangle(int index, Vector3f v1, Vector3f v2, Vector3f v3){
     public void getTriangle(int index, Triangle tri){
         getTriangle(index, tri.get1(), tri.get2(), tri.get3());
         tri.setIndex(index);
+        tri.setNormal(null);
     }
 
     /**

File: engine/src/jbullet/com/jme3/bullet/control/KinematicRagdollControl.java
Patch:
@@ -660,7 +660,7 @@ public void collision(PhysicsCollisionEvent event) {
         }
 
         //dispatching the event if the ragdoll has been hit
-        if (hit) {
+        if (hit && listeners != null) {
             for (RagdollCollisionListener listener : listeners) {
                 listener.collide(hitBone, hitObject, event);
             }

File: engine/src/core/com/jme3/texture/Texture.java
Patch:
@@ -52,7 +52,7 @@
  * magnificationFilter options, apply options and correction options. Default
  * values are as follows: minificationFilter - NearestNeighborNoMipMaps,
  * magnificationFilter - NearestNeighbor, wrap - EdgeClamp on S,T and R, apply -
- * Modulate, enivoronment - None.
+ * Modulate, environment - None.
  *
  * @see com.jme3.texture.Image
  * @author Mark Powell
@@ -538,7 +538,7 @@ public int hashCode() {
 //    public abstract Texture createSimpleClone();
 
 
-   /** Retreive a basic clone of this Texture (ie, clone everything but the
+   /** Retrieve a basic clone of this Texture (ie, clone everything but the
      * image data, which is shared)
      *
      * @return Texture

File: engine/src/test/jme3test/bullet/BombControl.java
Patch:
@@ -82,7 +82,6 @@ private void prepareEffect(AssetManager assetManager) {
         Material mat = new Material(assetManager, "Common/MatDefs/Misc/Particle.j3md");
         mat.setTexture("Texture", assetManager.loadTexture("Effects/Explosion/flame.png"));
         effect.setMaterial(mat);
-        effect.setLocalScale(100);
     }
 
     protected void createGhostObject() {

File: sdk/jme3-core/src/com/jme3/gde/core/Installer.java
Patch:
@@ -82,6 +82,7 @@ public void restored() {
                 NbPreferences.forModule(Installer.class).put("projects_path", projectDir);
             }
         }
+        System.setProperty("netbeans.projects.dir", projectDir);
 
         //set extraction dir for platform natives
         String jmpDir = System.getProperty("netbeans.user");

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/actions/PreviewAssetAction.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.swing.Action;
+import org.openide.loaders.DataObject;
 import org.openide.nodes.Node;
 import org.w3c.dom.Element;
 
@@ -42,7 +43,8 @@ public void actionPerformed(ActionEvent ev) {
         JmeNode jmeNode = NodeUtility.createNode(node);
         SceneApplication app = SceneApplication.getApplication();
         SceneRequest request = new SceneRequest(app, jmeNode, pm);
-        request.setWindowTitle("SceneViewer - PreView AssetPack Model");
+        request.setDataObject(context.getLookup().lookup(DataObject.class));
+        request.setWindowTitle("AssetPack - PreView Model");
         app.requestScene(request);
 
     }

File: sdk/jme3-core/src/com/jme3/gde/core/assets/actions/OpenModel.java
Patch:
@@ -82,6 +82,7 @@ public void run() {
                         JmeNode jmeNode = NodeUtility.createNode(node);
                         SceneApplication app = SceneApplication.getApplication();
                         SceneRequest request = new SceneRequest(app, jmeNode, manager);
+                        request.setDataObject(context);
                         request.setWindowTitle("OpenGL Window - View Model");
                         app.requestScene(request);
                     } else {

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -785,6 +785,9 @@ public Object load(AssetInfo info) throws IOException {
                 if (materialList == null && materialName != null) {
                     materialList = (MaterialList) assetManager.loadAsset(new OgreMaterialKey(folderName + materialName + ".material"));
                 }
+                else{
+                    materialList = (MaterialList) assetManager.loadAsset(new OgreMaterialKey(folderName + meshName + ".material"));
+                }
             } else {
                 try {
                     materialList = (MaterialList) assetManager.loadAsset(new OgreMaterialKey(folderName + meshName + ".material"));

File: engine/src/blender/com/jme3/scene/plugins/blender/meshes/MeshHelper.java
Patch:
@@ -406,7 +406,7 @@ public List<Geometry> toMesh(Structure structure, DataRepository dataRepository)
 			}
 			for(Entry<Material, List<Geometry>> entry : materialMap.entrySet()) {
 				MaterialContext materialContext = dataRepository.getMaterialContext(entry.getKey());
-				if(materialContext.getTexturesCount()>0) {
+				if(materialContext != null && materialContext.getTexturesCount()>0) {
 					UVCoordinatesGenerator.generateUVCoordinates(materialContext.getUvCoordinatesType(), 
 							materialContext.getProjectionType(),
 							materialContext.getTextureDimension(), entry.getValue());

File: engine/src/android/jme3test/android/AboutActivity.java
Patch:
@@ -42,7 +42,7 @@ public void onCreate(Bundle savedInstanceState) {
 
 		super.onCreate(savedInstanceState);
 
-		setContentView(R.layout.about);
+		//setContentView(R.layout.about);
 	}
 
 	@Override

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/UVProjectionGenerator.java
Patch:
@@ -120,8 +120,6 @@ public static float[] tubeProjection(Mesh mesh, BoundingTube bt) {
 		float cx = bt.getCenter().x, cy = bt.getCenter().y;
 		Vector3f uBase = new Vector3f(0, -1, 0);
 		
-		//the key is the Z-ccordinate of the vertex and the value a map between the vertex's angle nad indexes of its UV-coordinates
-//		Map<Float, Map<Float, Integer[]>> lowestAnglesUVCoordinatesMap = new HashMap<Float, Map<Float,Integer[]>>();
 		float vBase = bt.getCenter().z - bt.getHeight() * 0.5f;
 		for (int i = 0, j = 0; i < positions.limit(); i += 3, j += 2) {
 			// calculating U
@@ -135,7 +133,7 @@ public static float[] tubeProjection(Mesh mesh, BoundingTube bt) {
 
 			// calculating V
 			float z = positions.get(i + 2);
-			uvCoordinates[j + 1] = (vBase - z) / bt.getHeight();
+			uvCoordinates[j + 1] = (z - vBase) / bt.getHeight();
 		}
 		
 		//looking for splitted triangles

File: engine/src/networking/com/jme3/network/serializing/serializers/EnumSerializer.java
Patch:
@@ -33,6 +33,7 @@
 package com.jme3.network.serializing.serializers;
 
 import com.jme3.network.serializing.Serializer;
+import com.jme3.network.serializing.SerializerException;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 
@@ -48,6 +49,8 @@ public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
 
             if (ordinal == -1) return null;
             T[] enumConstants = c.getEnumConstants();
+            if (enumConstants == null)
+                throw new SerializerException( "Class has no enum constants:" + c );
             return enumConstants[ordinal];
         } catch (IndexOutOfBoundsException ex) {
             return null;

File: engine/src/blender/com/jme3/scene/plugins/blender/textures/TextureGeneratorMusgrave.java
Patch:
@@ -79,7 +79,7 @@ protected Texture generate(Structure tex, int width, int height, int depth, Data
 			for (int j = -halfH; j < halfH; ++j) {
 				texvec[1] = hDelta * j / noisesize;
 				for (int k = -halfD; k < halfD; ++k) {
-					texvec[2] = dDelta * k;
+					texvec[2] = dDelta * k / noisesize;
 					switch (stype) {
 						case NoiseGenerator.TEX_MFRACTAL:
 						case NoiseGenerator.TEX_FBM:

File: engine/src/core-plugins/com/jme3/material/plugins/J3MLoader.java
Patch:
@@ -180,7 +180,7 @@ private Object readValue(VarType type, String value) throws IOException{
                     if (split.length != 1){
                         throw new IOException("Float value parameter must have 1 entry: " + value);
                     }
-                    return Float.parseFloat(split[0]);
+                     return Float.parseFloat(split[0]);
                 case Vector2:
                     if (split.length != 2){
                         throw new IOException("Vector2 value parameter must have 2 entries: " + value);
@@ -234,7 +234,7 @@ private void readParam(String statement) throws IOException{
                 throw new IOException("Parameter statement syntax incorrect");
             }
             statement = split[0].trim();
-            defaultVal = split[1].trim();
+            defaultVal = split[1].trim();           
         }
         
         // Parse ffbinding
@@ -269,7 +269,7 @@ private void readParam(String statement) throws IOException{
         
         Object defaultValObj = null;
         if (defaultVal != null){ 
-            readValue(type, defaultVal);
+            defaultValObj = readValue(type, defaultVal);
         }
         
         materialDef.addMaterialParam(type, name, defaultValObj, ffBinding);

File: engine/src/test/jme3test/blender/ManualBlenderTester.java
Patch:
@@ -187,7 +187,7 @@ private Node testBlenderLoader(AssetInfo assetInfo) {
         Node blenderModel = null;
         BlenderLoader blenderLoader = new BlenderLoader();
         try {
-            LoadingResults loadingResults = blenderLoader.load(assetInfo);
+            LoadingResults loadingResults = (LoadingResults) blenderLoader.load(assetInfo);
             for (Node object : loadingResults.getObjects()) {
                 this.rootNode.attachChild(object);
                 blenderModel = object;

File: engine/src/blender/com/jme3/scene/plugins/blender/BlenderLoader.java
Patch:
@@ -153,7 +153,7 @@ public LoadingResults load(AssetInfo assetInfo) throws IOException {
                         }
                         break;
                     case FileBlockHeader.BLOCK_MA00://Material
-                        if ((blenderKey.getFeaturesToLoad() & FeaturesToLoad.MATERIALS) != 0) {
+                        if (blenderKey.isLoadUnlinkedAssets() && (blenderKey.getFeaturesToLoad() & FeaturesToLoad.MATERIALS) != 0) {
                             loadingResults.addMaterial(converter.toMaterial(block.getStructure(dataRepository)));
                         }
                         break;
@@ -163,7 +163,7 @@ public LoadingResults load(AssetInfo assetInfo) throws IOException {
                         }
                         break;
                     case FileBlockHeader.BLOCK_WO00://World
-                        if (worldData == null) {//onlu one world data is used
+                        if (blenderKey.isLoadUnlinkedAssets() && worldData == null) {//onlu one world data is used
                             Structure worldStructure = block.getStructure(dataRepository);
                             String worldName = worldStructure.getName();
                             if (blenderKey.getUsedWorld() == null || blenderKey.getUsedWorld().equals(worldName)) {

File: engine/src/core/com/jme3/material/MatParam.java
Patch:
@@ -128,7 +128,8 @@ void setName(String name) {
      * Returns the value of this material parameter.
      * <p>
      * Material parameters that are used for material definitions
-     * will not have a value.
+     * will not have a value, unless there's a default value declared
+     * in the definition.
      * 
      * @return the value of this material parameter.
      */

File: engine/src/desktop/com/jme3/asset/DesktopAssetManager.java
Patch:
@@ -143,7 +143,7 @@ public void registerLocator(String rootPath, String clsName){
         }
     }
     
-    public void unregisterLocator(String rootPath, Class<?> clazz){
+    public void unregisterLocator(String rootPath, Class<? extends AssetLocator> clazz){
         handler.removeLocator(clazz, rootPath);
         if (logger.isLoggable(Level.FINER)){
             logger.log(Level.FINER, "Unregistered locator: {0}",

File: engine/src/test/jme3test/asset/TestAbsoluteLocators.java
Patch:
@@ -44,7 +44,7 @@ public class TestAbsoluteLocators {
     public static void main(String[] args){
         AssetManager am = new DesktopAssetManager();
 
-        am.registerLoader(AWTLoader.class.getName(), "png");
+        am.registerLoader(AWTLoader.class.getName(), "jpg");
         am.registerLoader(WAVLoader.class.getName(), "wav");
 
         // register absolute locator

File: engine/src/test/jme3test/light/TestSpotLightTerrain.java
Patch:
@@ -156,7 +156,7 @@ private void makeTerrain() {
         matTerrain.setFloat("DiffuseMap_3_scale", rockScale);
 
         // RIVER ROCK texture
-        Texture riverRock = assetManager.loadTexture("Textures/Terrain/Pond/Pond.png");
+        Texture riverRock = assetManager.loadTexture("Textures/Terrain/Pond/Pond.jpg");
         riverRock.setWrap(WrapMode.Repeat);
         matTerrain.setTexture("DiffuseMap_4", riverRock);
         matTerrain.setFloat("DiffuseMap_4_scale", rockScale);

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerTopComponent.java
Patch:
@@ -777,15 +777,15 @@ public void run() {
                     result.removeLookupListener(inst);
                     addObjectButton.setEnabled(false);
                     addCursorButton.setEnabled(false);
-                    showSelectionToggleButton.setSelected(false);
+                    showSelectionToggleButton.setSelected(true);
                     showGridToggleButton.setSelected(false);
                     sceneInfoLabel1.setText("");
                     sceneInfoLabel2.setText("");
                     sceneInfoLabel1.setToolTipText("");
                     sceneInfoLabel2.setToolTipText("");
                     close();
                 } else {
-                    showSelectionToggleButton.setSelected(false);
+                    showSelectionToggleButton.setSelected(true);
                     showGridToggleButton.setSelected(false);
                     //TODO: threading
                     if (file != null) {

File: engine/src/core/com/jme3/app/Application.java
Patch:
@@ -210,6 +210,7 @@ private void initAudio(){
         if (settings.getAudioRenderer() != null){
             audioRenderer = JmeSystem.newAudioRenderer(settings);
             audioRenderer.initialize();
+            AudioContext.setAudioRenderer(audioRenderer);
 
             listener = new Listener();
             audioRenderer.setListener(listener);
@@ -544,7 +545,6 @@ public <V> Future<V> enqueue(Callable<V> callable) {
      * Callback from ContextListener.
      */
     public void update(){
-    
         // Make sure the audio renderer is available to callables
         AudioContext.setAudioRenderer(audioRenderer);
         

File: engine/src/test/jme3test/asset/TestAbsoluteLocators.java
Patch:
@@ -54,7 +54,7 @@ public static void main(String[] args){
         AudioData audio = am.loadAudio("Sound/Effects/Gun.wav");
 
         // find a texture
-        Texture tex = am.loadTexture("Textures/Terrain/Pond/Pond.png");
+        Texture tex = am.loadTexture("Textures/Terrain/Pond/Pond.jpg");
 
         if (audio == null)
             throw new RuntimeException("Cannot find audio!");
@@ -64,7 +64,7 @@ public static void main(String[] args){
         if (tex == null)
             throw new RuntimeException("Cannot find texture!");
         else
-            System.out.println("Texture loaded from Textures/Terrain/Pond/Pond.png");
+            System.out.println("Texture loaded from Textures/Terrain/Pond/Pond.jpg");
 
         System.out.println("Success!");
     }

File: engine/src/test/jme3test/bullet/TestBrickTower.java
Patch:
@@ -203,7 +203,7 @@ public void initMaterial() {
         mat2.setTexture("ColorMap", tex2);
 
         mat3 = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
-        TextureKey key3 = new TextureKey("Textures/Terrain/Pond/Pond.png");
+        TextureKey key3 = new TextureKey("Textures/Terrain/Pond/Pond.jpg");
         key3.setGenerateMips(true);
         Texture tex3 = assetManager.loadTexture(key3);
         tex3.setWrap(WrapMode.Repeat);

File: engine/src/test/jme3test/bullet/TestBrickWall.java
Patch:
@@ -177,7 +177,7 @@ public void initMaterial() {
         mat2.setTexture("ColorMap", tex2);
 
         mat3 = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
-        TextureKey key3 = new TextureKey("Textures/Terrain/Pond/Pond.png");
+        TextureKey key3 = new TextureKey("Textures/Terrain/Pond/Pond.jpg");
         key3.setGenerateMips(true);
         Texture tex3 = assetManager.loadTexture(key3);
         tex3.setWrap(WrapMode.Repeat);

File: engine/src/test/jme3test/helloworld/HelloMaterial.java
Patch:
@@ -93,7 +93,7 @@ public void simpleInitApp() {
     rock.setTextureMode(Sphere.TextureMode.Projected); // better quality on spheres
     TangentBinormalGenerator.generate(rock);           // for lighting effect
     Material mat_lit = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
-    mat_lit.setTexture("DiffuseMap", assetManager.loadTexture("Textures/Terrain/Pond/Pond.png"));
+    mat_lit.setTexture("DiffuseMap", assetManager.loadTexture("Textures/Terrain/Pond/Pond.jpg"));
     mat_lit.setTexture("NormalMap", assetManager.loadTexture("Textures/Terrain/Pond/Pond_normal.png"));
     mat_lit.setFloat("Shininess", 5f); // [0,128]
     shiny_rock.setMaterial(mat_lit);

File: engine/src/test/jme3test/helloworld/HelloPhysics.java
Patch:
@@ -146,7 +146,7 @@ public void initMaterials() {
     stone_mat.setTexture("ColorMap", tex2);
 
     floor_mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
-    TextureKey key3 = new TextureKey("Textures/Terrain/Pond/Pond.png");
+    TextureKey key3 = new TextureKey("Textures/Terrain/Pond/Pond.jpg");
     key3.setGenerateMips(true);
     Texture tex3 = assetManager.loadTexture(key3);
     tex3.setWrap(WrapMode.Repeat);

File: engine/src/test/jme3test/terrain/TerrainTestAdvanced.java
Patch:
@@ -131,7 +131,7 @@ public void simpleInitApp() {
         matTerrain.setFloat("DiffuseMap_3_scale", rockScale);
 
         // RIVER ROCK texture
-        Texture riverRock = assetManager.loadTexture("Textures/Terrain/Pond/Pond.png");
+        Texture riverRock = assetManager.loadTexture("Textures/Terrain/Pond/Pond.jpg");
         riverRock.setWrap(WrapMode.Repeat);
         matTerrain.setTexture("DiffuseMap_4", riverRock);
         matTerrain.setFloat("DiffuseMap_4_scale", rockScale);

File: engine/src/core/checkers/quals/DefaultLocation.java
Patch:
@@ -18,7 +18,7 @@ public enum DefaultLocation {
      * explicit ones in <tt>extends</tt> clauses, and implicit upper bounds
      * when no explicit <tt>extends</tt> or <tt>super</tt> clause is
      * present. */
-    // Especially useful for parametrized classes that provide a lot of
+    // Especially useful for parameterized classes that provide a lot of
     // static methods with the same generic parameters as the class.
     UPPER_BOUNDS;
 

File: engine/src/core/com/jme3/animation/AnimChannel.java
Patch:
@@ -175,7 +175,7 @@ public float getTime() {
 
     /**
      * @param time Set the time of the currently playing animation, the time
-     * is clamped from 0 to getAnimMaxTime().
+     * is clamped from 0 to {@link #getAnimMaxTime()}. 
      */
     public void setTime(float time) {
         this.time = FastMath.clamp(time, 0, getAnimMaxTime());
@@ -235,7 +235,7 @@ public void setAnim(String name, float blendTime){
     /**
      * Set the current animation that is played by this AnimChannel.
      * <p>
-     * See {@link #setAnim(java.lang.String, float) }.
+     * See {@link #setAnim(java.lang.String, float)}.
      * The blendTime argument by default is 150 milliseconds.
      * 
      * @param name The name of the animation to play

File: engine/src/core/com/jme3/animation/CompactQuaternionArray.java
Patch:
@@ -41,20 +41,20 @@
 import com.jme3.math.Quaternion;
 
 /**
- * Serialize and compress Quaternion[] by indexing same values
+ * Serialize and compress {@link Quaternion}[] by indexing same values
  * It is converted to float[]
  * @author Lim, YongHoon
  */
 public class CompactQuaternionArray extends CompactArray<Quaternion> implements Savable {
 
     /**
-     * creates a compact quaternion array
+     * creates a compact Quaternion array
      */
     public CompactQuaternionArray() {
     }
 
     /**
-     * creates a compact quaternion array
+     * creates a compact Quaternion array
      * @param dataArray the data array
      * @param index  the indices array
      */

File: engine/src/niftygui/com/jme3/niftygui/NiftyJmeDisplay.java
Patch:
@@ -75,7 +75,7 @@ public InputStream getResourceAsStream(String path) {
             if (info != null){
                 return info.openStream();
             }else{
-                throw new AssetNotFoundException(path);
+                return null;
             }
         }
 

File: sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmeSSAOFilter.java
Patch:
@@ -61,8 +61,8 @@ protected Sheet createSheet() {
         Sheet sheet = super.createSheet();
 
         Sheet.Set set = Sheet.createPropertiesSet();
-        set.setDisplayName("Water");
-        set.setName("Water");
+        set.setDisplayName("SSAO");
+        set.setName("SSAO");
         SSAOFilter obj = (SSAOFilter) filter;
 
         if (obj == null) {

File: engine/src/core/com/jme3/animation/AnimChannel.java
Patch:
@@ -344,10 +344,11 @@ void update(float tpf) {
         time += tpf * speed;
 
         if (animation.getLength() > 0){
-            if (time >= animation.getLength())
+            if (time >= animation.getLength()) {
                 control.notifyAnimCycleDone(this, animation.getName());
-            else if (time < 0)
+            } else if (time < 0) {
                 control.notifyAnimCycleDone(this, animation.getName());
+            } 
         }
 
         time = clampWrapTime(time, animation.getLength(), loopMode);

File: engine/src/core/com/jme3/animation/BoneAnimation.java
Patch:
@@ -113,6 +113,9 @@ public void setTime(float time, float blendAmount, AnimControl control, AnimChan
         BitSet affectedBones = channel.getAffectedBones();
         Skeleton skeleton = control.getSkeleton();
         
+        if (tracks == null)
+            return;
+        
         for (int i = 0; i < tracks.length; i++) {
             if (affectedBones == null
                     || affectedBones.get(tracks[i].getTargetBoneIndex())) {

File: engine/src/blender/com/jme3/scene/plugins/blender/modifiers/ObjectAnimationModifier.java
Patch:
@@ -1,5 +1,6 @@
 package com.jme3.scene.plugins.blender.modifiers;
 
+import com.jme3.animation.Animation;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -96,7 +97,7 @@ public ObjectAnimationModifier(Structure objectStructure,
 			BoneAnimation boneAnimation = new BoneAnimation(
 					objectAnimationName, stop - start);
 			boneAnimation.setTracks(tracks);
-			ArrayList<BoneAnimation> animations = new ArrayList<BoneAnimation>(
+			ArrayList<Animation> animations = new ArrayList<Animation>(
 					1);
 			animations.add(boneAnimation);
 

File: engine/src/core/com/jme3/app/AppTask.java
Patch:
@@ -71,7 +71,6 @@ public AppTask(Callable<V> callable) {
     }
 
     public boolean cancel(boolean mayInterruptIfRunning) {
-        // TODO mayInterruptIfRunning was ignored in previous code, should this param be removed?
         stateLock.lock();
         try {
             if (result != null) {

File: engine/src/core/com/jme3/scene/mesh/WrappedIndexBuffer.java
Patch:
@@ -3,7 +3,6 @@
 import com.jme3.scene.Mesh;
 import com.jme3.scene.Mesh.Mode;
 import com.jme3.scene.VertexBuffer.Type;
-import com.jme3.util.BufferUtils;
 import java.nio.Buffer;
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;

File: engine/src/niftygui/com/jme3/niftygui/SoundDeviceJme.java
Patch:
@@ -50,7 +50,7 @@ public SoundDeviceJme(AssetManager assetManager, AudioRenderer ar){
     }
 
     public SoundHandle loadSound(SoundSystem soundSystem, String filename) {
-        AudioNode an = new AudioNode(ar, assetManager, filename, false);
+        AudioNode an = new AudioNode(assetManager, filename, false);
         an.setPositional(false);
         return new SoundHandleJme(ar, an);
     }

File: engine/src/ogre/com/jme3/scene/plugins/ogre/AnimData.java
Patch:
@@ -32,16 +32,16 @@
 
 package com.jme3.scene.plugins.ogre;
 
-import com.jme3.animation.BoneAnimation;
+import com.jme3.animation.Animation;
 import com.jme3.animation.Skeleton;
 import java.util.ArrayList;
 
 public class AnimData {
 
     public final Skeleton skeleton;
-    public final ArrayList<BoneAnimation> anims;
+    public final ArrayList<Animation> anims;
 
-    public AnimData(Skeleton skeleton, ArrayList<BoneAnimation> anims) {
+    public AnimData(Skeleton skeleton, ArrayList<Animation> anims) {
         this.skeleton = skeleton;
         this.anims = anims;
     }

File: engine/src/test/jme3test/TestChooser.java
Patch:
@@ -196,6 +196,9 @@ private Class load(String name) {
             } catch (NoSuchMethodException e) {
                 // class does not have a main method
                 return null;
+            } catch (UnsupportedClassVersionError e){
+                // unsupported version
+                return null;
             }
         }
         return null;

File: engine/src/test/jme3test/effect/TestEverything.java
Patch:
@@ -42,14 +42,12 @@
 import com.jme3.math.Vector3f;
 import com.jme3.post.HDRRenderer;
 import com.jme3.renderer.Caps;
-import com.jme3.renderer.queue.RenderQueue.Bucket;
 import com.jme3.renderer.queue.RenderQueue.ShadowMode;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Node;
 import com.jme3.scene.Spatial;
 import com.jme3.scene.Spatial.CullHint;
 import com.jme3.scene.shape.Box;
-import com.jme3.scene.shape.Sphere;
 import com.jme3.shadow.BasicShadowRenderer;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/multiview/widgets/WidgetFactory.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class WidgetFactory {
 
-    public static MaterialPropertyWidget getWidget(MaterialProperty prop, ProjectAssetManager manager){
+    public static MaterialPropertyWidget getWidget(MaterialProperty prop, ProjectAssetManager manager){      
         MaterialPropertyWidget widget;
         if("Texture2D".equals(prop.getType())){
             widget=new TexturePanel(manager);
@@ -68,7 +68,7 @@ else if("BlendMode".equals(prop.getType())){
             widget.setProperty(prop);
             return widget;
         }
-        widget = new TextPanel();
+        widget = new TextPanel();      
         widget.setProperty(prop);
         return widget;
     }

File: sdk/jme3-core/src/com/jme3/gde/core/properties/TextureBrowser.java
Patch:
@@ -44,7 +44,6 @@
 import javax.swing.ImageIcon;
 import javax.swing.event.TreeSelectionEvent;
 import javax.swing.event.TreeSelectionListener;
-import javax.swing.text.Position.Bias;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.TreeNode;
 import javax.swing.tree.TreePath;
@@ -75,7 +74,7 @@ public TextureBrowser(java.awt.Frame parent, boolean modal, ProjectAssetManager
         initComponents();
         loadAvailableTextures();
         setSelectedTexture((Texture) editor.getValue());
-        setLocationRelativeTo(null);
+        setLocationRelativeTo(null); 
     }
 
     /** This method is called from within the constructor to
@@ -266,7 +265,6 @@ private void loadAvailableTextures() {
     private void setSelectedTexture(Texture texture) {
         if (texture != null) {
             Logger.getLogger(TextureBrowser.class.getName()).finer("Looking for Texture: " + texture.getName());
-            System.out.println("texture : " + texture.getName());
             String[] path = ("/" + texture.getName()).split("/");
             TreePath parent = new TreePath((TreeNode) jTree1.getModel().getRoot());
             jTree1.expandPath(TreeUtil.buildTreePath(jTree1, parent, path, 0, true));

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeParticleEmitter.java
Patch:
@@ -149,7 +149,7 @@ public ParticleEmitter getEmitter() {
     }
 
     private Property createButtonProperty() {
-        return new PropertySupport.ReadWrite("emit", Object.class, "Emit all particles", "Click here to emit all particles of this emitter ") {
+        return new PropertySupport.ReadWrite<Object>("emit", Object.class, "Emit all particles", "Click here to emit all particles of this emitter ") {
 
             JmeParticleEmitterButtonProperty pe;
 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/NewSpatialPopup.java
Patch:
@@ -116,10 +116,10 @@ public void actionPerformed(ActionEvent e) {
                 public Void call() throws Exception {
                     ParticleEmitter emit = new ParticleEmitter("Emitter", ParticleMesh.Type.Triangle, 200);
                     emit.setShape(new EmitterSphereShape(Vector3f.ZERO, 1f));
-                    emit.setGravity(0);
+                    emit.setGravity(new Vector3f(0, 0, 0));
                     emit.setLowLife(5);
                     emit.setHighLife(10);
-                    emit.setInitialVelocity(new Vector3f(0, 0, 0));
+                    emit.getParticleInfluencer().setInitialVelocity(new Vector3f(0, 0, 0));
                     emit.setImagesX(15);
                     Material mat = new Material(SceneApplication.getApplication().getAssetManager(), "Common/MatDefs/Misc/Particle.j3md");
                     emit.setMaterial(mat);

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeParticleEmitter.java
Patch:
@@ -119,7 +119,7 @@ protected Sheet createSheet() {
 
     @Override
     public void propertyChange(String name, Object before, Object after) {
-        if (!name.equals("Emitt all particles")) {
+        if (!name.equals("Emit all particles")) {
             fireSave(true);
             firePropertyChange(name, before, after);
         }
@@ -149,7 +149,7 @@ public ParticleEmitter getEmitter() {
     }
 
     private Property createButtonProperty() {
-        return new PropertySupport.ReadWrite("emitt", Object.class, "Emitt all particles", "Click here to emitt all particles of this emitter ") {
+        return new PropertySupport.ReadWrite("emit", Object.class, "Emit all particles", "Click here to emit all particles of this emitter ") {
 
             JmeParticleEmitterButtonProperty pe;
 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeParticleEmitterButtonProperty.java
Patch:
@@ -38,7 +38,7 @@ public void attachEnv(PropertyEnv env) {
 
     public InplaceEditor getInplaceEditor() {
         if (ed == null) {
-            ed = new ButtonInplaceEditor("Emitt!");
+            ed = new ButtonInplaceEditor("Emit!");
             ed.addActionListener(new ActionListener() {
 
                 public void actionPerformed(ActionEvent e) {

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ModifierHelper.java
Patch:
@@ -699,7 +699,7 @@ protected Node applyMirrorModifierData(Node node, Modifier modifier, DataReposit
 
                             //modifying clone indexes
                             int vertexIndex = (i - mirrorIndex) / 3;
-                            if (vertexIndex % 3 == 0) {
+                            if (vertexIndex % 3 == 0 && vertexIndex<cloneIndexes.limit()) {
                                 int index = cloneIndexes.get(vertexIndex + 2);
                                 cloneIndexes.put(vertexIndex + 2, cloneIndexes.get(vertexIndex + 1));
                                 cloneIndexes.put(vertexIndex + 1, index);

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ModifierHelper.java
Patch:
@@ -32,7 +32,7 @@
 package com.jme3.scene.plugins.blender.helpers.v249;
 
 import java.nio.FloatBuffer;
-import java.nio.ShortBuffer;
+import java.nio.IntBuffer;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -678,7 +678,7 @@ protected Node applyMirrorModifierData(Node node, Modifier modifier, DataReposit
                         FloatBuffer cloneBindPosePosition = clone.getFloatBuffer(Type.BindPosePosition);
                         FloatBuffer cloneNormals = clone.getFloatBuffer(Type.Normal);
                         FloatBuffer cloneBindPoseNormals = clone.getFloatBuffer(Type.BindPoseNormal);
-                        ShortBuffer cloneIndexes = (ShortBuffer) clone.getBuffer(Type.Index).getData();
+                        IntBuffer cloneIndexes = (IntBuffer) clone.getBuffer(Type.Index).getData();
 
                         // modyfying data
                         for (int i = mirrorIndex; i < clonePosition.limit(); i += 3) {
@@ -700,7 +700,7 @@ protected Node applyMirrorModifierData(Node node, Modifier modifier, DataReposit
                             //modifying clone indexes
                             int vertexIndex = (i - mirrorIndex) / 3;
                             if (vertexIndex % 3 == 0) {
-                                short index = cloneIndexes.get(vertexIndex + 2);
+                                int index = cloneIndexes.get(vertexIndex + 2);
                                 cloneIndexes.put(vertexIndex + 2, cloneIndexes.get(vertexIndex + 1));
                                 cloneIndexes.put(vertexIndex + 1, index);
                             }

File: engine/src/core/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -768,6 +768,7 @@ public int collideWithRay(Ray ray, CollisionResults results) {
 
             CollisionResult result = new CollisionResult(point, distance);
             results.addCollision(result);
+            vars.release();
             return 1;
         }
 

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/multiview/widgets/FloatPanel.java
Patch:
@@ -45,7 +45,7 @@ private void initComponents() {
 
         jLabel1.setText(org.openide.util.NbBundle.getMessage(FloatPanel.class, "FloatPanel.jLabel1.text")); // NOI18N
         jLabel1.setMaximumSize(new java.awt.Dimension(100, 16));
-        jLabel1.setPreferredSize(new java.awt.Dimension(100, 0));
+        jLabel1.setPreferredSize(new java.awt.Dimension(100, 16));
         jToolBar1.add(jLabel1);
 
         jPanel1.setBackground(new java.awt.Color(204, 204, 204));
@@ -76,7 +76,7 @@ public void stateChanged(javax.swing.event.ChangeEvent evt) {
         this.setLayout(layout);
         layout.setHorizontalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
-            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, Short.MAX_VALUE)
+            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
         );
         layout.setVerticalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/multiview/widgets/IntPanel.java
Patch:
@@ -45,12 +45,11 @@ private void initComponents() {
 
         jLabel1.setText(org.openide.util.NbBundle.getMessage(IntPanel.class, "IntPanel.jLabel1.text")); // NOI18N
         jLabel1.setMaximumSize(new java.awt.Dimension(100, 16));
-        jLabel1.setPreferredSize(new java.awt.Dimension(100, 0));
+        jLabel1.setPreferredSize(new java.awt.Dimension(100, 16));
         jToolBar1.add(jLabel1);
 
         jPanel1.setBackground(new java.awt.Color(204, 204, 204));
         jPanel1.setPreferredSize(new java.awt.Dimension(100, 0));
-        jPanel1.setSize(new java.awt.Dimension(0, 0));
 
         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
         jPanel1.setLayout(jPanel1Layout);
@@ -77,7 +76,7 @@ public void stateChanged(javax.swing.event.ChangeEvent evt) {
         this.setLayout(layout);
         layout.setHorizontalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
-            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, Short.MAX_VALUE)
+            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
         );
         layout.setVerticalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/multiview/widgets/ColorPanel.java
Patch:
@@ -46,7 +46,7 @@ private void initComponents() {
         jToolBar1.setRollover(true);
 
         jLabel1.setText(org.openide.util.NbBundle.getMessage(ColorPanel.class, "ColorPanel.jLabel1.text")); // NOI18N
-        jLabel1.setPreferredSize(new java.awt.Dimension(100, 0));
+        jLabel1.setPreferredSize(new java.awt.Dimension(100, 16));
         jToolBar1.add(jLabel1);
 
         jPanel1.setBackground(new java.awt.Color(204, 204, 204));

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/multiview/widgets/TextPanel.java
Patch:
@@ -46,7 +46,7 @@ private void initComponents() {
         jToolBar1.setRollover(true);
 
         jLabel1.setText(org.openide.util.NbBundle.getMessage(TextPanel.class, "TextPanel.jLabel1.text")); // NOI18N
-        jLabel1.setPreferredSize(new java.awt.Dimension(100, 0));
+        jLabel1.setPreferredSize(new java.awt.Dimension(100, 16));
         jToolBar1.add(jLabel1);
 
         jPanel1.setBackground(new java.awt.Color(204, 204, 204));

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/MaterialPropertyEditor.java
Patch:
@@ -137,7 +137,7 @@ private void applyMaterial(final String text) {
 
                 public Void call() throws Exception {
                     SceneRequest request = SceneApplication.getApplication().getCurrentSceneRequest();
-                    ((DesktopAssetManager) request.getManager()).deleteFromCache(new AssetKey(text));
+                    ((DesktopAssetManager) request.getManager()).deleteFromCache(new MaterialKey(text));
                     Material localMaterial = (Material) request.getManager().loadMaterial(text);
                     if (localMaterial != null) {
                         material = localMaterial;

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/MaterialPropertyEditor.java
Patch:
@@ -138,7 +138,7 @@ private void applyMaterial(final String text) {
                 public Void call() throws Exception {
                     SceneRequest request = SceneApplication.getApplication().getCurrentSceneRequest();
                     ((DesktopAssetManager) request.getManager()).deleteFromCache(new AssetKey(text));
-                    Material localMaterial = (Material) request.getManager().loadAsset(text);
+                    Material localMaterial = (Material) request.getManager().loadMaterial(text);
                     if (localMaterial != null) {
                         material = localMaterial;
                     }

File: sdk/jme3-core/src/com/jme3/gde/core/scene/controller/toolbars/CameraToolbar.java
Patch:
@@ -177,7 +177,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
     }// </editor-fold>//GEN-END:initComponents
 
 private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
-    viewMenu.show(viewButton, viewButton.getX(), viewButton.getY() + viewButton.getHeight());
+    viewMenu.show(viewButton, 0,- viewMenu.getHeight());
 }//GEN-LAST:event_viewButtonActionPerformed
 
 private void frontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frontMenuItemActionPerformed

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/actions/SwitchBackViewAction.java
Patch:
@@ -25,7 +25,7 @@ public void actionPerformed(ActionEvent e) {
 
         if (svtc.hasFocus()) {
 
-            SceneApplication.getApplication().getActiveCamController().switchToView(View.Back);
+            SceneApplication.getApplication().getActiveCameraController().switchToView(View.Back);
         }
     }
 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/actions/SwitchBottomViewAction.java
Patch:
@@ -25,7 +25,7 @@ public void actionPerformed(ActionEvent e) {
 
         if (svtc.hasFocus()) {
 
-            SceneApplication.getApplication().getActiveCamController().switchToView(View.Bottom);
+            SceneApplication.getApplication().getActiveCameraController().switchToView(View.Bottom);
         }
     }
 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/actions/SwitchFrontViewAction.java
Patch:
@@ -26,7 +26,7 @@ public void actionPerformed(ActionEvent e) {
 
         if (svtc.hasFocus()) {
 
-            SceneApplication.getApplication().getActiveCamController().switchToView(View.Front);
+            SceneApplication.getApplication().getActiveCameraController().switchToView(View.Front);
         }
     }
 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/actions/SwitchLeftViewAction.java
Patch:
@@ -25,7 +25,7 @@ public void actionPerformed(ActionEvent e) {
 
         if (svtc.hasFocus()) {
 
-            SceneApplication.getApplication().getActiveCamController().switchToView(View.Left);
+            SceneApplication.getApplication().getActiveCameraController().switchToView(View.Left);
         }
     }
 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/actions/SwitchRightViewAction.java
Patch:
@@ -25,7 +25,7 @@ public void actionPerformed(ActionEvent e) {
 
         if (svtc.hasFocus()) {
 
-            SceneApplication.getApplication().getActiveCamController().switchToView(View.Right);
+            SceneApplication.getApplication().getActiveCameraController().switchToView(View.Right);
         }
     }
 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/actions/SwitchTopViewAction.java
Patch:
@@ -25,7 +25,7 @@ public void actionPerformed(ActionEvent e) {
 
         if (svtc.hasFocus()) {
 
-            SceneApplication.getApplication().getActiveCamController().switchToView(View.Top);
+            SceneApplication.getApplication().getActiveCameraController().switchToView(View.Top);
         }
     }
 }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/actions/ToggleOrthoPerspAction.java
Patch:
@@ -28,7 +28,7 @@ public void actionPerformed(ActionEvent e) {
 
         SceneViewerTopComponent svtc = SceneViewerTopComponent.findInstance();
         if (svtc.hasFocus()) {
-            SceneApplication.getApplication().getActiveCamController().toggleOrthoPerspMode();
+            SceneApplication.getApplication().getActiveCameraController().toggleOrthoPerspMode();
         }
 
     }

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/TextureHelper.java
Patch:
@@ -1715,7 +1715,7 @@ protected Texture loadTextureFromFile(String name, DataRepository dataRepository
 				Texture tex = dataRepository.getAssetManager().loadTexture(texKey);
 				image = tex.getImage();
 			} catch (AssetNotFoundException e) {
-				LOGGER.warning("Asset nof found: " + e.getLocalizedMessage());
+				LOGGER.warning("Asset not found: " + e.getLocalizedMessage());
 			}
 		}
 

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/MaterialHelper.java
Patch:
@@ -274,7 +274,7 @@ public Material toMaterial(Structure structure, DataRepository dataRepository) t
 									}
 								}
 								if ((mapto & 0x02) != 0) {// Nor
-									Texture normalMapTexture = textureHelper.convertToNormalMapTexture(texture, ((Number)tex.getFieldValue("norfac")).floatValue());
+									Texture normalMapTexture = textureHelper.convertToNormalMapTexture(texture, ((Number)textureLink.getFieldValue("norfac")).floatValue());
 									result.setTexture(TEXTURE_TYPE_NORMAL, normalMapTexture);
 									if (vertexColor) {
 										result.setBoolean(shadeless ? "VertexColor" : "UseVertexColor", false);

File: sdk/jme3-core/src/com/jme3/gde/core/assets/SpatialAssetDataObject.java
Patch:
@@ -77,7 +77,7 @@ public Spatial loadAsset() {
         FileLock lock = null;
         try {
             lock = getPrimaryFile().lock();
-           //mgr.deleteFromCache(new ModelKey(assetKey));
+            mgr.deleteFromCache(new ModelKey(assetKey));
             Spatial spatial = mgr.loadModel(assetKey);
             savable = spatial;
             lock.releaseLock();

File: engine/src/core/com/jme3/app/Application.java
Patch:
@@ -158,7 +158,7 @@ private void initAssetManager(){
                 } catch (MalformedURLException ex) {
                 }
                 if (url == null) {
-                    url = Application.class.getResource(assetCfg);
+                    url = Application.class.getClassLoader().getResource(assetCfg);
                     if (url == null) {
                         logger.log(Level.SEVERE, "Unable to access AssetConfigURL in asset config:{0}", assetCfg);
                         return;

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglDisplay.java
Patch:
@@ -126,7 +126,7 @@ protected void createContext(AppSettings settings) throws LWJGLException{
         
         Display.setVSyncEnabled(settings.isVSync());
         
-        if (created.get()){
+        if (created.get() && !pixelFormatChanged){
             Display.releaseContext();
             Display.makeCurrent();
             Display.update();

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/MaterialPropertyEditor.java
Patch:
@@ -41,6 +41,7 @@
 import com.jme3.gde.core.properties.SceneExplorerProperty;
 import com.jme3.gde.core.properties.SceneExplorerPropertyEditor;
 import com.jme3.material.Material;
+import com.jme3.asset.MaterialKey;
 import java.awt.Component;
 import java.awt.Graphics;
 import java.awt.Rectangle;
@@ -116,7 +117,7 @@ public void setAsText(final String text) throws IllegalArgumentException {
                 }
                 newFile = currentFolder.createData(currentFile.getName() + "_" + i, "j3m");
                 EditableMaterialFile properties = new EditableMaterialFile(newFile, pm);
-                material.setAssetName(pm.getRelativeAssetPath(newFile.getPath()));
+                material.setKey(new MaterialKey(pm.getRelativeAssetPath(newFile.getPath())));
                 properties.setAsMaterial(material);
                 currentFolder.refresh();
                 applyMaterial(material.getAssetName());

File: engine/src/test/jme3test/material/TestBumpModel.java
Patch:
@@ -60,12 +60,12 @@ public static void main(String[] args){
     @Override
     public void simpleInitApp() {
         Spatial signpost = (Spatial) assetManager.loadAsset(new OgreMeshKey("Models/Sign Post/Sign Post.mesh.xml", null));
-        signpost.setMaterial( (Material) assetManager.loadAsset(new AssetKey("Models/Sign Post/Sign Post.j3m")));
+        signpost.setMaterial( (Material) assetManager.loadMaterial("Models/Sign Post/Sign Post.j3m"));
         TangentBinormalGenerator.generate(signpost);
         rootNode.attachChild(signpost);
 
         lightMdl = new Geometry("Light", new Sphere(10, 10, 0.1f));
-        lightMdl.setMaterial( (Material) assetManager.loadAsset(new AssetKey("Common/Materials/RedColor.j3m")));
+        lightMdl.setMaterial( (Material) assetManager.loadMaterial("Common/Materials/RedColor.j3m"));
         rootNode.attachChild(lightMdl);
 
         // flourescent main light

File: engine/src/test/jme3test/model/TestMonkeyHead.java
Patch:
@@ -63,7 +63,7 @@ public void simpleInitApp() {
         rootNode.attachChild(bumpy);
 
         lightMdl = new Geometry("Light", new Sphere(10, 10, 0.1f));
-        lightMdl.setMaterial( (Material) assetManager.loadAsset(new AssetKey("Common/Materials/RedColor.j3m")));
+        lightMdl.setMaterial(assetManager.loadMaterial("Common/Materials/RedColor.j3m"));
         rootNode.attachChild(lightMdl);
 
         // flourescent main light

File: engine/src/test/jme3test/model/shape/TestSphere.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String[] args){
     @Override
     public void simpleInitApp() {
         Sphere sphMesh = new Sphere(14, 14, 1);
-        Material solidColor = (Material) assetManager.loadAsset("Common/Materials/RedColor.j3m");
+        Material solidColor = assetManager.loadMaterial("Common/Materials/RedColor.j3m");
 
         for (int y = -5; y < 5; y++){
             for (int x = -5; x < 5; x++){

File: engine/src/test/jme3test/stress/TestLeakingGL.java
Patch:
@@ -66,7 +66,7 @@ public void simpleInitApp() {
 
         // this will make sure all spheres are rendered always
         rootNode.setCullHint(CullHint.Never);
-        solidColor = (Material) assetManager.loadAsset("Common/Materials/RedColor.j3m");
+        solidColor = assetManager.loadMaterial("Common/Materials/RedColor.j3m");
         cam.setLocation(new Vector3f(0, 5, 0));
         cam.lookAt(Vector3f.ZERO, Vector3f.UNIT_Y);
 

File: engine/src/core/com/jme3/audio/AudioNode.java
Patch:
@@ -200,8 +200,6 @@ public AudioNode(AudioRenderer audioRenderer, AssetManager assetManager, String
      * @param name The filename of the audio file
      * @param stream If true, the audio will be streamed gradually from disk, 
      *               otherwise, it will be buffered.
-     *
-     * @deprecated AudioRenderer parameter is ignored.
      */
     public AudioNode(AssetManager assetManager, String name, boolean stream) {
         this(assetManager, name, stream, false);
@@ -213,6 +211,8 @@ public AudioNode(AssetManager assetManager, String name, boolean stream) {
      * @param audioRenderer The audio renderer to use for playing. Cannot be null.
      * @param assetManager The asset manager to use to load the audio file
      * @param name The filename of the audio file
+     * 
+     * @deprecated AudioRenderer parameter is ignored.
      */
     public AudioNode(AudioRenderer audioRenderer, AssetManager assetManager, String name) {
         this(assetManager, name, false);

File: engine/src/core/com/jme3/bounding/BoundingSphere.java
Patch:
@@ -258,7 +258,6 @@ private void recurseMini(FloatBuffer points, int p, int b, int ap) {
                     BufferUtils.setInBuffer(tempC, points, j + ap);
                     BufferUtils.setInBuffer(tempB, points, j - 1 + ap);
                 }
-                vars.release();
                 recurseMini(points, i, b + 1, ap + 1);
 
             }

File: engine/src/desktop/com/jme3/asset/DesktopAssetManager.java
Patch:
@@ -291,7 +291,7 @@ public Texture loadTexture(TextureKey key){
     }
 
     public Material loadMaterial(String name){
-        return (Material) loadAsset(new AssetKey(name));
+        return (Material) loadAsset(new MaterialKey(name));
     }
 
     /**

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -215,7 +215,7 @@ private void applyMaterial(Geometry geom, String matName) {
             }
             if (mat == null) {
                 logger.log(Level.WARNING, "Material {0} not found. Applying default material", matName);
-                mat = (Material) assetManager.loadAsset(new AssetKey("Common/Materials/RedColor.j3m"));
+                mat = (Material) assetManager.loadMaterial("Common/Materials/RedColor.j3m");
             }
         }
 

File: engine/src/test/jme3test/audio/AudioApp.java
Patch:
@@ -35,6 +35,7 @@
 import com.jme3.audio.AudioRenderer;
 import com.jme3.asset.AssetManager;
 import com.jme3.asset.DesktopAssetManager;
+import com.jme3.audio.AudioContext;
 import com.jme3.audio.Listener;
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeSystem;
@@ -60,6 +61,7 @@ public AudioApp(){
     }
 
     public void initAudioApp(){
+        AudioContext.setAudioRenderer(audioRenderer);
     }
 
     public void updateAudioApp(float tpf){

File: engine/src/test/jme3test/audio/TestAmbient.java
Patch:
@@ -51,10 +51,10 @@ public static void main(String[] args){
 
     @Override
     public void initAudioApp(){
-        waves  = new AudioNode(audioRenderer, assetManager, "Sound/Environment/Ocean Waves.ogg", false);
+        waves  = new AudioNode(assetManager, "Sound/Environment/Ocean Waves.ogg", false);
         waves.setPositional(true);
 
-        nature = new AudioNode(audioRenderer, assetManager, "Sound/Environment/Nature.ogg", true);
+        nature = new AudioNode(assetManager, "Sound/Environment/Nature.ogg", true);
 //        river  = new AudioSource(manager, "sounds/river.ogg");
 
 //        float[] eax = new float[]

File: engine/src/test/jme3test/audio/TestDoppler.java
Patch:
@@ -66,16 +66,14 @@ public static void main(String[] args){
 
     @Override
     public void initAudioApp(){
-        assetManager.registerLocator("C:\\", FileLocator.class);
-        
         Quaternion q = new Quaternion();
         q.lookAt(new Vector3f(0, 0, -1f), Vector3f.UNIT_Y);
         listener.setRotation(q);
         
         audioRenderer.setEnvironment(Environment.Dungeon);
         AL10.alDistanceModel(AL11.AL_EXPONENT_DISTANCE);
         
-        ufo  = new AudioNode(audioRenderer, assetManager, "test.ogg", false);
+        ufo  = new AudioNode(assetManager, "Sound/Effects/Beep.ogg", false);
         ufo.setPositional(true);
         ufo.setLooping(true);
         ufo.setReverbEnabled(true);

File: engine/src/test/jme3test/audio/TestMusicStreaming.java
Patch:
@@ -49,7 +49,7 @@ public void updateAudioApp(float tpf){
     @Override
     public void initAudioApp(){
         assetManager.registerLocator("http://www.vorbis.com/music/", UrlLocator.class);
-        AudioNode src = new AudioNode(audioRenderer, assetManager, "Lumme-Badloop.ogg", true);
+        AudioNode src = new AudioNode(assetManager, "Lumme-Badloop.ogg", true);
         audioRenderer.playSource(src);
     }
 }
\ No newline at end of file

File: engine/src/test/jme3test/bullet/TestWalkingChar.java
Patch:
@@ -262,7 +262,7 @@ private void createTerrain() {
         rock.setWrap(WrapMode.Repeat);
         matRock.setTexture("DiffuseMap_2", rock);
         matRock.setFloat("DiffuseMap_2_scale", 128);
-        Texture normalMap0 = assetManager.loadTexture("Textures/Terrain/splat/grass_normal.png");
+        Texture normalMap0 = assetManager.loadTexture("Textures/Terrain/splat/grass_normal.jpg");
         normalMap0.setWrap(WrapMode.Repeat);
         Texture normalMap1 = assetManager.loadTexture("Textures/Terrain/splat/dirt_normal.png");
         normalMap1.setWrap(WrapMode.Repeat);

File: engine/src/test/jme3test/collision/TestRayCasting.java
Patch:
@@ -57,7 +57,7 @@ public void simpleInitApp() {
 //        flyCam.setEnabled(false);
 
         // load material
-        Material mat = (Material) assetManager.loadAsset(new AssetKey("Interface/Logo/Logo.j3m"));
+        Material mat = (Material) assetManager.loadMaterial("Interface/Logo/Logo.j3m");
 
         Mesh q = new Mesh();
         q.setBuffer(Type.Position, 3, new float[]

File: engine/src/test/jme3test/effect/TestEverything.java
Patch:
@@ -128,7 +128,7 @@ public void setupLighting(){
     }
 
     public void setupFloor(){
-        Material mat = assetManager.loadMaterial("Textures/Terrain/Cobblestone/Cobblestone.j3m");
+        Material mat = assetManager.loadMaterial("Textures/Terrain/BrickWall/BrickWall.j3m");
         mat.getTextureParam("DiffuseMap").getTextureValue().setWrap(WrapMode.Repeat);
         mat.getTextureParam("NormalMap").getTextureValue().setWrap(WrapMode.Repeat);
         mat.getTextureParam("ParallaxMap").getTextureValue().setWrap(WrapMode.Repeat);

File: engine/src/test/jme3test/terrain/TerrainGridAlphaMapTest.java
Patch:
@@ -87,6 +87,7 @@ public void simpleInitApp() {
         // TERRAIN TEXTURE material
         matRock = new Material(assetManager, "Common/MatDefs/Terrain/TerrainLighting.j3md");
         matRock.setBoolean("useTriPlanarMapping", false);
+        matRock.setBoolean("isTerrainGrid", true);
 
         // GRASS texture
         Texture grass = assetManager.loadTexture("Textures/Terrain/splat/grass.jpg");
@@ -189,7 +190,7 @@ public Material tileLoaded(Material material, Vector3f cell) {
             }
 
             public void tileAttached(Vector3f cell, TerrainQuad quad) {
-                Texture alpha = assetManager.loadTexture("Scenes/TerrainAlphaTest/alphamap_" + Math.abs((int) (cell.x % 2)) * 512 + "_" + Math.abs((int) (cell.y % 2) * 512) + ".png");
+                Texture alpha = assetManager.loadTexture("Scenes/TerrainAlphaTest/alphamap_" + Math.abs((int) (cell.x % 2)) * 512 + "_" + Math.abs((int) (cell.z % 2) * 512) + ".png");
                 quad.getMaterial().setTexture("AlphaMap", alpha);
                 if (usePhysics) {
                     quad.addControl(new RigidBodyControl(new HeightfieldCollisionShape(quad.getHeightMap(), terrain.getLocalScale()), 0));

File: engine/src/android/com/jme3/asset/plugins/AndroidLocator.java
Patch:
@@ -67,7 +67,7 @@ public AssetInfo locate(com.jme3.asset.AssetManager manager, AssetKey key)
         } 
         catch (IOException ex) 
         {
-            logger.log(Level.WARNING, "Failed to locate {0} ", sAssetPath);
+            //logger.log(Level.WARNING, "Failed to locate {0} ", sAssetPath);
         }
         return null;
     }

File: engine/src/core/com/jme3/util/BufferUtils.java
Patch:
@@ -73,7 +73,7 @@ public final class BufferUtils {
     //       the same hashCode().
     //       It would be better to just keep a straight list of weak references
     //       and clean out the dead every time a new buffer is allocated.
-    //       WeakHashMap is doing that anyway... to there is no extra expense 
+    //       WeakHashMap is doing that anyway... so there is no extra expense 
     //       incurred.
     //       Recommend a ConcurrentLinkedQueue of WeakReferences since it
     //       supports the threading semantics required with little extra overhead. 

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/SceneExplorerTopComponent.java
Patch:
@@ -95,7 +95,7 @@ private void initActions() {
         CopyAction copy = SystemAction.get(CopyAction.class);
         getActionMap().put(copy.getActionMapKey(), ExplorerUtils.actionCopy(explorerManager));
         PasteAction paste = SystemAction.get(PasteAction.class);
-        getActionMap().put(paste.getActionMapKey(), ExplorerUtils.actionPaste(explorerManager));
+        getActionMap().put(paste.getActionMapKey(), ExplorerUtils.actionPaste(explorerManager));         
         DeleteAction delete = SystemAction.get(DeleteAction.class);
         getActionMap().put(delete.getActionMapKey(), ExplorerUtils.actionDelete(explorerManager, true));
     }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/SceneViewerTopComponent.java
Patch:
@@ -324,8 +324,10 @@ protected String preferredID() {
     public UndoRedo getUndoRedo() {
         return Lookup.getDefault().lookup(UndoRedo.class);
     }
+
     
     public void addAdditionnalToolbar(JToolBar tb){
-        jToolBar1.add(tb,4);
+     //   jToolBar1.add(tb,4);
     }
+
 }

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ModifierHelper.java
Patch:
@@ -232,6 +232,7 @@ public void readModifiers(Structure objectStructure, DataRepository dataReposito
                     Structure armatureObject = (Structure) dataRepository.getLoadedFeature(pArmatureObject.getOldMemoryAddress(), LoadedFeatureDataType.LOADED_STRUCTURE);
                     if (armatureObject == null) {// we check this first not to fetch the structure unnecessary
                         armatureObject = pArmatureObject.fetchData(dataRepository.getInputStream()).get(0);
+                        objectHelper.toObject(armatureObject, dataRepository);
                     }
                     modifierAdditionalData = armatureObject.getOldMemoryAddress();
                     ArmatureHelper armatureHelper = dataRepository.getHelper(ArmatureHelper.class);

File: sdk/jme3-core/src/com/jme3/gde/core/scene/controller/AbstractCameraController.java
Patch:
@@ -44,11 +44,8 @@
 import com.jme3.math.Vector3f;
 import com.jme3.renderer.Camera;
 import com.jme3.renderer.RenderManager;
-import java.awt.FocusTraversalPolicy;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
-import java.util.logging.Logger;
 import org.openide.util.Exceptions;
 
 /**

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/ComposerCameraController.java
Patch:
@@ -27,7 +27,6 @@
 import com.jme3.gde.core.scene.SceneApplication;
 import com.jme3.gde.core.scene.controller.AbstractCameraController;
 import com.jme3.gde.core.sceneexplorer.nodes.JmeNode;
-import com.jme3.gde.core.sceneviewer.SceneViewerTopComponent;
 import com.jme3.input.KeyInput;
 import com.jme3.input.event.KeyInputEvent;
 import com.jme3.math.Vector2f;

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/TerrainToolController.java
Patch:
@@ -125,7 +125,9 @@ private void doShowEditTool(TerrainTool tool) {
             terrainTool.radiusChanged(toolRadius);
             terrainTool.weightChanged(toolWeight);
             terrainTool.activate(manager, toolsNode);
-        }
+            cameraController.setUseCameraControls(false);
+        } else
+            cameraController.setUseCameraControls(true);
     }
 
     public void setEditToolSize(final float size) {

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -1031,7 +1031,7 @@ public void read(JmeImporter im) throws IOException {
                 defName = "Common/MatDefs/Misc/Unshaded.j3md";
             }else if (defName.equalsIgnoreCase("Common/MatDefs/Misc/WireColor.j3md")){
                 // Using WireColor, set wireframe renderstate = true and use Unshaded
-                additionalState.setWireframe(true);
+                getAdditionalRenderState().setWireframe(true);
                 defName = "Common/MatDefs/Misc/Unshaded.j3md";
             }else if (defName.equalsIgnoreCase("Common/MatDefs/Misc/Unshaded.j3md")){
                 // Uses unshaded, ensure that the proper param is set

File: sdk/jme3-core/src/com/jme3/gde/core/scene/SceneCameraController.java
Patch:
@@ -46,7 +46,7 @@ public SceneCameraController(Camera cam, InputManager inputManager) {
     }
 
     @Override
-    protected void checkClick(int button) {
+    protected void checkClick(int button, boolean pressed) {
     }
 
 }

File: sdk/jme3-core/src/com/jme3/gde/core/util/ToggleButtonGroup.java
Patch:
@@ -30,7 +30,7 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.jme3.gde.terraineditor;
+package com.jme3.gde.core.util;
 
 import javax.swing.AbstractButton;
 import javax.swing.ButtonGroup;

File: sdk/jme3-vehicle-creator/src/com/jme3/gde/vehiclecreator/VehicleCreatorCameraController.java
Patch:
@@ -57,7 +57,7 @@ public void update(float f) {
     }
 
     @Override
-    protected void checkClick(int button) {
+    protected void checkClick(int button, boolean pressed) {
     }
 
     /**

File: engine/src/core/com/jme3/asset/AssetKey.java
Patch:
@@ -61,10 +61,10 @@ public AssetKey(){
     protected static String getExtension(String name){
         int idx = name.lastIndexOf('.');
         //workaround for filenames ending with xml and another dot ending before that (my.mesh.xml)
-        if(name.toLowerCase().indexOf(".xml")==name.length()-4){
+        if (name.toLowerCase().endsWith(".xml")) {
             idx = name.substring(0, idx).lastIndexOf('.');
-            if(idx==-1){
-                idx=name.lastIndexOf('.');
+            if (idx == -1) {
+                idx = name.lastIndexOf('.');
             }
         }
         if (idx <= 0 || idx == name.length() - 1)

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGridListener.java
Patch:
@@ -44,4 +44,7 @@ public interface TerrainGridListener {
 
     public Material tileLoaded(Material material, Vector3f cell);
 
+    public void tileAttached( Vector3f cell, TerrainQuad quad );
+
+    public void tileDetached( Vector3f cell, TerrainQuad quad );
 }

File: engine/src/blender/com/jme3/scene/plugins/blender/structures/Properties.java
Patch:
@@ -315,7 +315,7 @@ protected void completeLoading() {
 	}
 
 	@Override
-	@SuppressWarnings("rawtypes")
+	@SuppressWarnings({ "rawtypes", "unchecked" })
 	public void write(JmeExporter ex) throws IOException {
 		OutputCapsule oc = ex.getCapsule(this);
 		oc.write(name, "name", DEFAULT_NAME);
@@ -347,7 +347,7 @@ public void write(JmeExporter ex) throws IOException {
 						LOGGER.warning("Cannot save the property's value! Invalid array subtype! Property: name: " + name + "; subtype: " + subType);
 				}
 			case IDP_GROUP:
-				oc.write((Properties) value, "value", null);
+				oc.writeSavableArrayList((ArrayList<Properties>) value, "value", null);
 				break;
 			case IDP_DOUBLE:
 				oc.write((Double) value, "value", 0);

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ObjectHelper.java
Patch:
@@ -51,6 +51,7 @@
 import com.jme3.renderer.Camera;
 import com.jme3.scene.Geometry;
 import com.jme3.scene.Node;
+import com.jme3.scene.Spatial;
 import com.jme3.scene.Spatial.CullHint;
 import com.jme3.scene.plugins.blender.data.FileBlockHeader;
 import com.jme3.scene.plugins.blender.data.Structure;
@@ -263,8 +264,8 @@ public Object toObject(Structure objectStructure, DataRepository dataRepository)
 		
 		//reading custom properties
 		Properties properties = this.loadProperties(objectStructure, dataRepository);
-		if(result instanceof Geometry && properties != null && properties.getValue() != null) {
-			((Geometry)result).setUserData("properties", properties);
+		if(result instanceof Spatial && properties != null && properties.getValue() != null) {
+			((Spatial)result).setUserData("properties", properties);
 		}
 		
 		if(result != null) {

File: engine/src/test/jme3test/terrain/TerrainFractalGridTest.java
Patch:
@@ -135,7 +135,7 @@ public float value(float... in) {
 
         ground.addPreFilter(this.iterate);
 
-        this.terrain = new TerrainGrid("terrain", 65, 257, new FractalHeightMapGrid(ground, "D:\\work5\\temp", 256f));
+        this.terrain = new TerrainGrid("terrain", 65, 257, new FractalHeightMapGrid(ground, null, 256f));
 
         this.terrain.setMaterial(this.mat_terrain);
         this.terrain.setLocalTranslation(0, 0, 0);

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -211,7 +211,7 @@ public void update(List<Vector3f> locations) {
     }
 
     public Vector3f getCell(Vector3f location) {
-        final Vector3f v = location.clone().divideLocal(this.getLocalScale().mult(this.quadSize)).add(0.5f, 0, 0.5f);
+        final Vector3f v = location.clone().divideLocal(this.getLocalScale().mult(this.quadSize-1)).add(0.5f, 0, 0.5f);
         return new Vector3f(FastMath.floor(v.x), 0, FastMath.floor(v.z));
     }
 

File: engine/src/test/jme3test/terrain/TerrainFractalGridTest.java
Patch:
@@ -19,10 +19,7 @@
 import com.jme3.renderer.Camera;
 import com.jme3.terrain.geomipmap.TerrainGrid;
 import com.jme3.terrain.geomipmap.TerrainLodControl;
-import com.jme3.terrain.geomipmap.TerrainQuad;
 import com.jme3.terrain.heightmap.FractalHeightMapGrid;
-import com.jme3.terrain.heightmap.ImageBasedHeightMapGrid;
-import com.jme3.terrain.heightmap.Namer;
 import com.jme3.texture.Texture;
 import com.jme3.texture.Texture.WrapMode;
 import org.novyon.noise.ShaderUtils;

File: engine/src/core/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -40,7 +40,6 @@
 import com.jme3.export.OutputCapsule;
 import com.jme3.export.Savable;
 import com.jme3.material.Material;
-import com.jme3.material.RenderState;
 import com.jme3.renderer.Camera;
 import com.jme3.renderer.Caps;
 import com.jme3.renderer.RenderManager;
@@ -140,7 +139,6 @@ public void initialize(RenderManager rm, ViewPort vp) {
 
         Camera cam = vp.getCamera();
 
-
         //save view port diensions
         left = cam.getViewPortLeft();
         right = cam.getViewPortRight();
@@ -150,7 +148,6 @@ public void initialize(RenderManager rm, ViewPort vp) {
         originalHeight = cam.getHeight();
         //first call to reshape
         reshape(vp, cam.getWidth(), cam.getHeight());
-
     }
 
     /**

File: engine/src/terrain/com/jme3/terrain/heightmap/AbstractHeightMap.java
Patch:
@@ -184,7 +184,7 @@ public float getInterpolatedHeight(float x, float z) {
 
         low = getScaledHeightAtPoint((int) x, (int) z);
 
-        if (x + 1 > size) {
+        if (x + 1 >= size) {
             return low;
         }
 
@@ -193,7 +193,7 @@ public float getInterpolatedHeight(float x, float z) {
         interpolation = x - (int) x;
         intX = ((highX - low) * interpolation) + low;
 
-        if (z + 1 > size) {
+        if (z + 1 >= size) {
             return low;
         }
 

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -239,6 +239,8 @@ private void updateChildrens(Vector3f cam) {
 
         if (q1 == null || q2 == null || q3 == null || q4 == null) {
             try {
+                if (executor == null)
+                    executor = createExecutorService();
                 executor.submit(new UpdateQuadCache(cam, true)).get();
                 q1 = cache.get(cam.add(quadIndex[5]));
                 q2 = cache.get(cam.add(quadIndex[6]));

File: engine/src/core/com/jme3/effect/ParticleTriMesh.java
Patch:
@@ -177,9 +177,10 @@ public void updateParticleData(Particle[] particles, Camera cam, Matrix3f invers
             }
             
             if (facingVelocity){
-                left.set(p.velocity).normalizeLocal().multLocal(p.size);
+                left.set(p.velocity).normalizeLocal();
                 camDir.cross(left, up);
                 up.multLocal(p.size);
+                left.multLocal(p.size);
             }else if (faceNormal != null){
                 up.set(faceNormal).crossLocal(Vector3f.UNIT_X);
                 faceNormal.cross(up, left);

File: engine/src/core/com/jme3/effect/influencers/EmptyParticleInfluencer.java
Patch:
@@ -50,7 +50,7 @@ public ParticleInfluencer clone() {
         try {
             return (ParticleInfluencer) super.clone();
         } catch (CloneNotSupportedException e) {
-            return new EmptyParticleInfluencer();
+            throw new AssertionError();
         }
     }
 }

File: engine/src/test/jme3test/model/anim/TestCustomAnim.java
Patch:
@@ -120,7 +120,7 @@ public void simpleInitApp() {
         model.attachChild(geom);
 
         // Create skeleton control
-        SkeletonControl skeletonControl = new SkeletonControl(new Mesh[]{ box }, skeleton);
+        SkeletonControl skeletonControl = new SkeletonControl(skeleton);
         model.addControl(skeletonControl);
 
         rootNode.attachChild(model);

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/actions/AddToProjectAction.java
Patch:
@@ -54,7 +54,6 @@ public void actionPerformed(ActionEvent ev) {
                         }
                         if (modelFolder.isFolder()) {
                             AssetPackLoader.addModelFiles(pm, mgr, conf);
-                            SceneComposerTopComponent.findInstance().addModel(model);
                             OutputStream out = modelFolder.createAndOpen(conf.getAssetElement().getAttribute("name") + ".j3o");
                             BinaryExporter.getInstance().save(model, out);
                             out.close();

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/EditableMaterialFile.java
Patch:
@@ -480,7 +480,9 @@ public void setAsMaterial(Material mat) throws IOException {
         additionalRenderStates.put("FaceCull", new MaterialProperty("FaceCullMode", "FaceCull", mat.getAdditionalRenderState().getFaceCullMode().name()));
         additionalRenderStates.put("Blend", new MaterialProperty("BlendMode", "Blend", mat.getAdditionalRenderState().getBlendMode().name()));
         additionalRenderStates.put("AlphaTestFalloff", new MaterialProperty("Float", "AlphaTestFalloff", mat.getAdditionalRenderState().getAlphaFallOff() + ""));
-        additionalRenderStates.put("PolyOffset", new MaterialProperty("Float,Float", "PolyOffset", mat.getAdditionalRenderState().getPolyOffsetUnits() + " " + mat.getAdditionalRenderState().getPolyOffsetFactor()));
+        //TODO: workaround
+        additionalRenderStates.put("PolyOffset", new MaterialProperty("Float,Float", "PolyOffset", "0.0 0.0"));
+//        additionalRenderStates.put("PolyOffset", new MaterialProperty("Float,Float", "PolyOffset", mat.getAdditionalRenderState().getPolyOffsetUnits() + " " + mat.getAdditionalRenderState().getPolyOffsetFactor()));
         checkWithMatDef();
         setAsText(getUpdatedContent());
     }

File: sdk/jme3-core/src/com/jme3/gde/core/filters/FilterExplorerTopComponent.java
Patch:
@@ -56,7 +56,7 @@
 @ConvertAsProperties(dtd = "-//com.jme3.gde.core.filters//FilterExplorer//EN",
 autostore = false)
 @TopComponent.Description(preferredID = "FilterExplorerTopComponent",
-iconBase = "com/jme3/gde/core/objects_082.gif",
+iconBase = "com/jme3/gde/core/filters/icons/eye.gif",
 persistenceType = TopComponent.PERSISTENCE_ALWAYS)
 @TopComponent.Registration(mode = "navigator", openAtStartup = true)
 @ActionID(category = "Window", id = "com.jme3.gde.core.filters.FilterExplorerTopComponent")

File: sdk/jme3-core/src/com/jme3/gde/core/filters/FilterPostProcessorNode.java
Patch:
@@ -58,7 +58,7 @@ public class FilterPostProcessorNode extends AbstractNode {
 
     private FilterDataObject dataObject;
     private static Image smallImage =
-            ImageUtilities.loadImage("com/jme3/gde/core/objects_082.gif");
+            ImageUtilities.loadImage("com/jme3/gde/core/filters/icons/eye.gif");
     private FilterPostProcessor fpp;
 
     public FilterPostProcessorNode(FilterDataObject dataObject) {

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/SceneViewerTopComponent.java
Patch:
@@ -118,7 +118,7 @@ public void actionPerformed(java.awt.event.ActionEvent evt) {
         });
         jToolBar1.add(enableCamLight);
 
-        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jme3/gde/core/objects_082.gif"))); // NOI18N
+        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jme3/gde/core/filters/icons/eye.gif"))); // NOI18N
         org.openide.awt.Mnemonics.setLocalizedText(jToggleButton1, org.openide.util.NbBundle.getMessage(SceneViewerTopComponent.class, "SceneViewerTopComponent.jToggleButton1.text")); // NOI18N
         jToggleButton1.setToolTipText(org.openide.util.NbBundle.getMessage(SceneViewerTopComponent.class, "SceneViewerTopComponent.jToggleButton1.toolTipText")); // NOI18N
         jToggleButton1.setFocusable(false);

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/actions/AddToProjectAction.java
Patch:
@@ -25,7 +25,6 @@
 import org.openide.NotifyDescriptor;
 import org.openide.NotifyDescriptor.Message;
 import org.openide.filesystems.FileObject;
-import uk.co.mandolane.midi.e;
 
 public final class AddToProjectAction implements Action {
 

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/AssetPackLoader.java
Patch:
@@ -315,6 +315,7 @@ public static void addAllFiles(ProjectAssetManager pm, AssetConfiguration config
         NodeList list = assetElement.getElementsByTagName("file");
         ProjectAssetManager proman = null;
         try {
+            //TODO:not good
             proman = SceneApplication.getApplication().getCurrentSceneRequest().getManager();
             if (proman == null) {
                 Logger.getLogger(AssetPackLoader.class.getName()).log(Level.SEVERE, "Could not get project asset manager!");
@@ -350,6 +351,7 @@ public static void addModelFiles(ProjectAssetManager pm, AssetConfiguration conf
         NodeList fileNodeList = assetElement.getElementsByTagName("file");
         ProjectAssetManager currentProjectAssetManager = null;
         try {
+            //TODO:not good
             currentProjectAssetManager = SceneApplication.getApplication().getCurrentSceneRequest().getManager();
             if (currentProjectAssetManager == null) {
                 Logger.getLogger(AssetPackLoader.class.getName()).log(Level.SEVERE, "Could not get project asset manager!");
@@ -392,6 +394,7 @@ public static void addModelFiles(ProjectAssetManager pm, AssetConfiguration conf
     private static void addVariationFiles(NodeList fileNodeList, ProjectAssetManager pm) {
         ProjectAssetManager currentProjectAssetManager = null;
         try {
+            //TODO:not good
             currentProjectAssetManager = SceneApplication.getApplication().getCurrentSceneRequest().getManager();
             if (currentProjectAssetManager == null) {
                 Logger.getLogger(AssetPackLoader.class.getName()).log(Level.SEVERE, "Could not get project asset manager!");

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/AbstractStatefulGLToolAction.java
Patch:
@@ -83,7 +83,8 @@ public void sceneRedo() throws CannotRedoException {
                 }
 
             };
-            manager.addEdit(this, undoer);
+            if (manager != null) // this is a temporary check, it should never be null but occasionally is
+                manager.addEdit(this, undoer);
             setModified(rootNode, dataObject);
         }
 

File: engine/src/ogre/com/jme3/scene/plugins/ogre/matext/MaterialExtensionLoader.java
Patch:
@@ -33,6 +33,7 @@
 package com.jme3.scene.plugins.ogre.matext;
 
 import com.jme3.asset.AssetManager;
+import com.jme3.asset.TextureKey;
 import com.jme3.material.Material;
 import com.jme3.material.MaterialList;
 import com.jme3.scene.plugins.ogre.MaterialLoader;
@@ -73,7 +74,8 @@ private boolean readExtendingMaterialStatement() throws IOException{
 
             String jmeParamName = matExt.getTextureMapping(aliasName);
 
-            Texture tex = assetManager.loadTexture(texturePath);
+            TextureKey key = new TextureKey(texturePath, false);
+            Texture tex = assetManager.loadTexture(key);
             if (tex == null)
                 throw new IOException("Cannot load texture: " + texturePath);
 

File: engine/src/core/com/jme3/shader/plugins/GLSLLoader.java
Patch:
@@ -146,11 +146,11 @@ private DependencyNode loadNode(InputStream in, String nodeName) throws IOExcept
 
     private DependencyNode nextIndependentNode(List<DependencyNode> checkedNodes){
         Collection<DependencyNode> allNodes = dependCache.values();
-        if (allNodes == null || allNodes.size() == 0)
+        if (allNodes == null || allNodes.isEmpty())
             return null;
         
         for (DependencyNode node : allNodes){
-            if (node.dependsOn.size() == 0){
+            if (node.dependsOn.isEmpty()){
                 return node;
             }
         }

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/TerrainEditorTopComponent.java
Patch:
@@ -1022,6 +1022,8 @@ public void openScene(Spatial spat, AssetDataObject file, ProjectAssetManager ma
 
         terrainDeletedNodeListener = new TerrainNodeListener();
         editorController.enableTextureButtons();
+        
+        editorController.enableLodControl();
     }
 
     // run on GL thread

File: sdk/jme3-terrain-editor/src/com/jme3/gde/terraineditor/tools/LevelTerrainToolAction.java
Patch:
@@ -109,7 +109,7 @@ private void modifyHeight(Terrain terrain, float radius, float height) {
 
                     Vector2f terrainLoc = new Vector2f(locX, locZ);
                     // adjust height based on radius of the tool
-                    float terrainHeightAtLoc = terrain.getHeightmapHeight(terrainLoc)*terrain.getSpatial().getWorldScale().y;
+                    float terrainHeightAtLoc = terrain.getHeightmapHeight(terrainLoc)*((Node)terrain).getWorldScale().y;
                     float radiusWeight = ToolUtils.calculateRadiusPercent(radius, locX-worldLoc.x, locZ-worldLoc.z);
 
                     float epsilon = 0.1f*height; // rounding error for snapping

File: engine/src/test/jme3test/terrain/TerrainFractalGridTest.java
Patch:
@@ -91,7 +91,6 @@ public void simpleInitApp() {
         this.mat_terrain.setTexture("region3ColorMap", rock);
         this.mat_terrain.setVector3("region3", new Vector3f(198, 260, this.rockScale));
 
-        // ROCK texture
         this.mat_terrain.setTexture("region4ColorMap", rock);
         this.mat_terrain.setVector3("region4", new Vector3f(198, 260, this.rockScale));
 

File: engine/src/test/jme3test/terrain/TerrainGridTest.java
Patch:
@@ -124,7 +124,6 @@ public String getName(int x, int y) {
         BulletAppState bulletAppState = new BulletAppState();
         stateManager.attach(bulletAppState);
 
-
         this.getCamera().setLocation(new Vector3f(0, 256, 0));
 
         this.viewPort.setBackgroundColor(new ColorRGBA(0.7f, 0.8f, 1f, 1f));

File: engine/src/test/jme3test/terrain/TerrainGridTest.java
Patch:
@@ -96,6 +96,9 @@ public void simpleInitApp() {
         this.mat_terrain.setTexture("region3ColorMap", rock);
         this.mat_terrain.setVector3("region3", new Vector3f(198, 260, this.rockScale));
 
+        this.mat_terrain.setTexture("region4ColorMap", rock);
+        this.mat_terrain.setVector3("region4", new Vector3f(198, 260, this.rockScale));
+
         this.mat_terrain.setTexture("slopeColorMap", rock);
         this.mat_terrain.setFloat("slopeTileFactor", 32);
 

File: engine/src/test/jme3test/app/TestTempVars.java
Patch:
@@ -85,7 +85,7 @@ public static void recursiveMethod(){
         TempVars vars = TempVars.get();
         vars.vect1.set(123, 999, -55);
         recurse++;
-        if(recurse<100){
+        if(recurse<5){
             recursiveMethod();
         }
         

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/properties/SceneExplorerProperty.java
Patch:
@@ -136,9 +136,9 @@ private void setSuperValue(T val, boolean undo) {
             if (undo) {
                 try {
                     Object oldValue = getSuperValue();
-                    if (oldValue.getClass().getMethod("clone", null) != null) {
-                        addUndo(oldValue.getClass().getMethod("clone", null).invoke(oldValue, null), val);
-                        Logger.getLogger(SceneExplorerProperty.class.getName()).log(Level.INFO, "Add cloned undo {0}", oldValue.getClass().getMethod("clone", null).invoke(oldValue, null));
+                    if (oldValue.getClass().getMethod("clone") != null) {
+                        addUndo(oldValue.getClass().getMethod("clone").invoke(oldValue), val);
+                        Logger.getLogger(SceneExplorerProperty.class.getName()).log(Level.INFO, "Add cloned undo {0}", oldValue.getClass().getMethod("clone").invoke(oldValue));
                     }
                 } catch (Exception e) {
                     addUndo(getSuperValue(), val);

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/NiftyPreviewPanel.java
Patch:
@@ -205,9 +205,8 @@ public Object call() throws Exception {
                     Logger.getLogger(NiftyPreviewPanel.class.getName()).log(Level.WARNING, "No Project AssetManager found!");
                     return null;
                 }
-                AssetManager assetManager = pm.getManager();
                 AudioRenderer audioRenderer = SceneApplication.getApplication().getAudioRenderer();
-                niftyDisplay = new NiftyJmeDisplay(assetManager,
+                niftyDisplay = new NiftyJmeDisplay(pm,
                         inputHandler,
                         audioRenderer,
                         guiViewPort);

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/project/actions/ConvertOgreBinaryMeshesAction.java
Patch:
@@ -26,6 +26,7 @@
 import org.openide.filesystems.FileObject;
 import org.openide.filesystems.FileUtil;
 
+@SuppressWarnings("unchecked")
 public final class ConvertOgreBinaryMeshesAction implements Action {
 
     private final Project context;

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/project/actions/ImportAssetAction.java
Patch:
@@ -24,6 +24,7 @@
 import org.openide.filesystems.FileUtil;
 import org.w3c.dom.Element;
 
+@SuppressWarnings("unchecked")
 public final class ImportAssetAction implements Action {
 
     private final AssetPackProject context;

File: sdk/jme3-assetpack-support/src/com/jme3/gde/assetpack/project/actions/PublishAssetPackAction.java
Patch:
@@ -33,6 +33,7 @@
 import org.openide.filesystems.FileUtil;
 import org.openide.util.NbPreferences;
 
+@SuppressWarnings("unchecked")
 public final class PublishAssetPackAction implements Action {
 
     private final Project context;

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/LinkSceneComposer.java
Patch:
@@ -30,7 +30,7 @@ public void actionPerformed(ActionEvent ev) {
             FileObject file = spatialAssetDataObject.getPrimaryFile();
             String assetName = manager.getRelativeAssetPath(file.getPath());
             SceneComposerTopComponent composer = SceneComposerTopComponent.findInstance();
-            composer.linkModel(manager.getManager(), assetName);
+            composer.linkModel(manager, assetName);
         }
     }
 }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/OpenSceneComposer.java
Patch:
@@ -47,7 +47,7 @@ public void run() {
                         java.awt.EventQueue.invokeLater(new Runnable() {
 
                             public void run() {
-                                ((DesktopAssetManager) manager.getManager()).clearCache();
+                                manager.clearCache();
                                 SceneComposerTopComponent composer = SceneComposerTopComponent.findInstance();
                                 composer.openScene(asset, context, manager);
                             }

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneComposerTopComponent.java
Patch:
@@ -46,6 +46,7 @@
  */
 @ConvertAsProperties(dtd = "-//com.jme3.gde.scenecomposer//SceneComposer//EN",
 autostore = false)
+@SuppressWarnings("unchecked")
 public final class SceneComposerTopComponent extends TopComponent implements SceneListener, LookupListener {
 
     private static SceneComposerTopComponent instance;
@@ -810,7 +811,7 @@ public void sceneRequested(SceneRequest request) {
             if (toolController != null) {
                 toolController.cleanup();
             }
-            toolController = new SceneToolController(currentRequest.getToolNode(), currentRequest.getManager().getManager());
+            toolController = new SceneToolController(currentRequest.getToolNode(), currentRequest.getManager());
             camController = new ComposerCameraController(SceneApplication.getApplication().getCamera(), request.getJmeNode());
             camController.setMaster(this);
             camController.enable();

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneEditorController.java
Patch:
@@ -698,7 +698,7 @@ public void addModel(final SpatialAssetDataObject file, final Vector3f location)
         final Node selected = selectedSpat.getLookup().lookup(Node.class);
         ProjectAssetManager manager = file.getLookup().lookup(ProjectAssetManager.class);
         if (manager != null) {
-            ((DesktopAssetManager) manager.getManager()).clearCache();
+            manager.clearCache();
         }
         if (selected != null) {
             setNeedsSave(true);
@@ -716,7 +716,7 @@ public void doAddModel(SpatialAssetDataObject file, Node selected, Vector3f loca
         ProgressHandle progressHandle = ProgressHandleFactory.createHandle("Adding Model..");
         progressHandle.start();
         try {
-            Spatial linkNode = (Spatial) file.loadAsset();
+            Spatial linkNode = file.loadAsset();
             if (linkNode != null) {
                 selected.attachChild(linkNode);
                 if (location != null) {

File: sdk/jme3-core/src/com/jme3/gde/core/filters/AbstractFilterNode.java
Patch:
@@ -118,7 +118,7 @@ protected Sheet createSheet() {
             return sheet;
         }
         set.put(makeProperty(obj, String.class, "getName", "setName", "Name"));
-        set.put(makeProperty(obj, boolean.class, "setEnabled", "isEnabled", "Enabled"));
+        set.put(makeProperty(obj, boolean.class, "isEnabled", "setEnabled", "Enabled"));
         sheet.put(set);
         return sheet;
 

File: sdk/jme3-core/src/com/jme3/gde/core/filters/AbstractFilterNode.java
Patch:
@@ -117,7 +117,7 @@ protected Sheet createSheet() {
         if (obj == null) {
             return sheet;
         }
-        set.put(makeProperty(obj, float.class, "getName", "setName", "Name"));
+        set.put(makeProperty(obj, String.class, "getName", "setName", "Name"));
         set.put(makeProperty(obj, boolean.class, "setEnabled", "isEnabled", "Enabled"));
         sheet.put(set);
         return sheet;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -244,7 +244,7 @@ private void updateChildrens(Vector3f cam) {
         attachQuadAt(q4, 4);
 
         this.currentCell = cam;
-        this.setLocalTranslation(cam.mult(this.getLocalScale().mult(this.quadSize)));
+        this.setLocalTranslation(cam.mult(this.getLocalScale().mult(this.quadSize-1)));
         this.updateModelBound();
 
         if (control != null) {

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglAbstractDisplay.java
Patch:
@@ -142,7 +142,7 @@ protected void runLoop(){
             throw new IllegalStateException();
 
         listener.update();
-
+       
         // All this does is call swap buffers
         // If the canvas is not active, there's no need to waste time
         // doing that ..

File: engine/src/xml/com/jme3/export/xml/XMLExporter.java
Patch:
@@ -63,8 +63,8 @@ public XMLExporter() {
 
     public boolean save(Savable object, OutputStream f) throws IOException {
         try {
-        	//Initialize Document when saving so we don't retain state of previous exports
-        	this.domOut = new DOMOutputCapsule(DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(), this);
+            //Initialize Document when saving so we don't retain state of previous exports
+            this.domOut = new DOMOutputCapsule(DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(), this);
             domOut.write(object, object.getClass().getName(), null);
             DOMSerializer serializer = new DOMSerializer();
             serializer.serialize(domOut.getDoc(), f);

File: engine/src/test/jme3test/awt/TestCanvas.java
Patch:
@@ -36,7 +36,6 @@
 import com.jme3.app.SimpleApplication;
 import com.jme3.system.AppSettings;
 import com.jme3.system.JmeCanvasContext;
-import com.jme3.system.JmeSystem;
 import com.jme3.util.JmeFormatter;
 import java.awt.Canvas;
 import java.awt.event.ActionEvent;
@@ -60,7 +59,7 @@ public class TestCanvas {
     private static Canvas canvas;
     private static Application app;
     private static JFrame frame;
-    private static final String appClass = "jme3test.model.shape.TestBox";
+    private static final String appClass = "jme3test.post.TestMultiplesFilters";
 
     private static void createFrame(){
         frame = new JFrame("Test");

File: engine/src/test/jme3test/export/TestOgreConvert.java
Patch:
@@ -75,7 +75,6 @@ public void simpleInitApp() {
             AnimControl control = ogreModelReloaded.getControl(AnimControl.class);
             AnimChannel chan = control.createChannel();
             chan.setAnim("Walk");
-//            fis.close();
 
             rootNode.attachChild(ogreModelReloaded);
         } catch (IOException ex){

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeLight.java
Patch:
@@ -95,7 +95,7 @@ protected Sheet createSheet() {
         }
 
         set.put(makeProperty(obj, ColorRGBA.class, "getColor", "setColor", "Color"));
-        set.put(makeProperty(obj, float.class, "getLastDistance", "setLastDistance", "Last Distance"));
+
 
         sheet.put(set);
         return sheet;

File: engine/src/core-plugins/com/jme3/export/binary/BinaryClassObject.java
Patch:
@@ -42,5 +42,5 @@ class BinaryClassObject {
     
     byte[] alias;
     String className;
-    
+    int[] classHierarchyVersions;
 }

File: engine/src/core/com/jme3/cinematic/Cinematic.java
Patch:
@@ -61,7 +61,7 @@
  *
  * @author Nehon
  */
-public class Cinematic extends AbstractCinematicEvent implements Savable, AppState {
+public class Cinematic extends AbstractCinematicEvent implements AppState {
 
     private static final Logger logger = Logger.getLogger(Application.class.getName());
     private String niftyXmlPath = null;

File: engine/src/core/com/jme3/cinematic/events/AbstractCinematicEvent.java
Patch:
@@ -48,7 +48,7 @@
  *
  * @author Nehon
  */
-public abstract class AbstractCinematicEvent implements CinematicEvent, Savable {
+public abstract class AbstractCinematicEvent implements CinematicEvent {
 
     protected PlayState playState = PlayState.Stopped;
     protected float speed = 1;

File: engine/src/core/com/jme3/cinematic/events/CinematicEvent.java
Patch:
@@ -35,12 +35,13 @@
 import com.jme3.app.Application;
 import com.jme3.cinematic.Cinematic;
 import com.jme3.cinematic.PlayState;
+import com.jme3.export.Savable;
 
 /**
  *
  * @author Nehon
  */
-public interface CinematicEvent {
+public interface CinematicEvent extends Savable {
 
     /**
      * Starts the animation

File: engine/src/core/com/jme3/effect/influencers/DefaultParticleInfluencer.java
Patch:
@@ -56,7 +56,7 @@ public void write(JmeExporter ex) throws IOException {
     @Override
     public void read(JmeImporter im) throws IOException {
         InputCapsule ic = im.getCapsule(this);
-        startVelocity = (Vector3f) ic.readSavable("startVelocity", Vector3f.ZERO);
+        startVelocity = (Vector3f) ic.readSavable("startVelocity", Vector3f.ZERO.clone());
         velocityVariation = ic.readFloat("variation", 0.2f);
     }
 

File: engine/src/core/com/jme3/export/InputCapsule.java
Patch:
@@ -47,6 +47,8 @@
  */
 public interface InputCapsule {
 
+    public int getSavableVersion(Class<? extends Savable> clazz);
+    
     // byte primitive
 
     public byte readByte(String name, byte defVal) throws IOException;

File: engine/src/core/com/jme3/export/Savable.java
Patch:
@@ -37,7 +37,8 @@
 /**
  * <code>Savable</code> is an interface for objects that can be serialized
  * using jME's serialization system. 
- * @author Dany
+ * 
+ * @author Kirill Vainer
  */
 public interface Savable {
     void write(JmeExporter ex) throws IOException;

File: engine/src/core/com/jme3/scene/VertexBuffer.java
Patch:
@@ -63,7 +63,7 @@
  * </ul>
  */
 public class VertexBuffer extends GLObject implements Savable, Cloneable {
-
+  
     /**
      * Type of buffer. Specifies the actual attribute it defines.
      */

File: engine/src/core/com/jme3/terrain/AbstractGeomap.java
Patch:
@@ -44,7 +44,7 @@
 
 /**
  * implements all writeXXXXArray methods to reduce boilerplate code
- * Geomap implementations are encourged to extend this class
+ * Geomap implementations are encouraged to extend this class
  */
 public abstract class AbstractGeomap implements Geomap {
 
@@ -60,7 +60,7 @@ public Vector2f getUV(int i, Vector2f store){
 
     /*
      * (non-Javadoc)
-     * Subclasses are encourged to provide a better implementation
+     * Subclasses are encouraged to provide a better implementation
      * which directly accesses the data rather than using getHeight
      */
     public FloatBuffer writeVertexArray(FloatBuffer store, Vector3f scale, boolean center){

File: engine/src/test/jme3test/bullet/TestHoveringTank.java
Patch:
@@ -270,7 +270,7 @@ private void createTerrain() {
         rock.setWrap(WrapMode.Repeat);
         matRock.setTexture("DiffuseMap_2", rock);
         matRock.setFloat("DiffuseMap_2_scale", 128);
-        Texture normalMap0 = assetManager.loadTexture("Textures/Terrain/splat/grass_normal.png");
+        Texture normalMap0 = assetManager.loadTexture("Textures/Terrain/splat/grass_normal.jpg");
         normalMap0.setWrap(WrapMode.Repeat);
         Texture normalMap1 = assetManager.loadTexture("Textures/Terrain/splat/dirt_normal.png");
         normalMap1.setWrap(WrapMode.Repeat);

File: engine/src/android/com/jme3/asset/AndroidAssetManager.java
Patch:
@@ -39,6 +39,7 @@
 
 import com.jme3.asset.plugins.AndroidLocator;
 import com.jme3.asset.plugins.ClasspathLocator;
+import com.jme3.audio.plugins.AndroidAudioLoader;
 
 /**
  * <code>AndroidAssetManager</code> is an implementation of DesktopAssetManager for Android
@@ -72,7 +73,8 @@ public AndroidAssetManager(URL configFile)
     	// Set Default Android config        	       
         this.registerLocator("", AndroidLocator.class);	        
         this.registerLocator("", ClasspathLocator.class);
-        this.registerLoader(AndroidImageLoader.class, "jpg", "bmp", "gif", "png", "jpeg");        
+        this.registerLoader(AndroidImageLoader.class, "jpg", "bmp", "gif", "png", "jpeg");
+        this.registerLoader(AndroidAudioLoader.class, "ogg", "mp3");
         this.registerLoader(com.jme3.material.plugins.J3MLoader.class, "j3m");
         this.registerLoader(com.jme3.material.plugins.J3MLoader.class, "j3md");
         this.registerLoader(com.jme3.font.plugins.BitmapFontLoader.class, "fnt");

File: sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmePosterizationFilter.java
Patch:
@@ -64,7 +64,7 @@ protected Sheet createSheet() {
         if (obj == null) {
             return sheet;
         }
-        set.put(makeProperty(obj, float.class, "getGamma", "setGamme", "Gamma"));
+        set.put(makeProperty(obj, float.class, "getGamma", "setGamma", "Gamma"));
         set.put(makeProperty(obj, int.class, "getNumColors", "setNumColors", "Color Number"));
         set.put(makeProperty(obj, float.class, "getStrength", "setStrength", "Strength"));
         sheet.put(set);

File: sdk/jme3-core/src/com/jme3/gde/core/filters/FilterExplorerTopComponent.java
Patch:
@@ -35,6 +35,7 @@
 import com.jme3.gde.core.scene.SceneApplication;
 import com.jme3.post.FilterPostProcessor;
 import java.util.concurrent.Callable;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.openide.util.NbBundle;
 import org.openide.windows.TopComponent;
@@ -175,8 +176,10 @@ public synchronized void setFilterEnabled(final boolean enabled) {
                 public Object call() throws Exception {
                     if (enabled) {
                         SceneApplication.getApplication().getViewPort().addProcessor(fpp);
+                        Logger.getLogger(FilterExplorerTopComponent.class.getName()).log(Level.INFO, "Enabled post filters");
                     } else {
                         SceneApplication.getApplication().getViewPort().removeProcessor(fpp);
+                        Logger.getLogger(FilterExplorerTopComponent.class.getName()).log(Level.INFO, "Disabled post filters");
                     }
                     return null;
                 }

File: sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmeBloomFilter.java
Patch:
@@ -64,10 +64,10 @@ protected Sheet createSheet() {
         if (obj == null) {
             return sheet;
         }
-        set.put(makeProperty(obj, float.class, "getBloomIntensity", "setBloomIntensity", "Intesity"));
+        set.put(makeProperty(obj, float.class, "getBloomIntensity", "setBloomIntensity", "Intensity"));
         set.put(makeProperty(obj, float.class, "getBlurScale", "setBlurScale", "Blur Scale"));
         set.put(makeProperty(obj, float.class, "getDownSamplingFactor", "setDownSamplingFactor", "Downsampling Factor"));
-        set.put(makeProperty(obj, float.class, "getExposureCutoff", "setExposureCutoff", "Exposure Cutoff"));
+        set.put(makeProperty(obj, float.class, "getExposureCutOff", "setExposureCutOff", "Exposure Cutoff"));
         set.put(makeProperty(obj, float.class, "getExposurePower", "setExposurePower", "Exposure Power"));
         sheet.put(set);
         return sheet;

File: sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmeLightScatteringFilter.java
Patch:
@@ -69,7 +69,7 @@ protected Sheet createSheet() {
         set.put(makeProperty(obj, float.class, "getBlurWidth", "setBlurWidth", "Blur Width"));
         set.put(makeProperty(obj, float.class, "getLightDensity", "setLightDensity", "Light Density"));
         set.put(makeProperty(obj, Vector3f.class, "getLightPosition", "setLightPosition", "Light Position"));
-        set.put(makeProperty(obj, float.class, "getNbSamples", "setNbSamples", "Sample Number"));
+        set.put(makeProperty(obj, int.class, "getNbSamples", "setNbSamples", "Sample Number"));
         sheet.put(set);
         return sheet;
 

File: sdk/jme3-core/src/com/jme3/gde/core/filters/FilterExplorerTopComponent.java
Patch:
@@ -167,16 +167,16 @@ public synchronized void setFilterEnabled(final boolean enabled) {
         if (added == enabled) {
             return;
         }
-        added = enabled;
         if (currentFile != null) {
+            added = enabled;
             final FilterPostProcessor fpp = this.node.getFilterPostProcessor();
             SceneApplication.getApplication().enqueue(new Callable() {
 
                 public Object call() throws Exception {
                     if (enabled) {
-                        SceneApplication.getApplication().getViewPort().removeProcessor(fpp);
-                    } else {
                         SceneApplication.getApplication().getViewPort().addProcessor(fpp);
+                    } else {
+                        SceneApplication.getApplication().getViewPort().removeProcessor(fpp);
                     }
                     return null;
                 }

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ObjectHelper.java
Patch:
@@ -312,7 +312,7 @@ public Transform getTransformation(Structure objectStructure) {
 			float y = translation.y;
 			translation.y = translation.z;
 			translation.z = -y;
-			rotation.multLocal(this.upAxisRotationQuaternion);
+			rotation = this.upAxisRotationQuaternion.mult(rotation);
 		}
 		
 		//create the result

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ObjectHelper.java
Patch:
@@ -263,8 +263,8 @@ public Object toObject(Structure objectStructure, DataRepository dataRepository)
 		
 		//reading custom properties
 		Properties properties = this.loadProperties(objectStructure, dataRepository);
-		if(properties != null && properties.getValue() != null) {
-			((Node)result).setUserData("properties", properties);
+		if(result instanceof Geometry && properties != null && properties.getValue() != null) {
+			((Geometry)result).setUserData("properties", properties);
 		}
 		
 		if(result != null) {

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ObjectHelper.java
Patch:
@@ -302,10 +302,10 @@ public Transform getTransformation(Structure objectStructure) {
 		Vector3f scale = new Vector3f(size.get(0).floatValue() * scaleX, 
 									  size.get(1).floatValue() * scaleY, 
 									  size.get(2).floatValue() * scaleZ);
-		if(fixUpAxis) {
+		if(parent.isNull() && fixUpAxis) {
 			float y = translation.y;
 			translation.y = translation.z;
-			translation.z = y;
+			translation.z = -y;
 			rotation.multLocal(this.upAxisRotationQuaternion);
 		}
 		Transform t = new Transform(translation, rotation);

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/ConstraintHelper.java
Patch:
@@ -662,7 +662,8 @@ public void loadConstraints(Structure objectStructure, DataRepository dataReposi
 				for (Structure constraint : constraints) {
 					int type = ((Number) constraint.getFieldValue("type")).intValue();
 					String constraintName = constraint.getFieldValue("name").toString();
-					Ipo ipo = constraintsIpos.get(name).get(constraintName);
+					Map<String, Ipo> ipoMap = constraintsIpos.get(name);
+					Ipo ipo = ipoMap==null ? null : ipoMap.get(constraintName);
 					if (ipo == null) {
 						float enforce = ((Number) constraint.getFieldValue("enforce")).floatValue();
 						ipo = ipoHelper.createIpo(enforce);

File: engine/src/bullet/com/jme3/bullet/util/NativeMeshUtil.java
Patch:
@@ -52,7 +52,7 @@ public static long getTriangleIndexVertexArray(Mesh mesh){
         int numTriangles = mesh.getTriangleCount();
         int triangleIndexStride = 12; //3 index entries * 4 bytes each.
 
-        IndexBuffer indices = mesh.getIndexBuffer();
+        IndexBuffer indices = mesh.getIndicesAsList();
         FloatBuffer vertices = mesh.getFloatBuffer(Type.Position);
         vertices.rewind();
 

File: engine/src/core/com/jme3/animation/BoneTrack.java
Patch:
@@ -93,8 +93,8 @@ public BoneTrack(int targetBoneIndex, float[] times, Vector3f[] translations, Qu
      * @param scales the scale of the bone for each frame
      */
     public BoneTrack(int targetBoneIndex, float[] times, Vector3f[] translations, Quaternion[] rotations, Vector3f[] scales) {
-        this(targetBoneIndex, times, translations, rotations);
-        this.setKeyframes(times, translations, rotations);
+    	this.targetBoneIndex = targetBoneIndex;
+        this.setKeyframes(times, translations, rotations, scales);
     }
 
     /**

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/CurvesHelper.java
Patch:
@@ -536,12 +536,14 @@ protected List<Geometry> applyBevelAndTaper(Curve curve, List<Geometry> bevelObj
         }
 
         List<Geometry> result = new ArrayList<Geometry>(vertexBuffers.length);
+        Float oneReferenceToCurveLength = new Float(curveLength);//its important for array modifier to use one reference here
         for (int i = 0; i < vertexBuffers.length; ++i) {
             Mesh mesh = new Mesh();
             mesh.setBuffer(Type.Position, 3, vertexBuffers[i]);
             mesh.setBuffer(Type.Index, 3, indexBuffers[i]);
             mesh.setBuffer(Type.Normal, 3, normalBuffers[i]);
             Geometry g = new Geometry("g" + i, mesh);
+            g.setUserData("curveLength", oneReferenceToCurveLength);
             g.updateModelBound();
             result.add(g);
         }

File: engine/src/test/jme3test/app/state/TestAppStates.java
Patch:
@@ -73,7 +73,7 @@ public void initialize(){
                                                            inputManager,
                                                            audioRenderer,
                                                            guiViewPort);
-        niftyDisplay.getNifty().fromXml("jme3test/niftygui/hellojme.xml", "start");
+        niftyDisplay.getNifty().fromXml("Interface/Nifty/HelloJme.xml", "start");
         guiViewPort.addProcessor(niftyDisplay);
     }
 

File: engine/src/test/jme3test/bullet/TestHoveringTank.java
Patch:
@@ -294,8 +294,6 @@ private void createTerrain() {
         terrain.addControl(control);
         terrain.setMaterial(matRock);
         terrain.setLocalScale(new Vector3f(2, 2, 2));
-        terrain.setModelBound(new BoundingBox());
-        terrain.updateModelBound();
         terrain.setLocked(false); // unlock it so we can edit the height
 
         terrain.setShadowMode(ShadowMode.CastAndReceive);

File: engine/src/test/jme3test/bullet/TestWalkingChar.java
Patch:
@@ -287,8 +287,6 @@ private void createTerrain() {
         TerrainLodControl control = new TerrainLodControl(terrain, cameras);
         terrain.addControl(control);
         terrain.setMaterial(matRock);
-        terrain.setModelBound(new BoundingBox());
-        terrain.updateModelBound();
         terrain.setLocalScale(new Vector3f(2, 2, 2));
 
         terrainPhysicsNode = new RigidBodyControl(CollisionShapeFactory.createMeshShape(terrain), 0);

File: engine/src/test/jme3test/model/shape/TestBox.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String[] args){
     public void simpleInitApp() {
         Box b = new Box(Vector3f.ZERO, 1, 1, 1);
         Geometry geom = new Geometry("Box", b);
-        Material mat = new Material(assetManager, "Common/MatDefs/Misc/SimpleTextured.j3md");
+        Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
         mat.setTexture("ColorMap", assetManager.loadTexture("Interface/Logo/Monkey.jpg"));
         geom.setMaterial(mat);
         rootNode.attachChild(geom);

File: engine/src/test/jme3test/post/TestDepthOfField.java
Patch:
@@ -184,8 +184,6 @@ private void createTerrain(Node rootNode) {
         terrain.setMaterial(matRock);
         terrain.setLocalScale(new Vector3f(5, 5, 5));
         terrain.setLocalTranslation(new Vector3f(0, -30, 0));
-        terrain.setModelBound(new BoundingBox());
-        terrain.updateModelBound();
         terrain.setLocked(false); // unlock it so we can edit the height
 
         terrain.setShadowMode(ShadowMode.Receive);

File: engine/src/test/jme3test/terrain/TerrainTest.java
Patch:
@@ -166,8 +166,6 @@ public void simpleInitApp() {
         TerrainLodControl control = new TerrainLodControl(terrain, cameras);
         terrain.addControl(control);
         terrain.setMaterial(matRock);
-        terrain.setModelBound(new BoundingBox());
-        terrain.updateModelBound();
         terrain.setLocalTranslation(0, -100, 0);
         terrain.setLocalScale(2f, 1f, 2f);
         rootNode.attachChild(terrain);

File: engine/src/test/jme3test/terrain/TerrainTestCollision.java
Patch:
@@ -143,8 +143,6 @@ public void simpleInitApp() {
         terrain.addControl(control);
         terrain.setMaterial(matRock);
         terrain.setLocalScale(new Vector3f(2, 2, 2));
-        terrain.setModelBound(new BoundingBox());
-        terrain.updateModelBound();
         terrain.setLocked(false); // unlock it so we can edit the height
         rootNode.attachChild(terrain);
 

File: engine/src/test/jme3test/terrain/TerrainTestReadWrite.java
Patch:
@@ -166,8 +166,6 @@ private void createMap() {
             TerrainLodControl control = new TerrainLodControl(terrain, cameras);
             terrain.addControl(control);
             terrain.setMaterial(matTerrain);
-            terrain.setModelBound(new BoundingBox());
-            terrain.updateModelBound();
             terrain.setLocalTranslation(0, -100, 0);
             terrain.setLocalScale(2f, 1f, 2f);
             rootNode.attachChild(terrain);

File: engine/src/test/jme3test/water/TestPostWater.java
Patch:
@@ -273,8 +273,6 @@ private void createTerrain(Node rootNode) {
         terrain.setMaterial(matRock);
         terrain.setLocalScale(new Vector3f(5, 5, 5));
         terrain.setLocalTranslation(new Vector3f(0, -30, 0));
-        terrain.setModelBound(new BoundingBox());
-        terrain.updateModelBound();
         terrain.setLocked(false); // unlock it so we can edit the height
 
         terrain.setShadowMode(ShadowMode.Receive);

File: engine/src/android/com/jme3/renderer/android/OGLESShaderRenderer.java
Patch:
@@ -2347,7 +2347,7 @@ public void setVertexAttrib(VertexBuffer vb, VertexBuffer idb) {
 
         int programId = context.boundShaderProgram;
         if (programId > 0) {
-            Attribute attrib = boundShader.getAttribute(vb.getBufferType());
+            Attribute attrib = boundShader.getAttribute(vb.getBufferType().name());
             int loc = attrib.getLocation();
             if (loc == -1) {
 
@@ -2874,7 +2874,7 @@ public void setVertexAttrib_Array(VertexBuffer vb, VertexBuffer idb) {
         if (programId > 0) {
             VertexBuffer[] attribs = context.boundAttribs;
 
-            Attribute attrib = boundShader.getAttribute(vb.getBufferType());
+            Attribute attrib = boundShader.getAttribute(vb.getBufferType().name());
             int loc = attrib.getLocation();
             if (loc == -1) {
                 //throw new IllegalArgumentException("Location is invalid for attrib: [" + vb.getBufferType().name() + "]");

File: engine/src/lwjgl-ogl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -2068,7 +2068,7 @@ public void setVertexAttrib(VertexBuffer vb, VertexBuffer idb) {
 
         int programId = context.boundShaderProgram;
         if (programId > 0) {
-            Attribute attrib = boundShader.getAttribute(vb.getBufferType());
+            Attribute attrib = boundShader.getAttribute(vb.getBufferType().name());
             int loc = attrib.getLocation();
             if (loc == -1) {
                 return; // not defined

File: engine/src/core/com/jme3/light/LightList.java
Patch:
@@ -223,7 +223,7 @@ public void sort(boolean transformChanged) {
             }
 
             // now merge sort tlist into list
-            SortUtil.msort(tlist, list, 0, listSize, c);
+            SortUtil.msort(tlist, list, 0, listSize - 1, c);
         }
     }
 

File: engine/src/lwjgl-ogl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -69,7 +69,6 @@
 import com.jme3.util.IntMap;
 import com.jme3.util.IntMap.Entry;
 import com.jme3.util.ListMap;
-import java.io.File;
 import java.nio.ByteBuffer;
 import java.nio.DoubleBuffer;
 import java.nio.FloatBuffer;
@@ -2069,7 +2068,7 @@ public void setVertexAttrib(VertexBuffer vb, VertexBuffer idb) {
 
         int programId = context.boundShaderProgram;
         if (programId > 0) {
-            Attribute attrib = boundShader.getAttribute(vb.getBufferType().name());
+            Attribute attrib = boundShader.getAttribute(vb.getBufferType());
             int loc = attrib.getLocation();
             if (loc == -1) {
                 return; // not defined

File: engine/src/core/com/jme3/scene/CameraNode.java
Patch:
@@ -36,7 +36,8 @@
 import com.jme3.scene.control.CameraControl.ControlDirection;
 
 /**
- * This Node is a shorthand for using a CameraControl.
+ * <code>CameraNode</code> simply uses {@link CameraControl} to implement
+ * linking of camera and node data.
  *
  * @author Tim8Dev
  */
@@ -45,7 +46,7 @@ public class CameraNode extends Node {
     private CameraControl camControl;
 
     /**
-     * for IO purpose
+     * Serialization only. Do not use.
      */
     public CameraNode() {
     }

File: engine/src/core/com/jme3/scene/mesh/IndexByteBuffer.java
Patch:
@@ -36,7 +36,8 @@
 import java.nio.ByteBuffer;
 
 /**
- *
+ * IndexBuffer implementation for {@link ByteBuffer}s.
+ * 
  * @author lex
  */
 public class IndexByteBuffer extends IndexBuffer {

File: engine/src/core/com/jme3/scene/mesh/IndexIntBuffer.java
Patch:
@@ -36,7 +36,8 @@
 import java.nio.IntBuffer;
 
 /**
- *
+ * IndexBuffer implementation for {@link IntBuffer}s.
+ * 
  * @author lex
  */
 public class IndexIntBuffer extends IndexBuffer {

File: engine/src/core/com/jme3/scene/mesh/IndexShortBuffer.java
Patch:
@@ -36,7 +36,8 @@
 import java.nio.ShortBuffer;
 
 /**
- *
+ * IndexBuffer implementation for {@link ShortBuffer}s.
+ * 
  * @author lex
  */
 public class IndexShortBuffer extends IndexBuffer {

File: engine/src/core/com/jme3/scene/shape/Line.java
Patch:
@@ -40,7 +40,6 @@
 import com.jme3.scene.Mesh;
 import com.jme3.scene.VertexBuffer;
 import com.jme3.scene.VertexBuffer.Type;
-import com.jme3.util.BufferUtils;
 import java.io.IOException;
 import java.nio.FloatBuffer;
 

File: engine/src/core/com/jme3/scene/shape/PQTorus.java
Patch:
@@ -45,7 +45,6 @@
 
 import java.io.IOException;
 import java.nio.FloatBuffer;
-import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
 
 /**

File: engine/src/terrain/com/jme3/terrain/ProgressMonitor.java
Patch:
@@ -29,7 +29,6 @@
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package com.jme3.terrain;
 
 /**

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -28,7 +28,8 @@
  */
 public class TerrainGrid extends TerrainQuad {
 
-    private static Logger log = Logger.getLogger(TerrainGrid.class.getCanonicalName());
+    private static final Logger log = Logger.getLogger(TerrainGrid.class.getCanonicalName());
+    
     private Vector3f currentCell;
     private int quarterSize;
     private int quadSize;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainQuad.java
Patch:
@@ -111,6 +111,7 @@ public class TerrainQuad extends Node implements Terrain {
     protected ExecutorService executor = Executors.newSingleThreadExecutor(new ThreadFactory() {
         public Thread newThread(Runnable r) {
             Thread th = new Thread(r);
+            th.setName("jME Terrain Thread");
             th.setDaemon(true);
             return th;
         }

File: engine/src/core/com/jme3/material/MatParamTexture.java
Patch:
@@ -45,7 +45,7 @@ public void apply(Renderer r, Technique technique) {
         TechniqueDef techDef = technique.getDef();
         r.setTexture(getUnit(), getTextureValue());
         if (techDef.isUsingShaders()) {
-            technique.updateUniformParam(getName(), getVarType(), getUnit(), true);
+            technique.updateUniformParam(getPrefixedName(), getVarType(), getUnit(), true);
         }
     }
 

File: engine/src/core/com/jme3/material/Technique.java
Patch:
@@ -149,9 +149,6 @@ void notifyClearParam(String paramName) {
     }
 
     void updateUniformParam(String paramName, VarType type, Object value, boolean ifNotOwner) {
-        if (!paramName.startsWith("m_")) {
-            paramName = "m_" + paramName;
-        }
         Uniform u = shader.getUniform(paramName);
 
 //        if (ifNotOwner && u.getLastChanger() == owner)

File: engine/src/bullet/com/jme3/bullet/control/KinematicRagdollControl.java
Patch:
@@ -193,9 +193,9 @@ public void update(float tpf) {
                 if (link.bone.getParent() == null) {
 
                     //offsetting the physic's position/rotation by the root bone inverse model space position/rotaion
-                    modelPosition.set(p).subtractLocal(link.bone.getInitialPos());
+                    modelPosition.set(p).subtractLocal(link.bone.getWorldBindPosition());
                     targetModel.getParent().getWorldTransform().transformInverseVector(modelPosition, modelPosition);
-                    modelRotation.set(q).multLocal(tmpRot2.set(link.bone.getInitialRot()).inverseLocal());
+                    modelRotation.set(q).multLocal(tmpRot2.set(link.bone.getWorldBindRotation()).inverseLocal());
 
 
                     //applying transforms to the model

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/TextureHelper.java
Patch:
@@ -1613,7 +1613,7 @@ protected Texture loadTextureFromFile(String name, DataRepository dataRepository
 				name = name.substring(1);
 			}
 
-			TextureKey texKey = new TextureKey(name, true);
+			TextureKey texKey = new TextureKey(name, false);
 			Texture tex = dataRepository.getAssetManager().loadTexture(texKey);
 			image = tex.getImage();
 		}

File: engine/src/core/com/jme3/effect/influencers/DefaultParticleInfluencer.java
Patch:
@@ -38,6 +38,7 @@ public void influenceParticle(Particle particle, EmitterShape emitterShape) {
      *        the particle to be affected
      */
     protected void applyVelocityVariation(Particle particle) {
+    	particle.velocity.set(startVelocity);
         temp.set(FastMath.nextRandomFloat(), FastMath.nextRandomFloat(), FastMath.nextRandomFloat());
         temp.multLocal(2f);
         temp.subtractLocal(1f, 1f, 1f);

File: sdk/jme3-core/src/com/jme3/gde/core/assets/AssetDataObject.java
Patch:
@@ -194,6 +194,7 @@ public void saveAsset() throws IOException {
                     outFileObject = getPrimaryFile().getParent().createData(getPrimaryFile().getName(), saveExtension);
                 }
                 out = outFileObject.getOutputStream();
+                outFileObject.getParent().refresh();
             }
             exp.save(savable, out);
         } finally {

File: engine/src/desktop/com/jme3/app/SettingsDialog.java
Patch:
@@ -45,6 +45,7 @@
 import java.awt.event.KeyListener;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+import java.awt.image.BufferedImage;
 import java.lang.reflect.Method;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -250,8 +251,8 @@ public void windowClosing(WindowEvent e) {
             }
         });
 
-        if(source.getIcons()!=null){
-            safeSetIconImages(Arrays.asList(source.getIcons()));
+        if (source.getIcons() != null) {
+            safeSetIconImages( (List<BufferedImage>) Arrays.asList((BufferedImage[]) source.getIcons()) );
         }
 
         setTitle("Select Display Settings");

File: engine/src/test/jme3test/terrain/TerrainGridTest.java
Patch:
@@ -61,9 +61,9 @@ public static void main(final String[] args) {
     public void simpleInitApp() {
         File file = new File("mountains.zip");
         if (!file.exists()) {
-            assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/mountains.zip", HttpZipLocator.class.getName());
+            assetManager.registerLocator("http://jmonkeyengine.googlecode.com/files/mountains.zip", HttpZipLocator.class);
         }else{
-            assetManager.registerLocator("mountains.zip", ZipLocator.class.getName());
+            assetManager.registerLocator("mountains.zip", ZipLocator.class);
         }
 
         this.flyCam.setMoveSpeed(100f);

File: sdk/jme3-core/src/com/jme3/gde/core/scene/OffScenePanel.java
Patch:
@@ -191,7 +191,7 @@ private void setupOffView() {
         // create a pre-view. a view that is rendered before the main view
         viewPort = SceneApplication.getApplication().getRenderManager().createPreView("Offscreen View", camera);
         viewPort.setBackgroundColor(ColorRGBA.DarkGray);
-        viewPort.setClearEnabled(true);
+        viewPort.setClearFlags(true, true, true);
         viewPort.addProcessor(this);
     }
 

File: sdk/jme3-core/src/com/jme3/gde/core/scene/ScenePreviewProcessor.java
Patch:
@@ -83,7 +83,7 @@ public void setupPreviewView() {
         // create a pre-view. a view that is rendered before the main view
         offView = SceneApplication.getApplication().getRenderManager().createPreView("Offscreen View", offCamera);
         offView.setBackgroundColor(ColorRGBA.DarkGray);
-        offView.setClearEnabled(true);
+        offView.setClearFlags(true, true, true);
         
         offView.addProcessor(this);
 

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/TextureHelper.java
Patch:
@@ -217,7 +217,7 @@ public Texture getTexture(Structure tex, DataRepository dataRepository) throws B
 				throw new BlenderFileException("Unknown texture type: " + type + " for texture: " + tex.getName());
 		}
 		if (result != null) {
-			result.setName(String.valueOf(type));
+			result.setName(tex.getName());
 			result.setWrap(WrapMode.Repeat);
 		}
 		return result;
@@ -1579,7 +1579,6 @@ public Texture getTextureFromImage(Structure image, DataRepository dataRepositor
 				}
 			}
 			if (result != null) {
-				result.setName(String.valueOf(8));// 8 = TEX_IMAGE
 				result.setWrap(Texture.WrapMode.Repeat);
 				dataRepository.addLoadedFeatures(image.getOldMemoryAddress(), image.getName(), image, result);
 			}

File: engine/src/core/com/jme3/renderer/RenderContext.java
Patch:
@@ -54,7 +54,7 @@ public class RenderContext {
 
     public boolean alphaTestEnabled = false;
 
-    public boolean depthWriteEnabled = false;
+    public boolean depthWriteEnabled = true;
 
     public boolean colorWriteEnabled = true;
 

File: engine/src/core/com/jme3/renderer/RenderManager.java
Patch:
@@ -423,8 +423,6 @@ public void renderGeometry(Geometry g) {
         } else {
             g.getMaterial().render(g, this);
         }
-        //re applying default render state at the end of the render to avoid depth write issues, MUST BE A BETTER WAY
-        renderer.applyRenderState(RenderState.DEFAULT);
     }
 
     public void renderGeometryList(GeometryList gl) {

File: engine/src/lwjgl-ogl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -548,6 +548,7 @@ public void applyRenderState(RenderState state) {
                 context.polyOffsetUnits = 0;
             }
         }
+        
         if (state.getFaceCullMode() != context.cullMode) {
             if (state.getFaceCullMode() == RenderState.FaceCullMode.Off) {
                 glDisable(GL_CULL_FACE);

File: engine/src/test/jme3test/post/TestDepthOfField.java
Patch:
@@ -161,7 +161,7 @@ private void createTerrain(Node rootNode) {
         rock.setWrap(WrapMode.Repeat);
         matRock.setTexture("DiffuseMap_2", rock);
         matRock.setFloat("DiffuseMap_2_scale", 128);
-        Texture normalMap0 = assetManager.loadTexture("Textures/Terrain/splat/grass_normal.png");
+        Texture normalMap0 = assetManager.loadTexture("Textures/Terrain/splat/grass_normal.jpg");
         normalMap0.setWrap(WrapMode.Repeat);
         Texture normalMap1 = assetManager.loadTexture("Textures/Terrain/splat/dirt_normal.png");
         normalMap1.setWrap(WrapMode.Repeat);

File: engine/src/test/jme3test/post/TestRenderToMemory.java
Patch:
@@ -59,8 +59,6 @@
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.awt.image.BufferedImage;
-import java.awt.image.DataBufferByte;
-import java.awt.image.WritableRaster;
 import java.nio.ByteBuffer;
 import javax.swing.JFrame;
 import javax.swing.JPanel;

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/SceneViewerTopComponent.java
Patch:
@@ -205,8 +205,6 @@ public static synchronized SceneViewerTopComponent findInstance() {
     public static void showOpenGLError(String e) {
         Message msg = new NotifyDescriptor.Message(
                 "Error opening OpenGL window!\n"
-                + "Your graphics card needs to support at least OpenGL 2.0,\n"
-                + "if that is the case, please download the latest drivers.\n"
                 + "Error: " + e,
                 NotifyDescriptor.ERROR_MESSAGE);
         DialogDisplayer.getDefault().notifyLater(msg);

File: sdk/jme3-core/src/com/jme3/gde/core/scene/processors/WireProcessor.java
Patch:
@@ -50,7 +50,8 @@ public class WireProcessor implements SceneProcessor {
     Material wireMaterial;
 
     public WireProcessor(AssetManager manager) {
-        wireMaterial = new Material(manager, "/Common/MatDefs/Misc/WireColor.j3md");
+        wireMaterial = new Material(manager, "/Common/MatDefs/Misc/Unshaded.j3md");
+        wireMaterial.getAdditionalRenderState().setWireframe(true);
         wireMaterial.setColor("Color", ColorRGBA.Blue);
     }
 

File: engine/src/core/com/jme3/math/ColorRGBA.java
Patch:
@@ -55,8 +55,7 @@
  * @version $Id: ColorRGBA.java,v 1.29 2007/09/09 18:25:14 irrisor Exp $
  */
 public final class ColorRGBA implements Savable, Cloneable {
-
-    private static final long serialVersionUID = 1L;
+    
     /**
      * the color black (0,0,0).
      */

File: engine/src/core/com/jme3/math/Line.java
Patch:
@@ -40,7 +40,6 @@
 import com.jme3.util.BufferUtils;
 import com.jme3.util.TempVars;
 import java.io.IOException;
-import java.io.Serializable;
 import java.nio.FloatBuffer;
 
 /**
@@ -51,8 +50,6 @@
  * @author Joshua Slack
  */
 public class Line implements Savable, Cloneable {
-    //todo: merge with Ray?
-    private static final long serialVersionUID = 1L;
 
     private Vector3f origin;
     private Vector3f direction;

File: engine/src/core/com/jme3/math/Ray.java
Patch:
@@ -57,7 +57,6 @@
 public final class Ray implements Savable, Cloneable, Collidable {
 
     //todo: merge with Line?
-    private static final long serialVersionUID = 1L;
 
     /** The ray's begining point. */
     public Vector3f origin;

File: engine/src/core/com/jme3/math/Rectangle.java
Patch:
@@ -38,7 +38,6 @@
 import com.jme3.export.OutputCapsule;
 import com.jme3.export.Savable;
 import java.io.IOException;
-import java.io.Serializable;
 
 
 /**
@@ -51,8 +50,7 @@
  * @author Joshua Slack
  */
 
-public final class Rectangle implements Serializable, Savable, Cloneable {
-    private static final long serialVersionUID = 1L;
+public final class Rectangle implements Savable, Cloneable {
 
     private Vector3f a, b, c;
 

File: engine/src/core/com/jme3/math/Ring.java
Patch:
@@ -38,7 +38,6 @@
 import com.jme3.export.OutputCapsule;
 import com.jme3.export.Savable;
 import java.io.IOException;
-import java.io.Serializable;
 
 
 /**
@@ -50,8 +49,7 @@
  * @author Joshua Slack
  */
 
-public final class Ring implements Serializable, Savable, Cloneable {
-    private static final long serialVersionUID = 1L;
+public final class Ring implements Savable, Cloneable {
     
     private Vector3f center, up;
     private float innerRadius, outerRadius;

File: engine/src/core/com/jme3/math/Vector2f.java
Patch:
@@ -52,8 +52,6 @@
 public final class Vector2f implements Savable, Cloneable {
     private static final Logger logger = Logger.getLogger(Vector2f.class.getName());
 
-    private static final long serialVersionUID = 1L;
-
     public static final Vector2f ZERO = new Vector2f(0f, 0f);
     public static final Vector2f UNIT_XY = new Vector2f(1f, 1f);
     

File: engine/src/core/com/jme3/scene/shape/Box.java
Patch:
@@ -73,8 +73,6 @@ public class Box extends AbstractBox {
         1, 0, 0, 0, 0, 1, 1, 1  // bottom
     };
 
-    private static final long serialVersionUID = 1L;
-
     /**
      * Creates a new box.
      * <p>

File: engine/src/core/com/jme3/scene/shape/PQTorus.java
Patch:
@@ -56,8 +56,6 @@
  */
 public class PQTorus extends Mesh {
 
-    private static final long serialVersionUID = 1L;
-
     private float p, q;
 
     private float radius, width;

File: engine/src/networking/com/jme3/network/rmi/RemoteMethodCallMessage.java
Patch:
@@ -32,7 +32,7 @@
 
 package com.jme3.network.rmi;
 
-import com.jme3.network.message.Message;
+import com.jme3.network.AbstractMessage;
 import com.jme3.network.serializing.Serializable;
 
 /**
@@ -41,7 +41,7 @@
  * @author Kirill Vainer
  */
 @Serializable
-public class RemoteMethodCallMessage extends Message {
+public class RemoteMethodCallMessage extends AbstractMessage {
 
     public RemoteMethodCallMessage(){
         super(true);

File: engine/src/networking/com/jme3/network/rmi/RemoteMethodReturnMessage.java
Patch:
@@ -32,8 +32,7 @@
 
 package com.jme3.network.rmi;
 
-
-import com.jme3.network.message.Message;
+import com.jme3.network.AbstractMessage;
 import com.jme3.network.serializing.Serializable;
 
 /**
@@ -43,7 +42,7 @@
  * @author Kirill Vainer.
  */
 @Serializable
-public class RemoteMethodReturnMessage extends Message {
+public class RemoteMethodReturnMessage extends AbstractMessage {
 
     public RemoteMethodReturnMessage(){
         super(true);

File: engine/src/test/jme3test/blender/config/ConfigExecutable.java
Patch:
@@ -9,7 +9,7 @@
  * itself.
  * @author Marcin Roguski (Kaelthas)
  */
-public interface IConfigExecutable {
+public interface ConfigExecutable {
 	/**
 	 * This method runs the test with the given blender key.
 	 * @param modelKey

File: engine/src/core/com/jme3/animation/Bone.java
Patch:
@@ -347,7 +347,6 @@ void getOffsetTransform(Matrix4f m, Quaternion tmp1, Vector3f tmp2, Vector3f tmp
     /**
      * Set user transform.
      * Combine the given transforms to bone's current transforms
-     * @see setUserControl
      */
     public void setUserTransforms(Vector3f translation, Quaternion rotation, Vector3f scale) {
         if (!userControl) {
@@ -378,10 +377,9 @@ public void setUserTransformsWorld(Vector3f translation, Quaternion rotation) {
     }
     
     /**
-     * Returns teh local transform of this bone combined with the given position and rotation
+     * Returns the local transform of this bone combined with the given position and rotation
      * @param position a position
      * @param rotation a rotation
-     * @return 
      */
     public Transform getCombinedTransform(Vector3f position, Quaternion rotation){
             rotation.mult(localPos, tmpTransform.getTranslation()).addLocal(position);

File: engine/src/core/com/jme3/animation/CompactArray.java
Patch:
@@ -234,13 +234,11 @@ public final T[] toObjectArray() {
      * deserialize object
      * @param compactIndex compacted object index
      * @param store
-     * @return
      */
     protected abstract T deserialize(int compactIndex, T store);
 
     /**
      * serialized size of one object element
-     * @return
      */
     protected abstract int getTupleSize();
     

File: engine/src/core/com/jme3/app/state/AppStateManager.java
Patch:
@@ -173,7 +173,6 @@ public void render(RenderManager rm){
 
     /**
      * Calls render for all attached states, do not call directly.
-     * @param rm The RenderManager
      */
     public void postRender(){
         AppState[] array = getArray();

File: engine/src/core/com/jme3/asset/AssetLocator.java
Patch:
@@ -54,7 +54,7 @@ public interface AssetLocator {
      * 
      * @param manager
      * @param key
-     * @return
+     * @return The {@link AssetInfo} that was located, or null if not found.
      */
     public AssetInfo locate(AssetManager manager, AssetKey key);
 }

File: engine/src/core/com/jme3/asset/TextureKey.java
Patch:
@@ -70,7 +70,7 @@ public String toString(){
 
     /**
      * Enable smart caching for textures
-     * @return
+     * @return true to enable smart cache
      */
     @Override
     public boolean useSmartCache(){

File: engine/src/core/com/jme3/audio/AudioRenderer.java
Patch:
@@ -48,7 +48,7 @@ public interface AudioRenderer {
     /**
      * Sets the environment, used for reverb effects.
      *
-     * @see PointAudioSource#setReverbEnabled(boolean)
+     * @see AudioNode#setReverbEnabled(boolean)
      * @param env The environment to set.
      */
     public void setEnvironment(Environment env);

File: engine/src/core/com/jme3/input/controls/MouseButtonTrigger.java
Patch:
@@ -32,6 +32,8 @@
 
 package com.jme3.input.controls;
 
+import com.jme3.input.MouseInput;
+
 /**
  * A <code>MouseButtonTrigger</code> is used as a mapping to receive events
  * from mouse buttons. It is generally expected for a mouse to have at least

File: engine/src/core/com/jme3/light/Light.java
Patch:
@@ -160,7 +160,8 @@ public void setColor(ColorRGBA color){
         this.color.set(color);
     }
 
-    /**
+    
+    /*
      * Returns true if the light is enabled
      * 
      * @return true if the light is enabled

File: engine/src/core/com/jme3/math/Matrix4f.java
Patch:
@@ -1197,8 +1197,7 @@ public Vector4f mult(Vector4f vec, Vector4f store) {
      *
      * @param vec
      *            vec to multiply against.
-     * @param store
-     *            a vector to store the result in.  created if null is passed.
+     * 
      * @return the rotated vector.
      */
     public Vector4f multAcross(Vector4f vec) {

File: engine/src/core/com/jme3/math/Ray.java
Patch:
@@ -455,7 +455,8 @@ public void setOrigin(Vector3f origin) {
      * <code>getLimit</code> returns the limit or the ray, aka the length.
      * If the limit is not infinity, then this ray is a line with length <code>
      * limit</code>.
-     * @return
+     * 
+     * @return the limit or the ray, aka the length.
      */
     public float getLimit(){
         return limit;

File: engine/src/core/com/jme3/math/Vector2f.java
Patch:
@@ -320,7 +320,8 @@ public float distanceSquared(Vector2f v) {
      * <code>distanceSquared</code> calculates the distance squared between
      * this vector and vector v.
      *
-     * @param v the second vector to determine the distance squared.
+     * @param otherX The X coordinate of the v vector
+     * @param otherY The Y coordinate of the v vector
      * @return the distance squared between the two vectors.
      */
     public float distanceSquared(float otherX, float otherY) {

File: engine/src/core/com/jme3/math/Vector4f.java
Patch:
@@ -677,7 +677,7 @@ public Vector4f subtract(float subtractX, float subtractY, float subtractZ, floa
      *            the y value to subtract.
      * @param subtractZ
      *            the z value to subtract.
-     * @param subtract@
+     * @param subtractW
      *            the w value to subtract.
      * @return this
      */

File: engine/src/core/com/jme3/renderer/Camera.java
Patch:
@@ -599,7 +599,6 @@ public Vector3f getUp(Vector3f store) {
      * <code>setLocation</code> sets the position of the camera.
      *
      * @param location the position of the camera.
-     * @see Camera#setLocation(com.jme.math.Vector3f)
      */
     public void setLocation(Vector3f location) {
         this.location.set(location);
@@ -660,7 +659,8 @@ public void lookAtDirection(Vector3f direction, Vector3f up) {
      * @param left      the left axis of the camera.
      * @param up        the up axis of the camera.
      * @param direction the direction the camera is facing.
-     * @see Camera#setAxes(com.jme.math.Vector3f,com.jme.math.Vector3f,com.jme.math.Vector3f)
+     * 
+     * @see Camera#setAxes(com.jme3.math.Quaternion) 
      */
     public void setAxes(Vector3f left, Vector3f up, Vector3f direction) {
         this.rotation.fromAxes(left, up, direction);

File: engine/src/core/com/jme3/renderer/GLObject.java
Patch:
@@ -154,9 +154,8 @@ public String toString(){
     /**
      * This should create a deep clone. For a shallow clone, use
      * createDestructableClone().
-     *
-     * @return
      */
+    @Override
     protected GLObject clone(){
         try{
             GLObject obj = (GLObject) super.clone();

File: engine/src/core/com/jme3/renderer/Renderer.java
Patch:
@@ -99,7 +99,7 @@ public interface Renderer {
     public void onFrame();
 
     /**
-     * @param transform The world transform to use. This changes
+     * @param worldMatrix The world transform to use. This changes
      * the world matrix given in the shader.
      */
     public void setWorldMatrix(Matrix4f worldMatrix);
@@ -171,7 +171,6 @@ public interface Renderer {
 
     /**
      * Deletes a texture from the GPU.
-     * @param tex
      */
     public void deleteImage(Image image);
 

File: engine/src/core/com/jme3/renderer/queue/GeometryList.java
Patch:
@@ -70,10 +70,10 @@ public Geometry get(int index){
     }
 
     /**
-     * Adds a spatial to the list. List size is doubled if there is no room.
+     * Adds a geometry to the list. List size is doubled if there is no room.
      *
-     * @param s
-     *            The spatial to add.
+     * @param g
+     *            The geometry to add.
      */
     public void add(Geometry g) {
         if (size == geometries.length) {

File: engine/src/core/com/jme3/scene/Node.java
Patch:
@@ -526,7 +526,7 @@ public int collideWith(Collidable other, CollisionResults results){
      * @return Non-null, but possibly 0-element, list of matching Spatials (also Instances extending Spatials).
      *
      * @see java.util.regex.Pattern
-     * @see Spatial#matches(Class<? extends Spatial>, String)
+     * @see Spatial#matches(java.lang.Class, java.lang.String) 
      */
     @SuppressWarnings("unchecked")
     public <T extends Spatial>List<T> descendantMatches(
@@ -546,7 +546,7 @@ public <T extends Spatial>List<T> descendantMatches(
     /**
      * Convenience wrapper.
      *
-     * @see #descendantMatches(Class<? extends Spatial>, String)
+     * @see #descendantMatches(java.lang.Class, java.lang.String) 
      */
     public <T extends Spatial>List<T> descendantMatches(
             Class<T> spatialSubclass) {
@@ -556,7 +556,7 @@ public <T extends Spatial>List<T> descendantMatches(
     /**
      * Convenience wrapper.
      *
-     * @see #descendantMatches(Class<? extends Spatial>, String)
+     * @see #descendantMatches(java.lang.Class, java.lang.String) 
      */
     public <T extends Spatial>List<T> descendantMatches(String nameRegex) {
         return descendantMatches(null, nameRegex);

File: engine/src/core/com/jme3/scene/Spatial.java
Patch:
@@ -784,9 +784,6 @@ public void setLocalScale(float localScale) {
 
     /**
      * <code>setLocalScale</code> sets the local scale of this node.
-     *
-     * @param localScale
-     *            the new local scale
      */
     public void setLocalScale(float x, float y, float z) {
         localTransform.setScale(x, y, z);

File: engine/src/core/com/jme3/scene/control/Control.java
Patch:
@@ -48,7 +48,7 @@ public interface Control extends Savable {
      * Creates a clone of the Control, the given Spatial is the cloned
      * version of the spatial to which this control is attached to.
      * @param spatial
-     * @return
+     * @return A clone of this control for the spatial
      */
     public Control cloneForSpatial(Spatial spatial);
 

File: engine/src/core/com/jme3/scene/control/LightControl.java
Patch:
@@ -76,14 +76,14 @@ public LightControl() {
     }
 
     /**
-     * @param camera The Camera to be synced.
+     * @param light The light to be synced.
      */
     public LightControl(Light light) {
         this.light = light;
     }
 
     /**
-     * @param camera The Camera to be synced.
+     * @param light The light to be synced.
      */
     public LightControl(Light light, ControlDirection controlDir) {
         this.light = light;

File: engine/src/core/com/jme3/shader/Shader.java
Patch:
@@ -380,7 +380,6 @@ public void resetSources(){
     /**
      * Returns true if this program and all it's shaders have been compiled,
      * linked and validated successfuly.
-     * @return
      */
     public boolean isUsable(){
         return usable;
@@ -417,7 +416,6 @@ public void setUpdateNeeded(){
     /**
      * Called by the object manager to reset all object IDs. This causes
      * the shader to be reuploaded to the GPU incase the display was restarted.
-     * @param r
      */
     @Override
     public void resetObject() {

File: engine/src/core/com/jme3/system/JmeContext.java
Patch:
@@ -37,6 +37,7 @@
 import com.jme3.input.MouseInput;
 import com.jme3.input.TouchInput;
 import com.jme3.renderer.Renderer;
+import com.jme3.system.JmeCanvasContext;
 
 /**
  * Represents a rendering context within the engine.

File: engine/src/core/com/jme3/export/SavableClassFinder.java
Patch:
@@ -43,6 +43,7 @@
 
 import com.jme3.export.InputCapsule;
 import com.jme3.export.Savable;
+import com.jme3.material.MatParamTexture;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -71,6 +72,7 @@ private static void addRemapping(String oldClass, Class<? extends Savable> newCl
         addRemapping("com.jme3.effect.EmitterMeshFaceShape", EmitterMeshFaceShape.class);
         addRemapping("com.jme3.effect.EmitterMeshVertexShape", EmitterMeshVertexShape.class);
         addRemapping("com.jme3.effect.EmitterPointShape", EmitterPointShape.class);
+        addRemapping("com.jme3.material.Material$MatParamTexture", MatParamTexture.class);
     }
     
     private static String remapClass(String className) throws ClassNotFoundException {

File: engine/src/blender/com/jme3/scene/plugins/blender/helpers/v249/MaterialHelper.java
Patch:
@@ -41,8 +41,8 @@
 
 import com.jme3.asset.BlenderKey.FeaturesToLoad;
 import com.jme3.material.MatParam;
+import com.jme3.material.MatParamTexture;
 import com.jme3.material.Material;
-import com.jme3.material.Material.MatParamTexture;
 import com.jme3.material.RenderState.BlendMode;
 import com.jme3.material.RenderState.FaceCullMode;
 import com.jme3.math.ColorRGBA;

File: engine/src/core-plugins/com/jme3/export/binary/BinaryImporter.java
Patch:
@@ -32,6 +32,7 @@
 
 package com.jme3.export.binary;
 
+import com.jme3.export.SavableClassFinder;
 import com.jme3.asset.AssetInfo;
 import com.jme3.asset.AssetManager;
 import com.jme3.asset.ModelKey;
@@ -294,7 +295,7 @@ public Savable readObject(int id) {
             BinaryInputCapsule cap = new BinaryInputCapsule(this, bco);
             cap.setContent(dataArray, loc, loc+dataLength);
 
-            Savable out = BinaryClassLoader.fromName(bco.className, cap, loaders);
+            Savable out = SavableClassFinder.fromName(bco.className, cap, loaders);
 
             capsuleTable.put(out, cap);
             contentTable.put(id, out);

File: engine/src/core/com/jme3/input/controls/MouseButtonTrigger.java
Patch:
@@ -70,8 +70,7 @@ public static int mouseButtonHash(int mouseButton){
         return 256 | (mouseButton & 0xff);
     }
 
-    @Override
-    public int hashCode(){
+    public int triggerHashCode() {
         return mouseButtonHash(mouseButton);
     }
 

File: engine/src/core/com/jme3/scene/Spatial.java
Patch:
@@ -1247,7 +1247,7 @@ public void read(JmeImporter im) throws IOException {
         //When backward compatibility won't be needed anymore this can be replaced by : 
         //controls = ic.readSavableArrayList("controlsList", null));
         controls.addAll(0, ic.readSavableArrayList("controlsList", null));
-
+        
         userData = (HashMap<String, Savable>) ic.readStringSavableMap("user_data", null);
     }
 

File: engine/src/core/com/jme3/scene/control/AbstractControl.java
Patch:
@@ -55,6 +55,9 @@ public AbstractControl(){
     }
 
     public void setSpatial(Spatial spatial) {
+        if (this.spatial != null && spatial != null) {
+            throw new IllegalStateException("This control has already been added to a Spatial");
+        }   
         this.spatial = spatial;
     }
 

File: engine/src/test/jme3test/bullet/BombControl.java
Patch:
@@ -72,7 +72,7 @@ private void prepareEffect(AssetManager assetManager) {
         effect.setEndSize(2f);
         effect.setShape(new EmitterSphereShape(Vector3f.ZERO, 1f));
         effect.setParticlesPerSec(0);
-        effect.setGravity(-5f);
+        effect.setGravity(0, -5f, 0);
         effect.setLowLife(.4f);
         effect.setHighLife(.5f);
         effect.setInitialVelocity(new Vector3f(0, 7, 0));

File: engine/src/test/jme3test/bullet/TestWalkingChar.java
Patch:
@@ -219,7 +219,7 @@ private void prepareEffect() {
         effect.setEndSize(2f);
         effect.setShape(new EmitterSphereShape(Vector3f.ZERO, 1f));
         effect.setParticlesPerSec(0);
-        effect.setGravity(-5f);
+        effect.setGravity(0, -5, 0);
         effect.setLowLife(.4f);
         effect.setHighLife(.5f);
         effect.setInitialVelocity(new Vector3f(0, 7, 0));

File: engine/src/test/jme3test/effect/TestMovingParticle.java
Patch:
@@ -58,7 +58,7 @@ public static void main(String[] args){
     @Override
     public void simpleInitApp() {
         emit = new ParticleEmitter("Emitter", Type.Triangle, 200);
-        emit.setGravity(0);
+        emit.setGravity(0, 0, 0);
         emit.setVelocityVariation(1);
         emit.setLowLife(1);
         emit.setHighLife(1);

File: engine/src/test/jme3test/effect/TestParticleEmitter.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String[] args){
     public void simpleInitApp() {
         ParticleEmitter emit = new ParticleEmitter("Emitter", Type.Triangle, 200);
         emit.setShape(new EmitterSphereShape(Vector3f.ZERO, 1f));
-        emit.setGravity(0);
+        emit.setGravity(0, 0, 0);
         emit.setLowLife(5);
         emit.setHighLife(10);
         emit.setInitialVelocity(new Vector3f(0, 0, 0));

File: engine/src/test/jme3test/effect/TestPointSprite.java
Patch:
@@ -52,7 +52,7 @@ public void simpleInitApp() {
         ParticleEmitter emit = new ParticleEmitter("Emitter", Type.Point, 10000);
         emit.setShape(new EmitterBoxShape(new Vector3f(-1.8f, -1.8f, -1.8f),
                                           new Vector3f(1.8f, 1.8f, 1.8f)));
-        emit.setGravity(0);
+        emit.setGravity(0, 0, 0);
         emit.setLowLife(60);
         emit.setHighLife(60);
         emit.setInitialVelocity(new Vector3f(0, 0, 0));

File: engine/src/test/jme3test/helloworld/HelloEffects.java
Patch:
@@ -60,7 +60,7 @@ public void simpleInitApp() {
     fire.setInitialVelocity(new Vector3f(0, 2, 0));
     fire.setStartSize(1.5f);
     fire.setEndSize(0.1f);
-    fire.setGravity(0);
+    fire.setGravity(0, 0, 0);
     fire.setLowLife(1f);
     fire.setHighLife(3f);
     fire.setVelocityVariation(0.3f);
@@ -75,7 +75,7 @@ public void simpleInitApp() {
     debris.setSelectRandomImage(true);
     debris.setInitialVelocity(new Vector3f(0, 4, 0));
     debris.setStartColor(ColorRGBA.White);
-    debris.setGravity(6f);
+    debris.setGravity(0, 6, 0);
     debris.setVelocityVariation(.60f);
     rootNode.attachChild(debris);
     debris.emitAllParticles();

File: engine/src/test/jme3test/helloworld/HelloInput.java
Patch:
@@ -93,13 +93,13 @@ public void onAction(String name, boolean keyPressed, float tpf) {
     public void onAnalog(String name, float value, float tpf) {
       if (isRunning) {
         if (name.equals("Rotate")) {
-          player.rotate(0, value*speed, 0);
+          player.rotate(0, value, 0);
         }
         if (name.equals("Right")) {
-          player.move((new Vector3f(value*speed, 0,0)) );
+          player.move((new Vector3f(value, 0,0)) );
         }
         if (name.equals("Left")) {
-          player.move(new Vector3f(-value*speed, 0,0));
+          player.move(new Vector3f(-value, 0,0));
         }
       } else {
         System.out.println("Press P to unpause.");

File: engine/src/test/jme3test/light/TestTransparentShadow.java
Patch:
@@ -122,7 +122,7 @@ public void visit(Geometry geom) {
         fire.setInitialVelocity(new Vector3f(0, 2, 0));
         fire.setStartSize(0.6f);
         fire.setEndSize(0.1f);
-        fire.setGravity(0);
+        fire.setGravity(0, 0, 0);
         fire.setLowLife(0.5f);
         fire.setHighLife(1.5f);
         fire.setVelocityVariation(0.3f);

File: engine/src/test/jme3test/water/TestPostWater.java
Patch:
@@ -186,7 +186,7 @@ private void createFire() {
         fire.setInitialVelocity(new Vector3f(0, 2, 0));
         fire.setStartSize(10f);
         fire.setEndSize(1f);
-        fire.setGravity(0);
+        fire.setGravity(0, 0, 0);
         fire.setLowLife(0.5f);
         fire.setHighLife(1.5f);
         fire.setVelocityVariation(0.3f);

File: engine/src/xml/com/jme3/export/xml/DOMInputCapsule.java
Patch:
@@ -34,7 +34,7 @@
 
 import com.jme3.export.InputCapsule;
 import com.jme3.export.Savable;
-import com.jme3.export.binary.BinaryClassLoader;
+import com.jme3.export.SavableClassFinder;
 import com.jme3.util.BufferUtils;
 import com.jme3.util.IntMap;
 import java.io.IOException;
@@ -973,7 +973,7 @@ private Savable readSavableFromCurrentElem(Savable defVal) throws
             } else if (currentElem.hasAttribute("class")) {
                 className = currentElem.getAttribute("class");
             }
-            tmp = BinaryClassLoader.fromName(className, null);
+            tmp = SavableClassFinder.fromName(className, null);
             String refID = currentElem.getAttribute("reference_ID");
             if (refID.length() < 1) refID = currentElem.getAttribute("id");
             if (refID.length() > 0) referencedSavables.put(refID, tmp);

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/properties/SceneExplorerProperty.java
Patch:
@@ -31,7 +31,7 @@
  */
 package com.jme3.gde.core.sceneexplorer.nodes.properties;
 
-import com.jme3.effect.EmitterShape;
+import com.jme3.effect.shapes.EmitterShape;
 import com.jme3.gde.core.scene.SceneApplication;
 import com.jme3.gde.core.sceneexplorer.nodes.AbstractSceneExplorerNode;
 import com.jme3.gde.core.undoredo.AbstractUndoableSceneEdit;

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/JmeParticleEmitter.java
Patch:
@@ -31,7 +31,7 @@
  */
 package com.jme3.gde.core.sceneexplorer.nodes;
 
-import com.jme3.effect.EmitterShape;
+import com.jme3.effect.shapes.EmitterShape;
 import com.jme3.effect.ParticleEmitter;
 import com.jme3.math.ColorRGBA;
 import com.jme3.math.Vector3f;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -229,7 +229,7 @@ private void updateChildrens(Vector3f cam) {
         attachQuadAt(q4, 4);
 
         this.currentCell = cam;
-        this.setLocalTranslation(cam.mult(2 * this.quadSize));
+        this.setLocalTranslation(cam.mult(this.getLocalScale().mult(this.quadSize)));
 
         if (control != null) {
             control = new RigidBodyControl(new HeightfieldCollisionShape(getHeightMap(), getLocalScale()), 0);

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshAnimationLoader.java
Patch:
@@ -30,7 +30,7 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.jme3.animation;
+package com.jme3.scene.plugins.ogre;
 
 //import static com.jmex.model.XMLUtil.getAttribute;
 //import static com.jmex.model.XMLUtil.getIntAttribute;

File: engine/src/terrain/com/jme3/terrain/heightmap/FractalHeightMapGrid.java
Patch:
@@ -49,7 +49,7 @@ public HeightMap getHeightMapAt(Vector3f location) {
 				BufferedImage im = null;
 				im = ImageIO.read(new File(this.cacheDir, "terrain_" + (int) location.x + "_" + (int) location.z + ".png"));
 				heightmap = new Grayscale16BitHeightMap(im);
-				heightmap.setHeightScale(256);
+				heightmap.setHeightScale(heightScale);
 			} catch (IOException e) {}
 		} else {
 			FloatBuffer buffer = this.base.getBuffer(location.x * (this.size - 1), location.z * (this.size - 1), 0, this.size);

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/AddSpatialAction.java
Patch:
@@ -32,7 +32,7 @@
 package com.jme3.gde.core.sceneexplorer.nodes.actions;
 
 import com.jme3.audio.AudioNode;
-import com.jme3.effect.EmitterSphereShape;
+import com.jme3.effect.shapes.EmitterSphereShape;
 import com.jme3.effect.ParticleEmitter;
 import com.jme3.effect.ParticleMesh;
 import com.jme3.gde.core.scene.SceneApplication;

File: sdk/jme3-scenecomposer/src/com/jme3/gde/scenecomposer/SceneEditorController.java
Patch:
@@ -11,7 +11,7 @@
 import com.jme3.bullet.collision.shapes.CapsuleCollisionShape;
 import com.jme3.bullet.control.CharacterControl;
 import com.jme3.bullet.control.RigidBodyControl;
-import com.jme3.effect.EmitterSphereShape;
+import com.jme3.effect.shapes.EmitterSphereShape;
 import com.jme3.effect.ParticleEmitter;
 import com.jme3.effect.ParticleMesh;
 import com.jme3.gde.core.assets.ProjectAssetManager;

File: engine/src/terrain/com/jme3/terrain/heightmap/AbstractHeightMap.java
Patch:
@@ -447,10 +447,10 @@ public void smooth(float np) {
                 for (int d = 0; d < 8; d++) {
                     int i = x + dxs[d];
                     int j = y + dys[d];
-                    if (i < 0 || i > size) {
+                    if (i < 0 || i >= size) {
                         continue;
                     }
-                    if (j < 0 || j > size) {
+                    if (j < 0 || j >= size) {
                         continue;
                     }
                     neighNumber++;

File: engine/src/core/com/jme3/scene/shape/Curve.java
Patch:
@@ -122,7 +122,7 @@ private void createCatmullRomMesh(int nbSubSegments) {
 
         this.setMode(Mesh.Mode.Lines);
         this.setBuffer(VertexBuffer.Type.Position, 3, array);
-        this.setBuffer(VertexBuffer.Type.Index, 3, indices);//(spline.getControlPoints().size() - 1) * nbSubSegments * 2
+        this.setBuffer(VertexBuffer.Type.Index, 2, indices);//(spline.getControlPoints().size() - 1) * nbSubSegments * 2
         this.updateBound();
         this.updateCounts();
     }
@@ -244,7 +244,7 @@ private void createLinearMesh() {
 
         this.setMode(Mesh.Mode.Lines);
         this.setBuffer(VertexBuffer.Type.Position, 3, array);
-        this.setBuffer(VertexBuffer.Type.Index, (spline.getControlPoints().size() - 1) * 2, indices);
+        this.setBuffer(VertexBuffer.Type.Index, 2, indices);
         this.updateBound();
         this.updateCounts();
     }

File: engine/src/jbullet/com/jme3/bullet/control/KinematicRagdollControl.java
Patch:
@@ -586,8 +586,8 @@ public void setPhysicsSpace(PhysicsSpace space) {
             }
             this.space = space;
             addToPhysicsSpace();
+            this.space.addCollisionListener(this);
         }
-        this.space.addCollisionListener(this);
     }
 
     /**

File: engine/src/android/com/jme3/app/AndroidHarness.java
Patch:
@@ -110,7 +110,7 @@ protected void onStop(){
 
     @Override
     protected void onDestroy(){
-        super.onDestroy();
+        super.onDestroy();        
         app.stop();
         logger.info("onDestroy");
     }

File: engine/src/bullet/com/jme3/bullet/objects/PhysicsCharacter.java
Patch:
@@ -150,7 +150,7 @@ public float getFallSpeed() {
     }
 
     public void setJumpSpeed(float jumpSpeed) {
-        this.jumpSpeed = fallSpeed;
+        this.jumpSpeed = jumpSpeed;
         setJumpSpeed(characterId, jumpSpeed);
     }
 

File: engine/src/jbullet/com/jme3/bullet/objects/PhysicsCharacter.java
Patch:
@@ -141,7 +141,7 @@ public float getFallSpeed() {
     }
 
     public void setJumpSpeed(float jumpSpeed) {
-        this.jumpSpeed = fallSpeed;
+        this.jumpSpeed = jumpSpeed;
         character.setJumpSpeed(jumpSpeed);
     }
 

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglDisplay.java
Patch:
@@ -102,8 +102,8 @@ protected void createContext(AppSettings settings) throws LWJGLException{
                             ||pixelFormat.getDepthBits() != pf.getDepthBits()
                             ||pixelFormat.getStencilBits() != pf.getStencilBits()
                             ||pixelFormat.getSamples() != pf.getSamples())){
-            Display.destroy();
             renderer.resetGLObjects();
+            Display.destroy();
             pixelFormatChanged = true;
         }
         pixelFormat = pf;

File: engine/src/core/com/jme3/audio/AudioBuffer.java
Patch:
@@ -38,10 +38,10 @@
 /**
  * An <code>AudioBuffer</code> is an implementation of AudioData
  * where the audio is buffered (stored in memory). All parts of it
- * are accessable at any time. <br/>
+ * are accessible at any time. <br/>
  * AudioBuffers are useful for short sounds, like effects, etc.
  *
- * @author Kirill
+ * @author Kirill Vainer
  */
 public class AudioBuffer extends AudioData {
 

File: engine/src/core/com/jme3/audio/AudioData.java
Patch:
@@ -38,7 +38,7 @@
  * are to be stored entirely in memory, while long audio files (music) is
  * streamed from the hard drive as it is played.
  *
- * @author Kirill
+ * @author Kirill Vainer
  */
 public abstract class AudioData extends ALObject {
 

File: engine/src/core/com/jme3/input/InputManager.java
Patch:
@@ -434,7 +434,7 @@ public void addMapping(String mappingName, Trigger... triggers) {
                 names.add(mapping);
                 mapping.triggers.add(hash);
             } else {
-                logger.log(Level.WARNING, "Attempted to add mapping '{0}' twice to trigger.", mappingName);
+                logger.log(Level.WARNING, "Attempted to add mapping \"{0}\" twice to trigger.", mappingName);
             }
         }
     }

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -537,7 +537,7 @@ public void removeAll(Spatial spatial) {
             List<Spatial> children = ((Node) spatial).getChildren();
             for (Iterator<Spatial> it = children.iterator(); it.hasNext();) {
                 Spatial spat = it.next();
-                removeAll((Node) spat);
+                removeAll(spat);
             }
         }
     }

File: engine/src/jbullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -527,7 +527,7 @@ public void removeAll(Spatial spatial) {
             List<Spatial> children = ((Node) spatial).getChildren();
             for (Iterator<Spatial> it = children.iterator(); it.hasNext();) {
                 Spatial spat = it.next();
-                removeAll((Node) spat);
+                removeAll(spat);
             }
         }
     }

File: engine/src/core/com/jme3/scene/control/BillboardControl.java
Patch:
@@ -205,8 +205,8 @@ private void rotateAxial(Camera camera, Vector3f axis) {
         // the camera. To do this, the camera must be inverse-transformed into
         // the model space of the billboard.
         look.set(camera.getLocation()).subtractLocal(
-                spatial.getWorldTranslation());
-        spatial.getWorldRotation().mult(look, left); // coopt left for our own
+                spatial.getWorldTranslation());   
+        spatial.getParent().getWorldRotation().mult(look, left); // coopt left for our own
         // purposes.
         left.x *= 1.0f / spatial.getWorldScale().x;
         left.y *= 1.0f / spatial.getWorldScale().y;

File: engine/src/core/com/jme3/animation/Bone.java
Patch:
@@ -449,7 +449,7 @@ void blendAnimTransforms(Vector3f translation, Quaternion rotation, Vector3f sca
 
         //rotation
         tmpQ.set(initialRot).multLocal(rotation);
-        localRot.slerp(tmpQ, weight);
+        localRot.nlerp(tmpQ, weight);
 
         //scale
         if (scale != null) {

File: engine/src/core/com/jme3/animation/BoneTrack.java
Patch:
@@ -175,7 +175,7 @@ public void setTime(float time, Skeleton skeleton, float weight) {
             if (scales != null) {
                 scales.get(endFrame, tempS2);
             }
-            tempQ.slerp(tempQ2, blend);
+            tempQ.nlerp(tempQ2, blend);
             tempV.interpolate(tempV2, blend);
             tempS.interpolate(tempS2, blend);
         }

File: engine/src/core/com/jme3/audio/AudioNode.java
Patch:
@@ -616,7 +616,7 @@ public void updateGeometricState(){
         
         super.updateGeometricState();
 
-        if (updatePos && renderer != null)
+        if (updatePos && channel >= 0)
             renderer.updateSourceParam(this, AudioParam.Position);
     }
 

File: engine/src/lwjgl-oal/com/jme3/audio/lwjgl/LwjglAudioRenderer.java
Patch:
@@ -360,6 +360,7 @@ public void updateSourceParam(AudioNode src, AudioParam param){
                         alSource3f(id, AL_POSITION, 0,0,0);
                         alSource3f(id, AL_VELOCITY, 0,0,0);
                     }else{
+                        alSourcei(id, AL_SOURCE_RELATIVE, AL_FALSE);
                         updateSourceParam(src, AudioParam.Position);
                         updateSourceParam(src, AudioParam.Velocity);
                         updateSourceParam(src, AudioParam.MaxDistance);
@@ -438,6 +439,7 @@ private void setSourceParams(int id, AudioNode src, boolean forceNonLoop){
             alSource3f(id, AL_VELOCITY, vel.x, vel.y, vel.z);
             alSourcef(id, AL_MAX_DISTANCE, src.getMaxDistance());
             alSourcef(id, AL_REFERENCE_DISTANCE, src.getRefDistance());
+            alSourcei(id, AL_SOURCE_RELATIVE, AL_FALSE);
 
             if (src.isReverbEnabled()){
                 int filter = EFX10.AL_FILTER_NULL;

File: engine/src/terrain/com/jme3/terrain/geomipmap/TerrainGrid.java
Patch:
@@ -86,19 +86,19 @@ public void update(List<Vector3f> locations) {
         // 2: grids are associated with locations, and no incremental update is done, we load new grids for new locations, and unload those that are not needed anymore
         Vector3f cam = locations.get(0);
         Vector3f camCell = this.getCell(cam);
-        if (!camCell.equals(this.currentCell)) {
+        if (camCell.x != this.currentCell.x || camCell.z != currentCell.z) {
             this.updateChildrens(camCell);
             for (TerrainGridListener l : this.listeners.values()) {
                 l.gridMoved(camCell);
             }
         }
 
-        super.update(locations);
+        //super.update(locations);
     }
 
     public Vector3f getCell(Vector3f location) {
         final Vector3f v = location.clone().divideLocal(this.getLocalScale().mult(this.quadSize)).add(0.5f, 0, 0.5f);
-        return new Vector3f(FastMath.floor(v.x), FastMath.floor(v.y), FastMath.floor(v.z));
+        return new Vector3f(FastMath.floor(v.x), 0, FastMath.floor(v.z));
     }
 
     protected void removeQuad(int idx) {

File: engine/src/core/com/jme3/post/FilterPostProcessor.java
Patch:
@@ -316,7 +316,7 @@ public void reshape(ViewPort vp, int w, int h) {
         height = (int) (h * (Math.abs(bottom - top)));
         width = Math.max(1, width);
         height = Math.max(1, height);
-        vp.getCamera().resize(width, height, true);
+        vp.getCamera().resize(width, height, false);
         cameraInit = true;
         computeDepth = false;
 

File: engine/src/desktop-fx/com/jme3/water/WaterFilter.java
Patch:
@@ -233,8 +233,8 @@ public void initFilter(AssetManager manager, RenderManager renderManager, ViewPo
         material.setBoolean("UseSpecular", useSpecular);
         material.setBoolean("UseFoam", useFoam);
         material.setBoolean("UseRefraction", useRefraction);
-        material.setFloat("m_ReflectionDisplace", reflectionDisplace);
-        material.setFloat("m_FoamIntensity", foamIntensity);
+        material.setFloat("ReflectionDisplace", reflectionDisplace);
+        material.setFloat("FoamIntensity", foamIntensity);
 
     }
 

File: engine/src/core-plugins/com/jme3/scene/plugins/MTLLoader.java
Patch:
@@ -132,7 +132,7 @@ protected boolean readLine(){
                 else
                     color = new ColorRGBA(ColorRGBA.White);
 
-                color.a = scan.nextFloat();
+                color.a = alpha;
                 material.setColor("Diffuse", color);
                 material.setTransparent(true);
                 material.getAdditionalRenderState().setBlendMode(BlendMode.Alpha);

File: engine/src/bullet/com/jme3/bullet/objects/PhysicsRigidBody.java
Patch:
@@ -341,7 +341,7 @@ public Vector3f getGravity(Vector3f gravity) {
         if (gravity == null) {
             gravity = new Vector3f();
         }
-        getGravity(gravity);
+        getGravity(objectId, gravity);
         return gravity;
     }
 

File: engine/src/core/com/jme3/scene/VertexBuffer.java
Patch:
@@ -423,10 +423,11 @@ public void updateData(Buffer data){
         }
 
         // will force renderer to call glBufferData again
-        if (this.data.getClass() != data.getClass() || data.limit() != lastLimit){
+        if (data != null && (this.data.getClass() != data.getClass() || data.limit() != lastLimit)){
             dataSizeChanged = true;
             lastLimit = data.limit();
         }
+        
         this.data = data;
         setUpdateNeeded();
     }

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -279,7 +279,6 @@ public MatParam getParam(String name) {
         if (param instanceof MatParam) {
             return (MatParam) param;
         }
-
         return null;
     }
 

File: engine/src/core/com/jme3/scene/Mesh.java
Patch:
@@ -336,7 +336,7 @@ public void setInterleaved(){
 
         VertexBuffer allData = new VertexBuffer(Type.InterleavedData);
         ByteBuffer dataBuf = BufferUtils.createByteBuffer(stride * getVertexCount());
-        allData.setupData(Usage.Static, -1, Format.UnsignedByte, dataBuf);
+        allData.setupData(Usage.Static, 1, Format.UnsignedByte, dataBuf);
         // adding buffer directly so that no update counts is forced
         buffers.put(Type.InterleavedData.ordinal(), allData);
 
@@ -387,8 +387,8 @@ public void setInterleaved(){
             vb.setOffset(offset);
             vb.setStride(stride);
             
-            // discard old buffer
-            vb.setupData(vb.usage, vb.components, vb.format, null);
+            vb.updateData(null);
+            //vb.setupData(vb.usage, vb.components, vb.format, null);
             offset += vb.componentsLength;
         }
     }

File: engine/src/core/com/jme3/scene/shape/Curve.java
Patch:
@@ -122,7 +122,7 @@ private void createCatmullRomMesh(int nbSubSegments) {
 
         this.setMode(Mesh.Mode.Lines);
         this.setBuffer(VertexBuffer.Type.Position, 3, array);
-        this.setBuffer(VertexBuffer.Type.Index, (spline.getControlPoints().size() - 1) * nbSubSegments * 2, indices);
+        this.setBuffer(VertexBuffer.Type.Index, 3, indices);//(spline.getControlPoints().size() - 1) * nbSubSegments * 2
         this.updateBound();
         this.updateCounts();
     }

File: engine/src/core/com/jme3/util/SkyFactory.java
Patch:
@@ -40,8 +40,8 @@ public static Spatial createSky(AssetManager assetManager, Texture texture, Vect
     }
 
     private static void checkImage(Image image){
-        if (image.getDepth() != 1)
-            throw new IllegalArgumentException("3D/Array images not allowed");
+//        if (image.getDepth() != 1)
+//            throw new IllegalArgumentException("3D/Array images not allowed");
 
         if (image.getWidth() != image.getHeight())
             throw new IllegalArgumentException("Image width and height must be the same");

File: engine/src/bullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -537,9 +537,7 @@ public void removeAll(Spatial spatial) {
             List<Spatial> children = ((Node) spatial).getChildren();
             for (Iterator<Spatial> it = children.iterator(); it.hasNext();) {
                 Spatial spat = it.next();
-                if (spat instanceof Node) {
-                    removeAll((Node) spat);
-                }
+                removeAll((Node) spat);
             }
         }
     }

File: engine/src/jbullet/com/jme3/bullet/PhysicsSpace.java
Patch:
@@ -527,9 +527,7 @@ public void removeAll(Spatial spatial) {
             List<Spatial> children = ((Node) spatial).getChildren();
             for (Iterator<Spatial> it = children.iterator(); it.hasNext();) {
                 Spatial spat = it.next();
-                if (spat instanceof Node) {
-                    removeAll((Node) spat);
-                }
+                removeAll((Node) spat);
             }
         }
     }

File: engine/src/networking/com/jme3/network/ClientStateListener.java
Patch:
@@ -63,5 +63,6 @@ public interface ClientStateListener
     public class DisconnectInfo
     {
         public String reason;
+        public Throwable error;
     }
 }

File: engine/src/networking/com/jme3/network/base/KernelAdapter.java
Patch:
@@ -178,7 +178,7 @@ protected MessageProtocol getMessageBuffer( Endpoint p )
         } else {
             // See if we already have one
             MessageProtocol result = messageBuffers.get(p);
-            if( result != null ) {
+            if( result == null ) {
                 result = new MessageProtocol();
                 messageBuffers.put(p, result);
             }

File: engine/src/core/com/jme3/renderer/RenderContext.java
Patch:
@@ -178,7 +178,8 @@ public void reset(){
         boundShaderProgram = 0;
         boundFBO = 0;
         boundRB = 0;
-        boundDrawBuf = -1;
+        boundDrawBuf = -1; 
+        boundReadBuf = -1;
         boundElementArrayVBO = 0;
         boundVertexArray = 0;
         boundArrayVBO = 0;

File: engine/src/tools/jme3tools/converters/ImageToAwt.java
Patch:
@@ -209,7 +209,7 @@ private static void writePixel(ByteBuffer buf, int idx, int pixel, int bpp){
     public static void convert(BufferedImage image, Format format, ByteBuffer buf){
         DecodeParams p = params.get(format);
         if (p == null)
-            throw new UnsupportedOperationException();
+            throw new UnsupportedOperationException("Image format " + format + " is not supported");
 
         int width = image.getWidth();
         int height = image.getHeight();

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/NiftyJmeDisplay.java
Patch:
@@ -46,6 +46,7 @@
 import com.jme3.texture.FrameBuffer;
 import de.lessvoid.nifty.Nifty;
 import de.lessvoid.nifty.spi.input.InputSystem;
+import de.lessvoid.nifty.tools.TimeProvider;
 
 public class NiftyJmeDisplay extends com.jme3.niftygui.NiftyJmeDisplay implements SceneProcessor {
 
@@ -62,7 +63,7 @@ public NiftyJmeDisplay(AssetManager assetManager,
 
         soundDev = new SoundDeviceJme(assetManager, audioRenderer);
         renderDev = new RenderDeviceJme(this);
-        nifty = new Nifty(renderDev, soundDev, inputManager, this);
+        nifty = new Nifty(renderDev, soundDev, inputManager, new TimeProvider());
     }
 
     @Override

File: engine/src/jbullet/com/jme3/bullet/control/ragdoll/HumanoidRagdollPreset.java
Patch:
@@ -24,7 +24,7 @@ protected void initBoneMap() {
 
         boneMap.put("foot", new JointPreset(0, -FastMath.QUARTER_PI, FastMath.QUARTER_PI, -FastMath.QUARTER_PI, FastMath.QUARTER_PI, -FastMath.QUARTER_PI));
 
-        boneMap.put("upperarm", new JointPreset(FastMath.HALF_PI, -FastMath.QUARTER_PI, 0, 0, FastMath.PI, -FastMath.QUARTER_PI));
+        boneMap.put("upperarm", new JointPreset(FastMath.HALF_PI, -FastMath.QUARTER_PI, 0, 0, FastMath.HALF_PI, -FastMath.QUARTER_PI));
 
         boneMap.put("lowerarm", new JointPreset(FastMath.HALF_PI, 0, 0, 0, 0, 0));
 

File: engine/src/core/com/jme3/scene/debug/WireFrustum.java
Patch:
@@ -73,15 +73,14 @@ public void update(Vector3f[] points){
             return;
         }
 
-
         FloatBuffer b = BufferUtils.createFloatBuffer(points);
         FloatBuffer a = (FloatBuffer) vb.getData();
         b.rewind();
         a.rewind();
         a.put(b);
         a.rewind();
 
-        vb.setUpdateNeeded();
+        vb.updateData(a);
         
         updateBound();
     }

File: engine/src/lwjgl-ogl/com/jme3/renderer/lwjgl/LwjglRenderer.java
Patch:
@@ -417,9 +417,9 @@ public void invalidateState(){
     public void resetGLObjects() {
         objManager.resetObjects();
         statistics.clearMemory();
+        context.reset();
         boundShader = null;
         lastFb = null;
-        context.reset();
     }
 
     public void cleanup() {

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglContext.java
Patch:
@@ -115,8 +115,6 @@ protected ContextAttribs createContextAttribs(){
     }
 
     protected void initContextFirstTime(){
-        assert renderable.get();
-
         if (GLContext.getCapabilities().OpenGL20){
             renderer = new LwjglRenderer();
         }else{

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglTimer.java
Patch:
@@ -34,6 +34,7 @@
 
 import com.jme3.math.FastMath;
 import com.jme3.system.Timer;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.lwjgl.Sys;
 
@@ -81,7 +82,7 @@ public LwjglTimer() {
         reset();
 
         //print timer resolution info
-        logger.info("Timer resolution: " + LWJGL_TIMER_RES + " ticks per second");
+        logger.log(Level.INFO, "Timer resolution: {0} ticks per second", LWJGL_TIMER_RES);
     }
 
     public void reset() {

File: engine/src/core/com/jme3/material/MatParam.java
Patch:
@@ -223,7 +223,7 @@ public int hashCode() {
 
     @Override
     public String toString(){
-        return type.name()+" "+name;
+        return type.name() + " " + name + " : " + getValueAsString();
     }
 
     public void apply(Renderer r, Technique technique) {

File: sdk/jme3-core/src/com/jme3/gde/core/sceneviewer/SceneViewerTopComponent.java
Patch:
@@ -44,6 +44,7 @@
 import org.openide.NotifyDescriptor;
 import org.openide.NotifyDescriptor.Message;
 import org.openide.awt.UndoRedo;
+import org.openide.util.Exceptions;
 import org.openide.util.HelpCtx;
 import org.openide.util.Lookup;
 
@@ -73,8 +74,10 @@ public SceneViewerTopComponent() {
             oglCanvas = ((JmeCanvasContext) app.getContext()).getCanvas();
             oGLPanel.add(oglCanvas);
         } catch (Exception e) {
+            Exceptions.printStackTrace(e);
             showOpenGLError(e.toString());
         } catch (Error err) {
+            Exceptions.printStackTrace(err);
             showOpenGLError(err.toString());
         }
     }

File: sdk/jme3-vehicle-creator/src/com/jme3/gde/vehiclecreator/VehicleEditorController.java
Patch:
@@ -214,7 +214,7 @@ public void doStopVehicle() {
         vehicleControl.setLinearVelocity(Vector3f.ZERO);
         vehicleControl.setAngularVelocity(Vector3f.ZERO);
         vehicleControl.resetSuspension();
-        vehicleControl.attachDebugShape(SceneApplication.getApplication().getAssetManager());
+        vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
         bulletState.getPhysicsSpace().removeAll(toolsNode);
         bulletState.getPhysicsSpace().remove(vehicleControl);
 //        chaseCam.setEnabled(false);
@@ -380,12 +380,12 @@ public boolean doCheckVehicle(Node rootNode) {
         VehicleControl control = rootNode.getControl(VehicleControl.class);
         if (control == null) {
             vehicleControl = new VehicleControl(new BoxCollisionShape(Vector3f.UNIT_XYZ), 200);
-            vehicleControl.attachDebugShape(SceneApplication.getApplication().getAssetManager());
+            vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
             rootNode.addControl(vehicleControl);
             return true;
         } else {
             vehicleControl = control;
-            vehicleControl.attachDebugShape(SceneApplication.getApplication().getAssetManager());
+            vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager());
             return false;
         }
     }

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglCanvas.java
Patch:
@@ -227,12 +227,14 @@ private void restoreCanvas(){
             }
         }
         
-        renderer.resetGLObjects();
         logger.log(Level.INFO, "OGL: Creating display..");
 
         // Set renderable to true, since canvas is now displayable.
         renderable.set(true);
         createContext(settings);
+        
+        // must call after createContext, as renderer might be null
+        renderer.resetGLObjects();
 
         logger.log(Level.INFO, "OGL: Waiting for display to become active..");
         while (!Display.isCreated()){

File: engine/src/test/jme3test/bullet/TestBoneRagdoll.java
Patch:
@@ -97,7 +97,7 @@ public void simpleInitApp() {
         bulletAppState = new BulletAppState();
         bulletAppState.setEnabled(true);
         stateManager.attach(bulletAppState);
-//        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
+        bulletAppState.getPhysicsSpace().enableDebug(assetManager);
         PhysicsTestHelper.createPhysicsTestWorld(rootNode, assetManager, bulletAppState.getPhysicsSpace());
         setupLight();
 
@@ -154,8 +154,7 @@ public void onAction(String name, boolean isPressed, float tpf) {
                     model.getLocalRotation().toAngles(angles);
                     q.fromAngleAxis(angles[1],  Vector3f.UNIT_Y);
                     //q.lookAt(model.getLocalRotation().toRotationMatrix().getColumn(2), Vector3f.UNIT_Y);
-                    model.setLocalRotation(q);
-                    System.out.println(angles[0]+ " "+angles[2]);
+                    model.setLocalRotation(q);              
                     if(angles[0]<0){
                         ragdoll.blendControlToAnim("StandUpBack",animChannel);
                     }else{

File: engine/src/jbullet/com/jme3/bullet/control/RagdollControl.java
Patch:
@@ -666,7 +666,7 @@ public void blendControlToAnim(String anim, AnimChannel channel) {
         control = false;
         AnimControl animControl = targetModel.getControl(AnimControl.class);
         animControl.setEnabled(true);
-        channel.setAnim(anim, 0);
+        channel.setAnim(anim);
         channel.setLoopMode(LoopMode.DontLoop);
 
         TempVars vars = TempVars.get();

File: engine/src/core/com/jme3/animation/Skeleton.java
Patch:
@@ -213,7 +213,7 @@ public Matrix4f[] computeSkinningMatrices() {
         TempVars vars = TempVars.get();
         assert vars.lock();
         for (int i = 0; i < boneList.length; i++) {
-            boneList[i].getOffsetTransform(skinningMatrixes[i], vars.quat1, vars.vect1, vars.vect2);
+            boneList[i].getOffsetTransform(skinningMatrixes[i], vars.quat1, vars.vect1, vars.vect2, vars.tempMat3);
         }
         assert vars.unlock();
         return skinningMatrixes;

File: engine/src/core/com/jme3/renderer/Camera.java
Patch:
@@ -1098,8 +1098,8 @@ private void setGuiBounding() {
         float ex = width * viewPortRight;
         float sy = height * viewPortBottom;
         float ey = height * viewPortTop;
-        float xExtent = (ex - sx) / 2;
-        float yExtent = (ey - sy) / 2;
+        float xExtent = Math.max(0f, (ex - sx) / 2f);
+        float yExtent = Math.max(0f, (ey - sy) / 2f);
         guiBounding.setCenter(new Vector3f(sx + xExtent, sy + yExtent, 0));
         guiBounding.setXExtent(xExtent);
         guiBounding.setYExtent(yExtent);

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MaterialLoader.java
Patch:
@@ -246,6 +246,9 @@ private void readPassStatement(){
             String mode = scan.next();
             if (mode.equals("alpha_blend")){
                 blend = true;
+            }else{
+                // skip the rest
+                readString("\n");
             }
         }else if (keyword.equals("cull_hardware")){
             String mode = scan.next();

File: engine/src/core/com/jme3/material/Material.java
Patch:
@@ -694,7 +694,7 @@ public void selectTechnique(String name, RenderManager renderManager) {
 
             if (name.equals("Default")) {
                 List<TechniqueDef> techDefs = def.getDefaultTechniques();
-                if (techDefs == null || techDefs.size() == 0) {
+                if (techDefs == null || techDefs.isEmpty()) {
                     throw new IllegalStateException("No default techniques are available on material '" + def.getName() + "'");
                 }
 
@@ -723,7 +723,7 @@ public void selectTechnique(String name, RenderManager renderManager) {
 
                 if (!rendererCaps.containsAll(techDef.getRequiredCaps())) {
                     throw new UnsupportedOperationException("The explicitly chosen technique '" + name + "' on material '" + def.getName() + "'\n"
-                            + "requires caps " + techDef.getRequiredCaps() + " which are not"
+                            + "requires caps " + techDef.getRequiredCaps() + " which are not "
                             + "supported by the video renderer");
                 }
 

File: engine/src/test/jme3test/audio/TestDoppler.java
Patch:
@@ -52,10 +52,10 @@ public static void main(String[] args){
 
     @Override
     public void initAudioApp(){
-        ufo  = new AudioNode(manager, "Sound/Effects/Beep.ogg", false);
+        ufo  = new AudioNode(assetManager, "Sound/Effects/Beep.ogg", false);
         ufo.setPositional(true);
         ufo.setLooping(true);
-        ar.playSource(ufo);
+        audioRenderer.playSource(ufo);
     }
 
     @Override

File: engine/src/test/jme3test/audio/TestReverb.java
Patch:
@@ -51,15 +51,15 @@ public static void main(String[] args){
 
     @Override
     public void initAudioApp(){
-        src = new AudioNode(manager, "Sound/Effects/Bang.wav");
+        src = new AudioNode(assetManager, "Sound/Effects/Bang.wav");
 
         float[] eax = new float[]
             {15,	38.0f,	0.300f,	-1000,	-3300,	0,		1.49f,	0.54f,	1.00f,  -2560,	0.162f, 0.00f,0.00f,0.00f,	-229,	0.088f,		0.00f,0.00f,0.00f,	0.125f, 1.000f, 0.250f, 0.000f, -5.0f,  5000.0f,	250.0f, 0.00f,	0x3f }
             ;
 
 //        ar.setEnvironment(new Environment(eax));
         Environment env = Environment.Cavern;
-        ar.setEnvironment(env);
+        audioRenderer.setEnvironment(env);
     }
 
     @Override
@@ -75,7 +75,7 @@ public void updateAudioApp(float tpf){
             v.subtractLocal(20, 1, 20);
 
             src.setLocalTranslation(v);
-            ar.playSourceInstance(src);
+            audioRenderer.playSourceInstance(src);
             time = 0;
             nextTime = FastMath.nextRandomFloat() * 2 + 0.5f;
         }

File: engine/src/test/jme3test/audio/TestWav.java
Patch:
@@ -55,15 +55,15 @@ public static void sleep(float time){
     public void updateAudioApp(float tpf){
         time += tpf;
         if (time > .1f){
-            ar.playSourceInstance(src);
+            audioRenderer.playSourceInstance(src);
             time = 0;
         }
         
     }
 
     @Override
     public void initAudioApp(){
-        src = new AudioNode(manager, "Sound/Effects/Gun.wav", false);
+        src = new AudioNode(assetManager, "Sound/Effects/Gun.wav", false);
         src.setLooping(false);
     }
 

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -767,7 +767,7 @@ private Node compileModel() {
             AnimControl ctrl = new AnimControl(animData.skeleton);
             ctrl.setAnimations(anims);
             model.addControl(ctrl);
-            SkeletonControl skeletonControl = new SkeletonControl(model, meshes, animData.skeleton);
+            SkeletonControl skeletonControl = new SkeletonControl(meshes, animData.skeleton);
             model.addControl(skeletonControl);
         }
 

File: engine/src/networking/com/jme3/network/serializing/Serializer.java
Patch:
@@ -293,8 +293,7 @@ public static SerializerRegistration getSerializerRegistration(Class cls, boolea
         }            
         
         if( failOnMiss ) {
-            Logger.getLogger(Serializer.class.getName()).log(Level.WARNING, "Class has not been registered {0}", cls);
-//            throw new IllegalArgumentException( "Class has not been registered:" + cls );
+            throw new IllegalArgumentException( "Class has not been registered:" + cls );
         }
         return registerClass(cls, fieldSerializer);
     }

File: engine/src/niftygui/com/jme3/niftygui/InputSystemJme.java
Patch:
@@ -43,9 +43,7 @@
 import com.jme3.input.event.MouseMotionEvent;
 import de.lessvoid.nifty.Nifty;
 import de.lessvoid.nifty.NiftyInputConsumer;
-import de.lessvoid.nifty.input.NiftyMouseInputEvent;
 import de.lessvoid.nifty.input.keyboard.KeyboardInputEvent;
-import de.lessvoid.nifty.input.mouse.MouseInputEventQueue;
 import de.lessvoid.nifty.spi.input.InputSystem;
 import java.util.ArrayList;
 

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglAbstractDisplay.java
Patch:
@@ -194,6 +194,7 @@ public void run(){
                 if (wasActive != Display.isActive()) {
                     if (!wasActive) {
                         listener.gainFocus();
+                        timer.reset();
                         wasActive = true;
                     } else {
                         listener.loseFocus();

File: engine/src/networking/com/jme3/network/kernel/udp/UdpKernel.java
Patch:
@@ -59,7 +59,7 @@ public class UdpKernel extends AbstractKernel
     private InetSocketAddress address;
     private HostThread thread;
 
-    private ExecutorService writer = Executors.newFixedThreadPool(2);
+    private ExecutorService writer;
     
     // The nature of UDP means that even through a firewall,
     // a user would have to have a unique address+port since UDP
@@ -91,6 +91,8 @@ public void initialize()
         if( thread != null )
             throw new IllegalStateException( "Kernel already initialized." );
 
+        writer = Executors.newFixedThreadPool(2, new NamedThreadFactory(toString() + "-writer"));
+        
         thread = createHostThread();
 
         try {

File: engine/src/jbullet/com/jme3/bullet/control/ragdoll/HumanoidRagdollPreset.java
Patch:
@@ -2,7 +2,7 @@
  * To change this template, choose Tools | Templates
  * and open the template in the editor.
  */
-package com.jme3.bullet.control.radoll;
+package com.jme3.bullet.control.ragdoll;
 
 import com.jme3.math.FastMath;
 

File: engine/src/jbullet/com/jme3/bullet/control/ragdoll/RagdollPreset.java
Patch:
@@ -2,7 +2,7 @@
  * To change this template, choose Tools | Templates
  * and open the template in the editor.
  */
-package com.jme3.bullet.control.radoll;
+package com.jme3.bullet.control.ragdoll;
 
 import com.jme3.bullet.joints.SixDofJoint;
 import java.util.HashMap;

File: engine/src/networking/com/jme3/network/kernel/tcp/SelectorKernel.java
Patch:
@@ -181,6 +181,8 @@ protected void removeEndpoint( NioEndpoint p, SocketChannel c )
      */
     protected void closeEndpoint( NioEndpoint p ) throws IOException
     {
+        log.log( Level.INFO, "Closing endpoint:{0}.", p );
+            
         thread.cancel(p);
     }
 

File: engine/src/networking/com/jme3/network/kernel/udp/UdpEndpoint.java
Patch:
@@ -49,7 +49,7 @@
  */
 public class UdpEndpoint implements Endpoint
 {
-    private long id;
+    private long id;    
     private SocketAddress address;
     private DatagramSocket socket;
     private UdpKernel kernel;

File: engine/src/networking/com/jme3/network/kernel/udp/UdpKernel.java
Patch:
@@ -152,6 +152,8 @@ protected Endpoint getEndpoint( SocketAddress address, boolean create )
      */
     protected void closeEndpoint( UdpEndpoint p ) throws IOException
     {
+        log.log( Level.INFO, "Closing endpoint:{0}.", p );
+            
         // Just book-keeping to do here.
         socketEndpoints.remove( p.getRemoteAddress() );
 

File: engine/src/networking/com/jme3/network/kernel/udp/UdpKernel.java
Patch:
@@ -128,7 +128,7 @@ public void broadcast( Filter<? super Endpoint> filter, ByteBuffer data, boolean
             // Does it match the filter?
             if( filter != null && !filter.apply(p) )
                 continue;
-
+    
             // Send the data
             p.send( data );
         }

File: engine/src/core/com/jme3/math/Matrix4f.java
Patch:
@@ -280,6 +280,7 @@ public void get(float[] matrix, boolean rowMajor) {
      *            the colum index.
      * @return the value at (i, j).
      */
+    @SuppressWarnings("fallthrough")
     public float get(int i, int j) {
         switch (i) {
             case 0:
@@ -450,6 +451,7 @@ public void setColumn(int i, float[] column) {
      * @param value
      *            the value for (i, j).
      */
+    @SuppressWarnings("fallthrough")
     public void set(int i, int j, float value) {
         switch (i) {
             case 0:

File: engine/src/desktop-fx/com/jme3/shadow/PssmShadowRenderer.java
Patch:
@@ -286,6 +286,7 @@ public void setDirection(Vector3f direction) {
         this.direction.set(direction).normalizeLocal();
     }
 
+    @SuppressWarnings("fallthrough") 
     public void postQueue(RenderQueue rq) {
         GeometryList occluders = rq.getShadowQueueContent(ShadowMode.Cast);        
         if (occluders.size() == 0)
@@ -317,6 +318,8 @@ public void postQueue(RenderQueue rq) {
         shadowCam.updateViewProjection();
 
         PssmShadowUtil.updateFrustumSplits(splitsArray, viewCam.getFrustumNear(), zFar, lambda);
+
+
         switch (splitsArray.length){
             case 5:
                 splits.a = splitsArray[4];

File: engine/src/core/com/jme3/renderer/queue/OpaqueComparator.java
Patch:
@@ -40,7 +40,8 @@
 public class OpaqueComparator implements GeometryComparator {
 
     private Camera cam;
-    private final Vector3f tempVec = new Vector3f();
+    private final Vector3f tempVec  = new Vector3f();
+    private final Vector3f tempVec2 = new Vector3f();
 
     public void setCamera(Camera cam){
         this.cam = cam;
@@ -54,7 +55,7 @@ public float distanceToCam(Geometry spat){
                 return spat.queueDistance;
  
         Vector3f camPosition = cam.getLocation();
-        Vector3f viewVector = cam.getDirection();
+        Vector3f viewVector = cam.getDirection(tempVec2);
         Vector3f spatPosition = null;
  
         if (spat.getWorldBound() != null){

File: engine/src/core/com/jme3/renderer/queue/RenderQueue.java
Patch:
@@ -194,6 +194,8 @@ public void renderShadowQueue(ShadowMode shadBucket, RenderManager rm, Camera ca
             case Receive:
                 renderGeometryList(shadowRecv, rm, cam, clear);
                 break;
+            default:
+                throw new IllegalArgumentException("Unexpected shadow bucket: " + shadBucket);
         }
     }
 

File: engine/src/core/com/jme3/scene/mesh/VirtualIndexBuffer.java
Patch:
@@ -34,6 +34,8 @@ public VirtualIndexBuffer(int numVerts, Mode meshMode){
             case Triangles:
                 numIndices = numVerts;
                 return;
+            case Hybrid:
+                throw new UnsupportedOperationException();
         }
     }
 

File: engine/src/core/com/jme3/shader/Uniform.java
Patch:
@@ -257,6 +257,9 @@ public void clearValue(){
                     this.value = Quaternion.ZERO;
                 }
                 break;
+            default:
+                break; // won't happen because those are either textures
+                       // or multidata types
         }
     }
 

File: engine/src/tools/jme3tools/navigation/Coordinate.java
Patch:
@@ -153,6 +153,7 @@ public String toStringDegMin() {
                 }
                 str = su.padNumZero(Math.abs(deg), 3);
                 str += "\u00b0" + su.padNumZero(Math.abs(minsDecMins), 2, MINPRECISION) + "'" + quad;
+                break;
         }
         return str;
     }

File: engine/src/tools/jme3tools/navigation/NavCalculator.java
Patch:
@@ -48,8 +48,10 @@ public NavCalculator(Position P1, Position P2, int calcType) {
         switch (calcType) {
             case MERCATOR:
                 mercatorSailing(P1, P2);
+                break;
             case GC:
                 greatCircleSailing(P1, P2);
+                break;
         }
     }
 

File: engine/src/lwjgl-ogl/com/jme3/renderer/lwjgl/TextureUtil.java
Patch:
@@ -230,6 +230,7 @@ public static void uploadTexture(Image img,
                 internalFormat = ARBTextureFloat.GL_LUMINANCE_ALPHA16F_ARB;
                 format = GL_LUMINANCE_ALPHA;
                 dataType = GL_UNSIGNED_BYTE;
+                break;
             case Intensity8:
                 internalFormat = GL_INTENSITY8;
                 format = GL_INTENSITY;
@@ -249,10 +250,12 @@ public static void uploadTexture(Image img,
                 internalFormat = GL_LUMINANCE8_ALPHA8;
                 format = GL_LUMINANCE_ALPHA;
                 dataType = GL_UNSIGNED_BYTE;
+                break;
             case Luminance16Alpha16:
                 internalFormat = GL_LUMINANCE16_ALPHA16;
                 format = GL_LUMINANCE_ALPHA;
                 dataType = GL_UNSIGNED_BYTE;
+                break;
             case Luminance16:
                 internalFormat = GL_LUMINANCE16;
                 format = GL_LUMINANCE;

File: engine/src/core/com/jme3/animation/SkeletonControl.java
Patch:
@@ -175,7 +175,7 @@ private void softwareSkinUpdate(Mesh mesh, Matrix4f[] offsetMatrices) {
             fnb.position(fnb.position() - bufLength);
             fnb.put(normBuf, 0, bufLength);
         }
-        
+
         assert vars.unlock();
 
         vb.updateData(fvb);
@@ -196,6 +196,7 @@ public Control cloneForSpatial(Spatial spatial) {
         Node clonedNode = (Node) spatial;
         AnimControl ctrl = spatial.getControl(AnimControl.class);
         SkeletonControl clone = new SkeletonControl();
+        clone.setSpatial(clonedNode);
 
         clone.skeleton = ctrl.getSkeleton();
         Mesh[] meshes = new Mesh[targets.length];

File: engine/src/networking/com/jme3/network/serializing/serializers/ArraySerializer.java
Patch:
@@ -43,6 +43,7 @@
  *
  * @author Nathan Sweet
  */
+@SuppressWarnings("unchecked")
 public class ArraySerializer extends Serializer {
     private int[] getDimensions (Object array) {
         int depth = 0;

File: engine/src/networking/com/jme3/network/serializing/serializers/BooleanSerializer.java
Patch:
@@ -41,6 +41,7 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class BooleanSerializer extends Serializer {
 
     public Boolean readObject(ByteBuffer data, Class c) throws IOException {

File: engine/src/networking/com/jme3/network/serializing/serializers/ByteSerializer.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class ByteSerializer extends Serializer {
+
     public Byte readObject(ByteBuffer data, Class c) throws IOException {
         return data.get();
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/CharSerializer.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class CharSerializer extends Serializer {
+
     public Character readObject(ByteBuffer data, Class c) throws IOException {
         return data.getChar();
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/CollectionSerializer.java
Patch:
@@ -48,6 +48,7 @@
  */
 public class CollectionSerializer extends Serializer {
 
+    @SuppressWarnings("unchecked")
     public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
         int length = data.getInt();
 

File: engine/src/networking/com/jme3/network/serializing/serializers/DateSerializer.java
Patch:
@@ -42,7 +42,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class DateSerializer extends Serializer {
+
     public Date readObject(ByteBuffer data, Class c) throws IOException {
         return new Date(data.getLong());
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/DoubleSerializer.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class DoubleSerializer extends Serializer {
+
     public Double readObject(ByteBuffer data, Class c) throws IOException {
         return data.getDouble();
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/FieldSerializer.java
Patch:
@@ -60,7 +60,7 @@ public void initialize(Class clazz) {
             processingClass = processingClass.getSuperclass();
         }
 
-        List<SavedField> cachedFields = new ArrayList(fields.size());
+        List<SavedField> cachedFields = new ArrayList<SavedField>(fields.size());
         for (Field field : fields) {
             int modifiers = field.getModifiers();
             if (Modifier.isTransient(modifiers)) continue;
@@ -87,6 +87,7 @@ public int compare (SavedField o1, SavedField o2) {
         
     }
 
+    @SuppressWarnings("unchecked")
     public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
     
         // Read the null/non-null marker

File: engine/src/networking/com/jme3/network/serializing/serializers/FloatSerializer.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class FloatSerializer extends Serializer {
+
     public Float readObject(ByteBuffer data, Class c) throws IOException {
         return data.getFloat();
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/GZIPSerializer.java
Patch:
@@ -49,6 +49,7 @@
  */
 public class GZIPSerializer extends Serializer {
 
+    @SuppressWarnings("unchecked")
     public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
         try
         {

File: engine/src/networking/com/jme3/network/serializing/serializers/IntSerializer.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class IntSerializer extends Serializer {
+
     public Integer readObject(ByteBuffer data, Class c) throws IOException {
         return data.getInt();
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/LongSerializer.java
Patch:
@@ -41,7 +41,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class LongSerializer extends Serializer {
+
     public Long readObject(ByteBuffer data, Class c) throws IOException {
         return data.getLong();
     }

File: engine/src/networking/com/jme3/network/serializing/serializers/MapSerializer.java
Patch:
@@ -71,6 +71,7 @@ public class MapSerializer extends Serializer {
 
      */
 
+    @SuppressWarnings("unchecked")
     public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
         int length = data.getInt();
 
@@ -123,6 +124,7 @@ public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
         return (T)map;
     }
 
+    @SuppressWarnings("unchecked")
     public void writeObject(ByteBuffer buffer, Object object) throws IOException {
         Map map = (Map)object;
         int length = map.size();

File: engine/src/networking/com/jme3/network/serializing/serializers/SavableSerializer.java
Patch:
@@ -101,6 +101,7 @@ public int read(byte[] b, int off, int len){
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
         BufferInputStream in = new BufferInputStream(data);
         Savable s = importer.load(in);

File: engine/src/networking/com/jme3/network/serializing/serializers/ShortSerializer.java
Patch:
@@ -41,6 +41,7 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class ShortSerializer extends Serializer {
     public Short readObject(ByteBuffer data, Class c) throws IOException {
         return data.getShort();

File: engine/src/networking/com/jme3/network/serializing/serializers/StringSerializer.java
Patch:
@@ -42,7 +42,9 @@
  *
  * @author Lars Wesselius
  */
+@SuppressWarnings("unchecked")
 public class StringSerializer extends Serializer {
+
     public String readObject(ByteBuffer data, Class c) throws IOException {
 
         int length = -1;

File: engine/src/networking/com/jme3/network/serializing/serializers/Vector3Serializer.java
Patch:
@@ -8,7 +8,9 @@
 /**
  * @author Kirill Vainer
  */
+@SuppressWarnings("unchecked")
 public class Vector3Serializer extends Serializer {
+
     public Vector3f readObject(ByteBuffer data, Class c) throws IOException {
         Vector3f vec3 = new Vector3f();
         vec3.x = data.getFloat();

File: engine/src/networking/com/jme3/network/serializing/serializers/ZIPSerializer.java
Patch:
@@ -50,6 +50,7 @@
  */
 public class ZIPSerializer extends Serializer {
 
+    @SuppressWarnings("unchecked")
     public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
         try
         {

File: engine/src/networking/com/jme3/network/base/ConnectorAdapter.java
Patch:
@@ -61,14 +61,14 @@
 public class ConnectorAdapter extends Thread
 {
     private Connector connector;
-    private MessageListener dispatcher;
+    private MessageListener<Object> dispatcher;
     private AtomicBoolean go = new AtomicBoolean(true);
     
     // Marks the messages as reliable or not if they came
     // through this connector.
     private boolean reliable;
     
-    public ConnectorAdapter( Connector connector, MessageListener dispatcher, boolean reliable )
+    public ConnectorAdapter( Connector connector, MessageListener<Object> dispatcher, boolean reliable )
     {
         super( String.valueOf(connector) );
         this.connector = connector;        

File: engine/src/networking/com/jme3/network/base/DefaultClient.java
Patch:
@@ -311,7 +311,7 @@ protected void dispatch( Message m )
         }
     }
  
-    protected class Redispatch implements MessageListener
+    protected class Redispatch implements MessageListener<Object>
     {
         public void messageReceived( Object source, Message m )
         {

File: engine/src/networking/com/jme3/network/base/DefaultServer.java
Patch:
@@ -434,6 +434,7 @@ public Object setAttribute( String name, Object value )
             return sessionData.put(name, value);
         }
     
+        @SuppressWarnings("unchecked")
         public <T> T getAttribute( String name )
         {
             return (T)sessionData.get(name);

File: engine/src/networking/com/jme3/network/base/KernelAdapter.java
Patch:
@@ -67,14 +67,14 @@ public class KernelAdapter extends Thread
     
     private DefaultServer server; // this is unfortunate
     private Kernel kernel;
-    private MessageListener messageDispatcher;
+    private MessageListener<HostedConnection> messageDispatcher;
     private AtomicBoolean go = new AtomicBoolean(true);
     
     // Marks the messages as reliable or not if they came
     // through this connector.
     private boolean reliable;
     
-    public KernelAdapter( DefaultServer server, Kernel kernel, MessageListener messageDispatcher,
+    public KernelAdapter( DefaultServer server, Kernel kernel, MessageListener<HostedConnection> messageDispatcher,
                           boolean reliable )
     {
         super( String.valueOf(kernel) );

File: engine/src/core/com/jme3/app/Application.java
Patch:
@@ -405,6 +405,8 @@ public void initialize(){
 
     public void handleError(String errMsg, Throwable t){
         logger.log(Level.SEVERE, errMsg, t);
+        // user should add additional code to handle the error.
+        stop(); // stop the application
     }
 
     public void gainFocus(){

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglCanvas.java
Patch:
@@ -221,7 +221,7 @@ private void restoreCanvas(){
         logger.log(Level.INFO, "OGL: Waiting for canvas to become displayable..");
         while (!canvas.isDisplayable()){
             try {
-                Thread.sleep(1);
+                Thread.sleep(10);
             } catch (InterruptedException ex) {
                 logger.log(Level.SEVERE, "OGL: Interrupted! ", ex);
             }
@@ -237,7 +237,7 @@ private void restoreCanvas(){
         logger.log(Level.INFO, "OGL: Waiting for display to become active..");
         while (!Display.isCreated()){
             try {
-                Thread.sleep(1);
+                Thread.sleep(10);
             } catch (InterruptedException ex) {
                 logger.log(Level.SEVERE, "OGL: Interrupted! ", ex);
             }
@@ -257,7 +257,7 @@ private void restoreCanvas(){
             }
             logger.log(Level.INFO, "OGL: Input has been reinitialized");
         } catch (LWJGLException ex) {
-            logger.log(Level.SEVERE, "Failed to re-init input", ex);
+            listener.handleError("Failed to re-init input", ex);
         }
 
         SwingUtilities.invokeLater(new Runnable(){

File: engine/src/lwjgl-ogl/com/jme3/system/lwjgl/LwjglDisplay.java
Patch:
@@ -69,7 +69,7 @@ protected DisplayMode getFullscreenDisplayMode(int width, int height, int bpp, i
                 }
             }
         } catch (LWJGLException ex) {
-            logger.log(Level.SEVERE, "Failed to acquire fullscreen display mode!", ex);
+            listener.handleError("Failed to acquire fullscreen display mode!", ex);
         }
         return null;
     }

File: engine/src/core/com/jme3/audio/AudioBuffer.java
Patch:
@@ -58,7 +58,7 @@ public DataType getDataType() {
     }
 
     /**
-     * @return The duratiion of the audio in seconds. It is expected
+     * @return The duration of the audio in seconds. It is expected
      * that audio is uncompressed.
      */
     public float getDuration(){

File: engine/src/jogg/com/jme3/audio/plugins/CachedOggStream.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Collection;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 /**
@@ -72,7 +73,7 @@ public class CachedOggStream implements PhysicalOggStream {
      *  file is not automatically deleted when this class is disposed.
      */
     public CachedOggStream(InputStream stream, int length, int numPages) throws IOException {
-        logger.info("Creating memory cache of size "+length);
+        logger.log(Level.INFO, "Creating memory cache of size {0}", length);
 
         memoryCache = new byte[length];
         sourceStream = stream;

File: engine/src/lwjgl-oal/com/jme3/audio/lwjgl/LwjglAudioRenderer.java
Patch:
@@ -841,7 +841,7 @@ public void playSource(AudioNode src) {
                 // allocate channel to this source
                 int index = newChannel();
                 if (index == -1) {
-                    logger.log(Level.WARNING, "No channel available to play " + src);
+                    logger.log(Level.WARNING, "No channel available to play {0}", src);
                     return;
                 }
                 clearChannel(index);

File: sdk/jme3-materialeditor/src/com/jme3/gde/materials/MaterialProperties.java
Patch:
@@ -479,7 +479,7 @@ public void setAsMaterial(Material mat) throws IOException {
         additionalRenderStates.put("FaceCull", new MaterialProperty("FaceCullMode", "FaceCull", mat.getAdditionalRenderState().getFaceCullMode().name()));
         additionalRenderStates.put("Blend", new MaterialProperty("BlendMode", "Blend", mat.getAdditionalRenderState().getBlendMode().name()));
         additionalRenderStates.put("AlphaTestFalloff", new MaterialProperty("Float", "AlphaTestFalloff", mat.getAdditionalRenderState().getAlphaFallOff() + ""));
-        additionalRenderStates.put("PolyOffset", new MaterialProperty("Float,Float", "PolyOffset", mat.getAdditionalRenderState().getPolyOffsetUnits() + ", " + mat.getAdditionalRenderState().getPolyOffsetFactor()));
+        additionalRenderStates.put("PolyOffset", new MaterialProperty("Float,Float", "PolyOffset", mat.getAdditionalRenderState().getPolyOffsetUnits() + " " + mat.getAdditionalRenderState().getPolyOffsetFactor()));
         parseMatDef();
         setAsText(getUpdatedContent());
     }

File: engine/src/test/jme3test/model/anim/TestOgreComplexAnim.java
Patch:
@@ -131,10 +131,10 @@ public void simpleUpdate(float tpf){
         q.fromAngles(0, angle, 0);
 
         b.setUserControl(true);
-        b.setUserTransforms(Vector3f.ZERO, q, Vector3f.ZERO);
+        b.setUserTransforms(Vector3f.ZERO, q, Vector3f.UNIT_XYZ);
         
         b2.setUserControl(true);
-        b2.setUserTransforms(Vector3f.ZERO, Quaternion.IDENTITY, new Vector3f(angle, angle, angle));
+        b2.setUserTransforms(Vector3f.ZERO, Quaternion.IDENTITY, new Vector3f(1+angle,1+ angle, 1+angle));
   
   
     }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/properties/SceneExplorerProperty.java
Patch:
@@ -75,11 +75,12 @@ public SceneExplorerProperty(T instance, Class valueType, String getter, String
             setPropertyEditorClass(Matrix3fPropertyEditor.class);
         } else if (valueType == ColorRGBA.class) {
             setPropertyEditorClass(ColorRGBAPropertyEditor.class);
-        } else if (valueType == Material.class) {
-            setPropertyEditorClass(MaterialPropertyEditor.class);
         } else if (valueType == EmitterShape.class) {
             setPropertyEditorClass(EmitterShapePropertyEditor.class);
         }
+        for (SceneExplorerPropertyEditor di : Lookup.getDefault().lookupAll(SceneExplorerPropertyEditor.class)) {
+            di.setEditor(valueType, this);
+        }
     }
 
     @Override

File: engine/src/core/com/jme3/scene/Node.java
Patch:
@@ -101,7 +101,7 @@ protected void setTransformRefresh(){
         super.setTransformRefresh();
         for (Spatial child : children){
             if ((child.refreshFlags & RF_TRANSFORM) != 0)
-                return;
+                continue;
 
             child.setTransformRefresh();
         }
@@ -112,7 +112,7 @@ protected void setLightListRefresh(){
         super.setLightListRefresh();
         for (Spatial child : children){
             if ((child.refreshFlags & RF_LIGHTLIST) != 0)
-                return;
+                continue;
 
             child.setLightListRefresh();
         }

File: engine/src/core/com/jme3/scene/Node.java
Patch:
@@ -153,7 +153,7 @@ public void updateLogicalState(float tpf){
         // FIXME: Iterating through the children list backwards
         // to avoid IndexOutOfBoundsException. This is sometimes unreliable,
         // a more robust solution is needed.
-        for (int i = children.size(); i >= 0; i--){
+        for (int i = children.size()-1; i >= 0; i--){
             Spatial child = children.get(i);
             child.updateLogicalState(tpf);
         }

File: engine/src/core/com/jme3/animation/BoneTrack.java
Patch:
@@ -56,6 +56,7 @@ public final class BoneTrack implements Savable {
     private CompactQuaternionArray rotations;
     private CompactVector3Array scales;
     private float[] times;
+    
     // temp vectors for interpolation
     private transient final Vector3f tempV = new Vector3f();
     private transient final Quaternion tempQ = new Quaternion();

File: engine/src/core/com/jme3/animation/Bone.java
Patch:
@@ -347,6 +347,7 @@ void getOffsetTransform(Matrix4f m, Quaternion tmp1, Vector3f tmp2, Vector3f tmp
 
     /**
      * Set user transform.
+     * The transforms are used as increments to current translations
      * @see setUserControl
      */
     public void setUserTransforms(Vector3f translation, Quaternion rotation, Vector3f scale) {
@@ -360,7 +361,7 @@ public void setUserTransforms(Vector3f translation, Quaternion rotation, Vector3
 
         localPos.addLocal(translation);
         localRot = localRot.mult(rotation);
-        localScale.multLocal(scale);
+        localScale.addLocal(scale);
     }
 
     /**

File: sdk/jme3-core/src/com/jme3/gde/core/scene/controller/SceneToolController.java
Patch:
@@ -296,11 +296,11 @@ public boolean isInitialized() {
 //        throw new UnsupportedOperationException("Not supported yet.");
     }
 
-    public void setActive(boolean bln) {
+    public void setEnabled(boolean bln) {
 //        throw new UnsupportedOperationException("Not supported yet.");
     }
 
-    public boolean isActive() {
+    public boolean isEnabled() {
         return true;
 //        throw new UnsupportedOperationException("Not supported yet.");
     }

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -246,7 +246,7 @@ protected void readFace(){
             f.verticies[i] = vertList.get(i);
         }
 
-        if (matList != null){
+        if (matList != null && matFaces.containsKey(currentMatName)){
             matFaces.get(currentMatName).add(f);
         }else{
             faces.add(f); // faces that belong to the default material

File: engine/src/lwjgl-oal/com/jme3/audio/lwjgl/LwjglAudioRenderer.java
Patch:
@@ -774,6 +774,7 @@ public void setListener(Listener listener) {
             }
             
             this.listener = listener;
+            this.listener.setRenderer(this);
             setListenerParams(listener);
         }
     }

File: engine/src/test/jme3test/audio/TestMusicPlayer.java
Patch:
@@ -237,7 +237,7 @@ private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:even
     }//GEN-LAST:event_formWindowClosing
 
     private void sldVolumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldVolumeStateChanged
-       listener.setGain( (float) sldVolume.getValue() / 100f);
+       listener.setVolume( (float) sldVolume.getValue() / 100f);
        ar.setListener(listener);
     }//GEN-LAST:event_sldVolumeStateChanged
 

File: engine/src/core/com/jme3/font/BitmapText.java
Patch:
@@ -67,8 +67,6 @@ public BitmapText(BitmapFont font, boolean rightToLeft, boolean arrayBased) {
             attachChild(textPages[page]);
         }
 
-        setQueueBucket(Bucket.Gui);
-
         this.font = font;
         this.block = new StringBlock();
         block.setSize(font.getPreferredSize());

File: engine/src/networking/com/jme3/network/Server.java
Patch:
@@ -96,7 +96,7 @@ public interface Server
     /**
      *  Retrieves a hosted connection by ID.
      */
-    public HostedConnection getConnection( long id );     
+    public HostedConnection getConnection( int id );     
  
     /**
      *  Retrieves a read-only collection of all currently connected connections.

File: engine/src/networking/com/jme3/network/base/DefaultServer.java
Patch:
@@ -168,7 +168,7 @@ public void broadcast( Filter<? super HostedConnection> filter, Message message
         }               
     }
 
-    public HostedConnection getConnection( long id )
+    public HostedConnection getConnection( int id )
     {
         return connections.get(id);
     }     

File: engine/src/core/com/jme3/math/Ray.java
Patch:
@@ -231,6 +231,7 @@ private boolean intersects( Vector3f v0, Vector3f v1, Vector3f v2,
             dirDotNorm = -dirDotNorm;
         } else {
             // ray and triangle/quad are parallel
+            assert vars.unlock();
             return false;
         }
 

File: engine/src/core/com/jme3/animation/Bone.java
Patch:
@@ -360,7 +360,7 @@ public void setUserTransforms(Vector3f translation, Quaternion rotation, Vector3
 
         localPos.addLocal(translation);
         localRot = localRot.mult(rotation);
-        localScale.addLocal(scale);
+        localScale.multLocal(scale);
     }
 
     /**

File: engine/src/ogre/com/jme3/scene/plugins/ogre/MeshLoader.java
Patch:
@@ -442,7 +442,7 @@ private void pushTangent(Attributes attribs) throws SAXException{
     }
 
     private void pushTexCoord(Attributes attribs) throws SAXException{
-        if (texCoordIdx >= 1)
+        if (texCoordIdx >= 2)
             return; // TODO: More than 2 texcoords
 
         Type type = texCoordIdx == 0 ? Type.TexCoord : Type.TexCoord2;

File: engine/src/core/com/jme3/app/state/AbstractAppState.java
Patch:
@@ -80,7 +80,6 @@ public void render(RenderManager rm) {
     }
 
     public void postRender(){
-        
     }
 
     public void cleanup() {

File: engine/src/jheora/com/jme3/video/Clock.java
Patch:
@@ -32,6 +32,7 @@
 
 package com.jme3.video;
 
+@Deprecated
 public interface Clock {
 
     public static final long MILLIS_TO_NANOS  = 1000000;

File: engine/src/jheora/com/jme3/video/RingBuffer.java
Patch:
@@ -32,6 +32,7 @@
 
 package com.jme3.video;
 
+@Deprecated
 public final class RingBuffer {
     
     private final int bufSize;

File: engine/src/jheora/com/jme3/video/SystemClock.java
Patch:
@@ -32,6 +32,7 @@
 
 package com.jme3.video;
 
+@Deprecated
 public class SystemClock implements Clock {
 
     private long startTime = 0;

File: engine/src/jheora/com/jme3/video/TestVideoPlayer.java
Patch:
@@ -42,6 +42,7 @@
 import java.io.InputStream;
 import java.net.URL;
 
+@Deprecated
 public class TestVideoPlayer extends SimpleApplication {
 
     private Picture picture;

File: engine/src/jheora/com/jme3/video/VFrame.java
Patch:
@@ -36,6 +36,7 @@
 import com.jme3.texture.Texture2D;
 import com.jme3.util.BufferUtils;
 
+@Deprecated
 public class VFrame extends Texture2D {
 
     private long time;

File: engine/src/jheora/com/jme3/video/VQueue.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+@Deprecated
 public class VQueue extends ArrayBlockingQueue<VFrame> {
 
 //    private final ArrayList<VFrame> returnedFrames;

File: engine/src/jheora/com/jme3/video/plugins/jheora/ADecoder.java
Patch:
@@ -43,6 +43,7 @@
 import com.jme3.video.SystemClock;
 import java.io.InputStream;
 
+@Deprecated
 public class ADecoder extends InputStream implements Clock {
 
     private int packetIndex = 0;

File: engine/src/jheora/com/jme3/video/plugins/jheora/AVThread.java
Patch:
@@ -47,6 +47,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+@Deprecated
 public class AVThread implements Runnable {
 
     private static final Logger logger = Logger.getLogger(AVThread.class.getName());

File: engine/src/jheora/com/jme3/video/plugins/jheora/VDecoder.java
Patch:
@@ -43,6 +43,7 @@
 import com.jme3.video.VQueue;
 import java.nio.ByteBuffer;
 
+@Deprecated
 public class VDecoder implements Clock {
 
     private int packetIndex = 0;

File: engine/src/jheora/com/jme3/video/plugins/jheora/YUVConv.java
Patch:
@@ -34,6 +34,7 @@
 
 import com.fluendo.jheora.YUVBuffer;
 
+@Deprecated
 public final class YUVConv {
 
     private int[] pixels;

File: sdk/jme3-angelfont/src/com/jme3/gde/angelfont/FontCreator.java
Patch:
@@ -104,7 +104,7 @@ public static AngelFont buildFont(String fontName, int bitmapSize, int fontSize,
                 + "stretchH=100 "
                 + "smooth=1 "
                 + "aa=1 "
-                + "paiing=0,0,0,0 "
+                + "padding=0,0,0,0 "
                 + "spacing=1,1 "
                 + "\n"
                 + "common lineHeight=" + height + " "

File: sdk/jme3-gui/src/com/jme3/gde/gui/multiview/NiftyPreviewInputHandler.java
Patch:
@@ -6,7 +6,6 @@
 
 import de.lessvoid.nifty.NiftyInputConsumer;
 import de.lessvoid.nifty.input.keyboard.KeyboardInputEvent;
-import de.lessvoid.nifty.input.mouse.MouseInputEvent;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
@@ -23,7 +22,7 @@ public class NiftyPreviewInputHandler implements de.lessvoid.nifty.spi.input.Inp
     public synchronized void forwardEvents(NiftyInputConsumer nic) {
         for (Iterator<MouseInputEvent> it = mouseEvents.iterator(); it.hasNext();) {
             MouseInputEvent mouseInputEvent = it.next();
-            nic.processMouseEvent(mouseInputEvent);
+            nic.processMouseEvent(mouseInputEvent.x, mouseInputEvent.y, mouseInputEvent.button, mouseInputEvent.huh, mouseInputEvent.pressed);
             it.remove();
         }
         for (Iterator<KeyboardInputEvent> it = keyEvents.iterator(); it.hasNext();) {
@@ -34,9 +33,10 @@ public synchronized void forwardEvents(NiftyInputConsumer nic) {
     }
 
     public synchronized void addMouseEvent(int newMouseX, int newMouseY, boolean mouseDown) {
-        MouseInputEvent event = new MouseInputEvent(newMouseX, newMouseY, mouseDown);
+        MouseInputEvent event = new MouseInputEvent(newMouseX, newMouseY, 0, 0, mouseDown);
         mouseEvents.add(event);
     }
+
     public synchronized void addKeyEvent(int newKey, char newCharacter, boolean newKeyDown, boolean newShiftDown, boolean newControlDown) {
         KeyboardInputEvent event = new KeyboardInputEvent(newKey, newCharacter, newKeyDown, newShiftDown, newControlDown);
         keyEvents.add(event);

File: engine/src/networking/com/jme3/network/serializing/Serializer.java
Patch:
@@ -132,7 +132,7 @@ public static SerializerRegistration registerClass(Class cls) {
             Serializable serializable = (Serializable)cls.getAnnotation(Serializable.class);
 
             Class serializerClass = serializable.serializer();
-            short classId = serializable.id();
+            short classId = serializable.id();           
             if (classId == 0) classId = --nextId;
 
             Serializer serializer = getSerializer(serializerClass);

File: engine/src/networking/com/jme3/network/serializing/serializers/FieldSerializer.java
Patch:
@@ -34,6 +34,7 @@
 
 import com.jme3.network.message.Message;
 import com.jme3.network.serializing.Serializer;
+import com.jme3.network.serializing.SerializerException;
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -109,7 +110,7 @@ public <T> T readObject(ByteBuffer data, Class<T> c) throws IOException {
             try {
                 field.set(object, value);
             } catch (IllegalAccessException e) {
-                throw new IOException(e.toString());
+                throw new SerializerException( "Error reading object", e);
             }
         }
         return object;
@@ -140,7 +141,7 @@ public void writeObject(ByteBuffer buffer, Object object) throws IOException {
                 throw boe;
             } catch (Exception e) {
                 log.log(Level.WARNING, "[FieldSerializer][???] Exception occurred on writing. Maybe you've forgotten to register a class, or maybe a class member does not have a serializer.");
-                throw new IOException(e.toString());
+                throw new SerializerException( "Error writing object", e);
             }
         }
     }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/UseToolAction.java
Patch:
@@ -61,7 +61,7 @@ public void actionPerformed(ActionEvent e) {
     public JMenuItem getPopupPresenter() {
         JMenu result = new JMenu("Tools..");
         for (ToolAction di : Lookup.getDefault().lookupAll(ToolAction.class)) {
-            if(exNode.getClass().isAssignableFrom(di.getNodeClass())){
+            if(di.getNodeClass().isAssignableFrom(exNode.getClass())){
                 result.add(new JMenuItem(di.getAction(exNode, dataObject)));
             }
         }

File: sdk/jme3-core/src/com/jme3/gde/core/sceneexplorer/nodes/actions/impl/GenerateTangentsTool.java
Patch:
@@ -52,7 +52,7 @@ public GenerateTangentsTool() {
     }
 
     @Override
-    protected boolean doApplyTool(AbstractSceneExplorerNode rootNode) {
+    protected Object doApplyTool(AbstractSceneExplorerNode rootNode) {
         Geometry geom = rootNode.getLookup().lookup(Geometry.class);
         Mesh mesh = geom.getMesh();
         if (mesh != null) {
@@ -62,7 +62,7 @@ protected boolean doApplyTool(AbstractSceneExplorerNode rootNode) {
     }
 
     @Override
-    protected void doUndoTool(AbstractSceneExplorerNode rootNode) {
+    protected void doUndoTool(AbstractSceneExplorerNode rootNode, Object undoObject) {
         Geometry geom = rootNode.getLookup().lookup(Geometry.class);
         Mesh mesh = geom.getMesh();
         if (mesh != null) {

File: sdk/jme3-angelfont/src/com/jme3/gde/angelfont/AngelFontWizardPanel1.java
Patch:
@@ -79,9 +79,9 @@ protected final void fireChangeEvent() {
     // WizardDescriptor.getProperty & putProperty to store information entered
     // by the user.
     public void readSettings(Object settings) {
-        ((WizardDescriptor)settings).putProperty("font_name", component.getSelectedFont());
     }
 
     public void storeSettings(Object settings) {
+        ((WizardDescriptor)settings).putProperty("font_name", component.getSelectedFont());
     }
 }

File: engine/src/core/com/jme3/math/Spline.java
Patch:
@@ -231,7 +231,7 @@ private void computeBezierLength() {
         if (controlPoints.size() > 1) {
             for (int i = 0; i < controlPoints.size() - 1; i+=3) {
                 l = FastMath.getBezierP1toP2Length(controlPoints.get(i),
-                		controlPoints.get(i + 1), controlPoints.get(i + 2), controlPoints.get(i + 3), 0, 1);
+                		controlPoints.get(i + 1), controlPoints.get(i + 2), controlPoints.get(i + 3));
                 segmentsLength.add(l);
                 totalLength += l;
             }

File: engine/src/core/com/jme3/math/Spline.java
Patch:
@@ -265,6 +265,7 @@ public Vector3f interpolate(float value, int currentControlPoint, Vector3f store
                 break;
             case Bezier:
             	FastMath.interpolateBezier(value, controlPoints.get(currentControlPoint), controlPoints.get(currentControlPoint + 1), controlPoints.get(currentControlPoint + 2), controlPoints.get(currentControlPoint + 3), store);
+            	break;
             case Nurb:
             	CurveAndSurfaceMath.interpolateNurbs(value, this, store);
             	break;

File: engine/src/core/com/jme3/renderer/RenderManager.java
Patch:
@@ -85,7 +85,7 @@ public class RenderManager {
     private Material forcedMaterial = null;
     private String forcedTechnique = null;
     private RenderState forcedRenderState = null;
-    private final boolean shader;
+    private boolean shader;
     private int viewX, viewY, viewWidth, viewHeight;
     private float near, far;
     private Matrix4f orthoMatrix = new Matrix4f();
@@ -734,6 +734,8 @@ public void render(float tpf) {
             return;
         }
 
+        this.shader = renderer.getCaps().contains(Caps.GLSL100);
+
         for (int i = 0; i < preViewPorts.size(); i++) {
             renderViewPort(preViewPorts.get(i), tpf);
         }

File: engine/src/test/jme3test/network/TestChatClient.java
Patch:
@@ -98,7 +98,7 @@ public TestChatClient( String host ) throws IOException
         getContentPane().add( p, "South" );
         
         client = Network.connectToServer( TestChatServer.NAME, TestChatServer.VERSION,
-                                          host, TestChatServer.PORT, TestChatServer.PORT + 1 );                                          
+                                          host, TestChatServer.PORT );                                          
         client.addMessageListener( new ChatHandler(), ChatMessage.class );                                             
         client.start();                                                                               
     }

File: engine/src/test/jme3test/network/TestChatServer.java
Patch:
@@ -96,7 +96,7 @@ public void messageReceived( HostedConnection source, Message m )
                 // a good example of session data
                 source.setAttribute( "name", ((ChatMessage)m).getName() );
  
-                System.out.println( "Broadcasting:" + m );
+                System.out.println( "Broadcasting:" + m + "  reliable:" + m.isReliable() );
                                    
                 // Just rebroadcast... the reliable flag will stay the
                 // same so if it came in on UDP it will go out on that too

File: engine/src/networking/com/jme3/network/kernel/udp/UdpKernel.java
Patch:
@@ -122,7 +122,7 @@ public void broadcast( Filter<? super Endpoint> filter, ByteBuffer data, boolean
         // Hand it to all of the endpoints that match our routing
         for( UdpEndpoint p : socketEndpoints.values() ) {
             // Does it match the filter?
-            if( !filter.apply(p) )
+            if( filter != null && !filter.apply(p) )
                 continue;
 
             // Send the data

File: engine/src/jbullet/com/jme3/bullet/util/Converter.java
Patch:
@@ -247,6 +247,8 @@ public static IndexedMesh convert(Mesh mesh) {
         for (int i = 0; i < indicesLength; i++) {
             jBulletIndexedMesh.triangleIndexBase.putInt(indices.get(i));
         }
+        vertices.rewind();
+        vertices.clear();
 
         return jBulletIndexedMesh;
     }
@@ -267,9 +269,9 @@ public static Mesh convert(IndexedMesh mesh) {
         for (int i = 0; i < mesh.numVertices * 3; i++) {
             vertices.put(i, mesh.vertexBase.getFloat(i * 4));
         }
-        jmeMesh.getFloatBuffer(Type.Position).clear();
         jmeMesh.updateCounts();
         jmeMesh.updateBound();
+        jmeMesh.getFloatBuffer(Type.Position).clear();
 
         return jmeMesh;
     }

File: engine/src/jbullet/com/jme3/bullet/util/DebugShapeFactory.java
Patch:
@@ -125,11 +125,13 @@ public static Mesh getDebugMesh(CollisionShape shape){
         if(shape.getCShape() instanceof ConvexShape){
             mesh=new Mesh();
             mesh.setBuffer(Type.Position, 3, getVertices((ConvexShape)shape.getCShape()));
+            mesh.getFloatBuffer(Type.Position).clear();
         }
         else if(shape.getCShape() instanceof ConcaveShape)
         {
             mesh=new Mesh();
             mesh.setBuffer(Type.Position, 3, getVertices((ConcaveShape)shape.getCShape()));
+            mesh.getFloatBuffer(Type.Position).clear();
         }
         return mesh;
     }

File: engine/src/networking/com/jme3/network/Network.java
Patch:
@@ -164,7 +164,7 @@ public static Client connectToServer( String gameName, int version,
                                           int localUdpPort ) throws IOException
     {
         InetAddress remoteAddress = InetAddress.getByName(host);   
-        UdpConnector fast = new UdpConnector( localUdpPort, remoteAddress, hostPort ); 
+        UdpConnector fast = new UdpConnector( localUdpPort, remoteAddress, remoteUdpPort ); 
         SocketConnector reliable = new SocketConnector( remoteAddress, hostPort );        
        
         return new DefaultClient( gameName, version, reliable, fast );
@@ -187,7 +187,7 @@ public void connectToServer( String host, int port, int remoteUdpPort,
         public void connectToServer( InetAddress address, int port, int remoteUdpPort, 
                                      int localUdpPort ) throws IOException
         {
-            UdpConnector fast = new UdpConnector( localUdpPort, address, port ); 
+            UdpConnector fast = new UdpConnector( localUdpPort, address, remoteUdpPort ); 
             SocketConnector reliable = new SocketConnector( address, port );        
             
             setConnectors( reliable, fast );

File: engine/src/networking/com/jme3/network/kernel/tcp/SelectorKernel.java
Patch:
@@ -124,7 +124,7 @@ public void broadcast( Filter<? super Endpoint> filter, ByteBuffer data, boolean
         // Hand it to all of the endpoints that match our routing
         for( NioEndpoint p : endpoints.values() ) {
             // Does it match the filter?
-            if( !filter.apply(p) )
+            if( filter != null && !filter.apply(p) )
                 continue;
 
             // Give it the data

File: engine/src/networking/com/jme3/network/HostedConnection.java
Patch:
@@ -46,7 +46,7 @@ public interface HostedConnection extends MessageConnection
     /**
      *  Returns the server-unique ID for this client.
      */
-    public long getId();
+    public int getId();
     
     /**
      *  Closes and removes this connection from the server

File: engine/src/networking/com/jme3/network/base/DefaultServer.java
Patch:
@@ -64,7 +64,7 @@ public class DefaultServer implements Server
     private Kernel fast;
     private KernelAdapter fastAdapter;
     private Redispatch dispatcher = new Redispatch();
-    private Map<Long,HostedConnection> connections = new ConcurrentHashMap<Long,HostedConnection>();
+    private Map<Integer,HostedConnection> connections = new ConcurrentHashMap<Integer,HostedConnection>();
     private Map<Endpoint,HostedConnection> endpointConnections 
                             = new ConcurrentHashMap<Endpoint,HostedConnection>();
     
@@ -346,7 +346,7 @@ public Connection()
             id = nextId.getAndIncrement();
         }
         
-        public long getId()
+        public int getId()
         {
             return id;
         }

File: engine/src/desktop/com/jme3/asset/plugins/FileLocator.java
Patch:
@@ -56,7 +56,7 @@ public void setRootPath(String rootPath) {
 
         root = new File(rootPath);
         if (!root.isDirectory())
-            throw new RuntimeException("Given root path not a directory");
+            throw new IllegalArgumentException("Given root path \"" + root + "\" not a directory");
     }
 
     private static class AssetInfoFile extends AssetInfo {

File: engine/src/core-plugins/com/jme3/scene/plugins/OBJLoader.java
Patch:
@@ -332,6 +332,9 @@ protected boolean readLine() throws IOException{
         }else if (cmd.equals("usemtl")){
             // use material from MTL lib for the following faces
             currentMatName = scan.next();
+            if (!matList.containsKey(currentMatName))
+                throw new IOException("Cannot locate material " + currentMatName + " in MTL file!");
+            
         }else if (cmd.equals("mtllib")){
             // specify MTL lib to use for this OBJ file
             String mtllib = scan.nextLine().trim();

File: engine/src/networking/com/jme3/network/events/ConnectionListener.java
Patch:
@@ -38,7 +38,9 @@
  * Listener for server events.
  *
  * @author Lars Wesselius
+ * @deprecated Use {@link com.jme3.network.ConnectionListener} instead. 
  */
+@Deprecated
 public interface ConnectionListener {
     public void clientConnected(Client client);
     public void clientDisconnected(Client client);

File: engine/src/networking/com/jme3/network/events/MessageListener.java
Patch:
@@ -38,7 +38,9 @@
  * Listener for messages.
  *
  * @author Lars Wesselius
+ * @deprecated Use {@link com.jme3.network.MessageListener} instead. 
  */
+@Deprecated
 public interface MessageListener {
     public void messageReceived(Message message);
     public void messageSent(Message message);

File: engine/src/test/jme3test/effect/TestPointSprite.java
Patch:
@@ -55,7 +55,7 @@ public void simpleInitApp() {
         emit.setGravity(0);
         emit.setLowLife(60);
         emit.setHighLife(60);
-        emit.setStartVel(new Vector3f(0, 0, 0));
+        emit.setInitialVelocity(new Vector3f(0, 0, 0));
         emit.setImagesX(15);
         emit.setStartSize(0.05f);
         emit.setEndSize(0.05f);

File: engine/src/core/com/jme3/font/BitmapText.java
Patch:
@@ -143,7 +143,7 @@ public ColorRGBA getColor() {
      * @param color new color of text
      */
     public void setColor(ColorRGBA color) {
-        letters.setColor(0, block.getText().length(), color);
+        letters.setColor(color);
         letters.invalidate(); // TODO: Don't have to align.
         needRefresh = true;
     }

File: engine/src/core/com/jme3/animation/Bone.java
Patch:
@@ -413,6 +413,7 @@ void setAnimTransforms(Vector3f translation, Quaternion rotation, Vector3f scale
 
         localPos.set(initialPos).addLocal(translation);
         localRot.set(initialRot).multLocal(rotation);
+       
         if (scale != null) {
             localScale.set(initialScale).multLocal(scale);
         }
@@ -440,7 +441,7 @@ void blendAnimTransforms(Vector3f translation, Quaternion rotation, Vector3f sca
 
         //scale
         if (scale != null) {
-            tmpV2.set(initialScale).addLocal(translation);
+            tmpV2.set(initialScale).multLocal(scale);
             localScale.interpolate(tmpV2, weight);
         }
 

File: engine/src/core/com/jme3/font/Letters.java
Patch:
@@ -54,6 +54,8 @@ void setText(final String text) {
             Range end = ranges.getLast();
             setColor(end.start, plainText.length(), end.color);
         }
+        
+        invalidate();
     }
 
     LetterQuad getHead() {

