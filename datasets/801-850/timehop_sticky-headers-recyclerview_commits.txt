File: library/src/main/java/com/timehop/stickyheadersrecyclerview/HeaderPositionCalculator.java
Patch:
@@ -229,13 +229,13 @@ private boolean itemIsObscuredByHeader(RecyclerView parent, View item, View head
     if (orientation == LinearLayoutManager.VERTICAL) {
       int itemTop = item.getTop() - layoutParams.topMargin;
       int headerBottom = getListTop(parent) + header.getBottom() + mTempRect1.bottom + mTempRect1.top;
-      if (itemTop > headerBottom) {
+      if (itemTop >= headerBottom) {
         return false;
       }
     } else {
       int itemLeft = item.getLeft() - layoutParams.leftMargin;
       int headerRight = getListLeft(parent) + header.getRight() + mTempRect1.right + mTempRect1.left;
-      if (itemLeft > headerRight) {
+      if (itemLeft >= headerRight) {
         return false;
       }
     }

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/HeaderPositionCalculator.java
Patch:
@@ -228,13 +228,13 @@ private boolean itemIsObscuredByHeader(RecyclerView parent, View item, View head
 
     if (orientation == LinearLayoutManager.VERTICAL) {
       int itemTop = item.getTop() - layoutParams.topMargin;
-      int headerBottom = header.getBottom() + mTempRect1.bottom + mTempRect1.top;
+      int headerBottom = getListTop(parent) + header.getBottom() + mTempRect1.bottom + mTempRect1.top;
       if (itemTop > headerBottom) {
         return false;
       }
     } else {
       int itemLeft = item.getLeft() - layoutParams.leftMargin;
-      int headerRight = header.getRight() + mTempRect1.right + mTempRect1.left;
+      int headerRight = getListLeft(parent) + header.getRight() + mTempRect1.right + mTempRect1.left;
       if (itemLeft > headerRight) {
         return false;
       }

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/HeaderPositionCalculator.java
Patch:
@@ -68,7 +68,6 @@ public boolean hasStickyHeader(View itemView, int orientation, int position) {
    * @param position of the list item in questions
    * @param isReverseLayout TRUE if layout manager has flag isReverseLayout
    * @return true if this item has a different header than the previous item in the list
-   * @see {@link StickyRecyclerHeadersAdapter#getHeaderId(int)}
    */
   public boolean hasNewHeader(int position, boolean isReverseLayout) {
     if (indexOutOfBounds(position)) {

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -140,8 +140,8 @@ public int findHeaderPositionUnder(int x, int y) {
    * Gets the header view for the associated position.  If it doesn't exist yet, it will be
    * created, measured, and laid out.
    *
-   * @param parent
-   * @param position
+   * @param parent the recyclerview
+   * @param position the position to get the header view for
    * @return Header view
    */
   public View getHeaderView(RecyclerView parent, int position) {

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -154,5 +154,6 @@ public View getHeaderView(RecyclerView parent, int position) {
    */
   public void invalidateHeaders() {
     mHeaderProvider.invalidate();
+    mHeaderRects.clear();
   }
 }

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -154,5 +154,6 @@ public View getHeaderView(RecyclerView parent, int position) {
    */
   public void invalidateHeaders() {
     mHeaderProvider.invalidate();
+    mHeaderRects.clear();
   }
 }

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/util/OrientationProvider.java
Patch:
@@ -9,4 +9,5 @@ public interface OrientationProvider {
 
   public int getOrientation(RecyclerView recyclerView);
 
+  public boolean isReverseLayout(RecyclerView recyclerView);
 }

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/HeaderPositionCalculator.java
Patch:
@@ -127,7 +127,7 @@ private boolean isStickyHeaderBeingPushedOffscreen(RecyclerView recyclerView, Vi
         return false;
     }
 
-    boolean isReverseLayout = mOrientationProvider.getReverseLayout(recyclerView);
+    boolean isReverseLayout = mOrientationProvider.isReverseLayout(recyclerView);
     if (firstViewUnderHeaderPosition > 0 && hasNewHeader(firstViewUnderHeaderPosition, isReverseLayout)) {
       View nextHeader = mHeaderProvider.getHeader(recyclerView, firstViewUnderHeaderPosition);
       Rect nextHeaderMargins = mDimensionCalculator.getMargins(nextHeader);
@@ -177,10 +177,10 @@ private void translateHeaderWithNextHeader(RecyclerView recyclerView, int orient
    * @return first item that is fully beneath a header
    */
   private View getFirstViewUnobscuredByHeader(RecyclerView parent, View firstHeader) {
-    boolean isReverseLayout = mOrientationProvider.getReverseLayout(parent);
+    boolean isReverseLayout = mOrientationProvider.isReverseLayout(parent);
     int step = isReverseLayout? -1 : 1;
     int from = isReverseLayout? parent.getChildCount()-1 : 0;
-    for (int i = from; i >= 0 && i<= parent.getChildCount()-1; i+=step) {
+    for (int i = from; i >= 0 && i <= parent.getChildCount() - 1; i += step) {
       View child = parent.getChildAt(i);
       if (!itemIsObscuredByHeader(parent, child, firstHeader, mOrientationProvider.getOrientation(parent))) {
         return child;

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -60,7 +60,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView parent, Recycle
     if (itemPosition == RecyclerView.NO_POSITION) {
         return;
     }
-    if (mHeaderPositionCalculator.hasNewHeader(itemPosition, mOrientationProvider.getReverseLayout(parent))) {
+    if (mHeaderPositionCalculator.hasNewHeader(itemPosition, mOrientationProvider.isReverseLayout(parent))) {
       View header = getHeaderView(parent, itemPosition);
       setItemOffsetsForHeader(outRect, header, mOrientationProvider.getOrientation(parent));
     }
@@ -99,7 +99,7 @@ public void onDrawOver(Canvas canvas, RecyclerView parent, RecyclerView.State st
       }
 
       boolean hasStickyHeader = mHeaderPositionCalculator.hasStickyHeader(itemView, mOrientationProvider.getOrientation(parent), position);
-      if (hasStickyHeader || mHeaderPositionCalculator.hasNewHeader(position, mOrientationProvider.getReverseLayout(parent))) {
+      if (hasStickyHeader || mHeaderPositionCalculator.hasNewHeader(position, mOrientationProvider.isReverseLayout(parent))) {
         View header = mHeaderProvider.getHeader(parent, position);
         Rect headerOffset = mHeaderPositionCalculator.getHeaderBounds(parent, header, itemView, hasStickyHeader);
         mRenderer.drawHeader(parent, canvas, header, headerOffset);

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/util/LinearLayoutOrientationProvider.java
Patch:
@@ -16,7 +16,7 @@ public int getOrientation(RecyclerView recyclerView) {
   }
 
   @Override
-  public boolean getReverseLayout(RecyclerView recyclerView) {
+  public boolean isReverseLayout(RecyclerView recyclerView) {
     RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();
     throwIfNotLinearLayoutManager(layoutManager);
     return ((LinearLayoutManager) layoutManager).getReverseLayout();
@@ -25,7 +25,7 @@ public boolean getReverseLayout(RecyclerView recyclerView) {
   private void throwIfNotLinearLayoutManager(RecyclerView.LayoutManager layoutManager){
     if (!(layoutManager instanceof LinearLayoutManager)) {
       throw new IllegalStateException("StickyListHeadersDecoration can only be used with a " +
-              "LinearLayoutManager.");
+          "LinearLayoutManager.");
     }
   }
 }

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/util/OrientationProvider.java
Patch:
@@ -7,7 +7,7 @@
  */
 public interface OrientationProvider {
 
-    public int getOrientation(RecyclerView recyclerView);
+  public int getOrientation(RecyclerView recyclerView);
 
-    public boolean getReverseLayout(RecyclerView recyclerView);
+  public boolean isReverseLayout(RecyclerView recyclerView);
 }

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/util/OrientationProvider.java
Patch:
@@ -7,6 +7,7 @@
  */
 public interface OrientationProvider {
 
-  public int getOrientation(RecyclerView recyclerView);
+    public int getOrientation(RecyclerView recyclerView);
 
+    public boolean getReverseLayout(RecyclerView recyclerView);
 }

File: sample/src/main/java/com/timehop/stickyheadersrecyclerview/sample/DividerDecoration.java
Patch:
@@ -42,6 +42,7 @@ private int getOrientation(RecyclerView parent) {
   @Override
   public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
     super.onDraw(c, parent, state);
+
     if (getOrientation(parent) == VERTICAL_LIST) {
       drawVertical(c, parent);
     } else {

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -80,9 +80,9 @@ public void onDrawOver(Canvas canvas, RecyclerView parent, RecyclerView.State st
       int position = parent.getChildPosition(itemView);
       if (hasStickyHeader(i, position) || mHeaderPositionCalculator.hasNewHeader(position)) {
         View header = mHeaderProvider.getHeader(parent, position);
-        Rect headerOffset = mHeaderPositionCalculator.getStickyHeaderBounds(parent, header,
+        Rect headerOffset = mHeaderPositionCalculator.getHeaderBounds(parent, header,
             itemView, hasStickyHeader(i, position));
-        mRenderer.drawStickyHeader(canvas, header, headerOffset);
+        mRenderer.drawHeader(parent, canvas, header, headerOffset);
         mHeaderRects.put(position, headerOffset);
       }
     }

File: sample/src/main/java/com/timehop/stickyheadersrecyclerview/sample/DividerDecoration.java
Patch:
@@ -42,6 +42,7 @@ private int getOrientation(RecyclerView parent) {
   @Override
   public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
     super.onDraw(c, parent, state);
+
     if (getOrientation(parent) == VERTICAL_LIST) {
       drawVertical(c, parent);
     } else {

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -39,7 +39,7 @@ public void onDrawOver(Canvas canvas, RecyclerView parent, RecyclerView.State st
     int orientation = getOrientation(parent);
     mHeaderRects.clear();
 
-    if (parent.getChildCount() > 0) {
+    if (parent.getChildCount() > 0 && mAdapter.getItemCount() > 0) {
       View firstView = parent.getChildAt(0);
       // draw the first visible child's header at the top of the view
       int firstPosition = parent.getChildPosition(firstView);

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -39,7 +39,7 @@ public void onDrawOver(Canvas canvas, RecyclerView parent, RecyclerView.State st
     int orientation = getOrientation(parent);
     mHeaderRects.clear();
 
-    if (parent.getChildCount() > 0) {
+    if (parent.getChildCount() > 0 && mAdapter.getItemCount() > 0) {
       View firstView = parent.getChildAt(0);
       // draw the first visible child's header at the top of the view
       int firstPosition = parent.getChildPosition(firstView);

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java
Patch:
@@ -9,7 +9,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-class StickyRecyclerHeadersDecoration extends RecyclerView.ItemDecoration {
+public class StickyRecyclerHeadersDecoration extends RecyclerView.ItemDecoration {
   private final StickyRecyclerHeadersAdapter mAdapter;
   private final LongSparseArray<View> mHeaderViews = new LongSparseArray<>();
   private final SparseArray<Rect> mHeaderRects = new SparseArray<>();

File: library/src/main/java/com/timehop/stickyheadersrecyclerview/StickyRecyclerHeadersTouchListener.java
Patch:
@@ -5,8 +5,7 @@
 import android.view.MotionEvent;
 import android.view.View;
 
-class StickyRecyclerHeadersTouchListener implements
-    RecyclerView.OnItemTouchListener {
+public class StickyRecyclerHeadersTouchListener implements RecyclerView.OnItemTouchListener {
   private final GestureDetector mTapDetector;
   private final RecyclerView mRecyclerView;
   private final StickyRecyclerHeadersDecoration mDecor;

File: sample/src/main/java/com/timehop/stickyheadersrecyclerview/sample/DividerDecoration.java
Patch:
@@ -1,4 +1,4 @@
-package com.timehop.stickyheadersrecyclerview;
+package com.timehop.stickyheadersrecyclerview.sample;
 
 import android.content.Context;
 import android.content.res.TypedArray;

File: sample/src/main/java/com/timehop/stickyheadersrecyclerview/sample/RecyclerArrayAdapter.java
Patch:
@@ -1,4 +1,4 @@
-package com.timehop.stickyheadersrecyclerview;
+package com.timehop.stickyheadersrecyclerview.sample;
 
 import android.support.v7.widget.RecyclerView;
 

