File: jstorm-core/src/main/java/backtype/storm/command/rebalance.java
Patch:
@@ -71,7 +71,7 @@ public static void main(String[] args) {
                         options.set_conf(jsonConf);
                     } else {
                         try {
-                            int delaySeconds = Integer.parseInt(args[1]);
+                            int delaySeconds = Integer.parseInt(args[i]);
                             options.set_wait_secs(delaySeconds);
                         } catch (NumberFormatException e) {
                             System.out.println("Unsupported argument found, arg=" + arg + ". Full args are " + JStormUtils.mk_list(args));

File: jstorm-core/src/main/java/backtype/storm/command/rebalance.java
Patch:
@@ -71,7 +71,7 @@ public static void main(String[] args) {
                         options.set_conf(jsonConf);
                     } else {
                         try {
-                            int delaySeconds = Integer.parseInt(args[1]);
+                            int delaySeconds = Integer.parseInt(args[i]);
                             options.set_wait_secs(delaySeconds);
                         } catch (NumberFormatException e) {
                             System.out.println("Unsupported argument found, arg=" + arg + ". Full args are " + JStormUtils.mk_list(args));

File: jstorm-utility/jstorm-elasticsearch/src/main/java/com/alibaba/jstorm/elasticsearch/bolt/EsIndexBolt.java
Patch:
@@ -10,7 +10,8 @@
 
 public class EsIndexBolt extends EsAbstractBolt {
 
-  private static final long serialVersionUID = 1L;
+  private static final long serialVersionUID = 8177473361305606986L;
+
   private EsIndexMapper mapper;
 
   public EsIndexBolt(EsConfig esConfig, EsIndexMapper mapper) {

File: jstorm-utility/jstorm-elasticsearch/src/main/java/com/alibaba/jstorm/elasticsearch/bolt/EsQueryBolt.java
Patch:
@@ -13,8 +13,8 @@
 
 public class EsQueryBolt extends EsAbstractBolt {
 
-  private static final long serialVersionUID = 1L;
-
+  private static final long serialVersionUID = -6500107598987890882L;
+  
   private EsOutputDeclarer esOutputDeclarer;
   private EsQueryMapper mapper;
 

File: jstorm-utility/jstorm-elasticsearch/src/main/java/com/alibaba/jstorm/elasticsearch/common/EsConfig.java
Patch:
@@ -16,7 +16,9 @@
 import com.google.common.collect.Lists;
 
 public class EsConfig implements Serializable {
-
+  
+  private static final long serialVersionUID = 946576929049344226L;
+  
   private static final String SEPARATER = ",";
   private static final String DELIMITER = ":";
 

File: jstorm-utility/jstorm-elasticsearch/src/main/java/com/alibaba/jstorm/elasticsearch/common/EsOutputDeclarer.java
Patch:
@@ -7,7 +7,7 @@
 
 public class EsOutputDeclarer implements Serializable {
 
-  private static final long serialVersionUID = 1L;
+  private static final long serialVersionUID = 8273553454942900376L;
   
   private List<String> fields = new ArrayList<String>();
 

File: jstorm-utility/jstorm-elasticsearch/src/main/java/com/alibaba/jstorm/elasticsearch/mapper/EsDefaultIndexMapper.java
Patch:
@@ -6,6 +6,8 @@
 
 public class EsDefaultIndexMapper implements EsIndexMapper {
 
+  private static final long serialVersionUID = 3777594656114668825L;
+
   @Override
   public OpType getOpType() {
     return OpType.INDEX;

File: jstorm-utility/jstorm-elasticsearch/src/test/java/com/alibaba/jstorm/elasticsearch/query/TestQueryBolt.java
Patch:
@@ -13,6 +13,8 @@
 
 public class TestQueryBolt extends BaseRichBolt {
 
+  private static final long serialVersionUID = -4561790175801815097L;
+  
   protected OutputCollector collector;
   FileOutputStream fos;
 

File: jstorm-utility/jstorm-elasticsearch/src/test/java/com/alibaba/jstorm/elasticsearch/query/TestQueryMapper.java
Patch:
@@ -6,6 +6,8 @@
 
 public class TestQueryMapper implements EsQueryMapper {
 
+  private static final long serialVersionUID = 9002508055282433046L;
+
   public String getIndex(ITuple tuple) {
     return "test";
   }

File: jstorm-utility/jstorm-elasticsearch/src/test/java/com/alibaba/jstorm/elasticsearch/userdefine/TestIndexBolt.java
Patch:
@@ -11,6 +11,8 @@
 
 public class TestIndexBolt extends EsAbstractBolt {
 
+  private static final long serialVersionUID = 8129061227572924508L;
+
   public TestIndexBolt(EsConfig esConfig) {
     super(esConfig);
   }

File: jstorm-core/src/main/java/com/alibaba/jstorm/daemon/supervisor/Supervisor.java
Patch:
@@ -119,7 +119,7 @@ public SupervisorManger mkSupervisor(Map conf, IContext sharedContext) throws Ex
 
         // Step 5 create HeartBeat
         // every supervisor.heartbeat.frequency.secs, write SupervisorInfo to ZK
-        // sync hearbeat to nimbus
+        // sync heartbeat to nimbus
         Heartbeat hb = new Heartbeat(conf, stormClusterState, supervisorId, localState, checkStatus);
         hb.update();
         AsyncLoopThread heartbeat = new AsyncLoopThread(hb, false, null, Thread.MIN_PRIORITY, true);

File: jstorm-core/src/main/java/com/alibaba/jstorm/daemon/worker/hearbeat/SyncContainerHb.java
Patch:
@@ -75,7 +75,7 @@ public void checkNoContainerHbTimes() {
         }
     }
 
-    public void handlReadDir() {
+    public void handleReadDir() {
         if (StringUtils.isBlank(readDir) == true) {
             return;
         }
@@ -180,7 +180,7 @@ public void run() {
 
         handleWriteDir();
 
-        handlReadDir();
+        handleReadDir();
 
     }
 

File: jstorm-core/src/main/java/com/alibaba/jstorm/daemon/supervisor/Supervisor.java
Patch:
@@ -119,7 +119,7 @@ public SupervisorManger mkSupervisor(Map conf, IContext sharedContext) throws Ex
 
         // Step 5 create HeartBeat
         // every supervisor.heartbeat.frequency.secs, write SupervisorInfo to ZK
-        // sync hearbeat to nimbus
+        // sync heartbeat to nimbus
         Heartbeat hb = new Heartbeat(conf, stormClusterState, supervisorId, localState, checkStatus);
         hb.update();
         AsyncLoopThread heartbeat = new AsyncLoopThread(hb, false, null, Thread.MIN_PRIORITY, true);

File: jstorm-core/src/main/java/com/alibaba/jstorm/daemon/worker/hearbeat/SyncContainerHb.java
Patch:
@@ -75,7 +75,7 @@ public void checkNoContainerHbTimes() {
         }
     }
 
-    public void handlReadDir() {
+    public void handleReadDir() {
         if (StringUtils.isBlank(readDir) == true) {
             return;
         }
@@ -180,7 +180,7 @@ public void run() {
 
         handleWriteDir();
 
-        handlReadDir();
+        handleReadDir();
 
     }
 

File: jstorm-core/src/main/java/com/alibaba/jstorm/utils/JStormUtils.java
Patch:
@@ -1423,7 +1423,7 @@ public static List<Integer> getSupervisorPortList(Map conf) {
         List<Integer> portList = (List<Integer>) conf.get(Config.SUPERVISOR_SLOTS_PORTS);
 
         if (portList != null && portList.size() > 0) {
-            return portList;
+            return new ArrayList<Integer>(portList);
         }
 
         int sysCpuNum = 4;

File: jstorm-core/src/main/java/com/alibaba/jstorm/utils/JStormUtils.java
Patch:
@@ -1423,7 +1423,7 @@ public static List<Integer> getSupervisorPortList(Map conf) {
         List<Integer> portList = (List<Integer>) conf.get(Config.SUPERVISOR_SLOTS_PORTS);
 
         if (portList != null && portList.size() > 0) {
-            return portList;
+            return new ArrayList<Integer>(portList);
         }
 
         int sysCpuNum = 4;

File: jstorm-core/src/main/java/backtype/storm/utils/DisruptorQueueImpl.java
Patch:
@@ -95,7 +95,9 @@ public String getName() {
     }
 
     public void consumeBatch(EventHandler<Object> handler) {
-        consumeBatchToCursor(_barrier.getCursor(), handler);
+        //write pos > read pos
+        if (_buffer.getCursor() > _consumer.get())
+            consumeBatchWhenAvailable(handler);
     }
 
     public void haltWithInterrupt() {

File: jstorm-core/src/main/java/backtype/storm/LocalCluster.java
Patch:
@@ -175,6 +175,8 @@ public void shutdown() {
         JStormUtils.sleepMs(10 * 1000);
         this.state.clean();
         instance = null;
+        //wait 10 second to exit to make run multiple junit test
+        JStormUtils.sleepMs(10 * 1000);
     }
 
     @Override

File: jstorm-core/src/test/java/com/alibaba/jstorm/topology/TransactionalWordsTest.java
Patch:
@@ -277,13 +277,14 @@ public void test_transaction_word() {
 
             cluster.submitTopology("top-n-topology", config, builder.buildTopology());
 
-            JStormUtils.sleepMs(100 * 1000);
+            JStormUtils.sleepMs(60 * 1000);
             
             
             assertEquals(false, outOfOrder.get() );
             assertNotSame(0, receiveCounter1.get());
             assertNotSame(0, receiveCounter2.get());
             
+            cluster.killTopology("top-n-topology");
             cluster.shutdown();
         } catch (Exception e) {
             Assert.fail("Failed to run simple transaction");

File: jstorm-core/src/main/java/com/alibaba/jstorm/callback/AsyncLoopRunnable.java
Patch:
@@ -75,7 +75,7 @@ private boolean needQuit(Object rtn) {
     private void shutdown() {
         fn.postRun();
         fn.shutdown();
-        LOG.info("Succefully shutdown");
+        LOG.info("Successfully shutdown");
     }
 
     @Override

File: jstorm-core/src/main/java/com/alibaba/jstorm/daemon/supervisor/SyncProcessEvent.java
Patch:
@@ -213,7 +213,7 @@ public void checkNeedUpdateTopologys(Map<String, StateHeartbeat> localWorkerStat
             try {
                 long lastModifytime = StormConfig.get_supervisor_topology_Bianrymodify_time(conf, topologyId);
                 if ((currTime - lastModifytime) / 1000 < (JStormUtils.MIN_1 * 2)) {
-                    LOG.debug("less 2 minite ,so removed " + topologyId);
+                    LOG.debug("less 2 miniute ,so removed " + topologyId);
                     needRemoveTopologies.add(topologyId);
                 }
             } catch (Exception e) {

File: jstorm-core/src/main/java/com/alibaba/jstorm/task/comm/TaskSendTargets.java
Patch:
@@ -66,7 +66,7 @@ public TaskSendTargets(Map<Object, Object> _storm_conf, String _component, Map<S
 
 
         taskId = topologyContext.getThisTaskId();
-        debugIdStr = " Emit from " + componentId + ":" + taskId + " ";
+        debugIdStr = " emit from " + componentId + ":" + taskId + " ";
     }
 
     // direct send tuple to special task
@@ -104,7 +104,7 @@ public List<Integer> get(String stream, List<Object> tuple, Collection<Tuple> an
         if (componentCrouping == null) {
             // if the target component's parallelism is 0, don't need send to
             // them
-            LOG.debug("Failed to get Grouper of " + stream + " in " + debugIdStr);
+            LOG.debug("Failed to get Grouper of " + stream + " when " + debugIdStr);
             return out_tasks;
         }
 

File: jstorm-core/src/test/java/com/alibaba/jstorm/message/netty/NettyUnitTest.java
Patch:
@@ -30,6 +30,7 @@
 
 import junit.framework.Assert;
 
+import org.junit.BeforeClass;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -60,7 +61,8 @@ public class NettyUnitTest {
     private static Map storm_conf = new HashMap<Object, Object>();
     private static IContext context = null;
 
-    static {
+    @BeforeClass
+    public static void setup() {
         storm_conf = Utils.readDefaultConfig();
         ConfigExtension.setLocalWorkerPort(storm_conf, port);
         boolean syncMode = false;

File: jstorm-core/src/main/java/com/alibaba/jstorm/daemon/nimbus/TopologyMetricsRunnable.java
Patch:
@@ -251,6 +251,7 @@ public void run() {
                 if (this.metricUploader != null) {
                     Event event = queue.poll();
                     if (event == null) {
+                        JStormUtils.sleepMs(1);
                         continue;
                     }
 
@@ -478,9 +479,9 @@ private void syncMetaFromCache(String topologyId, TopologyMetricContext context)
     private void syncMetaFromRemote(String topologyId, TopologyMetricContext context) {
         try {
             int memSize = context.getMemMeta().size();
-            Integer zkSize = (Integer)stormClusterState.get_topology_metric(topologyId);
+            Integer zkSize = (Integer) stormClusterState.get_topology_metric(topologyId);
 
-            if (zkSize != null  && memSize != zkSize.intValue()) {
+            if (zkSize != null && memSize != zkSize.intValue()) {
                 ConcurrentMap<String, Long> memMeta = context.getMemMeta();
                 for (MetaType metaType : MetaType.values()) {
                     List<MetricMeta> metaList = metricQueryClient.getMetricMeta(clusterName, topologyId, metaType);

File: jstorm-core/src/main/java/com/alibaba/jstorm/daemon/nimbus/TopologyMetricsRunnable.java
Patch:
@@ -478,9 +478,9 @@ private void syncMetaFromCache(String topologyId, TopologyMetricContext context)
     private void syncMetaFromRemote(String topologyId, TopologyMetricContext context) {
         try {
             int memSize = context.getMemMeta().size();
-            int zkSize = (Integer) stormClusterState.get_topology_metric(topologyId);
+            Integer zkSize = (Integer)stormClusterState.get_topology_metric(topologyId);
 
-            if (memSize != zkSize) {
+            if (zkSize != null  && memSize != zkSize.intValue()) {
                 ConcurrentMap<String, Long> memMeta = context.getMemMeta();
                 for (MetaType metaType : MetaType.values()) {
                     List<MetricMeta> metaList = metricQueryClient.getMetricMeta(clusterName, topologyId, metaType);
@@ -908,4 +908,4 @@ public static class TaskStartEvent extends Event {
         public Assignment newAssignment;
         public Map<Integer, String> task2Component;
     }
-}
+}
\ No newline at end of file

File: jstorm-client-extension/src/main/java/com/alibaba/jstorm/utils/JStormUtils.java
Patch:
@@ -267,7 +267,7 @@ public static void kill_signal(Integer pid, String signal) {
 
 	public static java.lang.Process launch_process(String command,
 			Map<String, String> environment) throws IOException {
-		String[] cmdlist = (new String("nohup " + command)).split(" ");
+		String[] cmdlist = (new String("nohup " + command + " &")).split(" ");
 		ArrayList<String> buff = new ArrayList<String>();
 		for (String tok : cmdlist) {
 			if (!tok.isEmpty()) {

File: jstorm-server/src/main/java/com/alibaba/jstorm/daemon/nimbus/NimbusServer.java
Patch:
@@ -117,7 +117,7 @@ private void launchServer(final Map conf, INimbus inimbus) {
 			initFollowerThread(conf);
 
 			int port = ConfigExtension.getNimbusDeamonHttpserverPort(conf);
-			hs = new Httpserver(port);
+			hs = new Httpserver(port, conf);
 			hs.start();
 
 			initContainerHBThread(conf);

File: jstorm-server/src/main/java/com/alibaba/jstorm/daemon/supervisor/Supervisor.java
Patch:
@@ -158,7 +158,7 @@ public SupervisorManger mkSupervisor(Map conf, IContext sharedContext)
 
 		//Step 7 start httpserver
 		int port = ConfigExtension.getSupervisorDeamonHttpserverPort(conf);
-		Httpserver httpserver = new Httpserver(port);
+		Httpserver httpserver = new Httpserver(port, conf);
 		httpserver.start();
 		
 		//Step 8 start uploading every 60 secs
@@ -169,7 +169,7 @@ public SupervisorManger mkSupervisor(Map conf, IContext sharedContext)
 		} else {
 		    client = new MetricSendClient();
 		}
-		UploadSupervMetric uploadMetric = new UploadSupervMetric(stormClusterState, 
+		UploadSupervMetric uploadMetric = new UploadSupervMetric(conf, stormClusterState, 
 				supervisorId, active, 60, client);
 		AsyncLoopThread uploadMetricThread = new AsyncLoopThread(uploadMetric);
 		threads.add(uploadMetricThread);

File: jstorm-server/src/main/java/com/alibaba/jstorm/schedule/default_assign/DefaultTopologyScheduler.java
Patch:
@@ -148,7 +148,8 @@ public Set<ResourceWorkerSlot> assignTasks(TopologyAssignContext context)
 				.makeWorkers(defaultContext, needAssignTasks, allocWorkerNum);
 		TaskGanker ganker = new TaskGanker(defaultContext, needAssignTasks,
 				newAssignList);
-		Set<ResourceWorkerSlot> newAssigns = ganker.gankTask();
+		Set<ResourceWorkerSlot> newAssigns = new HashSet<ResourceWorkerSlot>(
+				ganker.gankTask());
 		ret.addAll(newAssigns);
 
 		LOG.info("Keep Alive slots:" + keepAssigns);

File: jstorm-server/src/main/java/com/alibaba/jstorm/schedule/default_assign/Selector/Selector.java
Patch:
@@ -1,10 +1,10 @@
 package com.alibaba.jstorm.schedule.default_assign.Selector;
 
-import java.util.Set;
+import java.util.List;
 
 import com.alibaba.jstorm.schedule.default_assign.ResourceWorkerSlot;
 
 public interface Selector {
-	public Set<ResourceWorkerSlot> select(Set<ResourceWorkerSlot> result,
+	public List<ResourceWorkerSlot> select(List<ResourceWorkerSlot> result,
 			String name);
 }

File: jstorm-server/src/test/java/com/alibaba/jstorm/superivosr/deamon/HttpserverTest.java
Patch:
@@ -1,5 +1,7 @@
 package com.alibaba.jstorm.superivosr.deamon;
 
+import java.util.HashMap;
+
 import org.junit.Test;
 
 import com.alibaba.jstorm.client.ConfigExtension;
@@ -11,7 +13,7 @@ public class HttpserverTest {
 	@Test
 	public void test_httpserver() {
 		int port = ConfigExtension.getSupervisorDeamonHttpserverPort(Maps.newHashMap());
-		Httpserver httpserver = new Httpserver(port);
+		Httpserver httpserver = new Httpserver(port, new HashMap<String, Object>());
 		httpserver.start();
 		System.out.println("start....");
 	}

File: jstorm-utility/jstorm-rocket-mq/src/main/java/com/alibaba/aloha/meta/MetaSpout.java
Patch:
@@ -201,7 +201,7 @@ public void fail(Object msgId, List<Object> values) {
 
 	public void finishTuple(MetaTuple metaTuple) {
 		waithHistogram.update(metaTuple.getEmitMs() - metaTuple.getCreateMs());
-		processHistogram.update(System.currentTimeMillis() - metaTuple.emitMs);
+		processHistogram.update(System.currentTimeMillis() - metaTuple.getEmitMs());
 		metaTuple.done();
 	}
 

File: jstorm-client-extension/src/main/java/com/alibaba/jstorm/utils/HttpserverUtils.java
Patch:
@@ -16,7 +16,7 @@ public class HttpserverUtils {
 	
 	public static final String HTTPSERVER_LOGVIEW_PARAM_DIR = "dir";
 	
-	public static final long HTTPSERVER_LOGVIEW_PAGESIZE = 8192;
+	public static final long HTTPSERVER_LOGVIEW_PAGESIZE = 16384;
 	
 	public static final String HTTPSERVER_LOGVIEW_PARAM_SIZE_FORMAT = "%016d\n";
 	

File: jstorm-client/src/main/java/backtype/storm/tuple/MessageId.java
Patch:
@@ -13,6 +13,7 @@
 public class MessageId {
 	private Map<Long, Long> _anchorsToIds;
 
+	@Deprecated
 	public static long generateId() {
 		return Utils.secureRandomLong();
 	}

File: jstorm-server/src/main/java/com/alibaba/jstorm/daemon/supervisor/SyncProcessEvent.java
Patch:
@@ -690,8 +690,9 @@ private Set<Integer> killUselessWorkers(
 
 				try {
 					shutWorker(conf, supervisorId, workerid, workerThreadPids);
-					if (cgroupManager != null)
+					if (cgroupManager != null) {
 						cgroupManager.shutDownWorker(workerid);
+					}
 				} catch (IOException e) {
 					String errMsg = "Failed to shutdown worker workId:"
 							+ workerid + ",supervisorId: " + supervisorId

File: jstorm-server/src/main/java/com/alibaba/jstorm/task/acker/Acker.java
Patch:
@@ -47,7 +47,8 @@ public void prepare(Map stormConf, TopologyContext context,
 		// TIMEOUT_BUCKET_NUM);
 		this.pending = new RotatingMap<Object, AckObject>(TIMEOUT_BUCKET_NUM);
 		this.rotateTime = 1000L * JStormUtils.parseInt(
-				stormConf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS), 30)/TIMEOUT_BUCKET_NUM;
+				stormConf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS), 30)/
+				(TIMEOUT_BUCKET_NUM - 1);
 	}
 
 	@Override

File: jstorm-server/src/main/java/com/alibaba/jstorm/task/group/MkGrouper.java
Patch:
@@ -64,7 +64,8 @@ public MkGrouper(TopologyContext _topology_context, Fields _out_fields,
 		this.fields = Thrift.groupingType(thrift_grouping);
 		this.grouptype = this.parseGroupType(workerData);
 		
-		LOG.info("Grouptype is " + grouptype);
+		String id = _topology_context.getThisTaskId() + ":" + streamId;
+		LOG.info(id + " grouptype is " + grouptype);
 
 	}
 

File: jstorm-server/src/main/java/com/alibaba/jstorm/utils/DisruptorRunable.java
Patch:
@@ -61,6 +61,7 @@ public void onEvent(Object event, long sequence, boolean endOfBatch)
 	@Override
 	public void run() {
 		LOG.info("Successfully start thread " + idStr);
+		queue.consumerStarted();
 
 		while (active.get()) {
 			try {

File: jstorm-client/src/main/java/backtype/storm/utils/Utils.java
Patch:
@@ -308,6 +308,8 @@ public static Integer getInt(Object o) {
 			return (Integer) o;
 		} else if (o instanceof Short) {
 			return ((Short) o).intValue();
+		} else if (o instanceof String) {
+			return Integer.parseInt(((String) o));
 		} else {
 			throw new IllegalArgumentException("Don't know how to convert " + o
 					+ " + to int");

File: jstorm-client/src/main/java/backtype/storm/utils/Utils.java
Patch:
@@ -308,6 +308,8 @@ public static Integer getInt(Object o) {
 			return (Integer) o;
 		} else if (o instanceof Short) {
 			return ((Short) o).intValue();
+		} else if (o instanceof String) {
+			return Integer.parseInt(((String) o));
 		} else {
 			throw new IllegalArgumentException("Don't know how to convert " + o
 					+ " + to int");

File: jstorm-server/src/main/java/com/alibaba/jstorm/daemon/supervisor/SyncProcessEvent.java
Patch:
@@ -509,11 +509,12 @@ public void launchWorker(Map conf, IContext sharedcontext,
         
         
         if (stormhome != null) {
-            commandSB.append(" -Dlogback.configurationFile=" + stormhome + "/conf/cluster.xml");
+//            commandSB.append(" -Dlogback.configurationFile=" + stormhome + "/conf/cluster.xml");
+        	commandSB.append(" -Dlog4j.configuration=File:" + stormhome + "/conf/jstorm.log4j.properties");
             commandSB.append(" -Djstorm.home=");
             commandSB.append(stormhome);
         }else {
-            commandSB.append(" -Dlogback.configurationFile=cluster.xml");
+            commandSB.append(" -Dlog4j.configuration=File:jstorm.log4j.properties");
         }
         
         String classpath = getClassPath(stormjar, stormhome);

