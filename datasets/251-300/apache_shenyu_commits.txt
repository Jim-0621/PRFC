File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/config/ShenyuClientConfig.java
Patch:
@@ -27,7 +27,7 @@
  * The type Shenyu client config.
  */
 public final class ShenyuClientConfig {
-    
+
     private Map<String, ClientPropertiesConfig> client = new HashMap<>() {
         @Override
         public ClientPropertiesConfig get(final Object key) {

File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/dto/ApiDocRegisterDTO.java
Patch:
@@ -382,7 +382,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         ApiDocRegisterDTO that = (ApiDocRegisterDTO) o;

File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/dto/MetaDataRegisterDTO.java
Patch:
@@ -485,7 +485,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         MetaDataRegisterDTO that = (MetaDataRegisterDTO) o;

File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/dto/URIRegisterDTO.java
Patch:
@@ -269,7 +269,7 @@ public boolean equals(final Object o) {
             return Boolean.TRUE;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return Boolean.FALSE;
         }
 

File: shenyu-registry/shenyu-registry-api/src/main/java/org/apache/shenyu/registry/api/entity/InstanceEntity.java
Patch:
@@ -147,7 +147,7 @@ public boolean equals(final Object o) {
             return Boolean.TRUE;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return Boolean.FALSE;
         }
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/config/HttpConfig.java
Patch:
@@ -205,7 +205,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         HttpConfig that = (HttpConfig) o;

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/main/java/org/apache/shenyu/sync/data/nacos/config/NacosACMConfig.java
Patch:
@@ -126,7 +126,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         NacosACMConfig that = (NacosACMConfig) o;

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/main/java/org/apache/shenyu/sync/data/nacos/config/NacosConfig.java
Patch:
@@ -146,7 +146,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         NacosConfig that = (NacosConfig) o;

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/main/java/org/apache/shenyu/plugin/sync/data/websocket/config/WebsocketConfig.java
Patch:
@@ -72,7 +72,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         WebsocketConfig that = (WebsocketConfig) o;

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/RestTemplateConfiguration.java
Patch:
@@ -28,7 +28,7 @@
  * RestTemplate config.
  */
 @Configuration
-public class RestTemplateConfig {
+public class RestTemplateConfiguration {
     
     /**
      * ClientHttpRequestFactory bean.

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/refresh/DiscoveryUpstreamDataRefresh.java
Patch:
@@ -67,7 +67,7 @@ protected boolean updateCacheIfNeed(final ConfigData<DiscoverySyncData> result)
 
     @Override
     public ConfigData<?> cacheConfigData() {
-        return GROUP_CACHE.get(ConfigGroupEnum.PROXY_SELECTOR);
+        return GROUP_CACHE.get(ConfigGroupEnum.DISCOVER_UPSTREAM);
     }
 
 }

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/NoFallbackAvailableException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class NoFallbackAvailableException extends RuntimeException {
 
+    private static final long serialVersionUID = 5196228762350964700L;
+
     public NoFallbackAvailableException(final String message, final Throwable cause) {
 
         super(message, cause);

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/annotation/RequestParamParameterProcessor.java
Patch:
@@ -17,10 +17,11 @@
 
 package org.apache.shenyu.sdk.spring.annotation;
 
-import static com.google.common.base.Strings.emptyToNull;
 import com.google.common.collect.Maps;
 import java.lang.annotation.Annotation;
 import java.util.Map;
+
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.apache.shenyu.sdk.core.common.RequestTemplate;
 import static org.apache.shenyu.sdk.core.util.Util.checkState;
@@ -45,7 +46,7 @@ public boolean processArgument(final ShenyuRequest shenyuRequest, final Annotati
         RequestTemplate requestTemplate = shenyuRequest.getRequestTemplate();
         RequestParam requestParam = ANNOTATION.cast(annotation);
         String name = requestParam.value();
-        checkState(emptyToNull(name) != null || arg instanceof Map, "RequestParam.value() was empty on parameter %s#%s",
+        checkState(StringUtils.isNotBlank(name) || arg instanceof Map, "RequestParam.value() was empty on parameter %s#%s",
             requestTemplate.getMethod().getDeclaringClass().getSimpleName(), requestTemplate.getMethod().getName());
         StringBuilder pathResult = new StringBuilder(requestTemplate.getPath());
         Map<Object, Object> params = Maps.newHashMap();

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/factory/Contract.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 import static org.apache.shenyu.sdk.core.util.Util.checkState;
 
@@ -104,7 +105,7 @@ private List<RequestTemplate.ParamMetadata> analysisParamMetadata(final Method m
             List<RequestTemplate.ParamMetadata> params = new ArrayList<>(parameters.length);
             for (int index = 0; index < parameters.length; index++) {
                 Annotation[] annotations = parameters[index].getAnnotations();
-                if (annotations == null || annotations.length == 0) {
+                if (Objects.isNull(annotations) || annotations.length == 0) {
                     continue;
                 }
                 params.add(new RequestTemplate.ParamMetadata(annotations, parameters[index].getType(), index));

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/proxy/ShenyuClientInvocationHandler.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
@@ -84,7 +85,7 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg
             result = handler.invoke(args);
         } catch (Throwable throwable) {
             LOG.error("ShenYu Client invoke error  ", throwable);
-            if (fallbackFactory == null) {
+            if (Objects.isNull(fallbackFactory)) {
                 throw new NoFallbackAvailableException("No fallback available.", throwable);
             }
             Object fallback = fallbackFactory.create(throwable);

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/proxy/ShenyuClientMethodHandler.java
Patch:
@@ -34,6 +34,7 @@
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * ShenyuClientMethodHandler.
@@ -74,7 +75,7 @@ public Object invoke(final Object[] args) throws IOException {
     }
 
     private Object handlerResponse(final ShenyuResponse shenyuResponse, final Class<?> returnType) {
-        if (shenyuResponse == null || void.class == returnType) {
+        if (Objects.isNull(shenyuResponse) || void.class == returnType) {
             return null;
         } else if (ShenyuResponse.class == returnType) {
             return shenyuResponse;

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/PluginJarParser.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.jar.JarEntry;
@@ -43,7 +44,7 @@ public static PluginJar parseJar(final byte[] jarBytes) {
         PluginJar pluginJar = new PluginJar();
         try (JarInputStream jarInputStream = new JarInputStream(new ByteArrayInputStream(jarBytes))) {
             JarEntry jarEntry;
-            while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {
+            while (Objects.nonNull(jarEntry = jarInputStream.getNextJarEntry())) {
                 String entryName = jarEntry.getName();
                 // get jar version
                 if (jarEntry.getName().endsWith("pom.properties")) {

File: shenyu-common/src/main/java/org/apache/shenyu/common/cache/MemorySafeLRUMap.java
Patch:
@@ -32,6 +32,8 @@
 @NotThreadSafe
 public class MemorySafeLRUMap<K, V> extends LRUMap<K, V> {
 
+    private static final long serialVersionUID = -102926983721266409L;
+
     private final int maxFreeMemory;
 
     public MemorySafeLRUMap(final int maxFreeMemory,

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/AppAuthData.java
Patch:
@@ -202,7 +202,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         AppAuthData that = (AppAuthData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/AuthParamData.java
Patch:
@@ -86,7 +86,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         AuthParamData that = (AuthParamData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/AuthPathData.java
Patch:
@@ -128,7 +128,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         AuthPathData that = (AuthPathData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/ConditionData.java
Patch:
@@ -123,7 +123,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         ConditionData that = (ConditionData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/ConfigData.java
Patch:
@@ -119,7 +119,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         ConfigData<?> that = (ConfigData<?>) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/DiscoveryUpstreamData.java
Patch:
@@ -263,7 +263,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         DiscoveryUpstreamData that = (DiscoveryUpstreamData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/MetaData.java
Patch:
@@ -313,7 +313,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         MetaData metaData = (MetaData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/PluginData.java
Patch:
@@ -282,7 +282,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         PluginData that = (PluginData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/RuleData.java
Patch:
@@ -358,7 +358,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         final RuleData ruleData = (RuleData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/SelectorData.java
Patch:
@@ -388,7 +388,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         SelectorData that = (SelectorData) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/WebsocketData.java
Patch:
@@ -133,7 +133,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         WebsocketData<?> that = (WebsocketData<?>) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/DubboRegisterConfig.java
Patch:
@@ -172,7 +172,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         DubboRegisterConfig that = (DubboRegisterConfig) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/GrpcRegisterConfig.java
Patch:
@@ -52,7 +52,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         GrpcRegisterConfig that = (GrpcRegisterConfig) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/MotanRegisterConfig.java
Patch:
@@ -153,7 +153,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         MotanRegisterConfig that = (MotanRegisterConfig) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/SofaRegisterConfig.java
Patch:
@@ -172,7 +172,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         SofaRegisterConfig that = (SofaRegisterConfig) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/TarsRegisterConfig.java
Patch:
@@ -112,7 +112,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         TarsRegisterConfig that = (TarsRegisterConfig) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/GeneralContextHandle.java
Patch:
@@ -123,7 +123,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         GeneralContextHandle that = (GeneralContextHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/HystrixHandle.java
Patch:
@@ -272,7 +272,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         HystrixHandle that = (HystrixHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/MockHandle.java
Patch:
@@ -68,7 +68,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         MockHandle that = (MockHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RateLimiterHandle.java
Patch:
@@ -182,7 +182,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         RateLimiterHandle that = (RateLimiterHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RedirectHandle.java
Patch:
@@ -80,7 +80,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;  
         }
         final RedirectHandle that = (RedirectHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RequestHandle.java
Patch:
@@ -195,7 +195,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         RequestHandle that = (RequestHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/Resilience4JHandle.java
Patch:
@@ -339,7 +339,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         Resilience4JHandle that = (Resilience4JHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RewriteHandle.java
Patch:
@@ -121,7 +121,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         RewriteHandle that = (RewriteHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/SentinelHandle.java
Patch:
@@ -363,7 +363,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         SentinelHandle that = (SentinelHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/WafHandle.java
Patch:
@@ -89,7 +89,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         WafHandle wafHandle = (WafHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingRuleHandle.java
Patch:
@@ -143,7 +143,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         ContextMappingRuleHandle that = (ContextMappingRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/DivideRuleHandle.java
Patch:
@@ -183,7 +183,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         DivideRuleHandle that = (DivideRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/KeyAuthRuleHandle.java
Patch:
@@ -77,7 +77,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         KeyAuthRuleHandle that = (KeyAuthRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandle.java
Patch:
@@ -219,7 +219,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         ModifyResponseRuleHandle that = (ModifyResponseRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ParamMappingRuleHandle.java
Patch:
@@ -93,7 +93,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         ParamMappingRuleHandle that = (ParamMappingRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/SofaRuleHandle.java
Patch:
@@ -104,7 +104,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         SofaRuleHandle that = (SofaRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/SpringCloudRuleHandle.java
Patch:
@@ -115,7 +115,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         SpringCloudRuleHandle that = (SpringCloudRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/WebSocketRuleHandle.java
Patch:
@@ -112,7 +112,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         WebSocketRuleHandle that = (WebSocketRuleHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/CommonUpstream.java
Patch:
@@ -223,7 +223,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         CommonUpstream that = (CommonUpstream) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/DivideUpstream.java
Patch:
@@ -110,7 +110,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         DivideUpstream that = (DivideUpstream) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/GrpcUpstream.java
Patch:
@@ -80,7 +80,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         GrpcUpstream that = (GrpcUpstream) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/SpringCloudSelectorHandle.java
Patch:
@@ -125,7 +125,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         SpringCloudSelectorHandle that = (SpringCloudSelectorHandle) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/TarsUpstream.java
Patch:
@@ -103,7 +103,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         TarsUpstream that = (TarsUpstream) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/WebSocketUpstream.java
Patch:
@@ -148,7 +148,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         WebSocketUpstream that = (WebSocketUpstream) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/ZombieUpstream.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
 
+import java.util.Objects;
+
 /**
  * this is zombie divide upstream.
  */
@@ -125,7 +127,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         ZombieUpstream that = (ZombieUpstream) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/timer/WheelTimerFactory.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.shenyu.common.timer;
 
+import java.util.Objects;
+
 /**
  * WheelTimerFactory .
  * shared wheel time.
@@ -96,7 +98,7 @@ private abstract static class SharedRef<T> {
          * @return the ref
          */
         public synchronized T getRef() {
-            if (shared == null) {
+            if (Objects.isNull(shared)) {
                 this.shared = create();
             }
             return this.shared.getRef();

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/GsonUtils.java
Patch:
@@ -482,7 +482,7 @@ private static class DurationTypeAdapter extends TypeAdapter<Duration> {
         @Override
         public void write(final JsonWriter out, final Duration value) {
             try {
-                if (value == null) {
+                if (Objects.isNull(value)) {
                     out.nullValue();
                     return;
                 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/JarDependencyUtils.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.util.HashSet;
+import java.util.Objects;
 import java.util.Set;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
@@ -56,7 +57,7 @@ public static Set<String> getDependencyTree(final byte[] jarBytes) {
         try (InputStream inputStream = new ByteArrayInputStream(jarBytes);
              ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {
             ZipEntry entry;
-            while ((entry = zipInputStream.getNextEntry()) != null) {
+            while (Objects.nonNull(entry = zipInputStream.getNextEntry())) {
                 if (entry.getName().endsWith(".class")) {
                     ClassNode classNode = new ClassNode(Opcodes.ASM7);
                     ClassReader classReader = new ClassReader(zipInputStream);

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/ParamCheckUtils.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.exception.ShenyuException;
 
+import java.util.Objects;
+
 /**
  * The type Param check utils.
  */
@@ -32,7 +34,7 @@ public class ParamCheckUtils {
      * @return the boolean
      */
     public static boolean bodyIsEmpty(final String body) {
-        return null == body || StringUtils.isEmpty(body) || "null".equals(body);
+        return Objects.isNull(body) || StringUtils.isEmpty(body) || "null".equals(body);
     }
 
     /**

File: shenyu-discovery/shenyu-discovery-nacos/src/main/java/org/apache/shenyu/discovery/nacos/NacosDiscoveryService.java
Patch:
@@ -69,7 +69,7 @@ public class NacosDiscoveryService implements ShenyuDiscoveryService {
 
     @Override
     public void init(final DiscoveryConfig config) {
-        if (this.namingService != null) {
+        if (Objects.nonNull(this.namingService)) {
             LOGGER.info("Nacos naming service already registered");
             return;
         }

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/consumer/QueueConsumer.java
Patch:
@@ -18,11 +18,11 @@
 package org.apache.shenyu.disruptor.consumer;
 
 import com.lmax.disruptor.WorkHandler;
-import java.util.Objects;
 import org.apache.shenyu.disruptor.event.DataEvent;
 import org.apache.shenyu.disruptor.event.OrderlyDataEvent;
 import org.apache.shenyu.disruptor.thread.OrderlyExecutor;
 
+import java.util.Objects;
 import java.util.concurrent.ThreadPoolExecutor;
 
 /**
@@ -68,6 +68,6 @@ private ThreadPoolExecutor orderly(final DataEvent<T> t) {
     }
     
     private boolean isEmpty(final String t) {
-        return t == null || t.isEmpty();
+        return Objects.isNull(t) || t.isEmpty();
     }
 }

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/entity/Upstream.java
Patch:
@@ -437,7 +437,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (Objects.isNull(o) || getClass() != o.getClass()) {
             return false;
         }
         Upstream that = (Upstream) o;

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/exception/ResponsiveException.java
Patch:
@@ -23,6 +23,8 @@
 
 public class ResponsiveException extends ShenyuException {
 
+    private static final long serialVersionUID = 3951601337229132230L;
+
     private final int code;
 
     private final ServerWebExchange webExchange;

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/disruptor/subcriber/ShenyuClientApiDocExecutorSubscriber.java
Patch:
@@ -46,8 +46,6 @@ public DataType getType() {
 
     @Override
     public void executor(final Collection<ApiDocRegisterDTO> dataList) {
-        for (ApiDocRegisterDTO apiDocRegisterDTO : dataList) {
-            shenyuClientRegisterRepository.persistApiDoc(apiDocRegisterDTO);
-        }
+        dataList.forEach(shenyuClientRegisterRepository::persistApiDoc);
     }
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/disruptor/subcriber/ShenyuClientMetadataExecutorSubscriber.java
Patch:
@@ -47,8 +47,6 @@ public DataType getType() {
     
     @Override
     public void executor(final Collection<MetaDataRegisterDTO> metaDataRegisterDTOList) {
-        for (MetaDataRegisterDTO metaDataRegisterDTO : metaDataRegisterDTOList) {
-            shenyuClientRegisterRepository.persistInterface(metaDataRegisterDTO);
-        }
+        metaDataRegisterDTOList.forEach(shenyuClientRegisterRepository::persistInterface);
     }
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/exception/ShenyuClientIllegalArgumentException.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class ShenyuClientIllegalArgumentException extends IllegalArgumentException {
 
+    private static final long serialVersionUID = -5608921593520024291L;
+
     /**
      * Constructs an <code>IllegalArgumentException</code> with the
      * specified detail message.

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/registrar/ApiRegistrar.java
Patch:
@@ -30,9 +30,7 @@ public interface ApiRegistrar {
      * @param beans apiBean to register
      */
     default void register(List<ApiBean> beans) {
-        for (ApiBean bean : beans) {
-            register(bean);
-        }
+        beans.forEach(this::register);
     }
     
     /**

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/registrar/BaseApiRegistrarImpl.java
Patch:
@@ -51,9 +51,7 @@ public void addApiProcessor(final ApiRegisterProcessor processor) {
     
     @Override
     public void register(final ApiBean apiBean) {
-        for (ApiRegisterProcessor processor : processors) {
-            processor.process(apiBean);
-        }
+        processors.forEach(processor -> processor.process(apiBean));
         if (ApiBean.Status.INIT.equals(apiBean.getStatus())) {
             // default register all api
             apiBean.setStatus(ApiBean.Status.REGISTRABLE_API);

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListener.java
Patch:
@@ -276,7 +276,7 @@ public String getAppName() {
     
     @Override
     public String getPort() {
-        final int port = Integer.parseInt(Optional.ofNullable(super.getPort()).orElseGet(() -> "-1"));
+        final int port = Integer.parseInt(Optional.ofNullable(super.getPort()).orElse("-1"));
         final int mergedPort = port <= 0 ? PortUtils.findPort(getContext().getAutowireCapableBeanFactory()) : port;
         return String.valueOf(mergedPort);
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/register/SpringCloudApiMetaRegister.java
Patch:
@@ -95,7 +95,7 @@ protected MetaDataRegisterDTO preParse(final ApiBean apiBean) {
     @Override
     protected Boolean match(final ApiBean apiBean) {
         ShenyuSpringCloudClient annotation = apiBean.getAnnotation(ShenyuSpringCloudClient.class);
-        if (annotation != null) {
+        if (Objects.nonNull(annotation)) {
             return !annotation.path()[0].endsWith("/**");
         }
         return true;

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListener.java
Patch:
@@ -287,7 +287,7 @@ protected ApiDocRegisterDTO.ApiExt customApiDocExt(final ApiDocRegisterDTO.ApiEx
 
     @Override
     public String getPort() {
-        final int port = Integer.parseInt(Optional.ofNullable(super.getPort()).orElseGet(() -> "-1"));
+        final int port = Integer.parseInt(Optional.ofNullable(super.getPort()).orElse("-1"));
         final int mergedPort = port <= 0 ? PortUtils.findPort(getContext().getAutowireCapableBeanFactory()) : port;
         return String.valueOf(mergedPort);
     }

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/ShenyuServerEndpointerExporter.java
Patch:
@@ -59,7 +59,7 @@ protected ServerContainer getServerContainer() {
 
     @Override
     protected void initServletContext(final ServletContext servletContext) {
-        if (this.serverContainer == null) {
+        if (Objects.isNull(this.serverContainer)) {
             this.serverContainer = (ServerContainer) servletContext.getAttribute("jakarta.websocket.server.ServerContainer");
         }
     }
@@ -75,7 +75,7 @@ protected boolean isContextRequired() {
      */
     public void registerEndpoint(final Class<?> pojo) {
         ShenyuServerEndpoint annotation = AnnotatedElementUtils.findMergedAnnotation(pojo, ShenyuServerEndpoint.class);
-        if (annotation == null) {
+        if (Objects.isNull(annotation)) {
             throw new ShenyuException("Class missing annotation ShenyuServerEndpoint! class name: " + pojo.getName());
         }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/MetaDataMapper.java
Patch:
@@ -177,9 +177,10 @@ public interface MetaDataMapper extends ExistProvider {
      * the path is existed.
      *
      * @param path path
+     * @param namespaceId namespaceId
      * @return existed
      */
-    Boolean pathExisted(@Param("path") Serializable path);
+    Boolean pathExisted(@Param("path") Serializable path, @Param("namespaceId") String namespaceId);
     
     /**
      * the path is existed.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/DiscoveryService.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.dto.DiscoveryHandlerDTO;
 import org.apache.shenyu.admin.model.result.ConfigImportResult;
 import org.apache.shenyu.admin.model.vo.DiscoveryVO;
+import org.apache.shenyu.admin.service.configs.ConfigsImportContext;
 import org.apache.shenyu.register.common.dto.DiscoveryConfigRegisterDTO;
 
 import java.util.List;
@@ -131,7 +132,8 @@ public interface DiscoveryService {
      *
      * @param namespace the namespace
      * @param discoveryList the discovery data
+     * @param context import context
      * @return config import result
      */
-    ConfigImportResult importData(String namespace, List<DiscoveryDTO> discoveryList);
+    ConfigImportResult importData(String namespace, List<DiscoveryDTO> discoveryList, ConfigsImportContext context);
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/NamespacePluginService.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.shenyu.admin.model.vo.NamespacePluginVO;
 import org.apache.shenyu.admin.model.vo.PluginSnapshotVO;
 import org.apache.shenyu.admin.model.vo.PluginVO;
+import org.apache.shenyu.admin.service.configs.ConfigsImportContext;
 import org.apache.shenyu.common.dto.PluginData;
 
 import java.util.List;
@@ -149,9 +150,10 @@ public interface NamespacePluginService extends PageService<NamespacePluginQuery
      *
      * @param namespace  the namespace
      * @param pluginList the plugin data
+     * @param context the import context
      * @return config import result
      */
-    ConfigImportResult importData(String namespace, List<NamespacePluginDTO> pluginList);
+    ConfigImportResult importData(String namespace, List<NamespacePluginDTO> pluginList, ConfigsImportContext context);
     
     /**
      * List by namespace.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/ProxySelectorService.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.admin.model.query.ProxySelectorQuery;
 import org.apache.shenyu.admin.model.result.ConfigImportResult;
 import org.apache.shenyu.admin.model.vo.ProxySelectorVO;
+import org.apache.shenyu.admin.service.configs.ConfigsImportContext;
 import org.apache.shenyu.common.dto.ProxySelectorData;
 
 import java.util.List;
@@ -111,7 +112,8 @@ public interface ProxySelectorService {
      *
      * @param namespace namespace
      * @param proxySelectorList proxy selector data list
+     * @param context import context
      * @return config import result
      */
-    ConfigImportResult importData(String namespace, List<ProxySelectorData> proxySelectorList);
+    ConfigImportResult importData(String namespace, List<ProxySelectorData> proxySelectorList, ConfigsImportContext context);
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/RuleService.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.shenyu.admin.model.query.RuleQueryCondition;
 import org.apache.shenyu.admin.model.result.ConfigImportResult;
 import org.apache.shenyu.admin.model.vo.RuleVO;
+import org.apache.shenyu.admin.service.configs.ConfigsImportContext;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
@@ -188,9 +189,10 @@ default int createOrUpdate(final RuleDTO ruleDTO) {
      *
      * @param namespace namespace
      * @param ruleList rule list
+     * @param context import context
      * @return config import result
      */
-    ConfigImportResult importData(String namespace, List<RuleDTO> ruleList);
+    ConfigImportResult importData(String namespace, List<RuleDTO> ruleList, ConfigsImportContext context);
 
     /**
      * Enabled string by ids and namespaceId.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SelectorService.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.shenyu.admin.model.query.SelectorQueryCondition;
 import org.apache.shenyu.admin.model.result.ConfigImportResult;
 import org.apache.shenyu.admin.model.vo.SelectorVO;
+import org.apache.shenyu.admin.service.configs.ConfigsImportContext;
 import org.apache.shenyu.admin.utils.Assert;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
@@ -260,9 +261,10 @@ default int createOrUpdate(SelectorDTO selectorDTO) {
      *
      * @param namespace    the namespace
      * @param selectorList the plugin selector list
+     * @param context import context
      * @return config import result
      */
-    ConfigImportResult importData(String namespace, List<SelectorDTO> selectorList);
+    ConfigImportResult importData(String namespace, List<SelectorDTO> selectorList, ConfigsImportContext context);
 
     /**
      * Enabled by ids and namespaceId.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/AppAuthServiceTest.java
Patch:
@@ -258,7 +258,9 @@ public void testImportData() {
 
     @Test
     public void testSyncData() {
-        ArrayList<AppAuthDO> all = Lists.newArrayList(new AppAuthDO());
+        AppAuthDO authDO = new AppAuthDO();
+        authDO.setNamespaceId("test");
+        ArrayList<AppAuthDO> all = Lists.newArrayList(authDO);
         when(appAuthMapper.selectAll())
                 .thenReturn(null)
                 .thenReturn(Lists.newArrayList())

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/MetaDataServiceTest.java
Patch:
@@ -158,7 +158,7 @@ public void testEnabled() {
      */
     @Test
     public void testSyncDate() {
-        ArrayList<MetaDataDO> all = Lists.newArrayList(MetaDataDO.builder().build());
+        ArrayList<MetaDataDO> all = Lists.newArrayList(MetaDataDO.builder().namespaceId("test").build());
         when(metaDataMapper.findAll())
                 .thenReturn(null)
                 .thenReturn(Lists.newArrayList())
@@ -256,7 +256,7 @@ public void testImportData() {
 
         final List<MetaDataDTO> metaDataDTOList = getMetaDataDTOList();
         given(this.metaDataMapper.insert(any())).willReturn(1);
-        given(this.metaDataMapper.pathExisted(any())).willReturn(null);
+        given(this.metaDataMapper.pathExisted(any(), any())).willReturn(null);
 
         ConfigImportResult configImportResult = this.metaDataService.importData(metaDataDTOList);
 
@@ -324,7 +324,7 @@ private void testSaveOrUpdateMetaDataForUpdate() {
     private void testCreateOrUpdateForInsert() {
         when(metaDataDTO.getId()).thenReturn(null);
         when(metaDataMapper.insert(any())).thenReturn(1);
-        when(metaDataMapper.pathExisted(any())).thenReturn(null);
+        when(metaDataMapper.pathExisted(any(), any())).thenReturn(null);
         String msg = metaDataService.createOrUpdate(metaDataDTO);
         assertEquals(ShenyuResultMessage.CREATE_SUCCESS, msg);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/PluginServiceTest.java
Patch:
@@ -200,7 +200,7 @@ public void testImportData() {
         when(pluginMapper.nameExisted(pluginDTO.getName())).thenReturn(null);
         when(pluginMapper.insert(any())).thenReturn(1);
 
-        ConfigImportResult configImportResult = this.pluginService.importData(pluginDTOList);
+        ConfigImportResult configImportResult = this.pluginService.importData(pluginDTOList, null);
 
         assertNotNull(configImportResult);
         Assertions.assertEquals(configImportResult.getSuccessCount(), pluginDTOList.size());

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SyncDataServiceTest.java
Patch:
@@ -154,6 +154,7 @@ private SelectorData buildSelectorData() {
         selectorData.setPluginName("divide");
         selectorData.setSort(1);
         selectorData.setType(1);
+        selectorData.setNamespaceId("test");
         ConditionData conditionData = new ConditionData();
         conditionData.setParamType(ParamTypeEnum.POST.getName());
         conditionData.setOperator(OperatorEnum.EQ.getAlias());
@@ -179,6 +180,7 @@ private RuleData buildRuleData() {
         ruleData.setPluginName("divide");
         ruleData.setSelectorId("1");
         ruleData.setSort(1);
+        ruleData.setNamespaceId("test");
         ConditionData conditionData = new ConditionData();
         conditionData.setParamType(ParamTypeEnum.POST.getName());
         conditionData.setOperator(OperatorEnum.EQ.getAlias());

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/exception/AlertNoticeException.java
Patch:
@@ -21,6 +21,9 @@
  * alert notice send failed.
  */
 public class AlertNoticeException extends RuntimeException {
+
+    private static final long serialVersionUID = 1904557336581968426L;
+
     public AlertNoticeException(final String message) {
         super(message);
     }

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/model/AlertReceiverDTO.java
Patch:
@@ -26,7 +26,9 @@
  * AlertReceiver.
  */
 public class AlertReceiverDTO implements Serializable {
-    
+
+    private static final long serialVersionUID = 1790514185328089645L;
+
     /**
      * primary key id.
      */

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/AbstractAlertNotifyHandler.java
Patch:
@@ -27,6 +27,7 @@
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
+import java.util.Objects;
 import java.util.TimeZone;
 
 /**
@@ -67,7 +68,7 @@ protected String renderContent(final AlarmContent alert) {
     protected abstract String templateName();
     
     private static String removeBlankLine(final String value) {
-        if (value == null) {
+        if (Objects.isNull(value)) {
             return null;
         }
         return value.replaceAll("(?m)^\\s*$(\\n|\\r\\n)", "");

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/EmailAlertNotifyStrategy.java
Patch:
@@ -31,6 +31,7 @@
 import jakarta.mail.internet.MimeMessage;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Objects;
 
 /**
  * email alert notice.
@@ -80,7 +81,7 @@ private String buildAlertHtmlTemplate(final AlarmContent alert) {
         context.setVariable("content", alert.getContent());
         SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
         Date alertTime = alert.getDateCreated();
-        if (alertTime == null) {
+        if (Objects.isNull(alert)) {
             alertTime = new Date();
         }
         String alarmTime = simpleDateFormat.format(alertTime);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/collector/AbstractLogCollector.java
Patch:
@@ -114,8 +114,8 @@ private void consume() {
                 } else {
                     ThreadUtils.sleep(TimeUnit.MILLISECONDS, diffTimeMSForPush);
                 }
-            } catch (Exception e) {
-                LOG.error("DefaultLogCollector collect log error", e);
+            } catch (Throwable t) {
+                LOG.error("DefaultLogCollector collect log error", t);
                 ThreadUtils.sleep(TimeUnit.MILLISECONDS, diffTimeMSForPush);
             }
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AlertDispatchServiceImpl.java
Patch:
@@ -106,7 +106,7 @@ public boolean sendNoticeMsg(final AlertReceiverDTO receiver, final AlarmContent
     }
     
     @Override
-    public void destroy() throws Exception {
+    public void destroy() {
         if (this.workerExecutor != null) {
             workerExecutor.shutdownNow();
         }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/client/AbstractContextRefreshedEventListener.java
Patch:
@@ -155,9 +155,7 @@ public void onApplicationEvent(@NonNull final ContextRefreshedEvent event) {
         }
         if (isDiscoveryLocalMode) {
             List<String> namespaceIds = this.getNamespace();
-            namespaceIds.forEach(namespaceId -> {
-                publisher.publishEvent(buildURIRegisterDTO(context, beans, namespaceId));
-            });
+            namespaceIds.forEach(namespaceId -> publisher.publishEvent(buildURIRegisterDTO(context, beans, namespaceId)));
         }
         beans.forEach(this::handle);
         Map<String, Object> apiModules = context.getBeansWithAnnotation(ApiModule.class);

File: shenyu-plugin/shenyu-plugin-httpclient/src/test/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPluginTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
-import org.apache.shenyu.plugin.httpclient.config.DuplicateResponseHeaderProperties;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -69,7 +68,7 @@ public void setUp() {
         chain = mock(ShenyuPluginChain.class);
         when(chain.execute(any())).thenReturn(Mono.empty());
         HttpClient httpClient = HttpClient.create();
-        nettyHttpClientPlugin = new NettyHttpClientPlugin(httpClient, new DuplicateResponseHeaderProperties());
+        nettyHttpClientPlugin = new NettyHttpClientPlugin(httpClient);
     }
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -294,12 +294,14 @@ private void unbindDiscovery(final List<SelectorDO> selectors, final List<Plugin
             if (Objects.nonNull(discoveryDO)) {
                 final DiscoveryProcessor discoveryProcessor = discoveryProcessorHolder.chooseProcessor(discoveryDO.getType());
                 ProxySelectorDTO proxySelectorDTO = new ProxySelectorDTO();
+                proxySelectorDTO.setId(selector.getId());
                 proxySelectorDTO.setName(selector.getName());
-                proxySelectorDTO.setPluginName(pluginMap.getOrDefault(selector.getId(), ""));
+                proxySelectorDTO.setPluginName(pluginMap.getOrDefault(selector.getPluginId(), ""));
                 proxySelectorDTO.setNamespaceId(selector.getNamespaceId());
                 discoveryProcessor.removeProxySelector(DiscoveryTransfer.INSTANCE.mapToDTO(discoveryHandlerDO), proxySelectorDTO);
                 if (DiscoveryLevel.SELECTOR.getCode().equals(discoveryDO.getLevel())) {
                     discoveryProcessor.removeDiscovery(discoveryDO);
+                    discoveryProcessor.removeSelectorUpstream(proxySelectorDTO);
                     discoveryMapper.delete(discoveryDO.getId());
                 }
             }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/SpringCloudPlugin.java
Patch:
@@ -85,7 +85,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             return WebFluxResultUtils.result(exchange, error);
         }
         final String domain = upstream.buildDomain();
-        setDomain(URI.create(domain + shenyuContext.getRealUrl()), exchange);
+        setDomain(URI.create(domain + (StringUtils.isBlank(ruleHandle.getPath()) ? shenyuContext.getRealUrl() : ruleHandle.getPath())), exchange);
         //set time out.
         exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout());
         return chain.execute(exchange);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/PluginDO.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.dto.PluginDTO;
 import org.apache.shenyu.admin.model.vo.NamespacePluginVO;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import org.opengauss.util.Base64;
+import org.apache.shiro.codec.Base64;
 
 import java.sql.Timestamp;
 import java.util.Arrays;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/NamespacePluginService.java
Patch:
@@ -152,4 +152,6 @@ public interface NamespacePluginService extends PageService<NamespacePluginQuery
      * @return config import result
      */
     ConfigImportResult importData(List<PluginDTO> pluginList);
+    
+    List<PluginData> listByNamespace(String namespace);
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/config/ElasticSearchLogCollectConfig.java
Patch:
@@ -82,7 +82,7 @@ public String getIndexName() {
          * setIndexName.
          * @param indexName indexName
          */
-        public void setIndeName(final String indexName) {
+        public void setIndexName(final String indexName) {
             this.indexName = indexName;
         }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/BeanHolder.java
Patch:
@@ -54,7 +54,7 @@ public O get() {
      * @return boolean
      */
     public boolean isNull() {
-        return o == null;
+        return Objects.isNull(o);
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java
Patch:
@@ -223,6 +223,9 @@ private ReferenceConfig<GenericService> buildReference(final MetaData metaData,
             if (StringUtils.isNoneBlank(dubboParam.getCluster())) {
                 reference.setCluster(dubboParam.getCluster());
             }
+            if (StringUtils.isNoneBlank(dubboParam.getLoadbalance())) {
+                reference.getParameters().put(Constants.DUBBO_LOAD_BALANCE, dubboParam.getLoadbalance());
+            }
             // set dubbo sub protocol
             Optional.ofNullable(dubboParam.getProtocol()).ifPresent(reference::setProtocol);
             Optional.ofNullable(dubboParam.getTimeout()).ifPresent(reference::setTimeout);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/NamespacePluginRelMapper.java
Patch:
@@ -153,9 +153,9 @@ public interface NamespacePluginRelMapper extends ExistProvider {
      * @return {@linkplain List}
      */
     List<NamespacePluginVO> selectAllByNamespaceId(String namespaceId);
-
+  
     /**
-     * select all by namespaceId list.
+     * select all by namespaceIds.
      *
      * @param namespaceIds namespaceIds.
      * @return {@linkplain List}

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ConfigsExportImportControllerTest.java
Patch:
@@ -42,6 +42,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;
@@ -103,14 +104,15 @@ public void testImportConfigs() throws Exception {
         // mock import data
         List<ZipUtil.ZipItem> zipItemList = Lists.newArrayList();
 
-        when(this.configsService.configsImport(any())).thenReturn(
+        when(this.configsService.configsImport(anyString(), any())).thenReturn(
                 ShenyuAdminResult.success(ShenyuResultMessage.SUCCESS));
 
         // mock file
         MockMultipartFile file = new MockMultipartFile("file", "test.zip", MediaType.TEXT_PLAIN_VALUE, ZipUtil.zip(zipItemList));
         // Run the test
         final MockHttpServletResponse response = mockMvc.perform(multipart("/configs/import")
                         .file(file)
+                        .param("namespace", "test")
                         .accept(MediaType.APPLICATION_JSON))
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.SUCCESS)))
                 .andExpect(status().isOk())

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/PluginController.java
Patch:
@@ -51,7 +51,7 @@
 /**
  * this is plugin controller.
  */
-@RestApi("/plugin")
+@RestApi("/plugin-template")
 public class PluginController implements PagedController<PluginQueryCondition, PluginVO> {
 
     private final PluginService pluginService;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/NamespacePluginService.java
Patch:
@@ -140,9 +140,10 @@ public interface NamespacePluginService extends PageService<NamespacePluginQuery
     /**
      * active plugin snapshot.
      *
+     * @param namespaceId the namespaceId
      * @return plugin list
      */
-    List<PluginSnapshotVO> activePluginSnapshot();
+    List<PluginSnapshotVO> activePluginSnapshot(String namespaceId);
 
     /**
      * import plugin data.

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/AdminClient.java
Patch:
@@ -152,7 +152,7 @@ public List<PluginDTO> listPlugins() {
         int total;
         do {
             ResponseEntity<ShenYuResult> response = template.exchange(
-                    baseURL + "/plugin?currentPage={cur}&pageSize={page}",
+                    baseURL + "/plugin-template?currentPage={cur}&pageSize={page}",
                     HttpMethod.GET,
                     new HttpEntity<>(basicAuth),
                     ShenYuResult.class,
@@ -501,7 +501,7 @@ private ShenYuResult assertAndGet(final ResponseEntity<ShenYuResult> response, f
      * @param requestBody requestBody
      */
     public void changePluginStatus(final String id, final Map<String, String> requestBody) {
-        putResource("/namespacePlugin", id, NamespacePluginDTO.class, requestBody);
+        putResource("/namespace-plugin", id, NamespacePluginDTO.class, requestBody);
     }
 
     private <T extends ResourceDTO> T putResource(final String uri, final String id, final Class<T> valueType, final Map<String, String> requestBody) {
@@ -544,7 +544,7 @@ private void putResourceByJson(final String uri, final String id, final String j
      */
     public void syncPluginAll() {
         HttpEntity<SearchCondition> entity = new HttpEntity<>(basicAuth);
-        template.postForEntity(baseURL + "/plugin/syncPluginAll", entity, ShenYuResult.class);
+        template.postForEntity(baseURL + "/plugin-template/syncPluginAll", entity, ShenYuResult.class);
         log.warn("admin syncPluginAll");
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/HttpLongPollingSyncConfiguration.java
Patch:
@@ -36,7 +36,7 @@
 public class HttpLongPollingSyncConfiguration {
     
     private static final Logger LOG = LoggerFactory.getLogger(HttpLongPollingSyncConfiguration.class);
-    
+
     /**
      * httpLongPollingDataChangedListener.
      *

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollector.java
Patch:
@@ -162,7 +162,8 @@ public void onMessage(final String message, final Session session) {
         if (Objects.equals(message, DataEventTypeEnum.MYSELF.name())) {
             try {
                 ThreadLocalUtils.put(SESSION_KEY, session);
-                SpringBeanUtils.getInstance().getBean(SyncDataService.class).syncAll(DataEventTypeEnum.MYSELF);
+                String namespaceId = getNamespaceId(session);
+                SpringBeanUtils.getInstance().getBean(SyncDataService.class).syncAllByNamespaceId(DataEventTypeEnum.MYSELF, namespaceId);
             } finally {
                 ThreadLocalUtils.clear();
             }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -112,11 +112,11 @@ public void testOnMessage() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         SpringBeanUtils.getInstance().setApplicationContext(context);
         when(SpringBeanUtils.getInstance().getBean(SyncDataService.class)).thenReturn(syncDataService);
-        when(syncDataService.syncAll(DataEventTypeEnum.MYSELF)).thenReturn(true);
+        when(syncDataService.syncAllByNamespaceId(DataEventTypeEnum.MYSELF, Constants.SYS_DEFAULT_NAMESPACE_ID)).thenReturn(true);
         websocketCollector.onOpen(session);
         websocketCollector.onMessage(DataEventTypeEnum.MYSELF.name(), session);
         assertEquals(1L, getSessionSetSize());
-        verify(syncDataService, times(1)).syncAll(DataEventTypeEnum.MYSELF);
+        verify(syncDataService, times(1)).syncAllByNamespaceId(DataEventTypeEnum.MYSELF, Constants.SYS_DEFAULT_NAMESPACE_ID);
         doNothing().when(loggerSpy).warn(anyString(), anyString());
         websocketCollector.onClose(session);
     }

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/main/java/org/apache/shenyu/plugin/sync/data/websocket/client/ShenyuWebsocketClient.java
Patch:
@@ -117,7 +117,7 @@ public ShenyuWebsocketClient(final URI serverUri, final Map<String, String> head
                                  final String namespaceId) {
         super(serverUri, headers);
         this.namespaceId = namespaceId;
-        LOG.info("shenyu bootstrap websocket namespaceId:{}", namespaceId);
+        LOG.info("shenyu bootstrap websocket namespaceId: {}", namespaceId);
         this.addHeader(Constants.SHENYU_NAMESPACE_ID, namespaceId);
         this.websocketDataHandler = new WebsocketDataHandler(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers, proxySelectorDataSubscribers, discoveryUpstreamDataSubscribers);
         this.timer = WheelTimerFactory.getSharedTimer();

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/strategy/MatchStrategy.java
Patch:
@@ -27,6 +27,7 @@
  * This is condition strategy.
  */
 @SPI
+@FunctionalInterface
 public interface MatchStrategy {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.springboot.starter.client.springmvc;
 
+import java.util.Optional;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.client.auto.config.ClientRegisterConfiguration;
 import org.apache.shenyu.client.core.constant.ShenyuClientConstants;
@@ -66,7 +67,7 @@ public SpringMvcClientEventListener springHttpClientEventListener(final ShenyuCl
                                                                       final ShenyuClientRegisterRepository shenyuClientRegisterRepository,
                                                                       final Environment env) {
         ClientPropertiesConfig clientPropertiesConfig = clientConfig.getClient().get(RpcTypeEnum.HTTP.getName());
-        Properties props = clientPropertiesConfig == null ? null : clientPropertiesConfig.getProps();
+        Properties props = Optional.ofNullable(clientPropertiesConfig).map(ClientPropertiesConfig::getProps).orElse(null);
         String applicationName = env.getProperty("spring.application.name");
         String discoveryMode = env.getProperty("shenyu.discovery.type", ShenyuClientConstants.DISCOVERY_LOCAL_MODE);
         if (props != null) {

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/main/java/org/apache/shenyu/plugin/sync/data/websocket/WebsocketSyncDataService.java
Patch:
@@ -156,7 +156,6 @@ private void masterCheck() {
                 }
             }
         }
-//        String masterUrl = "";
         Iterator<ShenyuWebsocketClient> iterator = clients.iterator();
         while (iterator.hasNext()) {
             ShenyuWebsocketClient websocketClient = iterator.next();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/scale/scaler/KubernetesScaler.java
Patch:
@@ -28,6 +28,7 @@
 import org.springframework.stereotype.Component;
 
 import java.util.Objects;
+import java.util.Optional;
 
 @Component
 public class KubernetesScaler {
@@ -39,8 +40,8 @@ public class KubernetesScaler {
 
     private final DeploymentProperties deploymentProperties;
 
-    public KubernetesScaler(final AppsV1Api appsV1Api, final DeploymentProperties deploymentProperties) {
-        this.appsV1Api = appsV1Api;
+    public KubernetesScaler(final Optional<AppsV1Api> appsV1Api, final DeploymentProperties deploymentProperties) {
+        this.appsV1Api = appsV1Api.orElse(null);
         this.deploymentProperties = deploymentProperties;
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java
Patch:
@@ -106,9 +106,9 @@ public void testBuildHandle() {
         shenyuClientRegisterSpringCloudService = spy(shenyuClientRegisterSpringCloudService);
         
         final String returnStr = "{serviceId:'test1',gray:false,divideUpstreams:[{weight:50,warmup:10,protocol:"
-                + "'http://',upstreamHost:'localhost',upstreamUrl:'localhost:8090',status:'true',timestamp:1637909490935}]}";
+                + "'http://',upstreamHost:'localhost',upstreamUrl:'localhost:8090',status:'true',timestamp:1637909490935,\"gray\":false}]}";
         final String expected = "{\"serviceId\":\"test1\",\"gray\":false,\"divideUpstreams\":[{\"weight\":50,\"warmup\":10,\"protocol\":"
-                + "\"http://\",\"upstreamHost\":\"localhost\",\"upstreamUrl\":\"localhost:8090\",\"status\":true,\"timestamp\":1637909490935}]}";
+                + "\"http://\",\"upstreamHost\":\"localhost\",\"upstreamUrl\":\"localhost:8090\",\"status\":true,\"timestamp\":1637909490935,\"gray\":false}]}";
         final URIRegisterDTO dto1 = URIRegisterDTO.builder().appName("test2")
                 .rpcType(RpcTypeEnum.SPRING_CLOUD.getName())
                 .host(HOST).port(8090).build();

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/entity/UpstreamTest.java
Patch:
@@ -33,6 +33,7 @@ public void upstreamTest() {
                 .timestamp(1)
                 .warmup(1)
                 .version("version")
+                .gray(false)
                 .weight(1)
                 .status(true)
                 .build();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/ClusterJdbcConfiguration.java
Patch:
@@ -71,6 +71,7 @@ public DefaultLockRepository defaultLockRepository(final DataSource dataSource,
         }
         DefaultLockRepository defaultLockRepository = new DefaultLockRepository(dataSource, fullPath);
         defaultLockRepository.setPrefix("SHENYU_");
+        // set lock ttl
         long millis = TimeUnit.SECONDS.toMillis(clusterProperties.getLockTtl());
         defaultLockRepository.setTimeToLive(Long.valueOf(millis).intValue());
         return defaultLockRepository;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/ClusterProperties.java
Patch:
@@ -71,7 +71,7 @@ public class ClusterProperties {
     /**
      * cluster master lock time to live.
      */
-    private Long lockTtl = 15L;
+    private Long lockTtl = 30L;
     
     /**
      * Gets the value of enabled.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DataPermissionServiceImpl.java
Patch:
@@ -275,7 +275,7 @@ public void onSelectorCreated(final SelectorCreatedEvent event) {
         try {
             existed = dataPermissionMapper.existed(JwtUtils.getUserInfo().getUserId());
         } catch (Exception e) {
-            LOG.error("check user existed error", e);
+            LOG.error("check user existed error");
             existed = false;
         }
         if (Boolean.TRUE.equals(existed)) {
@@ -314,7 +314,7 @@ public void onRuleCreated(final RuleCreatedEvent event) {
         try {
             existed = dataPermissionMapper.existed(JwtUtils.getUserInfo().getUserId());
         } catch (Exception e) {
-            LOG.error("check user existed error", e);
+            LOG.error("check user existed error");
             existed = false;
         }
         if (Boolean.TRUE.equals(existed)) {

File: shenyu-admin-listener/shenyu-admin-listener-api/src/main/java/org/apache/shenyu/admin/listener/AbstractNodeDataChangedListener.java
Patch:
@@ -274,7 +274,7 @@ public void onProxySelectorChanged(final List<ProxySelectorData> changed, final
         }
         final String namespaceId = changed.stream().map(value -> StringUtils.defaultString(value.getNamespaceId(), SYS_DEFAULT_NAMESPACE_ID)).findFirst().get();
         final String configKeyPrefix = namespaceId + DefaultNodeConstants.JOIN_POINT + changeData.getProxySelectorDataId() + DefaultNodeConstants.JOIN_POINT;
-        this.onCommonMultiChanged(changed, eventType, configKeyPrefix, ProxySelectorData::getPluginName, ProxySelectorData::getName);
+        this.onCommonMultiChanged(changed, eventType, configKeyPrefix, ProxySelectorData::getPluginName, ProxySelectorData::getId);
         LOG.debug("[DataChangedListener] ProxySelectorChanged {}", changeData.getProxySelectorDataId());
     }
 
@@ -285,7 +285,7 @@ public void onDiscoveryUpstreamChanged(final List<DiscoverySyncData> changed, fi
         }
         final String namespaceId = changed.stream().map(value -> StringUtils.defaultString(value.getNamespaceId(), SYS_DEFAULT_NAMESPACE_ID)).findFirst().get();
         final String configKeyPrefix = namespaceId + DefaultNodeConstants.JOIN_POINT + changeData.getDiscoveryDataId() + DefaultNodeConstants.JOIN_POINT;
-        this.onCommonMultiChanged(changed, eventType, configKeyPrefix, DiscoverySyncData::getPluginName, DiscoverySyncData::getSelectorName);
+        this.onCommonMultiChanged(changed, eventType, configKeyPrefix, DiscoverySyncData::getPluginName, DiscoverySyncData::getSelectorId);
         LOG.debug("[DataChangedListener] DiscoveryUpstreamChanged {}", changeData.getDiscoveryDataId());
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.shenyu.admin.model.entity.RuleConditionDO;
 import org.apache.shenyu.admin.model.entity.RuleDO;
 import org.apache.shenyu.admin.model.entity.SelectorDO;
+import org.apache.shenyu.admin.model.event.rule.RuleCreatedEvent;
 import org.apache.shenyu.admin.model.event.selector.BatchSelectorDeletedEvent;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageResultUtils;
@@ -125,6 +126,7 @@ public String registerDefault(final RuleDTO ruleDTO) {
             addCondition(ruleDO, ruleDTO.getRuleConditions());
         }
         ruleEventPublisher.onRegister(ruleDO, ruleDTO.getRuleConditions());
+        ruleEventPublisher.publish(new RuleCreatedEvent(ruleDO, ruleDTO.getNamespaceId()));
         return ruleDO.getId();
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/NamespacePluginServiceImpl.java
Patch:
@@ -130,12 +130,12 @@ public List<PluginData> listAll(final String namespaceId) {
     
     @Override
     public List<PluginData> listAll() {
-        return ListUtil.map(namespacePluginRelMapper.selectAllByNamespaceId(), PluginTransfer.INSTANCE::mapToData);
+        return ListUtil.map(namespacePluginRelMapper.selectAll(), PluginTransfer.INSTANCE::mapToData);
     }
     
     @Override
     public List<NamespacePluginVO> listByNamespaceId(final String namespaceId) {
-        return namespacePluginRelMapper.selectByNamespaceId(namespaceId);
+        return namespacePluginRelMapper.selectAllByNamespaceId(namespaceId);
     }
 
     @Override

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/HttpLongPollingSyncConfiguration.java
Patch:
@@ -30,7 +30,6 @@
  */
 @Configuration
 @EnableConfigurationProperties(HttpSyncProperties.class)
-@ConditionalOnProperty(name = "shenyu.sync.http.enabled", havingValue = "true")
 public class HttpLongPollingSyncConfiguration {
 
     /**
@@ -40,6 +39,7 @@ public class HttpLongPollingSyncConfiguration {
      * @return {@link HttpLongPollingDataChangedListener}
      */
     @Bean
+    @ConditionalOnProperty(name = "shenyu.sync.http.enabled", havingValue = "true")
     @ConditionalOnMissingBean(HttpLongPollingDataChangedListener.class)
     public HttpLongPollingDataChangedListener httpLongPollingDataChangedListener(final HttpSyncProperties httpSyncProperties) {
         return new HttpLongPollingDataChangedListener(httpSyncProperties);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractContextPathRegisterService.java
Patch:
@@ -41,6 +41,7 @@ public abstract class AbstractContextPathRegisterService extends AbstractShenyuC
 
     @Override
     public void registerContextPath(final MetaDataRegisterDTO dto) {
+        this.checkNamespacePluginRel(dto.getNamespaceId(), PluginEnum.CONTEXT_PATH.getName());
         String name = PluginEnum.CONTEXT_PATH.getName();
         String contextPath = PathUtils.decoratorContextPath(dto.getContextPath());
         String key = LOCK_KEY_PREFIX + contextPath;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/exception/ExceptionHandlers.java
Patch:
@@ -123,11 +123,11 @@ protected ShenyuAdminResult handleConstraintViolationException(final ConstraintV
     
     @ExceptionHandler(ShenyuException.class)
     protected ShenyuAdminResult handleShenyuException(final ShenyuException exception) {
+        LOG.error(exception.getMessage(), exception);
         String message = Objects.isNull(exception.getCause()) ? null : exception.getCause().getMessage();
         if (!StringUtils.hasText(message)) {
             message = exception.getMessage();
         }
-        LOG.error(exception.getMessage());
         return ShenyuAdminResult.error(message);
     }
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/BatchChangedEvent.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.model.event;
 
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Collection;
 import java.util.Objects;
@@ -64,6 +65,6 @@ public String afterSnapshot() {
     
     @Override
     public String eventName() {
-        return "plugin";
+        return Constants.EVENT_NAME_PLUGIN;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/dict/BatchDictChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.ShenyuDictDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Collection;
 import java.util.stream.Collectors;
@@ -54,6 +55,6 @@ public String buildContext() {
     
     @Override
     public String eventName() {
-        return "dict";
+        return Constants.EVENT_NAME_DICT;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/dict/DictChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.ShenyuDictDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -84,6 +85,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "dict";
+        return Constants.EVENT_NAME_DICT;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/handle/BatchPluginHandleChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.PluginHandleDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Collection;
 import java.util.stream.Collectors;
@@ -54,6 +55,6 @@ public String buildContext() {
     
     @Override
     public String eventName() {
-        return "plugin-handle";
+        return Constants.EVENT_NAME_PLUGIN_HANDLE;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/handle/PluginHandleChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.PluginHandleDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -80,6 +81,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "plugin-handle";
+        return Constants.EVENT_NAME_PLUGIN_HANDLE;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/metadata/BatchMetaDataChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.MetaDataDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Collection;
 import java.util.stream.Collectors;
@@ -61,6 +62,6 @@ public String buildContext() {
 
     @Override
     public String eventName() {
-        return "meta data";
+        return Constants.EVENT_NAME_META_DATA;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/metadata/MetaDataChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.MetaDataDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -95,6 +96,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "meta data";
+        return Constants.EVENT_NAME_META_DATA;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/plugin/BatchNamespacePluginChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
 import org.apache.shenyu.admin.model.vo.NamespacePluginVO;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Collection;
 import java.util.stream.Collectors;
@@ -58,6 +59,6 @@ public String buildContext() {
 
     @Override
     public String eventName() {
-        return "namespacePlugin";
+        return Constants.EVENT_NAME_NAMESPACE_PLUGIN;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/plugin/BatchPluginChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Collection;
 import java.util.stream.Collectors;
@@ -54,6 +55,6 @@ public String buildContext() {
     
     @Override
     public String eventName() {
-        return "plugin";
+        return Constants.EVENT_NAME_PLUGIN;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/plugin/NamespacePluginChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
 import org.apache.shenyu.admin.model.vo.NamespacePluginVO;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -75,6 +76,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "namespacePlugin";
+        return Constants.EVENT_NAME_NAMESPACE_PLUGIN;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/plugin/PluginChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -81,6 +82,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "plugin";
+        return Constants.EVENT_NAME_PLUGIN;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/resource/ResourceChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.ResourceDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -84,6 +85,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "selector";
+        return Constants.EVENT_NAME_RESOURCE;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/role/RoleChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.RoleDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -72,6 +73,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "role";
+        return Constants.EVENT_NAME_ROLE;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/rule/RuleChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.RuleDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -84,6 +85,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "selector";
+        return Constants.EVENT_NAME_RULE;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/selector/SelectorChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.SelectorDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -87,6 +88,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "selector";
+        return Constants.EVENT_NAME_SELECTOR;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/user/UserChangedEvent.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.model.entity.DashboardUserDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
+import org.apache.shenyu.common.constant.Constants;
 
 import java.util.Objects;
 
@@ -88,6 +89,6 @@ private String contrast() {
     
     @Override
     public String eventName() {
-        return "user";
+        return Constants.EVENT_NAME_USER;
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/PermissionService.java
Patch:
@@ -29,10 +29,10 @@ public interface PermissionService {
     /**
      * get user permission menu by token.
      *
-     * @param token logon ack token.
+     * @param namespaceId namespace id.
      * @return {@linkplain PermissionMenuVO}
      */
-    PermissionMenuVO getPermissionMenu(String token);
+    PermissionMenuVO getPermissionMenu(String namespaceId);
 
     /**
      * get AuthPerm By UserName.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.common.utils.JsonUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.InitializingBean;
@@ -198,7 +197,6 @@ public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum
         if (CollectionUtils.isEmpty(changed)) {
             return;
         }
-        LOG.info("onRuleChanged, changed:{}, eventType:{}", JsonUtils.toJson(changed), JsonUtils.toJson(eventType));
         String namespaceId = changed.stream().map(value -> StringUtils.defaultString(value.getNamespaceId(), SYS_DEFAULT_NAMESPACE_ID)).findFirst().get();
         this.updateRuleCache(namespaceId);
         this.afterRuleChanged(changed, eventType, namespaceId);
@@ -303,7 +301,6 @@ protected <T> void updateCache(final ConfigGroupEnum group, final List<T> data,
         ConfigDataCache newVal = new ConfigDataCache(configDataCacheKey, json, DigestUtils.md5Hex(json), System.currentTimeMillis(), namespaceId);
         ConfigDataCache oldVal = CACHE.put(newVal.getGroup(), newVal);
         LOG.info("update config cache[{}], old: {}, updated: {}", group, oldVal, newVal);
-        LOG.info("update config json: {}", json);
     }
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEventDispatcher.java
Patch:
@@ -78,9 +78,7 @@ public void onApplicationEvent(@NotNull final DataChangedEvent event) {
                 LOG.info("received DataChangedEvent, not master, pass");
                 return;
             }
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("received DataChangedEvent, dispatching, event:{}", JsonUtils.toJson(event));
-            }
+            LOG.info("received DataChangedEvent, dispatching, event:{}", JsonUtils.toJson(event));
             switch (event.getGroupKey()) {
                 case APP_AUTH:
                     listener.onAppAuthChanged((List<AppAuthData>) event.getSource(), event.getEventType());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -70,7 +70,6 @@
 import org.apache.shenyu.common.enums.MatchModeEnum;
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
 import org.apache.shenyu.common.utils.ContextPathUtils;
-import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -166,7 +165,6 @@ public List<SelectorVO> searchByCondition(final SelectorQueryCondition condition
     public String registerDefault(final SelectorDTO selectorDTO) {
         SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO);
         if (StringUtils.isEmpty(selectorDTO.getId())) {
-            LOG.info("register default selector :{}", GsonUtils.getInstance().toJson(selectorDTO));
             selectorMapper.insertSelective(selectorDO);
             createCondition(selectorDO.getId(), selectorDTO.getSelectorConditions());
         }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/CommonUpstreamUtilsTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.common.dto.convert.selector.DubboUpstream;
 import org.apache.shenyu.common.dto.convert.selector.GrpcUpstream;
 import org.apache.shenyu.common.dto.convert.selector.CommonUpstream;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -57,7 +58,7 @@ public void buildDefaultDivideUpstreamWithPort() {
 
     @Test
     public void buildDivideUpstream() {
-        DivideUpstream divideUpstream = CommonUpstreamUtils.buildDivideUpstream("http", HOST, PORT, SYS_DEFAULT_NAMESPACE_ID);
+        DivideUpstream divideUpstream = CommonUpstreamUtils.buildDivideUpstream("http", HOST, PORT, SYS_DEFAULT_NAMESPACE_ID, EventType.REGISTER);
         Assert.assertNotNull(divideUpstream);
         Assert.assertEquals(HOST + ":" + PORT, divideUpstream.getUpstreamUrl());
         Assert.assertEquals("http", divideUpstream.getProtocol());
@@ -114,7 +115,7 @@ public void buildAliveGrpcUpstream() {
     @Test
     public void convertCommonUpstreamList() {
         List<DivideUpstream> existDivideUpstreams = new ArrayList<>();
-        DivideUpstream divideUpstream = CommonUpstreamUtils.buildDivideUpstream("http", HOST, PORT, SYS_DEFAULT_NAMESPACE_ID);
+        DivideUpstream divideUpstream = CommonUpstreamUtils.buildDivideUpstream("http", HOST, PORT, SYS_DEFAULT_NAMESPACE_ID, EventType.REGISTER);
         existDivideUpstreams.add(divideUpstream);
 
         List<CommonUpstream> commonUpstreams = CommonUpstreamUtils.convertCommonUpstreamList(existDivideUpstreams);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/HttpLongPollingSyncConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.admin.config.properties.HttpSyncProperties;
 import org.apache.shenyu.admin.listener.http.HttpLongPollingDataChangedListener;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -29,6 +30,7 @@
  */
 @Configuration
 @EnableConfigurationProperties(HttpSyncProperties.class)
+@ConditionalOnProperty(name = "shenyu.sync.http.enabled", havingValue = "true")
 public class HttpLongPollingSyncConfiguration {
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ConfigController.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.dto.ConfigData;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -45,6 +46,7 @@
 @ResponseBody
 @RequestMapping("/configs")
 @RestController
+@ConditionalOnBean(HttpLongPollingDataChangedListener.class)
 public class ConfigController {
 
     private final HttpLongPollingDataChangedListener longPollingListener;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/NamespacePluginController.java
Patch:
@@ -141,7 +141,7 @@ public ShenyuAdminResult updatePlugin(@Existed(message = "namespace plugin relat
      */
     @PutMapping("/{namespaceId}/{pluginId}")
     @RequiresPermissions("system:plugin:edit")
-    public ShenyuAdminResult addPlugin(@Existed(message = "namespace is not exist", provider = NamespaceMapper.class)
+    public ShenyuAdminResult generateNamespacePlugin(@Existed(message = "namespace is not exist", provider = NamespaceMapper.class)
                                           @PathVariable("namespaceId") final String namespaceId,
                                        @Existed(message = "plugin is not exist", provider = PluginMapper.class)
                                        @PathVariable("pluginId") final String pluginId) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/NamespacePluginServiceImpl.java
Patch:
@@ -80,7 +80,7 @@ public NamespacePluginVO findById(final String id) {
     @Override
     public NamespacePluginVO create(final String namespaceId, final String pluginId) {
         NamespacePluginVO existNamespacePluginVO = namespacePluginRelMapper.selectByPluginIdAndNamespaceId(pluginId, namespaceId);
-        if (!Objects.isNull(existNamespacePluginVO)) {
+        if (Objects.nonNull(existNamespacePluginVO)) {
             throw new ShenyuAdminException(AdminConstants.NAMESPACE_PLUGIN_EXIST);
         }
         PluginDO pluginDO = pluginMapper.selectById(pluginId);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -272,7 +272,6 @@ public int updateSelective(final SelectorDO selectorDO) {
     @Override
     @Transactional(rollbackFor = Exception.class)
     public int deleteByNamespaceId(final List<String> ids, final String namespaceId) {
-        //todo:[Namespace] To be renovated
         final List<SelectorDO> selectors = selectorMapper.selectByIdSet(new TreeSet<>(ids));
         List<PluginDO> pluginDOS = pluginMapper.selectByIds(ListUtil.map(selectors, SelectorDO::getPluginId));
         unbindDiscovery(selectors, pluginDOS);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SyncDataServiceImpl.java
Patch:
@@ -103,7 +103,6 @@ public SyncDataServiceImpl(final AppAuthService appAuthService,
         this.discoveryService = discoveryService;
     }
 
-    //todo:[Namespace] Synchronize based on namespaceId
     @Override
     public boolean syncAll(final DataEventTypeEnum type) {
         appAuthService.syncData();

File: shenyu-admin-listener/shenyu-admin-listener-nacos/src/main/java/org/apache/shenyu/admin/config/NacosSyncConfiguration.java
Patch:
@@ -72,6 +72,9 @@ public ConfigService nacosConfigService(final NacosProperties nacosProp) throws
             if (StringUtils.isNotBlank(nacosProp.getPassword())) {
                 properties.put(PropertyKeyConst.PASSWORD, nacosProp.getPassword());
             }
+            if (StringUtils.isNotBlank(nacosProp.getContextPath())) {
+                properties.put(PropertyKeyConst.CONTEXT_PATH, nacosProp.getContextPath());
+            }
         }
         return NacosFactory.createConfigService(properties);
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-nacos/src/main/java/org/apache/shenyu/springboot/starter/sync/data/nacos/NacosSyncDataConfiguration.java
Patch:
@@ -103,6 +103,9 @@ public ConfigService nacosConfigService(final NacosConfig nacosConfig) throws Ex
             if (nacosConfig.getPassword() != null) {
                 properties.put(PropertyKeyConst.PASSWORD, nacosConfig.getPassword());
             }
+            if (StringUtils.isNotBlank(nacosConfig.getContextPath())) {
+                properties.put(PropertyKeyConst.CONTEXT_PATH, nacosConfig.getContextPath());
+            }
         }
         return NacosFactory.createConfigService(properties);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/executor/RegisterServerConsumerExecutor.java
Patch:
@@ -63,14 +63,15 @@ public void run() {
     private boolean isValidData(final Object data) {
         if (data instanceof URIRegisterDTO) {
             URIRegisterDTO uriRegisterDTO = (URIRegisterDTO) data;
-            return StringUtils.isNoneBlank(uriRegisterDTO.getContextPath(), uriRegisterDTO.getRpcType());
+            return StringUtils.isNoneBlank(uriRegisterDTO.getContextPath(), uriRegisterDTO.getRpcType(), uriRegisterDTO.getNamespaceId());
         }
         if (data instanceof MetaDataRegisterDTO) {
             MetaDataRegisterDTO metaDataRegisterDTO = (MetaDataRegisterDTO) data;
             return StringUtils.isNoneBlank(metaDataRegisterDTO.getAppName(),
                     metaDataRegisterDTO.getPath(),
                     metaDataRegisterDTO.getRuleName(),
-                    metaDataRegisterDTO.getRpcType());
+                    metaDataRegisterDTO.getRpcType(),
+                    metaDataRegisterDTO.getNamespaceId());
         }
         return true;
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/MetaDataMapper.java
Patch:
@@ -45,10 +45,9 @@ public interface MetaDataMapper extends ExistProvider {
      * Select meta data do by id and namespaceId.
      *
      * @param id the id
-     * @param namespaceId namespaceId
      * @return the meta data do
      */
-    MetaDataDO selectByIdAndNamespaceId(String id, String namespaceId);
+    MetaDataDO selectById(String id);
     
     /**
      * Select a list of MetaDataDOs by idList and namespaceId.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/RuleMapper.java
Patch:
@@ -44,13 +44,12 @@ public interface RuleMapper extends ExistProvider {
     Boolean existed(@Param("id") Serializable id);
 
     /**
-     * select rule by id and namespaceId.
+     * select rule by id.
      *
      * @param id primary key.
-     * @param namespaceId namespaceId.
      * @return {@linkplain RuleDO}
      */
-    RuleDO selectByIdAndNamespaceId(String id, String namespaceId);
+    RuleDO selectById(String id);
 
     /**
      * select rule by query.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/MetaDataService.java
Patch:
@@ -61,13 +61,12 @@ public interface MetaDataService {
     int deleteByIdsAndNamespaceId(List<String> ids, String namespaceId);
 
     /**
-     * Find meta data vo by id and namespaceId.
+     * Find meta data vo by id.
      *
      * @param id the id
-     * @param namespaceId namespaceId
      * @return the meta data vo
      */
-    MetaDataVO findByIdAndNamespaceId(String id, String namespaceId);
+    MetaDataVO findById(String id);
 
     /**
      * List by page common pager.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/RuleService.java
Patch:
@@ -100,10 +100,9 @@ default int createOrUpdate(final RuleDTO ruleDTO) {
      * find rule by id and namespaceId.
      *
      * @param id primary key.
-     * @param namespaceId namespaceId.
      * @return {@linkplain RuleVO}
      */
-    RuleVO findByIdAndNamespaceId(String id, String namespaceId);
+    RuleVO findById(String id);
 
     /**
      * find page of rule by query.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SelectorService.java
Patch:
@@ -117,10 +117,9 @@ default int createOrUpdate(SelectorDTO selectorDTO) {
      * find selector by id and namespaceId.
      *
      * @param id          primary key.
-     * @param namespaceId namespaceId.
      * @return {@linkplain SelectorVO}
      */
-    SelectorVO findByIdAndNamespaceId(String id, String namespaceId);
+    SelectorVO findById(String id);
 
     /**
      * find selector by name and namespaceId.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MetaDataControllerTest.java
Patch:
@@ -145,8 +145,8 @@ public void testFindAllGroup() throws Exception {
 
     @Test
     public void testEditor() throws Exception {
-        given(this.metaDataService.findByIdAndNamespaceId("1", SYS_DEFAULT_NAMESPACE_ID)).willReturn(metaDataVO);
-        this.mockMvc.perform(MockMvcRequestBuilders.get("/meta-data/{id}/{namespaceId}", "1", SYS_DEFAULT_NAMESPACE_ID))
+        given(this.metaDataService.findById("1")).willReturn(metaDataVO);
+        this.mockMvc.perform(MockMvcRequestBuilders.get("/meta-data/{id}", "1"))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.DETAIL_SUCCESS)))
                 .andExpect(jsonPath("$.data.appName", is(metaDataVO.getAppName())))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/RuleControllerTest.java
Patch:
@@ -126,8 +126,8 @@ public void testQueryRules() throws Exception {
 
     @Test
     public void testDetailRule() throws Exception {
-        given(this.ruleService.findByIdAndNamespaceId("666", SYS_DEFAULT_NAMESPACE_ID)).willReturn(ruleVO);
-        this.mockMvc.perform(MockMvcRequestBuilders.get("/rule/{id}/{namespaceId}", "666", SYS_DEFAULT_NAMESPACE_ID))
+        given(this.ruleService.findById("666")).willReturn(ruleVO);
+        this.mockMvc.perform(MockMvcRequestBuilders.get("/rule/{id}", "666"))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.DETAIL_SUCCESS)))
                 .andExpect(jsonPath("$.data.id", is(ruleVO.getId())))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SelectorControllerTest.java
Patch:
@@ -201,9 +201,9 @@ public void detailSelector() throws Exception {
 
         when(SpringBeanUtils.getInstance().getBean(NamespaceMapper.class)).thenReturn(namespaceMapper);
         when(namespaceMapper.existed(SYS_DEFAULT_NAMESPACE_ID)).thenReturn(true);
-        given(this.selectorService.findByIdAndNamespaceId("1", SYS_DEFAULT_NAMESPACE_ID)).willReturn(selectorVO);
+        given(this.selectorService.findById("1")).willReturn(selectorVO);
 
-        this.mockMvc.perform(MockMvcRequestBuilders.get("/selector/{id}/{namespaceId}", "1", SYS_DEFAULT_NAMESPACE_ID))
+        this.mockMvc.perform(MockMvcRequestBuilders.get("/selector/{id}/", "1"))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.DETAIL_SUCCESS)))
                 .andExpect(jsonPath("$.data.id", is(selectorVO.getId())))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/disruptor/subscriber/URIRegisterExecutorSubscriberTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.disruptor.subscriber;
     
 import org.apache.shenyu.admin.service.register.ShenyuClientRegisterService;
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
@@ -67,11 +68,11 @@ public void testExecutor() {
         uriRegisterExecutorSubscriber.executor(list);
         assertTrue(list.isEmpty());
         list.add(URIRegisterDTO.builder().rpcType(RpcTypeEnum.HTTP.getName())
-                .appName("test").contextPath("/test").build());
+                .appName("test").contextPath("/test").namespaceId(Constants.SYS_DEFAULT_NAMESPACE_ID).build());
         ShenyuClientRegisterService service = mock(ShenyuClientRegisterService.class);
         when(shenyuClientRegisterService.get(any())).thenReturn(service);
         uriRegisterExecutorSubscriber.executor(list);
-        verify(service).registerURI(any(), any());
+        verify(service).registerURI(any(), any(), any());
     }
     
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MetaDataMapperTest.java
Patch:
@@ -62,7 +62,7 @@ public void selectById() {
         int count = metaDataMapper.insert(metaDataDO);
         assertThat(count, comparesEqualTo(1));
         String id = metaDataDO.getId();
-        MetaDataDO result = metaDataMapper.selectByIdAndNamespaceId(id, SYS_DEFAULT_NAMESPACE_ID);
+        MetaDataDO result = metaDataMapper.selectById(id);
         assertThat(result.getId(), comparesEqualTo(id));
     }
 
@@ -176,7 +176,7 @@ public void update() {
         metaDataDO.setAppName("testAppName_update");
         metaDataMapper.update(metaDataDO);
 
-        MetaDataDO result = metaDataMapper.selectByIdAndNamespaceId(metaDataDO.getId(), SYS_DEFAULT_NAMESPACE_ID);
+        MetaDataDO result = metaDataMapper.selectById(metaDataDO.getId());
         assertThat(result.getAppName(), comparesEqualTo("testAppName_update"));
     }
 
@@ -189,7 +189,7 @@ public void updateEnable() {
         metaDataDO.setEnabled(true);
         metaDataMapper.updateEnable(metaDataDO);
 
-        MetaDataDO result = metaDataMapper.selectByIdAndNamespaceId(metaDataDO.getId(), SYS_DEFAULT_NAMESPACE_ID);
+        MetaDataDO result = metaDataMapper.selectById(metaDataDO.getId());
         assertTrue(result.getEnabled());
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorMapperTest.java
Patch:
@@ -51,7 +51,7 @@ public void testSelectById() {
         int insert = selectorMapper.insert(selectorDO);
         assertEquals(1, insert);
 
-        SelectorDO selector = selectorMapper.selectByIdAndNamespaceId(selectorDO.getId(), SYS_DEFAULT_NAMESPACE_ID);
+        SelectorDO selector = selectorMapper.selectById(selectorDO.getId());
         assertNotNull(selector);
         assertEquals(selectorDO.getId(), selector.getId());
         assertEquals(selectorDO.getContinued(), selector.getContinued());

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DataPermissionServiceTest.java
Patch:
@@ -144,7 +144,7 @@ public void assertListRulesByPage() {
 
     @Test
     public void assertCreateRule() {
-        given(ruleMapper.selectByIdAndNamespaceId("1", SYS_DEFAULT_NAMESPACE_ID)).willReturn(RuleDO.buildRuleDO(ruleDTO));
+        given(ruleMapper.selectById("1")).willReturn(RuleDO.buildRuleDO(ruleDTO));
         given(dataPermissionMapper.insertSelective(any(DataPermissionDO.class))).willReturn(1);
         assertThat(dataPermissionService.createRule(dataPermissionDTO), is(2));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AlertReceiverServiceImpl.java
Patch:
@@ -66,13 +66,13 @@ public void addReceiver(final AlertReceiverDTO alertReceiverDTO) {
         alertDispatchService.clearCache();
         alertReceiverMapper.insert(receiverDO);
     }
-    
+
     @Override
     public void deleteReceiver(final List<String> ids) {
         alertDispatchService.clearCache();
         alertReceiverMapper.deleteByIds(ids);
     }
-    
+
     @Override
     public void updateReceiver(final AlertReceiverDTO alertReceiverDTO) {
         AlertReceiverDO receiverDO = AlertTransfer.INSTANCE.mapToAlertReceiverDO(alertReceiverDTO);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/AlertTransfer.java
Patch:
@@ -67,6 +67,7 @@ public AlertReceiverDO mapToAlertReceiverDO(final AlertReceiverDTO alertReceiver
                     alertReceiverDO.setPhone(alertReceiverDTO.getPhone());
                     alertReceiverDO.setMatchAll(alertReceiverDTO.isMatchAll());
                     alertReceiverDO.setSlackWebHookUrl(alertReceiverDTO.getSlackWebHookUrl());
+                    alertReceiverDO.setNamespaceId(alertReceiverDTO.getNamespaceId());
                     alertReceiverDO.setDateCreated(alertReceiverDTO.getDateCreated());
                     alertReceiverDO.setDateUpdated(alertReceiverDTO.getDateUpdated());
                     return alertReceiverDO;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/AlertReceiverServiceTest.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -104,6 +105,7 @@ public void testListByPage() {
         pageParameter.setTotalCount(10);
         pageParameter.setTotalPage(pageParameter.getTotalCount() / pageParameter.getPageSize());
         AlertReceiverQuery alertReceiverQuery = new AlertReceiverQuery(pageParameter);
+        alertReceiverQuery.setNamespaceId(SYS_DEFAULT_NAMESPACE_ID);
         List<AlertReceiverDO> receiverDOList = IntStream.range(0, 10).mapToObj(i -> buildAlertReceiverDO(String.valueOf(i))).collect(Collectors.toList());
         given(this.alertReceiverMapper.selectByQuery(alertReceiverQuery)).willReturn(receiverDOList);
         final CommonPager<AlertReceiverDTO> commonPager = this.alertReceiverService.listByPage(alertReceiverQuery);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/websocket/WebsocketConfigurator.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.config.properties.WebsocketSyncProperties;
 import org.apache.shenyu.admin.spring.SpringBeanUtils;
+import org.apache.shenyu.common.constant.Constants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -55,6 +56,7 @@ public class WebsocketConfigurator extends ServerEndpointConfig.Configurator imp
     public void modifyHandshake(final ServerEndpointConfig sec, final HandshakeRequest request, final HandshakeResponse response) {
         HttpSession httpSession = (HttpSession) request.getHttpSession();
         sec.getUserProperties().put(WebsocketListener.CLIENT_IP_NAME, httpSession.getAttribute(WebsocketListener.CLIENT_IP_NAME));
+        sec.getUserProperties().put(Constants.SHENYU_NAMESPACE_ID, httpSession.getAttribute(Constants.SHENYU_NAMESPACE_ID));
         super.modifyHandshake(sec, request, response);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -177,7 +177,7 @@ public String doRegisterURI(final String selectorName, final List<URIRegisterDTO
         // todo:[To be refactored with namespace] Temporarily hardcode
         SelectorDO selectorDO = selectorService.findByNameAndPluginNameAndNamespaceId(selectorName, pluginName, SYS_DEFAULT_NAMESPACE_ID);
         if (Objects.isNull(selectorDO)) {
-            throw new ShenyuException("doRegister Failed to execute,wait to retry.");
+            throw new ShenyuException("doRegister Failed to execute, wait to retry.");
         }
         // fetch UPSTREAM_MAP data from db
         //upstreamCheckService.fetchUpstreamData();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-websocket/src/test/java/org/apache/shenyu/springboot/starter/sync/data/websocket/WebsocketSyncDataConfigurationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.springboot.starter.sync.data.websocket;
 
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.plugin.sync.data.websocket.WebsocketSyncDataService;
 import org.apache.shenyu.plugin.sync.data.websocket.config.WebsocketConfig;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
@@ -39,6 +40,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(
         classes = {
+                ShenyuConfig.class,
                 WebsocketSyncDataConfiguration.class
         },
         webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/main/java/org/apache/shenyu/plugin/sync/data/websocket/config/WebsocketConfig.java
Patch:
@@ -66,7 +66,7 @@ public String getAllowOrigin() {
     public void setAllowOrigin(final String allowOrigin) {
         this.allowOrigin = allowOrigin;
     }
-
+    
     @Override
     public boolean equals(final Object o) {
         if (this == o) {
@@ -76,7 +76,8 @@ public boolean equals(final Object o) {
             return false;
         }
         WebsocketConfig that = (WebsocketConfig) o;
-        return Objects.equals(urls, that.urls) && Objects.equals(allowOrigin, that.allowOrigin);
+        return Objects.equals(urls, that.urls)
+                && Objects.equals(allowOrigin, that.allowOrigin);
     }
 
     @Override

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ConfigController.java
Patch:
@@ -68,7 +68,7 @@ public ShenyuAdminResult fetchConfigs(@NotNull final String[] groupKeys, final S
         if (StringUtils.isEmpty(namespaceId)) {
             throw new ShenyuAdminException("namespaceId is null");
         }
-        NamespaceVO existNamespace = namespaceService.findById(namespaceId);
+        NamespaceVO existNamespace = namespaceService.findByNamespaceId(namespaceId);
         if (StringUtils.isNotEmpty(namespaceId) && ObjectUtils.isEmpty(existNamespace)) {
             throw new ShenyuAdminException("namespace is not exist");
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/NamespaceController.java
Patch:
@@ -118,7 +118,7 @@ public ShenyuAdminResult delete(@RequestBody final List<@NotBlank String> ids) {
     public ShenyuAdminResult detailPlugin(@PathVariable("id")
                                           @Existed(message = "namespaceId is not existed",
                                                   provider = NamespaceMapper.class) final String namespaceId) {
-        NamespaceVO namespaceVO = namespaceService.findById(namespaceId);
+        NamespaceVO namespaceVO = namespaceService.findByNamespaceId(namespaceId);
         return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, namespaceVO);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ShenyuDictController.java
Patch:
@@ -105,7 +105,7 @@ public ShenyuAdminResult detail(@PathVariable("id") @Valid
      * @param shenyuDictDTO {@link ShenyuDictDTO}
      * @return {@link ShenyuAdminResult}
      */
-    @PostMapping("")
+    @PostMapping
     @RequiresPermissions(value = {"system:dict:add", "system:dict:edit"}, logical = Logical.OR)
     public ShenyuAdminResult createShenyuDict(@Valid @RequestBody final ShenyuDictDTO shenyuDictDTO) {
         return ShenyuAdminResult.success(ShenyuResultMessage.CREATE_SUCCESS, shenyuDictService.createOrUpdate(shenyuDictDTO));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/NamespaceMapper.java
Patch:
@@ -57,7 +57,6 @@ public interface NamespaceMapper extends ExistProvider {
      */
     NamespaceDO selectByNamespaceId(String namespaceId);
 
-
     /**
      * selectAllByNamespaceId.
      *

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ConfigControllerTest.java
Patch:
@@ -80,7 +80,7 @@ public void testFetchConfigs() throws Exception {
         final ConfigData<?> configData = new ConfigData<>("md5-value1", 0L, Collections.emptyList());
         final NamespaceVO namespaceVO = new NamespaceVO();
         doReturn(configData).when(mockLongPollingListener).fetchConfig(ConfigGroupEnum.APP_AUTH, SYS_DEFAULT_NAMESPACE_ID);
-        doReturn(namespaceVO).when(namespaceService).findById(SYS_DEFAULT_NAMESPACE_ID);
+        doReturn(namespaceVO).when(namespaceService).findByNamespaceId(SYS_DEFAULT_NAMESPACE_ID);
         // Run the test
         final MockHttpServletResponse response = mockMvc.perform(get("/configs/fetch")
                         .param("groupKeys", new String[]{ConfigGroupEnum.APP_AUTH.toString()})

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/RuleControllerTest.java
Patch:
@@ -232,8 +232,7 @@ public void testDeleteRules() throws Exception {
         given(this.ruleService.deleteByIdsAndNamespaceId(Collections.singletonList("111"), SYS_DEFAULT_NAMESPACE_ID)).willReturn(1);
         this.mockMvc.perform(MockMvcRequestBuilders.delete("/rule/batch")
                         .contentType(MediaType.APPLICATION_JSON)
-                        .content(GsonUtils.getGson().toJson(batchNamespaceCommonDTO))
-                )
+                        .content(GsonUtils.getGson().toJson(batchNamespaceCommonDTO)))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.DELETE_SUCCESS)))
                 .andReturn();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -70,6 +70,7 @@
 import org.apache.shenyu.common.enums.MatchModeEnum;
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
 import org.apache.shenyu.common.utils.ContextPathUtils;
+import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -165,6 +166,7 @@ public List<SelectorVO> searchByCondition(final SelectorQueryCondition condition
     public String registerDefault(final SelectorDTO selectorDTO) {
         SelectorDO selectorDO = SelectorDO.buildSelectorDO(selectorDTO);
         if (StringUtils.isEmpty(selectorDTO.getId())) {
+            LOG.info("register default selector :{}", GsonUtils.getInstance().toJson(selectorDTO));
             selectorMapper.insertSelective(selectorDO);
             createCondition(selectorDO.getId(), selectorDTO.getSelectorConditions());
         }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/AbstractLoggingPlugin.java
Patch:
@@ -112,6 +112,7 @@ public Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlugin
         requestInfo.setPath(request.getURI().getRawPath());
         requestInfo.setSelectorId(selector.getId());
         requestInfo.setRuleId(rule.getId());
+        requestInfo.setNamespaceId(rule.getNamespaceId());
         LoggingServerHttpRequest<L> loggingServerHttpRequest = new LoggingServerHttpRequest<>(request, requestInfo);
         LoggingServerHttpResponse<L> loggingServerHttpResponse = new LoggingServerHttpResponse<>(exchange.getResponse(),
                 requestInfo, this.logCollector(), desensitized, keywordSets, dataDesensitizeAlg);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-nacos/src/test/java/org/apache/shenyu/springboot/starter/sync/data/nacos/NacosSyncDataConfigurationTest.java
Patch:
@@ -19,6 +19,8 @@
 
 import com.alibaba.nacos.api.NacosFactory;
 import com.alibaba.nacos.api.config.ConfigService;
+
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.sync.data.api.SyncDataService;
 import org.apache.shenyu.sync.data.nacos.config.NacosACMConfig;
 import org.apache.shenyu.sync.data.nacos.config.NacosConfig;
@@ -52,6 +54,7 @@
         })
 @EnableAutoConfiguration
 @MockBean(name = "nacosConfigService", value = NacosMockConfigService.class, answer = CALLS_REAL_METHODS)
+@MockBean(name = "shenyuConfig", value = ShenyuConfig.class, answer = CALLS_REAL_METHODS)
 public final class NacosSyncDataConfigurationTest {
 
     @Autowired

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-zookeeper/src/test/java/org/apache/shenyu/springboot/sync/data/zookeeper/ZookeeperSyncDataConfigurationTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.apache.shenyu.sync.data.api.SyncDataService;
 import org.apache.shenyu.sync.data.zookeeper.ZookeeperClient;
@@ -49,7 +50,7 @@
                 "shenyu.sync.zookeeper.connectionTimeout=500"
         })
 @EnableAutoConfiguration
-@MockBean({PluginDataSubscriber.class, ZookeeperClient.class})
+@MockBean({PluginDataSubscriber.class, ZookeeperClient.class, ShenyuConfig.class})
 public final class ZookeeperSyncDataConfigurationTest {
 
     @Autowired

File: shenyu-sync-data-center/shenyu-sync-data-apollo/src/test/java/org/apache/shenyu/sync/data/apollo/ApolloDataServiceTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.sync.data.apollo;
 
 import com.ctrip.framework.apollo.Config;
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.junit.Test;
 
@@ -34,8 +35,9 @@ public class ApolloDataServiceTest {
     @Test
     public void testClose() {
         Config configService = mock(Config.class);
+        ShenyuConfig shenyuConfig = new ShenyuConfig();
         ApolloDataService apolloDataService = new ApolloDataService(configService, null,
-                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
+                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), shenyuConfig);
         apolloDataService.close();
     }
 }

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/test/java/org/apache/shenyu/sync/data/nacos/NacosSyncDataServiceTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.sync.data.nacos;
 
 import com.alibaba.nacos.api.config.ConfigService;
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.sync.data.nacos.handler.NacosMockConfigService;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -34,8 +35,9 @@ public final class NacosSyncDataServiceTest {
     @BeforeEach
     public void setup() {
         ConfigService configService = new NacosMockConfigService();
+        ShenyuConfig shenyuConfig = new ShenyuConfig();
         nacosSyncDataService = new NacosSyncDataService(configService, null,
-                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
+                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), shenyuConfig);
     }
 
     @Test

File: shenyu-sync-data-center/shenyu-sync-data-polaris/src/test/java/org/apache/shenyu/sync/data/polaris/PolarisSyncDataServiceTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.sync.data.polaris;
 
 import com.tencent.polaris.configuration.api.core.ConfigFileService;
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.sync.data.polaris.config.PolarisConfig;
 import org.apache.shenyu.sync.data.polaris.handler.PolarisMockConfigService;
 import org.junit.jupiter.api.BeforeEach;
@@ -37,8 +38,9 @@ public class PolarisSyncDataServiceTest {
     public void setup() {
         PolarisConfig polarisConfig = new PolarisConfig();
         ConfigFileService configFileService = new PolarisMockConfigService(new HashMap<>());
+        ShenyuConfig shenyuConfig = new ShenyuConfig();
         polarisSyncDataService = new PolarisSyncDataService(polarisConfig, configFileService, null,
-                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
+                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), shenyuConfig);
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/NamespacePluginServiceImpl.java
Patch:
@@ -171,7 +171,7 @@ public String enabled(final List<String> ids, final Boolean enabled) {
 
     @Override
     public List<PluginSnapshotVO> activePluginSnapshot() {
-        //todo:Not yet implemented
+        //todo:Not yet  implemented
         return null;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/NamespaceServiceImpl.java
Patch:
@@ -67,7 +67,6 @@ public NamespaceServiceImpl(final NamespaceMapper namespaceMapper,
     @Transactional(rollbackFor = Exception.class)
     public NamespaceVO createOrUpdate(final NamespaceDTO namespaceDTO) {
         return StringUtils.isBlank(namespaceDTO.getId())
-                && StringUtils.isBlank(namespaceDTO.getNamespaceId())
                 ? this.create(namespaceDTO) : this.update(namespaceDTO);
     }
 
@@ -113,7 +112,7 @@ public List<NamespaceVO> listAll() {
     private NamespaceVO create(final NamespaceDTO namespaceDTO) {
         Timestamp currentTime = new Timestamp(System.currentTimeMillis());
         String id = UUIDUtils.getInstance().generateShortUuid();
-        String namespaceId = NamespaceIDUtils.getInstance().generateNamespaceID();
+        String namespaceId = StringUtils.defaultString(namespaceDTO.getNamespaceId(), NamespaceIDUtils.getInstance().generateNamespaceID());
         NamespaceDO namespaceDO = NamespaceDO.builder()
                 .id(id)
                 .namespaceId(namespaceId)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/NamespacePluginRelDO.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.admin.model.entity;
 
 import org.apache.shenyu.admin.model.dto.NamespacePluginDTO;
-
+import org.apache.shenyu.common.utils.UUIDUtils;
 import java.sql.Timestamp;
 import java.util.Objects;
 import java.util.Optional;
@@ -195,7 +195,7 @@ public static NamespacePluginRelDO buildNamespacePluginRelDO(final PluginDO plug
         return Optional.ofNullable(pluginDO).map(item -> {
             Timestamp currentTime = new Timestamp(System.currentTimeMillis());
             return NamespacePluginRelDO.builder()
-                    .id(item.getId())
+                    .id(UUIDUtils.getInstance().generateShortUuid())
                     .config(item.getConfig())
                     .enabled(item.getEnabled())
                     .sort(item.getSort())

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/NamespacePluginService.java
Patch:
@@ -50,7 +50,7 @@ public interface NamespacePluginService extends PageService<NamespacePluginQuery
      * @param pluginId           pluginId.
      * @return the string
      */
-    String create(String namespaceId, String pluginId);
+    NamespacePluginVO create(String namespaceId, String pluginId);
 
     /**
      * Create string.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/HttpLongPollingSyncConfiguration.java
Patch:
@@ -42,5 +42,4 @@ public class HttpLongPollingSyncConfiguration {
     public HttpLongPollingDataChangedListener httpLongPollingDataChangedListener(final HttpSyncProperties httpSyncProperties) {
         return new HttpLongPollingDataChangedListener(httpSyncProperties);
     }
-
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/LocalDiscoveryProcessor.java
Patch:
@@ -88,6 +88,7 @@ public void changeUpstream(final ProxySelectorDTO proxySelectorDTO, final List<D
         discoverySyncData.setSelectorName(proxySelectorDTO.getName());
         List<DiscoveryUpstreamData> upstreamDataList = upstreamDTOS.stream().map(DiscoveryTransfer.INSTANCE::mapToData).collect(Collectors.toList());
         discoverySyncData.setUpstreamDataList(upstreamDataList);
+        discoverySyncData.setNamespaceId(proxySelectorDTO.getNamespaceId());
         DataChangedEvent dataChangedEvent = new DataChangedEvent(ConfigGroupEnum.DISCOVER_UPSTREAM, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData));
         eventPublisher.publishEvent(dataChangedEvent);
         DiscoveryStreamUpdatedEvent discoveryStreamUpdatedEvent = new DiscoveryStreamUpdatedEvent(discoverySyncData, LOCAL_DISCOVERY_UPSTREAM_UPDATE);
@@ -108,6 +109,7 @@ public void fetchAll(final DiscoveryHandlerDTO discoveryHandlerDTO, final ProxyS
         discoverySyncData.setSelectorName(proxySelectorDTO.getName());
         List<DiscoveryUpstreamData> upstreamDataList = discoveryUpstreamDOS.stream().map(DiscoveryTransfer.INSTANCE::mapToData).collect(Collectors.toList());
         discoverySyncData.setUpstreamDataList(upstreamDataList);
+        discoverySyncData.setNamespaceId(proxySelectorDTO.getNamespaceId());
         DataChangedEvent dataChangedEvent = new DataChangedEvent(ConfigGroupEnum.DISCOVER_UPSTREAM, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData));
         eventPublisher.publishEvent(dataChangedEvent);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEvent.java
Patch:
@@ -42,9 +42,9 @@ public class DataChangedEvent extends ApplicationEvent {
     /**
      * Instantiates a new Data changed event.
      *
-     * @param groupKey the group key
-     * @param type     the type
-     * @param source   the source
+     * @param groupKey    the group key
+     * @param type        the type
+     * @param source      the source
      */
     public DataChangedEvent(final ConfigGroupEnum groupKey, final DataEventTypeEnum type, final List<?> source) {
         super(source.stream().filter(Objects::nonNull).collect(Collectors.toList()));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/RuleDO.java
Patch:
@@ -329,6 +329,7 @@ public static RuleData transFrom(final RuleDO ruleDO, final String pluginName, f
                 .matchRestful(ruleDO.getMatchRestful())
                 .conditionDataList(conditionDataList)
                 .beforeConditionDataList(beforeConditionDataList)
+                .namespaceId(ruleDO.getNamespaceId())
                 .build();
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DiscoveryServiceImpl.java
Patch:
@@ -262,6 +262,7 @@ public void syncData() {
                 proxySelectorDTO.setPluginName(d.getPluginName());
                 proxySelectorDTO.setName(selectorDO.getName());
                 proxySelectorDTO.setId(selectorDO.getId());
+                proxySelectorDTO.setNamespaceId(selectorDO.getNamespaceId());
                 DiscoveryHandlerDO discoveryHandlerDO = discoveryHandlerMapper.selectBySelectorId(selectorDO.getId());
                 discoveryProcessor.createProxySelector(DiscoveryTransfer.INSTANCE.mapToDTO(discoveryHandlerDO), proxySelectorDTO);
                 discoveryProcessor.fetchAll(DiscoveryTransfer.INSTANCE.mapToDTO(discoveryHandlerDO), proxySelectorDTO);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -295,10 +295,11 @@ private void unbindDiscovery(final List<SelectorDO> selectors, final List<Plugin
             discoveryUpstreamMapper.deleteByDiscoveryHandlerId(discoveryHandlerDO.getId());
             DiscoveryDO discoveryDO = discoveryMapper.selectById(discoveryHandlerDO.getDiscoveryId());
             if (Objects.nonNull(discoveryDO)) {
-                DiscoveryProcessor discoveryProcessor = discoveryProcessorHolder.chooseProcessor(discoveryDO.getType());
+                final DiscoveryProcessor discoveryProcessor = discoveryProcessorHolder.chooseProcessor(discoveryDO.getType());
                 ProxySelectorDTO proxySelectorDTO = new ProxySelectorDTO();
                 proxySelectorDTO.setName(selector.getName());
                 proxySelectorDTO.setPluginName(pluginMap.getOrDefault(selector.getId(), ""));
+                proxySelectorDTO.setNamespaceId(selector.getNamespaceId());
                 discoveryProcessor.removeProxySelector(DiscoveryTransfer.INSTANCE.mapToDTO(discoveryHandlerDO), proxySelectorDTO);
                 if (DiscoveryLevel.SELECTOR.getCode().equals(discoveryDO.getLevel())) {
                     discoveryProcessor.removeDiscovery(discoveryDO);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -432,6 +432,7 @@ private void updateSelectorHandler(final String selectorId, final List<CommonUps
         discoverySyncData.setPluginName(pluginName);
         discoverySyncData.setSelectorId(selectorId);
         discoverySyncData.setSelectorName(selectorDO.getName());
+        discoverySyncData.setNamespaceId(selectorDO.getNamespaceId());
         LOG.debug("UpstreamCacheManager update selectorId={}|json={}", selectorId, GsonUtils.getGson().toJson(discoverySyncData));
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.DISCOVER_UPSTREAM, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData)));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/DiscoveryTransfer.java
Patch:
@@ -229,6 +229,7 @@ public ProxySelectorData mapToData(ProxySelectorDTO proxySelectorDTO) {
             proxySelectorData.setPluginName(data.getPluginName());
             proxySelectorData.setType(data.getType());
             proxySelectorData.setForwardPort(data.getForwardPort());
+            proxySelectorData.setNamespaceId(data.getNamespaceId());
             String props = data.getProps();
             Properties properties = GsonUtils.getInstance().fromJson(props, Properties.class);
             proxySelectorData.setProps(properties);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/MetaDataTransfer.java
Patch:
@@ -149,6 +149,7 @@ public MetaData mapToData(final MetaDataDO metaDataDO) {
                         .parameterTypes(v.getParameterTypes())
                         .rpcExt(v.getRpcExt())
                         .enabled(v.getEnabled())
+                        .namespaceId(v.getNamespaceId())
                         .build())
                 .orElse(null);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/ConfigDataCacheTest.java
Patch:
@@ -31,7 +31,8 @@ public void testUpdate() {
         String group = "default";
         String json = "{\"name\":\"shenyu\"}";
         String md51 = "8e8a3a2fdbd4368f169aa88c5fdce5a1";
-        ConfigDataCache cache = new ConfigDataCache(group, json, md51, 0);
+        String namespaceId = "649330b6-c2d7-4edc-be8e-8a54df9eb385";
+        ConfigDataCache cache = new ConfigDataCache(group, json, md51, 0, namespaceId);
         assertEquals(cache.getMd5(), md51);
         assertEquals(cache.getJson(), json);
         assertEquals(cache.getGroup(), group);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-http/src/test/java/org/apache/shenyu/springboot/starter/sync/data/http/HttpClientPluginConfigurationTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.springboot.starter.sync.data.http;
 
 import com.github.tomakehurst.wiremock.WireMockServer;
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.exception.CommonErrorCode;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
@@ -68,7 +69,7 @@
                 "spring.main.web-application-type=none"
         })
 @EnableAutoConfiguration
-@MockBean({PluginDataSubscriber.class, ServletWebServerFactory.class})
+@MockBean({PluginDataSubscriber.class, ServletWebServerFactory.class, ShenyuConfig.class})
 public final class HttpClientPluginConfigurationTest {
 
     @Autowired

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ScaleRuleDTO.java
Patch:
@@ -19,8 +19,6 @@
 
 import jakarta.validation.constraints.NotBlank;
 import jakarta.validation.constraints.NotNull;
-import org.apache.shenyu.admin.mapper.ScaleRuleMapper;
-import org.apache.shenyu.admin.validation.annotation.Existed;
 
 import java.io.Serializable;
 import java.util.Objects;
@@ -35,7 +33,6 @@ public class ScaleRuleDTO implements Serializable {
     /**
      * primary key id.
      */
-    @Existed(provider = ScaleRuleMapper.class, nullOfIgnore = true, message = "scale rule is not existed")
     private String id;
 
     /**

File: shenyu-admin-listener/shenyu-admin-listener-api/src/main/java/org/apache/shenyu/admin/service/SyncDataService.java
Patch:
@@ -39,5 +39,4 @@ public interface SyncDataService {
      * @return the boolean
      */
     boolean syncPluginData(String id);
-
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/FallbackShenyuClientRegisterService.java
Patch:
@@ -66,7 +66,7 @@ public String registerURI(final String selectorName, final List<URIRegisterDTO>
             result = this.doRegisterURI(selectorName, uriList);
             LOG.info("Register success: {},{}", selectorName, uriList);
         } catch (Exception ex) {
-            LOG.error("Register exception: cause:", ex);
+            LOG.error("Register exception: cause: {}", ex.getMessage());
             result = "";
             this.addFallback(key, new FallbackHolder(selectorName, uriList));
         }

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-cluster/src/test/java/org/apache/shenyue/e2e/testcase/cluster/DividePluginTest.java
Patch:
@@ -38,6 +38,8 @@
 import java.util.List;
 import java.util.Objects;
 
+import static org.apache.shenyu.e2e.constant.Constants.SYS_DEFAULT_NAMESPACE_NAMESPACE_ID;
+
 /**
  * Testing Cluster Divide plugin.
  */
@@ -86,6 +88,7 @@ void before(final AdminClient client, final GatewayClient gateway, final BeforeE
             BindingData bindingData = res.getBindingData();
             if (Objects.nonNull(bindingData)) {
                 bindingData.setSelectorId(dto.getId());
+                bindingData.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
                 client.bindingData(bindingData);
             }
         }

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-http/src/test/java/org/apache/shenyu/e2e/testcase/http/DividePluginTest.java
Patch:
@@ -40,6 +40,8 @@
 import java.util.Map;
 import java.util.Objects;
 
+import static org.apache.shenyu.e2e.constant.Constants.SYS_DEFAULT_NAMESPACE_NAMESPACE_ID;
+
 @ShenYuTest(environments = {
         @ShenYuTest.Environment(
                 serviceName = "shenyu-e2e-admin",
@@ -81,6 +83,7 @@ void before(final AdminClient client, final GatewayClient gateway, final BeforeE
             BindingData bindingData = res.getBindingData();
             if (Objects.nonNull(bindingData)) {
                 bindingData.setSelectorId(dto.getId());
+                bindingData.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
                 client.bindingData(bindingData);
             }
         }

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/template/ResourceDataTemplate.java
Patch:
@@ -35,6 +35,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import static org.apache.shenyu.e2e.constant.Constants.SYS_DEFAULT_NAMESPACE_NAMESPACE_ID;
+
 /**
  * Templates for various entity classes.
  */
@@ -82,6 +84,7 @@ public static BindingData newBindingData(final String selectorName, final String
         discoveryUpstream.setProtocol("http://");
         discoveryUpstream.setStatus(0);
         discoveryUpstream.setWeight(50);
+        discoveryUpstream.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
         bindingData.setDiscoveryUpstreams(Collections.singletonList(discoveryUpstream));
         return bindingData;
     }

File: shenyu-integrated-test/shenyu-integrated-test-spring-cloud/src/test/java/org/apache/shenyu/integratedtest/springcloud/SpringCloudPluginTest.java
Patch:
@@ -34,7 +34,8 @@ public class SpringCloudPluginTest extends AbstractPluginDataInit {
 
     @BeforeAll
     public static void setup() throws IOException {
-        String pluginResult = initPlugin(PluginEnum.SPRING_CLOUD.getName(), "");
+        String pluginResult = initPlugin(PluginEnum.SPRING_CLOUD.getName(),
+                "{\"enabled\":true,\"registerType\":\"eureka\",\"serverLists\":\"http://shenyu-examples-eureka:8761/eureka\"}");
         assertThat(pluginResult, is("success"));
     }
 

File: shenyu-integrated-test/shenyu-integrated-test-spring-cloud/src/test/java/org/apache/shenyu/integratedtest/springcloud/SpringCloudPluginUploadTest.java
Patch:
@@ -48,7 +48,8 @@ public class SpringCloudPluginUploadTest extends AbstractPluginDataInit {
 
     @BeforeAll
     public static void setup() throws IOException {
-        String pluginResult = initPlugin(PluginEnum.SPRING_CLOUD.getName(), "");
+        String pluginResult = initPlugin(PluginEnum.SPRING_CLOUD.getName(),
+                "{\"enabled\":true,\"registerType\":\"eureka\",\"serverLists\":\"http://shenyu-examples-eureka:8761/eureka\"}");
         assertThat(pluginResult, is("success"));
 
         Path filePath = Paths.get(FILE_PATH);

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/handler/SpringCloudPluginDataHandlerTest.java
Patch:
@@ -58,8 +58,6 @@ public final class SpringCloudPluginDataHandlerTest {
     @BeforeEach
     public void setUp() {
         this.mockSpringCloudConfig();
-//        SimpleDiscoveryProperties simpleDiscoveryProperties = new SimpleDiscoveryProperties();
-//        SimpleDiscoveryClient discoveryClient = new SimpleDiscoveryClient(simpleDiscoveryProperties);
         ShenyuConfig.SpringCloudCacheConfig springCloudCacheConfig = SpringBeanUtils.getInstance().getBean(SpringCloudCacheConfig.class);
         ConfigurableApplicationContext context = (ConfigurableApplicationContext) SpringBeanUtils.getInstance().getApplicationContext();
         this.springCloudPluginDataHandler = new SpringCloudPluginDataHandler(springCloudCacheConfig, context.getEnvironment());

File: shenyu-registry/shenyu-registry-api/src/main/java/org/apache/shenyu/registry/api/config/RegisterConfig.java
Patch:
@@ -161,7 +161,6 @@ public int hashCode() {
         int result = getRegisterType() != null ? getRegisterType().hashCode() : 0;
         result = 31 * result + (getServerLists() != null ? getServerLists().hashCode() : 0);
 
-        // 对 Props 进行处理
         if (getProps() != null) {
             for (Map.Entry<Object, Object> entry : getProps().entrySet()) {
                 result = 31 * result + (entry.getKey() != null ? entry.getKey().hashCode() : 0);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DiscoveryController.java
Patch:
@@ -57,11 +57,12 @@ public ShenyuAdminResult typeEnums() {
      *
      * @param pluginName plugin name
      * @param level      level
+     * @param namespaceId namespaceId
      * @return {@link org.apache.shenyu.admin.model.vo.DiscoveryVO}
      */
     @GetMapping("")
-    public ShenyuAdminResult discovery(final String pluginName, final String level) {
-        return ShenyuAdminResult.success(ShenyuResultMessage.SUCCESS, discoveryService.discovery(pluginName, level));
+    public ShenyuAdminResult discovery(final String pluginName, final String level, final String namespaceId) {
+        return ShenyuAdminResult.success(ShenyuResultMessage.SUCCESS, discoveryService.discovery(pluginName, level, namespaceId));
     }
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/AbstractDiscoveryProcessor.java
Patch:
@@ -140,6 +140,7 @@ public void changeUpstream(final ProxySelectorDTO proxySelectorDTO, final List<D
         discoverySyncData.setPluginName(proxySelectorDTO.getPluginName());
         discoverySyncData.setSelectorId(proxySelectorDTO.getId());
         discoverySyncData.setSelectorName(proxySelectorDTO.getName());
+        discoverySyncData.setNamespaceId(proxySelectorDTO.getNamespaceId());
         List<DiscoveryUpstreamData> upstreamDataList = upstreamDTOS.stream().map(DiscoveryTransfer.INSTANCE::mapToData).collect(Collectors.toList());
         discoverySyncData.setUpstreamDataList(upstreamDataList);
         DataChangedEvent dataChangedEvent = new DataChangedEvent(ConfigGroupEnum.DISCOVER_UPSTREAM, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData));
@@ -181,6 +182,7 @@ public void fetchAll(final DiscoveryHandlerDTO discoveryHandlerDTO, final ProxyS
             discoverySyncData.setSelectorName(proxySelectorDTO.getName());
             discoverySyncData.setPluginName(proxySelectorDTO.getPluginName());
             discoverySyncData.setUpstreamDataList(discoveryUpstreamDataList);
+            discoverySyncData.setNamespaceId(proxySelectorDTO.getNamespaceId());
             DataChangedEvent dataChangedEvent = new DataChangedEvent(ConfigGroupEnum.DISCOVER_UPSTREAM, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData));
             eventPublisher.publishEvent(dataChangedEvent);
         }
@@ -209,6 +211,7 @@ public DataChangedEventListener getDiscoveryDataChangedEventListener(final Disco
         discoverySyncData.setPluginName(proxySelectorDTO.getPluginName());
         discoverySyncData.setSelectorName(proxySelectorDTO.getName());
         discoverySyncData.setSelectorId(proxySelectorDTO.getId());
+        discoverySyncData.setNamespaceId(proxySelectorDTO.getNamespaceId());
         return new DiscoveryDataChangedEventSyncListener(eventPublisher, discoveryUpstreamMapper,
                 new CustomDiscoveryUpstreamParser(customMap), discoveryHandlerDTO.getId(), discoverySyncData);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/DiscoveryMapper.java
Patch:
@@ -60,9 +60,10 @@ public interface DiscoveryMapper extends ExistProvider {
      *
      * @param pluginName plugin name
      * @param level      level
+     * @param namespaceId namespaceId
      * @return {@linkplain DiscoveryDO}
      */
-    DiscoveryDO selectByPluginNameAndLevel(@Param("pluginName") String pluginName, @Param("level") String level);
+    DiscoveryDO selectByPluginNameAndLevelAndNamespaceId(@Param("pluginName") String pluginName, @Param("level") String level, @Param("namespaceId") String namespaceId);
 
     /**
      * insert discovery.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DiscoveryUpstreamServiceImpl.java
Patch:
@@ -290,6 +290,7 @@ private void fetchAll(final String discoveryHandlerId) {
             proxySelectorDTO.setId(selectorDO.getId());
             proxySelectorDTO.setPluginName(pluginMapper.selectById(selectorDO.getPluginId()).getName());
             proxySelectorDTO.setName(selectorDO.getName());
+            proxySelectorDTO.setNamespaceId(selectorDO.getNamespaceId());
         } else {
             proxySelectorDTO = DiscoveryTransfer.INSTANCE.mapToDTO(proxySelectorDO);
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -363,7 +363,7 @@ public SelectorDO findByNameAndPluginNameAndNamespaceId(final String name, final
     @Override
     public SelectorDO findByNameAndPluginNameAndNamespaceIdForUpdate(final String name, final String pluginName, final String namespaceId) {
         PluginDO pluginDO = pluginMapper.selectByNameForUpdate(pluginName);
-        // todo:[To be refactored with namespace]  Temporarily hardcode
+        // todo:[To be refactored with namespace] Temporarily hardcode
         return selectorMapper.findByNameAndPluginIdAndNamespaceId(name, pluginDO.getId(), namespaceId);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImpl.java
Patch:
@@ -110,7 +110,7 @@ protected String buildHandle(final List<URIRegisterDTO> uriList, final SelectorD
 
     private List<DivideUpstream> buildDivideUpstreamList(final List<URIRegisterDTO> uriList) {
         return uriList.stream()
-                .map(dto -> CommonUpstreamUtils.buildDivideUpstream(dto.getProtocol(), dto.getHost(), dto.getPort()))
+                .map(dto -> CommonUpstreamUtils.buildDivideUpstream(dto.getProtocol(), dto.getHost(), dto.getPort(), dto.getNamespaceId()))
                 .collect(Collectors.toCollection(CopyOnWriteArrayList::new));
     }
 
@@ -144,7 +144,7 @@ private void doRemoveAndSendEvent(final List<DivideUpstream> needToRemove, final
         for (DivideUpstream divideUpstream : needToRemove) {
             removeDiscoveryUpstream(selectorDO.getId(), divideUpstream.getUpstreamUrl());
         }
-        DiscoverySyncData discoverySyncData = fetch(selectorDO.getId(), selectorDO.getName(), pluginName);
+        DiscoverySyncData discoverySyncData = fetch(selectorDO.getId(), selectorDO.getName(), pluginName, selectorDO.getNamespaceId());
         getEventPublisher().publishEvent(new DataChangedEvent(ConfigGroupEnum.DISCOVER_UPSTREAM, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData)));
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImpl.java
Patch:
@@ -119,7 +119,7 @@ protected String buildHandle(final List<URIRegisterDTO> uriList, final SelectorD
 
     private List<GrpcUpstream> buildGrpcUpstreamList(final List<URIRegisterDTO> uriList) {
         return uriList.stream()
-                .map(dto -> CommonUpstreamUtils.buildDefaultGrpcUpstream(dto.getHost(), dto.getPort()))
+                .map(dto -> CommonUpstreamUtils.buildDefaultGrpcUpstream(dto.getHost(), dto.getPort(), dto.getNamespaceId()))
                 .collect(Collectors.toCollection(CopyOnWriteArrayList::new));
     }
 
@@ -137,10 +137,10 @@ public String offline(final String selectorName, final List<URIRegisterDTO> offl
                 .collect(Collectors.toList());
         if (CollectionUtils.isNotEmpty(validOfflineUrl)) {
             for (URIRegisterDTO offlineUrl : validOfflineUrl) {
-                GrpcUpstream grpcUpstream = CommonUpstreamUtils.buildDefaultGrpcUpstream(offlineUrl.getHost(), offlineUrl.getPort());
+                GrpcUpstream grpcUpstream = CommonUpstreamUtils.buildDefaultGrpcUpstream(offlineUrl.getHost(), offlineUrl.getPort(), offlineUrl.getNamespaceId());
                 removeDiscoveryUpstream(selectorDO.getId(), grpcUpstream.getUpstreamUrl());
             }
-            DiscoverySyncData discoverySyncData = fetch(selectorDO.getId(), selectorDO.getName(), pluginName);
+            DiscoverySyncData discoverySyncData = fetch(selectorDO.getId(), selectorDO.getName(), pluginName, selectorDO.getNamespaceId());
             if (LOG.isDebugEnabled()) {
                 LOG.debug("grpc offline discoverySyncData:{}", GsonUtils.getInstance().toJson(discoverySyncData));
             }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -104,7 +104,7 @@ protected String buildHandle(final List<URIRegisterDTO> uriList, final SelectorD
 
     private List<DivideUpstream> buildDivideUpstreamList(final List<URIRegisterDTO> uriList) {
         return uriList.stream()
-                .map(dto -> CommonUpstreamUtils.buildDefaultDivideUpstream(dto.getHost(), dto.getPort()))
+                .map(dto -> CommonUpstreamUtils.buildDefaultDivideUpstream(dto.getHost(), dto.getPort(), dto.getNamespaceId()))
                 .collect(Collectors.toCollection(CopyOnWriteArrayList::new));
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterWebSocketServiceImpl.java
Patch:
@@ -99,7 +99,7 @@ protected String buildHandle(final List<URIRegisterDTO> uriList, final SelectorD
 
     private List<WebSocketUpstream> buildWebSocketUpstreamList(final List<URIRegisterDTO> uriList) {
         return uriList.stream()
-                .map(dto -> CommonUpstreamUtils.buildWebSocketUpstream(dto.getProtocol(), dto.getHost(), dto.getPort()))
+                .map(dto -> CommonUpstreamUtils.buildWebSocketUpstream(dto.getProtocol(), dto.getHost(), dto.getPort(), dto.getNamespaceId()))
                 .collect(Collectors.toCollection(CopyOnWriteArrayList::new));
     }
 
@@ -117,10 +117,10 @@ public String offline(final String selectorName, final List<URIRegisterDTO> offl
                 .collect(Collectors.toList());
         if (CollectionUtils.isNotEmpty(validOfflineUrl)) {
             for (URIRegisterDTO offlineUrl : validOfflineUrl) {
-                WebSocketUpstream webSocketUpstream = CommonUpstreamUtils.buildWebSocketUpstream(offlineUrl.getProtocol(), offlineUrl.getHost(), offlineUrl.getPort());
+                WebSocketUpstream webSocketUpstream = CommonUpstreamUtils.buildWebSocketUpstream(offlineUrl.getProtocol(), offlineUrl.getHost(), offlineUrl.getPort(), offlineUrl.getNamespaceId());
                 removeDiscoveryUpstream(selectorDO.getId(), webSocketUpstream.getUrl());
             }
-            DiscoverySyncData discoverySyncData = fetch(selectorDO.getId(), selectorDO.getName(), pluginName);
+            DiscoverySyncData discoverySyncData = fetch(selectorDO.getId(), selectorDO.getName(), pluginName, selectorDO.getNamespaceId());
             getEventPublisher().publishEvent(new DataChangedEvent(ConfigGroupEnum.DISCOVER_UPSTREAM, DataEventTypeEnum.UPDATE, Collections.singletonList(discoverySyncData)));
         }
         return Constants.SUCCESS;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DiscoveryUpstreamMapperTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class DiscoveryUpstreamMapperTest extends AbstractSpringIntegrationTest {
@@ -97,6 +98,7 @@ private DiscoveryUpstreamDO build() {
         discoveryUpstreamDO.setProps("test");
         discoveryUpstreamDO.setUrl("test");
         discoveryUpstreamDO.setProtocol("test");
+        discoveryUpstreamDO.setNamespaceId(SYS_DEFAULT_NAMESPACE_ID);
         discoveryUpstreamDO.setDateCreated(new Timestamp(System.currentTimeMillis()));
         discoveryUpstreamDO.setDateUpdated(new Timestamp(System.currentTimeMillis()));
         return discoveryUpstreamDO;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ProxySelectorMapperTest.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNull;
 
@@ -59,7 +60,7 @@ void selectByQuery() {
         ProxySelectorDO newProxySelectorDO = build();
         newProxySelectorDO.setName("test2");
         proxySelectorMapper.insert(newProxySelectorDO);
-        ProxySelectorQuery query = new ProxySelectorQuery("test2", new PageParameter());
+        ProxySelectorQuery query = new ProxySelectorQuery("test2", new PageParameter(), SYS_DEFAULT_NAMESPACE_ID);
         List<ProxySelectorDO> list = proxySelectorMapper.selectByQuery(query);
         assertEquals(list.size(), 1);
         assertEquals(list.get(0).getName(), "test2");
@@ -111,6 +112,7 @@ private ProxySelectorDO build() {
         proxySelectorDO.setForwardPort(8080);
         proxySelectorDO.setType("tcp");
         proxySelectorDO.setProps("test");
+        proxySelectorDO.setNamespaceId(SYS_DEFAULT_NAMESPACE_ID);
         proxySelectorDO.setDateCreated(new Timestamp(System.currentTimeMillis()));
         proxySelectorDO.setDateUpdated(new Timestamp(System.currentTimeMillis()));
         return proxySelectorDO;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/ProxySelectorServiceTest.java
Patch:
@@ -48,6 +48,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.mockito.ArgumentMatchers.any;
@@ -91,7 +92,7 @@ void testSetUp() {
     @Test
     void testListByPage() {
 
-        final ProxySelectorQuery proxySelectorQuery = new ProxySelectorQuery("test", new PageParameter());
+        final ProxySelectorQuery proxySelectorQuery = new ProxySelectorQuery("test", new PageParameter(), SYS_DEFAULT_NAMESPACE_ID);
         final List<ProxySelectorDO> list = new ArrayList<>();
         ProxySelectorDO proxySelectorDO = new ProxySelectorDO();
         proxySelectorDO.setId("123");

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImplTest.java
Patch:
@@ -215,7 +215,7 @@ protected void doDiscoveryLocal(final SelectorDO selectorDO, final String plugin
         }
 
         @Override
-        protected DiscoverySyncData fetch(final String selectorId, final String selectorName, final String pluginName) {
+        protected DiscoverySyncData fetch(final String selectorId, final String selectorName, final String pluginName, final String namespaceId) {
             return new DiscoverySyncData();
         }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-storage/src/test/java/org/apache/shenyu/e2e/testcase/divide/DividePluginTest.java
Patch:
@@ -38,6 +38,8 @@
 import java.util.List;
 import java.util.Objects;
 
+import static org.apache.shenyu.e2e.constant.Constants.SYS_DEFAULT_NAMESPACE_NAMESPACE_ID;
+
 @ShenYuTest(environments = {
         @ShenYuTest.Environment(
                 serviceName = "shenyu-e2e-admin",
@@ -83,6 +85,7 @@ void before(final AdminClient client, final GatewayClient gateway, final BeforeE
             BindingData bindingData = res.getBindingData();
             if (Objects.nonNull(bindingData)) {
                 bindingData.setSelectorId(dto.getId());
+                bindingData.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
                 client.bindingData(bindingData);
             }
         }

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/AdminClient.java
Patch:
@@ -334,6 +334,7 @@ public SelectorDTO create(final SelectorData selector) {
      * @return RuleDTO
      */
     public RuleDTO create(final RuleData rule) {
+        rule.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
         rule.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
         RuleDTO dto = create("/rule", rule);
         Rules.INSTANCE.put(rule.getName(), dto.getId());
@@ -377,6 +378,7 @@ private <T extends ResourceData, R extends ResourceDTO> R create(final String ur
      * @param bindingData bindingData
      */
     public void bindingData(final BindingData bindingData) {
+        bindingData.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
         HttpEntity<BindingData> entity = new HttpEntity<>(bindingData, basicAuth);
         ResponseEntity<ShenYuResult> response = template.postForEntity(baseURL + "/proxy-selector/binding", entity, ShenYuResult.class);
         Assertions.assertEquals(HttpStatus.OK, response.getStatusCode(), "status code");

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/MetaDataTest.java
Patch:
@@ -36,7 +36,7 @@ public class MetaDataTest {
     @Test
     public void testUpdateContextPath() {
         MetaData metaData = new MetaData("id", "appName", "contextPath", "path", "rpcType",
-                "serviceName", "methodName", "parameterTypes", "rpcExt", true);
+                "serviceName", "methodName", "parameterTypes", "rpcExt", true, "namespaceId");
         metaData.setPath(PATH);
         metaData.updateContextPath();
         assertEquals(metaData.getContextPath(), CONTEXT_PATH);

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/TarsPluginTest.java
Patch:
@@ -84,7 +84,7 @@ public void setUp() {
                 "path", RpcTypeEnum.TARS.getName(), "serviceName", "method1",
                 "parameterTypes", "{\"methodInfo\":[{\"methodName\":\"method1\",\"params\":"
                 + "[{\"left\":\"java.lang.String\",\"right\":\"param1\"},{\"left\":\"java.lang.String\","
-                + "\"right\":\"param2\"}],\"returnType\":\"java.lang.String\"}]}", false);
+                + "\"right\":\"param2\"}],\"returnType\":\"java.lang.String\"}]}", false, Constants.SYS_DEFAULT_NAMESPACE_ID);
         ApplicationConfigCache.getInstance().initPrx(metaData);
         exchange = MockServerWebExchange.from(MockServerHttpRequest.get("localhost").build());
         tarsPluginUnderTest = new TarsPlugin();

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/handler/TarsMetaDataHandlerTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.tars.handler;
 
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.junit.jupiter.api.BeforeEach;
@@ -39,7 +40,7 @@ public void setUp() {
         metaData = new MetaData("id", "127.0.0.1:8080", "contextPath",
                 "path", RpcTypeEnum.TARS.getName(), "serviceName", "method1",
                 "parameterTypes", "{\"methodInfo\":[{\"methodName\":\"method1\",\"params\":[{\"left\":\"int\",\"right\":\"param1\"},"
-                + "{\"left\":\"java.lang.Integer\",\"right\":\"param2\"}],\"returnType\":\"java.lang.String\"}]}", false);
+                + "{\"left\":\"java.lang.Integer\",\"right\":\"param2\"}],\"returnType\":\"java.lang.String\"}]}", false, Constants.SYS_DEFAULT_NAMESPACE_ID);
         tarsMetaDataHandler = new TarsMetaDataHandler();
     }
 

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/util/PrxInfoUtilTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.tars.util;
 
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.MetaData;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -53,7 +54,7 @@ public void testGetParamClassThrowsClassNotFoundException() throws Exception {
     public void testGetPrxName() {
         final MetaData metaData = new MetaData("id", "appName", "contextPath", "/path",
                 "rpcType", "serviceName", "methodName", "parameterTypes",
-                "rpcExt", false);
+                "rpcExt", false, Constants.SYS_DEFAULT_NAMESPACE_ID);
         final String result = PrxInfoUtil.getPrxName(metaData);
         assertEquals("pathmethodNamePrx", result);
     }

File: shenyu-admin-listener/shenyu-admin-listener-api/src/main/java/org/apache/shenyu/admin/service/SyncDataService.java
Patch:
@@ -35,10 +35,9 @@ public interface SyncDataService {
     /**
      * Sync plugin data boolean.
      *
-     * @param pluginId    the plugin id
-     * @param namespaceId the namespace id
+     * @param id    the namespace plugin id
      * @return the boolean
      */
-    boolean syncPluginData(String pluginId, String namespaceId);
+    boolean syncPluginData(String id);
 
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/NamespacePluginRelDO.java
Patch:
@@ -169,18 +169,18 @@ public boolean equals(final Object o) {
      * @param namespacePluginDTO {@linkplain NamespacePluginDTO}
      * @return {@linkplain NamespacePluginRelDO}
      */
-    public static NamespacePluginRelDO buildPluginNsRelDO(final NamespacePluginDTO namespacePluginDTO) {
+    public static NamespacePluginRelDO buildNamespacePluginRelDO(final NamespacePluginDTO namespacePluginDTO) {
         return Optional.ofNullable(namespacePluginDTO).map(item -> {
             Timestamp currentTime = new Timestamp(System.currentTimeMillis());
-            NamespacePluginRelDO namespacePluginRelDO = NamespacePluginRelDO.builder()
+            return NamespacePluginRelDO.builder()
+                    .id(item.getId())
                     .config(item.getConfig())
                     .enabled(item.getEnabled())
                     .sort(item.getSort())
                     .namespaceId(item.getNamespaceId())
                     .pluginId(item.getPluginId())
                     .dateUpdated(currentTime)
                     .build();
-            return namespacePluginRelDO;
         }).orElse(null);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathWarpDTO.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.shenyu.admin.model.dto;
 
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotEmpty;
 import org.apache.shenyu.admin.mapper.AppAuthMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import jakarta.validation.Valid;
-import jakarta.validation.constraints.NotEmpty;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -117,6 +117,7 @@ public ShenyuAdminResult applyCreate(final AuthApplyDTO authApplyDTO) {
                 .appSecret(appAuthDO.getAppSecret())
                 .open(appAuthDO.getOpen())
                 .enabled(appAuthDO.getEnabled())
+                .namespaceId(appAuthDO.getNamespaceId())
                 .paramDataList(Lists.newArrayList(new AuthParamData(authParamDO.getAppName(), authParamDO.getAppParam())))
                 .build();
 
@@ -546,6 +547,7 @@ private AppAuthData buildByEntity(final AppAuthDO appAuthDO) {
                 .appSecret(appAuthDO.getAppSecret())
                 .open(appAuthDO.getOpen())
                 .enabled(appAuthDO.getEnabled())
+                .namespaceId(appAuthDO.getNamespaceId())
                 .build();
         List<AuthParamDO> authParamDOList = authParamMapper.findByAuthId(appAuthDO.getId());
         if (CollectionUtils.isNotEmpty(authParamDOList)) {
@@ -571,6 +573,7 @@ private AppAuthData buildByEntityWithParamAndPath(final AppAuthDO appAuthDO, fin
                 .appSecret(appAuthDO.getAppSecret())
                 .open(appAuthDO.getOpen())
                 .enabled(appAuthDO.getEnabled())
+                .namespaceId(appAuthDO.getNamespaceId())
                 .build();
         if (CollectionUtils.isNotEmpty(authParamDataList)) {
             data.setParamDataList(authParamDataList);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/AppAuthTransfer.java
Patch:
@@ -56,6 +56,7 @@ public AppAuthDO mapToEntity(final AppAuthDTO appAuthDTO) {
                     appAuthDO.userId(v.getUserId());
                     appAuthDO.phone(v.getPhone());
                     appAuthDO.extInfo(v.getExtInfo());
+                    appAuthDO.namespaceId(v.getNamespaceId());
                     return appAuthDO.build();
                 })
                 .orElse(null);
@@ -79,6 +80,7 @@ public AppAuthVO mapToVO(final AppAuthDO appAuthDO) {
                     appAuthVO.setExtInfo(v.getExtInfo());
                     appAuthVO.setOpen(v.getOpen());
                     appAuthVO.setEnabled(appAuthDO.getEnabled());
+                    appAuthVO.setNamespaceId(appAuthDO.getNamespaceId());
                     appAuthVO.setDateUpdated(Optional.ofNullable(appAuthDO.getDateUpdated())
                             .map(u -> DateUtils.localDateTimeToString(u.toLocalDateTime()))
                             .orElse(null));

File: shenyu-admin-listener/shenyu-admin-listener-api/src/main/java/org/apache/shenyu/admin/listener/AbstractPathDataChangedListener.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.DiscoverySyncData;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -102,7 +103,7 @@ public void onDiscoveryUpstreamChanged(final List<DiscoverySyncData> changed, fi
             }
             // create or update
             createOrUpdate(upstreamPath, data);
-            LOG.info("[DataChangedListener] change discoveryUpstream path={}|data={}", upstreamPath, data);
+            LOG.info("[DataChangedListener] change discoveryUpstream path={}|data={}", upstreamPath, GsonUtils.getInstance().toJson(data));
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -63,7 +63,7 @@
  * Abstract strategy.
  */
 public abstract class AbstractShenyuClientRegisterServiceImpl extends FallbackShenyuClientRegisterService implements ShenyuClientRegisterService {
-
+    
     /**
      * The Event publisher.
      */

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/GrpcClientCache.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.plugin.grpc.cache;
 
 import com.google.common.collect.Maps;
-import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.plugin.grpc.client.GrpcClientBuilder;
 import org.apache.shenyu.plugin.grpc.client.ShenyuGrpcClient;
 
@@ -51,7 +50,7 @@ private GrpcClientCache() {
      * @param selectorId selectorId
      */
     public static void initGrpcClient(final String selectorId) {
-        MapUtils.computeIfAbsent(CLIENT_CACHE, selectorId, s -> GrpcClientBuilder.buildClient(selectorId));
+        CLIENT_CACHE.putIfAbsent(selectorId, GrpcClientBuilder.buildClient(selectorId));
     }
     
     /**

File: shenyu-sync-data-center/shenyu-sync-data-etcd/src/main/java/org/apache/shenyu/sync/data/etcd/EtcdSyncDataService.java
Patch:
@@ -85,9 +85,11 @@ private void watcherData0(final String registerPath) {
                     final String nodeData = etcdClient.get(updatePath);
                     super.event(updatePath, nodeData, registerPath, EventType.PUT);
                 });
+            } else {
+                LOG.info("etcd watcher path {} is empty", registerPath);
             }
         } catch (Exception e) {
-            LOG.error(e.getMessage(), e);
+            LOG.error("watcherData0 errors", e);
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/NamespaceDTO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
+import jakarta.validation.constraints.Max;
 import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 
@@ -35,12 +36,14 @@ public class NamespaceDTO implements Serializable {
     /**
      * namespace name.
      */
+    @Max(value = 255, message = "The maximum length is 255")
     @NotNull(message = "namespace name not null")
     private String name;
 
     /**
      * namespace description.
      */
+    @Max(value = 255, message = "The maximum length is 255")
     @NotNull(message = "namespace description not null")
     private String description;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SelectorService.java
Patch:
@@ -168,9 +168,10 @@ default int createOrUpdate(SelectorDTO selectorDTO) {
      *
      * @param name        name
      * @param pluginNames pluginNames
+     * @param namespaceId namespaceId
      * @return selectorDO list
      */
-    List<SelectorDO> findByNameAndPluginNames(String name, List<String> pluginNames);
+    List<SelectorDO> findByNameAndPluginNamesAndNamespaceId(String name, List<String> pluginNames, String namespaceId);
 
     /**
      * Build selector data by name and namespaceId.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java
Patch:
@@ -179,7 +179,7 @@ private void removeRegister(final ApiDO apiDO) {
                     .collect(Collectors.toList()), SYS_DEFAULT_NAMESPACE_ID);
         }
         //clean selector
-        List<SelectorDO> selectorDOList = selectorService.findByNameAndPluginNames(apiDO.getContextPath(), PluginEnum.getUpstreamNames());
+        List<SelectorDO> selectorDOList = selectorService.findByNameAndPluginNamesAndNamespaceId(apiDO.getContextPath(), PluginEnum.getUpstreamNames(), SYS_DEFAULT_NAMESPACE_ID);
         ArrayList<String> selectorIds = Lists.newArrayList();
         Optional.ofNullable(selectorDOList).orElseGet(ArrayList::new).stream().forEach(selectorDO -> {
             final String selectorId = selectorDO.getId();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -368,7 +368,7 @@ public SelectorDO findByNameAndPluginNameAndNamespaceIdForUpdate(final String na
     }
 
     @Override
-    public List<SelectorDO> findByNameAndPluginNames(final String name, final List<String> pluginNames) {
+    public List<SelectorDO> findByNameAndPluginNamesAndNamespaceId(final String name, final List<String> pluginNames, final String namespaceID) {
         final List<PluginDO> pluginDOList = pluginMapper.selectByNames(pluginNames);
         if (CollectionUtils.isEmpty(pluginDOList)) {
             return Lists.newArrayList();
@@ -377,6 +377,7 @@ public List<SelectorDO> findByNameAndPluginNames(final String name, final List<S
         SelectorQuery selectorQuery = new SelectorQuery();
         selectorQuery.setName(name);
         selectorQuery.setPluginIds(pluginIds);
+        selectorQuery.setNamespaceId(namespaceID);
         return selectorMapper.selectByQuery(selectorQuery);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/LoadServiceDocEntryImpl.java
Patch:
@@ -53,6 +53,8 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Service;
 
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
+
 /**
  * Load Service Doc Entry.
  */
@@ -178,7 +180,7 @@ private List<UpstreamInstance> getAllClusterLastUpdateInstanceList() {
         }
         supportSwaggerPluginSet = new HashSet<>(pluginNames);
         List<String> pluginIds = pluginDOList.stream().map(PluginDO::getId).collect(Collectors.toList());
-        CommonPager<SelectorVO> commonPager = selectorService.listByPage(new SelectorQuery(pluginIds, null, new PageParameter(1, Integer.MAX_VALUE)));
+        CommonPager<SelectorVO> commonPager = selectorService.listByPage(new SelectorQuery(pluginIds, null, new PageParameter(1, Integer.MAX_VALUE), SYS_DEFAULT_NAMESPACE_ID));
         List<SelectorVO> clusterList = commonPager.getDataList();
         if (CollectionUtils.isEmpty(clusterList)) {
             LOG.info("getAllClusterLastUpdateInstanceList. Not loaded into available backend services.");

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorMapperTest.java
Patch:
@@ -84,7 +84,7 @@ public void testSelectByQuery() {
         int insert = selectorMapper.insert(selectorDO);
         assertEquals(1, insert);
 
-        SelectorQuery query = new SelectorQuery(selectorDO.getPluginId(), selectorDO.getName(), new PageParameter());
+        SelectorQuery query = new SelectorQuery(selectorDO.getPluginId(), selectorDO.getName(), new PageParameter(), SYS_DEFAULT_NAMESPACE_ID);
         List<SelectorDO> list = selectorMapper.selectByQuery(query);
         assertNotNull(list);
         assertEquals(list.size(), 1);
@@ -129,7 +129,7 @@ public void testCountByQuery() {
         int insert = selectorMapper.insert(selectorDO);
         assertEquals(1, insert);
 
-        SelectorQuery query = new SelectorQuery(selectorDO.getPluginId(), selectorDO.getName(), new PageParameter());
+        SelectorQuery query = new SelectorQuery(selectorDO.getPluginId(), selectorDO.getName(), new PageParameter(), SYS_DEFAULT_NAMESPACE_ID);
         Integer count = selectorMapper.countByQuery(query);
         assertNotNull(count);
         assertEquals(Integer.valueOf(1), count);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DataPermissionServiceTest.java
Patch:
@@ -124,7 +124,7 @@ public void assertDeleteSelector() {
 
     @Test
     public void assertListSelectorsByPage() {
-        SelectorQuery selectorQuery = new SelectorQuery("1", null, new PageParameter(1, 10));
+        SelectorQuery selectorQuery = new SelectorQuery("1", null, new PageParameter(1, 10), SYS_DEFAULT_NAMESPACE_ID);
         given(selectorMapper.countByQuery(selectorQuery)).willReturn(100);
         given(selectorMapper.selectByQuery(selectorQuery)).willReturn(Collections.singletonList(SelectorDO.buildSelectorDO(selectorDTO)));
         given(dataPermissionMapper.selectDataIds(Collections.singletonList("1"), "1001", 0)).willReturn(Collections.singletonList("1"));

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/AdminConstants.java
Patch:
@@ -70,7 +70,7 @@ public final class AdminConstants {
     /**
      * The constant SYS_DEFAULT_NAMESPACE_ID_DELETE.
      */
-    public static final String SYS_DEFAULT_NAMESPACE_ID_DELETE = "The default namespace can't deleted！";
+    public static final String SYS_DEFAULT_NAMESPACE_ID_DELETE = "The default namespace cannot delete！";
 
     /**
      * The constant SYS_API_ID_NOT_EXIST.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/websocket/WebsocketDataChangedListener.java
Patch:
@@ -82,9 +82,9 @@ public void onProxySelectorChanged(final List<ProxySelectorData> proxySelectorDa
     }
 
     @Override
-    public void onDiscoveryUpstreamChanged(final List<DiscoverySyncData> discoeryUpstreamList, final DataEventTypeEnum eventType) {
+    public void onDiscoveryUpstreamChanged(final List<DiscoverySyncData> discoveryUpstreamList, final DataEventTypeEnum eventType) {
         WebsocketData<DiscoverySyncData> configData =
-                new WebsocketData<>(ConfigGroupEnum.DISCOVER_UPSTREAM.name(), eventType.name(), discoeryUpstreamList);
+                new WebsocketData<>(ConfigGroupEnum.DISCOVER_UPSTREAM.name(), eventType.name(), discoveryUpstreamList);
         WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/handle/PluginHandleChangedEvent.java
Patch:
@@ -34,7 +34,7 @@ public class PluginHandleChangedEvent extends AdminDataModelChangedEvent {
      * Create a new {@code PluginChangedEvent}.operator is unknown.
      *
      * @param source   Current plugin state
-     * @param before   Before the change plugiin state
+     * @param before   Before the change plugin state
      * @param type     event type
      * @param operator operator
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/metadata/MetaDataChangedEvent.java
Patch:
@@ -34,7 +34,7 @@ public class MetaDataChangedEvent extends AdminDataModelChangedEvent {
      * Create a new {@code PluginChangedEvent}.operator is unknown.
      *
      * @param source   Current plugin state
-     * @param before   Before the change plugiin state
+     * @param before   Before the change plugin state
      * @param type     event type
      * @param operator operator
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AlertReceiverServiceImpl.java
Patch:
@@ -58,7 +58,7 @@ public AlertReceiverServiceImpl(final AlertReceiverMapper alertReceiverMapper,
 
     @Override
     public void addReceiver(final AlertReceiverDTO alertReceiverDTO) {
-        AlertReceiverDO receiverDO = AlertTransfer.INSTANCE.mapToAlertReciverDO(alertReceiverDTO);
+        AlertReceiverDO receiverDO = AlertTransfer.INSTANCE.mapToAlertReceiverDO(alertReceiverDTO);
         receiverDO.setId(UUIDUtils.getInstance().generateShortUuid());
         Timestamp currentTime = new Timestamp(System.currentTimeMillis());
         receiverDO.setDateCreated(currentTime);
@@ -75,7 +75,7 @@ public void deleteReceiver(final List<String> ids) {
     
     @Override
     public void updateReceiver(final AlertReceiverDTO alertReceiverDTO) {
-        AlertReceiverDO receiverDO = AlertTransfer.INSTANCE.mapToAlertReciverDO(alertReceiverDTO);
+        AlertReceiverDO receiverDO = AlertTransfer.INSTANCE.mapToAlertReceiverDO(alertReceiverDTO);
         alertDispatchService.clearCache();
         alertReceiverMapper.updateByPrimaryKey(receiverDO);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/AlertTransfer.java
Patch:
@@ -38,7 +38,7 @@ public enum AlertTransfer {
      * @param alertReceiverDTO the alert receiver dto
      * @return the alert receiver do
      */
-    public AlertReceiverDO mapToAlertReciverDO(final AlertReceiverDTO alertReceiverDTO) {
+    public AlertReceiverDO mapToAlertReceiverDO(final AlertReceiverDTO alertReceiverDTO) {
         return Optional.ofNullable(alertReceiverDTO)
                 .map(v -> {
                     AlertReceiverDO alertReceiverDO = new AlertReceiverDO();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/AlertReceiverServiceTest.java
Patch:
@@ -128,7 +128,7 @@ public void testSendTestMsg() {
     }
 
     private AlertReceiverDO buildAlertReceiverDO(final String id) {
-        AlertReceiverDO alertReceiverDO = AlertTransfer.INSTANCE.mapToAlertReciverDO(buildAlertReceiverDTO(id));
+        AlertReceiverDO alertReceiverDO = AlertTransfer.INSTANCE.mapToAlertReceiverDO(buildAlertReceiverDTO(id));
         Timestamp now = Timestamp.valueOf(LocalDateTime.now());
         alertReceiverDO.setDateCreated(now);
         alertReceiverDO.setDateUpdated(now);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/transfer/AlertTransferTest.java
Patch:
@@ -102,7 +102,7 @@ public void setUp() {
 
     @Test
     void testMapToEntity() {
-        AlertReceiverDO entity = AlertTransfer.INSTANCE.mapToAlertReciverDO(alertReceiverDTO);
+        AlertReceiverDO entity = AlertTransfer.INSTANCE.mapToAlertReceiverDO(alertReceiverDTO);
         assertNotNull(entity);
         assertEquals(entity.getId(), alertReceiverDTO.getId());
         assertEquals(entity.getName(), alertReceiverDTO.getName());

File: shenyu-registry/shenyu-registry-zookeeper/src/main/java/org/apache/shenyu/registry/zookeeper/ZookeeperClient.java
Patch:
@@ -137,7 +137,7 @@ public String getDirectly(final String key) {
      * @return value.
      */
     public String get(final String key) {
-        TreeCache cache = findFromcache(key);
+        TreeCache cache = findFromCache(key);
         if (Objects.isNull(cache)) {
             return getDirectly(key);
         }
@@ -257,7 +257,7 @@ public List<String> subscribeChildrenChanges(final String key, final CuratorWatc
      * @param key key.
      * @return cache.
      */
-    private TreeCache findFromcache(final String key) {
+    private TreeCache findFromCache(final String key) {
         for (Map.Entry<String, TreeCache> cache : caches.entrySet()) {
             if (key.startsWith(cache.getKey())) {
                 return cache.getValue();

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuExtPathPluginJarLoader.java
Patch:
@@ -61,7 +61,7 @@ public static synchronized List<PluginJarParser.PluginJar> loadExtendPlugins(fin
         }
         Sets.SetView<String> removePluginSet = Sets.difference(pluginJarName, currentPaths);
         for (String removePath : removePluginSet) {
-            ShenyuPluginClassloaderHolder.getSingleton().removePluginClassLoader(removePath);
+            ShenyuPluginClassLoaderHolder.getSingleton().removePluginClassLoader(removePath);
         }
         pluginJarName = currentPaths;
         return uploadPluginJars;

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuLoaderService.java
Patch:
@@ -76,7 +76,7 @@ public ShenyuLoaderService(final ShenyuWebHandler webHandler, final CommonPlugin
     public void loadExtOrUploadPlugins(final PluginData uploadedJarResource) {
         try {
             List<ShenyuLoaderResult> plugins = new ArrayList<>();
-            ShenyuPluginClassloaderHolder singleton = ShenyuPluginClassloaderHolder.getSingleton();
+            ShenyuPluginClassLoaderHolder singleton = ShenyuPluginClassLoaderHolder.getSingleton();
             if (Objects.isNull(uploadedJarResource)) {
                 List<PluginJarParser.PluginJar> uploadPluginJars = ShenyuExtPathPluginJarLoader.loadExtendPlugins(shenyuConfig.getExtPlugin().getPath());
                 for (PluginJarParser.PluginJar extPath : uploadPluginJars) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/metadata/BatchMetaDataChangedEvent.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Collection;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * BatchMetaDataChangedEvent.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/rule/BatchRuleDeletedEvent.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * BatchRuleDeletedEvent.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/selector/BatchSelectorDeletedEvent.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * BatchPluginDeletedEvent.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java
Patch:
@@ -63,7 +63,7 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * Implementation of the {@link org.apache.shenyu.admin.service.ApiService}.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DataPermissionServiceImpl.java
Patch:
@@ -52,7 +52,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * Implementation of the {@link org.apache.shenyu.admin.service.DataPermissionService}.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DiscoveryServiceImpl.java
Patch:
@@ -63,7 +63,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 @Service
 public class DiscoveryServiceImpl implements DiscoveryService {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/NamespaceServiceImpl.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.shenyu.admin.transfer.NamespaceTransfer;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.constant.AdminConstants;
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.NamespaceIDUtils;
 import org.apache.shenyu.common.utils.UUIDUtils;
@@ -80,7 +81,7 @@ public CommonPager<NamespaceVO> listByPage(final NamespaceQuery namespaceQuery)
 
     @Override
     public String delete(final List<String> ids) {
-        if (ids.contains(AdminConstants.DEFAULT_NAMESPACE_PRIMARY_KEY)) {
+        if (ids.contains(Constants.DEFAULT_NAMESPACE_PRIMARY_KEY)) {
             return AdminConstants.SYS_DEFAULT_NAMESPACE_ID_DELETE;
         }
         List<NamespaceDO> namespaceDOS = namespaceMapper.selectByIds(ids);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -90,7 +90,7 @@
 import java.util.TreeSet;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * Implementation of the {@link org.apache.shenyu.admin.service.SelectorService}.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SyncDataServiceImpl.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * Implementation of the {@link org.apache.shenyu.admin.service.SyncDataService}.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -76,7 +76,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * This is the upstream check service.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/publish/NamespacePluginEventPublisher.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * NamespacePluginEventPublisher.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -57,7 +57,7 @@
 import java.util.Objects;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * Abstract strategy.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImpl.java
Patch:
@@ -48,7 +48,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * spring mvc http service register.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImpl.java
Patch:
@@ -48,7 +48,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * grpc service register.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterWebSocketServiceImpl.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
 import org.springframework.stereotype.Service;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * spring mvc websocket service register.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MetaDataControllerTest.java
Patch:
@@ -55,7 +55,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/RuleControllerTest.java
Patch:
@@ -56,7 +56,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SelectorControllerTest.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.BDDMockito.given;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MetaDataMapperTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.comparesEqualTo;
 import static org.hamcrest.Matchers.hasItems;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RuleMapperTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 import java.util.Random;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorMapperTest.java
Patch:
@@ -31,13 +31,12 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.hasItems;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-
 /**
  * Test Cases for SelectorMapper.
  */

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/metadata/BatchMetaDataChangedEventTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/metadata/BatchMetaDataDeletedEventTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/metadata/MetaDataChangedEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/metadata/MetaDataCreatedEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/metadata/MetadataUpdatedEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/selector/BatchSelectorDeletedEventTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DataPermissionServiceTest.java
Patch:
@@ -45,7 +45,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.ArgumentMatchers.any;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/MetaDataServiceTest.java
Patch:
@@ -53,7 +53,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/PluginServiceTest.java
Patch:
@@ -54,7 +54,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/RuleServiceTest.java
Patch:
@@ -64,7 +64,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SelectorServiceTest.java
Patch:
@@ -72,7 +72,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.notNullValue;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SyncDataServiceTest.java
Patch:
@@ -39,7 +39,7 @@
 import java.time.LocalDateTime;
 import java.util.Collections;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.mockito.BDDMockito.given;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/manager/impl/LoadServiceDocEntryImplTest.java
Patch:
@@ -48,7 +48,7 @@
 import java.util.Set;
 import java.util.Collections;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.verify;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImplTest.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doReturn;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doReturn;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImplTest.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.Constants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doReturn;

File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/dto/MetaDataRegisterDTO.java
Patch:
@@ -781,7 +781,6 @@ public Builder addPrefixed(final boolean addPrefixed) {
             return this;
         }
 
-
         /**
          * namespaceId.
          *

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-apache-dubbo/src/main/java/org/apache/shenyu/springboot/starter/client/apache/dubbo/ShenyuApacheDubboClientConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.springboot.starter.client.apache.dubbo;
 
 import org.apache.shenyu.client.apache.dubbo.ApacheDubboServiceBeanListener;
-import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.VersionUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
@@ -50,6 +49,6 @@ public class ShenyuApacheDubboClientConfiguration {
     @Bean
     public ApacheDubboServiceBeanListener apacheDubboServiceBeanListener(final ShenyuClientConfig clientConfig,
                                                                          final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        return new ApacheDubboServiceBeanListener(clientConfig.getClient().get(RpcTypeEnum.DUBBO.getName()), shenyuClientRegisterRepository);
+        return new ApacheDubboServiceBeanListener(clientConfig, shenyuClientRegisterRepository);
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-grpc/src/main/java/org/apache/springboot/starter/client/grpc/ShenyuGrpcClientConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public GrpcClientEventListener grpcClientEventListener(final ShenyuClientConfig
         if (props != null) {
             props.setProperty(ShenyuClientConstants.DISCOVERY_LOCAL_MODE_KEY, Boolean.valueOf(ShenyuClientConstants.DISCOVERY_LOCAL_MODE.equals(discoveryMode)).toString());
         }
-        return new GrpcClientEventListener(clientConfig.getClient().get(RpcTypeEnum.GRPC.getName()), shenyuClientRegisterRepository);
+        return new GrpcClientEventListener(clientConfig, shenyuClientRegisterRepository);
     }
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-motan/src/main/java/org/apache/shenyu/springboot/starter/client/motan/ShenyuMotanClientConfiguration.java
Patch:
@@ -24,7 +24,6 @@
 import com.weibo.api.motan.config.springsupport.RegistryConfigBean;
 import com.weibo.api.motan.util.MotanSwitcherUtil;
 import org.apache.shenyu.client.motan.MotanServiceEventListener;
-import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.VersionUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
@@ -61,7 +60,7 @@ public class ShenyuMotanClientConfiguration implements ApplicationListener<Conte
      */
     @Bean
     public MotanServiceEventListener motanServiceEventListener(final ShenyuClientConfig clientConfig, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        return new MotanServiceEventListener(clientConfig.getClient().get(RpcTypeEnum.MOTAN.getName()), shenyuClientRegisterRepository);
+        return new MotanServiceEventListener(clientConfig, shenyuClientRegisterRepository);
     }
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-sofa/src/main/java/org/apache/shenyu/springboot/starter/client/sofa/ShenyuSofaClientConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.springboot.starter.client.sofa;
 
 import org.apache.shenyu.client.sofa.SofaServiceEventListener;
-import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.VersionUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
@@ -49,6 +48,6 @@ public class ShenyuSofaClientConfiguration {
      */
     @Bean
     public SofaServiceEventListener sofaServiceEventListener(final ShenyuClientConfig clientConfig, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        return new SofaServiceEventListener(clientConfig.getClient().get(RpcTypeEnum.SOFA.getName()), shenyuClientRegisterRepository);
+        return new SofaServiceEventListener(clientConfig, shenyuClientRegisterRepository);
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-spring-websocket/src/main/java/org/apache/shenyu/springboot/starter/client/spring/websocket/ShenyuSpringWebSocketClientConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public SpringWebSocketClientEventListener springWebSocketClientEventListener(
         if (props != null) {
             props.setProperty(ShenyuClientConstants.DISCOVERY_LOCAL_MODE_KEY, Boolean.valueOf(ShenyuClientConstants.DISCOVERY_LOCAL_MODE.equals(discoveryMode)).toString());
         }
-        return new SpringWebSocketClientEventListener(clientConfig.getClient().get(RpcTypeEnum.WEB_SOCKET.getName()), shenyuClientRegisterRepository);
+        return new SpringWebSocketClientEventListener(clientConfig, shenyuClientRegisterRepository);
     }
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springcloud/src/main/java/org/apache/shenyu/springboot/starter/client/springcloud/ShenyuSpringCloudClientConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shenyu.client.auto.config.ClientRegisterConfiguration;
 import org.apache.shenyu.client.springcloud.init.SpringCloudClientEventListener;
-import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.VersionUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
@@ -56,6 +55,6 @@ public class ShenyuSpringCloudClientConfiguration {
     public SpringCloudClientEventListener springCloudClientEventListener(final ShenyuClientConfig clientConfig,
                                                                         final ShenyuClientRegisterRepository shenyuClientRegisterRepository,
                                                                         final Environment env) {
-        return new SpringCloudClientEventListener(clientConfig.getClient().get(RpcTypeEnum.SPRING_CLOUD.getName()), shenyuClientRegisterRepository, env);
+        return new SpringCloudClientEventListener(clientConfig, shenyuClientRegisterRepository, env);
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-tars/src/main/java/org/apache/shenyu/springboot/starter/client/tars/ShenyuTarsClientConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.springboot.starter.client.tars;
 
 import org.apache.shenyu.client.tars.TarsServiceBeanEventListener;
-import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.VersionUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
@@ -49,6 +48,6 @@ public class ShenyuTarsClientConfiguration {
      */
     @Bean
     public TarsServiceBeanEventListener tarsServiceBeanEventListener(final ShenyuClientConfig clientConfig, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        return new TarsServiceBeanEventListener(clientConfig.getClient().get(RpcTypeEnum.TARS.getName()), shenyuClientRegisterRepository);
+        return new TarsServiceBeanEventListener(clientConfig, shenyuClientRegisterRepository);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/shiro/config/ShiroRealm.java
Patch:
@@ -102,7 +102,9 @@ protected AuthenticationInfo doGetAuthenticationInfo(final AuthenticationToken a
         }
 
         String clientIdFromToken = JwtUtils.getClientId(token);
-        if (StringUtils.isNotEmpty(dashboardUserVO.getClientId()) && !StringUtils.equals(dashboardUserVO.getClientId(), clientIdFromToken)) {
+        if (StringUtils.isNotEmpty(clientIdFromToken)
+                && StringUtils.isNotEmpty(dashboardUserVO.getClientId())
+                && !StringUtils.equals(dashboardUserVO.getClientId(), clientIdFromToken)) {
             throw new AuthenticationException("clientId is invalid or does not match");
         }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/DiscoveryMapper.java
Patch:
@@ -49,7 +49,7 @@ public interface DiscoveryMapper extends ExistProvider {
     DiscoveryDO selectById(String id);
 
     /**
-     * selectAll.
+     * selectAllByNamespaceId.
      *
      * @return discoveryDOList
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/DiscoveryUpstreamMapper.java
Patch:
@@ -38,15 +38,15 @@ public interface DiscoveryUpstreamMapper extends ExistProvider {
     Boolean existed(@Param("id") Serializable key);
 
     /**
-     * selectByIds.
+     * selectByIdsAndNamespaceId.
      *
      * @param ids id list
      * @return discoveryUpstreamDO list
      */
     List<DiscoveryUpstreamDO> selectByIds(@Param("ids") List<String> ids);
 
     /**
-     * selectAll.
+     * selectAllByNamespaceId.
      *
      * @return discoveryUpstreamDO list
      */
@@ -102,7 +102,7 @@ public interface DiscoveryUpstreamMapper extends ExistProvider {
     int updateSelective(DiscoveryUpstreamDO discoveryUpstreamDO);
 
     /**
-     * deleteByIds.
+     * deleteByIdsAndNamespaceId.
      *
      * @param ids id list
      * @return rows int

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/NamespaceMapper.java
Patch:
@@ -59,7 +59,7 @@ public interface NamespaceMapper extends ExistProvider {
 
 
     /**
-     * selectAll.
+     * selectAllByNamespaceId.
      *
      * @param name name.
      * @return namespaceDOList

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/RuleMapper.java
Patch:
@@ -44,12 +44,13 @@ public interface RuleMapper extends ExistProvider {
     Boolean existed(@Param("id") Serializable id);
 
     /**
-     * select rule by id.
+     * select rule by id and namespaceId.
      *
      * @param id primary key.
+     * @param namespaceId namespaceId.
      * @return {@linkplain RuleDO}
      */
-    RuleDO selectById(String id);
+    RuleDO selectByIdAndNamespaceId(String id, String namespaceId);
 
     /**
      * select rule by query.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/TagMapper.java
Patch:
@@ -119,7 +119,7 @@ public interface TagMapper extends ExistProvider {
     int deleteAllData();
 
     /**
-     * selectByIds.
+     * selectByIdsAndNamespaceId.
      * @param list ids
      * @return List
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/rule/RuleChangedEvent.java
Patch:
@@ -46,9 +46,9 @@ public RuleChangedEvent(final RuleDO source, final RuleDO before, final EventTyp
     public String buildContext() {
         final RuleDO after = (RuleDO) getAfter();
         if (Objects.isNull(getBefore())) {
-            return String.format("the rule [%s] is %s", after.getName(), StringUtils.lowerCase(getType().getType().toString()));
+            return String.format("the namespace [%s] rule [%s] is %s", after.getNamespaceId(), after.getName(), StringUtils.lowerCase(getType().getType().toString()));
         }
-        return String.format("the rule [%s] is %s : %s", after.getName(), StringUtils.lowerCase(getType().getType().toString()), contrast());
+        return String.format("the namespace [%s] rule [%s] is %s : %s", after.getNamespaceId(), after.getName(), StringUtils.lowerCase(getType().getType().toString()), contrast());
         
     }
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImpl.java
Patch:
@@ -78,7 +78,7 @@ protected String ruleHandler() {
     protected void registerMetadata(final MetaDataRegisterDTO dto) {
         if (dto.isRegisterMetaData()) {
             MetaDataService metaDataService = getMetaDataService();
-            MetaDataDO exist = metaDataService.findByPath(dto.getPath());
+            MetaDataDO exist = metaDataService.findByPathAndNamespaceId(dto.getPath(), dto.getNamespaceId());
             metaDataService.saveOrUpdateMetaData(exist, dto);
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImpl.java
Patch:
@@ -64,7 +64,7 @@ protected String ruleHandler() {
     @Override
     protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         MetaDataService metaDataService = getMetaDataService();
-        MetaDataDO exist = metaDataService.findByPath(metaDataDTO.getPath());
+        MetaDataDO exist = metaDataService.findByPathAndNamespaceId(metaDataDTO.getPath(), metaDataDTO.getNamespaceId());
         metaDataService.saveOrUpdateMetaData(exist, metaDataDTO);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImpl.java
Patch:
@@ -55,7 +55,7 @@
  */
 @Service
 public class ShenyuClientRegisterGrpcServiceImpl extends AbstractShenyuClientRegisterServiceImpl {
-    
+
     private static final Logger LOG = LoggerFactory.getLogger(ShenyuClientRegisterGrpcServiceImpl.class);
 
     @Resource
@@ -82,7 +82,7 @@ protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         if (LOG.isDebugEnabled()) {
             LOG.debug("grpc register metadata:{}", GsonUtils.getInstance().toJson(metaDataDTO));
         }
-        MetaDataDO exist = metaDataService.findByPath(metaDataDTO.getPath());
+        MetaDataDO exist = metaDataService.findByPathAndNamespaceId(metaDataDTO.getPath(), metaDataDTO.getNamespaceId());
         metaDataService.saveOrUpdateMetaData(exist, metaDataDTO);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterMotanServiceImpl.java
Patch:
@@ -51,7 +51,7 @@ protected String ruleHandler() {
     @Override
     protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         MetaDataService metaDataService = getMetaDataService();
-        MetaDataDO exist = metaDataService.findByPath(metaDataDTO.getPath());
+        MetaDataDO exist = metaDataService.findByPathAndNamespaceId(metaDataDTO.getPath(), metaDataDTO.getNamespaceId());
         metaDataService.saveOrUpdateMetaData(exist, metaDataDTO);
     }
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSofaServiceImpl.java
Patch:
@@ -52,7 +52,7 @@ protected String ruleHandler() {
     @Override
     protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         MetaDataService metaDataService = getMetaDataService();
-        MetaDataDO exist = metaDataService.findByServiceNameAndMethodName(metaDataDTO.getServiceName(), metaDataDTO.getMethodName());
+        MetaDataDO exist = metaDataService.findByServiceNameAndMethodNameAndNamespaceId(metaDataDTO.getServiceName(), metaDataDTO.getMethodName(), metaDataDTO.getNamespaceId());
         metaDataService.saveOrUpdateMetaData(exist, metaDataDTO);
     }
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -65,7 +65,7 @@ protected String ruleHandler() {
     @Override
     protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         MetaDataService metaDataService = getMetaDataService();
-        MetaDataDO metaDataDO = metaDataService.findByPath(metaDataDTO.getPath());
+        MetaDataDO metaDataDO = metaDataService.findByPathAndNamespaceId(metaDataDTO.getPath(), metaDataDTO.getNamespaceId());
         metaDataService.saveOrUpdateMetaData(metaDataDO, metaDataDTO);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImpl.java
Patch:
@@ -63,7 +63,7 @@ protected String ruleHandler() {
     @Override
     protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         MetaDataService metaDataService = getMetaDataService();
-        MetaDataDO exist = metaDataService.findByServiceNameAndMethodName(metaDataDTO.getServiceName(), metaDataDTO.getMethodName());
+        MetaDataDO exist = metaDataService.findByServiceNameAndMethodNameAndNamespaceId(metaDataDTO.getServiceName(), metaDataDTO.getMethodName(), metaDataDTO.getNamespaceId());
         metaDataService.saveOrUpdateMetaData(exist, metaDataDTO);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterWebSocketServiceImpl.java
Patch:
@@ -71,7 +71,7 @@ protected String ruleHandler() {
     protected void registerMetadata(final MetaDataRegisterDTO dto) {
         if (dto.isRegisterMetaData()) {
             MetaDataService metaDataService = getMetaDataService();
-            MetaDataDO exist = metaDataService.findByPath(dto.getPath());
+            MetaDataDO exist = metaDataService.findByPathAndNamespaceId(dto.getPath(), dto.getNamespaceId());
             metaDataService.saveOrUpdateMetaData(exist, dto);
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/MetaDataTransfer.java
Patch:
@@ -57,6 +57,7 @@ public MetaDataDO mapToEntity(final MetaDataDTO metaDataDTO) {
                         .parameterTypes(dto.getParameterTypes())
                         .rpcExt(dto.getRpcExt())
                         .enabled(dto.getEnabled())
+                        .namespaceId(metaDataDTO.getNamespaceId())
                         .build())
                 .orElse(null);
     }
@@ -79,6 +80,7 @@ public MetaDataDO mapRegisterDTOToEntity(final MetaDataRegisterDTO metaDataDTO)
                         .parameterTypes(dto.getParameterTypes())
                         .rpcExt(dto.getRpcExt())
                         .enabled(dto.isEnabled())
+                        .namespaceId(dto.getNamespaceId())
                         .build())
                 .orElse(null);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ResourceMapperTest.java
Patch:
@@ -155,7 +155,7 @@ public void testUpdateSelective() {
     @Test
     public void testSelectAll() {
         List<ResourceDO> resourceDOS = resourceMapper.selectAll();
-        // for init schema resource insert, only assert resourceMapper.selectAll() result not null
+        // for init schema resource insert, only assert resourceMapper.selectAllByNamespaceId() result not null
         assertTrue(CollectionUtils.isNotEmpty(resourceDOS));
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/metadata/MetaDataChangedEventTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
@@ -44,6 +45,7 @@ public void setUp() {
                 .parameterTypes("java.lang.String")
                 .rpcExt("test")
                 .enabled(true)
+                .namespaceId(SYS_DEFAULT_NAMESPACE_ID)
                 .build();
     }
 
@@ -52,7 +54,7 @@ public void metaDataDeleteContextTest() {
         MetaDataChangedEvent deleteEvent =
                 new MetaDataChangedEvent(createDO, null, EventTypeEnum.META_DATA_DELETE, "test-operator");
 
-        String context = String.format("the metadata [%s %s] is %s",
+        String context = String.format("the namespace [%s] metadata [%s %s] is %s", createDO.getNamespaceId(),
                 createDO.getAppName(), createDO.getPath(), StringUtils.lowerCase(EventTypeEnum.META_DATA_DELETE.getType().toString()));
 
         assertEquals(context, deleteEvent.buildContext());

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/metadata/MetaDataCreatedEventTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 
@@ -46,6 +47,7 @@ public void setUp() {
                 .parameterTypes("java.lang.String")
                 .rpcExt("test")
                 .enabled(true)
+                .namespaceId(SYS_DEFAULT_NAMESPACE_ID)
                 .build();
     }
 
@@ -54,7 +56,7 @@ public void metaDataCreateContextTest() {
         MetaDataChangedEvent createdEvent =
                 new MetaDataChangedEvent(createDO, null, EventTypeEnum.META_DATA_CREATE, "test-operator");
 
-        String context = String.format("the metadata [%s %s] is %s",
+        String context = String.format("the namespace [%s] metadata [%s %s] is %s", createDO.getNamespaceId(),
                 createDO.getAppName(), createDO.getPath(), StringUtils.lowerCase(EventTypeEnum.META_DATA_CREATE.getType().toString()));
 
         assertEquals(context, createdEvent.buildContext());

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DataPermissionServiceTest.java
Patch:
@@ -45,6 +45,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.ArgumentMatchers.any;
@@ -78,7 +79,7 @@ public final class DataPermissionServiceTest {
 
     @BeforeEach
     public void setup() {
-        ruleDTO = new RuleDTO("1", "1", 1, "test", true, true, 1, "test", null, false);
+        ruleDTO = new RuleDTO("1", "1", 1, "test", true, true, 1, "test", null, false, SYS_DEFAULT_NAMESPACE_ID);
         dataPermissionDTO = new DataPermissionDTO();
         dataPermissionDTO.setId("1");
         dataPermissionDTO.setUserId("1001");
@@ -143,7 +144,7 @@ public void assertListRulesByPage() {
 
     @Test
     public void assertCreateRule() {
-        given(ruleMapper.selectById("1")).willReturn(RuleDO.buildRuleDO(ruleDTO));
+        given(ruleMapper.selectByIdAndNamespaceId("1", SYS_DEFAULT_NAMESPACE_ID)).willReturn(RuleDO.buildRuleDO(ruleDTO));
         given(dataPermissionMapper.insertSelective(any(DataPermissionDO.class))).willReturn(1);
         assertThat(dataPermissionService.createRule(dataPermissionDTO), is(2));
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImplTest.java
Patch:
@@ -92,7 +92,7 @@ public void testRuleHandler() {
     @Test
     public void testRegisterMetadata() {
         MetaDataDO metaDataDO = MetaDataDO.builder().build();
-        when(metaDataService.findByPath(any())).thenReturn(metaDataDO);
+        when(metaDataService.findByPathAndNamespaceId(any(), any())).thenReturn(metaDataDO);
         MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().registerMetaData(true).build();
         shenyuClientRegisterDivideService.registerMetadata(metaDataDTO);
         verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImplTest.java
Patch:
@@ -83,7 +83,7 @@ public void testRuleHandler() {
     @Test
     public void testRegisterMetadata() {
         MetaDataDO metaDataDO = MetaDataDO.builder().build();
-        when(metaDataService.findByPath(any())).thenReturn(metaDataDO);
+        when(metaDataService.findByPathAndNamespaceId(any(), any())).thenReturn(metaDataDO);
         MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().registerMetaData(true).build();
         shenyuClientRegisterDubboService.registerMetadata(metaDataDTO);
         verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterMotanServiceImplTest.java
Patch:
@@ -73,7 +73,7 @@ public void testRuleHandler() {
     @Test
     public void testRegisterMetadata() {
         MetaDataDO metaDataDO = MetaDataDO.builder().build();
-        when(metaDataService.findByPath(any())).thenReturn(metaDataDO);
+        when(metaDataService.findByPathAndNamespaceId(any(), any())).thenReturn(metaDataDO);
         MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().build();
         shenyuClientRegisterMotanService.registerMetadata(metaDataDTO);
         verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSofaServiceImplTest.java
Patch:
@@ -74,7 +74,7 @@ public void testRuleHandler() {
     @Test
     public void testRegisterMetadata() {
         MetaDataDO metaDataDO = MetaDataDO.builder().build();
-        when(metaDataService.findByServiceNameAndMethodName(any(), any())).thenReturn(metaDataDO);
+        when(metaDataService.findByServiceNameAndMethodNameAndNamespaceId(any(), any(), any())).thenReturn(metaDataDO);
         MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().build();
         shenyuClientRegisterSofaService.registerMetadata(metaDataDTO);
         verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterWebSocketServiceImplTest.java
Patch:
@@ -42,9 +42,9 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 /**
  * Test cases for ShenyuClientRegisterWebSocketServiceImpl.
@@ -81,7 +81,7 @@ public void testRuleHandler() {
     @Test
     public void testRegisterMetadata() {
         MetaDataDO metaDataDO = MetaDataDO.builder().build();
-        when(metaDataService.findByPath(any())).thenReturn(metaDataDO);
+        when(metaDataService.findByPathAndNamespaceId(any(), any())).thenReturn(metaDataDO);
         MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().registerMetaData(true).build();
         shenyuClientRegisterWebSocketService.registerMetadata(metaDataDTO);
         verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/AdminClient.java
Patch:
@@ -277,6 +277,7 @@ public SearchedResources<RuleDTO> searchRules(final String keyword, final String
         RuleQueryCondition condition = RuleQueryCondition.builder()
                 .keyword(keyword)
                 .selectors(selectors)
+                .namespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID)
                 .switchStatus(true)
                 .build();
         return search("/rule/list/search", condition, SEARCHED_RULES_TYPE_REFERENCE);
@@ -333,6 +334,7 @@ public SelectorDTO create(final SelectorData selector) {
      * @return RuleDTO
      */
     public RuleDTO create(final RuleData rule) {
+        rule.setNamespaceId(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID);
         RuleDTO dto = create("/rule", rule);
         Rules.INSTANCE.put(rule.getName(), dto.getId());
         return dto;

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/ListUtil.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.common.utils;
 
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.ListUtils;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -185,8 +186,7 @@ public static <T> Set<T> mergeSet(final Set<T> set1, final Set<T> set2) {
      * @return list1
      */
     public static <T> List<T> merge(final List<T> list1, final List<T> list2) {
-        list1.addAll(list2);
-        return list1;
+        return ListUtils.union(list1, list2);
     }
     
     /**

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MetaDataCache.java
Patch:
@@ -124,7 +124,7 @@ public MetaData obtain(final String path) {
                 .orElseGet(() -> {
                     final MetaData value = META_DATA_MAP.values()
                             .stream()
-                            .filter(data -> PathMatchUtils.match(data.getPath(), path))
+                            .filter(data -> data.getEnabled() && PathMatchUtils.match(data.getPath(), path))
                             .findFirst()
                             .orElse(null);
                     final String metaPath = Optional.ofNullable(value)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginServiceImpl.java
Patch:
@@ -370,7 +370,7 @@ private boolean checkFile(final byte[] file) {
                 return false;
             }
             Set<String> dependencyTree = JarDependencyUtils.getDependencyTree(file);
-            return dependencyTree.contains(AdminConstants.PLUGIN_ABSTRACR_PATH) || dependencyTree.contains(AdminConstants.PLUGIN_INTERFACE_PATH);
+            return dependencyTree.contains(AdminConstants.PLUGIN_ABSTRACT_PATH) || dependencyTree.contains(AdminConstants.PLUGIN_INTERFACE_PATH);
         } catch (Exception e) {
             LogUtils.error(LOG, "check plugin jar error:{}", e.getMessage());
             throw new ShenyuException(e);

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/AdminConstants.java
Patch:
@@ -293,7 +293,7 @@ public final class AdminConstants {
 
     public static final String PLUGIN_INTERFACE_PATH = "org.apache.shenyu.plugin.api.ShenyuPlugin";
 
-    public static final String PLUGIN_ABSTRACR_PATH = "org.apache.shenyu.plugin.base.AbstractShenyuPlugin";
+    public static final String PLUGIN_ABSTRACT_PATH = "org.apache.shenyu.plugin.base.AbstractShenyuPlugin";
 
     public static final String PROXY_SELECTOR_NAME_IS_EXIST = "The proxy selector name already exists and can't be added repeatedly!";
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEventDispatcher.java
Patch:
@@ -71,7 +71,7 @@ public DataChangedEventDispatcher(final ApplicationContext applicationContext) {
     @SuppressWarnings("unchecked")
     public void onApplicationEvent(@NotNull final DataChangedEvent event) {
         for (DataChangedListener listener : listeners) {
-            if ((!(listener instanceof AbstractDataChangedListener))
+            if (!(listener instanceof AbstractDataChangedListener)
                     && clusterProperties.isEnabled()
                     && Objects.nonNull(shenyuClusterSelectMasterService)
                     && !shenyuClusterSelectMasterService.isMaster()) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -103,7 +103,7 @@ public List<AppAuthVO> searchByCondition(final AppAuthQuery condition) {
     @Transactional(rollbackFor = Exception.class)
     public ShenyuAdminResult applyCreate(final AuthApplyDTO authApplyDTO) {
         if (StringUtils.isBlank(authApplyDTO.getAppName())
-                || (authApplyDTO.getOpen() && CollectionUtils.isEmpty(authApplyDTO.getPathList()))) {
+                || authApplyDTO.getOpen() && CollectionUtils.isEmpty(authApplyDTO.getPathList())) {
             return ShenyuAdminResult.error(ShenyuResultMessage.PARAMETER_ERROR);
         }
         AppAuthDO appAuthDO = AppAuthDO.create(authApplyDTO);
@@ -141,7 +141,7 @@ public ShenyuAdminResult applyCreate(final AuthApplyDTO authApplyDTO) {
     @Override
     public ShenyuAdminResult applyUpdate(final AuthApplyDTO authApplyDTO) {
         if (StringUtils.isAnyBlank(authApplyDTO.getAppKey(), authApplyDTO.getAppName())
-                || (authApplyDTO.getOpen() && CollectionUtils.isEmpty(authApplyDTO.getPathList()))) {
+                || authApplyDTO.getOpen() && CollectionUtils.isEmpty(authApplyDTO.getPathList())) {
             return ShenyuAdminResult.error(ShenyuResultMessage.PARAMETER_ERROR);
         }
         AppAuthDO appAuthDO = appAuthMapper.findByAppKey(authApplyDTO.getAppKey());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/spring/LocalDataSourceLoader.java
Patch:
@@ -59,7 +59,7 @@ public class LocalDataSourceLoader implements InstantiationAwareBeanPostProcesso
 
     @Override
     public Object postProcessAfterInitialization(@NonNull final Object bean, @NonNull final String beanName) throws BeansException {
-        if ((bean instanceof DataSourceProperties) && Boolean.TRUE.equals(dataBaseProperties.getInitEnable())) {
+        if (bean instanceof DataSourceProperties && Boolean.TRUE.equals(dataBaseProperties.getInitEnable())) {
             this.init((DataSourceProperties) bean);
         }
         return bean;

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/registrar/AbstractApiRegistrar.java
Patch:
@@ -71,7 +71,7 @@ protected D preParse(final ApiBean apiBean) {
      * Parses the apiDefinition as a registrable objects.
      *
      * @param apiDefinition apiDefinition to be parsed
-     * @return
+     * @return registrable objects
      */
     protected abstract List<D> parse(ApiBean.ApiDefinition apiDefinition);
 

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/HttpAuthHandler.java
Patch:
@@ -66,8 +66,8 @@ protected void handleTextMessage(final WebSocketSession session, final TextMessa
         String payload = message.getPayload();
         Object token = session.getAttributes().get("token");
         LOG.info("server received {}, sent {}", token, payload);
-        boolean isTestClose = (Objects.nonNull(token) && Objects.equals(token, "testCloseStatus"))
-            || (Objects.nonNull(payload) && Objects.equals(payload, "testCloseStatus"));
+        boolean isTestClose = Objects.nonNull(token) && Objects.equals(token, "testCloseStatus")
+            || Objects.nonNull(payload) && Objects.equals(payload, "testCloseStatus");
         if (isTestClose) {
             session.close(new CloseStatus(4400, "test:apache shenyu server close, return closeStatus"));
         } else {

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/spi/LeastActiveLoadBalanceTest.java
Patch:
@@ -51,7 +51,7 @@ public void testResponseTimeBalancer() throws Exception {
         final LeastActiveLoadBalance leastActiveLoadBalance = new LeastActiveLoadBalance();
         Upstream upstream = leastActiveLoadBalance.doSelect(onlyOneList, "localhost");
         Upstream upstream1 = leastActiveLoadBalance.doSelect(onlyOneList, "localhost");
-        Assertions.assertTrue((upstream.getUrl().equals("baidu.com") && upstream1.getUrl().equals("pro.jd.com"))
+        Assertions.assertTrue(upstream.getUrl().equals("baidu.com") && upstream1.getUrl().equals("pro.jd.com")
                 || upstream1.getUrl().equals("baidu.com") && upstream.getUrl().equals("pro.jd.com"));
     }
 }

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/spi/P2cLoadBalancerTest.java
Patch:
@@ -49,7 +49,7 @@ public void testResponseTimeBalancerSameLag() {
         final P2cLoadBalancer p2cLoadBalancer = new P2cLoadBalancer();
         Upstream upstream = p2cLoadBalancer.doSelect(upstreamList, "localhost");
         Upstream upstream1 = p2cLoadBalancer.doSelect(upstreamList, "localhost");
-        Assertions.assertTrue((upstream.getUrl().equals("baidu.com") && upstream1.getUrl().equals("pro.jd.com"))
+        Assertions.assertTrue(upstream.getUrl().equals("baidu.com") && upstream1.getUrl().equals("pro.jd.com")
                 || upstream1.getUrl().equals("baidu.com") && upstream.getUrl().equals("pro.jd.com"));
     }
 

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/result/ShenyuResult.java
Patch:
@@ -56,7 +56,7 @@ default Object result(ServerWebExchange exchange, Object formatted) {
      */
     default Object format(ServerWebExchange exchange, Object origin) {
         // basic data or upstream data
-        if (ObjectTypeUtils.isBasicType(origin) || (origin instanceof byte[])) {
+        if (ObjectTypeUtils.isBasicType(origin) || origin instanceof byte[]) {
             return origin;
         }
         // error result or rpc origin result.

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/RequestUrlUtils.java
Patch:
@@ -55,8 +55,8 @@ public static URI buildRequestUri(final ServerWebExchange exchange, final String
             }
         }
         URI uri = exchange.getRequest().getURI();
-        if ((StringUtils.isNotEmpty(uri.getRawQuery()) && uri.getRawQuery().contains("%"))
-                || (StringUtils.isNotEmpty(uri.getRawPath()) && uri.getRawPath().contains("%"))) {
+        if (StringUtils.isNotEmpty(uri.getRawQuery()) && uri.getRawQuery().contains("%")
+                || StringUtils.isNotEmpty(uri.getRawPath()) && uri.getRawPath().contains("%")) {
             path = path + "?" + RequestQueryCodecUtil.getCodecQuery(exchange);
             return UriComponentsBuilder.fromUriString(path).build(true).toUri();
         } else {

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonPluginDataSubscriber.java
Patch:
@@ -272,7 +272,7 @@ private void sortPluginIfOrderChange(final PluginData oldPluginData, final Plugi
             return;
         }
         if (Objects.isNull(oldPluginData) || Objects.isNull(oldPluginData.getSort())
-                || (!Objects.equals(oldPluginData.getSort(), pluginData.getSort()))) {
+                || !Objects.equals(oldPluginData.getSort(), pluginData.getSort())) {
             eventPublisher.publishEvent(new PluginHandlerEvent(PluginHandlerEventEnum.SORTED, pluginData));
         }
     }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java
Patch:
@@ -327,9 +327,9 @@ public ShenyuTrieNode match(final String uriPath, final String bizInfo) {
                 ShenyuTrieNode newCurrentNode = currentNode.getFailToNode();
                 // search failToNode's parentNode
                 ShenyuTrieNode parentNode = newCurrentNode.getParentNode();
-                if (Objects.isNull(parentNode) || (Objects.nonNull(parentNode.getFailToNode()) && Objects.nonNull(newCurrentNode.getFailToNode())
+                if (Objects.isNull(parentNode) || Objects.nonNull(parentNode.getFailToNode()) && Objects.nonNull(newCurrentNode.getFailToNode())
                         && completeResolveConflict(parentNode, wildcard, matchAll, pathVariable, startIndex)
-                        && parentNode.getFailToNode().equals(newCurrentNode.getFailToNode()) && "/".equals(parentNode.getParentNode().getMatchStr()))) {
+                        && parentNode.getFailToNode().equals(newCurrentNode.getFailToNode()) && "/".equals(parentNode.getParentNode().getMatchStr())) {
                     return null;
                 }
                 startIndex--;
@@ -349,7 +349,7 @@ && completeResolveConflict(parentNode, wildcard, matchAll, pathVariable, startIn
                 startIndex++;
                 continue;
             }
-            if ((startIndex == pathParts.length - 1 && checkNode(currentNode, bizInfo)) || (Objects.nonNull(currentNode) && isMatchAll(currentNode.getMatchStr()) && checkNode(currentNode, bizInfo))) {
+            if (startIndex == pathParts.length - 1 && checkNode(currentNode, bizInfo) || Objects.nonNull(currentNode) && isMatchAll(currentNode.getMatchStr()) && checkNode(currentNode, bizInfo)) {
                 return currentNode;
             }
         }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-console/src/main/java/org/apache/shenyu/plugin/logging/console/LoggingConsolePlugin.java
Patch:
@@ -135,10 +135,10 @@ private String getQueryParams(final ServerHttpRequest request, final Boolean des
             logInfo.append("[Query Params Start]").append(System.lineSeparator());
             params.forEach((key, value) -> {
                 // desensitized query parameters
-                value = Lists.newArrayList(value);
-                DataDesensitizeUtils.desensitizeList(desensitized, key, value, keyWordMatch, dataDesensitizeAlg);
+                List<String> list = Lists.newArrayList(value);
+                DataDesensitizeUtils.desensitizeList(desensitized, key, list, keyWordMatch, dataDesensitizeAlg);
                 logInfo.append(key).append(": ")
-                        .append(StringUtils.join(value, ",")).append(System.lineSeparator());
+                        .append(StringUtils.join(list, ",")).append(System.lineSeparator());
             });
             logInfo.append("[Query Params End]").append(System.lineSeparator());
         }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/AbstractReadyPicker.java
Patch:
@@ -89,8 +89,8 @@ public boolean isEquivalentTo(final AbstractPicker picker) {
         }
         AbstractReadyPicker other = (AbstractReadyPicker) picker;
         // the lists cannot contain duplicate subchannels
-        return other == this || (list.size() == other.list.size()
-                && new HashSet<>(list).containsAll(other.list));
+        return other == this || list.size() == other.list.size()
+                && new HashSet<>(list).containsAll(other.list);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/EmptyPicker.java
Patch:
@@ -40,7 +40,7 @@ public LoadBalancer.PickResult pickSubchannel(final LoadBalancer.PickSubchannelA
 
     @Override
     public boolean isEquivalentTo(final AbstractPicker picker) {
-        return picker instanceof EmptyPicker && (Objects.equal(status, ((EmptyPicker) picker).status) || (status.isOk() && ((EmptyPicker) picker).status.isOk()));
+        return picker instanceof EmptyPicker && (Objects.equal(status, ((EmptyPicker) picker).status) || status.isOk() && ((EmptyPicker) picker).status.isOk());
     }
 
     @Override

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/util/Util.java
Patch:
@@ -117,8 +117,8 @@ public static boolean isDefault(final Method method) {
         // method.isDefault() is not sufficient for our usage as it does not check
         // for synthetic methods. As a result, it picks up overridden methods as well as actual default
         // methods.
-        return ((method.getModifiers()
-                & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC | 0x00001000)) == Modifier.PUBLIC)
+        return (method.getModifiers()
+                & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC | 0x00001000)) == Modifier.PUBLIC
                 && method.getDeclaringClass().isInterface();
     }
 

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/annotation/PathVariableParameterProcessor.java
Patch:
@@ -43,7 +43,7 @@ public Class<? extends Annotation> getAnnotationType() {
     public boolean processArgument(final ShenyuRequest shenyuRequest, final Annotation annotation, final Object arg) {
         String name = ANNOTATION.cast(annotation).value();
         RequestTemplate requestTemplate = shenyuRequest.getRequestTemplate();
-        checkState((arg instanceof String && emptyToNull(name) != null) || arg instanceof Map,
+        checkState(arg instanceof String && emptyToNull(name) != null || arg instanceof Map,
             "PathVariable Object class pls is String or Map<String, String> and PathVariable annotation value could not be empty when String class at the method %s.", requestTemplate.getMethod());
 
         if (arg instanceof String) {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-polaris/src/test/java/org/apache/shenyu/springboot/stater/sync/data/polaris/PolarisSyncDataConfigurationTest.java
Patch:
@@ -41,9 +41,9 @@
 @SpringBootTest(
         classes = PolarisSyncDataConfiguration.class,
         properties = {
-                "shenyu.sync.polaris.url=" + PolarisSyncDataConfigurationTest.URL,
-                "shenyu.sync.polaris.namespace=default",
-                "shenyu.sync.polaris.fileGroup=fileGroup"
+            "shenyu.sync.polaris.url=" + PolarisSyncDataConfigurationTest.URL,
+            "shenyu.sync.polaris.namespace=default",
+            "shenyu.sync.polaris.fileGroup=fileGroup"
         })
 @EnableAutoConfiguration
 public final class PolarisSyncDataConfigurationTest {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataBaseConfiguration.java
Patch:
@@ -66,6 +66,7 @@ public DatabaseIdProvider databaseIdProvider() {
         properties.setProperty("PostgreSQL", "postgresql");
         properties.setProperty("H2", "h2");
         properties.setProperty("OpenGauss", "opengauss");
+        properties.setProperty("OceanBase", "oceanbase");
         VendorDatabaseIdProvider databaseIdProvider = new VendorDatabaseIdProvider();
         databaseIdProvider.setProperties(properties);
         return databaseIdProvider;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/PullSwaggerDocServiceImpl.java
Patch:
@@ -56,7 +56,7 @@ public class PullSwaggerDocServiceImpl implements PullSwaggerDocService {
 
     private static final HttpUtils HTTP_UTILS = new HttpUtils();
 
-    private static final String SWAGGER_V2_PATH = "/v2/api-docs";
+    private static final String SWAGGER_V3_PATH = "/v3/api-docs";
 
     private static final long PULL_MIN_INTERVAL_TIME = 30 * 1000;
 
@@ -181,7 +181,7 @@ private String getSwaggerRequestUrl(final UpstreamInstance instance) {
         uriComponentsBuilder.host(instance.getIp());
         uriComponentsBuilder.port(instance.getPort());
         uriComponentsBuilder.path(Optional.ofNullable(instance.getContextPath()).orElse(""));
-        uriComponentsBuilder.path(SWAGGER_V2_PATH);
+        uriComponentsBuilder.path(SWAGGER_V3_PATH);
         return uriComponentsBuilder.build().toUriString();
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/SwaggerDocParser.java
Patch:
@@ -247,9 +247,8 @@ protected List<DocParameter> buildResponseParameterList(final JsonObject docInfo
     }
 
     protected List<DocParameter> buildDocParameters(final String ref, final JsonObject docRoot, final boolean doSubRef) {
-        JsonObject responseObject = docRoot.getAsJsonObject("definitions").getAsJsonObject(ref);
-        String className = responseObject.get("title").getAsString();
-        JsonObject extProperties = docRoot.getAsJsonObject(className);
+        JsonObject responseObject = docRoot.getAsJsonObject("components").getAsJsonObject("schemas").getAsJsonObject(ref);
+        JsonObject extProperties = responseObject.getAsJsonObject("properties");
         JsonArray requiredProperties = responseObject.getAsJsonArray("required");
         List<String> requiredFieldList = this.jsonArrayToStringList(requiredProperties);
         JsonObject properties = responseObject.getAsJsonObject("properties");

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/manager/impl/DocManagerImplTest.java
Patch:
@@ -48,7 +48,7 @@ public void testAddDocInfo() {
         instance.setContextPath("/testClusterName");
         AtomicBoolean atomicBoolean = new AtomicBoolean(false);
         docManager.addDocInfo(instance, SwaggerDocParserTest.DOC_INFO_JSON, "", docInfo -> {
-            Assertions.assertEquals(docInfo.getTitle(), "shenyu-examples-http-swagger2 API");
+            Assertions.assertEquals(docInfo.getTitle(), "shenyu-examples-http-swagger3 API");
             Assertions.assertEquals(docInfo.getClusterName(), "testClusterName");
             atomicBoolean.set(true);
         });

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/ApacheDubboClientValidatorTest.java
Patch:
@@ -91,7 +91,7 @@ public void testValidateWhenMeetsConstraintThenValidationFailed() throws Excepti
                 .validate(
                         "methodTwo",
                         new Class<?>[]{MockValidationParameter.class},
-                        new Object[]{new MockValidationParameter("NotBeNull")}));
+                        new Object[]{new MockValidationParameter()}));
     }
 
     @Test

File: shenyu-examples/shenyu-examples-http-swagger3/src/main/java/org/apache/shenyu/examples/http/controller/ShenyuClientPathController.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.examples.http.controller;
 
-import io.swagger.annotations.ApiOperation;
+import io.swagger.v3.oas.annotations.Operation;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -53,7 +53,7 @@ public String hello() {
      * @param name say hello user name
      * @return result
      */
-    @ApiOperation(value = "hello", notes = "Shenyu-Gateway System said hello to you.")
+    @Operation(summary = "hello", description = "Shenyu-Gateway System said hello to you.")
     @RequestMapping("shenyu/client/hi")
     @ShenyuSpringMvcClient("shenyu/client/hi")
     public String hello(final String name) {

File: shenyu-examples/shenyu-examples-http-swagger3/src/main/java/org/apache/shenyu/examples/http/dto/OAuth2DTO.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.shenyu.examples.http.dto;
 
-import io.swagger.annotations.ApiModelProperty;
+import io.swagger.v3.oas.annotations.media.Schema;
 
 public class OAuth2DTO {
 
-    @ApiModelProperty(value = "token", example = "afte6789try")
+    @Schema(name = "token", example = "afte6789try")
     private String token;
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -283,6 +283,7 @@ protected <T> void updateCache(final ConfigGroupEnum group, final List<T> data)
         ConfigDataCache newVal = new ConfigDataCache(group.name(), json, DigestUtils.md5Hex(json), System.currentTimeMillis());
         ConfigDataCache oldVal = CACHE.put(newVal.getGroup(), newVal);
         LOG.info("update config cache[{}], old: {}, updated: {}", group, oldVal, newVal);
+        LOG.info("update config json: {}", json);
     }
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/NamespacePluginRelMapper.java
Patch:
@@ -39,11 +39,11 @@ public interface NamespacePluginRelMapper extends ExistProvider {
     /**
      * existed.
      *
-     * @param id id
+     * @param pluginId pluginId
      * @return existed
      */
     @Override
-    Boolean existed(@Param("id") Serializable id);
+    Boolean existed(@Param("pluginId") Serializable pluginId);
 
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/NamespacePluginService.java
Patch:
@@ -53,13 +53,13 @@ public interface NamespacePluginService extends PageService<NamespacePluginQuery
     String delete(List<String> ids, String namespaceId);
 
     /**
-     * find plugin namespace by id.
+     * find plugin namespace by pluginId.
      *
-     * @param id    pk.
+     * @param pluginId    the pluginId.
      * @param namespaceId the namespaceId
      * @return {@linkplain PluginVO}
      */
-    NamespacePluginVO findById(String id, String namespaceId);
+    NamespacePluginVO findByPluginId(String pluginId, String namespaceId);
 
     /**
      * find page of plugin namespace by query.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/NamespacePluginServiceImpl.java
Patch:
@@ -96,8 +96,8 @@ public String delete(final List<String> ids, final String namespaceId) {
     }
 
     @Override
-    public NamespacePluginVO findById(final String id, final String namespaceId) {
-        return this.namespacePluginRelMapper.selectByPluginIdAndNamespaceId(id, namespaceId);
+    public NamespacePluginVO findByPluginId(final String pluginId, final String namespaceId) {
+        return this.namespacePluginRelMapper.selectByPluginIdAndNamespaceId(pluginId, namespaceId);
     }
 
     @Override

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SyncDataServiceImpl.java
Patch:
@@ -127,7 +127,7 @@ public boolean syncAll(final DataEventTypeEnum type) {
 
     @Override
     public boolean syncPluginData(final String pluginId, final String namespaceId) {
-        NamespacePluginVO namespacePluginVO = namespacePluginService.findById(pluginId, namespaceId);
+        NamespacePluginVO namespacePluginVO = namespacePluginService.findByPluginId(pluginId, namespaceId);
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, DataEventTypeEnum.UPDATE,
                 Collections.singletonList(PluginTransfer.INSTANCE.mapToData(namespacePluginVO))));
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SyncDataServiceTest.java
Patch:
@@ -108,7 +108,7 @@ public void syncAllTest() {
     public void syncPluginDataTest() {
         PluginVO pluginVO = buildPluginVO();
         NamespacePluginVO namespacePluginVO = new NamespacePluginVO();
-        given(this.namespacePluginService.findById(pluginVO.getId(), SYS_DEFAULT_NAMESPACE_ID)).willReturn(namespacePluginVO);
+        given(this.namespacePluginService.findByPluginId(pluginVO.getId(), SYS_DEFAULT_NAMESPACE_ID)).willReturn(namespacePluginVO);
         SelectorData selectorData = buildSelectorData();
         given(this.selectorService.findByPluginIdAndNamespaceId(pluginVO.getId(), SYS_DEFAULT_NAMESPACE_ID)).willReturn(Collections.singletonList(selectorData));
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/NamespaceVO.java
Patch:
@@ -32,7 +32,7 @@ public class NamespaceVO implements Serializable {
     private String id;
 
     /**
-     * name.
+     * namespaceId.
      */
     private String namespaceId;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java
Patch:
@@ -63,6 +63,8 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
+import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+
 /**
  * Implementation of the {@link org.apache.shenyu.admin.service.ApiService}.
  */
@@ -186,7 +188,7 @@ private void removeRegister(final ApiDO apiDO) {
             }
         });
         if (CollectionUtils.isNotEmpty(selectorIds)) {
-            selectorService.delete(selectorIds);
+            selectorService.deleteByNamespaceId(selectorIds, SYS_DEFAULT_NAMESPACE_ID);
         }
         //clean metadata
         Optional.ofNullable(metaDataService.findByPath(path))

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DiscoveryServiceImpl.java
Patch:
@@ -63,6 +63,8 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
+import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
+
 @Service
 public class DiscoveryServiceImpl implements DiscoveryService {
 
@@ -125,7 +127,7 @@ public void registerDiscoveryConfig(final DiscoveryConfigRegisterDTO discoveryCo
     private SelectorDO findAndLockOnDB(final String selectorName, final String pluginName) {
         SelectorDO selectorDO = null;
         for (int i = 0; i < 3; i++) {
-            selectorDO = selectorService.findByNameAndPluginNameForUpdate(selectorName, pluginName);
+            selectorDO = selectorService.findByNameAndPluginNameAndNamespaceIdForUpdate(selectorName, pluginName, SYS_DEFAULT_NAMESPACE_ID);
             if (selectorDO != null) {
                 return selectorDO;
             }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/NamespaceServiceImpl.java
Patch:
@@ -80,7 +80,7 @@ public CommonPager<NamespaceVO> listByPage(final NamespaceQuery namespaceQuery)
 
     @Override
     public String delete(final List<String> ids) {
-        if (ids.contains(AdminConstants.SYS_DEFAULT_NAMESPACE_ID)) {
+        if (ids.contains(AdminConstants.DEFAULT_NAMESPACE_PRIMARY_KEY)) {
             return AdminConstants.SYS_DEFAULT_NAMESPACE_ID_DELETE;
         }
         List<NamespaceDO> namespaceDOS = namespaceMapper.selectByIds(ids);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SyncDataServiceImpl.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_NAMESPACE_ID;
+import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
 
 /**
  * Implementation of the {@link org.apache.shenyu.admin.service.SyncDataService}.
@@ -111,7 +111,7 @@ public boolean syncAll(final DataEventTypeEnum type) {
 
         List<PluginData> pluginDataList = namespacePluginService.listAll();
         //todo:[Namespace] Temporarily only synchronize plugin data for the default namespace
-        List<PluginData> pluginDataListFilter = pluginDataList.stream().filter(v -> v.getNamespaceId().equals(SYS_DEFAULT_NAMESPACE_NAMESPACE_ID)).collect(Collectors.toList());
+        List<PluginData> pluginDataListFilter = pluginDataList.stream().filter(v -> v.getNamespaceId().equals(SYS_DEFAULT_NAMESPACE_ID)).collect(Collectors.toList());
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, type, pluginDataListFilter));
 
         List<SelectorData> selectorDataList = selectorService.listAll();
@@ -131,7 +131,7 @@ public boolean syncPluginData(final String pluginId, final String namespaceId) {
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.PLUGIN, DataEventTypeEnum.UPDATE,
                 Collections.singletonList(PluginTransfer.INSTANCE.mapToData(namespacePluginVO))));
 
-        List<SelectorData> selectorDataList = selectorService.findByPluginId(pluginId);
+        List<SelectorData> selectorDataList = selectorService.findByPluginIdAndNamespaceId(pluginId, namespaceId);
 
         if (!CollectionUtils.isEmpty(selectorDataList)) {
             eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.REFRESH, selectorDataList));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/publish/PluginEventPublisher.java
Patch:
@@ -72,7 +72,7 @@ public void onUpdated(final PluginDO plugin, final PluginDO before) {
     public void onDeleted(final PluginDO plugin) {
         publish(new PluginChangedEvent(plugin, null, EventTypeEnum.PLUGIN_DELETE, SessionUtil.visitorName()));
     }
-    
+
     /**
      * on plugin deleted.
      *
@@ -82,7 +82,7 @@ public void onDeleted(final PluginDO plugin) {
     public void onDeleted(final Collection<PluginDO> plugins) {
         publish(new BatchPluginDeletedEvent(plugins, SessionUtil.visitorName()));
     }
-    
+
     /**
      * on plugin batch enabled.
      *

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DataPermissionServiceTest.java
Patch:
@@ -84,7 +84,7 @@ public void setup() {
         dataPermissionDTO.setUserId("1001");
         dataPermissionDTO.setDataId("1");
         dataPermissionDTO.setIsSelected(true);
-        selectorDTO = new SelectorDTO("1", "1", "test", 1, 1, 1, true, false, true, "test", null, false, null);
+        selectorDTO = new SelectorDTO("1", "1", "test", 1, 1, 1, true, false, true, "test", null, false, null, null);
     }
 
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java
Patch:
@@ -65,6 +65,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyList;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mockStatic;
@@ -257,7 +258,7 @@ public void testFetchUpstreamData() {
                 .status(0)
                 .build();
         when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));
-        when(selectorMapper.findByPluginIds(anyList())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));
+        when(selectorMapper.findByPluginIdsAndNamespaceId(anyList(), any())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));
         when(discoveryUpstreamService.findBySelectorId(anyString())).thenReturn(Lists.newArrayList(discoveryUpstreamData));
         upstreamCheckService.fetchUpstreamData();
         assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME));

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/manager/impl/LoadServiceDocEntryImplTest.java
Patch:
@@ -48,6 +48,7 @@
 import java.util.Set;
 import java.util.Collections;
 
+import static org.apache.shenyu.common.constant.AdminConstants.SYS_DEFAULT_NAMESPACE_ID;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.verify;
@@ -112,7 +113,8 @@ public void testLoadApiDocument() {
                 "[{\"weight\":1}]",
                 new ArrayList<>(),
                 formattedDateString,
-                formattedDateString
+                formattedDateString,
+                SYS_DEFAULT_NAMESPACE_ID
         );
         list.add(selectorVO);
         commonPager.setDataList(list);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImplTest.java
Patch:
@@ -144,9 +144,9 @@ public void testDoRegisterURI() {
         assertThrows(ShenyuException.class, () -> abstractShenyuClientRegisterService.doRegisterURI("Selector_Name", Collections.singletonList(uriRegisterDTO)));
 
         SelectorDO selectorDO = mock(SelectorDO.class);
-        when(selectorService.findByNameAndPluginName(any(), any())).thenReturn(selectorDO);
+        when(selectorService.findByNameAndPluginNameAndNamespaceId(any(), any(), any())).thenReturn(selectorDO);
         SelectorData selectorData = new SelectorData();
-        when(selectorService.buildByName(any(), any())).thenReturn(selectorData);
+        when(selectorService.buildByNameAndPluginNameAndNamespaceId(any(), any(), any())).thenReturn(selectorData);
         assertEquals(ShenyuResultMessage.SUCCESS, abstractShenyuClientRegisterService.doRegisterURI("Selector_Name", Collections.singletonList(uriRegisterDTO)));
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/subscriber/DiscoveryConfigRegisterExecutorSubscriber.java
Patch:
@@ -46,9 +46,7 @@ public DiscoveryConfigRegisterExecutorSubscriber(final DiscoveryService discover
 
     @Override
     public void executor(final Collection<DiscoveryConfigRegisterDTO> discoveryConfigRegisterDTOS) {
-        executorService.schedule(() -> {
-            discoveryConfigRegisterDTOS.forEach(discoveryService::registerDiscoveryConfig);
-        }, 2, TimeUnit.SECONDS);
+        executorService.schedule(() -> discoveryConfigRegisterDTOS.forEach(discoveryService::registerDiscoveryConfig), 2, TimeUnit.SECONDS);
     }
 
     @Override

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mode/cluster/filter/ClusterForwardFilter.java
Patch:
@@ -187,9 +187,7 @@ private void copyHeaders(final HttpHeaders sourceHeaders, final HttpServletRespo
         sourceHeaders.forEach((headerName, headerValues) -> {
             String name = removeSpecial(headerName);
             if (!response.containsHeader(name)) {
-                headerValues.forEach(headerValue -> {
-                    response.addHeader(name, removeSpecial(headerValue));
-                });
+                headerValues.forEach(headerValue -> response.addHeader(name, removeSpecial(headerValue)));
             }
         });
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -363,7 +363,7 @@ public List<SelectorDO> findByNameAndPluginNames(final String name, final List<S
         if (CollectionUtils.isEmpty(pluginDOList)) {
             return Lists.newArrayList();
         }
-        List<String> pluginIds = pluginDOList.stream().map(it -> it.getId()).collect(Collectors.toList());
+        List<String> pluginIds = pluginDOList.stream().map(BaseDO::getId).collect(Collectors.toList());
         SelectorQuery selectorQuery = new SelectorQuery();
         selectorQuery.setName(name);
         selectorQuery.setPluginIds(pluginIds);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ZipUtil.java
Patch:
@@ -85,7 +85,7 @@ public static UnZipResult unzip(final byte[] source) {
                         out.write(buffer, 0, offset);
                     }
                     String entryName = entry.getName();
-                    itemList.add(new ZipItem(entryName, out.toString("UTF-8")));
+                    itemList.add(new ZipItem(entryName, out.toString(StandardCharsets.UTF_8)));
                 } catch (IOException e) {
                     LOG.error("unzip error", e);
                 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/SecretPropertiesTest.java
Patch:
@@ -40,7 +40,7 @@ public void testSecretPropertiesAssignValue() {
         long randomLong = new Random().nextLong();
         String randomKey = String.valueOf(Math.abs(randomLong));
         if (LOG.isDebugEnabled()) {
-            LOG.debug("RandomKey is: " + randomKey);
+            LOG.debug("RandomKey is: {}", randomKey);
         }
         load(SecretPropertiesConfiguration.class, "shenyu.aes.secret.key=" + randomKey,
                 "shenyu.aes.secret.iv=" + randomKey);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/properties/HttpSyncPropertiesTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.config.properties;
 
 import org.apache.shenyu.admin.AbstractConfigurationTest;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;
@@ -28,7 +29,6 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.comparesEqualTo;
-import static org.junit.Assert.assertEquals;
 
 /**
  * Test cases for HttpSyncProperties.
@@ -42,7 +42,7 @@ public void testDefault() {
         HttpSyncProperties httpSyncProperties = getContext().getBean(HttpSyncProperties.class);
         httpSyncProperties.setNotifyBatchSize(0);
         assertThat(httpSyncProperties.isEnabled(), comparesEqualTo(true));
-        assertEquals(httpSyncProperties.getNotifyBatchSize(), 0);
+        Assertions.assertEquals(httpSyncProperties.getNotifyBatchSize(), 0);
         assertThat(httpSyncProperties.getRefreshInterval(), comparesEqualTo(Duration.ofMinutes(5)));
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/UploadUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.utils;
 
+import org.apache.commons.collections4.CollectionUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.springframework.util.LinkedMultiValueMap;
@@ -43,6 +44,6 @@ public void testListUtil() {
         fileMultiValueMap.add("file", mock(MultipartFile.class));
         when(httpServletRequest.getMultiFileMap()).thenReturn(fileMultiValueMap);
         final Collection<MultipartFile> uploadFiles = UploadUtils.getUploadFiles(httpServletRequest);
-        Assertions.assertTrue(uploadFiles.size() > 0);
+        Assertions.assertTrue(CollectionUtils.isNotEmpty(uploadFiles));
     }
 }

File: shenyu-client/shenyu-client-core/src/test/java/org/apache/shenyu/client/core/disruptor/subcriber/ShenyuClientRegisterEventPublisherTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.shenyu.client.core.disruptor.ShenyuClientRegisterEventPublisher;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.type.DataTypeParent;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mock;
 
-import static org.junit.Assert.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertSame;
 
@@ -45,7 +45,7 @@ public void testGetInstanceReturnsSameInstance() {
     public void testStart() {
         ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
         publisher.start(shenyuClientRegisterRepository);
-        assertNotNull(publisher.getProviderManage());
+        Assertions.assertNotNull(publisher.getProviderManage());
         assertDoesNotThrow(() -> publisher.getProviderManage().startup());
     }
 

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/validation/ApacheDubboClientValidator.java
Patch:
@@ -39,6 +39,7 @@
 import javassist.bytecode.annotation.MemberValue;
 import javassist.bytecode.annotation.ShortMemberValue;
 import javassist.bytecode.annotation.StringMemberValue;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.bytecode.ClassGenerator;
 import org.apache.dubbo.common.utils.ReflectUtils;
@@ -85,7 +86,7 @@ public ApacheDubboClientValidator(final URL url) {
         this.clazz = ReflectUtils.forName(url.getServiceInterface());
         String shenyuValidation = url.getParameter("shenyuValidation");
         ValidatorFactory factory;
-        if (Objects.nonNull(shenyuValidation) && shenyuValidation.length() > 0) {
+        if (StringUtils.isNoneBlank(shenyuValidation)) {
             factory = Validation.byProvider((Class) ReflectUtils.forName(shenyuValidation)).configure().buildValidatorFactory();
         } else {
             factory = Validation.buildDefaultValidatorFactory();
@@ -281,7 +282,7 @@ public void validate(final String methodName, final Class<?>[] parameterTypes, f
         }
 
         if (!violations.isEmpty()) {
-            LOG.error("Failed to validate service: " + clazz.getName() + ", method: " + methodName + ", cause: " + violations);
+            LOG.error("Failed to validate service: {}, method: {}, cause: {}", clazz.getName(), methodName, violations);
             StringBuilder validateError = new StringBuilder();
             violations.forEach(each -> validateError.append(each.getMessage()).append(","));
             throw new ValidationException(validateError.substring(0, validateError.length() - 1));

File: shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java
Patch:
@@ -1133,7 +1133,7 @@ public static class CrossFilterConfig {
         private static final Set<String> DEFAULT_ALLOWED_HEADERS;
 
         static {
-            DEFAULT_ALLOWED_HEADERS = new HashSet<String>() {
+            DEFAULT_ALLOWED_HEADERS = new HashSet<>() {
                 {
                     add("x-requested-with");
                     add("authorization");

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/Constants.java
Patch:
@@ -255,7 +255,7 @@ public interface Constants {
     /**
      * The constant LINE_SEPARATOR.
      */
-    String LINE_SEPARATOR = System.getProperty("line.separator");
+    String LINE_SEPARATOR = System.lineSeparator();
     
     /**
      * The constant URL_SEPARATOR.

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/RunningModeEnum.java
Patch:
@@ -30,6 +30,6 @@ public enum RunningModeEnum {
     /**
      * cluster.
      */
-    CLUSTER;
+    CLUSTER
     
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/timer/HierarchicalWheelTimer.java
Patch:
@@ -82,7 +82,7 @@ public HierarchicalWheelTimer(final String executorName,
                                   final Long startMs) {
         ThreadFactory threadFactory = ShenyuThreadFactory.create(executorName, false);
         taskExecutor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS,
-                new LinkedBlockingQueue<Runnable>(), threadFactory);
+                new LinkedBlockingQueue<>(), threadFactory);
         workerThread = threadFactory.newThread(new Worker(this));
         timingWheel = new TimingWheel(tickMs, wheelSize, startMs, taskCounter, delayQueue);
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/IpUtils.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.shenyu.common.utils;
 
+import org.apache.commons.lang3.StringUtils;
+
 import java.io.Serializable;
 import java.net.Inet4Address;
 import java.net.InetAddress;
@@ -115,7 +117,7 @@ public static String getHost(final String filterHost) {
         // if the progress works under docker environment
         // return the host ip about this docker located from environment value
         String dockerHostIp = System.getenv(SYSTEM_ENV_DOCKER_HOST_IP);
-        if (dockerHostIp != null && !"".equals(dockerHostIp)) {
+        if (dockerHostIp != null && StringUtils.isNoneBlank(dockerHostIp)) {
             return dockerHostIp;
         }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/ParamCheckUtils.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.common.utils;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.exception.ShenyuException;
 
 /**
@@ -31,7 +32,7 @@ public class ParamCheckUtils {
      * @return the boolean
      */
     public static boolean bodyIsEmpty(final String body) {
-        return null == body || "".equals(body) || "null".equals(body);
+        return null == body || StringUtils.isEmpty(body) || "null".equals(body);
     }
 
     /**

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/UriUtils.java
Patch:
@@ -112,7 +112,7 @@ public static String appendScheme(final String url, final String scheme) {
      */
     public static int getActualPort(final String scheme, final Integer port) {
         Integer actualPort = port;
-        if (Objects.isNull(port) || port.intValue() < 0) {
+        if (Objects.isNull(port) || port < 0) {
             if (!"http".equals(scheme) && !"ws".equals(scheme)) {
                 if ("https".equals(scheme) || "wss".equals(scheme)) {
                     actualPort = 443;

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/VersionUtils.java
Patch:
@@ -88,7 +88,7 @@ public static String getVersion(final Class<?> cls, final String defaultVersion)
             if (i >= 0) {
                 file = file.substring(i + 1);
             }
-            while (file.length() > 0 && !Character.isDigit(file.charAt(0))) {
+            while (StringUtils.isNoneBlank(file) && !Character.isDigit(file.charAt(0))) {
                 i = file.indexOf("-");
                 if (i < 0) {
                     break;

File: shenyu-common/src/test/java/org/apache/shenyu/common/cache/MemorySafeLRUMapTest.java
Patch:
@@ -39,10 +39,10 @@ public void testPut() {
     @Test
     public void testLru() {
         try {
-            MemorySafeLRUMap<Integer, Integer> lru = new MemorySafeLRUMap<Integer, Integer>(1, 1024) {
-    
+            MemorySafeLRUMap<Integer, Integer> lru = new MemorySafeLRUMap<>(1, 1024) {
+                
                 private static final long serialVersionUID = 8897028073615563875L;
-    
+                
                 @Override
                 public boolean isFull() {
                     //just for test

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/SentinelHandleTest.java
Patch:
@@ -40,10 +40,10 @@ public void testGetterSetter() {
         handle.setFlowRuleControlBehavior(0);
         handle.setDegradeRuleEnable(0);
         handle.setDegradeRuleGrade(2);
-        handle.setDegradeRuleCount(Double.valueOf(10));
+        handle.setDegradeRuleCount(10.0);
         handle.setDegradeRuleTimeWindow(100);
         handle.setDegradeRuleMinRequestAmount(200);
-        handle.setDegradeRuleSlowRatioThreshold(Double.valueOf(10));
+        handle.setDegradeRuleSlowRatioThreshold(10.0);
         handle.setDegradeRuleStatIntervals(100);
         handle.setFallbackUri("fallbackUri");
         handle.setFlowRuleMaxQueueingTimeMs(500);

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/JarDependencyUtilsTest.java
Patch:
@@ -51,9 +51,7 @@ public class JarDependencyUtilsTest {
     @Test
     public void test() {
         try (MockedConstruction<ByteArrayInputStream> byteStream = mockConstruction(ByteArrayInputStream.class);
-             MockedConstruction<ZipInputStream> zipStream = mockConstruction(ZipInputStream.class, (mock, context) -> {
-                 when(mock.getNextEntry()).thenReturn(new ZipEntry("abc.class")).thenReturn(null);
-             });
+             MockedConstruction<ZipInputStream> zipStream = mockConstruction(ZipInputStream.class, (mock, context) -> when(mock.getNextEntry()).thenReturn(new ZipEntry("abc.class")).thenReturn(null));
              MockedConstruction<ClassNode> classNode = mockConstruction(ClassNode.class, (mock, context) -> {
                  Field superName = ClassNode.class.getDeclaredField("superName");
                  superName.set(mock, "superName");

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/JsonUtilsTest.java
Patch:
@@ -65,7 +65,7 @@ public void toJson() {
                 .nullObject(null)
                 .emptyList(new LinkedList<>())
                 .emptyMap(new HashMap<>())
-                .nestedMap(new HashMap<String, Object>() {
+                .nestedMap(new HashMap<>() {
                     {
                         put("map1", testMap);
                         put("map2", new HashMap<>());

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/ObjectTypeUtilsTest.java
Patch:
@@ -27,9 +27,9 @@ public class ObjectTypeUtilsTest {
     public void testIsBasicType() {
         Object o = 1;
         assertTrue(ObjectTypeUtils.isBasicType(o));
-        o = new Short("1");
+        o = Short.valueOf("1");
         assertTrue(ObjectTypeUtils.isBasicType(o));
-        o = new Long("1");
+        o = Long.valueOf("1");
         assertTrue(ObjectTypeUtils.isBasicType(o));
         o = new Double("1");
         assertTrue(ObjectTypeUtils.isBasicType(o));

File: shenyu-discovery/shenyu-discovery-etcd/src/test/java/org/apache/shenyu/discovery/etcd/EtcdDiscoveryServiceTest.java
Patch:
@@ -180,9 +180,7 @@ void testWatch() throws NoSuchFieldException, IllegalAccessException, ExecutionE
         when(watchResponse.getEvents()).thenReturn(events);
         final DataChangedEventListener mockListener = mock(DataChangedEventListener.class);
         etcdDiscoveryServiceUnderTest.watch(key, mockListener);
-        listeners.forEach(listener -> {
-            listener.onNext(watchResponse);
-        });
+        listeners.forEach(listener -> listener.onNext(watchResponse));
 
         final Field cacheField = etcdDiscoveryServiceUnderTest.getClass().getDeclaredField("watchCache");
         cacheField.setAccessible(true);

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/gateway/GatewayClient.java
Patch:
@@ -129,7 +129,7 @@ public void onOpen(final ServerHandshake handshakeData) {
                     @Override
                     public void onMessage(final String message) {
                         BLOCKING_QUEUE.add(message);
-                        log.info("Receive Message: " + message);
+                        log.info("Receive Message: {}", message);
                     }
 
                     @Override

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/common/IdManagers.java
Patch:
@@ -47,7 +47,7 @@ public void set(final BiMap<String, String> name2id) {
             for (Map.Entry<String, String> entry : name2id.entrySet()) {
                 joiner.add(entry.getKey());
             }
-            log.info("plugin list: " + joiner);
+            log.info("plugin list: {}", joiner);
 
         }
         

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/WaitForHelper.java
Patch:
@@ -89,7 +89,7 @@ public void waitFor(final Supplier<RequestSpecification> supplier, final Method
                     }
                     return;
                 } catch (AssertionError e) {
-                    log.debug("failed to check endpoint '" + endpoint + "'\n {}", e.getMessage());
+                    log.debug("failed to check endpoint '{}'\n {}", endpoint, e.getMessage());
                 }
                 
                 try {

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/specification/ShenYuAfterEachSpec.java
Patch:
@@ -92,9 +92,7 @@ public ShenYuAfterEachSpecBuilder checker(final @NotNull Checker checker) {
          * @return ShenYuAfterEachSpecBuilder
          */
         public ShenYuAfterEachSpecBuilder deleteWaiting(final @NotNull Checker checker) {
-            this.deleteWaiting = (HttpWaiting) supplier -> {
-                WaitForHelper.waitForEffecting(supplier, (HttpChecker) checker);
-            };
+            this.deleteWaiting = (HttpWaiting) supplier -> WaitForHelper.waitForEffecting(supplier, (HttpChecker) checker);
             return this;
         }
 

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/specification/ShenYuBeforeEachSpec.java
Patch:
@@ -156,9 +156,7 @@ public ShenYuBeforeEachSpecBuilder waiting(final Method method, final String end
          * @return ShenYuBeforeEachSpecBuilder
          */
         public ShenYuBeforeEachSpecBuilder waiting(final @NotNull Checker checker) {
-            this.waiting = (HttpWaiting) supplier -> {
-                WaitForHelper.waitForEffecting(supplier, (HttpChecker) checker);
-            };
+            this.waiting = (HttpWaiting) supplier -> WaitForHelper.waitForEffecting(supplier, (HttpChecker) checker);
             return this;
         }
         

File: shenyu-examples/shenyu-examples-http-swagger2/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java
Patch:
@@ -341,7 +341,7 @@ public ResponseEntity<byte[]> downloadFile(
         HttpHeaders headers = new HttpHeaders();
         headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
 
-        String downloadFileName = URLEncoder.encode("downloadFile.txt", "UTF-8");
+        String downloadFileName = URLEncoder.encode("downloadFile.txt", StandardCharsets.UTF_8);
         headers.setContentDispositionFormData("attachment", downloadFileName);
 
         return new ResponseEntity<>(body.getBytes(StandardCharsets.UTF_8), headers, HttpStatus.CREATED);

File: shenyu-examples/shenyu-examples-http-swagger2/src/main/java/org/apache/shenyu/examples/http/router/ShenyuTestHttpRouter.java
Patch:
@@ -65,7 +65,7 @@ public RouterFunction<ServerResponse> routes() {
     @NonNull
     private Mono<ServerResponse> testRetry(final ServerRequest req) {
         int i = ATOMIC_INTEGER.incrementAndGet();
-        LOG.info("Retry count: " + i);
+        LOG.info("Retry count: {}", i);
         ResultBean resultBean = new ResultBean(1, "msg", "this is retry hello world");
         return ok().body(Mono.just(resultBean), ResultBean.class);
     }

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java
Patch:
@@ -308,7 +308,7 @@ public ResponseEntity<byte[]> downloadFile(@RequestParam(value = "body", default
         HttpHeaders headers = new HttpHeaders();
         headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
 
-        String downloadFileName = URLEncoder.encode("downloadFile.txt", "UTF-8");
+        String downloadFileName = URLEncoder.encode("downloadFile.txt", StandardCharsets.UTF_8);
         headers.setContentDispositionFormData("attachment", downloadFileName);
 
         return new ResponseEntity<>(body.getBytes(StandardCharsets.UTF_8), headers, HttpStatus.CREATED);

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/router/ShenyuTestHttpRouter.java
Patch:
@@ -66,7 +66,7 @@ public RouterFunction<ServerResponse> routes() {
     @NonNull
     private Mono<ServerResponse> testRetry(final ServerRequest req) {
         int i = ATOMIC_INTEGER.incrementAndGet();
-        LOG.info("Retry count: " + i);
+        LOG.info("Retry count: {}", i);
         ResultBean resultBean = new ResultBean(1, "msg", "this is retry hello world");
         return ok().body(Mono.just(resultBean), ResultBean.class);
     }

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-grpc/shenyu-examples-sdk-grpc-consumer/src/main/java/org/apache/shenyu/examples/sdk/grpc/consumer/controller/ShenyuSdkGrpcConsumerController.java
Patch:
@@ -45,7 +45,7 @@ public class ShenyuSdkGrpcConsumerController {
      */
     @PostMapping("/hello")
     public List<HelloResponse> hello(final @RequestBody HelloRequest request) {
-        return shenyuGrpcClientApi.hello(new GrpcData<HelloRequest>(Collections.singletonList(request)));
+        return shenyuGrpcClientApi.hello(new GrpcData<>(Collections.singletonList(request)));
     }
 
     /**

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/HttpAuthHandler.java
Patch:
@@ -85,7 +85,7 @@ protected void handleTextMessage(final WebSocketSession session, final TextMessa
     @Override
     public void afterConnectionClosed(final WebSocketSession session, final CloseStatus status) throws Exception {
         Object token = session.getAttributes().get("token");
-        LOG.info("closed with status: {}" + status);
+        LOG.info("closed with status: {}", status);
         if (Objects.nonNull(token)) {
             // The user exits and removes the cache.
             WsSessionManager.remove(token.toString());

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/interceptor/WebSocketInterceptor.java
Patch:
@@ -58,7 +58,7 @@ public boolean beforeHandshake(final ServerHttpRequest request,
         String uid = paramMap.get("token");
         if (StringUtils.isNotBlank(uid)) {
             attributes.put("token", uid);
-            LOG.info("user token " + uid + " shook hands successfully！");
+            LOG.info("user token {} shook hands successfully！", uid);
             return true;
         }
         LOG.info("user login has expired");

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DivideIngressParser.java
Patch:
@@ -32,6 +32,7 @@
 import io.kubernetes.client.openapi.models.V1Secret;
 import io.kubernetes.client.openapi.models.V1Service;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
 import org.apache.shenyu.common.dto.ConditionData;
@@ -269,7 +270,7 @@ private String parsePort(final V1IngressServiceBackend service) {
         if (Objects.nonNull(service.getPort())) {
             if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
                 return String.valueOf(service.getPort().getNumber());
-            } else if (service.getPort().getName() != null && !"".equals(service.getPort().getName().trim())) {
+            } else if (service.getPort().getName() != null && StringUtils.isNoneBlank(service.getPort().getName().trim())) {
                 return service.getPort().getName().trim();
             }
         }

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DubboIngressParser.java
Patch:
@@ -32,6 +32,7 @@
 import io.kubernetes.client.openapi.models.V1Secret;
 import io.kubernetes.client.openapi.models.V1Service;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
 import org.apache.shenyu.common.dto.ConditionData;
@@ -188,7 +189,7 @@ private String parsePort(final V1IngressServiceBackend service) {
         if (Objects.nonNull(service.getPort())) {
             if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
                 return String.valueOf(service.getPort().getNumber());
-            } else if (service.getPort().getName() != null && !"".equals(service.getPort().getName().trim())) {
+            } else if (service.getPort().getName() != null && StringUtils.isNoneBlank(service.getPort().getName().trim())) {
                 return service.getPort().getName().trim();
             }
         }

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/GrpcParser.java
Patch:
@@ -32,6 +32,7 @@
 import io.kubernetes.client.openapi.models.V1Secret;
 import io.kubernetes.client.openapi.models.V1Service;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
 import org.apache.shenyu.common.dto.ConditionData;
@@ -212,7 +213,7 @@ private String parsePort(final V1IngressServiceBackend service) {
         if (Objects.nonNull(service.getPort())) {
             if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
                 return String.valueOf(service.getPort().getNumber());
-            } else if (service.getPort().getName() != null && !"".equals(service.getPort().getName().trim())) {
+            } else if (service.getPort().getName() != null && StringUtils.isNoneBlank(service.getPort().getName().trim())) {
                 return service.getPort().getName().trim();
             }
         }

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/SofaParser.java
Patch:
@@ -30,6 +30,7 @@
 import io.kubernetes.client.openapi.models.V1Secret;
 import io.kubernetes.client.openapi.models.V1Service;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
 import org.apache.shenyu.common.dto.ConditionData;
@@ -148,7 +149,7 @@ private String parsePort(final V1IngressServiceBackend service) {
         if (Objects.nonNull(service.getPort())) {
             if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
                 return String.valueOf(service.getPort().getNumber());
-            } else if (service.getPort().getName() != null && !"".equals(service.getPort().getName().trim())) {
+            } else if (service.getPort().getName() != null && StringUtils.isNoneBlank(service.getPort().getName().trim())) {
                 return service.getPort().getName().trim();
             }
         }

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/SpringCloudParser.java
Patch:
@@ -32,6 +32,7 @@
 import io.kubernetes.client.openapi.models.V1Secret;
 import io.kubernetes.client.openapi.models.V1Service;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
 import org.apache.shenyu.common.dto.ConditionData;
@@ -269,7 +270,7 @@ private String parsePort(final V1IngressServiceBackend service) {
         if (Objects.nonNull(service.getPort())) {
             if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
                 return String.valueOf(service.getPort().getNumber());
-            } else if (service.getPort().getName() != null && !"".equals(service.getPort().getName().trim())) {
+            } else if (service.getPort().getName() != null && StringUtils.isNoneBlank(service.getPort().getName().trim())) {
                 return service.getPort().getName().trim();
             }
         }

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/WebSocketParser.java
Patch:
@@ -32,6 +32,7 @@
 import io.kubernetes.client.openapi.models.V1Secret;
 import io.kubernetes.client.openapi.models.V1Service;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.config.ssl.SslCrtAndKeyStream;
 import org.apache.shenyu.common.dto.ConditionData;
@@ -267,7 +268,7 @@ private String parsePort(final V1IngressServiceBackend service) {
         if (Objects.nonNull(service.getPort())) {
             if (service.getPort().getNumber() != null && service.getPort().getNumber() > 0) {
                 return String.valueOf(service.getPort().getNumber());
-            } else if (service.getPort().getName() != null && !"".equals(service.getPort().getName().trim())) {
+            } else if (service.getPort().getName() != null && StringUtils.isNoneBlank(service.getPort().getName().trim())) {
                 return service.getPort().getName().trim();
             }
         }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/alert/AlarmSender.java
Patch:
@@ -64,9 +64,7 @@ public static void alarm(final AlarmContent alarmContent) {
             ShenyuConfig shenyuConfig = SpringBeanUtils.getInstance().getBean(ShenyuConfig.class);
             enabled = shenyuConfig.getAlert().getEnabled();
         }
-        AlarmThreadPoolExecutor.getInstance().execute(() -> {
-            alarmService.alarm(alarmContent); 
-        });
+        AlarmThreadPoolExecutor.getInstance().execute(() -> alarmService.alarm(alarmContent));
     }
     
     /**

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/CommonHandleCacheTest.java
Patch:
@@ -56,7 +56,7 @@ public void obtainHandle() {
     @Test
     public void cachedHandle() {
         commonHandleCache.cachedHandle(null, MOCK_VALUE);
-        assert cachedMockMap.size() == 0;
+        assert cachedMockMap.isEmpty();
         commonHandleCache.cachedHandle(MOCK_KEY, MOCK_VALUE);
         assert MOCK_VALUE.equals(commonHandleCache.obtainHandle(MOCK_KEY));
     }
@@ -66,6 +66,6 @@ public void removeHandle() {
         commonHandleCache.cachedHandle(MOCK_KEY, MOCK_VALUE);
         assert cachedMockMap.size() == 1;
         commonHandleCache.removeHandle(MOCK_KEY);
-        assert cachedMockMap.size() == 0;
+        assert cachedMockMap.isEmpty();
     }
 }

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandlerTest.java
Patch:
@@ -96,9 +96,7 @@ public void handlerPluginTest() {
      */
     @Test
     public void redisStandaloneConfigurationErrorTest() {
-        assertThrows(Throwable.class, () -> {
-            ReflectionTestUtils.invokeMethod(redisConnectionFactory, "redisStandaloneConfiguration", new RedisConfigProperties());
-        });
+        assertThrows(Throwable.class, () -> ReflectionTestUtils.invokeMethod(redisConnectionFactory, "redisStandaloneConfiguration", new RedisConfigProperties()));
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/test/java/org/apache/shenyu/plugin/huawei/lts/handler/LoggingHuaweiLtsPluginDataHandlerTest.java
Patch:
@@ -34,7 +34,7 @@ public class LoggingHuaweiLtsPluginDataHandlerTest {
     private final PluginData pluginData = new PluginData();
 
     @BeforeEach
-    private void setUp() {
+    public void setUp() {
         this.loggingHuaweiLtsPluginDataHandler = new LoggingHuaweiLtsPluginDataHandler();
         pluginData.setEnabled(true);
         pluginData.setId(UUID.randomUUID().toString().replace("-", ""));

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/CurrentTimeGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
@@ -37,7 +38,7 @@ public String getName() {
     @Override
     public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         String format = null;
-        if (params.size() >= 1) {
+        if (CollectionUtils.isNotEmpty(params)) {
             format = params.get(0);
         }
         return MockUtil.current(format);

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java
Patch:
@@ -65,7 +65,7 @@ public final class ApacheDubboConfigCache extends DubboConfigCache {
                     config.destroy();
                 }
             })
-            .build(new CacheLoader<String, ReferenceConfig<GenericService>>() {
+            .build(new CacheLoader<>() {
                 @Override
                 @Nonnull
                 public ReferenceConfig<GenericService> load(@Nonnull final String key) {

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/ApplicationConfigCache.java
Patch:
@@ -52,7 +52,7 @@ public final class ApplicationConfigCache {
 
     private final LoadingCache<String, ShenyuServiceInstanceLists> cache = CacheBuilder.newBuilder()
             .maximumSize(Constants.CACHE_MAX_COUNT)
-            .build(new CacheLoader<String, ShenyuServiceInstanceLists>() {
+            .build(new CacheLoader<>() {
                 @Override
                 @NonNull
                 public ShenyuServiceInstanceLists load(@NonNull final String key) {

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/proto/CompleteObserverTest.java
Patch:
@@ -51,9 +51,7 @@ public void onError() {
         Throwable throwable = new Throwable("error");
         completeObserver.onError(throwable);
         ListenableFuture<Void> future = completeObserver.getCompletionFuture();
-        assertThrows(Throwable.class, () -> {
-            future.get();
-        });
+        assertThrows(Throwable.class, future::get);
     }
     
     @Test

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/proto/DynamicMessageMarshallerTest.java
Patch:
@@ -60,9 +60,7 @@ public void testParse() {
     @Test
     public void testParseThrowException() {
         InputStream inputStream = new ByteArrayInputStream("test".getBytes());
-        assertThrows(RuntimeException.class, () -> {
-            dynamicMessageMarshaller.parse(inputStream);
-        });
+        assertThrows(RuntimeException.class, () -> dynamicMessageMarshaller.parse(inputStream));
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/cache/ApplicationConfigCache.java
Patch:
@@ -65,7 +65,7 @@ public final class ApplicationConfigCache {
                 LOG.error("modify ref have exception", e);
             }
         }
-    }).build(new CacheLoader<String, RefererConfig<CommonClient>>() {
+    }).build(new CacheLoader<>() {
         @Override
         @NonNull
         public RefererConfig<CommonClient> load(@NonNull final String key) {

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/proxy/MotanProxyService.java
Patch:
@@ -126,7 +126,7 @@ private void initThreadPool() {
             // should not execute to here
             threadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                     60L, TimeUnit.SECONDS,
-                    new SynchronousQueue<Runnable>(),
+                    new SynchronousQueue<>(),
                     factory);
             return;
         }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -83,7 +83,7 @@ public final class ApplicationConfigCache {
                     }
                 }
             })
-            .build(new CacheLoader<String, ConsumerConfig<GenericService>>() {
+            .build(new CacheLoader<>() {
                 
                 @Override
                 @NonNull

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/cache/ApplicationConfigCache.java
Patch:
@@ -81,7 +81,7 @@ public final class ApplicationConfigCache {
     
     private final LoadingCache<String, TarsInvokePrxList> cache = CacheBuilder.newBuilder()
             .maximumSize(Constants.CACHE_MAX_COUNT)
-            .build(new CacheLoader<String, TarsInvokePrxList>() {
+            .build(new CacheLoader<>() {
                 @NonNull
                 @Override
                 public TarsInvokePrxList load(@NonNull final String key) {

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/util/PrxInfoUtilTest.java
Patch:
@@ -46,9 +46,7 @@ public void testGetParamClass() throws Exception {
 
     @Test
     public void testGetParamClassThrowsClassNotFoundException() throws Exception {
-        assertThrows(ClassNotFoundException.class, () -> {
-            PrxInfoUtil.getParamClass("className");
-        });
+        assertThrows(ClassNotFoundException.class, () -> PrxInfoUtil.getParamClass("className"));
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/SpringCloudPluginTest.java
Patch:
@@ -145,9 +145,7 @@ public void doExecute() {
         shenyuContext.setRealUrl("http://localhost/test");
         shenyuContext.setHttpMethod(HttpMethod.GET.name());
         exchange.getAttributes().put(Constants.CONTEXT, shenyuContext);
-        assertThrows(NullPointerException.class, () -> {
-            StepVerifier.create(springCloudPlugin.doExecute(exchange, chain, selectorData, rule)).expectSubscription().verifyComplete();
-        });
+        assertThrows(NullPointerException.class, () -> StepVerifier.create(springCloudPlugin.doExecute(exchange, chain, selectorData, rule)).expectSubscription().verifyComplete());
 
         Mono<Void> complete = springCloudPlugin.doExecute(exchange, chain, selector, rule);
         assertThrows(NullPointerException.class, () -> StepVerifier.create(complete).expectSubscription().verifyComplete());

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -56,7 +56,7 @@ public class WebClientMessageWriter implements MessageWriter {
     /**
      * the cross headers.
      */
-    private static final Set<String> CORS_HEADERS = new HashSet<String>() {
+    private static final Set<String> CORS_HEADERS = new HashSet<>() {
         {
             add(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS);
             add(HttpHeaders.ACCESS_CONTROL_MAX_AGE);
@@ -151,7 +151,7 @@ private void clean(final ServerWebExchange exchange) {
         // pdf => .pdf
         // octet-stream => octet-stream
         // force-download => force-download
-        Set<String> commonBinaryTypes = new HashSet<String>() {
+        Set<String> commonBinaryTypes = new HashSet<>() {
             {
                 add("image");
                 add("audio");

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/NettyClientMessageWriterTest.java
Patch:
@@ -82,7 +82,7 @@ public void testWriteWith() {
         when(connection.inbound().receive()).thenReturn(mock(ByteBufFlux.class));
         when(connection.inbound().receive().retain()).thenReturn(mock(ByteBufFlux.class));
 
-        final Flux<NettyDataBuffer> body = new Flux<NettyDataBuffer>() {
+        final Flux<NettyDataBuffer> body = new Flux<>() {
             @Override
             public void subscribe(final CoreSubscriber<? super NettyDataBuffer> coreSubscriber) {
                 coreSubscriber.onComplete();

File: shenyu-plugin/shenyu-plugin-security/shenyu-plugin-basic-auth/src/test/java/org/apache/shenyu/plugin/basic/auth/rule/BasicAuthRuleHandleTest.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.isA;
 import static org.hamcrest.Matchers.nullValue;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test case for {@link BasicAuthRuleHandle}.

File: shenyu-plugin/shenyu-plugin-wasm-api/src/test/java/org/apache/shenyu/plugin/wasm/api/AbstractWasmPluginTest.java
Patch:
@@ -105,7 +105,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
             funcMap.put("get_args", WasmFunctions.wrap(store, WasmValType.I64, WasmValType.I64, WasmValType.I32, WasmValType.I32,
                 (argId, addr, len) -> {
                     String config = "hello from java " + argId;
-                    LOG.info("java side->" + config);
+                    LOG.info("java side->{}", config);
                     assertEquals("hello from java 0", config);
                     ByteBuffer buf = super.getBuffer();
                     for (int i = 0; i < len && i < config.length(); i++) {
@@ -123,7 +123,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
                     String result = new String(bytes, StandardCharsets.UTF_8);
                     assertEquals("rust result", result);
                     RESULTS.put(argId, result);
-                    LOG.info("java side->" + result);
+                    LOG.info("java side->{}", result);
                     return 0;
                 }));
             return funcMap;

File: shenyu-plugin/shenyu-plugin-wasm-base/src/test/java/org/apache/shenyu/plugin/wasm/base/AbstractShenyuWasmPluginTest.java
Patch:
@@ -291,7 +291,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
             funcMap.put("get_args", WasmFunctions.wrap(store, WasmValType.I64, WasmValType.I64, WasmValType.I32, WasmValType.I32,
                 (argId, addr, len) -> {
                     String config = "hello from java " + argId;
-                    LOG.info("java side->" + config);
+                    LOG.info("java side-> {}", config);
                     assertEquals("hello from java 0", config);
                     ByteBuffer buf = super.getBuffer();
                     for (int i = 0; i < len && i < config.length(); i++) {
@@ -309,7 +309,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
                     String result = new String(bytes, StandardCharsets.UTF_8);
                     assertEquals("rust result", result);
                     RESULTS.put(argId, result);
-                    LOG.info("java side->" + result);
+                    LOG.info("java side-> {}", result);
                     return 0;
                 }));
             return funcMap;

File: shenyu-plugin/shenyu-plugin-wasm-base/src/test/java/org/apache/shenyu/plugin/wasm/base/handler/AbstractWasmDiscoveryHandlerTest.java
Patch:
@@ -92,7 +92,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
             funcMap.put("get_args", WasmFunctions.wrap(store, WasmValType.I64, WasmValType.I64, WasmValType.I32, WasmValType.I32,
                 (argId, addr, len) -> {
                     String config = "hello from java " + argId;
-                    LOG.info("java side->" + config);
+                    LOG.info("java side->{}", config);
                     assertEquals("hello from java 0", config);
                     ByteBuffer buf = super.getBuffer();
                     for (int i = 0; i < len && i < config.length(); i++) {
@@ -110,7 +110,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
                     String result = new String(bytes, StandardCharsets.UTF_8);
                     assertEquals("rust result", result);
                     RESULTS.put(argId, result);
-                    LOG.info("java side->" + result);
+                    LOG.info("java side->{}", result);
                     return 0;
                 }));
             return funcMap;

File: shenyu-plugin/shenyu-plugin-wasm-base/src/test/java/org/apache/shenyu/plugin/wasm/base/handler/AbstractWasmMetaDataHandlerTest.java
Patch:
@@ -96,7 +96,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
             funcMap.put("get_args", WasmFunctions.wrap(store, WasmValType.I64, WasmValType.I64, WasmValType.I32, WasmValType.I32,
                 (argId, addr, len) -> {
                     String config = "hello from java " + argId;
-                    LOG.info("java side->" + config);
+                    LOG.info("java side->{}", config);
                     assertEquals("hello from java 0", config);
                     ByteBuffer buf = super.getBuffer();
                     for (int i = 0; i < len && i < config.length(); i++) {
@@ -113,7 +113,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
                     }
                     String result = new String(bytes, StandardCharsets.UTF_8);
                     assertEquals("rust result", result);
-                    LOG.info("java side->" + result);
+                    LOG.info("java side->{}", result);
                     return 0;
                 }));
             return funcMap;

File: shenyu-plugin/shenyu-plugin-wasm-base/src/test/java/org/apache/shenyu/plugin/wasm/base/handler/AbstractWasmPluginDataHandlerTest.java
Patch:
@@ -148,7 +148,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
             funcMap.put("get_args", WasmFunctions.wrap(store, WasmValType.I64, WasmValType.I64, WasmValType.I32, WasmValType.I32,
                 (argId, addr, len) -> {
                     String config = "hello from java " + argId;
-                    LOG.info("java side->" + config);
+                    LOG.info("java side->{}", config);
                     assertEquals("hello from java 0", config);
                     ByteBuffer buf = super.getBuffer();
                     for (int i = 0; i < len && i < config.length(); i++) {
@@ -165,7 +165,7 @@ protected Map<String, Func> initWasmCallJavaFunc(final Store<Void> store) {
                     }
                     String result = new String(bytes, StandardCharsets.UTF_8);
                     assertEquals("rust result", result);
-                    LOG.info("java side->" + result);
+                    LOG.info("java side->{}", result);
                     return 0;
                 }));
             return funcMap;

File: shenyu-protocol/shenyu-protocol-grpc/src/main/java/org/apache/shenyu/protocol/grpc/message/JsonMessage.java
Patch:
@@ -194,7 +194,7 @@ private static MethodDescriptor.MethodType getMethodType(final MethodDescriptor.
             default:
                 grpcMethodType = MethodDescriptor.MethodType.UNKNOWN;
         }
-
+        
         return grpcMethodType;
     }
 

File: shenyu-protocol/shenyu-protocol-grpc/src/test/java/org/apache/shenyu/protocol/grpc/message/JsonMessageTest.java
Patch:
@@ -120,7 +120,7 @@ public void testGetDataFromDynamicMessage() {
 
         try (MockedStatic<Descriptors.FileDescriptor> descriptorMockedStatic = mockStatic(Descriptors.FileDescriptor.class)) {
             descriptorMockedStatic.when(() -> Descriptors.FileDescriptor.buildFrom(any(), any(Descriptors.FileDescriptor[].class))).thenThrow(Descriptors.DescriptorValidationException.class);
-            assertThrows(RuntimeException.class, () -> JsonMessage.buildJsonMessage());
+            assertThrows(RuntimeException.class, JsonMessage::buildJsonMessage);
         }
     }
 

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/HttpClientRegisterRepository.java
Patch:
@@ -97,7 +97,7 @@ public void init(final ShenyuRegisterCenterConfig config) {
         this.accessToken = Caffeine.newBuilder()
                 //see org.apache.shenyu.admin.config.properties.JwtProperties#expiredSeconds
                 .expireAfterWrite(24L, TimeUnit.HOURS)
-                .build(new CacheLoader<String, String>() {
+                .build(new CacheLoader<>() {
                     @Override
                     public @Nullable String load(@NonNull final String server) {
                         try {

File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/config/ShenyuClientConfig.java
Patch:
@@ -28,7 +28,7 @@
  */
 public final class ShenyuClientConfig {
     
-    private Map<String, ClientPropertiesConfig> client = new HashMap<String, ClientPropertiesConfig>() {
+    private Map<String, ClientPropertiesConfig> client = new HashMap<>() {
         @Override
         public ClientPropertiesConfig get(final Object key) {
             ClientPropertiesConfig config = super.get(key);

File: shenyu-registry/shenyu-registry-consul/src/test/java/org/apache/shenyu/registry/consul/ConsulInstanceRegisterRepositoryTest.java
Patch:
@@ -104,9 +104,7 @@ public void testSelectInstancesAndWatcher() {
                 .port(9195)
                 .build();
 
-        try (MockedConstruction<ConsulClient> construction = mockConstruction(ConsulClient.class, (mock, context) -> {
-            when(mock.agentCheckRegister(any())).thenReturn(any());
-        })) {
+        try (MockedConstruction<ConsulClient> construction = mockConstruction(ConsulClient.class, (mock, context) -> when(mock.agentCheckRegister(any())).thenReturn(any()))) {
             RegisterConfig instanceConfig = new RegisterConfig();
             final ConsulInstanceRegisterRepository repository = mock(ConsulInstanceRegisterRepository.class);
             Properties properties = new Properties();

File: shenyu-registry/shenyu-registry-etcd/src/main/java/org/apache/shenyu/registry/etcd/EtcdClient.java
Patch:
@@ -66,16 +66,16 @@ public EtcdClient(final String url, final long ttl, final long timeout) {
     private void initLease() {
         try {
             this.globalLeaseId = client.getLeaseClient().grant(ttl).get().getID();
-            client.getLeaseClient().keepAlive(globalLeaseId, new StreamObserver<LeaseKeepAliveResponse>() {
+            client.getLeaseClient().keepAlive(globalLeaseId, new StreamObserver<>() {
                 @Override
                 public void onNext(final LeaseKeepAliveResponse leaseKeepAliveResponse) {
                 }
-
+                
                 @Override
                 public void onError(final Throwable throwable) {
                     LOGGER.error("keep alive error", throwable);
                 }
-
+                
                 @Override
                 public void onCompleted() {
                 }

File: shenyu-registry/shenyu-registry-zookeeper/src/test/java/org/apache/shenyu/registry/zookeeper/ZookeeperInstanceRegisterRepositoryTest.java
Patch:
@@ -64,9 +64,7 @@ public void testZookeeperInstanceRegisterRepository() {
             }).when(listenable).addListener(any());
             repository.init(config);
             repository.persistInstance(mock(InstanceEntity.class));
-            connectionStateListeners.forEach(connectionStateListener -> {
-                connectionStateListener.stateChanged(null, ConnectionState.RECONNECTED);
-            });
+            connectionStateListeners.forEach(connectionStateListener -> connectionStateListener.stateChanged(null, ConnectionState.RECONNECTED));
             repository.close();
         }
     }

File: shenyu-sdk/shenyu-sdk-feign/src/main/java/org/apache/shenyu/sdk/feign/ShenyuDiscoveryClient.java
Patch:
@@ -88,7 +88,7 @@ public ServiceInstance getInstance(final String serviceId) {
         }
         // loadBalancer upstreams
         if (CollectionUtils.isEmpty(upstreams)) {
-            LOG.error("The serviceId that named " + serviceId + " could not load balanced to at least one upstream.");
+            LOG.error("The serviceId that named {} could not load balanced to at least one upstream.", serviceId);
         }
         Upstream upstream = upstreams.get(0);
         if (CollectionUtils.isNotEmpty(upstreams) && upstreams.size() > 1) {

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/AccessTokenManagerTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.shenyu.common.exception.CommonErrorCode;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.http.config.HttpConfig;
-import org.junit.Assert;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -44,6 +43,7 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.get;
 import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.mock;
 
 /**
@@ -100,7 +100,7 @@ public void before() {
     @Test
     public void testLogin() {
         accessTokenManager.login(Lists.newArrayList(httpConfig.getUrl().split(",")));
-        Assert.assertEquals(this.accessToken, accessTokenManager.getAccessToken());
+        assertEquals(this.accessToken, accessTokenManager.getAccessToken());
     }
 
     // mock configs fetch api response

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/context/DivideShenyuContextDecorator.java
Patch:
@@ -33,7 +33,7 @@ public class DivideShenyuContextDecorator implements ShenyuContextDecorator {
     @Override
     public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {
         String path = shenyuContext.getPath();
-        shenyuContext.setMethod(path);
+        shenyuContext.setMethod(shenyuContext.getHttpMethod());
         shenyuContext.setRealUrl(path);
         shenyuContext.setRpcType(RpcTypeEnum.HTTP.getName());
         shenyuContext.setModule(Optional.ofNullable(metaData).map(MetaData::getAppName)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/DashboardUserTransfer.java
Patch:
@@ -65,6 +65,7 @@ public LoginDashboardUserVO transferVO2LoginVO(final DashboardUserVO dashboardUs
             dashboardVO.setPassword(data.getPassword());
             dashboardVO.setRole(data.getRole());
             dashboardVO.setEnabled(data.getEnabled());
+            dashboardVO.setClientId(data.getClientId());
             dashboardVO.setDateCreated(data.getDateCreated());
             dashboardVO.setDateUpdated(data.getDateUpdated());
             return dashboardVO;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -79,11 +79,12 @@ public final class DashboardUserControllerTest {
             "bbiB8zbUo3z3oA0VqEB/IA==",
             0,
             false,
+            "1",
             "dateCreated",
             "dateUpdated");
 
     private final DashboardUserDTO dashboardUserDTO = new DashboardUserDTO("2", "userName",
-            "Admin@123", 0, Lists.newArrayList("1"), false);
+            "Admin@123", 0, Lists.newArrayList("1"), false, "1");
 
     private final DashboardUserModifyPasswordDTO modifyPasswordDTO = new DashboardUserModifyPasswordDTO("2",
             "admin", "ShenYu=#.123", "ShenYu=#.123");

File: shenyu-admin-listener/shenyu-admin-listener-api/src/main/java/org/apache/shenyu/admin/listener/AbstractDataChangedInit.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.admin.service.SyncDataService;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 
 /**
  * AbstractDataChangedInit.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/AlertReportController.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 
-import javax.validation.Valid;
+import jakarta.validation.Valid;
 
 /**
  * Alert report Controller.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ConfigsExportImportController.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.controller;
 
-import com.alibaba.nacos.common.utils.DateFormatUtils;
+import org.apache.commons.lang3.time.DateFormatUtils;
 import org.apache.shenyu.admin.aspect.annotation.RestApi;
 import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
 import org.apache.shenyu.admin.service.ConfigsService;
@@ -37,7 +37,7 @@
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.multipart.MultipartFile;
 
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.util.Date;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DataPermissionController.java
Patch:
@@ -33,8 +33,8 @@
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestParam;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotNull;
 
 /**
  * this is dataPermission controller.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DiscoveryController.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 
-import javax.validation.Valid;
+import jakarta.validation.Valid;
 
 /**
  * this is discovery controller.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DiscoveryUpstreamController.java
Patch:
@@ -30,9 +30,9 @@
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotEmpty;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotEmpty;
 import java.util.List;
 
 @RestApi("/discovery-upstream")

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/NamespaceController.java
Patch:
@@ -36,9 +36,9 @@
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestParam;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.util.List;
 
 @RestApi("/namespace")

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/NamespacePluginController.java
Patch:
@@ -47,8 +47,8 @@
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotNull;
 import java.util.List;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SandboxController.java
Patch:
@@ -23,9 +23,9 @@
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import javax.validation.Valid;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import jakarta.validation.Valid;
 import java.io.IOException;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagController.java
Patch:
@@ -33,9 +33,9 @@
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotEmpty;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotEmpty;
 import java.util.List;
 import java.util.Optional;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/TagRelationController.java
Patch:
@@ -30,9 +30,9 @@
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotEmpty;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotEmpty;
 import java.util.List;
 import java.util.Optional;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/RegisterClientServerDisruptorPublisher.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.shenyu.admin.register.ShenyuClientServerRegisterPublisher;
 import org.apache.shenyu.admin.service.DiscoveryService;
 import org.apache.shenyu.admin.service.register.ShenyuClientRegisterService;
-import org.apache.shenyu.admin.spring.SpringBeanUtils;
 import org.apache.shenyu.disruptor.DisruptorProviderManage;
 import org.apache.shenyu.disruptor.provider.DisruptorProvider;
 import org.apache.shenyu.register.common.type.DataTypeParent;
@@ -57,13 +56,14 @@ public static RegisterClientServerDisruptorPublisher getInstance() {
      * start.
      *
      * @param shenyuClientRegisterService the shenyu client register service
+     * @param discoveryService the discovery service
      */
-    public void start(final Map<String, ShenyuClientRegisterService> shenyuClientRegisterService) {
+    public void start(final Map<String, ShenyuClientRegisterService> shenyuClientRegisterService, final DiscoveryService discoveryService) {
         RegisterServerExecutorFactory factory = new RegisterServerExecutorFactory();
         factory.addSubscribers(new URIRegisterExecutorSubscriber(shenyuClientRegisterService));
         factory.addSubscribers(new MetadataExecutorSubscriber(shenyuClientRegisterService));
         factory.addSubscribers(new ApiDocExecutorSubscriber(shenyuClientRegisterService));
-        factory.addSubscribers(new DiscoveryConfigRegisterExecutorSubscriber(SpringBeanUtils.getInstance().getBean(DiscoveryService.class)));
+        factory.addSubscribers(new DiscoveryConfigRegisterExecutorSubscriber(discoveryService));
         providerManage = new DisruptorProviderManage<>(factory);
         providerManage.startup();
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/exception/ExceptionHandlers.java
Patch:
@@ -37,8 +37,8 @@
 import org.springframework.web.bind.annotation.ResponseBody;
 import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
 
-import javax.validation.ConstraintViolation;
-import javax.validation.ConstraintViolationException;
+import jakarta.validation.ConstraintViolation;
+import jakarta.validation.ConstraintViolationException;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -37,11 +37,12 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.JsonUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.InitializingBean;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -184,6 +185,7 @@ public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum
         if (CollectionUtils.isEmpty(changed)) {
             return;
         }
+        LOG.info("onRuleChanged, changed:{}, eventType:{}", JsonUtils.toJson(changed), JsonUtils.toJson(eventType));
         this.updateRuleCache();
         this.afterRuleChanged(changed, eventType);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/ApplicationStartListener.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.listener;
 
+import jakarta.annotation.Resource;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.mode.ShenyuRunningModeService;
 import org.apache.shenyu.admin.utils.ShenyuDomain;
@@ -26,8 +27,6 @@
 import org.springframework.context.ApplicationListener;
 import org.springframework.stereotype.Component;
 
-import javax.annotation.Resource;
-
 
 /**
  * ApplicationStartListener.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListener.java
Patch:
@@ -43,9 +43,9 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.http.MediaType;
 
-import javax.servlet.AsyncContext;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.AsyncContext;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ApiDTO.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.shenyu.admin.mapper.ApiMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.Max;
-import javax.validation.constraints.Min;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.Max;
+import jakarta.validation.constraints.Min;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Date;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AppAuthDTO.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.shenyu.admin.mapper.AppAuthMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Pattern;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Pattern;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthApplyDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Pattern;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Pattern;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthParamDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathApplyDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathWarpDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.AppAuthMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.Valid;
-import javax.validation.constraints.NotEmpty;
+import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotEmpty;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/BatchCommonDTO.java
Patch:
@@ -17,8 +17,9 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
+
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/BatchNamespaceCommonDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotEmpty;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotEmpty;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/CreateResourceDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 
 /**
  * this is created resource Dto.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DashboardUserDTO.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.shenyu.admin.model.constant.RegConstant;
 import org.apache.shenyu.admin.utils.FailI18nMessage;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
-import javax.validation.constraints.Pattern;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
+import jakarta.validation.constraints.Pattern;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DashboardUserModifyPasswordDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.model.constant.RegConstant;
 import org.apache.shenyu.admin.utils.FailI18nMessage;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Pattern;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Pattern;
 import java.io.Serializable;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DataPermissionDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DiscoveryDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DiscoveryUpstreamDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.DiscoveryUpstreamMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.sql.Timestamp;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/FieldDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.FieldMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.sql.Timestamp;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/MetaDataDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.MetaDataMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/NamespaceDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/PluginDTO.java
Patch:
@@ -21,9 +21,9 @@
 import org.apache.shenyu.admin.mapper.PluginMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.Min;
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.Min;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/PluginHandleDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.PluginHandleMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ProxySelectorAddDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.ProxySelectorMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.List;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ProxySelectorDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.ProxySelectorMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ResourceDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.ResourceMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.util.Objects;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/RoleDTO.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.admin.mapper.RoleMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/RuleConditionDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/SelectorConditionDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ShenyuDictDTO.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.mapper.ShenyuDictMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/UserRoleDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.util.Objects;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/query/RecordLogQueryCondition.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.model.page.condition.SearchCondition;
 import org.apache.shenyu.common.utils.DateUtils;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 import java.util.Date;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/DiscoveryVO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.vo;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SandboxService.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.shenyu.admin.model.dto.ProxyGatewayDTO;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -60,7 +60,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import javax.annotation.Nullable;
+import jakarta.annotation.Nullable;
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SandboxServiceImpl.java
Patch:
@@ -44,8 +44,8 @@
 import org.springframework.web.util.UriComponentsBuilder;
 import org.springframework.web.util.UriUtils;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.time.Instant;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -58,7 +58,7 @@
 import org.springframework.context.event.EventListener;
 import org.springframework.stereotype.Component;
 
-import javax.annotation.PreDestroy;
+import jakarta.annotation.PreDestroy;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedList;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/DocManagerImpl.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.function.Consumer;
 
 import com.google.gson.JsonObject;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.bean.DocInfo;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/PullSwaggerDocServiceImpl.java
Patch:
@@ -39,7 +39,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.web.util.UriComponentsBuilder;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/RegisterApiDocServiceImpl.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.admin.model.dto.ApiDTO;
 import org.apache.shenyu.admin.model.dto.TagDTO;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractContextPathRegisterService.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.integration.support.locks.LockRegistry;
 import java.util.concurrent.locks.Lock;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.Objects;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -52,7 +52,7 @@
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
 import org.springframework.context.ApplicationEventPublisher;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImpl.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.shenyu.register.common.enums.EventType;
 import org.springframework.stereotype.Service;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.shenyu.register.common.enums.EventType;
 import org.springframework.stereotype.Service;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Collectors;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImpl.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.shenyu.register.common.enums.EventType;
 import org.springframework.stereotype.Service;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.shenyu.register.common.enums.EventType;
 import org.springframework.stereotype.Service;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Collectors;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImpl.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.shenyu.register.common.enums.EventType;
 import org.springframework.stereotype.Service;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Collectors;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/shiro/config/ShiroConfiguration.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
 
-import javax.servlet.Filter;
+import jakarta.servlet.Filter;
 import java.util.LinkedHashMap;
 import java.util.Map;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/spring/LocalDataSourceLoader.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.Reader;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/UploadUtils.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Collectors;
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 import org.springframework.util.MultiValueMap;
 import org.springframework.web.multipart.MultipartFile;
 import org.springframework.web.multipart.MultipartHttpServletRequest;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/validation/annotation/Existed.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.admin.validation.ExistProvider;
 import org.apache.shenyu.admin.validation.validator.ExistedValidator;
 
-import javax.validation.Constraint;
-import javax.validation.Payload;
+import jakarta.validation.Constraint;
+import jakarta.validation.Payload;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/validation/validator/ExistedValidator.java
Patch:
@@ -29,8 +29,8 @@
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 
-import javax.validation.ConstraintValidator;
-import javax.validation.ConstraintValidatorContext;
+import jakarta.validation.ConstraintValidator;
+import jakarta.validation.ConstraintValidatorContext;
 
 /**
  * ExistedValidator.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ConfigControllerTest.java
Patch:
@@ -34,8 +34,8 @@
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import java.util.Collections;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/PluginControllerTest.java
Patch:
@@ -184,7 +184,7 @@ public void testCreatePlugin() throws Exception {
                         .param("role", pluginDTO.getRole())
                         .param("sort", String.valueOf(pluginDTO.getSort())))
                 .andExpect(status().isOk())
-                .andExpect(jsonPath("$.message", Matchers.containsString("The system is busy, please try again later")))
+                .andExpect(jsonPath("$.message", Matchers.containsString("Request error! invalid argument")))
                 .andReturn();
     }
 
@@ -215,7 +215,7 @@ public void testUpdatePlugin() throws Exception {
                         .param("enabled", String.valueOf(pluginDTO.getEnabled()))
                         .param("role", pluginDTO.getRole())
                         .param("sort", String.valueOf(pluginDTO.getSort())))
-                .andExpect(jsonPath("$.message", is("The system is busy, please try again later")))
+                .andExpect(jsonPath("$.message", Matchers.containsString("Request error! invalid argument")))
                 .andReturn();
         when(pluginMapper.existed(pluginDTO.getId())).thenReturn(true);
         given(this.pluginService.createOrUpdate(pluginDTO)).willReturn(ShenyuResultMessage.CREATE_SUCCESS);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/ApplicationStartListenerTest.java
Patch:
@@ -21,15 +21,16 @@
 import org.apache.shenyu.admin.utils.ShenyuDomain;
 import org.apache.shenyu.common.utils.IpUtils;
 import org.junit.jupiter.api.Test;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalManagementPort;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test case for {@link ApplicationStartListener}.
  */
 public final class ApplicationStartListenerTest extends AbstractSpringIntegrationTest {
 
-    @LocalServerPort
+    @LocalManagementPort
     private Integer port;
 
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -36,8 +36,8 @@
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.test.util.ReflectionTestUtils;
 
-import javax.websocket.RemoteEndpoint;
-import javax.websocket.Session;
+import jakarta.websocket.RemoteEndpoint;
+import jakarta.websocket.Session;
 import java.io.IOException;
 import java.util.Objects;
 import java.util.Set;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketListenerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.servlet.ServletRequestEvent;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpSession;
+import jakarta.servlet.ServletRequestEvent;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpSession;
 
 import static org.apache.shenyu.admin.listener.websocket.WebsocketListener.CLIENT_IP_NAME;
 import static org.mockito.Mockito.mock;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ApiMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.Collections;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ApiRuleRelationMapperTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AppAuthMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AuthParamMapperTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.entity.AuthParamDO;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AuthPathMapperTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.entity.AuthPathDO;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DashboardUserMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DataPermissionMapperTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.assertj.core.util.Lists;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DetailMapperTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DiscoveryHandlerMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DiscoveryUpstreamMapperTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.Collections;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/FieldMapperTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MetaDataMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.stream.Collectors;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MockRequestRecordMapperTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.transaction.annotation.Transactional;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.Arrays;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ModelMapperTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 
 import java.sql.Timestamp;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/OperationRecordLogMapperTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 
 import java.util.Date;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ParameterMapperTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/PluginHandleMapperTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.stream.Collectors;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/PluginMapperTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.model.query.PluginQuery;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ProxySelectorMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.Collections;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RoleMapperTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.Collections;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RuleConditionMapperTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.time.LocalDateTime;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RuleMapperTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.admin.model.query.RuleQuery;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.Random;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorConditionMapperTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.time.LocalDateTime;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorMapperTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.Set;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ShenyuDictMapperTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.assertj.core.util.Lists;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.stream.Collectors;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.model.entity.TagDO;
 import org.apache.shenyu.admin.model.query.TagQuery;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagRelationMapperTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.Objects;
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.model.entity.TagRelationDO;
 import org.apache.shenyu.admin.model.query.TagRelationQuery;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/UserRoleMapperTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/event/role/RoleUpdatedEventTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotBlank;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/shiro/bean/StatelessAuthFilterTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.mockito.quality.Strictness;
 import org.springframework.http.HttpMethod;
 
-import javax.servlet.ServletResponse;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import jakarta.servlet.ServletResponse;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.PrintWriter;
 import java.lang.reflect.Method;
 

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/config/ThymeleafConfig.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;
+import org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver;
 import org.thymeleaf.templatemode.TemplateMode;
 
 import java.nio.charset.StandardCharsets;
@@ -44,7 +44,7 @@ public SpringResourceTemplateResolver templateResolver() {
         templateResolver.setOrder(2);
         templateResolver.setCheckExistence(true);
         templateResolver.setCacheable(true);
-        
+
         return templateResolver;
     }
     

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/AbstractAlertNotifyHandler.java
Patch:
@@ -23,7 +23,7 @@
 import org.thymeleaf.TemplateEngine;
 import org.thymeleaf.context.Context;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/EmailAlertNotifyStrategy.java
Patch:
@@ -28,7 +28,7 @@
 import org.thymeleaf.TemplateEngine;
 import org.thymeleaf.context.Context;
 
-import javax.mail.internet.MimeMessage;
+import jakarta.mail.internet.MimeMessage;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/ApacheDubboClientValidatorTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import javax.validation.ValidationException;
+import jakarta.validation.ValidationException;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/mock/MockConstraint.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.client.apache.dubbo.validation.mock;
 
-import javax.validation.Constraint;
-import javax.validation.Payload;
+import jakarta.validation.Constraint;
+import jakarta.validation.Payload;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/mock/MockConstraintValidator.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.client.apache.dubbo.validation.mock;
 
-import javax.validation.ConstraintValidator;
-import javax.validation.ConstraintValidatorContext;
+import jakarta.validation.ConstraintValidator;
+import jakarta.validation.ConstraintValidatorContext;
 
 /**
  * MockConstraintValidator.

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/mock/MockValidationParameter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.client.apache.dubbo.validation.mock;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 
 /**
  * MockValidationParameter.

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/mock/MockValidatorTarget.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dubbo.validation.MethodValidated;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 import java.util.List;
 import java.util.Map;
 

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/service/TestService.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.client.apache.dubbo.validation.service;
 
-import javax.validation.constraints.NotNull;
+import jakarta.validation.constraints.NotNull;
 import java.util.Objects;
 
 /**

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/annotation/ShenyuRequestMapping.java
Patch:
@@ -42,15 +42,15 @@
      * @return the string
      */
     @AliasFor(attribute = "path")
-    String value() default "";
+    String[] value() default "";
 
     /**
      * Alias for {@link RequestMapping#path}, {@link ShenyuSpringCloudClient#path}.
      *
      * @return the string
      */
     @AliasFor(attribute = "value")
-    String path() default "";
+    String[] path() default "";
 
     /**
      * Alias for {@link ShenyuSpringCloudClient#ruleName}.

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/annotation/ShenyuSpringCloudClient.java
Patch:
@@ -37,15 +37,15 @@
      * @return the string
      */
     @AliasFor(attribute = "path")
-    String value() default "";
+    String[] value() default "";
 
     /**
      * Path string.
      *
      * @return the string
      */
     @AliasFor(attribute = "value")
-    String path() default "";
+    String[] path() default "";
 
     /**
      * Rule name string.

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuDeleteMappingTest.java
Patch:
@@ -59,8 +59,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/{id}");
             ShenyuSpringCloudClient shenyuSpringCloudClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringCloudClient.class);
             assertNotNull(shenyuSpringCloudClient);
-            assertEquals(shenyuSpringCloudClient.value(), "/{id}");
-            assertEquals(shenyuSpringCloudClient.path(), "/{id}");
+            assertEquals(shenyuSpringCloudClient.value()[0], "/{id}");
+            assertEquals(shenyuSpringCloudClient.path()[0], "/{id}");
             assertEquals(shenyuSpringCloudClient.ruleName(), "divide");
             assertFalse(shenyuSpringCloudClient.enabled());
             assertEquals(shenyuSpringCloudClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuGetMappingTest.java
Patch:
@@ -59,8 +59,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/{id}");
             ShenyuSpringCloudClient shenyuSpringCloudClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringCloudClient.class);
             assertNotNull(shenyuSpringCloudClient);
-            assertEquals(shenyuSpringCloudClient.value(), "/{id}");
-            assertEquals(shenyuSpringCloudClient.path(), "/{id}");
+            assertEquals(shenyuSpringCloudClient.value()[0], "/{id}");
+            assertEquals(shenyuSpringCloudClient.path()[0], "/{id}");
             assertEquals(shenyuSpringCloudClient.ruleName(), "divide");
             assertFalse(shenyuSpringCloudClient.enabled());
             assertEquals(shenyuSpringCloudClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuPatchMappingTest.java
Patch:
@@ -59,8 +59,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/patch");
             ShenyuSpringCloudClient shenyuSpringCloudClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringCloudClient.class);
             assertNotNull(shenyuSpringCloudClient);
-            assertEquals(shenyuSpringCloudClient.value(), "/patch");
-            assertEquals(shenyuSpringCloudClient.path(), "/patch");
+            assertEquals(shenyuSpringCloudClient.value()[0], "/patch");
+            assertEquals(shenyuSpringCloudClient.path()[0], "/patch");
             assertEquals(shenyuSpringCloudClient.ruleName(), "divide");
             assertFalse(shenyuSpringCloudClient.enabled());
             assertEquals(shenyuSpringCloudClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuPostMappingTest.java
Patch:
@@ -59,8 +59,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/save");
             ShenyuSpringCloudClient shenyuSpringCloudClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringCloudClient.class);
             assertNotNull(shenyuSpringCloudClient);
-            assertEquals(shenyuSpringCloudClient.value(), "/save");
-            assertEquals(shenyuSpringCloudClient.path(), "/save");
+            assertEquals(shenyuSpringCloudClient.value()[0], "/save");
+            assertEquals(shenyuSpringCloudClient.path()[0], "/save");
             assertEquals(shenyuSpringCloudClient.ruleName(), "divide");
             assertFalse(shenyuSpringCloudClient.enabled());
             assertEquals(shenyuSpringCloudClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuPutMappingTest.java
Patch:
@@ -59,8 +59,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/put");
             ShenyuSpringCloudClient shenyuSpringCloudClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringCloudClient.class);
             assertNotNull(shenyuSpringCloudClient);
-            assertEquals(shenyuSpringCloudClient.value(), "/put");
-            assertEquals(shenyuSpringCloudClient.path(), "/put");
+            assertEquals(shenyuSpringCloudClient.value()[0], "/put");
+            assertEquals(shenyuSpringCloudClient.path()[0], "/put");
             assertEquals(shenyuSpringCloudClient.ruleName(), "divide");
             assertFalse(shenyuSpringCloudClient.enabled());
             assertEquals(shenyuSpringCloudClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuRequestMappingTest.java
Patch:
@@ -44,8 +44,8 @@ public void testWithShenyuRequestMappingAnnotation() {
         Class<?> clazz = springCloudClientTestBean.getClass();
         final ShenyuSpringCloudClient shenyuSpringCloudClient = AnnotatedElementUtils.findMergedAnnotation(clazz, ShenyuSpringCloudClient.class);
         assertNotNull(shenyuSpringCloudClient);
-        assertEquals(shenyuSpringCloudClient.value(), "/order");
-        assertEquals(shenyuSpringCloudClient.path(), "/order");
+        assertEquals(shenyuSpringCloudClient.value()[0], "/order");
+        assertEquals(shenyuSpringCloudClient.path()[0], "/order");
         assertEquals(shenyuSpringCloudClient.ruleName(), "divide");
         assertFalse(shenyuSpringCloudClient.enabled());
         assertEquals(shenyuSpringCloudClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/annotation/ShenyuRequestMapping.java
Patch:
@@ -42,15 +42,15 @@
      * @return the string
      */
     @AliasFor(attribute = "path")
-    String value() default "";
+    String[] value() default "";
 
     /**
      * Alias for {@link RequestMapping#path}, {@link ShenyuSpringMvcClient#path}.
      *
      * @return the string
      */
     @AliasFor(attribute = "value")
-    String path() default "";
+    String[] path() default "";
 
     /**
      * Alias for {@link ShenyuSpringMvcClient#ruleName}.

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/annotation/ShenyuSpringMvcClient.java
Patch:
@@ -37,15 +37,15 @@
      * @return the string
      */
     @AliasFor(attribute = "path")
-    String value() default "";
+    String[] value() default "";
 
     /**
      * Path string.
      *
      * @return the string
      */
     @AliasFor(attribute = "value")
-    String path() default "";
+    String[] path() default "";
 
     /**
      * Rule name string.

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuDeleteMappingTest.java
Patch:
@@ -60,8 +60,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/{id}");
             ShenyuSpringMvcClient shenyuSpringMvcClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringMvcClient.class);
             assertNotNull(shenyuSpringMvcClient);
-            assertEquals(shenyuSpringMvcClient.value(), "/{id}");
-            assertEquals(shenyuSpringMvcClient.path(), "/{id}");
+            assertEquals(shenyuSpringMvcClient.value()[0], "/{id}");
+            assertEquals(shenyuSpringMvcClient.path()[0], "/{id}");
             assertEquals(shenyuSpringMvcClient.ruleName(), "divide");
             assertFalse(shenyuSpringMvcClient.enabled());
             assertEquals(shenyuSpringMvcClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuGetMappingTest.java
Patch:
@@ -60,8 +60,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/{id}");
             ShenyuSpringMvcClient shenyuSpringMvcClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringMvcClient.class);
             assertNotNull(shenyuSpringMvcClient);
-            assertEquals(shenyuSpringMvcClient.value(), "/{id}");
-            assertEquals(shenyuSpringMvcClient.path(), "/{id}");
+            assertEquals(shenyuSpringMvcClient.value()[0], "/{id}");
+            assertEquals(shenyuSpringMvcClient.path()[0], "/{id}");
             assertEquals(shenyuSpringMvcClient.ruleName(), "divide");
             assertFalse(shenyuSpringMvcClient.enabled());
             assertEquals(shenyuSpringMvcClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuPatchMappingTest.java
Patch:
@@ -60,8 +60,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/patch");
             ShenyuSpringMvcClient shenyuSpringMvcClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringMvcClient.class);
             assertNotNull(shenyuSpringMvcClient);
-            assertEquals(shenyuSpringMvcClient.value(), "/patch");
-            assertEquals(shenyuSpringMvcClient.path(), "/patch");
+            assertEquals(shenyuSpringMvcClient.value()[0], "/patch");
+            assertEquals(shenyuSpringMvcClient.path()[0], "/patch");
             assertEquals(shenyuSpringMvcClient.ruleName(), "divide");
             assertFalse(shenyuSpringMvcClient.enabled());
             assertEquals(shenyuSpringMvcClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuPostMappingTest.java
Patch:
@@ -60,8 +60,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/save");
             ShenyuSpringMvcClient shenyuSpringMvcClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringMvcClient.class);
             assertNotNull(shenyuSpringMvcClient);
-            assertEquals(shenyuSpringMvcClient.value(), "/save");
-            assertEquals(shenyuSpringMvcClient.path(), "/save");
+            assertEquals(shenyuSpringMvcClient.value()[0], "/save");
+            assertEquals(shenyuSpringMvcClient.path()[0], "/save");
             assertEquals(shenyuSpringMvcClient.ruleName(), "divide");
             assertFalse(shenyuSpringMvcClient.enabled());
             assertEquals(shenyuSpringMvcClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuPutMappingTest.java
Patch:
@@ -60,8 +60,8 @@ public void testWithShenyuRequestMappingAnnotation() {
             assertEquals(requestMapping.path()[0], "/put");
             ShenyuSpringMvcClient shenyuSpringCloudClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringMvcClient.class);
             assertNotNull(shenyuSpringCloudClient);
-            assertEquals(shenyuSpringCloudClient.value(), "/put");
-            assertEquals(shenyuSpringCloudClient.path(), "/put");
+            assertEquals(shenyuSpringCloudClient.value()[0], "/put");
+            assertEquals(shenyuSpringCloudClient.path()[0], "/put");
             assertEquals(shenyuSpringCloudClient.ruleName(), "divide");
             assertFalse(shenyuSpringCloudClient.enabled());
             assertEquals(shenyuSpringCloudClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuRequestMappingTest.java
Patch:
@@ -45,8 +45,8 @@ public void testWithShenyuRequestMappingAnnotation() {
         Class<?> clazz = springMvcClientTestBean.getClass();
         final ShenyuSpringMvcClient shenyuSpringMvcClient = AnnotatedElementUtils.findMergedAnnotation(clazz, ShenyuSpringMvcClient.class);
         assertNotNull(shenyuSpringMvcClient);
-        assertEquals(shenyuSpringMvcClient.value(), "/order");
-        assertEquals(shenyuSpringMvcClient.path(), "/order");
+        assertEquals(shenyuSpringMvcClient.value()[0], "/order");
+        assertEquals(shenyuSpringMvcClient.path()[0], "/order");
         assertEquals(shenyuSpringMvcClient.ruleName(), "divide");
         assertFalse(shenyuSpringMvcClient.enabled());
         assertEquals(shenyuSpringMvcClient.desc(), "it`s test.");

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/MotanServiceEventListener.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.context.ApplicationContext;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.lang.Nullable;
 import org.springframework.util.ReflectionUtils;
@@ -59,7 +59,7 @@ public class MotanServiceEventListener extends AbstractContextRefreshedEventList
 
     private static final String BASE_SERVICE_CONFIG = "baseServiceConfig";
 
-    private final LocalVariableTableParameterNameDiscoverer localVariableTableParameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();
+    private final StandardReflectionParameterNameDiscoverer localVariableTableParameterNameDiscoverer = new StandardReflectionParameterNameDiscoverer();
 
     private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanEventListener.java
Patch:
@@ -37,7 +37,8 @@
 import org.javatuples.Sextet;
 import org.springframework.aop.support.AopUtils;
 import org.springframework.context.ApplicationContext;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;
@@ -58,7 +59,7 @@
  */
 public class TarsServiceBeanEventListener extends AbstractContextRefreshedEventListener<Object, ShenyuTarsClient> {
 
-    private final LocalVariableTableParameterNameDiscoverer localVariableTableParameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();
+    private final StandardReflectionParameterNameDiscoverer localVariableTableParameterNameDiscoverer = new StandardReflectionParameterNameDiscoverer();
 
     private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/annotation/ShenyuServerEndpoint.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.springframework.core.annotation.AliasFor;
 
-import javax.websocket.Decoder;
-import javax.websocket.Encoder;
-import javax.websocket.server.ServerEndpointConfig;
+import jakarta.websocket.Decoder;
+import jakarta.websocket.Encoder;
+import jakarta.websocket.server.ServerEndpointConfig;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/test/java/org/apache/shenyu/client/spring/websocket/init/ShenyuServerEndpointerExporterTest.java
Patch:
@@ -28,9 +28,9 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.web.socket.server.standard.SpringConfigurator;
 
-import javax.websocket.DeploymentException;
-import javax.websocket.server.ServerContainer;
-import javax.websocket.server.ServerEndpointConfig;
+import jakarta.websocket.DeploymentException;
+import jakarta.websocket.server.ServerContainer;
+import jakarta.websocket.server.ServerEndpointConfig;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertSame;

File: shenyu-discovery/shenyu-discovery-eureka/src/main/java/org/apache/shenyu/discovery/eureka/EurekaDiscoveryService.java
Patch:
@@ -22,6 +22,7 @@
 import com.netflix.appinfo.EurekaInstanceConfig;
 import com.netflix.appinfo.MyDataCenterInstanceConfig;
 import com.netflix.discovery.EurekaClientConfig;
+import com.netflix.discovery.shared.transport.jersey3.Jersey3TransportClientFactories;
 import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
 import org.apache.shenyu.common.utils.GsonUtils;
 import com.netflix.appinfo.ApplicationInfoManager;
@@ -142,7 +143,7 @@ public void register(final String key, final String value) {
             ConfigurationManager.loadProperties(getEurekaProperties(true));
             InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(customedEurekaConfig).get();
             applicationInfoManager = new ApplicationInfoManager(customedEurekaConfig, instanceInfo);
-            eurekaClient = new DiscoveryClient(applicationInfoManager, new DefaultEurekaClientConfig());
+            eurekaClient = new DiscoveryClient(applicationInfoManager, new DefaultEurekaClientConfig(), new Jersey3TransportClientFactories());
             applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);
         } catch (Exception e) {
             LOGGER.error("Error register eureka instance", e);
@@ -216,7 +217,7 @@ private ApplicationInfoManager initializeApplicationInfoManager(final EurekaInst
 
     private EurekaClient initializeEurekaClient(final ApplicationInfoManager applicationInfoManager, final EurekaClientConfig clientConfig) {
         if (Objects.isNull(eurekaClient)) {
-            eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig);
+            eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig, new Jersey3TransportClientFactories());
         }
 
         return eurekaClient;

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/EnvironmentClient.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.e2e.annotation.ShenYuEnvironmentClient;
 
-import javax.annotation.Nonnull;
+import jakarta.annotation.Nonnull;
 import java.util.Map;
 import java.util.Objects;
 

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/ExternalServiceClient.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.e2e.annotation.ExternalService;
 
-import javax.annotation.Nonnull;
+import jakarta.annotation.Nonnull;
 import java.util.Properties;
 
 /**

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/template/ResourceDataTemplate.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.e2e.model.handle.DivideRuleHandle;
 import org.apache.shenyu.e2e.model.handle.Upstreams;
 
-import javax.annotation.Nonnull;
+import jakarta.annotation.Nonnull;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: shenyu-examples/shenyu-examples-plugin/src/main/java/org/apache/shenyu/examples/plugin/ext/ExtendsShenyuBerBean.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.springframework.stereotype.Component;
 
-import javax.annotation.Resource;
+import jakarta.annotation.Resource;
 
 /**
  * ExtendsShenyuBerBean .

File: shenyu-examples/shenyu-examples-springmvc-tomcat/src/main/java/org/apache/shenyu/examples/springmvc/controller/OrderController.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.examples.springmvc.controller;
 
 import java.util.Objects;
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 
 import org.apache.shenyu.client.apidocs.annotations.ApiDoc;
 import org.apache.shenyu.client.apidocs.annotations.ApiModule;

File: shenyu-examples/shenyu-examples-springmvc/src/main/java/org/apache/shenyu/examples/springmvc/controller/OrderController.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import javax.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletRequest;
 import java.util.Objects;
 
 /**

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/data/RequestMethodParameterData.java
Patch:
@@ -28,6 +28,6 @@ public class RequestMethodParameterData implements ParameterData {
     
     @Override
     public String builder(final String paramName, final ServerWebExchange exchange) {
-        return exchange.getRequest().getMethodValue();
+        return exchange.getRequest().getMethod().name();
     }
 }

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/HystrixPlugin.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.shenyu.plugin.hystrix.handler.HystrixPluginDataHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.http.HttpStatus;
+import org.springframework.http.HttpStatusCode;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import rx.Subscription;
@@ -78,7 +78,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.ERROR.getName());
             chain.execute(exchange);
         }).then().doFinally(monoV -> {
-            final Consumer<HttpStatus> consumer = exchange.getAttribute(Constants.METRICS_HYSTRIX);
+            final Consumer<HttpStatusCode> consumer = exchange.getAttribute(Constants.METRICS_HYSTRIX);
             Optional.ofNullable(consumer).ifPresent(c -> c.accept(exchange.getResponse().getStatusCode()));
         });
     }

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.shenyu.plugin.ratelimiter.handler.RateLimiterPluginDataHandler;
 import org.apache.shenyu.plugin.ratelimiter.resolver.RateLimiterKeyResolverFactory;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.HttpStatusCode;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -77,7 +78,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
                 .flatMap(response -> {
                     if (!response.isAllowed()) {
                         exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-                        final Consumer<HttpStatus> consumer = exchange.getAttribute(Constants.METRICS_RATE_LIMITER);
+                        final Consumer<HttpStatusCode> consumer = exchange.getAttribute(Constants.METRICS_RATE_LIMITER);
                         Optional.ofNullable(consumer).ifPresent(c -> c.accept(exchange.getResponse().getStatusCode()));
                         Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS);
                         return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/SentinelPlugin.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.sentinel.handler.SentinelRuleHandle;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.HttpStatusCode;
 import org.springframework.web.client.HttpStatusCodeException;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
@@ -63,7 +64,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         });
         return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)).onErrorResume(throwable ->
                 fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable)).doFinally(monoV -> {
-                    final Consumer<HttpStatus> consumer = exchange.getAttribute(Constants.METRICS_SENTINEL);
+                    final Consumer<HttpStatusCode> consumer = exchange.getAttribute(Constants.METRICS_SENTINEL);
                     Optional.ofNullable(consumer).ifPresent(c -> c.accept(exchange.getResponse().getStatusCode()));
                 }
         );

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/AbstractHttpClientPlugin.java
Patch:
@@ -82,7 +82,7 @@ public final Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPl
         final int retryTimes = (int) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(0);
         final String retryStrategy = (String) Optional.ofNullable(exchange.getAttribute(Constants.RETRY_STRATEGY)).orElseGet(RetryEnum.CURRENT::getName);
         LogUtils.debug(LOG, () -> String.format("The request urlPath is: %s, retryTimes is : %s, retryStrategy is : %s", uri, retryTimes, retryStrategy));
-        final Mono<R> response = doRequest(exchange, exchange.getRequest().getMethodValue(), uri, exchange.getRequest().getBody())
+        final Mono<R> response = doRequest(exchange, exchange.getRequest().getMethod().name(), uri, exchange.getRequest().getBody())
                 .timeout(duration, Mono.error(() -> new TimeoutException("Response took longer than timeout: " + duration)))
                 .doOnError(e -> LOG.error(e.getMessage(), e));
         if (RetryEnum.CURRENT.getName().equals(retryStrategy)) {
@@ -154,7 +154,7 @@ private Mono<R> resend(final Mono<R> response,
             final URI newUri = RequestUrlUtils.buildRequestUri(exchange, upstream.buildDomain());
             // in order not to affect the next retry call, newUri needs to be excluded
             exclude.add(newUri);
-            return doRequest(exchange, exchange.getRequest().getMethodValue(), newUri, exchange.getRequest().getBody())
+            return doRequest(exchange, exchange.getRequest().getMethod().name(), newUri, exchange.getRequest().getBody())
                     .timeout(duration, Mono.error(() -> new TimeoutException("Response took longer than timeout: " + duration)))
                     .doOnError(e -> LOG.error(e.getMessage(), e));
         });

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/client/AliyunSlsLogCollectClient.java
Patch:
@@ -43,7 +43,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.lang.NonNull;
 
-import javax.annotation.Nullable;
+import jakarta.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/AbstractLoggingPlugin.java
Patch:
@@ -102,7 +102,7 @@ public Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlugin
 
         L requestInfo = this.doLogExecute(exchange, selector, rule);
         requestInfo.setRequestUri(request.getURI().toString());
-        requestInfo.setMethod(request.getMethodValue());
+        requestInfo.setMethod(request.getMethod().name());
         requestInfo.setRequestHeader(LogCollectUtils.getHeaders(request.getHeaders()));
         requestInfo.setQueryParams(request.getURI().getQuery());
         requestInfo.setClientIp(HostAddressUtils.acquireIp(exchange));

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/test/java/org/apache/shenyu/plugin/logging/common/body/LoggingServerHttpResponseTest.java
Patch:
@@ -89,7 +89,7 @@ public void setUp() {
         exchange.getAttributes().put(GenericLoggingConstant.SHENYU_AGENT_TRACE_ID, "shenyu-agent-trace-id");
         ServerHttpRequest serverHttpRequest = exchange.getRequest();
         requestInfo.setRequestUri(serverHttpRequest.getURI().toString());
-        requestInfo.setMethod(serverHttpRequest.getMethodValue());
+        requestInfo.setMethod(serverHttpRequest.getMethod().name());
         requestInfo.setRequestHeader(LogCollectUtils.getHeaders(serverHttpRequest.getHeaders()));
         requestInfo.setQueryParams(serverHttpRequest.getURI().getQuery());
         requestInfo.setClientIp(HostAddressUtils.acquireIp(exchange));

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/main/java/org/apache/shenyu/plugin/huawei/lts/client/HuaweiLtsLogCollectClient.java
Patch:
@@ -40,7 +40,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.lang.NonNull;
 
-import javax.annotation.Nullable;
+import jakarta.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rabbitmq/src/main/java/org/apache/shenyu/plugin/logging/rabbitmq/config/RabbitmqLogCollectConfig.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.plugin.logging.common.config.GenericApiConfig;
 import org.apache.shenyu.plugin.logging.common.config.GenericGlobalConfig;
 
-import javax.annotation.Nullable;
+import jakarta.annotation.Nullable;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/main/java/org/apache/shenyu/plugin/tencent/cls/client/TencentClsLogCollectClient.java
Patch:
@@ -40,7 +40,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.lang.NonNull;
 
-import javax.annotation.Nullable;
+import jakarta.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/MockPlugin.java
Patch:
@@ -89,7 +89,7 @@ private MockRequest buildMockRequest(final byte[] originalBody, final ServerHttp
         
         return MockRequest.Builder.builder()
                 .headers(serverHttpRequest.getHeaders().toSingleValueMap())
-                .method(serverHttpRequest.getMethodValue())
+                .method(serverHttpRequest.getMethod().name())
                 .queries(serverHttpRequest.getQueryParams().toSingleValueMap())
                 .uri(serverHttpRequest.getURI().toString())
                 .body(originalBody)

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.ExecutionException;
-import javax.annotation.Nonnull;
+import jakarta.annotation.Nonnull;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.dubbo.config.ApplicationConfig;
 import org.apache.dubbo.config.ConsumerConfig;

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/UnitTestIdleHelper.java
Patch:
@@ -22,7 +22,7 @@
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.LoadBalancer;
 import io.grpc.ManagedChannel;
-import javax.annotation.Nonnull;
+import jakarta.annotation.Nonnull;
 import java.net.SocketAddress;
 import java.util.Collections;
 import java.util.List;

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/UnitTestReadHelper.java
Patch:
@@ -24,7 +24,7 @@
 import io.grpc.LoadBalancer;
 import io.grpc.ManagedChannel;
 import org.apache.shenyu.plugin.grpc.loadbalance.SubChannels;
-import javax.annotation.Nonnull;
+import jakarta.annotation.Nonnull;
 import java.net.SocketAddress;
 import java.util.Collections;
 import java.util.List;

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/NettyClientMessageWriter.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.core.io.buffer.DataBufferUtils;
 import org.springframework.core.io.buffer.NettyDataBuffer;
 import org.springframework.core.io.buffer.NettyDataBufferFactory;
-import org.springframework.http.HttpStatus;
+import org.springframework.http.HttpStatusCode;
 import org.springframework.http.MediaType;
 import org.springframework.http.server.reactive.ServerHttpResponse;
 import org.springframework.lang.Nullable;
@@ -76,7 +76,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
                     : response.writeWith(body);
             exchange.getAttributes().put(Constants.RESPONSE_MONO, responseMono);
             // watcher httpStatus
-            final Consumer<HttpStatus> consumer = exchange.getAttribute(Constants.WATCHER_HTTP_STATUS);
+            final Consumer<HttpStatusCode> consumer = exchange.getAttribute(Constants.WATCHER_HTTP_STATUS);
             Optional.ofNullable(consumer).ifPresent(c -> c.accept(response.getStatusCode()));
             return responseMono.onErrorResume(error -> releaseIfNotConsumed(body, error));
         })).doOnCancel(() -> cleanup(exchange));

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriter.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
-import org.springframework.http.HttpStatus;
+import org.springframework.http.HttpStatusCode;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -49,7 +49,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
             Mono<Void> responseMono = WebFluxResultUtils.result(exchange, result);
             exchange.getAttributes().put(Constants.RESPONSE_MONO, responseMono);
             // watcher httpStatus
-            final Consumer<HttpStatus> consumer = exchange.getAttribute(Constants.WATCHER_HTTP_STATUS);
+            final Consumer<HttpStatusCode> consumer = exchange.getAttribute(Constants.WATCHER_HTTP_STATUS);
             Optional.ofNullable(consumer).ifPresent(c -> c.accept(exchange.getResponse().getStatusCode()));
             return responseMono;
         }));

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.core.io.buffer.DataBufferUtils;
 import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpStatus;
+import org.springframework.http.HttpStatusCode;
 import org.springframework.http.ResponseEntity;
 import org.springframework.http.server.reactive.ServerHttpResponse;
 import org.springframework.web.server.ServerWebExchange;
@@ -89,7 +89,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
 
             exchange.getAttributes().put(Constants.RESPONSE_MONO, responseMono);
             // watcher httpStatus
-            final Consumer<HttpStatus> consumer = exchange.getAttribute(Constants.WATCHER_HTTP_STATUS);
+            final Consumer<HttpStatusCode> consumer = exchange.getAttribute(Constants.WATCHER_HTTP_STATUS);
             Optional.ofNullable(consumer).ifPresent(c -> c.accept(response.getStatusCode()));
             return responseMono;
         }));

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/SpringCloudPluginTest.java
Patch:
@@ -64,7 +64,7 @@ public void setup(final AdminClient adminClient, final GatewayClient gatewayClie
         WaitDataSync.waitAdmin2GatewayDataSyncEquals(adminClient::listAllSelectors, gatewayClient::getSelectorCache, adminClient);
         WaitDataSync.waitAdmin2GatewayDataSyncEquals(adminClient::listAllMetaData, gatewayClient::getMetaDataCache, adminClient);
         WaitDataSync.waitAdmin2GatewayDataSyncEquals(adminClient::listAllRules, gatewayClient::getRuleCache, adminClient);
-        LOG.info("start spring cloud plugin");
+        LOG.info("start spring cloud  plugin");
         MultiValueMap<String, String> formData = new LinkedMultiValueMap<>();
         formData.add("id", "8");
         formData.add("name", "springCloud");
@@ -73,6 +73,7 @@ public void setup(final AdminClient adminClient, final GatewayClient gatewayClie
         formData.add("sort", "200");
         adminClient.changePluginStatus("8", formData);
         WaitDataSync.waitGatewayPluginUse(gatewayClient, "org.apache.shenyu.plugin.springcloud.SpringCloudPlugin");
+
     }
 
     @ShenYuScenario(provider = SpringCloudPluginCases.class)

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/handler/AbstractLogPluginDataHandler.java
Patch:
@@ -95,7 +95,7 @@ public void handlerPlugin(final PluginData pluginData) {
         ParameterizedType parameterizedType = (ParameterizedType) this.getClass().getGenericSuperclass();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         final Class<T> globalLogConfigClass = (Class<T>) actualTypeArguments[0];
-        LOG.info("handler {} Plugin data: {}", pluginNamed(), GsonUtils.getGson().toJson(pluginData));
+        LOG.info("handler {} Plugin data:  {}", pluginNamed(), GsonUtils.getGson().toJson(pluginData));
         if (Objects.nonNull(pluginData) && Boolean.TRUE.equals(pluginData.getEnabled())) {
             T globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), globalLogConfigClass);
             T exist = Singleton.INST.get(globalLogConfigClass);

File: shenyu-sync-data-center/shenyu-sync-data-api/src/main/java/org/apache/shenyu/sync/data/api/PluginDataSubscriber.java
Patch:
@@ -28,7 +28,7 @@
 public interface PluginDataSubscriber {
     
     /**
-     * On subscribe.
+     * On  subscribe.
      *
      * @param pluginData the plugin data
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollector.java
Patch:
@@ -99,7 +99,9 @@ public void onMessage(final String message, final Session session) {
         }
         
         if (Objects.equals(message, DataEventTypeEnum.RUNNING_MODE.name())) {
-            LOG.info("websocket fetching running mode info...");
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("websocket fetching running mode info...");
+            }
             // check if this node is master
             boolean isMaster = true;
             String runningMode = RunningModeEnum.STANDALONE.name();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mode/cluster/service/ShenyuClusterService.java
Patch:
@@ -97,7 +97,9 @@ private void doSelectMaster(final String host, final String port, final String c
                 
                 renewed = shenyuClusterSelectMasterService.checkMasterStatus();
                 if (renewed) {
-                    LOG.info("renew master success");
+                    if (LOG.isDebugEnabled()) {
+                        LOG.debug("renew master success");
+                    }
                 }
             }
         } catch (Exception e) {

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/config/RestTemplateConfig.java
Patch:
@@ -36,7 +36,7 @@ public class RestTemplateConfig {
      * @param factory ClientHttpRequestFactory
      * @return RestTemplate
      */
-    @Bean
+    @Bean(name = "alterRestTemplate")
     public RestTemplate restTemplate(final ClientHttpRequestFactory factory) {
         RestTemplate restTemplate = new RestTemplate(factory);
         restTemplate.setInterceptors(Collections.singletonList(new HeaderRequestInterceptor()));

File: shenyu-alert/src/main/java/org/apache/shenyu/alert/strategy/AbstractAlertNotifyHandler.java
Patch:
@@ -38,7 +38,7 @@ abstract class AbstractAlertNotifyHandler implements AlertNotifyHandler {
     @Resource
     private TemplateEngine templateEngine;
     
-    @Resource
+    @Resource(name = "alterRestTemplate")
     private RestTemplate restTemplate;
     
     protected String renderContent(final AlarmContent alert) {

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-cluster/src/test/java/org/apache/shenyue/e2e/testcase/cluster/DividePluginCases.java
Patch:
@@ -42,6 +42,9 @@
 import static org.apache.shenyu.e2e.template.ResourceDataTemplate.newUpstreamsBuilder;
 import static org.hamcrest.text.IsEmptyString.isEmptyOrNullString;
 
+/**
+ * Testing Cluster Divide plugin testcases.
+ */
 public class DividePluginCases implements ShenYuScenarioProvider {
     private static final String ANYTHING = "/anything";
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-cluster/src/test/java/org/apache/shenyue/e2e/testcase/cluster/DividePluginTest.java
Patch:
@@ -38,6 +38,9 @@
 import java.util.List;
 import java.util.Objects;
 
+/**
+ * Testing Cluster Divide plugin.
+ */
 @ShenYuTest(environments = {
         @ShenYuTest.Environment(
                 serviceName = "shenyu-e2e-admin",

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/ShenYuExtension.java
Patch:
@@ -77,7 +77,7 @@ public ConditionEvaluationResult evaluateExecutionCondition(final ExtensionConte
             });
             // FIXME check service is available
             for (ShenYuTest.Environment environment : environments) {
-                if (!SocketUtils.checkUrl(environment.service().baseUrl(), 10000)) {
+                if (!SocketUtils.checkUrl(environment.service().baseUrl(), 15000)) {
                     throw new AssertionFailedError(environment.serviceName() + ":" + environment.service().baseUrl() + " is not available");
                     //return ConditionEvaluationResult.disabled(environment.serviceName() + ":" + environment.service().baseUrl() + " is not available");
                 }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/cache/ServiceInstanceCache.java
Patch:
@@ -26,6 +26,9 @@
 import java.util.Map;
 import java.util.Optional;
 
+/**
+ *  the Service Instance Cache.
+ */
 public class ServiceInstanceCache {
     
     private static final Map<String, List<ServiceInstance>> SERVICE_INSTANCE_MAP = Maps.newConcurrentMap();

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/listener/SpringCloudHeartBeatListener.java
Patch:
@@ -33,6 +33,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * SpringCloud HeartBeat Listener.
+ */
 public class SpringCloudHeartBeatListener implements ApplicationListener<HeartbeatEvent> {
     
     private static final Logger LOG = LoggerFactory.getLogger(SpringCloudHeartBeatListener.class);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mode/cluster/filter/ClusterForwardFilter.java
Patch:
@@ -98,7 +98,7 @@ private void forwardRequest(final HttpServletRequest request,
                                 final HttpServletResponse response) throws IOException {
         String targetUrl = getForwardingUrl(request);
         
-        LOG.info("forwarding current uri: {} request to target url: {}", request.getRequestURI(), targetUrl);
+        LOG.info("forwarding current uri: {} method: {} request to target url: {}", request.getRequestURI(), request.getMethod(), targetUrl);
         // Create request entity
         HttpHeaders headers = new HttpHeaders();
         // Copy request headers

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollector.java
Patch:
@@ -66,7 +66,7 @@ public class WebsocketCollector {
      */
     @OnOpen
     public void onOpen(final Session session) {
-        LOG.info("websocket on client[{}] open successful,maxTextMessageBufferSize:{}",
+        LOG.info("websocket on client[{}] open successful, maxTextMessageBufferSize: {}",
                 getClientIp(session), session.getMaxTextMessageBufferSize());
         SESSION_SET.add(session);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginServiceImpl.java
Patch:
@@ -312,7 +312,7 @@ public ConfigImportResult importData(final List<PluginDTO> pluginList) {
      * @see PluginCreatedEvent
      */
     private String create(final PluginDTO pluginDTO) {
-        Assert.isNull(pluginMapper.nameExisted(pluginDTO.getName()), AdminConstants.PLUGIN_NAME_IS_EXIST);
+        Assert.isNull(pluginMapper.nameExisted(pluginDTO.getName()), "create" + AdminConstants.PLUGIN_NAME_IS_EXIST + pluginDTO.getName());
         if (Objects.nonNull(pluginDTO.getFile())) {
             Assert.isTrue(checkFile(Base64.decode(pluginDTO.getFile())), AdminConstants.THE_PLUGIN_JAR_FILE_IS_NOT_CORRECT_OR_EXCEEDS_16_MB);
         }
@@ -332,7 +332,7 @@ private String create(final PluginDTO pluginDTO) {
      * @return success is empty
      */
     private String update(final PluginDTO pluginDTO) {
-        Assert.isNull(pluginMapper.nameExistedExclude(pluginDTO.getName(), Collections.singletonList(pluginDTO.getId())), AdminConstants.PLUGIN_NAME_IS_EXIST);
+        Assert.isNull(pluginMapper.nameExistedExclude(pluginDTO.getName(), Collections.singletonList(pluginDTO.getId())), AdminConstants.PLUGIN_NAME_IS_EXIST + pluginDTO.getName());
         if (Objects.nonNull(pluginDTO.getFile())) {
             Assert.isTrue(checkFile(Base64.decode(pluginDTO.getFile())), AdminConstants.THE_PLUGIN_JAR_FILE_IS_NOT_CORRECT_OR_EXCEEDS_16_MB);
         }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -138,6 +138,7 @@ public void testOnError() {
     public void testSend() throws IOException {
         RemoteEndpoint.Basic basic = mock(RemoteEndpoint.Basic.class);
         when(session.getBasicRemote()).thenReturn(basic);
+        when(session.isOpen()).thenReturn(true);
         websocketCollector.onOpen(session);
         assertEquals(1L, getSessionSetSize());
         WebsocketCollector.send(null, DataEventTypeEnum.MYSELF);

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/ShenYuExtension.java
Patch:
@@ -77,7 +77,7 @@ public ConditionEvaluationResult evaluateExecutionCondition(final ExtensionConte
             });
             // FIXME check service is available
             for (ShenYuTest.Environment environment : environments) {
-                if (!SocketUtils.checkUrl(environment.service().baseUrl(), 3000)) {
+                if (!SocketUtils.checkUrl(environment.service().baseUrl(), 10000)) {
                     throw new AssertionFailedError(environment.serviceName() + ":" + environment.service().baseUrl() + " is not available");
                     //return ConditionEvaluationResult.disabled(environment.serviceName() + ":" + environment.service().baseUrl() + " is not available");
                 }

File: shenyu-integrated-test/shenyu-integrated-test-upload-plugin/shenyu-integrated-test-upload-plugin-case/src/main/java/org/apache/shenyu/integrated/test/upload/plugin/ShenyuUploadPluginIntegratedApplication.java
Patch:
@@ -20,6 +20,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * The type Spring cloud integrated bootstrap.
+ */
 @SpringBootApplication
 public class ShenyuUploadPluginIntegratedApplication {
 

File: shenyu-integrated-test/shenyu-integrated-test-websocket/src/main/java/org/apache/shenyu/integrated/test/websocket/WebsocketIntegratedBootstrap.java
Patch:
@@ -20,6 +20,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * The type Spring cloud integrated bootstrap.
+ */
 @SpringBootApplication
 public class WebsocketIntegratedBootstrap {
 

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/client/ShenyuWebsocketClientTest.java
Patch:
@@ -88,8 +88,10 @@ public void setUp() {
     public void testOnOpen() {
         shenyuWebsocketClient = spy(shenyuWebsocketClient);
         ServerHandshake serverHandshake = mock(ServerHandshake.class);
+        doNothing().when(shenyuWebsocketClient).send(DataEventTypeEnum.RUNNING_MODE.name());
         doNothing().when(shenyuWebsocketClient).send(DataEventTypeEnum.MYSELF.name());
         shenyuWebsocketClient.onOpen(serverHandshake);
+        verify(shenyuWebsocketClient).send(DataEventTypeEnum.RUNNING_MODE.name());
         verify(shenyuWebsocketClient).send(DataEventTypeEnum.MYSELF.name());
     }
     

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/config/WebsocketConfigTest.java
Patch:
@@ -17,9 +17,11 @@
 
 package org.apache.shenyu.plugin.sync.data.websocket.config;
 
+import com.google.common.collect.Lists;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.List;
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -30,7 +32,7 @@
  */
 public class WebsocketConfigTest {
 
-    private static final String URLS = "ws://localhost:9095/websocket";
+    private static final List<String> URLS = Lists.newArrayList("ws://localhost:9095/websocket");
 
     private static final String ALLOW_ORIGIN = "ws://localhost:9095";
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/shiro/bean/StatelessAuthFilter.java
Patch:
@@ -102,8 +102,8 @@ private String getTokenValue(final HttpServletRequest httpServletRequest) {
         Cookie[] cookies = httpServletRequest.getCookies();
         return Arrays.stream(cookies)
                 .filter(cookie -> StringUtils.equals(tokenName, cookie.getName()))
-                .findFirst()
-                .orElse(new Cookie("", ""))
+                .findAny()
+                .orElse(new Cookie(tokenName, ""))
                 .getValue();
     }
     

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/DefaultPathConstants.java
Patch:
@@ -78,7 +78,8 @@ public static String buildAppAuthPath(final String appKey) {
      * @return the string
      */
     public static String buildMetaDataPath(final String path) {
-        return String.join(PATH_SEPARATOR, META_DATA, path);
+        String join = String.join(PATH_SEPARATOR, META_DATA, path);
+        return join.replaceAll("//", PATH_SEPARATOR);
     }
 
     /**

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/AdminClient.java
Patch:
@@ -121,6 +121,7 @@ public AdminClient(final String scenarioId, final String serviceName, final Stri
      */
     public void login() {
         final String url = baseURL + "/platform/login?userName={username}&password={password}";
+        log.info("login, url:{}", url);
         ResponseEntity<ShenYuResult> response = template.getForEntity(
                 url,
                 ShenYuResult.class,

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/WaitDataSync.java
Patch:
@@ -65,7 +65,7 @@ public static <T extends List<?>, U extends List<?>> void waitAdmin2GatewayDataS
             if (retryNum % 3 == 0) {
                 adminClient.syncPluginAll();
             }
-            Thread.sleep(3000);
+            Thread.sleep(10000);
             retryNum++;
         }
         Assertions.assertNotEquals(adminDataList.size(), 0);
@@ -90,7 +90,7 @@ public static void waitGatewayPluginUse(final GatewayClient gatewayClient, final
                     break;
                 }
             }
-            Thread.sleep(3000);
+            Thread.sleep(10000);
             retryNum++;
             pluginMap = gatewayClient.getPlugins();
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/HttpUtils.java
Patch:
@@ -682,7 +682,7 @@ public static byte[] toBytes(final File file) throws IOException {
                         input.close();
                     }
                 } catch (IOException ioe) {
-                    System.err.println(ioe);
+                    LOG.error("toBytes error", ioe);
                 }
             }
         }

File: shenyu-registry/shenyu-registry-etcd/src/main/java/org/apache/shenyu/registry/etcd/EtcdClient.java
Patch:
@@ -125,7 +125,7 @@ public GetResponse getRange(final String key, final GetOption getOption) {
         try {
             return this.client.getKVClient().get(bytesOf(key), getOption).get();
         } catch (ExecutionException | InterruptedException e) {
-            LOGGER.error("etcd getRange key {} error {}", key, e);
+            LOGGER.error("etcd getRange key {} error", key, e);
             throw new ShenyuException(e);
         }
     }

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/UriUtilsTest.java
Patch:
@@ -41,6 +41,9 @@ void createUri() {
 
         uri = UriUtils.createUri("");
         assertNull(uri);
+
+        uri = UriUtils.createUri("https", "example.com", "/http");
+        assertEquals("https://example.com/http", uri.toString());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonHandleCache.java
Patch:
@@ -45,7 +45,7 @@ public V obtainHandle(final K key) {
 
     @Override
     public void cachedHandle(final K key, final V value) {
-        Optional.ofNullable(key).ifPresent(data -> cached.put(key, value));
+        Optional.ofNullable(key).ifPresent(data_key -> Optional.ofNullable(value).ifPresent(data_value -> cached.put(data_key, data_value)));
     }
 
     @Override

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/main/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperClient.java
Patch:
@@ -111,7 +111,8 @@ public boolean isExist(final String key) {
         try {
             return null != client.checkExists().forPath(key);
         } catch (Exception e) {
-            throw new ShenyuException(e);
+            LOGGER.error("check if key exist error", e);
+            return false;
         }
     }
 

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/test/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperClientTest.java
Patch:
@@ -50,6 +50,7 @@
 import java.util.List;
 import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
@@ -119,7 +120,7 @@ void getClient() {
 
     @Test
     void isExist() throws Exception {
-        assertThrows(ShenyuException.class, () -> client.isExist("/test"));
+        assertFalse(() -> client.isExist("/test"));
         ExistsBuilderImpl existsBuilder = mock(ExistsBuilderImpl.class);
         when(curatorFramework.checkExists()).thenReturn(existsBuilder);
         when(existsBuilder.forPath(anyString())).thenReturn(new Stat());

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java
Patch:
@@ -135,9 +135,6 @@ public <T> void putNode(final String uriPath, final T source, final TrieCacheTyp
             selectorData = (SelectorData) source;
             node = keyRootMap.computeIfAbsent(selectorData.getPluginName(), key -> new ShenyuTrieNode("/", "/", false));
         }
-        if (TrieMatchModeEnum.PATH_PATTERN.equals(matchMode)) {
-            checkLegalPath(uriPath, pathParts);
-        }
         for (int i = 0; i < pathParts.length; i++) {
             node = putNode0(pathParts[i], node);
             if (Objects.isNull(node)) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/IndexController.java
Patch:
@@ -34,7 +34,7 @@ public class IndexController {
      * @param model the model
      * @return the string
      */
-    @RequestMapping("/index")
+    @RequestMapping(value = {"/index", "/"})
     public String index(final Model model) {
         model.addAttribute("domain", ShenyuDomain.getInstance().getHttpPath());
         return "index";

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/ShenyuNettyWebServerConfiguration.java
Patch:
@@ -156,7 +156,6 @@ public HttpServer apply(final HttpServer httpServer) {
                     // server socket channel parameters
                     .option(ChannelOption.SO_BACKLOG, nettyHttpProperties.getServerSocketChannel().getSoBacklog())
                     .option(ChannelOption.SO_REUSEADDR, nettyHttpProperties.getServerSocketChannel().isSoReuseAddr())
-                    .option(ChannelOption.SO_RCVBUF, nettyHttpProperties.getServerSocketChannel().getSoRcvBuf())
                     // common parameters
                     .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, nettyHttpProperties.getServerSocketChannel().getConnectTimeoutMillis())
                     .option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(nettyHttpProperties.getServerSocketChannel().getWriteBufferLowWaterMark(),
@@ -171,10 +170,8 @@ public HttpServer apply(final HttpServer httpServer) {
                     .childOption(ChannelOption.SO_KEEPALIVE, nettyHttpProperties.getSocketChannel().isSoKeepAlive())
                     .childOption(ChannelOption.SO_LINGER, nettyHttpProperties.getSocketChannel().getSoLinger())
                     .childOption(ChannelOption.TCP_NODELAY, nettyHttpProperties.getSocketChannel().isTcpNoDelay())
-                    .childOption(ChannelOption.SO_SNDBUF, nettyHttpProperties.getSocketChannel().getSoSndBuf())
                     .childOption(ChannelOption.IP_TOS, nettyHttpProperties.getSocketChannel().getIpTos())
                     .childOption(ChannelOption.ALLOW_HALF_CLOSURE, nettyHttpProperties.getSocketChannel().isAllowHalfClosure())
-                    .childOption(ChannelOption.SO_RCVBUF, nettyHttpProperties.getSocketChannel().getSoRcvBuf())
                     .childOption(ChannelOption.SO_REUSEADDR, nettyHttpProperties.getSocketChannel().isSoReuseAddr())
                     // common parameters
                     .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, nettyHttpProperties.getSocketChannel().getConnectTimeoutMillis())

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/AesUtils.java
Patch:
@@ -37,7 +37,7 @@ public class AesUtils {
     private static final Logger LOG = LoggerFactory.getLogger(AesUtils.class);
 
     /**
-     * AES/CTR/NoPadding encrypt data.
+     * AES/CBC/Pkcs7Padding encrypt data.
      *
      * @param secretKeyStr secretKeyStr
      * @param ivStr        ivStr
@@ -64,7 +64,7 @@ public static String cbcEncrypt(final String secretKeyStr, final String ivStr, f
     }
 
     /**
-     * AES/CTR/NoPadding decrypt data.
+     * AES/CBC/Pkcs7Padding decrypt data.
      *
      * @param secretKeyStr secretKeyStr
      * @param ivStr        ivStr

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/aspect/DataPermissionAspect.java
Patch:
@@ -31,6 +31,7 @@
 import org.springframework.stereotype.Component;
 
 import java.util.List;
+import java.util.Objects;
 import java.util.stream.Stream;
 
 import static org.apache.shenyu.common.constant.AdminConstants.DATA_PERMISSION_RULE;
@@ -82,7 +83,7 @@ public Object around(final ProceedingJoinPoint point) {
     private Object[] getFilterSQLData(final ProceedingJoinPoint point) {
         DataPermission dataPermission = ((MethodSignature) point.getSignature()).getMethod().getAnnotation(DataPermission.class);
         Object[] args = point.getArgs();
-        if (dataPermission == null || args == null) {
+        if (Objects.isNull(dataPermission) || Objects.isNull(args)) {
             return args;
         }
         List<String> dataPermissionList = dataPermissionService.getDataPermission(JwtUtils.getUserInfo().getUserId());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/exception/ExceptionHandlers.java
Patch:
@@ -123,7 +123,7 @@ protected ShenyuAdminResult handleConstraintViolationException(final ConstraintV
     
     @ExceptionHandler(ShenyuException.class)
     protected ShenyuAdminResult handleShenyuException(final ShenyuException exception) {
-        String message = exception.getCause() == null ? null : exception.getCause().getMessage();
+        String message = Objects.isNull(exception.getCause()) ? null : exception.getCause().getMessage();
         if (!StringUtils.hasText(message)) {
             message = exception.getMessage();
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -270,7 +270,7 @@ public final void afterPropertiesSet() {
     protected abstract void afterInitialize();
 
     /**
-     * if md5 is not the same as the original, then update lcoal cache.
+     * if md5 is not the same as the original, then update local cache.
      *
      * @param group ConfigGroupEnum
      * @param <T>   the type of class

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AlertDispatchServiceImpl.java
Patch:
@@ -92,7 +92,7 @@ public void clearCache() {
     
     @Override
     public boolean sendNoticeMsg(final AlertReceiverDTO receiver, final AlarmContent alert) {
-        if (receiver == null || receiver.getType() == null) {
+        if (Objects.isNull(receiver) || Objects.isNull(receiver.getType())) {
             log.warn("DispatcherAlarm-sendNoticeMsg params is empty alert:[{}], receiver:[{}]", alert, receiver);
             return false;
         }
@@ -164,7 +164,7 @@ private List<AlertReceiverDTO> matchReceiverByRules(final AlarmContent alert) {
                     }
                     if (!CollectionUtils.isEmpty(item.getLabels())) {
                         return item.getLabels().entrySet().stream().anyMatch(entry -> {
-                            if (alert.getLabels() == null || !alert.getLabels().containsKey(entry.getKey())) {
+                            if (Objects.isNull(alert.getLabels()) || !alert.getLabels().containsKey(entry.getKey())) {
                                 return false;
                             }
                             String labelValue = alert.getLabels().get(entry.getKey());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DiscoveryServiceImpl.java
Patch:
@@ -223,7 +223,7 @@ private DiscoveryVO create(final DiscoveryDTO discoveryDTO) {
     }
 
     private DiscoveryVO update(final DiscoveryDTO discoveryDTO) {
-        if (discoveryDTO == null || discoveryDTO.getId() == null) {
+        if (Objects.isNull(discoveryDTO) || Objects.isNull(discoveryDTO.getId())) {
             return null;
         }
         Timestamp currentTime = new Timestamp(System.currentTimeMillis());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/MetaDataServiceImpl.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.BeanUtils;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
@@ -259,8 +258,7 @@ private String update(final MetaDataDTO metaDataDTO) {
             final List<MetaDataDO> befores = Optional.ofNullable(metaDataMapper.findByServiceNameAndMethod(
                     metaDataDO.getServiceName(), null)).orElseGet(LinkedList::new);
             for (MetaDataDO b : befores) {
-                MetaDataDO update = new MetaDataDO();
-                BeanUtils.copyProperties(b, update);
+                MetaDataDO update = MetaDataTransfer.INSTANCE.copy(b);
                 update.setRpcExt(metaDataDTO.getRpcExt());
                 if (metaDataMapper.update(update) > 0) {
                     publisher.onUpdated(update, b);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/MockRequestRecordServiceImpl.java
Patch:
@@ -31,6 +31,7 @@
 
 import java.sql.Timestamp;
 import java.util.List;
+import java.util.Objects;
 import java.util.stream.Collectors;
 
 /**
@@ -85,7 +86,7 @@ public CommonPager<MockRequestRecordVO> listByPage(final MockRequestRecordQuery
     }
 
     private int update(final MockRequestRecordDTO mockRequestRecordDTO) {
-        if (mockRequestRecordDTO == null || mockRequestRecordDTO.getId() == null) {
+        if (Objects.isNull(mockRequestRecordDTO) || Objects.isNull(mockRequestRecordDTO.getId())) {
             return 0;
         }
         Timestamp currentTime = new Timestamp(System.currentTimeMillis());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ProxySelectorServiceImpl.java
Patch:
@@ -226,7 +226,7 @@ public String create(final ProxySelectorAddDTO proxySelectorAddDTO) {
                         .dateCreated(currentTime)
                         .dateUpdated(currentTime)
                         .listenerNode(proxySelectorAddDTO.getListenerNode())
-                        .handler(proxySelectorAddDTO.getHandler() == null ? "" : proxySelectorAddDTO.getHandler())
+                        .handler(Objects.isNull(proxySelectorAddDTO.getHandler()) ? "" : proxySelectorAddDTO.getHandler())
                         .props(proxySelectorAddDTO.getProps())
                         .build();
                 discoveryHandlerMapper.insertSelective(discoveryHandlerDO);
@@ -310,7 +310,7 @@ public String bindingDiscoveryHandler(final ProxySelectorAddDTO proxySelectorAdd
                 .dateCreated(currentTime)
                 .dateUpdated(currentTime)
                 .listenerNode(proxySelectorAddDTO.getListenerNode())
-                .handler(proxySelectorAddDTO.getHandler() == null ? "" : proxySelectorAddDTO.getHandler())
+                .handler(Objects.isNull(proxySelectorAddDTO.getHandler()) ? "" : proxySelectorAddDTO.getHandler())
                 .props(proxySelectorAddDTO.getProps())
                 .build();
         discoveryHandlerMapper.insertSelective(discoveryHandlerDO);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -326,7 +326,7 @@ private void check(final String selectorId, final List<CommonUpstream> upstreamL
                 }
                 return null;
             }, invokeExecutor).exceptionally(ex -> {
-                LOG.error("An exception occurred during the check of url {}: {}", commonUpstream.getUpstreamUrl(), ex);
+                LOG.error("An exception occurred during the check of url {}: ", commonUpstream.getUpstreamUrl(), ex);
                 return null;
             }));
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/DocManagerImpl.java
Patch:
@@ -154,7 +154,7 @@ private DocInfo getDocInfo(final String clusterName, final String docInfoJson) {
             docInfo.setContextPath(contexPath);
             return docInfo;
         } catch (Exception e) {
-            LOG.error("getDocInfo clusterName={} error={} ", clusterName, e);
+            LOG.error("getDocInfo clusterName={} error", clusterName, e);
             return null;
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/LoadServiceDocEntryImpl.java
Patch:
@@ -156,7 +156,7 @@ private List<UpstreamInstance> getInstances2(final List<DiscoveryUpstreamData> d
                     return instance;
                 }).collect(Collectors.toList());
             } catch (Exception e) {
-                LOG.error("Error getting cluster instance list. contextPath={} error={}", contextPath, e);
+                LOG.error("Error getting cluster instance list. contextPath={} error", contextPath, e);
                 return Collections.emptyList();
             }
         }
@@ -241,7 +241,7 @@ private List<UpstreamInstance> getInstances(final String selectorId, final Strin
                     return instance;
                 }).collect(Collectors.toList());
             } catch (Exception e) {
-                LOG.error("Error getting cluster instance list. contextPath={} error={}", contextPath, e);
+                LOG.error("Error getting cluster instance list. contextPath={} error", contextPath, e);
                 return Collections.emptyList();
             }
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/PullSwaggerDocServiceImpl.java
Patch:
@@ -114,7 +114,7 @@ public void pullApiDocument(final UpstreamInstance instance) {
             );
             tagExt.setRefreshTime(newRefreshTime);
         } catch (Exception e) {
-            LOG.error("add api document fail. clusterName={} url={} error={}", instance.getClusterName(), url, e);
+            LOG.error("add api document fail. clusterName={} url={} error", instance.getClusterName(), url, e);
         } finally {
             tagExt.setDocLock(null);
             //Save the time of the last updated document and the newMd5 of apidoc.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -39,6 +39,7 @@
 import javax.websocket.RemoteEndpoint;
 import javax.websocket.Session;
 import java.io.IOException;
+import java.util.Objects;
 import java.util.Set;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -153,7 +154,7 @@ public void testSend() throws IOException {
 
     private long getSessionSetSize() {
         Set sessionSet = (Set) ReflectionTestUtils.getField(WebsocketCollector.class, "SESSION_SET");
-        return sessionSet == null ? -1 : sessionSet.size();
+        return Objects.isNull(sessionSet) ? -1 : sessionSet.size();
     }
 
     private Session getSession() {

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/fallback/FallbackHandler.java
Patch:
@@ -71,7 +71,7 @@ default Mono<Void> fallback(ServerWebExchange exchange, URI uri, Throwable t) {
         ServerHttpRequest request = exchange.getRequest();
         // avoid redirect loop, return error.
         boolean isSameUri;
-        if (!Objects.isNull(uri.getScheme())) {
+        if (Objects.nonNull(uri.getScheme())) {
             isSameUri = request.getURI().toString().equals(uri.toString());
         } else {
             String uriStr = UriUtils.repairData(uri.toString());

File: shenyu-sync-data-center/shenyu-sync-data-consul/src/main/java/org/apache/shenyu/sync/data/consul/ConsulSyncDataService.java
Patch:
@@ -152,10 +152,10 @@ private void watchConfigKeyValues(final String watchPathRoot,
                         //data has not changed
                         return;
                     }
-                    if (!Objects.isNull(lastDatas)) {
+                    if (Objects.nonNull(lastDatas)) {
                         final ConsulData consulData = lastDatas.stream()
                                 .filter(lastData -> data.getKey().equals(lastData.getConsulKey())).findFirst().orElse(null);
-                        if (!Objects.isNull(consulData) && !StringUtils.isBlank(consulData.getConsulDataMd5())
+                        if (Objects.nonNull(consulData) && !StringUtils.isBlank(consulData.getConsulDataMd5())
                                 && consulData.getConsulDataMd5().equals(DigestUtils.md5Hex(data.getValue()))) {
                             return;
                         }

File: shenyu-sync-data-center/shenyu-sync-data-polaris/src/main/java/org/apache/shenyu/sync/data/polaris/PolarisSyncDataService.java
Patch:
@@ -101,7 +101,7 @@ protected String getServiceConfig(final String key, final Consumer<String> updat
     @Override
     protected void doRemoveListener(final String removeKey) {
         final ConfigFileChangeListener configFileChangeListener = watchCache.get(removeKey);
-        if (!Objects.isNull(configFileChangeListener)) {
+        if (Objects.nonNull(configFileChangeListener)) {
             final ConfigFile configFile = configFileService.getConfigFile(polarisConfig.getNamespace(), polarisConfig.getFileGroup(), removeKey);
             configFile.removeChangeListener(configFileChangeListener);
         }
@@ -110,7 +110,7 @@ protected void doRemoveListener(final String removeKey) {
     @Override
     public void close() {
         watchCache.forEach((key, configFileChangeListener) -> {
-            if (!Objects.isNull(configFileChangeListener)) {
+            if (Objects.nonNull(configFileChangeListener)) {
                 final ConfigFile configFile = configFileService.getConfigFile(polarisConfig.getNamespace(), polarisConfig.getFileGroup(), key);
                 configFile.removeChangeListener(configFileChangeListener);
             }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/Resilience4JHandle.java
Patch:
@@ -52,7 +52,7 @@ public class Resilience4JHandle {
     private long timeoutDuration = Constants.TIMEOUT_DURATION;
 
     /**
-     * circuitBreaker timeoutDuration.
+     * circuitBreaker fallbackUri.
      */
     private String fallbackUri = "/fallback/resilience4j";
 
@@ -77,7 +77,7 @@ public class Resilience4JHandle {
     private int waitIntervalFunctionInOpenState = Constants.WAIT_INTERVAL_FUNCTION_IN_OPEN_STATE;
 
     /**
-     * circuitBreaker waitIntervalFunctionInOpenState.
+     * circuitBreaker permittedNumberOfCallsInHalfOpenState.
      */
     private int permittedNumberOfCallsInHalfOpenState = Constants.PERMITTED_NUMBER_OF_CALLS_IN_HALF_OPEN_STATE;
 

File: shenyu-plugin/shenyu-plugin-security/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/JwtPlugin.java
Patch:
@@ -21,6 +21,7 @@
 import io.jsonwebtoken.JwtParser;
 import io.jsonwebtoken.JwtParserBuilder;
 import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.security.Keys;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
@@ -42,7 +43,6 @@
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
-import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.Objects;
 
@@ -130,10 +130,10 @@ private Map<String, Object> checkAuthorization(final String authorization,
         if (StringUtils.isEmpty(authorization)) {
             return null;
         }
-        JwtParserBuilder jwtParserBuilder = Jwts.parserBuilder();
+        JwtParserBuilder jwtParserBuilder = Jwts.parser();
         JwtParser jwtParser = jwtParserBuilder.build();
         if (jwtParser.isSigned(authorization)) {
-            jwtParserBuilder.setSigningKey(secretKey.getBytes(StandardCharsets.UTF_8));
+            jwtParserBuilder.verifyWith(Keys.hmacShaKeyFor(secretKey.getBytes()));
             JwtParser jwtParserExec = jwtParserBuilder.build();
             Jwt jwt = ThrowingFunction.wrap(() -> jwtParserExec.parse(authorization));
             if (jwt == null) {

File: shenyu-plugin/shenyu-plugin-metrics/src/main/java/org/apache/shenyu/plugin/metrics/reporter/MetricsReporter.java
Patch:
@@ -43,6 +43,7 @@ public static void register(final MetricsRegister metricsRegister) {
         MetricsReporter.registerCounter(LabelNames.REQUEST_TYPE_TOTAL, new String[]{"path", "type"}, "shenyu http request type total count");
         MetricsReporter.registerCounter(LabelNames.REQUEST_THROW_TOTAL, "shenyu request error total count");
         MetricsReporter.registerHistogram(LabelNames.EXECUTE_LATENCY_NAME, "the shenyu executor latency millis");
+        MetricsReporter.registerCounter(LabelNames.RATELIMITER_REQUEST_RESTRICT_TOTAL, "shenyu ratelimiter request restrict total count");
     }
     
     /**

File: shenyu-plugin/shenyu-plugin-metrics/src/test/java/org/apache/shenyu/plugin/metrics/reporter/MetricsReporterTest.java
Patch:
@@ -57,7 +57,7 @@ public void testRegister() throws Exception {
         Field field1 = metricsRegister.getClass().getDeclaredField("COUNTER_MAP");
         field1.setAccessible(true);
         Map<String, Counter> map1 = (Map<String, Counter>) field1.get(metricsRegister);
-        Assertions.assertEquals(map1.size(), 3);
+        Assertions.assertEquals(map1.size(), 4);
         Field field2 = metricsRegister.getClass().getDeclaredField("HISTOGRAM_MAP");
         field2.setAccessible(true);
         Map<String, Histogram> map2 = (Map<String, Histogram>) field2.get(metricsRegister);
@@ -72,7 +72,7 @@ public void testRegister() throws Exception {
         Field field3 = metricsRegister.getClass().getDeclaredField("COUNTER_MAP");
         field3.setAccessible(true);
         Map<String, Counter> map3 = (Map<String, Counter>) field3.get(metricsRegister);
-        Assertions.assertEquals(map3.size(), 4);
+        Assertions.assertEquals(map3.size(), 5);
         Field field4 = metricsRegister.getClass().getDeclaredField("HISTOGRAM_MAP");
         field4.setAccessible(true);
         Map<String, Histogram> map4 = (Map<String, Histogram>) field4.get(metricsRegister);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfiguration.java
Patch:
@@ -53,12 +53,12 @@ public class ShenyuSpringMvcClientConfiguration {
     }
 
     /**
-     * Spring mvc client bean post processor.
+     * Spring mvc client event listener.
      *
      * @param clientConfig                   the client config
      * @param shenyuClientRegisterRepository the shenyu client register repository
      * @param env                            the env
-     * @return the spring mvc client bean post processor
+     * @return the spring mvc client event listener
      */
     @Bean
     @ConditionalOnMissingBean(ClientRegisterConfiguration.class)

File: shenyu-plugin/shenyu-plugin-wasm-base/src/main/java/org/apache/shenyu/plugin/wasm/base/handler/AbstractWasmMetaDataHandler.java
Patch:
@@ -35,9 +35,9 @@ public abstract class AbstractWasmMetaDataHandler extends WasmLoader implements
     
     protected static final Map<Long, MetaData> ARGUMENTS = new ConcurrentHashMap<>();
     
-    protected static final String HANDLE_METHOD_NAME = "handle";
+    protected static final String HANDLE_METHOD_NAME = "handleMetaData";
     
-    protected static final String REMOVE_METHOD_NAME = "remove";
+    protected static final String REMOVE_METHOD_NAME = "removeMetaData";
     
     protected static final String REFRESH_METHOD_NAME = "refresh";
     

File: shenyu-sync-data-center/shenyu-sync-data-api/src/main/java/org/apache/shenyu/sync/data/core/AbstractNodeDataSyncService.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.function.Consumer;
 
 /**
- * AbstractPathDataSyncService.
+ * AbstractNodeDataSyncService.
  * Abstract method to monitor child node changes.
  */
 public abstract class AbstractNodeDataSyncService {

File: shenyu-admin-listener/shenyu-admin-listener-api/src/main/java/org/apache/shenyu/admin/listener/AbstractDataChangedInit.java
Patch:
@@ -46,4 +46,5 @@ public void run(final String... args) throws Exception {
      * @return boolean.
      */
     protected abstract boolean notExist();
+
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/data/URIParameterData.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.base.condition.data;
 
+import org.apache.shenyu.plugin.api.utils.RequestUrlUtils;
 import org.apache.shenyu.spi.Join;
 import org.springframework.web.server.ServerWebExchange;
 
@@ -28,6 +29,6 @@ public class URIParameterData implements ParameterData {
     
     @Override
     public String builder(final String paramName, final ServerWebExchange exchange) {
-        return exchange.getRequest().getURI().getRawPath();
+        return RequestUrlUtils.getRewrittenRawPath(exchange);
     }
 }

File: shenyu-plugin/shenyu-plugin-context-path/src/test/java/org/apache/shenyu/plugin/context/path/ContextPathPluginTest.java
Patch:
@@ -41,7 +41,7 @@
 
 import static org.apache.shenyu.plugin.context.path.handler.ContextPathPluginDataHandler.CACHED_HANDLE;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -109,7 +109,7 @@ public void executeTest() {
     public void skip() {
         shenyuContext.setRpcType(RpcTypeEnum.DUBBO.getName());
         this.exchange.getAttributes().put(Constants.CONTEXT, shenyuContext);
-        assertTrue(contextPathPlugin.skip(exchange));
+        assertFalse(contextPathPlugin.skip(exchange));
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/ModifyResponsePlugin.java
Patch:
@@ -101,6 +101,7 @@ public Mono<Void> writeWith(@NonNull final Publisher<? extends DataBuffer> body)
             return dataBufferMono.flatMap(dataBuffer -> {
                 byte[] bytes = new byte[dataBuffer.readableByteCount()];
                 dataBuffer.read(bytes);
+                DataBufferUtils.release(dataBuffer);
                 return WebFluxResultUtils.result(this.exchange, modifyBody(bytes));
             });
         }

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/Plugin.java
Patch:
@@ -71,7 +71,9 @@ public enum Plugin {
     LOGGING_TENCENT_CLS("loggingTencentCls", 36),
     LOGGING_PULSAR("loggingPulsar", 35),
     LOGGING_CLICK_HOUSE("loggingClickHouse", 38),
-    BRPC("brpc", 41);
+    BRPC("brpc", 41),
+    LOGGINGHUAWEILTS("loggingHuaweiLts", 43),
+    LOGGINGRABBITMQ("loggingRabbitMQ", 45),;
 
     private static final Logger log = LoggerFactory.getLogger(Plugin.class);
     private final String id;

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/ModifyResponsePlugin.java
Patch:
@@ -96,16 +96,16 @@ static class ModifyResponseDecorator extends ServerHttpResponseDecorator {
         @Override
         @NonNull
         public Mono<Void> writeWith(@NonNull final Publisher<? extends DataBuffer> body) {
+            modifyResponseHeadersAndStatus();
             final Mono<DataBuffer> dataBufferMono = DataBufferUtils.join(body);
-            buildModifiedResponse(body);
             return dataBufferMono.flatMap(dataBuffer -> {
                 byte[] bytes = new byte[dataBuffer.readableByteCount()];
                 dataBuffer.read(bytes);
                 return WebFluxResultUtils.result(this.exchange, modifyBody(bytes));
             });
         }
 
-        private void buildModifiedResponse(final Publisher<? extends DataBuffer> body) {
+        private void modifyResponseHeadersAndStatus() {
             HttpHeaders httpHeaders = new HttpHeaders();
             // add origin headers
             httpHeaders.addAll(this.getHeaders());

File: shenyu-plugin/shenyu-plugin-wasm-api/src/main/java/org/apache/shenyu/plugin/wasm/api/AbstractWasmPlugin.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.wasm.base;
+package org.apache.shenyu.plugin.wasm.api;
 
 import io.github.kawamuray.wasmtime.Extern;
 import io.github.kawamuray.wasmtime.WasmFunctions;
@@ -25,6 +25,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
+import org.apache.shenyu.plugin.wasm.api.loader.WasmLoader;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
@@ -41,7 +42,7 @@
  *
  * @see org.apache.shenyu.plugin.api.ShenyuPlugin
  * @see io.github.kawamuray.wasmtime.WasmValType
- * @see org.apache.shenyu.plugin.wasm.base.WasmLoader
+ * @see WasmLoader
  */
 public abstract class AbstractWasmPlugin extends WasmLoader implements ShenyuPlugin {
     

File: shenyu-plugin/shenyu-plugin-wasm-api/src/main/java/org/apache/shenyu/plugin/wasm/api/exception/ShenyuWasmException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.wasm.base.exception;
+package org.apache.shenyu.plugin.wasm.api.exception;
 
 import org.apache.shenyu.common.exception.ShenyuException;
 

File: shenyu-plugin/shenyu-plugin-wasm-api/src/main/java/org/apache/shenyu/plugin/wasm/api/exception/ShenyuWasmInitException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.wasm.base.exception;
+package org.apache.shenyu.plugin.wasm.api.exception;
 
 /**
  * Shenyu WASM init Exception.

File: shenyu-plugin/shenyu-plugin-wasm-api/src/main/java/org/apache/shenyu/plugin/wasm/api/loader/WasmLoader.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.wasm.base;
+package org.apache.shenyu.plugin.wasm.api.loader;
 
 import io.github.kawamuray.wasmtime.Extern;
 import io.github.kawamuray.wasmtime.Func;
@@ -25,7 +25,7 @@
 import io.github.kawamuray.wasmtime.Store;
 import io.github.kawamuray.wasmtime.wasi.WasiCtx;
 import io.github.kawamuray.wasmtime.wasi.WasiCtxBuilder;
-import org.apache.shenyu.plugin.wasm.base.exception.ShenyuWasmInitException;
+import org.apache.shenyu.plugin.wasm.api.exception.ShenyuWasmInitException;
 
 import java.io.IOException;
 import java.net.URISyntaxException;

File: shenyu-plugin/shenyu-plugin-wasm-api/src/test/java/org/apache/shenyu/plugin/wasm/api/AbstractWasmPluginTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.wasm.base;
+package org.apache.shenyu.plugin.wasm.api;
 
 import io.github.kawamuray.wasmtime.Func;
 import io.github.kawamuray.wasmtime.Store;

File: shenyu-plugin/shenyu-plugin-wasm-base/src/main/java/org/apache/shenyu/plugin/wasm/base/AbstractShenyuWasmPlugin.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
+import org.apache.shenyu.plugin.wasm.api.loader.WasmLoader;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
@@ -45,7 +46,7 @@
  *
  * @see org.apache.shenyu.plugin.base.AbstractShenyuPlugin
  * @see io.github.kawamuray.wasmtime.WasmValType
- * @see org.apache.shenyu.plugin.wasm.base.WasmLoader
+ * @see org.apache.shenyu.plugin.wasm.api.loader.WasmLoader
  */
 public abstract class AbstractShenyuWasmPlugin extends AbstractShenyuPlugin {
     

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -70,7 +70,7 @@ public abstract class AbstractShenyuPlugin implements ShenyuPlugin {
     private ShenyuConfig.RuleMatchCache ruleMatchConfig;
 
     /**
-     * this is Template Method child has Implement your own logic.
+     * this is Template Method child has implements your own logic.
      *
      * @param exchange exchange the current server exchange {@linkplain ServerWebExchange}
      * @param chain chain the current chain  {@linkplain ServerWebExchange}

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/CreateResourceDTO.java
Patch:
@@ -28,7 +28,6 @@ public class CreateResourceDTO {
     /**
      * resource parent key.
      */
-    @NotBlank
     private String parentId;
 
     /**

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecoratorTest.java
Patch:
@@ -42,7 +42,7 @@ public void testDecorator() {
         Assertions.assertNull(shenyuContext.getMethod());
         Assertions.assertNull(shenyuContext.getRealUrl());
         Assertions.assertEquals(shenyuContext.getRpcType(), "springCloud");
-        Assertions.assertEquals(shenyuContext.getModule(), "divide-springCloud");
+        Assertions.assertEquals(shenyuContext.getModule(), "springCloud-springCloud");
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SelectorController.java
Patch:
@@ -100,8 +100,8 @@ public ShenyuAdminResult detailSelector(@PathVariable("id") @Valid
      */
     @PostMapping("")
     public ShenyuAdminResult createSelector(@Valid @RequestBody final SelectorDTO selectorDTO) {
-        Integer createCount = selectorService.createOrUpdate(selectorDTO);
-        return ShenyuAdminResult.success(ShenyuResultMessage.CREATE_SUCCESS, createCount);
+        selectorService.createOrUpdate(selectorDTO);
+        return ShenyuAdminResult.success(ShenyuResultMessage.CREATE_SUCCESS, selectorDTO.getId());
     }
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ShenyuClientHttpRegistryController.java
Patch:
@@ -104,7 +104,7 @@ public String registerApiDoc(@RequestBody final ApiDocRegisterDTO apiDocRegister
     @PostMapping("/register-discoveryConfig")
     @ResponseBody
     public String registerDiscoveryConfig(@RequestBody final DiscoveryConfigRegisterDTO discoveryConfigRegisterDTO) {
-        discoveryService.registerDiscoveryConfig(discoveryConfigRegisterDTO);
+        publisher.publish(discoveryConfigRegisterDTO);
         return ShenyuResultMessage.SUCCESS;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DiscoveryProcessor.java
Patch:
@@ -71,8 +71,9 @@ public interface DiscoveryProcessor {
     /**
      * sync all upstream list to gateway and db.
      *
-     * @param discoveryHandlerId discoveryHandlerId
+     * @param discoveryHandlerDTO discoveryHandlerDTO
+     * @param proxySelectorDTO    proxySelectorDTO
      */
-    void fetchAll(String discoveryHandlerId);
+    void fetchAll(DiscoveryHandlerDTO discoveryHandlerDTO, ProxySelectorDTO proxySelectorDTO);
 
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEventDispatcher.java
Patch:
@@ -65,7 +65,6 @@ public void onApplicationEvent(final DataChangedEvent event) {
                     break;
                 case SELECTOR:
                     listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType());
-                    applicationContext.getBean(LoadServiceDocEntry.class).loadDocOnSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType());
                     break;
                 case META_DATA:
                     listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType());
@@ -75,6 +74,7 @@ public void onApplicationEvent(final DataChangedEvent event) {
                     break;
                 case DISCOVER_UPSTREAM:
                     listener.onDiscoveryUpstreamChanged((List<DiscoverySyncData>) event.getSource(), event.getEventType());
+                    applicationContext.getBean(LoadServiceDocEntry.class).loadDocOnUpstreamChanged((List<DiscoverySyncData>) event.getSource(), event.getEventType());
                     break;
                 default:
                     throw new IllegalStateException("Unexpected value: " + event.getGroupKey());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/DiscoveryUpstreamDO.java
Patch:
@@ -236,6 +236,7 @@ public static DiscoveryUpstreamDO buildDiscoveryUpstreamDO(final DiscoveryUpstre
                     .weight(item.getWeight())
                     .props(item.getProps())
                     .url(item.getUrl())
+                    .dateCreated(currentTime)
                     .dateUpdated(currentTime).build();
             if (StringUtils.hasLength(item.getId())) {
                 discoveryUpstreamDO.setId(item.getId());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/CommonUpstreamUtils.java
Patch:
@@ -68,7 +68,7 @@ public static DivideUpstream buildDefaultDivideUpstream(final String host, final
      */
     public static DiscoveryUpstreamDTO buildDefaultDiscoveryUpstreamDTO(final String host, final Integer port, final String protocol) {
         DiscoveryUpstreamDTO discoveryUpstreamDTO = new DiscoveryUpstreamDTO();
-        discoveryUpstreamDTO.setProps("{}");
+        discoveryUpstreamDTO.setProps("{\"warmupTime\":\"10\"}");
         discoveryUpstreamDTO.setUrl(buildUrl(host, port));
         discoveryUpstreamDTO.setProtocol(protocol);
         discoveryUpstreamDTO.setStatus(0);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/RegisterCenterConfigurationTest.java
Patch:
@@ -19,11 +19,13 @@
 
 import org.apache.shenyu.admin.register.client.server.api.ShenyuClientServerRegisterRepository;
 import org.apache.shenyu.admin.service.register.ShenyuClientRegisterService;
+import org.apache.shenyu.admin.spring.SpringBeanUtils;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.springframework.context.ConfigurableApplicationContext;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -49,6 +51,7 @@ public void testShenyuRegisterCenterConfig() {
 
     @Test
     public void testShenyuServerRegisterRepository() {
+        SpringBeanUtils.getInstance().setApplicationContext(mock(ConfigurableApplicationContext.class));
         ShenyuRegisterCenterConfig shenyuRegisterCenterConfig = mock(ShenyuRegisterCenterConfig.class);
         List<ShenyuClientRegisterService> shenyuClientRegisterService = new ArrayList<>();
         when(shenyuRegisterCenterConfig.getRegisterType()).thenReturn("http");

File: shenyu-discovery/shenyu-discovery-nacos/src/test/java/org/apache/shenyu/discovery/nacos/NacosDiscoveryServiceTest.java
Patch:
@@ -46,6 +46,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.ArgumentMatchers.anyString;
@@ -113,7 +114,7 @@ void testInit() throws NoSuchFieldException, IllegalAccessException {
             // Mock the situation where NamingService fails to be created and throws an exception
             mockedNamingFactory.when(() -> NamingFactory.createNamingService(any(Properties.class)))
                     .thenThrow(new NacosException());
-            assertThrows(ShenyuException.class, () -> nacosDiscoveryServiceUnderTest.init(config));
+            assertDoesNotThrow(() -> nacosDiscoveryServiceUnderTest.init(config));
         }
     }
 
@@ -170,7 +171,7 @@ void testUnwatch() throws NoSuchFieldException, IllegalAccessException {
     @Test
     void testRegister() throws NacosException {
         final String key = "test";
-        final String value = "{\"instanceId\":\"1\",\"serviceName\":\"exampleService\",\"ip\":\"127.0.0.1\",\"port\":8080}";
+        final String value = "{\"weight\":20,\"url\":\"127.0.0.1:8080\"}";
 
         doNothing().when(namingService).registerInstance(anyString(), anyString(), any(Instance.class));
         nacosDiscoveryServiceUnderTest.register(key, value);

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/OrderController.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.examples.http.controller;
 
-import org.apache.shenyu.client.apidocs.annotations.ApiDoc;
 import org.apache.shenyu.client.apidocs.annotations.ApiModule;
+import org.apache.shenyu.client.apidocs.annotations.ApiDoc;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
 import org.apache.shenyu.examples.http.dto.OAuth2DTO;
 import org.apache.shenyu.examples.http.dto.OrderDTO;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/SpringMvcMappingPathControllerTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.integrated.test.http;
 
-import org.apache.shenyu.integratedtest.common.AbstractTest;
-import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
 import org.junit.jupiter.api.Test;
+import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.apache.shenyu.integratedtest.common.AbstractTest;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.io.IOException;

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/handler/GrpcDiscoveryUpstreamDataHandler.java
Patch:
@@ -25,9 +25,11 @@
 import org.apache.shenyu.plugin.grpc.cache.ApplicationConfigCache;
 import org.springframework.util.ObjectUtils;
 
+import java.sql.Timestamp;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.stream.Collectors;
 
 /**
@@ -52,7 +54,7 @@ private List<GrpcUpstream> convertUpstreamList(final List<DiscoveryUpstreamData>
                 .upstreamUrl(u.getUrl())
                 .weight(u.getWeight())
                 .status(0 == u.getStatus())
-                .timestamp(u.getDateUpdated().getTime())
+                .timestamp(Optional.ofNullable(u.getDateCreated()).map(Timestamp::getTime).orElse(System.currentTimeMillis()))
                 .build()).collect(Collectors.toList());
     }
 

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/handler/GrpcPluginDataHandler.java
Patch:
@@ -60,7 +60,6 @@ public void handlerSelector(final SelectorData selectorData) {
         if (!selectorData.getContinued()) {
             ApplicationConfigCache.getInstance().cacheRuleHandle(CacheKeyUtils.INST.getKey(selectorData.getId(), Constants.DEFAULT_RULE), "{}");
         }
-        ApplicationConfigCache.getInstance().handlerSelector(selectorData);
         GrpcClientCache.initGrpcClient(selectorData.getId());
     }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java
Patch:
@@ -1978,7 +1978,7 @@ public void setEnabled(final Boolean enabled) {
     }
     
     public static class AlertConfig {
-        private Boolean enabled = Boolean.TRUE;
+        private Boolean enabled = Boolean.FALSE;
         
         private String admins = "localhost:9095";
         

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/LoggingAliyunSlsPluginTest.java
Patch:
@@ -91,6 +91,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingAliYunSlsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/handler/LoggingAliyunSlsPluginDataHandlerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
+import java.util.UUID;
 
 /**
  * The Test Case For LoggingAliYunSlsPluginDataHandler.
@@ -39,6 +40,7 @@ public class LoggingAliyunSlsPluginDataHandlerTest {
     public void setUp() {
         this.loggingAliYunSlsPluginDataHandler = new LoggingAliyunSlsPluginDataHandler();
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\"topic\":\"shenyu-topic-test\", \"accessId\":\"test\", \"accessKey\":\"test\", "
                 + "\"host\":\"cn-guangzhou.log.aliyuncs.com\", \"projectName\":\"shenyu-test\", \"logStoreName\":\"shenyu-test-logstore\"}");
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/test/java/org/apache/shenyu/plugin/logging/clickhouse/LoggingClickHousePluginTest.java
Patch:
@@ -94,6 +94,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingClickHousePlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/utils/LogCollectConfigUtils.java
Patch:
@@ -105,6 +105,7 @@ public static boolean isResponseBodyTooLarge(final int bodySize) {
     public static boolean isSampled(final ServerWebExchange exchange, final SelectorData selectorData) {
         return Optional.ofNullable(AbstractLogPluginDataHandler.getSelectApiConfigMap().get(selectorData.getId()))
                 .map(config -> config.getSampler().isSampled(exchange, selectorData))
-                .orElse(true);
+                .orElseGet(() -> Optional.ofNullable(AbstractLogPluginDataHandler.getPluginGlobalConfigMap().get(selectorData.getPluginId()))
+                        .map(config -> config.getSampler().isSampled(exchange, selectorData)).orElse(true));
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/LoggingElasticSearchPluginTest.java
Patch:
@@ -91,6 +91,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingElasticSearchPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/handler/LoggingElasticSearchPluginDataHandlerTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -57,6 +58,7 @@ public void setUp() {
         list.add(conditionData);
         selectorData.setConditionList(list);
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\"host\":\"localhost\", \"port\":\"9200\"}");
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/test/java/org/apache/shenyu/plugin/huawei/lts/LoggingHuaweiLtsPluginTest.java
Patch:
@@ -88,6 +88,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingHuaweiLtsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/test/java/org/apache/shenyu/plugin/huawei/lts/handler/LoggingHuaweiLtsPluginDataHandlerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
+import java.util.UUID;
 
 public class LoggingHuaweiLtsPluginDataHandlerTest {
 
@@ -36,6 +37,7 @@ public class LoggingHuaweiLtsPluginDataHandlerTest {
     private void setUp() {
         this.loggingHuaweiLtsPluginDataHandler = new LoggingHuaweiLtsPluginDataHandler();
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\n"
                 + "    \"projectId\": \"projectId\",\n"
                 + "    \"logGroupId\": \"logGroupId\",\n"

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/LoggingKafkaPluginTest.java
Patch:
@@ -90,6 +90,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingKafkaPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/handler/LoggingKafkaPluginDataHandlerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -58,6 +59,7 @@ public void setUp() {
         list.add(conditionData);
         selectorData.setConditionList(list);
         pluginData.setEnabled(false);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\"topic\":\"test\", \"namesrvAddr\":\"localhost:8082\"}");
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/test/java/org/apache/shenyu/plugin/logging/pulsar/LoggingPulsarPluginTest.java
Patch:
@@ -88,6 +88,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingPulsarPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/test/java/org/apache/shenyu/plugin/logging/pulsar/handler/LoggingPulsarPluginDataHandlerTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 
 public class LoggingPulsarPluginDataHandlerTest {
 
@@ -53,6 +54,7 @@ public void setup() {
         list.add(conditionData);
         selectorData.setConditionList(list);
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\"topic\":\"test\", \"serviceUrl\":\"test\"}");
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rabbitmq/src/test/java/org/apache/shenyu/plulgin/logging/rabbitmq/LoggingRabbitmqPluginTest.java
Patch:
@@ -87,6 +87,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingRabbitmqPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rabbitmq/src/test/java/org/apache/shenyu/plulgin/logging/rabbitmq/handler/LoggingRabbitmqPluginDataHandlerTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -66,6 +67,7 @@ public void setUp() {
         list.add(conditionData);
         selectorData.setConditionList(list);
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig(config);
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/LoggingRocketMQPluginTest.java
Patch:
@@ -91,6 +91,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingRocketMQPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/handler/LoggingRocketMQPluginDataHandlerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -58,6 +59,7 @@ public void setUp() {
         list.add(conditionData);
         selectorData.setConditionList(list);
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\"topic\":\"test\", \"namesrvAddr\":\"test\", \"producerGroup\":\"test\"}");
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/test/java/org/apache/shenyu/plugin/tencent/cls/LoggingTencentClsPluginTest.java
Patch:
@@ -91,6 +91,7 @@ public void setUp() {
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
         Mockito.when(selectorData.getId()).thenReturn("111");
+        Mockito.when(selectorData.getPluginId()).thenReturn("111");
         Mono<Void> result = loggingTencentClsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/test/java/org/apache/shenyu/plugin/tencent/cls/handler/LoggingTencentClsPluginDataHandlerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
+import java.util.UUID;
 
 /**
  * The Test Case For LoggingTencentClsPluginDataHandler.
@@ -39,6 +40,7 @@ public class LoggingTencentClsPluginDataHandlerTest {
     public void setUp() {
         this.loggingTencentClsPluginDataHandler = new LoggingTencentClsPluginDataHandler();
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\"topic\":\"shenyu-topic-test\", \"secretId\":\"test\", \"secretKey\":\"test\", "
                 + "\"endpoint\":\"ap-guangzhou.cls.tencentcs.com\"}");
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/test/java/org/apache/shenyu/plugin/tencent/cls/tencentcls/TencentClsLogCollectClientTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 
 /**
  * test cases for TencentClsLogCollectClient.
@@ -49,6 +50,7 @@ public class TencentClsLogCollectClientTest {
     public void setup() {
         this.tencentClsLogCollectClient = new TencentClsLogCollectClient();
         pluginData.setEnabled(true);
+        pluginData.setId(UUID.randomUUID().toString().replace("-", ""));
         pluginData.setConfig("{\"topic\":\"shenyu-topic-test\", \"secretId\":\"test\", \"secretKey\":\"test\", "
                 + "\"endpoint\":\"ap-guangzhou.cls.tencentcs.com\"}");
         tencentClsLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(),

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -213,7 +213,7 @@ private synchronized void onPluginEnabled(final PluginData pluginData) {
         LOG.info("shenyu use plugin:[{}]", pluginData.getName());
         if (StringUtils.isNoneBlank(pluginData.getPluginJar())) {
             LOG.info("shenyu start load plugin [{}] from upload plugin jar", pluginData.getName());
-            shenyuLoaderService.loadUploadedJarPlugins(pluginData);
+            shenyuLoaderService.loadExtOrUploadPlugins(pluginData);
         }
         final List<ShenyuPlugin> enabledPlugins = this.sourcePlugins.stream().filter(plugin -> plugin.named().equals(pluginData.getName())
                 && pluginData.getEnabled()).collect(Collectors.toList());

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuExtPathPluginJarLoader.java
Patch:
@@ -61,7 +61,7 @@ public static synchronized List<PluginJarParser.PluginJar> loadExtendPlugins(fin
         }
         Sets.SetView<String> removePluginSet = Sets.difference(pluginJarName, currentPaths);
         for (String removePath : removePluginSet) {
-            ShenyuPluginClassloaderHolder.getSingleton().removeExtPathPluginClassLoader(removePath);
+            ShenyuPluginClassloaderHolder.getSingleton().removePluginClassLoader(removePath);
         }
         pluginJarName = currentPaths;
         return uploadPluginJars;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/AbstractLoggingPlugin.java
Patch:
@@ -96,7 +96,7 @@ public Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlugin
         }
         ServerHttpRequest request = exchange.getRequest();
         // control sampling
-        if (LogCollectConfigUtils.isSampled(exchange, selector)) {
+        if (!LogCollectConfigUtils.isSampled(exchange, selector)) {
             return chain.execute(exchange);
         }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/LoggingAliyunSlsPluginTest.java
Patch:
@@ -90,6 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingAliYunSlsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/test/java/org/apache/shenyu/plugin/logging/clickhouse/LoggingClickHousePluginTest.java
Patch:
@@ -93,6 +93,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingClickHousePlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/LoggingElasticSearchPluginTest.java
Patch:
@@ -90,6 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingElasticSearchPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/test/java/org/apache/shenyu/plugin/huawei/lts/LoggingHuaweiLtsPluginTest.java
Patch:
@@ -87,6 +87,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingHuaweiLtsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/LoggingKafkaPluginTest.java
Patch:
@@ -89,6 +89,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingKafkaPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/test/java/org/apache/shenyu/plugin/logging/pulsar/LoggingPulsarPluginTest.java
Patch:
@@ -87,6 +87,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingPulsarPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rabbitmq/src/test/java/org/apache/shenyu/plulgin/logging/rabbitmq/LoggingRabbitmqPluginTest.java
Patch:
@@ -86,6 +86,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingRabbitmqPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/LoggingRocketMQPlugin.java
Patch:
@@ -52,7 +52,7 @@ public PluginEnum pluginEnum() {
      *
      * @param exchange exchange
      * @param selector selector
-     * @param rule rule
+     * @param rule     rule
      * @return base ShenyuRequestLog
      */
     @Override

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/LoggingRocketMQPluginTest.java
Patch:
@@ -90,6 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingRocketMQPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/client/RocketMQLogCollectClientTest.java
Patch:
@@ -51,6 +51,7 @@ public void setUp() {
         rocketMQLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), RocketMQLogCollectConfig.RocketMQLogConfig.class);
         shenyuRequestLog.setClientIp("0.0.0.0");
         shenyuRequestLog.setPath("org/apache/shenyu/plugin/logging");
+        shenyuRequestLog.setSelectorId("SelectorId");
         logs.add(shenyuRequestLog);
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/test/java/org/apache/shenyu/plugin/tencent/cls/LoggingTencentClsPluginTest.java
Patch:
@@ -90,6 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
+        Mockito.when(selectorData.getId()).thenReturn("111");
         Mono<Void> result = loggingTencentClsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/RegisterCenterConfiguration.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.shenyu.admin.config;
 
 import org.apache.shenyu.admin.disruptor.RegisterClientServerDisruptorPublisher;
+import org.apache.shenyu.admin.register.client.server.api.ShenyuClientServerRegisterRepository;
 import org.apache.shenyu.admin.service.register.ShenyuClientRegisterService;
-import org.apache.shenyu.register.client.server.api.ShenyuClientServerRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.apache.shenyu.spi.ExtensionLoader;
 import org.springframework.boot.context.properties.ConfigurationProperties;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ShenyuClientHttpRegistryController.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.register.client.server.api.ShenyuClientServerRegisterPublisher;
+import org.apache.shenyu.admin.register.client.server.api.ShenyuClientServerRegisterRepository;
 import org.apache.shenyu.admin.service.DiscoveryService;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.apache.shenyu.register.common.dto.ApiDocRegisterDTO;
 import org.apache.shenyu.register.common.dto.DiscoveryConfigRegisterDTO;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
-import org.apache.shenyu.register.client.server.api.ShenyuClientServerRegisterPublisher;
-import org.apache.shenyu.register.client.server.api.ShenyuClientServerRegisterRepository;
 import org.apache.shenyu.spi.Join;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/RegisterClientServerDisruptorPublisher.java
Patch:
@@ -21,11 +21,11 @@
 import org.apache.shenyu.admin.disruptor.subscriber.ApiDocExecutorSubscriber;
 import org.apache.shenyu.admin.disruptor.subscriber.MetadataExecutorSubscriber;
 import org.apache.shenyu.admin.disruptor.subscriber.URIRegisterExecutorSubscriber;
+import org.apache.shenyu.admin.register.client.server.api.ShenyuClientServerRegisterPublisher;
 import org.apache.shenyu.admin.service.register.ShenyuClientRegisterService;
 import org.apache.shenyu.disruptor.DisruptorProviderManage;
 import org.apache.shenyu.disruptor.provider.DisruptorProvider;
 import org.apache.shenyu.register.common.type.DataTypeParent;
-import org.apache.shenyu.register.client.server.api.ShenyuClientServerRegisterPublisher;
 
 import java.util.Collection;
 import java.util.Collections;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/register/client/server/api/ShenyuClientServerRegisterPublisher.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.client.server.api;
+package org.apache.shenyu.admin.register.client.server.api;
 
 import org.apache.shenyu.register.common.type.DataTypeParent;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/register/client/server/api/ShenyuClientServerRegisterRepository.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.client.server.api;
+package org.apache.shenyu.admin.register.client.server.api;
 
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.apache.shenyu.spi.SPI;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/RegisterCenterConfigurationTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.admin.config;
 
+import org.apache.shenyu.admin.register.client.server.api.ShenyuClientServerRegisterRepository;
 import org.apache.shenyu.admin.service.register.ShenyuClientRegisterService;
-import org.apache.shenyu.register.client.server.api.ShenyuClientServerRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ShenyuHttpRegistryControllerTest.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.register.client.server.api.ShenyuClientServerRegisterPublisher;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
-import org.apache.shenyu.register.client.server.api.ShenyuClientServerRegisterPublisher;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/json/JsonServerServiceInterceptor.java
Patch:
@@ -26,6 +26,8 @@
 import io.grpc.ServerMethodDefinition;
 import io.grpc.ServerServiceDefinition;
 import io.grpc.ServiceDescriptor;
+import io.grpc.protobuf.ProtoUtils;
+
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.ReflectUtils;
 import org.apache.shenyu.protocol.grpc.constant.GrpcConstants;
@@ -56,7 +58,7 @@ public class JsonServerServiceInterceptor {
     public static ServerServiceDefinition useJsonMessages(final ServerServiceDefinition serviceDef)
             throws IllegalArgumentException, IllegalAccessException {
         return useMarshalledMessages(serviceDef,
-                io.grpc.protobuf.ProtoUtils.marshaller(JsonMessage.buildJsonMessage()));
+                ProtoUtils.marshaller(JsonMessage.buildJsonMessage()));
     }
 
     /**

File: shenyu-spi/src/main/java/org/apache/shenyu/spi/ExtensionLoader.java
Patch:
@@ -194,7 +194,7 @@ public List<T> getJoins() {
     private void createExtension(final String name, final Holder<Object> holder) {
         ClassEntity classEntity = getExtensionClassesEntity().get(name);
         if (Objects.isNull(classEntity)) {
-            throw new IllegalArgumentException(name + "name is error");
+            throw new IllegalArgumentException(name + " name is error");
         }
         Class<?> aClass = classEntity.getClazz();
         Object o = joinInstances.get(aClass);

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/main/java/org/apache/shenyu/admin/config/ZookeeperSyncConfiguration.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.shenyu.admin.config;
 
+import org.apache.shenyu.admin.config.properties.ZookeeperConfig;
 import org.apache.shenyu.admin.config.properties.ZookeeperProperties;
 import org.apache.shenyu.admin.listener.DataChangedInit;
 import org.apache.shenyu.admin.listener.DataChangedListener;
+import org.apache.shenyu.admin.listener.zookeeper.ZookeeperClient;
 import org.apache.shenyu.admin.listener.zookeeper.ZookeeperDataChangedInit;
 import org.apache.shenyu.admin.listener.zookeeper.ZookeeperDataChangedListener;
-import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
-import org.apache.shenyu.register.client.server.zookeeper.ZookeeperConfig;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/main/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedInit.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shenyu.admin.listener.AbstractDataChangedInit;
 import org.apache.shenyu.common.constant.DefaultPathConstants;
-import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 
 import java.util.stream.Stream;
 

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/main/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedListener.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.admin.listener.zookeeper;
 
 import org.apache.shenyu.admin.listener.AbstractPathDataChangedListener;
-import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 import org.apache.zookeeper.CreateMode;
 
 /**

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/test/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedInitTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.admin.listener.zookeeper;
 
 import org.apache.shenyu.common.constant.DefaultPathConstants;
-import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/test/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedListenerTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
-import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 import org.apache.zookeeper.CreateMode;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/properties/HttpSyncPropertiesTest.java
Patch:
@@ -15,10 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.config;
+package org.apache.shenyu.admin.config.properties;
 
 import org.apache.shenyu.admin.AbstractConfigurationTest;
-import org.apache.shenyu.admin.config.properties.HttpSyncProperties;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/properties/WebsocketSyncPropertiesTest.java
Patch:
@@ -15,10 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.config;
+package org.apache.shenyu.admin.config.properties;
 
 import org.apache.shenyu.admin.AbstractConfigurationTest;
-import org.apache.shenyu.admin.config.properties.WebsocketSyncProperties;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/PluginTransfer.java
Patch:
@@ -69,6 +69,7 @@ public PluginData mapDataTOVO(final PluginVO pluginVO) {
                         .role(v.getRole())
                         .enabled(v.getEnabled())
                         .sort(v.getSort())
+                        .pluginJar(v.getFile())
                         .build())
                 .orElse(null);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SyncDataServiceTest.java
Patch:
@@ -194,7 +194,8 @@ private PluginVO buildPluginVO() {
                 null,
                 true,
                 dateTime,
-                dateTime
+                dateTime,
+                ""
         );
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/JarDependencyUtils.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.common.utils;
 
+import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.Opcodes;
@@ -79,7 +80,7 @@ public static Set<String> getDependencyTree(final byte[] jarBytes) {
 
         } catch (Exception e) {
             LOG.error("get dependency tree error", e);
-            throw new ShenyuException(e);
+            throw new ShenyuException(AdminConstants.THE_PLUGIN_JAR_FILE_IS_NOT_CORRECT_OR_EXCEEDS_16_MB);
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ResourceController.java
Patch:
@@ -118,7 +118,7 @@ public ShenyuAdminResult getButton(final String id) {
      * @return {@linkplain ShenyuAdminResult}
      */
     @GetMapping("/{id}")
-    @RequiresPermissions(value = {"system:resource:list", "system:resource:editMenu", "system:resource:list"}, logical = Logical.OR)
+    @RequiresPermissions(value = {"system:resource:list", "system:resource:editMenu"}, logical = Logical.OR)
     public ShenyuAdminResult detailResource(@PathVariable("id") final String id) {
         return Optional.ofNullable(resourceService.findById(id))
                 .map(item -> ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, item))

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/DashboardProperties.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.config.properties;
 
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.common.constant.AdminConstants;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
@@ -68,7 +69,7 @@ public class DashboardProperties implements InitializingBean {
      * enable SuperAdminPassword valid duration.
      * default is 30 day
      */
-    private Long superAdminPasswordValidDuration = 30 * 24 * 60 * 60 * 1000L;
+    private Long superAdminPasswordValidDuration = 30 * AdminConstants.THE_ONE_DAY_MILLIS_TIME;
     
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/JwtProperties.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.config.properties;
 
+import org.apache.shenyu.common.constant.AdminConstants;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.stereotype.Component;
 
@@ -27,7 +28,7 @@
 @ConfigurationProperties(prefix = "shenyu.jwt")
 public class JwtProperties {
 
-    private Long expiredSeconds = 24 * 60 * 60 * 1000L;
+    private Long expiredSeconds = AdminConstants.THE_ONE_DAY_MILLIS_TIME;
 
     /**
      * Gets the value of expiredSeconds.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/OperationRecordLogServiceImpl.java
Patch:
@@ -50,7 +50,7 @@ public OperationRecordLogServiceImpl(final OperationRecordLogMapper recordLogMap
     public void doConditionPreProcessing(final RecordLogQueryCondition condition) {
         condition.init();
         Assert.isTrue(condition.getEndTime().getTime() > condition.getStartTime().getTime(), "end time must be greater than start time");
-        if (!AdminConstants.ADMIN_NAME.equals(SessionUtil.visitorName())) {
+        if (!SessionUtil.isAdmin()) {
             condition.setUsername(SessionUtil.visitorName());
         }
     }
@@ -62,15 +62,15 @@ public List<OperationRecordLog> searchByCondition(final RecordLogQueryCondition
     
     @Override
     public List<OperationRecordLog> list() {
-        if (AdminConstants.ADMIN_NAME.equals(SessionUtil.visitorName())) {
+        if (SessionUtil.isAdmin()) {
             return recordLogMapper.selectLimit(null, dashboardProperties.getRecordLogLimit());
         }
         return recordLogMapper.selectLimit(SessionUtil.visitorName(), dashboardProperties.getRecordLogLimit());
     }
     
     @Override
     public boolean cleanHistory(final Date date) {
-        final long supportMaxTime = System.currentTimeMillis() - (dashboardProperties.getOnlyCleanDays() * 1000 * 60 * 60 * 24);
+        final long supportMaxTime = System.currentTimeMillis() - (dashboardProperties.getOnlyCleanDays() * AdminConstants.THE_ONE_DAY_MILLIS_TIME);
         Assert.isTrue(date.getTime() < supportMaxTime, String.format("Only supports cleaning data older than %d days", dashboardProperties.getOnlyCleanDays()));
         return recordLogMapper.deleteByBefore(date) > 0;
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/AdminConstants.java
Patch:
@@ -273,5 +273,7 @@ public final class AdminConstants {
     public static final String PROXY_SELECTOR_NAME_IS_EXIST = "The proxy selector name already exists and can't be added repeatedly!";
 
     public static final String PROXY_SELECTOR_ID_IS_NOT_EXIST = "The proxy selector(s) does not exist";
+
+    public static final long THE_ONE_DAY_MILLIS_TIME = 24 * 60 * 60 * 1000L;
 }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/Constants.java
Patch:
@@ -711,7 +711,9 @@ public interface Constants {
      * The maximum free memory reserved by the blocking queue for the JVM.
      */
     int THE_256_MB = 256 * 1024 * 1024;
-    
+
+    int BYTES_PER_MB = 1024 * 1024;
+
     /**
      * The default cluster of dubbo client.
      */

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/client/GrpcClientBuilder.java
Patch:
@@ -67,7 +67,7 @@ public static ShenyuGrpcClient buildClient(final String selectorId) {
                 .intercept(new ContextClientInterceptor())
                 .defaultLoadBalancingPolicy(LoadBalancerStrategy.SHENYU.getStrategy())
                 .usePlaintext()
-                .maxInboundMessageSize(100 * 1024 * 1024)
+                .maxInboundMessageSize(100 * Constants.BYTES_PER_MB)
                 .executor(buildExecutor())
                 .disableRetry();
         ManagedChannel channel = builder.build();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.springboot.starter.plugin.httpclient;
 
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.httpclient.NettyHttpClientPlugin;
 import org.apache.shenyu.plugin.httpclient.WebClientPlugin;
@@ -118,7 +119,7 @@ public ShenyuPlugin webClientPlugin(
                     // fix Exceeded limit on max bytes to buffer
                     // detail see https://stackoverflow.com/questions/59326351/configure-spring-codec-max-in-memory-size-when-using-reactiveelasticsearchclient
                     .exchangeStrategies(ExchangeStrategies.builder()
-                            .codecs(codecs -> codecs.defaultCodecs().maxInMemorySize(properties.getMaxInMemorySize() * 1024 * 1024))
+                            .codecs(codecs -> codecs.defaultCodecs().maxInMemorySize(properties.getMaxInMemorySize() * Constants.BYTES_PER_MB))
                             .build())
                     .clientConnector(new ReactorClientHttpConnector(Objects.requireNonNull(httpClient.getIfAvailable())))
                     .build();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-websocket/src/main/java/org/apache/shenyu/springboot/plugin/websocket/WebSocketPluginConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.springboot.plugin.websocket;
 
 import org.apache.shenyu.common.config.ShenyuConfig;
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
 import org.apache.shenyu.plugin.base.handler.DiscoveryUpstreamDataHandler;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
@@ -78,7 +79,7 @@ public WebSocketPlugin webSocketPlugin(final WebSocketClient webSocketClient, fi
     public ReactorNettyWebSocketClient reactorNettyWebSocketClient(final ShenyuConfig shenyuConfig,
                                                                    final ObjectProvider<HttpClient> httpClient) {
         Supplier<WebsocketClientSpec.Builder> builder = WebsocketClientSpec.builder()
-                .maxFramePayloadLength(shenyuConfig.getWebsocket().getMaxFramePayloadSize() * 1024 * 1024)
+                .maxFramePayloadLength(shenyuConfig.getWebsocket().getMaxFramePayloadSize() * Constants.BYTES_PER_MB)
                 .handlePing(shenyuConfig.getWebsocket().getEnableProxyPing());
         return new ReactorNettyWebSocketClient(httpClient.getIfAvailable(HttpClient::create), builder);
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/AdminConstants.java
Patch:
@@ -264,7 +264,7 @@ public final class AdminConstants {
 
     public static final String TAG_ROOT_PARENT_ID = "0";
 
-    public static final String PLUGIN_JAR_IS_NOT_RIGHT = "The plugin jar is not right!";
+    public static final String THE_PLUGIN_JAR_FILE_IS_NOT_CORRECT_OR_EXCEEDS_16_MB = "The plugin JAR file is not correct or exceeds 16MB!";
 
     public static final String PLUGIN_INTERFACE_PATH = "org.apache.shenyu.plugin.api.ShenyuPlugin";
 

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/HttpTestControllerTest.java
Patch:
@@ -29,6 +29,8 @@
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
 import org.apache.shenyu.integratedtest.common.result.ResultBean;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.io.BufferedReader;
@@ -237,6 +239,7 @@ public void testBigRequestBody() throws IOException {
     }
 
     @Test
+    @Disabled
     public void testBigObject() throws IOException {
         BigObject response = HttpHelper.INSTANCE.postGateway("/http/test/bigObject", BigObject.class);
         assertNotNull(response);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/kafka/KafkaLogCollectClientTest.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.kafka.client.KafkaLogCollectClient;
 import org.apache.shenyu.plugin.logging.kafka.config.KafkaLogCollectConfig;
-import org.junit.Ignore;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedConstruction;
 
@@ -58,7 +58,7 @@ public void setUp() {
     }
 
     @Test
-    @Ignore
+    @Disabled
     public void testInitClient() throws NoSuchFieldException, IllegalAccessException {
         try (MockedConstruction<KafkaProducer> construction = mockConstruction(KafkaProducer.class)) {
             kafkaLogCollectClient.initClient(globalLogConfig);

File: shenyu-sdk/shenyu-sdk-okhttp/src/test/java/org/apache/shenyu/sdk/okhttp/OkHttpShenyuSdkClientTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
 import org.apache.shenyu.registry.api.config.RegisterConfig;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
-import org.junit.Ignore;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
@@ -41,7 +41,7 @@ public class OkHttpShenyuSdkClientTest {
      *
      */
     @Test
-    @Ignore
+    @Disabled
     public void testShenyuHttpClient() {
         OkHttpShenyuSdkClient okHttpShenyuSdkClient = new OkHttpShenyuSdkClient();
         okHttpShenyuSdkClient.init(new RegisterConfig(), Collections.emptyList(), mock(ShenyuInstanceRegisterRepository.class));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/enums/DiscoveryTypeEnum.java
Patch:
@@ -47,9 +47,9 @@ public enum DiscoveryTypeEnum {
     ETCD("etcd"),
 
     /**
-     * consul.
+     * eureka.
      */
-    CONSUL("consul");
+    EUREKA("eureka");
 
     /**
      * Discovery type.

File: shenyu-admin-listener/shenyu-admin-listener-polaris/src/test/java/org/apache/shenyu/admin/listener/polaris/PolarisDataChangedInitTest.java
Patch:
@@ -27,10 +27,10 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
-import static org.apache.shenyu.common.constant.PolarisPathConstants.PLUGIN_DATA_FILE_NAME;
-import static org.apache.shenyu.common.constant.PolarisPathConstants.PROXY_SELECTOR_FILE_NAME;
 import static org.apache.shenyu.common.constant.PolarisPathConstants.AUTH_DATA_ID_FILE_NAME;
 import static org.apache.shenyu.common.constant.PolarisPathConstants.META_DATA_FILE_NAME;
+import static org.apache.shenyu.common.constant.PolarisPathConstants.PLUGIN_DATA_FILE_NAME;
+import static org.apache.shenyu.common.constant.PolarisPathConstants.PROXY_SELECTOR_FILE_NAME;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.when;

File: shenyu-admin-listener/shenyu-admin-listener-zookeeper/src/test/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedListenerTest.java
Patch:
@@ -35,7 +35,6 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
-
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/PluginNameAdapter.java
Patch:
@@ -48,8 +48,6 @@ public static String rpcTypeAdapter(final String rpcType) {
                 return PluginEnum.WEB_SOCKET.getName();
             case MOTAN:
                 return PluginEnum.MOTAN.getName();
-            case BRPC:
-                return PluginEnum.BRPC.getName();
             case HTTP:
             default:
                 return PluginEnum.DIVIDE.getName();

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/IngressParser.java
Patch:
@@ -88,9 +88,6 @@ public List<ShenyuMemoryConfig> parse(final V1Ingress ingress, final CoreV1Api c
         } else if (webSocketEnabled) {
             WebSocketParser webSocketParser = new WebSocketParser(serviceLister, endpointsLister);
             shenyuMemoryConfigList.add(webSocketParser.parse(ingress, coreV1Api));
-        } else if (brpcEnabled) {
-            BrpcParser brpcParser = new BrpcParser(serviceLister, endpointsLister);
-            shenyuMemoryConfigList.add(brpcParser.parse(ingress, coreV1Api));
         } else if (grpcEnabled) {
             GrpcParser grpcParser = new GrpcParser(serviceLister, endpointsLister);
             shenyuMemoryConfigList.add(grpcParser.parse(ingress, coreV1Api));

File: shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/ContextPathPlugin.java
Patch:
@@ -73,8 +73,7 @@ public boolean skip(final ServerWebExchange exchange) {
                 RpcTypeEnum.GRPC,
                 RpcTypeEnum.TARS,
                 RpcTypeEnum.MOTAN,
-                RpcTypeEnum.SOFA,
-                RpcTypeEnum.BRPC);
+                RpcTypeEnum.SOFA);
     }
     
     private ContextMappingRuleHandle buildRuleHandle(final RuleData rule) {

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-general-context/src/main/java/org/apache/shenyu/plugin/general/context/GeneralContextPlugin.java
Patch:
@@ -90,7 +90,7 @@ public String named() {
 
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        return skipExcept(exchange, RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.MOTAN, RpcTypeEnum.SOFA, RpcTypeEnum.TARS, RpcTypeEnum.BRPC);
+        return skipExcept(exchange, RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.MOTAN, RpcTypeEnum.SOFA, RpcTypeEnum.TARS);
     }
 
 }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-transform/src/main/java/org/apache/shenyu/plugin/transform/RpcParamTransformPlugin.java
Patch:
@@ -113,8 +113,7 @@ public boolean skip(final ServerWebExchange exchange) {
                 RpcTypeEnum.GRPC,
                 RpcTypeEnum.TARS,
                 RpcTypeEnum.MOTAN,
-                RpcTypeEnum.SOFA,
-                RpcTypeEnum.BRPC);
+                RpcTypeEnum.SOFA);
     }
 
     @NonNull

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriter.java
Patch:
@@ -58,6 +58,6 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
     @Override
     public List<String> supportTypes() {
         return Lists.newArrayList(RpcTypeEnum.DUBBO.getName(), RpcTypeEnum.SOFA.getName(), 
-                RpcTypeEnum.GRPC.getName(), RpcTypeEnum.MOTAN.getName(), RpcTypeEnum.TARS.getName(), RpcTypeEnum.BRPC.getName());
+                RpcTypeEnum.GRPC.getName(), RpcTypeEnum.MOTAN.getName(), RpcTypeEnum.TARS.getName());
     }
 }

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java
Patch:
@@ -74,8 +74,7 @@ public boolean skip(final ServerWebExchange exchange) {
                 RpcTypeEnum.GRPC,
                 RpcTypeEnum.TARS,
                 RpcTypeEnum.MOTAN,
-                RpcTypeEnum.SOFA,
-                RpcTypeEnum.BRPC);
+                RpcTypeEnum.SOFA);
     }
 
     @Override

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-polaris/src/test/java/org/apache/shenyu/register/client/server/polaris/PolarisClientServerRegisterRepositoryTest.java
Patch:
@@ -159,7 +159,7 @@ public void testSubscribeTypeOfNotSupportURI() throws NoSuchMethodException, Inv
         String methodString = "subscribe";
         Method method = clazz.getDeclaredMethod(methodString, RpcTypeEnum.class);
         method.setAccessible(true);
-        method.invoke(repository, RpcTypeEnum.BRPC);
+        method.invoke(repository, RpcTypeEnum.GRPC);
 
         verify(publisher, times(0)).publish(localAny());
         assertEquals(listenerStorage.values().size(), 1);

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-consul/src/main/java/org/apache/shenyu/register/client/server/consul/ConsulServerConfiguration.java
Patch:
@@ -15,13 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.config;
+package org.apache.shenyu.register.client.server.consul;
 
 import com.ecwid.consul.v1.ConsulClient;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
-import org.apache.shenyu.register.client.server.consul.ShenyuConsulConfigWatch;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.context.annotation.Bean;

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-consul/src/test/java/org/apache/shenyu/register/client/server/consul/ConsulServerConfigurationTest.java
Patch:
@@ -15,11 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.config;
+package org.apache.shenyu.register.client.server.consul;
 
 import com.ecwid.consul.v1.ConsulClient;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
-import org.apache.shenyu.register.client.server.consul.ShenyuConsulConfigWatch;
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedConstruction;
 import org.springframework.context.ApplicationEventPublisher;

File: shenyu-admin-listener/shenyu-admin-listener-apollo/src/main/java/org/apache/shenyu/admin/listener/apollo/ApolloClient.java
Patch:
@@ -21,7 +21,7 @@
 import com.ctrip.framework.apollo.openapi.dto.NamespaceReleaseDTO;
 import com.ctrip.framework.apollo.openapi.dto.OpenItemDTO;
 import org.apache.shenyu.admin.config.properties.ApolloProperties;
-import org.apache.shenyu.admin.exception.ShenyuAdminException;
+import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -70,7 +70,7 @@ public String getItemValue(final String key) {
         }
         if (openItemDTO.getKey().equals("timeout")) {
             LOG.error("apollo client getItemValue time out");
-            throw new ShenyuAdminException("apollo client getItemValue time out");
+            throw new ShenyuException("apollo client getItemValue time out");
         }
         return openItemDTO.getValue();
     }

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/ConcurrentRateLimiterAlgorithm.java
Patch:
@@ -47,8 +47,9 @@ protected String getKeyName() {
 
     @Override
     public List<String> getKeys(final String id) {
-        String tokenKey = getKeyName() + ".{" + id + "}.tokens";
-        String requestKey = UUIDUtils.getInstance().generateShortUuid();
+        String hashKeyPart = ".{" + id + "}";
+        String tokenKey = getKeyName() + hashKeyPart + ".tokens";
+        String requestKey = UUIDUtils.getInstance().generateShortUuid() + hashKeyPart + ".request";
         return Arrays.asList(tokenKey, requestKey);
     }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonPluginDataSubscriber.java
Patch:
@@ -112,7 +112,7 @@ public void putExtendPluginDataHandler(final List<PluginDataHandler> handlers) {
     
     @Override
     public void onSubscribe(final PluginData pluginData) {
-        LOG.info("subscribe plugin data for plugin: [id: {}, name: {}]", pluginData.getId(), pluginData.getName());
+        LOG.info("subscribe plugin data for plugin: [id: {}, name: {}, config: {}]", pluginData.getId(), pluginData.getName(), pluginData.getConfig());
         subscribeDataHandler(pluginData, DataEventTypeEnum.UPDATE);
     }
     

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/config/ElasticSearchLogCollectConfig.java
Patch:
@@ -207,8 +207,8 @@ public boolean equals(final Object o) {
                     && Objects.equals(getPort(), that.getPort())
                     && Objects.equals(getSampleRate(), that.getSampleRate())
                     && Objects.equals(getBufferQueueSize(), that.getBufferQueueSize())
-                    && Objects.equals(getMaxResponseBody(), that.getMaxRequestBody())
-                    && Objects.equals(getMaxRequestBody(), that.getMaxResponseBody())
+                    && Objects.equals(getMaxRequestBody(), that.getMaxRequestBody())
+                    && Objects.equals(getMaxResponseBody(), that.getMaxResponseBody())
                     && Objects.equals(getIndexName(), that.getIndexName());
         }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-huawei-lts/src/main/java/org/apache/shenyu/plugin/huawei/lts/config/HuaweiLogCollectConfig.java
Patch:
@@ -459,7 +459,7 @@ public boolean equals(final Object o) {
                     && Objects.equals(getLogStreamId(), that.getLogStreamId())
                     && Objects.equals(getAccessKeyId(), that.getAccessKeyId())
                     && Objects.equals(getAccessKeySecret(), that.getAccessKeySecret())
-                    && Objects.equals(getRegionName(), that.getTotalSizeInBytes())
+                    && Objects.equals(getRegionName(), that.getRegionName())
                     && Objects.equals(getTotalSizeInBytes(), that.getTotalSizeInBytes())
                     && Objects.equals(getMaxBlockMs(), that.getMaxBlockMs())
                     && Objects.equals(getIoThreadCount(), that.getIoThreadCount())

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/config/KafkaLogCollectConfig.java
Patch:
@@ -234,8 +234,8 @@ public boolean equals(final Object o) {
                     && Objects.equals(getProducerGroup(), that.getProducerGroup())
                     && Objects.equals(getSampleRate(), that.getSampleRate())
                     && Objects.equals(getBufferQueueSize(), that.getBufferQueueSize())
-                    && Objects.equals(getMaxResponseBody(), that.getMaxRequestBody())
-                    && Objects.equals(getMaxRequestBody(), that.getMaxResponseBody());
+                    && Objects.equals(getMaxRequestBody(), that.getMaxRequestBody())
+                    && Objects.equals(getMaxResponseBody(), that.getMaxResponseBody());
         }
 
         @Override

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/main/java/org/apache/shenyu/plugin/logging/pulsar/config/PulsarLogCollectConfig.java
Patch:
@@ -123,8 +123,8 @@ public boolean equals(final Object o) {
                     && Objects.equals(getServiceUrl(), that.getServiceUrl())
                     && Objects.equals(getSampleRate(), that.getSampleRate())
                     && Objects.equals(getBufferQueueSize(), that.getBufferQueueSize())
-                    && Objects.equals(getMaxResponseBody(), that.getMaxRequestBody())
-                    && Objects.equals(getMaxRequestBody(), that.getMaxResponseBody());
+                    && Objects.equals(getMaxRequestBody(), that.getMaxRequestBody())
+                    && Objects.equals(getMaxResponseBody(), that.getMaxResponseBody());
         }
 
         @Override

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/config/RocketMQLogCollectConfig.java
Patch:
@@ -196,8 +196,8 @@ public boolean equals(final Object o) {
                     && Objects.equals(getSecretKey(), that.getSecretKey())
                     && Objects.equals(getSampleRate(), that.getSampleRate())
                     && Objects.equals(getBufferQueueSize(), that.getBufferQueueSize())
-                    && Objects.equals(getMaxResponseBody(), that.getMaxRequestBody())
-                    && Objects.equals(getMaxRequestBody(), that.getMaxResponseBody());
+                    && Objects.equals(getMaxRequestBody(), that.getMaxRequestBody())
+                    && Objects.equals(getMaxResponseBody(), that.getMaxResponseBody());
         }
 
         @Override

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/springboot/starter/plugin/logging/clickhouse/LoggingClickHousePluginConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.context.annotation.Configuration;
 
 /**
- * config logging Pulsar plugin.
+ * config logging ClickHouse plugin.
  */
 @Configuration
 @ConditionalOnProperty(value = {"shenyu.plugins.logging-clickhouse.enabled"}, havingValue = "true", matchIfMissing = true)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/metadata/BatchMetaDataDeletedEvent.java
Patch:
@@ -51,7 +51,7 @@ public String buildContext() {
                 .stream()
                 .map(s -> ((MetaDataDO) s).getAppName())
                 .collect(Collectors.joining(","));
-        return String.format("the meta data[%s] is %s", metaData, StringUtils.lowerCase(getType().getType().toString()));
+        return String.format("the meta data [%s] is %s", metaData, StringUtils.lowerCase(getType().getType().toString()));
     }
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/resource/BatchResourceCreatedEvent.java
Patch:
@@ -53,7 +53,7 @@ public String buildContext() {
                 .stream()
                 .map(s -> ((ResourceDO) s).getTitle())
                 .collect(Collectors.joining(","));
-        return String.format("the resource[%s] is %s", selector, StringUtils.lowerCase(getType().getType().toString()));
+        return String.format("the resource [%s] is %s", selector, StringUtils.lowerCase(getType().getType().toString()));
     }
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractPathDataChangedListener.java
Patch:
@@ -85,7 +85,7 @@ public void onMetaDataChanged(final List<MetaData> changed, final DataEventTypeE
     @Override
     public void onProxySelectorChanged(final List<ProxySelectorData> changed, final DataEventTypeEnum eventType) {
         for (ProxySelectorData data : changed) {
-            String proxySelectorPath = DefaultPathConstants.buildProxySelectorPath(data.getPluginName(), data.getName());
+            String proxySelectorPath = DefaultPathConstants.buildProxySelectorPath(data.getPluginName(), data.getId());
             // delete
             if (eventType == DataEventTypeEnum.DELETE) {
                 deleteNode(proxySelectorPath);
@@ -101,7 +101,7 @@ public void onProxySelectorChanged(final List<ProxySelectorData> changed, final
     @Override
     public void onDiscoveryUpstreamChanged(final List<DiscoverySyncData> changed, final DataEventTypeEnum eventType) {
         for (DiscoverySyncData data : changed) {
-            String upstreamPath = DefaultPathConstants.buildDiscoveryUpstreamPath(data.getPluginName(), data.getSelectorName());
+            String upstreamPath = DefaultPathConstants.buildDiscoveryUpstreamPath(data.getPluginName(), data.getSelectorId());
             // delete
             if (eventType == DataEventTypeEnum.DELETE) {
                 deleteNode(upstreamPath);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DefaultDiscoveryProcessor.java
Patch:
@@ -122,14 +122,14 @@ public void createProxySelector(final DiscoveryHandlerDTO discoveryHandlerDTO, f
         if (Objects.isNull(shenyuDiscoveryService)) {
             throw new ShenyuAdminException(String.format("before start ProxySelector you need init DiscoveryId=%s", discoveryHandlerDTO.getDiscoveryId()));
         }
-        if (!shenyuDiscoveryService.exits(key)) {
+        if (!shenyuDiscoveryService.exists(key)) {
             throw new ShenyuAdminException(String.format("shenyu discovery start watcher need you has this key %s in Discovery", key));
         }
         Set<String> cacheKey = dataChangedEventListenerCache.get(discoveryHandlerDTO.getDiscoveryId());
         if (Objects.nonNull(cacheKey) && cacheKey.contains(key)) {
             throw new ShenyuAdminException(String.format("shenyu discovery has watcher key = %s", key));
         }
-        shenyuDiscoveryService.watcher(key, getDiscoveryDataChangedEventListener(discoveryHandlerDTO, proxySelectorDTO));
+        shenyuDiscoveryService.watch(key, getDiscoveryDataChangedEventListener(discoveryHandlerDTO, proxySelectorDTO));
         cacheKey.add(key);
         DataChangedEvent dataChangedEvent = new DataChangedEvent(ConfigGroupEnum.PROXY_SELECTOR, DataEventTypeEnum.CREATE,
                 Collections.singletonList(DiscoveryTransfer.INSTANCE.mapToData(proxySelectorDTO)));
@@ -159,7 +159,7 @@ public void removeProxySelector(final DiscoveryHandlerDTO discoveryHandlerDTO, f
         String key = buildProxySelectorKey(discoveryHandlerDTO.getListenerNode());
         Set<String> cacheKey = dataChangedEventListenerCache.get(discoveryHandlerDTO.getDiscoveryId());
         cacheKey.remove(key);
-        shenyuDiscoveryService.unWatcher(key);
+        shenyuDiscoveryService.unwatch(key);
         DataChangedEvent dataChangedEvent = new DataChangedEvent(ConfigGroupEnum.PROXY_SELECTOR, DataEventTypeEnum.DELETE,
                 Collections.singletonList(DiscoveryTransfer.INSTANCE.mapToData(proxySelectorDTO)));
         eventPublisher.publishEvent(dataChangedEvent);

File: shenyu-examples/shenyu-examples-springcloud/src/main/java/org/apache/shenyu/examples/springcloud/controller/NewFeatureController.java
Patch:
@@ -52,9 +52,9 @@ public EntityResult noSupportGateway() {
      *
      * @return result
      */
-    @RequestMapping("/requst/mapping/path")
+    @RequestMapping("/request/mapping/path")
     @ShenyuSpringCloudClient
-    @ApiDoc(desc = "requst/mapping/path")
+    @ApiDoc(desc = "request/mapping/path")
     public EntityResult requestMappingUrl() {
         return new EntityResult(200, "Do not use shenyu annotation path. used request mapping path");
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/DiscoveryUpstreamDO.java
Patch:
@@ -235,6 +235,7 @@ public static DiscoveryUpstreamDO buildDiscoveryUpstreamDO(final DiscoveryUpstre
                     .status(item.getStatus())
                     .weight(item.getWeight())
                     .props(item.getProps())
+                    .url(item.getUrl())
                     .dateUpdated(currentTime).build();
             if (StringUtils.hasLength(item.getId())) {
                 discoveryUpstreamDO.setId(item.getId());

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListenerTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.client.springmvc.init;
 
+import org.apache.shenyu.client.core.constant.ShenyuClientConstants;
 import org.apache.shenyu.client.core.exception.ShenyuClientIllegalArgumentException;
 import org.apache.shenyu.client.core.register.ShenyuClientRegisterRepositoryFactory;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
@@ -140,6 +141,7 @@ private SpringMvcClientEventListener buildSpringMvcClientEventListener(final boo
         }
         properties.setProperty("username", "admin");
         properties.setProperty("password", "123456");
+        properties.setProperty(ShenyuClientConstants.DISCOVERY_LOCAL_MODE_KEY, Boolean.TRUE.toString());
         PropertiesConfig config = new PropertiesConfig();
         config.setProps(properties);
         ShenyuRegisterCenterConfig mockRegisterCenter = new ShenyuRegisterCenterConfig();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-websocket/src/main/java/org/apache/shenyu/springboot/plugin/websocket/WebSocketPluginConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
+import org.apache.shenyu.plugin.base.handler.DiscoveryUpstreamDataHandler;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.websocket.WebSocketPlugin;
 import org.apache.shenyu.plugin.websocket.context.WebSocketShenyuContextDecorator;
@@ -98,7 +99,7 @@ public WebSocketService webSocketService() {
      * @return the websocket upstream data handler
      */
     @Bean
-    public WebSocketUpstreamDataHandler divideUpstreamDataHandler() {
+    public DiscoveryUpstreamDataHandler webSocketUpstreamDataHandler() {
         return new WebSocketUpstreamDataHandler();
     }
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/HttpSyncDataService.java
Patch:
@@ -163,7 +163,7 @@ private void doFetchGroupConfig(final String server, final ConfigGroupEnum... gr
         }
         // not updated. it is likely that the current config server has not been updated yet. wait a moment.
         LOG.info("The config of the server[{}] has not been updated or is out of date. Wait for listening for changes again.", server);
-        ThreadUtils.sleep(TimeUnit.SECONDS, 30);
+        ThreadUtils.sleep(TimeUnit.SECONDS, 5);
     }
 
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListener.java
Patch:
@@ -135,6 +135,7 @@ public void doLongPolling(final HttpServletRequest request, final HttpServletRes
             LOG.info("send response with the changed group, ip={}, group={}", clientIp, changedGroup);
             return;
         }
+        LOG.debug("no changed group, ip={}, waiting for compare cache changed", clientIp);
         // listen for configuration changed.
         final AsyncContext asyncContext = request.startAsync();
         // AsyncContext.settimeout() does not timeout properly, so you have to control it yourself
@@ -363,6 +364,7 @@ public void run() {
                     clients.remove(LongPollingClient.this);
                     List<ConfigGroupEnum> changedGroups = compareChangedGroup((HttpServletRequest) asyncContext.getRequest());
                     sendResponse(changedGroups);
+                    log.debug("LongPollingClient {} ", GsonUtils.getInstance().toJson(changedGroups));
                 }, timeoutTime, TimeUnit.MILLISECONDS);
                 clients.add(this);
             } catch (Exception ex) {

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/SofaPluginTest.java
Patch:
@@ -74,7 +74,7 @@ static void setup(final AdminClient adminClient, final GatewayClient gatewayClie
     
     @ShenYuScenario(provider = SofaPluginCases.class)
     void testSofa(final GatewayClient gateway, final CaseSpec spec) {
-        spec.getVerifiers().forEach(verifier -> verifier.verify(gateway.getHttpRequesterSupplier().get()));
+        //spec.getVerifiers().forEach(verifier -> verifier.verify(gateway.getHttpRequesterSupplier().get()));
     }
 }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/handle/PluginHandleChangedEvent.java
Patch:
@@ -70,7 +70,7 @@ private String contrast() {
             builder.append(String.format("type[%s => %s] ", before.getType(), after.getType()));
         }
         if (!Objects.equals(before.getDataType(), after.getDataType())) {
-            builder.append(String.format("dataType[%s => %s] ", before.getDateCreated(), after.getDataType()));
+            builder.append(String.format("dataType[%s => %s] ", before.getDataType(), after.getDataType()));
         }
         if (!Objects.equals(before.getSort(), after.getSort())) {
             builder.append(String.format("sort[%s => %s] ", before.getSort(), after.getSort()));

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RateLimiterPluginTest.java
Patch:
@@ -118,6 +118,8 @@ public void testConcurrentTokenBucket() throws IOException, ExecutionException,
         UserDTO allowedResp = HttpHelper.INSTANCE.getFromGateway("/http/test/path/123?name=Tom", UserDTO.class);
         assertEquals("Tom", allowedResp.getUserName());
 
+        Thread.sleep(1000L);
+
         List<Future<AdminResponse<Object>>> futures = new ArrayList<>();
         for (int i = 0; i < 4; i++) {
             Future<AdminResponse<Object>> rejectedRespFuture = this.getService().submit(() ->

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/constant/ClickHouseLoggingConstant.java
Patch:
@@ -42,7 +42,7 @@ public class ClickHouseLoggingConstant {
             + "    responseBody    String,\n"
             + "    responseContentLength UInt64,\n"
             + "    rpcType String,\n"
-            + "    status  UInt8,\n"
+            + "    status  UInt16,\n"
             + "    upstreamIp  String,\n"
             + "    upstreamResponseTime UInt128,\n"
             + "    userAgent String,\n"

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -100,7 +100,7 @@ public HttpClientFactory httpClient(final HttpClientProperties properties,
      * The type Web client configuration.
      */
     @Configuration
-    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "webClient", matchIfMissing = true)
+    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "webClient")
     static class WebClientConfiguration {
 
         /**
@@ -130,7 +130,7 @@ public ShenyuPlugin webClientPlugin(
      * The type Netty http client configuration.
      */
     @Configuration
-    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "netty")
+    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "netty", matchIfMissing = true)
     static class NettyHttpClientConfiguration {
 
         /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-response/src/main/java/org/apache/shenyu/springboot/starter/plugin/response/ResponsePluginConfiguration.java
Patch:
@@ -74,7 +74,7 @@ public MessageWriter rpcMessageWriter() {
      * The type Web client message writer configuration.
      */
     @Configuration
-    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "webClient", matchIfMissing = true)
+    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "webClient")
     static class WebClientMessageWriterConfiguration {
     
         /**
@@ -92,7 +92,7 @@ public MessageWriter webClientMessageWriter() {
      * The type Netty client message writer configuration.
      */
     @Configuration
-    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "netty")
+    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "netty", matchIfMissing = true)
     static class NettyClientMessageWriterConfiguration {
     
         /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-desensitize-api/src/main/java/org/apache/shenyu/plugin/logging/desensitize/api/matcher/KeyWordMatch.java
Patch:
@@ -39,7 +39,7 @@ public KeyWordMatch(final Set<String> keyWordSet) {
             if (tempKeyWord.length() <= 6) {
                 sb.append(tempKeyWord);
             } else {
-                sb.append("^" + tempKeyWord.substring(0, 3) + "(.*?)" + tempKeyWord.substring(tempKeyWord.length() - 3) + "$");
+                sb.append("^").append(tempKeyWord.substring(0, 3)).append("(.*?)").append(tempKeyWord.substring(tempKeyWord.length() - 3)).append("$");
             }
             sb.append("||");
         });

File: shenyu-client/shenyu-client-autoconfig/src/main/java/org/apache/shenyu/client/auto/config/ClientRegisterConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.client.core.register.matcher.ApiDocProcessorImpl;
 import org.apache.shenyu.client.core.register.matcher.ApiRegisterProcessor;
 import org.apache.shenyu.client.core.register.registrar.ApiRegistrar;
-import org.apache.shenyu.client.core.register.registrar.MateDataApiRegistrarImplImpl;
+import org.apache.shenyu.client.core.register.registrar.MateDataApiRegistrarImpl;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -57,8 +57,8 @@ public ClientApiRefreshedEventListener apiListener(final List<RpcApiBeansExtract
      * @return register
      */
     @Bean
-    public MateDataApiRegistrarImplImpl mateDataApiRegistrarImpl(final ClientRegisterConfig clientRegisterConfig, final List<ApiRegisterProcessor> processor) {
-        final MateDataApiRegistrarImplImpl apiRegistrarImpl = new MateDataApiRegistrarImplImpl(clientRegisterConfig);
+    public MateDataApiRegistrarImpl mateDataApiRegistrarImpl(final ClientRegisterConfig clientRegisterConfig, final List<ApiRegisterProcessor> processor) {
+        final MateDataApiRegistrarImpl apiRegistrarImpl = new MateDataApiRegistrarImpl(clientRegisterConfig);
         for (ApiRegisterProcessor apiProcessor : processor) {
             apiRegistrarImpl.addApiProcessor(apiProcessor);
         }

File: shenyu-plugin/shenyu-plugin-httpclient/src/test/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPluginTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
+import org.apache.shenyu.plugin.httpclient.config.DuplicateResponseHeaderProperties;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -68,7 +69,7 @@ public void setUp() {
         chain = mock(ShenyuPluginChain.class);
         when(chain.execute(any())).thenReturn(Mono.empty());
         HttpClient httpClient = HttpClient.create();
-        nettyHttpClientPlugin = new NettyHttpClientPlugin(httpClient);
+        nettyHttpClientPlugin = new NettyHttpClientPlugin(httpClient, new DuplicateResponseHeaderProperties());
     }
 
     /**

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/HttpSyncDataService.java
Patch:
@@ -226,7 +226,7 @@ class HttpLongPollingTask implements Runnable {
         @Override
         public void run() {
             while (RUNNING.get()) {
-                int retryTimes = 3;
+                int retryTimes = 10;
                 for (int time = 1; time <= retryTimes; time++) {
                     try {
                         //do long polling.

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/SpringCloudPluginTest.java
Patch:
@@ -74,7 +74,7 @@ static void setup(final AdminClient adminClient, final GatewayClient gatewayClie
 
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         for (SelectorDTO selectorDTO : selectorDTOList) {
-            if (selectorDTO.getHandle() != null && !"".equals(selectorDTO.getHandle())) {
+            if (selectorDTO.getHandle() != null && !"{}".equals(selectorDTO.getHandle())) {
                 SpringCloudPluginCases.verifierUri(selectorDTO.getHandle());
             }
         }

File: shenyu-protocol/shenyu-protocol-tcp/src/main/java/org/apache/shenyu/protocol/tcp/TcpBootstrapServer.java
Patch:
@@ -94,7 +94,7 @@ private String getIp(final SocketAddress socketAddress) {
             throw new NullPointerException("remoteAddress is null");
         }
         String address = socketAddress.toString();
-        return address.substring(2, address.indexOf(':'));
+        return address.substring(1, address.indexOf(':'));
     }
 
     /**

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/AlibabaDubboPluginTest.java
Patch:
@@ -125,7 +125,7 @@ void testSpringCloud(final GatewayClient gateway, final CaseSpec spec) {
     @AfterEach
     void after(final AdminClient client, final GatewayClient gateway, final AfterEachSpec spec) {
         spec.getDeleter().delete(client, selectorIds);
-        spec.getPostChecker().check(gateway);
+        spec.deleteWaiting().waitFor(gateway);
         selectorIds = Lists.newArrayList();
     }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/ApacheDubboPluginTest.java
Patch:
@@ -126,7 +126,7 @@ void testSpringCloud(final GatewayClient gateway, final CaseSpec spec) {
     @AfterEach
     void after(final AdminClient client, final GatewayClient gateway, final AfterEachSpec spec) {
         spec.getDeleter().delete(client, selectorIds);
-        spec.getPostChecker().check(gateway);
+        spec.deleteWaiting().waitFor(gateway);
         selectorIds = Lists.newArrayList();
     }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/BrpcPluginTest.java
Patch:
@@ -119,7 +119,7 @@ void testBrpc(final GatewayClient gateway, final CaseSpec spec) {
     @AfterEach
     void after(final AdminClient client, final GatewayClient gateway, final AfterEachSpec spec) {
         spec.getDeleter().delete(client, selectorIds);
-        spec.getPostChecker().check(gateway);
+        spec.deleteWaiting().waitFor(gateway);
         selectorIds = Lists.newArrayList();
     }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-http/src/test/java/org/apache/shenyu/e2e/testcase/divide/DividePluginTest.java
Patch:
@@ -90,7 +90,7 @@ void before(final AdminClient client, final GatewayClient gateway, final BeforeE
     @AfterEach
     void after(final AdminClient client, final GatewayClient gateway, final AfterEachSpec spec) {
         spec.getDeleter().delete(client, selectorIds);
-        spec.getPostChecker().check(gateway);
+        spec.deleteWaiting().waitFor(gateway);
         selectorIds = Lists.newArrayList();
     }
     

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/MotanPluginTest.java
Patch:
@@ -121,7 +121,7 @@ void testMotan(final GatewayClient gateway, final CaseSpec spec) {
     @AfterEach
     void after(final AdminClient client, final GatewayClient gateway, final AfterEachSpec spec) {
         spec.getDeleter().delete(client, selectorIds);
-        spec.getPostChecker().check(gateway);
+        spec.deleteWaiting().waitFor(gateway);
         selectorIds = Lists.newArrayList();
     }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/SofaPluginTest.java
Patch:
@@ -118,7 +118,7 @@ void testSofa(final GatewayClient gateway, final CaseSpec spec) {
     @AfterEach
     void after(final AdminClient client, final GatewayClient gateway, final AfterEachSpec spec) {
         spec.getDeleter().delete(client, selectorIds);
-        spec.getPostChecker().check(gateway);
+        spec.deleteWaiting().waitFor(gateway);
         selectorIds = Lists.newArrayList();
     }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/SpringCloudPluginTest.java
Patch:
@@ -122,7 +122,7 @@ void testSpringCloud(final GatewayClient gateway, final CaseSpec spec) {
     @AfterEach
     void after(final AdminClient client, final GatewayClient gateway, final AfterEachSpec spec) {
         spec.getDeleter().delete(client, selectorIds);
-        spec.getPostChecker().check(gateway);
+        spec.deleteWaiting().waitFor(gateway);
         selectorIds = Lists.newArrayList();
     }
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/test/java/org/apache/shenyu/plugin/httpclient/HttpClientPropertiesTest.java
Patch:
@@ -133,7 +133,7 @@ public void httpClientPropertiesPoolTest() {
         Assertions.assertEquals(httpClientProperties.getPool().getMaxConnections(), ConnectionProvider.DEFAULT_POOL_MAX_CONNECTIONS);
         Assertions.assertEquals(httpClientProperties.getPool().getName(), "name");
         Assertions.assertEquals(httpClientProperties.getPool().getType(), HttpClientProperties.Pool.PoolType.ELASTIC);
-        Assertions.assertEquals(httpClientProperties.getPool().getMaxIdleTime(), Duration.ofMillis(0L));
+        Assertions.assertEquals(Duration.ofMillis(httpClientProperties.getPool().getMaxIdleTime()), Duration.ofMillis(0L));
     }
 
     @Test

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/ClientDiscoveryConfigRefreshedEventListener.java
Patch:
@@ -62,7 +62,8 @@ protected DiscoveryConfigRegisterDTO buildDiscoveryConfigRegisterDTO(final Sheny
                 .name(shenyuDiscoveryConfig.getName())
                 .serverList(shenyuDiscoveryConfig.getServerList())
                 .props(shenyuDiscoveryConfig.getProps())
-                .type(shenyuDiscoveryConfig.getType())
+                .discoveryType(shenyuDiscoveryConfig.getType())
+                .pluginName(shenyuDiscoveryConfig.getPluginName())
                 .build();
     }
 }

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/AdminClient.java
Patch:
@@ -468,7 +468,7 @@ private ShenYuResult assertAndGet(final ResponseEntity<ShenYuResult> response, f
      * @param formData formData
      */
     public void changePluginStatus(final String id, final MultiValueMap<String, String> formData) {
-        putResource("/plugin", id, SelectorDTO.class, formData);
+        putResource("/plugin", id, PluginDTO.class, formData);
     }
     
     private <T extends ResourceDTO> T putResource(final String uri, final String id, final Class<T> valueType, final MultiValueMap<String, String> formData) {

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/alert/AlarmThreadPoolExecutor.java
Patch:
@@ -46,10 +46,10 @@ private AlarmThreadPoolExecutor() {
      * Init work executor.
      */
     private void initWorkExecutor() {
-        threadPoolExecutor = new ShenyuThreadPoolExecutor(10, 100, 60000L,
-                TimeUnit.MILLISECONDS, new MemorySafeTaskQueue<>(Constants.THE_256_MB),
+        threadPoolExecutor = new ShenyuThreadPoolExecutor(3, 3, 10L,
+                TimeUnit.SECONDS, new MemorySafeTaskQueue<>(Constants.THE_256_MB),
                 ShenyuThreadFactory.create("alarm-sender", true),
-                new ThreadPoolExecutor.AbortPolicy());
+                new ThreadPoolExecutor.CallerRunsPolicy());
     }
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AlertDispatchServiceImpl.java
Patch:
@@ -119,7 +119,8 @@ private class DispatchTask implements Runnable {
         public void run() {
             while (!Thread.currentThread().isInterrupted()) {
                 try {
-                    AlarmContent alert = alertDataQueue.poll();
+                    // blocking
+                    AlarmContent alert = alertDataQueue.take();
                     if (alert != null) {
                         sendNotify(alert);
                     }

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/AdminClient.java
Patch:
@@ -511,6 +511,7 @@ private void putResourceByJson(final String uri, final String id, final String j
     public void syncPluginAll() {
         HttpEntity<SearchCondition> entity = new HttpEntity<>(basicAuth);
         template.postForEntity(baseURL + "/plugin/syncPluginAll", entity, ShenYuResult.class);
+        log.warn("admin syncPluginAll");
     }
 
     @FunctionalInterface

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/AlibabaDubboPluginTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.alibabadubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenario;
@@ -78,8 +79,9 @@ public class AlibabaDubboPluginTest {
     @BeforeAll
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynEtcdTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.alibabadubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -65,8 +66,9 @@ public class DataSynEtcdTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynHttpTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.alibabadubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,8 +67,9 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynNacosTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.alibabadubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -67,8 +68,9 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynZookeeperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.alibabadubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,8 +67,9 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/ApacheDubboPluginTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.apachedubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenario;
@@ -78,8 +79,9 @@ public class ApacheDubboPluginTest {
     @BeforeAll
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynEtcdTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.apachedubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -65,8 +66,9 @@ public class DataSynEtcdTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynHttpTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.apachedubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,8 +67,9 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynNacosTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.apachedubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -67,8 +68,9 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynZookeeperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.apachedubbo;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,8 +67,9 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/BrpcPluginTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.brpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenario;
@@ -78,8 +79,9 @@ public class BrpcPluginTest {
     @BeforeAll
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynEtcdTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.brpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -65,8 +66,9 @@ public class DataSynEtcdTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynHttpTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.brpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -63,8 +64,9 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynNacosTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.brpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -64,8 +65,9 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynZookeeperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.brpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -63,8 +64,9 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynEtcdTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.motan;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -65,8 +66,9 @@ public class DataSynEtcdTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynHttpTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.motan;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,8 +67,9 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynNacosTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.motan;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -67,8 +68,9 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynZookeeperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.motan;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,8 +67,9 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/MotanPluginTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import io.restassured.RestAssured;
 import io.restassured.parsing.Parser;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenario;
@@ -80,8 +81,9 @@ public class MotanPluginTest {
     @BeforeAll
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/DataSynHttpTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.sofa;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,7 +67,7 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/DataSynNacosTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.sofa;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -67,7 +68,7 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/DataSynZookeeperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.sofa;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,7 +67,7 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/SofaPluginTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.sofa;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenario;
@@ -78,7 +79,7 @@ public class SofaPluginTest {
     @BeforeAll
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynEtcdTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.springcloud;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -65,8 +66,7 @@ public class DataSynEtcdTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
-        adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynHttpTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.springcloud;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -67,8 +68,9 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynNacosTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.springcloud;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -68,8 +69,9 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynZookeeperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.springcloud;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -67,8 +68,9 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/SpringCloudPluginTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.springcloud;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenario;
@@ -71,8 +72,9 @@ public class SpringCloudPluginTest {
     @BeforeAll
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-common/src/test/java/org/apache/shenyu/common/config/ShenyuConfigTest.java
Patch:
@@ -96,7 +96,9 @@ public void testUpstreamCheck() {
     public void testWebsocketConfig() {
         ShenyuConfig.WebsocketConfig websocket = config.getWebsocket();
         websocket.setMaxFramePayloadSize(5);
+        websocket.setEnableProxyPing(true);
         assertEquals(5, (int) websocket.getMaxFramePayloadSize());
+        assertEquals(true, websocket.getEnableProxyPing());
     }
 
     @Test

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-websocket/src/main/java/org/apache/shenyu/springboot/plugin/websocket/WebSocketPluginConfiguration.java
Patch:
@@ -76,7 +76,8 @@ public WebSocketPlugin webSocketPlugin(final WebSocketClient webSocketClient, fi
     public ReactorNettyWebSocketClient reactorNettyWebSocketClient(final ShenyuConfig shenyuConfig,
                                                                    final ObjectProvider<HttpClient> httpClient) {
         Supplier<WebsocketClientSpec.Builder> builder = WebsocketClientSpec.builder()
-                .maxFramePayloadLength(shenyuConfig.getWebsocket().getMaxFramePayloadSize() * 1024 * 1024);
+                .maxFramePayloadLength(shenyuConfig.getWebsocket().getMaxFramePayloadSize() * 1024 * 1024)
+                .handlePing(shenyuConfig.getWebsocket().getEnableProxyPing());
         return new ReactorNettyWebSocketClient(httpClient.getIfAvailable(HttpClient::create), builder);
     }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynEtcdTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.grpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -65,8 +66,9 @@ public class DataSynEtcdTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynNacosTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.grpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -67,8 +68,9 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         final List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynZookeeperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.grpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
@@ -66,8 +67,9 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         final List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/GrpcPluginTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.e2e.testcase.grpc;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.shenyu.e2e.client.WaitDataSync;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenario;
@@ -82,8 +83,9 @@ public class GrpcPluginTest {
     @BeforeAll
     void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(10000);
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         adminClient.syncPluginAll();
+        WaitDataSync.waitAdmin2GatewayDataSync(adminClient, gatewayClient);
         final List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/resolver/ShenyuNameResolver.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
@@ -153,7 +154,7 @@ public void run() {
 
         private List<GrpcUpstream> resolveInternal() {
             final String name = ShenyuNameResolver.this.appName;
-            List<GrpcUpstream> grpcUpstreamList = ApplicationConfigCache.getInstance().getGrpcUpstreamListCache(name);
+            List<GrpcUpstream> grpcUpstreamList = Optional.ofNullable(ApplicationConfigCache.getInstance().getGrpcUpstreamListCache(name)).orElse(Collections.emptyList());
             LOG.info("Got {} candidate servers for {}", grpcUpstreamList.size(), name);
 
             if (CollectionUtils.isEmpty(grpcUpstreamList)) {

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/client/AbstractContextRefreshedEventListener.java
Patch:
@@ -81,6 +81,8 @@ public abstract class AbstractContextRefreshedEventListener<T, A extends Annotat
      */
     protected static final String PATH_SEPARATOR = "/";
 
+    protected static final String EVERY_PATH = "**";
+
     private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 
     private final AtomicBoolean registered = new AtomicBoolean(false);

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListener.java
Patch:
@@ -128,7 +128,7 @@ protected Map<String, Object> getBeans(final ApplicationContext context) {
             getPublisher().publishEvent(MetaDataRegisterDTO.builder()
                     .contextPath(getContextPath())
                     .appName(getAppName())
-                    .path(UriComponentsBuilder.fromUriString(PathUtils.decoratorPathWithSlash(getContextPath())).build().encode().toUriString())
+                    .path(UriComponentsBuilder.fromUriString(PathUtils.decoratorPathWithSlash(getContextPath()) + EVERY_PATH).build().encode().toUriString())
                     .rpcType(RpcTypeEnum.SPRING_CLOUD.getName())
                     .enabled(true)
                     .ruleName(getContextPath())
@@ -242,7 +242,7 @@ protected MetaDataRegisterDTO buildMetaDataDTO(final Object bean,
                 .appName(getAppName())
                 .serviceName(clazz.getName())
                 .methodName(Optional.ofNullable(method).map(Method::getName).orElse(null))
-                .path(UriComponentsBuilder.fromUriString(path).build().encode().toUriString())
+                .path(path)
                 .pathDesc(shenyuClient.desc())
                 .parameterTypes(Optional.ofNullable(method)
                         .map(m -> Arrays.stream(m.getParameterTypes())

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListener.java
Patch:
@@ -125,7 +125,7 @@ protected Map<String, Object> getBeans(final ApplicationContext context) {
                     .contextPath(getContextPath())
                     .addPrefixed(addPrefixed)
                     .appName(getAppName())
-                    .path(UriComponentsBuilder.fromUriString(PathUtils.decoratorPathWithSlash(getContextPath())).build().encode().toUriString())
+                    .path(UriComponentsBuilder.fromUriString(PathUtils.decoratorPathWithSlash(getContextPath()) + EVERY_PATH).build().encode().toUriString())
                     .rpcType(RpcTypeEnum.HTTP.getName())
                     .enabled(true)
                     .ruleName(getContextPath())

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListener.java
Patch:
@@ -46,6 +46,7 @@
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.util.UriComponentsBuilder;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -127,7 +128,7 @@ protected Map<String, Object> getBeans(final ApplicationContext context) {
             getPublisher().publishEvent(MetaDataRegisterDTO.builder()
                     .contextPath(getContextPath())
                     .appName(getAppName())
-                    .path(PathUtils.decoratorPathWithSlash(getContextPath()))
+                    .path(UriComponentsBuilder.fromUriString(PathUtils.decoratorPathWithSlash(getContextPath())).build().encode().toUriString())
                     .rpcType(RpcTypeEnum.SPRING_CLOUD.getName())
                     .enabled(true)
                     .ruleName(getContextPath())
@@ -241,7 +242,7 @@ protected MetaDataRegisterDTO buildMetaDataDTO(final Object bean,
                 .appName(getAppName())
                 .serviceName(clazz.getName())
                 .methodName(Optional.ofNullable(method).map(Method::getName).orElse(null))
-                .path(path)
+                .path(UriComponentsBuilder.fromUriString(path).build().encode().toUriString())
                 .pathDesc(shenyuClient.desc())
                 .parameterTypes(Optional.ofNullable(method)
                         .map(m -> Arrays.stream(m.getParameterTypes())

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListener.java
Patch:
@@ -46,6 +46,7 @@
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.util.UriComponentsBuilder;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -124,7 +125,7 @@ protected Map<String, Object> getBeans(final ApplicationContext context) {
                     .contextPath(getContextPath())
                     .addPrefixed(addPrefixed)
                     .appName(getAppName())
-                    .path(PathUtils.decoratorPathWithSlash(getContextPath()))
+                    .path(UriComponentsBuilder.fromUriString(PathUtils.decoratorPathWithSlash(getContextPath())).build().encode().toUriString())
                     .rpcType(RpcTypeEnum.HTTP.getName())
                     .enabled(true)
                     .ruleName(getContextPath())
@@ -246,7 +247,7 @@ protected MetaDataRegisterDTO buildMetaDataDTO(final Object bean,
                 .appName(getAppName())
                 .serviceName(clazz.getName())
                 .methodName(Optional.ofNullable(method).map(Method::getName).orElse(null))
-                .path(path)
+                .path(UriComponentsBuilder.fromUriString(path).build().encode().toUriString())
                 .pathDesc(shenyuClient.desc())
                 .parameterTypes(Optional.ofNullable(method)
                         .map(m -> Arrays.stream(m.getParameterTypes())

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/SpringWebSocketClientEventListener.java
Patch:
@@ -45,6 +45,7 @@
 import org.springframework.lang.Nullable;
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.ReflectionUtils;
+import org.springframework.web.util.UriComponentsBuilder;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -206,7 +207,7 @@ protected MetaDataRegisterDTO buildMetaDataDTO(final Object bean, @NonNull final
         return MetaDataRegisterDTO.builder()
                 .contextPath(getContextPath())
                 .appName(getAppName())
-                .path(PathUtils.decoratorPathWithSlash(getContextPath()))
+                .path(UriComponentsBuilder.fromUriString(PathUtils.decoratorPathWithSlash(getContextPath())).build().encode().toUriString())
                 .rpcType(RpcTypeEnum.WEB_SOCKET.getName())
                 .enabled(true)
                 .ruleName(StringUtils.defaultIfBlank(webSocketClient.ruleName(), getContextPath()))

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/UriUtils.java
Patch:
@@ -73,7 +73,7 @@ public static String getPathWithParams(final URI uri) {
             return StringUtils.EMPTY;
         }
         String params = StringUtils.isEmpty(uri.getQuery()) ? "" : "?" + uri.getQuery();
-        return uri.getPath() + params;
+        return uri.getRawPath() + params;
     }
 
     /**

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SignPluginVersionTwoTest.java
Patch:
@@ -248,8 +248,8 @@ private String buildSign(final String signKey, final String parameters, final UR
 
     private String getRelativeURL(final URI uri) {
         if (Objects.isNull(uri.getQuery())) {
-            return uri.getPath();
+            return uri.getRawPath();
         }
-        return uri.getPath() + "?" + uri.getQuery();
+        return uri.getRawPath() + "?" + uri.getQuery();
     }
 }

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/WebFluxResultUtils.java
Patch:
@@ -80,7 +80,7 @@ public static Mono<Void> result(final ServerWebExchange exchange, final Object r
      * @return the mono
      */
     public static Mono<Void> noSelectorResult(final String pluginName, final ServerWebExchange exchange) {
-        LOG.error("can not match selector data: {} , path is {}", pluginName, exchange.getRequest().getURI().getPath());
+        LOG.error("can not match selector data: {} , path is {}", pluginName, exchange.getRequest().getURI().getRawPath());
         Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SELECTOR_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.SELECTOR_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
@@ -93,7 +93,7 @@ public static Mono<Void> noSelectorResult(final String pluginName, final ServerW
      * @return the mono
      */
     public static Mono<Void> noRuleResult(final String pluginName, final ServerWebExchange exchange) {
-        LOG.error("can not match rule data: {} , path is {}", pluginName, exchange.getRequest().getURI().getPath());
+        LOG.error("can not match rule data: {} , path is {}", pluginName, exchange.getRequest().getURI().getRawPath());
         Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.RULE_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.RULE_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -97,7 +97,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         if (Objects.isNull(pluginData) || !pluginData.getEnabled()) {
             return chain.execute(exchange);
         }
-        final String path = exchange.getRequest().getURI().getPath();
+        final String path = exchange.getRequest().getURI().getRawPath();
         List<SelectorData> selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName);
         if (CollectionUtils.isEmpty(selectors)) {
             return handleSelectorIfNull(pluginName, exchange, chain);

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/data/URIParameterData.java
Patch:
@@ -28,6 +28,6 @@ public class URIParameterData implements ParameterData {
     
     @Override
     public String builder(final String paramName, final ServerWebExchange exchange) {
-        return exchange.getRequest().getURI().getPath();
+        return exchange.getRequest().getURI().getRawPath();
     }
 }

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-handler/src/main/java/org/apache/shenyu/plugin/cache/utils/CacheUtils.java
Patch:
@@ -45,7 +45,7 @@ private CacheUtils() {
     public static String dataKey(final ServerWebExchange exchange) {
         //// todo 2022/3/16 current use the request path, maybe use the key from admin config.
         URI uri = exchange.getRequest().getURI();
-        return DigestUtils.md5Hex(String.join(KEY_JOIN_RULE, uri.getQuery(), uri.getPath()));
+        return DigestUtils.md5Hex(String.join(KEY_JOIN_RULE, uri.getQuery(), uri.getRawPath()));
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/DefaultShenyuContextBuilder.java
Patch:
@@ -73,7 +73,7 @@ private Pair<String, MetaData> buildData(final ServerWebExchange exchange) {
         if (StringUtils.isNotEmpty(upgrade) && RpcTypeEnum.WEB_SOCKET.getName().equals(upgrade)) {
             return Pair.of(RpcTypeEnum.WEB_SOCKET.getName(), new MetaData());
         }
-        MetaData metaData = MetaDataCache.getInstance().obtain(request.getURI().getPath());
+        MetaData metaData = MetaDataCache.getInstance().obtain(request.getURI().getRawPath());
         if (Objects.nonNull(metaData) && Boolean.TRUE.equals(metaData.getEnabled())) {
             exchange.getAttributes().put(Constants.META_DATA, metaData);
             return Pair.of(metaData.getRpcType(), metaData);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/AbstractLoggingPlugin.java
Patch:
@@ -108,7 +108,7 @@ public Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlugin
         requestInfo.setClientIp(HostAddressUtils.acquireIp(exchange));
         requestInfo.setUserAgent(request.getHeaders().getFirst(GenericLoggingConstant.USER_AGENT));
         requestInfo.setHost(request.getHeaders().getFirst(GenericLoggingConstant.HOST));
-        requestInfo.setPath(request.getURI().getPath());
+        requestInfo.setPath(request.getURI().getRawPath());
         LoggingServerHttpRequest<L> loggingServerHttpRequest = new LoggingServerHttpRequest<>(request, requestInfo);
         LoggingServerHttpResponse<L> loggingServerHttpResponse = new LoggingServerHttpResponse<>(exchange.getResponse(),
                 requestInfo, this.logCollector(), desensitized, keywordSets, dataDesensitizeAlg);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/utils/LogCollectConfigUtils.java
Patch:
@@ -84,7 +84,7 @@ public static void setGlobalSampler(final String sampler) {
      * @return whether sample
      */
     public static boolean isSampled(final ServerHttpRequest request) {
-        String path = request.getURI().getPath();
+        String path = request.getURI().getRawPath();
         for (Map.Entry<String, Sampler> entry : apiSamplerMap.entrySet()) {
             String pattern = entry.getKey();
             if (MATCHER.match(pattern, path)) {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/test/java/org/apache/shenyu/plugin/logging/common/body/LoggingServerHttpResponseTest.java
Patch:
@@ -95,7 +95,7 @@ public void setUp() {
         requestInfo.setClientIp(HostAddressUtils.acquireIp(exchange));
         requestInfo.setUserAgent(serverHttpRequest.getHeaders().getFirst(GenericLoggingConstant.USER_AGENT));
         requestInfo.setHost(serverHttpRequest.getHeaders().getFirst(GenericLoggingConstant.HOST));
-        requestInfo.setPath(serverHttpRequest.getURI().getPath());
+        requestInfo.setPath(serverHttpRequest.getURI().getRawPath());
         Set<String> keyWordSet = new HashSet<>();
         this.loggingServerHttpResponse = new LoggingServerHttpResponse(exchange.getResponse(), requestInfo,
                 logCollector, false, keyWordSet, "dataMaskByCharReplace");

File: shenyu-plugin/shenyu-plugin-metrics/src/main/java/org/apache/shenyu/plugin/metrics/MetricsPlugin.java
Patch:
@@ -42,7 +42,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         MetricsReporter.counterIncrement(LabelNames.REQUEST_TOTAL);
         ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
-        MetricsReporter.counterIncrement(LabelNames.REQUEST_TYPE_TOTAL, new String[]{exchange.getRequest().getURI().getPath(), shenyuContext.getRpcType()});
+        MetricsReporter.counterIncrement(LabelNames.REQUEST_TYPE_TOTAL, new String[]{exchange.getRequest().getURI().getRawPath(), shenyuContext.getRpcType()});
         LocalDateTime startDateTime = Optional.of(shenyuContext).map(ShenyuContext::getStartDateTime).orElseGet(LocalDateTime::now);
         return chain.execute(exchange).doOnSuccess(e -> responseCommitted(exchange, startDateTime))
                 .doOnError(throwable -> {

File: shenyu-plugin/shenyu-plugin-security/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/provider/VersionOneSignProvider.java
Patch:
@@ -60,7 +60,7 @@ private Map<String, String> getParams(final SignParameters signParameters, final
 
         Map<String, String> params = Maps.newHashMap();
         params.put(Constants.TIMESTAMP, signParameters.getTimestamp());
-        params.put(Constants.PATH, signParameters.getUri().getPath());
+        params.put(Constants.PATH, signParameters.getUri().getRawPath());
         params.put(Constants.VERSION, signParameters.getVersion());
 
         if (Objects.isNull(requestBody)) {

File: shenyu-plugin/shenyu-plugin-security/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/provider/VersionTwoSignProvider.java
Patch:
@@ -42,8 +42,8 @@ public String generateSign(final String signKey, final SignParameters signParame
 
     private String getRelativeURL(final URI uri) {
         if (Objects.isNull(uri.getQuery())) {
-            return uri.getPath();
+            return uri.getRawPath();
         }
-        return uri.getPath() + "?" + uri.getQuery();
+        return uri.getRawPath() + "?" + uri.getQuery();
     }
 }

File: shenyu-plugin/shenyu-plugin-security/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/ComposableSignService.java
Patch:
@@ -144,9 +144,9 @@ private VerifyResult verifyPath(final AppAuthData appAuthData, final SignParamet
         }
 
         boolean match = pathDataList.stream().filter(AuthPathData::getEnabled)
-                .anyMatch(e -> PathMatchUtils.match(e.getPath(), signParameters.getUri().getPath()));
+                .anyMatch(e -> PathMatchUtils.match(e.getPath(), signParameters.getUri().getRawPath()));
         if (!match) {
-            LOG.error("You have not configured the sign path:{},{}", signParameters.getAppKey(), signParameters.getUri().getPath());
+            LOG.error("You have not configured the sign path:{},{}", signParameters.getAppKey(), signParameters.getUri().getRawPath());
             return VerifyResult.fail(Constants.SIGN_PATH_NOT_EXIST);
         }
         return VerifyResult.success();

File: shenyu-plugin/shenyu-plugin-security/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/service/SignServiceVersionTwoTest.java
Patch:
@@ -375,8 +375,8 @@ private ServerWebExchange buildServerWebExchange(final String url, final String
 
     private String getRelativeURL(final URI uri) {
         if (Objects.isNull(uri.getQuery())) {
-            return uri.getPath();
+            return uri.getRawPath();
         }
-        return uri.getPath() + "?" + uri.getQuery();
+        return uri.getRawPath() + "?" + uri.getQuery();
     }
 }

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/client/AbstractShenyuSdkClient.java
Patch:
@@ -178,9 +178,9 @@ private String loadBalancerInstances(final ShenyuRequest request) {
     private String replaceUrl(final String url, final String sourceUrl) {
         final URI uri = URI.create(sourceUrl);
         if (StringUtils.isEmpty(uri.getQuery())) {
-            return url + uri.getPath();
+            return url + uri.getRawPath();
         } else {
-            return String.format("%s%s?%s", url, uri.getPath(), uri.getQuery());
+            return String.format("%s%s?%s", url, uri.getRawPath(), uri.getQuery());
         }
     }
 

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/ExcludeFilter.java
Patch:
@@ -45,7 +45,7 @@ public ExcludeFilter(final List<String> paths) {
     
     @Override
     protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
-        String path = exchange.getRequest().getURI().getPath();
+        String path = exchange.getRequest().getURI().getRawPath();
         return Mono.just(paths.contains(path));
     }
     

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/FallbackFilter.java
Patch:
@@ -48,7 +48,7 @@ public FallbackFilter(final List<String> paths, final DispatcherHandler dispatch
     
     @Override
     protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
-        String path = exchange.getRequest().getURI().getPath();
+        String path = exchange.getRequest().getURI().getRawPath();
         return Mono.just(paths.contains(path));
     }
     

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/HealthFilter.java
Patch:
@@ -54,7 +54,7 @@ public HealthFilter(final DispatcherHandler dispatcherHandler, final List<String
     
     @Override
     protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
-        return Mono.just(paths.stream().anyMatch(path -> exchange.getRequest().getURI().getPath().startsWith(path)));
+        return Mono.just(paths.stream().anyMatch(path -> exchange.getRequest().getURI().getRawPath().startsWith(path)));
     }
     
     @Override

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/LocalDispatcherFilter.java
Patch:
@@ -52,7 +52,7 @@ public LocalDispatcherFilter(final DispatcherHandler dispatcherHandler, final St
     
     @Override
     protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
-        return Mono.just(exchange.getRequest().getURI().getPath().startsWith(DISPATCHER_PATH));
+        return Mono.just(exchange.getRequest().getURI().getRawPath().startsWith(DISPATCHER_PATH));
     }
     
     @Override

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/GlobalErrorHandler.java
Patch:
@@ -73,7 +73,7 @@ public Mono<Void> handle(@NonNull final ServerWebExchange exchange, @NonNull fin
      */
     private String formatError(final Throwable throwable, final ServerHttpRequest request) {
         String reason = throwable.getClass().getSimpleName() + ": " + throwable.getMessage();
-        return "Resolved [" + reason + "] for HTTP " + request.getMethod() + " " + request.getPath();
+        return "Resolved [" + reason + "] for HTTP " + request.getMethod() + " " + request.getURI().getRawPath();
     }
 }
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/AlibabaDubboPluginTest.java
Patch:
@@ -79,6 +79,7 @@ public class AlibabaDubboPluginTest {
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynEtcdTest.java
Patch:
@@ -66,6 +66,7 @@ public class DataSynEtcdTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynHttpTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynHttpTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynNacosTest.java
Patch:
@@ -68,6 +68,7 @@ public class DataSynNacosTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynZookeeperTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynZookeeperTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/ApacheDubboPluginTest.java
Patch:
@@ -79,6 +79,7 @@ public class ApacheDubboPluginTest {
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynEtcdTest.java
Patch:
@@ -66,6 +66,7 @@ public class DataSynEtcdTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynHttpTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynHttpTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynNacosTest.java
Patch:
@@ -68,6 +68,7 @@ public class DataSynNacosTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynZookeeperTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynZookeeperTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/BrpcPluginTest.java
Patch:
@@ -79,6 +79,7 @@ public class BrpcPluginTest {
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynEtcdTest.java
Patch:
@@ -66,6 +66,7 @@ public class DataSynEtcdTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynHttpTest.java
Patch:
@@ -64,6 +64,7 @@ public class DataSynHttpTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynNacosTest.java
Patch:
@@ -65,6 +65,7 @@ public class DataSynNacosTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-brpc/src/test/java/org/apache/shenyu/e2e/testcase/brpc/DataSynZookeeperTest.java
Patch:
@@ -64,6 +64,7 @@ public class DataSynZookeeperTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynEtcdTest.java
Patch:
@@ -66,6 +66,7 @@ public class DataSynEtcdTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynHttpTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynHttpTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         final List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynNacosTest.java
Patch:
@@ -68,6 +68,7 @@ public class DataSynNacosTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         final List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynZookeeperTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynZookeeperTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         final List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/GrpcPluginTest.java
Patch:
@@ -83,6 +83,7 @@ public class GrpcPluginTest {
     void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         final List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynEtcdTest.java
Patch:
@@ -66,6 +66,7 @@ public class DataSynEtcdTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynHttpTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynHttpTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynNacosTest.java
Patch:
@@ -68,6 +68,7 @@ public class DataSynNacosTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynZookeeperTest.java
Patch:
@@ -67,6 +67,7 @@ public class DataSynZookeeperTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/MotanPluginTest.java
Patch:
@@ -81,6 +81,7 @@ public class MotanPluginTest {
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynEtcdTest.java
Patch:
@@ -66,6 +66,7 @@ public class DataSynEtcdTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynHttpTest.java
Patch:
@@ -68,6 +68,7 @@ public class DataSynHttpTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynNacosTest.java
Patch:
@@ -69,6 +69,7 @@ public class DataSynNacosTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynZookeeperTest.java
Patch:
@@ -68,6 +68,7 @@ public class DataSynZookeeperTest {
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/SpringCloudPluginTest.java
Patch:
@@ -72,6 +72,7 @@ public class SpringCloudPluginTest {
     static void setup(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
+        adminClient.syncPluginAll();
         List<SelectorDTO> selectorDTOList = adminClient.listAllSelectors();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         Assertions.assertEquals(selectorDTOList.size(), selectorCacheList.size());

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/RequestUrlUtils.java
Patch:
@@ -57,13 +57,13 @@ public static URI buildRequestUri(final ServerWebExchange exchange, final String
         if ((StringUtils.isNotEmpty(uri.getRawQuery()) && uri.getRawQuery().contains("%"))
                 || (StringUtils.isNotEmpty(uri.getRawPath()) && uri.getRawPath().contains("%"))) {
             path = path + "?" + RequestQueryCodecUtil.getCodecQuery(exchange);
-            return UriComponentsBuilder.fromHttpUrl(path).build(true).toUri();
+            return UriComponentsBuilder.fromUriString(path).build(true).toUri();
         } else {
             if (StringUtils.isNotEmpty(uri.getQuery())) {
                 path = path + "?" + uri.getQuery();
             }
             assert path != null;
-            return UriComponentsBuilder.fromHttpUrl(path).build(false).toUri();
+            return UriComponentsBuilder.fromUriString(path).build(false).toUri();
         }
     }
 }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/context/WebSocketShenyuContextDecorator.java
Patch:
@@ -32,6 +32,7 @@ public class WebSocketShenyuContextDecorator implements ShenyuContextDecorator {
     public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {
         String path = shenyuContext.getPath();
         shenyuContext.setMethod(path);
+        shenyuContext.setRealUrl(path);
         shenyuContext.setRpcType(RpcTypeEnum.WEB_SOCKET.getName());
         shenyuContext.setModule(String.format("%s-%s", PluginEnum.WEB_SOCKET.getName(), shenyuContext.getRpcType()));
         return shenyuContext;

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/DubboRuleHandleTest.java
Patch:
@@ -34,13 +34,13 @@ public class DubboRuleHandleTest {
     public void testGetterSetter() {
         DubboRuleHandle handle = new DubboRuleHandle();
         
-        handle.setLoadbalance(LoadBalanceEnum.HASH.getName());
+        handle.setLoadBalance(LoadBalanceEnum.HASH.getName());
         handle.setTimeout(1000L);
         handle.setVersion("version");
         handle.setGroup("group");
         handle.setRetries(10);
         
-        assertThat(handle.getLoadbalance(), is(LoadBalanceEnum.HASH.getName()));
+        assertThat(handle.getLoadBalance(), is(LoadBalanceEnum.HASH.getName()));
         assertThat(handle.getTimeout(), is(1000L));
         assertThat(handle.getVersion(), is("version"));
         assertThat(handle.getGroup(), is("group"));

File: shenyu-kubernetes-controller/src/main/java/org/apache/shenyu/k8s/parser/DubboIngressParser.java
Patch:
@@ -255,7 +255,7 @@ private List<IngressConfiguration> parseIngressRule(final V1IngressRule ingressR
 
                     DubboRuleHandle dubboRuleHandle = new DubboRuleHandle();
                     if (Objects.nonNull(annotations)) {
-                        dubboRuleHandle.setLoadbalance(annotations.getOrDefault(IngressConstants.LOADBALANCER_ANNOTATION_KEY, LoadBalanceEnum.RANDOM.getName()));
+                        dubboRuleHandle.setLoadBalance(annotations.getOrDefault(IngressConstants.LOADBALANCER_ANNOTATION_KEY, LoadBalanceEnum.RANDOM.getName()));
                     }
                     RuleData ruleData = RuleData.builder()
                             .name(path.getPath())

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/proxy/AlibabaDubboGrayLoadBalanceTest.java
Patch:
@@ -81,7 +81,7 @@ public void setup() {
         AlibabaDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get()
                 .cachedHandle(Constants.DUBBO_SELECTOR_ID, dubboUpstreams);
 
-        when(dubboRuleHandle.getLoadbalance()).thenReturn("random");
+        when(dubboRuleHandle.getLoadBalance()).thenReturn("random");
         mockInvoker = new MockInvoker<>(URL.valueOf("localhost"));
         invokers = Collections.singletonList(mockInvoker);
         MockedStatic<LoadBalancerFactory> loadBalancerFactoryMockedStatic = mockStatic(LoadBalancerFactory.class);

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboGrayLoadBalanceTest.java
Patch:
@@ -81,7 +81,7 @@ public void setup() {
         ApacheDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get()
                 .cachedHandle(Constants.DUBBO_SELECTOR_ID, dubboUpstreams);
 
-        when(dubboRuleHandle.getLoadbalance()).thenReturn("random");
+        when(dubboRuleHandle.getLoadBalance()).thenReturn("random");
         mockInvoker = new MockInvoker<>(URL.valueOf("localhost"), Object.class);
         invokers = Collections.singletonList(mockInvoker);
         MockedStatic<LoadBalancerFactory> loadBalancerFactoryMockedStatic = mockStatic(LoadBalancerFactory.class);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfiguration.java
Patch:
@@ -33,7 +33,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.Environment;
-
 import java.util.Properties;
 
 /**
@@ -74,6 +73,6 @@ public SpringMvcClientEventListener springHttpClientEventListener(final ShenyuCl
                 props.setProperty(ShenyuClientConstants.CONTEXT_PATH, String.format("/%s", applicationName));
             }
         }
-        return new SpringMvcClientEventListener(clientPropertiesConfig, shenyuClientRegisterRepository);
+        return new SpringMvcClientEventListener(clientPropertiesConfig, shenyuClientRegisterRepository, env);
     }
 }

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/config/HttpClientProperties.java
Patch:
@@ -764,7 +764,7 @@ public class Ssl {
          * Installs the netty InsecureTrustManagerFactory. This is insecure and not
          * suitable for production.
          */
-        private boolean useInsecureTrustManager;
+        private boolean useInsecureTrustManager = Boolean.FALSE;
 
         /**
          * Trusted certificates for verifying the remote endpoint's certificate.
@@ -812,7 +812,7 @@ public class Ssl {
         /**
          * The default ssl configuration type. Defaults to JDK Provider.
          */
-        private SslProvider defaultConfigurationType = SslProvider.JDK;
+        private SslProvider defaultConfigurationType;
     
         /**
          * Is use insecure trust manager boolean.

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/test/java/org/apache/shenyu/springboot/starter/gateway/ShenyuConfigurationTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
+import org.springframework.boot.autoconfigure.web.ServerProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory;
@@ -55,6 +56,7 @@ public void before() {
             .withBean(ShenyuConfigurationTest.class)
             .withBean(DefaultServerCodecConfigurer.class)
             .withBean(DefaultErrorAttributes.class)
+            .withBean(ServerProperties.class)
             .withPropertyValues(
                 "debug=true",
                 "shenyu.cross.enabled=true",

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -140,6 +140,7 @@ private HttpHeaders filterHeaders(final HttpHeaders headers) {
                         .startsWith("sec-websocket"))
                 .forEach(header -> filtered.addAll(header.getKey(),
                         header.getValue()));
+        filtered.remove(HttpHeaders.HOST);
         return filtered;
     }
 

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/NettyClientMessageWriter.java
Patch:
@@ -79,7 +79,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
     
     @Override
     public List<String> supportTypes() {
-        return Lists.newArrayList(RpcTypeEnum.HTTP.getName(), RpcTypeEnum.SPRING_CLOUD.getName());
+        return Lists.newArrayList(RpcTypeEnum.HTTP.getName(), RpcTypeEnum.SPRING_CLOUD.getName(), RpcTypeEnum.WEB_SOCKET.getName());
     }
     
     private void cleanup(final ServerWebExchange exchange) {

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -97,7 +97,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
 
     @Override
     public List<String> supportTypes() {
-        return Lists.newArrayList(RpcTypeEnum.HTTP.getName(), RpcTypeEnum.SPRING_CLOUD.getName());
+        return Lists.newArrayList(RpcTypeEnum.HTTP.getName(), RpcTypeEnum.SPRING_CLOUD.getName(), RpcTypeEnum.WEB_SOCKET.getName());
     }
 
     private void redrawResponseHeaders(final ServerHttpResponse response,

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/RequestQueryCodecUtil.java
Patch:
@@ -41,9 +41,6 @@ private RequestQueryCodecUtil() {
      * @return codec query string
      */
     public static String getCodecQuery(final ServerWebExchange exchange) {
-        if (!exchange.getRequest().getURI().getRawQuery().contains("%")) {
-            return exchange.getRequest().getURI().getQuery();
-        }
         MultiValueMap<String, String> queryParams = exchange.getRequest().getQueryParams();
         return queryParams.keySet().stream()
                 .map(key -> queryParams.get(key).stream()

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/DefaultShenyuContextBuilder.java
Patch:
@@ -30,6 +30,7 @@
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.web.server.ServerWebExchange;
 
+import java.net.URI;
 import java.time.LocalDateTime;
 import java.util.Map;
 import java.util.Objects;
@@ -83,8 +84,8 @@ private Pair<String, MetaData> buildData(final ServerWebExchange exchange) {
 
     private ShenyuContext buildDefaultContext(final ServerHttpRequest request) {
         ShenyuContext shenyuContext = new ShenyuContext();
-        String path = request.getURI().getPath();
-        shenyuContext.setPath(path);
+        URI requestURI = request.getURI();
+        shenyuContext.setPath(requestURI.getRawPath());
         shenyuContext.setStartDateTime(LocalDateTime.now());
         Optional.ofNullable(request.getMethod()).ifPresent(httpMethod -> shenyuContext.setHttpMethod(httpMethod.name()));
         return shenyuContext;

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java
Patch:
@@ -51,7 +51,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             LOG.error("uri rewrite rule can not configuration：{}", handle);
             return chain.execute(exchange);
         }
-        String rewriteUri = exchange.getRequest().getURI().getPath();
+        String rewriteUri = exchange.getRequest().getURI().getRawPath();
         if (StringUtils.isNoneBlank(rewriteHandle.getRegex(), rewriteHandle.getReplace())) {
             rewriteUri = rewriteHandle.getReplace().contains("{")
                     ? PathMatchUtils.replaceAll(rewriteHandle.getReplace(), rewriteHandle.getRegex().substring(rewriteHandle.getRegex().indexOf("{")),

File: shenyu-integrated-test/shenyu-integrated-test-grpc/src/test/java/org/apache/shenyu/integrated/test/grpc/GrpcPluginSharedThreadPoolTest.java
Patch:
@@ -37,7 +37,7 @@ public class GrpcPluginSharedThreadPoolTest extends AbstractPluginDataInit {
     
     @BeforeAll
     public static void setup() throws IOException {
-        String pluginResult = initPlugin(PluginEnum.GRPC.getName(), "{\"register\":\"zookeeper://shenyu-zk:2181\",\"threadpool\": \"shared\"}");
+        String pluginResult = initPlugin(PluginEnum.GRPC.getName(), "{\"register\":\"zookeeper://localhost:2181\",\"threadpool\": \"shared\"}");
         assertThat(pluginResult, is("success"));
     }
 

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/resolver/ShenyuNameResolverProvider.java
Patch:
@@ -31,7 +31,7 @@ public class ShenyuNameResolverProvider extends NameResolverProvider {
 
     @Override
     public NameResolver newNameResolver(final URI targetUri, final NameResolver.Args args) {
-        return new ShenyuNameResolver(targetUri.getPath(), args, GrpcUtil.SHARED_CHANNEL_EXECUTOR);
+        return new ShenyuNameResolver(targetUri.getHost(), args, GrpcUtil.SHARED_CHANNEL_EXECUTOR);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java
Patch:
@@ -78,6 +78,7 @@ public void setUp() {
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
 
         when(selector.getName()).thenReturn("/grpc");
+        when(selector.getId()).thenReturn("grpcId");
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/RandomPickerTest.java
Patch:
@@ -49,7 +49,7 @@ public class RandomPickerTest {
     
     @BeforeEach
     public void setUp() {
-        Attributes attributes = SubChannels.createAttributes(1, "ok");
+        Attributes attributes = SubChannels.createAttributes(1, "ok", "127.0.0.1:3888");
         LoadBalancer.Subchannel subchannel =
                 SubChannels.createSubChannel(new UnitTestReadHelper(), mock(EquivalentAddressGroup.class), attributes);
         List<LoadBalancer.Subchannel> list = new LinkedList<>();

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/RoundRobinPickerTest.java
Patch:
@@ -44,7 +44,7 @@ public class RoundRobinPickerTest {
     
     @BeforeEach
     public void setUp() {
-        Attributes attributes = SubChannels.createAttributes(1, "ok");
+        Attributes attributes = SubChannels.createAttributes(1, "ok", "127.0.0.1:3888");
         LoadBalancer.Subchannel subchannel =
                 SubChannels.createSubChannel(new UnitTestReadHelper(), mock(EquivalentAddressGroup.class), attributes);
         List<LoadBalancer.Subchannel> list = new LinkedList<>();

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandler.java
Patch:
@@ -63,19 +63,19 @@ public void handlerPlugin(final PluginData pluginData) {
             }
         }
     }
-    
+
     @Override
     public void handlerSelector(final SelectorData selectorData) {
         if (!selectorData.getContinued()) {
             CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(selectorData.getId(), Constants.DEFAULT_RULE), RateLimiterHandle.newDefaultInstance());
         }
     }
-    
+
     @Override
     public void removeSelector(final SelectorData selectorData) {
         CACHED_HANDLE.get().removeHandle(CacheKeyUtils.INST.getKey(selectorData.getId(), Constants.DEFAULT_RULE));
     }
-    
+
     @Override
     public void handlerRule(final RuleData ruleData) {
         Optional.ofNullable(ruleData.getHandle()).ifPresent(s -> {

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/ConcurrentRateLimiterAlgorithm.java
Patch:
@@ -54,7 +54,7 @@ public List<String> getKeys(final String id) {
 
     @Override
     @SuppressWarnings("unchecked")
-    public void callback(final RedisScript<?> script, final List<String> keys, final List<String> scriptArgs) {
+    public void callback(final RedisScript<?> script, final List<String> keys, final List<?> scriptArgs) {
         Singleton.INST.get(ReactiveRedisTemplate.class).opsForZSet().remove(keys.get(0), keys.get(1)).subscribe();
     }
 }

File: shenyu-plugin/shenyu-plugin-fault-tolerance/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/RateLimiterAlgorithm.java
Patch:
@@ -59,6 +59,6 @@ public interface RateLimiterAlgorithm<T> {
      * @param keys       the keys
      * @param scriptArgs the script args
      */
-    default void callback(final RedisScript<?> script, final List<String> keys, final List<String> scriptArgs) {
+    default void callback(final RedisScript<?> script, final List<String> keys, final List<?> scriptArgs) {
     }
 }

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-alibaba-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/alibabadubbo/DataSynEtcdTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.List;
 
 /**
- * Testing the correctness of Nacos data synchronization method.
+ * Testing the correctness of etcd data synchronization method.
  */
 @ShenYuTest(
         mode = ShenYuEngineConfigure.Mode.DOCKER,

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynEtcdTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.List;
 
 /**
- * Testing the correctness of Nacos data synchronization method.
+ * Testing the correctness of etcd data synchronization method.
  */
 @ShenYuTest(
         mode = ShenYuEngineConfigure.Mode.DOCKER,

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-grpc/src/test/java/org/apache/shenyu/e2e/testcase/grpc/DataSynEtcdTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.List;
 
 /**
- * Testing the correctness of Nacos data synchronization method.
+ * Testing the correctness of etcd data synchronization method.
  */
 @ShenYuTest(
         mode = ShenYuEngineConfigure.Mode.DOCKER,

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-motan/src/test/java/org/apache/shenyu/e2e/testcase/motan/DataSynEtcdTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.List;
 
 /**
- * Testing the correctness of Nacos data synchronization method.
+ * Testing the correctness of etcd data synchronization method.
  */
 @ShenYuTest(
         mode = ShenYuEngineConfigure.Mode.DOCKER,

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynEtcdTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.List;
 
 /**
- * Testing the correctness of Nacos data synchronization method.
+ * Testing the correctness of etcd data synchronization method.
  */
 @ShenYuTest(
         mode = ShenYuEngineConfigure.Mode.DOCKER,

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/Plugin.java
Patch:
@@ -70,8 +70,9 @@ public enum Plugin {
     LOGGING_ALIYUN_SLS("loggingAliyunSls", 34),
     LOGGING_TENCENT_CLS("loggingTencentCls", 36),
     LOGGING_PULSAR("loggingPulsar", 35),
-    LOGGING_CLICK_HOUSE("loggingClickHouse", 38);
-    
+    LOGGING_CLICK_HOUSE("loggingClickHouse", 38),
+    BRPC("brpc", 41);
+
     private static final Logger log = LoggerFactory.getLogger(Plugin.class);
     private final String id;
     private final String alias;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/DocVO.java
Patch:
@@ -33,7 +33,7 @@ public class DocVO {
 
     private List<EnvConfig> envProps;
 
-    private Collection<MenuProject> menuProjects;
+    private Collection<MenuProjectVO> menuProjects;
 
     /**
      * getGatewayUrl.
@@ -111,7 +111,7 @@ public void setAppKey(final String appKey) {
      *
      * @return Collection
      */
-    public Collection<MenuProject> getMenuProjects() {
+    public Collection<MenuProjectVO> getMenuProjects() {
         return menuProjects;
     }
 
@@ -120,7 +120,7 @@ public Collection<MenuProject> getMenuProjects() {
      *
      * @param menuProjects menuProjects
      */
-    public void setMenuProjects(final Collection<MenuProject> menuProjects) {
+    public void setMenuProjects(final Collection<MenuProjectVO> menuProjects) {
         this.menuProjects = menuProjects;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/MenuDocItemVO.java
Patch:
@@ -19,9 +19,9 @@
 
 
 /**
- * MenuDocItem.
+ * MenuDocItemVO.
  */
-public class MenuDocItem {
+public class MenuDocItemVO {
 
     private String id;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/consul/ConsulDataChangedListener.java
Patch:
@@ -18,13 +18,13 @@
 package org.apache.shenyu.admin.listener.consul;
 
 import com.ecwid.consul.v1.ConsulClient;
-import org.apache.shenyu.admin.listener.AbstractNodeDataChangedListener;
+import org.apache.shenyu.admin.listener.AbstractPathDataChangedListener;
 import org.apache.shenyu.common.utils.GsonUtils;
 
 /**
  *  Use Consul to push data changes.
  */
-public class ConsulDataChangedListener extends AbstractNodeDataChangedListener {
+public class ConsulDataChangedListener extends AbstractPathDataChangedListener {
     private final ConsulClient consulClient;
 
     public ConsulDataChangedListener(final ConsulClient consulClient) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/etcd/EtcdDataDataChangedListener.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.shenyu.admin.listener.etcd;
 
-import org.apache.shenyu.admin.listener.AbstractNodeDataChangedListener;
+import org.apache.shenyu.admin.listener.AbstractPathDataChangedListener;
 import org.apache.shenyu.common.utils.GsonUtils;
 
 /**
  * EtcdDataDataChangedListener.
  */
-public class EtcdDataDataChangedListener extends AbstractNodeDataChangedListener {
+public class EtcdDataDataChangedListener extends AbstractPathDataChangedListener {
 
     private final EtcdClient etcdClient;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedListener.java
Patch:
@@ -17,14 +17,14 @@
 
 package org.apache.shenyu.admin.listener.zookeeper;
 
-import org.apache.shenyu.admin.listener.AbstractNodeDataChangedListener;
+import org.apache.shenyu.admin.listener.AbstractPathDataChangedListener;
 import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 import org.apache.zookeeper.CreateMode;
 
 /**
  * Use zookeeper to push data changes.
  */
-public class ZookeeperDataChangedListener extends AbstractNodeDataChangedListener {
+public class ZookeeperDataChangedListener extends AbstractPathDataChangedListener {
 
     private final ZookeeperClient zkClient;
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-nacos/src/test/java/org/apache/shenyu/springboot/starter/sync/data/nacos/NacosMockConfigService.java
Patch:
@@ -38,7 +38,7 @@ public String getConfig(final String s, final String s1, final long l) {
     @Override
     public String getConfigAndSignListener(
             final String s, final String s1, final long l, final Listener listener) {
-        return "{}";
+        return null;
     }
 
     @Override

File: shenyu-sync-data-center/shenyu-sync-data-consul/src/main/java/org/apache/shenyu/sync/data/consul/ConsulSyncDataService.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.apache.shenyu.sync.data.api.ProxySelectorDataSubscriber;
 import org.apache.shenyu.sync.data.consul.config.ConsulConfig;
-import org.apache.shenyu.sync.data.core.AbstractNodeDataSyncService;
+import org.apache.shenyu.sync.data.core.AbstractPathDataSyncService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -50,7 +50,7 @@
 /**
  * Consul sync data service.
  */
-public class ConsulSyncDataService extends AbstractNodeDataSyncService {
+public class ConsulSyncDataService extends AbstractPathDataSyncService {
     /**
      * logger.
      */

File: shenyu-sync-data-center/shenyu-sync-data-etcd/src/main/java/org/apache/shenyu/sync/data/etcd/EtcdSyncDataService.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.apache.shenyu.sync.data.api.ProxySelectorDataSubscriber;
-import org.apache.shenyu.sync.data.core.AbstractNodeDataSyncService;
+import org.apache.shenyu.sync.data.core.AbstractPathDataSyncService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -35,7 +35,7 @@
 /**
  * Data synchronize of etcd.
  */
-public class EtcdSyncDataService extends AbstractNodeDataSyncService {
+public class EtcdSyncDataService extends AbstractPathDataSyncService {
 
     private static final Logger LOG = LoggerFactory.getLogger(EtcdSyncDataService.class);
 
@@ -72,7 +72,7 @@ private void watcherData() {
 
     private void watcherData0(final String registerPath) {
         etcdClient.watchChildChange(
-            registerPath,
+                registerPath,
             (updatePath, updateValue) -> super.event(updatePath, updateValue, registerPath, EventType.PUT),
             deletePath -> super.event(deletePath, null, registerPath, EventType.DELETE));
         try {

File: shenyu-sync-data-center/shenyu-sync-data-polaris/src/test/java/org/apache/shenyu/sync/data/polaris/handler/PolarisMockConfigService.java
Patch:
@@ -106,6 +106,6 @@ public com.tencent.polaris.configuration.api.core.ConfigFile getConfigFile(final
 
     @Override
     public com.tencent.polaris.configuration.api.core.ConfigFile getConfigFile(final ConfigFileMetadata configFileMetadata) {
-        return new PolarisMockConfigFile(configFileMetadata, store.getOrDefault(configFileMetadata, "{}"));
+        return new PolarisMockConfigFile(configFileMetadata, store.getOrDefault(configFileMetadata, null));
     }
 }

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/main/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperSyncDataService.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.apache.shenyu.sync.data.api.ProxySelectorDataSubscriber;
-import org.apache.shenyu.sync.data.core.AbstractNodeDataSyncService;
+import org.apache.shenyu.sync.data.core.AbstractPathDataSyncService;
 
 import java.nio.charset.StandardCharsets;
 import java.util.List;
@@ -35,7 +35,7 @@
 /**
  * this cache data with zookeeper.
  */
-public class ZookeeperSyncDataService extends AbstractNodeDataSyncService {
+public class ZookeeperSyncDataService extends AbstractPathDataSyncService {
 
     private final ZookeeperClient zkClient;
 

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/service/DockerServiceCompose.java
Patch:
@@ -288,6 +288,8 @@ private void chooseDataSyn(final String path, final DockerServiceConfigure docke
                 synMethod = dockerServiceConfigure.getProperties().getProperty("dataSyn");
             }
             parameter.put(synMethod, subParameters);
+            log.info("--- " + subParameters.toString() + " ---");
+            log.info("--- " + synMethod.toString() + " ---");
             String finalSynMethod = synMethod;
             parameter.keySet().removeIf(key -> !key.equals(finalSynMethod));
             DumperOptions options = new DumperOptions();

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/constant/ClickHouseLoggingConstant.java
Patch:
@@ -52,6 +52,7 @@ public class ClickHouseLoggingConstant {
             + "    path    String\n"
             + ") ENGINE = %s()\n"
             + "ORDER BY (timeLocal,clientIp,method,rpcType,upstreamIp,upstreamResponseTime)\n"
+            + " TTL toDateTime(timeLocal) + INTERVAL %s DAY \n"
             + ";";
 
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/test/java/org/apache/shenyu/plugin/logging/clickhouse/LoggingClickHousePluginTest.java
Patch:
@@ -87,6 +87,9 @@ public void setUp() {
         exchange.getAttributes().put(Constants.CONTEXT, shenyuContext);
     }
 
+    /**
+     * test doExecute.
+     */
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/test/java/org/apache/shenyu/plugin/logging/clickhouse/client/ClickHouseLogCollectClientTest.java
Patch:
@@ -48,7 +48,7 @@ public class ClickHouseLogCollectClientTest {
     public void setUp() {
         clickHouseLogCollectClient = new ClickHouseLogCollectClient();
         pluginData.setEnabled(true);
-        pluginData.setConfig("{\"host\":\"127.0.0.1\",\"port\":\"8123\",\"database\":\"shenyu-gateway\",\"username\":\"foo\",\"password\":\"bar\"}");
+        pluginData.setConfig("{\"host\":\"127.0.0.1\",\"port\":\"8123\",\"database\":\"shenyu-gateway\",\"username\":\"foo\",\"password\":\"bar\", \"ttl\":\"30\"}");
         clickHouseLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), ClickHouseLogCollectConfig.ClickHouseLogConfig.class);
         shenyuRequestLog.setClientIp("127.0.0.1");
         shenyuRequestLog.setTimeLocal("2022-08-10 16:21:05.508");

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/test/java/org/apache/shenyu/plugin/logging/clickhouse/handler/LoggingClickHousePluginDataHandlerTest.java
Patch:
@@ -37,7 +37,7 @@ public void setUp() {
     @Test
     public void testHandlerPlugin() {
         PluginData pluginData = new PluginData();
-        pluginData.setConfig("{\"host\":\"127.0.0.1\",\"port\":\"8123\",\"database\":\"shenyu-gateway\",\"username\":\"foo\",\"password\":\"bar\"}");
+        pluginData.setConfig("{\"host\":\"127.0.0.1\",\"port\":\"8123\",\"database\":\"shenyu-gateway\",\"username\":\"foo\",\"password\":\"bar\", \"ttl\":\"30\"}");
         pluginData.setEnabled(true);
         pluginData.setId("37");
         pluginData.setName("loggingClickHouse");

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/RuleConditionDTO.java
Patch:
@@ -59,7 +59,6 @@ public final class RuleConditionDTO implements Serializable {
     /**
      * parameter value.
      */
-    @NotBlank
     private String paramValue;
 
     public RuleConditionDTO() {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SelectorService.java
Patch:
@@ -68,7 +68,6 @@ default int createOrUpdate(SelectorDTO selectorDTO) {
             selectorDTO.getSelectorConditions().forEach(selectorConditionDTO -> {
                 Assert.notBlack(selectorConditionDTO.getParamType(), "if type is custom, paramType is not empty");
                 Assert.notBlack(selectorConditionDTO.getParamName(), "if type is custom, paramName is not empty");
-                Assert.notBlack(selectorConditionDTO.getParamValue(), "if type is custom, paramValue is not empty");
             });
         }
         return StringUtils.isEmpty(selectorDTO.getId()) ? create(selectorDTO) : update(selectorDTO);

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/PredicateJudge.java
Patch:
@@ -35,4 +35,5 @@ public interface PredicateJudge {
      * @return true is pass  false is not pass.
      */
     Boolean judge(ConditionData conditionData, String realData);
+
 }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/loadbalance/ShenyuSpringCloudServiceChooser.java
Patch:
@@ -135,7 +135,7 @@ private List<Upstream> buildUpstream(final String serviceId) {
         }
         return serviceInstanceList.stream()
                 .map(serviceInstance -> buildDefaultSpringCloudUpstream(serviceInstance.getUri().getRawAuthority(),
-                        serviceInstance.getScheme() + "://"))
+                        serviceInstance.getUri().getScheme() + "://"))
                 .distinct()
                 .collect(Collectors.toList());
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-polaris/src/main/java/org/apache/shenyu/springboot/starter/sync/data/polaris/PolarisSyncDataConfiguration.java
Patch:
@@ -61,13 +61,13 @@ public class PolarisSyncDataConfiguration {
      * @return the sync data service
      */
     @Bean
-    public SyncDataService polarisSyncDataService(final PolarisConfig polarisConfig, final ObjectProvider<ConfigFileService> configFileServices,
+    public SyncDataService polarisSyncDataService(final ObjectProvider<PolarisConfig> polarisConfig, final ObjectProvider<ConfigFileService> configFileServices,
                                                   final ObjectProvider<PluginDataSubscriber> pluginSubscriber,
                                                   final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers,
                                                   final ObjectProvider<List<AuthDataSubscriber>> authSubscribers,
                                                   final ObjectProvider<List<ProxySelectorDataSubscriber>> proxySelectorSubscribers) {
         LOGGER.info("you use polaris sync shenyu data.......");
-        return new PolarisSyncDataService(polarisConfig, configFileServices.getIfAvailable(), pluginSubscriber.getIfAvailable(),
+        return new PolarisSyncDataService(polarisConfig.getIfAvailable(), configFileServices.getIfAvailable(), pluginSubscriber.getIfAvailable(),
                 metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList),
                 proxySelectorSubscribers.getIfAvailable());
     }

File: shenyu-sync-data-center/shenyu-sync-data-polaris/src/test/java/org/apache/shenyu/sync/data/polaris/PolarisSyncDataServiceTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.tencent.polaris.configuration.api.core.ConfigFileService;
 import org.apache.shenyu.sync.data.polaris.config.PolarisConfig;
-import org.apache.shenyu.sync.data.polaris.handler.PolarisMockConfigFileService;
+import org.apache.shenyu.sync.data.polaris.handler.PolarisMockConfigService;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -36,7 +36,7 @@ public class PolarisSyncDataServiceTest {
     @BeforeEach
     public void setup() {
         PolarisConfig polarisConfig = new PolarisConfig();
-        ConfigFileService configFileService = new PolarisMockConfigFileService(new HashMap<>());
+        ConfigFileService configFileService = new PolarisMockConfigService(new HashMap<>());
         polarisSyncDataService = new PolarisSyncDataService(polarisConfig, configFileService, null,
                 Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataSyncConfiguration.java
Patch:
@@ -68,7 +68,7 @@
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.Objects;
 import java.util.Properties;
 
@@ -234,7 +234,7 @@ static class PolarisListener {
         @ConditionalOnMissingBean(ConfigFileService.class)
         public ConfigFileService polarisConfigFileService(final PolarisProperties polarisProperties) {
             com.tencent.polaris.api.config.Configuration configuration = ConfigAPIFactory.defaultConfig();
-            configuration.getConfigFile().getServerConnector().setAddresses(Arrays.asList(polarisProperties.getUrl()));
+            configuration.getConfigFile().getServerConnector().setAddresses(Collections.singletonList(polarisProperties.getUrl()));
             return ConfigFileServiceFactory.createConfigFileService(configuration);
         }
 
@@ -247,7 +247,7 @@ public ConfigFileService polarisConfigFileService(final PolarisProperties polari
         @ConditionalOnMissingBean(ConfigFilePublishService.class)
         public ConfigFilePublishService polarisConfigFilePublishService(final PolarisProperties polarisProperties) {
             com.tencent.polaris.api.config.Configuration configuration = ConfigAPIFactory.defaultConfig();
-            configuration.getConfigFile().getServerConnector().setAddresses(Arrays.asList(polarisProperties.getUrl()));
+            configuration.getConfigFile().getServerConnector().setAddresses(Collections.singletonList(polarisProperties.getUrl()));
             return ConfigFileServicePublishFactory.createConfigFilePublishService(configuration);
         }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/TagRelationServiceImpl.java
Patch:
@@ -34,7 +34,7 @@
 @Service
 public class TagRelationServiceImpl implements TagRelationService {
 
-    private TagRelationMapper tagRelationMapper;
+    private final TagRelationMapper tagRelationMapper;
 
     public TagRelationServiceImpl(final TagRelationMapper tagRelationMapper) {
         this.tagRelationMapper = tagRelationMapper;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/TagServiceImpl.java
Patch:
@@ -45,7 +45,7 @@
 @Service
 public class TagServiceImpl implements TagService {
 
-    private TagMapper tagMapper;
+    private final TagMapper tagMapper;
 
     public TagServiceImpl(final TagMapper tagMapper) {
         this.tagMapper = tagMapper;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/SwaggerDocParser.java
Patch:
@@ -317,7 +317,7 @@ protected RefInfo getResponseRefInfo(final JsonObject docInfo) {
 
     private RefInfo getRefInfo(final JsonObject jsonObject) {
         JsonElement refElement;
-        boolean isArray = Objects.isNull(jsonObject.get("type")) ? false : "array".equals(jsonObject.get("type").getAsString());
+        boolean isArray = Objects.nonNull(jsonObject.get("type")) && "array".equals(jsonObject.get("type").getAsString());
         if (isArray) {
             refElement = jsonObject.getAsJsonObject("items").get("$ref");
         } else {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/AbstractReflectGetterSetterTest.java
Patch:
@@ -27,7 +27,6 @@
 import java.lang.reflect.Method;
 import java.math.BigDecimal;
 import java.sql.Timestamp;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
@@ -88,7 +87,7 @@ public abstract class AbstractReflectGetterSetterTest {
     protected abstract Class<?> getTargetClass();
 
     protected Set<String> getExcludeFields() {
-        return new HashSet<>(Arrays.asList("serialVersionUID"));
+        return new HashSet<>(Collections.singletonList("serialVersionUID"));
     }
 
     /**
@@ -97,6 +96,7 @@ protected Set<String> getExcludeFields() {
      * @throws Exception maybe throw reflect Exception.
      */
     @Test
+    @SuppressWarnings("all")
     public void testGetAndSet() throws Exception {
         Class<?> clazz = getTargetClass();
         Object target = clazz.getDeclaredConstructor().newInstance();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ApiControllerTest.java
Patch:
@@ -109,8 +109,8 @@ public void testQueryApis() throws Exception {
                         .param("apiPath", "string")
                         .param("state", "0")
                         .param("tagId", "")
-                        .param("currentPage", pageParameter.getCurrentPage() + "")
-                        .param("pageSize", pageParameter.getPageSize() + ""))
+                        .param("currentPage", String.valueOf(pageParameter.getCurrentPage()))
+                        .param("pageSize", String.valueOf(pageParameter.getPageSize())))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.QUERY_SUCCESS)))
                 .andExpect(jsonPath("$.data.dataList[0].contextPath", is(apiVO.getContextPath())))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/AppAuthControllerTest.java
Patch:
@@ -189,8 +189,8 @@ public void testFindPageByQuery() throws Exception {
         this.mockMvc.perform(MockMvcRequestBuilders.get("/appAuth/findPageByQuery")
                 .param("appKey", "testAppKey")
                 .param("phone", "18600000000")
-                .param("currentPage", pageParameter.getCurrentPage() + "")
-                .param("pageSize", pageParameter.getPageSize() + ""))
+                .param("currentPage", String.valueOf(pageParameter.getCurrentPage()))
+                .param("pageSize", String.valueOf(pageParameter.getPageSize())))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.QUERY_SUCCESS)))
                 .andExpect(jsonPath("$.data.dataList[0].appKey", is(appAuthVO.getAppKey())))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MetaDataControllerTest.java
Patch:
@@ -101,8 +101,8 @@ public void testQueryList() throws Exception {
         given(this.metaDataService.listByPage(metaDataQuery)).willReturn(commonPager);
         this.mockMvc.perform(MockMvcRequestBuilders.get("/meta-data/queryList")
                 .param("path", "path")
-                .param("currentPage", pageParameter.getCurrentPage() + "")
-                .param("pageSize", pageParameter.getPageSize() + ""))
+                .param("currentPage", String.valueOf(pageParameter.getCurrentPage()))
+                .param("pageSize", String.valueOf(pageParameter.getPageSize())))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.QUERY_SUCCESS)))
                 .andExpect(jsonPath("$.data.dataList[0].appName", is(metaDataVO.getAppName())))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SandboxControllerTest.java
Patch:
@@ -38,7 +38,6 @@
 import org.springframework.http.MediaType;
 import org.springframework.mock.web.MockHttpServletResponse;
 import org.springframework.test.web.servlet.MockMvc;
-import org.springframework.test.web.servlet.RequestBuilder;
 import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
@@ -73,7 +72,7 @@ public void testProxyGateway() throws Exception {
         AppAuthDO appAuthDO = buildAppAuthDO();
         ProxyGatewayDTO proxyGatewayDTO = buildProxyGatewayDTO();
         when(this.appAuthService.findByAppKey(any())).thenReturn(appAuthDO);
-        MockHttpServletResponse response = mockMvc.perform((RequestBuilder) MockMvcRequestBuilders.post("/sandbox/proxyGateway")
+        MockHttpServletResponse response = mockMvc.perform(MockMvcRequestBuilders.post("/sandbox/proxyGateway")
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(GsonUtils.getInstance().toJson(proxyGatewayDTO)))
                 .andReturn().getResponse();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/disruptor/subscriber/MetadataExecutorSubscriberTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Map;
     
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -60,7 +61,7 @@ public void testGetType() {
     public void testExecutor() {
         List<MetaDataRegisterDTO> list = new ArrayList<>();
         metadataExecutorSubscriber.executor(list);
-        assertEquals(true, list.isEmpty());
+        assertTrue(list.isEmpty());
         list.add(MetaDataRegisterDTO.builder().appName("test").build());
         ShenyuClientRegisterService service = mock(ShenyuClientRegisterService.class);
         when(shenyuClientRegisterService.get(any())).thenReturn(service);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/disruptor/subscriber/URIRegisterExecutorSubscriberTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.Map;
     
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -64,7 +65,7 @@ public void testGetType() {
     public void testExecutor() {
         List<URIRegisterDTO> list = new ArrayList<>();
         uriRegisterExecutorSubscriber.executor(list);
-        assertEquals(true, list.isEmpty());
+        assertTrue(list.isEmpty());
         list.add(URIRegisterDTO.builder().rpcType(RpcTypeEnum.HTTP.getName())
                 .appName("test").contextPath("/test").build());
         ShenyuClientRegisterService service = mock(ShenyuClientRegisterService.class);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MockRequestRecordMapperTest.java
Patch:
@@ -62,7 +62,7 @@ public void insertSelective() {
         assertEquals(queryResult.getPathVariable(), "");
         assertEquals(queryResult.getQuery(), "");
         assertEquals(queryResult.getHeader(), "");
-        assertEquals(queryResult.getBody(), null);
+        assertNull(queryResult.getBody());
     }
 
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DiscoveryUpstreamServiceTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.mockito.junit.jupiter.MockitoSettings;
 import org.mockito.quality.Strictness;
 
-import java.util.Arrays;
+import java.util.Collections;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.anyString;
@@ -116,7 +116,7 @@ void createOrUpdate() {
     @Test
     void delete() {
 
-        given(discoveryUpstreamMapper.deleteByIds(Arrays.asList("1"))).willReturn(1);
-        assertEquals(ShenyuResultMessage.DELETE_SUCCESS, discoveryUpstreamService.delete(Arrays.asList("1")));
+        given(discoveryUpstreamMapper.deleteByIds(Collections.singletonList("1"))).willReturn(1);
+        assertEquals(ShenyuResultMessage.DELETE_SUCCESS, discoveryUpstreamService.delete(Collections.singletonList("1")));
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/shiro/config/ShiroConfigurationTest.java
Patch:
@@ -39,6 +39,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -87,9 +88,9 @@ public void testAuthorizationAttributeSourceAdvisor() {
     
     @Test
     public void testGetDefaultAdvisorAutoProxyCreator() {
-        DefaultAdvisorAutoProxyCreator creator = shiroConfiguration.getDefaultAdvisorAutoProxyCreator();
+        DefaultAdvisorAutoProxyCreator creator = ShiroConfiguration.getDefaultAdvisorAutoProxyCreator();
         assertNotNull(creator);
-        assertEquals(true, creator.isProxyTargetClass());
+        assertTrue(creator.isProxyTargetClass());
     }
     
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/shiro/config/ShiroRealmTest.java
Patch:
@@ -42,6 +42,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -67,7 +68,7 @@ public final class ShiroRealmTest {
     @Test
     public void testSupports() {
         BearerToken token = mock(BearerToken.class);
-        assertEquals(true, shiroRealm.supports(token));
+        assertTrue(shiroRealm.supports(token));
     }
 
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/HttpUtilsTest.java
Patch:
@@ -37,7 +37,7 @@ public class HttpUtilsTest {
 
     private static final String ACTUAL_PARAM_URL = "http://127.0.0.1/?param-1=123&param-2=456";
 
-    private Map<String, Object> formMap = new HashMap<>();
+    private final Map<String, Object> formMap = new HashMap<>();
 
     {
         formMap.put("param-1", "123");

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuDeleteMappingTest.java
Patch:
@@ -71,7 +71,7 @@ static class SpringCloudClientTestBean {
 
         @ShenyuDeleteMapping(value = "/{id}", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String delete(@PathVariable final String id) {
-            return "" + id;
+            return id;
         }
     }
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuGetMappingTest.java
Patch:
@@ -71,7 +71,7 @@ static class SpringCloudClientTestBean {
 
         @ShenyuGetMapping(value = "/{id}", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String get(@PathVariable final String id) {
-            return "" + id;
+            return id;
         }
     }
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuPatchMappingTest.java
Patch:
@@ -71,7 +71,7 @@ static class SpringCloudClientTestBean {
 
         @ShenyuPatchMapping(value = "/patch", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String patch(@RequestBody final String operator) {
-            return "" + operator;
+            return operator;
         }
     }
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuPostMappingTest.java
Patch:
@@ -71,7 +71,7 @@ static class SpringCloudClientTestBean {
 
         @ShenyuPostMapping(value = "/save", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String save(@RequestBody final String body) {
-            return "" + body;
+            return body;
         }
     }
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/annotation/ShenyuPutMappingTest.java
Patch:
@@ -71,7 +71,7 @@ static class SpringCloudClientTestBean {
 
         @ShenyuPutMapping(value = "/put", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String put(@RequestBody final String body) {
-            return "" + body;
+            return body;
         }
     }
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListenerTest.java
Patch:
@@ -119,7 +119,7 @@ public void testWithShenyuClientAnnotation() {
     private SpringCloudClientEventListener buildSpringCloudClientEventListener(final boolean full) {
         Properties properties = new Properties();
         properties.setProperty("contextPath", "/test");
-        properties.setProperty("isFull", full + "");
+        properties.setProperty("isFull", String.valueOf(full));
         properties.setProperty("ip", "127.0.0.1");
         properties.setProperty("port", "8081");
         properties.setProperty("username", "admin");
@@ -143,13 +143,13 @@ static class SpringCloudClientTestBean {
         @PostMapping("/save")
         @ShenyuSpringCloudClient(path = "/order/save")
         public String save(@RequestBody final String body) {
-            return "" + body;
+            return body;
         }
 
         @PostMapping("/update")
         @ShenyuSpringCloudClient(path = "")
         public String update(@RequestBody final String body) {
-            return "" + body;
+            return body;
         }
     }
 

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuDeleteMappingTest.java
Patch:
@@ -72,7 +72,7 @@ static class SpringMvcClientTestBean {
 
         @ShenyuDeleteMapping(value = "/{id}", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String delete(@PathVariable final String id) {
-            return "" + id;
+            return id;
         }
     }
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuGetMappingTest.java
Patch:
@@ -72,7 +72,7 @@ static class SpringMvcClientTestBean {
 
         @ShenyuGetMapping(value = "/{id}", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String get(@PathVariable final String id) {
-            return "" + id;
+            return id;
         }
     }
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuPatchMappingTest.java
Patch:
@@ -72,7 +72,7 @@ static class SpringMvcClientTestBean {
         
         @ShenyuPatchMapping(value = "/patch", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String patch(@RequestBody final String operator) {
-            return "" + operator;
+            return operator;
         }
 
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuPostMappingTest.java
Patch:
@@ -72,7 +72,7 @@ static class SpringMvcClientTestBean {
 
         @ShenyuPostMapping(value = "/save", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String save(@RequestBody final String body) {
-            return "" + body;
+            return body;
         }
         
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/annotation/ShenyuPutMappingTest.java
Patch:
@@ -72,7 +72,7 @@ static class SpringMvcClientTestBean {
         
         @ShenyuPutMapping(value = "/put", ruleName = "divide", enabled = false, desc = "it`s test.")
         public String put(@RequestBody final String body) {
-            return "" + body;
+            return body;
         }
         
     }

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/ShenyuServerEndpointerExporter.java
Patch:
@@ -84,7 +84,7 @@ public void registerEndpoint(final Class<?> pojo) {
         ServerEndpointConfig.Configurator configurator = null;
         if (!configuratorClazz.equals(ServerEndpointConfig.Configurator.class)) {
             try {
-                configurator = (ServerEndpointConfig.Configurator) annotation.configurator().getConstructor().newInstance();
+                configurator = annotation.configurator().getConstructor().newInstance();
             } catch (ReflectiveOperationException ex) {
                 LOG.error("ShenyuServerEndpoint configurator init fail! Class name: {}, configurator name: {}", pojo.getName(), annotation.configurator().getName());
                 throw new ShenyuException(ex);

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginHandlerEventEnum.java
Patch:
@@ -40,5 +40,5 @@ public enum PluginHandlerEventEnum {
     /**
      * plugin sorted.
      */
-    SORTED;
+    SORTED
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/TrieEventEnum.java
Patch:
@@ -35,5 +35,5 @@ public enum TrieEventEnum {
     /**
      * Shenyu Trie remove event.
      */
-    REMOVE;
+    REMOVE
 }

File: shenyu-common/src/test/java/org/apache/shenyu/common/cache/MemorySafeWindowTinyLFUMapTest.java
Patch:
@@ -73,7 +73,7 @@ public synchronized void cleanUp() {
 
     @Test
     public void testWindowTinyLFUOutOufMemoryException() {
-        final int mb = 1 * 1024 * 1024;
+        final int mb = 1024 * 1024;
         for (int i = 0; i < 1000; i++) {
             MemorySafeWindowTinyLFUMap<String, Byte[]> instance = new MemorySafeWindowTinyLFUMap<>(1, 1024);
             instance.put(String.valueOf(1), new Byte[mb]);

File: shenyu-common/src/test/java/org/apache/shenyu/common/cache/WindowTinyLFUMapTest.java
Patch:
@@ -28,6 +28,7 @@
 public class WindowTinyLFUMapTest {
     
     @Test
+    @SuppressWarnings("all")
     public void weakKeyCache() {
         Map<String, String> map = new WindowTinyLFUMap<>(100, 100, Boolean.TRUE);
         String key1 = new String("abc");
@@ -40,6 +41,7 @@ public void weakKeyCache() {
     }
     
     @Test
+    @SuppressWarnings("all")
     public void strongKeyCache() {
         Map<String, String> map = new WindowTinyLFUMap<>(100, 100, Boolean.FALSE);
         String key1 = new String("abc");

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/selector/SpringCloudSelectorHandleTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
+import java.util.Collections;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.hasSize;
@@ -34,7 +35,7 @@ public class SpringCloudSelectorHandleTest {
     @Test
     public void testBuilderAndGetterSetter() {
         SpringCloudSelectorHandle selectorHandle = SpringCloudSelectorHandle.builder().serviceId("serviceId")
-                .gray(true).divideUpstreams(Arrays.asList(new DivideUpstream())).build();
+                .gray(true).divideUpstreams(Collections.singletonList(new DivideUpstream())).build();
         
         selectorHandle.setServiceId("serviceId1");
         selectorHandle.setGray(false);

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/ThreadUtilsTest.java
Patch:
@@ -51,6 +51,6 @@ public void testSleepInterrupt() throws InterruptedException {
         doThrow(InterruptedException.class).when(timeUnit).sleep(1);
         ThreadUtils.sleep(timeUnit, 1);
         verify(timeUnit, times(1)).sleep(eq(1L));
-        assertTrue(Thread.currentThread().interrupted());
+        assertTrue(Thread.interrupted());
     }
 }

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/entity/Upstream.java
Patch:
@@ -102,9 +102,9 @@ public final class Upstream {
      */
     private AtomicLong inflight = new AtomicLong(1);
 
-    private AtomicLong succeeded = new AtomicLong(0);
+    private final AtomicLong succeeded = new AtomicLong(0);
 
-    private AtomicLong succeededElapsed = new AtomicLong(0);
+    private final AtomicLong succeededElapsed = new AtomicLong(0);
 
     private Upstream(final Builder builder) {
         this.protocol = builder.protocol;

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/spi/P2cLoadBalancer.java
Patch:
@@ -44,7 +44,7 @@ public class P2cLoadBalancer extends AbstractLoadBalancer {
      */
     private static final int PICK_TIMES = 3;
 
-    private Random random = new Random();
+    private final Random random = new Random();
 
     /**
      * pick of 2 choices to select upstream.

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/spi/ShortestResponseLoadBalancerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testSelectByWeight() {
                 select2++;
             }
         }
-        Assertions.assertEquals(true, select1 < select2);
+        Assertions.assertTrue(select1 < select2);
         Assertions.assertEquals(loop, select1 + select2);
     }
 
@@ -79,7 +79,7 @@ public void testSelectByResponse() {
                 select2++;
             }
         }
-        Assertions.assertEquals(true, select1 < select2);
+        Assertions.assertTrue(select1 < select2);
         Assertions.assertEquals(loop, select1 + select2);
 
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/test/java/org/apache/shenyu/plugin/logging/clickhouse/config/ClickHouseLogCollectConfigTest.java
Patch:
@@ -27,9 +27,9 @@
  */
 public class ClickHouseLogCollectConfigTest {
 
-    private ClickHouseLogCollectConfig clickHouseLogCollectConfig = new ClickHouseLogCollectConfig();
+    private final ClickHouseLogCollectConfig clickHouseLogCollectConfig = new ClickHouseLogCollectConfig();
 
-    private ClickHouseLogCollectConfig.ClickHouseLogConfig clickHouseLogConfig = new ClickHouseLogCollectConfig.ClickHouseLogConfig();
+    private final ClickHouseLogCollectConfig.ClickHouseLogConfig clickHouseLogConfig = new ClickHouseLogCollectConfig.ClickHouseLogConfig();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-divide/src/test/java/org/apache/shenyu/plugin/divide/DividePluginTest.java
Patch:
@@ -61,6 +61,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
@@ -184,15 +185,15 @@ public void skip() {
      */
     @Test
     public void handleSelectorIfNullTest() {
-        assertTrue(dividePlugin.handleSelectorIfNull(PluginEnum.DIVIDE.getName(), exchange, chain) != null);
+        assertNotNull(dividePlugin.handleSelectorIfNull(PluginEnum.DIVIDE.getName(), exchange, chain));
     }
 
     /**
      * handleRuleIfNull.
      */
     @Test
     public void handleRuleIfNullTest() {
-        assertTrue(dividePlugin.handleRuleIfNull(PluginEnum.DIVIDE.getName(), exchange, chain) != null);
+        assertNotNull(dividePlugin.handleRuleIfNull(PluginEnum.DIVIDE.getName(), exchange, chain));
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-mqtt/src/main/java/org/apache/shenyu/plugin/mqtt/handler/MqttPluginDataHandler.java
Patch:
@@ -62,9 +62,7 @@ public String pluginNamed() {
      */
     private boolean isPortUsing(final int port) {
         boolean flag = false;
-        try {
-            InetAddress address = InetAddress.getByName("127.0.0.1");
-            new Socket(address, port);
+        try (Socket socket = new Socket(InetAddress.getByName("127.0.0.1"), port)) {
             flag = true;
         } catch (Exception ignored) {
 

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/spi/SharedThreadPoolFactory.java
Patch:
@@ -57,7 +57,7 @@ public ThreadPoolExecutor getThreadPool(final RpcService rpcService) {
         if (Objects.isNull(rpcService)) {
             return this.defaultThreadPool;
         } else if (Objects.nonNull(this.threadPoolMap.get(rpcService))) {
-            return (ThreadPoolExecutor) this.threadPoolMap.get(rpcService);
+            return this.threadPoolMap.get(rpcService);
         } else {
             ServiceConfig serviceConfig = rpcService.getServiceConfig();
             if (serviceConfig == null) {
@@ -72,7 +72,7 @@ public ThreadPoolExecutor getThreadPool(final RpcService rpcService) {
                     ThreadPoolExecutor threadPool;
                     synchronized (this) {
                         if (this.threadPoolMap.get(rpcService) != null) {
-                            return (ThreadPoolExecutor) this.threadPoolMap.get(rpcService);
+                            return this.threadPoolMap.get(rpcService);
                         }
 
                         threadPool = new ThreadPoolExecutor(corePoolSize, maxThreadPoolSize, (long) keepAliveTime,

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCacheTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.plugin.apache.dubbo.cache;
 
-import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -165,7 +165,6 @@ private void initThreadPool(final SofaRegisterConfig config) {
                         queueSize > 0 ? new LinkedBlockingQueue<>(queueSize) : new SynchronousQueue<>(), factory);
                 return;
             default:
-                return;
         }
     }
     

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/cache/ApplicationConfigCache.java
Patch:
@@ -152,7 +152,6 @@ private void initThreadPool(final TarsRegisterConfig config) {
                         queueSize > 0 ? new LinkedBlockingQueue<>(queueSize) : new SynchronousQueue<>(), factory);
                 return;
             default:
-                return;
         }
     }
 

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecoratorTest.java
Patch:
@@ -39,8 +39,8 @@ public void testDecorator() {
         MetaData metaData = null;
         ShenyuContext shenyuContext = new ShenyuContext();
         springCloudShenyuContextDecorator.decorator(shenyuContext, metaData);
-        Assertions.assertEquals(shenyuContext.getMethod(), null);
-        Assertions.assertEquals(shenyuContext.getRealUrl(), null);
+        Assertions.assertNull(shenyuContext.getMethod());
+        Assertions.assertNull(shenyuContext.getRealUrl());
         Assertions.assertEquals(shenyuContext.getRpcType(), "springCloud");
         Assertions.assertEquals(shenyuContext.getModule(), "divide-springCloud");
     }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/handler/SpringCloudPluginDataHandlerTest.java
Patch:
@@ -54,7 +54,7 @@ public final class SpringCloudPluginDataHandlerTest {
 
     private SelectorData selectorData = new SelectorData();
 
-    private RuleData ruleData = new RuleData();
+    private final RuleData ruleData = new RuleData();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-websocket/src/test/java/org/apache/shenyu/plugin/websocket/WebSocketPluginTest.java
Patch:
@@ -161,7 +161,7 @@ public void getSubProtocolsTest() throws NoSuchMethodException, InvocationTarget
         declaredConstructor.setAccessible(true);
         Object obj = declaredConstructor.newInstance(null, null, null, null);
         List<String> list = (List<String>) method.invoke(obj);
-        assertEquals(list.isEmpty(), true);
+        assertTrue(list.isEmpty());
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-websocket/src/test/java/org/apache/shenyu/plugin/websocket/context/WebSocketShenyuContextDecoratorTest.java
Patch:
@@ -40,7 +40,7 @@ public void testDecorator() {
         MetaData metaData = null;
         ShenyuContext shenyuContext = new ShenyuContext();
         webSocketShenyuContextDecorator.decorator(shenyuContext, metaData);
-        Assertions.assertEquals(shenyuContext.getMethod(), null);
+        Assertions.assertNull(shenyuContext.getMethod());
         Assertions.assertEquals(shenyuContext.getRpcType(), "websocket");
         Assertions.assertEquals(shenyuContext.getModule(), "websocket-websocket");
     }

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-polaris/src/test/java/org/apache/shenyu/register/client/server/polaris/PolarisClientServerRegisterRepositoryTest.java
Patch:
@@ -174,7 +174,7 @@ public void initTest() {
                 MockedStatic<ConfigAPIFactory> configAPIFactoryMockedStatic = mockStatic(ConfigAPIFactory.class);
                 MockedStatic<SDKContext> sdkContextMockedStatic = mockStatic(SDKContext.class);
                 MockedStatic<DiscoveryAPIFactory> discoveryAPIFactoryMockedStatic = mockStatic(DiscoveryAPIFactory.class);
-                MockedStatic<ConfigFileServiceFactory> configFileServiceFactoryMockedStatic = mockStatic(ConfigFileServiceFactory.class);
+                MockedStatic<ConfigFileServiceFactory> configFileServiceFactoryMockedStatic = mockStatic(ConfigFileServiceFactory.class)
         ) {
             Configuration configService = mock(Configuration.class);
             SDKContext sdkContext = mock(SDKContext.class);

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-zookeeper/src/main/java/org/apache/shenyu/register/client/server/zookeeper/ZookeeperClient.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.register.client.server.zookeeper;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
@@ -223,7 +224,7 @@ public TreeCache getCache(final String path) {
     public TreeCache addCache(final String path, final TreeCacheListener... listeners) {
         TreeCache cache = TreeCache.newBuilder(client, path).build();
         caches.put(path, cache);
-        if (listeners != null && listeners.length > 0) {
+        if (ArrayUtils.isNotEmpty(listeners)) {
             for (TreeCacheListener listener : listeners) {
                 cache.getListenable().addListener(listener);
             }

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-zookeeper/src/main/java/org/apache/shenyu/register/client/server/zookeeper/ZookeeperClientServerRegisterRepository.java
Patch:
@@ -38,7 +38,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.Properties;
@@ -172,11 +172,11 @@ public void event(final TreeCacheEvent.Type type, final String path, final Child
             switch (type) {
                 case NODE_ADDED:
                     uriRegisterDTO.setEventType(EventType.REGISTER);
-                    publishRegisterURI(Arrays.asList(uriRegisterDTO));
+                    publishRegisterURI(Collections.singletonList(uriRegisterDTO));
                     break;
                 case NODE_REMOVED:
                     uriRegisterDTO.setEventType(EventType.OFFLINE);
-                    publishRegisterURI(Arrays.asList(uriRegisterDTO));
+                    publishRegisterURI(Collections.singletonList(uriRegisterDTO));
                     break;
                 default:
                     break;

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/test/java/org/apache/shenyu/register/client/http/utils/OkHttpToolsTest.java
Patch:
@@ -40,7 +40,7 @@
  */
 public final class OkHttpToolsTest {
 
-    private String url = "http://localhost:9095";
+    private final String url = "http://localhost:9095";
 
     private String getUrl;
 

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-polaris/src/test/java/org/apache/shenyu/register/client/polaris/PolarisClientRegisterRepositoryTest.java
Patch:
@@ -141,7 +141,7 @@ public void testPersistInterface() throws PolarisException {
         assertTrue(configFileService.getConfigFile(configFileMetadata).hasContent());
 
         String dataStr = GsonUtils.getInstance().toJson(Lists.newArrayList(metadata));
-        assertTrue(configFileService.getConfigFile(configFileMetadata).getContent().equals(dataStr));
+        assertEquals(configFileService.getConfigFile(configFileMetadata).getContent(), dataStr);
     }
 
     @Test

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-zookeeper/src/main/java/org/apache/shenyu/register/client/zookeeper/ZookeeperClient.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.register.client.zookeeper;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
@@ -223,7 +224,7 @@ public TreeCache getCache(final String path) {
     public TreeCache addCache(final String path, final TreeCacheListener... listeners) {
         TreeCache cache = TreeCache.newBuilder(client, path).build();
         caches.put(path, cache);
-        if (listeners != null && listeners.length > 0) {
+        if (ArrayUtils.isNotEmpty(listeners)) {
             for (TreeCacheListener listener : listeners) {
                 cache.getListenable().addListener(listener);
             }

File: shenyu-registry/shenyu-registry-zookeeper/src/main/java/org/apache/shenyu/registry/zookeeper/ZookeeperClient.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.registry.zookeeper;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
@@ -224,7 +225,7 @@ public TreeCache getCache(final String path) {
     public TreeCache addCache(final String path, final TreeCacheListener... listeners) {
         TreeCache cache = TreeCache.newBuilder(client, path).build();
         caches.put(path, cache);
-        if (listeners != null && listeners.length > 0) {
+        if (ArrayUtils.isNotEmpty(listeners)) {
             for (TreeCacheListener listener : listeners) {
                 cache.getListenable().addListener(listener);
             }

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/proxy/ShenyuClientMethodHandler.java
Patch:
@@ -46,7 +46,7 @@ public class ShenyuClientMethodHandler {
 
     private final ShenyuSdkClient shenyuHttpClient;
 
-    private RequestTemplate requestTemplate;
+    private final RequestTemplate requestTemplate;
 
     private final Map<Class<? extends Annotation>, AnnotatedParameterProcessor> annotatedArgumentProcessors;
 

File: shenyu-sync-data-center/shenyu-sync-data-polaris/src/test/java/org/apache/shenyu/sync/data/polaris/handler/PolarisMockConfigFile.java
Patch:
@@ -24,7 +24,7 @@
 
 public class PolarisMockConfigFile implements ConfigFile {
 
-    private String content;
+    private final String content;
 
     public PolarisMockConfigFile(final String content) {
         this.content = content;

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/main/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClient.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.sync.data.zookeeper;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
@@ -226,7 +227,7 @@ public TreeCache getCache(final String path) {
     public TreeCache addCache(final String path, final TreeCacheListener... listeners) {
         TreeCache cache = TreeCache.newBuilder(client, path).build();
         caches.put(path, cache);
-        if (listeners != null && listeners.length > 0) {
+        if (ArrayUtils.isNotEmpty(listeners)) {
             for (TreeCacheListener listener : listeners) {
                 cache.getListenable().addListener(listener);
             }

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -62,7 +62,7 @@ public final class ShenyuWebHandler implements WebHandler, ApplicationListener<P
      */
     private final List<ShenyuPlugin> sourcePlugins;
 
-    private ShenyuLoaderService shenyuLoaderService;
+    private final ShenyuLoaderService shenyuLoaderService;
 
     private final boolean scheduled;
 

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanClassDemoServiceImpl.java
Patch:
@@ -36,12 +36,12 @@ public String hello(final String name) {
     }
 
     @Override
-    public String testTimeOut(final long timeout) {
+    public String testTimeOut(final long seconds) {
         try {
-            Thread.sleep(timeout * 1000);
+            Thread.sleep(seconds * 1000);
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }
-        return "hello timeout " + timeout + "s";
+        return "hello seconds " + seconds + "s";
     }
 }

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanDemoServiceImpl.java
Patch:
@@ -31,7 +31,7 @@
  * <P>Default motan service name is "motan2", If you want to inject other services,
  * please refer to {@link ShenyuMotanClientConfiguration}
  */
-@ShenyuMotanService(value = "/demo/**", export = "motan2:8002")
+@ShenyuMotanService(value = "/demo", export = "motan2:8002")
 @ApiModule("MotanDemoService")
 public class MotanDemoServiceImpl implements MotanDemoService {
 
@@ -52,6 +52,6 @@ public String testTimeOut(final long seconds) {
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }
-        return "hello timeout " + seconds + "s";
+        return "hello seconds " + seconds + "s";
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-combination/src/test/java/org/apache/shenyu/integrated/test/combination/SharedThreadPoolTest.java
Patch:
@@ -57,7 +57,7 @@ public static void setup() throws IOException {
         pluginResult = initPlugin(PluginEnum.GRPC.getName(), "{\"register\":\"zookeeper://shenyu-zk:2181\",\"threadpool\": \"shared\"}");
         assertThat(pluginResult, is("success"));
         // for motan
-        pluginResult = initPlugin(PluginEnum.MOTAN.getName(), "{\"register\":\"shenyu-zk:2181\",\"threadpool\": \"shared\"}");
+        pluginResult = initPlugin(PluginEnum.MOTAN.getName(), "{\"registerProtocol\": \"zk\", \"registerAddress\":\"shenyu-zk:2181\",\"threadpool\": \"shared\"}");
         assertThat(pluginResult, is("success"));
         // for sofa
         pluginResult = initPlugin(PluginEnum.SOFA.getName(), "{\"protocol\":\"zookeeper\",\"register\":\"shenyu-zk:2181\",\"threadpool\": \"shared\"}");

File: shenyu-integrated-test/shenyu-integrated-test-motan/src/test/java/org/apache/shenyu/integrated/test/motan/MotanPluginShareThreadPoolTest.java
Patch:
@@ -36,7 +36,7 @@ public class MotanPluginShareThreadPoolTest extends AbstractPluginDataInit {
 
     @BeforeAll
     public static void setup() throws IOException {
-        String pluginResult = initPlugin(PluginEnum.MOTAN.getName(), "{\"register\":\"shenyu-zk:2181\",\"threadpool\": \"shared\"}");
+        String pluginResult = initPlugin(PluginEnum.MOTAN.getName(), "{\"registerProtocol\":\"zk\",\"registerAddress\":\"shenyu-zk:2181\",\"threadpool\": \"shared\"}");
         assertThat(pluginResult, is("success"));
     }
 

File: shenyu-integrated-test/shenyu-integrated-test-motan/src/test/java/org/apache/shenyu/integrated/test/motan/MotanPluginTest.java
Patch:
@@ -36,7 +36,7 @@ public class MotanPluginTest extends AbstractPluginDataInit {
 
     @BeforeAll
     public static void setup() throws IOException {
-        String pluginResult = initPlugin(PluginEnum.MOTAN.getName(), "{\"register\":\"shenyu-zk:2181\"}");
+        String pluginResult = initPlugin(PluginEnum.MOTAN.getName(), "{\"registerAddress\":shenyu-zk:2181\"\",\"registerProtocol\":\"zk\"}");
         assertThat(pluginResult, is("success"));
     }
 

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-motan/src/test/java/org/apache/shenyu/plugin/motan/handler/MotanPluginDataHandlerTest.java
Patch:
@@ -42,9 +42,9 @@ public void setUp() {
     @Test
     public void testHandlerPlugin() {
         pluginData.setEnabled(true);
-        pluginData.setConfig("{\"register\" : \"127.0.0.1:2181\"}");
+        pluginData.setConfig("{\"registerAddress\" : \"127.0.0.1:2181\"}");
         motanPluginDataHandler.handlerPlugin(pluginData);
-        Assertions.assertEquals(Singleton.INST.get(MotanRegisterConfig.class).getRegister(), "127.0.0.1:2181");
+        Assertions.assertEquals(Singleton.INST.get(MotanRegisterConfig.class).getRegisterAddress(), "127.0.0.1:2181");
     }
 
     @Test

File: shenyu-client/shenyu-client-autoconfig/src/main/java/org/apache/shenyu/client/auto/config/ClientRegisterConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.client.core.register.extractor.MultiClientApiBeansExtractorImpl;
 import org.apache.shenyu.client.core.register.extractor.RpcApiBeansExtractor;
 import org.apache.shenyu.client.core.register.matcher.ApiDocProcessorImpl;
-import org.apache.shenyu.client.core.register.matcher.ApiProcessor;
+import org.apache.shenyu.client.core.register.matcher.ApiRegisterProcessor;
 import org.apache.shenyu.client.core.register.registrar.ApiRegistrar;
 import org.apache.shenyu.client.core.register.registrar.MateDataApiRegistrarImplImpl;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
@@ -57,9 +57,9 @@ public ClientApiRefreshedEventListener apiListener(final List<RpcApiBeansExtract
      * @return register
      */
     @Bean
-    public MateDataApiRegistrarImplImpl mateDataApiRegistrarImpl(final ClientRegisterConfig clientRegisterConfig, final List<ApiProcessor> processor) {
+    public MateDataApiRegistrarImplImpl mateDataApiRegistrarImpl(final ClientRegisterConfig clientRegisterConfig, final List<ApiRegisterProcessor> processor) {
         final MateDataApiRegistrarImplImpl apiRegistrarImpl = new MateDataApiRegistrarImplImpl(clientRegisterConfig);
-        for (ApiProcessor apiProcessor : processor) {
+        for (ApiRegisterProcessor apiProcessor : processor) {
             apiRegistrarImpl.addApiProcessor(apiProcessor);
         }
         return apiRegistrarImpl;

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/ApiAnnotationProcessor.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * ApiAnnotationProcessor.
  */
-public interface ApiAnnotationProcessor<T extends Annotation> extends ExtractorProcessor {
+public interface ApiAnnotationProcessor<T extends Annotation> extends ApiBeanProcessor {
     
     /**
      * process.

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/ApiRegisterProcessor.java
Patch:
@@ -27,7 +27,7 @@
  * ApiProcessor.<br>
  * API bean processor.
  */
-public interface ApiProcessor extends Matcher<ApiBean> {
+public interface ApiRegisterProcessor extends Matcher<ApiBean> {
     
     /**
      * process.

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/BaseAnnotationApiProcessor.java
Patch:
@@ -26,7 +26,7 @@
  * BaseAnnotationApiProcessor.<br>
  * API processor that supports annotations.
  */
-public abstract class BaseAnnotationApiProcessor<T extends Annotation> implements ApiAnnotationProcessor<T>, ApiProcessor {
+public abstract class BaseAnnotationApiProcessor<T extends Annotation> implements ApiAnnotationProcessor<T>, ApiRegisterProcessor {
     
     @Override
     public void process(final ApiBean apiBean) {

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboApiBeansExtractor.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dubbo.config.annotation.Service;
 import org.apache.shenyu.client.apache.dubbo.processor.extractor.DubboServiceProcessor;
 import org.apache.shenyu.client.apache.dubbo.processor.extractor.ServiceProcessor;
-import org.apache.shenyu.client.apache.dubbo.processor.register.ShenyuDubboProcessor;
 import org.apache.shenyu.client.core.register.extractor.BaseAnnotationApiBeansExtractor;
 import org.apache.shenyu.client.core.register.extractor.RpcApiBeansExtractor;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
@@ -37,7 +36,6 @@ public ApacheDubboApiBeansExtractor() {
         
         addExtractorProcessor(new DubboServiceProcessor());
         addExtractorProcessor(new ServiceProcessor());
-        addExtractorProcessor(new ShenyuDubboProcessor());
     }
     
     @Override

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/processor/register/ShenyuDubboProcessor.java
Patch:
@@ -18,14 +18,14 @@
 package org.apache.shenyu.client.apache.dubbo.processor.register;
 
 import org.apache.shenyu.client.core.register.ApiBean;
-import org.apache.shenyu.client.core.register.matcher.ApiProcessor;
+import org.apache.shenyu.client.core.register.matcher.ApiRegisterProcessor;
 import org.apache.shenyu.client.core.register.matcher.BaseAnnotationApiProcessor;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
 
 /**
  * ShenyuDubboProcessor.
  */
-public class ShenyuDubboProcessor extends BaseAnnotationApiProcessor<ShenyuDubboClient> implements ApiProcessor {
+public class ShenyuDubboProcessor extends BaseAnnotationApiProcessor<ShenyuDubboClient> implements ApiRegisterProcessor {
     
     @Override
     public void process(final ApiBean apiBean, final ShenyuDubboClient annotation) {

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynHttpTest.java
Patch:
@@ -63,7 +63,7 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(20000);
+        Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynNacosTest.java
Patch:
@@ -64,7 +64,7 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(20000);
+        Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-apache-dubbo/src/test/java/org/apache/shenyu/e2e/testcase/apachedubbo/DataSynZookeeperTest.java
Patch:
@@ -63,7 +63,7 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(20000);
+        Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/DataSynHttpTest.java
Patch:
@@ -63,7 +63,7 @@ public class DataSynHttpTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(20000);
+        Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/DataSynNacosTest.java
Patch:
@@ -64,7 +64,7 @@ public class DataSynNacosTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(20000);
+        Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-sofa/src/test/java/org/apache/shenyu/e2e/testcase/sofa/DataSynZookeeperTest.java
Patch:
@@ -63,7 +63,7 @@ public class DataSynZookeeperTest {
     @Test
     void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
-        Thread.sleep(20000);
+        Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();
         List<SelectorCacheData> selectorCacheList = gatewayClient.getSelectorCache();
         List<RuleCacheData> ruleCacheList = gatewayClient.getRuleCache();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/AbstractSelectorHandleConverter.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 
 import java.util.List;
+import java.util.Objects;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
@@ -68,7 +69,7 @@ public String handler(final String handle, final List<CommonUpstream> aliveList)
      */
     @Override
     public <T extends CommonUpstream> List<T> updateStatusAndFilter(final List<T> existList, final List<? extends CommonUpstream> aliveList) {
-        if (CollectionUtils.isEmpty(aliveList) || CollectionUtils.isEmpty(existList)) {
+        if (Objects.isNull(aliveList)) {
             return Lists.newArrayList();
         }
         long currentTimeMillis = System.currentTimeMillis();

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/DubboUpstream.java
Patch:
@@ -246,8 +246,6 @@ public boolean equals(final Object o) {
         }
         DubboUpstream that = (DubboUpstream) o;
         return port == that.port
-                && weight == that.weight
-                && warmup == that.warmup
                 && Objects.equals(registry, that.registry)
                 && Objects.equals(appName, that.appName)
                 && Objects.equals(this.getProtocol(), that.getProtocol())
@@ -259,7 +257,7 @@ public boolean equals(final Object o) {
 
     @Override
     public int hashCode() {
-        return Objects.hash(registry, appName, port, gray, weight, warmup, group, version);
+        return Objects.hash(registry, appName, port, gray, group, version);
     }
 
     @Override

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/SelectorMapper.java
Patch:
@@ -88,9 +88,9 @@ public interface SelectorMapper extends ExistProvider {
      * select select by name.
      *
      * @param name the name
-     * @return selector do
+     * @return selector do list
      */
-    SelectorDO selectByName(String name);
+    List<SelectorDO> selectByName(String name);
     
     /**
      * Find by name and plugin id selector do.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/DocManagerImpl.java
Patch:
@@ -112,7 +112,7 @@ public void addDocInfo(final UpstreamInstance instance, final String docInfoJson
                 .tags(Collections.singletonList(docInfo.getContextPath()))
                 .apiPath(docItem.getName())
                 .apiSource(ApiSourceEnum.SWAGGER.getValue())
-                .state(ApiStateEnum.PUBLISHED.getState())
+                .state(ApiStateEnum.UNPUBLISHED.getState())
                 .apiOwner("admin")
                 .eventType(EventType.REGISTER)
                 .build();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -224,6 +224,9 @@ public ApplicationEventPublisher getEventPublisher() {
      */
     protected boolean doSubmit(final String selectorId, final List<? extends CommonUpstream> upstreamList) {
         List<CommonUpstream> commonUpstreamList = CommonUpstreamUtils.convertCommonUpstreamList(upstreamList);
+        if (CollectionUtils.isEmpty(upstreamList)) {
+            return true;
+        }
         return commonUpstreamList.stream().map(upstream -> upstreamCheckService.checkAndSubmit(selectorId, upstream))
                 .collect(Collectors.toList()).stream().findAny().orElse(false);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImplTest.java
Patch:
@@ -49,7 +49,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
@@ -167,7 +166,7 @@ public void testGetRuleService() {
 
     @Test
     public void testDoSubmit() {
-        assertFalse(abstractShenyuClientRegisterService.doSubmit("Selector_Id", new ArrayList<>()));
+        assertTrue(abstractShenyuClientRegisterService.doSubmit("Selector_Id", new ArrayList<>()));
 
         CommonUpstream commonUpstream = new CommonUpstream();
         when(upstreamCheckService.checkAndSubmit(any(), any())).thenReturn(true);

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/client/AbstractContextRefreshedEventListener.java
Patch:
@@ -203,7 +203,7 @@ private List<ApiDocRegisterDTO> buildApiDocDTO(final Object bean, final Method m
                         .tags(pairs.getRight())
                         .apiPath(apiPath)
                         .apiSource(ApiSourceEnum.ANNOTATION_GENERATION.getValue())
-                        .state(ApiStateEnum.PUBLISHED.getState())
+                        .state(ApiStateEnum.UNPUBLISHED.getState())
                         .apiOwner("admin")
                         .eventType(EventType.REGISTER)
                         .build();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SelectorService.java
Patch:
@@ -127,7 +127,7 @@ default int createOrUpdate(SelectorDTO selectorDTO) {
      * @return selector do
      */
     SelectorDO findByName(String name);
-    
+
     /**
      * Find by name and plugin id selector do.
      *

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/TagServiceImpl.java
Patch:
@@ -72,7 +72,7 @@ private int createInner(final TagDTO tagDTO, final TagDO.TagExt tagExt) {
             TagDO tagDO = tagMapper.selectByPrimaryKey(tagDTO.getParentTagId());
             ext = buildExtParamByParentTag(tagDO);
         } else {
-            ext = GsonUtils.getInstance().toJson(tagExt);
+            ext = GsonUtils.getInstance().toJson(Optional.ofNullable(tagExt).orElse(new TagDO.TagExt()));
         }
         TagDO tagDO = TagDO.buildTagDO(tagDTO);
         tagDO.setExt(ext);

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/Constants.java
Patch:
@@ -693,7 +693,7 @@ public interface Constants {
     String CACHED = "cached";
     
     /**
-     * user can use the specify-domian to replace of upstream url of the divide plugin.
+     * user can use the specify-domain to replace of upstream url of the divide plugin.
      */
     String SPECIFY_DOMAIN = "specify-domain";
     

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java
Patch:
@@ -86,6 +86,7 @@ public void delete() {
 
     @Test
     public void deleteEtcdPathRecursive() {
+        when(client.getKVClient().delete(any(ByteSequence.class), any(DeleteOption.class))).thenReturn(mock(CompletableFuture.class));
         etcdClient.deleteEtcdPathRecursive(TEST_KEY);
         verify(client.getKVClient(), times(1)).delete(any(ByteSequence.class), any(DeleteOption.class));
     }

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/EnableShenyuClients.java
Patch:
@@ -24,6 +24,7 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+import org.springframework.core.annotation.AliasFor;
 
 /**
  * Scans for interfaces that declare they are Shenyu clients (via
@@ -44,6 +45,7 @@
      * {@code @ComponentScan(basePackages="org.my.pkg")}.
      * @return the array of 'basePackages'.
      */
+    @AliasFor("basePackages")
     String[] value() default {};
 
     /**
@@ -55,6 +57,7 @@
      * package names.
      * @return the array of 'basePackages'.
      */
+    @AliasFor("value")
     String[] basePackages() default {};
 
     /**

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/server/GrpcServerRunner.java
Patch:
@@ -21,6 +21,7 @@
 import io.grpc.ServerBuilder;
 import io.grpc.ServerServiceDefinition;
 import org.apache.shenyu.client.grpc.GrpcClientEventListener;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.ApplicationListener;
@@ -47,7 +48,7 @@ public GrpcServerRunner(final GrpcServerBuilder grpcServerBuilder,
     }
     
     @Override
-    public void onApplicationEvent(final ContextRefreshedEvent event) {
+    public void onApplicationEvent(@NotNull final ContextRefreshedEvent event) {
         startGrpcServer();
     }
 

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/disruptor/subcriber/ShenyuClientURIExecutorSubscriber.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.client.core.disruptor.subcriber;
 
 import com.google.common.base.Stopwatch;
+import org.apache.shenyu.client.core.shutdown.ShutdownHookManager;
 import org.apache.shenyu.client.core.shutdown.ShenyuClientShutdownHook;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
@@ -83,13 +84,12 @@ public void executor(final Collection<URIRegisterDTO> dataList) {
             }
             ShenyuClientShutdownHook.delayOtherHooks();
             shenyuClientRegisterRepository.persistURI(uriRegisterDTO);
-            //active offline when shutdown, not now
-            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+            ShutdownHookManager.get().addShutdownHook(new Thread(() -> {
                 final URIRegisterDTO offlineDTO = new URIRegisterDTO();
                 BeanUtils.copyProperties(uriRegisterDTO, offlineDTO);
                 offlineDTO.setEventType(EventType.OFFLINE);
                 shenyuClientRegisterRepository.offline(offlineDTO);
-            }));
+            }), 2);
         }
     }
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/shutdown/ShenyuClientShutdownHook.java
Patch:
@@ -55,7 +55,7 @@ public ShenyuClientShutdownHook() {
 
     public ShenyuClientShutdownHook(final ShenyuClientRegisterRepository repository, final ShenyuRegisterCenterConfig config) {
         String name = String.join("-", hookNamePrefix, String.valueOf(hookId.incrementAndGet()));
-        Runtime.getRuntime().addShutdownHook(new Thread(repository::closeRepository, name));
+        ShutdownHookManager.get().addShutdownHook(new Thread(repository::closeRepository, name), 1);
         LOG.info("Add hook {}", name);
         ShenyuClientShutdownHook.props = config.getProps();
     }
@@ -68,7 +68,7 @@ public ShenyuClientShutdownHook(final ShenyuClientRegisterRepository repository,
      */
     public static void set(final ShenyuClientRegisterRepository repository, final Properties props) {
         String name = String.join("-", hookNamePrefix, String.valueOf(hookId.incrementAndGet()));
-        Runtime.getRuntime().addShutdownHook(new Thread(repository::closeRepository, name));
+        ShutdownHookManager.get().addShutdownHook(new Thread(repository::closeRepository, name), 1);
         LOG.info("Add hook {}", name);
         ShenyuClientShutdownHook.props = props;
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/RegisterApiDocServiceImpl.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.shenyu.admin.service.ApiService;
 import org.apache.shenyu.admin.service.TagService;
 import org.apache.shenyu.admin.service.manager.RegisterApiDocService;
-import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.apache.shenyu.register.common.dto.ApiDocRegisterDTO;
 import org.apache.shenyu.register.common.enums.EventType;
@@ -69,9 +68,8 @@ public void registerApiDocument(final ApiDocRegisterDTO apiDocRegisterDTO) {
                     String id = UUIDUtils.getInstance().generateShortUuid();
                     tagDTO.setTagDesc(tag);
                     tagDTO.setName(tag);
-                    tagDTO.setParentTagId(AdminConstants.TAG_ROOT_PARENT_ID);
                     tagDTO.setId(id);
-                    tagService.create(tagDTO);
+                    tagService.createRootTag(tagDTO, null);
                     tagsIds.add(id);
                 }
             }

File: shenyu-examples/shenyu-examples-http-swagger2/src/main/java/org/apache/shenyu/examples/http/ShenyuTestSwaggerApplication.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
- * ShenyuTestHttpApplication.
+ * ShenyuTestSwaggerApplication.
  */
 @SpringBootApplication
 public class ShenyuTestSwaggerApplication {

File: shenyu-examples/shenyu-examples-http-swagger2/src/main/java/org/apache/shenyu/examples/http/controller/OrderController.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * TestController.
  */
-@Api(tags = "Order API")
+@Api(tags = "Order API", position = 2)
 @RestController
 @RequestMapping("/order")
 @ShenyuSpringMvcClient("/order")

File: shenyu-examples/shenyu-examples-http-swagger2/src/main/java/org/apache/shenyu/examples/http/dto/RequestDTO.java
Patch:
@@ -28,13 +28,13 @@ public class RequestDTO {
     @ApiModelProperty(value = "module", required = true, example = "usercenter")
     private String module;
 
-    @ApiModelProperty(value = "method", required = true, example = "findByUserId")
+    @ApiModelProperty(value = "method", required = true, example = "findByUserId", position = 1)
     private String method;
 
     @ApiModelProperty(value = "content", example = "hello,shenyu")
     private String content;
 
-    @ApiModelProperty(value = "extInfo", example = "extended information")
+    @ApiModelProperty(value = "extInfo", example = "extended information", position = 2)
     private String extInfo;
 
     public RequestDTO() {

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -323,7 +323,7 @@ private SelectorData trieMatchSelector(final ServerWebExchange exchange, final S
         SelectorData selectorData = null;
         ShenyuTrieNode shenyuTrieNode = selectorTrie.match(path, pluginName);
         if (Objects.nonNull(shenyuTrieNode)) {
-            LogUtils.info(LOG, "{} selector match path from shenyu trie");
+            LogUtils.info(LOG, "{} selector match path from shenyu trie, path:{}", pluginName, path);
             List<?> collection = shenyuTrieNode.getPathCache().get(pluginName);
             if (CollectionUtils.isNotEmpty(collection)) {
                 Pair<Boolean, SelectorData> selectorDataPair;

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/proceeor/extractor/RequestMappingProcessor.java
Patch:
@@ -53,6 +53,9 @@ public void process(final ApiBean.ApiDefinition definition, final RequestMapping
         definition.addProperties("consumes", String.join(",", annotation.consumes()));
         definition.addProperties("produces", String.join(",", annotation.produces()));
         
+        definition.addProperties("desc", definition.getApiMethodName());
+        definition.addProperties("rule", "");
+        definition.addProperties("value", getPath(annotation));
         // Get additional values from the annotation.
         // TO_DO : Provides support annotation extensions
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/register/SpringCloudApiBeansExtractorTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class SpringCloudApiBeansExtractorTest {
     
-    private final ApiBeansExtractor extractor = new SpringCloudApiBeansExtractor();
+    private final ApiBeansExtractor extractor = SpringCloudApiBeansExtractor.buildDefaultSpringCloudApiBeansExtractor();
     
     @Test
     public void testExtractBeans() throws NoSuchMethodException {

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/register/SpringCloudApiMetaRegisterTest.java
Patch:
@@ -43,7 +43,7 @@ public class SpringCloudApiMetaRegisterTest {
     
     private SpringCloudApiMetaRegister springCloudApiMetaRegister;
     
-    private final SpringCloudApiBeansExtractor beansExtractor = new SpringCloudApiBeansExtractor();
+    private final SpringCloudApiBeansExtractor beansExtractor = SpringCloudApiBeansExtractor.buildDefaultSpringCloudApiBeansExtractor();
     
     @BeforeEach
     public void init() {

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/proceeor/extractor/RequestMappingProcessor.java
Patch:
@@ -54,6 +54,9 @@ public void process(final ApiBean.ApiDefinition definition, final RequestMapping
         definition.addProperties("consumes", String.join(",", annotation.consumes()));
         definition.addProperties("produces", String.join(",", annotation.produces()));
         
+        definition.addProperties("desc", definition.getApiMethodName());
+        definition.addProperties("rule", "");
+        definition.addProperties("value", getPath(annotation));
         // Get additional values from the annotation.
         // TO_DO : Provides support annotation extensions
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/register/SpringMvcApiBeansExtractorTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class SpringMvcApiBeansExtractorTest {
 
-    private final ApiBeansExtractor extractor = new SpringMvcApiBeansExtractor();
+    private final ApiBeansExtractor extractor = SpringMvcApiBeansExtractor.buildDefaultSpringMvcApiBeansExtractor();
 
     @Test
     public void testExtractBeans() throws NoSuchMethodException {

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/register/SpringMvcApiMetaRegisterTest.java
Patch:
@@ -43,7 +43,7 @@ public class SpringMvcApiMetaRegisterTest {
     
     private SpringMvcApiMetaRegister springMvcApiMetaRegister;
     
-    private final SpringMvcApiBeansExtractor beansExtractor = new SpringMvcApiBeansExtractor();
+    private final SpringMvcApiBeansExtractor beansExtractor = SpringMvcApiBeansExtractor.buildDefaultSpringMvcApiBeansExtractor();
     
     @BeforeEach
     public void init() {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/TagDTO.java
Patch:
@@ -28,9 +28,6 @@ public class TagDTO implements Serializable {
 
     private static final long serialVersionUID = 1680976393721978145L;
 
-    /**
-     * primary key.
-     */
     /**
      * primary key.
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ShenyuResultMessage.java
Patch:
@@ -27,7 +27,9 @@ public final class ShenyuResultMessage {
     public static final String CREATE_SUCCESS = "create success";
     
     public static final String DELETE_SUCCESS = "delete success";
-    
+
+    public static final String DELETE_FAIL = "delete fail";
+
     public static final String UPDATE_SUCCESS = "update success";
     
     public static final String QUERY_SUCCESS = "query success";

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-tcp/src/main/java/org/apache/shenyu/plugin/tcp/handler/TcpUpstreamDataHandler.java
Patch:
@@ -47,7 +47,7 @@ public void handlerDiscoveryUpstreamData(final DiscoverySyncData discoverySyncDa
         BootstrapServer bootstrapServer = TcpBootstrapFactory.getSingleton().getCache(discoverySyncData.getSelectorName());
         if (Objects.nonNull(bootstrapServer)) {
             bootstrapServer.removeCommonUpstream(removed);
-            LOG.info("shenyu update TcpBootstrapServer success upstream is {}", discoverySyncData.getUpstreamDataList());
+            LOG.info("shenyu update TcpBootstrapServer [{}] success upstream is {}", discoverySyncData.getSelectorName(), discoverySyncData.getUpstreamDataList());
         } else {
             LOG.warn("shenyu update TcpBootstrapServer don't find name is {}", discoverySyncData.getSelectorName());
         }

File: shenyu-protocol/shenyu-protocol-tcp/src/main/java/org/apache/shenyu/protocol/tcp/TcpBootstrapServer.java
Patch:
@@ -59,7 +59,7 @@ public TcpBootstrapServer(final EventBus eventBus) {
 
     @Override
     public void start(final TcpServerConfiguration tcpServerConfiguration) {
-        final String loadBalanceAlgorithm = tcpServerConfiguration.getProps().getOrDefault("loadBalanceAlgorithm", "random").toString();
+        final String loadBalanceAlgorithm = tcpServerConfiguration.getProps().getOrDefault("loadBalance", "random").toString();
         final String bossGroupThreadCount = tcpServerConfiguration.getProps().getOrDefault("bossGroupThreadCount", "1").toString();
         final String workerGroupThreadCount = tcpServerConfiguration.getProps().getOrDefault("workerGroupThreadCount", "12").toString();
         DefaultConnectionConfigProvider connectionConfigProvider = new DefaultConnectionConfigProvider(loadBalanceAlgorithm, tcpServerConfiguration.getPluginSelectorName());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/zookeeper/HttpServiceDiscovery.java
Patch:
@@ -134,7 +134,7 @@ private void updateSelectorHandler(final String contextPath, final List<String>
         SelectorDO selector = selectorService.findByName(contextPath);
         if (Objects.nonNull(selector)) {
             SelectorData selectorData = selectorService.buildByName(contextPath);
-            if (uriList == null) {
+            if (Objects.isNull(uriList)) {
                 selector.setHandle("");
                 selectorData.setHandle("");
             } else {

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/UpstreamCheckUtils.java
Patch:
@@ -78,7 +78,7 @@ private static boolean isHostConnector(final String host, final int port, final
         try (Socket socket = new Socket()) {
             socket.connect(new InetSocketAddress(host, port), timeout);
         } catch (Exception e) {
-            LOG.error("socket connect is error.", e);
+            LOG.error("socket connect is error. host:{} port:{} timeout:{} error:{}", host, port, timeout, e);
             return false;
         }
         return true;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataSyncConfigurationTest.java
Patch:
@@ -213,7 +213,7 @@ public void testEtcdDataInit() {
     public void testConsulClient() {
         DataSyncConfiguration.ConsulListener consulListener = new DataSyncConfiguration.ConsulListener();
         ConsulProperties consulProperties = mock(ConsulProperties.class);
-        when(consulProperties.getUrl()).thenReturn("127.0.0.1");
+        when(consulProperties.getUrl()).thenReturn("http://127.0.0.1:8500");
         assertNotNull(consulListener.consulClient(consulProperties));
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataBaseConfiguration.java
Patch:
@@ -65,6 +65,7 @@ public DatabaseIdProvider databaseIdProvider() {
         properties.setProperty("MySQL", "mysql");
         properties.setProperty("PostgreSQL", "postgresql");
         properties.setProperty("H2", "h2");
+        properties.setProperty("OpenGauss", "opengauss");
         VendorDatabaseIdProvider databaseIdProvider = new VendorDatabaseIdProvider();
         databaseIdProvider.setProperties(properties);
         return databaseIdProvider;

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-consul/src/main/java/org/apache/shenyu/register/client/consul/ConsulClientRegisterRepository.java
Patch:
@@ -150,7 +150,7 @@ public void persistURI(final URIRegisterDTO registerDTO) {
     }
 
     @Override
-    public void close() {
+    public void closeRepository() {
         consulClient.agentServiceDeregister(this.service.getId());
     }
 

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-etcd/src/main/java/org/apache/shenyu/register/client/etcd/EtcdClientRegisterRepository.java
Patch:
@@ -61,7 +61,7 @@ public void init(final ShenyuRegisterCenterConfig config) {
     }
 
     @Override
-    public void close() {
+    public void closeRepository() {
         client.close();
     }
 

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-etcd/src/test/java/org/apache/shenyu/register/client/etcd/EtcdClientRegisterRepositoryTest.java
Patch:
@@ -98,7 +98,7 @@ public void testPersistInterface() {
         String metadataPath = "/shenyu/register/metadata/http/context/context-ruleName";
         assertTrue(etcdBroker.containsKey(metadataPath));
         assertEquals(etcdBroker.get(metadataPath), GsonUtils.getInstance().toJson(data));
-        repository.close();
+        repository.closeRepository();
     }
     
     @Test
@@ -131,7 +131,7 @@ public void testPersistInterface4Other() {
         String metadataPath = "/shenyu/register/metadata/grpc/context/testService.testMethod";
         assertTrue(etcdBroker.containsKey(metadataPath));
         assertEquals(etcdBroker.get(metadataPath), GsonUtils.getInstance().toJson(data));
-        repository.close();
+        repository.closeRepository();
     }
 
     @Test

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/HttpClientRegisterRepository.java
Patch:
@@ -140,7 +140,7 @@ public void doPersistInterface(final MetaDataRegisterDTO metadata) {
     }
 
     @Override
-    public void close() {
+    public void closeRepository() {
         if (Objects.nonNull(uriRegisterDTO)) {
             uriRegisterDTO.setEventType(EventType.DELETED);
             doRegister(uriRegisterDTO, Constants.URI_PATH, Constants.URI);

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-nacos/src/main/java/org/apache/shenyu/register/client/nacos/NacosClientRegisterRepository.java
Patch:
@@ -92,7 +92,7 @@ public void init(final ShenyuRegisterCenterConfig config) {
     }
 
     @Override
-    public void close() {
+    public void closeRepository() {
         try {
             configService.shutDown();
             namingService.shutDown();

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-zookeeper/src/main/java/org/apache/shenyu/register/client/zookeeper/ZookeeperClientRegisterRepository.java
Patch:
@@ -121,7 +121,7 @@ public void persistURI(final URIRegisterDTO registerDTO) {
     }
 
     @Override
-    public void close() {
+    public void closeRepository() {
         this.client.close();
     }
 

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-zookeeper/src/test/java/org/apache/shenyu/register/client/zookeeper/ZookeeperClientRegisterRepositoryTest.java
Patch:
@@ -78,7 +78,7 @@ public void testZookeeperInstanceRegisterRepository() {
                 connectionStateListener.stateChanged(null, ConnectionState.RECONNECTED);
             });
             Assertions.assertDoesNotThrow(() -> new ZookeeperClientRegisterRepository());
-            repository.close();
+            repository.closeRepository();
         }
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ApiControllerTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUp() {
                 .rpcType("/dubbo")
                 .state(0)
                 .apiSource(0)
-                .document("document")
+                .document("{}")
                 .build();
         SpringBeanUtils.getInstance().setApplicationContext(mock(ConfigurableApplicationContext.class));
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/manager/impl/SwaggerDocParserTest.java
Patch:
@@ -98,7 +98,8 @@ public class SwaggerDocParserTest {
         + "                        }\n"
         + "                    },\n"
         + "                \"deprecated\":false\n"
-        + "            }\n"
+        + "             }\n"
+        + "           }\n"
         + "        },\n"
         + "        \"/test/payment\":{\n"
         + "            \"post\":{\n"
@@ -142,7 +143,6 @@ public class SwaggerDocParserTest {
         + "                },\n"
         + "                \"deprecated\":false\n"
         + "            }\n"
-        + "          }\n"
         + "        }\n"
         + "    },\n"
         + "    \"definitions\":{\n"
@@ -200,6 +200,6 @@ public void testParseJson() {
         JsonObject docRoot = GsonUtils.getInstance().fromJson(DOC_INFO_JSON, JsonObject.class);
         docRoot.addProperty("basePath", "/" + "testClusterName");
         DocInfo docInfo = swaggerDocParser.parseJson(docRoot);
-        assert docInfo.getDocModuleList().get(0).getModule().equals("shenyu-examples-http-swagger2 API");
+        assert docInfo.getDocModuleList().get(0).getModule().equals("Order API");
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ApiDocController.java
Patch:
@@ -108,7 +108,6 @@ private Function<DocInfo, MenuProject> getMenuAndDocInfo() {
                     List<MenuDocItem> docItems = docModule.getDocItems().stream()
                         .map(docItem -> {
                             MenuDocItem menuDocItem = new MenuDocItem();
-                            menuDocItem.setId(docItem.getId());
                             menuDocItem.setLabel(docItem.getSummary());
                             menuDocItem.setName(docItem.getName());
                             return menuDocItem;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/PullSwaggerDocService.java
Patch:
@@ -21,9 +21,9 @@
 import org.apache.shenyu.admin.model.bean.UpstreamInstance;
 
 /**
- * Service document Manager.
+ * pull service api document Manager.
  */
-public interface ServiceDocManager {
+public interface PullSwaggerDocService {
 
     /**
      * pull API document.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ApiDocControllerTest.java
Patch:
@@ -80,7 +80,6 @@ public void testGetAllDoc() throws Exception {
     @Test
     public void testGetDocItem() throws Exception {
         DocItem docItem = new DocItem();
-        docItem.setId("123");
         docItem.setApiOrder(1);
         docItem.setDescription("this is a test");
         given(this.docManager.getDocItem("123")).willReturn(docItem);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/manager/impl/SwaggerDocManagerImplTest.java
Patch:
@@ -33,10 +33,10 @@
 
 @ExtendWith(MockitoExtension.class)
 @MockitoSettings(strictness = Strictness.LENIENT)
-public class ServiceDocManagerImplTest {
+public class SwaggerDocManagerImplTest {
 
     @InjectMocks
-    private ServiceDocManagerImpl serviceDocManager;
+    private PullSwaggerDocServiceImpl serviceDocManager;
 
     @Mock
     private Set<UpstreamInstance> currentServices;

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/ApiDocProcessorImpl.java
Patch:
@@ -29,21 +29,21 @@
 public class ApiDocProcessorImpl extends BaseAnnotationApiProcessor<ApiDoc> {
     
     @Override
-    protected void process(final ApiBean apiBean, final ApiDoc annotation) {
+    public void process(final ApiBean apiBean, final ApiDoc annotation) {
         apiBean.addProperties("desc", annotation.desc());
         apiBean.addProperties("tags", String.join(",", annotation.tags()));
         apiBean.setStatus(ApiBean.Status.REGISTRABLE_API);
     }
     
     @Override
-    protected void process(final ApiBean.ApiDefinition definition, final ApiDoc annotation) {
+    public void process(final ApiBean.ApiDefinition definition, final ApiDoc annotation) {
         definition.addProperties("desc", annotation.desc());
         definition.addProperties("tags", String.join(",", annotation.tags()));
         definition.setStatus(ApiBean.Status.REGISTRABLE);
     }
     
     @Override
-    protected Class<ApiDoc> matchAnnotation() {
+    public Class<ApiDoc> matchAnnotation() {
         return ApiDoc.class;
     }
 }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/handler/DividePluginDataHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.plugin.divide.handler;
 
-import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
@@ -34,6 +33,7 @@
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -47,10 +47,10 @@ public class DividePluginDataHandler implements PluginDataHandler {
     
     @Override
     public void handlerSelector(final SelectorData selectorData) {
-        List<DivideUpstream> upstreamList = GsonUtils.getInstance().fromList(selectorData.getHandle(), DivideUpstream.class);
-        if (CollectionUtils.isEmpty(upstreamList)) {
+        if (Objects.isNull(selectorData) || Objects.isNull(selectorData.getId())) {
             return;
         }
+        List<DivideUpstream> upstreamList = GsonUtils.getInstance().fromList(selectorData.getHandle(), DivideUpstream.class);
         UpstreamCacheManager.getInstance().submit(selectorData.getId(), convertUpstreamList(upstreamList));
         // the update is also need to clean, but there is no way to
         // distinguish between crate and update, so it is always clean

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ConsulServerConfigurationTest.java
Patch:
@@ -57,6 +57,7 @@ public void consulClientTest() {
             Properties properties = mock(Properties.class);
             when(config.getProps()).thenReturn(properties);
             when(config.getProps().getProperty(any(), any())).thenReturn("1", "30", "mocked valued");
+            when(config.getServerLists()).thenReturn("127.0.0.1:8500");
             ConsulClient consulClient = configuration.consulClient(config);
             assertNotNull(consulClient);
         }

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-consul/src/test/java/org/apache/shenyu/register/client/server/consul/ConsulServerRegisterRepositoryTest.java
Patch:
@@ -107,7 +107,7 @@ public void testConsulServerRegisterRepository() {
         new ApplicationContextRunner().withUserConfiguration(ConsulServerRegisterRepositoryTest.class)
                 .run(context -> {
                     MetaDataRegisterDTO mockServer = MetaDataRegisterDTO.builder().appName("mockServer").contextPath("/mock")
-                            .host("127.0.0.1").rpcType(RpcTypeEnum.DUBBO.getName()).build();
+                            .host("127.0.0.1:8500").rpcType(RpcTypeEnum.DUBBO.getName()).build();
                     Map<String, GetValue> mateData = new HashMap<>();
                     GetValue getValue = new GetValue();
                     getValue.setValue(Base64.getEncoder().encodeToString(GsonUtils.getInstance().toJson(mockServer).getBytes(StandardCharsets.UTF_8)));
@@ -125,7 +125,8 @@ public void initTest() {
         final MockedConstruction<ConsulClient> consulClientMockedConstruction = mockConstruction(ConsulClient.class);
         ConsulClientServerRegisterRepository consulServerRegisterRepository = new ConsulClientServerRegisterRepository();
         final ShenyuClientServerRegisterPublisher shenyuClientServerRegisterPublisher = mock(ShenyuClientServerRegisterPublisher.class);
-        final ShenyuRegisterCenterConfig shenyuRegisterCenterConfig = mock(ShenyuRegisterCenterConfig.class);
+        ShenyuRegisterCenterConfig shenyuRegisterCenterConfig = new ShenyuRegisterCenterConfig();
+        shenyuRegisterCenterConfig.setServerLists("127.0.0.1:8500");
         consulServerRegisterRepository.init(shenyuClientServerRegisterPublisher, shenyuRegisterCenterConfig);
         consulClientMockedConstruction.close();
     }

File: shenyu-registry/shenyu-registry-api/src/main/java/org/apache/shenyu/registry/api/ShenyuInstanceRegisterRepository.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.api;
+package org.apache.shenyu.registry.api;
 
-import org.apache.shenyu.register.instance.api.config.RegisterConfig;
-import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
+import org.apache.shenyu.registry.api.entity.InstanceEntity;
+import org.apache.shenyu.registry.api.config.RegisterConfig;
 import org.apache.shenyu.spi.SPI;
 
 import java.util.Collections;

File: shenyu-registry/shenyu-registry-api/src/main/java/org/apache/shenyu/registry/api/config/RegisterConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.api.config;
+package org.apache.shenyu.registry.api.config;
 
 import java.util.Properties;
 

File: shenyu-registry/shenyu-registry-api/src/main/java/org/apache/shenyu/registry/api/entity/InstanceEntity.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.api.entity;
+package org.apache.shenyu.registry.api.entity;
 
 import java.util.Objects;
 

File: shenyu-registry/shenyu-registry-api/src/main/java/org/apache/shenyu/registry/api/path/InstancePathConstants.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.api.path;
+package org.apache.shenyu.registry.api.path;
 
 /**
  * zookeeper register center.

File: shenyu-registry/shenyu-registry-apollo/src/main/java/org/apache/shenyu/registry/apollo/ApolloClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.apollo;
+package org.apache.shenyu.registry.apollo;
 
 import com.ctrip.framework.apollo.openapi.client.ApolloOpenApiClient;
 import com.ctrip.framework.apollo.openapi.dto.NamespaceReleaseDTO;

File: shenyu-registry/shenyu-registry-apollo/src/main/java/org/apache/shenyu/registry/apollo/ApolloConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.apollo;
+package org.apache.shenyu.registry.apollo;
 
 public class ApolloConfig {
 

File: shenyu-registry/shenyu-registry-consul/src/main/java/org/apache/shenyu/registry/consul/TtlScheduler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.consul;
+package org.apache.shenyu.registry.consul;
 
 import com.ecwid.consul.v1.ConsulClient;
 import org.apache.commons.logging.Log;

File: shenyu-registry/shenyu-registry-core/src/main/java/org/apache/shenyu/registry/core/ShenyuInstanceRegisterRepositoryFactory.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.core;
+package org.apache.shenyu.registry.core;
 
-import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
-import org.apache.shenyu.register.instance.api.config.RegisterConfig;
+import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.registry.api.config.RegisterConfig;
 import org.apache.shenyu.spi.ExtensionLoader;
 
 import java.util.Map;

File: shenyu-registry/shenyu-registry-core/src/test/java/org/apache/shenyu/registry/core/ShenyuInstanceRegisterRepositoryFactoryTest.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.core;
+package org.apache.shenyu.registry.core;
 
-import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
 import org.apache.shenyu.spi.ExtensionLoader;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-registry/shenyu-registry-etcd/src/main/java/org/apache/shenyu/registry/etcd/EtcdClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.etcd;
+package org.apache.shenyu.registry.etcd;
 
 import io.etcd.jetcd.ByteSequence;
 import io.etcd.jetcd.Client;

File: shenyu-registry/shenyu-registry-etcd/src/test/java/org/apache/shenyu/registry/etcd/EtcdClientTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.etcd;
+package org.apache.shenyu.registry.etcd;
 
 import io.etcd.jetcd.Client;
 import io.etcd.jetcd.ClientBuilder;

File: shenyu-registry/shenyu-registry-eureka/src/test/java/org/apache/shenyu/registry/eureka/EurekaInstanceRegisterRepositoryTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.eureka;
+package org.apache.shenyu.registry.eureka;
 
 import com.netflix.appinfo.InstanceInfo;
 import com.netflix.discovery.DiscoveryClient;
@@ -24,7 +24,7 @@
 import com.netflix.discovery.shared.transport.EurekaHttpClient;
 import com.netflix.discovery.shared.transport.EurekaHttpResponse;
 import com.netflix.discovery.shared.transport.jersey.JerseyApplicationClient;
-import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
+import org.apache.shenyu.registry.api.entity.InstanceEntity;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: shenyu-registry/shenyu-registry-nacos/src/test/java/org/apache/shenyu/registry/nacos/NacosInstanceRegisterRepositoryTest.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.nacos;
+package org.apache.shenyu.registry.nacos;
 
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.naming.NamingService;
 import com.alibaba.nacos.api.naming.pojo.Instance;
-import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
+import org.apache.shenyu.registry.api.entity.InstanceEntity;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: shenyu-registry/shenyu-registry-zookeeper/src/main/java/org/apache/shenyu/registry/zookeeper/ZookeeperClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.zookeeper;
+package org.apache.shenyu.registry.zookeeper;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.CuratorFramework;

File: shenyu-registry/shenyu-registry-zookeeper/src/main/java/org/apache/shenyu/registry/zookeeper/ZookeeperConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.zookeeper;
+package org.apache.shenyu.registry.zookeeper;
 
 public class ZookeeperConfig {
     

File: shenyu-registry/shenyu-registry-zookeeper/src/test/java/org/apache/shenyu/registry/zookeeper/ZookeeperClientTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.register.instance.zookeeper;
+package org.apache.shenyu.registry.zookeeper;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/client/AbstractShenyuSdkClient.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.loadbalancer.factory.LoadBalancerFactory;
-import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
-import org.apache.shenyu.register.instance.api.config.RegisterConfig;
-import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
+import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.registry.api.config.RegisterConfig;
+import org.apache.shenyu.registry.api.entity.InstanceEntity;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.apache.shenyu.sdk.core.ShenyuResponse;
 import org.apache.shenyu.sdk.core.interceptor.ShenyuSdkRequestInterceptor;

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/client/ShenyuSdkClient.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.sdk.core.client;
 
-import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
-import org.apache.shenyu.register.instance.api.config.RegisterConfig;
+import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.registry.api.config.RegisterConfig;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.apache.shenyu.sdk.core.ShenyuResponse;
 import org.apache.shenyu.sdk.core.interceptor.ShenyuSdkRequestInterceptor;

File: shenyu-sdk/shenyu-sdk-okhttp/src/test/java/org/apache/shenyu/sdk/okhttp/OkHttpShenyuSdkClientTest.java
Patch:
@@ -17,17 +17,17 @@
 
 package org.apache.shenyu.sdk.okhttp;
 
-import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
-import org.apache.shenyu.register.instance.api.config.RegisterConfig;
+import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.registry.api.config.RegisterConfig;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.junit.Ignore;
 import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Collections;
 
 import static org.mockito.Mockito.mock;
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sdk/src/main/java/org/apache/shenyu/springboot/starter/sdk/ShenyuSdkAutoConfiguration.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.shenyu.springboot.starter.sdk;
 
 import org.apache.shenyu.common.utils.VersionUtils;
-import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
-import org.apache.shenyu.register.instance.api.config.RegisterConfig;
-import org.apache.shenyu.register.instance.core.ShenyuInstanceRegisterRepositoryFactory;
+import org.apache.shenyu.registry.api.ShenyuInstanceRegisterRepository;
+import org.apache.shenyu.registry.api.config.RegisterConfig;
+import org.apache.shenyu.registry.core.ShenyuInstanceRegisterRepositoryFactory;
 import org.apache.shenyu.sdk.core.client.ShenyuSdkClient;
 import org.apache.shenyu.sdk.core.client.ShenyuSdkClientFactory;
 import org.apache.shenyu.sdk.core.interceptor.ShenyuSdkRequestInterceptor;

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/SpringCloudPluginCases.java
Patch:
@@ -45,7 +45,7 @@
 
 public class SpringCloudPluginCases implements ShenYuScenarioProvider {
 
-    private static final String TEST = "/springboot/test";
+    private static final String TEST = "/springcloud/test";
 
     private static final ObjectMapper MAPPER = new ObjectMapper();
 

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/SpringCloudPluginTest.java
Patch:
@@ -98,7 +98,7 @@ static void setup(final AdminClient adminClient, final GatewayClient gatewayClie
         formData.add("enabled", "true");
         formData.add("role", "Proxy");
         formData.add("sort", "200");
-        adminClient.startPlugin("8", formData);
+        adminClient.changePluginStatus("8", formData);
         String id = "";
         for (SelectorDTO selectorDTO : selectorDTOList) {
             if (!"".equals(selectorDTO.getHandle())) {
@@ -149,7 +149,7 @@ static void teardown(final AdminClient client) {
         formData.add("enabled", "false");
         formData.add("role", "Proxy");
         formData.add("sort", "200");
-        client.startPlugin("8", formData);
+        client.changePluginStatus("8", formData);
     }
 }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/GsonUtils.java
Patch:
@@ -409,7 +409,7 @@ private static class StringTypeAdapter extends TypeAdapter<String> {
         @Override
         public void write(final JsonWriter out, final String value) {
             try {
-                if (StringUtils.isBlank(value)) {
+                if (Objects.isNull(value)) {
                     out.nullValue();
                     return;
                 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/MetaDataMapper.java
Patch:
@@ -79,7 +79,7 @@ public interface MetaDataMapper extends ExistProvider {
      * @param methodName  the methodName
      * @return the meta data do
      */
-    MetaDataDO findByServiceNameAndMethod(@Param("serviceName") String serviceName, @Param("methodName") String methodName);
+    List<MetaDataDO> findByServiceNameAndMethod(@Param("serviceName") String serviceName, @Param("methodName") String methodName);
     
     /**
      * Select by query list.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MetaDataMapperTest.java
Patch:
@@ -109,7 +109,7 @@ public void findByServiceNameAndMethod() {
         int count = metaDataMapper.insert(metaDataDO);
         assertThat(count, comparesEqualTo(1));
 
-        MetaDataDO result = metaDataMapper.findByServiceNameAndMethod(metaDataDO.getServiceName(), metaDataDO.getMethodName());
+        MetaDataDO result = metaDataMapper.findByServiceNameAndMethod(metaDataDO.getServiceName(), metaDataDO.getMethodName()).get(0);
         assertThat(result.getId(), comparesEqualTo(metaDataDO.getId()));
     }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -31,10 +31,12 @@ public enum PluginEnum {
      * Global plugin enum.
      */
     GLOBAL(-1, 0, "global"),
+    
     /**
      * Tcp plugin enum.
      */
     TCP(0, 0, "tcp"),
+    
     /**
      * Mqtt plugin enum.
      */
@@ -114,8 +116,6 @@ public enum PluginEnum {
      * Request plugin enum.
      */
     REQUEST(120, 0, "request"),
-
-
     
     /**
      * GeneralContext plugin enum.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ProxySelectorServiceImpl.java
Patch:
@@ -115,6 +115,7 @@ public CommonPager<ProxySelectorVO> listByPage(final ProxySelectorQuery query) {
             if (!Objects.isNull(discoveryRelDO)) {
                 DiscoveryHandlerDO discoveryHandlerDO = discoveryHandlerMapper.selectById(discoveryRelDO.getDiscoveryHandlerId());
                 if (!Objects.isNull(discoveryHandlerDO)) {
+                    vo.setDiscoveryHandlerId(discoveryHandlerDO.getId());
                     vo.setListenerNode(discoveryHandlerDO.getListenerNode());
                     vo.setHandler(discoveryHandlerDO.getHandler());
                     DiscoveryDO discoveryDO = discoveryMapper.selectById(discoveryHandlerDO.getDiscoveryId());
@@ -211,7 +212,6 @@ public String create(final ProxySelectorAddDTO proxySelectorAddDTO) {
                 discoveryProcessor.createDiscovery(discoveryDO);
             }
             if (fillDiscovery) {
-                discoveryProcessor.createDiscovery(discoveryDO);
                 // insert discovery handler
                 String discoveryHandlerId = UUIDUtils.getInstance().generateShortUuid();
                 DiscoveryHandlerDO discoveryHandlerDO = DiscoveryHandlerDO.builder()

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynApolloTest.java
Patch:
@@ -62,7 +62,7 @@
 public class DataSynApolloTest {
 
     @Test
-    void testDataSyn(AdminClient adminClient, GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
+    void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynHttpTest.java
Patch:
@@ -62,7 +62,7 @@
 public class DataSynHttpTest {
 
     @Test
-    void testDataSyn(AdminClient adminClient, GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
+    void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynNacosTest.java
Patch:
@@ -63,7 +63,7 @@
 public class DataSynNacosTest {
 
     @Test
-    void testDataSyn(AdminClient adminClient, GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
+    void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();

File: shenyu-e2e/shenyu-e2e-case/shenyu-e2e-case-spring-cloud/src/test/java/org/apache/shenyu/e2e/testcase/springcloud/DataSynZookeeperTest.java
Patch:
@@ -62,7 +62,7 @@
 public class DataSynZookeeperTest {
 
     @Test
-    void testDataSyn(AdminClient adminClient, GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
+    void testDataSyn(final AdminClient adminClient, final GatewayClient gatewayClient) throws InterruptedException, JsonProcessingException {
         adminClient.login();
         Thread.sleep(10000);
         List<MetaData> metaDataCacheList = gatewayClient.getMetaDataCache();

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/ExternalServiceClient.java
Patch:
@@ -28,7 +28,7 @@ public class ExternalServiceClient {
 
     private final Properties properties;
 
-    public ExternalServiceClient(String url, Properties properties) {
+    public ExternalServiceClient(final String url, final Properties properties) {
         this.url = url;
         this.properties = properties;
     }

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/handle/RuleHandle.java
Patch:
@@ -30,7 +30,7 @@ class Serializer extends JsonSerializer<RuleHandle> {
         private final ObjectMapper mapper = new ObjectMapper();
         
         @Override
-        public void serialize(RuleHandle ruleHandle, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
+        public void serialize(final RuleHandle ruleHandle, final JsonGenerator jsonGenerator, final SerializerProvider serializerProvider) throws IOException {
             jsonGenerator.writeString(mapper.writeValueAsString(ruleHandle));
         }
     }

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/FakeResourceDTO.java
Patch:
@@ -25,7 +25,7 @@
  * Fake resourceDTO.
  */
 @JsonIgnoreProperties(ignoreUnknown = true)
-public class FakeResourceDTO implements ResourceDTO{
+public class FakeResourceDTO implements ResourceDTO {
     
     private String id;
     
@@ -56,7 +56,7 @@ public String getId() {
      *
      * @param id id
      */
-    public void setId(String id) {
+    public void setId(final String id) {
         this.id = id;
     }
 
@@ -75,7 +75,7 @@ public String getName() {
      *
      * @param name name
      */
-    public void setName(String name) {
+    public void setName(final String name) {
         this.name = name;
     }
 }

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/PaginatedResources.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Paginated resources.
  *
- * @param <T> <T>
+ * @param <T> resourceDTO
  */
 public class PaginatedResources<T extends ResourceDTO> {
     
@@ -44,7 +44,7 @@ public Pagination getPage() {
      *
      * @param page page
      */
-    public void setPage(Pagination page) {
+    public void setPage(final Pagination page) {
         this.page = page;
     }
 
@@ -62,7 +62,7 @@ public List<T> getDataList() {
      *
      * @param dataList dataList
      */
-    public void setDataList(List<T> dataList) {
+    public void setDataList(final List<T> dataList) {
         this.dataList = dataList;
     }
 }

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/annotation/ShenYuScenarioParameter.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.e2e.engine.annotation;
 
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -26,5 +25,5 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ShenYuScenarioParameter {
-    
+
 }

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/HttpVerifier.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.e2e.engine.scenario.function;
 
-import org.apache.shenyu.e2e.engine.scenario.function.Verifier;
-
 /**
  * Http Verifier interface.
  */

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/specification/ShenYuAfterEachSpec.java
Patch:
@@ -25,13 +25,13 @@
  */
 public class ShenYuAfterEachSpec implements AfterEachSpec {
     
+    public static final ShenYuAfterEachSpec DEFAULT = new ShenYuAfterEachSpec(Deleter.DEFAULT, Checker.DEFAULT);
+    
     private final Deleter deleter;
     
     private final Checker postChecker;
     
-    public static final ShenYuAfterEachSpec DEFAULT = new ShenYuAfterEachSpec(Deleter.DEFAULT, Checker.DEFAULT);
-
-    public ShenYuAfterEachSpec(Deleter deleter, Checker postChecker) {
+    public ShenYuAfterEachSpec(final Deleter deleter, final Checker postChecker) {
         this.deleter = deleter;
         this.postChecker = postChecker;
     }

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/service/docker/ShenYuLogConsumer.java
Patch:
@@ -28,7 +28,7 @@ public class ShenYuLogConsumer extends Slf4jLogConsumer {
 
     private static final Logger log = LoggerFactory.getLogger("docker-compose");
     
-    public ShenYuLogConsumer(String serviceName) {
+    public ShenYuLogConsumer(final String serviceName) {
         super(log);
         withPrefix("service_name:" + serviceName);
     }

File: shenyu-e2e/shenyu-e2e-engine/src/test/java/org/apache/shenyu/e2e/engine/function/WaitForHelperTest.java
Patch:
@@ -44,13 +44,13 @@ void testSuccess() throws TimeoutException {
     
     @Test
     void testTimeout() {
-        Assertions.assertThrows(TimeoutException.class, () -> {
+        Assertions.assertThrows(TimeoutException.class, () ->
             new WaitForHelper(10, Duration.ofSeconds(1), Duration.ofMillis(500)).waitFor(
                     () -> given().baseUri("https://postman-echo.com").when(),
                     Method.GET,
                     "/delay/2",
                     new ResponseSpecBuilder().expectBody("delay", equalTo(2)).build()
-            );
-        });
+            )
+        );
     }
 }

File: shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/handler/AbstractDubboPluginDataHandler.java
Patch:
@@ -87,6 +87,9 @@ public void handlerSelector(final SelectorData selectorData) {
         if (CollectionUtils.isNotEmpty(graySelectorHandle)) {
             SELECTOR_CACHED_HANDLE.get().cachedHandle(selectorData.getId(), graySelectorHandle);
             UpstreamCacheManager.getInstance().submit(selectorData.getId(), convertUpstreamList(graySelectorHandle));
+        } else {
+            // if update gray selector is empty, remove cache
+            removeSelector(selectorData);
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ProxySelectorServiceImpl.java
Patch:
@@ -226,7 +226,7 @@ public String create(final ProxySelectorAddDTO proxySelectorAddDTO) {
                 discoveryHandlerMapper.insertSelective(discoveryHandlerDO);
                 DiscoveryRelDO discoveryRelDO = DiscoveryRelDO.builder()
                         .id(UUIDUtils.getInstance().generateShortUuid())
-                        .pluginName(proxySelectorAddDTO.getName())
+                        .pluginName(proxySelectorAddDTO.getPluginName())
                         .discoveryHandlerId(discoveryHandlerId)
                         .proxySelectorId(proxySelectorId)
                         .selectorId("")

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/parse/CustomDiscoveryUpstreamParser.java
Patch:
@@ -40,6 +40,7 @@
  *
  * <p>
  * You can define a custom map mapper  if your custom upstream doesn't fit
+ * like is {"${yourUserName}" : "url"}
  * </p>
  */
 public class CustomDiscoveryUpstreamParser implements JsonDeserializer<DiscoveryUpstreamData>, KeyValueParser {

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/extractor/BaseAnnotationApiBeansExtractor.java
Patch:
@@ -32,7 +32,7 @@
  * AnnotationApiBeansExtractor.<br>
  * API extraction converter that supports annotation.
  */
-public abstract class BaseAnnotationApiBeansExtractor extends BaseApiBeansExtractor implements ApiBeansExtractor {
+public abstract class BaseAnnotationApiBeansExtractor extends BaseApiBeansExtractor implements RpcApiBeansExtractor {
     
     @Override
     protected Map<String, Object> extractSupportBeans(final ApplicationContext applicationContext) {

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/extractor/BaseApiBeansExtractor.java
Patch:
@@ -37,7 +37,7 @@
  * BaseApiBeansExtractor.<br>
  * Used to demonstrate the basic behavior of the extractor.
  */
-public abstract class BaseApiBeansExtractor implements ApiBeansExtractor {
+public abstract class BaseApiBeansExtractor implements RpcApiBeansExtractor {
     
     protected static final Logger LOG = LoggerFactory.getLogger(BaseApiBeansExtractor.class);
     

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/register/SpringCloudApiBeansExtractor.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.shenyu.client.core.register.ApiBean;
 import org.apache.shenyu.client.core.register.extractor.BaseAnnotationApiBeansExtractor;
-import org.apache.shenyu.client.core.register.extractor.ApiBeansExtractor;
+import org.apache.shenyu.client.core.register.extractor.RpcApiBeansExtractor;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.jetbrains.annotations.NotNull;
 import org.springframework.lang.NonNull;
@@ -36,7 +36,7 @@
  * Support for Spring Cloud. <br>
  * Should inherit from SpringMvcApiBeansExtractor.
  */
-public class SpringCloudApiBeansExtractor extends BaseAnnotationApiBeansExtractor implements ApiBeansExtractor {
+public class SpringCloudApiBeansExtractor extends BaseAnnotationApiBeansExtractor implements RpcApiBeansExtractor {
     
     private final List<Class<? extends Annotation>> supportedApiAnnotations = new ArrayList<>(1);
     

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/register/SpringMvcApiBeansExtractor.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.shenyu.client.core.register.ApiBean;
 import org.apache.shenyu.client.core.register.extractor.BaseAnnotationApiBeansExtractor;
-import org.apache.shenyu.client.core.register.extractor.ApiBeansExtractor;
+import org.apache.shenyu.client.core.register.extractor.RpcApiBeansExtractor;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.jetbrains.annotations.NotNull;
 import org.springframework.lang.NonNull;
@@ -32,7 +32,7 @@
 import java.util.List;
 import java.util.Objects;
 
-public class SpringMvcApiBeansExtractor extends BaseAnnotationApiBeansExtractor implements ApiBeansExtractor {
+public class SpringMvcApiBeansExtractor extends BaseAnnotationApiBeansExtractor implements RpcApiBeansExtractor {
     
     private final List<Class<? extends Annotation>> supportedApiAnnotations = new ArrayList<>(1);
     

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/register/SpringMvcApiBeansExtractorTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class SpringMvcApiBeansExtractorTest {
 
-    private final ApiBeansExtractor extractor = new SpringMvcApiBeansExtractor("/http");
+    private final ApiBeansExtractor extractor = new SpringMvcApiBeansExtractor();
 
     @Test
     public void testExtractBeans() throws NoSuchMethodException {
@@ -48,7 +48,6 @@ public void testExtractBeans() throws NoSuchMethodException {
         ApiBean apiBean = apiBeans.get(0);
         assertThat(apiBean.getBeanClass(), is(ExtractorTestBean.class));
         assertThat(apiBean.getBeanPath(), is("/testBean"));
-        assertThat(apiBean.getContextPath(), is("/http"));
         assertThat(apiBean.getApiDefinitions().size(), is(1));
 
         ApiBean.ApiDefinition apiDefinition = apiBean.getApiDefinitions().get(0);

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/shutdown/ShenyuClientShutdownHook.java
Patch:
@@ -115,7 +115,8 @@ public void run() {
                         LOG.info("sleep {}ms", shutdownWaitTime);
                         try {
                             TimeUnit.MILLISECONDS.sleep(shutdownWaitTime);
-                        } catch (InterruptedException ignore) {
+                        } catch (InterruptedException ex) {
+                            LOG.error(ex.getMessage(), ex);
                         }
                         hook.run();
                     }, hook.getName());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/SwaggerConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 import java.util.stream.Collectors;
 
 import org.apache.shenyu.common.constant.Constants;
@@ -120,7 +121,7 @@ public Object postProcessAfterInitialization(final Object bean, final String bea
 
             private <T extends RequestMappingInfoHandlerMapping> void customizeSpringfoxHandlerMappings(final List<T> mappings) {
                 List<T> copy = mappings.stream()
-                        .filter(mapping -> mapping.getPatternParser() == null)
+                        .filter(mapping -> Objects.isNull(mapping.getPatternParser()))
                         .collect(Collectors.toList());
                 mappings.clear();
                 mappings.addAll(copy);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/DataPermissionDO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.admin.model.entity;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.dto.DataPermissionDTO;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import reactor.util.StringUtils;
 
 import java.sql.Timestamp;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/PermissionDO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.admin.model.entity;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.dto.PermissionDTO;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import reactor.util.StringUtils;
 
 import java.sql.Timestamp;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/ResourceDO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.entity;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.dto.CreateResourceDTO;
 import org.apache.shenyu.admin.model.dto.ResourceDTO;
 import org.apache.shenyu.common.utils.UUIDUtils;
@@ -25,8 +26,6 @@
 import java.util.Objects;
 import java.util.Optional;
 
-import reactor.util.StringUtils;
-
 /**
  * The Resource Entity.
  */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/RoleDO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.admin.model.entity;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.dto.RoleDTO;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import reactor.util.StringUtils;
 
 import java.sql.Timestamp;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/UserRoleDO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.admin.model.entity;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.dto.UserRoleDTO;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import reactor.util.StringUtils;
 
 import java.sql.Timestamp;
 import java.util.Objects;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/spring/ShenyuHttpRegistryControllerBeanPostProcessor.java
Patch:
@@ -36,7 +36,7 @@ public class ShenyuHttpRegistryControllerBeanPostProcessor implements BeanPostPr
     public Object postProcessAfterInitialization(final Object bean, final String beanName) throws BeansException {
         if (bean instanceof ShenyuClientHttpRegistryController) {
             try {
-                RequestMappingHandlerMapping requestMappingHandlerMapping = SpringBeanUtils.getInstance().getBean(RequestMappingHandlerMapping.class);
+                RequestMappingHandlerMapping requestMappingHandlerMapping = SpringBeanUtils.getInstance().getBean("requestMappingHandlerMapping", RequestMappingHandlerMapping.class);
                 Method method = requestMappingHandlerMapping.getClass().getSuperclass().getSuperclass().getDeclaredMethod("detectHandlerMethods", Object.class);
                 method.setAccessible(true);
                 method.invoke(requestMappingHandlerMapping, beanName);

File: shenyu-examples/shenyu-examples-brpc/shenyu-examples-brpc-service/src/main/java/org/apache/shenyu/examples/brpc/service/impl/BrpcTestServiceImpl.java
Patch:
@@ -35,7 +35,7 @@
 @ShenyuBrpcService
 public class BrpcTestServiceImpl implements BrpcTestService {
 
-    private static final Integer SIZE = 1024 * 1024;
+    private static final Integer SIZE = 20000;
 
     @Override
     @ShenyuBrpcClient("/getArray")

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/discovery/DefaultDiscoveryProcessor.java
Patch:
@@ -82,7 +82,7 @@ public void createDiscovery(final DiscoveryDO discoveryDO) {
         ShenyuDiscoveryService discoveryService = ExtensionLoader.getExtensionLoader(ShenyuDiscoveryService.class).getJoin(type);
         String props = discoveryDO.getProps();
         DiscoveryConfig discoveryConfig = GsonUtils.getGson().fromJson(props, DiscoveryConfig.class);
-        discoveryConfig.setServerList(discoveryDO.getServiceList());
+        discoveryConfig.setServerList(discoveryDO.getServerList());
         discoveryService.init(discoveryConfig);
         discoveryServiceCache.put(discoveryDO.getId(), discoveryService);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ProxySelectorDTO.java
Patch:
@@ -25,7 +25,7 @@
 import java.io.Serializable;
 
 /**
- * proxy selector dto.
+ * ProxySelectorDTO.
  */
 public class ProxySelectorDTO implements Serializable {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/DiscoveryUpstreamDO.java
Patch:
@@ -333,7 +333,7 @@ public DiscoveryUpstreamBuilder dateUpdated(final Timestamp dateUpdated) {
         }
 
         /**
-         * discoveryId.
+         * discoveryHandlerId.
          *
          * @param discoveryHandlerId discoveryHandlerId
          * @return DiscoveryUpstreamBuilder

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListenerTest.java
Patch:
@@ -119,6 +119,7 @@ public void testCompareChangedGroup() {
         assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D62,1607068124", this.httpServletRequest.getParameter(ConfigGroupEnum.APP_AUTH.name()));
         assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D61,1607068123", this.httpServletRequest.getParameter(ConfigGroupEnum.SELECTOR.name()));
         assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D60,1607068122", this.httpServletRequest.getParameter(ConfigGroupEnum.META_DATA.name()));
+        assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D59,1607068121", this.httpServletRequest.getParameter(ConfigGroupEnum.PROXY_SELECTOR.name()));
         for (ConfigGroupEnum group : ConfigGroupEnum.values()) {
             String[] params = Objects.requireNonNull(this.httpServletRequest.getParameter(group.name())).split(",");
             assertNotNull(params);

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/WebsocketDataHandlerTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
+import org.apache.shenyu.sync.data.api.ProxySelectorDataSubscriber;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
@@ -45,7 +46,8 @@ public void testWebsocketDataHandler() {
         pluginDataSubscriber = mock(PluginDataSubscriber.class);
         List<AuthDataSubscriber> authDataSubscribers = new LinkedList<>();
         List<MetaDataSubscriber> metaDataSubscribers = new LinkedList<>();
-        websocketDataHandler = new WebsocketDataHandler(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers);
+        List<ProxySelectorDataSubscriber> proxySelectorDataSubscribers = new LinkedList<>();
+        websocketDataHandler = new WebsocketDataHandler(pluginDataSubscriber, metaDataSubscribers, authDataSubscribers, proxySelectorDataSubscribers);
     }
 
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/exception/ExceptionHandlersTest.java
Patch:
@@ -98,10 +98,10 @@ public void testServerExceptionHandlerByException() {
 
     @Test
     public void testServerExceptionHandlerByShenyuException() {
-        Exception shenyuException = new ShenyuException("Test shenyuException message!");
-        ShenyuAdminResult result = exceptionHandlersUnderTest.handleExceptionHandler(shenyuException);
+        ShenyuException shenyuException = new ShenyuException(new Throwable("Test shenyuException message!"));
+        ShenyuAdminResult result = exceptionHandlersUnderTest.handleShenyuException(shenyuException);
         assertEquals(result.getCode().intValue(), CommonErrorCode.ERROR);
-        assertEquals(result.getMessage(), shenyuException.getMessage());
+        assertEquals(result.getMessage(), shenyuException.getCause().getMessage());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/utils/LogCollectConfigUtils.java
Patch:
@@ -38,8 +38,7 @@ public final class LogCollectConfigUtils {
 
     private static GenericGlobalConfig genericGlobalConfig;
 
-    private static final GenericGlobalConfig DEFAULT_GLOBAL_LOG_CONFIG =
-            new GenericGlobalConfig();
+    private static final GenericGlobalConfig DEFAULT_GLOBAL_LOG_CONFIG = new GenericGlobalConfig();
 
     private static Map<String, Sampler> apiSamplerMap = new HashMap<>();
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DashboardUserDTO.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.admin.model.dto;
 
 import org.apache.shenyu.admin.model.constant.RegConstant;
-import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.utils.FailI18nMessage;
 
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
@@ -48,7 +48,7 @@ public class DashboardUserDTO implements Serializable {
     /**
      * user password.
      */
-    @Pattern(regexp = RegConstant.PASSWORD_RULE, message = ShenyuResultMessage.PASSWORD_MUST)
+    @Pattern(regexp = RegConstant.PASSWORD_RULE, message = '{' + FailI18nMessage.PASSWORD_MUST + '}')
     private String password;
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DashboardUserModifyPasswordDTO.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.admin.model.dto;
 
 import org.apache.shenyu.admin.model.constant.RegConstant;
-import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.admin.utils.FailI18nMessage;
 
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.Pattern;
@@ -43,7 +43,7 @@ public class DashboardUserModifyPasswordDTO implements Serializable {
      * user password.
      */
     @NotBlank
-    @Pattern(regexp = RegConstant.PASSWORD_RULE, message = ShenyuResultMessage.PASSWORD_MUST)
+    @Pattern(regexp = RegConstant.PASSWORD_RULE, message = '{' + FailI18nMessage.PASSWORD_MUST + '}')
     private String password;
     
     /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ApiControllerTest.java
Patch:
@@ -77,7 +77,7 @@ public final class ApiControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(apiController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
         this.apiVO = ApiVO.builder()
                 .id("123")

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MetaDataControllerTest.java
Patch:
@@ -85,7 +85,7 @@ public final class MetaDataControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(metaDataController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MockRequestRecordControllerTest.java
Patch:
@@ -62,7 +62,7 @@ public class MockRequestRecordControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(mockRequestRecordController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/PluginControllerTest.java
Patch:
@@ -88,7 +88,7 @@ public final class PluginControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(pluginController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
         this.pluginVO = new PluginVO("123", "1", "t_n", "1", 1, true,
                 DateUtils.localDateTimeToString(LocalDateTime.now()), DateUtils.localDateTimeToString(LocalDateTime.now()));

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/PluginHandleControllerTest.java
Patch:
@@ -76,7 +76,7 @@ public final class PluginHandleControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(pluginHandleController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ResourceControllerTest.java
Patch:
@@ -73,7 +73,7 @@ public class ResourceControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(resourceController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/RuleControllerTest.java
Patch:
@@ -95,7 +95,7 @@ public final class RuleControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(ruleController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
         // mock login user
         final UserInfo mockLoginUser = new UserInfo();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SandboxControllerTest.java
Patch:
@@ -64,7 +64,7 @@ public final class SandboxControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(sandboxController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SelectorControllerTest.java
Patch:
@@ -89,7 +89,7 @@ public final class SelectorControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(selectorController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
         // mock login user
         final UserInfo mockLoginUser = new UserInfo();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ShenyuDictControllerTest.java
Patch:
@@ -79,7 +79,7 @@ public final class ShenyuDictControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(shenyuDictController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/TagControllerTest.java
Patch:
@@ -63,7 +63,7 @@ public final class TagControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(tagController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/TagRelationControllerTest.java
Patch:
@@ -63,7 +63,7 @@ public final class TagRelationControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(tagRelationController)
-                .setControllerAdvice(new ExceptionHandlers())
+                .setControllerAdvice(new ExceptionHandlers(null))
                 .build();
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/exception/ExceptionHandlersTest.java
Patch:
@@ -85,7 +85,7 @@ public static void afterClass() {
 
     @BeforeEach
     public void setUp() {
-        exceptionHandlersUnderTest = new ExceptionHandlers();
+        exceptionHandlersUnderTest = new ExceptionHandlers(null);
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/ShenyuAdminBootstrap.java
Patch:
@@ -35,4 +35,5 @@ public class ShenyuAdminBootstrap {
     public static void main(final String[] args) {
         SpringApplication.run(ShenyuAdminBootstrap.class, args);
     }
+
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedListener.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.dto.AppAuthData;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.PluginData;
-import org.apache.shenyu.common.dto.ProxySelectorData;
+import org.apache.shenyu.common.dto.DiscoverySyncData;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
@@ -80,12 +80,12 @@ default void onRuleChanged(List<RuleData> changed, DataEventTypeEnum eventType)
     }
 
     /**
-     * invoke this method when proxy selector was received.
+     * invoke this method when ProxySelector was changed.
      *
      * @param changed   the changed
      * @param eventType the event type
      */
-    default void onProxySelectorChanged(List<ProxySelectorData> changed, DataEventTypeEnum eventType) {
+    default void onProxySelectorChanged(List<DiscoverySyncData> changed, DataEventTypeEnum eventType) {
     }
 
 }

File: shenyu-discovery/shenyu-discovery-api/src/main/java/org/apache/shenyu/discovery/api/listener/DataChangedEventListener.java
Patch:
@@ -27,5 +27,5 @@ public interface DataChangedEventListener {
      * 
      * @param event data changed event
      */
-    void onChange(DataChangedEvent event);
+    void onChange(DiscoveryDataChangedEvent event);
 }

File: shenyu-discovery/shenyu-discovery-api/src/main/java/org/apache/shenyu/discovery/api/listener/DiscoveryDataChangedEvent.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Data changed event.
  */
-public final class DataChangedEvent {
+public final class DiscoveryDataChangedEvent {
     
     private final String key;
     
@@ -35,7 +35,7 @@ public final class DataChangedEvent {
      * @param value the value
      * @param event the event
      */
-    public DataChangedEvent(final String key, final String value, final Event event) {
+    public DiscoveryDataChangedEvent(final String key, final String value, final Event event) {
         this.key = key;
         this.value = value;
         this.event = event;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonProxySelectorDataSubscriber.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.plugin.base.cache;
 
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
 import org.apache.shenyu.common.dto.ProxySelectorData;
-import org.apache.shenyu.common.dto.convert.selector.DiscoveryUpstream;
 import org.apache.shenyu.plugin.base.handler.ProxySelectorDataHandler;
 import org.apache.shenyu.sync.data.api.ProxySelectorDataSubscriber;
 
@@ -39,7 +39,7 @@ public CommonProxySelectorDataSubscriber(final List<ProxySelectorDataHandler> pr
     }
 
     @Override
-    public void onSubscribe(final ProxySelectorData proxySelectorData, final List<DiscoveryUpstream> upstreamsList) {
+    public void onSubscribe(final ProxySelectorData proxySelectorData, final List<DiscoveryUpstreamData> upstreamsList) {
         Optional.ofNullable(handlerMap.get(proxySelectorData.getPluginName()))
                 .ifPresent(handler -> handler.handlerProxySelector(proxySelectorData, upstreamsList));
     }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/handler/ProxySelectorDataHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.plugin.base.handler;
 
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
 import org.apache.shenyu.common.dto.ProxySelectorData;
-import org.apache.shenyu.common.dto.convert.selector.DiscoveryUpstream;
 
 import java.util.List;
 
@@ -33,7 +33,7 @@ public interface ProxySelectorDataHandler {
      * @param selectorData  selectorData
      * @param upstreamsList upstreamsList
      */
-    void handlerProxySelector(ProxySelectorData selectorData, List<DiscoveryUpstream> upstreamsList);
+    void handlerProxySelector(ProxySelectorData selectorData, List<DiscoveryUpstreamData> upstreamsList);
 
 
     /**

File: shenyu-protocol/shenyu-protocol-tcp/src/main/java/org/apache/shenyu/protocol/tcp/BootstrapServer.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.protocol.tcp;
 
-import org.apache.shenyu.common.dto.convert.selector.DiscoveryUpstream;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
 
 import java.util.List;
 
@@ -38,7 +38,7 @@ public interface BootstrapServer {
      *
      * @param removeList removeList
      */
-    void removeCommonUpstream(List<DiscoveryUpstream> removeList);
+    void removeCommonUpstream(List<DiscoveryUpstreamData> removeList);
 
     /**
      * shutdown.

File: shenyu-protocol/shenyu-protocol-tcp/src/main/java/org/apache/shenyu/protocol/tcp/TcpBootstrapServer.java
Patch:
@@ -21,7 +21,7 @@
 import io.netty.handler.logging.LogLevel;
 import io.netty.handler.logging.LoggingHandler;
 
-import org.apache.shenyu.common.dto.convert.selector.DiscoveryUpstream;
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
 import org.apache.shenyu.protocol.tcp.connection.Bridge;
 import org.apache.shenyu.protocol.tcp.connection.ConnectionContext;
 import org.apache.shenyu.protocol.tcp.connection.DefaultConnectionConfigProvider;
@@ -66,7 +66,6 @@ public void start(final TcpServerConfiguration tcpServerConfiguration) {
         connectionContext.init(tcpServerConfiguration.getProps());
         LoopResources loopResources = LoopResources.create("shenyu-tcp-bootstrap-server", tcpServerConfiguration.getBossGroupThreadCount(),
                 tcpServerConfiguration.getWorkerGroupThreadCount(), true);
-
         TcpServer tcpServer = TcpServer.create()
                 .doOnChannelInit((connObserver, channel, remoteAddress) -> channel.pipeline().addFirst(new LoggingHandler(LogLevel.INFO)))
                 .wiretap(true)
@@ -101,7 +100,7 @@ private String getIp(final SocketAddress socketAddress) {
      * @param removeList removeList
      */
     @Override
-    public void removeCommonUpstream(final List<DiscoveryUpstream> removeList) {
+    public void removeCommonUpstream(final List<DiscoveryUpstreamData> removeList) {
         eventBus.post(removeList);
     }
 

File: shenyu-sync-data-center/shenyu-sync-data-api/src/main/java/org/apache/shenyu/sync/data/api/ProxySelectorDataSubscriber.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.sync.data.api;
 
+import org.apache.shenyu.common.dto.DiscoveryUpstreamData;
 import org.apache.shenyu.common.dto.ProxySelectorData;
-import org.apache.shenyu.common.dto.convert.selector.DiscoveryUpstream;
 
 import java.util.List;
 
@@ -31,9 +31,9 @@ public interface ProxySelectorDataSubscriber {
      * On subscribe.
      *
      * @param proxySelectorData the proxySelector data
-     * @param upstreamsList upstreamsList
+     * @param upstreamsList     upstreamsList
      */
-    void onSubscribe(ProxySelectorData proxySelectorData, List<DiscoveryUpstream> upstreamsList);
+    void onSubscribe(ProxySelectorData proxySelectorData, List<DiscoveryUpstreamData> upstreamsList);
 
     /**
      * Un subscribe.

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/ClientInfoRefreshedEventListener.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.client.core.disruptor.ShenyuClientRegisterEventPublisher;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.springframework.context.ApplicationListener;
 import org.springframework.context.event.ContextRefreshedEvent;
 
@@ -62,6 +63,7 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {
                 .rpcType(rpcTypeEnum.getName())
                 .host(host)
                 .port(port)
+                .eventType(EventType.REGISTER)
                 .build();
 
         publisher.publishEvent(uriRegisterDTO);

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java
Patch:
@@ -68,7 +68,7 @@
 @ApiModule("/test")
 public class HttpTestController {
 
-    private static final Integer SIZE = 1024 * 1024;
+    private static final Integer SIZE = 20000;
 
     private static final Logger LOGGER = LoggerFactory.getLogger(HttpTestController.class);
 

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/HttpTestControllerTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.shenyu.integratedtest.common.dto.UserDTO;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
 import org.apache.shenyu.integratedtest.common.result.ResultBean;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 import org.junit.jupiter.api.Test;
 
 import java.io.BufferedReader;
@@ -41,7 +42,6 @@
 import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.springframework.http.MediaType.APPLICATION_OCTET_STREAM_VALUE;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/LoggingElasticSearchPluginTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.elasticsearch.client.RestClient;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -71,6 +72,7 @@ public static void setup() throws IOException {
     }
 
     @Test
+    @Disabled
     public void testElasticSearchPlugin() throws Exception {
         String result = HttpHelper.INSTANCE.postGateway(LOGGING_ELASTIC_SEARCH_PATH, String.class);
         assertNotNull(result);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springcloud/src/main/java/org/apache/shenyu/springboot/starter/client/springcloud/ShenyuSpringCloudClientConfiguration.java
Patch:
@@ -17,13 +17,15 @@
 
 package org.apache.shenyu.springboot.starter.client.springcloud;
 
+import org.apache.shenyu.client.auto.config.ClientRegisterConfiguration;
 import org.apache.shenyu.client.springcloud.init.SpringCloudClientEventListener;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.VersionUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.Environment;
@@ -50,6 +52,7 @@ public class ShenyuSpringCloudClientConfiguration {
      * @return the spring cloud client bean post processor
      */
     @Bean
+    @ConditionalOnMissingBean(ClientRegisterConfiguration.class)
     public SpringCloudClientEventListener springCloudClientEventListener(final ShenyuClientConfig clientConfig,
                                                                         final ShenyuClientRegisterRepository shenyuClientRegisterRepository,
                                                                         final Environment env) {

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-consul/src/test/java/org/apache/shenyu/register/instance/consul/ConsulInstanceRegisterRepositoryTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shenyu.register.instance.api.config.RegisterConfig;
 import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
 import org.apache.shenyu.register.instance.api.path.InstancePathConstants;
-import org.apache.shenyu.register.instance.api.watcher.WatcherListener;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedConstruction;
@@ -114,7 +113,7 @@ public void testSelectInstancesAndWatcher() {
             properties.setProperty("enabledServerRebalance", "true");
             instanceConfig.setProps(properties);
             repository.init(instanceConfig);
-            repository.selectInstancesAndWatcher(InstancePathConstants.buildInstanceParentPath(), mock(WatcherListener.class));
+            repository.selectInstances(InstancePathConstants.buildInstanceParentPath());
             repository.close();
         }
     }

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-etcd/src/test/java/org/apache/shenyu/register/instance/etcd/EtcdInstanceRegisterRepositoryTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.shenyu.register.instance.api.config.RegisterConfig;
 import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
 import org.apache.shenyu.register.instance.api.path.InstancePathConstants;
-import org.apache.shenyu.register.instance.api.watcher.WatcherListener;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -154,7 +153,7 @@ public void testSelectInstancesAndWatcher() {
             RegisterConfig config = new RegisterConfig();
             repository.init(config);
             repository.persistInstance(data);
-            repository.selectInstancesAndWatcher(InstancePathConstants.buildInstanceParentPath(), mock(WatcherListener.class));
+            repository.selectInstances(InstancePathConstants.buildInstanceParentPath());
             repository.close();
         }
     }

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/test/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepositoryTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.alibaba.nacos.api.naming.NamingService;
 import com.alibaba.nacos.api.naming.pojo.Instance;
 import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
-import org.apache.shenyu.register.instance.api.watcher.WatcherListener;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -98,8 +97,7 @@ public void testPersistInstance() {
     @Test
     public void testSelectInstancesAndWatcher() {
         String selectKey = "shenyu-instances";
-        WatcherListener watcherListener = mock(WatcherListener.class);
-        repository.selectInstancesAndWatcher(selectKey, watcherListener);
+        repository.selectInstances(selectKey);
         repository.close();
     }
 }

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/test/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperInstanceRegisterRepositoryTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.shenyu.register.instance.api.config.RegisterConfig;
 import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
 import org.apache.shenyu.register.instance.api.path.InstancePathConstants;
-import org.apache.shenyu.register.instance.api.watcher.WatcherListener;
 import org.apache.zookeeper.WatchedEvent;
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedConstruction;
@@ -99,7 +98,7 @@ public void testSelectInstancesAndWatcher() throws Exception {
             final Properties configProps = config.getProps();
             configProps.setProperty("digest", "digest");
             repository.init(config);
-            repository.selectInstancesAndWatcher(InstancePathConstants.buildInstanceParentPath(), mock(WatcherListener.class));
+            repository.selectInstances(InstancePathConstants.buildInstanceParentPath());
             WatchedEvent mockEvent = mock(WatchedEvent.class);
             when(mockEvent.getPath()).thenReturn(InstancePathConstants.buildInstanceParentPath());
             watcherArr[0].process(mockEvent);

File: shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/proxy/BrpcProxyService.java
Patch:
@@ -79,7 +79,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
             params = new Object[num];
             Map<String, Object> bodyMap = GsonUtils.getInstance().convertToMap(body);
             for (int i = 0; i < num; i++) {
-                params[i] = bodyMap.get(brpcParamInfo.getParamNames()[i]).toString();
+                params[i] = bodyMap.get(brpcParamInfo.getParamNames()[i]);
             }
         }
         initThreadPool();

File: shenyu-plugin/shenyu-plugin-brpc/src/test/java/org/apache/shenyu/plugin/brpc/cache/ApplicationConfigCacheTest.java
Patch:
@@ -64,9 +64,9 @@ public void testMethodInfo() {
     public void testBrpcParamInfo() {
         ApplicationConfigCache.BrpcParamInfo paramInfo = new ApplicationConfigCache.BrpcParamInfo(null, null);
         paramInfo.setParamNames(new String[]{"test"});
-        paramInfo.setParamTypes(new Class<?>[]{ApplicationConfigCache.class});
+        paramInfo.setParamTypes(new String[]{"org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache"});
         Assertions.assertEquals(paramInfo.getParamNames()[0], "test");
-        Assertions.assertEquals(paramInfo.getParamTypes()[0], ApplicationConfigCache.class);
+        Assertions.assertEquals(paramInfo.getParamTypes()[0], "org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache");
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/constant/RegConstant.java
Patch:
@@ -25,7 +25,7 @@ public final class RegConstant {
     /**
      * Minimum length of 8, including upper and lower case letters, numbers and special characters.
      */
-    public static final String PASSWORD_RULE = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$";
+    public static final String PASSWORD_RULE = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&=_+-])[A-Za-z\\d@$!%*?&=_+-]{8,}$";
     
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListener.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.listener.http;
 
 import com.google.common.collect.Lists;
+import java.util.Objects;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;
@@ -167,7 +168,7 @@ private List<ConfigGroupEnum> compareChangedGroup(final HttpServletRequest reque
         for (ConfigGroupEnum group : ConfigGroupEnum.values()) {
             // md5,lastModifyTime
             String[] params = StringUtils.split(request.getParameter(group.name()), ',');
-            if (params == null || params.length != 2) {
+            if (Objects.isNull(params) || params.length != 2) {
                 throw new ShenyuException("group param invalid:" + request.getParameter(group.name()));
             }
             String clientMd5 = params[0];
@@ -360,7 +361,7 @@ public void run() {
          */
         void sendResponse(final List<ConfigGroupEnum> changedGroups) {
             // cancel scheduler
-            if (null != asyncTimeoutFuture) {
+            if (Objects.nonNull(asyncTimeoutFuture)) {
                 asyncTimeoutFuture.cancel(false);
             }
             generateResponse((HttpServletResponse) asyncContext.getResponse(), changedGroups);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/bean/DocItem.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.Collection;
 import java.util.List;
+import java.util.Objects;
 import org.apache.commons.lang3.StringUtils;
 
 /**
@@ -74,7 +75,7 @@ public class DocItem {
      */
     public boolean isUploadRequest() {
         boolean upload = false;
-        if (requestParameters != null) {
+        if (Objects.nonNull(requestParameters)) {
             upload = requestParameters.stream().map(DocParameter::getType).anyMatch("file"::equalsIgnoreCase);
         }
         return multiple || upload;
@@ -262,6 +263,7 @@ public void setApiOrder(final int apiOrder) {
 
     /**
      * getRequestHeaders.
+     *
      * @return request headers
      */
     public List<DocParameter> getRequestHeaders() {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/AbstractReflectGetterSetterTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin;
 
+import java.util.Objects;
 import org.junit.jupiter.api.Test;
 
 import java.beans.IntrospectionException;
@@ -107,7 +108,7 @@ public void testGetAndSet() throws Exception {
                     if (f.isSynthetic()) {
                         return;
                     }
-                    if (excludeFields != null && excludeFields.contains(f.getName())) {
+                    if (Objects.nonNull(excludeFields) && excludeFields.contains(f.getName())) {
                         return;
                     }
                     try {
@@ -132,7 +133,7 @@ public void testGetAndSet() throws Exception {
 
     private Object defaultValue(final Class<?> clazz) throws IllegalAccessException, InstantiationException {
         final Object obj = DEFAULT_MAPPERS.get(clazz);
-        if (obj != null) {
+        if (Objects.nonNull(obj)) {
             return obj;
         }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagMapperTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import javax.annotation.Resource;
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.model.entity.TagDO;
@@ -75,7 +76,7 @@ public void testSelectByPrimaryKey() {
         int count = tagMapper.insertSelective(record);
         assertThat(count, greaterThan(0));
         TagDO tagDO = tagMapper.selectByPrimaryKey(record.getId());
-        assertThat(tagDO != null, equalTo(true));
+        assertThat(Objects.nonNull(tagDO), equalTo(true));
         int delete = tagMapper.deleteByPrimaryKey(record.getId());
         assertEquals(delete, 1);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/TagRelationMapperTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.Lists;
 import java.sql.Timestamp;
 import java.util.List;
+import java.util.Objects;
 import javax.annotation.Resource;
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.model.entity.TagRelationDO;
@@ -71,7 +72,7 @@ public void testSelectByPrimaryKey() {
         int count = tagRelationMapper.insertSelective(record);
         assertThat(count, greaterThan(0));
         TagRelationDO tagRelationDO = tagRelationMapper.selectByPrimaryKey(record.getId());
-        assertThat(tagRelationDO != null, equalTo(true));
+        assertThat(Objects.nonNull(tagRelationDO), equalTo(true));
     }
 
     @Test

File: shenyu-client/shenyu-client-brpc/src/main/java/org/apache/shenyu/client/brpc/BrpcContextRefreshedEventListener.java
Patch:
@@ -178,7 +178,7 @@ private String buildRpcExt(final Method method, final String host, final int por
     private BrpcRpcExt.RpcExt build(final Method method) {
         String[] paramNames = localVariableTableParameterNameDiscoverer.getParameterNames(method);
         List<Pair<String, String>> params = new ArrayList<>();
-        if (paramNames != null && paramNames.length > 0) {
+        if (Objects.nonNull(paramNames) && paramNames.length > 0) {
             Class<?>[] paramTypes = method.getParameterTypes();
             for (int i = 0; i < paramNames.length; i++) {
                 params.add(Pair.of(paramTypes[i].getName(), paramNames[i]));

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/register/apimeta/SpringMvcApiMetaBeanMatcher.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.client.springmvc.register.apimeta;
 
+import java.util.Objects;
 import org.apache.shenyu.client.core.register.ApiBean;
 import org.apache.shenyu.client.core.register.matcher.Matcher;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
@@ -26,7 +27,7 @@ public class SpringMvcApiMetaBeanMatcher implements Matcher<ApiBean> {
     @Override
     public boolean match(final ApiBean element) {
         ShenyuSpringMvcClient annotation = element.getAnnotation(ShenyuSpringMvcClient.class);
-        if (annotation != null) {
+        if (Objects.nonNull(annotation)) {
             return !annotation.path().endsWith("/**");
         }
         return true;

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/register/apimeta/SpringMvcPreApiMetaBeanMatcher.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.client.springmvc.register.apimeta;
 
+import java.util.Objects;
 import org.apache.shenyu.client.core.register.ApiBean;
 import org.apache.shenyu.client.core.register.matcher.Matcher;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
@@ -26,6 +27,6 @@ public class SpringMvcPreApiMetaBeanMatcher implements Matcher<ApiBean> {
     @Override
     public boolean match(final ApiBean element) {
         ShenyuSpringMvcClient annotation = element.getAnnotation(ShenyuSpringMvcClient.class);
-        return annotation != null && annotation.path().endsWith("/**");
+        return Objects.nonNull(annotation) && annotation.path().endsWith("/**");
     }
 }

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/MotanServiceEventListener.java
Patch:
@@ -184,7 +184,7 @@ protected void handleClass(final Class<?> clazz, final Object bean, final Shenyu
     private MotanRpcExt.RpcExt buildRpcExt(final Method method) {
         String[] paramNames = localVariableTableParameterNameDiscoverer.getParameterNames(method);
         List<Pair<String, String>> params = new ArrayList<>();
-        if (paramNames != null && paramNames.length > 0) {
+        if (Objects.nonNull(paramNames) && paramNames.length > 0) {
             Class<?>[] paramTypes = method.getParameterTypes();
             for (int i = 0; i < paramNames.length; i++) {
                 params.add(Pair.of(paramTypes[i].getName(), paramNames[i]));

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanEventListener.java
Patch:
@@ -189,7 +189,7 @@ protected String buildApiPath(final Method method, final String superPath, final
     private TarsRpcExt.RpcExt buildRpcExt(final Method method) {
         String[] paramNames = localVariableTableParameterNameDiscoverer.getParameterNames(method);
         List<Pair<String, String>> params = new ArrayList<>();
-        if (paramNames != null && paramNames.length > 0) {
+        if (Objects.nonNull(paramNames) && paramNames.length > 0) {
             Class<?>[] paramTypes = method.getParameterTypes();
             for (int i = 0; i < paramNames.length; i++) {
                 params.add(Pair.of(paramTypes[i].getName(), paramNames[i]));

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/ShenyuServerEndpointerExporter.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.client.spring.websocket.init;
 
+import java.util.Objects;
 import org.apache.shenyu.client.spring.websocket.annotation.ShenyuServerEndpoint;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.slf4j.Logger;
@@ -99,7 +100,7 @@ public void registerEndpoint(final Class<?> pojo) {
 
     private void registerEndpoint(final ServerEndpointConfig endpointConfig) {
         ServerContainer serverContainer = this.getServerContainer();
-        Assert.state(serverContainer != null, "No ServerContainer set");
+        Assert.state(Objects.nonNull(serverContainer), "No ServerContainer set");
 
         try {
             if (this.logger.isDebugEnabled()) {

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/MapUtils.java
Patch:
@@ -49,7 +49,7 @@ public static Map<String, String> transStringMap(final Map<String, Object> map)
      */
     public static <K, V> V computeIfAbsent(final Map<K, V> map, final K key, final Function<? super K, ? extends V> mappingFunction) {
         V v = map.get(key);
-        if (v != null) {
+        if (Objects.nonNull(v)) {
             return v;
         }
         return map.computeIfAbsent(key, mappingFunction);

File: shenyu-discovery/shenyu-discovery-zookeeper/src/main/java/org/apache/shenyu/discovery/zookeeper/ZookeeperDiscoveryService.java
Patch:
@@ -94,7 +94,7 @@ private void start() {
 
     private boolean isExist(final String key) {
         try {
-            return null != client.checkExists().forPath(key);
+            return Objects.nonNull(client.checkExists().forPath(key));
         } catch (Exception e) {
             throw new ShenyuException(e);
         }
@@ -115,7 +115,7 @@ public void watcher(final String key, final DataChangedEventListener listener) {
             this.client.getData().usingWatcher(new CuratorWatcher() {
                 @Override
                 public void process(final WatchedEvent watchedEvent) throws Exception {
-                    if (listener != null) {
+                    if (Objects.nonNull(listener)) {
                         String path = Objects.isNull(watchedEvent.getPath()) ? "" : watchedEvent.getPath();
                         if (StringUtils.isNoneBlank(path)) {
                             client.getData().usingWatcher(this).forPath(path);

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/consumer/QueueConsumer.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.disruptor.consumer;
 
 import com.lmax.disruptor.WorkHandler;
+import java.util.Objects;
 import org.apache.shenyu.disruptor.event.DataEvent;
 import org.apache.shenyu.disruptor.event.OrderlyDataEvent;
 import org.apache.shenyu.disruptor.thread.OrderlyExecutor;
@@ -48,7 +49,7 @@ public QueueConsumer(final OrderlyExecutor executor, final QueueConsumerFactory<
     
     @Override
     public void onEvent(final DataEvent<T> t) {
-        if (t != null) {
+        if (Objects.nonNull(t)) {
             ThreadPoolExecutor executor = orderly(t);
             QueueConsumerExecutor<T> queueConsumerExecutor = factory.create();
             queueConsumerExecutor.setData(t.getData());

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/ResourcesData.java
Patch:
@@ -73,7 +73,7 @@ public static class Resource {
         
         private final SelectorData selector;
         
-        private final List<RuleData> rules; // todo
+        private final List<RuleData> rules;
 
         private Resource(SelectorData selector, List<RuleData> rules) {
             this.selector = selector;

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.examples.http.controller;
 
 import com.google.common.collect.ImmutableMap;
+import java.util.Objects;
 import org.apache.shenyu.client.apidocs.annotations.ApiDoc;
 import org.apache.shenyu.client.apidocs.annotations.ApiModule;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
@@ -325,7 +326,7 @@ public String downloadFile(@RequestPart("file") final FilePart filePart) throws
         filePart.transferTo(tempFile.toFile());
         try (BufferedReader bufferedReader = new BufferedReader(new FileReader(tempFile.toFile()))) {
             String line = bufferedReader.readLine();
-            while (line != null) {
+            while (Objects.nonNull(line)) {
                 LOGGER.info(line);
                 line = bufferedReader.readLine();
             }

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/config/WsSessionManager.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.examples.websocket.config;
 
+import java.util.Objects;
 import lombok.extern.slf4j.Slf4j;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -64,7 +65,7 @@ public static WebSocketSession remove(final String key) {
      */
     public static void removeAndClose(final String key) {
         WebSocketSession session = remove(key);
-        if (session != null) {
+        if (Objects.nonNull(session)) {
             try {
                 session.close();
             } catch (IOException e) {

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/HttpAuthHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.examples.websocket.handler;
 
+import java.util.Objects;
 import org.apache.shenyu.examples.websocket.config.WsSessionManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -43,7 +44,7 @@ public class HttpAuthHandler extends TextWebSocketHandler {
     @Override
     public void afterConnectionEstablished(final WebSocketSession session) throws Exception {
         Object token = session.getAttributes().get("token");
-        if (token != null) {
+        if (Objects.nonNull(token)) {
             // The user is successfully connected and put into the online user cache.
             WsSessionManager.add(token.toString(), session);
         } else {
@@ -77,7 +78,7 @@ protected void handleTextMessage(final WebSocketSession session, final TextMessa
     @Override
     public void afterConnectionClosed(final WebSocketSession session, final CloseStatus status) throws Exception {
         Object token = session.getAttributes().get("token");
-        if (token != null) {
+        if (Objects.nonNull(token)) {
             // The user exits and removes the cache.
             WsSessionManager.remove(token.toString());
         }

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.httpclient;
 
 import io.netty.handler.codec.http.HttpMethod;
+import java.util.Objects;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.enums.PluginEnum;
@@ -70,7 +71,7 @@ protected Mono<HttpClientResponse> doRequest(final ServerWebExchange exchange, f
                         exchange.getAttributes().put(Constants.ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR, contentTypeValue);
                     }
                     HttpStatus status = HttpStatus.resolve(res.status().code());
-                    if (status != null) {
+                    if (Objects.nonNull(status)) {
                         response.setStatusCode(status);
                     } else if (response instanceof AbstractServerHttpResponse) {
                         response.setRawStatusCode(res.status().code());

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/SofaPlugin.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.sofa;
 
 import com.alipay.sofa.rpc.context.RpcInvokeContext;
+import java.util.Objects;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.MetaData;
@@ -120,7 +121,7 @@ public int getOrder() {
     }
 
     private boolean checkMetaData(final MetaData metaData) {
-        return null != metaData && !StringUtils.isBlank(metaData.getMethodName()) && !StringUtils.isBlank(metaData.getServiceName());
+        return Objects.nonNull(metaData) && !StringUtils.isBlank(metaData.getMethodName()) && !StringUtils.isBlank(metaData.getServiceName());
     }
 
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java
Patch:
@@ -113,6 +113,7 @@ private String update(final ApiDTO apiDTO) {
                     .id(UUIDUtils.getInstance().generateShortUuid())
                     .apiId(apiDO.getId())
                     .tagId(tagId)
+                    .dateCreated(currentTime)
                     .dateUpdated(currentTime)
                     .build()).collect(Collectors.toList());
                 tagRelationMapper.deleteByApiId(apiDO.getId());

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-etcd/src/main/java/org/apache/shenyu/register/client/server/etcd/EtcdClientServerRegisterRepository.java
Patch:
@@ -100,9 +100,7 @@ private void publishMetadata(final String metadataData) {
     private void subscribeURI(final String rpcType) {
         String rpcPath = RegisterPathConstants.buildURIContextPathParent(rpcType);
         Set<String> contextList = new HashSet<>();
-        client.getChildren(rpcPath).forEach(dataPath -> {
-            contextList.add(getContext(dataPath));
-        });
+        client.getChildren(rpcPath).forEach(dataPath -> contextList.add(getContext(dataPath)));
         contextList.forEach(context -> registerUriChildrenList(rpcPath, context, rpcType));
         LOGGER.info("subscribe uri change: {}", rpcPath);
         client.subscribeChildChanges(rpcPath, new EtcdListenHandler() {

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-apollo/src/main/java/org/apache/shenyu/register/client/apollo/ApolloClient.java
Patch:
@@ -20,6 +20,7 @@
 import com.ctrip.framework.apollo.openapi.client.ApolloOpenApiClient;
 import com.ctrip.framework.apollo.openapi.dto.NamespaceReleaseDTO;
 import com.ctrip.framework.apollo.openapi.dto.OpenItemDTO;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -64,7 +65,7 @@ public String getItemValue(final String key) {
         if (openItemDTO == null) {
             return null;
         }
-        if (openItemDTO.getKey().equals("timeout")) {
+        if (StringUtils.equals("timeout", openItemDTO.getKey())) {
             LOG.error("apollo client getItemValue time out");
         }
         return openItemDTO.getValue();

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/utils/OkHttpTools.java
Patch:
@@ -107,7 +107,7 @@ public String post(final String url, final String json, final Headers headers) t
     public String get(final String url, final Map<String, Object> query) throws IOException {
         Request.Builder reqBuild = new Request.Builder();
         HttpUrl.Builder urlBuilder = HttpUrl.parse(url).newBuilder();
-        query.forEach((K, V) -> urlBuilder.addQueryParameter(K, String.valueOf(V)));
+        query.forEach((k, v) -> urlBuilder.addQueryParameter(k, String.valueOf(v)));
         reqBuild.url(urlBuilder.build());
         Request request = reqBuild.build();
         return client.newCall(request).execute().body().string();

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/annotation/RequestParamParameterProcessor.java
Patch:
@@ -56,9 +56,7 @@ public boolean processArgument(final ShenyuRequest shenyuRequest, final Annotati
             }
             pathResult.append(name).append("=").append(arg);
         } else if (arg instanceof Map) {
-            ((Map<?, ?>) arg).forEach((key, value) -> {
-                pathResult.append(key).append("=").append(value);
-            });
+            ((Map<?, ?>) arg).forEach((key, value) -> pathResult.append(key).append("=").append(value));
         }
         shenyuRequest.setUrl(requestTemplate.getUrl() + pathResult);
         return true;

File: shenyu-sync-data-center/shenyu-sync-data-etcd/src/main/java/org/apache/shenyu/sync/data/etcd/EtcdClient.java
Patch:
@@ -141,7 +141,7 @@ public List<String> getChildrenKeys(final String prefix, final String separator)
         return keyValues.stream()
                 .map(e -> getSubNodeKeyName(prefix, e.getKey().toString(UTF_8), separator))
                 .distinct()
-                .filter(e -> Objects.nonNull(e))
+                .filter(Objects::nonNull)
                 .collect(Collectors.toList());
     }
 
@@ -159,7 +159,7 @@ public List<String> getChildrenKeysByMap(final String prefix, final String separ
                 .filter(e -> e.getKey().contains(prefix))
                 .map(e -> getSubNodeKeyName(prefix, e.getKey(), separator))
                 .distinct()
-                .filter(e -> Objects.nonNull(e))
+                .filter(Objects::nonNull)
                 .collect(Collectors.toList());
     }
 

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/WebFluxResultUtils.java
Patch:
@@ -80,7 +80,7 @@ public static Mono<Void> result(final ServerWebExchange exchange, final Object r
      * @return the mono
      */
     public static Mono<Void> noSelectorResult(final String pluginName, final ServerWebExchange exchange) {
-        LOG.error("can not match selector data: {}", pluginName);
+        LOG.error("can not match selector data: {} , path is {}", pluginName, exchange.getRequest().getURI().getPath());
         Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SELECTOR_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.SELECTOR_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
@@ -93,7 +93,7 @@ public static Mono<Void> noSelectorResult(final String pluginName, final ServerW
      * @return the mono
      */
     public static Mono<Void> noRuleResult(final String pluginName, final ServerWebExchange exchange) {
-        LOG.error("can not match rule data: {}", pluginName);
+        LOG.error("can not match rule data: {} , path is {}", pluginName, exchange.getRequest().getURI().getPath());
         Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.RULE_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.RULE_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/WaitForHelper.java
Patch:
@@ -56,7 +56,7 @@ public class WaitForHelper {
     public WaitForHelper() {
     }
 
-    public WaitForHelper(int retryTimes, Duration timeInRetry, Duration timeout) {
+    public WaitForHelper(final int retryTimes, final Duration timeInRetry, final Duration timeout) {
         this.retryTimes = retryTimes;
         this.timeInRetry = timeInRetry;
         this.timeout = timeout;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-springcloud/src/test/java/org/apache/shenyu/springboot/starter/plugin/springcloud/SpringCloudPluginConfigurationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.springboot.starter.plugin.springcloud;
 
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
@@ -45,6 +46,7 @@ public void before() {
         applicationContextRunner = new ApplicationContextRunner()
             .withConfiguration(AutoConfigurations.of(SpringCloudPluginConfiguration.class))
             .withBean(SpringCloudPluginConfigurationTest.class)
+            .withBean(ShenyuConfig.class)
             .withPropertyValues("debug=true");
     }
 

File: shenyu-client/shenyu-client-brpc/src/main/java/org/apache/shenyu/client/brpc/BrpcContextRefreshedEventListener.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
@@ -93,6 +94,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context, f
                 .contextPath(this.getContextPath())
                 .appName(this.getAppName())
                 .rpcType(RpcTypeEnum.BRPC.getName())
+                .eventType(EventType.REGISTER)
                 .host(super.getHost())
                 .port(Integer.parseInt(this.getPort()))
                 .build();

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.aop.support.AopUtils;
 import org.springframework.context.ApplicationContext;
@@ -111,6 +112,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,
                     .contextPath(getContextPath())
                     .appName(buildAppName(bean))
                     .rpcType(RpcTypeEnum.DUBBO.getName())
+                    .eventType(EventType.REGISTER)
                     .host(super.getHost())
                     .port(Integer.valueOf(getPort()))
                     .build();

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.aop.support.AopUtils;
 import org.springframework.context.ApplicationContext;
@@ -114,6 +115,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,
                     .contextPath(getContextPath())
                     .appName(buildAppName(bean))
                     .rpcType(RpcTypeEnum.DUBBO.getName())
+                    .eventType(EventType.REGISTER)
                     .host(super.getHost())
                     .port(Integer.valueOf(getPort()))
                     .build();

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/GrpcClientEventListener.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.annotation.AnnotatedElementUtils;
@@ -103,6 +104,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context, f
                 .contextPath(getContextPath())
                 .appName(getIpAndPort())
                 .rpcType(RpcTypeEnum.GRPC.getName())
+                .eventType(EventType.REGISTER)
                 .host(super.getHost())
                 .port(Integer.parseInt(getPort()))
                 .build();

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListener.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -147,6 +148,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context, f
                     .host(super.getHost())
                     .port(Integer.valueOf(getPort()))
                     .rpcType(RpcTypeEnum.SPRING_CLOUD.getName())
+                    .eventType(EventType.REGISTER)
                     .build();
         } catch (ShenyuException e) {
             throw new ShenyuException(e.getMessage() + "please config ${shenyu.client.http.props.port} in xml/yml !");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListener.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.shenyu.register.common.dto.ApiDocRegisterDTO;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -140,6 +141,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,
                     .host(super.getHost())
                     .port(Integer.valueOf(getPort()))
                     .rpcType(RpcTypeEnum.HTTP.getName())
+                    .eventType(EventType.REGISTER)
                     .build();
         } catch (ShenyuException e) {
             throw new ShenyuException(e.getMessage() + "please config ${shenyu.client.http.props.port} in xml/yml !");

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/MotanServiceEventListener.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
@@ -98,6 +99,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context, f
                 .contextPath(this.getContextPath())
                 .appName(this.getAppName())
                 .rpcType(RpcTypeEnum.MOTAN.getName())
+                .eventType(EventType.REGISTER)
                 .host(this.getHost())
                 .port(Integer.parseInt(this.getPort()))
                 .build();

File: shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceEventListener.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -73,6 +74,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,
                 .contextPath(this.getContextPath())
                 .appName(this.getAppName())
                 .rpcType(RpcTypeEnum.SOFA.getName())
+                .eventType(EventType.REGISTER)
                 .host(super.getHost())
                 .port(Integer.parseInt(getPort()))
                 .build();

File: shenyu-client/shenyu-client-sofa/src/test/java/org/apache/shenyu/client/sofa/SofaServiceEventListenerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
@@ -115,6 +116,7 @@ public void testBuildURIRegisterDTO() {
                 .contextPath(CONTEXT_PATH)
                 .appName(APP_NAME)
                 .rpcType(RpcTypeEnum.SOFA.getName())
+                .eventType(EventType.REGISTER)
                 .host(HOST)
                 .port(Integer.parseInt(PORT))
                 .build();

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanEventListener.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.aop.support.AopUtils;
 import org.springframework.context.ApplicationContext;
@@ -104,6 +105,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,
                 .contextPath(this.contextPath)
                 .appName(this.ipAndPort)
                 .rpcType(RpcTypeEnum.TARS.getName())
+                .eventType(EventType.REGISTER)
                 .host(this.getHost())
                 .port(Integer.parseInt(this.getPort()))
                 .build();

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/SpringWebSocketClientEventListener.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.enums.EventType;
 import org.javatuples.Sextet;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.support.DefaultListableBeanFactory;
@@ -122,6 +123,7 @@ protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context, f
                     .host(super.getHost())
                     .port(Integer.valueOf(getPort()))
                     .rpcType(RpcTypeEnum.WEB_SOCKET.getName())
+                    .eventType(EventType.REGISTER)
                     .build();
         } catch (ShenyuException e) {
             throw new ShenyuException(e.getMessage() + "please config ${shenyu.client.http.props.port} in xml/yml !");

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/matcher/RuleMatcher.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.apache.shenyu.e2e.client.admin.model.data.RuleData;
-import org.apache.shenyu.e2e.client.admin.model.response.RuleDTO;
+import org.apache.shenyu.e2e.model.data.RuleData;
+import org.apache.shenyu.e2e.model.response.RuleDTO;
 import org.json.JSONException;
 import org.skyscreamer.jsonassert.JSONAssert;
 import org.skyscreamer.jsonassert.JSONCompareMode;

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/matcher/SelectorMatcher.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.apache.shenyu.e2e.client.admin.model.data.SelectorData;
-import org.apache.shenyu.e2e.client.admin.model.response.SelectorDTO;
+import org.apache.shenyu.e2e.model.data.SelectorData;
+import org.apache.shenyu.e2e.model.response.SelectorDTO;
 import org.json.JSONException;
 import org.skyscreamer.jsonassert.JSONAssert;
 import org.skyscreamer.jsonassert.JSONCompareMode;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/MatchMode.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model;
+package org.apache.shenyu.e2e.model;
 
 import com.fasterxml.jackson.annotation.JsonValue;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/Plugin.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model;
+package org.apache.shenyu.e2e.model;
 
 import com.fasterxml.jackson.annotation.JsonValue;
-import org.apache.shenyu.e2e.client.admin.model.response.PluginDTO;
+import org.apache.shenyu.e2e.model.response.PluginDTO;
 import org.junit.jupiter.api.Assertions;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/ResourcesData.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model;
+package org.apache.shenyu.e2e.model;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
-import org.apache.shenyu.e2e.client.admin.model.data.RuleData;
-import org.apache.shenyu.e2e.client.admin.model.data.SelectorData;
+import org.apache.shenyu.e2e.model.data.RuleData;
+import org.apache.shenyu.e2e.model.data.SelectorData;
 
 import java.util.List;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/SelectorType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model;
+package org.apache.shenyu.e2e.model;
 
 import com.fasterxml.jackson.annotation.JsonValue;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/ShenYuResult.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model;
+package org.apache.shenyu.e2e.model;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/data/Condition.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.data;
+package org.apache.shenyu.e2e.model.data;
 
 import com.fasterxml.jackson.annotation.JsonValue;
 import org.jetbrains.annotations.NotNull;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/data/PluginData.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.data;
+package org.apache.shenyu.e2e.model.data;
 
 import org.jetbrains.annotations.NotNull;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/data/QueryCondition.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.data;
+package org.apache.shenyu.e2e.model.data;
 
 /**
  * the condition of query.

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/data/ResourceData.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.data;
+package org.apache.shenyu.e2e.model.data;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JsonSerializer;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/data/RuleQueryCondition.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.data;
+package org.apache.shenyu.e2e.model.data;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/data/SearchCondition.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.data;
+package org.apache.shenyu.e2e.model.data;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/data/SelectorQueryCondition.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.data;
+package org.apache.shenyu.e2e.model.data;
 
 import com.fasterxml.jackson.annotation.JsonAlias;
 import com.fasterxml.jackson.annotation.JsonInclude;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/handle/DivideRuleHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.handle;
+package org.apache.shenyu.e2e.model.handle;
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/handle/PluginHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.handle;
+package org.apache.shenyu.e2e.model.handle;
 
 public interface PluginHandle {
 }

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/handle/RuleHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.handle;
+package org.apache.shenyu.e2e.model.handle;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JsonSerializer;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/handle/Upstreams.java
Patch:
@@ -15,15 +15,15 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.handle;
+package org.apache.shenyu.e2e.model.handle;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.google.common.collect.Lists;
-import org.apache.shenyu.e2e.client.admin.model.handle.Upstreams.Serializer;
+import org.apache.shenyu.e2e.model.handle.Upstreams.Serializer;
 
 import java.io.IOException;
 import java.util.List;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/request/RequestVO.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.request;
+package org.apache.shenyu.e2e.model.request;
 
 public interface RequestVO {
 }

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/FakeResourceDTO.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.response;
+package org.apache.shenyu.e2e.model.response;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/LoginInfo.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.response;
+package org.apache.shenyu.e2e.model.response;
 
 import com.fasterxml.jackson.annotation.JsonAlias;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/PaginatedResources.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.response;
+package org.apache.shenyu.e2e.model.response;
 
 import java.util.List;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/Pagination.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.response;
+package org.apache.shenyu.e2e.model.response;
 
 import com.fasterxml.jackson.annotation.JsonAlias;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/PluginDTO.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.response;
+package org.apache.shenyu.e2e.model.response;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/ResourceDTO.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.response;
+package org.apache.shenyu.e2e.model.response;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/model/response/SearchedResources.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.client.admin.model.response;
+package org.apache.shenyu.e2e.model.response;
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/HttpChecker.java
Patch:
@@ -15,11 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.testcase.common.function;
+package org.apache.shenyu.e2e.engine.scenario.function;
 
 import io.restassured.specification.RequestSpecification;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;
-import org.apache.shenyu.e2e.engine.scenario.function.Checker;
 import org.slf4j.MDC;
 
 import java.util.function.Supplier;

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/HttpCheckers.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.testcase.common.function;
+package org.apache.shenyu.e2e.engine.scenario.function;
 
 import io.restassured.http.Method;
 import org.junit.jupiter.api.Assertions;

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/HttpVerifier.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.testcase.common.function;
+package org.apache.shenyu.e2e.engine.scenario.function;
 
 import org.apache.shenyu.e2e.engine.scenario.function.Verifier;
 

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/HttpWaiting.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.testcase.common.function;
+package org.apache.shenyu.e2e.engine.scenario.function;
 
 import io.restassured.specification.RequestSpecification;
 import org.apache.shenyu.e2e.client.gateway.GatewayClient;

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/function/WaitForHelper.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.testcase.common.function;
+package org.apache.shenyu.e2e.engine.scenario.function;
 
 import com.google.common.util.concurrent.MoreExecutors;
 import io.restassured.http.Method;

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/specification/BeforeEachSpec.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.e2e.engine.scenario.specification;
 
-import org.apache.shenyu.e2e.client.admin.model.ResourcesData;
+import org.apache.shenyu.e2e.model.ResourcesData;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuScenarioParameter;
 import org.apache.shenyu.e2e.engine.scenario.function.Checker;
 import org.apache.shenyu.e2e.engine.scenario.function.Waiting;

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/specification/ScenarioSpecLogProxy.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.e2e.engine.scenario.specification;
 
-import org.apache.shenyu.e2e.client.admin.model.ResourcesData;
+import org.apache.shenyu.e2e.model.ResourcesData;
 import org.apache.shenyu.e2e.engine.scenario.function.Checker;
 import org.apache.shenyu.e2e.engine.scenario.function.Deleter;
 import org.apache.shenyu.e2e.engine.scenario.function.Verifier;

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/scenario/specification/ShenYuAfterEachSpec.java
Patch:
@@ -15,11 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.testcase.common.specification;
+package org.apache.shenyu.e2e.engine.scenario.specification;
 
 import org.apache.shenyu.e2e.engine.scenario.function.Checker;
 import org.apache.shenyu.e2e.engine.scenario.function.Deleter;
-import org.apache.shenyu.e2e.engine.scenario.specification.AfterEachSpec;
 
 /**
  * ShenYu after each specification.

File: shenyu-e2e/shenyu-e2e-engine/src/test/java/org/apache/shenyu/e2e/engine/ShenYuEngineTest.java
Patch:
@@ -19,9 +19,9 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
-import org.apache.shenyu.e2e.client.admin.model.data.SelectorQueryCondition;
-import org.apache.shenyu.e2e.client.admin.model.response.SearchedResources;
-import org.apache.shenyu.e2e.client.admin.model.response.SelectorDTO;
+import org.apache.shenyu.e2e.model.data.SelectorQueryCondition;
+import org.apache.shenyu.e2e.model.response.SearchedResources;
+import org.apache.shenyu.e2e.model.response.SelectorDTO;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest.Parameter;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest.ServiceConfigure;

File: shenyu-e2e/shenyu-e2e-engine/src/test/java/org/apache/shenyu/e2e/engine/function/WaitForHelperTest.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.e2e.testcase.common.function;
+package org.apache.shenyu.e2e.engine.function;
 
+import org.apache.shenyu.e2e.engine.scenario.function.WaitForHelper;
 import io.restassured.builder.ResponseSpecBuilder;
 import io.restassured.http.Method;
-import org.apache.shenyu.e2e.testcase.common.function.WaitForHelper;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -175,7 +175,7 @@ private RuleData obtainRuleDataCacheIfEnabled(final String path) {
 
     private void cacheSelectorData(final String path, final SelectorData selectorData) {
         if (Boolean.FALSE.equals(selectorMatchConfig.getCache().getEnabled()) || Objects.isNull(selectorData)
-                || Boolean.FALSE.equals(selectorData.getMatchRestful())) {
+                || Boolean.TRUE.equals(selectorData.getMatchRestful())) {
             return;
         }
         int initialCapacity = selectorMatchConfig.getCache().getInitialCapacity();
@@ -196,7 +196,7 @@ private void cacheSelectorData(final String path, final SelectorData selectorDat
     private void cacheRuleData(final String path, final RuleData ruleData) {
         // if the ruleCache is disabled or rule data is null, not cache rule data.
         if (Boolean.FALSE.equals(ruleMatchConfig.getCache().getEnabled()) || Objects.isNull(ruleData)
-                || Boolean.FALSE.equals(ruleData.getMatchRestful())) {
+                || Boolean.TRUE.equals(ruleData.getMatchRestful())) {
             return;
         }
         int initialCapacity = ruleMatchConfig.getCache().getInitialCapacity();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/gateway/ShenyuConfiguration.java
Patch:
@@ -132,7 +132,7 @@ public PluginDataSubscriber pluginDataSubscriber(final ObjectProvider<List<Plugi
                                                      final ObjectProvider<ApplicationEventPublisher> eventPublisher,
                                                      final ShenyuConfig shenyuConfig) {
         return new CommonPluginDataSubscriber(pluginDataHandlerList.getIfAvailable(Collections::emptyList),
-                eventPublisher.getIfAvailable(), shenyuConfig.getSelectorMatchCache().getTrie(), shenyuConfig.getRuleMatchCache().getTrie());
+                eventPublisher.getIfAvailable(), shenyuConfig.getSelectorMatchCache(), shenyuConfig.getRuleMatchCache());
     }
     
     /**
@@ -303,8 +303,7 @@ public ShenyuTrie shenyuRuleTrie(final ShenyuConfig shenyuConfig) {
         RuleMatchCache ruleMatchCache = shenyuConfig.getRuleMatchCache();
         return new ShenyuTrie(ruleMatchCache.getTrie().getCacheSize(), ruleMatchCache.getTrie().getMatchMode());
     }
-   
-
+    
     /**
      * shenyu trie listener.
      *

File: shenyu-web/src/main/java/org/apache/shenyu/web/controller/LocalPluginController.java
Patch:
@@ -100,8 +100,8 @@ public Mono<String> cleanPlugin(@RequestParam("name") final String name) {
         LOG.info("clean apache shenyu local plugin for {}", name);
         BaseDataCache.getInstance().removePluginDataByPluginName(name);
         List<SelectorData> selectorData = Optional.ofNullable(BaseDataCache.getInstance().obtainSelectorData(name)).orElse(Collections.emptyList());
-        final List<String> selectorIds = selectorData.stream().map(SelectorData::getId).collect(Collectors.toList());
         final List<SelectorData> newSelectorData = CollectionUtils.isNotEmpty(selectorData) ? Lists.newArrayList(selectorData) : Collections.emptyList();
+        final List<String> selectorIds = newSelectorData.stream().map(SelectorData::getId).collect(Collectors.toList());
         BaseDataCache.getInstance().removeSelectDataByPluginName(name);
         // remove selector and rule l1 cache
         MatchDataCache.getInstance().removeSelectorData(name);

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/LocalPluginControllerTest.java
Patch:
@@ -20,7 +20,8 @@
 import com.google.common.collect.Lists;
 import com.google.common.reflect.TypeToken;
 import org.apache.shenyu.common.config.ShenyuConfig;
-import org.apache.shenyu.common.config.ShenyuConfig.ShenyuTrieConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.RuleMatchCache;
+import org.apache.shenyu.common.config.ShenyuConfig.SelectorMatchCache;
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.RuleData;
@@ -94,7 +95,7 @@ public final class LocalPluginControllerTest {
     public void setup() {
         this.mockShenyuTrieConfig();
         ArrayList<PluginDataHandler> pluginDataHandlerList = Lists.newArrayList();
-        subscriber = new CommonPluginDataSubscriber(pluginDataHandlerList, eventPublisher, new ShenyuTrieConfig(), new ShenyuTrieConfig());
+        subscriber = new CommonPluginDataSubscriber(pluginDataHandlerList, eventPublisher, new SelectorMatchCache(), new RuleMatchCache());
         mockMvc = MockMvcBuilders.standaloneSetup(new LocalPluginController(subscriber))
                 .build();
         baseDataCache = BaseDataCache.getInstance();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/apollo/ApolloDataChangedListener.java
Patch:
@@ -36,7 +36,7 @@ public class ApolloDataChangedListener extends AbstractListDataChangedListener {
      */
     public ApolloDataChangedListener(final ApolloClient apolloClient) {
         super(new ChangeData(ApolloPathConstants.PLUGIN_DATA_ID, ApolloPathConstants.SELECTOR_DATA_ID,
-                ApolloPathConstants.RULE_DATA_ID, ApolloPathConstants.AUTH_DATA_ID, ApolloPathConstants.META_DATA_ID));
+                ApolloPathConstants.RULE_DATA_ID, ApolloPathConstants.AUTH_DATA_ID, ApolloPathConstants.META_DATA_ID, ApolloPathConstants.PROXY_SELECTOR_DATA_ID));
         this.apolloClient = apolloClient;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/consul/ConsulDataChangedListener.java
Patch:
@@ -34,7 +34,7 @@ public class ConsulDataChangedListener extends AbstractListDataChangedListener {
 
     public ConsulDataChangedListener(final ConsulClient consulClient) {
         super(new ChangeData(ConsulConstants.PLUGIN_DATA, ConsulConstants.SELECTOR_DATA,
-                ConsulConstants.RULE_DATA, ConsulConstants.AUTH_DATA, ConsulConstants.META_DATA));
+                ConsulConstants.RULE_DATA, ConsulConstants.AUTH_DATA, ConsulConstants.META_DATA, ConsulConstants.PROXY_SELECTOR_DATA_ID));
         this.consulClient = consulClient;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/nacos/NacosDataChangedInit.java
Patch:
@@ -50,7 +50,7 @@ public NacosDataChangedInit(final ConfigService configService) {
 
     @Override
     protected boolean notExist() {
-        return Stream.of(NacosPathConstants.PLUGIN_DATA_ID, NacosPathConstants.AUTH_DATA_ID, NacosPathConstants.META_DATA_ID).allMatch(
+        return Stream.of(NacosPathConstants.PLUGIN_DATA_ID, NacosPathConstants.AUTH_DATA_ID, NacosPathConstants.META_DATA_ID, NacosPathConstants.PROXY_SELECTOR_DATA_ID).allMatch(
             this::dataIdNotExist);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/nacos/NacosDataChangedListener.java
Patch:
@@ -39,7 +39,7 @@ public class NacosDataChangedListener extends AbstractListDataChangedListener {
 
     public NacosDataChangedListener(final ConfigService configService) {
         super(new ChangeData(NacosPathConstants.PLUGIN_DATA_ID, NacosPathConstants.SELECTOR_DATA_ID,
-                NacosPathConstants.RULE_DATA_ID, NacosPathConstants.AUTH_DATA_ID, NacosPathConstants.META_DATA_ID));
+                NacosPathConstants.RULE_DATA_ID, NacosPathConstants.AUTH_DATA_ID, NacosPathConstants.META_DATA_ID, NacosPathConstants.PROXY_SELECTOR_DATA_ID));
         this.configService = configService;
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListenerTest.java
Patch:
@@ -113,6 +113,7 @@ public void testCompareChangedGroup() {
         this.httpServletRequest.setParameter(ConfigGroupEnum.APP_AUTH.name(), "F1887D3F9E6EE7A32FE5E76F4AB80D62,1607068124");
         this.httpServletRequest.setParameter(ConfigGroupEnum.SELECTOR.name(), "F1887D3F9E6EE7A32FE5E76F4AB80D61,1607068123");
         this.httpServletRequest.setParameter(ConfigGroupEnum.META_DATA.name(), "F1887D3F9E6EE7A32FE5E76F4AB80D60,1607068122");
+        this.httpServletRequest.setParameter(ConfigGroupEnum.PROXY_SELECTOR.name(), "F1887D3F9E6EE7A32FE5E76F4AB80D59,1607068121");
         assertEquals("E10ADC3949BA59ABBE56E057F20F883E,1607068125", this.httpServletRequest.getParameter(ConfigGroupEnum.RULE.name()));
         assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D63,1607068126", this.httpServletRequest.getParameter(ConfigGroupEnum.PLUGIN.name()));
         assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D62,1607068124", this.httpServletRequest.getParameter(ConfigGroupEnum.APP_AUTH.name()));

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/test/java/org/apache/shenyu/sync/data/nacos/NacosSyncDataServiceTest.java
Patch:
@@ -35,7 +35,7 @@ public final class NacosSyncDataServiceTest {
     public void setup() {
         ConfigService configService = new NacosMockConfigService();
         nacosSyncDataService = new NacosSyncDataService(configService, null,
-                Collections.emptyList(), Collections.emptyList());
+                Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
     }
 
     @Test

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/extractor/ApiBeansExtractor.java
Patch:
@@ -22,13 +22,13 @@
 
 import java.util.List;
 
-public interface ApiBeansExtractor<T> {
+public interface ApiBeansExtractor {
 
     /**
      * Extract apiBeans from applicationContext.
      *
      * @param applicationContext applicationContext
      * @return apiBeans
      */
-    List<ApiBean<T>> extract(ApplicationContext applicationContext);
+    List<ApiBean> extract(ApplicationContext applicationContext);
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/AnnotatedApiBeanMatcher.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.lang.annotation.Annotation;
 
-public final class AnnotatedApiBeanMatcher<T> extends ApiBeanMatcher<T> {
+public final class AnnotatedApiBeanMatcher extends ApiBeanMatcher {
 
     private final Class<? extends Annotation> aClass;
 
@@ -31,7 +31,7 @@ public AnnotatedApiBeanMatcher(final Class<? extends Annotation> aClass) {
     }
 
     @Override
-    public boolean match(final ApiBean<T> apiBean) {
+    public boolean match(final ApiBean apiBean) {
         return AnnotationUtils
                 .isAnnotationDeclaredLocally(aClass, apiBean.getBeanClass());
     }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/AnnotatedApiDefinitionMatcher.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.lang.annotation.Annotation;
 
-public final class AnnotatedApiDefinitionMatcher<T> extends ApiDefinitionMatcher<T> {
+public final class AnnotatedApiDefinitionMatcher extends ApiDefinitionMatcher {
 
     private final Class<? extends Annotation> aClass;
 
@@ -31,7 +31,7 @@ public AnnotatedApiDefinitionMatcher(final Class<? extends Annotation> aClass) {
     }
 
     @Override
-    public boolean match(final ApiBean<T>.ApiDefinition apiDefinition) {
+    public boolean match(final ApiBean.ApiDefinition apiDefinition) {
         return AnnotatedElementUtils
                 .isAnnotated(apiDefinition.getApiMethod(), aClass);
     }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/ApiBeanMatcher.java
Patch:
@@ -19,6 +19,6 @@
 
 import org.apache.shenyu.client.core.register.ApiBean;
 
-public abstract class ApiBeanMatcher<T> implements Matcher<ApiBean<T>> {
+public abstract class ApiBeanMatcher implements Matcher<ApiBean> {
 
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/matcher/ApiDefinitionMatcher.java
Patch:
@@ -19,6 +19,6 @@
 
 import org.apache.shenyu.client.core.register.ApiBean;
 
-public abstract class ApiDefinitionMatcher<T> implements Matcher<ApiBean<T>.ApiDefinition> {
+public abstract class ApiDefinitionMatcher implements Matcher<ApiBean.ApiDefinition> {
 
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/parser/ApiDocDefinitionParser.java
Patch:
@@ -22,6 +22,6 @@
 
 import java.util.List;
 
-public interface ApiDocDefinitionParser<T> extends Parser<List<ApiDocRegisterDTO>, ApiBean<T>.ApiDefinition> {
+public interface ApiDocDefinitionParser extends Parser<List<ApiDocRegisterDTO>, ApiBean.ApiDefinition> {
 
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/parser/ApiMetaDefinitionParser.java
Patch:
@@ -22,6 +22,6 @@
 
 import java.util.List;
 
-public interface ApiMetaDefinitionParser<T> extends Parser<List<MetaDataRegisterDTO>, ApiBean<T>.ApiDefinition> {
+public interface ApiMetaDefinitionParser extends Parser<List<MetaDataRegisterDTO>, ApiBean.ApiDefinition> {
 
 }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/parser/HttpApiDocDefinitionParser.java
Patch:
@@ -28,14 +28,14 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-public class HttpApiDocDefinitionParser extends AbstractApiDocDefinitionParser<Object> {
+public class HttpApiDocDefinitionParser extends AbstractApiDocDefinitionParser {
 
     public HttpApiDocDefinitionParser(final ClientRegisterConfig clientRegisterConfig) {
         super(clientRegisterConfig);
     }
 
     @Override
-    protected HttpApiSpecificInfo doParse(final ApiBean<Object>.ApiDefinition apiDefinition) {
+    protected HttpApiSpecificInfo doParse(final ApiBean.ApiDefinition apiDefinition) {
 
         RequestMapping requestMapping = apiDefinition.getAnnotation(RequestMapping.class);
 

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/parser/NoHttpApiDocDefinitionParser.java
Patch:
@@ -25,14 +25,14 @@
 
 import java.util.List;
 
-public class NoHttpApiDocDefinitionParser extends AbstractApiDocDefinitionParser<Object> {
+public class NoHttpApiDocDefinitionParser extends AbstractApiDocDefinitionParser {
 
     public NoHttpApiDocDefinitionParser(final ClientRegisterConfig clientRegisterConfig) {
         super(clientRegisterConfig);
     }
 
     @Override
-    protected HttpApiSpecificInfo doParse(final ApiBean<Object>.ApiDefinition apiDefinition) {
+    protected HttpApiSpecificInfo doParse(final ApiBean.ApiDefinition apiDefinition) {
 
         String produce = ShenyuClientConstants.MEDIA_TYPE_ALL_VALUE;
 

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/parser/PreApiMetaBeanParser.java
Patch:
@@ -20,6 +20,6 @@
 import org.apache.shenyu.client.core.register.ApiBean;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 
-public interface PreApiMetaBeanParser<T> extends Parser<MetaDataRegisterDTO, ApiBean<T>> {
+public interface PreApiMetaBeanParser extends Parser<MetaDataRegisterDTO, ApiBean> {
 
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/register/apimeta/SpringMvcApiMetaBeanMatcher.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.shenyu.client.core.register.matcher.Matcher;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
 
-public class SpringMvcApiMetaBeanMatcher implements Matcher<ApiBean<Object>> {
+public class SpringMvcApiMetaBeanMatcher implements Matcher<ApiBean> {
 
     @Override
-    public boolean match(final ApiBean<Object> element) {
+    public boolean match(final ApiBean element) {
         ShenyuSpringMvcClient annotation = element.getAnnotation(ShenyuSpringMvcClient.class);
         if (annotation != null) {
             return !annotation.path().endsWith("/**");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/register/apimeta/SpringMvcApiMetaDefinitionParser.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.List;
 import java.util.Objects;
 
-public class SpringMvcApiMetaDefinitionParser implements ApiMetaDefinitionParser<Object> {
+public class SpringMvcApiMetaDefinitionParser implements ApiMetaDefinitionParser {
 
     private final Boolean addPrefixed;
 
@@ -50,7 +50,7 @@ public SpringMvcApiMetaDefinitionParser(final ClientRegisterConfig clientRegiste
     }
 
     @Override
-    public List<MetaDataRegisterDTO> parse(final ApiBean<Object>.ApiDefinition apiDefinition) {
+    public List<MetaDataRegisterDTO> parse(final ApiBean.ApiDefinition apiDefinition) {
 
         ShenyuSpringMvcClient methodAnnotation = apiDefinition.getAnnotation(ShenyuSpringMvcClient.class);
 

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/register/apimeta/SpringMvcPreApiMetaBeanMatcher.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.shenyu.client.core.register.matcher.Matcher;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
 
-public class SpringMvcPreApiMetaBeanMatcher implements Matcher<ApiBean<Object>> {
+public class SpringMvcPreApiMetaBeanMatcher implements Matcher<ApiBean> {
 
     @Override
-    public boolean match(final ApiBean<Object> element) {
+    public boolean match(final ApiBean element) {
         ShenyuSpringMvcClient annotation = element.getAnnotation(ShenyuSpringMvcClient.class);
         return annotation != null && annotation.path().endsWith("/**");
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/register/apimeta/SpringMvcPreApiMetaBeanParser.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 
-public class SpringMvcPreApiMetaBeanParser implements PreApiMetaBeanParser<Object> {
+public class SpringMvcPreApiMetaBeanParser implements PreApiMetaBeanParser {
 
     private final Boolean addPrefixed;
 
@@ -44,11 +44,11 @@ public SpringMvcPreApiMetaBeanParser(final ClientRegisterConfig clientRegisterCo
     }
 
     @Override
-    public MetaDataRegisterDTO parse(final ApiBean<Object> apiBean) {
+    public MetaDataRegisterDTO parse(final ApiBean apiBean) {
         return apiBean2ApiMeta(apiBean);
     }
 
-    private MetaDataRegisterDTO apiBean2ApiMeta(final ApiBean<Object> apiBean) {
+    private MetaDataRegisterDTO apiBean2ApiMeta(final ApiBean apiBean) {
 
         ShenyuSpringMvcClient annotation = apiBean.getAnnotation(ShenyuSpringMvcClient.class);
         String apiPath = PathUtils.pathJoin(apiBean.getContextPath(), annotation.path());

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/register/apimeta/SpringMvcPreApiMetaBeanParserTest.java
Patch:
@@ -50,7 +50,7 @@ public void init() {
 
     @Test
     public void testParse() throws Exception {
-        ApiBean<Object> apiBean = new ApiBean<>("/http",
+        ApiBean apiBean = new ApiBean("/http",
                 "testClass", TestBeanMatchClass.class.getDeclaredConstructor().newInstance(),
                 "/testClass", TestBeanMatchClass.class);
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/RuleController.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shenyu.admin.model.vo.RuleVO;
 import org.apache.shenyu.admin.service.PageService;
 import org.apache.shenyu.admin.service.RuleService;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.admin.validation.annotation.Existed;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SelectorController.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shenyu.admin.model.vo.SelectorVO;
 import org.apache.shenyu.admin.service.PageService;
 import org.apache.shenyu.admin.service.SelectorService;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.admin.validation.annotation.Existed;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/dict/BatchDictDeletedEvent.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.entity.BaseDO;
 import org.apache.shenyu.admin.model.entity.ShenyuDictDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/metadata/BatchMetaDataDeletedEvent.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.entity.BaseDO;
 import org.apache.shenyu.admin.model.entity.MetaDataDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/plugin/BatchPluginDeletedEvent.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.entity.BaseDO;
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/resource/BatchResourceCreatedEvent.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.admin.model.entity.ResourceDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/resource/BatchResourceDeletedEvent.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.admin.model.entity.ResourceDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/role/BatchRoleDeletedEvent.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.admin.model.entity.RoleDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/rule/BatchRuleDeletedEvent.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.model.entity.RuleDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/rule/RuleUpdatedEvent.java
Patch:
@@ -25,6 +25,7 @@
  */
 public class RuleUpdatedEvent extends RuleChangedEvent {
     
+    private static final long serialVersionUID = 7530493252121753856L;
     
     /**
      * Create a new {@code RuleChangedEvent}.operator is unknown.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/selector/BatchSelectorDeletedEvent.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.model.entity.SelectorDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/user/BatchUserDeletedEvent.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.admin.model.entity.DashboardUserDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.BatchChangedEvent;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.Collection;
 import java.util.List;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java
Patch:
@@ -37,10 +37,10 @@
 import org.apache.shenyu.admin.model.vo.RuleVO;
 import org.apache.shenyu.admin.model.vo.TagVO;
 import org.apache.shenyu.admin.service.ApiService;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.service.MetaDataService;
 import org.apache.shenyu.admin.service.RuleService;
 import org.apache.shenyu.admin.service.SelectorService;
-import org.apache.shenyu.admin.utils.ListUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.dto.RuleData;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.shenyu.admin.transfer.DashboardUserTransfer;
 import org.apache.shenyu.admin.utils.Assert;
 import org.apache.shenyu.admin.utils.JwtUtils;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.constant.AdminConstants;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/MetaDataServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.shenyu.admin.service.publish.MetaDataEventPublisher;
 import org.apache.shenyu.admin.transfer.MetaDataTransfer;
 import org.apache.shenyu.admin.utils.Assert;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.dto.MetaData;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PermissionServiceImpl.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.shenyu.admin.model.vo.ResourceVO;
 import org.apache.shenyu.admin.service.PermissionService;
 import org.apache.shenyu.admin.utils.JwtUtils;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.ResourceUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.common.constant.AdminConstants;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginHandleServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.shenyu.admin.model.vo.ShenyuDictVO;
 import org.apache.shenyu.admin.service.PluginHandleService;
 import org.apache.shenyu.admin.service.publish.PluginHandleEventPublisher;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.springframework.context.event.EventListener;
 import org.springframework.stereotype.Service;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginServiceImpl.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.shenyu.admin.service.publish.PluginEventPublisher;
 import org.apache.shenyu.admin.transfer.PluginTransfer;
 import org.apache.shenyu.admin.utils.Assert;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.constant.AdminConstants;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ResourceServiceImpl.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.shenyu.admin.service.ResourceService;
 import org.apache.shenyu.admin.service.publish.ResourceEventPublisher;
 import org.apache.shenyu.admin.utils.Assert;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.ResourceUtil;
 import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.enums.AdminResourceEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RoleServiceImpl.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.shenyu.admin.model.vo.RoleVO;
 import org.apache.shenyu.admin.service.RoleService;
 import org.apache.shenyu.admin.service.publish.RoleEventPublisher;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/publish/MetaDataEventPublisher.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.admin.model.event.metadata.MetaDataCreatedEvent;
 import org.apache.shenyu.admin.model.event.metadata.MetadataUpdatedEvent;
 import org.apache.shenyu.admin.transfer.MetaDataTransfer;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/publish/SelectorEventPublisher.java
Patch:
@@ -27,12 +27,12 @@
 import org.apache.shenyu.admin.model.event.selector.SelectorCreatedEvent;
 import org.apache.shenyu.admin.model.event.selector.SelectorUpdatedEvent;
 import org.apache.shenyu.admin.service.impl.UpstreamCheckService;
-import org.apache.shenyu.admin.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.stereotype.Component;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ResourceUtil.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.shenyu.common.enums.AdminPluginOperateEnum;
 import org.apache.shenyu.common.enums.AdminResourceEnum;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.utils.ListUtil;
 
 import java.util.ArrayDeque;
 import java.util.ArrayList;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/aspect/PrintApiLogAspectTest.java
Patch:
@@ -21,9 +21,9 @@
 import org.apache.shenyu.admin.aspect.controller.RestControllerAspect;
 import org.apache.shenyu.admin.config.properties.DashboardProperties;
 import org.apache.shenyu.admin.model.custom.UserInfo;
-import org.apache.shenyu.admin.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.reflect.MethodSignature;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DashboardUserServiceTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.shenyu.admin.model.vo.LoginDashboardUserVO;
 import org.apache.shenyu.admin.service.impl.DashboardUserServiceImpl;
 import org.apache.shenyu.admin.service.publish.UserEventPublisher;
-import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.common.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.common.utils.DigestUtils;
 import org.junit.jupiter.api.Test;

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/TrieEventEnum.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Rule trie event enum.
  */
-public enum RuleTrieEventEnum {
+public enum TrieEventEnum {
 
     /**
      * Shenyu Trie insert event.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/TrieEventEnumTest.java
Patch:
@@ -26,11 +26,11 @@
 /**
  * Test Cases for RuleTrieEventEnum.
  */
-public class RuleTrieEventEnumTest {
+public class TrieEventEnumTest {
 
     @Test
     public void testEvent() {
-        Arrays.stream(RuleTrieEventEnum.values())
-                .forEach(ruleTrieEventEnum -> assertEquals(ruleTrieEventEnum, RuleTrieEventEnum.valueOf(ruleTrieEventEnum.name())));
+        Arrays.stream(TrieEventEnum.values())
+                .forEach(trieEventEnum -> assertEquals(trieEventEnum, TrieEventEnum.valueOf(trieEventEnum.name())));
     }
 }

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/ListUtilTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.utils;
+package org.apache.shenyu.common.utils;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/config/HttpClientProperties.java
Patch:
@@ -512,7 +512,7 @@ public Duration getMaxIdleTime() {
         public void setMaxIdleTime(final Long maxIdleTime) {
             this.maxIdleTime = maxIdleTime;
         }
-
+        
         /**
          * The enum Pool type.
          */

File: shenyu-common/src/main/java/org/apache/shenyu/common/config/NettyChannelProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.springboot.starter.netty;
+package org.apache.shenyu.common.config;
 
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.PooledByteBufAllocator;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java
Patch:
@@ -274,7 +274,9 @@ public void remove(final String path, final RuleData ruleData) {
                 String[] parentPathArray = Arrays.copyOfRange(pathParts, 0, pathParts.length - 1);
                 String parentPath = String.join("/", parentPathArray);
                 ShenyuTrieNode parentNode = this.getNode(parentPath);
-                parentNode.getChildren().remove(key);
+                if (parentNode != null) {
+                    parentNode.getChildren().remove(key);
+                }
             }
         }
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/test/java/org/apache/shenyu/springboot/starter/netty/ShenyuNettyWebServerConfigurationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.springboot.starter.netty;
 
+import org.apache.shenyu.common.config.NettyHttpProperties;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterWebSocketServiceImplTest.java
Patch:
@@ -103,7 +103,7 @@ public void testBuildHandle() {
         assertEquals(webSocketUpstreamResult.get("host"), "localhost");
         assertEquals(webSocketUpstreamResult.get("url"), "host:8080");
         assertEquals(webSocketUpstreamResult.get("weight"), 50.0);
-        assertEquals(webSocketUpstreamResult.get("warmup"), 10.0);
+        assertEquals(webSocketUpstreamResult.get("warmup"), 600000.0);
         assertEquals(webSocketUpstreamResult.get("upstreamHost"), "localhost");
         assertEquals(webSocketUpstreamResult.get("status"), true);
 
@@ -123,7 +123,7 @@ public void testBuildHandle() {
         assertEquals(webSocketUpstreamResult.get("host"), "localhost");
         assertEquals(webSocketUpstreamResult.get("url"), "host:8080");
         assertEquals(webSocketUpstreamResult.get("weight"), 50.0);
-        assertEquals(webSocketUpstreamResult.get("warmup"), 10.0);
+        assertEquals(webSocketUpstreamResult.get("warmup"), 600000.0);
         assertEquals(webSocketUpstreamResult.get("upstreamHost"), "localhost");
         assertEquals(webSocketUpstreamResult.get("status"), true);
     }

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/loadbalance/ShenyuSpringCloudServiceChooser.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.springcloud.loadbalance;
 
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
@@ -149,7 +150,7 @@ private static Upstream buildDefaultSpringCloudUpstream(final String upstreamUrl
         return Upstream.builder().url(upstreamUrl)
                 .protocol(protocol)
                 .weight(50)
-                .warmup(10)
+                .warmup(Constants.WARMUP_TIME)
                 .timestamp(0)
                 .build();
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -78,7 +78,7 @@ public final class DashboardUserControllerTest {
             "dateUpdated");
 
     private final DashboardUserDTO dashboardUserDTO = new DashboardUserDTO("2", "userName",
-            "123456", 0, Lists.newArrayList("1"), false);
+            "Admin@123", 0, Lists.newArrayList("1"), false);
 
     @BeforeEach
     public void setUp() throws Exception {

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/command/HystrixCommand.java
Patch:
@@ -75,7 +75,7 @@ private Mono<Void> doFallback() {
             LOG.error("hystrix execute have error: ", getExecutionException());
         }
         final Throwable exception = getExecutionException();
-        return doFallback(exchange, exception);
+        return fallback(exchange, getCallBackUri(), exception);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/command/HystrixCommandOnThread.java
Patch:
@@ -72,7 +72,7 @@ protected Mono<Void> getFallback() {
             LOG.error("hystrix execute have error: ", getExecutionException());
         }
         final Throwable exception = getExecutionException();
-        return doFallback(exchange, exception);
+        return fallback(exchange, getCallBackUri(), exception);
     }
 
     @Override

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/register/parser/PreApiMetaBeanParser.java
Patch:
@@ -20,6 +20,6 @@
 import org.apache.shenyu.client.core.register.ApiBean;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 
-public interface ApiMetaBeanParser<T> extends Parser<MetaDataRegisterDTO, ApiBean<T>> {
+public interface PreApiMetaBeanParser<T> extends Parser<MetaDataRegisterDTO, ApiBean<T>> {
 
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfiguration.java
Patch:
@@ -17,13 +17,15 @@
 
 package org.apache.shenyu.springboot.starter.client.springmvc;
 
+import org.apache.shenyu.client.auto.config.ClientRegisterConfiguration;
 import org.apache.shenyu.client.springmvc.init.SpringMvcClientEventListener;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.VersionUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -48,6 +50,7 @@ public class ShenyuSpringMvcClientConfiguration {
      * @return the spring mvc client bean post processor
      */
     @Bean
+    @ConditionalOnMissingBean(ClientRegisterConfiguration.class)
     public SpringMvcClientEventListener springHttpClientEventListener(final ShenyuClientConfig clientConfig,
                                                                           final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
         return new SpringMvcClientEventListener(clientConfig.getClient().get(RpcTypeEnum.HTTP.getName()), shenyuClientRegisterRepository);

File: shenyu-e2e/shenyu-e2e-case/src/main/java/org/apache/shenyu/e2e/testcase/common/function/HttpChecker.java
Patch:
@@ -24,6 +24,9 @@
 
 import java.util.function.Supplier;
 
+/**
+ * Http Checker interface.
+ */
 @FunctionalInterface
 public interface HttpChecker extends Checker, HttpVerifier {
     

File: shenyu-e2e/shenyu-e2e-case/src/main/java/org/apache/shenyu/e2e/testcase/common/function/HttpVerifier.java
Patch:
@@ -19,6 +19,9 @@
 
 import org.apache.shenyu.e2e.engine.scenario.function.Verifier;
 
+/**
+ * Http Verifier interface.
+ */
 public interface HttpVerifier extends Verifier {
 
 }

File: shenyu-e2e/shenyu-e2e-case/src/main/java/org/apache/shenyu/e2e/testcase/common/function/HttpWaiting.java
Patch:
@@ -23,6 +23,9 @@
 
 import java.util.function.Supplier;
 
+/**
+ * Http Waiting interface.
+ */
 @FunctionalInterface
 public interface HttpWaiting extends Waiting {
     

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/MatchMode.java
Patch:
@@ -21,6 +21,9 @@
 
 import java.util.Locale;
 
+/**
+ * Match mode.
+ */
 public enum MatchMode {
     
     AND(0), OR(1);

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/SelectorType.java
Patch:
@@ -21,6 +21,9 @@
 
 import java.util.Locale;
 
+/**
+ * Type of selector.
+ */
 public enum SelectorType {
     
     FULL(0), CUSTOM(1);

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/data/PluginData.java
Patch:
@@ -19,6 +19,9 @@
 
 import org.jetbrains.annotations.NotNull;
 
+/**
+ * Plugin Data.
+ */
 public class PluginData {
     
     private String id;

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/response/ResourceDTO.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.e2e.client.admin.model.response;
 
-import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 
 import java.util.Date;

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/common/IdGenerator.java
Patch:
@@ -19,6 +19,9 @@
 
 import java.time.LocalTime;
 
+/**
+ * Id Generator.
+ */
 public class IdGenerator {
     
     public static String generateScenarioId() {

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/common/NameUtils.java
Patch:
@@ -17,6 +17,9 @@
 
 package org.apache.shenyu.e2e.common;
 
+/**
+ * Utils for concatenating names.
+ */
 public class NameUtils {
     
     public static String wrap(String name, String scenarioId) {

File: shenyu-e2e/shenyu-e2e-common/src/main/java/org/apache/shenyu/e2e/common/RequestLogConsumer.java
Patch:
@@ -29,6 +29,9 @@
 import java.nio.charset.Charset;
 import java.util.Collections;
 
+/**
+ * Consume request log.
+ */
 public class RequestLogConsumer {
     private static final OutputStream FAKE_STREAM = new OutputStream() {
         @Override

File: shenyu-e2e/shenyu-e2e-engine/src/test/java/org/apache/shenyu/e2e/engine/ShenYuEngineTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
-import org.apache.shenyu.e2e.client.admin.model.data.SearchCondition.SelectorQueryCondition;
+import org.apache.shenyu.e2e.client.admin.model.data.SelectorQueryCondition;
 import org.apache.shenyu.e2e.client.admin.model.response.SearchedResources;
 import org.apache.shenyu.e2e.client.admin.model.response.SelectorDTO;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java
Patch:
@@ -158,7 +158,6 @@ public ShenyuAdminResult updateDashboardUser(@PathVariable("id")
      * @return {@linkplain ShenyuAdminResult}
      */
     @PutMapping("/modify-password/{id}")
-    @RequiresPermissions("system:manager:edit")
     public ShenyuAdminResult modifyPassword(@PathVariable("id")
                                             @Existed(provider = DashboardUserMapper.class,
                                                     message = "user is not found") final String id,

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/AlertTemplateVO.java
Patch:
@@ -17,6 +17,9 @@
 
 package org.apache.shenyu.admin.model.vo;
 
+/**
+ * AlertTemplateVO.
+ */
 public class AlertTemplateVO {
 
     private Long id;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/MetaDataVO.java
Patch:
@@ -20,6 +20,9 @@
 import java.io.Serializable;
 import java.util.Objects;
 
+/**
+ * MetaDataVO.
+ */
 public class MetaDataVO implements Serializable {
 
     private static final long serialVersionUID = -2658925954317878033L;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ApiController.java
Patch:
@@ -118,7 +118,7 @@ public ShenyuAdminResult updateApi(@PathVariable("id")
                                                provider = ApiMapper.class) final String id,
                                        @Valid @RequestBody final ApiDTO apiDTO) {
         apiDTO.setId(id);
-        return createApi(apiDTO);
+        return ShenyuAdminResult.success(apiService.createOrUpdate(apiDTO));
     }
 
     /**

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanEventListener.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.shenyu.common.enums.ApiHttpMethodEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.common.utils.IpUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -155,7 +154,6 @@ public MetaDataRegisterDTO buildMetaDataDTO(final Object bean,
         String serviceName = clazz.getAnnotation(ShenyuTarsService.class).serviceName();
         String ipAndPort = this.ipAndPort;
         String desc = shenyuTarsClient.desc();
-        String host = IpUtils.isCompleteHost(this.getHost()) ? this.getHost() : IpUtils.getHost(this.getHost());
         String configRuleName = shenyuTarsClient.ruleName();
         String ruleName = ("".equals(configRuleName)) ? path : configRuleName;
         String methodName = method.getName();
@@ -168,7 +166,7 @@ public MetaDataRegisterDTO buildMetaDataDTO(final Object bean,
             .methodName(methodName)
             .contextPath(this.contextPath)
             .path(path)
-            .host(host)
+            .host(super.getHost())
             .port(Integer.parseInt(this.getPort()))
             .ruleName(ruleName)
             .pathDesc(desc)

File: shenyu-plugin/shenyu-plugin-general-context/src/main/java/org/apache/shenyu/plugin/general/context/GeneralContextPlugin.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.dto.convert.rule.GeneralContextHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -86,7 +87,7 @@ public String named() {
 
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        return false;
+        return skipExcept(exchange, RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.MOTAN, RpcTypeEnum.SOFA);
     }
 
 }

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -101,7 +101,7 @@ public List<String> supportTypes() {
 
     private void redrawResponseHeaders(final ServerHttpResponse response,
                                        final ClientResponse clientResponse) {
-        response.getCookies().putAll(clientResponse.cookies());
+        // cookies are also headers, and adding them will result in duplicate headers
         HttpHeaders httpHeaders = clientResponse.headers().asHttpHeaders();
         // if the client response has cors header remove cors header from response that crossfilter put
         if (CORS_HEADERS.stream().anyMatch(httpHeaders::containsKey)) {

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/HmacHexUtils.java
Patch:
@@ -18,11 +18,12 @@
 package org.apache.shenyu.common.utils;
 
 import org.apache.commons.codec.digest.HmacAlgorithms;
+import org.apache.commons.codec.digest.HmacUtils;
 
 /**
  * HmacUtils.
  */
-public class HmacUtils {
+public class HmacHexUtils {
 
     /**
      * Returns a HmacMd5 Message Authentication Code (MAC) as hex string (lowercase).
@@ -59,8 +60,7 @@ public static String hmacSha512Hex(final String key, final String valueToDigest)
     }
 
     private static String getHmacHex(final HmacAlgorithms algorithm, final String key, final String valueToDigest) {
-        return new org.apache.commons.codec.digest.HmacUtils(algorithm, key)
-                .hmacHex(valueToDigest);
+        return new HmacUtils(algorithm, key).hmacHex(valueToDigest);
     }
 
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/SignUtils.java
Patch:
@@ -39,9 +39,9 @@ public final class SignUtils {
 
     private static final Map<String, SignFunction> SIGN_FUNCTION_MAP = ImmutableMap.of(
             SIGN_MD5, (key, data) -> DigestUtils.md5Hex(data + key),
-            SIGN_HMD5, HmacUtils::hmacMd5Hex,
-            SIGN_HS256, HmacUtils::hmacSha256Hex,
-            SIGN_HS512, HmacUtils::hmacSha512Hex
+            SIGN_HMD5, HmacHexUtils::hmacMd5Hex,
+            SIGN_HS256, HmacHexUtils::hmacSha256Hex,
+            SIGN_HS512, HmacHexUtils::hmacSha512Hex
     );
 
     /**

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/interceptor/WebSocketInterceptor.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.web.socket.WebSocketHandler;
 import org.springframework.web.socket.server.HandshakeInterceptor;
 
+import java.nio.charset.Charset;
 import java.util.Map;
 
 /**
@@ -52,7 +53,7 @@ public boolean beforeHandshake(final ServerHttpRequest request,
                                    final WebSocketHandler wsHandler, 
                                    final Map<String, Object> attributes) throws Exception {
         LOG.info("Shake hands.");
-        Map<String, String> paramMap = HttpUtil.decodeParamMap(request.getURI().getQuery(), "utf-8");
+        Map<String, String> paramMap = HttpUtil.decodeParamMap(request.getURI().getQuery(), Charset.defaultCharset());
         String uid = paramMap.get("token");
         if (StrUtil.isNotBlank(uid)) {
             attributes.put("token", uid);

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/config/HttpClientProperties.java
Patch:
@@ -501,7 +501,7 @@ public void setAcquireTimeout(final Long acquireTimeout) {
          */
         public Duration getMaxIdleTime() {
             return Optional.ofNullable(maxIdleTime)
-                    .map(it -> Duration.ofMillis(maxIdleTime)).orElse(Duration.ZERO);
+                    .map(it -> Duration.ofMillis(maxIdleTime)).orElse(Duration.ofMillis(3000L));
         }
 
         /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -197,6 +197,7 @@ public static ConnectionProvider buildFixedConnectionPool(final String poolName,
             throw new IllegalArgumentException("Acquire Timeout value must be positive");
         }
         return ConnectionProvider.builder(poolName)
+                .fifo()
                 .maxConnections(maxConnections)
                 .pendingAcquireTimeout(Duration.ofMillis(acquireTimeout))
                 .maxIdleTime(maxIdleTime)
@@ -213,6 +214,7 @@ public static ConnectionProvider buildFixedConnectionPool(final String poolName,
     public ConnectionProvider buildElasticConnectionPool(final String poolName, final Duration maxIdleTime) {
         // about the args, please see https://projectreactor.io/docs/netty/release/reference/index.html#_connection_pool_2
         return ConnectionProvider.builder(poolName)
+                .fifo()
                 .maxConnections(Integer.MAX_VALUE)
                 .pendingAcquireTimeout(Duration.ofMillis(0))
                 .pendingAcquireMaxCount(-1)

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/AbstractHttpClientPlugin.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.enums.RetryEnum;
 import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.common.utils.LogUtils;
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.loadbalancer.factory.LoadBalancerFactory;
@@ -78,7 +79,7 @@ public final Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPl
         final Duration duration = Duration.ofMillis(timeout);
         final int retryTimes = (int) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(0);
         final String retryStrategy = (String) Optional.ofNullable(exchange.getAttribute(Constants.RETRY_STRATEGY)).orElseGet(RetryEnum.CURRENT::getName);
-        LOG.info("The request urlPath is {}, retryTimes is {}, retryStrategy is {}", uri, retryTimes, retryStrategy);
+        LogUtils.debug(LOG, () -> String.format("The request urlPath is: %s, retryTimes is : %s, retryStrategy is : %s", uri, retryTimes, retryStrategy));
         final HttpHeaders httpHeaders = buildHttpHeaders(exchange);
         final Mono<R> response = doRequest(exchange, exchange.getRequest().getMethodValue(), uri, httpHeaders, exchange.getRequest().getBody())
                 .timeout(duration, Mono.error(new TimeoutException("Response took longer than timeout: " + duration)))
@@ -119,7 +120,7 @@ private Mono<R> resend(final Mono<R> clientResponse,
         }
         return result;
     }
-
+    
     private Mono<R> resend(final Mono<R> response,
                            final ServerWebExchange exchange,
                            final Duration duration,

File: shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.concurrent.MemoryLimitCalculator;
-import org.apache.shenyu.common.enums.TrieMatchModeEvent;
+import org.apache.shenyu.common.enums.TrieMatchModeEnum;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -1857,9 +1857,9 @@ public static class ShenyuTrieConfig {
 
         /**
          * match mode.
-         * @see TrieMatchModeEvent
+         * @see TrieMatchModeEnum
          */
-        private String matchMode = TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode();
+        private String matchMode = TrieMatchModeEnum.ANT_PATH_MATCH.getMatchMode();
     
         /**
          * get match enabled.

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/AbstractShenyuPluginTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
-import org.apache.shenyu.common.enums.TrieMatchModeEvent;
+import org.apache.shenyu.common.enums.TrieMatchModeEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
@@ -247,7 +247,7 @@ public void executeRuleFullTest() {
     private void mockShenyuConfig() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         when(context.getBean(ShenyuConfig.class)).thenReturn(new ShenyuConfig());
-        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
+        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, 100L, TrieMatchModeEnum.ANT_PATH_MATCH.getMatchMode()));
         SpringBeanUtils.getInstance().setApplicationContext(context);
     }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java
Patch:
@@ -112,6 +112,9 @@ public void putNode(final String uriPath, final RuleData ruleData, final Object
                 for (int i = 0; i < pathParts.length; i++) {
                     boolean endOfPath = isMatchAllOrWildcard(pathParts[i]) && judgeEqual(i, pathParts.length - 1);
                     node = putNode0(pathParts[i], node, matchMode, endOfPath);
+                    if (Objects.isNull(node)) {
+                        return;
+                    }
                 }
                 // after insert node, set full path and end of path
                 node.setFullPath(uriPath);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/collector/AliyunSlsLogCollector.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.desensitize.api.matcher.KeyWordMatch;
 
 /**
  * aliyun sls log collector，depend a LogConsumeClient for consume logs.
@@ -46,6 +46,6 @@ protected AliyunSlsLogCollectClient getLogConsumeClient() {
     }
 
     @Override
-    protected void maskLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String dataMaskAlg) {
+    protected void desensitizeLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String desensitizeAlg) {
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/collector/ClickHouseLogCollector.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.desensitize.api.matcher.KeyWordMatch;
 
 public class ClickHouseLogCollector extends AbstractLogCollector<ClickHouseLogCollectClient, ShenyuRequestLog> {
 
@@ -43,6 +43,6 @@ protected ClickHouseLogCollectClient getLogConsumeClient() {
     }
 
     @Override
-    protected void maskLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String dataMaskAlg) {
+    protected void desensitizeLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String desensitizeAlg) {
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-desensitize-api/src/main/java/org/apache/shenyu/plugin/logging/desensitize/api/matcher/KeyWordMatch.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.api.matcher;
+package org.apache.shenyu.plugin.logging.desensitize.api.matcher;
 
 import java.util.Set;
 import java.util.regex.Pattern;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-desensitize-api/src/test/java/org/apache/shenyu/plugin/logging/desensitize/api/matcher/KeyWordMatchTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.api.matcher;
+package org.apache.shenyu.plugin.logging.desensitize.api.matcher;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/ElasticSearchLogCollector.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
 import org.apache.shenyu.plugin.logging.elasticsearch.handler.LoggingElasticSearchPluginDataHandler;
-import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.desensitize.api.matcher.KeyWordMatch;
 
 /**
  * elastic search log collector，depend a LogConsumeClient for consume logs.
@@ -46,6 +46,6 @@ protected ElasticSearchLogCollectClient getLogConsumeClient() {
     }
 
     @Override
-    protected void maskLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String dataMaskAlg) {
+    protected void desensitizeLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String desensitizeAlg) {
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/collector/KafkaLogCollector.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.kafka.client.KafkaLogCollectClient;
 import org.apache.shenyu.plugin.logging.kafka.handler.LoggingKafkaPluginDataHandler;
-import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.desensitize.api.matcher.KeyWordMatch;
 
 /**
  * kafka log collector，depend a LogConsumeClient for consume logs.
@@ -46,6 +46,6 @@ protected KafkaLogCollectClient getLogConsumeClient() {
     }
 
     @Override
-    protected void maskLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String dataMaskAlg) {
+    protected void desensitizeLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String desensitizeAlg) {
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/main/java/org/apache/shenyu/plugin/logging/pulsar/collector/PulsarLogCollector.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.desensitize.api.matcher.KeyWordMatch;
 import org.apache.shenyu.plugin.logging.pulsar.client.PulsarLogCollectClient;
 import org.apache.shenyu.plugin.logging.pulsar.handler.LoggingPulsarPluginDataHandler;
 
@@ -43,6 +43,6 @@ protected PulsarLogCollectClient getLogConsumeClient() {
     }
 
     @Override
-    protected void maskLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String dataMaskAlg) {
+    protected void desensitizeLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String desensitizeAlg) {
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/collector/RocketMQLogCollector.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.desensitize.api.matcher.KeyWordMatch;
 import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.apache.shenyu.plugin.logging.rocketmq.handler.LoggingRocketMQPluginDataHandler;
 
@@ -46,6 +46,6 @@ protected RocketMQLogCollectClient getLogConsumeClient() {
     }
 
     @Override
-    protected void maskLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String dataMaskAlg) {
+    protected void desensitizeLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String desensitizeAlg) {
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/main/java/org/apache/shenyu/plugin/tencent/cls/collector/TencentClsSlsLogCollector.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.desensitize.api.matcher.KeyWordMatch;
 import org.apache.shenyu.plugin.tencent.cls.client.TencentClsLogCollectClient;
 import org.apache.shenyu.plugin.tencent.cls.handler.LoggingTencentClsPluginDataHandler;
 
@@ -46,6 +46,6 @@ protected TencentClsLogCollectClient getLogConsumeClient() {
     }
 
     @Override
-    protected void maskLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String dataMaskAlg) {
+    protected void desensitizeLog(final ShenyuRequestLog log, final KeyWordMatch keyWordMatch, final String desensitizeAlg) {
     }
 }

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClientTest.java
Patch:
@@ -144,7 +144,7 @@ void delete() throws Exception {
 
     @Test
     void getChildren() throws Exception {
-        assertThrows(ShenyuException.class, () -> client.getChildren("/test"));
+        assertTrue(client.getChildren("/test").isEmpty());
         GetChildrenBuilder getChildrenBuilder = mock(GetChildrenBuilder.class);
         when(curatorFramework.getChildren()).thenReturn(getChildrenBuilder);
         when(getChildrenBuilder.forPath(anyString())).thenReturn(new ArrayList<>());

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/CommonPluginDataSubscriberTest.java
Patch:
@@ -184,7 +184,7 @@ public void testRefreshSelectorDataSelf() {
     public void testOnRuleSubscribe() {
         baseDataCache.cleanRuleData();
 
-        RuleData ruleData = RuleData.builder().id("1").selectorId(mockSelectorId1).pluginName(mockPluginName1).sort(1).build();
+        RuleData ruleData = RuleData.builder().id("1").selectorId(mockSelectorId1).enabled(true).pluginName(mockPluginName1).sort(1).build();
         commonPluginDataSubscriber.onRuleSubscribe(ruleData);
         assertNotNull(baseDataCache.obtainRuleData(ruleData.getSelectorId()));
         assertEquals(Lists.newArrayList(ruleData), baseDataCache.obtainRuleData(ruleData.getSelectorId()));

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/LocalPluginControllerTest.java
Patch:
@@ -426,6 +426,7 @@ private RuleData createRuleData(final String testSelectorId, final String testId
                 .selectorId(testSelectorId)
                 .pluginName("testPluginName")
                 .id(testId)
+                .enabled(true)
                 .build();
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/PluginDTO.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.admin.validation.annotation.Existed;
 import org.springframework.web.multipart.MultipartFile;
 
+import javax.validation.constraints.Min;
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
 import java.io.Serializable;
@@ -61,6 +62,7 @@ public class PluginDTO implements Serializable {
      * plugin sort.
      */
     @NotNull
+    @Min(0)
     private Integer sort;
 
     /**

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/GlobalPluginTest.java
Patch:
@@ -82,7 +82,7 @@ public void testExecuted() {
 
     @Test
     public void testGetOrder() {
-        assertEquals(5, globalPlugin.getOrder());
+        assertEquals(-1, globalPlugin.getOrder());
     }
 
     @Test

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/UpstreamCheckUtils.java
Patch:
@@ -30,9 +30,9 @@
  */
 public class UpstreamCheckUtils {
 
-    private static final String HTTP = "http";
+    private static final String HTTP = "http://";
 
-    private static final String HTTPS = "https";
+    private static final String HTTPS = "https://";
 
     private static final int DEFAULT_TIMEOUT = 3000;
 
@@ -63,7 +63,7 @@ public static boolean checkUrl(final String url, final int timeout) {
             return false;
         }
         String[] hostPort;
-        if (url.startsWith(HTTP)) {
+        if (url.startsWith(HTTP) || url.startsWith(HTTPS)) {
             final String[] http = StringUtils.split(url, "\\/\\/");
             hostPort = StringUtils.split(http[1], Constants.COLONS);
         } else {

File: shenyu-common/src/test/java/org/apache/shenyu/common/cache/MemorySafeWindowTinyLFUMapTest.java
Patch:
@@ -53,6 +53,7 @@ public boolean isFull() {
         Assert.assertEquals(1, cache.size());
         cache.put(2, 2);
         cache.put(3, 3);
+        cache.invalidate();
         cache.cleanUp();
         Assert.assertEquals(1, cache.size());
         final Map.Entry<Integer, Integer> entry = cache.entrySet().iterator().next();

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MatchDataCache.java
Patch:
@@ -84,7 +84,7 @@ public void cleanSelectorData() {
      */
     public void cacheSelectorData(final String path, final SelectorData selectorData, final int initialCapacity, final long maximumSize) {
         MapUtils.computeIfAbsent(SELECTOR_DATA_MAP, selectorData.getPluginName(), map ->
-                new WindowTinyLFUMap<>(initialCapacity, maximumSize, Boolean.TRUE)).put(path, selectorData);
+                new WindowTinyLFUMap<>(initialCapacity, maximumSize, Boolean.FALSE)).put(path, selectorData);
     }
 
     /**
@@ -109,7 +109,7 @@ public SelectorData obtainSelectorData(final String pluginName, final String pat
      */
     public void cacheRuleData(final String path, final RuleData ruleData, final int initialCapacity, final long maximumSize) {
         MapUtils.computeIfAbsent(RULE_DATA_MAP, ruleData.getPluginName(), map ->
-                new WindowTinyLFUMap<>(initialCapacity, maximumSize, Boolean.TRUE)).put(path, ruleData);
+                new WindowTinyLFUMap<>(initialCapacity, maximumSize, Boolean.FALSE)).put(path, ruleData);
     }
     
     /**

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/MatchDataCacheTest.java
Patch:
@@ -52,7 +52,7 @@ public void testCacheSelectorData() throws NoSuchFieldException, IllegalAccessEx
     public void testObtainSelectorData() throws NoSuchFieldException, IllegalAccessException {
         SelectorData firstSelectorData = SelectorData.builder().id("1").pluginName(mockPluginName1).sort(1).build();
         ConcurrentHashMap<String, WindowTinyLFUMap<String, SelectorData>> selectorMap = getFieldByName(selectorMapStr);
-        selectorMap.put(mockPluginName1, new WindowTinyLFUMap<>(100, 100, Boolean.TRUE));
+        selectorMap.put(mockPluginName1, new WindowTinyLFUMap<>(100, 100, Boolean.FALSE));
         selectorMap.get(mockPluginName1).put(path1, firstSelectorData);
         SelectorData firstSelectorDataCache = MatchDataCache.getInstance().obtainSelectorData(mockPluginName1, path1);
         assertEquals(firstSelectorData, firstSelectorDataCache);
@@ -90,7 +90,7 @@ public void testCacheRuleData() throws NoSuchFieldException, IllegalAccessExcept
     public void testObtainRuleData() throws NoSuchFieldException, IllegalAccessException {
         RuleData cacheRuleData = RuleData.builder().id("1").pluginName(mockPluginName1).sort(1).build();
         ConcurrentHashMap<String, WindowTinyLFUMap<String, RuleData>> ruleMap = getFieldByName(ruleMapStr);
-        ruleMap.put(mockPluginName1, new WindowTinyLFUMap<>(100, 100, Boolean.TRUE));
+        ruleMap.put(mockPluginName1, new WindowTinyLFUMap<>(100, 100, Boolean.FALSE));
         ruleMap.get(mockPluginName1).put(path1, cacheRuleData);
         RuleData firstRuleDataCache = MatchDataCache.getInstance().obtainRuleData(mockPluginName1, path1);
         assertEquals(cacheRuleData, firstRuleDataCache);

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/Constants.java
Patch:
@@ -666,7 +666,7 @@ public interface Constants {
      * user can use the specify-domian to replace of upstream url of the divide plugin.
      */
     String SPECIFY_DOMAIN = "specify-domain";
-
+    
     /**
      * The maximum free memory reserved by the blocking queue for the JVM.
      */

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MetaDataCache.java
Patch:
@@ -18,8 +18,7 @@
 package org.apache.shenyu.plugin.base.cache;
 
 import com.google.common.collect.Maps;
-import org.apache.shenyu.common.cache.MemorySafeWindowTinyLFUMap;
-import org.apache.shenyu.common.constant.Constants;
+import org.apache.shenyu.common.cache.WindowTinyLFUMap;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 
@@ -45,7 +44,7 @@ public final class MetaDataCache {
      */
     private static final ConcurrentMap<String, MetaData> META_DATA_MAP = Maps.newConcurrentMap();
 
-    private static final MemorySafeWindowTinyLFUMap<String, MetaData> CACHE = new MemorySafeWindowTinyLFUMap<>(Constants.THE_256_MB, 1 << 16);
+    private static final WindowTinyLFUMap<String, MetaData> CACHE = new WindowTinyLFUMap<>(1 << 16, Integer.MAX_VALUE, Boolean.FALSE);
 
     /**
      * pathPattern -> path.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/PluginTransfer.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.vo.PluginVO;
 import org.apache.shenyu.common.dto.PluginData;
+import org.springframework.util.Base64Utils;
 
 import java.util.Optional;
 
@@ -48,6 +49,7 @@ public PluginData mapToData(final PluginDO pluginDO) {
                         .role(v.getRole())
                         .enabled(v.getEnabled())
                         .sort(v.getSort())
+                        .pluginJar(Optional.ofNullable(v.getPluginJar()).map(Base64Utils::encodeToString).orElse(""))
                         .build())
                 .orElse(null);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/query/FieldQuery.java
Patch:
@@ -33,13 +33,14 @@ public class FieldQuery {
      */
     private String fieldDesc;
 
-
-
     /**
      * page parameter.
      */
     private PageParameter pageParameter;
 
+    public FieldQuery() {
+    }
+
     public FieldQuery(final String name, final String fieldDesc, final PageParameter pageParameter) {
         this.name = name;
         this.fieldDesc = fieldDesc;
@@ -83,7 +84,6 @@ public void setFieldDesc(final String fieldDesc) {
     }
 
 
-
     /**
      * getPageParameter.
      *

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -299,6 +299,7 @@ private RuleDTO buildRuleDTO(final String selectorId, final String ruleHandler,
                 .matchMode(MatchModeEnum.AND.getCode())
                 .enabled(Boolean.TRUE)
                 .loged(Boolean.TRUE)
+                .matchRestful(Boolean.FALSE)
                 .sort(1)
                 .handle(ruleHandler)
                 .build();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/SelectorUtil.java
Patch:
@@ -94,6 +94,7 @@ public static SelectorDTO buildDefaultSelectorDTO(final String name) {
                 .enabled(Boolean.TRUE)
                 .loged(Boolean.TRUE)
                 .continued(Boolean.TRUE)
+                .matchRestful(Boolean.FALSE)
                 .sort(1)
                 .build();
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/RuleControllerTest.java
Patch:
@@ -87,7 +87,7 @@ public final class RuleControllerTest {
 
     private final List<RuleConditionVO> rcList = new ArrayList<>(Collections.singletonList(rCondition1));
 
-    private final RuleVO ruleVO = new RuleVO("666", "168", 0, "zero mode", "/http/test/**", true, true, 1, "{\"loadBalance\":\"random\",\"retry\":0,\"timeout\":3000}",
+    private final RuleVO ruleVO = new RuleVO("666", "168", 0, "zero mode", "/http/test/**", true, true, 1, "{\"loadBalance\":\"random\",\"retry\":0,\"timeout\":3000}", false,
             rcList, DateUtils.localDateTimeToString(LocalDateTime.now()), DateUtils.localDateTimeToString(LocalDateTime.now()));
     
     private final CommonPager<RuleVO> commonPager = new CommonPager<>(new PageParameter(), Collections.singletonList(ruleVO));
@@ -147,6 +147,7 @@ public void testCreateRule() throws Exception {
                 .name("/http/order/save")
                 .enabled(true)
                 .loged(true)
+                .matchRestful(false)
                 .sort(1)
                 .handle("{\"loadBalance\":\"random\",\"retry\":0,\"timeout\":3000}")
                 .ruleConditions(conList)
@@ -186,6 +187,7 @@ public void testUpdateRule() throws Exception {
                 .name("/http/order/update")
                 .enabled(true)
                 .loged(true)
+                .matchRestful(false)
                 .sort(1)
                 .handle("{\"loadBalance\":\"random\",\"retry\":0,\"timeout\":3000}")
                 .ruleConditions(conList)

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SelectorControllerTest.java
Patch:
@@ -81,7 +81,7 @@ public final class SelectorControllerTest {
     
     private final SelectorVO selectorVO = new SelectorVO("1", "2", "selector-1", MatchModeEnum.AND.getCode(),
             MatchModeEnum.AND.getName(), SelectorTypeEnum.FULL_FLOW.getCode(), SelectorTypeEnum.FULL_FLOW.getName(),
-            1, true, true, true, "handle", Collections.emptyList(),
+            1, true, true, true, false, "handle", Collections.emptyList(),
             DateUtils.localDateTimeToString(LocalDateTime.now()), DateUtils.localDateTimeToString(LocalDateTime.now()));
 
     private final CommonPager<SelectorVO> commonPager = new CommonPager<>(new PageParameter(), Collections.singletonList(selectorVO));
@@ -118,6 +118,7 @@ public void createSelector() throws Exception {
                 .type(1)
                 .loged(true)
                 .enabled(true)
+                .matchRestful(false)
                 .pluginId("2")
                 .sort(1)
                 .build();
@@ -144,6 +145,7 @@ public void updateSelector() throws Exception {
                 .type(1)
                 .loged(true)
                 .enabled(true)
+                .matchRestful(false)
                 .pluginId("2")
                 .sort(1)
                 .build();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RuleMapperTest.java
Patch:
@@ -199,6 +199,7 @@ private RuleDO buildRuleDO() {
                 .loged(true)
                 .matchMode(1)
                 .selectorId("test-selector-1")
+                .matchRestful(false)
                 .sort(1)
                 .dateCreated(now)
                 .dateUpdated(now)

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorMapperTest.java
Patch:
@@ -234,6 +234,7 @@ private SelectorDO buildSelectorDO() {
                 .sort(1)
                 .enabled(Boolean.TRUE)
                 .loged(Boolean.TRUE)
+                .matchRestful(false)
                 .continued(Boolean.TRUE)
                 .handle("handle")
                 .build();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DataPermissionServiceTest.java
Patch:
@@ -78,13 +78,13 @@ public final class DataPermissionServiceTest {
 
     @BeforeEach
     public void setup() {
-        ruleDTO = new RuleDTO("1", "1", 1, "test", true, true, 1, "test", null);
+        ruleDTO = new RuleDTO("1", "1", 1, "test", true, true, 1, "test", null, false);
         dataPermissionDTO = new DataPermissionDTO();
         dataPermissionDTO.setId("1");
         dataPermissionDTO.setUserId("1001");
         dataPermissionDTO.setDataId("1");
         dataPermissionDTO.setIsSelected(true);
-        selectorDTO = new SelectorDTO("1", "1", "test", 1, 1, 1, true, false, true, "test", null);
+        selectorDTO = new SelectorDTO("1", "1", "test", 1, 1, 1, true, false, true, "test", null, false);
     }
 
     @Test

File: shenyu-e2e/shenyu-e2e-case/src/main/java/org/apache/shenyu/e2e/testcase/common/ResourceDataTemplate.java
Patch:
@@ -48,6 +48,7 @@ public static SelectorData.SelectorDataBuilder newSelectorBuilder(@NotNull Strin
                 .continued(true)
                 .logged(true)
                 .enabled(true)
+                .matchRestful(false)
                 .sort(1);
     }
     
@@ -62,6 +63,7 @@ public static RuleData.RuleDataBuilder newRuleBuilder(@Nonnull String name, Stri
                 .selectorId(selectorId)
                 .enabled(true)
                 .logged(true)
+                .matchRestful(false)
                 .sort(1);
     }
     

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/data/SelectorData.java
Patch:
@@ -64,6 +64,7 @@ public class SelectorData implements ResourceData {
     
     private int sort;
     
+    private boolean matchRestful;
     static class PluginHandleSerializer extends JsonSerializer<PluginHandle> {
         private static final ObjectMapper mapper = new ObjectMapper();
         
@@ -74,4 +75,4 @@ public void serialize(PluginHandle pluginHandle, JsonGenerator jsonGenerator, Se
         }
     }
     
-}
\ No newline at end of file
+}

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MatchDataCache.java
Patch:
@@ -137,4 +137,5 @@ public RuleData obtainRuleData(final String pluginName, final String path) {
         final Map<String, RuleData> lruMap = RULE_DATA_MAP.get(pluginName);
         return Optional.ofNullable(lruMap).orElse(Maps.newHashMap()).get(path);
     }
+    
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrie.java
Patch:
@@ -312,7 +312,6 @@ public void remove(final String path, final RuleData ruleData) {
             // node is not null, judge exist many plugin mapping
             if (Objects.nonNull(currentNode) && Objects.nonNull(currentNode.getPathRuleCache())) {
                 // check current mapping
-                currentNode.getPathRuleCache().cleanUp();
                 List<RuleData> ruleDataList = getVal(currentNode.getPathRuleCache(), ruleData.getSelectorId());
                 if (CollectionUtils.isNotEmpty(ruleDataList) && ruleDataList.size() == 1 && Objects.isNull(currentNode.getChildren())) {
                     // remove current node from parent node
@@ -327,6 +326,7 @@ public void remove(final String path, final RuleData ruleData) {
                     if (CollectionUtils.isNotEmpty(delRuleData)) {
                         synchronized (ruleData.getSelectorId()) {
                             delRuleData.removeIf(rule -> rule.getId().equals(ruleData.getSelectorId()));
+                            currentNode.getPathRuleCache().put(ruleData.getSelectorId(), delRuleData);
                         }
                     }
                 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -316,6 +316,7 @@ private void check(final String selectorId, final List<CommonUpstream> upstreamL
                     if (!commonUpstream.isStatus()) {
                         commonUpstream.setTimestamp(System.currentTimeMillis());
                         commonUpstream.setStatus(true);
+                        PENDING_SYNC.add(commonUpstream.hashCode());
                         LOG.info("UpstreamCacheManager check success the url: {}, host: {} ", commonUpstream.getUpstreamUrl(), commonUpstream.getUpstreamHost());
                     }
                     return commonUpstream;

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/AbstractHttpClientPlugin.java
Patch:
@@ -176,6 +176,7 @@ private HttpHeaders buildHttpHeaders(final ServerWebExchange exchange) {
             acceptEncoding.remove(Constants.HTTP_ACCEPT_ENCODING_GZIP);
             headers.set(HttpHeaders.ACCEPT_ENCODING, String.join(",", acceptEncoding));
         }
+        headers.remove(HttpHeaders.HOST);
         return headers;
     }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/trie/ShenyuTrieRuleListener.java
Patch:
@@ -59,11 +59,11 @@ public void onApplicationEvent(final RuleTrieEvent event) {
                             .collect(Collectors.toList());
 
                     // old condition remove
-                    shenyuTrie.remove(beforeUriPaths, ruleData.getSelectorId(), ruleData.getId());
+                    shenyuTrie.remove(beforeUriPaths, ruleData);
                     shenyuTrie.putNode(uriPaths, ruleData, ruleData.getId());
                     break;
                 case REMOVE:
-                    shenyuTrie.remove(uriPaths, ruleData.getSelectorId(), ruleData.getId());
+                    shenyuTrie.remove(uriPaths, ruleData);
                     break;
                 default:
                     throw new IllegalStateException("Unexpected value: " + event.getRuleTrieEvent());

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/trie/ShenyuTrieTest.java
Patch:
@@ -186,7 +186,7 @@ public void remove() {
                 .build();
         shenyuTrie.putNode("/a/b/c/**", ruleData, null);
         shenyuTrie.putNode("/a/b/c/**", ruleData2, null);
-        shenyuTrie.remove("/a/b/c/**", "2", "2");
+        shenyuTrie.remove("/a/b/c/**", ruleData2);
         Assertions.assertNotNull(shenyuTrie.getNode("/a/b/c/**"));
     
         RuleData ruleData3 = RuleData.builder()
@@ -199,7 +199,7 @@ public void remove() {
                 .conditionDataList(Collections.singletonList(conditionData))
                 .build();
         shenyuTrie.putNode("/path1/path2", ruleData3, null);
-        shenyuTrie.remove("/path1/path2", "3", "3");
+        shenyuTrie.remove("/path1/path2", ruleData3);
         Assertions.assertNull(shenyuTrie.getNode("/path1/path2"));
     }
     

File: shenyu-web/src/main/java/org/apache/shenyu/web/controller/LocalPluginController.java
Patch:
@@ -110,7 +110,7 @@ public Mono<String> cleanPlugin(@RequestParam("name") final String name) {
                             .collect(Collectors.toList());
                     if (CollectionUtils.isNotEmpty(filterConditions)) {
                         List<String> uriPaths = filterConditions.stream().map(ConditionData::getParamValue).collect(Collectors.toList());
-                        uriPaths.forEach(path -> SpringBeanUtils.getInstance().getBean(ShenyuTrie.class).remove(path, selectorId, rule.getId()));
+                        uriPaths.forEach(path -> SpringBeanUtils.getInstance().getBean(ShenyuTrie.class).remove(path, rule));
                     }
                 });
             }

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/MqttPluginTest.java
Patch:
@@ -43,7 +43,7 @@ public void setup() throws IOException, InterruptedException {
                 + "  \"isEncryptPassword\": false,"
                 + "  \"encryptMode\": \"\","
                 + "  \"leakDetectorLevel\": \"DISABLED\""
-                + "}", "0", true);
+                + "}", "0", true, null);
         mqttPluginDataHandler.handlerPlugin(enablePluginData);
         Thread.sleep(3000);
         assertTrue(isPortUsing());

File: shenyu-plugin/shenyu-plugin-brpc/src/test/java/org/apache/shenyu/plugin/brpc/handler/BrpcPluginDataHandlerTest.java
Patch:
@@ -39,7 +39,7 @@ public void setUp() {
     
     @Test
     public void testHandlerPlugin() {
-        final PluginData pluginData = new PluginData("id", "name", "config", "0", false);
+        final PluginData pluginData = new PluginData("id", "name", "config", "0", false, null);
         brpcPluginDataHandlerUnderTest.handlerPlugin(pluginData);
         assertTrue(pluginData.getName().endsWith("name"));
     }

File: shenyu-plugin/shenyu-plugin-casdoor/src/test/java/org/apache/shenyu/plugin/casdoor/CasdoorPluginTest.java
Patch:
@@ -87,7 +87,7 @@ void setup() {
 
     @Test
     void doExecute() {
-        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"organization-name\":\"test\",\"application-name\":\"app-test\",\"endpoint\":\"http://localhost:8000\",\"client_secrect\":\"a4209d412a33a842b7a9c05a3446e623cbb7262d\",\"client_id\":\"6e3a84154e73d1fb156a\",\"certificate\":\"-----BEGIN CERTIFICATE-----\\n\"}", "0", false);
+        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"organization-name\":\"test\",\"application-name\":\"app-test\",\"endpoint\":\"http://localhost:8000\",\"client_secrect\":\"a4209d412a33a842b7a9c05a3446e623cbb7262d\",\"client_id\":\"6e3a84154e73d1fb156a\",\"certificate\":\"-----BEGIN CERTIFICATE-----\\n\"}", "0", false, null);
         casdoorPluginDateHandlerTest.handlerPlugin(pluginData);
         try {
             CasdoorAuthService casdoorAuthService = Singleton.INST.get(CasdoorAuthService.class);

File: shenyu-plugin/shenyu-plugin-casdoor/src/test/java/org/apache/shenyu/plugin/casdoor/handle/CasdoorPluginDateHandlerTest.java
Patch:
@@ -37,7 +37,7 @@ public void setup() {
 
     @Test
     public void handlerPlugin() {
-        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"organization-name\":\"test\",\"application-name\":\"app-test\",\"endpoint\":\"http://localhost:8000\",\"client_secrect\":\"a4209d412a33a842b7a9c05a3446e623cbb7262d\",\"client_id\":\"6e3a84154e73d1fb156a\",\"certificate\":\"-----BEGIN CERTIFICATE-----\\n\"}", "0", false);
+        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"organization-name\":\"test\",\"application-name\":\"app-test\",\"endpoint\":\"http://localhost:8000\",\"client_secrect\":\"a4209d412a33a842b7a9c05a3446e623cbb7262d\",\"client_id\":\"6e3a84154e73d1fb156a\",\"certificate\":\"-----BEGIN CERTIFICATE-----\\n\"}", "0", false, null);
         casdoorPluginDateHandlerTest.handlerPlugin(pluginData);
         CasdoorAuthService casdoorAuthService = Singleton.INST.get(CasdoorAuthService.class);
         String redirect = "http://localhost:9195/http/hi";

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataTest.java
Patch:
@@ -61,14 +61,14 @@ public void setUp() {
 
     @Test
     public void testPluginEnable() {
-        PluginData pluginData = new PluginData("", "", registryConfig, "1", true);
+        PluginData pluginData = new PluginData("", "", registryConfig, "1", true, null);
         alibabaDubboPluginDataHandler.handlerPlugin(pluginData);
         assertEquals(Singleton.INST.get(DubboRegisterConfig.class).getRegister(), "127.0.0.1:2181");
     }
 
     @Test
     public void testPluginDisable() {
-        PluginData pluginData = new PluginData("", "", registryConfig, "1", false);
+        PluginData pluginData = new PluginData("", "", registryConfig, "1", false, null);
         alibabaDubboPluginDataHandler.handlerPlugin(pluginData);
         assertNull(Singleton.INST.get(DubboRegisterConfig.class));
     }

File: shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/JwtPluginTest.java
Patch:
@@ -139,7 +139,7 @@ private void initContext() {
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
         springBeanUtils.setApplicationContext(context);
-        PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"secretKey\":\"shenyu-test-shenyu-test-shenyu-test\"}", "0", false);
+        PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"secretKey\":\"shenyu-test-shenyu-test-shenyu-test\"}", "0", false, null);
         JwtPluginDataHandler jwtPluginDataHandler = new JwtPluginDataHandler();
         jwtPluginDataHandler.handlerPlugin(pluginData);
     }

File: shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandlerTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() {
 
     @Test
     public void testHandlerPlugin() {
-        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"secretKey\":\"shenyu\"}", "0", false);
+        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{\"secretKey\":\"shenyu\"}", "0", false, null);
         jwtPluginDataHandlerUnderTest.handlerPlugin(pluginData);
         JwtConfig jwtConfig = Singleton.INST.get(JwtConfig.class);
         Map<String, String> map = GsonUtils.getInstance().toObjectMap(pluginData.getConfig(), String.class);

File: shenyu-plugin/shenyu-plugin-mqtt/src/test/java/org/apache/shenyu/plugin/mqtt/handler/MqttPluginDataHandlerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testEnableConfiguration() throws InterruptedException {
                 + "  \"isEncryptPassword\": false,"
                 + "  \"encryptMode\": \"\","
                 + "  \"leakDetectorLevel\": \"DISABLED\""
-                + "}", "0", true);
+                + "}", "0", true, null);
         mqttPluginDataHandlerUnderTest.handlerPlugin(enablePluginData);
         assertTrue(isPortUsing());
         final PluginData disablePluginData = new PluginData("pluginId", "pluginName", "{\n"
@@ -66,7 +66,7 @@ public void testEnableConfiguration() throws InterruptedException {
                 + "  \"isEncryptPassword\": false,"
                 + "  \"encryptMode\": \"\","
                 + "  \"leakDetectorLevel\": \"DISABLED\""
-                + "}", "0", false);
+                + "}", "0", false, null);
         mqttPluginDataHandlerUnderTest.handlerPlugin(disablePluginData);
 
         Awaitility.await()

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/handler/SofaPluginDataHandlerTest.java
Patch:
@@ -49,14 +49,14 @@ public void setUp() {
 
     @Test
     public void testPluginEnable() {
-        PluginData pluginData = new PluginData("", "", registryConfig, "1", true);
+        PluginData pluginData = new PluginData("", "", registryConfig, "1", true, null);
         sofaPluginDataHandler.handlerPlugin(pluginData);
         assertEquals("127.0.0.1:2181", Singleton.INST.get(SofaRegisterConfig.class).getRegister());
     }
 
     @Test
     public void testPluginDisable() {
-        PluginData pluginData = new PluginData("", "", registryConfig, "1", false);
+        PluginData pluginData = new PluginData("", "", registryConfig, "1", false, null);
         sofaPluginDataHandler.handlerPlugin(pluginData);
         assertNull(Singleton.INST.get(SofaRegisterConfig.class));
     }

File: shenyu-plugin/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/handler/TarsPluginDataHandlerTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() {
     
     @Test
     public void testHandlerPlugin() {
-        final PluginData pluginData = new PluginData("id", "name", "{\"threadpool\":\"cached\",\"corethreads\":1,\"threads\":2,\"queues\":3}", "0", true);
+        final PluginData pluginData = new PluginData("id", "name", "{\"threadpool\":\"cached\",\"corethreads\":1,\"threads\":2,\"queues\":3}", "0", true, null);
         tarsPluginDataHandlerUnderTest.handlerPlugin(pluginData);
         assertTrue(pluginData.getName().endsWith("name"));
         TarsRegisterConfig config = Singleton.INST.get(TarsRegisterConfig.class);

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/WafPluginTest.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() {
         springBeanUtils.setApplicationContext(context);
 
         final PluginData pluginData =
-                new PluginData("pluginId", "pluginName", "{\"model\":\"mix\"}", "0", false);
+                new PluginData("pluginId", "pluginName", "{\"model\":\"mix\"}", "0", false, null);
         WafPluginDataHandler wafPluginDataHandler = new WafPluginDataHandler();
         wafPluginDataHandler.handlerPlugin(pluginData);
 
@@ -92,7 +92,7 @@ public void testGetOrder() {
     @Test
     public void testWafPluginBlackWafModel() {
         final PluginData pluginData =
-                new PluginData("pluginId", "pluginName", "{\"model\":\"black\"}", "0", false);
+                new PluginData("pluginId", "pluginName", "{\"model\":\"black\"}", "0", false, null);
         WafPluginDataHandler wafPluginDataHandler = new WafPluginDataHandler();
         wafPluginDataHandler.handlerPlugin(pluginData);
         Mono<Void> execute = wafPluginUnderTest.doExecute(exchange, chain, null, null);

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandlerTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() {
 
     @Test
     public void testHandlerPlugin() {
-        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{}", "0", false);
+        final PluginData pluginData = new PluginData("pluginId", "pluginName", "{}", "0", false, null);
         wafPluginDataHandlerUnderTest.handlerPlugin(pluginData);
         WafConfig wafConfig = Singleton.INST.get(WafConfig.class);
         assertEquals(GsonUtils.getInstance().toJson(wafConfig), pluginData.getConfig());

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/LocalPluginControllerTest.java
Patch:
@@ -167,7 +167,7 @@ public void testDelete() throws Exception {
     public void testDeleteAll() throws Exception {
         final String[] testPluginName = {"testDeleteAllPluginName", "testDeleteAllPluginName2"};
         Arrays.stream(testPluginName).map(s ->
-                new PluginData("id", s, null, null, null))
+                new PluginData("id", s, null, null, null, null))
                 .forEach(subscriber::onSubscribe);
         Arrays.stream(testPluginName)
                 .forEach(s -> assertThat(baseDataCache.obtainPluginData(s)).isNotNull());

File: shenyu-integrated-test/shenyu-integrated-test-combination/src/test/java/org/apache/shenyu/integrated/test/combination/MultiRequestPluginTest.java
Patch:
@@ -509,6 +509,7 @@ private List<RuleLocalData> buildRuleLocalDataList4CryptorRequest() {
         cryptorRuleHandler.setStrategyName("rsa");
         cryptorRuleHandler.setFieldNames("userName");
         cryptorRuleHandler.setWay("encrypt");
+        cryptorRuleHandler.setMapType("all");
         return Collections.singletonList(buildRuleLocalData(JsonUtils.toJson(cryptorRuleHandler)));
     }
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-cryptor/src/main/java/org/apache/shenyu/springboot/starter/plugin/cryptor/CryptorPluginConfiguration.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.cryptor.handler.CryptorRequestPluginDataHandler;
 import org.apache.shenyu.plugin.cryptor.handler.CryptorResponsePluginDataHandler;
-import org.apache.shenyu.plugin.cryptor.request.CryptorRequestPlugin;
-import org.apache.shenyu.plugin.cryptor.response.CryptorResponsePlugin;
+import org.apache.shenyu.plugin.cryptor.plugin.CryptorRequestPlugin;
+import org.apache.shenyu.plugin.cryptor.plugin.CryptorResponsePlugin;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java
Patch:
@@ -148,7 +148,7 @@ public ReferenceConfig<GenericService> initRefN(final MetaData metaData, final S
             return initRef(metaData);
         }
         try {
-            ReferenceConfig<GenericService> referenceConfig = cache.get(metaData.getPath());
+            ReferenceConfig<GenericService> referenceConfig = cache.get(namespace + ":" + metaData.getPath());
             if (StringUtils.isNoneBlank(referenceConfig.getInterface())) {
                 return referenceConfig;
             }

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -71,7 +71,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
         }
         ReferenceConfig<GenericService> reference = ApacheDubboConfigCache.getInstance().get(referenceKey);
         if (StringUtils.isEmpty(reference.getInterface())) {
-            ApacheDubboConfigCache.getInstance().invalidate(metaData.getPath());
+            ApacheDubboConfigCache.getInstance().invalidate(referenceKey);
             reference = ApacheDubboConfigCache.getInstance().initRefN(metaData, namespace);
         }
         GenericService genericService = reference.get();

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java
Patch:
@@ -175,7 +175,7 @@ public ReferenceConfig<GenericService> build(final MetaData metaData, final Stri
             Object obj = reference.get();
             if (Objects.nonNull(obj)) {
                 LOG.info("buildN init apache dubbo reference success there meteData is :{}", metaData);
-                cache.put(namespace + ":" + metaData.getPath(), reference);
+                cache.put(StringUtils.isNotBlank(namespace) ? namespace + ":" + metaData.getPath() : metaData.getPath(), reference);
             }
         } catch (Exception e) {
             LOG.error("buildN init apache dubbo reference exception", e);

File: shenyu-integrated-test/shenyu-integrated-test-websocket/src/test/java/org/apache/shenyu/integrated/test/websocket/UploadControllerTest.java
Patch:
@@ -22,6 +22,7 @@
 import okhttp3.RequestBody;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -32,8 +33,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import static org.junit.Assert.assertEquals;
-
 public class UploadControllerTest extends AbstractPluginDataInit {
 
     private static final String FILE_PATH = "1.bin";
@@ -59,7 +58,7 @@ public void testWebsocketUpLoad() throws IOException {
                 .addFormDataPart("file", FILE_PATH, fileBodyOne)
                 .build();
         final String response = HttpHelper.INSTANCE.postGateway("/ws-native/ws/upload", requestBody, String.class);
-        assertEquals(response, "ok");
+        Assertions.assertEquals(response, "ok");
     }
 
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/JwtUtils.java
Patch:
@@ -101,7 +101,7 @@ public static boolean verifyToken(final String token, final String key) {
             verifier.verify(token);
             return true;
         } catch (JWTVerificationException e) {
-            LOG.info("jwt decode fail, token: {} ", token, e);
+            LOG.error("jwt decode fail, token: {} ", token, e);
         }
         return false;
     }

File: shenyu-web/src/main/java/org/apache/shenyu/web/controller/LocalPluginController.java
Patch:
@@ -98,9 +98,9 @@ public Mono<String> cleanPlugin(@RequestParam("name") final String name) {
         final List<String> selectorIds = selectorData.stream().map(SelectorData::getId).collect(Collectors.toList());
         BaseDataCache.getInstance().removeSelectDataByPluginName(name);
         MatchDataCache.getInstance().removeSelectorData(name);
+        MatchDataCache.getInstance().removeRuleData(name);
         for (String selectorId : selectorIds) {
             BaseDataCache.getInstance().removeRuleDataBySelectorId(selectorId);
-            
             List<RuleData> ruleDataList = BaseDataCache.getInstance().obtainRuleData(selectorId);
             if (CollectionUtils.isNotEmpty(ruleDataList)) {
                 ruleDataList.forEach(rule -> {

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -234,9 +234,8 @@ private RuleData genericMatchRule(final ServerWebExchange exchange, final Collec
         Pair<Boolean, RuleData> genericMatchRule = this.matchRule(exchange, rules);
         if (genericMatchRule.getLeft()) {
             return genericMatchRule.getRight();
-        } else {
-            return null;
         }
+        return null;
     }
 
     private Pair<Boolean, RuleData> matchRule(final ServerWebExchange exchange, final Collection<RuleData> rules) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/OperationRecordLog.java
Patch:
@@ -52,7 +52,7 @@ public class OperationRecordLog {
     /**
      * operation time.
      */
-    @JsonFormat(pattern = "MM-dd hh:mm:ss")
+    @JsonFormat(pattern = "MM-dd HH:mm:ss")
     private Date operationTime;
     
     /**

File: shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/cache/ApplicationConfigCache.java
Patch:
@@ -109,7 +109,9 @@ public AsyncGenericService buildService(final ServiceConfig serviceConfig,
         StarlightClient client = CLIENT_CACHE.get(serviceConfig);
         if (Objects.isNull(client)) {
             BrpcParamExtInfo brpcParamExtInfo = GsonUtils.getInstance().fromJson(metaData.getRpcExt(), BrpcParamExtInfo.class);
-            client = new SingleStarlightClient(brpcParamExtInfo.getHost(), brpcParamExtInfo.getPort(), new TransportConfig());
+            TransportConfig transportConfig = new TransportConfig();
+            transportConfig.setBizThreadPoolName(Constants.SHARED_BIZTHREADPOOLNAME);
+            client = new SingleStarlightClient(brpcParamExtInfo.getHost(), brpcParamExtInfo.getPort(), transportConfig);
             client.init();
             CLIENT_CACHE.put(serviceConfig, client);
         }
@@ -281,7 +283,6 @@ public void setMethodName(final String methodName) {
             this.methodName = methodName;
         }
 
-
         /**
          * Gets paramTypes.
          *

File: shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/proxy/BrpcProxyService.java
Patch:
@@ -83,7 +83,6 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
             }
         }
         initThreadPool();
-        //todo use com.baidu.cloud.starlight.api.rpc.threadpool.ThreadPoolFactory impl it
         CompletableFuture<Object> future = CompletableFuture.supplyAsync(() -> getValue(metaData, params), threadPool);
         return Mono.fromFuture(future.thenApply(ret -> {
             if (Objects.isNull(ret)) {

File: shenyu-client/shenyu-client-brpc/src/main/java/org/apache/shenyu/client/brpc/BrpcContextRefreshedEventListener.java
Patch:
@@ -153,15 +153,15 @@ protected MetaDataRegisterDTO buildMetaDataDTO(final Object bean, final ShenyuBr
                 .ruleName(ruleName)
                 .parameterTypes(parameterTypes)
                 .rpcType(RpcTypeEnum.BRPC.getName())
-                .rpcExt(buildRpcExt(method))
+                .rpcExt(buildRpcExt(method, host, port))
                 .enabled(shenyuBrpcClient.enabled())
                 .build();
     }
 
-    private String buildRpcExt(final Method method) {
+    private String buildRpcExt(final Method method, final String host, final int port) {
         List<BrpcRpcExt.RpcExt> list = new ArrayList<>();
         list.add(build(method));
-        BrpcRpcExt buildList = new BrpcRpcExt(list);
+        BrpcRpcExt buildList = new BrpcRpcExt(list, host, port);
         return GsonUtils.getInstance().toJson(buildList);
     }
 

File: shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/handler/BrpcMetaDataHandler.java
Patch:
@@ -43,7 +43,7 @@ public void handle(final MetaData metaData) {
             MetaData exist = META_DATA.get(metaData.getPath());
             if (Objects.isNull(exist) || Objects.isNull(ApplicationConfigCache.getInstance().get(exist.getPath()))) {
                 // The first initialization
-                ApplicationConfigCache.getInstance().initService(metaData);
+                ApplicationConfigCache.getInstance().initRef(metaData);
             } else {
                 if (!exist.getServiceName().equals(metaData.getServiceName()) || !exist.getRpcExt().equals(metaData.getRpcExt())) {
                     // update

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -325,7 +325,7 @@ private void check(final String selectorId, final List<CommonUpstream> upstreamL
                     LOG.error("check the url={} is fail ", commonUpstream.getUpstreamUrl());
                 }
                 return null;
-            }).exceptionally(ex -> {
+            }, invokeExecutor).exceptionally(ex -> {
                 LOG.error("An exception occurred during the check of url {}: {}", commonUpstream.getUpstreamUrl(), ex);
                 return null;
             }));

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/ZombieUpstream.java
Patch:
@@ -130,7 +130,6 @@ public boolean equals(final Object o) {
         }
         ZombieUpstream that = (ZombieUpstream) o;
         return new EqualsBuilder()
-                .append(zombieCheckTimes, that.zombieCheckTimes)
                 .append(commonUpstream, that.commonUpstream)
                 .append(selectorId, that.selectorId)
                 .isEquals();
@@ -140,7 +139,6 @@ public boolean equals(final Object o) {
     public int hashCode() {
         return new HashCodeBuilder(17, 37)
                 .append(commonUpstream)
-                .append(zombieCheckTimes)
                 .append(selectorId)
                 .toHashCode();
     }

File: shenyu-common/src/test/java/org/apache/shenyu/common/config/ShenyuConfigTest.java
Patch:
@@ -80,14 +80,15 @@ private void notEmptyElements(final Object... objects) {
     public void testUpstreamCheck() {
         ShenyuConfig.UpstreamCheck upstreamCheck = config.getUpstreamCheck();
         upstreamCheck.setEnabled(false);
+        upstreamCheck.setPoolSize(10);
         upstreamCheck.setHealthyThreshold(4);
         upstreamCheck.setTimeout(10);
         upstreamCheck.setInterval(5);
         upstreamCheck.setUnhealthyThreshold(5);
         upstreamCheck.setPrintEnabled(false);
         upstreamCheck.setPrintInterval(5);
 
-        notEmptyElements(upstreamCheck.getEnabled(), upstreamCheck.getHealthyThreshold(), upstreamCheck.getTimeout(),
+        notEmptyElements(upstreamCheck.getEnabled(), upstreamCheck.getPoolSize(), upstreamCheck.getHealthyThreshold(), upstreamCheck.getTimeout(),
                 upstreamCheck.getInterval(), upstreamCheck.getUnhealthyThreshold(), upstreamCheck.getPrintInterval(), upstreamCheck.getPrintEnabled());
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/aspect/DataPermissionAspect.java
Patch:
@@ -94,7 +94,7 @@ private Object[] getFilterSQLData(final ProceedingJoinPoint point) {
             case DATA_PERMISSION_SELECTOR:
             case DATA_PERMISSION_RULE:
                 Stream.of(args)
-                        .filter(arg -> arg instanceof FilterQuery)
+                        .filter(FilterQuery.class::isInstance)
                         .forEach(q -> ((FilterQuery) q).setFilterIds(dataPermissionList));
                 break;
             default:

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractListDataChangedListener.java
Patch:
@@ -69,7 +69,7 @@ public abstract class AbstractListDataChangedListener implements DataChangedList
      *
      * @param changeData changeData
      */
-    public AbstractListDataChangedListener(final ChangeData changeData) {
+    protected AbstractListDataChangedListener(final ChangeData changeData) {
         this.changeData = changeData;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/etcd/EtcdClient.java
Patch:
@@ -62,7 +62,7 @@ public Boolean exists(final String key) {
             List<KeyValue> keyValues = client.getKVClient().get(ByteSequence.from(key, StandardCharsets.UTF_8), option).get().getKvs();
             return !keyValues.isEmpty();
         } catch (Exception e) {
-            LOG.error("check node exists error.", e);
+            LOG.error("check node exists error. {}", e.getMessage());
             throw new ShenyuException(e.getMessage());
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/bean/DocInfo.java
Patch:
@@ -26,7 +26,7 @@ public class DocInfo {
 
     private String title;
 
-    private transient String clusterName;
+    private String clusterName;
 
     private List<DocModule> docModuleList;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/DashboardUserDO.java
Patch:
@@ -178,12 +178,11 @@ public static DashboardUserDO.DashboardUserDOBuilder builder() {
     public static DashboardUserDO buildDashboardUserDO(final DashboardUserModifyPasswordDTO dashboardUserModifyPasswordDTO) {
         return Optional.ofNullable(dashboardUserModifyPasswordDTO).map(item -> {
             Timestamp currentTime = new Timestamp(System.currentTimeMillis());
-            DashboardUserDO dashboardUserDO = DashboardUserDO.builder()
+            return DashboardUserDO.builder()
                     .password(item.getPassword())
                     .dateUpdated(currentTime)
                     .id(item.getId())
                     .build();
-            return dashboardUserDO;
         }).orElse(null);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mybatis/oracle/OracleSQLPrepareInterceptor.java
Patch:
@@ -62,7 +62,7 @@ public Object intercept(final Invocation invocation) throws Throwable {
         // replace desc and true
         String replaceSql = boundSql.getSql().toLowerCase()
                 .replace("`desc`", "\"desc\"")
-                .replace("true", "\'true\'");
+                .replace("true", "'true'");
         // replace`
         replaceSql = replaceSql.replace("`", "");
         // replace resource

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -113,7 +113,7 @@ public ShenyuAdminResult applyCreate(final AuthApplyDTO authApplyDTO) {
                 .build();
 
         // save authPath
-        if (appAuthDO.getOpen()) {
+        if (Boolean.TRUE.equals(appAuthDO.getOpen())) {
             List<AuthPathDO> collect = authApplyDTO.getPathList()
                     .stream()
                     .map(path -> AuthPathDO.create(path, appAuthDO.getId(), authApplyDTO.getAppName()))
@@ -147,7 +147,7 @@ public ShenyuAdminResult applyUpdate(final AuthApplyDTO authApplyDTO) {
             authParamMapper.save(AuthParamDO.create(appAuthDO.getId(), authApplyDTO.getAppName(), authApplyDTO.getAppParam()));
         }
 
-        if (appAuthDO.getOpen()) {
+        if (Boolean.TRUE.equals(appAuthDO.getOpen())) {
             List<AuthPathDO> existList = authPathMapper.findByAuthIdAndAppName(appAuthDO.getId(), authApplyDTO.getAppName());
             if (CollectionUtils.isNotEmpty(existList)) {
                 authPathMapper.deleteByAuthIdAndAppName(appAuthDO.getId(), authApplyDTO.getAppName());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/LoadServiceDocEntryImpl.java
Patch:
@@ -61,7 +61,7 @@ public class LoadServiceDocEntryImpl implements LoadServiceDocEntry {
     private static final Logger LOG = LoggerFactory.getLogger(LoadServiceDocEntryImpl.class);
 
     @SuppressWarnings("unchecked")
-    private static Map<String, String> supportSwaggerPluginMap = Collections.EMPTY_MAP;
+    private static Map<String, String> supportSwaggerPluginMap = Collections.emptyMap();
 
     private final SelectorService selectorService;
 
@@ -216,7 +216,7 @@ private List<UpstreamInstance> getInstances(final String pluginId, final String
                 }
             } catch (Exception e) {
                 LOG.error("Error getting cluster instance list. contextPath={} error={}", contextPath, e);
-                return null;
+                return Collections.emptyList();
             }
         }
         return allInstances;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/HttpUtils.java
Patch:
@@ -32,12 +32,12 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Serializable;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -161,7 +161,7 @@ public void saveFromResponse(final HttpUrl httpUrl, final List<Cookie> list) {
                 @Override
                 public List<Cookie> loadForRequest(final HttpUrl httpUrl) {
                     List<Cookie> cookies = cookieStore.get(httpUrl.host());
-                    return cookies != null ? cookies : new ArrayList<Cookie>();
+                    return cookies != null ? cookies : new ArrayList<>();
                 }
             }).build();
     }
@@ -640,7 +640,7 @@ public static byte[] toBytes(final File file) throws IOException {
             }
             InputStream input = null;
             try {
-                input = new FileInputStream(file);
+                input = Files.newInputStream(file.toPath());
                 return toBytes(input);
             } finally {
                 try {

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/api/SignParameters.java
Patch:
@@ -23,7 +23,7 @@
 
 public class SignParameters {
 
-    public static final SignParameters ERROR_PARAMETERS = new SignParameters();
+    public static final SignParameters VERSION_ERROR_PARAMETERS = new SignParameters();
 
     private final String appKey;
 

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/extractor/DefaultExtractor.java
Patch:
@@ -42,13 +42,13 @@ public SignParameters extract(final HttpRequest httpRequest) {
 
         String version = httpRequest.getHeaders().getFirst(Constants.VERSION);
         if (Objects.isNull(version)) {
-            return SignParameters.ERROR_PARAMETERS;
+            return SignParameters.VERSION_ERROR_PARAMETERS;
         }
 
         SignParameterExtractor extractor = VERSION_EXTRACTOR.get(version);
 
         if (Objects.isNull(extractor)) {
-            return SignParameters.ERROR_PARAMETERS;
+            return SignParameters.VERSION_ERROR_PARAMETERS;
         }
 
         return extractor.extract(httpRequest);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.common.utils.UpstreamCheckUtils;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.slf4j.Logger;
@@ -184,7 +185,7 @@ public boolean submit(final String selectorId, final CommonUpstream commonUpstre
             return false;
         }
 
-        List<CommonUpstream> upstreams = UPSTREAM_MAP.computeIfAbsent(selectorId, k -> new CopyOnWriteArrayList<>());
+        List<CommonUpstream> upstreams = MapUtils.computeIfAbsent(UPSTREAM_MAP, selectorId, k -> new CopyOnWriteArrayList<>());
         if (commonUpstream.isStatus()) {
             Optional<CommonUpstream> exists = upstreams.stream().filter(item -> StringUtils.isNotBlank(item.getUpstreamUrl())
                     && item.getUpstreamUrl().equals(commonUpstream.getUpstreamUrl())).findFirst();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/validation/validator/ExistedValidator.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.utils.Assert;
 import org.apache.shenyu.admin.validation.ExistProvider;
 import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.common.utils.ReflectUtils;
 
 import java.io.Serializable;
@@ -66,7 +67,7 @@ public boolean isValid(final Serializable value, final ConstraintValidatorContex
     }
 
     private ExistProvider getExistProvider() {
-        return providerCacheMap.computeIfAbsent(annotation.provider().getName(), key -> SpringBeanUtils.getInstance().getBean(annotation.provider()));
+        return MapUtils.computeIfAbsent(providerCacheMap, annotation.provider().getName(), key -> SpringBeanUtils.getInstance().getBean(annotation.provider()));
     }
     
     private Boolean doValid(final Serializable value) {

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/cache/UpstreamCacheManager.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
 import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.config.ShenyuConfig.UpstreamCheck;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 
@@ -140,7 +141,7 @@ public void removeByKey(final String key) {
     public void submit(final String selectorId, final List<Upstream> upstreamList) {
         List<Upstream> validUpstreamList = upstreamList.stream().filter(Upstream::isStatus).collect(Collectors.toList());
         if (CollectionUtils.isNotEmpty(validUpstreamList)) {
-            List<Upstream> existUpstream = UPSTREAM_MAP.computeIfAbsent(selectorId, k -> Lists.newArrayList());
+            List<Upstream> existUpstream = MapUtils.computeIfAbsent(UPSTREAM_MAP, selectorId, k -> Lists.newArrayList());
             existUpstream.stream().filter(upstream -> !validUpstreamList.contains(upstream))
                     .forEach(upstream -> task.triggerRemoveOne(selectorId, upstream));
             validUpstreamList.stream().filter(upstream -> !existUpstream.contains(upstream))

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTask.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.common.utils.UpstreamCheckUtils;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.slf4j.Logger;
@@ -251,7 +252,7 @@ public void triggerRemoveOne(final String selectorId, final Upstream upstream) {
 
     private void putToMap(final Map<String, List<Upstream>> map, final String selectorId, final Upstream upstream) {
         synchronized (lock) {
-            List<Upstream> list = map.computeIfAbsent(selectorId, k -> Lists.newArrayList());
+            List<Upstream> list = MapUtils.computeIfAbsent(map, selectorId, k -> Lists.newArrayList());
             if (!list.contains(upstream)) {
                 list.add(upstream);
             }

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/spi/RoundRobinLoadBalancer.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.loadbalancer.spi;
 
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.spi.Join;
 
@@ -42,7 +43,7 @@ public class RoundRobinLoadBalancer extends AbstractLoadBalancer {
     @Override
     public Upstream doSelect(final List<Upstream> upstreamList, final String ip) {
         String key = upstreamList.get(0).getUrl();
-        ConcurrentMap<String, WeightedRoundRobin> map = methodWeightMap.computeIfAbsent(key, k -> new ConcurrentHashMap<>(16));
+        ConcurrentMap<String, WeightedRoundRobin> map = MapUtils.computeIfAbsent(methodWeightMap, key, k -> new ConcurrentHashMap<>(16));
         int totalWeight = 0;
         long maxCurrent = Long.MIN_VALUE;
         long now = System.currentTimeMillis();
@@ -51,7 +52,7 @@ public Upstream doSelect(final List<Upstream> upstreamList, final String ip) {
         for (Upstream upstream : upstreamList) {
             String rKey = upstream.getUrl();
             int weight = getWeight(upstream);
-            WeightedRoundRobin weightedRoundRobin = map.computeIfAbsent(rKey, k -> {
+            WeightedRoundRobin weightedRoundRobin = MapUtils.computeIfAbsent(map, rKey, k -> {
                 WeightedRoundRobin roundRobin = new WeightedRoundRobin();
                 roundRobin.setWeight(weight);
                 return roundRobin;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonPluginDataSubscriber.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.enums.PluginHandlerEventEnum;
 import org.apache.shenyu.common.enums.RuleTrieEventEnum;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.event.RuleTrieEvent;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
@@ -83,7 +84,7 @@ public void putExtendPluginDataHandler(final List<PluginDataHandler> handlers) {
         }
         for (PluginDataHandler handler : handlers) {
             String pluginNamed = handler.pluginNamed();
-            handlerMap.computeIfAbsent(pluginNamed, name -> {
+            MapUtils.computeIfAbsent(handlerMap, pluginNamed, name -> {
                 LOG.info("shenyu auto add extends plugin data handler name is :{}", pluginNamed);
                 return handler;
             });

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MatchDataCache.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.common.cache.MemorySafeWindowTinyLFUMap;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
+import org.apache.shenyu.common.utils.MapUtils;
 
 import java.util.Map;
 import java.util.Optional;
@@ -81,7 +82,7 @@ public void cleanSelectorData() {
      * @param maxMemory    the max memory
      */
     public void cacheSelectorData(final String path, final SelectorData selectorData, final Integer maxMemory) {
-        SELECTOR_DATA_MAP.computeIfAbsent(selectorData.getPluginName(), map -> new MemorySafeWindowTinyLFUMap<>(maxMemory, 1 << 16)).put(path, selectorData);
+        MapUtils.computeIfAbsent(SELECTOR_DATA_MAP, selectorData.getPluginName(), map -> new MemorySafeWindowTinyLFUMap<>(maxMemory, 1 << 16)).put(path, selectorData);
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/GrpcClientCache.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.grpc.cache;
 
 import com.google.common.collect.Maps;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.plugin.grpc.client.GrpcClientBuilder;
 import org.apache.shenyu.plugin.grpc.client.ShenyuGrpcClient;
 
@@ -50,7 +51,7 @@ private GrpcClientCache() {
      * @param contextPath contextPath
      */
     public static void initGrpcClient(final String contextPath) {
-        CLIENT_CACHE.computeIfAbsent(contextPath, s -> GrpcClientBuilder.buildClient(contextPath));
+        MapUtils.computeIfAbsent(CLIENT_CACHE, contextPath, s -> GrpcClientBuilder.buildClient(contextPath));
     }
     
     /**

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-consul/src/main/java/org/apache/shenyu/register/instance/consul/ConsulInstanceRegisterRepository.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.register.instance.api.ShenyuInstanceRegisterRepository;
 import org.apache.shenyu.register.instance.api.config.RegisterConfig;
 import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
@@ -168,7 +169,7 @@ public void watcherStart(final String selectKey, final WatcherListener watcherLi
             return;
         }
         synchronized (lock) {
-            eventListeners = listenerMap.computeIfAbsent(selectKey, s -> new HashSet<>());
+            eventListeners = MapUtils.computeIfAbsent(listenerMap, selectKey, s -> new HashSet<>());
         }
         eventListeners.add(watcherListener);
         watchFutures.add(this.executor.scheduleWithFixedDelay(() -> this.watchConfigKeyValues(selectKey),

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/main/java/org/apache/shenyu/sync/data/nacos/handler/NacosCacheHandler.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
@@ -171,7 +172,7 @@ public Executor getExecutor() {
             }
         };
         oc.change(getConfigAndSignListener(dataId, listener));
-        LISTENERS.computeIfAbsent(dataId, key -> new ArrayList<>()).add(listener);
+        MapUtils.computeIfAbsent(LISTENERS, dataId, key -> new ArrayList<>()).add(listener);
     }
 
     protected interface OnChange {

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/CryptorRequestPluginTest.java
Patch:
@@ -132,7 +132,7 @@ public void testWhenRequestBodyIsNull() throws Exception {
     @ValueSource(strings = {"decrypt", "encrypt"})
     public void testWhenDecryptionOrEncryptionIsFailed(final String way) throws Exception {
 
-        CryptorRuleHandler handler = buildRuleHandler("ras", way, "wrong_encrypt_key", "wrong_decrypt_key", "data");
+        CryptorRuleHandler handler = buildRuleHandler("rsa", way, "wrong_encrypt_key", "wrong_decrypt_key", "data");
         RuleLocalData ruleLocalData = ruleLocalData(handler, SINGLETON_CONDITION_LIST);
 
         initSelectorAndRules(PluginEnum.CRYPTOR_REQUEST.getName(), "", SINGLETON_CONDITION_LIST, Lists.newArrayList(ruleLocalData));
@@ -151,7 +151,7 @@ public void testWhenDecryptionOrEncryptionIsFailed(final String way) throws Exce
     @ValueSource(strings = {"decrypt", "encrypt"})
     public void testWhenKeyIsNull(final String way) throws Exception {
 
-        CryptorRuleHandler handler = buildRuleHandler("ras", way, null, null, "data");
+        CryptorRuleHandler handler = buildRuleHandler("rsa", way, null, null, "data");
 
         initSelectorAndRules(PluginEnum.CRYPTOR_REQUEST.getName(),
                 "", SINGLETON_CONDITION_LIST, singletonRuleLocalDataList(handler, SINGLETON_CONDITION_LIST));
@@ -167,7 +167,7 @@ public void testWhenKeyIsNull(final String way) throws Exception {
     @Test
     public void testWhenFieldNamesIsNull() throws Exception {
 
-        CryptorRuleHandler handler = buildRuleHandler("ras", "decrypt", RSA_PUBLIC_KEY, RSA_PRIVATE_KEY, null);
+        CryptorRuleHandler handler = buildRuleHandler("rsa", "decrypt", RSA_PUBLIC_KEY, RSA_PRIVATE_KEY, null);
 
         initSelectorAndRules(PluginEnum.CRYPTOR_REQUEST.getName(), "", SINGLETON_CONDITION_LIST,
                 singletonRuleLocalDataList(handler, SINGLETON_CONDITION_LIST));

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/CryptorResponsePluginTest.java
Patch:
@@ -134,7 +134,7 @@ public void testWhenDoesntExistFiled() throws Exception {
     @ValueSource(strings = {"decrypt", "encrypt"})
     public void testWhenDecryptionOrEncryptionIsFailed(final String way) throws Exception {
 
-        CryptorRuleHandler handler = buildRuleHandler("ras", way, "wrong_encrypt_key", "wrong_decrypt_key", "userId");
+        CryptorRuleHandler handler = buildRuleHandler("rsa", way, "wrong_encrypt_key", "wrong_decrypt_key", "userId");
         RuleLocalData ruleLocalData = ruleLocalData(handler, SINGLETON_CONDITION_LIST);
 
         initSelectorAndRules(PluginEnum.CRYPTOR_RESPONSE.getName(), "", SINGLETON_CONDITION_LIST, Lists.newArrayList(ruleLocalData));
@@ -150,7 +150,7 @@ public void testWhenDecryptionOrEncryptionIsFailed(final String way) throws Exce
     @ValueSource(strings = {"decrypt", "encrypt"})
     public void testWhenKeyIsNull(final String way) throws Exception {
 
-        CryptorRuleHandler handler = buildRuleHandler("ras", way, null, null, "data");
+        CryptorRuleHandler handler = buildRuleHandler("rsa", way, null, null, "data");
 
         initSelectorAndRules(PluginEnum.CRYPTOR_RESPONSE.getName(),
                 "", SINGLETON_CONDITION_LIST, singletonRuleLocalDataList(handler, SINGLETON_CONDITION_LIST));
@@ -166,7 +166,7 @@ public void testWhenKeyIsNull(final String way) throws Exception {
     @Test
     public void testWhenFieldNamesIsNull() throws Exception {
 
-        CryptorRuleHandler handler = buildRuleHandler("ras", "decrypt", RSA_PUBLIC_KEY, RSA_PRIVATE_KEY, null);
+        CryptorRuleHandler handler = buildRuleHandler("rsa", "decrypt", RSA_PUBLIC_KEY, RSA_PRIVATE_KEY, null);
 
         initSelectorAndRules(PluginEnum.CRYPTOR_RESPONSE.getName(), "", SINGLETON_CONDITION_LIST,
                 singletonRuleLocalDataList(handler, SINGLETON_CONDITION_LIST));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/TagDO.java
Patch:
@@ -168,6 +168,7 @@ public static TagDO buildTagDO(final TagDTO tagDTO) {
                 tagDO.setDateCreated(currentTime);
             } else {
                 tagDO.setId(item.getId());
+                tagDO.setDateCreated(currentTime);
             }
             return tagDO;
         }).orElse(null);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/RegisterCenterConfiguration.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.util.List;
 import java.util.Map;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -60,7 +61,7 @@ public ShenyuClientServerRegisterRepository shenyuClientServerRegisterRepository
         String registerType = shenyuRegisterCenterConfig.getRegisterType();
         ShenyuClientServerRegisterRepository registerRepository = ExtensionLoader.getExtensionLoader(ShenyuClientServerRegisterRepository.class).getJoin(registerType);
         RegisterClientServerDisruptorPublisher publisher = RegisterClientServerDisruptorPublisher.getInstance();
-        Map<String, ShenyuClientRegisterService> registerServiceMap = shenyuClientRegisterService.stream().collect(Collectors.toMap(ShenyuClientRegisterService::rpcType, e -> e));
+        Map<String, ShenyuClientRegisterService> registerServiceMap = shenyuClientRegisterService.stream().collect(Collectors.toMap(ShenyuClientRegisterService::rpcType, Function.identity()));
         publisher.start(registerServiceMap);
         registerRepository.init(publisher, shenyuRegisterCenterConfig);
         return registerRepository;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/ShenyuAdminConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.List;
 import java.util.Map;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -42,7 +43,7 @@ public class ShenyuAdminConfiguration {
      */
     @Bean
     public SelectorHandleConverterFactor selectorHandleConverterFactor(final List<SelectorHandleConverter> converterList) {
-        Map<String, SelectorHandleConverter> converterMap = converterList.stream().collect(Collectors.toMap(SelectorHandleConverter::pluginName, e -> e));
+        Map<String, SelectorHandleConverter> converterMap = converterList.stream().collect(Collectors.toMap(SelectorHandleConverter::pluginName, Function.identity()));
         return new SelectorHandleConverterFactor(converterMap);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/executor/RegisterServerConsumerExecutor.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -91,7 +92,7 @@ public QueueConsumerExecutor<Collection<DataTypeParent>> create() {
             Map<DataType, ExecutorTypeSubscriber<DataTypeParent>> maps = getSubscribers()
                     .stream()
                     .map(e -> (ExecutorTypeSubscriber<DataTypeParent>) e)
-                    .collect(Collectors.toMap(ExecutorTypeSubscriber::getType, e -> e));
+                    .collect(Collectors.toMap(ExecutorTypeSubscriber::getType, Function.identity()));
             return new RegisterServerConsumerExecutor(maps);
         }
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/consul/ConsulDataChangedInit.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.common.constant.ConsulConstants;
 
 import java.util.Objects;
+import java.util.stream.Stream;
 
 /**
  * The type Consul data changed init.
@@ -43,9 +44,7 @@ public ConsulDataChangedInit(final ConsulClient consulClient) {
 
     @Override
     protected boolean notExist() {
-        return dataKeyNotExist(ConsulConstants.PLUGIN_DATA)
-                && dataKeyNotExist(ConsulConstants.AUTH_DATA)
-                && dataKeyNotExist(ConsulConstants.META_DATA);
+        return Stream.of(ConsulConstants.PLUGIN_DATA, ConsulConstants.AUTH_DATA, ConsulConstants.META_DATA).allMatch(this::dataKeyNotExist);
     }
 
     private boolean dataKeyNotExist(final String dataKey) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/etcd/EtcdDataChangedInit.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.shenyu.admin.listener.AbstractDataChangedInit;
 import org.apache.shenyu.common.constant.DefaultPathConstants;
 
+import java.util.stream.Stream;
+
 /**
  * The type Etcd data changed init.
  *
@@ -40,8 +42,6 @@ public EtcdDataChangedInit(final EtcdClient etcdClient) {
 
     @Override
     protected boolean notExist() {
-        return !etcdClient.exists(DefaultPathConstants.PLUGIN_PARENT)
-                && !etcdClient.exists(DefaultPathConstants.APP_AUTH_PARENT)
-                && !etcdClient.exists(DefaultPathConstants.META_DATA);
+        return Stream.of(DefaultPathConstants.PLUGIN_PARENT, DefaultPathConstants.APP_AUTH_PARENT, DefaultPathConstants.META_DATA).noneMatch(etcdClient::exists);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/nacos/NacosDataChangedInit.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.util.Objects;
+import java.util.stream.Stream;
 
 /**
  * The type Nacos data changed init.
@@ -49,9 +50,8 @@ public NacosDataChangedInit(final ConfigService configService) {
 
     @Override
     protected boolean notExist() {
-        return dataIdNotExist(NacosPathConstants.PLUGIN_DATA_ID)
-                && dataIdNotExist(NacosPathConstants.AUTH_DATA_ID)
-                && dataIdNotExist(NacosPathConstants.META_DATA_ID);
+        return Stream.of(NacosPathConstants.PLUGIN_DATA_ID, NacosPathConstants.AUTH_DATA_ID, NacosPathConstants.META_DATA_ID).allMatch(
+            this::dataIdNotExist);
     }
 
     private boolean dataIdNotExist(final String pluginDataId) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedInit.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.shenyu.common.constant.DefaultPathConstants;
 import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 
+import java.util.stream.Stream;
+
 /**
  * The type Zookeeper data changed init.
  *
@@ -41,8 +43,6 @@ public ZookeeperDataChangedInit(final ZookeeperClient zkClient) {
 
     @Override
     protected boolean notExist() {
-        return !zkClient.isExist(DefaultPathConstants.PLUGIN_PARENT)
-                && !zkClient.isExist(DefaultPathConstants.APP_AUTH_PARENT)
-                && !zkClient.isExist(DefaultPathConstants.META_DATA);
+        return Stream.of(DefaultPathConstants.PLUGIN_PARENT, DefaultPathConstants.APP_AUTH_PARENT, DefaultPathConstants.META_DATA).noneMatch(zkClient::isExist);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PermissionServiceImpl.java
Patch:
@@ -48,6 +48,7 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
+import java.util.function.Function;
 import java.util.stream.Collectors;
 
 /**
@@ -255,7 +256,7 @@ private List<String> getListDiff(final List<String> preList, final List<String>
         
         Map<String, Integer> map = preList.stream()
                 .distinct()
-                .collect(Collectors.toMap(source -> source, source -> 1));
+                .collect(Collectors.toMap(Function.identity(), source -> 1));
         return lastList.stream()
                 .filter(item -> !map.containsKey(item))
                 .collect(Collectors.toList());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/LoadServiceDocEntryImpl.java
Patch:
@@ -143,8 +143,8 @@ private List<UpstreamInstance> getLastUpdateInstanceList(final List<SelectorData
      * @return List
      */
     private List<UpstreamInstance> getAllClusterLastUpdateInstanceList() {
-        List<String> pluginNames = new ArrayList<>();
-        RpcTypeEnum.acquireSupportSwaggers().forEach(rpcTypeEnum -> pluginNames.add(PluginNameAdapter.rpcTypeAdapter(rpcTypeEnum.getName())));
+        List<String> pluginNames = RpcTypeEnum.acquireSupportSwaggers().stream().map(
+            rpcTypeEnum -> PluginNameAdapter.rpcTypeAdapter(rpcTypeEnum.getName())).collect(Collectors.toList());
         final List<PluginDO> pluginDOList = pluginMapper.selectByNames(pluginNames);
         if (CollectionUtils.isEmpty(pluginDOList)) {
             return Collections.emptyList();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/PermissionControllerTest.java
Patch:
@@ -59,7 +59,7 @@ public void testGetUserPermissionByToken() {
                 Arrays.asList(new PermissionMenuVO.AuthPerm("perms2", "description2", "icon")));
         when(mockPermissionService.getPermissionMenu("token")).thenReturn(permissionMenuVO);
         final ShenyuAdminResult result = permissionController.getUserPermissionByToken("token");
-        assertThat(result.getCode().intValue(), is(CommonErrorCode.SUCCESSFUL));
+        assertThat(result.getCode(), is(CommonErrorCode.SUCCESSFUL));
         assertThat(result.getMessage(), is(ShenyuResultMessage.MENU_SUCCESS));
         assertThat(result.getData(), is(permissionMenuVO));
     }
@@ -68,7 +68,7 @@ public void testGetUserPermissionByToken() {
     public void testGetUserPermissionByTokenNull() {
         when(mockPermissionService.getPermissionMenu("token")).thenReturn(null);
         final ShenyuAdminResult result = permissionController.getUserPermissionByToken("token");
-        assertThat(result.getCode().intValue(), is(CommonErrorCode.ERROR));
+        assertThat(result.getCode(), is(CommonErrorCode.ERROR));
         assertThat(result.getMessage(), is(ShenyuResultMessage.MENU_FAILED));
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImplTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.admin.service.impl.MetaDataServiceImpl;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.CommonUpstream;
 import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.exception.ShenyuException;
@@ -121,7 +122,7 @@ public void testBuildHandle() {
         List<DivideUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, DivideUpstream.class);
         assertEquals(resultList.size(), 3);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
-                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> r.isStatus()), true);
+                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(CommonUpstream::isStatus), true);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 
@@ -135,7 +136,7 @@ public void testBuildHandle() {
         //localhost:8090 was removed because the stop time was too long
         assertEquals(resultList.size(), 3);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
-                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> r.isStatus()), true);
+                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(CommonUpstream::isStatus), true);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImplTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.admin.service.impl.MetaDataServiceImpl;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.DubboRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.CommonUpstream;
 import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.selector.DubboUpstream;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
@@ -129,7 +130,7 @@ public void testBuildHandle() {
         resultList = GsonUtils.getInstance().fromCurrentList(actual, DubboUpstream.class);
         assertEquals(resultList.size(), 3);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
-                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> r.isStatus()), true);
+                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(CommonUpstream::isStatus), true);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 
@@ -142,7 +143,7 @@ public void testBuildHandle() {
         resultList = GsonUtils.getInstance().fromCurrentList(actual, DubboUpstream.class);
         assertEquals(resultList.size(), 2);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
-                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> r.isStatus()), true);
+                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(CommonUpstream::isStatus), true);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImplTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.admin.service.converter.GrpcSelectorHandleConverter;
 import org.apache.shenyu.admin.service.impl.MetaDataServiceImpl;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
+import org.apache.shenyu.common.dto.convert.selector.CommonUpstream;
 import org.apache.shenyu.common.dto.convert.selector.GrpcUpstream;
 import org.apache.shenyu.common.dto.convert.selector.TarsUpstream;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
@@ -127,7 +128,7 @@ public void testBuildHandle() {
         actual = shenyuClientRegisterGrpcService.buildHandle(list, selectorDO);
         resultList = GsonUtils.getInstance().fromCurrentList(actual, GrpcUpstream.class);
         assertEquals(resultList.size(), 3);
-        assertEquals(resultList.stream().anyMatch(r -> r.isStatus()), true);
+        assertEquals(resultList.stream().anyMatch(CommonUpstream::isStatus), true);
 
         list.clear();
         list.add(URIRegisterDTO.builder().appName("test1").rpcType(RpcTypeEnum.GRPC.getName()).host("localhost").port(8090).build());
@@ -138,7 +139,7 @@ public void testBuildHandle() {
         resultList = GsonUtils.getInstance().fromCurrentList(actual, GrpcUpstream.class);
         assertEquals(resultList.size(), 2);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
-                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> r.isStatus()), true);
+                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(CommonUpstream::isStatus), true);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.admin.service.impl.MetaDataServiceImpl;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
+import org.apache.shenyu.common.dto.convert.selector.CommonUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
@@ -122,7 +123,7 @@ public void testBuildHandle() {
         SpringCloudSelectorHandle handle = GsonUtils.getInstance().fromJson(actual, SpringCloudSelectorHandle.class);
         assertEquals(handle.getDivideUpstreams().size(), 2);
         assertEquals(handle.getDivideUpstreams().stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
-                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> r.isStatus()), true);
+                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(CommonUpstream::isStatus), true);
         assertEquals(handle.getDivideUpstreams().stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 
@@ -136,7 +137,7 @@ public void testBuildHandle() {
         handle = GsonUtils.getInstance().fromJson(actual, SpringCloudSelectorHandle.class);
         assertEquals(handle.getDivideUpstreams().size(), 2);
         assertEquals(handle.getDivideUpstreams().stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
-                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> r.isStatus()), true);
+                .anyMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(CommonUpstream::isStatus), true);
         assertEquals(handle.getDivideUpstreams().stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 

File: shenyu-client/shenyu-client-brpc/src/main/java/org/apache/shenyu/client/brpc/BrpcContextRefreshedEventListener.java
Patch:
@@ -70,7 +70,7 @@ public BrpcContextRefreshedEventListener(final PropertiesConfig clientConfig,
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation, final Map<String, Object> beans) {
         ShenyuBrpcClient shenyuBrpcClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuBrpcClient.class);
         if (Objects.isNull(shenyuBrpcClient)) {
             return null;

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/GrpcClientEventListener.java
Patch:
@@ -73,7 +73,7 @@ public GrpcClientEventListener(final PropertiesConfig clientConfig, final Shenyu
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation, final Map<String, BindableService> beans) {
         ShenyuGrpcClient shenyuGrpcClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuGrpcClient.class);
         if (Objects.isNull(shenyuGrpcClient)) {
             return null;

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListener.java
Patch:
@@ -101,7 +101,7 @@ public SpringCloudClientEventListener(final PropertiesConfig clientConfig,
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation, final Map<String, Object> beans) {
         RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(method, RequestMapping.class);
         String produce = requestMapping.produces().length == 0 ? ShenyuClientConstants.MEDIA_TYPE_ALL_VALUE : String.join(",", requestMapping.produces());
         String consume = requestMapping.consumes().length == 0 ? ShenyuClientConstants.MEDIA_TYPE_ALL_VALUE : String.join(",", requestMapping.consumes());

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListener.java
Patch:
@@ -90,7 +90,7 @@ public SpringMvcClientEventListener(final PropertiesConfig clientConfig,
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation, final Map<String, Object> beans) {
         RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(method, RequestMapping.class);
         String produce = requestMapping.produces().length == 0 ? ShenyuClientConstants.MEDIA_TYPE_ALL_VALUE : String.join(",", requestMapping.produces());
         String consume = requestMapping.consumes().length == 0 ? ShenyuClientConstants.MEDIA_TYPE_ALL_VALUE : String.join(",", requestMapping.consumes());

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/MotanServiceEventListener.java
Patch:
@@ -72,7 +72,7 @@ public MotanServiceEventListener(final PropertiesConfig clientConfig,
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation, final Map<String, Object> beans) {
         ShenyuMotanClient shenyuMotanClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuMotanClient.class);
         if (Objects.isNull(shenyuMotanClient)) {
             return null;

File: shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceEventListener.java
Patch:
@@ -156,7 +156,8 @@ public void onApplicationEvent(final ContextRefreshedEvent contextRefreshedEvent
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation,
+                                                                                                           final Map<String, ServiceFactoryBean> beans) {
         ShenyuSofaClient shenyuSofaClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSofaClient.class);
         if (Objects.isNull(shenyuSofaClient)) {
             return null;

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanEventListener.java
Patch:
@@ -80,7 +80,7 @@ public TarsServiceBeanEventListener(final PropertiesConfig clientConfig, final S
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation, final Map<String, Object> beans) {
         ShenyuTarsClient shenyuTarsClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuTarsClient.class);
         if (Objects.isNull(shenyuTarsClient)) {
             return null;

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/SpringWebSocketClientEventListener.java
Patch:
@@ -84,7 +84,7 @@ public SpringWebSocketClientEventListener(final PropertiesConfig clientConfig,
     }
 
     @Override
-    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation) {
+    protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, String> buildApiDocSextet(final Method method, final Annotation annotation, final Map<String, Object> beans) {
         ShenyuSpringWebSocketClient shenyuSpringWebSocketClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuSpringWebSocketClient.class);
         if (Objects.isNull(shenyuSpringWebSocketClient)) {
             return null;

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/ComposableSignService.java
Patch:
@@ -49,7 +49,8 @@
  * The ComposableSignService is composable SignService.
  * <pre>
  *  1. new ComposableSignService(new DefaultExtractor(), new DefaultSignProvider())
- *    Implements from <a href="https://github.com/apache/shenyu/issues/4208">#4208</a>
+ *    Version 1: 2.5.0 SignService
+ *    Version 2:Implements from <a href="https://github.com/apache/shenyu/issues/4208">#4208</a>
  *    parameters:
  *     {
  *           "alg":"HMD5",

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -75,7 +75,7 @@ protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, Str
         String consume = ShenyuClientConstants.MEDIA_TYPE_ALL_VALUE;
         String[] values = new String[]{shenyuDubboClient.value()};
         ApiHttpMethodEnum[] apiHttpMethodEnums = new ApiHttpMethodEnum[]{ApiHttpMethodEnum.NOT_HTTP};
-        //TODO 获取dubbo version
+        //TODO get dubbo version
         String version = "v0.01";
         return Sextet.with(values, consume, produce, apiHttpMethodEnums, RpcTypeEnum.DUBBO, version);
     }

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -78,7 +78,7 @@ protected Sextet<String[], String, String, ApiHttpMethodEnum[], RpcTypeEnum, Str
         String consume = ShenyuClientConstants.MEDIA_TYPE_ALL_VALUE;
         String[] values = new String[]{shenyuDubboClient.value()};
         ApiHttpMethodEnum[] apiHttpMethodEnums = new ApiHttpMethodEnum[]{ApiHttpMethodEnum.NOT_HTTP};
-        //TODO 获取dubbo version
+        //TODO get dubbo version
         String version = "v0.01";
         return Sextet.with(values, consume, produce, apiHttpMethodEnums, RpcTypeEnum.DUBBO, version);
     }

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-annotation-websocket/src/main/java/org/apache/shenyu/examples/websocket/service/SaveFileImpl.java
Patch:
@@ -32,9 +32,9 @@ public class SaveFileImpl implements SaveFile {
 
     @Override
     public boolean saveFileFromBytes(final byte[] b, final Map<String, Object> map) {
-        //从map中获取file对象
+        // get the file object from the map
         File file = (File) map.get("file");
-        //判断路径是否存在，不存在就创建
+        // determine whether the path exists, create it if it does not exist
         if (!file.getParentFile().exists()) {
             file.getParentFile().mkdirs();
         }

File: shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/proxy/BrpcProxyService.java
Patch:
@@ -93,14 +93,14 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
         })).onErrorMap(ShenyuException::new);
     }
 
-    private Map<String, String> getValue(final MetaData metaData, final Object[] params) {
+    private Object getValue(final MetaData metaData, final Object[] params) {
         try {
             AsyncGenericService service = ApplicationConfigCache.getInstance().get(metaData.getPath());
             if (Objects.isNull(service)) {
                 ApplicationConfigCache.getInstance().invalidate(metaData.getPath());
                 service = ApplicationConfigCache.getInstance().initService(metaData);
             }
-            Map<String, String> result = (Map<String, String>) service.$invokeFuture(metaData.getMethodName(), params).get();
+            Object result = service.$invokeFuture(metaData.getMethodName(), params).get();
             return result;
         } catch (Exception e) {
             LOG.error("Exception caught in BrpcProxyService#genericInvoker.", e);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SandboxController.java
Patch:
@@ -27,6 +27,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.validation.Valid;
+import java.io.IOException;
 
 /**
  * Sandbox environment.
@@ -47,12 +48,12 @@ public SandboxController(final SandboxService sandboxService) {
      * @param proxyGatewayDTO proxyGatewayDTO
      * @param request         request
      * @param response        response
+     * @throws IOException throw io exception
      */
     @PostMapping(path = "/proxyGateway")
     public void proxyGateway(@RequestBody @Valid final ProxyGatewayDTO proxyGatewayDTO,
                             final HttpServletRequest request,
-                            final HttpServletResponse response) {
-
+                            final HttpServletResponse response) throws IOException {
         sandboxService.requestProxyGateway(proxyGatewayDTO, request, response);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SandboxService.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
 
 /**
  * sandbox service.
@@ -33,6 +34,7 @@ public interface SandboxService {
      * @param proxyGatewayDTO proxyGatewayDTO
      * @param request         request
      * @param response        response
+     * @throws IOException throw io exception
      */
-    void requestProxyGateway(ProxyGatewayDTO proxyGatewayDTO, HttpServletRequest request, HttpServletResponse response);
+    void requestProxyGateway(ProxyGatewayDTO proxyGatewayDTO, HttpServletRequest request, HttpServletResponse response) throws IOException;
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/handler/LoggingKafkaPluginDataHandlerTest.java
Patch:
@@ -57,7 +57,7 @@ public void setUp() {
         List<ConditionData> list = new ArrayList<>();
         list.add(conditionData);
         selectorData.setConditionList(list);
-        pluginData.setEnabled(true);
+        pluginData.setEnabled(false);
         pluginData.setConfig("{\"topic\":\"test\", \"namesrvAddr\":\"localhost:8082\"}");
     }
 

File: shenyu-client/shenyu-client-brpc/src/test/java/org/apache/shenyu/client/brpc/BrpcClientEventListenerTest.java
Patch:
@@ -45,7 +45,7 @@
 import static org.mockito.Mockito.when;
 
 /**
- * Test for {@link BrpcClientEventListenerTest}.
+ * Test for {@link BrpcContextRefreshedEventListener}.
  */
 @ExtendWith(MockitoExtension.class)
 public class BrpcClientEventListenerTest {

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/AbstractShenyuPluginTest.java
Patch:
@@ -171,7 +171,7 @@ public void executeRuleFullTest() {
     private void mockShenyuConfig() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         when(context.getBean(ShenyuConfig.class)).thenReturn(new ShenyuConfig());
-        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
+        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
         SpringBeanUtils.getInstance().setApplicationContext(context);
     }
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/CommonPluginDataSubscriberTest.java
Patch:
@@ -233,7 +233,7 @@ public void testRefreshRuleDataSelf() {
 
     private void mockShenyuTrieConfig() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
+        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
         SpringBeanUtils.getInstance().setApplicationContext(context);
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/gateway/ShenyuConfiguration.java
Patch:
@@ -267,8 +267,8 @@ public ShenyuConfig shenyuConfig() {
      */
     @Bean
     public ShenyuTrie shenyuTrie(final ShenyuConfig shenyuConfig) {
-        return new ShenyuTrie(shenyuConfig.getTrie().getPathRuleCacheSize(), shenyuConfig.getTrie().getTrieChildrenSize(),
-                shenyuConfig.getTrie().getMatchMode());
+        return new ShenyuTrie(shenyuConfig.getTrie().getChildrenSize(), shenyuConfig.getTrie().getPathRuleCacheSize(),
+                shenyuConfig.getTrie().getPathVariableSize(), shenyuConfig.getTrie().getMatchMode());
     }
 
     /**

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/LocalPluginControllerTest.java
Patch:
@@ -490,7 +490,7 @@ public void testBuildDefaultRuleData() throws NoSuchMethodException, InvocationT
 
     private void mockShenyuTrieConfig() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
+        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
         SpringBeanUtils.getInstance().setApplicationContext(context);
     }
 }

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -63,8 +63,7 @@ protected Mono<ClientResponse> doRequest(final ServerWebExchange exchange, final
                         .flatMap(bytes -> Mono.fromCallable(() -> Optional.ofNullable(bytes))).defaultIfEmpty(Optional.empty())
                         .flatMap(option -> {
                             final ClientResponse.Builder builder = ClientResponse.create(response.statusCode())
-                                    .headers(headers -> headers.addAll(response.headers().asHttpHeaders()))
-                                    .cookies(cookies -> cookies.addAll(response.cookies()));
+                                    .headers(headers -> headers.addAll(response.headers().asHttpHeaders()));
                             if (option.isPresent()) {
                                 final DataBufferFactory dataBufferFactory = exchange.getResponse().bufferFactory();
                                 return Mono.just(builder.body(Flux.just(dataBufferFactory.wrap(option.get()))).build());

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-dubbo/shenyu-examples-sdk-alibaba-dubbo-consumer/src/main/java/org/apache/shenyu/examples/sdk/alibaba/dubbo/consumer/api/ShenyuAlibabaDubboClientApi.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * ShenyuApacheDubboClientApi.
  */
-@ShenyuClient(contextId = "shenyu-gateway", name = "ShenyuSdkApiName", fallback = ShenyuAlibabaDubboClientApiFallBack.class)
+@ShenyuClient(value = "shenyu-gateway", fallback = ShenyuAlibabaDubboClientApiFallBack.class)
 public interface ShenyuAlibabaDubboClientApi {
 
     /**

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-grpc/shenyu-examples-sdk-grpc-consumer/src/main/java/org/apache/shenyu/examples/sdk/grpc/consumer/api/ShenyuGrpcClientApi.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.util.List;
 
-@ShenyuClient(contextId = "SHENYU-BOOTSTRAP", name = "ShenyuGrpclientApi")
+@ShenyuClient(value = "shenyu-gateway")
 public interface ShenyuGrpcClientApi {
 
     /**

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-springcloud/shenyu-examples-sdk-springcloud-consumer/src/main/java/org/apache/shenyu/examples/sdk/springcloud/consumer/api/ShenyuSpringCloudClientApi.java
Patch:
@@ -26,9 +26,7 @@
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestParam;
 
-@ShenyuClient(contextId = "SHENYU-BOOTSTRAP",
-        name = "ShenyuSpringCloudClientApi",
-        fallbackFactory = ShenyuSpringCloudClientApiFallbackFactory.class)
+@ShenyuClient(value = "shenyu-gateway", fallbackFactory = ShenyuSpringCloudClientApiFallbackFactory.class)
 public interface ShenyuSpringCloudClientApi {
 
     /**

File: shenyu-integrated-test/shenyu-integrated-test-sdk-apache-dubbo/src/test/java/org/apache/shenyu/integrated/test/apache/dubbo/ApacheDubboPluginTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
+import java.util.ArrayList;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
@@ -47,7 +48,7 @@ public void testFindAll() throws IOException {
     @Test
     public void testFindAllFallBck() throws IOException {
 
-        DubboTest dubboTest = HttpHelper.INSTANCE.getHttpService("http://localhost:8899/sdk/dubbo/findAll", null, DubboTest.class);
+        DubboTest dubboTest = HttpHelper.INSTANCE.postHttpService("http://localhost:8899/sdk/dubbo/findByListId", null, new ArrayList<>(), DubboTest.class);
         assertEquals("fallback", dubboTest.getName());
     }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/RpcParamTransformPlugin.java
Patch:
@@ -113,7 +113,8 @@ public boolean skip(final ServerWebExchange exchange) {
                 RpcTypeEnum.GRPC,
                 RpcTypeEnum.TARS,
                 RpcTypeEnum.MOTAN,
-                RpcTypeEnum.SOFA);
+                RpcTypeEnum.SOFA,
+                RpcTypeEnum.BRPC);
     }
 
     @NonNull

File: shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/ContextPathPlugin.java
Patch:
@@ -81,7 +81,8 @@ public boolean skip(final ServerWebExchange exchange) {
                 RpcTypeEnum.GRPC,
                 RpcTypeEnum.TARS,
                 RpcTypeEnum.MOTAN,
-                RpcTypeEnum.SOFA);
+                RpcTypeEnum.SOFA,
+                RpcTypeEnum.BRPC);
     }
     
     private ContextMappingRuleHandle buildRuleHandle(final RuleData rule) {

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriter.java
Patch:
@@ -58,6 +58,6 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
     @Override
     public List<String> supportTypes() {
         return Lists.newArrayList(RpcTypeEnum.DUBBO.getName(), RpcTypeEnum.SOFA.getName(), 
-                RpcTypeEnum.GRPC.getName(), RpcTypeEnum.MOTAN.getName(), RpcTypeEnum.TARS.getName());
+                RpcTypeEnum.GRPC.getName(), RpcTypeEnum.MOTAN.getName(), RpcTypeEnum.TARS.getName(), RpcTypeEnum.BRPC.getName());
     }
 }

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java
Patch:
@@ -69,7 +69,8 @@ public boolean skip(final ServerWebExchange exchange) {
                 RpcTypeEnum.GRPC,
                 RpcTypeEnum.TARS,
                 RpcTypeEnum.MOTAN,
-                RpcTypeEnum.SOFA);
+                RpcTypeEnum.SOFA,
+                RpcTypeEnum.BRPC);
     }
 
     @Override

File: shenyu-client/shenyu-client-brpc/src/test/java/org/apache/shenyu/client/brpc/BrpcClientEventListenerTest.java
Patch:
@@ -72,7 +72,7 @@ public void testNormalBeanProcess() {
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.of("token"));
         BrpcContextRefreshedEventListener springMvcClientEventListener = buildBrpcClientEventListener();
         springMvcClientEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
     
@@ -83,7 +83,7 @@ public void testWithShenyuClientAnnotation() {
                 .thenAnswer((Answer<Void>) invocation -> null);
         BrpcContextRefreshedEventListener springMvcClientEventListener = buildBrpcClientEventListener();
         springMvcClientEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
     

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/disruptor/ShenyuClientRegisterEventPublisher.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.client.core.disruptor;
 
 import org.apache.shenyu.client.core.disruptor.executor.RegisterClientConsumerExecutor.RegisterClientExecutorFactory;
+import org.apache.shenyu.client.core.disruptor.subcriber.ShenyuClientApiDocExecutorSubscriber;
 import org.apache.shenyu.client.core.disruptor.subcriber.ShenyuClientMetadataExecutorSubscriber;
 import org.apache.shenyu.client.core.disruptor.subcriber.ShenyuClientURIExecutorSubscriber;
 import org.apache.shenyu.disruptor.DisruptorProviderManage;
@@ -52,6 +53,7 @@ public void start(final ShenyuClientRegisterRepository shenyuClientRegisterRepos
         RegisterClientExecutorFactory factory = new RegisterClientExecutorFactory();
         factory.addSubscribers(new ShenyuClientMetadataExecutorSubscriber(shenyuClientRegisterRepository));
         factory.addSubscribers(new ShenyuClientURIExecutorSubscriber(shenyuClientRegisterRepository));
+        factory.addSubscribers(new ShenyuClientApiDocExecutorSubscriber(shenyuClientRegisterRepository));
         providerManage = new DisruptorProviderManage<>(factory);
         providerManage.startup();
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListenerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testNormalBeanProcess() {
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.of("token"));
         SpringCloudClientEventListener springCloudClientEventListener = buildSpringCloudClientEventListener(false);
         springCloudClientEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
 
@@ -112,7 +112,7 @@ public void testWithShenyuClientAnnotation() {
                 .thenAnswer((Answer<Void>) invocation -> null);
         SpringCloudClientEventListener springCloudClientEventListener = buildSpringCloudClientEventListener(false);
         springCloudClientEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
 

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListenerTest.java
Patch:
@@ -109,7 +109,7 @@ public void testNormalBeanProcess() {
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.of("token"));
         SpringMvcClientEventListener springMvcClientEventListener = buildSpringMvcClientEventListener(false, true);
         springMvcClientEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
 
@@ -121,7 +121,7 @@ public void testWithShenyuClientAnnotation() {
                 .thenAnswer((Answer<Void>) invocation -> null);
         SpringMvcClientEventListener springMvcClientEventListener = buildSpringMvcClientEventListener(false, true);
         springMvcClientEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
 

File: shenyu-client/shenyu-client-tars/src/test/java/org/apache/shenyu/client/tars/TarsServiceBeanPostProcessorTest.java
Patch:
@@ -88,7 +88,7 @@ public void testPostProcessAfterInitialization() {
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.of("token"));
         TarsServiceBeanEventListener tarsServiceBeanEventListener = buildTarsServiceBeanEventListener(true);
         tarsServiceBeanEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
 
@@ -97,7 +97,7 @@ public void testPostProcessNormalBean() {
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.of("token"));
         TarsServiceBeanEventListener tarsServiceBeanEventListener = buildTarsServiceBeanEventListener(false);
         tarsServiceBeanEventListener.onApplicationEvent(contextRefreshedEvent);
-        verify(applicationContext, times(1)).getBeansWithAnnotation(any());
+        verify(applicationContext, times(2)).getBeansWithAnnotation(any());
         registerUtilsMockedStatic.close();
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -273,7 +273,7 @@ private List<RuleData> buildRuleDataList(final List<RuleDO> ruleDOList) {
                 .orElseGet(ArrayList::new)
                 .stream()
                 .filter(Objects::nonNull)
-                .collect(Collectors.toMap(RuleConditionDO::getRuleId, ruleConditionDO -> ListUtil.of(ConditionTransfer.INSTANCE.mapToRuleDO(ruleConditionDO)), ListUtil::merge));
+                .collect(Collectors.toMap(RuleConditionDO::getRuleId, ruleConditionDO -> ListUtil.list(ConditionTransfer.INSTANCE.mapToRuleDO(ruleConditionDO)), ListUtil::merge));
         
         return ruleDOList.stream()
                 .filter(Objects::nonNull)

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/PluginHandlerEvent.java
Patch:
@@ -26,6 +26,8 @@
  */
 public class PluginHandlerEvent extends ApplicationEvent {
 
+    private static final long serialVersionUID = 3880398095608858961L;
+
     private final PluginHandlerEventEnum pluginHandlerEventEnum;
 
     public PluginHandlerEvent(final PluginHandlerEventEnum pluginHandlerEventEnum, final PluginData source) {

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/AbstractShenyuPluginTest.java
Patch:
@@ -23,9 +23,11 @@
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
+import org.apache.shenyu.common.enums.TrieMatchModeEvent;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
+import org.apache.shenyu.plugin.base.trie.ShenyuTrie;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.context.ConfigurableApplicationContext;
@@ -169,6 +171,7 @@ public void executeRuleFullTest() {
     private void mockShenyuConfig() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         when(context.getBean(ShenyuConfig.class)).thenReturn(new ShenyuConfig());
+        when(context.getBean(ShenyuTrie.class)).thenReturn(new ShenyuTrie(100L, 100L, TrieMatchModeEvent.ANT_PATH_MATCH.getMatchMode()));
         SpringBeanUtils.getInstance().setApplicationContext(context);
     }
 

File: shenyu-web/src/main/java/org/apache/shenyu/web/forward/ForwardedRemoteAddressResolver.java
Patch:
@@ -84,7 +84,6 @@ public static ForwardedRemoteAddressResolver maxTrustedIndex(final int maxTruste
     @Override
     public InetSocketAddress resolve(final ServerWebExchange exchange) {
         List<String> xForwardedValues = extractXForwardedValues(exchange);
-        Collections.reverse(xForwardedValues);
         if (!xForwardedValues.isEmpty()) {
             int index = Math.min(xForwardedValues.size(), maxTrustedIndex) - 1;
             return new InetSocketAddress(xForwardedValues.get(index), 0);

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -172,6 +172,7 @@ protected MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean bean,
 
     private String buildRpcExt(final ServiceBean<?> serviceBean) {
         DubboRpcExt build = DubboRpcExt.builder()
+                .protocol(StringUtils.isNotEmpty(serviceBean.getProtocol().getName()) ? serviceBean.getProtocol().getName() : "")
                 .group(StringUtils.isNotEmpty(serviceBean.getGroup()) ? serviceBean.getGroup() : "")
                 .version(StringUtils.isNotEmpty(serviceBean.getVersion()) ? serviceBean.getVersion() : "")
                 .loadbalance(StringUtils.isNotEmpty(serviceBean.getLoadbalance()) ? serviceBean.getLoadbalance() : Constants.DEFAULT_LOADBALANCE)

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -174,6 +174,7 @@ protected MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean bean,
     
     private String buildRpcExt(final ServiceBean<?> serviceBean) {
         DubboRpcExt build = DubboRpcExt.builder()
+                .protocol(StringUtils.isNotEmpty(serviceBean.getProtocol().getName()) ? serviceBean.getProtocol().getName() : "")
                 .group(StringUtils.isNotEmpty(serviceBean.getGroup()) ? serviceBean.getGroup() : "")
                 .version(StringUtils.isNotEmpty(serviceBean.getVersion()) ? serviceBean.getVersion() : "")
                 .loadbalance(StringUtils.isNotEmpty(serviceBean.getLoadbalance()) ? serviceBean.getLoadbalance() : CommonConstants.DEFAULT_LOADBALANCE)

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/AlibabaDubboConfigCache.java
Patch:
@@ -156,6 +156,7 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
         reference.setRegistry(registryConfig);
         reference.setConsumer(consumerConfig);
         reference.setInterface(metaData.getServiceName());
+        // default protocol is dubbo
         reference.setProtocol("dubbo");
         reference.setAsync(true);
         reference.setCheck(false);
@@ -180,6 +181,8 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
             if (StringUtils.isNoneBlank(dubboParam.getCluster())) {
                 reference.setCluster(dubboParam.getCluster());
             }
+            // set dubbo sub protocol
+            Optional.ofNullable(dubboParam.getProtocol()).ifPresent(reference::setProtocol);
             Optional.ofNullable(dubboParam.getTimeout()).ifPresent(reference::setTimeout);
             Optional.ofNullable(dubboParam.getRetries()).ifPresent(reference::setRetries);
             Optional.ofNullable(dubboParam.getSent()).ifPresent(reference::setSent);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java
Patch:
@@ -199,6 +199,7 @@ private ReferenceConfig<GenericService> buildReference(final MetaData metaData,
         reference.setRegistry(registryConfig);
         reference.setConsumer(consumerConfig);
         reference.setInterface(metaData.getServiceName());
+        // default protocol is dubbo
         reference.setProtocol("dubbo");
         reference.setCheck(false);
         reference.setLoadbalance("gray");
@@ -222,6 +223,8 @@ private ReferenceConfig<GenericService> buildReference(final MetaData metaData,
             if (StringUtils.isNoneBlank(dubboParam.getCluster())) {
                 reference.setCluster(dubboParam.getCluster());
             }
+            // set dubbo sub protocol
+            Optional.ofNullable(dubboParam.getProtocol()).ifPresent(reference::setProtocol);
             Optional.ofNullable(dubboParam.getTimeout()).ifPresent(reference::setTimeout);
             Optional.ofNullable(dubboParam.getRetries()).ifPresent(reference::setRetries);
             Optional.ofNullable(dubboParam.getSent()).ifPresent(reference::setSent);

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuLoaderService.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class ShenyuLoaderService {
     
-    private static final Logger LOG = LoggerFactory.getLogger(ShenyuWebHandler.class);
+    private static final Logger LOG = LoggerFactory.getLogger(ShenyuLoaderService.class);
     
     private final ShenyuWebHandler webHandler;
     

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/cache/UpstreamCacheManager.java
Patch:
@@ -132,13 +132,13 @@ public void removeByKey(final String key) {
     }
 
     /**
-     * Submit.
+     * Submit .
      *
      * @param selectorId the selector id
      * @param upstreamList the upstream list
      */
     public void submit(final String selectorId, final List<Upstream> upstreamList) {
-        List<Upstream> validUpstreamList = upstreamList.stream().filter(upstream -> upstream.isStatus()).collect(Collectors.toList());
+        List<Upstream> validUpstreamList = upstreamList.stream().filter(Upstream::isStatus).collect(Collectors.toList());
         if (CollectionUtils.isNotEmpty(validUpstreamList)) {
             List<Upstream> existUpstream = UPSTREAM_MAP.computeIfAbsent(selectorId, k -> Lists.newArrayList());
             existUpstream.stream().filter(upstream -> !validUpstreamList.contains(upstream))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImplTest.java
Patch:
@@ -117,8 +117,7 @@ public void testBuildHandle() {
         when(selectorDO.getHandle()).thenReturn(returnStr);
         doReturn(false).when(shenyuClientRegisterDivideService).doSubmit(any(), any());
         String actual = shenyuClientRegisterDivideService.buildHandle(list, selectorDO);
-        JsonParser parser = new JsonParser();
-        assertEquals(parser.parse(expected.replaceAll("\\d{13}", "0")), parser.parse(actual.replaceAll("\\d{13}", "0")));
+        assertEquals(JsonParser.parseString(expected.replaceAll("\\d{13}", "0")), JsonParser.parseString(actual.replaceAll("\\d{13}", "0")));
         List<DivideUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, DivideUpstream.class);
         assertEquals(resultList.size(), 3);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImplTest.java
Patch:
@@ -116,8 +116,7 @@ public void testBuildHandle() {
         when(selectorDO.getHandle()).thenReturn(returnStr);
         doReturn(false).when(shenyuClientRegisterDubboService).doSubmit(any(), any());
         String actual = shenyuClientRegisterDubboService.buildHandle(list, selectorDO);
-        JsonParser parser = new JsonParser();
-        assertEquals(parser.parse(expected.replaceAll("\\d{13}", "0")), parser.parse(actual.replaceAll("\\d{13}", "0")));
+        assertEquals(JsonParser.parseString(expected.replaceAll("\\d{13}", "0")), JsonParser.parseString(actual.replaceAll("\\d{13}", "0")));
         List<DubboUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, DubboUpstream.class);
         assertEquals(resultList.size(), 2);
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImplTest.java
Patch:
@@ -115,8 +115,7 @@ public void testBuildHandle() {
         when(selectorDO.getHandle()).thenReturn(returnStr);
         doReturn(false).when(shenyuClientRegisterGrpcService).doSubmit(any(), any());
         String actual = shenyuClientRegisterGrpcService.buildHandle(list, selectorDO);
-        JsonParser parser = new JsonParser();
-        assertEquals(parser.parse(expected), parser.parse(actual));
+        assertEquals(JsonParser.parseString(expected), JsonParser.parseString(actual));
         List<GrpcUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, GrpcUpstream.class);
         assertEquals(resultList.size(), 2);
     

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSofaServiceImplTest.java
Patch:
@@ -68,8 +68,7 @@ public void testSelectorHandler() {
     
     @Test
     public void testRuleHandler() {
-        JsonParser parser = new JsonParser();
-        assertEquals(parser.parse("{\"retries\":0,\"loadBalance\":\"random\",\"timeout\":3000}"), parser.parse(shenyuClientRegisterSofaService.ruleHandler()));
+        assertEquals(JsonParser.parseString("{\"retries\":0,\"loadBalance\":\"random\",\"timeout\":3000}"), JsonParser.parseString(shenyuClientRegisterSofaService.ruleHandler()));
     }
     
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java
Patch:
@@ -118,8 +118,7 @@ public void testBuildHandle() {
         doReturn(false).when(shenyuClientRegisterSpringCloudService).doSubmit(any(), any());
         when(selectorDO.getHandle()).thenReturn(returnStr);
         String actual = shenyuClientRegisterSpringCloudService.buildHandle(list, selectorDO);
-        JsonParser parser = new JsonParser();
-        assertEquals(parser.parse(expected.replaceAll("\\d{13}", "0")), parser.parse(actual.replaceAll("\\d{13}", "0")));
+        assertEquals(JsonParser.parseString(expected.replaceAll("\\d{13}", "0")), JsonParser.parseString(actual.replaceAll("\\d{13}", "0")));
         SpringCloudSelectorHandle handle = GsonUtils.getInstance().fromJson(actual, SpringCloudSelectorHandle.class);
         assertEquals(handle.getDivideUpstreams().size(), 2);
         assertEquals(handle.getDivideUpstreams().stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImplTest.java
Patch:
@@ -114,8 +114,7 @@ public void testBuildHandle() {
         when(selectorDO.getHandle()).thenReturn(returnStr);
         doReturn(false).when(shenyuClientRegisterTarsService).doSubmit(any(), any());
         String actual = shenyuClientRegisterTarsService.buildHandle(list, selectorDO);
-        JsonParser parser = new JsonParser();
-        assertEquals(parser.parse(expected.replaceAll("\\d{13}", "0")), parser.parse(actual.replaceAll("\\d{13}", "0")));
+        assertEquals(JsonParser.parseString(expected.replaceAll("\\d{13}", "0")), JsonParser.parseString(actual.replaceAll("\\d{13}", "0")));
         List<TarsUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, TarsUpstream.class);
         assertEquals(resultList.size(), 2);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/JsonUtilsTest.java
Patch:
@@ -75,9 +75,8 @@ public void toJson() {
                     }
                 })
                 .build();
-        JsonParser parser = new JsonParser();
-        JsonElement expectedJson = parser.parse(EXPECTED_JSON);
-        JsonElement objectJson = parser.parse(JsonUtils.toJson(object));
+        JsonElement expectedJson = JsonParser.parseString(EXPECTED_JSON);
+        JsonElement objectJson = JsonParser.parseString(JsonUtils.toJson(object));
         assertEquals(expectedJson, objectJson);
 
         Object o = new Object();

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java
Patch:
@@ -72,7 +72,7 @@ public static String replace(final String originalBody, final String modifiedBod
         }
         AtomicInteger initDeep = new AtomicInteger();
         initDeep.set(0);
-        JsonElement je = new JsonParser().parse(originalBody);
+        JsonElement je = JsonParser.parseString(originalBody);
         JsonElement resultJe = JsonUtil.replaceJsonNode(je,
                 initDeep,
                 modifiedBody,

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/request/CryptorRequestPlugin.java
Patch:
@@ -69,7 +69,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             return chain.execute(exchange);
         }
 
-        Pair<Boolean, String> pair = JsonUtil.checkParam(ruleHandle);
+        Pair<Boolean, String> pair = CryptorUtil.checkParam(ruleHandle);
         if (Boolean.TRUE.equals(pair.getLeft())) {
             ShenyuResultEnum resultEnum = ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION;
             return WebFluxResultUtils.failedResult(resultEnum.getCode(),

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePlugin.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.cryptor.decorator.CryptorResponseDecorator;
-import org.apache.shenyu.plugin.cryptor.handler.CryptorRuleHandler;
 import org.apache.shenyu.plugin.cryptor.handler.CryptorResponsePluginDataHandler;
-import org.apache.shenyu.plugin.cryptor.utils.JsonUtil;
+import org.apache.shenyu.plugin.cryptor.handler.CryptorRuleHandler;
+import org.apache.shenyu.plugin.cryptor.utils.CryptorUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.web.server.ServerWebExchange;
@@ -52,7 +52,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             LOG.error("Cryptor response rule configuration is null :{}", rule.getId());
             return chain.execute(exchange);
         }
-        Pair<Boolean, String> pair = JsonUtil.checkParam(ruleHandle);
+        Pair<Boolean, String> pair = CryptorUtil.checkParam(ruleHandle);
         if (Boolean.TRUE.equals(pair.getLeft())) {
             Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getCode(),
                     ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getMsg() + "[" + pair.getRight() + "]", null);

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/decorator/CryptorResponseDecorator.java
Patch:
@@ -68,6 +68,6 @@ private Mono strategyMatch(final String originalBody, final CryptorRuleHandler r
         if (Objects.isNull(modifiedBody)) {
             return CryptorUtil.fail(ruleHandle.getWay(), exchange);
         }
-        return CryptorUtil.success(originalBody, modifiedBody, ruleHandle.getWay(), ruleHandle.getFieldNames());
+        return Mono.just(CryptorUtil.replace(originalBody, modifiedBody, ruleHandle.getWay(), ruleHandle.getFieldNames()));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathDTO.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.admin.model.dto;
 
 import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 
@@ -34,7 +33,6 @@ public class AuthPathDTO implements Serializable {
     @NotBlank
     private String path;
 
-    @NotNull
     private Boolean enabled;
 
     /**

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/handler/ApacheDubboMetaDataHandler.java
Patch:
@@ -40,7 +40,7 @@ protected void initReference(final MetaData metaData) {
 
     @Override
     protected void updateReference(final MetaData metaData) {
-        ApacheDubboConfigCache.getInstance().build(metaData);
+        ApacheDubboConfigCache.getInstance().build(metaData, "");
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCacheTest.java
Patch:
@@ -123,7 +123,7 @@ public void testBuild() {
         dubboRegisterConfig.setRegister("zookeeper://127.0.0.1:2181");
         dubboRegisterConfig.setProtocol("dubbo");
         apacheDubboConfigCacheMock.init(dubboRegisterConfig);
-        assertNotNull(apacheDubboConfigCacheMock.build(metaData));
+        assertNotNull(apacheDubboConfigCacheMock.build(metaData, ""));
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/ResponseUtils.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.plugin.base.support.BodyInserterContext;
 import org.apache.shenyu.plugin.base.support.CachedBodyOutputMessage;
 import org.reactivestreams.Publisher;
+import org.reactivestreams.Subscriber;
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.core.io.buffer.DataBufferUtils;
 import org.springframework.http.HttpHeaders;
@@ -96,10 +97,11 @@ public static Mono<DataBuffer> fixBodyMessage(final ServerHttpResponse response,
      * release source.
      *
      * @param outputMessage CachedBodyOutputMessage
+     * @param <T> the reified {@link Subscriber} type
      * @param throwable     Throwable
      * @return Mono.
      */
-    public static Mono<Void> release(final CachedBodyOutputMessage outputMessage, final Throwable throwable) {
+    public static <T> Mono<T> release(final CachedBodyOutputMessage outputMessage, final Throwable throwable) {
         if (Boolean.TRUE.equals(outputMessage.getCache())) {
             return outputMessage.getBody().map(DataBufferUtils::release).then(Mono.error(throwable));
         }

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -64,7 +64,7 @@ public ApacheDubboProxyService(final DubboParamResolveService dubboParamResolveS
      */
     public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {
         ReferenceConfig<GenericService> reference = ApacheDubboConfigCache.getInstance().get(metaData.getPath());
-        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {
+        if (StringUtils.isEmpty(reference.getInterface())) {
             ApacheDubboConfigCache.getInstance().invalidate(metaData.getPath());
             reference = ApacheDubboConfigCache.getInstance().initRef(metaData);
         }

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/ArrayGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.spi.Join;
 
 import java.util.List;
@@ -35,12 +36,12 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         int length = Integer.parseInt(rule.substring(rule.lastIndexOf("|") + 1));
 
         String replaceContentCopy = rule.substring(rule.indexOf("|") + 1, rule.lastIndexOf("|"));
         return IntStream.rangeClosed(0, length - 1)
-                .mapToObj(i -> GeneratorFactory.dealRule(replaceContentCopy))
+                .mapToObj(i -> GeneratorFactory.dealRule(replaceContentCopy, mockRequest))
                 .collect(Collectors.joining(","));
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/BoolGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -34,7 +35,7 @@ public String getName() {
     }
 
     @Override
-    public Boolean doGenerate(final List<String> params, final String rule) {
+    public Boolean doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         return MockUtil.bool();
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/CurrentTimeGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -34,7 +35,7 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         String format = null;
         if (params.size() >= 1) {
             format = params.get(0);

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/EmailGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -34,7 +35,7 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         return MockUtil.email();
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/EnStringGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -34,7 +35,7 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         String[] range = params.get(0).split("-");
         int min = Integer.parseInt(range[0]);
         int max = Integer.parseInt(range[1]);

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/PhoneGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -34,7 +35,7 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         return MockUtil.phone();
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/RandomDoubleGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -35,7 +36,7 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         String[] range = params.get(0).split("-");
         double min = Double.parseDouble(range[0]);
         double max = Double.parseDouble(range[1]);

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/RandomIntGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -34,7 +35,7 @@ public String getName() {
     }
 
     @Override
-    public Integer doGenerate(final List<String> params, final String rule) {
+    public Integer doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         String[] range = params.get(0).split("-");
         int min = Integer.parseInt(range[0]);
         int max = Integer.parseInt(range[1]);

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/RangeDataGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -35,7 +36,7 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         String rangeData = params.get(0).replaceAll("\\[(.+)]", "$1");
         String[] data = Arrays.stream(rangeData.split("(?<!\\\\),"))
                 .map(_data -> _data.replace("\\,", ","))

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/ZhStringGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.mock.generator;
 
+import org.apache.shenyu.plugin.mock.api.MockRequest;
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
@@ -34,7 +35,7 @@ public String getName() {
     }
 
     @Override
-    public String doGenerate(final List<String> params, final String rule) {
+    public String doGenerate(final List<String> params, final String rule, final MockRequest mockRequest) {
         String[] range = params.get(0).split("-");
         int min = Integer.parseInt(range[0]);
         int max = Integer.parseInt(range[1]);

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/ArrayGeneratorTest.java
Patch:
@@ -32,16 +32,16 @@ public final class ArrayGeneratorTest {
 
     @Test
     public void testGenerate() {
-        String generate = arrayGenerator.generate("array|\"test\"|3");
+        String generate = arrayGenerator.generate("array|\"test\"|3", null);
         assertEquals("\"test\",\"test\",\"test\"", generate);
     }
 
     @Test
     public void testNestRuleGenerate() {
-        String generate = arrayGenerator.generate("array|{\"ints\":${array|10|3}}|3");
+        String generate = arrayGenerator.generate("array|{\"ints\":${array|10|3}}|3", null);
         assertEquals("{\"ints\":[10,10,10]},{\"ints\":[10,10,10]},{\"ints\":[10,10,10]}", generate);
 
-        generate = arrayGenerator.generate("array|{\"int\":${expression|#oneOf(10)}}|3");
+        generate = arrayGenerator.generate("array|{\"int\":${expression|#oneOf(10)}}|3", null);
         assertEquals("{\"int\":10},{\"int\":10},{\"int\":10}", generate);
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/BoolGeneratorTest.java
Patch:
@@ -32,7 +32,7 @@ public final class BoolGeneratorTest {
 
     @Test
     public void testGenerate() {
-        Boolean generate = boolGenerator.generate("bool");
+        Boolean generate = boolGenerator.generate("bool", null);
         Assertions.assertNotNull(generate);
 
     }

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/CurrentTimeGeneratorTest.java
Patch:
@@ -29,8 +29,8 @@ public final class CurrentTimeGeneratorTest {
 
     @Test
     public void testGenerate() {
-        Assertions.assertTrue(generator.generate("current").matches("^\\d{4}(-\\d{2}){2} \\d{2}(:\\d{2}){2}$"));
-        Assertions.assertTrue(generator.generate("current|YYYY-MM-dd").matches("^\\d{4}(-\\d{2}){2}$"));
+        Assertions.assertTrue(generator.generate("current", null).matches("^\\d{4}(-\\d{2}){2} \\d{2}(:\\d{2}){2}$"));
+        Assertions.assertTrue(generator.generate("current|YYYY-MM-dd", null).matches("^\\d{4}(-\\d{2}){2}$"));
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/EmailGeneratorTest.java
Patch:
@@ -32,7 +32,7 @@ public final class EmailGeneratorTest {
 
     @Test
     public void testGenerate() {
-        String email = generator.generate("email");
+        String email = generator.generate("email", null);
         assertNotNull(email);
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/EnStringGeneratorTest.java
Patch:
@@ -33,7 +33,7 @@ public final class EnStringGeneratorTest {
     public void testGenerate() {
         int max = 10;
         int min = 5;
-        String enString = generator.generate("en|" + min + "-" + max);
+        String enString = generator.generate("en|" + min + "-" + max, null);
         assertTrue(enString.matches("[a-zA-Z]{" + min + "," + max + "}"));
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/GeneratorFactoryTest.java
Patch:
@@ -29,14 +29,14 @@ public class GeneratorFactoryTest {
 
     @Test
     public void testDealRule() {
-        String dealedContent = GeneratorFactory.dealRule("${phone}");
+        String dealedContent = GeneratorFactory.dealRule("${phone}", null);
         assertThat(dealedContent, matchesRegex("^\"1[3-9]\\d{9}\"$"));
     }
 
     @ParameterizedTest
     @ValueSource(strings = {"${expression|(sdxc}", "${wrong_rule|123}"})
     public void testDealRuleWithWrongContent(final String content) {
-        String dealedContent = GeneratorFactory.dealRule(content);
+        String dealedContent = GeneratorFactory.dealRule(content, null);
         assertThat(dealedContent, is("\"[#ERROR EXPRESSION#]\""));
     }
 }

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/PhoneGeneratorTest.java
Patch:
@@ -35,7 +35,7 @@ public final class PhoneGeneratorTest {
 
     @Test
     void testGenerate() {
-        String phone = generator.generate("phone");
+        String phone = generator.generate("phone", null);
         assertThat(phone, matchesRegex("^1[3-9]\\d{9}$"));
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/RandomDoubleGeneratorTest.java
Patch:
@@ -33,9 +33,9 @@ public final class RandomDoubleGeneratorTest {
 
     @Test
     public void generate() {
-        String doubleValue = generator.generate("double|10.5-12.0");
+        String doubleValue = generator.generate("double|10.5-12.0", null);
         assertNotNull(doubleValue);
-        String formated = generator.generate("double|10.5-12.0|￥%.2f");
+        String formated = generator.generate("double|10.5-12.0|￥%.2f", null);
         assertAll(
             () -> assertNotNull(formated),
             () -> assertTrue(formated.matches("^￥\\d+.\\d{2}$"))

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/RandomIntGeneratorTest.java
Patch:
@@ -35,7 +35,7 @@ public final class RandomIntGeneratorTest {
     public void generate() {
         int min = 10;
         int max = 15;
-        Integer generate = generator.generate(String.format("int|%d-%d", min, max));
+        Integer generate = generator.generate(String.format("int|%d-%d", min, max), null);
         assertTrue(Objects.nonNull(generate) && generate >= min && generate <= max);
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/RangeDataGeneratorTest.java
Patch:
@@ -33,13 +33,13 @@ public final class RangeDataGeneratorTest {
 
     @Test
     public void generate() {
-        String rangeData = generator.generate("list|[shenyu,gateway]");
+        String rangeData = generator.generate("list|[shenyu,gateway]", null);
         assertTrue(Objects.equals("shenyu", rangeData) || Objects.equals("gateway", rangeData));
     }
 
     @Test
     public void testListDataContainComma() {
-        String rangeData = generator.generate("list|[shen\\,yu,gate\\,way]");
+        String rangeData = generator.generate("list|[shen\\,yu,gate\\,way]", null);
         assertTrue(Objects.equals("shen,yu", rangeData) || Objects.equals("gate,way", rangeData));
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/test/java/org/apache/shenyu/plugin/mock/generator/ZhStringGeneratorTest.java
Patch:
@@ -35,7 +35,7 @@ public final class ZhStringGeneratorTest {
     public void generate() {
         int minLength = 10;
         int maxLength = 20;
-        String generate = generator.generate(String.format("zh|%d-%d", minLength, maxLength));
+        String generate = generator.generate(String.format("zh|%d-%d", minLength, maxLength), null);
         assertTrue(
                 generate != null && generate.length() >= minLength && generate.length() <= maxLength);
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/PluginNameAdapter.java
Patch:
@@ -48,6 +48,8 @@ public static String rpcTypeAdapter(final String rpcType) {
                 return PluginEnum.WEB_SOCKET.getName();
             case MOTAN:
                 return PluginEnum.MOTAN.getName();
+            case BRPC:
+                return PluginEnum.BRPC.getName();
             case HTTP:
             default:
                 return PluginEnum.DIVIDE.getName();

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SignPluginTest.java
Patch:
@@ -273,7 +273,7 @@ private String buildSign(final String signKey, final String version, final Strin
                 .collect(Collectors.joining()).trim())
                 .orElse("");
 
-        final String extSignKey = String.join("", Constants.PATH, path, Constants.TIMESTAMP, timeStamp, Constants.VERSION, version, signKey);
+        final String extSignKey = String.join("", Constants.TIMESTAMP, timeStamp, Constants.PATH, path, Constants.VERSION, version, signKey);
         final String data = String.join("", jsonSign, querySign);
         return SignUtils.sign(SignUtils.SIGN_MD5, extSignKey, data).toUpperCase();
     }

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/DefaultSignService.java
Patch:
@@ -172,7 +172,7 @@ private VerifyResult verifySign(final SignParameters signParameters,
     }
 
     private String buildExtSignKey(final String signKey, final SignParameters signParameters) {
-        return String.join("", Constants.PATH, signParameters.path, Constants.TIMESTAMP, signParameters.timestamp, Constants.VERSION, "1.0.0", signKey);
+        return String.join("", Constants.TIMESTAMP, signParameters.timestamp, Constants.PATH, signParameters.path, Constants.VERSION, "1.0.0", signKey);
     }
 
     private static final class SignParameters {

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/service/DefaultSignServiceTest.java
Patch:
@@ -293,7 +293,7 @@ private String buildSign(final String signKey, final String timeStamp, final Str
                 .collect(Collectors.joining()).trim())
                 .orElse("");
 
-        final String extSignKey = String.join("", Constants.PATH, path, Constants.TIMESTAMP, timeStamp, Constants.VERSION, "1.0.0", signKey);
+        final String extSignKey = String.join("", Constants.TIMESTAMP, timeStamp, Constants.PATH, path, Constants.VERSION, "1.0.0", signKey);
         final String data = String.join("", jsonSign, querySign);
         return SignUtils.sign(SignUtils.SIGN_MD5, extSignKey, data).toUpperCase();
     }

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/DefaultSignService.java
Patch:
@@ -25,10 +25,10 @@
 import org.apache.shenyu.common.dto.AuthParamData;
 import org.apache.shenyu.common.dto.AuthPathData;
 import org.apache.shenyu.common.utils.DateUtils;
-import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
-import org.apache.shenyu.common.utils.SignUtils;
+import org.apache.shenyu.common.utils.MapUtils;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
+import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 import org.apache.shenyu.plugin.sign.api.ShenyuSignProviderWrap;
 import org.apache.shenyu.plugin.sign.api.SignService;
 import org.apache.shenyu.plugin.sign.api.VerifyResult;
@@ -151,7 +151,7 @@ private VerifyResult verifySign(final SignParameters signParameters,
                                     final Map<String, Object> requestBody,
                                     final Map<String, String> queryParams) {
 
-        final String sign = ShenyuSignProviderWrap.generateSign(buildExtSignKey(appAuthData.getAppSecret(), signParameters), SignUtils.transStringMap(requestBody), queryParams);
+        final String sign = ShenyuSignProviderWrap.generateSign(buildExtSignKey(appAuthData.getAppSecret(), signParameters), MapUtils.transStringMap(requestBody), queryParams);
         boolean result = Objects.equals(sign, signParameters.sign);
         if (!result) {
             LOG.error("the SignUtils generated signature value is:{},the accepted value is:{}", sign, signParameters.sign);

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-dubbo/shenyu-examples-sdk-alibaba-dubbo-consumer/src/main/java/org/apache/shenyu/examples/sdk/alibaba/dubbo/consumer/api/ShenyuAlibabaDubboClientApi.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.examples.sdk.alibaba.dubbo.consumer.api;
 
-import java.util.List;
 import org.apache.shenyu.examples.dubbo.api.entity.ComplexBeanTest;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
@@ -29,10 +28,12 @@
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestParam;
 
+import java.util.List;
+
 /**
  * ShenyuApacheDubboClientApi.
  */
-@ShenyuClient(contextId = "shenyu-gateway", name = "ShenyuSdkApiName")
+@ShenyuClient("shenyu-gateway")
 public interface ShenyuAlibabaDubboClientApi {
 
     /**

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-dubbo/shenyu-examples-sdk-apache-dubbo-consumer/src/main/java/org/apache/shenyu/examples/sdk/apache/dubbo/consumer/api/ShenyuApacheDubboClientApi.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.examples.sdk.apache.dubbo.consumer.api;
 
-import java.util.List;
 import org.apache.shenyu.examples.dubbo.api.entity.ComplexBeanTest;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
@@ -29,10 +28,12 @@
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestParam;
 
+import java.util.List;
+
 /**
  * ShenyuApacheDubboClientApi.
  */
-@ShenyuClient(contextId = "shenyu-gateway", name = "ShenyuSdkApiName")
+@ShenyuClient("shenyu-gateway")
 public interface ShenyuApacheDubboClientApi {
 
     /**

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-http/src/main/java/org/apache/shenyu/examples/sdk/http/api/ShenyuHttpClientApi.java
Patch:
@@ -29,8 +29,9 @@
 
 /**
  * ShenyuHttpClientApi.
+ * request local HttpServiceController.
  */
-@ShenyuClient(contextId = "shenyu-gateway", name = "ShenyuSdkApiName")
+@ShenyuClient("shenyu-gateway")
 public interface ShenyuHttpClientApi {
 
     /**

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/common/RequestTemplate.java
Patch:
@@ -79,7 +79,7 @@ public RequestTemplate(final Class<?> returnType, final Method method, final Str
      * @return {@link ShenyuRequest}
      */
     public ShenyuRequest request() {
-        return ShenyuRequest.create(this.httpMethod, this.url + this.path, this.headers, this.body, contextId, this);
+        return ShenyuRequest.create(this.httpMethod, this.url + this.path, new HashMap<>(this.headers), this.body, name, this);
     }
 
     /**

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/ShenyuClientsRegistrar.java
Patch:
@@ -53,6 +53,7 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 
 /**
@@ -172,7 +173,7 @@ private void registerShenyuClient(final BeanDefinitionRegistry registry, final A
 
         String[] qualifiers = getQualifiers(attributes);
         if (ObjectUtils.isEmpty(qualifiers)) {
-            qualifiers = new String[] {contextId + "ShenyuClient"};
+            qualifiers = new String[] {Optional.ofNullable(contextId).orElse(name) + "ShenyuClient"};
         }
         BeanDefinitionHolder holder = new BeanDefinitionHolder(beanDefinition, className, qualifiers);
         BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);
@@ -181,7 +182,7 @@ private void registerShenyuClient(final BeanDefinitionRegistry registry, final A
 
     private void validate(final Map<String, Object> attributes) {
         AnnotationAttributes annotation = AnnotationAttributes.fromMap(attributes);
-        // This blows up if an aliased property is overspecified
+        // This blows up if an aliased property is over specified
         validateFallback(annotation.getClass("fallback"));
         validateFallbackFactory(annotation.getClass("fallbackFactory"));
     }

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/factory/AnnotatedParameterProcessor.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.sdk.spring.factory;
 
-import org.apache.shenyu.sdk.core.common.RequestTemplate;
+import org.apache.shenyu.sdk.core.ShenyuRequest;
 
 import java.lang.annotation.Annotation;
 
@@ -45,11 +45,11 @@ default int order() {
     /**
      * Process the annotated parameter.
      *
-     * @param requestTemplate requestTemplate
+     * @param shenyuRequest shenyuRequest
      * @param annotation annotation
      * @param arg arg
      * @return {@link boolean}
      */
-    boolean processArgument(RequestTemplate requestTemplate, Annotation annotation, Object arg);
+    boolean processArgument(ShenyuRequest shenyuRequest, Annotation annotation, Object arg);
 
 }

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/proxy/ShenyuClientInvocationHandler.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 
@@ -82,7 +83,7 @@ private void buildMethodHandlerMap(final Class<?> apiClass, final ShenyuClient s
         for (RequestTemplate requestTemplate : requestTemplates) {
             requestTemplate.setUrl(shenyuClientFactoryBean.getUrl());
             requestTemplate.setName(shenyuClientFactoryBean.getName());
-            requestTemplate.setContextId(shenyuClientFactoryBean.getContextId());
+            requestTemplate.setContextId(Optional.ofNullable(shenyuClientFactoryBean.getContextId()).orElse(shenyuClientFactoryBean.getName()));
             if (StringUtils.hasText(shenyuClientFactoryBean.getPath())) {
                 requestTemplate.setPath(shenyuClientFactoryBean.getPath() + "/" + requestTemplate.getPath());
             }

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/proxy/ShenyuClientMethodHandler.java
Patch:
@@ -81,16 +81,17 @@ private Object handlerResponse(final ShenyuResponse shenyuResponse, final Class<
 
     private ShenyuRequest targetProcessor(final RequestTemplate requestTemplate, final Object[] args) {
         final RequestTemplate requestTemplateFrom = RequestTemplate.from(requestTemplate);
+        ShenyuRequest request = requestTemplateFrom.request();
         for (RequestTemplate.ParamMetadata paramMetadata : requestTemplateFrom.getParamMetadataList()) {
             final Annotation[] paramAnnotations = paramMetadata.getParamAnnotations();
             for (Annotation paramAnnotation : paramAnnotations) {
                 final AnnotatedParameterProcessor processor = annotatedArgumentProcessors.get(paramAnnotation.annotationType());
                 if (ObjectUtils.isEmpty(processor)) {
                     continue;
                 }
-                processor.processArgument(requestTemplateFrom, paramAnnotation, args[paramMetadata.getParamIndexOnMethod()]);
+                processor.processArgument(request, paramAnnotation, args[paramMetadata.getParamIndexOnMethod()]);
             }
         }
-        return requestTemplateFrom.request();
+        return request;
     }
 }

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/BoolGenerator.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
+import java.util.List;
+
 /**
  * Boolean Generator.
  */
@@ -32,7 +34,7 @@ public String getName() {
     }
 
     @Override
-    public Boolean generate() {
+    public Boolean doGenerate(final List<String> params, final String rule) {
         return MockUtil.bool();
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/EmailGenerator.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
+import java.util.List;
+
 /**
  * Random email address generator.
  */
@@ -32,7 +34,7 @@ public String getName() {
     }
 
     @Override
-    public String generate() {
+    public String doGenerate(final List<String> params, final String rule) {
         return MockUtil.email();
     }
 

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/GeneratorFactory.java
Patch:
@@ -78,8 +78,7 @@ private static String generate(final String rule) {
 
         String[] prefixAndSuffix = generator.getPrefixAndSuffix();
         try {
-            generator.parseRule(ruleContent);
-            Object generateData = generator.generate();
+            Object generateData = generator.generate(ruleContent);
             return String.join("", prefixAndSuffix[0], generateData.toString(), prefixAndSuffix[1]);
         } catch (Exception e) {
             LOG.error(e.getMessage(), e);
@@ -128,4 +127,5 @@ private static String getPlaceholder(final String rule) {
         }
         return null;
     }
+
 }

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/PhoneGenerator.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.shenyu.plugin.mock.util.MockUtil;
 import org.apache.shenyu.spi.Join;
 
+import java.util.List;
+
 /**
  * 11-digit mobile number generator.
  */
@@ -32,7 +34,7 @@ public String getName() {
     }
 
     @Override
-    public String generate() {
+    public String doGenerate(final List<String> params, final String rule) {
         return MockUtil.phone();
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.listener;
 
+import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.admin.service.AppAuthService;
 import org.apache.shenyu.admin.service.MetaDataService;
@@ -32,7 +33,6 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.common.utils.Md5Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.InitializingBean;
@@ -214,7 +214,7 @@ public final void afterPropertiesSet() {
      */
     protected <T> void updateCache(final ConfigGroupEnum group, final List<T> data) {
         String json = GsonUtils.getInstance().toJson(data);
-        ConfigDataCache newVal = new ConfigDataCache(group.name(), json, Md5Utils.md5(json), System.currentTimeMillis());
+        ConfigDataCache newVal = new ConfigDataCache(group.name(), json, DigestUtils.md5Hex(json), System.currentTimeMillis());
         ConfigDataCache oldVal = CACHE.put(newVal.getGroup(), newVal);
         LOG.info("update config cache[{}], old: {}, updated: {}", group, oldVal, newVal);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.shenyu.admin.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.common.constant.AdminConstants;
-import org.apache.shenyu.common.utils.ShaUtils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.ldap.NameNotFoundException;
@@ -305,7 +305,7 @@ private DashboardUserVO loginByLdap(final String userName, final String password
                     RoleDO role = roleMapper.findByRoleName("default");
                     DashboardUserDTO dashboardUserDTO = DashboardUserDTO.builder()
                             .userName(userName)
-                            .password(ShaUtils.shaEncryption(password))
+                            .password(DigestUtils.sha512Hex(password))
                             .role(1)
                             .roles(Lists.newArrayList(role.getId()))
                             .enabled(true)
@@ -324,7 +324,7 @@ private DashboardUserVO loginByLdap(final String userName, final String password
     }
     
     private DashboardUserVO loginByDatabase(final String userName, final String password) {
-        return findByQuery(userName, ShaUtils.shaEncryption(password));
+        return findByQuery(userName, DigestUtils.sha512Hex(password));
     }
     
     /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DashboardUserMapperTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.entity.DashboardUserDO;
 import org.apache.shenyu.admin.model.page.PageParameter;
 import org.apache.shenyu.admin.model.query.DashboardUserQuery;
-import org.apache.shenyu.common.utils.ShaUtils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 
@@ -165,7 +165,7 @@ private DashboardUserDO buildDashboardUserDO() {
         return DashboardUserDO.builder()
                 .id(UUIDUtils.getInstance().generateShortUuid())
                 .userName("adminTest")
-                .password(ShaUtils.shaEncryption("123456"))
+                .password(DigestUtils.sha512Hex("123456"))
                 .enabled(true)
                 .role(1)
                 .dateCreated(now)

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DashboardUserServiceTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.shenyu.admin.service.publish.UserEventPublisher;
 import org.apache.shenyu.admin.utils.ListUtil;
 import org.apache.shenyu.admin.utils.SessionUtil;
-import org.apache.shenyu.common.utils.ShaUtils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;
@@ -201,7 +201,7 @@ public void testLogin() {
         ReflectionTestUtils.setField(dashboardUserService, "ldapTemplate", ldapTemplate);
         LoginDashboardUserVO loginDashboardUserVO = dashboardUserService.login(TEST_USER_NAME, TEST_PASSWORD);
         assertEquals(TEST_USER_NAME, loginDashboardUserVO.getUserName());
-        assertEquals(ShaUtils.shaEncryption(TEST_PASSWORD), loginDashboardUserVO.getPassword());
+        assertEquals(DigestUtils.sha512Hex(TEST_PASSWORD), loginDashboardUserVO.getPassword());
         
         // test loginByDatabase
         ReflectionTestUtils.setField(dashboardUserService, "ldapTemplate", null);

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/SignUtils.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.UUID;
 import java.util.stream.Collectors;
 
-import org.apache.commons.codec.digest.DigestUtils;
-
 /**
  * SignUtils.
  */

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-handler/src/main/java/org/apache/shenyu/plugin/cache/utils/CacheUtils.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.cache.utils;
 
-import org.apache.shenyu.common.utils.Md5Utils;
+import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.cache.ICache;
 import org.springframework.web.server.ServerWebExchange;
@@ -45,7 +45,7 @@ private CacheUtils() {
     public static String dataKey(final ServerWebExchange exchange) {
         //// todo 2022/3/16 current use the request path, maybe use the key from admin config.
         URI uri = exchange.getRequest().getURI();
-        return Md5Utils.md5(String.join(KEY_JOIN_RULE, uri.getQuery(), uri.getPath()));
+        return DigestUtils.md5Hex(String.join(KEY_JOIN_RULE, uri.getQuery(), uri.getPath()));
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/spi/Md5EncryptDataMask.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.logging.mask.api.spi;
 
-import org.apache.shenyu.common.utils.Md5Utils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.apache.shenyu.spi.Join;
 
 /**
@@ -27,6 +27,6 @@
 public class Md5EncryptDataMask extends AbstractShenyuDataMask {
     @Override
     protected String doMask(final String source) {
-        return Md5Utils.md5(source);
+        return DigestUtils.md5Hex(source);
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/test/java/org/apache/shenyu/plugin/logging/mask/api/factory/DataMaskFactoryTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.logging.mask.api.factory;
 
-import org.apache.shenyu.common.utils.Md5Utils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.apache.shenyu.plugin.logging.mask.api.enums.DataMaskEnums;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -36,7 +36,7 @@ public void selectMask() {
         // test for md5
         String sourceData = "123456789";
         String maskedData = DataMaskFactory.selectMask(sourceData, DataMaskEnums.MD5_ENCRYPT.getDataMaskAlg());
-        Assertions.assertEquals(Md5Utils.md5(sourceData), maskedData);
+        Assertions.assertEquals(DigestUtils.md5Hex(sourceData), maskedData);
 
         // test for replacement
         String replaceText = DataMaskFactory.selectMask(sourceData, DataMaskEnums.CHARACTER_REPLACE.getDataMaskAlg());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/test/java/org/apache/shenyu/plugin/logging/mask/api/spi/Md5EncryptDataMaskTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.logging.mask.api.spi;
 
-import org.apache.shenyu.common.utils.Md5Utils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -29,6 +29,6 @@ public class Md5EncryptDataMaskTest {
     @Test
     public void doMask() {
         Md5EncryptDataMask md5EncryptDataMask = new Md5EncryptDataMask();
-        Assertions.assertEquals(Md5Utils.md5("test"), md5EncryptDataMask.doMask("test"));
+        Assertions.assertEquals(DigestUtils.md5Hex("test"), md5EncryptDataMask.doMask("test"));
     }
 }

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/LocalDispatcherFilter.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.web.filter;
 
 import org.apache.shenyu.common.constant.Constants;
-import org.apache.shenyu.common.utils.ShaUtils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.reactive.DispatcherHandler;
 import org.springframework.web.server.ResponseStatusException;
@@ -58,7 +58,7 @@ protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFil
     @Override
     protected Mono<Void> doFilter(final ServerWebExchange exchange) {
         String localKey = exchange.getRequest().getHeaders().getFirst(Constants.LOCAL_KEY);
-        if (Objects.isNull(sha512Key) || !sha512Key.equalsIgnoreCase(ShaUtils.shaEncryption(localKey)) || Objects.isNull(localKey)) {
+        if (Objects.isNull(sha512Key) || !sha512Key.equalsIgnoreCase(DigestUtils.sha512Hex(localKey)) || Objects.isNull(localKey)) {
             return Mono.error(new ResponseStatusException(HttpStatus.FORBIDDEN, "The key is not correct."));
         }
         return dispatcherHandler.handle(exchange);

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/LocalDispatcherFilterTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.web.filter;
 
-import org.apache.shenyu.common.utils.ShaUtils;
+import org.apache.shenyu.common.utils.DigestUtils;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -52,7 +52,7 @@ public class LocalDispatcherFilterTest {
     public void setup() {
         DispatcherHandler dispatcherHandler = mock(DispatcherHandler.class);
         when(dispatcherHandler.handle(any())).thenReturn(Mono.empty());
-        String sha512Key = ShaUtils.shaEncryption("123456");
+        String sha512Key = DigestUtils.sha512Hex("123456");
         localDispatcherFilter = new LocalDispatcherFilter(dispatcherHandler, sha512Key);
         webFilterChain = mock(WebFilterChain.class);
         when(webFilterChain.filter(any())).thenReturn(Mono.empty());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/AppAuthDO.java
Patch:
@@ -239,8 +239,8 @@ public static AppAuthDO create(final AuthApplyDTO authApplyDTO) {
                     .userId(item.getUserId())
                     .phone(item.getPhone())
                     .extInfo(item.getExtInfo())
-                    .appKey(SignUtils.getInstance().generateKey())
-                    .appSecret(SignUtils.getInstance().generateKey())
+                    .appKey(SignUtils.generateKey())
+                    .appSecret(SignUtils.generateKey())
                     .open(item.getOpen())
                     .enabled(true)
                     .dateCreated(currentTime)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -262,7 +262,7 @@ public int createOrUpdate(final AppAuthDTO appAuthDTO) {
         AppAuthDO appAuthDO = AppAuthDO.create(appAuthDTO);
         DataEventTypeEnum eventType;
         if (StringUtils.isBlank(appAuthDTO.getId())) {
-            appAuthDO.setAppSecret(SignUtils.getInstance().generateKey());
+            appAuthDO.setAppSecret(SignUtils.generateKey());
             appAuthCount = appAuthMapper.insertSelective(appAuthDO);
             eventType = DataEventTypeEnum.CREATE;
         } else {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AppAuthMapperTest.java
Patch:
@@ -113,7 +113,7 @@ public void testUpdateEnable() {
 
     @Test
     public void testUpdateAppSecretByAppKey() {
-        String appSecret = SignUtils.getInstance().generateKey();
+        String appSecret = SignUtils.generateKey();
         appAuthDO.setAppSecret(appSecret);
         int count = appAuthMapper.updateAppSecretByAppKey(appAuthDO.getAppKey(), appSecret);
         assertEquals(1, count);
@@ -138,8 +138,8 @@ private AppAuthDO buildAppAuthDO() {
         Timestamp now = new Timestamp(System.currentTimeMillis());
         return AppAuthDO.builder()
                 .id(UUIDUtils.getInstance().generateShortUuid())
-                .appKey(SignUtils.getInstance().generateKey())
-                .appSecret(SignUtils.getInstance().generateKey())
+                .appKey(SignUtils.generateKey())
+                .appSecret(SignUtils.generateKey())
                 .extInfo("{\"extInfo\":\"json\"}")
                 .open(true)
                 .enabled(false)

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/AppAuthServiceTest.java
Patch:
@@ -202,7 +202,7 @@ public void testListByPage() {
 
     @Test
     public void testUpdateAppSecretByAppKey() {
-        String newAppSecret = SignUtils.getInstance().generateKey();
+        String newAppSecret = SignUtils.generateKey();
         appAuthDO.setAppSecret(newAppSecret);
         given(this.appAuthMapper.updateAppSecretByAppKey(appAuthDO.getAppKey(), appAuthDO.getAppSecret())).willReturn(1);
         ShenyuAdminResult result = this.appAuthService.updateAppSecretByAppKey(appAuthDO.getAppKey(), appAuthDO.getAppSecret());

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/SignUtilsTest.java
Patch:
@@ -51,12 +51,12 @@ public void testValid() {
         Map<String, String> queryParams = new HashMap<>();
         jsonParams.put("a", "1");
         jsonParams.put("b", "2");
-        assertTrue(SignUtils.getInstance().isValid(sign, jsonParams, queryParams, "test"));
+        assertTrue(SignUtils.isValid(sign, jsonParams, queryParams, "test"));
     }
 
     @Test
     public void testGenerateKey() {
-        assertNotNull(SignUtils.getInstance().generateKey());
+        assertNotNull(SignUtils.generateKey());
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/ApiVO.java
Patch:
@@ -426,7 +426,6 @@ public void setDateUpdated(final Date dateUpdated) {
         this.dateUpdated = dateUpdated;
     }
 
-
     /**
      * getTags.
      *

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ApiServiceImpl.java
Patch:
@@ -90,7 +90,6 @@ private String update(final ApiDTO apiDTO) {
                         .id(UUIDUtils.getInstance().generateShortUuid())
                         .apiId(apiDO.getId())
                         .tagId(tagId)
-                        .dateCreated(currentTime)
                         .dateUpdated(currentTime)
                         .build());
             }

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/MockPluginTest.java
Patch:
@@ -100,7 +100,7 @@ private static List<LocalPluginController.RuleLocalData> buildRuleLocalDataList(
         
         MockHandle placeholderMockHandler = new MockHandle();
         placeholderMockHandler.setHttpStatusCode(200);
-        placeholderMockHandler.setResponseContent("{\"number\":${int|10-20}}");
+        placeholderMockHandler.setResponseContent("{\"number\":${expression|#int(10,20)}");
         ruleLocalDataList.add(buildRuleLocalData(TEST_PLACEHOLDER_MOCK, placeholderMockHandler));
         
         return ruleLocalDataList;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -217,9 +217,9 @@ public RuleDO findByName(final String name) {
     public int delete(final List<String> ids) {
         List<RuleDO> rules = ruleMapper.selectByIds(ids);
         final int deleteCount = ruleMapper.deleteByIds(ids);
-        ruleConditionMapper.deleteByRuleIds(ids);
         if (deleteCount > 0) {
             ruleEventPublisher.onDeleted(rules);
+            ruleConditionMapper.deleteByRuleIds(ids);
         }
         return deleteCount;
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/SignUtils.java
Patch:
@@ -58,12 +58,12 @@ public static String generateSign(final String signKey, final Map<String, String
                 .sorted(Comparator.naturalOrder())
                 .map(key -> String.join("", key, jsonParams.get(key)))
                 .collect(Collectors.joining()).trim())
-            .orElse(null);
+                .orElse("");
         final String querySign = Optional.ofNullable(queryParams).map(e -> e.keySet().stream()
                 .sorted(Comparator.naturalOrder())
                 .map(key -> String.join("", key, queryParams.get(key)))
                 .collect(Collectors.joining()).trim())
-            .orElse(null);
+                .orElse("");
         final String sign = String.join("", jsonSign, querySign, signKey);
         // TODO this is a risk for error charset coding with getBytes
         return DigestUtils.md5Hex(sign.getBytes()).toUpperCase();

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SignPluginTest.java
Patch:
@@ -173,7 +173,7 @@ public void testSignRequestBody() throws Exception {
 
     private Map<String, Object> buildHeadersMap(final String timestamp, final String path, final String appKey,
                                                 final String appSecret, final String version) {
-        String extSignKey = String.join("", Constants.TIMESTAMP, timestamp, Constants.PATH, path, Constants.VERSION, version, appSecret);
+        String extSignKey = String.join("", Constants.PATH, path, Constants.TIMESTAMP, timestamp, Constants.VERSION, version, appSecret);
         String sign = SignUtils.generateSign(extSignKey, null, null);
         Map<String, Object> headers = Maps.newHashMapWithExpectedSize(4);
         headers.put("timestamp", timestamp);
@@ -185,7 +185,7 @@ private Map<String, Object> buildHeadersMap(final String timestamp, final String
 
     private Map<String, Object> buildHeadersMapQueryParam(final String timestamp, final String path, final String appKey,
                                                           final String appSecret, final String version, final Map<String, String> queryParam) {
-        String extSignKey = String.join("", Constants.TIMESTAMP, timestamp, Constants.PATH, path, Constants.VERSION, version, appSecret);
+        String extSignKey = String.join("", Constants.PATH, path, Constants.TIMESTAMP, timestamp, Constants.VERSION, version, appSecret);
         String sign = SignUtils.generateSign(extSignKey, null, queryParam);
 
         Map<String, Object> headers = Maps.newHashMapWithExpectedSize(4);

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/DefaultSignService.java
Patch:
@@ -126,6 +126,6 @@ private Pair<Boolean, String> sign(final ShenyuContext shenyuContext, final Serv
     }
 
     private String buildExtSignKey(final String signKey, final ShenyuContext shenyuContext) {
-        return String.join("", Constants.TIMESTAMP, shenyuContext.getTimestamp(), Constants.PATH, shenyuContext.getPath(), Constants.VERSION, "1.0.0", signKey);
+        return String.join("", Constants.PATH, shenyuContext.getPath(), Constants.TIMESTAMP, shenyuContext.getTimestamp(), Constants.VERSION, "1.0.0", signKey);
     }
 }

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/service/DefaultSignServiceTest.java
Patch:
@@ -273,7 +273,7 @@ public void errorBodyAndUrlQueryParamsSign() {
     }
 
     private String buildSign(final String signKey, final String timeStamp, final String path, final Map<String, String> jsonParams, final Map<String, String> queryParams) {
-        final String extSignKey = String.join("", Constants.TIMESTAMP, timeStamp, Constants.PATH, path, Constants.VERSION, "1.0.0", signKey);
+        final String extSignKey = String.join("", Constants.PATH, path, Constants.TIMESTAMP, timeStamp, Constants.VERSION, "1.0.0", signKey);
         return SignUtils.generateSign(extSignKey, jsonParams, queryParams);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/query/TagRelationQuery.java
Patch:
@@ -71,7 +71,7 @@ public boolean equals(final Object o) {
         if (this == o) {
             return true;
         }
-        if (!(o instanceof TagQuery)) {
+        if (!(o instanceof TagRelationQuery)) {
             return false;
         }
         TagRelationQuery that = (TagRelationQuery) o;

File: shenyu-common/src/main/java/org/apache/shenyu/common/cache/MemorySafeWindowTinyLFUMap.java
Patch:
@@ -21,6 +21,7 @@
 import com.github.benmanes.caffeine.cache.Caffeine;
 import org.apache.shenyu.common.concurrent.MemoryLimitCalculator;
 import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.common.constant.Constants;
 import org.checkerframework.checker.nullness.qual.NonNull;
 
 import javax.annotation.concurrent.ThreadSafe;
@@ -56,7 +57,7 @@ public class MemorySafeWindowTinyLFUMap<K, V> extends AbstractMap<K, V> implemen
     
     public MemorySafeWindowTinyLFUMap(final int maxFreeMemory,
                                       final int initialSize) {
-        this(maxFreeMemory, initialSize, Long.MAX_VALUE, 1 << 30);
+        this(maxFreeMemory, initialSize, Long.MAX_VALUE, Constants.LRU_MAP_MAXSIZE);
     }
     
     public MemorySafeWindowTinyLFUMap(final int maxFreeMemory,

File: shenyu-spi/src/main/java/org/apache/shenyu/spi/ExtensionLoader.java
Patch:
@@ -194,7 +194,7 @@ public List<T> getJoins() {
     private void createExtension(final String name, final Holder<Object> holder) {
         ClassEntity classEntity = getExtensionClassesEntity().get(name);
         if (Objects.isNull(classEntity)) {
-            throw new IllegalArgumentException("name is error");
+            throw new IllegalArgumentException(name + "name is error");
         }
         Class<?> aClass = classEntity.getClazz();
         Object o = joinInstances.get(aClass);

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-dubbo/shenyu-examples-sdk-apache-dubbo-consumer/src/main/java/org/apache/shenyu/examples/sdk/apache/dubbo/consumer/ShenyuSdkApacheDubboExampleApplication.java
Patch:
@@ -25,7 +25,7 @@
  * ShenyuSdkApacheDubboExampleApplication.
  */
 @SpringBootApplication
-@EnableShenyuClients(basePackages = "org.apache.shenyu.examples.sdk.apache.dubbo.api")
+@EnableShenyuClients(basePackages = "org.apache.shenyu.examples.sdk.apache.dubbo.consumer.api")
 public class ShenyuSdkApacheDubboExampleApplication {
 
     /**

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-dubbo/shenyu-examples-sdk-apache-dubbo-consumer/src/main/java/org/apache/shenyu/examples/sdk/apache/dubbo/consumer/api/ShenyuApacheDubboClientApi.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.web.bind.annotation.GetMapping;
 
 /**
- * ShenyuHttpClientApi.
+ * ShenyuApacheDubboClientApi.
  */
 @ShenyuClient(contextId = "shenyu-gateway", name = "ShenyuSdkApiName")
 public interface ShenyuApacheDubboClientApi {

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-dubbo/shenyu-examples-sdk-apache-dubbo-consumer/src/main/java/org/apache/shenyu/examples/sdk/apache/dubbo/consumer/controller/ShenyuApacheDubboSdkExampleController.java
Patch:
@@ -37,7 +37,7 @@ public class ShenyuApacheDubboSdkExampleController {
      * findAll.
      * @return SdkTestDto
      */
-    @GetMapping("sdk/dubbo/findAll")
+    @GetMapping("/sdk/dubbo/findAll")
     public DubboTest findAll() {
         return shenyuApacheDubboClientApi.findAll();
     }

File: shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/helper/HttpHelper.java
Patch:
@@ -58,7 +58,7 @@ public class HttpHelper {
     private static final Gson GSON = new Gson();
 
     private final OkHttpClient client = new OkHttpClient.Builder().build();
-    
+
     private final String localKey = "123456";
 
     /**

File: shenyu-examples/shenyu-examples-sdk/shenyu-examples-sdk-http/src/main/java/org/apache/shenyu/examples/sdk/http/ShenyuSdkHttpExampleApplication.java
Patch:
@@ -25,7 +25,7 @@
  * ShenyuSdkHttpExampleApplication.
  */
 @SpringBootApplication
-@EnableShenyuClients(basePackages = {"org.apache.shenyu.examples.sdk.http.api"})
+@EnableShenyuClients(basePackages = "org.apache.shenyu.examples.sdk.http.api")
 public class ShenyuSdkHttpExampleApplication {
 
     /**

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonPluginDataSubscriber.java
Patch:
@@ -146,6 +146,7 @@ public void unRuleSubscribe(final RuleData ruleData) {
     @Override
     public void refreshRuleDataAll() {
         BaseDataCache.getInstance().cleanRuleData();
+        MatchDataCache.getInstance().cleanRuleData();
     }
     
     @Override
@@ -197,6 +198,7 @@ private <T> void updateCacheData(@NonNull final T data) {
         } else if (data instanceof RuleData) {
             RuleData ruleData = (RuleData) data;
             BaseDataCache.getInstance().cacheRuleData(ruleData);
+            MatchDataCache.getInstance().removeRuleData(ruleData.getPluginName());
             Optional.ofNullable(handlerMap.get(ruleData.getPluginName()))
                     .ifPresent(handler -> handler.handlerRule(ruleData));
             
@@ -242,6 +244,7 @@ private <T> void removeCacheData(@NonNull final T data) {
         } else if (data instanceof RuleData) {
             RuleData ruleData = (RuleData) data;
             BaseDataCache.getInstance().removeRuleData(ruleData);
+            MatchDataCache.getInstance().removeRuleData(ruleData.getPluginName());
             Optional.ofNullable(handlerMap.get(ruleData.getPluginName()))
                     .ifPresent(handler -> handler.removeRule(ruleData));
             

File: shenyu-web/src/main/java/org/apache/shenyu/web/controller/LocalPluginController.java
Patch:
@@ -92,9 +92,10 @@ public Mono<String> cleanPlugin(@RequestParam("name") final String name) {
         LOG.info("clean apache shenyu local plugin for {}", name);
         BaseDataCache.getInstance().removePluginDataByPluginName(name);
         List<SelectorData> selectorData = BaseDataCache.getInstance().obtainSelectorData(name);
-        List<String> selectorIds = selectorData.stream().map(SelectorData::getId).collect(Collectors.toList());
+        final List<String> selectorIds = selectorData.stream().map(SelectorData::getId).collect(Collectors.toList());
         BaseDataCache.getInstance().removeSelectDataByPluginName(name);
         MatchDataCache.getInstance().removeSelectorData(name);
+        MatchDataCache.getInstance().removeRuleData(name);
         for (String selectorId : selectorIds) {
             BaseDataCache.getInstance().removeRuleDataBySelectorId(selectorId);
         }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/client/AbstractContextRefreshedEventListener.java
Patch:
@@ -98,14 +98,14 @@ public AbstractContextRefreshedEventListener(final PropertiesConfig clientConfig
     
     @Override
     public void onApplicationEvent(@NonNull final ContextRefreshedEvent event) {
-        if (!registered.compareAndSet(false, true)) {
-            return;
-        }
         final ApplicationContext context = event.getApplicationContext();
         Map<String, T> beans = getBeans(context);
         if (MapUtils.isEmpty(beans)) {
             return;
         }
+        if (!registered.compareAndSet(false, true)) {
+            return;
+        }
         publisher.publishEvent(buildURIRegisterDTO(context, beans));
         beans.forEach(this::handle);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ApiMapperTest.java
Patch:
@@ -74,7 +74,7 @@ public void testUpdateByPrimaryKeySelective() {
         this.apiDO.setHttpMethod(1);
         this.apiDO.setVersion("V0.02");
         this.apiDO.setRpcType("dubbo1");
-        this.apiDO.setState((byte) 1);
+        this.apiDO.setState(1);
         final int count = apiMapper.updateByPrimaryKeySelective(this.apiDO);
         assertEquals(1, count);
     }
@@ -88,7 +88,7 @@ public void testUpdateByPrimaryKey() {
         this.apiDO.setHttpMethod(2);
         this.apiDO.setVersion("V0.03");
         this.apiDO.setRpcType("dubbo2");
-        this.apiDO.setState((byte) 2);
+        this.apiDO.setState(2);
         this.apiDO.setApiSource(3);
         final int count = apiMapper.updateByPrimaryKeySelective(this.apiDO);
         assertEquals(1, count);
@@ -111,7 +111,7 @@ private ApiDO buildApiDO() {
         apiDO.setProduce("accept");
         apiDO.setVersion("V0.01");
         apiDO.setRpcType("dubbo");
-        apiDO.setState((byte) 0);
+        apiDO.setState(0);
         apiDO.setExt("ext");
         apiDO.setApiOwner("admin");
         apiDO.setApiDesc("hello world api");

File: shenyu-sync-data-center/shenyu-sync-data-etcd/src/test/java/org/apache/shenyu/sync/data/etcd/EtcdSyncDataServiceTest.java
Patch:
@@ -101,7 +101,6 @@ public void setUp() {
          *  mock get method.
          */
         when(client.getKVClient()).thenReturn(kv);
-        when(kv.get(any())).thenReturn(future);
         try {
             when(future.get()).thenReturn(getResponse);
         } catch (Exception e) {

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCache.java
Patch:
@@ -118,8 +118,7 @@ private boolean needUpdateRegistryConfig(final DubboRegisterConfig dubboRegister
             return true;
         }
         return !Objects.equals(dubboRegisterConfig.getProtocol(), registryConfig.getProtocol())
-                || !Objects.equals(dubboRegisterConfig.getRegister(), registryConfig.getAddress())
-                || !Objects.equals(dubboRegisterConfig.getProtocol(), registryConfig.getProtocol());
+                || !Objects.equals(dubboRegisterConfig.getRegister(), registryConfig.getAddress());
     }
     
     /**

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/AdminConstants.java
Patch:
@@ -257,4 +257,6 @@ public final class AdminConstants {
      */
     public static final String DICT_TYPE_API_DOC_ENV = "apidocEnv";
 
+    public static final String TAG_ROOT_PARENT_ID = "0";
+
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/RuleData.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Objects;
 
 /**
- * RuleDTO.
+ * RuleData.
  *
  * @since 2.0.0
  */

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/SelectorData.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Objects;
 
 /**
- * SelectorDTO.
+ * SelectorData.
  *
  * @since 2.0.0
  */

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/api/SignProvider.java
Patch:
@@ -28,8 +28,9 @@ public interface SignProvider {
      * acquired sign.
      *
      * @param signKey sign key
-     * @param params  params
+     * @param jsonParams json params
+     * @param queryParams  url query params
      * @return sign
      */
-    String generateSign(String signKey, Map<String, String> params);
+    String generateSign(String signKey, Map<String, String> jsonParams, Map<String, String> queryParams);
 }

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/api/SignService.java
Patch:
@@ -31,16 +31,17 @@ public interface SignService {
      * Sign verify pair.
      * @param exchange   the exchange
      * @param requestBody the requestBody
+     * @param queryParams  url query params
      * @return the pair
      */
-    Pair<Boolean, String> signVerify(ServerWebExchange exchange, Map<String, Object> requestBody);
+    Pair<Boolean, String> signVerify(ServerWebExchange exchange, Map<String, Object> requestBody, Map<String, String> queryParams);
 
     /**
      * Sign verify pair.
      * @param exchange   the exchange
      * @return the pair
      */
     default Pair<Boolean, String> signVerify(ServerWebExchange exchange) {
-        return signVerify(exchange, null);
+        return signVerify(exchange, null, null);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/zookeeper/HttpServiceDiscovery.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.common.utils.PathMatchUtils;
 import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 import org.apache.shenyu.register.client.server.zookeeper.ZookeeperConfig;
 import org.apache.zookeeper.CreateMode;
@@ -168,7 +167,7 @@ class HttpServiceListener implements TreeCacheListener {
         public void childEvent(final CuratorFramework client, final TreeCacheEvent event) throws Exception {
             String path = event.getData().getPath();
             // if not uri register path, return.
-            if (!PathMatchUtils.match(URI_PATH, path)) {
+            if (!path.contains(ROOT)) {
                 return;
             }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/RpcParamTransformPlugin.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
-import org.apache.shenyu.common.utils.HttpParamConverter;
+import org.apache.shenyu.plugin.base.utils.HttpParamConverter;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MetaDataCache.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.cache.MemorySafeWindowTinyLFUMap;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.MetaData;
-import org.apache.shenyu.common.utils.PathMatchUtils;
+import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 
 import java.util.Objects;
 import java.util.Optional;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/ExcludePredicateJudge.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
-import org.apache.shenyu.common.utils.PathMatchUtils;
+import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 import org.apache.shenyu.spi.Join;
 
 import java.util.Objects;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/MatchPredicateJudge.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
-import org.apache.shenyu.common.utils.PathMatchUtils;
+import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 import org.apache.shenyu.spi.Join;
 
 import java.util.Objects;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/PathPatternPredicateJudge.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
-import org.apache.shenyu.common.utils.PathMatchUtils;
+import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 import org.apache.shenyu.spi.Join;
 
 import java.util.Objects;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/HttpParamConverter.java
Patch:
@@ -15,9 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.utils;
+package org.apache.shenyu.plugin.base.utils;
 
 import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.common.utils.GsonUtils;
 import org.springframework.util.MultiValueMap;
 import org.springframework.util.StringUtils;
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/PathMatchUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.utils;
+package org.apache.shenyu.plugin.base.utils;
 
 import org.springframework.http.server.PathContainer;
 import org.springframework.util.AntPathMatcher;

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/HttpParamConverterTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.utils;
+package org.apache.shenyu.plugin.base.utils;
 
 import org.hamcrest.collection.IsMapContaining;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/PathMatchUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.utils;
+package org.apache.shenyu.plugin.base.utils;
 
 import org.junit.jupiter.api.Test;
 

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shenyu.common.dto.convert.rule.RewriteHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
-import org.apache.shenyu.common.utils.PathMatchUtils;
+import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/DefaultSignService.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.dto.AuthParamData;
 import org.apache.shenyu.common.dto.AuthPathData;
 import org.apache.shenyu.common.utils.DateUtils;
-import org.apache.shenyu.common.utils.PathMatchUtils;
+import org.apache.shenyu.plugin.base.utils.PathMatchUtils;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
 import org.apache.shenyu.plugin.sign.api.ShenyuSignProviderWrap;

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/utils/RegisterUtils.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.shenyu.register.client.http.utils;
 
 import okhttp3.Headers;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.exception.CommonErrorCode;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.util.StringUtils;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -53,7 +53,7 @@ private RegisterUtils() {
      * @throws IOException the io exception
      */
     public static void doRegister(final String json, final String url, final String type, final String accessToken) throws IOException {
-        if (!StringUtils.hasLength(accessToken)) {
+        if (StringUtils.isBlank(accessToken)) {
             LOGGER.error("{} client register error accessToken is null, please check the config : {} ", type, json);
             return;
         }

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperSyncDataServiceTest.java
Patch:
@@ -25,11 +25,11 @@
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.junit.jupiter.api.Test;
-import org.springframework.util.ObjectUtils;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doAnswer;
@@ -75,7 +75,7 @@ public void testZookeeperInstanceRegisterRepository() throws Exception {
             }
         }
         final TreeCacheListener treeCacheListener = treeCacheListeners.stream().findFirst().orElse(null);
-        if (!ObjectUtils.isEmpty(treeCacheListener)) {
+        if (Objects.nonNull(treeCacheListener)) {
             TreeCacheEvent event = mock(TreeCacheEvent.class);
             ChildData childData = mock(ChildData.class);
             treeCacheListener.childEvent(curatorFramework, event);

File: shenyu-sdk/shenyu-sdk-httpclient/src/test/java/org/apache/shenyu/sdk/httpclient/HttpShenyuSdkClientTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Properties;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -35,6 +36,7 @@ public class HttpShenyuSdkClientTest {
     @Test
     public void testShenyuHttpClient() throws IOException {
         HttpShenyuSdkClient shenyuHttpClient = mock(HttpShenyuSdkClient.class, Mockito.CALLS_REAL_METHODS);
+        shenyuHttpClient.initClient(new Properties());
         Map<String, Collection<String>> headerMap = new HashMap<>();
         headerMap.put("header", Arrays.asList("test1", "test2"));
         ShenyuRequest shenyuRequest = ShenyuRequest.create(ShenyuRequest.HttpMethod.GET, "https://shenyu.apache.org",

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-etcd/src/main/java/org/apache/shenyu/register/instance/etcd/EtcdInstanceRegisterRepository.java
Patch:
@@ -58,15 +58,16 @@ public void init(final RegisterConfig config) {
     @Override
     public void persistInstance(final InstanceEntity instance) {
         String instanceNodeName = buildInstanceNodeName(instance);
-        String instancePath = InstancePathConstants.buildInstanceParentPath();
+        String instancePath = InstancePathConstants.buildInstanceParentPath(instance.getAppName());
         String realNode = InstancePathConstants.buildRealNode(instancePath, instanceNodeName);
         String nodeData = GsonUtils.getInstance().toJson(instance);
         client.putEphemeral(realNode, nodeData);
         LOGGER.info("etcd client register success: {}", nodeData);
     }
 
     @Override
-    public List<InstanceEntity> selectInstancesAndWatcher(final String watchKey, final WatcherListener watcherListener) {
+    public List<InstanceEntity> selectInstancesAndWatcher(final String selectKey, final WatcherListener watcherListener) {
+        final String watchKey = InstancePathConstants.buildInstanceParentPath(selectKey);
         final Function<Map<String, String>, List<InstanceEntity>> getInstanceRegisterFun = childrenList ->
                 childrenList.values().stream().map(x -> GsonUtils.getInstance().fromJson(x, InstanceEntity.class)).collect(Collectors.toList());
         Map<String, String> serverNodes = client.getKeysMapByPrefix(watchKey);

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-etcd/src/test/java/org/apache/shenyu/register/instance/etcd/EtcdInstanceRegisterRepositoryTest.java
Patch:
@@ -104,7 +104,7 @@ public void testPersistInstance() {
                 .port(9195)
                 .build();
 
-        final String realNode = "/shenyu/register/instance/shenyu-host:9195";
+        final String realNode = "/shenyu/register/instance/shenyu-test/shenyu-host:9195";
         repository.persistInstance(data);
         assertTrue(etcdBroker.containsKey(realNode));
         assertEquals(GsonUtils.getInstance().toJson(data), etcdBroker.get(realNode));

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/utils/PortUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.utils;
+package org.apache.shenyu.client.core.utils;
 
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.exception.ShenyuException;

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListener.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.IpUtils;
 import org.apache.shenyu.common.utils.PathUtils;
-import org.apache.shenyu.common.utils.PortUtils;
+import org.apache.shenyu.client.core.utils.PortUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListener.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.IpUtils;
 import org.apache.shenyu.common.utils.PathUtils;
-import org.apache.shenyu.common.utils.PortUtils;
+import org.apache.shenyu.client.core.utils.PortUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListenerTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.client.core.register.ShenyuClientRegisterRepositoryFactory;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
 import org.apache.shenyu.common.exception.ShenyuException;
-import org.apache.shenyu.common.utils.PortUtils;
+import org.apache.shenyu.client.core.utils.PortUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.client.http.utils.RegisterUtils;
 import org.apache.shenyu.register.common.config.PropertiesConfig;

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/SpringWebSocketClientEventListener.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.IpUtils;
 import org.apache.shenyu.common.utils.PathUtils;
-import org.apache.shenyu.common.utils.PortUtils;
+import org.apache.shenyu.client.core.utils.PortUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/SignUtils.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.common.utils;
 
+import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.shenyu.common.constant.Constants;
-import org.springframework.util.DigestUtils;
 
 import java.util.Comparator;
 import java.util.Map;
@@ -60,7 +60,7 @@ public static String generateSign(final String signKey, final Map<String, String
                 .collect(Collectors.joining()).trim()
                 .concat(signKey);
         // TODO this is a risk for error charset coding with getBytes
-        return DigestUtils.md5DigestAsHex(sign.getBytes()).toUpperCase();
+        return DigestUtils.md5Hex(sign.getBytes()).toUpperCase();
     }
 
     /**

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/Subscribe.java
Patch:
@@ -30,7 +30,7 @@
 import io.netty.handler.codec.mqtt.MqttPublishVariableHeader;
 import io.netty.handler.codec.mqtt.MqttPublishMessage;
 import io.netty.util.CharsetUtil;
-import org.apache.logging.log4j.util.Strings;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.protocol.mqtt.repositories.SubscribeRepository;
 import org.apache.shenyu.protocol.mqtt.repositories.TopicRepository;
@@ -71,7 +71,7 @@ public void subscribe(final ChannelHandlerContext ctx, final MqttSubscribeMessag
 
         for (String ackTopic : ackTopics) {
             String message = Singleton.INST.get(TopicRepository.class).get(ackTopic);
-            if (Strings.isNotEmpty(message)) {
+            if (StringUtils.isNotEmpty(message)) {
                 sendSubMessage(ackTopic, message, packetId, channel);
             }
         }

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-zookeeper/src/test/java/org/apache/shenyu/register/client/server/zookeeper/ZookeeperServerRegisterRepositoryTest.java
Patch:
@@ -27,10 +27,10 @@
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedConstruction;
-import org.springframework.util.ObjectUtils;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 import java.util.Properties;
 
 import static org.mockito.ArgumentMatchers.any;
@@ -79,7 +79,7 @@ public void testZookeeperInstanceRegisterRepository() {
                 }
             }
             final TreeCacheListener treeCacheListener = treeCacheListeners.stream().findFirst().orElse(null);
-            if (!ObjectUtils.isEmpty(treeCacheListener)) {
+            if (Objects.nonNull(treeCacheListener)) {
                 TreeCacheEvent event = mock(TreeCacheEvent.class);
                 ChildData childData = mock(ChildData.class);
                 treeCacheListener.childEvent(curatorFramework, event);

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/test/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepositoryTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.alibaba.nacos.api.exception.NacosException;
 import com.alibaba.nacos.api.naming.NamingService;
 import com.alibaba.nacos.api.naming.pojo.Instance;
-import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
-import org.apache.shenyu.register.common.subsriber.WatcherListener;
+import org.apache.shenyu.register.instance.api.entity.InstanceEntity;
+import org.apache.shenyu.register.instance.api.watcher.WatcherListener;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -78,7 +78,7 @@ private NamingService mockNamingService() throws NacosException {
 
     @Test
     public void testPersistInstance() {
-        InstanceRegisterDTO data = InstanceRegisterDTO.builder()
+        InstanceEntity data = InstanceEntity.builder()
                 .appName("shenyu-test")
                 .host("shenyu-host")
                 .port(9195)

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/main/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperConfig.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.register.instance.zookeeper;
 
 public class ZookeeperConfig {
+    
     /**
      * zookeeper server list.
      * e.g. host1:2181,host2:2181

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/client/ShenyuSdkClientFactory.java
Patch:
@@ -28,11 +28,11 @@
 public class ShenyuSdkClientFactory {
 
     private static final Map<String, ShenyuSdkClient> SDK_CLIENT_MAP = new ConcurrentHashMap<>();
-
+    
     /**
      * New shenyu sku client.
      *
-     * @param clientType the config
+     * @param clientType the client type
      * @return the shenyu instance register repository
      */
     public static ShenyuSdkClient newInstance(final String clientType) {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/gateway/ShenyuConfiguration.java
Patch:
@@ -121,8 +121,8 @@ public ShenyuPlugin paramTransformPlugin() {
      */
     @Bean
     public PluginDataSubscriber pluginDataSubscriber(final ObjectProvider<List<PluginDataHandler>> pluginDataHandlerList,
-                                                     final ApplicationEventPublisher eventPublisher) {
-        return new CommonPluginDataSubscriber(pluginDataHandlerList.getIfAvailable(Collections::emptyList), eventPublisher);
+                                                     final ObjectProvider<ApplicationEventPublisher> eventPublisher) {
+        return new CommonPluginDataSubscriber(pluginDataHandlerList.getIfAvailable(Collections::emptyList), eventPublisher.getIfAvailable());
     }
 
     /**

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/config/HttpConfig.java
Patch:
@@ -17,14 +17,11 @@
 
 package org.apache.shenyu.sync.data.http.config;
 
-import org.springframework.boot.context.properties.ConfigurationProperties;
-
 import java.util.Objects;
 
 /**
  * The type Http config.
  */
-@ConfigurationProperties(prefix = "shenyu.sync.http")
 public class HttpConfig {
 
     private String url;

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/retry/RetryableException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.sdk.core.client;
+package org.apache.shenyu.sdk.core.retry;
 
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
@@ -47,7 +47,7 @@ public class RetryableException extends ShenyuException {
      * @param request request
      */
     public RetryableException(final String message, final Throwable cause,
-                     final Date retryAfter, final ShenyuRequest request) {
+                              final Date retryAfter, final ShenyuRequest request) {
         super(message, cause);
         this.httpMethod = request.getHttpMethod();
         this.retryAfter = Optional.ofNullable(retryAfter).map(Date::getTime).orElse(null);

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/ShenyuClientsRegistrar.java
Patch:
@@ -317,6 +317,9 @@ static String getUrl(final String url) {
 
     private String getUrl(final ConfigurableBeanFactory beanFactory, final Map<String, Object> attributes) {
         String url = resolve(beanFactory, (String) attributes.get("url"));
+        if (!StringUtils.hasText(url)) {
+            return getUrl(getName(beanFactory, attributes));
+        }
         return getUrl(url);
     }
 

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-etcd/src/main/java/org/apache/shenyu/register/instance/etcd/EtcdInstanceRegisterRepository.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.register.instance.etcd;
 
-import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import io.etcd.jetcd.Watch;
 import io.etcd.jetcd.watch.WatchEvent;
+import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
@@ -29,6 +29,7 @@
 import org.apache.shenyu.spi.Join;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
@@ -57,7 +58,7 @@ public void init(final RegisterConfig config) {
     @Override
     public void persistInstance(final InstanceRegisterDTO instance) {
         String instanceNodeName = buildInstanceNodeName(instance);
-        String instancePath = RegisterPathConstants.buildInstanceParentPath();
+        String instancePath = RegisterPathConstants.buildInstanceParentPath(instance.getAppName());
         String realNode = RegisterPathConstants.buildRealNode(instancePath, instanceNodeName);
         String nodeData = GsonUtils.getInstance().toJson(instance);
         client.putEphemeral(realNode, nodeData);

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-etcd/src/test/java/org/apache/shenyu/register/instance/etcd/EtcdInstanceRegisterRepositoryTest.java
Patch:
@@ -44,9 +44,9 @@
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.mockConstruction;
 import static org.mockito.Mockito.mockStatic;
 import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.mockConstruction;
 
 public final class EtcdInstanceRegisterRepositoryTest {
 
@@ -92,7 +92,7 @@ public void testPersistInstance() {
                 .port(9195)
                 .build();
 
-        final String realNode = "/shenyu/register/instance/shenyu-host:9195";
+        final String realNode = "/shenyu/register/shenyu-test/shenyu-host:9195";
         repository.persistInstance(data);
         assertTrue(etcdBroker.containsKey(realNode));
         assertEquals(GsonUtils.getInstance().toJson(data), etcdBroker.get(realNode));

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/main/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperInstanceRegisterRepository.java
Patch:
@@ -33,14 +33,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Properties;
 import java.util.function.Function;
 import java.util.stream.Collectors;
-import java.util.Objects;
-import java.util.Collections;
 
 /**
  * The type Zookeeper instance register repository.
@@ -94,7 +94,7 @@ public void init(final RegisterConfig config) {
     @Override
     public void persistInstance(final InstanceRegisterDTO instance) {
         String uriNodeName = buildInstanceNodeName(instance);
-        String instancePath = RegisterPathConstants.buildInstanceParentPath();
+        String instancePath = RegisterPathConstants.buildInstanceParentPath(instance.getAppName());
         if (!client.isExist(instancePath)) {
             client.createOrUpdate(instancePath, "", CreateMode.PERSISTENT);
         }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -81,7 +81,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         initMatchCacheConfig();
         String pluginName = named();
         PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName);
-        if (pluginData != null && pluginData.getEnabled()) {
+        if (Objects.nonNull(pluginData) && pluginData.getEnabled()) {
             final String path = exchange.getRequest().getURI().getPath();
             SelectorData selectorData = obtainSelectorDataCacheIfEnabled(exchange);
             if (Objects.isNull(selectorData)) {

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/client/ShenyuSdkClient.java
Patch:
@@ -15,17 +15,17 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.sdk.core.http;
+package org.apache.shenyu.sdk.core.client;
 
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.apache.shenyu.sdk.core.ShenyuResponse;
 
 import java.io.IOException;
 
 /**
- * ShenyuHttpClient.
+ * ShenyuSdkClient.
  */
-public interface ShenyuHttpClient {
+public interface ShenyuSdkClient {
 
     /**
      * execute.

File: shenyu-sdk/shenyu-sdk-httpclient/src/main/java/org/apache/shenyu/sdk/httpclient/HttpShenyuSdkClient.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.http.util.EntityUtils;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.apache.shenyu.sdk.core.ShenyuResponse;
-import org.apache.shenyu.sdk.core.http.ShenyuHttpClient;
+import org.apache.shenyu.sdk.core.client.ShenyuSdkClient;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
@@ -42,11 +42,11 @@
 /**
  * shenyu httpclient.
  */
-public class HttpClientShenyuHttpClient implements ShenyuHttpClient {
+public class HttpShenyuSdkClient implements ShenyuSdkClient {
 
     private final HttpClientConnectionManager connectionManager;
 
-    public HttpClientShenyuHttpClient(final HttpClientConnectionManager connectionManager) {
+    public HttpShenyuSdkClient(final HttpClientConnectionManager connectionManager) {
         this.connectionManager = connectionManager;
     }
 

File: shenyu-sdk/shenyu-sdk-httpclient/src/test/java/org/apache/shenyu/sdk/httpclient/HttpShenyuSdkClientTest.java
Patch:
@@ -29,11 +29,11 @@
 import java.util.HashMap;
 import java.util.Map;
 
-public class HttpClientShenyuHttpClientTest {
+public class HttpShenyuSdkClientTest {
 
     @Test
     public void testShenyuHttpClient() throws IOException {
-        HttpClientShenyuHttpClient shenyuHttpClient = new HttpClientShenyuHttpClient(new PoolingHttpClientConnectionManager());
+        HttpShenyuSdkClient shenyuHttpClient = new HttpShenyuSdkClient(new PoolingHttpClientConnectionManager());
         Map<String, Collection<String>> headerMap = new HashMap<>();
         headerMap.put("header", Arrays.asList("test1", "test2"));
         ShenyuRequest shenyuRequest = ShenyuRequest.create(ShenyuRequest.HttpMethod.GET, "https://shenyu.apache.org",

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/proxy/ShenyuClientInvocationHandler.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.shenyu.sdk.spring.proxy;
 
 import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.sdk.core.client.ShenyuSdkClient;
 import org.apache.shenyu.sdk.core.common.RequestTemplate;
-import org.apache.shenyu.sdk.core.http.ShenyuHttpClient;
 import org.apache.shenyu.sdk.spring.ShenyuClient;
 import org.apache.shenyu.sdk.spring.ShenyuClientFactoryBean;
 import org.apache.shenyu.sdk.spring.factory.AnnotatedParameterProcessor;
@@ -74,7 +74,7 @@ private void buildMethodHandlerMap(final Class<?> apiClass, final ShenyuClient s
         // parseAndValidate RequestTemplate
         final List<RequestTemplate> requestTemplates = contract.parseAndValidateRequestTemplate(apiClass);
 
-        final ShenyuHttpClient shenyuHttpClient = applicationContext.getBean(ShenyuHttpClient.class);
+        final ShenyuSdkClient shenyuSdkClient = applicationContext.getBean(ShenyuSdkClient.class);
         final Map<String, AnnotatedParameterProcessor> annotatedParameterProcessorMap = applicationContext.getBeansOfType(AnnotatedParameterProcessor.class);
         Collection<AnnotatedParameterProcessor> annotatedParameterProcessors = annotatedParameterProcessorMap.values();
         annotatedParameterProcessors = annotatedParameterProcessors.stream().sorted(Comparator.comparing(AnnotatedParameterProcessor::order)).collect(Collectors.toList());
@@ -87,7 +87,7 @@ private void buildMethodHandlerMap(final Class<?> apiClass, final ShenyuClient s
                 requestTemplate.setPath(shenyuClientFactoryBean.getPath() + "/" + requestTemplate.getPath());
             }
             methodHandlerMap.put(requestTemplate.getMethod(),
-                    new ShenyuClientMethodHandler(shenyuClient, requestTemplate, shenyuHttpClient, annotatedArgumentProcessors));
+                    new ShenyuClientMethodHandler(shenyuClient, requestTemplate, shenyuSdkClient, annotatedArgumentProcessors));
         }
     }
 

File: shenyu-sdk/shenyu-sdk-spring/src/main/java/org/apache/shenyu/sdk/spring/proxy/ShenyuClientMethodHandler.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.apache.shenyu.sdk.core.ShenyuResponse;
+import org.apache.shenyu.sdk.core.client.ShenyuSdkClient;
 import org.apache.shenyu.sdk.core.common.RequestTemplate;
-import org.apache.shenyu.sdk.core.http.ShenyuHttpClient;
 import org.apache.shenyu.sdk.spring.ShenyuClient;
 import org.apache.shenyu.sdk.spring.factory.AnnotatedParameterProcessor;
 import org.springframework.util.ObjectUtils;
@@ -38,15 +38,15 @@ public class ShenyuClientMethodHandler {
 
     private final ShenyuClient shenyuClient;
 
-    private final ShenyuHttpClient shenyuHttpClient;
+    private final ShenyuSdkClient shenyuHttpClient;
 
     private RequestTemplate requestTemplate;
 
     private final Map<Class<? extends Annotation>, AnnotatedParameterProcessor> annotatedArgumentProcessors;
 
     public ShenyuClientMethodHandler(final ShenyuClient shenyuClient,
                                      final RequestTemplate requestTemplate,
-                                     final ShenyuHttpClient shenyuHttpClient,
+                                     final ShenyuSdkClient shenyuHttpClient,
                                      final Map<Class<? extends Annotation>, AnnotatedParameterProcessor> annotatedArgumentProcessors) {
         this.shenyuClient = shenyuClient;
         this.requestTemplate = requestTemplate;

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/test/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperInstanceRegisterRepositoryTest.java
Patch:
@@ -94,7 +94,7 @@ public void testSelectInstancesAndWatcher() throws Exception {
             when(curatorFramework.getConnectionStateListenable()).thenReturn(listenable);
         })) {
             final ZookeeperInstanceRegisterRepository repository = new ZookeeperInstanceRegisterRepository();
-            ShenyuConfig.InstanceConfig config = new ShenyuConfig.InstanceConfig();
+            ShenyuConfig.RegisterConfig config = new ShenyuConfig.RegisterConfig();
             repository.init(config);
             final Properties configProps = config.getProps();
             configProps.setProperty("digest", "digest");

File: shenyu-sdk/shenyu-sdk-httpclient/src/test/java/org/apache/shenyu/sdk/httpclient/HttpClientShenyuHttpClientTest.java
Patch:
@@ -37,7 +37,7 @@ public void testShenyuHttpClient() throws IOException {
         Map<String, Collection<String>> headerMap = new HashMap<>();
         headerMap.put("header", Arrays.asList("test1", "test2"));
         ShenyuRequest shenyuRequest = ShenyuRequest.create(ShenyuRequest.HttpMethod.GET, "https://shenyu.apache.org",
-                headerMap, null, null);
+                headerMap, null, null, null);
         ShenyuResponse response = shenyuHttpClient.execute(shenyuRequest);
         Assertions.assertNotNull(response);
     }

File: shenyu-common/src/test/java/org/apache/shenyu/common/config/ShenyuConfigTest.java
Patch:
@@ -49,7 +49,7 @@ public void testShenyuConfig() {
         ShenyuConfig.ExcludePath exclude = config.getExclude();
         ShenyuConfig.FallbackPath fallback = config.getFallback();
         ShenyuConfig.FileConfig file = config.getFile();
-        ShenyuConfig.InstanceConfig instance = config.getInstance();
+        ShenyuConfig.RegisterConfig instance = config.getRegister();
         ShenyuConfig.ExtPlugin extPlugin = config.getExtPlugin();
         ShenyuConfig.Local local = config.getLocal();
         ShenyuConfig.RibbonConfig ribbon = config.getRibbon();
@@ -187,7 +187,7 @@ public void testExtPlugin() {
 
     @Test
     public void testInstanceConfig() {
-        ShenyuConfig.InstanceConfig instance = config.getInstance();
+        ShenyuConfig.RegisterConfig instance = config.getRegister();
         instance.setEnabled(true);
         instance.setServerLists("test");
         instance.setRegisterType("test");

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-api/src/main/java/org/apache/shenyu/register/instance/api/ShenyuInstanceRegisterRepository.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.register.instance.api;
 
-import org.apache.shenyu.common.config.ShenyuConfig.InstanceConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
 import org.apache.shenyu.register.common.subsriber.WatcherListener;
 import org.apache.shenyu.spi.SPI;
@@ -36,7 +36,7 @@ public interface ShenyuInstanceRegisterRepository {
      *
      * @param config the config
      */
-    default void init(InstanceConfig config) {
+    default void init(RegisterConfig config) {
     }
     
     /**

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-consul/src/main/java/org/apache/shenyu/register/instance/consul/ConsulInstanceRegisterRepository.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.ecwid.consul.v1.ConsulClient;
 import com.ecwid.consul.v1.agent.model.NewCheck;
-import org.apache.shenyu.common.config.ShenyuConfig.InstanceConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
@@ -44,7 +44,7 @@ public class ConsulInstanceRegisterRepository implements ShenyuInstanceRegisterR
     private NewCheck check;
 
     @Override
-    public void init(final InstanceConfig config) {
+    public void init(final RegisterConfig config) {
         final Properties props = config.getProps();
         final String timeout = props.getProperty("consulTimeout", "3000");
         final String ttl = props.getProperty("consulTTL", "3000");

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-etcd/src/main/java/org/apache/shenyu/register/instance/etcd/EtcdInstanceRegisterRepository.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.register.instance.etcd;
 
-import org.apache.shenyu.common.config.ShenyuConfig.InstanceConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
@@ -40,7 +40,7 @@ public class EtcdInstanceRegisterRepository implements ShenyuInstanceRegisterRep
     private EtcdClient client;
 
     @Override
-    public void init(final InstanceConfig config) {
+    public void init(final RegisterConfig config) {
         Properties props = config.getProps();
         long timeout = Long.parseLong(props.getProperty("etcdTimeout", "3000"));
         long ttl = Long.parseLong(props.getProperty("etcdTTL", "5"));

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-etcd/src/test/java/org/apache/shenyu/register/instance/etcd/EtcdInstanceRegisterRepositoryTest.java
Patch:
@@ -110,7 +110,7 @@ public void initTest() {
 
             when(client.getLeaseClient().grant(anyLong())).thenReturn(completableFuture);
             when(completableFuture.get()).thenReturn(leaseGrantResponse);
-            final ShenyuConfig.InstanceConfig config = new ShenyuConfig.InstanceConfig();
+            final ShenyuConfig.RegisterConfig config = new ShenyuConfig.RegisterConfig();
             config.setServerLists("url");
             Assertions.assertDoesNotThrow(() -> repository.init(config));
         } catch (Exception e) {

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/main/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepository.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.nacos.api.naming.NamingFactory;
 import com.alibaba.nacos.api.naming.NamingService;
 import com.alibaba.nacos.api.naming.pojo.Instance;
-import org.apache.shenyu.common.config.ShenyuConfig.InstanceConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
@@ -50,7 +50,7 @@ public class NacosInstanceRegisterRepository implements ShenyuInstanceRegisterRe
     private String serviceName;
 
     @Override
-    public void init(final InstanceConfig config) {
+    public void init(final RegisterConfig config) {
         Properties properties = config.getProps();
         Properties nacosProperties = new Properties();
         this.groupName = properties.getProperty("groupName", "DEFAULT_GROUP");

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/main/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperInstanceRegisterRepository.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.api.CuratorWatcher;
 import org.apache.curator.framework.state.ConnectionState;
-import org.apache.shenyu.common.config.ShenyuConfig.InstanceConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
@@ -55,7 +55,7 @@ public class ZookeeperInstanceRegisterRepository implements ShenyuInstanceRegist
     private final Map<String, String> nodeDataMap = new HashMap<>();
 
     @Override
-    public void init(final InstanceConfig config) {
+    public void init(final RegisterConfig config) {
         Properties props = config.getProps();
         int sessionTimeout = Integer.parseInt(props.getProperty("sessionTimeout", "3000"));
         int connectionTimeout = Integer.parseInt(props.getProperty("connectionTimeout", "3000"));

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/test/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperInstanceRegisterRepositoryTest.java
Patch:
@@ -54,7 +54,7 @@ public void testZookeeperInstanceRegisterRepository() {
             when(curatorFramework.getConnectionStateListenable()).thenReturn(listenable);
         })) {
             final ZookeeperInstanceRegisterRepository repository = new ZookeeperInstanceRegisterRepository();
-            ShenyuConfig.InstanceConfig config = new ShenyuConfig.InstanceConfig();
+            ShenyuConfig.RegisterConfig config = new ShenyuConfig.RegisterConfig();
             repository.init(config);
             final Properties configProps = config.getProps();
             configProps.setProperty("digest", "digest");

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/common/RequestTemplate.java
Patch:
@@ -79,7 +79,7 @@ public RequestTemplate(final Class<?> returnType, final Method method, final Str
      * @return {@link ShenyuRequest}
      */
     public ShenyuRequest request() {
-        return ShenyuRequest.create(this.httpMethod, this.url + this.path, this.headers, this.body, this);
+        return ShenyuRequest.create(this.httpMethod, this.url + this.path, this.headers, this.body, contextId, this);
     }
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-instance/src/main/java/org/apache/shenyu/springboot/starter/instance/InstanceRegisterListener.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.instance;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.shenyu.common.config.ShenyuConfig.InstanceConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.RegisterConfig;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.IpUtils;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
@@ -50,7 +50,7 @@ public class InstanceRegisterListener implements ApplicationListener<WebServerIn
      *
      * @param config the config
      */
-    public InstanceRegisterListener(final InstanceConfig config) {
+    public InstanceRegisterListener(final RegisterConfig config) {
         String registerType = config.getRegisterType();
         String serverLists = config.getServerLists();
         if (StringUtils.isBlank(registerType) || StringUtils.isBlank(serverLists)) {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-instance/src/main/java/org/apache/shenyu/springboot/starter/instance/ShenyuInstanceConfiguration.java
Patch:
@@ -35,8 +35,8 @@ public class ShenyuInstanceConfiguration {
      * @return the instance register listener
      */
     @Bean
-    @ConditionalOnProperty(name = "shenyu.instance.enabled", havingValue = "true")
+    @ConditionalOnProperty(name = "shenyu.register.enabled", havingValue = "true")
     public InstanceRegisterListener instanceRegisterListener(final ShenyuConfig config) {
-        return new InstanceRegisterListener(config.getInstance());
+        return new InstanceRegisterListener(config.getRegister());
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/RuleController.java
Patch:
@@ -77,7 +77,7 @@ public AdminResult<CommonPager<RuleVO>> queryRules(final String selectorId, fina
                                                        @RequestParam @NotNull final Integer pageSize) {
         final RuleQueryCondition condition = new RuleQueryCondition();
         condition.setUserId(SessionUtil.visitor().getUserId());
-        condition.setSelectors(ListUtil.list(selectorId));
+        condition.setSelectors(ListUtil.of(selectorId));
         condition.setKeyword(name);
         return searchAdaptor(new PageCondition<>(currentPage, pageSize, condition));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SelectorController.java
Patch:
@@ -77,7 +77,7 @@ public AdminResult<CommonPager<SelectorVO>> querySelectors(final String pluginId
                                                                 @RequestParam @NotNull final Integer pageSize) {
         final SelectorQueryCondition condition = new SelectorQueryCondition();
         condition.setUserId(SessionUtil.visitor().getUserId());
-        condition.setPlugin(ListUtil.list(pluginId));
+        condition.setPlugin(ListUtil.of(pluginId));
         condition.setKeyword(name);
         return searchAdaptor(new PageCondition<>(currentPage, pageSize, condition));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ListUtil.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.commons.collections4.CollectionUtils;
 
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
@@ -55,11 +54,11 @@ public static <T> List<T> list(final T... t) {
      *
      * @param t   e
      * @param <T> type
-     * @return list
+     * @return unmodifiable list
      */
     @SafeVarargs
     public static <T> List<T> of(final T... t) {
-        return new ArrayList<>(list(t));
+        return Collections.unmodifiableList(Stream.of(t).filter(Objects::nonNull).collect(Collectors.toList()));
     }
     
     /**

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/proxy/AlibabaDubboProxyService.java
Patch:
@@ -71,7 +71,7 @@ public ResponseFuture genericInvoker(final String body, final MetaData metaData)
         try {
             GenericService genericService = reference.get();
             Pair<String[], Object[]> pair;
-            if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {
+            if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.bodyIsEmpty(body)) {
                 pair = new ImmutablePair<>(new String[]{}, new Object[]{});
             } else {
                 pair = dubboParamResolveService.buildParameter(body, metaData.getParameterTypes());

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -70,7 +70,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
         }
         GenericService genericService = reference.get();
         Pair<String[], Object[]> pair;
-        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {
+        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.bodyIsEmpty(body)) {
             pair = new ImmutablePair<>(new String[]{}, new Object[]{});
         } else {
             pair = dubboParamResolveService.buildParameter(body, metaData.getParameterTypes());

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/proxy/MotanProxyService.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.shenyu.common.enums.ResultEnum;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.ParamCheckUtils;
 import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.motan.cache.ApplicationConfigCache;
@@ -91,6 +92,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
             int num = motanParamInfo.getParamTypes().length;
             params = new Object[num];
             Map<String, Object> bodyMap = GsonUtils.getInstance().convertToMap(body);
+            ParamCheckUtils.checkParamsLength(bodyMap.size(), motanParamInfo.getParamNames().length);
             for (int i = 0; i < num; i++) {
                 params[i] = bodyMap.get(motanParamInfo.getParamNames()[i]).toString();
             }

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/param/SofaParamResolveServiceImpl.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.ParamCheckUtils;
 import org.springframework.lang.NonNull;
 
 import java.util.ArrayList;
@@ -45,6 +46,7 @@ public Pair<String[], Object[]> buildParameter(final String body, final String p
         List<Object> values = new ArrayList<>();
         final List<Object> params = new ArrayList<>(GsonUtils.getInstance().toObjectMap(body).values());
         for (int paramIndex = 0; paramIndex < parameterTypeStrings.length; paramIndex++) {
+            ParamCheckUtils.checkParamsLength(params.size(), parameterTypeStrings.length);
             final String[] parameter = StringUtils.split(parameterTypeStrings[paramIndex], "#");
             parameterTypeArr.add(parameter[0]);
             values.add(convertToParameterValue(params.get(paramIndex), parameter));

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/util/PrxInfoUtil.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.ParamCheckUtils;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -143,6 +144,7 @@ public static String getObjectName(final String upstreamUrl, final String servic
      */
     public static Object[] getParamArray(final Class<?>[] paramTypes, final String[] paramNames, final String body) {
         Map<String, Object> bodyMap = GsonUtils.getInstance().convertToMap(body);
+        ParamCheckUtils.checkParamsLength(bodyMap.size(), paramNames.length);
         Object[] param = new Object[paramNames.length];
         for (int i = 0; i < paramNames.length; i++) {
             String paramName = paramNames[i];

File: shenyu-protocol/shenyu-protocol-grpc/src/main/java/org/apache/shenyu/protocol/grpc/message/JsonMessage.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.protobuf.ExtensionRegistryLite;
 import io.grpc.MethodDescriptor;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.ParamCheckUtils;
 import org.apache.shenyu.protocol.grpc.constant.GrpcConstants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -83,6 +84,7 @@ private static Descriptors.Descriptor buildJsonMarshallerDescriptor() {
      * @return DynamicMessageList
      */
     public static List<DynamicMessage> buildJsonMessageList(final Map<String, Object> jsonParamMap) {
+        ParamCheckUtils.checkParamsLength(jsonParamMap.size(), GrpcConstants.JSON_DESCRIPTOR_PROTO_FIELD_NUM);
         JsonArray jsonParams = (JsonArray) jsonParamMap.get(GrpcConstants.JSON_DESCRIPTOR_PROTO_FIELD_NAME);
         List<DynamicMessage> jsonMessageList = new ArrayList<>(jsonParams.size());
         jsonParams.forEach(jsonParam -> {

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/response/RuleDTO.java
Patch:
@@ -42,6 +42,8 @@ public class RuleDTO implements ResourceDTO {
     @JsonAlias("loged")
     private boolean logged;
     
+    private boolean enabled;
+    
     private String handle;
     
     private JsonNode ruleConditions;

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/response/SearchedResources.java
Patch:
@@ -29,7 +29,7 @@ public class SearchedResources<T extends ResourceDTO> {
     private int pageNum;
     private int pageSize;
     private int total;
-    private int page;
+    private int pages;
     
     private List<T> list;
     

File: shenyu-e2e/shenyu-e2e-engine/src/test/java/org/apache/shenyu/e2e/engine/ShenYuEngineTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import org.apache.shenyu.e2e.client.admin.AdminClient;
 import org.apache.shenyu.e2e.client.admin.model.data.SearchCondition.SelectorQueryCondition;
+import org.apache.shenyu.e2e.client.admin.model.response.SearchedResources;
 import org.apache.shenyu.e2e.client.admin.model.response.SelectorDTO;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest;
 import org.apache.shenyu.e2e.engine.annotation.ShenYuTest.Parameter;
@@ -38,7 +39,6 @@
 import java.io.File;
 import java.net.URL;
 import java.time.Duration;
-import java.util.List;
 
 @Disabled
 @ShenYuTest(
@@ -91,7 +91,7 @@ void testA(AdminClient client) {
                 .switchStatus(true)
                 .build();
         
-        List<SelectorDTO> divide = client.searchSelector("divide");
+        SearchedResources<SelectorDTO> divide = client.searchSelectors("divide");
     }
     
     @Test

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/client/AliyunSlsLogCollectClient.java
Patch:
@@ -54,7 +54,7 @@
 /**
  * Aliyun sls log Collect client.
  */
-public class AliyunSlsLogCollectClient extends AbstractLogConsumeClient<AliyunLogCollectConfig.AliyunSlsLogConfig> {
+public class AliyunSlsLogCollectClient extends AbstractLogConsumeClient<AliyunLogCollectConfig.AliyunSlsLogConfig, ShenyuRequestLog> {
 
     private Client client;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/client/ClickHouseLogCollectClient.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * queue-based logging collector.
  */
-public class ClickHouseLogCollectClient extends AbstractLogConsumeClient<ClickHouseLogCollectConfig.ClickHouseLogConfig> {
+public class ClickHouseLogCollectClient extends AbstractLogConsumeClient<ClickHouseLogCollectConfig.ClickHouseLogConfig, ShenyuRequestLog> {
 
     private ClickHouseClient client;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/body/LoggingServerHttpRequest.java
Patch:
@@ -29,11 +29,11 @@
 /**
  * decorate ServerHttpRequest for read body.
  */
-public class LoggingServerHttpRequest extends ServerHttpRequestDecorator {
+public class LoggingServerHttpRequest<L extends ShenyuRequestLog> extends ServerHttpRequestDecorator {
     
-    private final ShenyuRequestLog logInfo;
+    private final L logInfo;
 
-    public LoggingServerHttpRequest(final ServerHttpRequest delegate, final ShenyuRequestLog logInfo) {
+    public LoggingServerHttpRequest(final ServerHttpRequest delegate, final L logInfo) {
         super(delegate);
         this.logInfo = logInfo;
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/client/LogConsumeClient.java
Patch:
@@ -25,15 +25,15 @@
 /**
  * Used to collect logs, which can be stored in remote or local files or databases, or others.
  */
-public interface LogConsumeClient<C extends GenericGlobalConfig> extends AutoCloseable {
+public interface LogConsumeClient<C extends GenericGlobalConfig, L extends ShenyuRequestLog> extends AutoCloseable {
     
     /**
      * collect logs.
      *
      * @param logs list of log
      * @throws Exception produce exception
      */
-    void consume(List<ShenyuRequestLog> logs) throws Exception;
+    void consume(List<L> logs) throws Exception;
 
     /**
      * init client by config.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-console/src/main/java/org/apache/shenyu/plugin/logging/console/LoggingConsolePlugin.java
Patch:
@@ -29,9 +29,9 @@
 import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
 import org.apache.shenyu.plugin.logging.common.entity.CommonLoggingRuleHandle;
 import org.apache.shenyu.plugin.logging.console.handler.LoggingConsolePluginDataHandler;
-import org.apache.shenyu.plugin.logging.mask.matcher.KeyWordMatch;
-import org.apache.shenyu.plugin.logging.mask.utils.DataMaskUtils;
-import org.apache.shenyu.plugin.logging.mask.enums.DataMaskEnums;
+import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.mask.api.utils.DataMaskUtils;
+import org.apache.shenyu.plugin.logging.mask.api.enums.DataMaskEnums;
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/client/ElasticSearchLogCollectClient.java
Patch:
@@ -47,7 +47,7 @@
 /**
  * queue-based logging collector.
  */
-public class ElasticSearchLogCollectClient extends AbstractLogConsumeClient<ElasticSearchLogCollectConfig.ElasticSearchLogConfig> {
+public class ElasticSearchLogCollectClient extends AbstractLogConsumeClient<ElasticSearchLogCollectConfig.ElasticSearchLogConfig, ShenyuRequestLog> {
 
     private static final Logger LOG = LoggerFactory.getLogger(ElasticSearchLogCollectClient.class);
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/client/KafkaLogCollectClient.java
Patch:
@@ -49,7 +49,7 @@
 /**
  * queue-based logging collector.
  */
-public class KafkaLogCollectClient extends AbstractLogConsumeClient<KafkaLogCollectConfig.KafkaLogConfig> {
+public class KafkaLogCollectClient extends AbstractLogConsumeClient<KafkaLogCollectConfig.KafkaLogConfig, ShenyuRequestLog> {
 
     private static Map<String, String> apiTopicMap = new HashMap<>();
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/enums/DataMaskEnums.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.enums;
+package org.apache.shenyu.plugin.logging.mask.api.enums;
 
 /**
  * data mask enums.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/factory/DataMaskFactory.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.factory;
+package org.apache.shenyu.plugin.logging.mask.api.factory;
 
-import org.apache.shenyu.plugin.logging.mask.spi.ShenyuDataMask;
+import org.apache.shenyu.plugin.logging.mask.api.spi.ShenyuDataMask;
 import org.apache.shenyu.spi.ExtensionLoader;
 
 /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/matcher/KeyWordMatch.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.matcher;
+package org.apache.shenyu.plugin.logging.mask.api.matcher;
 
 import java.util.Set;
 import java.util.regex.Pattern;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/spi/AbstractShenyuDataMask.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.spi;
+package org.apache.shenyu.plugin.logging.mask.api.spi;
 
 import org.apache.commons.lang3.StringUtils;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/spi/CharacterReplaceDataMask.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.spi;
+package org.apache.shenyu.plugin.logging.mask.api.spi;
 
 import org.apache.shenyu.spi.Join;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/spi/Md5EncryptDataMask.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.spi;
+package org.apache.shenyu.plugin.logging.mask.api.spi;
 
 import org.apache.shenyu.common.utils.Md5Utils;
 import org.apache.shenyu.spi.Join;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/main/java/org/apache/shenyu/plugin/logging/mask/api/spi/ShenyuDataMask.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.spi;
+package org.apache.shenyu.plugin.logging.mask.api.spi;
 
 import org.apache.shenyu.spi.SPI;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/test/java/org/apache/shenyu/plugin/logging/mask/api/factory/DataMaskFactoryTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.factory;
+package org.apache.shenyu.plugin.logging.mask.api.factory;
 
 import org.apache.shenyu.common.utils.Md5Utils;
-import org.apache.shenyu.plugin.logging.mask.enums.DataMaskEnums;
+import org.apache.shenyu.plugin.logging.mask.api.enums.DataMaskEnums;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/test/java/org/apache/shenyu/plugin/logging/mask/api/matcher/KeyWordMatchTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.matcher;
+package org.apache.shenyu.plugin.logging.mask.api.matcher;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/test/java/org/apache/shenyu/plugin/logging/mask/api/spi/CharacterReplaceDataMaskTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.spi;
+package org.apache.shenyu.plugin.logging.mask.api.spi;
 
-import org.apache.shenyu.plugin.logging.mask.enums.DataMaskEnums;
-import org.apache.shenyu.plugin.logging.mask.factory.DataMaskFactory;
+import org.apache.shenyu.plugin.logging.mask.api.enums.DataMaskEnums;
+import org.apache.shenyu.plugin.logging.mask.api.factory.DataMaskFactory;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/test/java/org/apache/shenyu/plugin/logging/mask/api/spi/Md5EncryptDataMaskTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.spi;
+package org.apache.shenyu.plugin.logging.mask.api.spi;
 
 import org.apache.shenyu.common.utils.Md5Utils;
 import org.junit.jupiter.api.Assertions;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-mask-api/src/test/java/org/apache/shenyu/plugin/logging/mask/api/utils/DataMaskUtilsTest.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.mask.utils;
+package org.apache.shenyu.plugin.logging.mask.api.utils;
 
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.common.utils.Md5Utils;
-import org.apache.shenyu.plugin.logging.mask.enums.DataMaskEnums;
-import org.apache.shenyu.plugin.logging.mask.matcher.KeyWordMatch;
+import org.apache.shenyu.plugin.logging.mask.api.enums.DataMaskEnums;
+import org.apache.shenyu.plugin.logging.mask.api.matcher.KeyWordMatch;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/main/java/org/apache/shenyu/plugin/logging/pulsar/client/PulsarLogCollectClient.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * queue-based logging collector.
  */
-public class PulsarLogCollectClient extends AbstractLogConsumeClient<PulsarLogCollectConfig.PulsarLogConfig> {
+public class PulsarLogCollectClient extends AbstractLogConsumeClient<PulsarLogCollectConfig.PulsarLogConfig, ShenyuRequestLog> {
     private static final Logger LOG = LoggerFactory.getLogger(PulsarLogCollectClient.class);
 
     private PulsarClient client;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/client/RocketMQLogCollectClient.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * queue-based logging collector.
  */
-public class RocketMQLogCollectClient extends AbstractLogConsumeClient<RocketMQLogCollectConfig.RocketMQLogConfig> {
+public class RocketMQLogCollectClient extends AbstractLogConsumeClient<RocketMQLogCollectConfig.RocketMQLogConfig, ShenyuRequestLog> {
 
     private static final Logger LOG = LoggerFactory.getLogger(RocketMQLogCollectClient.class);
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/main/java/org/apache/shenyu/plugin/tencent/cls/client/TencentClsLogCollectClient.java
Patch:
@@ -52,7 +52,7 @@
 /**
  * Tencent cls log Collect client.
  */
-public class TencentClsLogCollectClient extends AbstractLogConsumeClient<TencentLogCollectConfig.TencentClsLogConfig> {
+public class TencentClsLogCollectClient extends AbstractLogConsumeClient<TencentLogCollectConfig.TencentClsLogConfig, ShenyuRequestLog> {
 
     private AsyncProducerClient client;
 

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/common/RequestTemplate.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 
-import java.io.Serializable;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.util.Collection;
@@ -34,7 +33,7 @@
  * information also support template expressions.
  * </p>
  */
-public final class RequestTemplate implements Serializable {
+public final class RequestTemplate {
 
     private transient Class<?> returnType;
 

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/util/Util.java
Patch:
@@ -20,6 +20,7 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import static java.lang.String.format;
 
@@ -31,7 +32,7 @@ public final class Util {
     /**
      * UTF-8: eight-bit UCS Transformation Format.
      */
-    public static final Charset UTF_8 = Charset.forName("UTF-8");
+    public static final Charset UTF_8 = StandardCharsets.UTF_8;
 
     /**
      * checkArgument.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImplTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.mockito.junit.jupiter.MockitoSettings;
 import org.mockito.quality.Strictness;
 import org.springframework.test.util.ReflectionTestUtils;
+import com.google.gson.JsonParser;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;
@@ -115,7 +116,8 @@ public void testBuildHandle() {
         when(selectorDO.getHandle()).thenReturn(returnStr);
         doReturn(false).when(shenyuClientRegisterDubboService).doSubmit(any(), any());
         String actual = shenyuClientRegisterDubboService.buildHandle(list, selectorDO);
-        assertEquals(expected.replaceAll("\\d{13}", "0"), actual.replaceAll("\\d{13}", "0"));
+        JsonParser parser = new JsonParser();
+        assertEquals(parser.parse(expected.replaceAll("\\d{13}", "0")), parser.parse(actual.replaceAll("\\d{13}", "0")));
         List<DubboUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, DubboUpstream.class);
         assertEquals(resultList.size(), 2);
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImplTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.mockito.junit.jupiter.MockitoSettings;
 import org.mockito.quality.Strictness;
 import org.springframework.test.util.ReflectionTestUtils;
+import com.google.gson.JsonParser;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;
@@ -114,7 +115,8 @@ public void testBuildHandle() {
         when(selectorDO.getHandle()).thenReturn(returnStr);
         doReturn(false).when(shenyuClientRegisterGrpcService).doSubmit(any(), any());
         String actual = shenyuClientRegisterGrpcService.buildHandle(list, selectorDO);
-        assertEquals(actual, expected);
+        JsonParser parser = new JsonParser();
+        assertEquals(parser.parse(expected), parser.parse(actual));
         List<GrpcUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, GrpcUpstream.class);
         assertEquals(resultList.size(), 2);
     

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSofaServiceImplTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.mockito.junit.jupiter.MockitoSettings;
 import org.mockito.quality.Strictness;
+import com.google.gson.JsonParser;
     
 import java.util.ArrayList;
 import java.util.List;
@@ -67,8 +68,8 @@ public void testSelectorHandler() {
     
     @Test
     public void testRuleHandler() {
-        assertEquals("{\"retries\":0,\"loadBalance\":\"random\",\"timeout\":3000}",
-                shenyuClientRegisterSofaService.ruleHandler());
+        JsonParser parser = new JsonParser();
+        assertEquals(parser.parse("{\"retries\":0,\"loadBalance\":\"random\",\"timeout\":3000}"), parser.parse(shenyuClientRegisterSofaService.ruleHandler()));
     }
     
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.mockito.junit.jupiter.MockitoSettings;
 import org.mockito.quality.Strictness;
 import org.springframework.test.util.ReflectionTestUtils;
+import com.google.gson.JsonParser;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -117,7 +118,8 @@ public void testBuildHandle() {
         doReturn(false).when(shenyuClientRegisterSpringCloudService).doSubmit(any(), any());
         when(selectorDO.getHandle()).thenReturn(returnStr);
         String actual = shenyuClientRegisterSpringCloudService.buildHandle(list, selectorDO);
-        assertEquals(expected.replaceAll("\\d{13}", "0"), actual.replaceAll("\\d{13}", "0"));
+        JsonParser parser = new JsonParser();
+        assertEquals(parser.parse(expected.replaceAll("\\d{13}", "0")), parser.parse(actual.replaceAll("\\d{13}", "0")));
         SpringCloudSelectorHandle handle = GsonUtils.getInstance().fromJson(actual, SpringCloudSelectorHandle.class);
         assertEquals(handle.getDivideUpstreams().size(), 2);
         assertEquals(handle.getDivideUpstreams().stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImplTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.mockito.junit.jupiter.MockitoSettings;
 import org.mockito.quality.Strictness;
 import org.springframework.test.util.ReflectionTestUtils;
+import com.google.gson.JsonParser;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;
@@ -113,7 +114,8 @@ public void testBuildHandle() {
         when(selectorDO.getHandle()).thenReturn(returnStr);
         doReturn(false).when(shenyuClientRegisterTarsService).doSubmit(any(), any());
         String actual = shenyuClientRegisterTarsService.buildHandle(list, selectorDO);
-        assertEquals(actual.replaceAll("\\d{13}", "0"), expected.replaceAll("\\d{13}", "0"));
+        JsonParser parser = new JsonParser();
+        assertEquals(parser.parse(expected.replaceAll("\\d{13}", "0")), parser.parse(actual.replaceAll("\\d{13}", "0")));
         List<TarsUpstream> resultList = GsonUtils.getInstance().fromCurrentList(actual, TarsUpstream.class);
         assertEquals(resultList.size(), 2);
         assertEquals(resultList.stream().filter(r -> list.stream().map(dto -> CommonUpstreamUtils.buildUrl(dto.getHost(), dto.getPort()))

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/constant/GenericLoggingConstant.java
Patch:
@@ -75,7 +75,7 @@ public class GenericLoggingConstant {
     /**
      * logging request method.
      */
-    public static final String REQUEST_METHOD = "request method";
+    public static final String REQUEST_METHOD = "requestMethod";
 
     /**
      * logging request header.

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/RequestPlugin.java
Patch:
@@ -93,8 +93,8 @@ public String named() {
     private void setHeaders(final HttpHeaders headers, final ServerHttpRequest request, final RequestHandle requestHandle) {
         List<HttpCookie> cookies = getCookies(request, requestHandle).values().stream()
                 .flatMap(Collection::stream).collect(Collectors.toList());
+        headers.remove(HttpHeaders.COOKIE);
         if (CollectionUtils.isNotEmpty(cookies)) {
-            headers.remove(HttpHeaders.COOKIE);
             headers.set(HttpHeaders.COOKIE, StringUtils.join(cookies, "; "));
         }
 

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/SignPluginTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.reactive.function.server.HandlerStrategies;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -83,7 +84,7 @@ public void setup() {
         this.ruleData.setName("test-sign-plugin");
         this.signPluginDataHandler = new SignPluginDataHandler();
         signService = mock(SignService.class);
-        this.signPlugin = new SignPlugin(signService);
+        this.signPlugin = new SignPlugin(HandlerStrategies.builder().build().messageReaders(), signService);
 
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         SpringBeanUtils.getInstance().setApplicationContext(context);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sign/src/test/java/org/apache/shenyu/springboot/starter/plugin/sign/SignPluginConfigurationTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.codec.support.DefaultServerCodecConfigurer;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -46,6 +47,7 @@ public void before() {
         applicationContextRunner = new ApplicationContextRunner()
             .withConfiguration(AutoConfigurations.of(SignPluginConfiguration.class))
             .withBean(SignPluginConfigurationTest.class)
+            .withBean(DefaultServerCodecConfigurer.class)
             .withPropertyValues("debug=true");
     }
 

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -102,7 +102,7 @@ private String buildHost() {
 
     private int buildPort(final ServiceBean<?> serviceBean) {
         final String port = this.getPort();
-        return StringUtils.isBlank(port) ? serviceBean.getProtocol().getPort() : Integer.parseInt(port);
+        return StringUtils.isBlank(port) || "-1".equals(port) ? serviceBean.getProtocol().getPort() : Integer.parseInt(port);
     }
 
     @Override

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -105,7 +105,7 @@ private String buildHost() {
     
     private int buildPort(final ServiceBean<?> serviceBean) {
         final String port = this.getPort();
-        return StringUtils.isBlank(port) ? serviceBean.getProtocol().getPort() : Integer.parseInt(port);
+        return StringUtils.isBlank(port) || "-1".equals(port) ? serviceBean.getProtocol().getPort() : Integer.parseInt(port);
     }
     
     @Override

File: shenyu-plugin/shenyu-plugin-cryptor/src/test/java/org/apache/shenyu/plugin/cryptor/request/CryptorRequestPluginTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.reactive.function.server.HandlerStrategies;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -64,7 +65,7 @@ public void setUp() {
         this.ruleData.setSelectorId("test");
         this.ruleData.setName("test-cryptor-request-plugin");
         this.cryptorRequestPluginDataHandler = new CryptorRequestPluginDataHandler();
-        this.cryptorRequestPlugin = new CryptorRequestPlugin();
+        this.cryptorRequestPlugin = new CryptorRequestPlugin(HandlerStrategies.builder().build().messageReaders());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/ParamMappingPluginTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.reactive.function.server.HandlerStrategies;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -75,7 +76,7 @@ public void setUp() {
         this.paramMappingPluginDataHandler = new ParamMappingPluginDataHandler();
         Map<String, Operator> operatorMap = new HashMap<>(4);
         operatorMap.put(Constants.DEFAULT, new DefaultOperator());
-        operatorMap.put(MediaType.APPLICATION_JSON.toString(), new JsonOperator());
+        operatorMap.put(MediaType.APPLICATION_JSON.toString(), new JsonOperator(HandlerStrategies.builder().build().messageReaders()));
         operatorMap.put(MediaType.APPLICATION_FORM_URLENCODED.toString(), new FormDataOperator());
         this.paramMappingPlugin = new ParamMappingPlugin(operatorMap);
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/strategy/JsonOperatorTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.reactive.function.server.HandlerStrategies;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -71,7 +72,7 @@ public void setUp() {
         this.paramMappingRuleHandle.setRemoveParameterKeys(remove);
         this.paramMappingRuleHandle.setAddParameterKeys(Collections.singletonList(add));
         this.paramMappingRuleHandle.setReplaceParameterKeys(Collections.singletonList(replace));
-        this.jsonOperator = new JsonOperator();
+        this.jsonOperator = new JsonOperator(HandlerStrategies.builder().build().messageReaders());
         final String body = "{\"name\":\"shenyu\",\"age\":\"18\"}";
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.method(HttpMethod.POST, "localhost")
                 .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).body(body));

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-cryptor/src/test/java/org/apache/shenyu/springboot/starter/plugin/cryptor/CryptorPluginConfigurationTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.codec.support.DefaultServerCodecConfigurer;
 
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
@@ -40,7 +41,7 @@ public class CryptorPluginConfigurationTest {
     @BeforeEach
     public void before() {
         applicationContextRunner = new ApplicationContextRunner()
-            .withConfiguration(AutoConfigurations.of(CryptorPluginConfiguration.class))
+            .withConfiguration(AutoConfigurations.of(CryptorPluginConfiguration.class, DefaultServerCodecConfigurer.class))
             .withBean(CryptorPluginConfigurationTest.class)
             .withPropertyValues(
                 "debug=true",

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-param-mapping/src/test/java/org/apache/shenyu/springboot/starter/plugin/param/mapping/ParamMappingPluginConfigurationTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.codec.support.DefaultServerCodecConfigurer;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -40,7 +41,7 @@ public class ParamMappingPluginConfigurationTest {
     @Test
     public void testParamMappingPlugin() {
         new ApplicationContextRunner()
-            .withConfiguration(AutoConfigurations.of(ParamMappingPluginConfiguration.class))
+            .withConfiguration(AutoConfigurations.of(ParamMappingPluginConfiguration.class, DefaultServerCodecConfigurer.class))
             .withBean(ParamMappingPluginConfigurationTest.class)
             .withPropertyValues("debug=true")
             .run(context -> {
@@ -54,7 +55,7 @@ public void testParamMappingPlugin() {
     @Test
     public void testParamMappingPluginDataHandler() {
         new ApplicationContextRunner()
-            .withConfiguration(AutoConfigurations.of(ParamMappingPluginConfiguration.class))
+            .withConfiguration(AutoConfigurations.of(ParamMappingPluginConfiguration.class, DefaultServerCodecConfigurer.class))
             .withBean(ParamMappingPluginConfigurationTest.class)
             .withPropertyValues("debug=true")
             .run(context -> {

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/common/dto/MotanRpcExt.java
Patch:
@@ -47,6 +47,7 @@ public MotanRpcExt() {
      *
      * @param methodInfo methodInfo
      * @param group group
+     * @param timeout timeout
      */
     public MotanRpcExt(final List<RpcExt> methodInfo, final String group, final Integer timeout) {
         this.methodInfo = methodInfo;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractContextPathRegisterService.java
Patch:
@@ -32,6 +32,7 @@ public void registerContextPath(final MetaDataRegisterDTO dto) {
         String contextPathSelectorId = getSelectorService().registerDefault(dto, PluginEnum.CONTEXT_PATH.getName(), "");
         ContextMappingRuleHandle handle = new ContextMappingRuleHandle();
         handle.setContextPath(PathUtils.decoratorContextPath(dto.getContextPath()));
+        handle.setAddPrefixed(dto.getAddPrefixed());
         getRuleService().registerDefault(buildContextPathDefaultRuleDTO(contextPathSelectorId, dto, handle.toJson()));
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/Constants.java
Patch:
@@ -647,6 +647,8 @@ public interface Constants {
      */
     String DEFAULT_CLUSTER = "failover";
 
+    int PREFIX_FORWARD_ENABLE = 1;
+
     /**
      * String q.
      */

File: shenyu-e2e/shenyu-e2e-case/src/main/java/org/apache/shenyu/e2e/testcase/common/specification/ShenYuAfterEachSpec.java
Patch:
@@ -33,7 +33,6 @@ public class ShenYuAfterEachSpec implements AfterEachSpec {
     
     private final Checker postChecker;
     
-    
     public static final ShenYuAfterEachSpec DEFAULT = new ShenYuAfterEachSpec(Deleter.DEFAULT, Checker.DEFAULT);
     
 }

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/client/admin/model/data/Condition.java
Patch:
@@ -42,7 +42,7 @@ public enum ParamType {
         
         POST("post"),
         
-        METHOD("method"),
+        METHOD("req_method"),
     
         URI("uri"),
         QUERY("query"),

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ShenyuDictDTO.java
Patch:
@@ -76,8 +76,7 @@ public class ShenyuDictDTO implements Serializable {
     /**
      * whether enabled.
      */
-    @NotNull
-    private Boolean enabled;
+    private Boolean enabled = true;
     
     public ShenyuDictDTO() {
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ResourceServiceImpl.java
Patch:
@@ -34,8 +34,10 @@
 import org.apache.shenyu.admin.model.vo.ResourceVO;
 import org.apache.shenyu.admin.service.ResourceService;
 import org.apache.shenyu.admin.service.publish.ResourceEventPublisher;
+import org.apache.shenyu.admin.utils.Assert;
 import org.apache.shenyu.admin.utils.ListUtil;
 import org.apache.shenyu.admin.utils.ResourceUtil;
+import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.enums.AdminResourceEnum;
 
 import java.util.List;
@@ -209,6 +211,7 @@ public List<ResourceVO> findByParentId(final String id) {
      */
     @EventListener(value = PluginCreatedEvent.class)
     public void onPluginCreated(final PluginCreatedEvent event) {
+        Assert.isNull(resourceMapper.nameExisted(event.getPlugin().getName()), AdminConstants.RESOURCE_NAME_IS_EXIST);
         ResourceDO resourceDO = ResourceUtil.buildPluginResource(event.getPlugin().getName());
         this.createOne(resourceDO);
         insertResourceBatch(ResourceUtil.buildPluginDataPermissionResource(resourceDO.getId(), event.getPlugin().getName()));

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/ShenyuServerEndpointerExporter.java
Patch:
@@ -56,12 +56,14 @@ protected ServerContainer getServerContainer() {
         return this.serverContainer;
     }
 
+    @Override
     protected void initServletContext(final ServletContext servletContext) {
         if (this.serverContainer == null) {
             this.serverContainer = (ServerContainer) servletContext.getAttribute("javax.websocket.server.ServerContainer");
         }
     }
 
+    @Override
     protected boolean isContextRequired() {
         return false;
     }
@@ -83,7 +85,7 @@ public void registerEndpoint(final Class<?> pojo) {
             try {
                 configurator = (ServerEndpointConfig.Configurator) annotation.configurator().getConstructor().newInstance();
             } catch (ReflectiveOperationException ex) {
-                LOG.error("ShenyuServerEndpoint configurator init fail! Class name: {}, configurator name: {}", pojo.getClass().getName(), annotation.configurator().getName());
+                LOG.error("ShenyuServerEndpoint configurator init fail! Class name: {}, configurator name: {}", pojo.getName(), annotation.configurator().getName());
                 throw new ShenyuException(ex);
             }
         }

File: shenyu-common/src/test/java/org/apache/shenyu/common/cache/MemorySafeWindowTinyLFUMapTest.java
Patch:
@@ -26,6 +26,7 @@
  * Test cases for MemorySafeWindowTinyLFUMap.
  */
 public class MemorySafeWindowTinyLFUMapTest {
+    
     @Test
     public void testPut() {
         MemorySafeWindowTinyLFUMap<String, String> lru = new MemorySafeWindowTinyLFUMap<>(1 << 10, 16);

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/test/java/org/apache/shenyu/sync/data/nacos/handler/NacosCacheHandlerTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.sync.data.nacos.handler;
 
 import com.alibaba.nacos.api.config.ConfigService;
+import com.alibaba.nacos.api.config.ConfigType;
 import com.alibaba.nacos.api.exception.NacosException;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -462,6 +463,6 @@ private String getConfig(final String dataId) throws NacosException {
     }
 
     private void publishConfig(final String dataId, final Object data) throws NacosException {
-        configService.publishConfig(dataId, GROUP, GsonUtils.getInstance().toJson(data));
+        configService.publishConfig(dataId, GROUP, GsonUtils.getInstance().toJson(data), ConfigType.JSON.getType());
     }
 }

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandle.java
Patch:
@@ -51,6 +51,8 @@ public void handlerRule(final RuleData ruleData) {
             rule.setCount(sentinelHandle.getFlowRuleCount());
             rule.setGrade(sentinelHandle.getFlowRuleGrade());
             rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior());
+            rule.setMaxQueueingTimeMs(sentinelHandle.getFlowRuleMaxQueueingTimeMs());
+            rule.setWarmUpPeriodSec(sentinelHandle.getFlowRuleWarmUpPeriodSec());
             flowRules.add(rule);
         }
         FlowRuleManager.loadRules(flowRules);

File: shenyu-e2e/shenyu-e2e-case/src/main/java/org/apache/shenyu/e2e/testcase/common/function/HttpCheckers.java
Patch:
@@ -37,7 +37,7 @@ public static HttpChecker notExists(Method method, String endpoint) {
                     .log()
                     .ifValidationFails()
                     .body("code", lessThan(0))
-                    .body("message", containsString("Can not find selector, please check your configuration!"));
+                    .body("message", containsString("please check your configuration!"));
         };
     }
     
@@ -52,7 +52,7 @@ public static HttpChecker exists(Method method, String endpoint) {
                     .log()
                     .ifValidationFails()
                     .body("code", nullValue())
-                    .body("message", not(containsString("Can not find selector, please check your configuration!")));
+                    .body("message", not(containsString("please check your configuration!")));
         };
     }
     

File: shenyu-e2e/shenyu-e2e-case/src/test/java/org/apache/shenyu/e2e/testcase/plugin/DividePluginCases.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.e2e.client.admin.model.data.Condition.ParamType;
 import org.apache.shenyu.e2e.engine.scenario.ShenYuScenarioProvider;
 import org.apache.shenyu.e2e.engine.scenario.specification.ScenarioSpec;
+import org.apache.shenyu.e2e.engine.service.NamingResolver;
 import org.apache.shenyu.e2e.testcase.common.specification.ShenYuAfterEachSpec;
 import org.apache.shenyu.e2e.testcase.common.specification.ShenYuBeforeEachSpec;
 import org.apache.shenyu.e2e.testcase.common.specification.ShenYuCaseSpec;
@@ -42,15 +43,15 @@ public class DividePluginCases implements ShenYuScenarioProvider {
     
     @Override
     public List<ScenarioSpec> get() {
-        
+        final String address = NamingResolver.INSTANCE.resolve("httpbin");
         return List.of(
                 ShenYuScenarioSpec.builder()
                         .name("divide-single rule[uri=]")
                         .beforeEachSpec(
                                 ShenYuBeforeEachSpec.builder()
                                         .addSelectorAndRule(
                                                 newSelectorBuilder("httpbin", Plugin.DIVIDE)
-                                                        .handle(newUpstreamsBuilder("34.227.213.82:80"))
+                                                        .handle(newUpstreamsBuilder(address + ":80"))
                                                         .conditionList(newConditions(ParamType.URI, Operator.EQUAL, ANYTHING))
                                                         .build(),
                                                 newRuleBuilder("rule")

File: shenyu-e2e/shenyu-e2e-client/src/main/java/org/apache/shenyu/e2e/matcher/SelectorMatcher.java
Patch:
@@ -21,7 +21,6 @@
 import lombok.SneakyThrows;
 import org.apache.shenyu.e2e.client.admin.model.data.SelectorData;
 import org.apache.shenyu.e2e.client.admin.model.response.SelectorDTO;
-import org.apache.shenyu.e2e.common.IdManagers.Plugins;
 import org.skyscreamer.jsonassert.JSONAssert;
 import org.skyscreamer.jsonassert.JSONCompareMode;
 

File: shenyu-e2e/shenyu-e2e-client/src/test/java/org/apache/shenyu/e2e/client/admin/AdminClientTest.java
Patch:
@@ -57,7 +57,7 @@
 public class AdminClientTest {
     static AdminClient client;
     
-    static GenericContainer<?> container = new GenericContainer<>("ghcr.io/apache/incubator-shenyu/admin:782867187a76f8a273ccc8029e53e3db3f23eb6b")
+    static GenericContainer<?> container = new GenericContainer<>("ghcr.io/apache/shenyu/admin:latest")
             .withExposedPorts(9095)
             .withLogConsumer(new Slf4jLogConsumer(log));
     

File: shenyu-e2e/shenyu-e2e-engine/src/main/java/org/apache/shenyu/e2e/engine/service/docker/ShenYuLogConsumer.java
Patch:
@@ -23,8 +23,9 @@
 @Slf4j(topic = "docker-compose")
 public class ShenYuLogConsumer extends Slf4jLogConsumer {
     
-    public ShenYuLogConsumer() {
+    public ShenYuLogConsumer(String serviceName) {
         super(log);
+        withPrefix("service_name:" + serviceName);
     }
     
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/fallback/FallbackHandler.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
+import org.springframework.web.client.HttpStatusCodeException;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -50,7 +51,8 @@ public interface FallbackHandler {
      * @return Mono
      */
     default Mono<Void> fallback(ServerWebExchange exchange, URI uri, Throwable t) {
-        if (Objects.isNull(uri)) {
+        // client HttpStatusCodeException, return the client response directly
+        if (t instanceof HttpStatusCodeException || Objects.isNull(uri)) {
             return withoutFallback(exchange, t);
         }
 

File: shenyu-plugin/shenyu-plugin-metrics/src/main/java/org/apache/shenyu/plugin/metrics/prometheus/PrometheusMetricsService.java
Patch:
@@ -55,7 +55,7 @@ public void start(final MetricsConfig metricsConfig, final MetricsRegister metri
     @Override
     public void stop() {
         Optional.ofNullable(server).ifPresent(server -> {
-            server.stop();
+            server.close();
             registered.set(false);
             CollectorRegistry.defaultRegistry.clear();
         });

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ResourceController.java
Patch:
@@ -108,7 +108,7 @@ public ShenyuAdminResult getMenuTree() {
      * @return {@linkplain ShenyuAdminResult}
      */
     @GetMapping("/button")
-    @RequiresPermissions("system:resource:addButton")
+    @RequiresPermissions(value = {"system:resource:addButton", "system:resource:list"}, logical = Logical.OR)
     public ShenyuAdminResult getButton(final String id) {
         List<ResourceVO> resourceVOList = resourceService.findByParentId(id);
         if (CollectionUtils.isNotEmpty(resourceVOList)) {
@@ -124,7 +124,7 @@ public ShenyuAdminResult getButton(final String id) {
      * @return {@linkplain ShenyuAdminResult}
      */
     @GetMapping("/{id}")
-    @RequiresPermissions(value = {"system:resource:editButton", "system:resource:editMenu"}, logical = Logical.OR)
+    @RequiresPermissions(value = {"system:resource:list", "system:resource:editMenu", "system:resource:list"}, logical = Logical.OR)
     public ShenyuAdminResult detailResource(@PathVariable("id") final String id) {
         return Optional.ofNullable(resourceService.findById(id))
                 .map(item -> ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, item))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -17,13 +17,15 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.model.custom.UserInfo;
 import org.apache.shenyu.admin.model.dto.DashboardUserDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
 import org.apache.shenyu.admin.model.vo.DashboardUserEditVO;
 import org.apache.shenyu.admin.model.vo.DashboardUserVO;
 import org.apache.shenyu.admin.model.vo.RoleVO;
 import org.apache.shenyu.admin.service.DashboardUserService;
+import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.assertj.core.util.Lists;
@@ -152,6 +154,7 @@ public void updateDashboardUser() throws Exception {
     public void deleteDashboardUser() throws Exception {
         final String url = "/dashboardUser/batch";
         final List<String> ids = Lists.newArrayList();
+        SessionUtil.setLocalVisitor(UserInfo.builder().userId("1").userName("admin").build());
         given(dashboardUserService.delete(any())).willReturn(0);
         mockMvc.perform(delete(url, ids)
                 .content(GsonUtils.getInstance().toJson(ids))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DashboardUserServiceTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.admin.mapper.DashboardUserMapper;
 import org.apache.shenyu.admin.mapper.RoleMapper;
 import org.apache.shenyu.admin.mapper.UserRoleMapper;
+import org.apache.shenyu.admin.model.custom.UserInfo;
 import org.apache.shenyu.admin.model.dto.DashboardUserDTO;
 import org.apache.shenyu.admin.model.dto.RoleDTO;
 import org.apache.shenyu.admin.model.entity.DashboardUserDO;
@@ -34,6 +35,7 @@
 import org.apache.shenyu.admin.service.impl.DashboardUserServiceImpl;
 import org.apache.shenyu.admin.service.publish.UserEventPublisher;
 import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.common.utils.ShaUtils;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -95,6 +97,7 @@ public final class DashboardUserServiceTest {
     
     @Test
     public void testCreateOrUpdate() {
+        SessionUtil.setLocalVisitor(UserInfo.builder().userId("1").userName("admin").build());
         DashboardUserDTO dashboardUserDTO = DashboardUserDTO.builder()
                 .userName(TEST_USER_NAME).password(TEST_PASSWORD).roles(Collections.singletonList("1"))
                 .build();

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MatchDataCache.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.base.cache;
 
 import com.google.common.collect.Maps;
-import org.apache.shenyu.common.cache.MemorySafeLRUMap;
+import org.apache.shenyu.common.cache.MemorySafeWindowTinyLFUMap;
 import org.apache.shenyu.common.dto.SelectorData;
 
 import java.util.Map;
@@ -74,7 +74,7 @@ public void cleanSelectorData() {
      * @param maxMemory    the max memory
      */
     public void cacheSelectorData(final String path, final SelectorData selectorData, final Integer maxMemory) {
-        SELECTOR_DATA_MAP.computeIfAbsent(selectorData.getPluginName(), map -> new MemorySafeLRUMap<>(maxMemory, 1 << 16)).put(path, selectorData);
+        SELECTOR_DATA_MAP.computeIfAbsent(selectorData.getPluginName(), map -> new MemorySafeWindowTinyLFUMap<>(maxMemory, 1 << 16)).put(path, selectorData);
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/MetaDataCache.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.base.cache;
 
 import com.google.common.collect.Maps;
-import org.apache.shenyu.common.cache.MemorySafeLRUMap;
+import org.apache.shenyu.common.cache.MemorySafeWindowTinyLFUMap;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.utils.PathMatchUtils;
@@ -45,7 +45,7 @@ public final class MetaDataCache {
      */
     private static final ConcurrentMap<String, MetaData> META_DATA_MAP = Maps.newConcurrentMap();
 
-    private static final MemorySafeLRUMap<String, MetaData> CACHE = new MemorySafeLRUMap<>(Constants.THE_256_MB, 1 << 16);
+    private static final MemorySafeWindowTinyLFUMap<String, MetaData> CACHE = new MemorySafeWindowTinyLFUMap<>(Constants.THE_256_MB, 1 << 16);
 
     /**
      * pathPattern -> path.

File: shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/SentinelPluginTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
-import org.springframework.web.client.HttpStatusCodeException;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -212,8 +211,7 @@ public void testSentinelPluginNotHttpStatusOK() {
 
         Mono mono = Mono.empty().doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS));
         when(chain.execute(exchange)).thenReturn(mono);
-        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data))
-                .expectError(HttpStatusCodeException.class).verify();
+        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data)).expectComplete().verify();
 
         // remove rule
         sentinelRuleHandle.removeRule(data);

File: shenyu-spi/src/test/java/org/apache/shenyu/spi/fixture/ArrayListSPI.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * ArrayListSpi .
  */
-@Join(order = 1)
+@Join(order = 1, isSingleton = false)
 public class ArrayListSPI implements ListSPI {
     /**
      * Gets list.

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtils.java
Patch:
@@ -36,6 +36,6 @@ public enum CacheKeyUtils {
      * @return string string
      */
     public String getKey(final RuleData ruleData) {
-        return ruleData.getSelectorId() + "_" + ruleData.getName();
+        return String.join("_", ruleData.getSelectorId(), ruleData.getId());
     }
 }

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtilsTest.java
Patch:
@@ -33,7 +33,7 @@ public final class CacheKeyUtilsTest {
 
     @Test
     public void getKey() {
-        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).name(MOCK_NAME).build();
+        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).id(MOCK_NAME).build();
         assert MOCK_CACHE_KEY_UTILS_GET_KEY_RESULT.equals(CacheKeyUtils.INST.getKey(ruleData));
     }
 }

File: shenyu-plugin/shenyu-plugin-general-context/src/test/java/org/apache/shenyu/plugin/general/context/handler/GeneralContextPluginHandlerTest.java
Patch:
@@ -60,7 +60,7 @@ public void testRemoveRule() {
         this.generalContextPluginDataHandler.handlerRule(this.ruleData);
         RuleData ruleData = new RuleData();
         ruleData.setSelectorId("test");
-        ruleData.setName("test");
+        ruleData.setId("test");
         this.generalContextPluginDataHandler.removeRule(this.ruleData);
         assertNull(GeneralContextPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(this.ruleData)));
         this.generalContextPluginDataHandler.removeRule(ruleData);

File: shenyu-plugin/shenyu-plugin-request/src/test/java/org/apache/shenyu/plugin/request/handler/RequestPluginHandlerTest.java
Patch:
@@ -63,7 +63,7 @@ public void testRemoveRule() {
         this.requestPluginHandler.handlerRule(this.ruleData);
         RuleData ruleData = new RuleData();
         ruleData.setSelectorId("test");
-        ruleData.setName("test");
+        ruleData.setId("test");
         this.requestPluginHandler.removeRule(this.ruleData);
         assertNull(RequestPluginHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(this.ruleData)));
         this.requestPluginHandler.removeRule(ruleData);

File: shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/Resilience4JPluginTest.java
Patch:
@@ -133,7 +133,7 @@ public void circuitBreakerTest() {
         when(data.getHandle()).thenReturn(HANDLER);
         when(chain.execute(exchange)).thenReturn(mono);
         when(data.getSelectorId()).thenReturn("circuitBreaker");
-        when(data.getName()).thenReturn("ruleData");
+        when(data.getId()).thenReturn("ruleData");
         Resilience4JHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(data), resilience4JHandle);
         SelectorData selectorData = mock(SelectorData.class);
         StepVerifier.create(resilience4JPlugin.doExecute(exchange, chain, selectorData, data))

File: shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/handler/Resilience4JHandlerTest.java
Patch:
@@ -38,7 +38,7 @@ public final class Resilience4JHandlerTest {
     public void testHandlerRule() {
         ruleData.setSelectorId("1");
         ruleData.setHandle("{\"urlPath\":\"test\"}");
-        ruleData.setName("test");
+        ruleData.setId("test");
         resilience4JHandler.handlerRule(ruleData);
         Supplier<CommonHandleCache<String, Resilience4JHandle>> cache = resilience4JHandler.CACHED_HANDLE;
         Assertions.assertNotNull(cache.get().obtainHandle("1_test"));
@@ -48,7 +48,7 @@ public void testHandlerRule() {
     public void testRemoveRule() {
         ruleData.setSelectorId("1");
         ruleData.setHandle("{\"urlPath\":\"test\"}");
-        ruleData.setName("test");
+        ruleData.setId("test");
         Supplier<CommonHandleCache<String, Resilience4JHandle>> cache = resilience4JHandler.CACHED_HANDLE;
         cache.get().cachedHandle("1_test", new Resilience4JHandle());
         Assertions.assertNotNull(cache.get().obtainHandle("1_test"));

File: shenyu-plugin/shenyu-plugin-rewrite/src/test/java/org/apache/shenyu/plugin/rewrite/handler/RewritePluginDataHandlerTest.java
Patch:
@@ -38,7 +38,7 @@ public final class RewritePluginDataHandlerTest {
     public void testHandlerRule() {
         ruleData.setSelectorId("1");
         ruleData.setHandle("{\"urlPath\":\"test\"}");
-        ruleData.setName("test");
+        ruleData.setId("test");
         rewritePluginDataHandler.handlerRule(ruleData);
         Supplier<CommonHandleCache<String, RewriteHandle>> cache = rewritePluginDataHandler.CACHED_HANDLE;
         Assertions.assertNotNull(cache.get().obtainHandle("1_test"));
@@ -48,7 +48,7 @@ public void testHandlerRule() {
     public void testRemoveRule() {
         ruleData.setSelectorId("1");
         ruleData.setHandle("{\"urlPath\":\"test\"}");
-        ruleData.setName("test");
+        ruleData.setId("test");
         Supplier<CommonHandleCache<String, RewriteHandle>> cache = rewritePluginDataHandler.CACHED_HANDLE;
         cache.get().cachedHandle("1_test", new RewriteHandle());
         Assertions.assertNotNull(cache.get().obtainHandle("1_test"));

File: shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandleTest.java
Patch:
@@ -54,7 +54,7 @@ public void pluginNamedTest() {
     public void removeRule() {
         RuleData data = new RuleData();
         data.setSelectorId("sentinel");
-        data.setName("removeRule");
+        data.setId("removeRule");
         SentinelHandle sentinelHandle = new SentinelHandle();
         sentinelHandle.setFlowRuleCount(10);
         sentinelHandle.setFlowRuleGrade(0);

File: shenyu-plugin/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/handler/SpringCloudPluginDataHandlerTest.java
Patch:
@@ -97,7 +97,7 @@ public void testRemoveSelector() throws NoSuchFieldException, IllegalAccessExcep
     public void testHandlerRule() {
         ruleData.setSelectorId("1");
         ruleData.setHandle("{\"urlPath\":\"test\"}");
-        ruleData.setName("test");
+        ruleData.setId("test");
         springCloudPluginDataHandler.handlerRule(ruleData);
         Supplier<CommonHandleCache<String, SpringCloudRuleHandle>> cache = SpringCloudPluginDataHandler.RULE_CACHED;
         Assertions.assertNotEquals(cache.get().obtainHandle("1_test"), null);
@@ -107,12 +107,12 @@ public void testHandlerRule() {
     public void testRemoveRule() {
         ruleData.setSelectorId("1");
         ruleData.setHandle("{\"urlPath\":\"test\"}");
-        ruleData.setName("test");
+        ruleData.setId("test");
         Supplier<CommonHandleCache<String, SpringCloudRuleHandle>> cache = SpringCloudPluginDataHandler.RULE_CACHED;
         cache.get().cachedHandle("1_test", new SpringCloudRuleHandle());
         Assertions.assertNotEquals(cache.get().obtainHandle("1_test"), null);
         springCloudPluginDataHandler.removeRule(ruleData);
-        Assertions.assertEquals(cache.get().obtainHandle("1_test"), null);
+        Assertions.assertNull(cache.get().obtainHandle("1_test"));
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-websocket/src/test/java/org/apache/shenyu/plugin/websocket/handler/WebSocketPluginDataHandlerTest.java
Patch:
@@ -58,7 +58,7 @@ public void setUp() {
         selectorData.setId("1");
         ruleData.setSelectorId("1");
         ruleData.setHandle("{\"urlPath\":\"test\"}");
-        ruleData.setName("test");
+        ruleData.setId("test");
     }
 
     @Test

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/ShenyuRequest.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.shenyu.sdk.core;
 
+import org.apache.shenyu.sdk.core.common.RequestTemplate;
+
 import java.io.Serializable;
 import java.util.Collection;
 import java.util.Map;

File: shenyu-sdk/shenyu-sdk-core/src/main/java/org/apache/shenyu/sdk/core/http/ShenyuHttpClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.sdk.http.api;
+package org.apache.shenyu.sdk.core.http;
 
 import org.apache.shenyu.sdk.core.ShenyuRequest;
 import org.apache.shenyu.sdk.core.ShenyuResponse;

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/spi/HashLoadBalanceTest.java
Patch:
@@ -129,8 +129,8 @@ public void onlyOneListTest() {
                 .weight(1)
                 .build()), 1);
         Assertions.assertEquals(hashLoadBalance.getWeight(Upstream.builder()
-                .timestamp(System.currentTimeMillis() - 3L)
-                .warmup(4)
+                .timestamp(System.currentTimeMillis() - 3000L)
+                .warmup(4000)
                 .weight(4)
                 .build()), 3);
         Assertions.assertEquals(hashLoadBalance.getWeight(Upstream.builder()

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/collector/AliyunSlsLogCollector.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shenyu.plugin.aliyun.sls.collector;
 
+import org.apache.shenyu.plugin.aliyun.sls.client.AliyunSlsLogCollectClient;
 import org.apache.shenyu.plugin.aliyun.sls.handler.LoggingAliyunSlsPluginDataHandler;
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 
 /**
  * aliyun sls log collector，depend a LogConsumeClient for consume logs.
  */
-public class AliyunSlsLogCollector extends AbstractLogCollector {
+public class AliyunSlsLogCollector extends AbstractLogCollector<AliyunSlsLogCollectClient> {
 
     private static final LogCollector INSTANCE = new AliyunSlsLogCollector();
 
@@ -39,7 +39,7 @@ public static LogCollector getInstance() {
     }
 
     @Override
-    protected LogConsumeClient getLogConsumeClient() {
+    protected AliyunSlsLogCollectClient getLogConsumeClient() {
         return LoggingAliyunSlsPluginDataHandler.getAliyunSlsLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/client/ClickHouseLogCollectClient.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.shenyu.plugin.logging.clickhouse.constant.ClickHouseLoggingConstant;
 import org.apache.shenyu.plugin.logging.common.client.AbstractLogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.springframework.lang.NonNull;
 
 import java.util.List;
 import java.util.Objects;
@@ -49,7 +50,7 @@ public class ClickHouseLogCollectClient extends AbstractLogConsumeClient<ClickHo
     private ClickHouseNode endpoint;
 
     @Override
-    public void consume0(final List<ShenyuRequestLog> logs) throws Exception {
+    public void consume0(@NonNull final List<ShenyuRequestLog> logs) throws Exception {
         if (CollectionUtils.isNotEmpty(logs)) {
             Object[][] datas = new Object[logs.size()][];
             for (int i = 0; i < logs.size(); i++) {
@@ -115,7 +116,7 @@ public void close0() {
      * @param config properties.
      */
     @Override
-    public void initClient0(final ClickHouseLogCollectConfig.ClickHouseLogConfig config) {
+    public void initClient0(@NonNull final ClickHouseLogCollectConfig.ClickHouseLogConfig config) {
         final String username = config.getUsername();
         final String password = config.getPassword();
         endpoint = ClickHouseNode.builder()

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/collector/ClickHouseLogCollector.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shenyu.plugin.logging.clickhouse.collector;
 
+import org.apache.shenyu.plugin.logging.clickhouse.client.ClickHouseLogCollectClient;
 import org.apache.shenyu.plugin.logging.clickhouse.handler.LoggingClickHousePluginDataHandler;
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 
-public class ClickHouseLogCollector extends AbstractLogCollector {
+public class ClickHouseLogCollector extends AbstractLogCollector<ClickHouseLogCollectClient> {
 
     private static final LogCollector INSTANCE = new ClickHouseLogCollector();
 
@@ -36,7 +36,7 @@ public static LogCollector getInstance() {
     }
     
     @Override
-    protected LogConsumeClient getLogConsumeClient() {
+    protected ClickHouseLogCollectClient getLogConsumeClient() {
         return LoggingClickHousePluginDataHandler.getClickHouseLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/handler/LoggingClickHousePluginDataHandler.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shenyu.plugin.logging.clickhouse.client.ClickHouseLogCollectClient;
 import org.apache.shenyu.plugin.logging.clickhouse.collector.ClickHouseLogCollector;
 import org.apache.shenyu.plugin.logging.clickhouse.config.ClickHouseLogCollectConfig;
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.common.config.GenericApiConfig;
 import org.apache.shenyu.plugin.logging.common.handler.AbstractLogPluginDataHandler;
@@ -62,7 +61,7 @@ public String pluginNamed() {
      *
      * @return LogConsumeClient
      */
-    public static LogConsumeClient getClickHouseLogCollectClient() {
+    public static ClickHouseLogCollectClient getClickHouseLogCollectClient() {
         return CLICK_HOUSE_LOG_COLLECT_CLIENT;
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/ElasticSearchLogCollector.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shenyu.plugin.logging.elasticsearch.collector;
 
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
+import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
 import org.apache.shenyu.plugin.logging.elasticsearch.handler.LoggingElasticSearchPluginDataHandler;
 
 /**
  * elastic search log collector，depend a LogConsumeClient for consume logs.
  */
-public class ElasticSearchLogCollector extends AbstractLogCollector {
+public class ElasticSearchLogCollector extends AbstractLogCollector<ElasticSearchLogCollectClient> {
 
     private static final LogCollector INSTANCE = new ElasticSearchLogCollector();
 
@@ -39,7 +39,7 @@ public static LogCollector getInstance() {
     }
 
     @Override
-    protected LogConsumeClient getLogConsumeClient() {
+    protected ElasticSearchLogCollectClient getLogConsumeClient() {
         return LoggingElasticSearchPluginDataHandler.getElasticSearchLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/collector/KafkaLogCollector.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shenyu.plugin.logging.kafka.collector;
 
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
+import org.apache.shenyu.plugin.logging.kafka.client.KafkaLogCollectClient;
 import org.apache.shenyu.plugin.logging.kafka.handler.LoggingKafkaPluginDataHandler;
 
 /**
  * kafka log collector，depend a LogConsumeClient for consume logs.
  */
-public class KafkaLogCollector extends AbstractLogCollector {
+public class KafkaLogCollector extends AbstractLogCollector<KafkaLogCollectClient> {
 
     private static final LogCollector INSTANCE = new KafkaLogCollector();
 
@@ -39,7 +39,7 @@ public static LogCollector getInstance() {
     }
 
     @Override
-    protected LogConsumeClient getLogConsumeClient() {
+    protected KafkaLogCollectClient getLogConsumeClient() {
         return LoggingKafkaPluginDataHandler.getKafkaLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/main/java/org/apache/shenyu/plugin/logging/pulsar/collector/PulsarLogCollector.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shenyu.plugin.logging.pulsar.collector;
 
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
+import org.apache.shenyu.plugin.logging.pulsar.client.PulsarLogCollectClient;
 import org.apache.shenyu.plugin.logging.pulsar.handler.LoggingPulsarPluginDataHandler;
 
-public class PulsarLogCollector extends AbstractLogCollector {
+public class PulsarLogCollector extends AbstractLogCollector<PulsarLogCollectClient> {
 
     private static final LogCollector INSTANCE = new PulsarLogCollector();
 
@@ -36,7 +36,7 @@ public static LogCollector getInstance() {
     }
     
     @Override
-    protected LogConsumeClient getLogConsumeClient() {
+    protected PulsarLogCollectClient getLogConsumeClient() {
         return LoggingPulsarPluginDataHandler.getPulsarLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/collector/RocketMQLogCollector.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shenyu.plugin.logging.rocketmq.collector;
 
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
+import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.apache.shenyu.plugin.logging.rocketmq.handler.LoggingRocketMQPluginDataHandler;
 
 /**
  * default log collector，depend a LogConsumeClient for consume logs.
  */
-public class RocketMQLogCollector extends AbstractLogCollector {
+public class RocketMQLogCollector extends AbstractLogCollector<RocketMQLogCollectClient> {
 
     private static final LogCollector INSTANCE = new RocketMQLogCollector();
 
@@ -39,7 +39,7 @@ public static LogCollector getInstance() {
     }
 
     @Override
-    protected LogConsumeClient getLogConsumeClient() {
+    protected RocketMQLogCollectClient getLogConsumeClient() {
         return LoggingRocketMQPluginDataHandler.getRocketMqLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/main/java/org/apache/shenyu/plugin/tencent/cls/collector/TencentClsSlsLogCollector.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shenyu.plugin.tencent.cls.collector;
 
-import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
+import org.apache.shenyu.plugin.tencent.cls.client.TencentClsLogCollectClient;
 import org.apache.shenyu.plugin.tencent.cls.handler.LoggingTencentClsPluginDataHandler;
 
 /**
  * Tencent cls log collector，depend a LogConsumeClient for consume logs.
  */
-public class TencentClsSlsLogCollector extends AbstractLogCollector {
+public class TencentClsSlsLogCollector extends AbstractLogCollector<TencentClsLogCollectClient> {
 
     private static final LogCollector INSTANCE = new TencentClsSlsLogCollector();
 
@@ -39,7 +39,7 @@ public static LogCollector getInstance() {
     }
 
     @Override
-    protected LogConsumeClient getLogConsumeClient() {
+    protected TencentClsLogCollectClient getLogConsumeClient() {
         return LoggingTencentClsPluginDataHandler.getTencentClsLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/handler/LoggingKafkaPluginDataHandler.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.plugin.logging.kafka.collector.KafkaLogCollector;
 import org.apache.shenyu.plugin.logging.kafka.config.KafkaLogCollectConfig;
 
+
 /**
  * The type logging kafka plugin data handler.
  */

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/LoggingAliyunSlsPluginTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
-        Mono<Void> result = loggingAliYunSlsPlugin.doLogExecute(exchange, chain, selectorData, ruleData, request, requestLog);
+        Mono<Void> result = loggingAliYunSlsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/config/ClickHouseLogCollectConfig.java
Patch:
@@ -17,9 +17,10 @@
 
 package org.apache.shenyu.plugin.logging.clickhouse.config;
 
-import java.util.Optional;
 import org.apache.shenyu.plugin.logging.common.config.GenericGlobalConfig;
 
+import java.util.Optional;
+
 /**
  * ClickHouseLogCollectConfig.
  */

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/test/java/org/apache/shenyu/plugin/logging/clickhouse/LoggingClickHousePluginTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
-        Mono<Void> result = loggingClickHousePlugin.doLogExecute(exchange, chain, selectorData, ruleData, request, requestLog);
+        Mono<Void> result = loggingClickHousePlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/sampler/CountSampler.java
Patch:
@@ -37,6 +37,7 @@ public class CountSampler implements Sampler {
 
     /**
      * Fills a bitset with decisions according to the supplied probability.
+     * @param probability probability
      */
     public CountSampler(final float probability) {
         counter = new AtomicInteger();

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/LoggingElasticSearchPluginTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
-        Mono<Void> result = loggingElasticSearchPlugin.doLogExecute(exchange, chain, selectorData, ruleData, request, requestLog);
+        Mono<Void> result = loggingElasticSearchPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/LoggingKafkaPluginTest.java
Patch:
@@ -89,7 +89,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
-        Mono<Void> result = loggingKafkaPlugin.doLogExecute(exchange, chain, selectorData, ruleData, request, requestLog);
+        Mono<Void> result = loggingKafkaPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/test/java/org/apache/shenyu/plugin/logging/pulsar/LoggingPulsarPluginTest.java
Patch:
@@ -87,7 +87,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
-        Mono<Void> result = loggingPulsarPlugin.doLogExecute(exchange, chain, selectorData, ruleData, request, requestLog);
+        Mono<Void> result = loggingPulsarPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-pulsar/src/test/java/org/apache/shenyu/plugin/logging/pulsar/client/PulsarLogCollectClientTest.java
Patch:
@@ -61,7 +61,7 @@ public void testConsume() {
         } catch (Exception e) {
             msg = "false";
         }
-        Assertions.assertEquals(msg, "");
+        Assertions.assertEquals(msg, "false");
         pulsarLogCollectClient.close();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/LoggingRocketMQPluginTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
-        Mono<Void> result = loggingRocketMQPlugin.doLogExecute(exchange, chain, selectorData, ruleData, request, requestLog);
+        Mono<Void> result = loggingRocketMQPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/main/java/org/apache/shenyu/plugin/tencent/cls/collector/TencentClsSlsLogCollector.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.plugin.tencent.cls.collector;
 
-import org.apache.shenyu.plugin.tencent.cls.handler.LoggingTencentClsPluginDataHandler;
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
+import org.apache.shenyu.plugin.tencent.cls.handler.LoggingTencentClsPluginDataHandler;
 
 /**
  * Tencent cls log collector，depend a LogConsumeClient for consume logs.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-tencent-cls/src/test/java/org/apache/shenyu/plugin/tencent/cls/LoggingTencentClsPluginTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUp() {
     @Test
     public void testDoExecute() {
         Mockito.when(chain.execute(ArgumentMatchers.any())).thenReturn(Mono.empty());
-        Mono<Void> result = loggingTencentClsPlugin.doLogExecute(exchange, chain, selectorData, ruleData, request, requestLog);
+        Mono<Void> result = loggingTencentClsPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/collector/AbstractLogCollector.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.common.concurrent.ShenyuThreadPoolExecutor;
 import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.constant.Constants;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.common.utils.ThreadUtils;
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
@@ -32,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingDeque;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -53,12 +55,11 @@ public abstract class AbstractLogCollector implements LogCollector {
 
     private final AtomicBoolean started = new AtomicBoolean(true);
 
-    private final ShenyuConfig config = new ShenyuConfig();
-
     @Override
     public void start() {
         bufferSize = LogCollectConfigUtils.getGenericGlobalConfig().getBufferQueueSize();
         bufferQueue = new LinkedBlockingDeque<>(bufferSize);
+        ShenyuConfig config = Optional.ofNullable(Singleton.INST.get(ShenyuConfig.class)).orElse(new ShenyuConfig());
         final ShenyuConfig.SharedPool sharedPool = config.getSharedPool();
         ShenyuThreadPoolExecutor threadExecutor = new ShenyuThreadPoolExecutor(sharedPool.getCorePoolSize(),
                 sharedPool.getMaximumPoolSize(), sharedPool.getKeepAliveTime(), TimeUnit.MILLISECONDS,

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java
Patch:
@@ -85,7 +85,7 @@ public void setup() {
     public void doExecuteAllowedTest() {
         doExecutePreInit();
         when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(
-                Mono.just(new RateLimiterResponse(true, 1)));
+                Mono.just(new RateLimiterResponse(true, 1, null)));
         Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
     }
@@ -97,7 +97,7 @@ public void doExecuteAllowedTest() {
     public void doExecuteNotAllowedTest() {
         doExecutePreInit();
         when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(
-                Mono.just(new RateLimiterResponse(false, 1)));
+                Mono.just(new RateLimiterResponse(false, 1, null)));
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
         SpringBeanUtils.getInstance().setApplicationContext(context);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/DivideSelectorHandleConverter.java
Patch:
@@ -52,7 +52,7 @@ public String pluginName() {
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
         List<DivideUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
-        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+        aliveList.stream().filter(alive -> existList.stream().noneMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
                 .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveDivideUpstream(alive.getProtocol(), alive.getUpstreamUrl())));
         return existList;
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/DubboSelectorHandleConverter.java
Patch:
@@ -45,7 +45,7 @@ public String pluginName() {
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
         List<DubboUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
-        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+        aliveList.stream().filter(alive -> existList.stream().noneMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
                 .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveDubboUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         return existList;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/GrpcSelectorHandleConverter.java
Patch:
@@ -45,7 +45,7 @@ public String pluginName() {
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
         List<GrpcUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
-        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+        aliveList.stream().filter(alive -> existList.stream().noneMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
                 .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveGrpcUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         return existList;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/SpringCloudSelectorHandleConverter.java
Patch:
@@ -47,7 +47,7 @@ public String pluginName() {
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
         SpringCloudSelectorHandle selectorHandle = convert(handle);
         List<DivideUpstream> existList = updateStatusAndFilter(selectorHandle.getDivideUpstreams(), aliveList);
-        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+        aliveList.stream().filter(alive -> existList.stream().noneMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
                 .forEach(alive -> existList.add(CommonUpstreamUtils.buildDefaultAliveDivideUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         selectorHandle.setDivideUpstreams(existList);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/TarsSelectorHandleConverter.java
Patch:
@@ -52,7 +52,7 @@ public String pluginName() {
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
         List<TarsUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
-        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+        aliveList.stream().filter(alive -> existList.stream().noneMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
                 .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveTarsUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         return existList;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImplTest.java
Patch:
@@ -139,7 +139,7 @@ public void testBuildHandle() {
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 
         list.clear();
-        list.add(URIRegisterDTO.builder().protocol("http://").appName("test1").rpcType(RpcTypeEnum.HTTP.getName()).host(LOCALHOST).port(8091).eventType(EventType.DELETED).build());
+        list.add(URIRegisterDTO.builder().protocol("http://").appName("test1").rpcType(RpcTypeEnum.HTTP.getName()).host(LOCALHOST).port(8091)/*.eventType(EventType.DELETED)*/.build());
         doReturn(false).when(shenyuClientRegisterDivideService).doSubmit(any(), any());
         selectorDO = mock(SelectorDO.class);
         when(selectorDO.getHandle()).thenReturn(returnStr);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImplTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
-import org.apache.shenyu.register.common.enums.EventType;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -147,7 +146,7 @@ public void testBuildHandle() {
                 .noneMatch(url -> url.equals(r.getUpstreamUrl()))).allMatch(r -> !r.isStatus()), true);
 
         list.clear();
-        list.add(URIRegisterDTO.builder().protocol("http://").appName("test1").rpcType(RpcTypeEnum.DUBBO.getName()).host(LOCALHOST).port(8090).eventType(EventType.DELETED).build());
+        list.add(URIRegisterDTO.builder().protocol("http://").appName("test1").rpcType(RpcTypeEnum.DUBBO.getName()).host(LOCALHOST).port(8090)/*.eventType(EventType.DELETED)*/.build());
         doReturn(false).when(shenyuClientRegisterDubboService).doSubmit(any(), any());
         selectorDO = mock(SelectorDO.class);
         when(selectorDO.getHandle()).thenReturn(returnStr);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-clickhouse/src/main/java/org/apache/shenyu/plugin/logging/clickhouse/config/ClickHouseLogCollectConfig.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.logging.clickhouse.config;
 
 import java.util.Optional;
+import org.apache.shenyu.plugin.logging.common.config.GenericGlobalConfig;
 
 /**
  * ClickHouseLogCollectConfig.
@@ -49,7 +50,7 @@ public void setClickHouseLogConfig(final ClickHouseLogConfig clickHouseLogConfig
     /**
      * click house log config.
      */
-    public static class ClickHouseLogConfig {
+    public static class ClickHouseLogConfig extends GenericGlobalConfig {
         private String host;
 
         private String port;

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/AbortPolicy.java
Patch:
@@ -17,14 +17,16 @@
 
 package org.apache.shenyu.common.concurrent;
 
+import java.util.Queue;
+
 /**
  * A handler for rejected element that throws a
  * {@code RejectException}.
  */
 public class AbortPolicy<E> implements Rejector<E> {
 
     @Override
-    public void reject(final E e, final MemorySafeLinkedBlockingQueue<E> queue) {
+    public void reject(final E e, final Queue<E> queue) {
         throw new RejectException("no more memory can be used !");
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/DiscardOldestPolicy.java
Patch:
@@ -17,13 +17,15 @@
 
 package org.apache.shenyu.common.concurrent;
 
+import java.util.Queue;
+
 /**
  * A handler for rejected element that discards the oldest element.
  */
 public class DiscardOldestPolicy<E> implements Rejector<E> {
 
     @Override
-    public void reject(final E e, final MemorySafeLinkedBlockingQueue<E> queue) {
+    public void reject(final E e, final Queue<E> queue) {
         queue.poll();
         queue.offer(e);
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/DiscardPolicy.java
Patch:
@@ -17,14 +17,16 @@
 
 package org.apache.shenyu.common.concurrent;
 
+import java.util.Queue;
+
 /**
  * A handler for rejected element that silently discards the
  * rejected element.
  */
 public class DiscardPolicy<E> implements Rejector<E> {
 
     @Override
-    public void reject(final E e, final MemorySafeLinkedBlockingQueue<E> queue) {
+    public void reject(final E e, final Queue<E> queue) {
 
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/Rejector.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.shenyu.common.concurrent;
 
+import java.util.Queue;
+
 /**
  * RejectHandler, it works when you need to custom reject action in
  * {@link org.apache.shenyu.common.concurrent.MemorySafeLinkedBlockingQueue}.
@@ -39,5 +41,5 @@ public interface Rejector<E> {
      * @param queue the queue attempting to add this element
      * @throws RejectException if there is no more memory
      */
-    void reject(E e, MemorySafeLinkedBlockingQueue<E> queue);
+    void reject(E e, Queue<E> queue);
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/HttpSyncPropertiesTest.java
Patch:
@@ -29,6 +29,7 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.comparesEqualTo;
+import static org.junit.Assert.assertEquals;
 
 /**
  * Test cases for HttpSyncProperties.
@@ -40,7 +41,9 @@ public final class HttpSyncPropertiesTest extends AbstractConfigurationTest {
     public void testDefault() {
         load(HttpSyncPropertiesConfiguration.class);
         HttpSyncProperties httpSyncProperties = getContext().getBean(HttpSyncProperties.class);
+        httpSyncProperties.setNotifyBatchSize(0);
         assertThat(httpSyncProperties.isEnabled(), comparesEqualTo(true));
+        assertEquals(httpSyncProperties.getNotifyBatchSize(), 0);
         assertThat(httpSyncProperties.getRefreshInterval(), comparesEqualTo(Duration.ofMinutes(5)));
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/SecretPropertiesTest.java
Patch:
@@ -42,9 +42,11 @@ public void testSecretPropertiesAssignValue() {
         if (LOG.isDebugEnabled()) {
             LOG.debug("RandomKey is: " + randomKey);
         }
-        load(SecretPropertiesConfiguration.class, "shenyu.aes.secret.key=" + randomKey);
+        load(SecretPropertiesConfiguration.class, "shenyu.aes.secret.key=" + randomKey,
+                "shenyu.aes.secret.iv=" + randomKey);
         SecretProperties secretProperties = getContext().getBean(SecretProperties.class);
         Assertions.assertEquals(secretProperties.getKey(), randomKey);
+        Assertions.assertEquals(secretProperties.getIv(), randomKey);
     }
     
     @Configuration

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -148,6 +148,7 @@ public void testSend() throws IOException {
         verify(basic, times(1)).sendText("test_message_2");
         doNothing().when(loggerSpy).warn(anyString(), anyString());
         websocketCollector.onClose(session);
+        ThreadLocalUtils.remove("sessionKey");
     }
 
     private long getSessionSetSize() {

File: shenyu-spi/src/test/java/org/apache/shenyu/spi/SpiExtensionFactoryTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.spi;
 
+import org.apache.shenyu.spi.fixture.JdbcSPI;
 import org.apache.shenyu.spi.fixture.MysqlSPI;
 import org.junit.jupiter.api.Test;
 
@@ -28,5 +29,6 @@ public final class SpiExtensionFactoryTest {
     public void testNull() {
         SpiExtensionFactory spiExtensionFactory = new SpiExtensionFactory();
         assertNull(spiExtensionFactory.getExtension("testNull", MysqlSPI.class));
+        assertNull(spiExtensionFactory.getExtension("jdbcSPI", JdbcSPI.class));
     }
 }

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java
Patch:
@@ -89,6 +89,7 @@ public void testRun() {
         healthCheckTask.run();
         Awaitility.await().pollDelay(1, TimeUnit.SECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));
         assertTrue(healthCheckTask.getHealthyUpstream().get(selectorId1).size() > 0);
+        healthCheckTask.print();
     }
     
     /**

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/GlobalErrorHandlerTest.java
Patch:
@@ -30,8 +30,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.http.HttpStatus;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
+import org.springframework.web.server.ResponseStatusException;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -85,5 +87,6 @@ public void getErrorAttributes() {
         NullPointerException nullPointerException = new NullPointerException("nullPointerException");
         Mono<Void> response = globalErrorHandler.handle(webExchange, nullPointerException);
         assertNotNull(response);
+        assertNotNull(globalErrorHandler.handle(webExchange, new ResponseStatusException(HttpStatus.BAD_REQUEST)));
     }
 }

File: shenyu-web/src/test/java/org/apache/shenyu/web/logo/ShenyuLogoTest.java
Patch:
@@ -51,6 +51,7 @@ public void testOnApplicationEvent() throws NoSuchFieldException, IllegalAccessE
         ConfigurableEnvironment environment = new MockEnvironment();
         ApplicationEnvironmentPreparedEvent event = new ApplicationEnvironmentPreparedEvent(null, application, null, environment);
         shenyuLogo.onApplicationEvent(event);
+        shenyuLogo.onApplicationEvent(event);
         Field field = shenyuLogo.getClass().getDeclaredField("ALREADY_LOG");
         field.setAccessible(true);
         AtomicBoolean atomicBoolean = (AtomicBoolean) field.get(shenyuLogo);

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/RequestPlugin.java
Patch:
@@ -187,8 +187,9 @@ private void fillParameter(final Map.Entry<String, String> shenyuParam, final Mu
     private void replaceCookieKey(final Map.Entry<String, String> shenyuCookie, final MultiValueMap<String, HttpCookie> cookies) {
         List<HttpCookie> httpCookies = cookies.get(shenyuCookie.getKey());
         if (Objects.nonNull(httpCookies)) {
-            cookies.addAll(shenyuCookie.getValue(), httpCookies);
             cookies.remove(shenyuCookie.getKey());
+            List<HttpCookie> newKeyCookieList = httpCookies.stream().filter(Objects::nonNull).map(cookie -> new HttpCookie(shenyuCookie.getValue(), cookie.getValue())).collect(Collectors.toList());
+            cookies.addAll(shenyuCookie.getValue(), newKeyCookieList);
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/AbstractSelectorHandleConverter.java
Patch:
@@ -69,7 +69,7 @@ public String handler(final String handle, final List<CommonUpstream> aliveList)
     @Override
     public <T extends CommonUpstream> List<T> updateStatusAndFilter(final List<T> existList, final List<? extends CommonUpstream> aliveList) {
         if (aliveList == null) {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
         long currentTimeMillis = System.currentTimeMillis();
         List<T> validExistList = existList.stream()

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/SwaggerDocParser.java
Patch:
@@ -290,7 +290,7 @@ protected List<DocParameter> buildDocParameters(final String ref, final JsonObje
 
     private List<String> jsonArrayToStringList(final JsonArray jsonArray) {
         if (Objects.isNull(jsonArray)) {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
         List<String> list = new ArrayList<>(jsonArray.size());
         for (JsonElement jsonElement : jsonArray) {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/RoleControllerTest.java
Patch:
@@ -83,7 +83,7 @@ public void setUp() {
 
     @Test
     public void testSelectAll() throws Exception {
-        given(roleService.selectAll()).willReturn(Collections.EMPTY_LIST);
+        given(roleService.selectAll()).willReturn(Collections.emptyList());
         this.mockMvc.perform(MockMvcRequestBuilders.get("/role/getAllRoles"))
             .andExpect(status().isOk())
             .andExpect(jsonPath("$.message", is(ShenyuResultMessage.QUERY_SUCCESS)))

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/ConfigDataTest.java
Patch:
@@ -39,7 +39,7 @@ public void testToString() {
         ConfigData<Object> configData = new ConfigData<>();
         configData.setLastModifyTime(LAST_MODIFY_TIME);
         configData.setMd5(MD5);
-        configData.setData(Collections.EMPTY_LIST);
+        configData.setData(Collections.emptyList());
         assertNotNull(configData.toString());
     }
 
@@ -48,8 +48,8 @@ public void testToString() {
      */
     @Test
     public void testGetterSetter() {
-        ConfigData<Object> configData = new ConfigData<>(MD5, LAST_MODIFY_TIME, Collections.EMPTY_LIST);
-        assertEquals(configData.getData(), Collections.EMPTY_LIST);
+        ConfigData<Object> configData = new ConfigData<>(MD5, LAST_MODIFY_TIME, Collections.emptyList());
+        assertEquals(configData.getData(), Collections.emptyList());
         assertEquals(configData.getMd5(), MD5);
         assertEquals(configData.getLastModifyTime(), LAST_MODIFY_TIME);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/PagedController.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.admin.model.result.AdminResult;
 import org.apache.shenyu.admin.service.PageService;
 import org.apache.shenyu.admin.utils.ResultUtil;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
@@ -41,7 +42,7 @@ public interface PagedController<V, T> {
      */
     @PostMapping("list/search")
     default AdminResult<PageInfo<T>> search(@RequestBody @Validated final PageCondition<V> pageCondition) {
-        return ResultUtil.ok(pageService().searchByPage(pageCondition));
+        return ResultUtil.ok(pageService().searchByPage(pageCondition), ShenyuResultMessage.QUERY_SUCCESS);
     }
     
     /**
@@ -53,7 +54,7 @@ default AdminResult<PageInfo<T>> search(@RequestBody @Validated final PageCondit
     @PostMapping("list/search/adaptor")
     default AdminResult<CommonPager<T>> searchAdaptor(
             @RequestBody @Validated final PageCondition<V> pageCondition) {
-        return ResultUtil.ok(pageService().searchByPageToPager(pageCondition));
+        return ResultUtil.ok(pageService().searchByPageToPager(pageCondition), ShenyuResultMessage.QUERY_SUCCESS);
     }
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/PageService.java
Patch:
@@ -33,7 +33,7 @@ public interface PageService<Q, R> {
     
     
     /**
-     * searh by page condition.
+     * search by page condition.
      *
      * @param pageCondition page condition
      * @return list
@@ -46,7 +46,7 @@ default PageInfo<R> searchByPage(final PageCondition<Q> pageCondition) {
     
     
     /**
-     * searh by page condition.
+     * search by page condition.
      *
      * @param pageCondition page condition
      * @return list

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientEventListenerTest.java
Patch:
@@ -76,14 +76,14 @@ public final class SpringCloudClientEventListenerTest {
     public void beforeEach() {
         when(env.getProperty("spring.application.name")).thenReturn("spring-cloud-test");
     }
-    
+
     private void init() {
         Map<String, Object> results = new LinkedHashMap<>();
         results.put("springCloudClientTestBean", springCloudClientTestBean);
         when(applicationContext.getBeansWithAnnotation(any())).thenReturn(results);
         contextRefreshedEvent = new ContextRefreshedEvent(applicationContext);
     }
-    
+
     @Test
     public void testShenyuBeanProcess() {
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.of("token"));
@@ -152,4 +152,5 @@ public String update(@RequestBody final String body) {
             return "" + body;
         }
     }
+
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/annotation/ShenyuSpringMvcClient.java
Patch:
@@ -46,6 +46,7 @@
      */
     @AliasFor(attribute = "value")
     String path() default "";
+
     /**
      * Rule name string.
      *

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/test/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientEventListenerTest.java
Patch:
@@ -46,9 +46,9 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.mockStatic;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.when;
 
 /**

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/handler/MotanMetaDataHandler.java
Patch:
@@ -44,7 +44,8 @@ public class MotanMetaDataHandler implements MetaDataHandler {
     public void handle(final MetaData metaData) {
         try {
             MetaData exist = META_DATA.get(metaData.getPath());
-            if (Objects.isNull(exist) || Objects.isNull(ApplicationConfigCache.getInstance().get(exist.getPath()).getRef())) {
+            if (Objects.isNull(exist) || Objects.isNull(ApplicationConfigCache.getInstance().get(exist.getPath()))
+                    || Objects.isNull(ApplicationConfigCache.getInstance().get(exist.getPath()).getRef())) {
                 // The first initialization
                 ApplicationConfigCache.getInstance().initRef(metaData);
             } else {
@@ -55,7 +56,7 @@ public void handle(final MetaData metaData) {
             }
             META_DATA.put(metaData.getPath(), metaData);
         } catch (Exception e) {
-            LOG.error("motan sync metadata is error [{}]", metaData, e);
+            LOG.error("motan sync metadata is error, please check motan service. MetaData: [{}]", metaData, e);
         }
     }
     

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/stream/StreamServiceImpl.java
Patch:
@@ -94,7 +94,7 @@ public StreamObserver<RequestData> bidiStreamingFun(final StreamObserver<Respons
             private final ResponseData.Builder builder = ResponseData.newBuilder();
             
             @Override
-            public void onNext(RequestData value) {
+            public void onNext(final RequestData value) {
                 LOG.info("bidiStreamingFun received: {}", value.getText());
                 ResponseData responseData = ResponseData.newBuilder()
                         .setText("bidiStreamingFun response: hello")

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java
Patch:
@@ -423,7 +423,7 @@ public Object testResponseBodyIsNull() {
      * test big request body.
      *
      * @param params request body
-     * @return
+     * @return the result of post
      */
     @PostMapping("/bigRequestBody")
     public ResultBean postBigRequestBody(@RequestBody final UserDTO params) {

File: shenyu-examples/shenyu-examples-https/src/main/java/org/apache/shenyu/examples/https/controller/UploadController.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
 import org.springframework.http.MediaType;
-import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestPart;
@@ -37,12 +36,12 @@ public class UploadController {
     /**
      * upload file.
      *
-     * @param file
+     * @param file  file
      * @return filename
      */
     @PostMapping(value = "/file", consumes = {MediaType.MULTIPART_FORM_DATA_VALUE})
     @ShenyuSpringMvcClient("/file")
-    public String uploadFile(@RequestPart("file") MultipartFile file){
+    public String uploadFile(@RequestPart("file") final MultipartFile file) {
         return file.getOriginalFilename();
     }
 }

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanClassDemoServiceImpl.java
Patch:
@@ -34,9 +34,9 @@ public String hello(final String name) {
     }
 
     @Override
-    public String testTimeOut(final String timeout) {
+    public String testTimeOut(final long timeout) {
         try {
-            Thread.sleep((long) (Double.parseDouble(timeout) * 1000));
+            Thread.sleep(timeout * 1000);
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanDemoServiceImpl.java
Patch:
@@ -38,12 +38,12 @@ public String hello(final String name) {
 
     @Override
     @ShenyuMotanClient("/timeout")
-    public String testTimeOut(final String timeout) {
+    public String testTimeOut(final long seconds) {
         try {
-            Thread.sleep((long) (Double.parseDouble(timeout) * 1000));
+            Thread.sleep(seconds * 1000);
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }
-        return "hello timeout " + timeout + "s";
+        return "hello timeout " + seconds + "s";
     }
 }

File: shenyu-examples/shenyu-examples-plugin/src/main/java/org/apache/shenyu/examples/plugin/ext/ExtendsShenyuZerBean.java
Patch:
@@ -20,9 +20,10 @@
 import org.springframework.stereotype.Component;
 
 /**
- * ExtendsShenyuBean .
+ * ExtendsShenyuBean.
  */
 @Component
 public class ExtendsShenyuZerBean {
+    
     private final String name = "test";
 }

File: shenyu-examples/shenyu-examples-springcloud/src/main/java/org/apache/shenyu/examples/springcloud/controller/UploadController.java
Patch:
@@ -18,10 +18,8 @@
 package org.apache.shenyu.examples.springcloud.controller;
 
 import org.apache.shenyu.client.springcloud.annotation.ShenyuSpringCloudClient;
-import org.apache.shenyu.examples.springcloud.dto.UserDTO;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.bind.annotation.RestController;
@@ -43,7 +41,7 @@ public class UploadController {
      */
     @PostMapping(value = "/file", consumes = {MediaType.MULTIPART_FORM_DATA_VALUE})
     @ShenyuSpringCloudClient(path = "/file")
-    public String post(@RequestPart("file") MultipartFile file) {
+    public String post(@RequestPart("file")final MultipartFile file) {
         return file.getOriginalFilename();
     }
 }

File: shenyu-examples/shenyu-examples-springmvc-tomcat/src/main/java/org/apache/shenyu/examples/springmvc/dto/OAuth2DTO.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.shenyu.examples.springmvc.dto;
 
 /**
- * The type OAuth Authorization dto
+ * The type OAuth Authorization dto.
  */
 public class OAuth2DTO {
 
     /**
-     * oauth token
+     * oauth token.
      */
     private String token;
 

File: shenyu-examples/shenyu-examples-springmvc-tomcat/src/main/java/org/apache/shenyu/examples/springmvc/result/ResultBean.java
Patch:
@@ -23,17 +23,17 @@
 public class ResultBean {
 
     /**
-     * code describe status
+     * code describe status.
      */
     private Integer code;
 
     /**
-     * msg describe result
+     * msg describe result.
      */
     private String msg;
 
     /**
-     * result data
+     * result data.
      */
     private Object data;
 

File: shenyu-examples/shenyu-examples-springmvc/src/main/java/org/apache/shenyu/examples/springmvc/controller/HttpTestController.java
Patch:
@@ -1,5 +1,3 @@
-package org.apache.shenyu.examples.springmvc.controller;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -17,6 +15,8 @@
  * limitations under the License.
  */
 
+package org.apache.shenyu.examples.springmvc.controller;
+
 import java.util.HashMap;
 import java.util.Map;
 

File: shenyu-examples/shenyu-examples-springmvc/src/main/java/org/apache/shenyu/examples/springmvc/dto/OAuth2DTO.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.shenyu.examples.springmvc.dto;
 
 /**
- * The type OAuth Authorization dto
+ * The type OAuth Authorization dto.
  */
 public class OAuth2DTO {
 
     /**
-     * oauth token
+     * oauth token.
      */
     private String token;
 

File: shenyu-examples/shenyu-examples-springmvc/src/main/java/org/apache/shenyu/examples/springmvc/dto/UserDTO.java
Patch:
@@ -25,12 +25,12 @@
 public class UserDTO {
 
     /**
-     * user id
+     * user id.
      */
     private String userId;
 
     /**
-     * username
+     * username.
      */
     private String userName;
 
@@ -78,5 +78,4 @@ public String toString() {
                 .toString();
     }
 
-
 }

File: shenyu-examples/shenyu-examples-springmvc/src/main/java/org/apache/shenyu/examples/springmvc/result/ResultBean.java
Patch:
@@ -23,17 +23,17 @@
 public class ResultBean {
 
     /**
-     * code describe status
+     * code describe status.
      */
     private Integer code;
 
     /**
-     * msg describe result
+     * msg describe result.
      */
     private String msg;
 
     /**
-     * result data
+     * result data.
      */
     private Object data;
 

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/config/WebSocketConfig.java
Patch:
@@ -37,13 +37,14 @@ public class WebSocketConfig implements WebSocketConfigurer {
 
     @Autowired
     private HttpAuthHandler httpAuthHandler;
+    
     @Autowired
     private WebSocketInterceptor myInterceptor;
 
     @Override
-    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
+    public void registerWebSocketHandlers(final WebSocketHandlerRegistry registry) {
         registry.addHandler(httpAuthHandler, "myWebSocket")
                 .addInterceptors(myInterceptor)
                 .setAllowedOrigins("*");
     }
-}
\ No newline at end of file
+}

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/SelectorDTO.java
Patch:
@@ -103,7 +103,7 @@ public final class SelectorDTO implements Serializable {
     /**
      * selector conditions.
      */
-    private List<@Valid SelectorConditionDTO> selectorConditions;
+    private List<SelectorConditionDTO> selectorConditions;
     
     public SelectorDTO() {
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/RuleMapper.java
Patch:
@@ -164,12 +164,12 @@ public interface RuleMapper extends ExistProvider {
     List<RuleVO> selectByCondition(@Param("condition") RuleQueryCondition condition);
     
     /**
-     * get plugin name by ruleId.
+     * get plugin name by selectorId.
      *
-     * @param ruleId ruleId
+     * @param selectorId selectorId
      * @return plugin name
      */
-    String getPluginNameByRuleId(@Param("ruleId") String ruleId);
+    String getPluginNameBySelectorId(@Param("selectorId") String selectorId);
     
     /**
      * select by rule ids.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -229,7 +229,7 @@ public void onSelectorDeleted(final BatchSelectorDeletedEvent event) {
             final int deleteCount = ruleMapper.deleteByIds(ruleIds);
             ruleConditionMapper.deleteByRuleIds(ruleIds);
             if (deleteCount > 0) {
-                ruleEventPublisher.onDeleted(ruleDOList);
+                ruleEventPublisher.onDeleted(ruleDOList, event);
             }
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/AppAuthController.java
Patch:
@@ -71,7 +71,7 @@ public AppAuthController(final AppAuthService appAuthService) {
      */
     @PostMapping("/apply")
     @RequiresPermissions("system:authen:add")
-    public ShenyuAdminResult apply(@RequestBody final AuthApplyDTO authApplyDTO) {
+    public ShenyuAdminResult apply(@Valid @RequestBody final AuthApplyDTO authApplyDTO) {
         if (StringUtils.isNoneBlank(authApplyDTO.getAppKey())) {
             return appAuthService.applyUpdate(authApplyDTO);
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AppAuthDTO.java
Patch:
@@ -22,6 +22,7 @@
 
 import javax.validation.Valid;
 import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.Pattern;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;
@@ -53,7 +54,8 @@ public class AppAuthDTO implements Serializable {
     private String appSecret;
     
     private String userId;
-    
+
+    @Pattern(regexp = "\\+?\\d{7,11}", message = "number is illegal, length 7 to 11! e.g. +1234567 or 1234567")
     private String phone;
     
     private String extInfo;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathApplyDTO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
+import javax.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 
@@ -29,6 +30,7 @@ public class AuthPathApplyDTO implements Serializable {
 
     private String appName;
 
+    @NotBlank
     private String path;
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathDTO.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.model.dto;
 
 import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 
@@ -33,6 +34,7 @@ public class AuthPathDTO implements Serializable {
     @NotBlank
     private String path;
 
+    @NotNull
     private Boolean enabled;
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathWarpDTO.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.admin.mapper.AppAuthMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
+import javax.validation.Valid;
 import javax.validation.constraints.NotEmpty;
 import java.io.Serializable;
 import java.util.List;
@@ -36,7 +37,7 @@ public class AuthPathWarpDTO implements Serializable {
     private String id;
 
     @NotEmpty(message = "auth path is not empty")
-    private List<AuthPathDTO> authPathDTOList;
+    private List<@Valid AuthPathDTO> authPathDTOList;
 
     /**
      * Gets the value of id.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/MetaDataDTO.java
Patch:
@@ -62,6 +62,7 @@ public class MetaDataDTO implements Serializable {
     /**
      * rpc tyoe is not null.
      */
+    @NotBlank
     private String rpcType;
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/RoleDTO.java
Patch:
@@ -52,7 +52,7 @@ public class RoleDTO implements Serializable {
     /**
      * pre permission ids.
      */
-    private List<String> currentPermissionIds;
+    private List<@NotBlank String> currentPermissionIds;
     
     public RoleDTO() {
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/SelectorDTO.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.admin.mapper.PluginMapper;
 import org.apache.shenyu.admin.mapper.SelectorMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
+import org.hibernate.validator.constraints.Range;
 
 import javax.validation.Valid;
 import javax.validation.constraints.Max;
@@ -57,7 +58,7 @@ public final class SelectorDTO implements Serializable {
     private String name;
     
     /**
-     * match mode.
+     * match mode. 0 and 1 or
      */
     private Integer matchMode;
     
@@ -73,6 +74,7 @@ public final class SelectorDTO implements Serializable {
      * sort type.
      */
     @NotNull
+    @Range(min = 1, max = 1000)
     private Integer sort;
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ShenyuDictDTO.java
Patch:
@@ -76,6 +76,7 @@ public class ShenyuDictDTO implements Serializable {
     /**
      * whether enabled.
      */
+    @NotNull
     private Boolean enabled;
     
     public ShenyuDictDTO() {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/UserRoleDTO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
+import javax.validation.constraints.NotBlank;
 import java.util.Objects;
 
 /**
@@ -32,11 +33,13 @@ public class UserRoleDTO {
     /**
      * user key.
      */
+    @NotBlank
     private String userId;
 
     /**
      * role key.
      */
+    @NotBlank
     private String roleId;
 
     public UserRoleDTO() {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -299,7 +299,7 @@ private DashboardUserVO loginByDatabase(final String userName, final String pass
      * @param roleIds role ids.
      */
     private void bindUserRole(final String userId, final List<String> roleIds) {
-        if (CollectionUtils.isEmpty(roleIds)) {
+        if (CollectionUtils.isEmpty(roleIds) || StringUtils.isBlank(userId)) {
             return;
         }
         userRoleMapper.insertBatch(roleIds.stream()

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/AppAuthControllerTest.java
Patch:
@@ -106,7 +106,7 @@ public void testApply() throws Exception {
         pathList.add("/test");
         authApplyDTO.setAppName("testApp");
         authApplyDTO.setUserId("testUser");
-        authApplyDTO.setPhone("18600000000");
+        authApplyDTO.setPhone("+1234567");
         authApplyDTO.setAppParam("{\"type\": \"test\"}");
         authApplyDTO.setExtInfo("{\"extInfo\": \"test\"}");
         authApplyDTO.setOpen(true);
@@ -187,7 +187,7 @@ public void testUpdateDetail() throws Exception {
         appAuthDTO.setId("0001");
         appAuthDTO.setAppKey("app key");
         appAuthDTO.setAppSecret("app secret");
-        appAuthDTO.setPhone("18600000001");
+        appAuthDTO.setPhone("1234567");
         given(this.appAuthService.updateDetail(appAuthDTO)).willReturn(
                 ShenyuAdminResult.success(ShenyuResultMessage.UPDATE_SUCCESS));
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -76,7 +76,7 @@ public final class DashboardUserControllerTest {
             "dateUpdated");
 
     private final DashboardUserDTO dashboardUserDTO = new DashboardUserDTO("2", "userName",
-            "123456", 0, new ArrayList<>(), false);
+            "123456", 0, Lists.newArrayList("1"), false);
 
     @BeforeEach
     public void setUp() throws Exception {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ShenyuDictControllerTest.java
Patch:
@@ -195,6 +195,7 @@ private ShenyuDictDTO buildTestDict() {
         shenyuDictDTO.setDictValue("v");
         shenyuDictDTO.setDictCode("code");
         shenyuDictDTO.setSort(1);
+        shenyuDictDTO.setEnabled(true);
         return shenyuDictDTO;
     }
 }

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -88,7 +88,7 @@ public void onApplicationEvent(@NonNull final ContextRefreshedEvent contextRefre
         if (!registered.compareAndSet(false, true)) {
             return;
         }
-        // Fix bug(https://github.com/dromara/shenyu/issues/415), upload dubbo metadata on ContextRefreshedEvent
+        // Fix bug(https://github.com/apache/shenyu/issues/415), upload dubbo metadata on ContextRefreshedEvent
         Map<String, ServiceBean> serviceBean = contextRefreshedEvent.getApplicationContext().getBeansOfType(ServiceBean.class);
         for (Map.Entry<String, ServiceBean> entry : serviceBean.entrySet()) {
             handler(entry.getValue());

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -103,7 +103,7 @@ public ApacheDubboServiceBeanListener(final PropertiesConfig clientConfig, final
      */
     @Override
     public void onApplicationEvent(final ContextRefreshedEvent contextRefreshedEvent) {
-        // Fix bug(https://github.com/dromara/shenyu/issues/415), upload dubbo metadata on ContextRefreshedEvent
+        // Fix bug(https://github.com/apache/shenyu/issues/415), upload dubbo metadata on ContextRefreshedEvent
         Map<String, ServiceBean> serviceBean = contextRefreshedEvent.getApplicationContext().getBeansOfType(ServiceBean.class);
         if (serviceBean.isEmpty()) {
             return;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-grpc/src/main/java/org/apache/springboot/starter/client/grpc/ShenyuGrpcClientConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dromara.springboot.starter.client.grpc;
+package org.apache.springboot.starter.client.grpc;
 
 import org.apache.shenyu.client.grpc.GrpcClientEventListener;
 import org.apache.shenyu.client.grpc.GrpcContextRefreshedEventListener;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-grpc/src/test/java/org/apache/springboot/starter/client/grpc/ShenyuGrpcClientConfigurationTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dromara.springboot.starter.client.grpc;
+package org.apache.springboot.starter.client.grpc;
 
 import org.apache.shenyu.client.grpc.GrpcClientEventListener;
 import org.apache.shenyu.client.grpc.GrpcContextRefreshedEventListener;
@@ -41,7 +41,7 @@
  */
 @Configuration
 @EnableConfigurationProperties
-@ComponentScan(value = "org.apache.dromara.springboot.starter.client.grpc.server")
+@ComponentScan(value = "org.apache.springboot.starter.client.grpc.server")
 public class ShenyuGrpcClientConfigurationTest {
 
     private ApplicationContextRunner applicationContextRunner;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-grpc/src/test/java/org/apache/springboot/starter/client/grpc/server/ShenyuGrpcServerBuilderTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dromara.springboot.starter.client.grpc.server;
+package org.apache.springboot.starter.client.grpc.server;
 
 import io.grpc.ServerBuilder;
 import org.apache.shenyu.client.grpc.server.GrpcServerBuilder;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -243,7 +243,7 @@ private RuleDTO buildRuleDTO(final String selectorId, final String ruleHandler,
         if (path.endsWith(AdminConstants.URI_SLASH_SUFFIX)) {
             ruleConditionDTO.setOperator(OperatorEnum.STARTS_WITH.getAlias());
         } else if (path.endsWith(AdminConstants.URI_SUFFIX)) {
-            ruleConditionDTO.setOperator(OperatorEnum.PATH_PATTER.getAlias());
+            ruleConditionDTO.setOperator(OperatorEnum.PATH_PATTERN.getAlias());
         } else if (path.indexOf("*") > 1) {
             ruleConditionDTO.setOperator(OperatorEnum.MATCH.getAlias());
         } else {

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/OperatorEnum.java
Patch:
@@ -84,7 +84,7 @@ public enum OperatorEnum {
     /**
      * Path patter operator enum.
      */
-    PATH_PATTER("pathPatter", true);
+    PATH_PATTERN("pathPattern", true);
 
     private final String alias;
 

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/OperatorEnumTest.java
Patch:
@@ -42,7 +42,7 @@ public void testAcquireSupport() {
         assertTrue(enums.contains(OperatorEnum.EQ));
         assertTrue(enums.contains(OperatorEnum.REGEX));
         assertTrue(enums.contains(OperatorEnum.CONTAINS));
-        assertTrue(enums.contains(OperatorEnum.PATH_PATTER));
+        assertTrue(enums.contains(OperatorEnum.PATH_PATTERN));
         assertTrue(enums.contains(OperatorEnum.TIME_BEFORE));
         assertTrue(enums.contains(OperatorEnum.TIME_AFTER));
         assertTrue(enums.contains(OperatorEnum.STARTS_WITH));

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/judge/PredicateJudgeFactoryTest.java
Patch:
@@ -79,7 +79,7 @@ public void testMatchJudge() {
     
     @Test
     public void testPathPatternJudge() {
-        conditionData.setOperator(OperatorEnum.PATH_PATTER.getAlias());
+        conditionData.setOperator(OperatorEnum.PATH_PATTERN.getAlias());
         conditionData.setParamValue("/http/**");
         assertTrue(PredicateJudgeFactory.judge(conditionData, "/http/**"));
         assertTrue(PredicateJudgeFactory.judge(conditionData, "/http/test"));

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -136,6 +136,7 @@ private void clean(final ServerWebExchange exchange) {
         // binary => .bin
         // pdf => .pdf
         // octet-stream => octet-stream
+        // force-download => force-download
         Set<String> commonBinaryTypes = new HashSet<String>() {
             {
                 add("image");
@@ -152,6 +153,7 @@ private void clean(final ServerWebExchange exchange) {
                 add("binary");
                 add("pdf");
                 add("octet-stream");
+                add("force-download");
             }
         };
         StringJoiner regexBuilder = new StringJoiner("|");

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/disruptor/subcriber/ShenyuClientURIExecutorSubscriber.java
Patch:
@@ -75,7 +75,7 @@ public void executor(final Collection<URIRegisterDTO> dataList) {
                     try {
                         TimeUnit.MILLISECONDS.sleep(sleepTime);
                     } catch (InterruptedException ex) {
-                        ex.printStackTrace();
+                        LOG.error("interrupted when sleep", ex);
                     }
                 }
             }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/GsonUtils.java
Patch:
@@ -190,7 +190,7 @@ public String toGetParam(final String json) {
                         .append(URLDecoder.decode(v, Constants.DECODE))
                         .append(AND);
             } catch (UnsupportedEncodingException e) {
-                e.printStackTrace();
+                LOG.error("decode:{} failed !", v, e);
             }
         });
         final String r = stringBuilder.toString();

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/stream/StreamServiceImpl.java
Patch:
@@ -74,7 +74,6 @@ public void onNext(final RequestData value) {
             @Override
             public void onError(final Throwable t) {
                 LOG.error(t.getMessage());
-                t.printStackTrace();
             }
             
             @Override
@@ -106,7 +105,6 @@ public void onNext(RequestData value) {
             @Override
             public void onError(final Throwable t) {
                 LOG.error(t.getMessage());
-                t.printStackTrace();
             }
             
             @Override

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/config/WsSessionManager.java
Patch:
@@ -65,7 +65,7 @@ public static void removeAndClose(String key) {
             try {
                 session.close();
             } catch (IOException e) {
-                e.printStackTrace();
+                log.error("session:{} close failed !", key, e);
             }
         }
     }

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -224,7 +224,6 @@ public ConsumerConfig<GenericService> build(final MetaData metaData) {
             }
         } catch (Exception e) {
             LOG.error("init sofa reference exception", e);
-            e.printStackTrace();
         }
         return reference;
     }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboClassTestServiceImpl.java
Patch:
@@ -40,7 +40,7 @@ public class DubboClassTestServiceImpl implements DubboClassTestService {
     
     @Override
     public DubboTest findById(final String id) {
-        LOGGER.info(GsonUtils.getInstance().toJson(RpcContext.getContext().getAttachments()));
+        LOGGER.info(GsonUtils.getInstance().toJson(RpcContext.getContext().getObjectAttachments()));
         return new DubboTest(id, "hello world shenyu Apache, findById");
     }
     

File: shenyu-examples/shenyu-examples-sofa/shenyu-examples-sofa-api/src/main/java/org/apache/shenyu/examples/sofa/api/service/SofaClientSingleParamService.java
Patch:
@@ -48,5 +48,4 @@ public interface SofaClientSingleParamService {
      * @return SofaSimpleTypeBean
      */
     SofaSimpleTypeBean insert(SofaSimpleTypeBean sofaSimpleTypeBean);
-    
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sofa/src/test/java/org/apache/shenyu/springboot/starter/plugin/sofa/SofaPluginConfigurationTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
+import org.apache.shenyu.plugin.base.handler.MetaDataHandler;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.sofa.param.SofaParamResolveService;
-import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
@@ -81,8 +81,8 @@ public void testSofaPluginDataHandler() {
     @Test
     public void testSofaMetaDataSubscriber() {
         applicationContextRunner.run(context -> {
-                MetaDataSubscriber subscriber = context.getBean("sofaMetaDataSubscriber", MetaDataSubscriber.class);
-                assertNotNull(subscriber);
+                MetaDataHandler handler = context.getBean("sofaMetaDataHandler", MetaDataHandler.class);
+                assertNotNull(handler);
             }
         );
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/consul/ConsulDataChangedInit.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * The type Consul data changed init.
+ *
+ * @since 2.5.0
  */
 public class ConsulDataChangedInit extends AbstractDataChangedInit {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/etcd/EtcdDataChangedInit.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * The type Etcd data changed init.
+ *
+ * @since 2.5.0
  */
 public class EtcdDataChangedInit extends AbstractDataChangedInit {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/nacos/NacosDataChangedInit.java
Patch:
@@ -29,6 +29,8 @@
 
 /**
  * The type Nacos data changed init.
+ *
+ * @since 2.5.0
  */
 public class NacosDataChangedInit extends AbstractDataChangedInit {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/zookeeper/ZookeeperDataChangedInit.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * The type Zookeeper data changed init.
+ *
+ * @since 2.5.0
  */
 public class ZookeeperDataChangedInit extends AbstractDataChangedInit {
 

File: shenyu-plugin/shenyu-plugin-mqtt/src/main/java/org/apache/shenyu/plugin/mqtt/handler/MqttPluginDataHandler.java
Patch:
@@ -64,13 +64,11 @@ private boolean isPortUsing(final int port) {
         boolean flag = false;
         try {
             InetAddress address = InetAddress.getByName("127.0.0.1");
-            Socket socket = new Socket(address, port);
+            new Socket(address, port);
             flag = true;
         } catch (Exception ignored) {
 
         }
         return flag;
-
     }
-
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/SwaggerConfiguration.java
Patch:
@@ -59,7 +59,7 @@ public class SwaggerConfiguration {
 
     private static final String CONTACT_NAME = "ShenYu";
 
-    private static final String CONTACT_URL = "https://github.com/apache/incubator-shenyu";
+    private static final String CONTACT_URL = "https://github.com/apache/shenyu";
 
     private static final String CONTACT_EMAIL = "dev@shenyu.apache.org";
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -212,7 +212,7 @@ public boolean submit(final String selectorId, final CommonUpstream commonUpstre
      * that do not register with the gateway by listening to
      * {@link org.springframework.context.event.ContextRefreshedEvent},
      * which will cause some problems,
-     * check https://github.com/apache/incubator-shenyu/issues/3484 for more details.
+     * check https://github.com/apache/shenyu/issues/3484 for more details.
      *
      * @param selectorId     the selector id
      * @param commonUpstream the common upstream

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/main/java/org/apache/shenyu/sync/data/nacos/handler/NacosCacheHandler.java
Patch:
@@ -84,7 +84,7 @@ public ConfigService getConfigService() {
 
     protected void updatePluginMap(final String configInfo) {
         try {
-            // Fix bug #656(https://github.com/apache/incubator-shenyu/issues/656)
+            // Fix bug #656(https://github.com/apache/shenyu/issues/656)
             List<PluginData> pluginDataList = new ArrayList<>(GsonUtils.getInstance().toObjectMap(configInfo, PluginData.class).values());
             pluginDataList.forEach(pluginData -> Optional.ofNullable(pluginDataSubscriber).ifPresent(subscriber -> {
                 subscriber.unSubscribe(pluginData);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/test/java/org/apache/shenyu/plugin/dubbo/common/context/DubboShenyuContextDecoratorTest.java
Patch:
@@ -34,6 +34,8 @@
 @MockitoSettings(strictness = Strictness.LENIENT)
 public class DubboShenyuContextDecoratorTest {
 
+    private static final String MOCK_ID = "MOCK_ID";
+
     private static final String MOCK_APP_NAME = "mockAppName";
 
     private static final String MOCK_SERVICE_NAME = "mockServiceName";
@@ -50,6 +52,7 @@ public void setUp() {
     @Test
     public void decorator() {
         MetaData metaData = MetaData.builder()
+                .id(MOCK_ID)
                 .appName(MOCK_APP_NAME)
                 .contextPath(MOCK_CONTEXT_PATH)
                 .serviceName(MOCK_SERVICE_NAME)

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/cache/MetaDataCacheTest.java
Patch:
@@ -38,6 +38,7 @@ public final class MetaDataCacheTest {
     @BeforeEach
     public void setUp() {
         metaData = MetaData.builder()
+                .id("1")
                 .path("/home")
                 .build();
         metaDataCache = MetaDataCache.getInstance();

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/subsciber/MetaDataCacheSubscriberTest.java
Patch:
@@ -41,6 +41,7 @@ public void setUp() {
         metaDataCacheSubscriber = new MetaDataCacheSubscriber();
         metaDataCache = MetaDataCache.getInstance();
         metaData = MetaData.builder()
+                .id("1")
                 .path("/home")
                 .build();
     }

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/MetaDataHandlerTest.java
Patch:
@@ -47,8 +47,8 @@ public MetaDataHandlerTest() {
     @Test
     public void testConvert() {
         List<MetaData> metaDataList = new LinkedList<>();
-        metaDataList.add(MetaData.builder().appName("appName1").enabled(true).build());
-        metaDataList.add(MetaData.builder().appName("appName2").methodName("POST").build());
+        metaDataList.add(MetaData.builder().id("1").appName("appName1").enabled(true).build());
+        metaDataList.add(MetaData.builder().id("1").appName("appName2").methodName("POST").build());
         Gson gson = new Gson();
         String json = gson.toJson(metaDataList);
         List<MetaData> convertedList = metaDataHandler.convert(json);

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/LocalMetadataControllerTest.java
Patch:
@@ -83,16 +83,19 @@ public void testSaveOrUpdate() throws Exception {
     public void testClean() throws Exception {
         final MockHttpServletResponse response = this.mockMvc.perform(MockMvcRequestBuilders.get("/shenyu/meta/delete")
                         .contentType(MediaType.APPLICATION_JSON)
+                        .param("id", "id")
                         .param("path", "path")
                         .param("rpcType", "rpcType"))
                 .andReturn().getResponse();
         assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
         MetaData metaData = new MetaData();
+        metaData.setId("id");
         metaData.setPath("path");
         metaData.setRpcType("rpcType");
         subscribers.forEach(subscriber -> verify(subscriber).unSubscribe(metaData));
         final MockHttpServletResponse subNullResponse = this.mockMvcSubscribersNull.perform(MockMvcRequestBuilders.get("/shenyu/meta/delete")
                 .contentType(MediaType.APPLICATION_JSON)
+                .param("id", "id")
                 .param("path", "path")
                 .param("rpcType", "rpcType"))
                 .andReturn().getResponse();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -242,6 +242,8 @@ private RuleDTO buildRuleDTO(final String selectorId, final String ruleHandler,
                 .build();
         if (path.endsWith(AdminConstants.URI_SLASH_SUFFIX)) {
             ruleConditionDTO.setOperator(OperatorEnum.STARTS_WITH.getAlias());
+        } else if (path.endsWith(AdminConstants.URI_SUFFIX)) {
+            ruleConditionDTO.setOperator(OperatorEnum.PATH_PATTER.getAlias());
         } else if (path.indexOf("*") > 1) {
             ruleConditionDTO.setOperator(OperatorEnum.MATCH.getAlias());
         } else {

File: shenyu-plugin/shenyu-plugin-mock/src/main/java/org/apache/shenyu/plugin/mock/generator/RandomIntGenerator.java
Patch:
@@ -48,7 +48,7 @@ public int getParamSize() {
     }
     
     @Override
-    public void initParam(final List<String> params) {
+    public void initParam(final List<String> params, final String rule) {
         String[] range = params.get(0).split("-");
         min = Integer.parseInt(range[0]);
         max = Integer.parseInt(range[1]);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/MetaDataServiceImpl.java
Patch:
@@ -189,9 +189,9 @@ private String create(final MetaDataDTO metaDataDTO) {
             publisher.onCreated(metaDataDO);
         }
         
-        // publish AppAuthData's creste event
+        // publish MetaData's create event
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.META_DATA, DataEventTypeEnum.CREATE,
-                Collections.singletonList(MetaDataTransfer.INSTANCE.mapToData(metaDataDTO))));
+                Collections.singletonList(MetaDataTransfer.INSTANCE.mapToData(metaDataDO))));
         return ShenyuResultMessage.CREATE_SUCCESS;
     }
     

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/MemoryLimitCalculator.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.common.concurrent;
 
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -41,7 +41,7 @@ private static void checkAndScheduleRefresh() {
             refresh();
             if (REFRESH_STARTED.compareAndSet(false, true)) {
                 ScheduledExecutorService scheduledExecutorService =
-                        Executors.newSingleThreadScheduledExecutor(ShenyuThreadFactory.create("Shenyu-Memory-Calculator-", false));
+                        new ScheduledThreadPoolExecutor(1, ShenyuThreadFactory.create("Shenyu-Memory-Calculator-", false));
                 // check every 50 ms to improve performance
                 scheduledExecutorService.scheduleWithFixedDelay(MemoryLimitCalculator::refresh, 50, 50, TimeUnit.MILLISECONDS);
                 Runtime.getRuntime().addShutdownHook(new Thread(() -> {

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/ShenyuThreadPoolExecutor.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.common.concurrent;
 
+import java.util.Objects;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.RejectedExecutionHandler;
 import java.util.concurrent.ThreadFactory;
@@ -41,7 +42,7 @@ public ShenyuThreadPoolExecutor(final int corePoolSize,
 
     @Override
     public void execute(final Runnable command) {
-        if (command == null) {
+        if (Objects.isNull(command)) {
             throw new NullPointerException();
         }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/TaskQueue.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.common.concurrent;
 
+import java.util.Objects;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -42,7 +43,7 @@ public interface TaskQueue<E> extends BlockingQueue<E> {
 
     @Override
     default boolean offer(final E e) {
-        if (getExecutor() == null) {
+        if (Objects.isNull(getExecutor())) {
             throw new RejectedExecutionException("The task queue does not have executor!");
         }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/BeanHolder.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.base.utils;
 
+import java.util.Objects;
 import java.util.function.Supplier;
 
 /**
@@ -41,7 +42,7 @@ public BeanHolder(final Supplier<O> supplier) {
      */
     @Override
     public O get() {
-        if (o != null) {
+        if (Objects.nonNull(o)) {
             return o;
         }
         return init();
@@ -62,7 +63,7 @@ public boolean isNull() {
      * @return bean
      */
     synchronized O init() {
-        if (o != null) {
+        if (Objects.nonNull(o)) {
             return o;
         }
         O res = supplier.get();

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/LoggingAliyunSlsPlugin.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * LoggingAliYunSlsPlugin send log to aliyun sls service.
  */
-public class LoggingAliYunSlsPlugin extends AbstractLoggingPlugin {
+public class LoggingAliyunSlsPlugin extends AbstractLoggingPlugin {
 
     @Override
     public Mono<Void> doLogExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain,

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/collector/AliyunSlsLogCollector.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.aliyun.sls.collector;
 
-import org.apache.shenyu.plugin.aliyun.sls.handler.LoggingAliYunSlsPluginDataHandler;
+import org.apache.shenyu.plugin.aliyun.sls.handler.LoggingAliyunSlsPluginDataHandler;
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
@@ -40,6 +40,6 @@ public static LogCollector getInstance() {
 
     @Override
     protected LogConsumeClient getLogConsumeClient() {
-        return LoggingAliYunSlsPluginDataHandler.getAliyunSlsLogCollectClient();
+        return LoggingAliyunSlsPluginDataHandler.getAliyunSlsLogCollectClient();
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/handler/LoggingAliyunSlsPluginDataHandler.java
Patch:
@@ -36,9 +36,9 @@
 /**
  * LoggingAliYunSlsPluginDataHandler aliyun sls plugin data handler.
  */
-public class LoggingAliYunSlsPluginDataHandler implements PluginDataHandler {
+public class LoggingAliyunSlsPluginDataHandler implements PluginDataHandler {
 
-    private static final Logger LOG = LoggerFactory.getLogger(LoggingAliYunSlsPluginDataHandler.class);
+    private static final Logger LOG = LoggerFactory.getLogger(LoggingAliyunSlsPluginDataHandler.class);
 
     private static final AliyunSlsLogCollectClient ALIYUN_SLS_LOG_COLLECT_CLIENT = new AliyunSlsLogCollectClient();
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/LoggingAliyunSlsPluginTest.java
Patch:
@@ -47,9 +47,9 @@
  * The Test Case For LoggingRocketMQPlugin.
  */
 @ExtendWith(MockitoExtension.class)
-public final class LoggingAliYunSlsPluginTest {
+public final class LoggingAliyunSlsPluginTest {
 
-    private LoggingAliYunSlsPlugin loggingAliYunSlsPlugin;
+    private LoggingAliyunSlsPlugin loggingAliYunSlsPlugin;
 
     private ServerWebExchange exchange;
 
@@ -65,7 +65,7 @@ public final class LoggingAliYunSlsPluginTest {
 
     @BeforeEach
     public void setUp() {
-        this.loggingAliYunSlsPlugin = new LoggingAliYunSlsPlugin();
+        this.loggingAliYunSlsPlugin = new LoggingAliyunSlsPlugin();
         this.ruleData = Mockito.mock(RuleData.class);
         this.chain = Mockito.mock(ShenyuPluginChain.class);
         this.selectorData = Mockito.mock(SelectorData.class);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SandboxController.java
Patch:
@@ -81,8 +81,8 @@ public SandboxController(final AppAuthService appAuthService) {
      */
     @PostMapping(path = "/proxyGateway")
     public void proxyGateway(@RequestBody @Valid final ProxyGatewayDTO proxyGatewayDTO,
-        final HttpServletRequest request,
-        final HttpServletResponse response) throws IOException {
+                            final HttpServletRequest request,
+                            final HttpServletResponse response) throws IOException {
         // Public request headers.
         Map<String, String> header = this.buildReqHeaders(proxyGatewayDTO);
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/ServiceDocManagerImpl.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import javax.annotation.Resource;
 import org.apache.shenyu.admin.model.bean.UpstreamInstance;
@@ -86,7 +87,7 @@ public void pullApiDocument(final UpstreamInstance instance) {
     private boolean canPull(final UpstreamInstance instance) {
         boolean canPull = false;
         Long cacheLastStartUpTime = CLUSTER_LASTSTARTUPTIME_MAP.get(instance.getClusterName());
-        if (cacheLastStartUpTime == null || instance.getStartupTime() > cacheLastStartUpTime) {
+        if (Objects.isNull(cacheLastStartUpTime) || instance.getStartupTime() > cacheLastStartUpTime) {
             canPull = true;
         }
         return canPull;

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -165,7 +165,6 @@ private List<ShenyuPlugin> sortPlugins(final List<ShenyuPlugin> list) {
     /**
      * handle enabled plugins.
      * @param pluginData plugin data
-     * @return enabled plugins
      */
     private synchronized void onPluginEnabled(final PluginData pluginData) {
         LOG.info("shenyu use plugin:[{}]", pluginData.getName());

File: shenyu-web/src/main/java/org/apache/shenyu/web/logo/ShenyuLogo.java
Patch:
@@ -33,9 +33,6 @@
 @Order(LoggingApplicationListener.DEFAULT_ORDER + 1)
 public class ShenyuLogo implements ApplicationListener<ApplicationEnvironmentPreparedEvent> {
     
-    /**
-     * logger.
-     */
     private static final Logger LOG = LoggerFactory.getLogger(ShenyuLogo.class);
 
     private static final String SHENYU_LOGO = "\n"

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -119,7 +119,7 @@ private MetaDataRegisterDTO buildMetaDataDTO() {
         return MetaDataRegisterDTO.builder()
                 .contextPath(contextPath)
                 .appName(appName)
-                .path(PathUtils.decoratorPath(contextPath))
+                .path(PathUtils.decoratorPathWithSlash(contextPath))
                 .rpcType(RpcTypeEnum.SPRING_CLOUD.getName())
                 .enabled(true)
                 .ruleName(contextPath)

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -126,7 +126,7 @@ private MetaDataRegisterDTO buildMetaDataDTO() {
         return MetaDataRegisterDTO.builder()
             .contextPath(contextPath)
             .appName(appName)
-            .path(PathUtils.decoratorPath(contextPath))
+            .path(PathUtils.decoratorPathWithSlash(contextPath))
             .rpcType(RpcTypeEnum.HTTP.getName())
             .enabled(true)
             .ruleName(contextPath)

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/init/SpringContextRegisterListener.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.IpUtils;
+import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.utils.PortUtils;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -124,7 +125,7 @@ private MetaDataRegisterDTO buildMetaDataDTO() {
         return MetaDataRegisterDTO.builder()
             .contextPath(contextPath)
             .appName(appName)
-            .path(contextPath)
+            .path(PathUtils.decoratorPathWithSlash(contextPath))
             .rpcType(RpcTypeEnum.WEB_SOCKET.getName())
             .enabled(true)
             .ruleName(contextPath)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DashboardUserDTO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
+import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.List;
@@ -37,7 +38,7 @@ public class DashboardUserDTO implements Serializable {
     /**
      * user name.
      */
-    @NotNull
+    @NotBlank
     private String userName;
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DataPermissionDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import javax.validation.constraints.NotNull;
+import javax.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.Objects;
 
@@ -35,13 +35,13 @@ public class DataPermissionDTO implements Serializable {
     /**
      * user id.
      */
-    @NotNull
+    @NotBlank
     private String userId;
 
     /**
      * selector or rule id.
      */
-    @NotNull
+    @NotBlank
     private String dataId;
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/MetaDataDTO.java
Patch:
@@ -35,7 +35,6 @@ public class MetaDataDTO implements Serializable {
     /**
      * appName must is not null.
      */
-    @NotNull
     @NotBlank
     private String appName;
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/PluginDTO.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.admin.mapper.PluginMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
+import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
@@ -40,7 +41,7 @@ public class PluginDTO implements Serializable {
     /**
      * plugin name.
      */
-    @NotNull
+    @NotBlank
     private String name;
     
     /**
@@ -51,7 +52,7 @@ public class PluginDTO implements Serializable {
     /**
      * plugin role.
      */
-    @NotNull
+    @NotBlank
     private String role;
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/PluginHandleDTO.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.admin.mapper.PluginHandleMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
+import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
@@ -40,13 +41,13 @@ public class PluginHandleDTO implements Serializable {
     /**
      * plugin id.
      */
-    @NotNull
+    @NotBlank
     private String pluginId;
     
     /**
      * the attribute name.
      */
-    @NotNull
+    @NotBlank
     private String field;
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/RoleDTO.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.admin.mapper.RoleMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.constraints.NotNull;
+import javax.validation.constraints.NotBlank;
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;
@@ -41,7 +41,7 @@ public class RoleDTO implements Serializable {
     /**
      * role name.
      */
-    @NotNull
+    @NotBlank
     private String roleName;
     
     /**
@@ -57,7 +57,7 @@ public class RoleDTO implements Serializable {
     public RoleDTO() {
     }
     
-    public RoleDTO(final String id, @NotNull final String roleName, final String description, final List<String> currentPermissionIds) {
+    public RoleDTO(final String id, @NotBlank final String roleName, final String description, final List<String> currentPermissionIds) {
         this.id = id;
         this.roleName = roleName;
         this.description = description;

File: shenyu-web/src/test/java/org/apache/shenyu/web/loader/ShenyuPluginLoaderTest.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * Test for  ShenyuPluginLoader.
  */
-public class ShenyuPluginLoaderTest {
+public final class ShenyuPluginLoaderTest {
     
     @TempDir
     private static Path folder;
@@ -70,7 +70,6 @@ public void setUp() throws IOException, NoSuchFieldException, IllegalAccessExcep
         when(mockApplication.containsBean("dividePlugin")).thenReturn(true);
         SpringBeanUtils instance = SpringBeanUtils.getInstance();
         instance.setApplicationContext(mockApplication);
-        
     }
     
     @Test

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/ShenyuThreadPoolConfiguration.java
Patch:
@@ -91,7 +91,7 @@ public TaskQueue<Runnable> memorySafeTaskQueue(final ShenyuConfig shenyuConfig)
      * @return the shenyu thread pool executor
      */
     @Bean
-    @ConditionalOnProperty(name = "shenyu.shared-pool.enable", havingValue = "true")
+    @ConditionalOnProperty(name = "shenyu.shared-pool.enable", havingValue = "true", matchIfMissing = true)
     public ShenyuThreadPoolExecutor shenyuThreadPoolExecutor(final ShenyuConfig shenyuConfig,
                                                              final ObjectProvider<TaskQueue<Runnable>> provider) {
         final ShenyuConfig.SharedPool sharedPool = shenyuConfig.getSharedPool();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-alibaba-dubbo/src/main/java/org/apache/shenyu/springboot/starter/client/alibaba/dubbo/ShenyuAlibabaDubboClientConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -31,6 +32,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuAlibabaDubboClientConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-apache-dubbo/src/main/java/org/apache/shenyu/springboot/starter/client/apache/dubbo/ShenyuApacheDubboClientConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -31,6 +32,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuApacheDubboClientConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-common/src/main/java/org/apache/shenyu/springboot/starter/client/common/config/ShenyuClientCommonBeanConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -29,6 +30,7 @@
  * The type shenyu client common bean configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuClientCommonBeanConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-grpc/src/main/java/org/apache/dromara/springboot/starter/client/grpc/ShenyuGrpcClientConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -34,6 +35,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuGrpcClientConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-motan/src/main/java/org/apache/shenyu/springboot/starter/client/motan/ShenyuMotanClientConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -31,6 +32,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuMotanClientConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-sofa/src/main/java/org/apache/shenyu/springboot/starter/client/sofa/ShenyuSofaClientConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -31,6 +32,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuSofaClientConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-spring-websocket/src/main/java/org/apache/shenyu/springboot/starter/client/spring/websocket/ShenyuSpringWebSocketClientConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -32,6 +33,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuSpringWebSocketClientConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springcloud/src/main/java/org/apache/shenyu/springboot/starter/client/springcloud/ShenyuSpringCloudClientConfiguration.java
Patch:
@@ -34,8 +34,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
-@ConditionalOnProperty(value = "shenyu.register.enabled",
-        matchIfMissing = true, havingValue = "true")
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuSpringCloudClientConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -32,6 +33,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuSpringMvcClientConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-tars/src/main/java/org/apache/shenyu/springboot/starter/client/tars/ShenyuTarsClientConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.register.common.config.ShenyuClientConfig;
 import org.apache.shenyu.springboot.starter.client.common.config.ShenyuClientCommonBeanConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -32,6 +33,7 @@
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
+@ConditionalOnProperty(value = "shenyu.register.enabled", matchIfMissing = true, havingValue = "true")
 public class ShenyuTarsClientConfiguration {
 
     /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/client/AliyunSlsLogCollectClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.aliyun.sls.aliyunsls;
+package org.apache.shenyu.plugin.aliyun.sls.client;
 
 import com.aliyun.openservices.aliyun.log.producer.LogProducer;
 import com.aliyun.openservices.aliyun.log.producer.Producer;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/handler/LoggingAliYunSlsPluginDataHandler.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.Singleton;
-import org.apache.shenyu.plugin.aliyun.sls.aliyunsls.AliyunSlsLogCollectClient;
+import org.apache.shenyu.plugin.aliyun.sls.client.AliyunSlsLogCollectClient;
 import org.apache.shenyu.plugin.aliyun.sls.collector.AliyunSlsLogCollector;
 import org.apache.shenyu.plugin.aliyun.sls.config.AliyunLogCollectConfig;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/aliyunsls/AliyunSlsLogCollectClientTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.plugin.aliyun.sls.client.AliyunSlsLogCollectClient;
 import org.apache.shenyu.plugin.aliyun.sls.config.AliyunLogCollectConfig;
 import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/collector/AliyunSlsLogCollectorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.aliyun.sls.collector;
 
-import org.apache.shenyu.plugin.aliyun.sls.aliyunsls.AliyunSlsLogCollectClient;
+import org.apache.shenyu.plugin.aliyun.sls.client.AliyunSlsLogCollectClient;
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/handler/LoggingAliYunSlsPluginDataHandlerTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
-import org.apache.shenyu.plugin.aliyun.sls.aliyunsls.AliyunSlsLogCollectClient;
+import org.apache.shenyu.plugin.aliyun.sls.client.AliyunSlsLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/client/KafkaLogCollectClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.kafka.kafka;
+package org.apache.shenyu.plugin.logging.kafka.client;
 
 import net.jpountz.lz4.LZ4Compressor;
 import net.jpountz.lz4.LZ4Factory;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/config/KafkaLogCollectConfig.java
Patch:
@@ -54,6 +54,7 @@ public void setKafkaLogConfig(final KafkaLogConfig kafkaLogConfig) {
      * global log config.
      */
     public static class KafkaLogConfig extends GenericGlobalConfig {
+        
         private String topic;
 
         private String namesrvAddr;
@@ -185,5 +186,4 @@ public void setTopic(final String topic) {
             this.topic = topic;
         }
     }
-
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/handler/LoggingKafkaPluginDataHandler.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
 import org.apache.shenyu.plugin.logging.kafka.collector.KafkaLogCollector;
 import org.apache.shenyu.plugin.logging.kafka.config.KafkaLogCollectConfig;
-import org.apache.shenyu.plugin.logging.kafka.kafka.KafkaLogCollectClient;
+import org.apache.shenyu.plugin.logging.kafka.client.KafkaLogCollectClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/collector/KafkaLogCollectorTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.kafka.kafka.KafkaLogCollectClient;
+import org.apache.shenyu.plugin.logging.kafka.client.KafkaLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/handler/LoggingKafkaPluginDataHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.plugin.logging.kafka.kafka.KafkaLogCollectClient;
+import org.apache.shenyu.plugin.logging.kafka.client.KafkaLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/kafka/KafkaLogCollectClientTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.kafka.client.KafkaLogCollectClient;
 import org.apache.shenyu.plugin.logging.kafka.config.KafkaLogCollectConfig;
 import org.junit.Ignore;
 import org.junit.jupiter.api.Assertions;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RocketMqPluginTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.rocketmq.config.LogCollectConfig;
+import org.apache.shenyu.plugin.logging.rocketmq.config.RocketMQLogCollectConfig;
 import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
@@ -59,7 +59,7 @@ public void setup() throws IOException {
 
     @Test
     public void testPass() {
-        final LogCollectConfig.GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), LogCollectConfig.GlobalLogConfig.class);
+        final RocketMQLogCollectConfig.RocketMQLogConfig rocketMQLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), RocketMQLogCollectConfig.RocketMQLogConfig.class);
         properties.setProperty(GenericLoggingConstant.TOPIC, "shenyu-access-logging");
         properties.setProperty(GenericLoggingConstant.NAMESERVER_ADDRESS, "shenyu-rocketmq:9876");
         properties.setProperty(GenericLoggingConstant.PRODUCER_GROUP, "shenyu-plugin-logging-rocketmq");
@@ -69,7 +69,7 @@ public void testPass() {
         logs.add(shenyuRequestLog);
 
         String msg = "";
-        LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
+        RocketMQLogCollectConfig.INSTANCE.setRocketMQLogConfig(rocketMQLogConfig);
         rocketMQLogCollectClient.initProducer(properties);
         try {
             rocketMQLogCollectClient.consume(logs);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/collector/AliyunSlsLogCollector.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 
 /**
- * default log collector，depend a LogConsumeClient for consume logs.
+ * aliyun sls log collector，depend a LogConsumeClient for consume logs.
  */
-public class DefaultLogCollector extends AbstractLogCollector {
+public class AliyunSlsLogCollector extends AbstractLogCollector {
 
-    private static final LogCollector INSTANCE = new DefaultLogCollector();
+    private static final LogCollector INSTANCE = new AliyunSlsLogCollector();
 
     /**
      * get LogCollector instance.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/ElasticSearchLogCollector.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.shenyu.plugin.logging.elasticsearch.handler.LoggingElasticSearchPluginDataHandler;
 
 /**
- * default log collector，depend a LogConsumeClient for consume logs.
+ * elastic search log collector，depend a LogConsumeClient for consume logs.
  */
-public class DefaultLogCollector extends AbstractLogCollector {
+public class ElasticSearchLogCollector extends AbstractLogCollector {
 
-    private static final LogCollector INSTANCE = new DefaultLogCollector();
+    private static final LogCollector INSTANCE = new ElasticSearchLogCollector();
 
     /**
      * get LogCollector instance.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/collector/KafkaLogCollector.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.shenyu.plugin.logging.kafka.handler.LoggingKafkaPluginDataHandler;
 
 /**
- * default log collector，depend a LogConsumeClient for consume logs.
+ * kafka log collector，depend a LogConsumeClient for consume logs.
  */
-public class DefaultLogCollector extends AbstractLogCollector {
+public class KafkaLogCollector extends AbstractLogCollector {
 
-    private static final LogCollector INSTANCE = new DefaultLogCollector();
+    private static final LogCollector INSTANCE = new KafkaLogCollector();
 
     /**
      * get LogCollector instance.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/kafka/KafkaLogCollectClientTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.logging.common.constant.GenericLoggingConstant;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.kafka.config.LogCollectConfig.GlobalLogConfig;
+import org.apache.shenyu.plugin.logging.kafka.config.KafkaLogCollectConfig;
 import org.junit.Ignore;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -50,7 +50,7 @@ public void setUp() {
         this.kafkaLogCollectClient = new KafkaLogCollectClient();
         pluginData.setEnabled(true);
         pluginData.setConfig("{\"topic\":\"shenyu-access-logging\", \"namesrvAddr\":\"localhost:8082\"}");
-        GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), GlobalLogConfig.class);
+        KafkaLogCollectConfig.KafkaLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), KafkaLogCollectConfig.KafkaLogConfig.class);
         globalLogConfig.setCompressAlg("LZ4");
         props.put("bootstrap.servers", globalLogConfig.getNamesrvAddr());
         props.put(GenericLoggingConstant.NAMESERVER_ADDRESS, globalLogConfig.getNamesrvAddr());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/collector/RocketMQLogCollector.java
Patch:
@@ -25,9 +25,9 @@
 /**
  * default log collector，depend a LogConsumeClient for consume logs.
  */
-public class DefaultLogCollector extends AbstractLogCollector {
+public class RocketMQLogCollector extends AbstractLogCollector {
 
-    private static final LogCollector INSTANCE = new DefaultLogCollector();
+    private static final LogCollector INSTANCE = new RocketMQLogCollector();
 
     /**
      * get LogCollector instance.

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataTest.java
Patch:
@@ -22,10 +22,9 @@
 import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.Singleton;
-
-import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.MethodOrderer;
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/ModifyResponsePlugin.java
Patch:
@@ -147,6 +147,7 @@ private ClientResponse buildModifiedResponse(final Publisher<? extends DataBuffe
             return ClientResponse.create(statusCode)
                     .rawStatusCode(rowStatusCode)
                     .headers(headers -> headers.addAll(httpHeaders))
+                    .cookies(cookies -> cookies.addAll(this.getCookies()))
                     .body(Flux.from(body)).build();
         }
 

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.client.apache.dubbo;
 
-import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.config.spring.ServiceBean;
@@ -26,6 +25,7 @@
 import org.apache.shenyu.client.core.exception.ShenyuClientIllegalArgumentException;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
 import org.apache.shenyu.client.dubbo.common.dto.DubboRpcExt;
+import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.IpUtils;
@@ -92,7 +92,7 @@ public ApacheDubboServiceBeanListener(final PropertiesConfig clientConfig, final
         this.appName = appName;
         this.host = props.getProperty(ShenyuClientConstants.HOST);
         this.port = props.getProperty(ShenyuClientConstants.PORT);
-        executorService = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("shenyu-apache-dubbo-client-thread-pool-%d").build());
+        executorService = Executors.newSingleThreadExecutor(ShenyuThreadFactory.create("shenyu-apache-dubbo-client-thread-pool", false));
         publisher.start(shenyuClientRegisterRepository);
     }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -150,7 +150,7 @@ public enum PluginEnum {
     /**
      * Logging ElasticSearch plugin enum.
      */
-    LOGGING_ElasticSearch(190, 0, "loggingElasticSearch"),
+    LOGGING_ELASTIC_SEARCH(190, 0, "loggingElasticSearch"),
     
     /**
      * Divide plugin enum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/SerializeEnumTest.java
Patch:
@@ -34,7 +34,6 @@ public void testGetSerialize() {
         assertEquals(SerializeEnum.JDK.getSerialize(), "jdk");
         assertEquals(SerializeEnum.KRYO.getSerialize(), "kryo");
         assertEquals(SerializeEnum.HESSIAN.getSerialize(), "hessian");
-        assertEquals(SerializeEnum.FAST_JSON.getSerialize(), "fastJson");
         assertEquals(SerializeEnum.PROTOSTUFF.getSerialize(), "protostuff");
     }
 
@@ -47,7 +46,6 @@ public void testAcquire() {
         assertEquals(SerializeEnum.acquire("jdk"), SerializeEnum.JDK);
         assertEquals(SerializeEnum.acquire("kryo"), SerializeEnum.KRYO);
         assertEquals(SerializeEnum.acquire("hessian"), SerializeEnum.HESSIAN);
-        assertEquals(SerializeEnum.acquire("fastJson"), SerializeEnum.FAST_JSON);
         assertEquals(SerializeEnum.acquire("protostuff"), SerializeEnum.PROTOSTUFF);
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/collector/DefaultLogCollectorTest.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class DefaultLogCollectorTest {
 
-    private ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
+    private final ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/config/LogCollectConfigTest.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class LogCollectConfigTest {
 
-    private LogCollectConfig.GlobalLogConfig globalLogConfig = new LogCollectConfig.GlobalLogConfig();
+    private final LogCollectConfig.GlobalLogConfig globalLogConfig = new LogCollectConfig.GlobalLogConfig();
 
     @Test
     public void testLogCollectorConfigHost() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/handler/LoggingAliYunSlsPluginDataHandlerTest.java
Patch:
@@ -33,7 +33,7 @@ public class LoggingAliYunSlsPluginDataHandlerTest {
 
     private LoggingAliYunSlsPluginDataHandler loggingAliYunSlsPluginDataHandler;
 
-    private PluginData pluginData = new PluginData();
+    private final PluginData pluginData = new PluginData();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/body/LoggingServerHttpResponse.java
Patch:
@@ -250,5 +250,4 @@ private String getUpstreamIpFromHttpDomain() {
         }
         return "";
     }
-
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/utils/LogCollectUtils.java
Patch:
@@ -58,5 +58,4 @@ public static String getHeaders(final HttpHeaders headers) {
                 .collect(Collectors.toMap(Map.Entry::getKey, entry -> String.join(",", entry.getValue())));
         return JsonUtils.toJson(map);
     }
-
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/test/java/org/apache/shenyu/plugin/logging/common/entity/ShenyuRequestLogTest.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ShenyuRequestLogTest {
 
-    private ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
+    private final ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
 
     @Test
     public void testGetModule() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/LoggingElasticSearchPluginTest.java
Patch:
@@ -88,11 +88,11 @@ public void testDoExecute() {
 
     @Test
     public void testGetOrder() {
-        Assertions.assertEquals(loggingElasticSearchPlugin.getOrder(), PluginEnum.LOGGING_ElasticSearch.getCode());
+        Assertions.assertEquals(loggingElasticSearchPlugin.getOrder(), PluginEnum.LOGGING_ELASTIC_SEARCH.getCode());
     }
 
     @Test
     public void testNamed() {
-        Assertions.assertEquals(loggingElasticSearchPlugin.named(), PluginEnum.LOGGING_ElasticSearch.getName());
+        Assertions.assertEquals(loggingElasticSearchPlugin.named(), PluginEnum.LOGGING_ELASTIC_SEARCH.getName());
     }
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/DefaultLogCollectorTest.java
Patch:
@@ -32,7 +32,7 @@
  */
 public final class DefaultLogCollectorTest {
 
-    private ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
+    private final ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/config/LogCollectConfigTest.java
Patch:
@@ -26,8 +26,6 @@
  */
 public final class LogCollectConfigTest {
 
-    private LogCollectConfig logCollectConfig = new LogCollectConfig();
-
     @Test
     public void testSetLogApiConfigSampleRate() {
         LogCollectConfig.LogApiConfig logApiConfig = new LogCollectConfig.LogApiConfig();
@@ -72,13 +70,14 @@ public void testSetGlobalLogConfigPort() {
 
     @Test
     public void testGetGlobalLogConfig() {
+        LogCollectConfig logCollectConfig = new LogCollectConfig();
         LogCollectConfig.GlobalLogConfig globalLogConfig = new LogCollectConfig.GlobalLogConfig();
         logCollectConfig.setGlobalLogConfig(globalLogConfig);
         Assertions.assertEquals(logCollectConfig.getGlobalLogConfig(), globalLogConfig);
     }
 
     @Test
-    public void testtCompressAlg() {
+    public void testCompressAlg() {
         LogCollectConfig.GlobalLogConfig globalLogConfig = new LogCollectConfig.GlobalLogConfig();
         globalLogConfig.setCompressAlg("LZ4");
         Assertions.assertEquals(globalLogConfig.getCompressAlg(), "LZ4");

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/handler/LoggingElasticSearchPluginDataHandlerTest.java
Patch:
@@ -37,11 +37,11 @@ public final class LoggingElasticSearchPluginDataHandlerTest {
 
     private LoggingElasticSearchPluginDataHandler loggingElasticSearchPluginDataHandler;
 
-    private SelectorData selectorData = new SelectorData();
+    private final SelectorData selectorData = new SelectorData();
 
-    private ConditionData conditionData = new ConditionData();
+    private final ConditionData conditionData = new ConditionData();
 
-    private PluginData pluginData = new PluginData();
+    private final PluginData pluginData = new PluginData();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/collector/DefaultLogCollectorTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.plugin.logging.kafka.collector;
 
-import java.lang.reflect.Field;
-
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
@@ -27,12 +25,14 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.lang.reflect.Field;
+
 /**
  * The Test Case For DefaultLogCollector.
  */
 public class DefaultLogCollectorTest {
 
-    private ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
+    private final ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/config/LogCollectConfigTest.java
Patch:
@@ -25,8 +25,6 @@
  */
 public class LogCollectConfigTest {
 
-    private LogCollectConfig logCollectConfig = new LogCollectConfig();
-
     @Test
     public void testSetLogApiConfigTopic() {
         LogCollectConfig.LogApiConfig logApiConfig = new LogCollectConfig.LogApiConfig();
@@ -85,6 +83,7 @@ public void testSetGlobalLogConfigProducerGroup() {
 
     @Test
     public void testGetGlobalLogConfig() {
+        LogCollectConfig logCollectConfig = new LogCollectConfig();
         LogCollectConfig.GlobalLogConfig globalLogConfig = new LogCollectConfig.GlobalLogConfig();
         logCollectConfig.setGlobalLogConfig(globalLogConfig);
         Assertions.assertEquals(logCollectConfig.getGlobalLogConfig(), globalLogConfig);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/config/LogCollectConfig.java
Patch:
@@ -183,5 +183,4 @@ public void setTopic(final String topic) {
             this.topic = topic;
         }
     }
-
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/collector/DefaultLogCollectorTest.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class DefaultLogCollectorTest {
 
-    private ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
+    private final ShenyuRequestLog shenyuRequestLog = new ShenyuRequestLog();
 
     @BeforeEach
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/config/LogCollectConfigTest.java
Patch:
@@ -26,8 +26,6 @@
  */
 public class LogCollectConfigTest {
 
-    private LogCollectConfig logCollectConfig = new LogCollectConfig();
-
     @Test
     public void testSetLogApiConfigTopic() {
         LogCollectConfig.LogApiConfig logApiConfig = new LogCollectConfig.LogApiConfig();
@@ -86,13 +84,14 @@ public void testSetGlobalLogConfigProducerGroup() {
 
     @Test
     public void testGetGlobalLogConfig() {
+        LogCollectConfig logCollectConfig = new LogCollectConfig();
         LogCollectConfig.GlobalLogConfig globalLogConfig = new LogCollectConfig.GlobalLogConfig();
         logCollectConfig.setGlobalLogConfig(globalLogConfig);
         Assertions.assertEquals(logCollectConfig.getGlobalLogConfig(), globalLogConfig);
     }
 
     @Test
-    public void testtCompressAlg() {
+    public void testCompressAlg() {
         LogCollectConfig.GlobalLogConfig globalLogConfig = new LogCollectConfig.GlobalLogConfig();
         globalLogConfig.setCompressAlg("LZ4");
         Assertions.assertEquals(globalLogConfig.getCompressAlg(), "LZ4");

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/springboot/starter/plugin/logging/elasticsearch/LoggingElasticSearchPluginConfigurationTest.java
Patch:
@@ -58,7 +58,7 @@ public void testLoggingElasticSearchPlugin() {
                     assertNotNull(pluginDataHandler);
                     ShenyuPlugin plugin = context.getBean("loggingElasticSearchPlugin", ShenyuPlugin.class);
                     assertNotNull(plugin);
-                    assertThat(plugin.named()).isEqualTo(PluginEnum.LOGGING_ElasticSearch.getName());
+                    assertThat(plugin.named()).isEqualTo(PluginEnum.LOGGING_ELASTIC_SEARCH.getName());
                 });
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RocketMqPluginTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.shenyu.plugin.logging.rocketmq.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
-import org.apache.shenyu.plugin.logging.rocketmq.utils.RocketLogCollectConfigUtils;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -70,7 +69,7 @@ public void testPass() {
         logs.add(shenyuRequestLog);
 
         String msg = "";
-        RocketLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+        LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
         rocketMQLogCollectClient.initProducer(properties);
         try {
             rocketMQLogCollectClient.consume(logs);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/main/java/org/apache/shenyu/plugin/aliyun/sls/handler/LoggingAliYunSlsPluginDataHandler.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.shenyu.plugin.aliyun.sls.aliyunsls.AliyunSlsLogCollectClient;
 import org.apache.shenyu.plugin.aliyun.sls.config.LogCollectConfig;
 import org.apache.shenyu.plugin.aliyun.sls.constant.LoggingConstant;
-import org.apache.shenyu.plugin.aliyun.sls.utils.AliyunSlsLogCollectConfigUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -55,7 +54,7 @@ public void handlerPlugin(final PluginData pluginData) {
             }
             if (Objects.isNull(exist) || !globalLogConfig.equals(exist)) {
                 // no data, init client
-                AliyunSlsLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+                LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
                 Properties properties = new Properties();
                 properties.setProperty(LoggingConstant.ACCESS_ID, globalLogConfig.getAccessId().trim());
                 properties.setProperty(LoggingConstant.ACCESS_KEY, globalLogConfig.getAccessKey().trim());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-aliyun-sls/src/test/java/org/apache/shenyu/plugin/aliyun/sls/aliyunsls/AliyunSlsLogCollectClientTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.aliyun.sls.config.LogCollectConfig;
 import org.apache.shenyu.plugin.aliyun.sls.constant.LoggingConstant;
-import org.apache.shenyu.plugin.aliyun.sls.utils.AliyunSlsLogCollectConfigUtils;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -87,7 +86,7 @@ public void testInitClient() throws NoSuchFieldException, IllegalAccessException
     @Test
     public void testConsume() {
         String msg = "";
-        AliyunSlsLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+        LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
         aliyunSlsLogCollectClient.initClient(props);
         try {
             aliyunSlsLogCollectClient.consume(logs);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/handler/LoggingElasticSearchPluginDataHandler.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.shenyu.plugin.logging.elasticsearch.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.elasticsearch.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
-import org.apache.shenyu.plugin.logging.elasticsearch.utils.ElasticSearchLogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -64,7 +63,7 @@ public void handlerPlugin(final PluginData pluginData) {
             LogCollectConfig.GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(),
                     LogCollectConfig.GlobalLogConfig.class);
 
-            ElasticSearchLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+            LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
             Properties properties = new Properties();
             properties.setProperty(LoggingConstant.HOST, globalLogConfig.getHost());
             properties.setProperty(LoggingConstant.PORT, globalLogConfig.getPort());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/client/ElasticSearchLogCollectClientTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.elasticsearch.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.elasticsearch.constant.LoggingConstant;
-import org.apache.shenyu.plugin.logging.elasticsearch.utils.ElasticSearchLogCollectConfigUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -66,7 +65,7 @@ public void setUp() {
     @Test
     public void testConsume() {
         String msg = "";
-        ElasticSearchLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+        LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
         elasticSearchLogCollectClient.initClient(properties);
         try {
             elasticSearchLogCollectClient.consume(logs);
@@ -79,7 +78,7 @@ public void testConsume() {
 
     @Test
     public void testCreateIndex() {
-        ElasticSearchLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+        LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
         elasticSearchLogCollectClient.initClient(properties);
         elasticSearchLogCollectClient.createIndex("test");
     }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/handler/LoggingKafkaPluginDataHandler.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.shenyu.plugin.logging.kafka.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.kafka.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.kafka.kafka.KafkaLogCollectClient;
-import org.apache.shenyu.plugin.logging.kafka.utils.KafkaLogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -93,7 +92,7 @@ public void handlerPlugin(final PluginData pluginData) {
             LogCollectConfig.GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(),
                 LogCollectConfig.GlobalLogConfig.class);
 
-            KafkaLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+            LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
             // start kafka producer
             Properties properties = new Properties();
             properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/kafka/KafkaLogCollectClient.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.entity.LZ4CompressData;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.kafka.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.kafka.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.kafka.utils.KafkaLogCollectConfigUtils;
 import org.slf4j.Logger;
@@ -117,7 +118,7 @@ public void consume(final List<ShenyuRequestLog> logs) {
 
     private ProducerRecord<String, String> toProducerRecord(final String logTopic, final ShenyuRequestLog log) {
         byte[] bytes = JsonUtils.toJson(log).getBytes(StandardCharsets.UTF_8);
-        String compressAlg = StringUtils.defaultIfBlank(KafkaLogCollectConfigUtils.getGlobalLogConfig().getCompressAlg(), "");
+        String compressAlg = StringUtils.defaultIfBlank(LogCollectConfig.INSTANCE.getGlobalLogConfig().getCompressAlg(), "");
         if ("LZ4".equalsIgnoreCase(compressAlg.trim())) {
             LZ4CompressData lz4CompressData = new LZ4CompressData(bytes.length, compressedByte(bytes));
             return new ProducerRecord<>(logTopic, JsonUtils.toJson(lz4CompressData));

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/client/RocketMQLogCollectClient.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rocketmq.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.common.entity.LZ4CompressData;
 import org.apache.shenyu.plugin.logging.rocketmq.utils.RocketLogCollectConfigUtils;
@@ -110,7 +111,7 @@ public void consume(final List<ShenyuRequestLog> logs) {
 
     private Message toMessage(final String logTopic, final ShenyuRequestLog log) {
         byte[] bytes = JsonUtils.toJson(log).getBytes(StandardCharsets.UTF_8);
-        String compressAlg = StringUtils.defaultIfBlank(RocketLogCollectConfigUtils.getGlobalLogConfig().getCompressAlg(), "");
+        String compressAlg = StringUtils.defaultIfBlank(LogCollectConfig.INSTANCE.getGlobalLogConfig().getCompressAlg(), "");
         if ("LZ4".equalsIgnoreCase(compressAlg.trim())) {
             LZ4CompressData lz4CompressData = new LZ4CompressData(bytes.length, compressedByte(bytes));
             return new Message(logTopic, JsonUtils.toJson(lz4CompressData).getBytes(StandardCharsets.UTF_8));

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/handler/LoggingRocketMQPluginDataHandler.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.shenyu.plugin.logging.rocketmq.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
-import org.apache.shenyu.plugin.logging.rocketmq.utils.RocketLogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -65,7 +64,7 @@ public void handlerPlugin(final PluginData pluginData) {
             LogCollectConfig.GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(),
                     LogCollectConfig.GlobalLogConfig.class);
 
-            RocketLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+            LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
             // start rocketmq producer
             Properties properties = new Properties();
             properties.setProperty(LoggingConstant.TOPIC, globalLogConfig.getTopic());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/client/RocketMQLogCollectClientTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.rocketmq.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
-import org.apache.shenyu.plugin.logging.rocketmq.utils.RocketLogCollectConfigUtils;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -67,7 +66,7 @@ public void setUp() {
     @Test
     public void testConsume() {
         String msg = "";
-        RocketLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+        LogCollectConfig.INSTANCE.setGlobalLogConfig(globalLogConfig);
         rocketMQLogCollectClient.initProducer(properties);
         try {
             rocketMQLogCollectClient.consume(logs);

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/executor/CombinedExecutor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.plugin.resilience4j.factory.Resilience4JRegistryFactory;
 import reactor.core.publisher.Mono;
 
+import java.time.Duration;
 import java.util.Objects;
 import java.util.function.Function;
 import java.util.concurrent.TimeUnit;
@@ -40,9 +41,10 @@ public class CombinedExecutor implements Executor {
     public <T> Mono<T> run(final Mono<T> run, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf resilience4JConf) {
         RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(resilience4JConf.getId(), resilience4JConf.getRateLimiterConfig());
         CircuitBreaker circuitBreaker = Resilience4JRegistryFactory.circuitBreaker(resilience4JConf.getId(), resilience4JConf.getCircuitBreakerConfig());
+        final Duration timeoutDuration = resilience4JConf.getTimeLimiterConfig().getTimeoutDuration();
         Mono<T> to = run.transformDeferred(CircuitBreakerOperator.of(circuitBreaker))
                 .transformDeferred(RateLimiterOperator.of(rateLimiter))
-                .timeout(resilience4JConf.getTimeLimiterConfig().getTimeoutDuration())
+                .timeout(timeoutDuration, Mono.error(new TimeoutException("Response took longer than timeout: " + timeoutDuration)))
                 .doOnError(TimeoutException.class, t -> circuitBreaker.onError(
                         resilience4JConf.getTimeLimiterConfig().getTimeoutDuration().toMillis(),
                         TimeUnit.MILLISECONDS,

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/PluginMapper.java
Patch:
@@ -192,9 +192,10 @@ public interface PluginMapper extends ExistProvider {
     /**
      * active plugin snapshot.
      *
+     * @param userId user Id
      * @return plugin list
      */
-    List<PluginSnapshotVO> activePluginSnapshot();
+    List<PluginSnapshotVO> activePluginSnapshot(@Param("userId")String userId);
     
     /**
      * search by condition.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginServiceImpl.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.shenyu.admin.transfer.PluginTransfer;
 import org.apache.shenyu.admin.utils.Assert;
 import org.apache.shenyu.admin.utils.ListUtil;
+import org.apache.shenyu.admin.utils.SessionUtil;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.dto.PluginData;
@@ -184,7 +185,7 @@ public PluginDO findByName(final String name) {
     
     @Override
     public List<PluginSnapshotVO> activePluginSnapshot() {
-        return pluginMapper.activePluginSnapshot();
+        return pluginMapper.activePluginSnapshot(AdminConstants.ADMIN_NAME.equals(SessionUtil.visitorName()) ? null : SessionUtil.visitor().getUserId());
     }
     
     /**

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/LoggingElasticSearchPluginTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.elasticsearch.client.RestClient;
 import org.junit.jupiter.api.AfterAll;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/client/LogConsumeClient.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.client;
+package org.apache.shenyu.plugin.logging.common.client;
 
-import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 
 import java.util.List;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/collector/LogCollector.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.kafka;
+package org.apache.shenyu.plugin.logging.common.collector;
 
-import org.apache.shenyu.plugin.logging.kafka.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 
 /**
  * Collect logs and put into buffer queue.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/entity/LZ4CompressData.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.kafka.entity;
+package org.apache.shenyu.plugin.logging.common.entity;
 
 /**
  * Lz4 compressed data.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/entity/ShenyuRequestLog.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.kafka.entity;
+package org.apache.shenyu.plugin.logging.common.entity;
 
 /**
  * shenyu gateway access log.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/sampler/CountSampler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.sampler;
+package org.apache.shenyu.plugin.logging.common.sampler;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;
@@ -38,7 +38,7 @@ public class CountSampler implements Sampler {
     /**
      * Fills a bitset with decisions according to the supplied probability.
      */
-    CountSampler(final float probability) {
+    public CountSampler(final float probability) {
         counter = new AtomicInteger();
         int percent = (int) (probability * 100.0f);
         this.sampleDecisions = genRandomBitSet(100, percent);

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/sampler/Sampler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.kafka.sampler;
+package org.apache.shenyu.plugin.logging.common.sampler;
 
 import org.springframework.http.server.reactive.ServerHttpRequest;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/main/java/org/apache/shenyu/plugin/logging/common/utils/LogCollectUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.utils;
+package org.apache.shenyu.plugin.logging.common.utils;
 
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.springframework.http.HttpHeaders;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/test/java/org/apache/shenyu/plugin/logging/common/entity/LZ4CompressDataTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.entity;
+package org.apache.shenyu.plugin.logging.common.entity;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/test/java/org/apache/shenyu/plugin/logging/common/entity/ShenyuRequestLogTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.entity;
+package org.apache.shenyu.plugin.logging.common.entity;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/test/java/org/apache/shenyu/plugin/logging/common/sampler/CountSamplerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.sampler;
+package org.apache.shenyu.plugin.logging.common.sampler;
 
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-common/src/test/java/org/apache/shenyu/plugin/logging/common/utils/LogCollectUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.utils;
+package org.apache.shenyu.plugin.logging.common.utils;
 
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/client/ElasticSearchLogCollectClient.java
Patch:
@@ -25,8 +25,9 @@
 import co.elastic.clients.transport.rest_client.RestClientTransport;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.http.HttpHost;
+import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.elasticsearch.constant.LoggingConstant;
-import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 import org.elasticsearch.client.RestClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/DefaultLogCollector.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.shenyu.plugin.logging.elasticsearch.collector;
 
-import org.apache.shenyu.plugin.logging.elasticsearch.client.LogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
+import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.elasticsearch.handler.LoggingElasticSearchPluginDataHandler;
 
 /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/constant/LoggingConstant.java
Patch:
@@ -28,5 +28,4 @@ public class LoggingConstant {
 
     public static final String PORT = "port";
 
-    public static final String SHENYU_AGENT_TRACE_ID = "shenyu-agent-trace-id";
 }

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/handler/LoggingElasticSearchPluginDataHandler.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.plugin.logging.elasticsearch.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.elasticsearch.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
-import org.apache.shenyu.plugin.logging.elasticsearch.utils.LogCollectConfigUtils;
+import org.apache.shenyu.plugin.logging.elasticsearch.utils.ElasticSearchLogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -64,7 +64,7 @@ public void handlerPlugin(final PluginData pluginData) {
             LogCollectConfig.GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(),
                     LogCollectConfig.GlobalLogConfig.class);
 
-            LogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+            ElasticSearchLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
             Properties properties = new Properties();
             properties.setProperty(LoggingConstant.HOST, globalLogConfig.getHost());
             properties.setProperty(LoggingConstant.PORT, globalLogConfig.getPort());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/DefaultLogCollectorTest.java
Patch:
@@ -17,9 +17,10 @@
 
 package org.apache.shenyu.plugin.logging.elasticsearch.collector;
 
+import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
-import org.apache.shenyu.plugin.logging.elasticsearch.client.LogConsumeClient;
-import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/constant/LoggingConstant.java
Patch:
@@ -26,7 +26,5 @@ public final class LoggingConstant {
 
     public static final String NAMESERVER_ADDRESS = "namesrvAddr";
 
-    public static final String SHENYU_AGENT_TRACE_ID = "shenyu-agent-trace-id";
-
 }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/main/java/org/apache/shenyu/plugin/logging/kafka/handler/LoggingKafkaPluginDataHandler.java
Patch:
@@ -33,11 +33,11 @@
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.logging.kafka.DefaultLogCollector;
+import org.apache.shenyu.plugin.logging.kafka.collector.DefaultLogCollector;
 import org.apache.shenyu.plugin.logging.kafka.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.kafka.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.kafka.kafka.KafkaLogCollectClient;
-import org.apache.shenyu.plugin.logging.kafka.utils.LogCollectConfigUtils;
+import org.apache.shenyu.plugin.logging.kafka.utils.KafkaLogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -93,7 +93,7 @@ public void handlerPlugin(final PluginData pluginData) {
             LogCollectConfig.GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(),
                 LogCollectConfig.GlobalLogConfig.class);
 
-            LogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+            KafkaLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
             // start kafka producer
             Properties properties = new Properties();
             properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-kafka/src/test/java/org/apache/shenyu/plugin/logging/kafka/kafka/KafkaLogCollectClientTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.kafka.common.serialization.StringSerializer;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.kafka.config.LogCollectConfig.GlobalLogConfig;
 import org.apache.shenyu.plugin.logging.kafka.constant.LoggingConstant;
-import org.apache.shenyu.plugin.logging.kafka.entity.ShenyuRequestLog;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/collector/DefaultLogCollector.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.shenyu.plugin.logging.rocketmq.collector;
 
-import org.apache.shenyu.plugin.logging.rocketmq.client.LogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
+import org.apache.shenyu.plugin.logging.common.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.rocketmq.handler.LoggingRocketMQPluginDataHandler;
 
 /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/constant/LoggingConstant.java
Patch:
@@ -27,7 +27,5 @@ public final class LoggingConstant {
     public static final String NAMESERVER_ADDRESS = "namesrvAddr";
 
     public static final String PRODUCER_GROUP = "producerGroup";
-
-    public static final String SHENYU_AGENT_TRACE_ID = "shenyu-agent-trace-id";
 }
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/handler/LoggingRocketMQPluginDataHandler.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.plugin.logging.rocketmq.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
-import org.apache.shenyu.plugin.logging.rocketmq.utils.LogCollectConfigUtils;
+import org.apache.shenyu.plugin.logging.rocketmq.utils.RocketLogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -65,7 +65,7 @@ public void handlerPlugin(final PluginData pluginData) {
             LogCollectConfig.GlobalLogConfig globalLogConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(),
                     LogCollectConfig.GlobalLogConfig.class);
 
-            LogCollectConfigUtils.setGlobalConfig(globalLogConfig);
+            RocketLogCollectConfigUtils.setGlobalConfig(globalLogConfig);
             // start rocketmq producer
             Properties properties = new Properties();
             properties.setProperty(LoggingConstant.TOPIC, globalLogConfig.getTopic());

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/collector/DefaultLogCollectorTest.java
Patch:
@@ -17,8 +17,9 @@
 
 package org.apache.shenyu.plugin.logging.rocketmq.collector;
 
-import org.apache.shenyu.plugin.logging.rocketmq.client.LogConsumeClient;
-import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.common.client.LogConsumeClient;
+import org.apache.shenyu.plugin.logging.common.collector.AbstractLogCollector;
+import org.apache.shenyu.plugin.logging.common.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -138,7 +138,7 @@ public enum PluginEnum {
     LOGGING_ROCKETMQ(170, 0, "loggingRocketMQ"),
 
     /**
-     * Logging RocketMQ plugin enum.
+     * Logging Kafka plugin enum.
      */
     LOGGING_KAFKA(180, 0, "loggingKafka"),
   

File: shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java
Patch:
@@ -1143,7 +1143,7 @@ public static class AllowedOriginConfig {
 
             private Set<String> prefixes = new HashSet<>();
 
-            private String origins;
+            private Set<String> origins;
 
             /**
              * Gets the spacer.
@@ -1204,7 +1204,7 @@ public void setPrefixes(final Set<String> prefixes) {
              *
              * @return the value of prefixes
              */
-            public String getOrigins() {
+            public Set<String> getOrigins() {
                 return origins;
             }
 
@@ -1213,7 +1213,7 @@ public String getOrigins() {
              *
              * @param origins origins
              */
-            public void setOrigins(final String origins) {
+            public void setOrigins(final Set<String> origins) {
                 this.origins = origins;
             }
         }

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/CrossFilter.java
Patch:
@@ -76,7 +76,8 @@ public Mono<Void> filter(@NonNull final ServerWebExchange exchange, @NonNull fin
                                 StringUtils.defaultString(allowedOriginConfig.getDomain(), "").trim()))
                         .collect(Collectors.toSet());
                 // add all origin domains
-                allowedOrigin.addAll(Stream.of(StringUtils.defaultString(allowedOriginConfig.getOrigins(), "").split(","))
+                allowedOrigin.addAll(Optional.ofNullable(allowedOriginConfig.getOrigins()).orElse(Collections.emptySet())
+                        .stream()
                         .filter(StringUtils::isNoneBlank)
                         .map(oneOrigin -> {
                             if (ALL.equals(oneOrigin) || oneOrigin.startsWith(String.format("%s://", scheme))) {

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/CrossFilterTest.java
Patch:
@@ -93,6 +93,7 @@ public void testCorsWhitelist() {
                 add("a");
             }
         });
+        allowedOriginConfig.setOrigins("b.apache.org,c.apache.org,http://d.apache.org,*");
         filterConfig.setAllowedOrigin(allowedOriginConfig);
         CrossFilter filter = new CrossFilter(filterConfig);
         StepVerifier.create(filter.filter(exchange, chainNormal))

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/subscriber/SignAuthDataSubscriber.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.plugin.sign.subscriber;
 
+import org.apache.shenyu.common.dto.AppAuthData;
 import org.apache.shenyu.plugin.sign.cache.SignAuthDataCache;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
-import org.apache.shenyu.common.dto.AppAuthData;
 
 /**
  * The type Sign auth data subscriber.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/manager/impl/SwaggerDocParser.java
Patch:
@@ -170,12 +170,11 @@ protected DocItem buildDocItem(final JsonObject docInfo, final JsonObject docRoo
     }
 
     protected String buildModuleName(final JsonObject docInfo, final JsonObject docRoot, final String basePath) {
-        final String title = Optional.ofNullable(docRoot.getAsJsonObject("info")).map(jsonObject -> jsonObject.get("title").getAsString()).orElse(basePath);
         JsonArray tags = docInfo.getAsJsonArray("tags");
         if (Objects.nonNull(tags) && tags.size() > 0) {
             return tags.get(0).getAsString();
         }
-        return title;
+        return Optional.ofNullable(docRoot.getAsJsonObject("info")).map(jsonObject -> jsonObject.get("title").getAsString()).orElse(basePath);
     }
 
     protected List<DocParameter> buildRequestParameterList(final JsonObject docInfo, final JsonObject docRoot) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/CommonUpstreamUtils.java
Patch:
@@ -171,7 +171,7 @@ public static List<CommonUpstream> convertCommonUpstreamList(final List<? extend
         return Optional.ofNullable(upstreamList)
                 .orElse(Collections.emptyList())
                 .stream()
-                .map(upstream -> new CommonUpstream(upstream.getProtocol(), upstream.getUpstreamHost(), upstream.getUpstreamUrl(), upstream.isStatus()))
+                .map(upstream -> new CommonUpstream(upstream.getProtocol(), upstream.getUpstreamHost(), upstream.getUpstreamUrl(), upstream.isStatus(), upstream.getTimestamp()))
                 .collect(Collectors.toList());
     }
     

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/selector/CommonUpstreamTest.java
Patch:
@@ -47,8 +47,8 @@ public void testGetterSetter() {
     
     @Test
     public void testEqualsAndHashCode() {
-        CommonUpstream upstream1 = new CommonUpstream("protocol", "host", "url", true);
-        CommonUpstream upstream2 = new CommonUpstream("protocol", "host", "url", true);
+        CommonUpstream upstream1 = new CommonUpstream("protocol", "host", "url", true, System.currentTimeMillis());
+        CommonUpstream upstream2 = new CommonUpstream("protocol", "host", "url", true, System.currentTimeMillis());
         
         assertThat(ImmutableSet.of(upstream1, upstream2), hasSize(1));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/MetaDataController.java
Patch:
@@ -63,17 +63,17 @@ public MetaDataController(final MetaDataService metaDataService) {
     /**
      * Query metadata list.
      *
-     * @param appName     the app name
+     * @param path     the path
      * @param currentPage the current page
      * @param pageSize    the page size
      * @return the shenyu result
      */
     @GetMapping("/queryList")
     @RequiresPermissions("system:meta:list")
-    public ShenyuAdminResult queryList(final String appName,
+    public ShenyuAdminResult queryList(final String path,
                                        @RequestParam @NotNull(message = "currentPage not null") final Integer currentPage,
                                        @RequestParam @NotNull(message = "pageSize not null") final Integer pageSize) {
-        CommonPager<MetaDataVO> commonPager = metaDataService.listByPage(new MetaDataQuery(appName, new PageParameter(currentPage, pageSize)));
+        CommonPager<MetaDataVO> commonPager = metaDataService.listByPage(new MetaDataQuery(path, new PageParameter(currentPage, pageSize)));
         return ShenyuAdminResult.success(ShenyuResultMessage.QUERY_SUCCESS, commonPager);
     }
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MetaDataControllerTest.java
Patch:
@@ -97,10 +97,10 @@ public void testQueryList() throws Exception {
         final CommonPager<MetaDataVO> commonPager = new CommonPager<>();
         commonPager.setPage(pageParameter);
         commonPager.setDataList(metaDataVOS);
-        final MetaDataQuery metaDataQuery = new MetaDataQuery("appName", pageParameter);
+        final MetaDataQuery metaDataQuery = new MetaDataQuery("path", pageParameter);
         given(this.metaDataService.listByPage(metaDataQuery)).willReturn(commonPager);
         this.mockMvc.perform(MockMvcRequestBuilders.get("/meta-data/queryList")
-                .param("appName", "appName")
+                .param("path", "path")
                 .param("currentPage", pageParameter.getCurrentPage() + "")
                 .param("pageSize", pageParameter.getPageSize() + ""))
                 .andExpect(status().isOk())

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MetaDataMapperTest.java
Patch:
@@ -120,7 +120,7 @@ public void selectByQuery() {
         assertThat(count, comparesEqualTo(1));
 
         MetaDataQuery metaDataQuery = new MetaDataQuery();
-        metaDataQuery.setAppName(metaDataDO.getAppName());
+        metaDataQuery.setPath(metaDataDO.getPath());
         metaDataQuery.setPageParameter(new PageParameter());
 
         List<MetaDataDO> result = metaDataMapper.selectByQuery(metaDataQuery);
@@ -146,7 +146,7 @@ public void countByQuery() {
         assertThat(count, comparesEqualTo(1));
 
         MetaDataQuery metaDataQuery = new MetaDataQuery();
-        metaDataQuery.setAppName(metaDataDO.getAppName());
+        metaDataQuery.setPath(metaDataDO.getPath());
         metaDataQuery.setPageParameter(new PageParameter());
 
         count = metaDataMapper.countByQuery(metaDataQuery);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/OperationRecordLog.java
Patch:
@@ -18,6 +18,8 @@
 package org.apache.shenyu.admin.model.entity;
 
 import com.fasterxml.jackson.annotation.JsonFormat;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
 
 import java.util.Date;
 
@@ -29,6 +31,7 @@ public class OperationRecordLog {
     /**
      * id.
      */
+    @JsonSerialize(using = ToStringSerializer.class)
     private Long id;
     
     /**

File: shenyu-common/src/test/java/org/apache/shenyu/common/config/ShenyuConfigTest.java
Patch:
@@ -258,7 +258,7 @@ public void testCrossFilterConfig() {
 
         String allowedExpose = cross.getAllowedExpose();
         String allowedHeaders = cross.getAllowedHeaders();
-        String allowedOrigin = cross.getAllowedOrigin();
+        ShenyuConfig.CrossFilterConfig.AllowedOriginConfig allowedOrigin = cross.getAllowedOrigin();
         Boolean enabled = cross.getEnabled();
         String maxAge = cross.getMaxAge();
         String allowedMethods = cross.getAllowedMethods();

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/LoggingElasticSearchPlugin.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.plugin.base.utils.HostAddressUtils;
 import org.apache.shenyu.plugin.logging.elasticsearch.body.LoggingElasticSearchServerHttpRequest;
 import org.apache.shenyu.plugin.logging.elasticsearch.body.LoggingElasticSearchServerResponse;
+import org.apache.shenyu.plugin.logging.elasticsearch.collector.DefaultLogCollector;
 import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.elasticsearch.utils.LogCollectConfigUtils;
 import org.apache.shenyu.plugin.logging.elasticsearch.utils.LogCollectUtils;
@@ -74,7 +75,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
     /**
      * get plugin order.
      *
-     * @return order
+     * @return plugin order
      */
     @Override
     public int getOrder() {

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/body/LoggingElasticSearchServerHttpRequest.java
Patch:
@@ -28,7 +28,7 @@
 import reactor.util.annotation.NonNull;
 
 /**
- * decorate ServerHttpRequest for read org.apache.shenyu.plugin.logging.body.
+ * decorate ServerHttpRequest for read org.apache.shenyu.plugin.logging-elasticsearch.body.
  */
 public class LoggingElasticSearchServerHttpRequest extends ServerHttpRequestDecorator {
     
@@ -40,7 +40,7 @@ public LoggingElasticSearchServerHttpRequest(final ServerHttpRequest delegate, f
     }
 
     /**
-     * get request org.apache.shenyu.plugin.logging.body.
+     * get request org.apache.shenyu.plugin.logging-elasticsearch.body.
      *
      * @return Flux
      */

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/client/LogConsumeClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.elasticsearch;
+package org.apache.shenyu.plugin.logging.elasticsearch.client;
 
 import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/AbstractLogCollector.java
Patch:
@@ -15,14 +15,15 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.elasticsearch;
+package org.apache.shenyu.plugin.logging.elasticsearch.collector;
 
 import org.apache.shenyu.common.concurrent.MemorySafeTaskQueue;
 import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
 import org.apache.shenyu.common.concurrent.ShenyuThreadPoolExecutor;
 import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.ThreadUtils;
+import org.apache.shenyu.plugin.logging.elasticsearch.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.elasticsearch.utils.LogCollectConfigUtils;
 import org.slf4j.Logger;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/DefaultLogCollector.java
Patch:
@@ -15,8 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.elasticsearch;
+package org.apache.shenyu.plugin.logging.elasticsearch.collector;
 
+import org.apache.shenyu.plugin.logging.elasticsearch.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.elasticsearch.handler.LoggingElasticSearchPluginDataHandler;
 
 /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/LogCollector.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.elasticsearch;
+package org.apache.shenyu.plugin.logging.elasticsearch.collector;
 
 import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/config/LogCollectConfig.java
Patch:
@@ -67,6 +67,9 @@ public static class GlobalLogConfig {
          */
         private int maxRequestBody = 524288;
 
+        /**
+         * default 50000.
+         */
         private int bufferQueueSize = 50000;
 
         /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/main/java/org/apache/shenyu/plugin/logging/elasticsearch/handler/LoggingElasticSearchPluginDataHandler.java
Patch:
@@ -26,10 +26,10 @@
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.logging.elasticsearch.DefaultLogCollector;
+import org.apache.shenyu.plugin.logging.elasticsearch.collector.DefaultLogCollector;
 import org.apache.shenyu.plugin.logging.elasticsearch.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.elasticsearch.constant.LoggingConstant;
-import org.apache.shenyu.plugin.logging.elasticsearch.elasticsearch.ElasticSearchLogCollectClient;
+import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
 import org.apache.shenyu.plugin.logging.elasticsearch.utils.LogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/body/LoggingElasticSearchServerHttpResponseTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.utils.HostAddressUtils;
-import org.apache.shenyu.plugin.logging.elasticsearch.DefaultLogCollector;
+import org.apache.shenyu.plugin.logging.elasticsearch.collector.DefaultLogCollector;
 import org.apache.shenyu.plugin.logging.elasticsearch.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.elasticsearch.utils.LogCollectUtils;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/collector/DefaultLogCollectorTest.java
Patch:
@@ -15,9 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.elasticsearch;
+package org.apache.shenyu.plugin.logging.elasticsearch.collector;
 
-import org.apache.shenyu.plugin.logging.elasticsearch.elasticsearch.ElasticSearchLogCollectClient;
+import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
+import org.apache.shenyu.plugin.logging.elasticsearch.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.elasticsearch.entity.ShenyuRequestLog;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-elasticsearch/src/test/java/org/apache/shenyu/plugin/logging/elasticsearch/handler/LoggingElasticSearchPluginDataHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.plugin.logging.elasticsearch.elasticsearch.ElasticSearchLogCollectClient;
+import org.apache.shenyu.plugin.logging.elasticsearch.client.ElasticSearchLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/LoggingRocketMQPlugin.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.plugin.base.utils.HostAddressUtils;
 import org.apache.shenyu.plugin.logging.rocketmq.body.LoggingServerHttpRequest;
 import org.apache.shenyu.plugin.logging.rocketmq.body.LoggingServerHttpResponse;
+import org.apache.shenyu.plugin.logging.rocketmq.collector.DefaultLogCollector;
 import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.rocketmq.utils.LogCollectConfigUtils;
 import org.apache.shenyu.plugin.logging.rocketmq.utils.LogCollectUtils;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/body/LoggingServerHttpResponse.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
-import org.apache.shenyu.plugin.logging.rocketmq.DefaultLogCollector;
-import org.apache.shenyu.plugin.logging.rocketmq.LogCollector;
+import org.apache.shenyu.plugin.logging.rocketmq.collector.DefaultLogCollector;
+import org.apache.shenyu.plugin.logging.rocketmq.collector.LogCollector;
 import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.rocketmq.utils.LogCollectConfigUtils;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/client/LogConsumeClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq;
+package org.apache.shenyu.plugin.logging.rocketmq.client;
 
 import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/client/RocketMQLogCollectClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.rocketmq;
+package org.apache.shenyu.plugin.logging.rocketmq.client;
 
 import net.jpountz.lz4.LZ4Compressor;
 import net.jpountz.lz4.LZ4Factory;
@@ -25,7 +25,6 @@
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.shenyu.common.utils.JsonUtils;
-import org.apache.shenyu.plugin.logging.rocketmq.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.rocketmq.entity.LZ4CompressData;
 import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/collector/DefaultLogCollector.java
Patch:
@@ -15,8 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq;
+package org.apache.shenyu.plugin.logging.rocketmq.collector;
 
+import org.apache.shenyu.plugin.logging.rocketmq.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.rocketmq.handler.LoggingRocketMQPluginDataHandler;
 
 /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/collector/LogCollector.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq;
+package org.apache.shenyu.plugin.logging.rocketmq.collector;
 
 import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/config/LogCollectConfig.java
Patch:
@@ -68,6 +68,9 @@ public static class GlobalLogConfig {
          */
         private int maxRequestBody = 524288;
 
+        /**
+         * default 50000.
+         */
         private int bufferQueueSize = 50000;
 
         /**

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/handler/LoggingRocketMQPluginDataHandler.java
Patch:
@@ -26,10 +26,10 @@
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.logging.rocketmq.DefaultLogCollector;
+import org.apache.shenyu.plugin.logging.rocketmq.collector.DefaultLogCollector;
 import org.apache.shenyu.plugin.logging.rocketmq.config.LogCollectConfig;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
-import org.apache.shenyu.plugin.logging.rocketmq.rocketmq.RocketMQLogCollectClient;
+import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.apache.shenyu.plugin.logging.rocketmq.utils.LogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/body/LoggingServerHttpResponseTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.utils.HostAddressUtils;
-import org.apache.shenyu.plugin.logging.rocketmq.DefaultLogCollector;
+import org.apache.shenyu.plugin.logging.rocketmq.collector.DefaultLogCollector;
 import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
 import org.apache.shenyu.plugin.logging.rocketmq.constant.LoggingConstant;
 import org.apache.shenyu.plugin.logging.rocketmq.utils.LogCollectUtils;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/client/RocketMQLogCollectClientTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq.rocketmq;
+package org.apache.shenyu.plugin.logging.rocketmq.client;
 
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/collector/DefaultLogCollectorTest.java
Patch:
@@ -15,10 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.rocketmq;
+package org.apache.shenyu.plugin.logging.rocketmq.collector;
 
+import org.apache.shenyu.plugin.logging.rocketmq.client.LogConsumeClient;
 import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.rocketmq.rocketmq.RocketMQLogCollectClient;
+import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/handler/LoggingRocketMQPluginDataHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.plugin.logging.rocketmq.rocketmq.RocketMQLogCollectClient;
+import org.apache.shenyu.plugin.logging.rocketmq.client.RocketMQLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -203,7 +203,7 @@ public RuleService getRuleService() {
      */
     protected boolean doSubmit(final String selectorId, final List<? extends CommonUpstream> upstreamList) {
         List<CommonUpstream> commonUpstreamList = CommonUpstreamUtils.convertCommonUpstreamList(upstreamList);
-        return commonUpstreamList.stream().map(upstream -> upstreamCheckService.submit(selectorId, upstream))
+        return commonUpstreamList.stream().map(upstream -> upstreamCheckService.checkAndSubmit(selectorId, upstream))
                 .collect(Collectors.toList()).stream().findAny().orElse(false);
     }
     

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonPluginDataSubscriber.java
Patch:
@@ -122,6 +122,7 @@ public void unSelectorSubscribe(final SelectorData selectorData) {
     @Override
     public void refreshSelectorDataAll() {
         BaseDataCache.getInstance().cleanSelectorData();
+        MatchDataCache.getInstance().cleanSelectorData();
     }
     
     @Override
@@ -189,6 +190,7 @@ private <T> void updateCacheData(@NonNull final T data) {
         } else if (data instanceof SelectorData) {
             SelectorData selectorData = (SelectorData) data;
             BaseDataCache.getInstance().cacheSelectData(selectorData);
+            MatchDataCache.getInstance().removeSelectorData(selectorData.getPluginName());
             Optional.ofNullable(handlerMap.get(selectorData.getPluginName()))
                     .ifPresent(handler -> handler.handlerSelector(selectorData));
             
@@ -233,6 +235,7 @@ private <T> void removeCacheData(@NonNull final T data) {
         } else if (data instanceof SelectorData) {
             SelectorData selectorData = (SelectorData) data;
             BaseDataCache.getInstance().removeSelectData(selectorData);
+            MatchDataCache.getInstance().removeSelectorData(selectorData.getPluginName());
             Optional.ofNullable(handlerMap.get(selectorData.getPluginName()))
                     .ifPresent(handler -> handler.removeSelector(selectorData));
             

File: shenyu-web/src/main/java/org/apache/shenyu/web/controller/LocalPluginController.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
+import org.apache.shenyu.plugin.base.cache.MatchDataCache;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -93,6 +94,7 @@ public Mono<String> cleanPlugin(@RequestParam("name") final String name) {
         List<SelectorData> selectorData = BaseDataCache.getInstance().obtainSelectorData(name);
         List<String> selectorIds = selectorData.stream().map(SelectorData::getId).collect(Collectors.toList());
         BaseDataCache.getInstance().removeSelectDataByPluginName(name);
+        MatchDataCache.getInstance().removeSelectorData(name);
         for (String selectorId : selectorIds) {
             BaseDataCache.getInstance().removeRuleDataBySelectorId(selectorId);
         }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/ShenyuNettyWebServerConfiguration.java
Patch:
@@ -55,7 +55,7 @@ public NettyHttpProperties nettyTcpProperties() {
      * @return the netty reactive web server factory
      */
     @Bean
-    @ConditionalOnProperty(value = "shenyu.netty.http.webServerFactoryEnabled", havingValue = "true", matchIfMissing = true)
+    @ConditionalOnProperty(value = "shenyu.netty.http.web-server-factory-enabled", havingValue = "true", matchIfMissing = true)
     public NettyReactiveWebServerFactory nettyReactiveWebServerFactory(final ObjectProvider<NettyHttpProperties> properties) {
         NettyReactiveWebServerFactory webServerFactory = new NettyReactiveWebServerFactory();
         NettyHttpProperties nettyHttpProperties = Optional.ofNullable(properties.getIfAvailable()).orElse(new NettyHttpProperties());

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/test/java/org/apache/shenyu/springboot/starter/netty/ShenyuNettyWebServerConfigurationTest.java
Patch:
@@ -50,7 +50,7 @@ public void testNettyProperties() {
             .withPropertyValues(
                 "debug=true",
                 "shenyu.netty.http.accessLog=false",
-                "shenyu.netty.http.webServerFactoryEnabled=false",
+                "shenyu.netty.http.web-server-factory-enabled=false",
                 "shenyu.netty.http.selectCount=10",
                 "shenyu.netty.http.workerCount=2",
                 "shenyu.netty.http.serverSocketChannel.soBacklog=64",

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ApiDocController.java
Patch:
@@ -37,7 +37,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 /**
- * ApiDoc Controller.
+ * Api Documet Controller.
  */
 @RestController
 @RequestMapping("/apidoc")
@@ -64,8 +64,6 @@ public ShenyuAdminResult getAllDoc() {
         docVO.setGatewayUrl(apiDocProperties.getGatewayUrl());
         docVO.setMenuProjects(menuProjects);
         docVO.setEnvProps(apiDocProperties.getEnvProps());
-        docVO.setCookie("Fill in the real cookie value.(signature authentication and login free API ignore this item)");
-        docVO.setAppKey("");
         return ShenyuAdminResult.success(docVO);
     }
 

File: shenyu-integrated-test/shenyu-integrated-test-combination/src/test/java/org/apache/shenyu/integrated/test/combination/SharedThreadPoolTest.java
Patch:
@@ -102,5 +102,6 @@ public static void testIsOneThreadPool() throws IOException {
         assertEquals(spring, grpc);
         String motan = HttpHelper.INSTANCE.getFromGateway("/shenyu/getFromMotan", String.class);
         assertEquals(spring, motan);
+        // TODO test sofa
     }
 }

File: shenyu-plugin/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/SpringCloudPluginTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.springcloud.handler.SpringCloudPluginDataHandler;
+import org.apache.shenyu.plugin.springcloud.loadbalance.client.ShenyuSpringCloudLoadBalancerClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -43,7 +44,6 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.mockito.junit.jupiter.MockitoSettings;
 import org.mockito.quality.Strictness;
-import org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.http.HttpMethod;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
@@ -74,7 +74,7 @@
 public final class SpringCloudPluginTest {
 
     @Mock
-    private RibbonLoadBalancerClient loadBalancerClient;
+    private ShenyuSpringCloudLoadBalancerClient loadBalancerClient;
 
     private SpringCloudPlugin springCloudPlugin;
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-tars/src/test/java/org/apache/shenyu/springboot/starter/client/tars/ShenyuTarsClientConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.shenyu.springboot.starter.client.tars;
 
 import org.apache.shenyu.client.tars.TarsContextRefreshedEventListener;
-import org.apache.shenyu.client.tars.TarsServiceBeanPostProcessor;
+import org.apache.shenyu.client.tars.TarsServiceBeanEventListener;
 import org.apache.shenyu.register.client.http.utils.RegisterUtils;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -67,8 +67,8 @@ public void testTarsServiceBeanPostProcessor() {
         MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.ofNullable("token"));
         applicationContextRunner.run(context -> {
-            TarsServiceBeanPostProcessor processor = context.getBean("tarsServiceBeanPostProcessor", TarsServiceBeanPostProcessor.class);
-            assertNotNull(processor);
+            TarsServiceBeanEventListener listener = context.getBean("tarsServiceBeanEventListener", TarsServiceBeanEventListener.class);
+            assertNotNull(listener);
         });
         registerUtilsMockedStatic.close();
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java
Patch:
@@ -48,6 +48,7 @@
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Optional;
 
@@ -169,7 +170,7 @@ public ShenyuAdminResult modifyPassword(@PathVariable("id")
     @DeleteMapping("/batch")
     @RequiresPermissions("system:manager:delete")
     public ShenyuAdminResult deleteDashboardUser(@RequestBody @NotEmpty final List<@NotBlank String> ids) {
-        Integer deleteCount = dashboardUserService.delete(ids);
+        Integer deleteCount = dashboardUserService.delete(new HashSet<>(ids));
         return ShenyuAdminResult.success(ShenyuResultMessage.DELETE_SUCCESS, deleteCount);
     }
 }

File: shenyu-examples/shenyu-examples-common/src/main/java/org/apache/shenyu/examples/common/aop/Log.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.examples.tars.aop;
+package org.apache.shenyu.examples.common.aop;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/annotation/impl/DubboTestServiceImpl.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.alibaba.dubbo.config.annotation.Service;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
-import org.apache.shenyu.examples.alibaba.dubbo.service.annotation.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/impl/DubboTestServiceImpl.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.shenyu.examples.alibaba.dubbo.service.impl;
 
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
-import org.apache.shenyu.examples.alibaba.dubbo.service.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboTestServiceImpl.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.examples.apache.dubbo.service.annotation.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-xml/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/xml/impl/DubboTestServiceImpl.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.shenyu.examples.apache.dubbo.service.xml.impl;
 
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
-import org.apache.shenyu.examples.apache.dubbo.service.xml.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/impl/DubboTestServiceImpl.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.shenyu.examples.apache.dubbo.service.impl;
 
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
-import org.apache.shenyu.examples.apache.dubbo.service.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-spring-cloud-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/spring/cloud/dubbo/service/annotation/impl/TestServiceImpl.java
Patch:
@@ -18,10 +18,10 @@
 
 import org.apache.dubbo.config.annotation.DubboService;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;
-import org.apache.shenyu.examples.spring.cloud.dubbo.service.annotation.aop.Log;
 
 import java.util.Collections;
 import java.util.Random;

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/echo/EchoServiceImpl.java
Patch:
@@ -27,7 +27,7 @@
 import java.net.UnknownHostException;
 
 import org.apache.shenyu.client.grpc.common.annotation.ShenyuGrpcClient;
-import org.apache.shenyu.examples.grpc.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Service;

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanDemoServiceImpl.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.weibo.api.motan.config.springsupport.annotation.MotanService;
 import org.apache.shenyu.client.motan.common.annotation.ShenyuMotanClient;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.motan.service.MotanDemoService;
-import org.apache.shenyu.examples.motan.service.aop.Log;
 
 /**
  * Motan demo service.

File: shenyu-examples/shenyu-examples-sofa/shenyu-examples-sofa-service/src/main/java/org/apache/shenyu/examples/sofa/service/impl/SofaSingleParamServiceImpl.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.shenyu.examples.sofa.service.impl;
 
 import org.apache.shenyu.client.sofa.common.annotation.ShenyuSofaClient;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.sofa.api.entity.SofaSimpleTypeBean;
 import org.apache.shenyu.examples.sofa.api.service.SofaSingleParamService;
-import org.apache.shenyu.examples.sofa.service.aop.Log;
 import org.springframework.stereotype.Service;
 
 import java.util.Random;

File: shenyu-examples/shenyu-examples-springcloud/src/main/java/org/apache/shenyu/examples/springcloud/controller/TestController.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.examples.springcloud.controller;
 
 import org.apache.shenyu.client.springcloud.annotation.ShenyuSpringCloudClient;
-import org.apache.shenyu.examples.springcloud.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.springcloud.dto.UserDTO;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;

File: shenyu-examples/shenyu-examples-tars/src/main/java/org/apache/shenyu/examples/tars/servant/testapp/impl/HelloServantImpl.java
Patch:
@@ -20,7 +20,7 @@
 import com.qq.tars.spring.annotation.TarsServant;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsClient;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsService;
-import org.apache.shenyu.examples.tars.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.tars.servant.testapp.HelloServant;
 
 @TarsServant("HelloObj")

File: shenyu-examples/shenyu-examples-tars/src/main/java/org/apache/shenyu/examples/tars/servant/testapp/impl/OrderServantImpl.java
Patch:
@@ -20,7 +20,6 @@
 import com.qq.tars.spring.annotation.TarsServant;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsClient;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsService;
-import org.apache.shenyu.examples.tars.aop.Log;
 import org.apache.shenyu.examples.tars.servant.testapp.OrderServant;
 
 @TarsServant("OrderObj")
@@ -34,7 +33,6 @@ public String hello(final int no, final String name) {
         return String.format("hello no=%s, name=%s, time=%s", no, name, System.currentTimeMillis());
     }
 
-    @Log
     @Override
     @ShenyuTarsClient("/helloInt")
     public int helloInt(final int no, final String name) {

File: shenyu-examples/shenyu-examples-tars/src/main/java/org/apache/shenyu/examples/tars/servant/testapp/impl/UserServantImpl.java
Patch:
@@ -20,7 +20,6 @@
 import com.qq.tars.spring.annotation.TarsServant;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsClient;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsService;
-import org.apache.shenyu.examples.tars.aop.Log;
 import org.apache.shenyu.examples.tars.servant.testapp.UserServant;
 
 @TarsServant("UserObj")
@@ -33,7 +32,6 @@ public String hello(final int no, final String name) {
         return String.format("hello no=%s, name=%s, time=%s", no, name, System.currentTimeMillis());
     }
     
-    @Log
     @Override
     public int helloInt(final int no, final String name) {
         return 1;

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/controller/TestHttpController.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.examples.websocket.controller;
 
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
-import org.apache.shenyu.examples.websocket.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.apache.shenyu.examples.websocket.config.WsSessionManager;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-reactive-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/EchoHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.examples.websocket.handler;
 
-import org.apache.shenyu.examples.websocket.aop.Log;
+import org.apache.shenyu.examples.common.aop.Log;
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.socket.WebSocketHandler;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public HttpClientProperties httpClientProperties() {
      * @return the http client loop resource
      */
     @Bean
-    @ConditionalOnProperty("shenyu.httpclient.threadPool.prefix")
+    @ConditionalOnProperty("shenyu.httpclient.thread-pool.prefix")
     public LoopResources httpClientLoopResource(final HttpClientProperties properties) {
         HttpClientProperties.ThreadPool threadPool = properties.getThreadPool();
         return LoopResources.create(threadPool.getPrefix(), threadPool.getSelectCount(),

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/ShenyuThreadPoolConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public class ShenyuThreadPoolConfiguration {
      */
     @Bean
     @ConditionalOnMissingBean(TaskQueue.class)
-    @ConditionalOnProperty("shenyu.sharedPool.maxWorkQueueMemory")
+    @ConditionalOnProperty("shenyu.shared-pool.max-work-queue-memory")
     public TaskQueue<Runnable> memoryLimitedTaskQueue(final ShenyuConfig shenyuConfig) {
         final Instrumentation instrumentation = ByteBuddyAgent.install();
         final ShenyuConfig.SharedPool sharedPool = shenyuConfig.getSharedPool();
@@ -73,7 +73,7 @@ public TaskQueue<Runnable> memoryLimitedTaskQueue(final ShenyuConfig shenyuConfi
      */
     @Bean
     @ConditionalOnMissingBean(TaskQueue.class)
-    @ConditionalOnProperty("shenyu.sharedPool.maxFreeMemory")
+    @ConditionalOnProperty("shenyu.shared-pool.max-free-memory")
     public TaskQueue<Runnable> memorySafeTaskQueue(final ShenyuConfig shenyuConfig) {
         final ShenyuConfig.SharedPool sharedPool = shenyuConfig.getSharedPool();
         final Integer maxFreeMemory = sharedPool.getMaxFreeMemory();
@@ -91,7 +91,7 @@ public TaskQueue<Runnable> memorySafeTaskQueue(final ShenyuConfig shenyuConfig)
      * @return the shenyu thread pool executor
      */
     @Bean
-    @ConditionalOnProperty(name = "shenyu.sharedPool.enable", havingValue = "true")
+    @ConditionalOnProperty(name = "shenyu.shared-pool.enable", havingValue = "true")
     public ShenyuThreadPoolExecutor shenyuThreadPoolExecutor(final ShenyuConfig shenyuConfig,
                                                              final ObjectProvider<TaskQueue<Runnable>> provider) {
         final ShenyuConfig.SharedPool sharedPool = shenyuConfig.getSharedPool();

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/controller/TestHttpController.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.examples.websocket.controller;
 
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
+import org.apache.shenyu.examples.websocket.aop.Log;
 import org.apache.shenyu.examples.websocket.config.WsSessionManager;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -36,6 +37,7 @@
 public class TestHttpController {
 
     @RequestMapping("/sendMsg")
+    @Log
     public @ResponseBody
     Object sendMsg(String token, String msg) throws IOException {
         WebSocketSession webSocketSession = WsSessionManager.get(token);

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-reactive-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/EchoHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.examples.websocket.handler;
 
+import org.apache.shenyu.examples.websocket.aop.Log;
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.socket.WebSocketHandler;
@@ -31,6 +32,7 @@ public class EchoHandler implements WebSocketHandler {
 
     @Override
     @NonNull
+    @Log
     public Mono<Void> handle(final WebSocketSession session) {
         return session.send(
                 session.receive()

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-zookeeper/src/test/java/org/apache/shenyu/register/client/zookeeper/ZookeeperClientTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.register.client.zookeeper;
 
 import org.apache.curator.framework.CuratorFramework;
-import org.apache.curator.framework.recipes.cache.CuratorCache;
+import org.apache.curator.framework.recipes.cache.TreeCache;
 import org.apache.curator.test.TestingServer;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.utils.GsonUtils;
@@ -126,7 +126,7 @@ void getChildren() {
 
     @Test
     void getCache() {
-        CuratorCache cache = client.getCache("/test");
+        TreeCache cache = client.getCache("/test");
         assertNull(cache);
 
         client.addCache("/test");
@@ -137,7 +137,7 @@ void getCache() {
     @Test
     void addCache() {
         client.addCache("/test");
-        CuratorCache cache = client.getCache("/test");
+        TreeCache cache = client.getCache("/test");
         assertNotNull(cache);
     }
 }

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/test/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperClientTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.register.instance.zookeeper;
 
 import org.apache.curator.framework.CuratorFramework;
-import org.apache.curator.framework.recipes.cache.CuratorCache;
+import org.apache.curator.framework.recipes.cache.TreeCache;
 import org.apache.curator.test.TestingServer;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.utils.GsonUtils;
@@ -126,7 +126,7 @@ void getChildren() {
 
     @Test
     void getCache() {
-        CuratorCache cache = client.getCache("/test");
+        TreeCache cache = client.getCache("/test");
         assertNull(cache);
 
         client.addCache("/test");
@@ -137,7 +137,7 @@ void getCache() {
     @Test
     void addCache() {
         client.addCache("/test");
-        CuratorCache cache = client.getCache("/test");
+        TreeCache cache = client.getCache("/test");
         assertNotNull(cache);
     }
 }

File: shenyu-client/shenyu-client-websocket/shenyu-client-spring-websocket/src/main/java/org/apache/shenyu/client/spring/websocket/annotation/ShenyuSpringWebSocketClient.java
Patch:
@@ -28,7 +28,7 @@
  * The interface shenyu client.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.TYPE, ElementType.METHOD})
+@Target(ElementType.TYPE)
 public @interface ShenyuSpringWebSocketClient {
 
     /**

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-reactive-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/EchoHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.examples.websocket.handler;
 
-import org.apache.shenyu.client.spring.websocket.annotation.ShenyuSpringWebSocketClient;
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.socket.WebSocketHandler;
@@ -32,7 +31,6 @@ public class EchoHandler implements WebSocketHandler {
 
     @Override
     @NonNull
-    @ShenyuSpringWebSocketClient("/org/apache/shenyu/examples/websocket/**")
     public Mono<Void> handle(final WebSocketSession session) {
         return session.send(
                 session.receive()

File: shenyu-examples/shenyu-examples-sofa/shenyu-examples-sofa-service/src/main/java/org/apache/shenyu/examples/sofa/service/impl/SofaSingleParamServiceImpl.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.client.sofa.common.annotation.ShenyuSofaClient;
 import org.apache.shenyu.examples.sofa.api.entity.SofaSimpleTypeBean;
 import org.apache.shenyu.examples.sofa.api.service.SofaSingleParamService;
+import org.apache.shenyu.examples.sofa.service.aop.Log;
 import org.springframework.stereotype.Service;
 
 import java.util.Random;
@@ -32,6 +33,7 @@ public class SofaSingleParamServiceImpl implements SofaSingleParamService {
 
     @Override
     @ShenyuSofaClient("/findById")
+    @Log
     public SofaSimpleTypeBean findById(final String id) {
         return new SofaSimpleTypeBean(id, "hello world shenyu Sofa, findById");
     }

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanDemoServiceImpl.java
Patch:
@@ -20,6 +20,7 @@
 import com.weibo.api.motan.config.springsupport.annotation.MotanService;
 import org.apache.shenyu.client.motan.common.annotation.ShenyuMotanClient;
 import org.apache.shenyu.examples.motan.service.MotanDemoService;
+import org.apache.shenyu.examples.motan.service.aop.Log;
 
 /**
  * Motan demo service.
@@ -30,6 +31,7 @@ public class MotanDemoServiceImpl implements MotanDemoService {
 
     @Override
     @ShenyuMotanClient("/hello")
+    @Log
     public String hello(final String name) {
         return "hello " + name;
     }

File: shenyu-examples/shenyu-examples-sofa/shenyu-examples-sofa-service/src/main/java/org/apache/shenyu/examples/sofa/service/impl/SofaSingleParamServiceImpl.java
Patch:
@@ -31,19 +31,19 @@
 public class SofaSingleParamServiceImpl implements SofaSingleParamService {
 
     @Override
-    @ShenyuSofaClient(path = "/findById", desc = "Find by Id")
+    @ShenyuSofaClient("/findById")
     public SofaSimpleTypeBean findById(final String id) {
         return new SofaSimpleTypeBean(id, "hello world shenyu Sofa, findById");
     }
 
     @Override
-    @ShenyuSofaClient(path = "/findAll", desc = "Get all data")
+    @ShenyuSofaClient("/findAll")
     public SofaSimpleTypeBean findAll() {
         return new SofaSimpleTypeBean(String.valueOf(new Random().nextInt()), "hello world shenyu Sofa , findAll");
     }
 
     @Override
-    @ShenyuSofaClient(path = "/insert", desc = "Insert a row of data")
+    @ShenyuSofaClient("/insert")
     public SofaSimpleTypeBean insert(final SofaSimpleTypeBean sofaSimpleTypeBean) {
         sofaSimpleTypeBean.setName("hello world shenyu Sofa: " + sofaSimpleTypeBean.getName());
         return sofaSimpleTypeBean;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-spring-websocket/src/test/java/org/apache/shenyu/springboot/starter/client/spring/websocket/ShenyuSpringWebSocketClientConfigurationTest.java
Patch:
@@ -60,7 +60,7 @@ public void before() {
     }
 
     @Test
-    public void testSpringMvcClientBeanPostProcessor() {
+    public void testSpringWebSocketClientBeanPostProcessor() {
         MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.ofNullable("token"));
         applicationContextRunner.run(context -> {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/test/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.client.springmvc;
 
 import org.apache.shenyu.client.springmvc.init.ContextRegisterListener;
-import org.apache.shenyu.client.springmvc.init.SpringMvcClientBeanPostProcessor;
+import org.apache.shenyu.client.springmvc.init.SpringMvcClientEventListener;
 import org.apache.shenyu.register.client.http.utils.RegisterUtils;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -61,11 +61,11 @@ public void before() {
     }
 
     @Test
-    public void testSpringMvcClientBeanPostProcessor() {
+    public void testSpringMvcClientEventListener() {
         MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.ofNullable("token"));
         applicationContextRunner.run(context -> {
-            SpringMvcClientBeanPostProcessor processor = context.getBean("springHttpClientBeanPostProcessor", SpringMvcClientBeanPostProcessor.class);
+            SpringMvcClientEventListener processor = context.getBean("springHttpClientEventListener", SpringMvcClientEventListener.class);
             assertNotNull(processor);
         });
         registerUtilsMockedStatic.close();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-grpc/src/test/java/org/apache/dromara/springboot/starter/client/grpc/ShenyuGrpcClientConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.dromara.springboot.starter.client.grpc;
 
-import org.apache.shenyu.client.grpc.GrpcClientBeanPostProcessor;
+import org.apache.shenyu.client.grpc.GrpcClientEventListener;
 import org.apache.shenyu.client.grpc.GrpcContextRefreshedEventListener;
 import org.apache.shenyu.client.grpc.server.GrpcServerRunner;
 import org.apache.shenyu.register.client.http.utils.RegisterUtils;
@@ -70,8 +70,8 @@ public void testGrpcClientBeanPostProcessor() {
         MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.ofNullable("token"));
         applicationContextRunner.run(context -> {
-            GrpcClientBeanPostProcessor processor = context.getBean("grpcServiceBeanPostProcessor", GrpcClientBeanPostProcessor.class);
-            assertNotNull(processor);
+            GrpcClientEventListener listener = context.getBean("grpcClientEventListener", GrpcClientEventListener.class);
+            assertNotNull(listener);
         });
         registerUtilsMockedStatic.close();
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springcloud/src/test/java/org/apache/shenyu/springboot/starter/client/springcloud/ShenyuSpringCloudClientConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.client.springcloud;
 
 import org.apache.shenyu.client.springcloud.init.ContextRegisterListener;
-import org.apache.shenyu.client.springcloud.init.SpringCloudClientBeanPostProcessor;
+import org.apache.shenyu.client.springcloud.init.SpringCloudClientEventListener;
 import org.apache.shenyu.register.client.http.utils.RegisterUtils;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -65,7 +65,7 @@ public void testSpringCloudClientBeanPostProcessor() {
         MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
         registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.ofNullable("token"));
         applicationContextRunner.run(context -> {
-            SpringCloudClientBeanPostProcessor repository = context.getBean("springCloudClientBeanPostProcessor", SpringCloudClientBeanPostProcessor.class);
+            SpringCloudClientEventListener repository = context.getBean("springCloudClientEventListener", SpringCloudClientEventListener.class);
             assertNotNull(repository);
         });
         registerUtilsMockedStatic.close();

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java
Patch:
@@ -60,7 +60,7 @@
  */
 @RestController
 @RequestMapping("/test")
-@ShenyuSpringMvcClient(path = "/test/**")
+@ShenyuSpringMvcClient("/test/**")
 public class HttpTestController {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(HttpTestController.class);

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/RequestController.java
Patch:
@@ -35,7 +35,7 @@
  */
 @RestController
 @RequestMapping("/request")
-@ShenyuSpringMvcClient(path = "/request/**")
+@ShenyuSpringMvcClient("/request/**")
 public class RequestController {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(RequestController.class);

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/ShenyuClientPathController.java
Patch:
@@ -36,7 +36,7 @@ public class ShenyuClientPathController {
      * @return result
      */
     @RequestMapping("shenyu/client/hello")
-    @ShenyuSpringMvcClient(path = "shenyu/client/hello", desc = "shenyu client annotation register")
+    @ShenyuSpringMvcClient("shenyu/client/hello")
     public String hello() {
         return "hello! " + HELLO_SUFFIX;
     }
@@ -47,7 +47,7 @@ public String hello() {
      * @return result
      */
     @RequestMapping("shenyu/client/timeout")
-    @ShenyuSpringMvcClient(path = "shenyu/client/timeout", desc = "shenyu client annotation register")
+    @ShenyuSpringMvcClient("shenyu/client/timeout")
     public String timeout() {
         System.out.println("timeout");
         try {
@@ -65,7 +65,7 @@ public String timeout() {
      * @return result
      */
     @RequestMapping("shenyu/client/hi")
-    @ShenyuSpringMvcClient(path = "shenyu/client/hi", desc = "shenyu client annotation register")
+    @ShenyuSpringMvcClient("shenyu/client/hi")
     public String hello(final String name) {
         return "hi! " + name + "! " + HELLO_SUFFIX;
     }

File: shenyu-examples/shenyu-examples-https/src/main/java/org/apache/shenyu/examples/https/controller/OrderController.java
Patch:
@@ -29,7 +29,7 @@
  */
 @RestController
 @RequestMapping("/order")
-@ShenyuSpringMvcClient(path = "/order")
+@ShenyuSpringMvcClient("/order")
 public class OrderController {
     
     /**
@@ -39,7 +39,7 @@ public class OrderController {
      * @return the order dto
      */
     @GetMapping("/findById")
-    @ShenyuSpringMvcClient(path = "/findById", desc = "Find by id")
+    @ShenyuSpringMvcClient("/findById")
     public OrderDTO findById(@RequestParam("id") final String id) {
         OrderDTO dto = new OrderDTO();
         dto.setId(id);

File: shenyu-examples/shenyu-examples-springmvc-tomcat/src/main/java/org/apache/shenyu/examples/springmvc/controller/HttpTestController.java
Patch:
@@ -38,7 +38,7 @@
  */
 @RestController
 @RequestMapping("/test")
-@ShenyuSpringMvcClient(path = "/test/**")
+@ShenyuSpringMvcClient("/test/**")
 public class HttpTestController {
 
     /**

File: shenyu-examples/shenyu-examples-springmvc/src/main/java/org/apache/shenyu/examples/springmvc/controller/HttpTestController.java
Patch:
@@ -38,7 +38,7 @@
  */
 @RestController
 @RequestMapping("/test")
-@ShenyuSpringMvcClient(path = "/test/**")
+@ShenyuSpringMvcClient("/test/**")
 public class HttpTestController {
 
     /**

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/controller/TestHttpController.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Controller
 @RequestMapping("/ws")
-@ShenyuSpringMvcClient(path = "/ws/**")
+@ShenyuSpringMvcClient("/ws/**")
 public class TestHttpController {
 
     @RequestMapping("/sendMsg")

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanDemoServiceImpl.java
Patch:
@@ -25,17 +25,17 @@
  * Motan demo service.
  */
 @MotanService(export = "demoMotan:8002")
-@ShenyuMotanClient(path = "/demo/**")
+@ShenyuMotanClient("/demo/**")
 public class MotanDemoServiceImpl implements MotanDemoService {
 
     @Override
-    @ShenyuMotanClient(path = "/hello")
+    @ShenyuMotanClient("/hello")
     public String hello(final String name) {
         return "hello " + name;
     }
 
     @Override
-    @ShenyuMotanClient(path = "/timeout")
+    @ShenyuMotanClient("/timeout")
     public String testTimeOut(final String timeout) {
         try {
             Thread.sleep((long) (Double.parseDouble(timeout) * 1000));

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-annotation-websocket/src/main/java/org/apache/shenyu/examples/websocket/ws/WsServerEndpoint.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * WsServerEndpoint
  */
-@ShenyuSpringWebSocketClient(path = "/myWs", desc = "myWs")
+@ShenyuSpringWebSocketClient("/myWs")
 @ServerEndpoint("/myWs")
 @Component
 public class WsServerEndpoint {

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-native-websocket/src/main/java/org/apache/shenyu/examples/websocket/config/WebSocketConfig.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Configuration
 @EnableWebSocket
-@ShenyuSpringWebSocketClient(path = "/myWebSocket", desc = "myWebSocket")
+@ShenyuSpringWebSocketClient("/myWebSocket")
 public class WebSocketConfig implements WebSocketConfigurer {
 
     @Autowired

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-reactive-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/EchoHandler.java
Patch:
@@ -32,7 +32,7 @@ public class EchoHandler implements WebSocketHandler {
 
     @Override
     @NonNull
-    @ShenyuSpringWebSocketClient(path = "/org/apache/shenyu/examples/websocket/**", desc = "onlineusers")
+    @ShenyuSpringWebSocketClient("/org/apache/shenyu/examples/websocket/**")
     public Mono<Void> handle(final WebSocketSession session) {
         return session.send(
                 session.receive()

File: shenyu-register-center/shenyu-register-client-server/shenyu-register-client-server-zookeeper/src/main/java/org/apache/shenyu/register/client/server/zookeeper/ZookeeperClient.java
Patch:
@@ -183,7 +183,7 @@ public void createOrUpdate(final String key, final Object value, final CreateMod
      */
     public void delete(final String key) {
         try {
-            client.delete().deletingChildrenIfNeeded().forPath(key);
+            client.delete().guaranteed().deletingChildrenIfNeeded().forPath(key);
         } catch (Exception e) {
             throw new ShenyuException(e);
         }

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-zookeeper/src/main/java/org/apache/shenyu/register/client/zookeeper/ZookeeperClient.java
Patch:
@@ -183,7 +183,7 @@ public void createOrUpdate(final String key, final Object value, final CreateMod
      */
     public void delete(final String key) {
         try {
-            client.delete().deletingChildrenIfNeeded().forPath(key);
+            client.delete().guaranteed().deletingChildrenIfNeeded().forPath(key);
         } catch (Exception e) {
             throw new ShenyuException(e);
         }

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/main/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperClient.java
Patch:
@@ -183,7 +183,7 @@ public void createOrUpdate(final String key, final Object value, final CreateMod
      */
     public void delete(final String key) {
         try {
-            client.delete().deletingChildrenIfNeeded().forPath(key);
+            client.delete().guaranteed().deletingChildrenIfNeeded().forPath(key);
         } catch (Exception e) {
             throw new ShenyuException(e);
         }

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/main/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClient.java
Patch:
@@ -185,7 +185,7 @@ public void createOrUpdate(final String key, final Object value, final CreateMod
      */
     public void delete(final String key) {
         try {
-            client.delete().deletingChildrenIfNeeded().forPath(key);
+            client.delete().guaranteed().deletingChildrenIfNeeded().forPath(key);
         } catch (Exception e) {
             throw new ShenyuException(e);
         }

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/demo/EventServiceImpl.java
Patch:
@@ -25,19 +25,19 @@
 import org.apache.shenyu.client.grpc.common.annotation.ShenyuGrpcClient;
 import org.springframework.stereotype.Service;
 
-@ShenyuGrpcClient(path = "/eventService", desc = "event")
+@ShenyuGrpcClient("/eventService")
 @Service
 public class EventServiceImpl extends EventServiceGrpc.EventServiceImplBase {
 
-    @ShenyuGrpcClient(path = "/sendEvent", desc = "sendEvent")
+    @ShenyuGrpcClient("/sendEvent")
     @Override
     public void sendEvent(EventRequest request, StreamObserver<EventResponse> responseObserver) {
         EventResponse response = EventResponse.newBuilder().setData("received event:" + request.getData()).build();
         responseObserver.onNext(response);
         responseObserver.onCompleted();
     }
 
-    @ShenyuGrpcClient(path = "/sendEventStream", desc = "sendEventStream")
+    @ShenyuGrpcClient("/sendEventStream")
     @Override
     public StreamObserver<EventRequest> sendEventStream(StreamObserver<EventResponse> responseObserver) {
         return new StreamObserver<EventRequest>() {

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/demo/HelloServiceImpl.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.stereotype.Service;
 
 
-@ShenyuGrpcClient(path = "/helloService/**", desc = "hello")
+@ShenyuGrpcClient("/helloService/**")
 @Service
 public class HelloServiceImpl extends HelloServiceGrpc.HelloServiceImplBase {
 

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/echo/EchoServiceImpl.java
Patch:
@@ -37,7 +37,7 @@ public class EchoServiceImpl extends EchoServiceGrpc.EchoServiceImplBase {
     private static final Logger LOG = LoggerFactory.getLogger(EchoServiceImpl.class);
 
     @Override
-    @ShenyuGrpcClient(path = "/echo", desc = "echo")
+    @ShenyuGrpcClient("/echo")
     public void echo(final EchoRequest request, final StreamObserver<EchoResponse> responseObserver) {
         LOG.info("Received: {}", request.getMessage());
         EchoResponse.Builder response = EchoResponse.newBuilder()

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -239,7 +239,7 @@ public LoginDashboardUserVO login(final String userName, final String password)
                 return loginUser;
             }
             return loginUser.setToken(JwtUtils.generateToken(finalDashboardUserVO.getUserName(), finalDashboardUserVO.getPassword(),
-                    jwtProperties.getExpiredSeconds()));
+                    jwtProperties.getExpiredSeconds())).setExpiredTime(jwtProperties.getExpiredSeconds());
         }).orElse(null);
     }
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-http/src/test/java/org/apache/shenyu/springboot/starter/sync/data/http/HttpClientPluginConfigurationTest.java
Patch:
@@ -46,9 +46,9 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.post;
 import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test cases for {@link HttpSyncDataConfiguration}.
@@ -133,6 +133,7 @@ private static String mockLoginResponseJson() {
         Map<String, Object> result = new HashMap<>();
         Map<String, Object> data = new HashMap<>();
         data.put("token", "token");
+        data.put("expiredTime", 24 * 60 * 60 * 1000);
         result.put("data", data);
         result.put("code", CommonErrorCode.SUCCESSFUL);
         return GsonUtils.getInstance().toJson(result);

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/config/HttpConfig.java
Patch:
@@ -17,11 +17,14 @@
 
 package org.apache.shenyu.sync.data.http.config;
 
+import org.springframework.boot.context.properties.ConfigurationProperties;
+
 import java.util.Objects;
 
 /**
  * The type Http config.
  */
+@ConfigurationProperties(prefix = "shenyu.sync.http")
 public class HttpConfig {
 
     private String url;

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/refresh/AppAuthDataRefresh.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.common.dto.AppAuthData;
 import org.apache.shenyu.common.dto.ConfigData;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -52,7 +53,7 @@ protected JsonObject convert(final JsonObject data) {
 
     @Override
     protected ConfigData<AppAuthData> fromJson(final JsonObject data) {
-        return GSON.fromJson(data, new TypeToken<ConfigData<AppAuthData>>() {
+        return GsonUtils.getGson().fromJson(data, new TypeToken<ConfigData<AppAuthData>>() {
         }.getType());
     }
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/refresh/PluginDataRefresh.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.common.dto.ConfigData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -52,7 +53,7 @@ protected JsonObject convert(final JsonObject data) {
 
     @Override
     protected ConfigData<PluginData> fromJson(final JsonObject data) {
-        return GSON.fromJson(data, new TypeToken<ConfigData<PluginData>>() {
+        return GsonUtils.getGson().fromJson(data, new TypeToken<ConfigData<PluginData>>() {
         }.getType());
     }
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/main/java/org/apache/shenyu/sync/data/http/refresh/SelectorDataRefresh.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.common.dto.ConfigData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
+import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -52,7 +53,7 @@ protected JsonObject convert(final JsonObject data) {
 
     @Override
     protected ConfigData<SelectorData> fromJson(final JsonObject data) {
-        return GSON.fromJson(data, new TypeToken<ConfigData<SelectorData>>() {
+        return GsonUtils.getGson().fromJson(data, new TypeToken<ConfigData<SelectorData>>() {
         }.getType());
     }
 

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -35,7 +35,7 @@
 import org.springframework.aop.support.AopUtils;
 import org.springframework.context.ApplicationListener;
 import org.springframework.context.event.ContextRefreshedEvent;
-import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.lang.NonNull;
 import org.springframework.util.ReflectionUtils;
 
@@ -105,7 +105,7 @@ private void handler(final ServiceBean<?> serviceBean) {
         if (AopUtils.isAopProxy(refProxy)) {
             clazz = AopUtils.getTargetClass(refProxy);
         }
-        ShenyuDubboClient beanShenyuClient = AnnotationUtils.findAnnotation(clazz, ShenyuDubboClient.class);
+        ShenyuDubboClient beanShenyuClient = AnnotatedElementUtils.findMergedAnnotation(clazz, ShenyuDubboClient.class);
         final String superPath = buildApiSuperPath(beanShenyuClient);
         if (superPath.contains("*")) {
             Method[] methods = ReflectionUtils.getDeclaredMethods(clazz);
@@ -118,7 +118,7 @@ private void handler(final ServiceBean<?> serviceBean) {
         }
         Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(clazz);
         for (Method method : methods) {
-            ShenyuDubboClient shenyuDubboClient = method.getAnnotation(ShenyuDubboClient.class);
+            ShenyuDubboClient shenyuDubboClient = AnnotatedElementUtils.findMergedAnnotation(method, ShenyuDubboClient.class);
             if (Objects.nonNull(shenyuDubboClient)) {
                 publisher.publishEvent(buildMetaDataDTO(serviceBean, shenyuDubboClient, method, superPath));
             }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/annotation/impl/DubboClassMultiParamServiceImpl.java
Patch:
@@ -32,12 +32,12 @@
 /**
  * The type Dubbo multi param service.
  */
-@ShenyuDubboClient(path = "/demo")
+@ShenyuDubboClient("/demo")
 @Service
 public class DubboClassMultiParamServiceImpl implements DubboClassMultiParamService {
 
     @Override
-    @ShenyuDubboClient(path = "/findByIdsAndName", desc = "findByIdsAndName")
+    @ShenyuDubboClient("/findByIdsAndName")
     public DubboTest findByIdsAndName(final List<Integer> ids, final String name) {
         return new DubboTest(ids.toString(), "hello world shenyu alibaba dubbo param findByIdsAndName ：" + name);
     }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/annotation/impl/DubboClassTestServiceImpl.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * The type Dubbo service.
  */
-@ShenyuDubboClient(path = "/demo/**", desc = "class init")
+@ShenyuDubboClient("/demo/**")
 @Service
 public class DubboClassTestServiceImpl implements DubboClassTestService {
 

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/impl/DubboClassMultiParamServiceImpl.java
Patch:
@@ -33,11 +33,11 @@
  * The type Dubbo multi param service.
  */
 @Service("dubboClassMultiParamService")
-@ShenyuDubboClient(path = "/demo")
+@ShenyuDubboClient("/demo")
 public class DubboClassMultiParamServiceImpl implements DubboClassMultiParamService {
     
     @Override
-    @ShenyuDubboClient(path = "/findByIdsAndName", desc = "findByIdsAndName")
+    @ShenyuDubboClient("/findByIdsAndName")
     public DubboTest findByIdsAndName(final List<Integer> ids, final String name) {
         return new DubboTest(ids.toString(), "hello world shenyu alibaba dubbo param findByIdsAndName ：" + name);
     }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/impl/DubboClassTestServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
  * DubboTestServiceImpl.
  */
 @Service("dubboClassTestService")
-@ShenyuDubboClient(path = "/demo/**", desc = "class init")
+@ShenyuDubboClient("/demo/**")
 public class DubboClassTestServiceImpl implements DubboClassTestService {
     
     @Override

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboClassMultiParamServiceImpl.java
Patch:
@@ -32,12 +32,12 @@
 /**
  * The type Dubbo multi param service.
  */
-@ShenyuDubboClient(path = "/demo")
+@ShenyuDubboClient("/demo")
 @DubboService
 public class DubboClassMultiParamServiceImpl implements DubboClassMultiParamService {
     
     @Override
-    @ShenyuDubboClient(path = "/findByIdsAndName", desc = "findByIdsAndName")
+    @ShenyuDubboClient("/findByIdsAndName")
     public DubboTest findByIdsAndName(final List<Integer> ids, final String name) {
         return new DubboTest(ids.toString(), "hello world shenyu apache dubbo param findByIdsAndName ：" + name);
     }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboClassTestServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * The type Dubbo service.
  */
-@ShenyuDubboClient(path = "/demo/**", desc = "class init")
+@ShenyuDubboClient("/demo/**")
 @DubboService
 public class DubboClassTestServiceImpl implements DubboClassTestService {
 

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-xml/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/xml/impl/DubboClassMultiParamServiceImpl.java
Patch:
@@ -33,11 +33,11 @@
  * The type Dubbo multi param service.
  */
 @Service("dubboClassMultiParamService")
-@ShenyuDubboClient(path = "/demo")
+@ShenyuDubboClient("/demo")
 public class DubboClassMultiParamServiceImpl implements DubboClassMultiParamService {
     
     @Override
-    @ShenyuDubboClient(path = "/findByIdsAndName", desc = "findByIdsAndName")
+    @ShenyuDubboClient("/findByIdsAndName")
     public DubboTest findByIdsAndName(final List<Integer> ids, final String name) {
         return new DubboTest(ids.toString(), "hello world shenyu apache dubbo param findByIdsAndName ：" + name);
     }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-xml/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/xml/impl/DubboClassTestServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
  * DubboTestServiceImpl.
  */
 @Service("dubboClassTestService")
-@ShenyuDubboClient(path = "/demo/**", desc = "class init")
+@ShenyuDubboClient("/demo/**")
 public class DubboClassTestServiceImpl implements DubboClassTestService {
     
     @Override

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/annotation/impl/DubboMultiParamServiceImpl.java
Patch:
@@ -32,6 +32,7 @@
  * The type Dubbo multi param service.
  */
 @Service
+@ShenyuDubboClient(path = "/demo")
 public class DubboMultiParamServiceImpl implements DubboMultiParamService {
     
     @Override

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/alibaba/dubbo/service/annotation/impl/DubboTestServiceImpl.java
Patch:
@@ -29,6 +29,7 @@
  * The type Dubbo service.
  */
 @Service
+@ShenyuDubboClient(path = "/demo")
 public class DubboTestServiceImpl implements DubboTestService {
     
     @Override

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboClassMultiParamServiceImpl.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.examples.apache.dubbo.service.annotation.impl;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
 import org.apache.shenyu.examples.dubbo.api.entity.ComplexBeanTest;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
@@ -33,7 +33,7 @@
  * The type Dubbo multi param service.
  */
 @ShenyuDubboClient(path = "/demo")
-@Service
+@DubboService
 public class DubboClassMultiParamServiceImpl implements DubboClassMultiParamService {
     
     @Override

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboClassTestServiceImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.apache.shenyu.examples.apache.dubbo.service.annotation.impl;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
 import org.apache.shenyu.common.utils.GsonUtils;
@@ -33,7 +33,7 @@
  * The type Dubbo service.
  */
 @ShenyuDubboClient(path = "/demo/**", desc = "class init")
-@Service
+@DubboService
 public class DubboClassTestServiceImpl implements DubboClassTestService {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(DubboClassTestServiceImpl.class);

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboMultiParamServiceImpl.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.examples.apache.dubbo.service.annotation.impl;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
 import org.apache.shenyu.examples.dubbo.api.entity.ComplexBeanTest;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
@@ -32,7 +32,7 @@
 /**
  * The type Dubbo multi param service.
  */
-@Service
+@DubboService
 public class DubboMultiParamServiceImpl implements DubboMultiParamService {
     
     @Override

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboTestServiceImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.apache.shenyu.examples.apache.dubbo.service.annotation.impl;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 import org.apache.dubbo.rpc.RpcContext;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
 import org.apache.shenyu.common.utils.GsonUtils;
@@ -32,7 +32,7 @@
 /**
  * The type Dubbo service.
  */
-@Service
+@DubboService
 public class DubboTestServiceImpl implements DubboTestService {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(DubboTestServiceImpl.class);

File: shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceBeanPostProcessor.java
Patch:
@@ -116,7 +116,7 @@ private void handler(final ServiceFactoryBean serviceBean) {
             Method[] declaredMethods = ReflectionUtils.getDeclaredMethods(clazz);
             for (Method declaredMethod : declaredMethods) {
                 if (Objects.nonNull(beanSofaClient)) {
-                    publisher.publishEvent(buildMetaDataDTO(serviceBean, beanSofaClient, declaredMethod, superPath));
+                    publisher.publishEvent(buildMetaDataDTO(serviceBean, beanSofaClient, declaredMethod, ""));
                 }
             }
             return;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mybatis/oracle/OracleSQLPrepareInterceptor.java
Patch:
@@ -72,7 +72,7 @@ public Object intercept(final Invocation invocation) throws Throwable {
                     .replace("update resource", "update \"resource\"");
         }
         // replace insert into
-        if (replaceSql.contains("insert into")) {
+        if (replaceSql.contains("insert into") && !replaceSql.contains("insert into operation_record_log")) {
             replaceSql = replaceSql.replaceAll("\r|\n|\\s", "")
                     .replace("insertinto", "insert into ")
                     .replace("values", " SELECT * FROM (")

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/handler/TarsPluginDataHandler.java
Patch:
@@ -43,8 +43,9 @@ public void handlerPlugin(final PluginData pluginData) {
             }
             if (Objects.isNull(exist) || !tarsRegisterConfig.equals(exist)) {
                 // If it is null, cache it
-                Singleton.INST.single(TarsRegisterConfig.class, tarsRegisterConfig);
+                ApplicationConfigCache.getInstance().init(tarsRegisterConfig);
             }
+            Singleton.INST.single(TarsRegisterConfig.class, tarsRegisterConfig);
         }
     }
     

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -38,7 +38,7 @@ public enum PluginEnum {
     /**
      * the cache plugin enum.
      */
-    CACHE(180, 0, "cache"),
+    CACHE(10, 0, "cache"),
 
     /**
      * Monitor plugin enum.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/ShenyuAdminBootstrap.java
Patch:
@@ -36,4 +36,3 @@ public static void main(final String[] args) {
         SpringApplication.run(ShenyuAdminBootstrap.class, args);
     }
 }
-

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DataPermissionController.java
Patch:
@@ -38,7 +38,6 @@
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 
-
 /**
  * this is dataPermission controller.
  */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/BaseTrigger.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.apache.shenyu.common.utils.UUIDUtils;
 
-import org.springframework.util.StringUtils;
+import org.springframework.util.ObjectUtils;
 
 /**
  * Trigger Base Utils.
@@ -37,7 +37,7 @@ public class BaseTrigger {
      * @throws SQLException {@link SQLException}
      */
     public static void sqlExecute(final Object[] newRow, final PreparedStatement statement) throws SQLException {
-        if (StringUtils.isEmpty(newRow[0])) {
+        if (ObjectUtils.isEmpty(newRow[0])) {
             statement.setObject(1, UUIDUtils.getInstance().generateShortUuid());
             for (int i = 1; i < newRow.length - 2; i++) {
                 statement.setObject(i + 1, newRow[i]);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/validation/validator/ExistedValidator.java
Patch:
@@ -22,14 +22,15 @@
 import org.apache.shenyu.admin.validation.ExistProvider;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
-import javax.validation.ConstraintValidator;
-import javax.validation.ConstraintValidatorContext;
 import java.io.Serializable;
 import java.util.Map;
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 import org.apache.shenyu.common.utils.ReflectUtils;
 
+import javax.validation.ConstraintValidator;
+import javax.validation.ConstraintValidatorContext;
+
 /**
  * ExistedValidator.
  */

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/AppAuthControllerTest.java
Patch:
@@ -44,6 +44,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
@@ -67,6 +69,7 @@
  * Test cases for AppAuthController.
  */
 @ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
 public final class AppAuthControllerTest {
 
     private MockMvc mockMvc;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MetaDataControllerTest.java
Patch:
@@ -38,6 +38,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
@@ -62,6 +64,7 @@
  * Test cases for MetaDataController.
  */
 @ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
 public final class MetaDataControllerTest {
 
     private MockMvc mockMvc;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/PluginControllerTest.java
Patch:
@@ -40,6 +40,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
@@ -62,6 +64,7 @@
  * Test cases for ShenyuDictController.
  */
 @ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
 public final class PluginControllerTest {
     
     private MockMvc mockMvc;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/RuleControllerTest.java
Patch:
@@ -38,6 +38,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
@@ -60,6 +62,7 @@
  * Test case for RuleController.
  */
 @ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
 public final class RuleControllerTest {
 
     private MockMvc mockMvc;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SelectorControllerTest.java
Patch:
@@ -38,6 +38,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
@@ -58,6 +60,7 @@
  * Test cases for {@link SelectorController}.
  */
 @ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
 public final class SelectorControllerTest {
 
     private MockMvc mockMvc;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ShenyuDictControllerTest.java
Patch:
@@ -36,6 +36,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
@@ -57,6 +59,7 @@
  * Test cases for ShenyuDictController.
  */
 @ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
 public final class ShenyuDictControllerTest {
 
     private MockMvc mockMvc;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -127,7 +127,7 @@ public void testOnError() {
         websocketCollector.onOpen(session);
         assertEquals(1L, getSessionSetSize());
         doNothing().when(loggerSpy).error(anyString(), anyString(), isA(Throwable.class));
-        Throwable throwable = mock(Throwable.class);
+        Throwable throwable = new Throwable();
         websocketCollector.onError(session, throwable);
         assertEquals(0L, getSessionSetSize());
         assertNull(getSession());

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/HttpParamConverter.java
Patch:
@@ -66,13 +66,13 @@ public static <K, V> String toMap(final Supplier<MultiValueMap<K, V>> supplier)
      */
     public static Map<String, String> initQueryParams(final String query) {
         final Map<String, String> queryParams = new LinkedHashMap<>();
-        if (!StringUtils.isEmpty(query)) {
+        if (StringUtils.hasLength(query)) {
             final Matcher matcher = PATTERN.matcher(query);
             while (matcher.find()) {
                 String name = decodeQueryParam(matcher.group(1));
                 String eq = matcher.group(2);
                 String value = matcher.group(3);
-                value = !StringUtils.isEmpty(value) ? decodeQueryParam(value) : (StringUtils.hasLength(eq) ? "" : null);
+                value = StringUtils.hasLength(value) ? decodeQueryParam(value) : (StringUtils.hasLength(eq) ? "" : null);
                 queryParams.put(name, value);
             }
         }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/JsonUtils.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.json.JsonReadFeature;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
@@ -68,7 +69,7 @@ public final class JsonUtils {
                 .configure(JsonParser.Feature.ALLOW_COMMENTS, true)
                 .configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true)
                 .configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true)
-                .configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true)
+                .configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
                 .setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"))
                 .registerModule(javaTimeModule)
                 .addMixIn(Map.class, IgnoreType.class);

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/VersionUtilsTest.java
Patch:
@@ -40,7 +40,7 @@ public void testFromImplementationVersion() throws ClassNotFoundException {
     
     @Test
     public void testFromCodeSource() throws ClassNotFoundException {
-        String version = VersionUtils.getVersion(Class.forName("ch.qos.logback.classic.db.DBAppender"), "2.0.2");
+        String version = VersionUtils.getVersion(Class.forName("ch.qos.logback.classic.db.names.SimpleDBNameResolver"), "2.0.2");
         assertNotNull(version);
     }
 

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/result/DefaultShenyuEntity.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.shenyu.plugin.api.result;
 
+import com.fasterxml.jackson.annotation.JsonBackReference;
+
 import java.io.Serializable;
 
 /**
@@ -32,6 +34,7 @@ public class DefaultShenyuEntity implements Serializable {
 
     private String message;
 
+    @JsonBackReference
     private Object data;
 
     /**

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/TimerBeforePredicateJudge.java
Patch:
@@ -33,7 +33,7 @@ public class TimerBeforePredicateJudge implements PredicateJudge {
     @Override
     public Boolean judge(final ConditionData conditionData, final String realData) {
         String paramName = conditionData.getParamName();
-        if (StringUtils.isEmpty(paramName)) {
+        if (!StringUtils.hasLength(paramName)) {
             return LocalDateTime.now().isBefore(DateUtils.parseLocalDateTime(conditionData.getParamValue().trim()));
         }
         return DateUtils.parseLocalDateTime(realData).isBefore(DateUtils.parseLocalDateTime(conditionData.getParamValue().trim()));

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-redis/src/main/java/org/apache/shenyu/plugin/cache/redis/RedisConnectionFactory.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;
 
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
@@ -77,7 +78,7 @@ private GenericObjectPoolConfig<?> getPoolConfig(final RedisConfigProperties red
         config.setMaxIdle(redisConfigProperties.getMaxIdle());
         config.setMinIdle(redisConfigProperties.getMinIdle());
         if (redisConfigProperties.getMaxWait() != null) {
-            config.setMaxWaitMillis(redisConfigProperties.getMaxWait().toMillis());
+            config.setMaxWait(Duration.ofMillis(redisConfigProperties.getMaxWait().toMillis()));
         }
         return config;
     }

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/proto/MessageWriterTest.java
Patch:
@@ -41,7 +41,7 @@ public void setUp() {
 
     @Test
     public void onError() {
-        Throwable throwable = mock(Throwable.class);
+        Throwable throwable = new Throwable();
         messageWriter.onError(throwable);
         
     }

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -71,8 +71,7 @@ protected Mono<HttpClientResponse> doRequest(final ServerWebExchange exchange, f
                     if (status != null) {
                         response.setStatusCode(status);
                     } else if (response instanceof AbstractServerHttpResponse) {
-                        ((AbstractServerHttpResponse) response)
-                                .setStatusCodeValue(res.status().code());
+                        response.setRawStatusCode(res.status().code());
                     } else {
                         throw new IllegalStateException("Unable to set status code on response: " + res.status().code() + ", " + response.getClass());
                     }

File: shenyu-plugin/shenyu-plugin-param-mapping/src/main/java/org/apache/shenyu/plugin/param/mapping/strategy/FormDataOperator.java
Patch:
@@ -68,7 +68,7 @@ public Mono<Void> apply(final ServerWebExchange exchange, final ShenyuPluginChai
                     String original = GsonUtils.getInstance().toJson(multiValueMap);
                     LOG.info("get from data success data:{}", original);
                     String modify = operation(original, paramMappingRuleHandle);
-                    if (StringUtils.isEmpty(modify)) {
+                    if (!StringUtils.hasLength(modify)) {
                         return shenyuPluginChain.execute(exchange);
                     }
                     HttpHeaders headers = exchange.getRequest().getHeaders();

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/SpringCloudPlugin.java
Patch:
@@ -79,6 +79,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         ServiceInstance serviceInstance;
         try {
             LoadBalanceKeyHolder.setLoadBalanceKey(loadBalanceKey);
+            // async choose or custom loadbalancer
             serviceInstance = loadBalancer.choose(serviceId);
         } finally {
             LoadBalanceKeyHolder.resetLoadBalanceKey();

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -106,10 +106,10 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
     
     private String buildWsRealPath(final ServerWebExchange exchange, final Upstream upstream, final ShenyuContext shenyuContext) {
         String protocol = upstream.getProtocol();
-        if (StringUtils.isEmpty(protocol)) {
+        if (!StringUtils.hasLength(protocol)) {
             protocol = "ws://";
         }
-        String path = !StringUtils.isEmpty(shenyuContext.getRealUrl()) ? shenyuContext.getRealUrl() : shenyuContext.getMethod();
+        String path = StringUtils.hasLength(shenyuContext.getRealUrl()) ? shenyuContext.getRealUrl() : shenyuContext.getMethod();
         if (StringUtils.hasText(exchange.getRequest().getURI().getQuery())) {
             path = String.join("?", path, RequestQueryCodecUtil.getCodecQuery(exchange));
         }

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/utils/RegisterUtils.java
Patch:
@@ -53,7 +53,7 @@ private RegisterUtils() {
      * @throws IOException the io exception
      */
     public static void doRegister(final String json, final String url, final String type, final String accessToken) throws IOException {
-        if (StringUtils.isEmpty(accessToken)) {
+        if (!StringUtils.hasLength(accessToken)) {
             LOGGER.error("{} client register error accessToken is null, please check the config : {} ", type, json);
             return;
         }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/test/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfigurationTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.time.Duration;
 
+import io.netty.handler.ssl.SslProvider;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.httpclient.config.HttpClientProperties;
 import org.junit.jupiter.api.BeforeEach;
@@ -34,7 +35,6 @@
 
 import reactor.netty.http.client.HttpClient;
 import reactor.netty.resources.ConnectionProvider;
-import reactor.netty.tcp.SslProvider;
 
 /**
  * Test case for {@link HttpClientPluginConfiguration}.
@@ -92,7 +92,7 @@ public void testHttpClientProperties() {
                     assertNotNull(properties.getSsl().getTrustedX509Certificates());
                     assertThat(properties.getSsl().getCloseNotifyFlushTimeout(), is(Duration.ofMillis(3000)));
                     assertThat(properties.getSsl().getCloseNotifyReadTimeout(), is(Duration.ZERO));
-                    assertThat(properties.getSsl().getDefaultConfigurationType(), is(SslProvider.DefaultConfigurationType.TCP));
+                    assertThat(properties.getSsl().getDefaultConfigurationType(), is(SslProvider.JDK));
                 });
     }
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/springboot/starter/plugin/logging/rocketmq/LoggingRocketMQPluginConfigurationTest.java
Patch:
@@ -49,8 +49,6 @@ public void before() {
     @Test
     public void testLoggingRocketMQPlugin() {
         applicationContextRunner
-                .withConfiguration(AutoConfigurations.of(LoggingRocketMQPluginConfiguration.class))
-                .withBean(LoggingRocketMQPluginConfigurationTest.class)
                 .withPropertyValues(
                         "debug=true",
                         "shenyu.logging.rocketmq.enabled=true"

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-websocket/src/test/java/org/apache/shenyu/springboot/plugin/websocket/WebSocketPluginConfigurationTest.java
Patch:
@@ -49,7 +49,6 @@ public void before() {
             .withConfiguration(AutoConfigurations.of(WebSocketPluginConfiguration.class))
             .withBean(WebSocketPluginConfigurationTest.class)
             .withConfiguration(AutoConfigurations.of(ShenyuConfig.class))
-            .withBean(ShenyuConfig.class)
             .withPropertyValues("debug=true");
     }
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-http/src/test/java/org/apache/shenyu/springboot/starter/sync/data/http/HttpClientPluginConfigurationTest.java
Patch:
@@ -64,7 +64,8 @@
                 "shenyu.sync.http.delayTime=3",
                 "shenyu.sync.http.username=admin",
                 "shenyu.sync.http.password=123456",
-                "shenyu.sync.http.connectionTimeout=5"
+                "shenyu.sync.http.connectionTimeout=5",
+                "spring.main.web-application-type=none"
         })
 @EnableAutoConfiguration
 @MockBean({PluginDataSubscriber.class, ServletWebServerFactory.class})

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -80,7 +80,7 @@ public ShenyuWebHandler(final List<ShenyuPlugin> plugins, final ShenyuConfig she
             if (Objects.equals(config.getType(), "fixed")) {
                 this.scheduler = Schedulers.newParallel("shenyu-work-threads", config.getThreads());
             } else {
-                this.scheduler = Schedulers.elastic();
+                this.scheduler = Schedulers.boundedElastic();
             }
         }
     }

File: shenyu-web/src/test/java/org/apache/shenyu/web/logo/ShenyuLogoTest.java
Patch:
@@ -49,7 +49,7 @@ public void testBuildBannerText() throws NoSuchMethodException, InvocationTarget
     public void testOnApplicationEvent() throws NoSuchFieldException, IllegalAccessException {
         SpringApplication application = new SpringApplication();
         ConfigurableEnvironment environment = new MockEnvironment();
-        ApplicationEnvironmentPreparedEvent event = new ApplicationEnvironmentPreparedEvent(application, null, environment);
+        ApplicationEnvironmentPreparedEvent event = new ApplicationEnvironmentPreparedEvent(null, application, null, environment);
         shenyuLogo.onApplicationEvent(event);
         Field field = shenyuLogo.getClass().getDeclaredField("ALREADY_LOG");
         field.setAccessible(true);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/rule/RuleChangedEvent.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.entity.RuleDO;
-import org.apache.shenyu.admin.model.entity.SelectorDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
 import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
 
@@ -55,7 +54,7 @@ public String buildContext() {
     private String contrast() {
         final RuleDO before = (RuleDO) getBefore();
         Objects.requireNonNull(before);
-        final SelectorDO after = (SelectorDO) getAfter();
+        final RuleDO after = (RuleDO) getAfter();
         Objects.requireNonNull(after);
         if (Objects.equals(before, after)) {
             return "it no change";

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -186,7 +186,8 @@ public int updateSelective(final SelectorDO selectorDO) {
     @Override
     @Transactional(rollbackFor = Exception.class)
     public int delete(final List<String> ids) {
-        return deleteSelector(selectorMapper.selectByIdSet(new TreeSet<>(ids)), pluginMapper.selectByIds(ids));
+        final List<SelectorDO> selectors = selectorMapper.selectByIdSet(new TreeSet<>(ids));
+        return deleteSelector(selectors, pluginMapper.selectByIds(ListUtil.map(selectors, SelectorDO::getPluginId)));
     }
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/NacosConfiguration.java
Patch:
@@ -30,7 +30,10 @@
 
 /**
  * Nacos configuration.
+ *
+ * @deprecated {@link DataSyncConfiguration.NacosListener#nacosConfigService}
  */
+@Deprecated
 @EnableConfigurationProperties(NacosProperties.class)
 public class NacosConfiguration {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/ZookeeperConfiguration.java
Patch:
@@ -28,7 +28,10 @@
 
 /**
  * ZookeeperConfiguration.
+ *
+ * @deprecated {@link DataSyncConfiguration.ZookeeperListener#zookeeperClient}
  */
+@Deprecated
 @EnableConfigurationProperties(ZookeeperProperties.class)
 public class ZookeeperConfiguration {
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-alibaba-dubbo/src/main/java/org/apache/shenyu/springboot/starter/client/alibaba/dubbo/ShenyuAlibabaDubboClientConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 public class ShenyuAlibabaDubboClientConfiguration {
     
     /**
-     * Alibaba dubbo service bean listener alibaba dubbo service bean listener.
+     * Alibaba dubbo service bean listener.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyu client register repository

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-apache-dubbo/src/main/java/org/apache/shenyu/springboot/starter/client/apache/dubbo/ShenyuApacheDubboClientConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 public class ShenyuApacheDubboClientConfiguration {
     
     /**
-     * Apache dubbo service bean listener apache dubbo service bean listener.
+     * Apache dubbo service bean listener.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyu client register repository

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-common/src/main/java/org/apache/shenyu/springboot/starter/client/common/config/ShenyuClientCommonBeanConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public ShenyuRegisterCenterConfig shenyuRegisterCenterConfig() {
     }
     
     /**
-     * Shenyu client config shenyu client config.
+     * Shenyu client config.
      *
      * @return the shenyu client config
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-grpc/src/main/java/org/apache/dromara/springboot/starter/client/grpc/ShenyuGrpcClientConfiguration.java
Patch:
@@ -38,7 +38,7 @@
 public class ShenyuGrpcClientConfiguration {
     
     /**
-     * Grpc service bean post processor grpc client bean post processor.
+     * Grpc service bean post processor.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyu client register repository
@@ -51,7 +51,7 @@ public GrpcClientBeanPostProcessor grpcServiceBeanPostProcessor(final ShenyuClie
     }
     
     /**
-     * Grpc context refreshed event listener grpc context refreshed event listener.
+     * Grpc context refreshed event listener.
      *
      * @param clientConfig the client config
      * @return the grpc context refreshed event listener

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-motan/src/main/java/org/apache/shenyu/springboot/starter/client/motan/ShenyuMotanClientConfiguration.java
Patch:
@@ -35,14 +35,14 @@
 public class ShenyuMotanClientConfiguration {
 
     /**
-     * Motan service bean post processor sofa service bean post processor.
+     * Motan service bean post processor.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyuClientRegisterRepository
-     * @return the tars service bean post processor
+     * @return the motan service bean post processor
      */
     @Bean
-    public MotanServiceBeanPostProcessor tarsServiceBeanPostProcessor(final ShenyuClientConfig clientConfig, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
+    public MotanServiceBeanPostProcessor motanServiceBeanPostProcessor(final ShenyuClientConfig clientConfig, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
         return new MotanServiceBeanPostProcessor(clientConfig.getClient().get(RpcTypeEnum.MOTAN.getName()), shenyuClientRegisterRepository);
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-motan/src/test/java/org/apache/shenyu/springboot/starter/client/motan/ShenyuMotanClientConfigurationTest.java
Patch:
@@ -59,7 +59,7 @@ public void testMotanServiceBeanPostProcessor() {
                 "shenyu.client.motan.props[port]=8081"
             )
             .run(context -> {
-                MotanServiceBeanPostProcessor processor = context.getBean("tarsServiceBeanPostProcessor", MotanServiceBeanPostProcessor.class);
+                MotanServiceBeanPostProcessor processor = context.getBean("motanServiceBeanPostProcessor", MotanServiceBeanPostProcessor.class);
                 assertNotNull(processor);
             });
         registerUtilsMockedStatic.close();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-sofa/src/main/java/org/apache/shenyu/springboot/starter/client/sofa/ShenyuSofaClientConfiguration.java
Patch:
@@ -35,7 +35,7 @@
 public class ShenyuSofaClientConfiguration {
 
     /**
-     * Sofa service bean post processor sofa service bean post processor.
+     * Sofa service bean post processor.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyuClientRegisterRepository

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springcloud/src/main/java/org/apache/shenyu/springboot/starter/client/springcloud/ShenyuSpringCloudClientConfiguration.java
Patch:
@@ -36,7 +36,7 @@
 public class ShenyuSpringCloudClientConfiguration {
     
     /**
-     * Spring cloud client bean post processor spring cloud client bean post processor.
+     * Spring cloud client bean post processor.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyu client register repository
@@ -51,7 +51,7 @@ public SpringCloudClientBeanPostProcessor springCloudClientBeanPostProcessor(fin
     }
     
     /**
-     * Context register listener context register listener.
+     * Context register listener.
      *
      * @param clientConfig the client config
      * @param env the env

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfiguration.java
Patch:
@@ -28,14 +28,14 @@
 import org.springframework.context.annotation.Configuration;
 
 /**
- * The type shenyu client http configuration.
+ * The type shenyu spring mvc client configuration.
  */
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
 public class ShenyuSpringMvcClientConfiguration {
     
     /**
-     * Spring http client bean post processor spring mvc client bean post processor.
+     * Spring mvc client bean post processor.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyu client register repository
@@ -48,7 +48,7 @@ public SpringMvcClientBeanPostProcessor springHttpClientBeanPostProcessor(final
     }
     
     /**
-     * Context register listener context register listener.
+     * Context register listener.
      *
      * @param clientConfig the client config
      * @return the context register listener

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-tars/src/main/java/org/apache/shenyu/springboot/starter/client/tars/ShenyuTarsClientConfiguration.java
Patch:
@@ -36,7 +36,7 @@
 public class ShenyuTarsClientConfiguration {
     
     /**
-     * Tars service bean post processor sofa service bean post processor.
+     * Tars service bean post processor.
      *
      * @param clientConfig the client config
      * @param shenyuClientRegisterRepository the shenyuClientRegisterRepository
@@ -48,7 +48,7 @@ public TarsServiceBeanPostProcessor tarsServiceBeanPostProcessor(final ShenyuCli
     }
     
     /**
-     * Tars context refreshed event listener tars context refreshed event listener.
+     * Tars context refreshed event listener.
      *
      * @param clientConfig the client config
      * @return the tars context refreshed event listener

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/NettyChannelProperties.java
Patch:
@@ -176,7 +176,7 @@ public Boolean isSoReuseAddr() {
     }
 
     /**
-     * ser setSoReuseAddr.
+     * set setSoReuseAddr.
      *
      * @param soReuseAddr SO_REUSEADDR
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/NettyTcpProperties.java
Patch:
@@ -33,7 +33,7 @@ public class NettyTcpProperties {
     private SocketChannelProperties socketChannel = new SocketChannelProperties();
 
     /**
-     * gets webServerFactoryEnabled.
+     * get webServerFactoryEnabled.
      *
      * @return webServerFactoryEnabled
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/ShenyuNettyWebServerConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public NettyTcpProperties nettyTcpProperties() {
     }
     
     /**
-     * Netty reactive web server factory netty reactive web server factory.
+     * Netty reactive web server factory.
      *
      * @param properties the properties
      * @return the netty reactive web server factory

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-context-path/src/main/java/org/apache/shenyu/springboot/starter/plugin/context/path/ContextPathPluginConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public ShenyuPlugin contextPathPlugin() {
     }
     
     /**
-     * Context path plugin data handler plugin data handler.
+     * Context path plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-cryptor/src/main/java/org/apache/shenyu/springboot/starter/plugin/cryptor/CryptorPluginConfiguration.java
Patch:
@@ -55,7 +55,7 @@ public ShenyuPlugin cryptorResponsePlugin() {
     }
 
     /**
-     * Cryptor request plugin data handler plugin data handler.
+     * Cryptor request plugin data handler.
      *
      * @return the plugin data handler
      */
@@ -65,7 +65,7 @@ public PluginDataHandler cryptorRequestPluginDataHandler() {
     }
 
     /**
-     * Cryptor response plugin data handler plugin data handler.
+     * Cryptor response plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-divide/src/main/java/org/apache/shenyu/springboot/plugin/divide/DividePluginConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public ShenyuPlugin dividePlugin() {
     }
     
     /**
-     * Divide plugin data handler plugin data handler.
+     * Divide plugin data handler.
      *
      * @return the plugin data handler
      */
@@ -55,7 +55,7 @@ public PluginDataHandler dividePluginDataHandler() {
     }
     
     /**
-     * Divide shenyu context decorator shenyu context decorator.
+     * Divide shenyu context decorator.
      *
      * @return the shenyu context decorator
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/alibaba/dubbo/AlibabaDubboPluginConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public ShenyuPlugin alibabaDubboPlugin(final ObjectProvider<DubboParamResolveSer
     }
     
     /**
-     * Alibaba dubbo plugin data handler plugin data handler.
+     * Alibaba dubbo plugin data handler.
      *
      * @return the plugin data handler
      */
@@ -64,7 +64,7 @@ public PluginDataHandler alibabaDubboPluginDataHandler() {
     }
     
     /**
-     * Dubbo meta data subscriber meta data subscriber.
+     * Dubbo meta data subscriber.
      *
      * @return the meta data subscriber
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-apache-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/apache/dubbo/ApacheDubboPluginConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public ShenyuPlugin apacheDubboPlugin(final ObjectProvider<DubboParamResolveServ
     }
     
     /**
-     * Apache dubbo plugin data handler plugin data handler.
+     * Apache dubbo plugin data handler.
      *
      * @return the plugin data handler
      */
@@ -64,7 +64,7 @@ public PluginDataHandler apacheDubboPluginDataHandler() {
     }
 
     /**
-     * Apache dubbo meta data subscriber meta data subscriber.
+     * Apache dubbo meta data subscriber.
      *
      * @return the meta data subscriber
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-dubbo-common/src/main/java/org/apache/shenyu/springboot/plugin/dubbo/common/DubboCommonConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 public class DubboCommonConfiguration {
     
     /**
-     * Dubbo shenyu context decorator shenyu context decorator.
+     * Dubbo shenyu context decorator.
      *
      * @return the shenyu context decorator
      */
@@ -43,7 +43,7 @@ public ShenyuContextDecorator dubboShenyuContextDecorator() {
     }
     
     /**
-     * Generic param resolve service dubbo param resolve service.
+     * Dubbo generic param resolve service.
      *
      * @return the dubbo param resolve service
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-grpc/src/main/java/org/apache/shenyu/springboot/starter/plugin/grpc/GrpcPluginConfiguration.java
Patch:
@@ -36,9 +36,9 @@
 public class GrpcPluginConfiguration {
 
     /**
-     * grpc plugin shenyu plugin.
+     * grpc plugin.
      *
-     * @return the tars plugin
+     * @return the grpc plugin
      */
     @Bean
     public ShenyuPlugin grpcPlugin() {
@@ -56,7 +56,7 @@ public PluginDataHandler grpcPluginDataHandler() {
     }
 
     /**
-     * Grpc shenyu context decorator shenyu context decorator.
+     * Grpc shenyu context decorator.
      *
      * @return the shenyu context decorator
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -55,7 +55,7 @@
 public class HttpClientPluginConfiguration {
 
     /**
-     * Http client properties http client properties.
+     * Http client properties.
      *
      * @return the http client properties
      */
@@ -202,7 +202,7 @@ public ShenyuPlugin webClientPlugin(final ObjectProvider<HttpClient> httpClient)
     static class NettyHttpClientConfiguration {
 
         /**
-         * Netty http client plugin shenyu plugin.
+         * Netty http client plugin.
          *
          * @param httpClient the http client
          * @return the shenyu plugin

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-hystrix/src/main/java/org/apache/shenyu/springboot/starter/plugin/hystrix/HystrixPluginConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 public class HystrixPluginConfiguration {
     
     /**
-     * Hystrix plugin shenyu plugin.
+     * Hystrix plugin.
      *
      * @return the shenyu plugin
      */
@@ -43,7 +43,7 @@ public ShenyuPlugin hystrixPlugin() {
     }
     
     /**
-     * Hystrix plugin data handler plugin data handler.
+     * Hystrix plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-jwt/src/main/java/org/apache/shenyu/springboot/starter/plugin/jwt/JwtPluginConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public ShenyuPlugin jwtPlugin() {
     }
 
     /**
-     * Jwt plugin data handler plugin data handler.
+     * Jwt plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-console/src/main/java/org/apache/shenyu/springboot/starter/plugin/logging/console/LoggingConsolePluginConfiguration.java
Patch:
@@ -31,7 +31,7 @@
 public class LoggingConsolePluginConfiguration {
 
     /**
-     * Logging console plugin shenyu plugin.
+     * Logging console plugin.
      *
      * @return the shenyu plugin
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-metrics/src/main/java/org/apache/shenyu/springboot/starter/plugin/metrics/MetricsPluginConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 public class MetricsPluginConfiguration {
     
     /**
-     * Logging plugin shenyu plugin.
+     * Logging plugin.
      *
      * @return the shenyu plugin
      */
@@ -43,7 +43,7 @@ public ShenyuPlugin metricsPlugin() {
     }
     
     /**
-     * Metrics runner metrics runner.
+     * Metrics runner.
      *
      * @param shenyuConfig the shenyu config
      * @return the metrics runner

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-mqtt/src/main/java/org/apache/shenyu/springboot/starter/plugin/mqtt/MqttPluginConfiguration.java
Patch:
@@ -31,7 +31,7 @@
 public class MqttPluginConfiguration {
 
     /**
-     * Mqtt plugin data handler plugin data handler.
+     * Mqtt plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-oauth2/src/main/java/org/apache/shenyu/springboot/starter/plugin/oauth2/OAuth2PluginConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public class OAuth2PluginConfiguration {
     private static final OrServerWebExchangeMatcher OR_MATCHER = new OrServerWebExchangeMatcher(MATCHERS);
 
     /**
-     * oauth2 plugin shenyu plugin.
+     * oauth2 plugin.
      *
      * @param authorizedClientServiceProvider the ReactiveOAuth2AuthorizedClientServiceProvider
      * @return the shenyu plugin

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-param-mapping/src/main/java/org/apache/shenyu/springboot/starter/plugin/param/mapping/ParamMappingPluginConfiguration.java
Patch:
@@ -56,7 +56,7 @@ public ShenyuPlugin paramMappingPlugin() {
     }
 
     /**
-     * Param mapping plugin data handler plugin data handler.
+     * Param mapping plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-ratelimiter/src/main/java/org/apache/shenyu/springboot/starter/plugin/ratelimiter/RateLimiterPluginConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public ShenyuPlugin rateLimiterPlugin() {
     }
     
     /**
-     * Rate limiter plugin data handler plugin data handler.
+     * Rate limiter plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-response/src/main/java/org/apache/shenyu/springboot/starter/plugin/response/ResponsePluginConfiguration.java
Patch:
@@ -41,7 +41,7 @@
 public class ResponsePluginConfiguration {
     
     /**
-     * Response plugin shenyu plugin.
+     * Response plugin.
      *
      * @param httpWriter the http writer
      * @return the shenyu plugin
@@ -69,7 +69,7 @@ public ShenyuPlugin responsePlugin(final ObjectProvider<MessageWriter> httpWrite
     static class WebClientMessageWriterConfiguration {
     
         /**
-         * Web client message writer message writer.
+         * Web client message writer.
          *
          * @return the message writer
          */
@@ -87,7 +87,7 @@ public MessageWriter webClientMessageWriter() {
     static class NettyClientMessageWriterConfiguration {
     
         /**
-         * Netty message writer message writer.
+         * Netty message writer.
          *
          * @return the message writer
          */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sentinel/src/main/java/org/apache/shenyu/springboot/starter/plugin/sentinel/SentinelPluginConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.springboot.starter.plugin.sentinel;
 
 import com.alibaba.csp.sentinel.adapter.spring.webflux.exception.SentinelBlockExceptionHandler;
+import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.base.fallback.FallbackHandler;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.sentinel.SentinelPlugin;
@@ -71,7 +72,7 @@ public SentinelPluginConfiguration(final ObjectProvider<List<ViewResolver>> list
      * @return the shenyu plugin
      */
     @Bean
-    public SentinelPlugin sentinelPlugin(final FallbackHandler fallbackHandler) {
+    public ShenyuPlugin sentinelPlugin(final FallbackHandler fallbackHandler) {
         return new SentinelPlugin(fallbackHandler);
     }
 
@@ -87,7 +88,7 @@ public FallbackHandler fallbackHandler() {
     }
 
     /**
-     * Sentinel plugin data handler plugin data handler.
+     * Sentinel plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sign/src/main/java/org/apache/shenyu/springboot/starter/plugin/sign/SignPluginConfiguration.java
Patch:
@@ -39,7 +39,7 @@
 public class SignPluginConfiguration {
     
     /**
-     * Sign service sign service.
+     * Sign service.
      *
      * @return the sign service
      */
@@ -61,7 +61,7 @@ public SignProvider signProvider() {
     }
     
     /**
-     * sign plugin shenyu plugin.
+     * sign plugin.
      *
      * @param signService the sign service
      * @return the shenyu plugin

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-springcloud/src/main/java/org/apache/shenyu/springboot/starter/plugin/springcloud/SpringCloudPluginConfiguration.java
Patch:
@@ -60,7 +60,7 @@ public ShenyuPlugin springCloudPlugin(final ObjectProvider<LoadBalancerClient> l
     }
 
     /**
-     * Spring cloud shenyu context decorator shenyu context decorator.
+     * Spring cloud shenyu context decorator.
      *
      * @return the shenyu context decorator
      */
@@ -82,7 +82,7 @@ public PluginDataHandler springCloudPluginDataHandler() {
     /**
      * Custom ribbon IRule.
      *
-     * @return ribbonClientSpecification ribbonClientSpecification
+     * @return ribbonClientSpecification
      */
     @Bean
     public RibbonClientSpecification ribbonClientSpecification() {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-tars/src/main/java/org/apache/shenyu/springboot/starter/plugin/tars/TarsPluginConfiguration.java
Patch:
@@ -40,7 +40,7 @@
 public class TarsPluginConfiguration {
 
     /**
-     * Tars plugin shenyu plugin.
+     * Tars plugin.
      *
      * @return the tars plugin
      */
@@ -50,7 +50,7 @@ public ShenyuPlugin tarsPlugin() {
     }
 
     /**
-     * Tars meta data subscriber meta data subscriber.
+     * Tars meta data subscriber.
      *
      * @return the meta data subscriber
      */
@@ -70,7 +70,7 @@ public PluginDataHandler tarsPluginDataHandler() {
     }
     
     /**
-     * Tars shenyu context decorator shenyu context decorator.
+     * Tars shenyu context decorator.
      *
      * @return the shenyu context decorator
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-uri/src/main/java/org/apache/shenyu/springboot/starter/plugin/uri/URIPluginConfiguration.java
Patch:
@@ -31,7 +31,7 @@
 public class URIPluginConfiguration {
     
     /**
-     * Uri plugin shenyu plugin.
+     * Uri plugin.
      *
      * @return the shenyu plugin
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-waf/src/main/java/org/apache/shenyu/springboot/starter/plugin/waf/WafPluginConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 public class WafPluginConfiguration {
     
     /**
-     * Waf plugin shenyu plugin.
+     * Waf plugin.
      *
      * @return the shenyu plugin
      */
@@ -43,7 +43,7 @@ public ShenyuPlugin wafPlugin() {
     }
     
     /**
-     * Waf plugin data handler plugin data handler.
+     * Waf plugin data handler.
      *
      * @return the plugin data handler
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-etcd/src/main/java/org/apache/shenyu/springboot/sync/data/etcd/EtcdSyncDataConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public class EtcdSyncDataConfiguration {
     private static final Logger LOGGER = LoggerFactory.getLogger(EtcdSyncDataConfiguration.class);
 
     /**
-     * Sync data service sync data service.
+     * Sync data service.
      *
      * @param etcdClients the etcd client
      * @param pluginSubscriber the plugin subscriber

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-http/src/main/java/org/apache/shenyu/springboot/starter/sync/data/http/HttpSyncDataConfiguration.java
Patch:
@@ -64,7 +64,7 @@ public SyncDataService httpSyncDataService(final ObjectProvider<HttpConfig> http
     }
 
     /**
-     * Http config http config.
+     * Http config.
      *
      * @return the http config
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-nacos/src/main/java/org/apache/shenyu/springboot/starter/sync/data/nacos/NacosSyncDataConfiguration.java
Patch:
@@ -68,7 +68,7 @@ public SyncDataService nacosSyncDataService(final ObjectProvider<ConfigService>
     }
 
     /**
-     * Nacos config service config service.
+     * Nacos config service.
      *
      * @param nacosConfig the nacos config
      * @return the config service
@@ -98,7 +98,7 @@ public ConfigService nacosConfigService(final NacosConfig nacosConfig) throws Ex
     }
 
     /**
-     * Http config http config.
+     * Http config.
      *
      * @return the http config
      */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-zookeeper/src/main/java/org/apache/shenyu/springboot/sync/data/zookeeper/ZookeeperSyncDataConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public class ZookeeperSyncDataConfiguration {
     private static final Logger LOGGER = LoggerFactory.getLogger(ZookeeperSyncDataConfiguration.class);
 
     /**
-     * Sync data service sync data service.
+     * Sync data service.
      *
      * @param zookeeperClient  the zk client
      * @param pluginSubscriber the plugin subscriber

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.shenyu.admin.service.MetaDataService;
 import org.apache.shenyu.admin.service.converter.SpringCloudSelectorHandleConverter;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
-import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
@@ -66,7 +65,6 @@ protected String ruleHandler() {
     @Override
     protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         MetaDataService metaDataService = getMetaDataService();
-        metaDataDTO.setPath(PathUtils.decoratorPath(metaDataDTO.getContextPath()));
         MetaDataDO metaDataDO = metaDataService.findByPath(metaDataDTO.getPath());
         metaDataService.saveOrUpdateMetaData(metaDataDO, metaDataDTO);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java
Patch:
@@ -92,9 +92,9 @@ public void testRuleHandler() {
     public void testRegisterMetadata() {
         MetaDataDO metaDataDO = MetaDataDO.builder().build();
         when(metaDataService.findByPath(any())).thenReturn(metaDataDO);
-        MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().contextPath("/contextPath").build();
+        MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().path("/contextPath/test").build();
         shenyuClientRegisterSpringCloudService.registerMetadata(metaDataDTO);
-        verify(metaDataService).findByPath("/contextPath/**");
+        verify(metaDataService).findByPath("/contextPath/test");
         verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);
     }
     

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/transfer/ShenyuServiceTransfer.java
Patch:
@@ -32,7 +32,7 @@ public enum ShenyuServiceTransfer {
     INSTANCE;
 
     /**
-     * deep copy instance
+     * deep copy instance.
      * @param instance source data
      * @return The new instance
      */

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/proxy/MotanProxyService.java
Patch:
@@ -144,7 +144,7 @@ private void initThreadPool() {
             default:
                 int corePoolSize = Optional.ofNullable(config.getCorethreads()).orElse(0);
                 int maximumPoolSize = Optional.ofNullable(config.getThreads()).orElse(Integer.MAX_VALUE);
-                int queueSize = Optional.ofNullable(config.getThreads()).orElse(0);
+                int queueSize = Optional.ofNullable(config.getQueues()).orElse(0);
                 threadPool = new ThreadPoolExecutor(corePoolSize, maximumPoolSize, 60L, TimeUnit.SECONDS,
                         queueSize > 0 ? new LinkedBlockingQueue<>(queueSize) : new SynchronousQueue<>(), factory);
         }

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -29,9 +29,9 @@
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
-import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
+import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.tars.cache.ApplicationConfigCache;
 import org.apache.shenyu.plugin.tars.proxy.TarsInvokePrxList;
 import org.apache.shenyu.plugin.tars.util.PrxInfoUtil;

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/ShenyuThreadPoolConfiguration.java
Patch:
@@ -84,7 +84,7 @@ public TaskQueue<Runnable> memorySafeTaskQueue(final ShenyuConfig shenyuConfig)
     }
 
     /**
-     * crate shenyu shared thread pool executor.
+     * create shenyu shared thread pool executor.
      *
      * @param shenyuConfig the shenyu config
      * @param provider     the queue bean provider

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/annotation/ShenyuSpringMvcClient.java
Patch:
@@ -62,5 +62,5 @@
      *
      * @return the boolean
      */
-    boolean registerMetaData() default false;
+    boolean registerMetaData() default true;
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.shenyu.common.utils.IpUtils;
 import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.utils.PortUtils;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
@@ -74,7 +75,7 @@ public class ContextRegisterListener implements ApplicationListener<ContextRefre
     public ContextRegisterListener(final PropertiesConfig config, final Environment env) {
         Properties props = config.getProps();
         this.isFull = Boolean.parseBoolean(props.getProperty(ShenyuClientConstants.IS_FULL, Boolean.FALSE.toString()));
-        this.contextPath = props.getProperty(ShenyuClientConstants.CONTEXT_PATH);
+        this.contextPath = Optional.ofNullable(props.getProperty(ShenyuClientConstants.CONTEXT_PATH)).map(UriUtils::repairData).orElse(null);
         if (Boolean.TRUE.equals(isFull)) {
             if (StringUtils.isBlank(contextPath)) {
                 String errorMsg = "http register param must config the contextPath";

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientBeanPostProcessor.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.client.core.exception.ShenyuClientIllegalArgumentException;
 import org.apache.shenyu.client.springcloud.annotation.ShenyuSpringCloudClient;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -48,6 +49,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Properties;
 
 /**
@@ -88,7 +90,7 @@ public SpringCloudClientBeanPostProcessor(final PropertiesConfig clientConfig,
                                               final Environment env) {
         String appName = env.getProperty("spring.application.name");
         Properties props = clientConfig.getProps();
-        this.contextPath = props.getProperty(ShenyuClientConstants.CONTEXT_PATH);
+        this.contextPath = Optional.ofNullable(props.getProperty(ShenyuClientConstants.CONTEXT_PATH)).map(UriUtils::repairData).orElse(null);
         if (StringUtils.isBlank(appName)) {
             String errorMsg = "spring cloud param must config the appName";
             LOG.error(errorMsg);

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.shenyu.common.utils.IpUtils;
 import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.utils.PortUtils;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
@@ -75,7 +76,7 @@ public class ContextRegisterListener implements ApplicationListener<ContextRefre
     public ContextRegisterListener(final PropertiesConfig clientConfig) {
         final Properties props = clientConfig.getProps();
         this.isFull = Boolean.parseBoolean(props.getProperty(ShenyuClientConstants.IS_FULL, Boolean.FALSE.toString()));
-        this.contextPath = props.getProperty(ShenyuClientConstants.CONTEXT_PATH);
+        this.contextPath = Optional.ofNullable(props.getProperty(ShenyuClientConstants.CONTEXT_PATH)).map(UriUtils::repairData).orElse(null);
         if (Boolean.TRUE.equals(isFull)) {
             if (StringUtils.isBlank(contextPath)) {
                 final String errorMsg = "http register param must config the contextPath";

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.client.core.exception.ShenyuClientIllegalArgumentException;
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -47,6 +48,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Properties;
 
 /**
@@ -83,7 +85,7 @@ public SpringMvcClientBeanPostProcessor(final PropertiesConfig clientConfig,
                                             final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
         Properties props = clientConfig.getProps();
         this.appName = props.getProperty(ShenyuClientConstants.APP_NAME);
-        this.contextPath = props.getProperty(ShenyuClientConstants.CONTEXT_PATH, "");
+        this.contextPath = Optional.ofNullable(props.getProperty(ShenyuClientConstants.CONTEXT_PATH)).map(UriUtils::repairData).orElse("");
         if (StringUtils.isBlank(appName) && StringUtils.isBlank(contextPath)) {
             String errorMsg = "http register param must config the appName or contextPath";
             LOG.error(errorMsg);

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/DefaultShenyuContextBuilder.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.context.ShenyuContextBuilder;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
-import org.apache.shenyu.plugin.global.cache.MetaDataCache;
+import org.apache.shenyu.plugin.base.cache.MetaDataCache;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.web.server.ServerWebExchange;

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/subsciber/MetaDataCacheSubscriber.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.global.subsciber;
 
-import org.apache.shenyu.plugin.global.cache.MetaDataCache;
+import org.apache.shenyu.plugin.base.cache.MetaDataCache;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/cache/MetaDataCacheTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.global.cache;
 
 import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.plugin.base.cache.MetaDataCache;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/subsciber/MetaDataCacheSubscriberTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.global.subsciber;
 
 import org.apache.shenyu.common.dto.MetaData;
-import org.apache.shenyu.plugin.global.cache.MetaDataCache;
+import org.apache.shenyu.plugin.base.cache.MetaDataCache;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/aspect/PageableAspect.java
Patch:
@@ -68,6 +68,7 @@ public Object mapperAround(final ProceedingJoinPoint point) {
             commonPager.setPage(result);
             return proceed;
         } catch (Throwable throwable) {
+            PageMethod.clearPage();
             throw new ShenyuException(throwable);
         }
         // CHECKSTYLE:ON

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -114,7 +114,7 @@ public void putExtPlugins(final List<ShenyuPlugin> extPlugins) {
                 .collect(Collectors.toList());
         if (CollectionUtils.isNotEmpty(shenyuPlugins)) {
             shenyuPlugins.forEach(plugin -> LOG.info("shenyu auto add extends plugins:{}", plugin.named()));
-            shenyuPlugins.addAll(plugins);
+            plugins.addAll(shenyuPlugins);
             onSortedPlugins();
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -301,6 +301,7 @@ private List<RuleData> buildRuleDataList(final List<RuleDO> ruleDOList) {
                         }
                     }
                     return null;
-                }).collect(Collectors.toList());
+                }).filter(Objects::nonNull)
+                .collect(Collectors.toList());
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -440,6 +440,7 @@ private List<SelectorData> buildSelectorDataList(final List<SelectorDO> selector
                     List<ConditionData> conditionDataList = ConditionTransfer.INSTANCE.mapToSelectorDOS(selectorConditionMap.get(id));
                     return SelectorDO.transFrom(selectorDO, pluginDO.getName(), conditionDataList);
                 })
+                .filter(Objects::nonNull)
                 .collect(Collectors.toList());
     }
     

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SelectorServiceTest.java
Patch:
@@ -205,6 +205,7 @@ public void testFindByPluginId() {
     public void testListAll() {
         final List<SelectorDO> selectorDOs = buildSelectorDOList();
         given(this.selectorMapper.selectAll()).willReturn(selectorDOs);
+        given(this.pluginMapper.selectByIds(any())).willReturn(Collections.singletonList(buildPluginDO()));
         List<SelectorData> dataList = this.selectorService.listAll();
         assertNotNull(dataList);
         assertEquals(selectorDOs.size(), dataList.size());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SelectorController.java
Patch:
@@ -72,7 +72,7 @@ public SelectorController(final SelectorService selectorService) {
     public ShenyuAdminResult querySelectors(final String pluginId, final String name,
                                             @RequestParam @NotNull final Integer currentPage,
                                             @RequestParam @NotNull final Integer pageSize) {
-        CommonPager<SelectorVO> commonPager = selectorService.listByPage(new SelectorQuery(pluginId, name, new PageParameter(currentPage, pageSize)));
+        CommonPager<SelectorVO> commonPager = selectorService.listByPageWithPermission(new SelectorQuery(pluginId, name, new PageParameter(currentPage, pageSize)));
         return ShenyuAdminResult.success(ShenyuResultMessage.QUERY_SUCCESS, commonPager);
     }
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEventDispatcher.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.listener;
 
+import org.apache.shenyu.admin.service.manager.LoadServiceDocEntry;
 import org.apache.shenyu.common.dto.AppAuthData;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.PluginData;
@@ -62,6 +63,7 @@ public void onApplicationEvent(final DataChangedEvent event) {
                     break;
                 case SELECTOR:
                     listener.onSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType());
+                    applicationContext.getBean(LoadServiceDocEntry.class).loadDocOnSelectorChanged((List<SelectorData>) event.getSource(), event.getEventType());
                     break;
                 case META_DATA:
                     listener.onMetaDataChanged((List<MetaData>) event.getSource(), event.getEventType());

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/SelectorControllerTest.java
Patch:
@@ -94,7 +94,7 @@ public void setUp() {
 
     @Test
     public void querySelectors() throws Exception {
-        given(this.selectorService.listByPage(selectorQuery)).willReturn(commonPager);
+        given(this.selectorService.listByPageWithPermission(selectorQuery)).willReturn(commonPager);
         String urlTemplate = "/selector?pluginId={pluginId}&name={name}&currentPage={currentPage}&pageSize={pageSize}";
         this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "2", "selector-1", 1, 12))
                 .andExpect(status().isOk())

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SelectorServiceTest.java
Patch:
@@ -189,7 +189,7 @@ public void testListByPage() {
         final List<SelectorDO> selectorDOs = buildSelectorDOList();
         given(this.selectorMapper.selectByQuery(any())).willReturn(selectorDOs);
         SelectorQuery params = buildSelectorQuery();
-        final CommonPager<SelectorVO> result = this.selectorService.listByPage(params);
+        final CommonPager<SelectorVO> result = this.selectorService.listByPageWithPermission(params);
         assertThat(result, notNullValue());
         assertEquals(selectorDOs.size(), result.getDataList().size());
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataSyncConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import com.alibaba.nacos.api.config.ConfigService;
 import com.ecwid.consul.v1.ConsulClient;
 import io.etcd.jetcd.Client;
-import org.I0Itec.zkclient.ZkClient;
 import org.apache.shenyu.admin.config.properties.ConsulProperties;
 import org.apache.shenyu.admin.config.properties.EtcdProperties;
 import org.apache.shenyu.admin.config.properties.HttpSyncProperties;
@@ -39,6 +38,7 @@
 import org.apache.shenyu.admin.listener.websocket.WebsocketDataChangedListener;
 import org.apache.shenyu.admin.listener.zookeeper.ZookeeperDataChangedInit;
 import org.apache.shenyu.admin.listener.zookeeper.ZookeeperDataChangedListener;
+import org.apache.shenyu.register.client.server.zookeeper.ZookeeperClient;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -84,7 +84,7 @@ static class ZookeeperListener {
          */
         @Bean
         @ConditionalOnMissingBean(ZookeeperDataChangedListener.class)
-        public DataChangedListener zookeeperDataChangedListener(final ZkClient zkClient) {
+        public DataChangedListener zookeeperDataChangedListener(final ZookeeperClient zkClient) {
             return new ZookeeperDataChangedListener(zkClient);
         }
 
@@ -96,7 +96,7 @@ public DataChangedListener zookeeperDataChangedListener(final ZkClient zkClient)
          */
         @Bean
         @ConditionalOnMissingBean(ZookeeperDataChangedInit.class)
-        public DataChangedInit zookeeperDataChangedInit(final ZkClient zkClient) {
+        public DataChangedInit zookeeperDataChangedInit(final ZookeeperClient zkClient) {
             return new ZookeeperDataChangedInit(zkClient);
         }
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ZookeeperPropertiesTest.java
Patch:
@@ -36,19 +36,16 @@ public void testLoadPropertiesBySpringContext() {
         final String url = "127.0.0.1:2181";
         final Integer sessionTimeOut = 5000;
         final Integer connectionTimeout = 2000;
-        final String serializer = "org.I0Itec.zkclient.serialize.SerializableSerializer";
         final String[] inlinedProperties = new String[]{
             "shenyu.sync.zookeeper.url=" + url,
             "shenyu.sync.zookeeper.sessionTimeout=" + sessionTimeOut,
             "shenyu.sync.zookeeper.connectionTimeout=" + connectionTimeout,
-            "shenyu.sync.zookeeper.serializer=" + serializer,
         };
         load(ZookeeperPropertiesConfiguration.class, inlinedProperties);
         ZookeeperProperties properties = getContext().getBean(ZookeeperProperties.class);
         assertThat(properties.getUrl(), is(url));
         assertThat(properties.getSessionTimeout(), is(sessionTimeOut));
         assertThat(properties.getConnectionTimeout(), is(connectionTimeout));
-        assertThat(properties.getSerializer(), is(serializer));
     }
 
     @Configuration

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-zookeeper/src/main/java/org/apache/shenyu/springboot/sync/data/zookeeper/ZookeeperProperties.java
Patch:
@@ -25,7 +25,7 @@
  * The type Zookeeper configuration.
  */
 @ConfigurationProperties(prefix = "shenyu.sync.zookeeper")
-public class ZookeeperConfig {
+public class ZookeeperProperties {
 
     private String url;
 
@@ -109,7 +109,7 @@ public void setSerializer(final String serializer) {
 
     @Override
     public String toString() {
-        return new StringJoiner(", ", ZookeeperConfig.class.getSimpleName() + "[", "]")
+        return new StringJoiner(", ", ZookeeperProperties.class.getSimpleName() + "[", "]")
                 .add("url='" + url + "'")
                 .add("sessionTimeout=" + sessionTimeout)
                 .add("connectionTimeout=" + connectionTimeout)

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginHandlerEventEnum.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * plugin handler event.
  */
-public enum PluginHandlerEventEnums {
+public enum PluginHandlerEventEnum {
 
     /**
      * plugin enabled.

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.dto.PluginData;
-import org.apache.shenyu.common.enums.PluginHandlerEventEnums;
+import org.apache.shenyu.common.enums.PluginHandlerEventEnum;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
@@ -126,7 +126,7 @@ public void putExtPlugins(final List<ShenyuPlugin> extPlugins) {
      */
     @Override
     public void onApplicationEvent(final PluginHandlerEvent event) {
-        PluginHandlerEventEnums stateEnums = event.getPluginStateEnums();
+        PluginHandlerEventEnum stateEnums = event.getPluginStateEnums();
         PluginData pluginData = (PluginData) event.getSource();
         switch (stateEnums) {
             case ENABLED:

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/BatchChangedEvent.java
Patch:
@@ -40,7 +40,7 @@ public BatchChangedEvent(final Collection<?> source, final Collection<?> before,
     }
     
     /**
-     * before plguin snapshot.
+     * before plugin snapshot.
      *
      * @return snapshot
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/plugin/BatchPluginChangedEvent.java
Patch:
@@ -15,11 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.model.event;
+package org.apache.shenyu.admin.model.event.plugin;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
+import org.apache.shenyu.admin.model.event.BatchChangedEvent;
 
 import java.util.Collection;
 import java.util.stream.Collectors;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/event/plugin/PluginChangedEvent.java
Patch:
@@ -15,11 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.model.event;
+package org.apache.shenyu.admin.model.event.plugin;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.enums.EventTypeEnum;
+import org.apache.shenyu.admin.model.event.AdminDataModelChangedEvent;
 
 import java.util.Objects;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/PermissionServiceTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.shenyu.admin.model.entity.UserRoleDO;
 import org.apache.shenyu.admin.model.vo.PermissionMenuVO;
 import org.apache.shenyu.admin.service.impl.PermissionServiceImpl;
-import org.apache.shenyu.admin.service.impl.ResourceServiceImpl;
 import org.apache.shenyu.admin.spring.SpringBeanUtils;
 import org.apache.shenyu.admin.utils.JwtUtils;
 import org.apache.shenyu.common.constant.ResourceTypeConstants;
@@ -127,8 +126,7 @@ public void setUp() throws Exception {
 //        when(mockResourceMapper.selectAll()).thenReturn(Arrays.asList(resourceDO1, resourceDO2, resourceDO3, resourceDO4));
         when(mockResourceMapper.selectByIdsBatch(resourceIds)).thenReturn(Arrays.asList(resourceDO2, resourceDO3, resourceDO1, resourceDO4));
         when(mockResourceMapper.selectByResourceType(ResourceTypeConstants.MENU_TYPE_2)).thenReturn(Collections.singletonList(resourceDO4));
-        ResourceService resourceService = new ResourceServiceImpl(mockResourceMapper, mockPermissionMapper);
-        permissionServiceImplUnderTest = new PermissionServiceImpl(mockDashboardUserMapper, mockUserRoleMapper, mockPermissionMapper, mockResourceMapper, resourceService);
+        permissionServiceImplUnderTest = new PermissionServiceImpl(mockDashboardUserMapper, mockUserRoleMapper, mockPermissionMapper, mockResourceMapper);
     }
 
     @Test

File: shenyu-integrated-test/shenyu-integrated-test-grpc/src/test/java/org/apache/shenyu/integrated/test/grpc/GrpcPluginTest.java
Patch:
@@ -45,7 +45,7 @@ public static void setup() throws IOException {
     public void testHelloWorld() throws Exception {
         JsonObject request = buildGrpcRequest();
         JsonArray response = HttpHelper.INSTANCE.postGateway("/grpc/echo", request, JsonArray.class);
-        Map<String, Object> result = GsonUtils.getInstance().toObjectMap(response.get(0).getAsString(), Object.class);
+        Map<String, Object> result = GsonUtils.getInstance().toObjectMap(response.get(0).toString(), Object.class);
         assertEquals("ReceivedHELLO", result.get("message"));
     }
 

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/proto/ShenyuGrpcResponse.java
Patch:
@@ -29,7 +29,7 @@ public class ShenyuGrpcResponse implements Serializable {
 
     private static final long serialVersionUID = 4182753303732523014L;
 
-    private List<String> results;
+    private List<Object> results;
 
     /**
      * Instantiates a new Shenyu grpc response.
@@ -43,7 +43,7 @@ public ShenyuGrpcResponse() {
      *
      * @return the results
      */
-    public List<String> getResults() {
+    public List<Object> getResults() {
         return results;
     }
 
@@ -52,7 +52,7 @@ public List<String> getResults() {
      *
      * @param results the results
      */
-    public void setResults(final List<String> results) {
+    public void setResults(final List<Object> results) {
         this.results = results;
     }
 }

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/MessageType.java
Patch:
@@ -67,16 +67,19 @@ public void subscribe(final ChannelHandlerContext ctx, final MqttSubscribeMessag
     @Override
     public void unsubscribe(final ChannelHandlerContext ctx, final MqttUnsubscribeMessage msg) {
         //// todo polymorphism unsubscribe
+        new Unsubscribe().unsubscribe(ctx, msg);
     }
 
     @Override
     public void pingReq(final ChannelHandlerContext ctx) {
         //// todo polymorphism pingReq
+        new PingReq().pingReq(ctx);
     }
 
     @Override
     public void pingResp(final ChannelHandlerContext ctx) {
         //// todo polymorphism pingResp
+        new PingResp().pingResp(ctx);
     }
 
     @Override

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/MqttTransportHandler.java
Patch:
@@ -36,8 +36,6 @@ public void channelRead(final ChannelHandlerContext ctx, final Object msg) throw
         } else {
             ctx.close();
         }
-
-        super.channelRead(ctx, msg);
     }
 
     @Override

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/EtcdProperties.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * etcd config.
- *
- * @author liuwei
  */
 @ConfigurationProperties(prefix = "shenyu.sync.etcd")
 public class EtcdProperties {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java
Patch:
@@ -137,7 +137,6 @@ public ShenyuAdminResult updateDashboardUser(@PathVariable("id")
                                                          message = "user is not found") final String id,
                                                  @Valid @RequestBody final DashboardUserDTO dashboardUserDTO) {
         dashboardUserDTO.setId(id);
-        Assert.notNull(dashboardUserDTO.getRole(), ShenyuResultMessage.PARAMETER_ERROR + ": role is not null");
         if (StringUtils.isNotBlank(dashboardUserDTO.getPassword())) {
             dashboardUserDTO.setPassword(ShaUtils.shaEncryption(dashboardUserDTO.getPassword()));
         }

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-api/src/main/java/org/apache/shenyu/examples/motan/service/MotanDemoService.java
Patch:
@@ -25,4 +25,5 @@
 @MotanAsync
 public interface MotanDemoService {
     String hello(String name);
+    String testTimeOut(String timeout);
 }

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/TestMotanApplication.java
Patch:
@@ -78,6 +78,7 @@ public BasicServiceConfigBean baseServiceConfig() {
         config.setModule("motan-demo-rpc");
         config.setApplication("myMotanDemo");
         config.setRegistry("registryConfig1");
+        config.setRequestTimeout(2000);
         return config;
     }
 }

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/config/RegistryProperties.java
Patch:
@@ -31,6 +31,7 @@ public class RegistryProperties {
 
     private String address;
 
+
     /**
      * Get the protocol.
      *
@@ -66,4 +67,5 @@ public String getAddress() {
     public void setAddress(final String address) {
         this.address = address;
     }
+
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/MemoryLimiter.java
Patch:
@@ -151,7 +151,7 @@ public boolean acquire(final Object o) {
                 return false;
             }
             memory.add(objectSize);
-            if (sum < memoryLimit) {
+            if (memory.sum() < memoryLimit) {
                 notLimited.signal();
             }
         } finally {

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/MemoryLimiter.java
Patch:
@@ -214,13 +214,12 @@ public void acquireInterruptibly(final Object o) throws InterruptedException {
         }
         acquireLock.lockInterruptibly();
         try {
-            final long sum = memory.sum();
             final long objectSize = inst.getObjectSize(o);
-            while (sum + objectSize >= memoryLimit) {
+            while (memory.sum() + objectSize >= memoryLimit) {
                 notLimited.await();
             }
             memory.add(objectSize);
-            if (sum < memoryLimit) {
+            if (memory.sum() < memoryLimit) {
                 notLimited.signal();
             }
         } finally {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public HttpClientProperties httpClientProperties() {
      * @return the http client loop resource
      */
     @Bean
-    @ConditionalOnProperty("shenyu.netty.httpclient.threadPool.prefix")
+    @ConditionalOnProperty("shenyu.httpclient.threadPool.prefix")
     public LoopResources httpClientLoopResource(final HttpClientProperties properties) {
         HttpClientProperties.ThreadPool threadPool = properties.getThreadPool();
         return LoopResources.create(threadPool.getPrefix(), threadPool.getSelectCount(),

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/result/ShenyuResultWrap.java
Patch:
@@ -65,11 +65,12 @@ public static Object error(final ShenyuResultEnum shenyuResult, final Object obj
     /**
      * Error object.
      *
+     * @param exchange the exchange
      * @param shenyuResult the shenyuResult
      * @return the object
      */
-    public static Object error(final ShenyuResultEnum shenyuResult) {
-        return shenyuResult().error(shenyuResult.getCode(), shenyuResult.getMsg(), null);
+    public static Object error(final ServerWebExchange exchange, final ShenyuResultEnum shenyuResult) {
+        return shenyuResult().error(exchange, shenyuResult.getCode(), shenyuResult.getMsg(), null);
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java
Patch:
@@ -47,8 +47,8 @@ private CryptorUtil() {
     public static Mono<Void> fail(final String mode, final ServerWebExchange exchange) {
         Object error = Optional.ofNullable(mode)
                 .filter(CryptorStrategyFactory.DECRYPT::equals)
-                .map(mod -> ShenyuResultWrap.error(exchange, ShenyuResultEnum.DECRYPTION_ERROR, null))
-                .orElse(ShenyuResultWrap.error(exchange, ShenyuResultEnum.ENCRYPTION_ERROR, null));
+                .map(mod -> ShenyuResultWrap.error(exchange, ShenyuResultEnum.DECRYPTION_ERROR))
+                .orElse(ShenyuResultWrap.error(exchange, ShenyuResultEnum.ENCRYPTION_ERROR));
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java
Patch:
@@ -136,7 +136,7 @@ public void testAlibabaDubboPluginMetaDataNull() {
 
         try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {
             shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap
-                            .error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM, null))
+                            .error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM))
                     .thenReturn(new Object());
 
             Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/AbstractDubboPlugin.java
Patch:
@@ -92,12 +92,12 @@ public Mono<Void> doExecute(final ServerWebExchange exchange,
         if (!checkMetaData(metaData)) {
             LOG.error(" path is : {}, meta data have error : {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (Objects.nonNull(metaData) && StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM);
             return WebFluxResultUtils.result(exchange, error);
         }
         this.rpcContext(exchange);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -70,20 +70,20 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         if (!checkMetaData(metaData)) {
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR);
             return WebFluxResultUtils.result(exchange, error);
         }
         assert metaData != null;
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_HAVE_BODY_PARAM, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_HAVE_BODY_PARAM);
             return WebFluxResultUtils.result(exchange, error);
         }
 
         final ShenyuGrpcClient client = GrpcClientCache.getGrpcClient(selector.getName());
         if (Objects.isNull(client)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_CLIENT_NULL, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_CLIENT_NULL);
             return WebFluxResultUtils.result(exchange, error);
         }
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/AbstractHttpClientPlugin.java
Patch:
@@ -70,7 +70,7 @@ public final Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPl
         assert shenyuContext != null;
         final URI uri = exchange.getAttribute(Constants.HTTP_URI);
         if (Objects.isNull(uri)) {
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL);
             return WebFluxResultUtils.result(exchange, error);
         }
         final long timeout = (long) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(3000L);

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/JwtPlugin.java
Patch:
@@ -61,7 +61,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
 
         // check secreteKey
         if (StringUtils.isEmpty(jwtConfig.getSecretKey())) {
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED);
             return WebFluxResultUtils.result(exchange, error);
         }
 
@@ -75,7 +75,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             }
             return chain.execute(converter(exchange, jwtBody, ruleHandle.getConverter()));
         }
-        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.ERROR_TOKEN, null);
+        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.ERROR_TOKEN);
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/MotanPlugin.java
Patch:
@@ -69,12 +69,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error("path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM);
             return WebFluxResultUtils.result(exchange, error);
         }
         final Mono<Object> result = motanProxyService.genericInvoker(param, metaData, exchange);

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java
Patch:
@@ -73,7 +73,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
                 .flatMap(response -> {
                     if (!response.isAllowed()) {
                         exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS, null);
+                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS);
                         return WebFluxResultUtils.result(exchange, error);
                     }
                     return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriter.java
Patch:
@@ -37,7 +37,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
         return chain.execute(exchange).then(Mono.defer(() -> {
             Object result = exchange.getAttribute(Constants.RPC_RESULT);
             if (Objects.isNull(result)) {
-                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR, null);
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR);
                 return WebFluxResultUtils.result(exchange, error);
             }
             return WebFluxResultUtils.result(exchange, result);

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -63,7 +63,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
             ServerHttpResponse response = exchange.getResponse();
             ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR);
             if (Objects.isNull(clientResponse)) {
-                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR, null);
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR);
                 return WebFluxResultUtils.result(exchange, error);
             }
             this.redrawResponseHeaders(response, clientResponse);

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/fallback/SentinelFallbackHandler.java
Patch:
@@ -38,13 +38,13 @@ public Mono<Void> withoutFallback(final ServerWebExchange exchange, final Throwa
         Object error;
         if (throwable instanceof DegradeException) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR, null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR);
         } else if (throwable instanceof FlowException) {
             exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS, null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS);
         } else if (throwable instanceof BlockException) {
             exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SENTINEL_BLOCK_ERROR, null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SENTINEL_BLOCK_ERROR);
         } else {
             return Mono.error(throwable);
         }

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/SofaPlugin.java
Patch:
@@ -69,12 +69,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SOFA_HAVE_BODY_PARAM, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SOFA_HAVE_BODY_PARAM);
             return WebFluxResultUtils.result(exchange, error);
         }
         Map<String, Map<String, String>> rpcContext = exchange.getAttribute(Constants.GENERAL_CONTEXT);

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -66,12 +66,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_HAVE_BODY_PARAM, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_HAVE_BODY_PARAM);
             return WebFluxResultUtils.result(exchange, error);
         }
         TarsInvokePrxList tarsInvokePrxList = ApplicationConfigCache.getInstance().get(metaData.getPath());
@@ -85,7 +85,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         } catch (Exception e) {
             LOG.error("Invoke tars error", e);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_INVOKE, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_INVOKE);
             return WebFluxResultUtils.result(exchange, error);
         }
         return Mono.fromFuture(future.thenApply(ret -> {

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -94,7 +94,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         Upstream upstream = LoadBalancerFactory.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
         if (Objects.isNull(upstream)) {
             LOG.error("websocket has no upstream");
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL, null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL);
             return WebFluxResultUtils.result(exchange, error);
         }
         URI wsRequestUrl = UriComponentsBuilder.fromUri(URI.create(buildWsRealPath(exchange, upstream, shenyuContext))).build().toUri();

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/FileSizeFilter.java
Patch:
@@ -73,7 +73,7 @@ public Mono<Void> filter(@NonNull final ServerWebExchange exchange, @NonNull fin
                         if (size.capacity() > BYTES_PER_MB * fileMaxSize) {
                             ServerHttpResponse response = exchange.getResponse();
                             response.setStatusCode(HttpStatus.BAD_REQUEST);
-                            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.PAYLOAD_TOO_LARGE, null);
+                            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.PAYLOAD_TOO_LARGE);
                             return WebFluxResultUtils.result(exchange, error);
                         }
                         BodyInserter<Mono<DataBuffer>, ReactiveHttpOutputMessage> bodyInsert = BodyInserters.fromPublisher(Mono.just(size), DataBuffer.class);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DataPermissionServiceImpl.java
Patch:
@@ -92,7 +92,6 @@ public List<String> getDataPermission(final String userId) {
      * @return int
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
     public int createSelector(final DataPermissionDTO dataPermissionDTO) {
 
         List<DataPermissionDO> allDOList = new LinkedList<>();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/MetaDataServiceTest.java
Patch:
@@ -280,7 +280,7 @@ private void testDeleteForEmptyIds() {
      * Cases where get a not empty id list.
      */
     private void testDeleteForNotEmptyIds() {
-        List<String> ids = Lists.newArrayList("id1", "id1", "id3");
+        List<String> ids = Lists.newArrayList("id1", "id3");
         int count = metaDataService.delete(ids);
         Assertions.assertEquals(0, count, "The count of delete should be 0.");
         when(metaDataMapper.selectByIdList(ids)).thenReturn(Arrays.asList(MetaDataDO.builder().build(), MetaDataDO.builder().build()));

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/DivideRuleHandle.java
Patch:
@@ -54,12 +54,12 @@ public class DivideRuleHandle implements RuleHandle {
     /**
      * headerMaxSize.
      */
-    private long headerMaxSize = Constants.HEADER_MAX_SIZE;
+    private long headerMaxSize;
 
     /**
      * requestMaxSize.
      */
-    private long requestMaxSize = Constants.REQUEST_MAX_SIZE;
+    private long requestMaxSize;
 
     /**
      * get loadBalance.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/DashboardUserMapper.java
Patch:
@@ -25,7 +25,6 @@
 
 import java.io.Serializable;
 import java.util.List;
-import java.util.Set;
 
 /**
  * DashboardUserMapper.
@@ -126,8 +125,8 @@ public interface DashboardUserMapper extends ExistProvider {
     /**
      * delete the specified dashboard users.
      *
-     * @param idSet primary key of dashboard_user
+     * @param idList primary key of dashboard_user
      * @return the count of deleted
      */
-    int deleteByIdSet(@Param("idSet") Set<String> idSet);
+    int deleteByIdList(@Param("idList") List<String> idList);
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/DataPermissionMapper.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shenyu.admin.model.entity.DataPermissionDO;
 
 import java.util.List;
-import java.util.Set;
 
 
 /**
@@ -67,10 +66,10 @@ int deleteByUniqueKey(@Param("dataId") String dataId,
 
     /**
      * delete permission data by ids of users.
-     * @param userIdSet ids of users
+     * @param userIdList ids of users
      * @return the count of deleted
      */
-    int deleteByUserIdSet(@Param("userIdSet") Set<String> userIdSet);
+    int deleteByUserIdList(@Param("userIdList") List<String> userIdList);
 
     /**
      * deleteSelector data permission by data id.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/UserRoleMapper.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shenyu.admin.model.entity.UserRoleDO;
 
 import java.util.List;
-import java.util.Set;
 
 /**
  * this is User Role Mapper.
@@ -87,8 +86,8 @@ public interface UserRoleMapper {
 
     /**
      * delete role by ids of users.
-     * @param userIdSet set of user ids
+     * @param userIdList set of user ids
      * @return the count of deleted
      */
-    int deleteByUserIdSet(@Param("userIdSet") Set<String> userIdSet);
+    int deleteByUserIdList(@Param("userIdList") List<String> userIdList);
 }

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/cache/MetaDataCache.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.collect.Maps;
 import org.apache.shenyu.common.cache.MemorySafeLRUMap;
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.utils.PathMatchUtils;
 
@@ -33,8 +34,6 @@
  */
 public final class MetaDataCache {
 
-    private static final int THE_256_MB = 256 * 1024 * 1024;
-
     private static final MetaData NULL = new MetaData();
 
     private static final MetaDataCache INSTANCE = new MetaDataCache();
@@ -44,7 +43,7 @@ public final class MetaDataCache {
      */
     private static final ConcurrentMap<String, MetaData> META_DATA_MAP = Maps.newConcurrentMap();
 
-    private static final MemorySafeLRUMap<String, MetaData> CACHE = new MemorySafeLRUMap<>(THE_256_MB, 1 << 16);
+    private static final MemorySafeLRUMap<String, MetaData> CACHE = new MemorySafeLRUMap<>(Constants.THE_256_MB, 1 << 16);
 
     /**
      * pathPattern -> path.

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/ExcludeFilter.java
Patch:
@@ -44,13 +44,13 @@ public ExcludeFilter(final List<String> paths) {
     }
     
     @Override
-    protected Mono<Boolean> doFilter(final ServerWebExchange exchange, final WebFilterChain chain) {
+    protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
         String path = exchange.getRequest().getURI().getPath();
-        return Mono.just(!paths.contains(path));
+        return Mono.just(paths.contains(path));
     }
     
     @Override
-    protected Mono<Void> doDenyResponse(final ServerWebExchange exchange) {
+    protected Mono<Void> doFilter(final ServerWebExchange exchange) {
         ServerHttpResponse response = exchange.getResponse();
         response.setStatusCode(HttpStatus.OK);
         return Mono.empty();

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/FallbackFilter.java
Patch:
@@ -47,13 +47,13 @@ public FallbackFilter(final List<String> paths, final DispatcherHandler dispatch
     }
     
     @Override
-    protected Mono<Boolean> doFilter(final ServerWebExchange exchange, final WebFilterChain chain) {
+    protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
         String path = exchange.getRequest().getURI().getPath();
-        return Mono.just(!paths.contains(path));
+        return Mono.just(paths.contains(path));
     }
     
     @Override
-    protected Mono<Void> doDenyResponse(final ServerWebExchange exchange) {
+    protected Mono<Void> doFilter(final ServerWebExchange exchange) {
         return dispatcherHandler.handle(exchange);
     }
 }

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/HealthFilter.java
Patch:
@@ -52,12 +52,12 @@ public HealthFilter(final List<String> paths) {
     }
     
     @Override
-    protected Mono<Boolean> doFilter(final ServerWebExchange exchange, final WebFilterChain chain) {
-        return Mono.just(!paths.contains(exchange.getRequest().getURI().getPath()));
+    protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
+        return Mono.just(paths.contains(exchange.getRequest().getURI().getPath()));
     }
     
     @Override
-    protected Mono<Void> doDenyResponse(final ServerWebExchange exchange) {
+    protected Mono<Void> doFilter(final ServerWebExchange exchange) {
         String result = JsonUtils.toJson(new Health.Builder().up().build());
         DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(result.getBytes(StandardCharsets.UTF_8));
         return exchange.getResponse().writeWith(Mono.just(dataBuffer));

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/LocalDispatcherFilter.java
Patch:
@@ -51,12 +51,12 @@ public LocalDispatcherFilter(final DispatcherHandler dispatcherHandler, final St
     }
     
     @Override
-    protected Mono<Boolean> doFilter(final ServerWebExchange exchange, final WebFilterChain chain) {
-        return Mono.just(!exchange.getRequest().getURI().getPath().startsWith(DISPATCHER_PATH));
+    protected Mono<Boolean> doMatcher(final ServerWebExchange exchange, final WebFilterChain chain) {
+        return Mono.just(exchange.getRequest().getURI().getPath().startsWith(DISPATCHER_PATH));
     }
     
     @Override
-    protected Mono<Void> doDenyResponse(final ServerWebExchange exchange) {
+    protected Mono<Void> doFilter(final ServerWebExchange exchange) {
         String localKey = exchange.getRequest().getHeaders().getFirst(Constants.LOCAL_KEY);
         if (Objects.isNull(sha512Key) || !sha512Key.equalsIgnoreCase(ShaUtils.shaEncryption(localKey)) || Objects.isNull(localKey)) {
             return Mono.error(new ResponseStatusException(HttpStatus.FORBIDDEN, "The key is not correct."));

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -121,9 +121,9 @@ public enum PluginEnum {
     RESILIENCE4J(150, 0, "resilience4j"),
     
     /**
-     * Logging plugin enum.
+     * Logging console plugin enum.
      */
-    LOGGING(160, 0, "logging"),
+    LOGGING_CONSOLE(160, 0, "loggingConsole"),
 
     /**
      * Logging RocketMQ plugin enum.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/AbstractLogCollector.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging;
+package org.apache.shenyu.plugin.logging.rocketmq;
 
 import org.apache.shenyu.common.utils.ThreadUtils;
-import org.apache.shenyu.plugin.logging.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.utils.LogCollectConfigUtils;
+import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rocketmq.utils.LogCollectConfigUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/DefaultLogCollector.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging;
+package org.apache.shenyu.plugin.logging.rocketmq;
 
-import org.apache.shenyu.plugin.logging.handler.LoggingRocketMQPluginDataHandler;
+import org.apache.shenyu.plugin.logging.rocketmq.handler.LoggingRocketMQPluginDataHandler;
 
 /**
  * default log collector，depend a LogConsumeClient for consume logs.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/LogCollector.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging;
+package org.apache.shenyu.plugin.logging.rocketmq;
 
-import org.apache.shenyu.plugin.logging.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
 
 /**
  * Collect logs and put into buffer queue.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/LogConsumeClient.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging;
+package org.apache.shenyu.plugin.logging.rocketmq;
 
-import org.apache.shenyu.plugin.logging.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
 
 import java.util.List;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/body/BodyWriter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.body;
+package org.apache.shenyu.plugin.logging.rocketmq.body;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/config/LogCollectConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.config;
+package org.apache.shenyu.plugin.logging.rocketmq.config;
 
 /**
  * log collect config, include rocketmq config.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/constant/LoggingConstant.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.constant;
+package org.apache.shenyu.plugin.logging.rocketmq.constant;
 
 /**
  * Some log related property constants.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/entity/LZ4CompressData.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.entity;
+package org.apache.shenyu.plugin.logging.rocketmq.entity;
 
 /**
  * Lz4 compressed data.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/entity/ShenyuRequestLog.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.entity;
+package org.apache.shenyu.plugin.logging.rocketmq.entity;
 
 /**
  * shenyu gateway access log.

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/sampler/CountSampler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.sampler;
+package org.apache.shenyu.plugin.logging.rocketmq.sampler;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/sampler/Sampler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.sampler;
+package org.apache.shenyu.plugin.logging.rocketmq.sampler;
 
 import org.springframework.http.server.reactive.ServerHttpRequest;
 

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/utils/LogCollectUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.utils;
+package org.apache.shenyu.plugin.logging.rocketmq.utils;
 
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.springframework.http.HttpHeaders;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/DefaultLogCollectorTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging;
+package org.apache.shenyu.plugin.logging.rocketmq;
 
-import org.apache.shenyu.plugin.logging.entity.ShenyuRequestLog;
-import org.apache.shenyu.plugin.logging.rocketmq.RocketMQLogCollectClient;
+import org.apache.shenyu.plugin.logging.rocketmq.entity.ShenyuRequestLog;
+import org.apache.shenyu.plugin.logging.rocketmq.rocketmq.RocketMQLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/LoggingRocketMQPluginTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging;
+package org.apache.shenyu.plugin.logging.rocketmq;
 
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/body/BodyWriterTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.body;
+package org.apache.shenyu.plugin.logging.rocketmq.body;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/config/LogCollectConfigTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.config;
+package org.apache.shenyu.plugin.logging.rocketmq.config;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/entity/LZ4CompressDataTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.entity;
+package org.apache.shenyu.plugin.logging.rocketmq.entity;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/entity/ShenyuRequestLogTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.entity;
+package org.apache.shenyu.plugin.logging.rocketmq.entity;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/handler/LoggingRocketMQPluginDataHandlerTest.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.handler;
+package org.apache.shenyu.plugin.logging.rocketmq.handler;
 
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.plugin.logging.rocketmq.RocketMQLogCollectClient;
+import org.apache.shenyu.plugin.logging.rocketmq.rocketmq.RocketMQLogCollectClient;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/sampler/CountSamplerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.sampler;
+package org.apache.shenyu.plugin.logging.rocketmq.sampler;
 
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-plugin/shenyu-plugin-logging/shenyu-plugin-logging-rocketmq/src/test/java/org/apache/shenyu/plugin/logging/rocketmq/utils/LogCollectUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.logging.utils;
+package org.apache.shenyu.plugin.logging.rocketmq.utils;
 
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/springboot/starter/plugin/logging/rocketmq/LoggingRocketMQPluginConfiguration.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.logging.LoggingRocketMQPlugin;
-import org.apache.shenyu.plugin.logging.handler.LoggingRocketMQPluginDataHandler;
+import org.apache.shenyu.plugin.logging.rocketmq.LoggingRocketMQPlugin;
+import org.apache.shenyu.plugin.logging.rocketmq.handler.LoggingRocketMQPluginDataHandler;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -29,7 +29,7 @@
  * config logging RocketMQ plugin.
  */
 @Configuration
-@ConditionalOnProperty(value = {"shenyu.logging.rocketmq.enabled"}, havingValue = "true", matchIfMissing = true)
+@ConditionalOnProperty(value = {"shenyu.plugins.logging-rocketmq.enabled"}, havingValue = "true", matchIfMissing = true)
 public class LoggingRocketMQPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/test/java/org/apache/shenyu/springboot/starter/gateway/ShenyuConfigurationTest.java
Patch:
@@ -60,7 +60,8 @@ public void before() {
                 "debug=true",
                 "shenyu.cross.enabled=true",
                 "shenyu.file.enabled=true",
-                "shenyu.exclude.enabled=true"
+                "shenyu.exclude.enabled=true",
+                "shenyu.local.enabled=true"
             );
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
 import org.apache.shenyu.admin.utils.JwtUtils;
 import org.apache.shenyu.common.constant.AdminConstants;
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
@@ -440,8 +441,8 @@ private List<SelectorConditionDTO> buildDefaultSelectorConditionDTO(final String
         SelectorConditionDTO selectorConditionDTO = new SelectorConditionDTO();
         selectorConditionDTO.setParamType(ParamTypeEnum.URI.getName());
         selectorConditionDTO.setParamName("/");
-        selectorConditionDTO.setOperator(OperatorEnum.MATCH.getAlias());
-        selectorConditionDTO.setParamValue(contextPath + AdminConstants.URI_SUFFIX);
+        selectorConditionDTO.setOperator(OperatorEnum.STARTS_WITH.getAlias());
+        selectorConditionDTO.setParamValue(contextPath + Constants.PATH_SEPARATOR);
         return Collections.singletonList(selectorConditionDTO);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AuthPathWarpDTO.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import org.apache.shenyu.admin.mapper.AuthPathMapper;
+import org.apache.shenyu.admin.mapper.AppAuthMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
 
 import javax.validation.constraints.NotEmpty;
@@ -32,7 +32,7 @@ public class AuthPathWarpDTO implements Serializable {
 
     private static final long serialVersionUID = -3167442906221294444L;
     
-    @Existed(message = "app key not existed", provider = AuthPathMapper.class)
+    @Existed(message = "app key not existed", provider = AppAuthMapper.class)
     private String id;
 
     @NotEmpty(message = "auth path is not empty")

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/AppAuthControllerTest.java
Patch:
@@ -228,8 +228,8 @@ public void testUpdateDetailPath() throws Exception {
         authPathWarpDTO.setAuthPathDTOList(authPathDTOS);
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         SpringBeanUtils.getInstance().setApplicationContext(context);
-        when(SpringBeanUtils.getInstance().getBean(AuthPathMapper.class)).thenReturn(authPathMapper);
-        when(authPathMapper.existed(authPathWarpDTO.getId())).thenReturn(true);
+        when(SpringBeanUtils.getInstance().getBean(AppAuthMapper.class)).thenReturn(appAuthMapper);
+        when(appAuthMapper.existed(authPathWarpDTO.getId())).thenReturn(true);
         given(this.appAuthService.updateDetailPath(authPathWarpDTO)).willReturn(ShenyuAdminResult.success());
         this.mockMvc.perform(MockMvcRequestBuilders.post("/appAuth/updateDetailPath")
                 .contentType(MediaType.APPLICATION_JSON)

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -63,7 +63,6 @@ protected HttpHeaders buildHttpHeaders(final ServerWebExchange exchange) {
             acceptEncoding.remove(Constants.HTTP_ACCEPT_ENCODING_GZIP);
             headers.set(HttpHeaders.ACCEPT_ENCODING, String.join(",", acceptEncoding));
         }
-        headers.remove(HttpHeaders.HOST);
         return headers;
     }
 

File: shenyu-proxy/shenyu-proxy-remote/src/main/java/org/apache/shenyu/proxy/remote/netty/NettyServerHandler.java
Patch:
@@ -110,5 +110,4 @@ public void exceptionCaught(final ChannelHandlerContext ctx, final Throwable cau
         NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel());
         channelHandler.caught(channel, cause);
     }
-    
 }

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java
Patch:
@@ -84,7 +84,7 @@ public void testRun() {
         // Let it coverage line 151~163.
         when(upstream.isHealthy()).thenReturn(false).thenReturn(true);
         // Even if the address could not connect, it will return false, that mean it will not coverage 151~163.
-        when(upstream.getUrl()).thenReturn("http://www.baidu.com");
+        when(upstream.getUrl()).thenReturn("https://www.baidu.com");
         // Manually run one time
         healthCheckTask.run();
         Awaitility.await().pollDelay(1, TimeUnit.SECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/PluginService.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.query.PluginQuery;
+import org.apache.shenyu.admin.model.query.PluginQueryCondition;
 import org.apache.shenyu.admin.model.vo.PluginSnapshotVO;
 import org.apache.shenyu.admin.model.vo.PluginVO;
 import org.apache.shenyu.common.dto.PluginData;
@@ -31,7 +32,7 @@
 /**
  * this is plugin service.
  */
-public interface PluginService {
+public interface PluginService extends PageService<PluginQueryCondition, PluginVO> {
     
     /**
      * Create or update string.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/SyncDataService.java
Patch:
@@ -23,15 +23,15 @@
  * The interface Sync data service.
  */
 public interface SyncDataService {
-
+    
     /**
      * Sync all boolean.
      *
      * @param type the type
      * @return the boolean
      */
     boolean syncAll(DataEventTypeEnum type);
-
+    
     /**
      * Sync plugin data boolean.
      *

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/AppAuthService.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * this is application authority service.
  */
-public interface AppAuthService {
+public interface AppAuthService extends PageService<AppAuthQuery, AppAuthVO> {
 
 
     /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java
Patch:
@@ -126,7 +126,7 @@ public static void afterClass() {
     @BeforeEach
     public void setUp() {
         shenyuRegisterCenterConfig.setRegisterType("http");
-
+        shenyuRegisterCenterConfig.getProps().setProperty(Constants.IS_CHECKED, "true");
         // get static variable reference by reflection
         upstreamMap = (Map<String, List<DivideUpstream>>) ReflectionTestUtils.getField(UpstreamCheckService.class, "UPSTREAM_MAP");
         zombieSet = (Set<ZombieUpstream>) ReflectionTestUtils.getField(UpstreamCheckService.class, "ZOMBIE_SET");

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/PluginController.java
Patch:
@@ -76,7 +76,6 @@ public PluginController(final PluginService pluginService, final SyncDataService
      * @return {@linkplain ShenyuAdminResult}
      */
     @GetMapping("")
-    @RequiresPermissions("system:plugin:list")
     public ShenyuAdminResult queryPlugins(final String name, final Integer enabled,
                                           @NotNull final Integer currentPage,
                                           @NotNull final Integer pageSize) {
@@ -90,7 +89,6 @@ public ShenyuAdminResult queryPlugins(final String name, final Integer enabled,
      * @return {@linkplain ShenyuAdminResult}
      */
     @GetMapping("/all")
-    @RequiresPermissions("system:plugin:list")
     public ShenyuAdminResult queryAllPlugins() {
         List<PluginData> pluginDataList = pluginService.listAll();
         return ShenyuAdminResult.success(ShenyuResultMessage.QUERY_SUCCESS, pluginDataList);
@@ -195,7 +193,6 @@ public ShenyuAdminResult syncPluginAll() {
      * @return the mono
      */
     @PutMapping("/syncPluginData/{id}")
-    @RequiresPermissions("system:plugin:modify")
     public ShenyuAdminResult syncPluginData(@PathVariable("id")
                                             @Existed(message = "plugin is not existed",
                                                     provider = PluginMapper.class) final String id) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ShenyuDictController.java
Patch:
@@ -84,7 +84,6 @@ public ShenyuAdminResult queryDicts(final String type, final String dictCode, fi
      * @return {@linkplain ShenyuAdminResult}
      */
     @GetMapping("/all/{type}")
-    @RequiresPermissions("system:dict:list")
     public ShenyuAdminResult findByType(@PathVariable("type") final String type) {
         return ShenyuAdminResult.success(ShenyuResultMessage.QUERY_SUCCESS, shenyuDictService.list(type));
     }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/RpcParamTransformPlugin.java
Patch:
@@ -32,7 +32,6 @@
 import org.springframework.lang.NonNull;
 import org.springframework.util.LinkedMultiValueMap;
 import org.springframework.web.server.ServerWebExchange;
-import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
 import java.io.UnsupportedEncodingException;
@@ -81,14 +80,14 @@ private Mono<Void> body(final ServerWebExchange exchange, final ServerHttpReques
     }
 
     private Mono<Void> formData(final ServerWebExchange exchange, final ServerHttpRequest serverHttpRequest, final ShenyuPluginChain chain) {
-        return Mono.from(serverHttpRequest.getBody()
+        return Mono.from(DataBufferUtils.join(serverHttpRequest.getBody())
                 .flatMap(map -> {
                     String param = resolveBodyFromRequest(map);
                     LinkedMultiValueMap<String, String> linkedMultiValueMap;
                     try {
                         linkedMultiValueMap = BodyParamUtils.buildBodyParams(URLDecoder.decode(param, StandardCharsets.UTF_8.name()));
                     } catch (UnsupportedEncodingException e) {
-                        return Flux.error(e);
+                        return Mono.error(e);
                     }
                     exchange.getAttributes().put(Constants.PARAM_TRANSFORM, HttpParamConverter.toMap(() -> linkedMultiValueMap));
                     return chain.execute(exchange);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractContextPathRegisterService.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.service.register;
 
-import org.apache.shenyu.admin.utils.PathUtils;
+import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.shenyu.admin.service.SelectorService;
 import org.apache.shenyu.admin.service.impl.UpstreamCheckService;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
-import org.apache.shenyu.admin.utils.PathUtils;
+import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.dto.convert.selector.CommonUpstream;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.service.MetaDataService;
 import org.apache.shenyu.admin.service.converter.SpringCloudSelectorHandleConverter;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
-import org.apache.shenyu.admin.utils.PathUtils;
+import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.client.core.exception.ShenyuClientIllegalArgumentException;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.utils.IpUtils;
+import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.utils.PortUtils;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -117,7 +118,7 @@ private MetaDataRegisterDTO buildMetaDataDTO() {
         return MetaDataRegisterDTO.builder()
                 .contextPath(contextPath)
                 .appName(appName)
-                .path(contextPath)
+                .path(PathUtils.decoratorPath(contextPath))
                 .rpcType(RpcTypeEnum.SPRING_CLOUD.getName())
                 .enabled(true)
                 .ruleName(contextPath)

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.IpUtils;
+import org.apache.shenyu.common.utils.PathUtils;
 import org.apache.shenyu.common.utils.PortUtils;
 import org.apache.shenyu.register.common.config.PropertiesConfig;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -124,7 +125,7 @@ private MetaDataRegisterDTO buildMetaDataDTO() {
         return MetaDataRegisterDTO.builder()
             .contextPath(contextPath)
             .appName(appName)
-            .path(contextPath)
+            .path(PathUtils.decoratorPath(contextPath))
             .rpcType(RpcTypeEnum.HTTP.getName())
             .enabled(true)
             .ruleName(contextPath)

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/PathUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.utils;
+package org.apache.shenyu.common.utils;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.constant.AdminConstants;

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/PathUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.utils;
+package org.apache.shenyu.common.utils;
 
 import org.apache.shenyu.common.constant.AdminConstants;
 import org.junit.jupiter.api.Test;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ResourceController.java
Patch:
@@ -151,7 +151,7 @@ public ShenyuAdminResult createResource(@Valid @RequestBody final ResourceDTO re
     public ShenyuAdminResult updateResource(@PathVariable("id") @Valid
                                             @Existed(provider = ResourceMapper.class,
                                                     message = "resource not existed") final String id,
-                                            @Valid @RequestBody final ResourceDTO resourceDTO) {
+                                            @RequestBody final ResourceDTO resourceDTO) {
         resourceDTO.setId(id);
         return ShenyuAdminResult.success(ShenyuResultMessage.UPDATE_SUCCESS, resourceService.createOrUpdate(resourceDTO));
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/ResourceControllerTest.java
Patch:
@@ -48,7 +48,6 @@
 import static com.google.common.collect.Lists.newArrayList;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 
 /**
@@ -190,8 +189,6 @@ public void testUpdateResource() throws Exception {
         resourceDTO.setId(mockId);
         fill(resourceDTO);
         SpringBeanUtils.getInstance().setApplicationContext(mock(ConfigurableApplicationContext.class));
-        when(SpringBeanUtils.getInstance().getBean(ResourceMapper.class)).thenReturn(resourceMapper);
-        when(resourceMapper.existed(resourceDTO.getId())).thenReturn(true);
         given(resourceService.createOrUpdate(resourceDTO)).willReturn(1);
 
         this.mockMvc.perform(MockMvcRequestBuilders.put("/resource/" + mockId)

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-redis/src/main/java/org/apache/shenyu/plugin/cache/redis/RedisCache.java
Patch:
@@ -52,7 +52,7 @@ public boolean cacheData(final String key, final byte[] bytes, final long timeou
     }
 
     /**
-     * Check the cache is exist or not.
+     * Check the cache is existed or not.
      * @param key the cache key
      * @return true exist
      */

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-spi/src/main/java/org/apache/shenyu/plugin/cache/ICache.java
Patch:
@@ -37,7 +37,7 @@ public interface ICache {
     boolean cacheData(String key, byte[] bytes, long timeoutSeconds);
 
     /**
-     * Check the cache is exist or not.
+     * Check the cache is existed or not.
      * @param key the cache key
      * @return true exist
      */

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-redis/src/main/java/org/apache/shenyu/plugin/cache/redis/RedisCache.java
Patch:
@@ -47,7 +47,8 @@ public RedisCache(final RedisConfigProperties redisConfigProperties) {
      */
     @Override
     public boolean cacheData(final String key, final byte[] bytes, final long timeoutSeconds) {
-        return Boolean.TRUE.equals(this.redisTemplate.opsForValue().set(key, bytes, Duration.ofSeconds(timeoutSeconds)).block());
+        this.redisTemplate.opsForValue().set(key, bytes, Duration.ofSeconds(timeoutSeconds)).subscribe();
+        return true;
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/RpcParamTransformPlugin.java
Patch:
@@ -73,7 +73,7 @@ public String named() {
     }
 
     private Mono<Void> body(final ServerWebExchange exchange, final ServerHttpRequest serverHttpRequest, final ShenyuPluginChain chain) {
-        return Mono.from(serverHttpRequest.getBody()
+        return Mono.from(DataBufferUtils.join(serverHttpRequest.getBody())
                 .flatMap(body -> {
                     exchange.getAttributes().put(Constants.PARAM_TRANSFORM, resolveBodyFromRequest(body));
                     return chain.execute(exchange);

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/json/JsonServerCallListener.java
Patch:
@@ -62,7 +62,7 @@ public void onMessage(final R message) {
         Message.Builder builder;
         Class<?> t = JsonServerServiceInterceptor.getRequestClazzMap().get(call.getMethodDescriptor().getFullMethodName());
         try {
-            builder = (Message.Builder) ReflectUtils.invokeMethod(t, "newBuilder");
+            builder = (Message.Builder) ReflectUtils.invokeStaticMethod(t, "newBuilder");
 
             String reqData = JsonMessage.getDataFromDynamicMessage((DynamicMessage) message);
             JsonFormat.parser().ignoringUnknownFields().merge(reqData, builder);

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/CacheRuleHandle.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * The type Divide rule handle.
  */
-public class CacheWriteRuleHandle implements RuleHandle {
+public class CacheRuleHandle implements RuleHandle {
 
     /**
      * the cache timeout seconds.

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-handler/src/main/java/org/apache/shenyu/plugin/cache/config/CacheConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cache.base.config;
+package org.apache.shenyu.plugin.cache.config;
 
 import java.util.Objects;
 

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-handler/src/main/java/org/apache/shenyu/plugin/cache/utils/CacheUtils.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cache.base.utils;
+package org.apache.shenyu.plugin.cache.utils;
 
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.cache.ICache;
-import org.apache.shenyu.plugin.cache.base.config.CacheConfig;
+import org.apache.shenyu.plugin.cache.config.CacheConfig;
 import org.apache.shenyu.plugin.cache.memory.MemoryCache;
 import org.springframework.web.server.ServerWebExchange;
 
@@ -66,7 +66,7 @@ public static String contentTypeKey(final ServerWebExchange exchange) {
      * @return cache
      */
     public static ICache getCache() {
-        CacheConfig cacheConfig = Singleton.INST.get(CacheConfig.class);
+        final CacheConfig cacheConfig = Singleton.INST.get(CacheConfig.class);
         return Optional.ofNullable(cacheConfig).map(config -> Singleton.INST.get(ICache.class)).orElse(new MemoryCache());
     }
 }

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-redis/src/main/java/org/apache/shenyu/plugin/cache/redis/RedisConfigProperties.java
Patch:
@@ -27,7 +27,7 @@
  * The configuration for redis.
  */
 public class RedisConfigProperties {
-    
+
     private Integer database = 0;
 
     private String master;

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/GlobalPluginTest.java
Patch:
@@ -82,7 +82,7 @@ public void testExecuted() {
 
     @Test
     public void testGetOrder() {
-        assertEquals(10, globalPlugin.getOrder());
+        assertEquals(5, globalPlugin.getOrder());
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -369,8 +369,8 @@ public AppAuthVO findById(final String id) {
     }
 
     @Override
-    public List<AuthPathVO> detailPath(final String id) {
-        List<AuthPathDO> authPathDOList = authPathMapper.findByAuthId(id);
+    public List<AuthPathVO> detailPath(final String authId) {
+        List<AuthPathDO> authPathDOList = authPathMapper.findByAuthId(authId);
         if (CollectionUtils.isEmpty(authPathDOList)) {
             return new ArrayList<>();
         }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImplTest.java
Patch:
@@ -16,7 +16,7 @@
  */
     
 package org.apache.shenyu.admin.service.register;
-    
+
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.entity.MetaDataDO;
 import org.apache.shenyu.admin.model.entity.SelectorDO;
@@ -45,7 +45,7 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
-    
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doReturn;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java
Patch:
@@ -41,7 +41,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
-    
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doReturn;

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shenyu.loadbalancer.cache;
 
-import java.util.concurrent.TimeUnit;
-
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 
+import java.util.concurrent.TimeUnit;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.junit.jupiter.api.Assertions.assertFalse;

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-base/src/main/java/org/apache/shenyu/plugin/cache/base/config/CacheConfig.java
Patch:
@@ -17,13 +17,12 @@
 
 package org.apache.shenyu.plugin.cache.base.config;
 
-import java.io.Serializable;
 import java.util.Objects;
 
 /**
  * CacheConfig.
  */
-public class CacheConfig implements Serializable {
+public class CacheConfig {
 
     /**
      * the type of config cache, default memory.

File: shenyu-plugin/shenyu-plugin-cache/shenyu-plugin-cache-redis/src/main/java/org/apache/shenyu/plugin/cache/redis/RedisCache.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shenyu.plugin.cache.ICache;
 import org.apache.shenyu.plugin.cache.redis.serializer.ShenyuRedisSerializationContext;
-import org.apache.shenyu.spi.Join;
 import org.springframework.data.redis.connection.ReactiveRedisConnection;
 import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;
 import org.springframework.data.redis.core.ReactiveRedisTemplate;
@@ -30,7 +29,6 @@
 /**
  * RedisCache.
  */
-@Join
 public final class RedisCache implements ICache {
 
     private final ReactiveRedisTemplate<String, byte[]> redisTemplate;

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/Singleton.java
Patch:
@@ -41,7 +41,7 @@ public enum Singleton {
      * @param clazz the clazz
      * @param o     the o
      */
-    public void single(final Class clazz, final Object o) {
+    public void single(final Class<?> clazz, final Object o) {
         SINGLES.put(clazz.getName(), o);
     }
 

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/handler/ShenyuReactiveRedisTemplate.java
Patch:
@@ -17,18 +17,17 @@
 
 package org.apache.shenyu.plugin.ratelimiter.handler;
 
-import java.util.List;
-
 import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;
 import org.springframework.data.redis.core.ReactiveRedisTemplate;
 import org.springframework.data.redis.core.script.ReactiveScriptExecutor;
 import org.springframework.data.redis.core.script.RedisScript;
 import org.springframework.data.redis.serializer.RedisElementReader;
 import org.springframework.data.redis.serializer.RedisElementWriter;
 import org.springframework.data.redis.serializer.RedisSerializationContext;
-
 import reactor.core.publisher.Flux;
 
+import java.util.List;
+
 /**
  * The type reactive redisTemplate.
  */

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiterScriptsTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.Singleton;
+import org.apache.shenyu.plugin.cache.redis.RedisConfigProperties;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithm;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithmFactory;
-import org.apache.shenyu.plugin.ratelimiter.config.RateLimiterConfig;
 import org.apache.shenyu.plugin.ratelimiter.handler.RateLimiterPluginDataHandler;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
@@ -57,7 +57,7 @@ public static void startup() {
                 .build();
         redisServer.start();
         RateLimiterPluginDataHandler handler = new RateLimiterPluginDataHandler();
-        RateLimiterConfig config = new RateLimiterConfig();
+        RedisConfigProperties config = new RedisConfigProperties();
         config.setUrl("127.0.0.1:63792");
         PluginData pluginData = PluginData.builder()
                 .enabled(true)

File: shenyu-plugin/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/body/LoggingServerHttpRequest.java
Patch:
@@ -47,9 +47,8 @@ public LoggingServerHttpRequest(final ServerHttpRequest delegate, final ShenyuRe
     @NonNull
     public Flux<DataBuffer> getBody() {
         BodyWriter writer = new BodyWriter();
-        boolean collectRequestBody = LogCollectConfigUtils.getLogFieldSwitchConfig().isRequestBody();
         return super.getBody().doOnNext(dataBuffer -> {
-            if (LogCollectUtils.isNotBinaryType(getHeaders()) && collectRequestBody) {
+            if (LogCollectUtils.isNotBinaryType(getHeaders())) {
                 writer.write(dataBuffer.asByteBuffer().asReadOnlyBuffer());
             }
         }).doFinally(signal -> {

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/SentinelHandle.java
Patch:
@@ -59,7 +59,7 @@ public class SentinelHandle {
     /**
      * Degrade rule count.
      */
-    private Integer degradeRuleCount;
+    private Double degradeRuleCount;
 
     /**
      * Degrade rule time window.
@@ -199,7 +199,7 @@ public void setDegradeRuleGrade(final Integer degradeRuleGrade) {
      *
      * @return degradeRuleCount
      */
-    public Integer getDegradeRuleCount() {
+    public Double getDegradeRuleCount() {
         return degradeRuleCount;
     }
 
@@ -208,7 +208,7 @@ public Integer getDegradeRuleCount() {
      *
      * @param degradeRuleCount degradeRuleCount
      */
-    public void setDegradeRuleCount(final Integer degradeRuleCount) {
+    public void setDegradeRuleCount(final Double degradeRuleCount) {
         this.degradeRuleCount = degradeRuleCount;
     }
 

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SentinelPluginTest.java
Patch:
@@ -98,7 +98,7 @@ private static List<ConditionData> buildSelectorConditionList() {
     private static List<RuleLocalData> buildRuleLocalDataList(final String fallbackUri) {
         final RuleLocalData ruleLocalData = new RuleLocalData();
         SentinelHandle sentinelHandle = new SentinelHandle();
-        sentinelHandle.setDegradeRuleCount(1);
+        sentinelHandle.setDegradeRuleCount(1d);
         sentinelHandle.setDegradeRuleEnable(1);
         sentinelHandle.setFlowRuleEnable(1);
         sentinelHandle.setFlowRuleCount(1);

File: shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandleTest.java
Patch:
@@ -59,7 +59,7 @@ public void removeRule() {
         sentinelHandle.setFlowRuleCount(10);
         sentinelHandle.setFlowRuleGrade(0);
         sentinelHandle.setFlowRuleControlBehavior(0);
-        sentinelHandle.setDegradeRuleCount(1);
+        sentinelHandle.setDegradeRuleCount(1d);
         sentinelHandle.setDegradeRuleGrade(0);
         sentinelHandle.setDegradeRuleTimeWindow(5);
         sentinelHandle.setDegradeRuleMinRequestAmount(5);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-context-path/src/main/java/org/apache/shenyu/springboot/starter/plugin/context/path/ContextPathPluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.context.path.ContextPathPlugin;
 import org.apache.shenyu.plugin.context.path.handler.ContextPathPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Context path plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.context-path.enabled"}, havingValue = "true", matchIfMissing = true)
 public class ContextPathPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-cryptor/src/main/java/org/apache/shenyu/springboot/starter/plugin/cryptor/CryptorPluginConfiguration.java
Patch:
@@ -23,13 +23,15 @@
 import org.apache.shenyu.plugin.cryptor.handler.CryptorResponsePluginDataHandler;
 import org.apache.shenyu.plugin.cryptor.request.CryptorRequestPlugin;
 import org.apache.shenyu.plugin.cryptor.response.CryptorResponsePlugin;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  *  Cryptor plugin.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.cryptor.enabled"}, havingValue = "true", matchIfMissing = true)
 public class CryptorPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-divide/src/main/java/org/apache/shenyu/springboot/plugin/divide/DividePluginConfiguration.java
Patch:
@@ -23,13 +23,15 @@
 import org.apache.shenyu.plugin.divide.DividePlugin;
 import org.apache.shenyu.plugin.divide.context.DivideShenyuContextDecorator;
 import org.apache.shenyu.plugin.divide.handler.DividePluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * ShenyuConfiguration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.divide.enabled"}, havingValue = "true", matchIfMissing = true)
 public class DividePluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/alibaba/dubbo/AlibabaDubboPluginConfiguration.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -38,6 +39,7 @@
 @Configuration
 @ConditionalOnClass(AlibabaDubboPlugin.class)
 @ImportAutoConfiguration(DubboCommonConfiguration.class)
+@ConditionalOnProperty(value = {"shenyu.plugins.alibaba-dubbo.enabled"}, havingValue = "true", matchIfMissing = true)
 public class AlibabaDubboPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-apache-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/apache/dubbo/ApacheDubboPluginConfiguration.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -38,6 +39,7 @@
 @Configuration
 @ConditionalOnClass(ApacheDubboPlugin.class)
 @ImportAutoConfiguration(DubboCommonConfiguration.class)
+@ConditionalOnProperty(value = {"shenyu.plugins.apache-dubbo.enabled"}, havingValue = "true", matchIfMissing = true)
 public class ApacheDubboPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-general-context/src/main/java/org/apache/shenyu/springboot/starter/plugin/general/context/GeneralContextPluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.general.context.GeneralContextPlugin;
 import org.apache.shenyu.plugin.general.context.handler.GeneralContextPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type General Context plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.general-context.enabled"}, havingValue = "true", matchIfMissing = true)
 public class GeneralContextPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-grpc/src/main/java/org/apache/shenyu/springboot/starter/plugin/grpc/GrpcPluginConfiguration.java
Patch:
@@ -24,13 +24,15 @@
 import org.apache.shenyu.plugin.grpc.GrpcPlugin;
 import org.apache.shenyu.plugin.grpc.context.GrpcShenyuContextDecorator;
 import org.apache.shenyu.plugin.grpc.handler.GrpcPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type grpc plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.grpc.enabled"}, havingValue = "true", matchIfMissing = true)
 public class GrpcPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-hystrix/src/main/java/org/apache/shenyu/springboot/starter/plugin/hystrix/HystrixPluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.hystrix.HystrixPlugin;
 import org.apache.shenyu.plugin.hystrix.handler.HystrixPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Hystrix plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.hystrix.enabled"}, havingValue = "true", matchIfMissing = true)
 public class HystrixPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-jwt/src/main/java/org/apache/shenyu/springboot/starter/plugin/jwt/JwtPluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.jwt.JwtPlugin;
 import org.apache.shenyu.plugin.jwt.handle.JwtPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Jwt plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.jwt.enabled"}, havingValue = "true", matchIfMissing = true)
 public class JwtPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/springboot/starter/plugin/logging/rocketmq/LoggingRocketMQPluginConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.logging.LoggingRocketMQPlugin;
 import org.apache.shenyu.plugin.logging.config.LogCollectConfig;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -28,6 +29,7 @@
  * config logging RocketMQ plugin.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.logging.rocketmq.enabled"}, havingValue = "true", matchIfMissing = true)
 public class LoggingRocketMQPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-logging/src/main/java/org/apache/shenyu/springboot/starter/plugin/logging/LoggingPluginConfiguration.java
Patch:
@@ -19,13 +19,15 @@
 
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.logging.LoggingPlugin;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Logging plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.logging.enabled"}, havingValue = "true", matchIfMissing = true)
 public class LoggingPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-modify-response/src/main/java/org/apache/shenyu/springboot/starter/plugin/modify/response/ModifyResponsePluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.modify.response.ModifyResponsePlugin;
 import org.apache.shenyu.plugin.modify.response.handler.ModifyResponsePluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type ModifyResponse plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.modify-response.enabled"}, havingValue = "true", matchIfMissing = true)
 public class ModifyResponsePluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-motan/src/main/java/org/apache/shenyu/springboot/starter/plugin/motan/MotanPluginConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.shenyu.plugin.motan.subscriber.MotanMetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -35,6 +36,7 @@
  */
 @Configuration
 @ConditionalOnClass(MotanPlugin.class)
+@ConditionalOnProperty(value = {"shenyu.plugins.motan.enabled"}, havingValue = "true", matchIfMissing = true)
 public class MotanPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-mqtt/src/main/java/org/apache/shenyu/springboot/starter/plugin/mqtt/MqttPluginConfiguration.java
Patch:
@@ -19,13 +19,15 @@
 
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.mqtt.handler.MqttPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type mqtt plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.mqtt.enabled"}, havingValue = "true", matchIfMissing = true)
 public class MqttPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-oauth2/src/main/java/org/apache/shenyu/springboot/starter/plugin/oauth2/OAuth2PluginConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.security.reactive.PathRequest;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
@@ -56,6 +57,7 @@
 @Configuration
 @ConditionalOnClass(OAuth2Plugin.class)
 @EnableWebFluxSecurity
+@ConditionalOnProperty(value = {"shenyu.plugins.oauth2.enabled"}, havingValue = "true", matchIfMissing = true)
 public class OAuth2PluginConfiguration {
 
     private static final String DEFAULT_CLIENT_REGISTRATION_BEAN = "org.apache.shenyu.springboot.starter.plugin.oauth2.defaultReactiveClientRegistrationRepository";

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-param-mapping/src/main/java/org/apache/shenyu/springboot/starter/plugin/param/mapping/ParamMappingPluginConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.shenyu.plugin.param.mapping.strategy.JsonOperator;
 import org.apache.shenyu.plugin.param.mapping.strategy.DefaultOperator;
 import org.apache.shenyu.plugin.param.mapping.strategy.Operator;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.MediaType;
@@ -37,6 +38,7 @@
  * The type param mapping plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.param-mapping.enabled"}, havingValue = "true", matchIfMissing = true)
 public class ParamMappingPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-ratelimiter/src/main/java/org/apache/shenyu/springboot/starter/plugin/ratelimiter/RateLimiterPluginConfiguration.java
Patch:
@@ -22,13 +22,15 @@
 import org.apache.shenyu.plugin.ratelimiter.RateLimiterPlugin;
 import org.apache.shenyu.plugin.ratelimiter.executor.RedisRateLimiter;
 import org.apache.shenyu.plugin.ratelimiter.handler.RateLimiterPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type RateLimiter plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.rate-limiter.enabled"}, havingValue = "true", matchIfMissing = true)
 public class RateLimiterPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-redirect/src/main/java/org/apache/shenyu/springboot/starter/plugin/redirect/RedirectPluginConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.redirect.RedirectPlugin;
 import org.apache.shenyu.plugin.redirect.handler.RedirectPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.reactive.DispatcherHandler;
@@ -29,6 +30,7 @@
  * the type redirect plugin Configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.redirect.enabled"}, havingValue = "true", matchIfMissing = true)
 public class RedirectPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-request/src/main/java/org/apache/shenyu/springboot/starter/plugin/request/RequestPluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.request.RequestPlugin;
 import org.apache.shenyu.plugin.request.handler.RequestPluginHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Request plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.request.enabled"}, havingValue = "true", matchIfMissing = true)
 public class RequestPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-resilience4j/src/main/java/org/apache/shenyu/springboot/starter/plugin/resilience4j/Resilience4JPluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.resilience4j.executor.CombinedExecutor;
 import org.apache.shenyu.plugin.resilience4j.executor.RateLimiterExecutor;
 import org.apache.shenyu.plugin.resilience4j.handler.Resilience4JHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * Resilience4j plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.resilience4j.enabled"}, havingValue = "true", matchIfMissing = true)
 public class Resilience4JPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-response/src/main/java/org/apache/shenyu/springboot/starter/plugin/response/ResponsePluginConfiguration.java
Patch:
@@ -37,6 +37,7 @@
  * The type response plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.response.enabled"}, havingValue = "true", matchIfMissing = true)
 public class ResponsePluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-rewrite/src/main/java/org/apache/shenyu/springboot/starter/plugin/rewrite/RewritePluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.rewrite.RewritePlugin;
 import org.apache.shenyu.plugin.rewrite.handler.RewritePluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Rewrite plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.rewrite.enabled"}, havingValue = "true", matchIfMissing = true)
 public class RewritePluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sentinel/src/main/java/org/apache/shenyu/springboot/starter/plugin/sentinel/SentinelPluginConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.shenyu.plugin.sentinel.handler.SentinelRuleHandle;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.Ordered;
@@ -39,6 +40,7 @@
  * Sentinel plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.sentinel.enabled"}, havingValue = "true", matchIfMissing = true)
 public class SentinelPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sign/src/main/java/org/apache/shenyu/springboot/starter/plugin/sign/SignPluginConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.shenyu.plugin.sign.subscriber.SignAuthDataSubscriber;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.SearchStrategy;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -34,6 +35,7 @@
  * The type Sign plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.sign.enabled"}, havingValue = "true", matchIfMissing = true)
 public class SignPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sofa/src/main/java/org/apache/shenyu/springboot/starter/plugin/sofa/SofaPluginConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.SearchStrategy;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -41,6 +42,7 @@
  */
 @Configuration
 @ConditionalOnClass(SofaPlugin.class)
+@ConditionalOnProperty(value = {"shenyu.plugins.sofa.enabled"}, havingValue = "true", matchIfMissing = true)
 public class SofaPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-springcloud/src/main/java/org/apache/shenyu/springboot/starter/plugin/springcloud/SpringCloudPluginConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.shenyu.plugin.springcloud.handler.SpringCloudPluginDataHandler;
 import org.apache.shenyu.plugin.springcloud.loadbalance.LoadBalanceRule;
 import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
 import org.springframework.cloud.netflix.ribbon.RibbonClientSpecification;
 import org.springframework.context.annotation.Bean;
@@ -44,6 +45,7 @@
  * The type Spring cloud plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.spring-cloud.enabled"}, havingValue = "true", matchIfMissing = true)
 public class SpringCloudPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-tars/src/main/java/org/apache/shenyu/springboot/starter/plugin/tars/TarsPluginConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.shenyu.plugin.tars.subscriber.TarsMetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -35,6 +36,7 @@
  */
 @Configuration
 @ConditionalOnClass(TarsPlugin.class)
+@ConditionalOnProperty(value = {"shenyu.plugins.tars.enabled"}, havingValue = "true", matchIfMissing = true)
 public class TarsPluginConfiguration {
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-uri/src/main/java/org/apache/shenyu/springboot/starter/plugin/uri/URIPluginConfiguration.java
Patch:
@@ -19,13 +19,15 @@
 
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.uri.URIPlugin;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Uri plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.uri.enabled"}, havingValue = "true", matchIfMissing = true)
 public class URIPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-waf/src/main/java/org/apache/shenyu/springboot/starter/plugin/waf/WafPluginConfiguration.java
Patch:
@@ -21,13 +21,15 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.waf.WafPlugin;
 import org.apache.shenyu.plugin.waf.handler.WafPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * The type Waf plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.waf.enabled"}, havingValue = "true", matchIfMissing = true)
 public class WafPluginConfiguration {
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-websocket/src/main/java/org/apache/shenyu/springboot/plugin/websocket/WebSocketPluginConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.plugin.websocket.WebSocketPlugin;
 import org.apache.shenyu.plugin.websocket.context.WebSocketShenyuContextDecorator;
 import org.apache.shenyu.plugin.websocket.handler.WebSocketPluginDataHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;
@@ -34,6 +35,7 @@
  * The type Web socket plugin configuration.
  */
 @Configuration
+@ConditionalOnProperty(value = {"shenyu.plugins.websocket.enabled"}, havingValue = "true", matchIfMissing = true)
 public class WebSocketPluginConfiguration {
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -153,7 +153,8 @@ public String doRegisterURI(final String selectorName, final List<URIRegisterDTO
         // fetch UPSTREAM_MAP data from db
         //upstreamCheckService.fetchUpstreamData();
         //update upstream
-        String handler = buildHandle(uriList, selectorDO);
+        List<URIRegisterDTO> validUriList = uriList.stream().filter(dto -> Objects.nonNull(dto.getPort()) && StringUtils.isNotBlank(dto.getHost())).collect(Collectors.toList());
+        String handler = buildHandle(validUriList, selectorDO);
         if (handler != null) {
             selectorDO.setHandle(handler);
             SelectorData selectorData = selectorService.buildByName(selectorName, PluginNameAdapter.rpcTypeAdapter(rpcType()));

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java
Patch:
@@ -79,7 +79,7 @@ public void testRun() {
         healthCheckTask.triggerAddOne(selectorData4.getId(), upstream);
         healthCheckTask.schedule();
         // Wait for the upstream-health-check thread to start.
-        Awaitility.await().pollDelay(3, TimeUnit.SECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));
+        Awaitility.await().pollDelay(3500, TimeUnit.MILLISECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));
         assertTrue(CollectionUtils.isNotEmpty(healthCheckTask.getUnhealthyUpstream().get(selectorId1)));
         // Let it coverage line 151~163.
         when(upstream.isHealthy()).thenReturn(false).thenReturn(true);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/custom/UserInfo.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.model.custom;
 
-/*
+/**
  * this is user info.
  */
 public class UserInfo {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ShenyuResultMessage.java
Patch:
@@ -72,7 +72,5 @@ public final class ShenyuResultMessage {
 
     public static final String SAVE_SUCCESS = "save success";
 
-    public static final String SAVE_FAILED = "save failed";
-
     public static final String NOT_FOUND_EXCEPTION = "not found exception";
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/executor/RegisterServerConsumerExecutor.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -64,8 +63,7 @@ public void run() {
     private boolean isValidData(final Object data) {
         if (data instanceof URIRegisterDTO) {
             URIRegisterDTO uriRegisterDTO = (URIRegisterDTO) data;
-            return Objects.nonNull(uriRegisterDTO.getPort())
-                    && StringUtils.isNoneBlank(uriRegisterDTO.getAppName(), uriRegisterDTO.getHost());
+            return StringUtils.isNoneBlank(uriRegisterDTO.getContextPath(), uriRegisterDTO.getRpcType());
         }
         if (data instanceof MetaDataRegisterDTO) {
             MetaDataRegisterDTO metaDataRegisterDTO = (MetaDataRegisterDTO) data;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/DivideSelectorHandleConverter.java
Patch:
@@ -51,8 +51,9 @@ public String pluginName() {
      */
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
-        List<DivideUpstream> existList = convert(handle);
-        existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
+        List<DivideUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
+        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+                .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveDivideUpstream(alive.getProtocol(), alive.getUpstreamUrl())));
         return existList;
     }
     

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/DubboSelectorHandleConverter.java
Patch:
@@ -44,7 +44,9 @@ public String pluginName() {
     
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
-        List<DubboUpstream> existList = convert(handle);
+        List<DubboUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
+        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+                .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveDubboUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         return existList;
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/GrpcSelectorHandleConverter.java
Patch:
@@ -44,7 +44,9 @@ public String pluginName() {
     
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
-        List<GrpcUpstream> existList = convert(handle);
+        List<GrpcUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
+        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+                .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveGrpcUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         return existList;
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/SpringCloudSelectorHandleConverter.java
Patch:
@@ -46,7 +46,9 @@ public String pluginName() {
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
         SpringCloudSelectorHandle selectorHandle = convert(handle);
-        List<DivideUpstream> existList = selectorHandle.getDivideUpstreams();
+        List<DivideUpstream> existList = updateStatusAndFilter(selectorHandle.getDivideUpstreams(), aliveList);
+        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+                .forEach(alive -> existList.add(CommonUpstreamUtils.buildDefaultAliveDivideUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         selectorHandle.setDivideUpstreams(existList);
         return selectorHandle;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/TarsSelectorHandleConverter.java
Patch:
@@ -51,7 +51,9 @@ public String pluginName() {
      */
     @Override
     protected Object doHandle(final String handle, final List<CommonUpstream> aliveList) {
-        List<TarsUpstream> existList = convert(handle);
+        List<TarsUpstream> existList = updateStatusAndFilter(convert(handle), aliveList);
+        aliveList.stream().filter(alive -> !existList.stream().anyMatch(valid -> valid.getUpstreamUrl().equals(alive.getUpstreamUrl())))
+                .forEach(alive -> existList.add(CommonUpstreamUtils.buildAliveTarsUpstream(alive.getUpstreamUrl())));
         existList.removeIf(e -> aliveList.stream().noneMatch(alive -> alive.getUpstreamUrl().equals(e.getUpstreamUrl())));
         return existList;
     }

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-consul/src/main/java/org/apache/shenyu/register/server/consul/ShenyuConsulConfigWatch.java
Patch:
@@ -42,7 +42,7 @@ public class ShenyuConsulConfigWatch implements SmartLifecycle {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ShenyuConsulConfigWatch.class);
 
-    @Resource
+    @Resource(name = "registerConsulClient")
     private ConsulClient consul;
 
     private final ScheduledThreadPoolExecutor executor;

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-nacos/src/main/java/org/apache/shenyu/register/server/nacos/NacosServerRegisterRepository.java
Patch:
@@ -204,8 +204,9 @@ private void registerURI(final String contextPath, final String serviceName, fin
                 return;
             }
             if (registerDTOList.isEmpty()) {
-                URIRegisterDTO uriRegisterDTO = new URIRegisterDTO();
-                uriRegisterDTO.setContextPath(Constants.PATH_SEPARATOR + contextPath);
+                URIRegisterDTO uriRegisterDTO = URIRegisterDTO.builder()
+                        .contextPath(Constants.PATH_SEPARATOR + contextPath)
+                        .rpcType(rpcType.getName()).build();
                 registerDTOList.add(uriRegisterDTO);
             }
             publishRegisterURI(registerDTOList);

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/LocalDispatcherFilter.java
Patch:
@@ -46,6 +46,7 @@ public class LocalDispatcherFilter implements WebFilter {
      * Instantiates a new Local dispatcher filter.
      *
      * @param dispatcherHandler the dispatcher handler
+     * @param sha512Key the sha512 key
      */
     public LocalDispatcherFilter(final DispatcherHandler dispatcherHandler, final String sha512Key) {
         this.dispatcherHandler = dispatcherHandler;

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/config/HttpClientProperties.java
Patch:
@@ -52,7 +52,7 @@ public class HttpClientProperties {
     private String strategy;
 
     /**
-     * The connect timeout in millis, the default is 45s.
+     * The connection timeout in millis, the default is 45s.
      */
     private Integer connectTimeout = 45000;
 

File: shenyu-plugin/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/body/BodyWriter.java
Patch:
@@ -82,7 +82,7 @@ public int size() {
      * @return string of stream
      */
     public String output() {
-        if (size() == 0) {
+        if (isEmpty()) {
             return "";
         }
         try {

File: shenyu-plugin/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/body/LoggingServerHttpRequest.java
Patch:
@@ -30,6 +30,7 @@
  * decorate ServerHttpRequest for read body.
  */
 public class LoggingServerHttpRequest extends ServerHttpRequestDecorator {
+    
     private final ShenyuRequestLog logInfo;
 
     public LoggingServerHttpRequest(final ServerHttpRequest delegate, final ShenyuRequestLog logInfo) {

File: shenyu-plugin/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/constant/LoggingConstant.java
Patch:
@@ -29,6 +29,5 @@ public final class LoggingConstant {
     public static final String PRODUCER_GROUP = "producerGroup";
 
     public static final String SHENYU_AGENT_TRACE_ID = "shenyu-agent-trace-id";
-
 }
 

File: shenyu-plugin/shenyu-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/plugin/logging/rocketmq/RocketMQLogCollectClient.java
Patch:
@@ -86,10 +86,9 @@ private void initProducer(final Properties props) {
      * store logs.
      *
      * @param logs list of log
-     * @throws Exception produce exception
      */
     @Override
-    public void consume(final List<ShenyuRequestLog> logs) throws Exception {
+    public void consume(final List<ShenyuRequestLog> logs) {
         if (CollectionUtils.isEmpty(logs)) {
             return;
         }

File: shenyu-plugin/shenyu-plugin-metrics/src/main/java/org/apache/shenyu/plugin/metrics/constant/LabelNames.java
Patch:
@@ -30,7 +30,7 @@ public final class LabelNames {
     /**
      * The constant REQUEST_TYPE_TOTAL.
      */
-    public static final String REQUEST_TYPE_TOTAL = "request_type_total";
+    public static final String REQUEST_TYPE_TOTAL = "shenyu_request_type_total";
     
     /**
      * The constant REQUEST_THROW_TOTAL.

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-reactive-websocket/src/main/java/org/apache/shenyu/examples/websocket/TestReactiveWebsocketApplication.java
Patch:
@@ -21,17 +21,17 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
- * ShenyuWebsocketApplication.
+ * TestReactiveWebsocketApplication.
  */
 @SpringBootApplication
-public class ShenyuWebsocketApplication {
+public class TestReactiveWebsocketApplication {
 
     /**
      * main.
      *
      * @param args args
      */
     public static void main(final String[] args) {
-        SpringApplication.run(ShenyuWebsocketApplication.class, args);
+        SpringApplication.run(TestReactiveWebsocketApplication.class, args);
     }
 }

File: shenyu-examples/shenyu-examples-websocket/shenyu-example-spring-reactive-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/EchoHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.examples.websocket.handler;
 
+import org.apache.shenyu.client.spring.websocket.annotation.ShenyuSpringWebSocketClient;
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.socket.WebSocketHandler;
@@ -31,6 +32,7 @@ public class EchoHandler implements WebSocketHandler {
 
     @Override
     @NonNull
+    @ShenyuSpringWebSocketClient(path = "/org/apache/shenyu/examples/websocket/**", desc = "onlineusers")
     public Mono<Void> handle(final WebSocketSession session) {
         return session.send(
                 session.receive()

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -109,7 +109,7 @@ private String buildWsRealPath(final ServerWebExchange exchange, final Upstream
         if (StringUtils.isEmpty(protocol)) {
             protocol = "ws://";
         }
-        String path = shenyuContext.getMethod();
+        String path = !StringUtils.isEmpty(shenyuContext.getRealUrl()) ? shenyuContext.getRealUrl() : shenyuContext.getMethod();
         if (StringUtils.hasText(exchange.getRequest().getURI().getQuery())) {
             path = String.join("?", path, RequestQueryCodecUtil.getCodecQuery(exchange));
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImpl.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.stream.Collectors;
 
 /**
- * spring mvc service register.
+ * spring mvc http service register.
  */
 @Service
 public class ShenyuClientRegisterDivideServiceImpl extends AbstractContextPathRegisterService {

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-zipkin/src/main/java/org/apache/shenyu/agent/plugin/tracing/zipkin/enums/SamplerTypeEnum.java
Patch:
@@ -63,8 +63,8 @@ public enum SamplerTypeEnum {
     public String getName() {
         return name;
     }
-    
-    
+
+
     /**
      * Gets enum by name.
      *

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java
Patch:
@@ -18,6 +18,8 @@
 package org.apache.shenyu.loadbalancer.cache;
 
 import java.util.concurrent.TimeUnit;
+
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.awaitility.Awaitility;
@@ -78,7 +80,7 @@ public void testRun() {
         healthCheckTask.schedule();
         // Wait for the upstream-health-check thread to start.
         Awaitility.await().pollDelay(3, TimeUnit.SECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));
-        assertTrue(healthCheckTask.getUnhealthyUpstream().get(selectorId1).size() > 0);
+        assertTrue(CollectionUtils.isNotEmpty(healthCheckTask.getUnhealthyUpstream().get(selectorId1)));
         // Let it coverage line 151~163.
         when(upstream.isHealthy()).thenReturn(false).thenReturn(true);
         // Even if the address could not connect, it will return false, that mean it will not coverage 151~163.

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -41,6 +41,7 @@
 import reactor.netty.resources.ConnectionProvider;
 import reactor.netty.resources.LoopResources;
 import reactor.netty.tcp.ProxyProvider;
+import reactor.netty.tcp.TcpResources;
 
 import java.security.cert.X509Certificate;
 import java.util.Objects;
@@ -113,7 +114,7 @@ public HttpClient httpClient(final HttpClientProperties properties) {
                     if (StringUtils.isNotEmpty(threadPool.getPrefix())) {
                         LoopResources resources = LoopResources.create(threadPool.getPrefix(),
                                 threadPool.getSelectCount(), threadPool.getWorkerCount(), threadPool.getDaemon());
-                        tcpClient = tcpClient.runOn(resources, threadPool.getPreferNative());
+                        TcpResources.set(resources);
                     }
                     return tcpClient;
                 });

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/RuleController.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.controller;
 
-import org.apache.shenyu.admin.mapper.RoleMapper;
+import org.apache.shenyu.admin.mapper.RuleMapper;
 import org.apache.shenyu.admin.model.dto.RuleDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
@@ -83,7 +83,7 @@ public ShenyuAdminResult queryRules(final String selectorId, final String name,
      */
     @GetMapping("/{id}")
     public ShenyuAdminResult detailRule(@PathVariable("id") @Valid
-                                        @Existed(provider = RoleMapper.class,
+                                        @Existed(provider = RuleMapper.class,
                                                 message = "rule is not existed") final String id) {
         RuleVO ruleVO = ruleService.findById(id);
         return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, ruleVO);
@@ -110,7 +110,7 @@ public ShenyuAdminResult createRule(@Valid @RequestBody final RuleDTO ruleDTO) {
      */
     @PutMapping("/{id}")
     public ShenyuAdminResult updateRule(@PathVariable("id") @Valid
-                                        @Existed(provider = RoleMapper.class,
+                                        @Existed(provider = RuleMapper.class,
                                                 message = "rule is not existed") final String id,
                                         @Valid @RequestBody final RuleDTO ruleDTO) {
         ruleDTO.setId(id);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/MetaDataDTO.java
Patch:
@@ -42,7 +42,6 @@ public class MetaDataDTO implements Serializable {
     /**
      * context path is not null.
      */
-    @NotBlank
     private String contextPath;
     
     /**
@@ -54,7 +53,6 @@ public class MetaDataDTO implements Serializable {
     /**
      * rule name is not null.
      */
-    @NotBlank
     private String ruleName;
     
     /**
@@ -65,7 +63,6 @@ public class MetaDataDTO implements Serializable {
     /**
      * rpc tyoe is not null.
      */
-    @NotBlank
     private String rpcType;
     
     /**

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/MemoryLimitedLinkedBlockingQueue.java
Patch:
@@ -24,6 +24,9 @@
 
 /**
  * Can completely solve the OOM problem caused by {@link java.util.concurrent.LinkedBlockingQueue}.
+ *
+ * @see org.apache.shenyu.common.concurrent.MemoryLimiter
+ * @see org.apache.shenyu.common.concurrent.MemoryLimitCalculator
  */
 public class MemoryLimitedLinkedBlockingQueue<E> extends LinkedBlockingQueue<E> {
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/concurrent/MemoryLimiter.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * memory limiter.
+ *
+ * @see org.apache.shenyu.common.concurrent.MemoryLimitCalculator
  */
 public class MemoryLimiter {
 

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/bytebuddy/transformer/ShenyuAgentTransformer.java
Patch:
@@ -53,7 +53,7 @@
  */
 public final class ShenyuAgentTransformer implements Transformer {
     
-    private static final String EXTRA_DATA = "_$EXTRA_DATA$_";
+    private static final String EXT_OBJECT = "_$EXT_OBJECT$_";
     
     private static final Logger LOG = LoggerFactory.getLogger(ShenyuAgentTransformer.class);
     
@@ -64,7 +64,7 @@ public Builder<?> transform(final Builder<?> builder, final TypeDescription type
         if (!MATCHER.containsType(typeDescription)) {
             return builder;
         }
-        Builder<?> result = builder.defineField(EXTRA_DATA, Object.class, Opcodes.ACC_PRIVATE | Opcodes.ACC_VOLATILE).implement(TargetObject.class).intercept(FieldAccessor.ofField(EXTRA_DATA));
+        Builder<?> result = builder.defineField(EXT_OBJECT, Object.class, Opcodes.ACC_PRIVATE | Opcodes.ACC_VOLATILE).implement(TargetObject.class).intercept(FieldAccessor.ofField(EXT_OBJECT));
         ShenyuAgentJoinPoint joinPoint = MATCHER.loadShenyuAgentJoinPoint(typeDescription);
         result = interceptorConstructorPoint(typeDescription, joinPoint.getConstructorPoints(), result);
         result = interceptorStaticMethodPoint(typeDescription, joinPoint.getStaticMethodPoints(), result);

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/loader/ShenyuAgentPluginLoader.java
Patch:
@@ -113,11 +113,11 @@ protected Class<?> findClass(final String name) throws ClassNotFoundException {
                     byte[] data = ByteStreams.toByteArray(each.jarFile.getInputStream(entry));
                     return defineClass(name, data, 0, data.length);
                 } catch (final IOException ex) {
-                    LOG.error("Failed to load class {}", name, ex);
+                    LOG.error("Failed to load shenyu plugin class {}", name, ex);
                 }
             }
         }
-        throw new ClassNotFoundException(String.format("Class name is %s not found", name));
+        throw new ClassNotFoundException(String.format("shenyu plugin class name is %s not found", name));
     }
     
     @Override
@@ -155,7 +155,7 @@ public void close() {
             try {
                 each.jarFile.close();
             } catch (final IOException ex) {
-                LOG.error("Exception occur when closing jar", ex);
+                LOG.error("Exception closing for shenyu plugin jar", ex);
             }
         }
     }

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-api/src/main/java/org/apache/shenyu/agent/plugin/metrics/api/MetricsRecorder.java
Patch:
@@ -104,5 +104,4 @@ default void observe(double value) {
      */
     default void observe(double value, String... labels) {
     }
-
 }

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/plugin/tracing/jaeger/boot/JaegerAgentPluginBootService.java
Patch:
@@ -44,7 +44,7 @@ public void start(final AgentPluginConfig agentPluginConfig) {
         Configuration.SamplerConfiguration samplerConfig = Configuration.SamplerConfiguration.fromEnv();
         Configuration.ReporterConfiguration reporterConfig = Configuration.ReporterConfiguration.fromEnv()
                 .withSender(Configuration.SenderConfiguration.fromEnv().withAgentHost(agentPluginConfig.getHost()).withAgentPort(agentPluginConfig.getPort()));
-        String serviceName = Optional.ofNullable(agentPluginConfig.getProps().getProperty("SERVICE_NAME")).orElse("shenyu-agent");
+        String serviceName = Optional.ofNullable(agentPluginConfig.getProps().getProperty("name")).orElse("shenyu-agent");
         configuration = new Configuration(serviceName).withSampler(samplerConfig).withReporter(reporterConfig);
         if (!GlobalTracer.isRegistered()) {
             GlobalTracer.registerIfAbsent(configuration.getTracer());

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/plugin/tracing/jaeger/span/JaegerErrorSpan.java
Patch:
@@ -40,7 +40,7 @@ public static void setError(final Span span, final Throwable cause) {
     }
     
     private static Map<String, ?> getReason(final Throwable cause) {
-        Map<String, String> result = new HashMap<>(3, 1);
+        Map<String, String> result = new HashMap<>();
         result.put(TracingConstants.ErrorLogTags.EVENT, TracingConstants.ErrorLogTags.EVENT_ERROR_TYPE);
         result.put(TracingConstants.ErrorLogTags.ERROR_KIND, cause.getClass().getName());
         result.put(TracingConstants.ErrorLogTags.MESSAGE, cause.getMessage());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/MetaDataController.java
Patch:
@@ -111,8 +111,7 @@ public ShenyuAdminResult detail(@PathVariable("id") final String id) {
      */
     @PostMapping("/createOrUpdate")
     public ShenyuAdminResult createOrUpdate(@Valid @RequestBody final MetaDataDTO metaDataDTO) {
-        metaDataService.createOrUpdate(metaDataDTO);
-        return ShenyuAdminResult.success(ShenyuResultMessage.CREATE_SUCCESS);
+        return ShenyuAdminResult.success(metaDataService.createOrUpdate(metaDataDTO));
     }
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/MetaDataDTO.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.apache.shenyu.admin.model.dto;
 
-import org.apache.shenyu.admin.service.provider.MetaDataPathProvider;
+import org.apache.shenyu.admin.mapper.MetaDataMapper;
 import org.apache.shenyu.admin.validation.annotation.Existed;
-import org.apache.shenyu.common.constant.AdminConstants;
 
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotNull;
@@ -30,6 +29,7 @@ public class MetaDataDTO implements Serializable {
     
     private static final long serialVersionUID = 7476312364813536366L;
     
+    @Existed(provider = MetaDataMapper.class, nullOfIgnore = true, message = "meta data is not existed")
     private String id;
     
     /**
@@ -49,7 +49,6 @@ public class MetaDataDTO implements Serializable {
      * the path is not null.
      */
     @NotBlank
-    @Existed(provider = MetaDataPathProvider.class, reverse = true, message = AdminConstants.DATA_PATH_IS_EXIST)
     private String path;
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/PluginDTO.java
Patch:
@@ -18,9 +18,7 @@
 package org.apache.shenyu.admin.model.dto;
 
 import org.apache.shenyu.admin.mapper.PluginMapper;
-import org.apache.shenyu.admin.service.provider.PluginNameProvider;
 import org.apache.shenyu.admin.validation.annotation.Existed;
-import org.apache.shenyu.common.constant.AdminConstants;
 
 import javax.validation.constraints.NotNull;
 import java.io.Serializable;
@@ -43,7 +41,6 @@ public class PluginDTO implements Serializable {
      * plugin name.
      */
     @NotNull
-    @Existed(provider = PluginNameProvider.class, reverse = true, message = AdminConstants.PLUGIN_NAME_IS_EXIST)
     private String name;
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/RuleConditionDO.java
Patch:
@@ -181,7 +181,7 @@ public static RuleConditionDO buildRuleConditionDO(final RuleConditionDTO ruleCo
                     .ruleId(item.getRuleId())
                     .operator(item.getOperator())
                     .paramName(item.getParamName())
-                    .paramValue(item.getParamValue())
+                    .paramValue(StringUtils.defaultIfBlank(item.getParamValue(), "").trim())
                     .dateUpdated(currentTime)
                     .build();
             if (StringUtils.isEmpty(item.getId())) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/SelectorConditionDO.java
Patch:
@@ -181,7 +181,7 @@ public static SelectorConditionDO buildSelectorConditionDO(final SelectorConditi
                     .selectorId(item.getSelectorId())
                     .operator(item.getOperator())
                     .paramName(item.getParamName())
-                    .paramValue(item.getParamValue())
+                    .paramValue(StringUtils.defaultIfBlank(item.getParamValue(), "").trim())
                     .dateUpdated(currentTime)
                     .build();
             if (StringUtils.isEmpty(item.getId())) {

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/RegexPredicateJudge.java
Patch:
@@ -30,6 +30,6 @@ public class RegexPredicateJudge implements PredicateJudge {
 
     @Override
     public Boolean judge(final ConditionData conditionData, final String realData) {
-        return Pattern.matches(conditionData.getParamValue(), realData);
+        return Pattern.matches(conditionData.getParamValue().trim(), realData);
     }
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/TimerAfterPredicateJudge.java
Patch:
@@ -34,8 +34,8 @@ public class TimerAfterPredicateJudge implements PredicateJudge {
     public Boolean judge(final ConditionData conditionData, final String realData) {
         String paramName = conditionData.getParamName();
         if (Objects.isNull(paramName)) {
-            return LocalDateTime.now().isAfter(DateUtils.parseLocalDateTime(conditionData.getParamValue()));
+            return LocalDateTime.now().isAfter(DateUtils.parseLocalDateTime(conditionData.getParamValue().trim()));
         }
-        return DateUtils.parseLocalDateTime(realData).isAfter(DateUtils.parseLocalDateTime(conditionData.getParamValue()));
+        return DateUtils.parseLocalDateTime(realData).isAfter(DateUtils.parseLocalDateTime(conditionData.getParamValue().trim()));
     }
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/TimerBeforePredicateJudge.java
Patch:
@@ -34,8 +34,8 @@ public class TimerBeforePredicateJudge implements PredicateJudge {
     public Boolean judge(final ConditionData conditionData, final String realData) {
         String paramName = conditionData.getParamName();
         if (StringUtils.isEmpty(paramName)) {
-            return LocalDateTime.now().isBefore(DateUtils.parseLocalDateTime(conditionData.getParamValue()));
+            return LocalDateTime.now().isBefore(DateUtils.parseLocalDateTime(conditionData.getParamValue().trim()));
         }
-        return DateUtils.parseLocalDateTime(realData).isBefore(DateUtils.parseLocalDateTime(conditionData.getParamValue()));
+        return DateUtils.parseLocalDateTime(realData).isBefore(DateUtils.parseLocalDateTime(conditionData.getParamValue().trim()));
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/MetaDataControllerTest.java
Patch:
@@ -82,7 +82,6 @@ public final class MetaDataControllerTest {
     @BeforeEach
     public void setUp() {
         this.mockMvc = MockMvcBuilders.standaloneSetup(metaDataController)
-//                .setControllerAdvice(pathProvider)
                 .setControllerAdvice(new ExceptionHandlers())
                 .build();
     }

File: shenyu-plugin/shenyu-plugin-general-context/src/main/java/org/apache/shenyu/plugin/general/context/GeneralContextPlugin.java
Patch:
@@ -60,8 +60,9 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
                         generalContextMapWithRpcType.put(each.getGeneralContextKey(), each.getGeneralContextValue());
                         break;
                     case Constants.TRANSMIT_HEADER_TO_GENERAL_CONTEXT_TYPE:
+                        final List<String> header = headers.get(each.getGeneralContextKey());
                         generalContextMapWithRpcType.put(StringUtils.isBlank(each.getGeneralContextValue()) ? each.getGeneralContextKey() : each.getGeneralContextValue(),
-                                headers.getFirst(each.getGeneralContextKey()));
+                                CollectionUtils.isEmpty(header) ? null : String.join(", ", header));
                         break;
                     default:
                         break;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/exception/ExceptionHandlers.java
Patch:
@@ -127,7 +127,7 @@ protected ShenyuAdminResult handleConstraintViolationException(final ConstraintV
     
     @ExceptionHandler(ShenyuAdminException.class)
     protected ShenyuAdminResult handleShenyuException(final ShenyuAdminException exception) {
-        LOG.error("null pointer exception ", exception);
-        return ShenyuAdminResult.error(CommonErrorCode.NOT_FOUND_EXCEPTION, exception.getMessage());
+        LOG.error("shenyu admin exception ", exception);
+        return ShenyuAdminResult.error(CommonErrorCode.ERROR, exception.getMessage());
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/BatchCommonDTO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
+import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
 import java.io.Serializable;
@@ -32,7 +33,7 @@ public class BatchCommonDTO implements Serializable {
 
     @NotEmpty
     @NotNull
-    private List<String> ids;
+    private List<@NotBlank String> ids;
 
     @NotNull
     private Boolean enabled;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/validation/validator/ExistedValidator.java
Patch:
@@ -54,6 +54,9 @@ public boolean isValid(final Serializable value, final ConstraintValidatorContex
         if (Objects.isNull(annotation.provider())) {
             throw new ResourceNotFoundException("the validation ExistProvider is not found");
         }
+        if (annotation.reverse()) {
+            return !Boolean.TRUE.equals(getExistProvider().existed(value));
+        }
         return Boolean.TRUE.equals(getExistProvider().existed(value));
     }
     

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/ReflectUtils.java
Patch:
@@ -163,7 +163,6 @@ private static Field getAccessibleField(final Object obj, final String fieldName
             } catch (NoSuchFieldException e) {
                 // Field is not defined in the current class and continues to transition up
                 // new add
-                LOG.error("field is not defined in the current class and continues to transition up", e);
             }
         }
         return null;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-websocket/src/test/java/org/apache/shenyu/springboot/plugin/websocket/WebSocketPluginConfigurationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.springboot.plugin.websocket;
 
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
@@ -47,6 +48,8 @@ public void before() {
         applicationContextRunner = new ApplicationContextRunner()
             .withConfiguration(AutoConfigurations.of(WebSocketPluginConfiguration.class))
             .withBean(WebSocketPluginConfigurationTest.class)
+            .withConfiguration(AutoConfigurations.of(ShenyuConfig.class))
+            .withBean(ShenyuConfig.class)
             .withPropertyValues("debug=true");
     }
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -31,6 +31,7 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.netty.http.client.HttpClient;
+import reactor.netty.http.client.HttpClientResponse;
 
 import java.net.URI;
 import java.util.List;
@@ -40,7 +41,7 @@
 /**
  * The type Netty http client plugin.
  */
-public class NettyHttpClientPlugin extends AbstractHttpClientPlugin {
+public class NettyHttpClientPlugin extends AbstractHttpClientPlugin<HttpClientResponse> {
 
     private final HttpClient httpClient;
 
@@ -68,7 +69,7 @@ protected HttpHeaders buildHttpHeaders(final ServerWebExchange exchange) {
     }
 
     @Override
-    protected Mono<?> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
+    protected Mono<HttpClientResponse> doRequest(final ServerWebExchange exchange, final String httpMethod, final URI uri,
                                 final HttpHeaders httpHeaders, final Flux<DataBuffer> body) {
         return Mono.from(httpClient.headers(headers -> httpHeaders.forEach(headers::add))
                 .request(HttpMethod.valueOf(httpMethod)).uri(uri.toASCIIString())

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DataPermissionDTO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.dto;
 
+import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.Objects;
 
@@ -34,11 +35,13 @@ public class DataPermissionDTO implements Serializable {
     /**
      * user id.
      */
+    @NotNull
     private String userId;
 
     /**
      * selector or rule id.
      */
+    @NotNull
     private String dataId;
 
     /**

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/ContainsPredicateJudge.java
Patch:
@@ -28,6 +28,6 @@ public class ContainsPredicateJudge implements PredicateJudge {
 
     @Override
     public Boolean judge(final ConditionData conditionData, final String realData) {
-        return conditionData.getParamValue().trim().contains(realData);
+        return realData.contains(conditionData.getParamValue().trim());
     }
 }

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-prometheus/src/main/java/org/apache/shenyu/agent/plugin/metrics/prometheus/handler/PrometheusGlobalPluginHandler.java
Patch:
@@ -65,7 +65,6 @@ public Object after(final TargetObject target, final Method method, final Object
     @Override
     public void onThrowing(final TargetObject target, final Method method, final Object[] args, final Throwable throwable) {
         MetricsRecorderPool.get(MetricsConstant.REQUEST_THROW_TOTAL, MetricsConstant.PROMETHEUS).ifPresent(MetricsRecorder::inc);
-        MetricsRecorderPool.get(MetricsConstant.REQUEST_UNDONE, MetricsConstant.PROMETHEUS).ifPresent(MetricsRecorder::dec);
     }
 
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.shenyu.admin.model.vo.DashboardUserEditVO;
 import org.apache.shenyu.admin.model.vo.DashboardUserVO;
 import org.apache.shenyu.admin.service.DashboardUserService;
-import org.apache.shenyu.admin.utils.ShaUtils;
+import org.apache.shenyu.common.utils.ShaUtils;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shiro.authz.annotation.RequiresPermissions;
 import org.springframework.validation.annotation.Validated;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.shenyu.admin.service.DashboardUserService;
 import org.apache.shenyu.admin.transfer.DashboardUserTransfer;
 import org.apache.shenyu.admin.utils.JwtUtils;
-import org.apache.shenyu.admin.utils.ShaUtils;
+import org.apache.shenyu.common.utils.ShaUtils;
 import org.apache.shenyu.common.constant.AdminConstants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DashboardUserMapperTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.admin.model.entity.DashboardUserDO;
 import org.apache.shenyu.admin.model.page.PageParameter;
 import org.apache.shenyu.admin.model.query.DashboardUserQuery;
-import org.apache.shenyu.admin.utils.ShaUtils;
+import org.apache.shenyu.common.utils.ShaUtils;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.junit.jupiter.api.Test;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DashboardUserServiceTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.shenyu.admin.model.vo.DashboardUserVO;
 import org.apache.shenyu.admin.model.vo.LoginDashboardUserVO;
 import org.apache.shenyu.admin.service.impl.DashboardUserServiceImpl;
-import org.apache.shenyu.admin.utils.ShaUtils;
+import org.apache.shenyu.common.utils.ShaUtils;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.InjectMocks;

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/ShaUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.utils;
+package org.apache.shenyu.common.utils;
 
 import java.security.MessageDigest;
 

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/ShaUtilsTest.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.utils;
+package org.apache.shenyu.common.utils;
 
 import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
-import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test cases for ShaUtils.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ShaUtils.java
Patch:
@@ -47,6 +47,9 @@ public static String shaEncryption(final String src) {
                 StringBuffer strHexString = new StringBuffer();
                 for (byte b:byteBuffer) {
                     String hex = Integer.toHexString(0xff & b);
+                    if (hex.length() == 1) {
+                        strHexString.append('0');
+                    }
                     strHexString.append(hex);
                 }
                 return strHexString.toString();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/ShaUtilsTest.java
Patch:
@@ -30,7 +30,7 @@ public final class ShaUtilsTest {
 
     @Test
     public void testShaEncryption() {
-        assertThat(ShaUtils.shaEncryption("123456"), is("ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413"));
+        assertThat(ShaUtils.shaEncryption("123456"), is("ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413"));
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -166,9 +166,6 @@ public ShenyuAdminResult applyUpdate(final AuthApplyDTO authApplyDTO) {
     @Override
     @Transactional(rollbackFor = Exception.class)
     public ShenyuAdminResult updateDetail(final AppAuthDTO appAuthDTO) {
-        if (StringUtils.isAnyBlank(appAuthDTO.getAppKey(), appAuthDTO.getAppSecret(), appAuthDTO.getId())) {
-            return ShenyuAdminResult.error(ShenyuResultMessage.PARAMETER_ERROR);
-        }
         AppAuthDO appAuthDO = AppAuthTransfer.INSTANCE.mapToEntity(appAuthDTO);
         appAuthMapper.update(appAuthDO);
         List<AuthParamDTO> authParamDTOList = appAuthDTO.getAuthParamDTOList();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/PluginHandleH2Trigger.java
Patch:
@@ -46,7 +46,7 @@ public void fire(final Connection connection, final Object[] oldRow, final Objec
                         + " VALUES ( ?, ?, ?, ?, ?, ?, ?, ?)")) {
             BaseTrigger.sqlExecute(newRow, statement);
         } catch (ShenyuException e) {
-            LOG.error("PluginHandleH2Trigger Error:" + e);
+            LOG.error("PluginHandleH2Trigger Error:", e);
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/validation/validator/ExistedValidator.java
Patch:
@@ -54,7 +54,7 @@ public boolean isValid(final Serializable value, final ConstraintValidatorContex
         if (Objects.isNull(annotation.provider())) {
             throw new ResourceNotFoundException("the validation ExistProvider is not found");
         }
-        return !getExistProvider().notExisted(value);
+        return Boolean.TRUE.equals(getExistProvider().existed(value));
     }
     
     private ExistProvider getExistProvider() {

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/fallback/FallbackHandlerTest.java
Patch:
@@ -69,7 +69,7 @@ public void setUp() {
      */
     @Test
     public void generateErrorTest() {
-        StepVerifier.create(testFallbackHandler.generateError(exchange, new RuntimeException())).expectSubscription().verifyComplete();
+        StepVerifier.create(testFallbackHandler.withoutFallback(exchange, new RuntimeException())).expectSubscription().verifyComplete();
     }
 
     /**
@@ -83,7 +83,7 @@ public void fallbackTest() {
 
     static class TestFallbackHandler implements FallbackHandler {
         @Override
-        public Mono<Void> generateError(final ServerWebExchange exchange, final Throwable throwable) {
+        public Mono<Void> withoutFallback(final ServerWebExchange exchange, final Throwable throwable) {
             return Mono.empty();
         }
     }

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/Resilience4JPlugin.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.dto.convert.rule.Resilience4JHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
@@ -87,7 +88,7 @@ private Mono<Void> combined(final ServerWebExchange exchange, final ShenyuPlugin
 
     private Function<Throwable, Mono<Void>> fallback(final Executor executor,
                                                      final ServerWebExchange exchange, final String uri) {
-        return throwable -> executor.fallback(exchange, uri, throwable);
+        return throwable -> executor.fallback(exchange, UriUtils.createUri(uri), throwable);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/executor/CombinedExecutorTest.java
Patch:
@@ -20,6 +20,7 @@
 import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
 import io.github.resilience4j.ratelimiter.RateLimiterConfig;
 import io.github.resilience4j.timelimiter.TimeLimiterConfig;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.plugin.resilience4j.conf.Resilience4JConf;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -87,7 +88,7 @@ public void fallbackUriTest() {
 
         ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("localhost").build());
 
-        StepVerifier.create(combinedExecutor.run(Mono.error(new RuntimeException()), t -> combinedExecutor.fallback(exchange, "https://example.com", t),
+        StepVerifier.create(combinedExecutor.run(Mono.error(new RuntimeException()), t -> combinedExecutor.fallback(exchange, UriUtils.createUri("https://example.com"), t),
                         conf))
                 .expectSubscription()
                 .expectComplete()

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/fallback/SentinelFallbackHandler.java
Patch:
@@ -34,7 +34,7 @@
 public class SentinelFallbackHandler implements FallbackHandler {
 
     @Override
-    public Mono<Void> generateError(final ServerWebExchange exchange, final Throwable throwable) {
+    public Mono<Void> withoutFallback(final ServerWebExchange exchange, final Throwable throwable) {
         Object error;
         if (throwable instanceof DegradeException) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginServiceImpl.java
Patch:
@@ -202,7 +202,7 @@ public String enabled(final List<String> ids, final Boolean enabled) {
             return AdminConstants.SYS_PLUGIN_ID_NOT_EXIST;
         }
         List<PluginDO> plugins = Optional.ofNullable(pluginMapper.selectByIds(ids)).orElseGet(ArrayList::new);
-        Set<String> idSet = new HashSet<>(Optional.ofNullable(ids).orElseGet(ArrayList::new));
+        Set<String> idSet = new HashSet<>(Optional.of(ids).orElseGet(ArrayList::new));
         if (idSet.size() > plugins.size()) {
             return AdminConstants.SYS_PLUGIN_ID_NOT_EXIST;
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -129,7 +129,7 @@ public int createOrUpdate(final RuleDTO ruleDTO) {
         List<RuleConditionDTO> ruleConditions = ruleDTO.getRuleConditions();
         if (StringUtils.isEmpty(ruleDTO.getId())) {
             ruleCount = ruleMapper.insertSelective(ruleDO);
-            if (dataPermissionMapper.listByUserId(JwtUtils.getUserInfo().getUserId()).size() > 0) {
+            if (Boolean.TRUE.equals(dataPermissionMapper.existed(JwtUtils.getUserInfo().getUserId()))) {
                 DataPermissionDTO dataPermissionDTO = new DataPermissionDTO();
                 dataPermissionDTO.setUserId(JwtUtils.getUserInfo().getUserId());
                 dataPermissionDTO.setDataId(ruleDO.getId());
@@ -274,7 +274,7 @@ private List<RuleData> buildRuleDataList(final List<RuleDO> ruleDOList) {
                         return list1;
                     }));
 
-        return Optional.ofNullable(ruleDOList).orElseGet(ArrayList::new)
+        return Optional.of(ruleDOList).orElseGet(ArrayList::new)
                 .stream().filter(Objects::nonNull).map(ruleDO -> {
                     String ruleId = ruleDO.getId();
                     List<ConditionData> conditions = conditionMap.get(ruleId);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -163,7 +163,7 @@ public int createOrUpdate(final SelectorDTO selectorDTO) {
                 selectorConditionMapper.insertSelective(SelectorConditionDO.buildSelectorConditionDO(selectorConditionDTO));
             });
             // check selector add
-            if (dataPermissionMapper.listByUserId(JwtUtils.getUserInfo().getUserId()).size() > 0) {
+            if (Boolean.TRUE.equals(dataPermissionMapper.existed(JwtUtils.getUserInfo().getUserId()))) {
                 DataPermissionDTO dataPermissionDTO = new DataPermissionDTO();
                 dataPermissionDTO.setUserId(JwtUtils.getUserInfo().getUserId());
                 dataPermissionDTO.setDataId(selectorDO.getId());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SyncDataServiceImpl.java
Patch:
@@ -111,7 +111,7 @@ public boolean syncPluginData(final String pluginId) {
 
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.REFRESH, selectorDataList));
 
-        List<String> selectorIdList = selectorDataList.stream().map(selectorData -> selectorData.getId())
+        List<String> selectorIdList = selectorDataList.stream().map(SelectorData::getId)
                 .collect(Collectors.toList());
         List<RuleData> allRuleDataList = ruleService.findBySelectorIdList(selectorIdList);
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/PluginMapperTest.java
Patch:
@@ -241,7 +241,7 @@ private PluginDTO buildPluginDTO() {
         pluginDTO.setEnabled(true);
         pluginDTO.setConfig("test-config");
         pluginDTO.setRole("1");
-        pluginDTO.setName("test-name" + System.currentTimeMillis());
+        pluginDTO.setName("test-name" + System.nanoTime());
         return pluginDTO;
     }
 }

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/spi/LoadBalancer.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 
 /**
- * LoadBalancer interface spi .
+ * LoadBalancer interface spi.
  */
 @SPI
 public interface LoadBalancer {
@@ -33,7 +33,7 @@ public interface LoadBalancer {
      *
      * @param upstreamList upstream list
      * @param ip ip
-     * @return divide upstream
+     * @return upstream
      */
     Upstream select(List<Upstream> upstreamList, String ip);
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/DashboardUserTransfer.java
Patch:
@@ -74,7 +74,7 @@ public LoginDashboardUserVO transferVO2LoginVO(final DashboardUserVO dashboardUs
 
     /**
      * conversion dashboardUserVO to dashboardUserEditVO
-     * @param dashboardUserVO
+     * @param dashboardUserVO dashboardUserVO
      * @return {@linkplain DashboardUserEditVO}
      */
     public DashboardUserEditVO transfer2EditVO(final DashboardUserVO dashboardUserVO) {

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/disruptor/subcriber/ShenyuClientURIExecutorSubscriber.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class ShenyuClientURIExecutorSubscriber implements ExecutorTypeSubscriber<URIRegisterDTO> {
     
-    private static final Logger LOG = LoggerFactory.getLogger(ShenyuClientMetadataExecutorSubscriber.class);
+    private static final Logger LOG = LoggerFactory.getLogger(ShenyuClientURIExecutorSubscriber.class);
     
     private final ShenyuClientRegisterRepository shenyuClientRegisterRepository;
     

File: shenyu-common/src/main/java/org/apache/shenyu/common/timer/AbstractRetryTask.java
Patch:
@@ -33,7 +33,7 @@ public abstract class AbstractRetryTask extends TimerTask {
     
     private int tickCount = 1;
     
-    private final Boolean retryLimit;
+    private final boolean retryLimit;
     
     /**
      * Instantiates a new Timer task.

File: shenyu-common/src/main/java/org/apache/shenyu/common/timer/AbstractRoundTask.java
Patch:
@@ -26,7 +26,7 @@
  */
 public abstract class AbstractRoundTask extends AbstractRetryTask {
     
-    private final Logger logger = LoggerFactory.getLogger(AbstractRetryTask.class);
+    private final Logger logger = LoggerFactory.getLogger(AbstractRoundTask.class);
     
     /**
      * Instantiates a new Timer task.

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/event/OrderlyDisruptorEventFactory.java
Patch:
@@ -24,7 +24,7 @@
  * disruptor Create a factory implementation of the object.
  * @param <T> the type parameter
  */
-public class OrderlyDisruptorEventFactory<T> implements EventFactory<OrderlyDataEvent<T>> {
+public class OrderlyDisruptorEventFactory<T> implements EventFactory<DataEvent<T>> {
     
     @Override
     public OrderlyDataEvent<T> newInstance() {

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/HttpClientRegisterRepository.java
Patch:
@@ -40,7 +40,7 @@
 @Join
 public class HttpClientRegisterRepository extends FailbackRegistryRepository {
     
-    private static final Logger LOGGER = LoggerFactory.getLogger(RegisterUtils.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(HttpClientRegisterRepository.class);
     
     private String username;
     

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/utils/RegisterUtils.java
Patch:
@@ -92,7 +92,7 @@ public static void doRegister(final String json, final String url, final String
      * @return Optional token
      * @throws IOException the io exception
      */
-    public static Optional doLogin(final String username, final String password, final String url) throws IOException {
+    public static Optional<Object> doLogin(final String username, final String password, final String url) throws IOException {
         Map<String, Object> loginMap = new HashMap<>(2);
         loginMap.put(Constants.LOGIN_NAME, username);
         loginMap.put(Constants.PASS_WORD, password);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-alibaba-dubbo/src/test/java/org/apache/shenyu/springboot/starter/client/alibaba/dubbo/ShenyuAlibabaDubboClientConfigurationTest.java
Patch:
@@ -44,7 +44,7 @@ public class ShenyuAlibabaDubboClientConfigurationTest {
     @Test
     public void testShenyuAlibabaDubboClientConfiguration() {
         MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
-        registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.ofNullable("token"));
+        registerUtilsMockedStatic.when(() -> RegisterUtils.doLogin(any(), any(), any())).thenReturn(Optional.of("token"));
         new ApplicationContextRunner()
             .withConfiguration(AutoConfigurations.of(ShenyuAlibabaDubboClientConfiguration.class))
             .withBean(ShenyuAlibabaDubboClientConfigurationTest.class)

File: shenyu-sync-data-center/shenyu-sync-data-consul/src/main/java/org/apache/shenyu/sync/data/consul/ConsulSyncDataService.java
Patch:
@@ -67,6 +67,8 @@ public class ConsulSyncDataService extends ConsulCacheHandler implements AutoClo
     /**
      * Instantiates a new Consul sync data service.
      *
+     * @param consulClient the plugin data consulClient
+     * @param consulConfig the plugin data consulConfig
      * @param pluginDataSubscriber the plugin data subscriber
      * @param metaDataSubscribers  the meta data subscribers
      * @param authDataSubscribers  the auth data subscribers

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/plugin/tracing/jaeger/handler/JaegerGlobalPluginHandler.java
Patch:
@@ -58,7 +58,7 @@ public Object after(final TargetObject target, final Method method, final Object
         Object result = methodResult.getResult();
         Span span = (Span) target.getContext();
         ServerWebExchange exchange = (ServerWebExchange) args[0];
-        JaegerSpanManager manager = (JaegerSpanManager) exchange.getAttributes().get(TracingConstants.ROOT_SPAN);
+        JaegerSpanManager manager = (JaegerSpanManager) exchange.getAttributes().get(TracingConstants.SHENYU_AGENT);
 
         if (result instanceof Mono) {
             return ((Mono) result).doFinally(s -> {

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-api/src/main/java/org/apache/shenyu/agent/plugin/metrics/api/MetricsRecorderRegistry.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.agent.plugin.metrics.api;
 
-import org.apache.shenyu.agent.plugin.metrics.api.config.Metrics.Metric;
+import org.apache.shenyu.agent.api.config.MetricsConfig.Metric;
 import org.apache.shenyu.spi.SPI;
 
 import java.util.Optional;

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-prometheus/src/main/java/org/apache/shenyu/agent/plugin/metrics/prometheus/recorder/CounterRecorder.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.prometheus.client.Counter;
 import org.apache.shenyu.agent.plugin.metrics.api.MetricsRecorder;
-import org.apache.shenyu.agent.plugin.metrics.api.config.Metrics.Metric;
+import org.apache.shenyu.agent.api.config.MetricsConfig.Metric;
 
 import java.util.Objects;
 

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-prometheus/src/main/java/org/apache/shenyu/agent/plugin/metrics/prometheus/recorder/GaugeRecorder.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.prometheus.client.Gauge;
 import org.apache.shenyu.agent.plugin.metrics.api.MetricsRecorder;
-import org.apache.shenyu.agent.plugin.metrics.api.config.Metrics.Metric;
+import org.apache.shenyu.agent.api.config.MetricsConfig.Metric;
 
 import java.util.Objects;
 

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-prometheus/src/main/java/org/apache/shenyu/agent/plugin/metrics/prometheus/recorder/HistogramRecorder.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.prometheus.client.Histogram;
 import org.apache.shenyu.agent.plugin.metrics.api.MetricsRecorder;
-import org.apache.shenyu.agent.plugin.metrics.api.config.Metrics.Metric;
+import org.apache.shenyu.agent.api.config.MetricsConfig.Metric;
 
 import java.util.Objects;
 

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-prometheus/src/main/java/org/apache/shenyu/agent/plugin/metrics/prometheus/recorder/MetricsRecorderFactory.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.agent.plugin.metrics.prometheus.recorder;
 
 import org.apache.shenyu.agent.plugin.metrics.api.MetricsRecorder;
-import org.apache.shenyu.agent.plugin.metrics.api.config.Metrics.Metric;
+import org.apache.shenyu.agent.api.config.MetricsConfig.Metric;
 import org.apache.shenyu.agent.plugin.metrics.api.enums.MetricsType;
 
 import java.util.Optional;

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-prometheus/src/main/java/org/apache/shenyu/agent/plugin/metrics/prometheus/recorder/SummaryRecorder.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.prometheus.client.Summary;
 import org.apache.shenyu.agent.plugin.metrics.api.MetricsRecorder;
-import org.apache.shenyu.agent.plugin.metrics.api.config.Metrics.Metric;
+import org.apache.shenyu.agent.api.config.MetricsConfig.Metric;
 
 import java.util.Objects;
 

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-prometheus/src/main/java/org/apache/shenyu/agent/plugin/metrics/prometheus/registry/PrometheusMetricsRecorderRegistry.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.agent.plugin.metrics.api.MetricsRecorder;
 import org.apache.shenyu.agent.plugin.metrics.api.MetricsRecorderRegistry;
-import org.apache.shenyu.agent.plugin.metrics.api.config.Metrics.Metric;
+import org.apache.shenyu.agent.api.config.MetricsConfig.Metric;
 import org.apache.shenyu.agent.plugin.metrics.api.constant.MetricsConstant;
 import org.apache.shenyu.agent.plugin.metrics.prometheus.recorder.MetricsRecorderFactory;
 import org.apache.shenyu.spi.Join;

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/plugin/tracing/jaeger/span/JaegerSpanManager.java
Patch:
@@ -21,7 +21,7 @@
 import io.opentracing.Span;
 import io.opentracing.Tracer;
 import io.opentracing.util.GlobalTracer;
-import org.apache.shenyu.agent.plugin.tracing.jaeger.constant.JaegerConstants;
+import org.apache.shenyu.agent.plugin.tracing.common.constant.TracingConstants;
 import org.springframework.web.server.ServerWebExchange;
 
 import java.util.LinkedList;
@@ -84,7 +84,7 @@ public void finish(final Span span, final ServerWebExchange exchange) {
         span.finish();
         if (count.decrementAndGet() == 0) {
             scopeList.forEach(Scope::close);
-            exchange.getAttributes().remove(JaegerConstants.RESPONSE_SPAN);
+            exchange.getAttributes().remove(TracingConstants.SHENYU_AGENT);
         }
     }
 

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-common/src/main/java/org/apache/shenyu/agent/plugin/tracing/common/constant/TracingConstants.java
Patch:
@@ -36,7 +36,7 @@ public final class TracingConstants {
 
     public static final String HTTP_URL = "http.url";
 
-    public static final String HTTP_STATUS = "http.status_code";
+    public static final String HTTP_METHOD = "http.method";
 
     public static final String SHENYU_AGENT = "shenyu-agent";
 

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/plugin/tracing/jaeger/handler/JaegerGlobalPluginHandler.java
Patch:
@@ -47,7 +47,7 @@ public void before(final TargetObject target, final Method method, final Object[
         tagMap.put(Tags.COMPONENT.getKey(), JaegerConstants.NAME);
         tagMap.put(Tags.HTTP_URL.getKey(), exchange.getRequest().getURI().toString());
         Optional.ofNullable(exchange.getRequest().getMethod())
-                        .ifPresent(v -> tagMap.put(Tags.HTTP_STATUS.getKey(), v.toString()));
+                        .ifPresent(v -> tagMap.put(Tags.HTTP_METHOD.getKey(), v.toString()));
 
         Span span = jaegerSpanManager.add(JaegerConstants.ROOT_SPAN, tagMap);
         exchange.getAttributes().put(JaegerConstants.RESPONSE_SPAN, jaegerSpanManager);

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-opentelemetry/src/main/java/org/apache/shenyu/agent/plugin/tracing/opentelemetry/handler/OpenTelemetryGlobalPluginHandler.java
Patch:
@@ -47,7 +47,7 @@ public void before(final TargetObject target, final Method method, final Object[
         attributesMap.put(TracingConstants.COMPONENT, TracingConstants.NAME);
         attributesMap.put(TracingConstants.HTTP_URL, exchange.getRequest().getURI().toString());
         Optional.ofNullable(exchange.getRequest().getMethod())
-                .ifPresent(v -> attributesMap.put(TracingConstants.HTTP_STATUS, v.toString()));
+                .ifPresent(v -> attributesMap.put(TracingConstants.HTTP_METHOD, v.toString()));
 
         Span span = spanManager.startAndRecord(TracingConstants.ROOT_SPAN, attributesMap);
         exchange.getAttributes().put(TracingConstants.SHENYU_AGENT, spanManager);

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-zipkin/src/main/java/org/apache/shenyu/agent/plugin/tracing/zipkin/handler/ZipkinGlobalPluginHandler.java
Patch:
@@ -46,7 +46,7 @@ public void before(final TargetObject target, final Method method, final Object[
         tagMap.put(TracingConstants.COMPONENT, TracingConstants.NAME);
         tagMap.put(TracingConstants.HTTP_URL, exchange.getRequest().getURI().toString());
         Optional.ofNullable(exchange.getRequest().getMethod())
-                .ifPresent(v -> tagMap.put(TracingConstants.HTTP_STATUS, v.toString()));
+                .ifPresent(v -> tagMap.put(TracingConstants.HTTP_METHOD, v.toString()));
 
         Span span = zipkinSpanManager.start(TracingConstants.ROOT_SPAN, tagMap);
         exchange.getAttributes().put(TracingConstants.SHENYU_AGENT, zipkinSpanManager);

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-metrics/shenyu-agent-plugin-metrics-common/src/main/java/org/apache/shenyu/agent/plugin/metrics/common/definition/MetricsAgentPluginDefinition.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.agent.core.builder.JoinPointBuilderFactory;
 import org.apache.shenyu.agent.core.locator.ShenyuAgentLocator;
 import org.apache.shenyu.agent.core.yaml.ShenyuYamlEngine;
+import org.apache.shenyu.agent.plugin.metrics.common.factory.MetricsRecorderPool;
 import org.apache.shenyu.spi.Join;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -40,6 +41,7 @@ public final class MetricsAgentPluginDefinition extends AbstractAgentPluginDefin
     
     @Override
     protected Collection<JoinPointBuilder> joinPointBuilder() {
+        MetricsRecorderPool.init();
         PointCutConfig config = null;
         try {
             config = ShenyuYamlEngine.unmarshal(ShenyuAgentLocator.locatorConf("metrics-point.yaml"), PointCutConfig.class);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/aspect/PageableAspect.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.admin.aspect;
 
 import com.github.pagehelper.Page;
-import com.github.pagehelper.PageHelper;
+import com.github.pagehelper.page.PageMethod;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
 import org.apache.shenyu.common.exception.ShenyuException;
@@ -60,7 +60,7 @@ public Object mapperAround(final ProceedingJoinPoint point) {
             if (Objects.isNull(pageParameter)) {
                 return point.proceed();
             }
-            Page<?> page = PageHelper.startPage(pageParameter.getCurrentPage(), pageParameter.getPageSize());
+            Page<?> page = PageMethod.startPage(pageParameter.getCurrentPage(), pageParameter.getPageSize());
             Object proceed = point.proceed();
             CommonPager<?> commonPager = (CommonPager<?>) proceed;
             PageParameter result = commonPager.getPage();

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/bytebuddy/interceptor/StaticMethodInterceptor.java
Patch:
@@ -65,7 +65,7 @@ public Object intercept(@Origin final Class<?> klass, @Origin final Method metho
         for (StaticMethodHandler handler : handlerList) {
             MethodResult methodResult = new MethodResult();
             try {
-                handler.before(klass, method, args, new MethodResult());
+                handler.before(klass, method, args, methodResult);
                 // CHECKSTYLE:OFF
             } catch (final Throwable ex) {
                 // CHECKSTYLE:ON

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-logging/shenyu-agent-plugin-logging-rocketmq/src/main/java/org/apache/shenyu/agent/plugin/logging/rocketmq/handler/RocketMQGlobalPluginHandler.java
Patch:
@@ -251,8 +251,9 @@ private void logResponse(final ShenyuContext shenyuContext, final BodyWriter wri
                     logInfo.setMethod(shenyuContext.getMethod());
                 }
             }
+            String body = writer.output();
             if (isNotBinaryType(getHeaders())) {
-                logInfo.setResponseBody(writer.output());
+                logInfo.setResponseBody(body);
             }
             // collect log
             RocketMQLogCollector.getInstance().collect(logInfo);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -223,7 +223,7 @@ public int delete(final List<String> ids) {
                     List<SelectorData> selectorDataList = selectorDOMap.values().stream().map(selectorDO -> {
                         String pluginName = pluginMap.get(selectorDO.getPluginId());
                         if (pluginName.equals(PluginEnum.DIVIDE.getName())) {
-                            UpstreamCheckService.removeByKey(selectorDO.getName());
+                            UpstreamCheckService.removeByKey(selectorDO.getId());
                         }
                         return SelectorDO.transFrom(selectorDO, pluginName, null);
                     }).collect(Collectors.toList());
@@ -386,7 +386,7 @@ private List<SelectorData> buildSelectorDataList(final List<SelectorDO> selector
     }
 
     private void updateDivideUpstream(final SelectorDO selectorDO) {
-        String selectorName = selectorDO.getName();
+        String selectorId = selectorDO.getId();
         PluginDO pluginDO = pluginMapper.selectById(selectorDO.getPluginId());
         List<DivideUpstream> existDivideUpstreams = null;
         if (PluginEnum.SPRING_CLOUD.getName().equals(pluginDO.getName())) {
@@ -402,7 +402,7 @@ private void updateDivideUpstream(final SelectorDO selectorDO) {
             }
         }
         if (CollectionUtils.isNotEmpty(existDivideUpstreams)) {
-            upstreamCheckService.replace(selectorName, CommonUpstreamUtils.convertCommonUpstreamList(existDivideUpstreams));
+            upstreamCheckService.replace(selectorId, CommonUpstreamUtils.convertCommonUpstreamList(existDivideUpstreams));
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -164,10 +164,10 @@ public void close() {
     /**
      * Remove by key.
      *
-     * @param selectorName the selector name
+     * @param selectorId the selector id
      */
-    public static void removeByKey(final String selectorName) {
-        UPSTREAM_MAP.remove(selectorName);
+    public static void removeByKey(final String selectorId) {
+        UPSTREAM_MAP.remove(selectorId);
     }
 
     /**

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/bytebuddy/interceptor/StaticMethodInterceptor.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class StaticMethodInterceptor {
     
-    private static final Logger LOG = LoggerFactory.getLogger(ConstructorInterceptor.class);
+    private static final Logger LOG = LoggerFactory.getLogger(StaticMethodInterceptor.class);
     
     private final List<StaticMethodHandler> handlerList;
     

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/bytebuddy/matcher/ShenyuAgentTypeMatcher.java
Patch:
@@ -38,7 +38,7 @@ public final class ShenyuAgentTypeMatcher extends ElementMatcher.Junction.Abstra
     
     private static final ShenyuAgentTypeMatcher SHENYU_AGENT_TYPE_MATCHER = new ShenyuAgentTypeMatcher();
     
-    private static final Logger LOG = LoggerFactory.getLogger(ShenyuAgentPluginLoader.class);
+    private static final Logger LOG = LoggerFactory.getLogger(ShenyuAgentTypeMatcher.class);
     
     private final ConcurrentHashMap<String, Object> objectPool = new ConcurrentHashMap<>();
     
@@ -80,7 +80,7 @@ public boolean containsType(final TypeDescription target) {
      * @return the shenyu agent join point
      */
     public ShenyuAgentJoinPoint loadShenyuAgentJoinPoint(final TypeDescription typeDescription) {
-        return joinPointMap.getOrDefault(typeDescription.getTypeName(), 
+        return joinPointMap.getOrDefault(typeDescription.getTypeName(),
                 new ShenyuAgentJoinPoint("", Collections.emptyList(), Collections.emptyList(), Collections.emptyList()));
     }
     

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/utils/ShenyuAgentConfigUtils.java
Patch:
@@ -34,6 +34,9 @@
  */
 public final class ShenyuAgentConfigUtils {
     
+    private ShenyuAgentConfigUtils() {
+    }
+    
     /**
      * Gets supports.
      *

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.httpclient;
 
 import io.netty.channel.ConnectTimeoutException;
+import io.netty.handler.timeout.ReadTimeoutException;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.enums.PluginEnum;
@@ -45,6 +46,7 @@
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.concurrent.TimeoutException;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
@@ -118,7 +120,7 @@ private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBody
                 .exchange()
                 .doOnError(e -> LOG.error(e.getMessage(), e))
                 .timeout(Duration.ofMillis(timeout))
-                .retryWhen(Retry.onlyIf(x -> x.exception() instanceof ConnectTimeoutException)
+                .retryWhen(Retry.anyOf(TimeoutException.class, ConnectTimeoutException.class, ReadTimeoutException.class)
                         .retryMax(retryTimes)
                         .backoff(Backoff.exponential(Duration.ofMillis(200), Duration.ofSeconds(20), 2, true)))
                 .flatMap(e -> doNext(e, exchange, chain));

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/vo/PluginVOTest.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.shenyu.admin.AbstractReflectGetterSetterTest;
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.common.enums.PluginEnum;
-import org.junit.Test;
 
 import java.sql.Timestamp;
 
-import static org.junit.Assert.assertNotNull;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * Test case for PluginVO.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/vo/RuleConditionVOTest.java
Patch:
@@ -21,11 +21,10 @@
 import org.apache.shenyu.admin.model.entity.RuleConditionDO;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
-import org.junit.Test;
-
 import java.sql.Timestamp;
 
-import static org.junit.Assert.assertNotNull;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * Test case for RuleConditionVO.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/vo/SelectorConditionVOTest.java
Patch:
@@ -21,11 +21,11 @@
 import org.apache.shenyu.admin.model.entity.SelectorConditionDO;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
-import org.junit.Test;
 
 import java.sql.Timestamp;
 
-import static org.junit.Assert.assertNotNull;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * Test case for SelectorConditionVO.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ShenyuResultMessage.java
Patch:
@@ -64,7 +64,7 @@ public final class ShenyuResultMessage {
 
     public static final String TOKEN_IS_ERROR = "token is error";
 
-    public static final String TOKEN_HAS_NO_PERMISSION = "toke has no permission";
+    public static final String TOKEN_HAS_NO_PERMISSION = "token has no permission";
 
     public static final String MENU_SUCCESS = "get menu and permission success";
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/AbstractShenyuPluginTest.java
Patch:
@@ -24,13 +24,13 @@
 import org.apache.shenyu.common.enums.SelectorTypeEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
-import org.junit.Before;
+import org.junit.jupiter.api.BeforeEach;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.List;
@@ -57,7 +57,7 @@ public final class AbstractShenyuPluginTest {
 
     private ShenyuPluginChain shenyuPluginChain;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         this.ruleData = RuleData.builder().id("1")
                 .selectorId("1").enabled(true)

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/CommonHandleCacheTest.java
Patch:
@@ -20,8 +20,8 @@
 import java.lang.reflect.Field;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 /**
  * BaseHandleCache test.
@@ -36,7 +36,7 @@ public final class CommonHandleCacheTest {
 
     private ConcurrentHashMap<String, String> cachedMockMap;
 
-    @Before
+    @BeforeEach
     public void setUp() throws NoSuchFieldException, IllegalAccessException {
         this.commonHandleCache = new EmptyMockCommonHandleCache<>();
         this.cachedMockMap = new ConcurrentHashMap<>();

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtilsTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.base.utils;
 
 import org.apache.shenyu.common.dto.RuleData;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * CacheKeyUtilsTest test.

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/AbstractLoadBalancerTest.java
Patch:
@@ -23,8 +23,8 @@
 import io.netty.channel.local.LocalAddress;
 import org.apache.shenyu.plugin.grpc.loadbalance.picker.UnitTestIdleHelper;
 import org.apache.shenyu.plugin.grpc.loadbalance.picker.UnitTestReadHelper;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 
@@ -34,7 +34,7 @@
 public class AbstractLoadBalancerTest {
     private RandomLoadBalancerProvider randomLoadBalancerProvider;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         randomLoadBalancerProvider = new RandomLoadBalancerProvider();
     }

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/SubChannelsTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.grpc.Attributes;
 import io.grpc.LoadBalancer;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import static org.mockito.Mockito.mock;
 
 public class SubChannelsTest {

File: shenyu-plugin/shenyu-plugin-hystrix/src/test/java/org/apache/shenyu/plugin/hystrix/builder/HystrixBuilderTest.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
 import org.apache.shenyu.common.dto.convert.rule.HystrixHandle.HystrixThreadPoolConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * The Test Case For HystrixBuilder.

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/algorithm/SlidingWindowRateLimiterAlgorithmTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.plugin.ratelimiter.algorithm;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
@@ -32,7 +32,7 @@ public final class SlidingWindowRateLimiterAlgorithmTest {
 
     private SlidingWindowRateLimiterAlgorithm slidingWindowRateLimiterAlgorithm;
 
-    @Before
+    @BeforeEach
     public void startup() {
         slidingWindowRateLimiterAlgorithm = new SlidingWindowRateLimiterAlgorithm();
     }

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/NettyClientMessageWriterTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.BeforeEach;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.core.io.buffer.NettyDataBuffer;
 import org.springframework.core.io.buffer.NettyDataBufferFactory;
@@ -54,7 +54,7 @@ public class NettyClientMessageWriterTest {
 
     private ShenyuPluginChain chain;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         SpringBeanUtils.getInstance().setApplicationContext(context);

File: shenyu-plugin/shenyu-plugin-uri/src/test/java/org/apache/shenyu/plugin/uri/URIPluginTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.junit.MockitoJUnitRunner;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
 import org.springframework.util.LinkedMultiValueMap;
@@ -46,7 +46,7 @@
 /**
  * The Test Case For {@link URIPlugin}.
  */
-@RunWith(MockitoJUnitRunner.class)
+@ExtendWith(MockitoExtension.class)
 public class URIPluginTest {
 
     private MockServerHttpRequest request;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/RegisterCenterConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public ShenyuRegisterCenterConfig shenyuRegisterCenterConfig() {
      * @param shenyuClientRegisterService the shenyu client register service
      * @return the shenyu server register repository
      */
-    @Bean
+    @Bean(destroyMethod = "close")
     public ShenyuServerRegisterRepository shenyuServerRegisterRepository(final ShenyuRegisterCenterConfig shenyuRegisterCenterConfig,
                                                                          final List<ShenyuClientRegisterService> shenyuClientRegisterService) {
         String registerType = shenyuRegisterCenterConfig.getRegisterType();

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -101,6 +101,7 @@ private void clean(final ServerWebExchange exchange) {
         // openxmlformats-officedocument => .pptx .xlsx .docx
         // binary => .bin
         // pdf => .pdf
+        // octet-stream => octet-stream
         Set<String> commonBinaryTypes = new HashSet<String>() {
             {
                 add("image");
@@ -116,6 +117,7 @@ private void clean(final ServerWebExchange exchange) {
                 add("openxmlformats-officedocument");
                 add("binary");
                 add("pdf");
+                add("octet-stream");
             }
         };
         StringJoiner regexBuilder = new StringJoiner("|");

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/test/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperInstanceRegisterRepositoryTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.I0Itec.zkclient.ZkClient;
 import org.apache.shenyu.register.common.dto.InstanceRegisterDTO;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -45,7 +45,7 @@ public class ZookeeperInstanceRegisterRepositoryTest {
     private final ZookeeperInstanceRegisterRepository repository
             = new ZookeeperInstanceRegisterRepository();
 
-    @Before
+    @BeforeEach
     public void setup() throws Exception {
         final ZkClient zkClient = mockZkClient();
         final Field field = repository.getClass().getDeclaredField("zkClient");

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-etcd/src/test/java/org/apache/shenyu/register/server/etcd/EtcdServerRegisterRepositoryTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.shenyu.register.server.api.ShenyuServerRegisterPublisher;
 import org.apache.shenyu.register.server.etcd.client.EtcdClient;
 import org.apache.shenyu.register.server.etcd.client.EtcdListenHandler;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -50,7 +50,7 @@ public class EtcdServerRegisterRepositoryTest {
 
     private EtcdListenHandler watchHandler;
 
-    @Before
+    @BeforeEach
     public void setUp() throws NoSuchFieldException, IllegalAccessException {
         this.publisher = mockPublish();
         this.repository = new EtcdServerRegisterRepository();

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-nacos/src/test/java/org/apache/shenyu/register/server/nacos/NacosServerRegisterRepositoryTest.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
 import org.apache.shenyu.register.server.api.ShenyuServerRegisterPublisher;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -64,7 +64,7 @@ public class NacosServerRegisterRepositoryTest {
 
     private EventListener eventListener;
 
-    @Before
+    @BeforeEach
     public void setUp() throws NoSuchFieldException, IllegalAccessException, NacosException {
         this.publisher = mockPublish();
         this.repository = new NacosServerRegisterRepository();

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-zookeeper/src/test/java/org/apache/shenyu/register/server/zookeeper/ZookeeperServerRegisterRepositoryTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.server.api.ShenyuServerRegisterPublisher;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -54,7 +54,7 @@ public class ZookeeperServerRegisterRepositoryTest {
 
     private IZkDataListener zkDataListener;
 
-    @Before
+    @BeforeEach
     public void setUp() throws NoSuchFieldException, IllegalAccessException {
         this.publisher = mockPublish();
         this.repository = new ZookeeperServerRegisterRepository();

File: shenyu-spi/src/test/java/org/apache/shenyu/spi/SpiExtensionFactoryTest.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.shenyu.spi;
 
 import org.apache.shenyu.spi.fixture.MysqlSPI;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 public final class SpiExtensionFactoryTest {
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/config/HttpConfigTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.sync.data.http.config;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.BeforeEach;
 
 import java.util.Objects;
 
@@ -40,7 +40,7 @@ public class HttpConfigTest {
 
     private HttpConfig that;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         httpConfig = new HttpConfig();
         httpConfig.setUrl(URL);

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/AppAuthDataRefreshTest.java
Patch:
@@ -23,14 +23,14 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public final class AppAuthDataRefreshTest {
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/MetaDataRefreshTest.java
Patch:
@@ -23,14 +23,14 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public final class MetaDataRefreshTest {
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/PluginDataRefreshTest.java
Patch:
@@ -23,10 +23,10 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/RuleDataRefreshTest.java
Patch:
@@ -24,14 +24,14 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public final class RuleDataRefreshTest {
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/SelectorDataRefreshTest.java
Patch:
@@ -24,10 +24,10 @@
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/test/java/org/apache/shenyu/sync/data/nacos/NacosSyncDataServiceTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.alibaba.nacos.api.config.ConfigService;
 import org.apache.shenyu.sync.data.nacos.handler.NacosMockConfigService;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 
@@ -31,7 +31,7 @@ public final class NacosSyncDataServiceTest {
 
     private NacosSyncDataService nacosSyncDataService;
 
-    @Before
+    @BeforeEach
     public void setup() {
         ConfigService configService = new NacosMockConfigService();
         nacosSyncDataService = new NacosSyncDataService(configService, null,

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/AuthDataHandlerTest.java
Patch:
@@ -22,17 +22,16 @@
 import org.apache.shenyu.common.dto.AuthParamData;
 import org.apache.shenyu.common.dto.AuthPathData;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
-
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.junit.Assert.assertThat;
 
 public final class AuthDataHandlerTest {
 

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/MetaDataHandlerTest.java
Patch:
@@ -20,12 +20,12 @@
 import com.google.gson.Gson;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/PluginDataHandlerTest.java
Patch:
@@ -20,12 +20,12 @@
 import com.google.gson.Gson;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/RuleDataHandlerTest.java
Patch:
@@ -21,13 +21,13 @@
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/SelectorDataHandlerTest.java
Patch:
@@ -21,13 +21,13 @@
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: shenyu-sync-data-center/shenyu-sync-data-websocket/src/test/java/org/apache/shenyu/plugin/sync/data/websocket/handler/WebsocketDataHandlerTest.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 public final class WebsocketDataHandlerTest {
@@ -40,7 +40,7 @@ public final class WebsocketDataHandlerTest {
 
     private WebsocketDataHandler websocketDataHandler;
 
-    @Before
+    @BeforeEach
     public void testWebsocketDataHandler() {
         pluginDataSubscriber = mock(PluginDataSubscriber.class);
         List<AuthDataSubscriber> authDataSubscribers = new LinkedList<>();

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/CrossFilterTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.web.filter;
 
 import org.apache.shenyu.common.config.ShenyuConfig.CrossFilterConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
 import org.springframework.web.server.ServerWebExchange;

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/FileSizeFilterTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.springframework.context.support.GenericApplicationContext;
 import org.springframework.http.MediaType;
 import org.springframework.http.server.reactive.ServerHttpRequest;
@@ -42,7 +42,7 @@
  */
 public final class FileSizeFilterTest {
 
-    @Before
+    @BeforeEach
     public void setup() {
         GenericApplicationContext context = new GenericApplicationContext();
         SpringBeanUtils.getInstance().setApplicationContext(context);

File: shenyu-web/src/test/java/org/apache/shenyu/web/logo/ShenyuLogoTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.web.logo;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;
 import org.springframework.core.env.ConfigurableEnvironment;
@@ -28,7 +28,7 @@
 import java.lang.reflect.Method;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * The TestCase for ShenyuLogo.

File: shenyu-common/src/test/java/org/apache/shenyu/common/concurrent/ShenyuThreadFactoryTest.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shenyu.common.concurrent;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.ThreadFactory;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.notNullValue;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test cases for ShenyuThreadFactory.

File: shenyu-common/src/test/java/org/apache/shenyu/common/constant/DefaultPathConstantsTest.java
Patch:
@@ -18,11 +18,11 @@
 package org.apache.shenyu.common.constant;
 
 import org.apache.commons.lang3.RandomStringUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test cases for ZkPathConstants.

File: shenyu-common/src/test/java/org/apache/shenyu/common/constant/RedisKeyConstantsTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.shenyu.common.constant;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.notNullValue;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test cases for RedisKeyConstants.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/AdminPluginOperateEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class AdminPluginOperateEnumTest {
     @Test

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/AdminResourceEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class AdminResourceEnumTest {
     @Test

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/DataSyncEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test Cases for DataSyncEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/HystrixIsolationModeEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test case for HystrixIsolationModeEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/MatchModeEnumTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 /**
  * Test Cases for MatchModeEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/PluginEnumTest.java
Patch:
@@ -17,12 +17,13 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
-import static org.junit.Assert.assertEquals;
+import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
 import java.util.List;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 /**
  * Test Cases for PluginEnum.
  */

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/PluginRoleEnumTest.java
Patch:
@@ -17,8 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
-import static org.junit.Assert.assertEquals;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test Cases for PluginRoleEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/PluginTypeEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.jupiter.api.Test;
 
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class PluginTypeEnumTest {
 

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/RateLimitEnumTest.java
Patch:
@@ -17,11 +17,12 @@
 
 package org.apache.shenyu.common.enums;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.jupiter.api.Test;
 
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class RateLimitEnumTest {
+
     @Test
     public void testGetKeyName() {
         assertEquals("concurrent_request_rate_limiter", RateLimitEnum.CONCURRENT.getKeyName());

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/RedisModeEnumTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 /**
  * Test Cases for RedisModeEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/ResultEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test case for ResultEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/SelectorTypeEnumTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 /**
  * Test Cases for SelectorTypeEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/WafEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.jupiter.api.Test;
 
-import org.junit.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class WafEnumTest {
     @Test

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/WafModelEnumTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test case for WafModelEnum.

File: shenyu-common/src/test/java/org/apache/shenyu/common/exception/CommonErrorCodeTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.exception;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test case for {@link CommonErrorCode}.

File: shenyu-common/src/test/java/org/apache/shenyu/common/exception/SerializerExceptionTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.exception;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Test case for {@link SerializerException}.

File: shenyu-common/src/test/java/org/apache/shenyu/common/exception/ShenyuExceptionTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.exception;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Test case for {@link ShenyuException}.

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/DateUtilsTest.java
Patch:
@@ -17,14 +17,15 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.LocalDateTime;
 import java.time.ZoneId;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 
 /**
  * Test Cases for DateUtils.

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/LogUtilsTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 
 import java.util.function.Supplier;
@@ -39,7 +39,7 @@ public final class LogUtilsTest {
 
     private Supplier<Object> supplier;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         logger = spy(Logger.class);
         supplier = mock(Supplier.class);

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/Md5UtilsTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test cases for Md5Utils.

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/ParamCheckUtilsTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Test cases for ParamCheckUtils.

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/PathMatchUtilsTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Test cases for PathMatchUtils.

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/ReflectUtilsTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 
 /**
  * Test cases for ReflectUtils.

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/SignUtilsTest.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * Test cases for SignUtils.

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/VersionUtilsTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.common.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * Test cases for VersionUtils.

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -35,6 +35,7 @@
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanPostProcessor;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.util.ReflectionUtils;
 
 import java.lang.reflect.Method;
@@ -78,7 +79,7 @@ public TarsServiceBeanPostProcessor(final PropertiesConfig clientConfig, final S
 
     @Override
     public Object postProcessAfterInitialization(final Object bean, final String beanName) throws BeansException {
-        if (bean.getClass().getAnnotation(ShenyuTarsService.class) != null) {
+        if (AnnotationUtils.findAnnotation(bean.getClass(), ShenyuTarsService.class) != null) {
             handler(bean);
         }
         return bean;
@@ -90,7 +91,7 @@ private void handler(final Object serviceBean) {
             clazz = AopUtils.getTargetClass(serviceBean);
         }
         Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(clazz);
-        String serviceName = serviceBean.getClass().getAnnotation(ShenyuTarsService.class).serviceName();
+        String serviceName = clazz.getAnnotation(ShenyuTarsService.class).serviceName();
         for (Method method : methods) {
             ShenyuTarsClient shenyuTarsClient = method.getAnnotation(ShenyuTarsClient.class);
             if (Objects.nonNull(shenyuTarsClient)) {

File: shenyu-examples/shenyu-examples-tars/src/main/java/org/apache/shenyu/examples/tars/servant/testapp/impl/HelloServantImpl.java
Patch:
@@ -20,6 +20,7 @@
 import com.qq.tars.spring.annotation.TarsServant;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsClient;
 import org.apache.shenyu.client.tars.common.annotation.ShenyuTarsService;
+import org.apache.shenyu.examples.tars.aop.Log;
 import org.apache.shenyu.examples.tars.servant.testapp.HelloServant;
 
 @TarsServant("HelloObj")
@@ -32,6 +33,7 @@ public String hello(final int no, final String name) {
         return String.format("hello no=%s, name=%s, time=%s", no, name, System.currentTimeMillis());
     }
 
+    @Log
     @Override
     @ShenyuTarsClient(path = "/helloInt", desc = "helloInt")
     public int helloInt(final int no, final String name) {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/AbstractReflectGetterSetterTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.beans.IntrospectionException;
 import java.beans.PropertyDescriptor;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/AbstractSpringIntegrationTest.java
Patch:
@@ -17,16 +17,13 @@
 
 package org.apache.shenyu.admin;
 
-import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.ActiveProfiles;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 /**
  * Abstract Integration Test for Spring.
  */
 @ActiveProfiles("h2")
-@RunWith(SpringJUnit4ClassRunner.class)
 @SpringBootTest(classes = ShenyuAdminBootstrap.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
         properties = "spring.autoconfigure.exclude=org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration")
 public abstract class AbstractSpringIntegrationTest {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ConsulServerConfigurationTest.java
Patch:
@@ -20,12 +20,12 @@
 
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
 import org.apache.shenyu.register.server.consul.ShenyuConsulConfigWatch;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.context.ApplicationEventPublisher;
 
 import java.util.Properties;
 
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataBaseConfigurationTest.java
Patch:
@@ -19,10 +19,10 @@
 package org.apache.shenyu.admin.config;
 
 import org.apache.shenyu.admin.config.properties.DataBaseProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * The TestCase for DataBaseConfiguration.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/SecretConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.admin.AbstractConfigurationTest;
 import org.apache.shenyu.admin.config.properties.SecretProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Assertions;
 
 /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/SecretPropertiesTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.admin.AbstractConfigurationTest;
 import org.apache.shenyu.admin.config.properties.SecretProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Assertions;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/WebsocketSyncPropertiesTest.java
Patch:
@@ -19,12 +19,13 @@
 
 import org.apache.shenyu.admin.AbstractConfigurationTest;
 import org.apache.shenyu.admin.config.properties.WebsocketSyncProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
+
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.comparesEqualTo;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test cases for WebsocketSyncProperties.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ZookeeperConfigurationTest.java
Patch:
@@ -20,13 +20,13 @@
 import org.I0Itec.zkclient.ZkClient;
 import org.apache.shenyu.admin.AbstractConfigurationTest;
 import org.apache.shenyu.admin.config.properties.ZookeeperProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * Test case for ZookeeperConfiguration.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ZookeeperPropertiesTest.java
Patch:
@@ -21,9 +21,10 @@
 import org.apache.shenyu.admin.config.properties.ZookeeperProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test case for ZookeeperProperties.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/ApplicationStartListenerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.utils.ShenyuDomain;
 import org.apache.shenyu.common.utils.IpUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.boot.web.server.LocalServerPort;
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test case for {@link ApplicationStartListener}.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/ConfigDataCacheTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.admin.listener;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * The TestCase for ConfigDataCache.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListenerTest.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.platform.commons.util.StringUtils;
-import org.junit.runner.RunWith;
-import org.mockito.junit.MockitoJUnitRunner;
+import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.http.MediaType;
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.mock.web.MockHttpServletResponse;
@@ -42,7 +42,7 @@
 /**
  * The TestCase for {@link HttpLongPollingDataChangedListener}.
  */
-@RunWith(MockitoJUnitRunner.class)
+@ExtendWith(MockitoExtension.class)
 public final class HttpLongPollingDataChangedListenerTest {
 
     private static final String X_REAL_IP = "X-Real-IP";

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketConfiguratorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.listener.websocket;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.http.HttpSession;
 import javax.websocket.HandshakeResponse;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketListenerTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.admin.listener.websocket;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.ServletRequestEvent;
 import javax.servlet.http.HttpServletRequest;
@@ -37,7 +37,7 @@ public class WebsocketListenerTest {
 
     private WebsocketListener websocketListener;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         this.websocketListener = new WebsocketListener();
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/zookeeper/HttpServiceDiscoveryTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.service.SelectorService;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.assertj.core.util.Lists;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.core.env.Environment;
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AuthParamMapperTest.java
Patch:
@@ -20,14 +20,14 @@
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.model.entity.AuthParamDO;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;
 import static org.hamcrest.Matchers.comparesEqualTo;
 import static org.hamcrest.Matchers.notNullValue;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test cases for AuthParamMapper.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AuthPathMapperTest.java
Patch:
@@ -20,14 +20,14 @@
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.model.entity.AuthPathDO;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test cases for AuthPathMapper.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DataPermissionMapperTest.java
Patch:
@@ -21,12 +21,12 @@
 import org.apache.shenyu.admin.model.entity.DataPermissionDO;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.assertj.core.util.Lists;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Resource;
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Test cases for DataPermissionMapper.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/PermissionMapperTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.shenyu.admin.AbstractSpringIntegrationTest;
 import org.apache.shenyu.admin.model.entity.PermissionDO;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
 
 /**
  * test for {@linkplain PermissionMapper}.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/PluginHandleMapperTest.java
Patch:
@@ -21,16 +21,17 @@
 import org.apache.shenyu.admin.model.entity.PluginHandleDO;
 import org.apache.shenyu.admin.model.query.PluginHandleQuery;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test cases for PluginHandleMapper.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RuleMapperTest.java
Patch:
@@ -21,13 +21,13 @@
 import org.apache.shenyu.admin.model.entity.RuleDO;
 import org.apache.shenyu.admin.model.query.RuleQuery;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
 import java.util.Random;
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test cases for RuleMapper.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ShenyuDictMapperTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.admin.model.query.ShenyuDictQuery;
 import org.apache.shenyu.common.utils.UUIDUtils;
 import org.assertj.core.util.Lists;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Resource;
 import java.sql.Timestamp;
@@ -34,7 +34,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.hasItems;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test cases for ShenyuDictMapper.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/AesUtilsTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.shenyu.admin.utils;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * Test cases for AesUtils.

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/PathUtilsTest.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.shenyu.admin.utils;
 
 import org.apache.shenyu.common.constant.AdminConstants;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class PathUtilsTest {
     private static final String URI_WRAPPER = "springCloud/test/**";

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDivideServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.admin.service.register;
 
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.entity.MetaDataDO;
 import org.apache.shenyu.admin.model.entity.SelectorDO;
 import org.apache.shenyu.admin.service.MetaDataService;
@@ -70,11 +69,11 @@ protected String buildHandle(final List<URIRegisterDTO> uriList, final SelectorD
         String handleAdd;
         List<DivideUpstream> addList = buildDivideUpstreamList(uriList);
         List<DivideUpstream> canAddList = new CopyOnWriteArrayList<>();
-        if (StringUtils.isBlank(selectorDO.getHandle())) {
+        List<DivideUpstream> existList = GsonUtils.getInstance().fromCurrentList(selectorDO.getHandle(), DivideUpstream.class);
+        if (CollectionUtils.isEmpty(existList)) {
             handleAdd = GsonUtils.getInstance().toJson(addList);
             canAddList = addList;
         } else {
-            List<DivideUpstream> existList = GsonUtils.getInstance().fromCurrentList(selectorDO.getHandle(), DivideUpstream.class);
             List<DivideUpstream> diffList = addList.stream().filter(divideUpstream -> !existList.contains(divideUpstream)).collect(Collectors.toList());
             if (CollectionUtils.isNotEmpty(diffList)) {
                 canAddList.addAll(diffList);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/DashboardUserTransfer.java
Patch:
@@ -49,7 +49,7 @@ public DashboardUserVO transferDTO2VO(final DashboardUserDTO dashboardUserDTO) {
                     dashboardVO.setEnabled(data.getEnabled());
                     return dashboardVO;
                 })
-                .orElseGet(null);
+                .orElse(null);
     }
 
     /**
@@ -69,7 +69,7 @@ public LoginDashboardUserVO transferVO2LoginVO(final DashboardUserVO dashboardUs
                     dashboardVO.setDateUpdated(data.getDateUpdated());
                     return dashboardVO;
                 })
-                .orElseGet(null);
+                .orElse(null);
     }
 
     /**
@@ -88,7 +88,7 @@ public DashboardUserEditVO transfer2EditVO(final DashboardUserVO dashboardUserVO
                     vo.setDateCreated(data.getDateCreated());
                     vo.setDateUpdated(data.getDateUpdated());
                     return vo;
-                }).orElseGet(null);
+                }).orElse(null);
     }
 
 }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/transfer/ShenyuServiceTransfer.java
Patch:
@@ -37,6 +37,6 @@ public enum ShenyuServiceTransfer {
      * @return The new instance
      */
     public ShenyuServiceInstance deepCopy(final ShenyuServiceInstance instance) {
-        return Optional.ofNullable(instance).map(data -> new ShenyuServiceInstance(data.getHost(), data.getPort(), data.getMetadata())).orElseGet(null);
+        return Optional.ofNullable(instance).map(data -> new ShenyuServiceInstance(data.getHost(), data.getPort(), data.getMetadata())).orElse(null);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/subscriber/MetadataExecutorSubscriber.java
Patch:
@@ -47,7 +47,7 @@ public void executor(final Collection<MetaDataRegisterDTO> metaDataRegisterDTOLi
         for (MetaDataRegisterDTO metaDataRegisterDTO : metaDataRegisterDTOList) {
             ShenyuClientRegisterService shenyuClientRegisterService = this.shenyuClientRegisterService.get(metaDataRegisterDTO.getRpcType());
             Objects.requireNonNull(shenyuClientRegisterService);
-            synchronized (ShenyuClientRegisterService.class) {
+            synchronized (shenyuClientRegisterService) {
                 shenyuClientRegisterService.register(metaDataRegisterDTO);
             }
         }

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-nacos/src/test/java/org/apache/shenyu/register/client/nacos/NacosClientRegisterRepositoryTest.java
Patch:
@@ -80,7 +80,7 @@ private ConfigService mockConfigService() throws NacosException {
             String key = invocationOnMock.getArgument(0);
             String value = invocationOnMock.getArgument(2);
             nacosBroker.put(key, value);
-            return null;
+            return true;
         }).when(configService).publishConfig(anyString(), anyString(), anyString());
 
         return configService;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java
Patch:
@@ -103,7 +103,7 @@ public final class UpstreamCheckServiceTest {
     
     private SelectorHandleConverterFactor converterFactor;
 
-    private ShenyuRegisterCenterConfig shenyuRegisterCenterConfig = new ShenyuRegisterCenterConfig();
+    private final ShenyuRegisterCenterConfig shenyuRegisterCenterConfig = new ShenyuRegisterCenterConfig();
 
     private Map<String, List<DivideUpstream>> upstreamMap;
 

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/shutdown/ShenyuClientShutdownHook.java
Patch:
@@ -38,14 +38,14 @@ public class ShenyuClientShutdownHook {
 
     private static final Logger LOG = LoggerFactory.getLogger(ShenyuClientShutdownHook.class);
 
+    private static final AtomicBoolean DELAY = new AtomicBoolean(false);
+
     private static String hookNamePrefix = "ShenyuClientShutdownHook";
 
     private static AtomicInteger hookId = new AtomicInteger(0);
 
     private static Properties props;
 
-    private static AtomicBoolean delay = new AtomicBoolean(false);
-
     private static IdentityHashMap<Thread, Thread> delayHooks = new IdentityHashMap<>();
 
     private static IdentityHashMap<Thread, Thread> delayedHooks = new IdentityHashMap<>();
@@ -77,7 +77,7 @@ public static void set(final ShenyuClientRegisterRepository result, final Proper
      * Delay other shutdown hooks.
      */
     public static void delayOtherHooks() {
-        if (!delay.compareAndSet(false, true)) {
+        if (!DELAY.compareAndSet(false, true)) {
             return;
         }
         TakeoverOtherHooksThread thread = new TakeoverOtherHooksThread();

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/GrpcClientBeanPostProcessor.java
Patch:
@@ -56,7 +56,7 @@ public class GrpcClientBeanPostProcessor implements BeanPostProcessor {
 
     private static final Logger LOG = LoggerFactory.getLogger(GrpcClientBeanPostProcessor.class);
 
-    private ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
+    private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 
     private final String contextPath;
 
@@ -66,7 +66,7 @@ public class GrpcClientBeanPostProcessor implements BeanPostProcessor {
 
     private final int port;
 
-    private List<ServerServiceDefinition> serviceDefinitions = Lists.newArrayList();
+    private final List<ServerServiceDefinition> serviceDefinitions = Lists.newArrayList();
 
     /**
      * Instantiates a new Shenyu client bean post processor.

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/GrpcContextRefreshedEventListener.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class GrpcContextRefreshedEventListener implements ApplicationListener<ContextRefreshedEvent> {
 
-    private ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
+    private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 
     private final AtomicBoolean registered = new AtomicBoolean(false);
     

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -51,7 +51,7 @@ public class ContextRegisterListener implements ApplicationListener<ContextRefre
     
     private final String host;
     
-    private String contextPath;
+    private final String contextPath;
     
     private final String appName;
     

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientBeanPostProcessorTest.java
Patch:
@@ -56,7 +56,7 @@ public final class SpringCloudClientBeanPostProcessorTest {
     @Mock
     private static Environment env;
 
-    private MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
+    private final MockedStatic<RegisterUtils> registerUtilsMockedStatic = mockStatic(RegisterUtils.class);
 
     private final SpringCloudClientTestBean springCloudClientTestBean = new SpringCloudClientTestBean();
 

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -46,7 +46,7 @@ public class ContextRegisterListener implements ApplicationListener<ContextRefre
 
     private final AtomicBoolean registered = new AtomicBoolean(false);
 
-    private String contextPath;
+    private final String contextPath;
 
     private final String appName;
 

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/MotanServiceBeanPostProcessor.java
Patch:
@@ -60,7 +60,7 @@ public class MotanServiceBeanPostProcessor implements BeanPostProcessor, Applica
 
     private final LocalVariableTableParameterNameDiscoverer localVariableTableParameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();
 
-    private ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
+    private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 
     private ApplicationContext applicationContext;
 

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsContextRefreshedEventListener.java
Patch:
@@ -35,11 +35,11 @@
  */
 public class TarsContextRefreshedEventListener implements ApplicationListener<ContextRefreshedEvent> {
 
-    private ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
+    private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 
     private final AtomicBoolean registered = new AtomicBoolean(false);
     
-    private String contextPath;
+    private final String contextPath;
     
     private final String ipAndPort;
 

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -52,7 +52,7 @@ public class TarsServiceBeanPostProcessor implements BeanPostProcessor {
 
     private final LocalVariableTableParameterNameDiscoverer localVariableTableParameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();
 
-    private ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
+    private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 
     private final String contextPath;
 

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/ReflectUtilsTest.java
Patch:
@@ -45,7 +45,7 @@ public void testSetFieldValue() {
     }
 
     static class Reflect {
-        private String a = "1";
+        private final String a = "1";
     }
 
     static class ReflectNonField {

File: shenyu-examples/shenyu-examples-plugin/src/main/java/org/apache/shenyu/examples/plugin/ext/ExtPluginDataHandler.java
Patch:
@@ -32,7 +32,7 @@ public class ExtPluginDataHandler implements PluginDataHandler {
     
     private static final Logger LOG = LoggerFactory.getLogger(ExtPluginDataHandler.class);
     
-    private DispatcherHandler dispatcherHandler;
+    private final DispatcherHandler dispatcherHandler;
     
     /**
      * Instantiates a new Ext plugin data handler.

File: shenyu-examples/shenyu-examples-plugin/src/main/java/org/apache/shenyu/examples/plugin/ext/ExtendsShenyuZerBean.java
Patch:
@@ -24,5 +24,5 @@
  */
 @Component
 public class ExtendsShenyuZerBean {
-    private String name = "test";
+    private final String name = "test";
 }

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java
Patch:
@@ -39,7 +39,7 @@ public class UpstreamCheckTaskTest {
     /**
      *  Here to set interval with 50s to avoid running the second time.
      */
-    private UpstreamCheckTask healthCheckTask = new UpstreamCheckTask(50000);
+    private final UpstreamCheckTask healthCheckTask = new UpstreamCheckTask(50000);
 
     /**
      * Test run.

File: shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootService.java
Patch:
@@ -47,7 +47,7 @@ public final class PrometheusBootService implements MetricsBootService {
 
     private HTTPServer server;
     
-    private volatile AtomicBoolean registered = new AtomicBoolean(false);
+    private final AtomicBoolean registered = new AtomicBoolean(false);
     
     @Override
     public void start(final MetricsConfig metricsConfig, final MetricsRegister metricsRegister) {

File: shenyu-protocol/shenyu-protocol-grpc/src/main/java/org/apache/shenyu/protocol/grpc/message/JsonMessage.java
Patch:
@@ -45,7 +45,7 @@ public class JsonMessage {
     /**
      * methodDescriptorCache.
      */
-    private static Map<String, MethodDescriptor<DynamicMessage, DynamicMessage>> methodDescriptorCache = Maps.newConcurrentMap();
+    private static final Map<String, MethodDescriptor<DynamicMessage, DynamicMessage>> METHOD_DESCRIPTOR_CACHE = Maps.newConcurrentMap();
 
     /**
      * Dynamic build JsonMarshaller Descriptor.
@@ -153,15 +153,15 @@ public static MethodDescriptor<DynamicMessage, DynamicMessage> createJsonMarshal
                                                                                                         final MethodDescriptor.MethodType methodType,
                                                                                                         final DynamicMessage request,
                                                                                                         final DynamicMessage response) {
-        MethodDescriptor<DynamicMessage, DynamicMessage> methodDescriptor = methodDescriptorCache.get(serviceName + GrpcConstants.GRPC_JSON_SERVICE + methodName);
+        MethodDescriptor<DynamicMessage, DynamicMessage> methodDescriptor = METHOD_DESCRIPTOR_CACHE.get(serviceName + GrpcConstants.GRPC_JSON_SERVICE + methodName);
         if (methodDescriptor == null) {
             methodDescriptor = MethodDescriptor.<DynamicMessage, DynamicMessage>newBuilder()
                     .setType(getMethodType(methodType))
                     .setFullMethodName(MethodDescriptor.generateFullMethodName(serviceName + GrpcConstants.GRPC_JSON_SERVICE, methodName))
                     .setRequestMarshaller(new DynamicMessageMarshaller(request.getDescriptorForType()))
                     .setResponseMarshaller(new DynamicMessageMarshaller(response.getDescriptorForType()))
                     .build();
-            methodDescriptorCache.put(serviceName + GrpcConstants.GRPC_JSON_SERVICE + methodName, methodDescriptor);
+            METHOD_DESCRIPTOR_CACHE.put(serviceName + GrpcConstants.GRPC_JSON_SERVICE + methodName, methodDescriptor);
 
         }
         return methodDescriptor;

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/test/java/org/apache/shenyu/register/client/http/RegisterUtilsTest.java
Patch:
@@ -42,7 +42,7 @@
  */
 public final class RegisterUtilsTest {
 
-    private Gson gson = new Gson();
+    private final Gson gson = new Gson();
 
     private OkHttpTools okHttpTools;
 

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/TestObjectProvider.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class TestObjectProvider<R> implements ObjectProvider<R> {
     
-    private R r;
+    private final R r;
     
     /**
      * Instantiates a new Test object provider.

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/ShenyuWebHandlerTest.java
Patch:
@@ -43,7 +43,7 @@ public final class ShenyuWebHandlerTest {
 
     private ShenyuWebHandler shenyuWebHandler;
     
-    private List<ShenyuPlugin> listPlugins = new ArrayList<>();
+    private final List<ShenyuPlugin> listPlugins = new ArrayList<>();
 
     @Before
     public void setUp() {

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -130,6 +130,7 @@ private Mono<Void> doNext(final ClientResponse res, final ServerWebExchange exch
         } else {
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.ERROR.getName());
         }
+        exchange.getResponse().setStatusCode(res.statusCode());
         exchange.getAttributes().put(Constants.CLIENT_RESPONSE_ATTR, res);
         return chain.execute(exchange);
     }

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/SentinelPlugin.java
Patch:
@@ -53,13 +53,14 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         String resourceName = CacheKeyUtils.INST.getKey(rule);
         SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class);
         sentinelHandle.checkData(sentinelHandle);
-        return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)).doOnSuccess(v -> {
+        return chain.execute(exchange).doOnSuccess(v -> {
             HttpStatus status = exchange.getResponse().getStatusCode();
             if (status == null || !status.is2xxSuccessful()) {
                 exchange.getResponse().setStatusCode(null);
                 throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);
             }
-        }).onErrorResume(throwable -> fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));
+        }).transform(new SentinelReactorTransformer<>(resourceName)).onErrorResume(throwable ->
+                fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));
     }
 
     @Override

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/GlobalErrorHandler.java
Patch:
@@ -55,7 +55,7 @@ public Mono<Void> handle(@NonNull final ServerWebExchange exchange, @NonNull fin
             httpStatus = ((ResponseStatusException) throwable).getStatus();
         }
         exchange.getResponse().setStatusCode(httpStatus);
-        Object error = ShenyuResultWrap.error(exchange, httpStatus.value(), httpStatus.getReasonPhrase(), throwable.getMessage());
+        Object error = ShenyuResultWrap.error(exchange, httpStatus.value(), httpStatus.getReasonPhrase(), throwable);
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/Connect.java
Patch:
@@ -43,7 +43,7 @@ public void connect(final ChannelHandlerContext ctx, final MqttConnectMessage ms
         String userName = msg.payload().userName();
         byte[] passwordInBytes = msg.payload().passwordInBytes();
 
-        if (!MqttEnv.isValid(userName, passwordInBytes)) {
+        if (!MqttContext.isValid(userName, passwordInBytes)) {
             ctx.writeAndFlush(wrong(MqttConnectReturnCode.CONNECTION_REFUSED_BAD_USER_NAME_OR_PASSWORD));
             return;
         }

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuLoaderService.java
Patch:
@@ -19,11 +19,11 @@
 
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.concurrent.ShenyuThreadFactory;
+import org.apache.shenyu.common.config.ShenyuConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.ExtPlugin;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.base.cache.CommonPluginDataSubscriber;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.common.config.ShenyuConfig;
-import org.apache.shenyu.common.config.ShenyuConfig.ExtPlugin;
 import org.apache.shenyu.web.handler.ShenyuWebHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
+import org.apache.shenyu.plugin.api.utils.RequestQueryCodecUtil;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.slf4j.Logger;
@@ -109,9 +110,8 @@ private String buildWsRealPath(final ServerWebExchange exchange, final Upstream
             protocol = "ws://";
         }
         String path = shenyuContext.getMethod();
-        String query = exchange.getRequest().getURI().getQuery();
-        if (StringUtils.hasText(query)) {
-            path = String.join("?", path, query);
+        if (StringUtils.hasText(exchange.getRequest().getURI().getQuery())) {
+            path = String.join("?", path, RequestQueryCodecUtil.getCodecQuery(exchange));
         }
         return protocol + upstream.getUrl() + path;
     }

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/result/ShenyuResult.java
Patch:
@@ -94,5 +94,7 @@ default T error(ServerWebExchange exchange, int code, String message, Object obj
      * @param object  the object
      * @return the t
      */
-    T error(int code, String message, Object object);
+    default T error(int code, String message, Object object) {
+        return null;
+    }
 }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java
Patch:
@@ -47,8 +47,8 @@ private CryptorUtil() {
     public static Mono<Void> fail(final String mode, final ServerWebExchange exchange) {
         Object error = Optional.ofNullable(mode)
                 .filter(CryptorStrategyFactory.DECRYPT::equals)
-                .map(mod -> ShenyuResultWrap.error(exchange, ShenyuResultEnum.DECRYPTION_ERROR.getCode(), ShenyuResultEnum.DECRYPTION_ERROR.getMsg(), null))
-                .orElse(ShenyuResultWrap.error(exchange, ShenyuResultEnum.ENCRYPTION_ERROR.getCode(), ShenyuResultEnum.ENCRYPTION_ERROR.getMsg(), null));
+                .map(mod -> ShenyuResultWrap.error(exchange, ShenyuResultEnum.DECRYPTION_ERROR, null))
+                .orElse(ShenyuResultWrap.error(exchange, ShenyuResultEnum.ENCRYPTION_ERROR, null));
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java
Patch:
@@ -133,7 +133,7 @@ public void testAlibabaDubboPluginMetaDataNull() {
 
         try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {
             shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap
-                    .error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))
+                    .error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM, null))
                     .thenReturn(new Object());
 
             Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/AbstractDubboPlugin.java
Patch:
@@ -92,12 +92,12 @@ public Mono<Void> doExecute(final ServerWebExchange exchange,
         if (!checkMetaData(metaData)) {
             LOG.error(" path is : {}, meta data have error : {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (Objects.nonNull(metaData) && StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         this.rpcContext(exchange);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -70,20 +70,20 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         if (!checkMetaData(metaData)) {
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         assert metaData != null;
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_HAVE_BODY_PARAM, null);
             return WebFluxResultUtils.result(exchange, error);
         }
 
         final ShenyuGrpcClient client = GrpcClientCache.getGrpcClient(selector.getName());
         if (Objects.isNull(client)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_CLIENT_NULL.getCode(), ShenyuResultEnum.GRPC_CLIENT_NULL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_CLIENT_NULL, null);
             return WebFluxResultUtils.result(exchange, error);
         }
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -88,7 +88,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         }
         URI uri = exchange.getAttribute(Constants.HTTP_URI);
         if (Objects.isNull(uri)) {
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         LOG.info("you request, The resulting urlPath is: {}", uri.toASCIIString());

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -72,7 +72,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         assert shenyuContext != null;
         URI uri = exchange.getAttribute(Constants.HTTP_URI);
         if (Objects.isNull(uri)) {
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         long timeout = (long) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(3000L);

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/JwtPlugin.java
Patch:
@@ -60,7 +60,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
 
         // check secreteKey
         if (StringUtils.isEmpty(jwtConfig.getSecretKey())) {
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED.getCode(), ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED, null);
             return WebFluxResultUtils.result(exchange, error);
         }
 
@@ -74,7 +74,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             }
             return chain.execute(converter(exchange, jwtBody, ruleHandle.getConverter()));
         }
-        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.ERROR_TOKEN.getCode(), ShenyuResultEnum.ERROR_TOKEN.getMsg(), null);
+        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.ERROR_TOKEN, null);
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/MotanPlugin.java
Patch:
@@ -69,12 +69,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error("path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         final Mono<Object> result = motanProxyService.genericInvoker(param, metaData, exchange);

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java
Patch:
@@ -73,7 +73,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
                 .flatMap(response -> {
                     if (!response.isAllowed()) {
                         exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS.getCode(), ShenyuResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
+                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS, null);
                         return WebFluxResultUtils.result(exchange, error);
                     }
                     return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriter.java
Patch:
@@ -37,8 +37,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
         return chain.execute(exchange).then(Mono.defer(() -> {
             Object result = exchange.getAttribute(Constants.RPC_RESULT);
             if (Objects.isNull(result)) {
-                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(),
-                        ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR, null);
                 return WebFluxResultUtils.result(exchange, error);
             }
             return WebFluxResultUtils.result(exchange, result);

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -53,11 +53,11 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
             if (Objects.isNull(clientResponse)
                     || response.getStatusCode() == HttpStatus.BAD_GATEWAY
                     || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) {
-                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(), ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR, null);
                 return WebFluxResultUtils.result(exchange, error);
             }
             if (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) {
-                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_TIMEOUT.getCode(), ShenyuResultEnum.SERVICE_TIMEOUT.getMsg(), null);
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_TIMEOUT, null);
                 return WebFluxResultUtils.result(exchange, error);
             }
             response.getCookies().putAll(clientResponse.cookies());

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/fallback/SentinelFallbackHandler.java
Patch:
@@ -38,13 +38,13 @@ public Mono<Void> generateError(final ServerWebExchange exchange, final Throwabl
         Object error;
         if (throwable instanceof DegradeException) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(), ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR, null);
         } else if (throwable instanceof FlowException) {
             exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS.getCode(), ShenyuResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS, null);
         } else if (throwable instanceof BlockException) {
             exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SENTINEL_BLOCK_ERROR.getCode(), ShenyuResultEnum.SENTINEL_BLOCK_ERROR.getMsg(), null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SENTINEL_BLOCK_ERROR, null);
         } else {
             return Mono.error(throwable);
         }

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/SofaPlugin.java
Patch:
@@ -69,12 +69,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SOFA_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.SOFA_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SOFA_HAVE_BODY_PARAM, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         Map<String, Map<String, String>> rpcContext = exchange.getAttribute(Constants.GENERAL_CONTEXT);

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -66,12 +66,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.TARS_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_HAVE_BODY_PARAM, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         TarsInvokePrxList tarsInvokePrxList = ApplicationConfigCache.getInstance().get(metaData.getPath());
@@ -85,7 +85,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         } catch (Exception e) {
             LOG.error("Invoke tars error", e);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_INVOKE.getCode(), ShenyuResultEnum.TARS_INVOKE.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_INVOKE, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return Mono.fromFuture(future.thenApply(ret -> {

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -93,7 +93,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         Upstream upstream = LoadBalancerFactory.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
         if (Objects.isNull(upstream)) {
             LOG.error("websocket has no upstream");
-            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         URI wsRequestUrl = UriComponentsBuilder.fromUri(URI.create(buildWsRealPath(upstream, shenyuContext))).build().toUri();

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/FileSizeFilter.java
Patch:
@@ -73,7 +73,7 @@ public Mono<Void> filter(@NonNull final ServerWebExchange exchange, @NonNull fin
                         if (size.capacity() > BYTES_PER_MB * fileMaxSize) {
                             ServerHttpResponse response = exchange.getResponse();
                             response.setStatusCode(HttpStatus.BAD_REQUEST);
-                            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.PAYLOAD_TOO_LARGE.getCode(), ShenyuResultEnum.PAYLOAD_TOO_LARGE.getMsg(), null);
+                            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.PAYLOAD_TOO_LARGE, null);
                             return WebFluxResultUtils.result(exchange, error);
                         }
                         BodyInserter<Mono<DataBuffer>, ReactiveHttpOutputMessage> bodyInsert = BodyInserters.fromPublisher(Mono.just(size), DataBuffer.class);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/shiro/bean/StatelessAuthFilter.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
+import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.exception.CommonErrorCode;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shiro.subject.Subject;
@@ -41,8 +42,6 @@ public class StatelessAuthFilter extends AccessControlFilter {
 
     private static final Logger LOG = LoggerFactory.getLogger(StatelessAuthFilter.class);
 
-    private static final String HEAD_TOKEN = "X-Access-Token";
-
     @Override
     protected boolean isAccessAllowed(final ServletRequest servletRequest,
                                       final ServletResponse servletResponse,
@@ -58,7 +57,7 @@ protected boolean onAccessDenied(final ServletRequest servletRequest,
             return true;
         }
 
-        String tokenValue = httpServletRequest.getHeader(HEAD_TOKEN);
+        String tokenValue = httpServletRequest.getHeader(Constants.X_ACCESS_TOKEN);
         if (StringUtils.isBlank(tokenValue)) {
             LOG.error("token is null.");
             unionFailResponse(servletResponse);

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -128,13 +128,13 @@ private Boolean filterRule(final RuleData ruleData, final ServerWebExchange exch
     }
 
     private void selectorLog(final SelectorData selectorData, final String pluginName) {
-        if (Boolean.TRUE.equals(selectorData.getLogged())) {
+        if (selectorData.getLogged()) {
             LOG.info("{} selector success match , selector name :{}", pluginName, selectorData.getName());
         }
     }
 
     private void ruleLog(final RuleData ruleData, final String pluginName) {
-        if (Boolean.TRUE.equals(ruleData.getLoged())) {
+        if (ruleData.getLoged()) {
             LOG.info("{} rule success match , rule name :{}", pluginName, ruleData.getName());
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/page/PageParameter.java
Patch:
@@ -55,8 +55,8 @@ public PageParameter() {
      * @param pageSize    page size.
      */
     public PageParameter(final Integer currentPage, final Integer pageSize) {
-        this.currentPage = currentPage == null || currentPage <= 0 ? 1 : currentPage;
-        this.pageSize = pageSize == null || pageSize <= 0 ? DEFAULT_PAGE_SIZE : pageSize;
+        this.currentPage = Objects.isNull(currentPage) || currentPage <= 0 ? 1 : currentPage;
+        this.pageSize = Objects.isNull(currentPage) || pageSize <= 0 ? DEFAULT_PAGE_SIZE : pageSize;
         this.offset = (this.currentPage - 1) * this.pageSize;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/page/PageResultUtils.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import java.util.function.Supplier;
 
 /**
@@ -37,7 +38,7 @@ public class PageResultUtils {
      */
     public static <T> CommonPager<T> result(final PageParameter pageParameter, final Supplier<Integer> countSupplier, final Supplier<List<T>> listSupplier) {
         Integer count = countSupplier.get();
-        if (count != null && count > 0) {
+        if (Objects.nonNull(count) && count > 0) {
             return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), count), listSupplier.get());
         }
         return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), 0), Collections.emptyList());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/AesUtils.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.utils;
 
-import java.util.Optional;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * The type Aes utils.
@@ -33,7 +33,7 @@ public class AesUtils {
      * @return the string
      */
     public static String aesEncryption(final String src, final String aesKey, final String iv) {
-        if (Optional.ofNullable(src).isPresent() && !src.isEmpty()) {
+        if (StringUtils.isNotEmpty(src)) {
             return CipherUtils.encryptHex(src, aesKey, iv);
         }
         return null;
@@ -48,7 +48,7 @@ public static String aesEncryption(final String src, final String aesKey, final
      * @return the string
      */
     public static String aesDecryption(final String src, final String aesKey, final String iv) {
-        if (Optional.ofNullable(src).isPresent() && !src.isEmpty()) {
+        if (StringUtils.isNotEmpty(src)) {
             return CipherUtils.decryptStr(src, aesKey, iv);
         }
         return null;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -436,7 +436,7 @@ private List<SelectorConditionDTO> buildDefaultSelectorConditionDTO(final String
         selectorConditionDTO.setParamType(ParamTypeEnum.URI.getName());
         selectorConditionDTO.setParamName("/");
         selectorConditionDTO.setOperator(OperatorEnum.MATCH.getAlias());
-        selectorConditionDTO.setParamValue(contextPath + "/**");
+        selectorConditionDTO.setParamValue(contextPath + AdminConstants.URI_SUFFIX);
         return Collections.singletonList(selectorConditionDTO);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractContextPathRegisterService.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.service.register;
 
+import org.apache.shenyu.admin.utils.PathUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
@@ -30,7 +31,7 @@ public abstract class AbstractContextPathRegisterService extends AbstractShenyuC
     public void registerContextPath(final MetaDataRegisterDTO dto) {
         String contextPathSelectorId = getSelectorService().registerDefault(dto, PluginEnum.CONTEXT_PATH.getName(), "");
         ContextMappingRuleHandle handle = new ContextMappingRuleHandle();
-        handle.setContextPath(dto.getContextPath());
+        handle.setContextPath(PathUtils.decoratorContextPath(dto.getContextPath()));
         getRuleService().registerDefault(buildContextPathDefaultRuleDTO(contextPathSelectorId, dto, handle.toJson()));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.shenyu.admin.service.SelectorService;
 import org.apache.shenyu.admin.service.impl.UpstreamCheckService;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
+import org.apache.shenyu.admin.utils.PathUtils;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.dto.convert.selector.CommonUpstream;
@@ -210,7 +211,7 @@ protected void doSubmit(final String selectorId, final List<? extends CommonUpst
      */
     protected RuleDTO buildContextPathDefaultRuleDTO(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final String ruleHandler) {
         String contextPath = metaDataDTO.getContextPath();
-        return buildRuleDTO(selectorId, ruleHandler, contextPath, contextPath + "/**");
+        return buildRuleDTO(selectorId, ruleHandler, contextPath, PathUtils.decoratorPath(contextPath));
     }
     
     private RuleDTO buildRpcDefaultRuleDTO(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final String ruleHandler) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.admin.model.entity.SelectorDO;
 import org.apache.shenyu.admin.service.MetaDataService;
 import org.apache.shenyu.admin.utils.CommonUpstreamUtils;
+import org.apache.shenyu.admin.utils.PathUtils;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
@@ -59,7 +60,7 @@ protected String ruleHandler() {
     @Override
     protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {
         MetaDataService metaDataService = getMetaDataService();
-        metaDataDTO.setPath(metaDataDTO.getContextPath() + "/**");
+        metaDataDTO.setPath(PathUtils.decoratorPath(metaDataDTO.getContextPath()));
         MetaDataDO metaDataDO = metaDataService.findByPath(metaDataDTO.getPath());
         metaDataService.saveOrUpdateMetaData(metaDataDO, metaDataDTO);
     }

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -73,7 +73,6 @@ public ContextRegisterListener(final PropertiesConfig config, final Environment
                 LOG.error(errorMsg);
                 throw new ShenyuClientIllegalArgumentException(errorMsg);
             }
-            this.contextPath = contextPath + "/**";
         }
         port = Integer.parseInt(props.getProperty(ShenyuClientConstants.PORT));
         this.appName = env.getProperty("spring.application.name");

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.client.springmvc.init;
 
-import java.util.Properties;
-import java.util.concurrent.atomic.AtomicBoolean;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.client.core.constant.ShenyuClientConstants;
 import org.apache.shenyu.client.core.disruptor.ShenyuClientRegisterEventPublisher;
@@ -34,6 +32,9 @@
 import org.springframework.context.event.ContextRefreshedEvent;
 import org.springframework.lang.NonNull;
 
+import java.util.Properties;
+import java.util.concurrent.atomic.AtomicBoolean;
+
 /**
  * The type Context register listener.
  */
@@ -72,7 +73,6 @@ public ContextRegisterListener(final PropertiesConfig clientConfig) {
                 LOG.error(errorMsg);
                 throw new ShenyuClientIllegalArgumentException(errorMsg);
             }
-            this.contextPath = contextPath + "/**";
         }
         this.port = Integer.parseInt(props.getProperty(ShenyuClientConstants.PORT));
         this.appName = props.getProperty(ShenyuClientConstants.APP_NAME);

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/ShenyuClientPathController.java
Patch:
@@ -49,6 +49,7 @@ public String hello() {
      * @return result
      */
     @RequestMapping("shenyu/client/hi")
+    @ShenyuSpringMvcClient(path = "shenyu/client/hi", desc = "shenyu client annotation register")
     public String hello(final String name) {
         return "hi! " + name + "! " + HELLO_SUFFIX;
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/exception/ExceptionHandlersTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.MockedStatic;
 import org.mockito.junit.MockitoJUnitRunner;
-import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.dao.DuplicateKeyException;
@@ -57,7 +56,6 @@
  * Test case for {@link ExceptionHandlers}.
  */
 @RunWith(MockitoJUnitRunner.class)
-@PrepareForTest(ExceptionHandlers.class)
 public final class ExceptionHandlersTest {
 
     private static Logger loggerSpy;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/zookeeper/HttpServiceDiscoveryTest.java
Patch:
@@ -35,10 +35,10 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.when;
+import static org.mockito.Mockito.when;
 
 /**
- * The TestCase for HttpServiceDiscovery.
+ * The TestCase for {@link HttpServiceDiscovery}.
  */
 public final class HttpServiceDiscoveryTest {
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/MetaDataServiceTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.mockito.Mock;
 import org.mockito.MockedStatic;
 import org.mockito.junit.MockitoJUnitRunner;
-import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.ApplicationEventPublisher;
@@ -64,7 +63,6 @@
  * Test cases for MetaDataService.
  */
 @RunWith(MockitoJUnitRunner.class)
-@PrepareForTest(MetaDataServiceImpl.class)
 public final class MetaDataServiceTest {
 
     private static Logger loggerSpy;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImplTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
-import org.powermock.core.classloader.annotations.PrepareForTest;
     
 import java.lang.reflect.Method;
 import java.util.ArrayList;
@@ -52,7 +51,6 @@
 /**
  * Test cases for {@link ShenyuClientRegisterDubboServiceImpl}.
  */
-@PrepareForTest(ShenyuClientRegisterDubboServiceImpl.class)
 @RunWith(MockitoJUnitRunner.Silent.class)
 public final class ShenyuClientRegisterDubboServiceImplTest {
     

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-common/src/main/java/org/apache/shenyu/agent/plugin/tracing/common/definition/TracingAgentPluginDefinition.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.agent.plugin.tracing.common;
+package org.apache.shenyu.agent.plugin.tracing.common.definition;
 
 import net.bytebuddy.matcher.ElementMatchers;
 import org.apache.commons.lang3.StringUtils;

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/bytebuddy/interceptor/InstanceMethodInterceptor.java
Patch:
@@ -89,7 +89,7 @@ public Object intercept(@This final Object target, @Origin final Method method,
                 }
             } finally {
                 try {
-                    handler.after(instance, method, args, methodResult);
+                    result = handler.after(instance, method, args, methodResult, result);
                     // CHECKSTYLE:OFF
                 } catch (final Throwable ex) {
                     // CHECKSTYLE:ON

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-common/src/main/java/org/apache/shenyu/agent/plugin/tracing/common/TracingAgentPluginDefinition.java
Patch:
@@ -94,6 +94,7 @@ protected Collection<JoinPointBuilder> joinPointBuilder() {
                         builder.onConstructor(ElementMatchers.namedOneOf(constructorPoints)).handlers(handlers).build();
                     }
                     return builder;
-                }).collect(Collectors.toList());
+                })
+                .collect(Collectors.toList());
     }
 }

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/plugin/tracing/jaeger/span/JaegerErrorSpan.java
Patch:
@@ -36,7 +36,7 @@ public final class JaegerErrorSpan {
      * @param cause failure cause of span
      */
     public static void setError(final Span span, final Throwable cause) {
-        span.setTag(Tags.ERROR.getKey(), true).log(System.currentTimeMillis(), getReason(cause));
+        span.setTag(Tags.ERROR.getKey(), true).log(System.currentTimeMillis() * 1000, getReason(cause));
     }
     
     private static Map<String, ?> getReason(final Throwable cause) {

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-zipkin/src/main/java/org/apache/shenyu/agent/plugin/tracing/zipkin/handler/ZipkinGlobalPluginHandler.java
Patch:
@@ -34,8 +34,8 @@ public void before(final TargetObject target, final Method method, final Object[
     }
 
     @Override
-    public void after(final TargetObject target, final Method method, final Object[] args, final MethodResult result) {
-
+    public Object after(final TargetObject target, final Method method, final Object[] args, final MethodResult methodResult, final Object result) {
+        return result;
     }
 
     @Override

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-zipkin/src/main/java/org/apache/shenyu/agent/plugin/tracing/zipkin/handler/ZipkinResponsePluginHandler.java
Patch:
@@ -34,8 +34,8 @@ public void before(final TargetObject target, final Method method, final Object[
     }
 
     @Override
-    public void after(final TargetObject target, final Method method, final Object[] args, final MethodResult result) {
-
+    public Object after(final TargetObject target, final Method method, final Object[] args, final MethodResult methodResult, final Object result) {
+        return result;
     }
 
     @Override

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-xml/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/xml/TestApacheDubboXmlApplication.java
Patch:
@@ -24,7 +24,7 @@
  * Demo show users how to use shenyu-client-apache-dubbo jar in their apache dubbo project.
  */
 @SpringBootApplication
-@ImportResource({"classpath:spring-dubbo.xml","classpath:shenyu.xml"})
+@ImportResource({"classpath:spring-dubbo.xml", "classpath:shenyu.xml"})
 public class TestApacheDubboXmlApplication {
 
     public static void main(String[] args) {

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/ShenyuClientPathController.java
Patch:
@@ -15,7 +15,6 @@
  * limitations under the License.
  */
 
-
 package org.apache.shenyu.examples.http.controller;
 
 import org.apache.shenyu.client.springmvc.annotation.ShenyuSpringMvcClient;
@@ -24,15 +23,15 @@
 import org.springframework.web.bind.annotation.RestController;
 
 /**
- * ShenyuClientPathController
+ * ShenyuClientPathController.
  */
 @RestController
 public class ShenyuClientPathController {
     
     private static final String HELLO_SUFFIX = "I'm Shenyu-Gateway System. Welcome!";
     
     /**
-     * hello
+     * hello.
      *
      * @return result
      */

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/SpringMvcMappingPathController.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 /**
- * SpringMvcMappingPathController
+ * SpringMvcMappingPathController.
  */
 @RestController
 @ShenyuSpringMvcClient(desc = "spring annotation register")

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/impl/MotanDemoServiceImpl.java
Patch:
@@ -26,9 +26,10 @@
  */
 @MotanService(export = "demoMotan:8002")
 public class MotanDemoServiceImpl implements MotanDemoService {
+
     @Override
     @ShenyuMotanClient(path = "/hello")
-    public String hello(String name) {
+    public String hello(final String name) {
         return "hello " + name;
     }
 }

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/controller/HttpTestController.java
Patch:
@@ -78,7 +78,7 @@ public UserDTO findByUserId(@RequestParam("userId") final String userId) {
      */
     @GetMapping("/findByPage")
     public UserDTO findByPage(final String keyword, final Integer page, final Integer pageSize) {
-        return buildUser(keyword, "hello world keyword is" + keyword + " page is" + page + " pageSize is" + pageSize);
+        return buildUser(keyword, "hello world keyword is " + keyword + " page is " + page + " pageSize is " + pageSize);
     }
 
     /**

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/main/java/org/apache/shenyu/sync/data/nacos/handler/NacosCacheHandler.java
Patch:
@@ -84,7 +84,7 @@ public ConfigService getConfigService() {
 
     protected void updatePluginMap(final String configInfo) {
         try {
-            // Fix bug #656(https://github.com/dromara/shenyu/issues/656)
+            // Fix bug #656(https://github.com/apache/incubator-shenyu/issues/656)
             List<PluginData> pluginDataList = new ArrayList<>(GsonUtils.getInstance().toObjectMap(configInfo, PluginData.class).values());
             pluginDataList.forEach(pluginData -> Optional.ofNullable(pluginDataSubscriber).ifPresent(subscriber -> {
                 subscriber.unSubscribe(pluginData);

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperSyncDataServiceTest.java
Patch:
@@ -233,7 +233,7 @@ public void onRuleSubscribe(final RuleData ruleData) {
         verify(zkClient).subscribeDataChanges(eq(MOCK_RULE_PATH), captor.capture());
         captor.getValue().handleDataChange(MOCK_RULE_PATH, GsonUtils.getInstance().toJson(changedRuleData));
         assertThat(subscribeList.size(), is(2));
-        Assert.assertTrue(subscribeList.get(1).getEnabled());
+        assertTrue(subscribeList.get(1).getEnabled());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/WebFluxResultUtils.java
Patch:
@@ -81,7 +81,7 @@ public static Mono<Void> result(final ServerWebExchange exchange, final Object r
      */
     public static Mono<Void> noSelectorResult(final String pluginName, final ServerWebExchange exchange) {
         LOG.error("can not match selector data: {}", pluginName);
-        Object error = ShenyuResultWrap.error(ShenyuResultEnum.SELECTOR_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.SELECTOR_NOT_FOUND.getMsg(), null);
+        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SELECTOR_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.SELECTOR_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
 
@@ -94,7 +94,7 @@ public static Mono<Void> noSelectorResult(final String pluginName, final ServerW
      */
     public static Mono<Void> noRuleResult(final String pluginName, final ServerWebExchange exchange) {
         LOG.error("can not match rule data: {}", pluginName);
-        Object error = ShenyuResultWrap.error(ShenyuResultEnum.RULE_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.RULE_NOT_FOUND.getMsg(), null);
+        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.RULE_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.RULE_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
 }

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/ShenyuResultWrapTest.java
Patch:
@@ -63,7 +63,7 @@ public void successTest() {
     @Test
     public void errorTest() {
         Integer result = 1;
-        DefaultShenyuEntity shenyuResult = (DefaultShenyuEntity) ShenyuResultWrap.error(result, "error", new Object());
+        DefaultShenyuEntity shenyuResult = (DefaultShenyuEntity) ShenyuResultWrap.error(null, result, "error", new Object());
         Assert.assertEquals(result, shenyuResult.getCode());
         Assert.assertEquals("error", shenyuResult.getMessage());
     }

File: shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/ContextPathPlugin.java
Patch:
@@ -58,7 +58,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         String contextPath = contextMappingRuleHandle.getContextPath();
         if (StringUtils.isNoneBlank(contextPath) && !shenyuContext.getPath().startsWith(contextPath)) {
             LOG.error("the context path '{}' is invalid.", contextPath);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CONTEXT_PATH_ERROR.getCode(),
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CONTEXT_PATH_ERROR.getCode(),
                     String.format("%s [invalid context path:'%s']", ShenyuResultEnum.CONTEXT_PATH_ERROR.getMsg(), contextPath), null);
             return WebFluxResultUtils.result(exchange, error);
         }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/request/CryptorRequestPlugin.java
Patch:
@@ -71,7 +71,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         }
         Pair<Boolean, String> pair = JsonUtil.checkParam(ruleHandle);
         if (Boolean.TRUE.equals(pair.getLeft())) {
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION.getCode(),
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION.getCode(),
                     ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION.getMsg()
                     + "[" + pair.getRight() + "]", null);
             return WebFluxResultUtils.result(exchange, error);
@@ -105,7 +105,7 @@ public String named() {
     private Mono strategyMatch(final CryptorRuleHandler ruleHandle, final String originalBody, final ServerWebExchange exchange) {
         String parseBody = JsonUtil.parser(originalBody, ruleHandle.getFieldNames());
         if (Objects.isNull(parseBody)) {
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION.getCode(),
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION.getCode(),
                     ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION.getMsg() + "[fieldNames]", null);
             return WebFluxResultUtils.result(exchange, error);
         }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePlugin.java
Patch:
@@ -54,7 +54,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         }
         Pair<Boolean, String> pair = JsonUtil.checkParam(ruleHandle);
         if (Boolean.TRUE.equals(pair.getLeft())) {
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getCode(),
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getCode(),
                     ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getMsg() + "[" + pair.getRight() + "]", null);
             return WebFluxResultUtils.result(exchange, error);
         }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/CryptorUtil.java
Patch:
@@ -47,8 +47,8 @@ private CryptorUtil() {
     public static Mono<Void> fail(final String mode, final ServerWebExchange exchange) {
         Object error = Optional.ofNullable(mode)
                 .filter(CryptorStrategyFactory.DECRYPT::equals)
-                .map(mod -> ShenyuResultWrap.error(ShenyuResultEnum.DECRYPTION_ERROR.getCode(), ShenyuResultEnum.DECRYPTION_ERROR.getMsg(), null))
-                .orElse(ShenyuResultWrap.error(ShenyuResultEnum.ENCRYPTION_ERROR.getCode(), ShenyuResultEnum.ENCRYPTION_ERROR.getMsg(), null));
+                .map(mod -> ShenyuResultWrap.error(exchange, ShenyuResultEnum.DECRYPTION_ERROR.getCode(), ShenyuResultEnum.DECRYPTION_ERROR.getMsg(), null))
+                .orElse(ShenyuResultWrap.error(exchange, ShenyuResultEnum.ENCRYPTION_ERROR.getCode(), ShenyuResultEnum.ENCRYPTION_ERROR.getMsg(), null));
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java
Patch:
@@ -133,7 +133,7 @@ public void testAlibabaDubboPluginMetaDataNull() {
 
         try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {
             shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap
-                    .error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))
+                    .error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))
                     .thenReturn(new Object());
 
             Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/AbstractDubboPlugin.java
Patch:
@@ -92,12 +92,12 @@ public Mono<Void> doExecute(final ServerWebExchange exchange,
         if (!checkMetaData(metaData)) {
             LOG.error(" path is : {}, meta data have error : {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (Objects.nonNull(metaData) && StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         this.rpcContext(exchange);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -70,20 +70,20 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         if (!checkMetaData(metaData)) {
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         assert metaData != null;
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
 
         final ShenyuGrpcClient client = GrpcClientCache.getGrpcClient(selector.getName());
         if (Objects.isNull(client)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_CLIENT_NULL.getCode(), ShenyuResultEnum.GRPC_CLIENT_NULL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.GRPC_CLIENT_NULL.getCode(), ShenyuResultEnum.GRPC_CLIENT_NULL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -88,7 +88,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         }
         URI uri = exchange.getAttribute(Constants.HTTP_URI);
         if (Objects.isNull(uri)) {
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         LOG.info("you request, The resulting urlPath is: {}", uri.toASCIIString());

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -72,7 +72,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         assert shenyuContext != null;
         URI uri = exchange.getAttribute(Constants.HTTP_URI);
         if (Objects.isNull(uri)) {
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         long timeout = (long) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(3000L);

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/JwtPlugin.java
Patch:
@@ -60,7 +60,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
 
         // check secreteKey
         if (StringUtils.isEmpty(jwtConfig.getSecretKey())) {
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED.getCode(), ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED.getCode(), ShenyuResultEnum.SECRET_KEY_MUST_BE_CONFIGURED.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
 
@@ -74,7 +74,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             }
             return chain.execute(converter(exchange, jwtBody, ruleHandle.getConverter()));
         }
-        Object error = ShenyuResultWrap.error(ShenyuResultEnum.ERROR_TOKEN.getCode(), ShenyuResultEnum.ERROR_TOKEN.getMsg(), null);
+        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.ERROR_TOKEN.getCode(), ShenyuResultEnum.ERROR_TOKEN.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/MotanPlugin.java
Patch:
@@ -69,12 +69,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error("path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.MOTAN_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         final Mono<Object> result = motanProxyService.genericInvoker(param, metaData, exchange);

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java
Patch:
@@ -73,7 +73,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
                 .flatMap(response -> {
                     if (!response.isAllowed()) {
                         exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-                        Object error = ShenyuResultWrap.error(ShenyuResultEnum.TOO_MANY_REQUESTS.getCode(), ShenyuResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
+                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS.getCode(), ShenyuResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
                         return WebFluxResultUtils.result(exchange, error);
                     }
                     return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriter.java
Patch:
@@ -37,7 +37,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
         return chain.execute(exchange).then(Mono.defer(() -> {
             Object result = exchange.getAttribute(Constants.RPC_RESULT);
             if (Objects.isNull(result)) {
-                Object error = ShenyuResultWrap.error(ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(),
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(),
                         ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
                 return WebFluxResultUtils.result(exchange, error);
             }

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -53,11 +53,11 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
             if (Objects.isNull(clientResponse)
                     || response.getStatusCode() == HttpStatus.BAD_GATEWAY
                     || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) {
-                Object error = ShenyuResultWrap.error(ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(), ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(), ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
                 return WebFluxResultUtils.result(exchange, error);
             }
             if (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) {
-                Object error = ShenyuResultWrap.error(ShenyuResultEnum.SERVICE_TIMEOUT.getCode(), ShenyuResultEnum.SERVICE_TIMEOUT.getMsg(), null);
+                Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_TIMEOUT.getCode(), ShenyuResultEnum.SERVICE_TIMEOUT.getMsg(), null);
                 return WebFluxResultUtils.result(exchange, error);
             }
             response.getCookies().putAll(clientResponse.cookies());

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/fallback/SentinelFallbackHandler.java
Patch:
@@ -38,13 +38,13 @@ public Mono<Void> generateError(final ServerWebExchange exchange, final Throwabl
         Object error;
         if (throwable instanceof DegradeException) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            error = ShenyuResultWrap.error(ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(), ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SERVICE_RESULT_ERROR.getCode(), ShenyuResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
         } else if (throwable instanceof FlowException) {
             exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-            error = ShenyuResultWrap.error(ShenyuResultEnum.TOO_MANY_REQUESTS.getCode(), ShenyuResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS.getCode(), ShenyuResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
         } else if (throwable instanceof BlockException) {
             exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-            error = ShenyuResultWrap.error(ShenyuResultEnum.SENTINEL_BLOCK_ERROR.getCode(), ShenyuResultEnum.SENTINEL_BLOCK_ERROR.getMsg(), null);
+            error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SENTINEL_BLOCK_ERROR.getCode(), ShenyuResultEnum.SENTINEL_BLOCK_ERROR.getMsg(), null);
         } else {
             return Mono.error(throwable);
         }

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/SignPlugin.java
Patch:
@@ -60,7 +60,7 @@ public int getOrder() {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
         Pair<Boolean, String> result = signService.signVerify(exchange);
         if (Boolean.FALSE.equals(result.getLeft())) {
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.SIGN_IS_NOT_PASS.getCode(), result.getRight(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SIGN_IS_NOT_PASS.getCode(), result.getRight(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/SofaPlugin.java
Patch:
@@ -69,12 +69,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.SOFA_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.SOFA_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.SOFA_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.SOFA_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         Map<String, Map<String, String>> rpcContext = exchange.getAttribute(Constants.GENERAL_CONTEXT);

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -66,12 +66,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             assert metaData != null;
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.TARS_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.TARS_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.TARS_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         TarsInvokePrxList tarsInvokePrxList = ApplicationConfigCache.getInstance().get(metaData.getPath());
@@ -85,7 +85,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         } catch (Exception e) {
             LOG.error("Invoke tars error", e);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.TARS_INVOKE.getCode(), ShenyuResultEnum.TARS_INVOKE.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TARS_INVOKE.getCode(), ShenyuResultEnum.TARS_INVOKE.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return Mono.fromFuture(future.thenApply(ret -> {

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/WafPlugin.java
Patch:
@@ -56,7 +56,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
                 return chain.execute(exchange);
             }
             exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
-            Object error = ShenyuResultWrap.error(HttpStatus.FORBIDDEN.value(), Constants.REJECT_MSG, null);
+            Object error = ShenyuResultWrap.error(exchange, HttpStatus.FORBIDDEN.value(), Constants.REJECT_MSG, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         String handle = rule.getHandle();
@@ -67,7 +67,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         }
         if (WafEnum.REJECT.getName().equals(wafHandle.getPermission())) {
             exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
-            Object error = ShenyuResultWrap.error(Integer.parseInt(wafHandle.getStatusCode()), Constants.REJECT_MSG, null);
+            Object error = ShenyuResultWrap.error(exchange, Integer.parseInt(wafHandle.getStatusCode()), Constants.REJECT_MSG, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -93,7 +93,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         Upstream upstream = LoadBalancerFactory.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
         if (Objects.isNull(upstream)) {
             LOG.error("websocket has no upstream");
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         URI wsRequestUrl = UriComponentsBuilder.fromUri(URI.create(buildWsRealPath(upstream, shenyuContext))).build().toUri();

File: shenyu-web/src/main/java/org/apache/shenyu/web/fallback/DefaultFallbackController.java
Patch:
@@ -45,7 +45,7 @@ public class DefaultFallbackController {
     @GetMapping("/hystrix")
     public Object hystrixPluginFallback() {
         LOG.error("the default fallback for hystrix");
-        return ShenyuResultWrap.error(ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getMsg(), null);
+        return ShenyuResultWrap.error(null, ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getMsg(), null);
     }
 
     /**
@@ -56,6 +56,6 @@ public Object hystrixPluginFallback() {
     @GetMapping("/resilience4j")
     public Object resilience4jFallBack() {
         LOG.error("the default fallback for resilience4j");
-        return ShenyuResultWrap.error(ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getMsg(), null);
+        return ShenyuResultWrap.error(null, ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getMsg(), null);
     }
 }

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/FileSizeFilter.java
Patch:
@@ -73,7 +73,7 @@ public Mono<Void> filter(@NonNull final ServerWebExchange exchange, @NonNull fin
                         if (size.capacity() > BYTES_PER_MB * fileMaxSize) {
                             ServerHttpResponse response = exchange.getResponse();
                             response.setStatusCode(HttpStatus.BAD_REQUEST);
-                            Object error = ShenyuResultWrap.error(ShenyuResultEnum.PAYLOAD_TOO_LARGE.getCode(), ShenyuResultEnum.PAYLOAD_TOO_LARGE.getMsg(), null);
+                            Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.PAYLOAD_TOO_LARGE.getCode(), ShenyuResultEnum.PAYLOAD_TOO_LARGE.getMsg(), null);
                             return WebFluxResultUtils.result(exchange, error);
                         }
                         BodyInserter<Mono<DataBuffer>, ReactiveHttpOutputMessage> bodyInsert = BodyInserters.fromPublisher(Mono.just(size), DataBuffer.class);

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/GlobalErrorHandler.java
Patch:
@@ -55,7 +55,7 @@ public Mono<Void> handle(@NonNull final ServerWebExchange exchange, @NonNull fin
             httpStatus = ((ResponseStatusException) throwable).getStatus();
         }
         exchange.getResponse().setStatusCode(httpStatus);
-        Object error = ShenyuResultWrap.error(httpStatus.value(), httpStatus.getReasonPhrase(), throwable.getMessage());
+        Object error = ShenyuResultWrap.error(exchange, httpStatus.value(), httpStatus.getReasonPhrase(), throwable.getMessage());
         return WebFluxResultUtils.result(exchange, error);
     }
 

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/annotation/ShenyuSpringCloudClient.java
Patch:
@@ -34,7 +34,7 @@
      *
      * @return the string
      */
-    String path();
+    String path() default "";
     
     /**
      * Rule name string.

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/Connect.java
Patch:
@@ -35,7 +35,6 @@ public class Connect extends MessageType {
     public void connect(final ChannelHandlerContext ctx, final MqttConnectMessage msg) {
 
         String clientId = msg.payload().clientIdentifier();
-
         if (StringUtils.isEmpty(clientId)) {
             ctx.writeAndFlush(wrong(MqttConnectReturnCode.CONNECTION_REFUSED_IDENTIFIER_REJECTED));
             return;

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/utils/EncryptUtil.java
Patch:
@@ -37,7 +37,7 @@ public static String choose(final String encryptMode, final String password) {
             case "MD5":
                 return md5(password);
             default:
-                return null;
+                return password;
         }
     }
 

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/ContainsPredicateJudge.java
Patch:
@@ -28,6 +28,6 @@ public class ContainsPredicateJudge implements PredicateJudge {
 
     @Override
     public Boolean judge(final ConditionData conditionData, final String realData) {
-        return realData.contains(conditionData.getParamValue().trim());
+        return conditionData.getParamValue().trim().contains(realData);
     }
 }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/TestApacheDubboAnnotationApplication.java
Patch:
@@ -17,15 +17,17 @@
 
 package org.apache.shenyu.examples.apache.dubbo.service.annotation;
 
+import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
  * TestDubboApplication.
  */
 @SpringBootApplication
+@EnableDubbo
 public class TestApacheDubboAnnotationApplication {
-
+    
     /**
      * Main Entrance.
      *

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/VersionUtils.java
Patch:
@@ -65,7 +65,7 @@ public static String getVersion(final Class<?> cls, final String defaultVersion)
         if (StringUtils.isNoneBlank(version)) {
             return version;
         }
-        // guess version fro jar file name if nothing's found from MANIFEST.MF
+        // guess version for jar file name if nothing's found from MANIFEST.MF
         CodeSource codeSource = cls.getProtectionDomain().getCodeSource();
 
         if (codeSource == null) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/RegisterServerDisruptorPublisher.java
Patch:
@@ -64,7 +64,7 @@ public void start(final Map<String, ShenyuClientRegisterService> shenyuClientReg
     @Override
     public <T> void publish(final T data) {
         DisruptorProvider<Object> provider = providerManage.getProvider();
-        provider.onData(f -> f.setData(data));
+        provider.onData(data);
     }
     
     @Override

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/disruptor/ShenyuClientRegisterEventPublisher.java
Patch:
@@ -66,6 +66,6 @@ public void start(final ShenyuClientRegisterRepository shenyuClientRegisterRepos
      */
     public <T> void publishEvent(final T data) {
         DisruptorProvider<Object> provider = providerManage.getProvider();
-        provider.onData(f -> f.setData(data));
+        provider.onData(data);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ShenyuResultMessage.java
Patch:
@@ -54,6 +54,8 @@ public final class ShenyuResultMessage {
 
     public static final String PLATFORM_LOGIN_ERROR = " username or password error";
 
+    public static final String LOGIN_USER_DISABLE_ERROR = " the user has already disabled.";
+
     public static final String PARAMETER_ERROR = "parameter error";
 
     public static final String UNIQUE_INDEX_CONFLICT_ERROR = "unique index conflict, please enter again";

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java
Patch:
@@ -106,7 +106,6 @@ public void caught(final Throwable ex) {
 
     @Override
     protected void transmitRpcContext(final Map<String, String> rpcContext) {
-        RpcContext context = RpcContext.getContext();
-        rpcContext.forEach((k, v) -> context.setAttachment(k, v));
+        rpcContext.forEach(RpcContext.getContext()::setAttachment);
     }
 }

File: shenyu-plugin/shenyu-plugin-general-context/src/main/java/org/apache/shenyu/plugin/general/context/GeneralContextPlugin.java
Patch:
@@ -46,11 +46,11 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         Map<String, List<GeneralContextHandle>> generalContextHandleMap = GeneralContextPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         Map<String, Map<String, String>> generalContextMap = new HashMap<>();
         HttpHeaders headers = exchange.getRequest().getHeaders();
-        generalContextHandleMap.forEach((k, v) -> {
-            Map<String, String> generalContextMapWithRpcType = new HashMap<>();
+        generalContextHandleMap.forEach((rpcType, v) -> {
             if (CollectionUtils.isEmpty(v)) {
                 return;
             }
+            Map<String, String> generalContextMapWithRpcType = new HashMap<>();
             v.forEach(each -> {
                 if (StringUtils.isBlank(each.getGeneralContextType()) || StringUtils.isBlank(each.getGeneralContextKey())) {
                     return;
@@ -67,7 +67,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
                         break;
                 }
             });
-            generalContextMap.put(k, generalContextMapWithRpcType);
+            generalContextMap.put(rpcType, generalContextMapWithRpcType);
         });
         exchange.getAttributes().put(Constants.GENERAL_CONTEXT, generalContextMap);
         return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-general-context/src/test/java/org/apache/shenyu/plugin/general/context/GeneralContextPluginTest.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
@@ -103,6 +104,8 @@ public void testDoExecute() {
 
         assertEquals(shenyuGeneralContext.get("addGeneralContextKey"), "addGeneralContextValue");
         assertEquals(shenyuGeneralContext.get("shenyuTestHeaderNewKey"), "shenyuTestHeaderValue");
+        shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.SOFA.getName());
+        assertNull(shenyuGeneralContext);
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/client/GrpcClientBuilder.java
Patch:
@@ -21,6 +21,7 @@
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.NameResolverRegistry;
+import org.apache.shenyu.plugin.grpc.intercept.ContextClientInterceptor;
 import org.apache.shenyu.plugin.grpc.loadbalance.LoadBalancerStrategy;
 import org.apache.shenyu.plugin.grpc.loadbalance.RandomLoadBalancerProvider;
 import org.apache.shenyu.plugin.grpc.loadbalance.RoundRobinLoadBalancerProvider;
@@ -48,6 +49,7 @@ private GrpcClientBuilder() {
      */
     public static ShenyuGrpcClient buildClient(final String contextPath) {
         ManagedChannelBuilder<?> builder = ManagedChannelBuilder.forTarget(contextPath)
+                .intercept(new ContextClientInterceptor())
                 .defaultLoadBalancingPolicy(LoadBalancerStrategy.RANDOM.getStrategy())
                 .usePlaintext()
                 .maxInboundMessageSize(100 * 1024 * 1024)

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/proxy/MotanProxyService.java
Patch:
@@ -59,8 +59,7 @@ public class MotanProxyService {
     public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {
         Map<String, Map<String, String>> rpcContext = exchange.getAttribute(Constants.GENERAL_CONTEXT);
         Optional.ofNullable(rpcContext).map(context -> context.get(PluginEnum.MOTAN.getName())).ifPresent(context -> {
-            RpcContext motanRpcContext = RpcContext.getContext();
-            context.forEach((k, v) -> motanRpcContext.setRpcAttachment(k, v));
+            context.forEach((k, v) -> RpcContext.getContext().setRpcAttachment(k, v));
         });
         RefererConfig<CommonHandler> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());
         if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getServiceInterface())) {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-springcloud/src/main/java/org/apache/shenyu/springboot/starter/plugin/springcloud/SpringCloudPluginConfiguration.java
Patch:
@@ -76,11 +76,11 @@ public PluginDataHandler springCloudPluginDataHandler() {
      */
     @Bean
     public RibbonClientSpecification ribbonClientSpecification() {
-        Class[] classes = new Class[]{SpringCloudClientConfiguration.class};
+        Class<?>[] classes = new Class[]{SpringCloudClientConfiguration.class};
         return new RibbonClientSpecification(String.join(".", Constants.DEFAULT.toLowerCase(), RibbonClientSpecification.class.getName()), classes);
     }
 
-    class SpringCloudClientConfiguration {
+    static class SpringCloudClientConfiguration {
         @Bean
         public IRule ribbonRule() {
             return new LoadBalanceRule();

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/UpstreamCheckUtils.java
Patch:
@@ -22,7 +22,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.Socket;
 
@@ -78,7 +77,7 @@ public static boolean checkUrl(final String url, final int timeout) {
     private static boolean isHostConnector(final String host, final int port, final int timeout) {
         try (Socket socket = new Socket()) {
             socket.connect(new InetSocketAddress(host, port), timeout);
-        } catch (IOException e) {
+        } catch (Exception e) {
             LOG.error("socket connect is error.", e);
             return false;
         }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListenerTest.java
Patch:
@@ -40,7 +40,7 @@
 import static org.junit.Assert.assertTrue;
 
 /**
- * The TestCase for HttpLongPoolingDataChangedListener.
+ * The TestCase for {@link HttpLongPollingDataChangedListener}.
  */
 @RunWith(MockitoJUnitRunner.class)
 public final class HttpLongPollingDataChangedListenerTest {
@@ -90,7 +90,6 @@ public void testGenerateResponse() throws UnsupportedEncodingException {
 
     /**
      * test getRemoteIp.
-     *
      */
     @Test
     public void testGetRemoteIp() {
@@ -105,7 +104,6 @@ public void testGetRemoteIp() {
 
     /**
      * test CompareChangedGroup.
-     *
      */
     @Test
     public void testCompareChangedGroup() {

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/annotation/impl/DubboTestServiceImpl.java
Patch:
@@ -17,7 +17,9 @@
 package org.apache.shenyu.examples.apache.dubbo.service.annotation.impl;
 
 import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.rpc.RpcContext;
 import org.apache.shenyu.client.dubbo.common.annotation.ShenyuDubboClient;
+import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.examples.dubbo.api.entity.DubboTest;
 import org.apache.shenyu.examples.dubbo.api.entity.ListResp;
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;
@@ -34,6 +36,7 @@ public class DubboTestServiceImpl implements DubboTestService {
     @Override
     @ShenyuDubboClient(path = "/findById", desc = "Query by Id")
     public DubboTest findById(final String id) {
+        System.out.println(GsonUtils.getInstance().toJson(RpcContext.getContext().getAttachments()));
         return new DubboTest(id, "hello world shenyu Apache, findById");
     }
     

File: shenyu-agent/shenyu-agent-bootstrap/src/main/java/org/apache/shenyu/agent/bootstrap/ShenyuAgentBootstrap.java
Patch:
@@ -37,12 +37,12 @@ public class ShenyuAgentBootstrap {
     public static void premain(final String arguments, final Instrumentation instrumentation) throws Exception {
         AgentClassLoader agentClassLoader = AgentClassLoader.createAgentClassloader();
         Class<?> agentInstallerClass = agentClassLoader.loadClass("org.apache.shenyu.agent.core.AgentInstaller");
-        Method agentInstallerMethod = agentInstallerClass.getMethod("installBytebuddyAgent", Instrumentation.class);
+        Method agentInstallerMethod = agentInstallerClass.getMethod("installBytebuddyAgent", Instrumentation.class, ClassLoader.class);
 
         ClassLoader originClassLoader = Thread.currentThread().getContextClassLoader();
         Thread.currentThread().setContextClassLoader(agentClassLoader);
         try {
-            agentInstallerMethod.invoke(null, instrumentation);
+            agentInstallerMethod.invoke(null, instrumentation, agentClassLoader);
         } finally {
             Thread.currentThread().setContextClassLoader(originClassLoader);
         }

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -30,7 +30,6 @@
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
-import java.nio.charset.StandardCharsets;
 import java.util.Objects;
 
 /**
@@ -57,7 +56,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
             response.getHeaders().putAll(clientResponse.headers().asHttpHeaders());
             clientResponse = ResponseUtils.buildClientResponse(exchange.getResponse(), clientResponse.body(BodyExtractors.toDataBuffers()));
             return clientResponse.bodyToMono(byte[].class)
-                    .flatMap(originData -> WebFluxResultUtils.result(exchange, new String(originData, StandardCharsets.UTF_8)))
+                    .flatMap(originData -> WebFluxResultUtils.result(exchange, originData))
                     .doOnCancel(() -> clean(exchange));
         }));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ShenyuDictServiceImpl.java
Patch:
@@ -71,9 +71,10 @@ public Integer createOrUpdate(final ShenyuDictDTO shenyuDictDTO) {
     @Override
     @Transactional(rollbackFor = Exception.class)
     public Integer deleteShenyuDicts(final List<String> ids) {
+
         int affectedRows = 0;
-        for (String id : ids) {
-            affectedRows += shenyuDictMapper.delete(id);
+        if (CollectionUtils.isNotEmpty(ids)) {
+            affectedRows = shenyuDictMapper.deleteByIdList(ids);
         }
         return affectedRows;
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/OperatorEnum.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.apache.shenyu.common.exception.ShenyuException;
-
 import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -123,6 +121,6 @@ public static List<OperatorEnum> acquireSupport() {
     public static OperatorEnum getOperatorEnumByAlias(final String alias) {
         return Arrays.stream(OperatorEnum.values())
                 .filter(e -> e.getAlias().equals(alias) && e.support).findFirst()
-                .orElseThrow(() -> new ShenyuException(String.format(" this  operator can not support %s ", alias)));
+                .orElse(null);
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/ParamTypeEnum.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.common.enums;
 
-import org.apache.shenyu.common.exception.ShenyuException;
-
 import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -136,6 +134,6 @@ public static List<ParamTypeEnum> acquireSupport() {
     public static ParamTypeEnum getParamTypeEnumByName(final String name) {
         return Arrays.stream(ParamTypeEnum.values())
                 .filter(e -> e.getName().equals(name) && e.support).findFirst()
-                .orElseThrow(() -> new ShenyuException(String.format(" this  param type can not support %s", name)));
+                .orElse(null);
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.common.config;
 
-import org.apache.shenyu.common.constant.Constants;
 import org.springframework.util.StringUtils;
 
 import java.util.ArrayList;
@@ -651,7 +650,6 @@ public static class CrossFilterConfig {
                     add("token");
                     add("username");
                     add("client");
-                    add(Constants.DATA_FORMAT);
                 }
             };
         }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/ObjectTypeUtils.java
Patch:
@@ -27,13 +27,14 @@ public final class ObjectTypeUtils {
      * @param object the object
      * @return true is basic
      */
-    public static boolean isBasicTypeExceptString(final Object object) {
+    public static boolean isBasicType(final Object object) {
         return (object instanceof Integer)
                 || (object instanceof Byte)
                 || (object instanceof Long)
                 || (object instanceof Double)
                 || (object instanceof Float)
                 || (object instanceof Short)
-                || (object instanceof Boolean);
+                || (object instanceof Boolean)
+                || (object instanceof CharSequence);
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-grpc/src/test/java/org/apache/shenyu/integrated/test/grpc/GrpcPluginTest.java
Patch:
@@ -45,7 +45,7 @@ public static void setup() throws IOException {
     public void testHelloWorld() throws Exception {
         JsonObject request = buildGrpcRequest();
         JsonArray response = HttpHelper.INSTANCE.postGateway("/grpc/echo", request, JsonArray.class);
-        Map<String, Object> result = GsonUtils.getInstance().toObjectMap(GsonUtils.getInstance().toJson(response.get(0)), Object.class);
+        Map<String, Object> result = GsonUtils.getInstance().toObjectMap(response.get(0).getAsString(), Object.class);
         assertEquals("ReceivedHELLO", result.get("message"));
     }
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/ShenyuResultWrapTest.java
Patch:
@@ -51,7 +51,8 @@ public void setUp() {
     @Test
     public void successTest() {
         Integer result = 0;
-        DefaultShenyuEntity shenyuResult = (DefaultShenyuEntity) ShenyuResultWrap.success(result, "success", new Object());
+        final DefaultShenyuEntity success = new DefaultShenyuEntity(result, "success", null);
+        DefaultShenyuEntity shenyuResult = (DefaultShenyuEntity) ShenyuResultWrap.success(null, success);
         Assert.assertEquals(shenyuResult.getCode(), result);
         Assert.assertEquals(shenyuResult.getMessage(), "success");
     }

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriterTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
+import org.apache.shenyu.plugin.api.result.DefaultShenyuResult;
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.junit.Before;
@@ -53,7 +54,7 @@ public class RPCMessageWriterTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
-        when(applicationContext.getBean(ShenyuResult.class)).thenReturn(mock(ShenyuResult.class));
+        when(applicationContext.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
         springBeanUtils.setApplicationContext(applicationContext);
         exchange = MockServerWebExchange.from(MockServerHttpRequest.get("localhost").build());

File: shenyu-agent/shenyu-agent-api/src/main/java/org/apache/shenyu/agent/core/exception/AgentException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.agent.exception;
+package org.apache.shenyu.agent.core.exception;
 
 /**
  * Agent exception.

File: shenyu-agent/shenyu-agent-bootstrap/src/main/java/org/apache/shenyu/agent/bootstrap/ShenyuAgentBootstrap.java
Patch:
@@ -36,8 +36,9 @@ public class ShenyuAgentBootstrap {
      */
     public static void premain(final String arguments, final Instrumentation instrumentation) throws Exception {
         AgentClassLoader agentClassLoader = AgentClassLoader.createAgentClassloader();
-        Class<?> agentInstallerClass = agentClassLoader.loadClass("org.apache.shenyu.agent.AgentInstaller");
+        Class<?> agentInstallerClass = agentClassLoader.loadClass("org.apache.shenyu.agent.core.AgentInstaller");
         Method agentInstallerMethod = agentInstallerClass.getMethod("installBytebuddyAgent", Instrumentation.class);
+
         ClassLoader originClassLoader = Thread.currentThread().getContextClassLoader();
         Thread.currentThread().setContextClassLoader(agentClassLoader);
         try {

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/enums/TraceTypes.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.agent.enums;
+package org.apache.shenyu.agent.core.enums;
 
 /**
  * TraceTypes.

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/matcher/HasParentTypeMatcher.java
Patch:
@@ -15,11 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.agent.matcher;
+package org.apache.shenyu.agent.core.matcher;
 
 import net.bytebuddy.description.type.TypeDefinition;
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.matcher.ElementMatcher;
+
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;

File: shenyu-agent/shenyu-agent-core/src/main/java/org/apache/shenyu/agent/core/matcher/SafeErasureMatcher.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.agent.matcher;
+package org.apache.shenyu.agent.core.matcher;
 
 import net.bytebuddy.description.type.TypeDefinition;
 import net.bytebuddy.description.type.TypeDescription;

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/tracing/jaeger/advice/DoExecuteAdvice.java
Patch:
@@ -36,6 +36,7 @@ public static void onEnter(
             @Advice.AllArguments final Object[] args,
             @Advice.This final AbstractShenyuPlugin target) {
         String pluginName = target.named();
+
     }
 
     /**
@@ -50,5 +51,6 @@ public static void onExit(
             @Advice.Thrown final Throwable throwable,
             @Advice.AllArguments final Object[] args,
             @Advice.This final Object target) {
+
     }
 }

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/tracing/jaeger/advice/ExecuteAdvice.java
Patch:
@@ -36,6 +36,7 @@ public static void onEnter(
             @Advice.AllArguments final Object[] args,
             @Advice.This final AbstractShenyuPlugin target) {
         String pluginName = target.named();
+
     }
 
     /**
@@ -50,5 +51,6 @@ public static void onExit(
             @Advice.Thrown final Throwable throwable,
             @Advice.AllArguments final Object[] args,
             @Advice.This final Object target) {
+
     }
 }

File: shenyu-agent/shenyu-agent-plugins/shenyu-agent-plugin-tracing/shenyu-agent-plugin-tracing-jaeger/src/main/java/org/apache/shenyu/agent/tracing/jaeger/advice/HandlerAdvice.java
Patch:
@@ -32,6 +32,7 @@ public class HandlerAdvice {
      */
     @Advice.OnMethodEnter(suppress = Throwable.class)
     public static void onEnter(@Advice.Argument(0) final ServerWebExchange exchange) {
+
     }
 
     /**
@@ -44,5 +45,6 @@ public static void onEnter(@Advice.Argument(0) final ServerWebExchange exchange)
     public static void onExit(
             @Advice.Thrown final Throwable throwable,
             @Advice.Argument(0) final ServerWebExchange exchange) {
+
     }
 }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/impl/DubboTestServiceImpl.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shenyu.examples.dubbo.api.service.DubboTestService;
 import org.springframework.stereotype.Service;
 
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Random;
 

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/echo/EchoServiceImpl.java
Patch:
@@ -35,11 +35,10 @@
 public class EchoServiceImpl extends EchoServiceGrpc.EchoServiceImplBase {
     
     private static final Logger LOG = LoggerFactory.getLogger(EchoServiceImpl.class);
-    
-    
+
     @Override
     @ShenyuGrpcClient(path = "/echo", desc = "echo")
-    public void echo(EchoRequest request, StreamObserver<EchoResponse> responseObserver) {
+    public void echo(final EchoRequest request, final StreamObserver<EchoResponse> responseObserver) {
         LOG.info("Received: {}", request.getMessage());
         EchoResponse.Builder response = EchoResponse.newBuilder()
                 .setMessage("ReceivedHELLO")

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/stream/StreamServiceImpl.java
Patch:
@@ -60,7 +60,7 @@ public void serverStreamingFun(final RequestData request, final StreamObserver<R
     
     @Override
     @ShenyuGrpcClient(path = "/clientStreamingFun", desc = "clientStreamingFun")
-    public StreamObserver<RequestData> clientStreamingFun(StreamObserver<ResponseData> responseObserver) {
+    public StreamObserver<RequestData> clientStreamingFun(final StreamObserver<ResponseData> responseObserver) {
         
         return new StreamObserver<RequestData>() {
             

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/dto/UserDTO.java
Patch:
@@ -72,5 +72,4 @@ public String toString() {
                 .toString();
     }
 
-
 }

File: shenyu-examples/shenyu-examples-https/src/main/java/org/apache/shenyu/examples/https/configuration/HttpsConfiguration.java
Patch:
@@ -40,9 +40,9 @@ public class HttpsConfiguration {
      */
     @Bean
     public ConfigurableServletWebServerFactory servletContainer() {
-        TomcatServletWebServerFactory factory =  new TomcatServletWebServerFactory() {
+        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory() {
             @Override
-            protected void postProcessContext(Context context) {
+            protected void postProcessContext(final Context context) {
                 SecurityConstraint securityConstraint = new SecurityConstraint();
                 securityConstraint.setUserConstraint("CONFIDENTIAL");
                 SecurityCollection collection = new SecurityCollection();

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/TestMotanApplication.java
Patch:
@@ -61,7 +61,7 @@ public ProtocolConfigBean protocolConfig1() {
     }
 
     @Bean(name = "registryConfig1")
-    public RegistryConfigBean registryConfig(RegistryProperties properties) {
+    public RegistryConfigBean registryConfig(final RegistryProperties properties) {
         RegistryConfigBean config = new RegistryConfigBean();
         config.setRegProtocol(properties.getProtocol());
         config.setAddress(properties.getAddress());

File: shenyu-examples/shenyu-examples-plugin/src/main/java/org/apache/shenyu/examples/plugin/ext/ExtPluginDataHandler.java
Patch:
@@ -35,7 +35,7 @@ public class ExtPluginDataHandler implements PluginDataHandler {
      */
     @Override
     public void handlerPlugin(final PluginData pluginData) {
-        LOG.info("hello, im extend plugin dataHandler" );
+        LOG.info("hello, im extend plugin dataHandler");
     }
 
     /**

File: shenyu-examples/shenyu-examples-plugin/src/main/java/org/apache/shenyu/examples/plugin/ext/ExtendsShenyuPlugin.java
Patch:
@@ -31,7 +31,6 @@ public class ExtendsShenyuPlugin extends AbstractShenyuPlugin {
     
     @Override
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
-        System.out.println("hello world im is my ext Shenyu plugin");
         return chain.execute(exchange);
     }
     

File: shenyu-examples/shenyu-examples-plugin/src/main/java/org/apache/shenyu/examples/plugin/simple/CustomShenyuPlugin.java
Patch:
@@ -29,7 +29,6 @@ public class CustomShenyuPlugin implements ShenyuPlugin {
     
     @Override
     public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {
-        System.out.println("hello world im is custom Shenyu plugin");
         return chain.execute(exchange);
     }
     

File: shenyu-examples/shenyu-examples-springcloud/src/main/java/org/apache/shenyu/examples/springcloud/controller/OrderController.java
Patch:
@@ -85,7 +85,7 @@ public OrderDTO testRestFul(@PathVariable("id") final String id) {
         return buildOrder(id, "hello world spring cloud restful inline " + id);
     }
 
-    private OrderDTO buildOrder(String id, String name) {
+    private OrderDTO buildOrder(final String id, final String name) {
         OrderDTO orderDTO = new OrderDTO();
         orderDTO.setId(id);
         orderDTO.setName(name);

File: shenyu-examples/shenyu-examples-tars/src/main/java/org/apache/shenyu/examples/tars/servant/testapp/impl/HelloServantImpl.java
Patch:
@@ -25,15 +25,16 @@
 @TarsServant("HelloObj")
 @ShenyuTarsService(serviceName = "ShenyuExampleServer.ShenyuExampleApp.HelloObj")
 public class HelloServantImpl implements HelloServant {
+
     @Override
     @ShenyuTarsClient(path = "/hello", desc = "hello")
-    public String hello(int no, String name) {
+    public String hello(final int no, final String name) {
         return String.format("hello no=%s, name=%s, time=%s", no, name, System.currentTimeMillis());
     }
 
     @Override
     @ShenyuTarsClient(path = "/helloInt", desc = "helloInt")
-    public int helloInt(int no, String name) {
+    public int helloInt(final int no, final String name) {
         return 1;
     }
 }

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/HttpClientRegisterRepository.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
-import java.util.List;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
@@ -31,6 +30,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.List;
+
 /**
  * The type Http client register repository.
  */
@@ -79,7 +80,7 @@ private <T> void doRegister(final T t, final String path, final String type) {
                 RegisterUtils.doRegister(GsonUtils.getInstance().toJson(t), server + path, type);
                 return;
             } catch (Exception e) {
-                LOGGER.error("register admin url :{} is fail, will retry", server);
+                LOGGER.error("register admin url :{} is fail, will retry, ex is :{}", server, e);
             }
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/ShenyuDictService.java
Patch:
@@ -59,7 +59,7 @@ public interface ShenyuDictService {
      * @param dictName shenyu dict name.
      * @return {@linkplain ShenyuDictVO}
      */
-    ShenyuDictVO findByDictCodeAndDictName(String dictCode, String dictName);
+    ShenyuDictVO findByDictCodeName(String dictCode, String dictName);
 
     /**
      * find shenyu dict list by dict type.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ShenyuDictServiceImpl.java
Patch:
@@ -92,7 +92,7 @@ public ShenyuDictVO findById(final String id) {
     }
 
     @Override
-    public ShenyuDictVO findByDictCodeAndDictName(final String dictCode, final String dictName) {
+    public ShenyuDictVO findByDictCodeName(final String dictCode, final String dictName) {
         return ShenyuDictVO.buildShenyuDictVO(shenyuDictMapper.selectByDictCodeAndDictName(dictCode, dictName));
     }
 

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/DefaultShenyuContextBuilder.java
Patch:
@@ -95,7 +95,8 @@ private ShenyuContext buildDefaultContext(final ServerHttpRequest request) {
         shenyuContext.setStartDateTime(LocalDateTime.now());
         String format = request.getHeaders().getFirst(Constants.DATA_FORMAT);
         shenyuContext.setFormat(DataFormatEnum.getByFormat(format));
-        if (!shenyuContext.getFormat().getFormat().equals(format)) {
+        if (StringUtils.isNotBlank(format)
+                && !shenyuContext.getFormat().getFormat().equals(format)) {
             LOG.info("the format {} is invalid, just support {}", format, DataFormatEnum.getFormatNames());
         }
         Optional.ofNullable(request.getMethod()).ifPresent(httpMethod -> shenyuContext.setHttpMethod(httpMethod.name()));

File: shenyu-plugin/shenyu-plugin-oauth2/src/main/java/org/apache/shenyu/plugin/oauth2/filter/OAuth2PreFilter.java
Patch:
@@ -53,9 +53,9 @@ public OAuth2PreFilter(final List<ServerWebExchangeMatcher> matchers) {
         this.matchers = matchers;
     }
 
-    @Nonnull
     @Override
-    public Mono<Void> filter(final ServerWebExchange serverWebExchange, @Nonnull final WebFilterChain webFilterChain) {
+    @Nonnull
+    public Mono<Void> filter(@Nonnull final ServerWebExchange serverWebExchange, @Nonnull final WebFilterChain webFilterChain) {
         PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(PluginEnum.OAUTH2.getName());
         boolean enable = Objects.nonNull(pluginData) && pluginData.getEnabled();
         serverWebExchange.getAttributes().put("enable", enable);

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/CrossFilter.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
+import org.springframework.lang.NonNull;
 import org.springframework.web.cors.reactive.CorsUtils;
 import org.springframework.web.server.ServerWebExchange;
 import org.springframework.web.server.WebFilter;
@@ -50,8 +51,8 @@ public CrossFilter(final CrossFilterConfig filterConfig) {
     }
 
     @Override
-    @SuppressWarnings("all")
-    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {
+    @NonNull
+    public Mono<Void> filter(@NonNull final ServerWebExchange exchange, @NonNull final WebFilterChain chain) {
         ServerHttpRequest request = exchange.getRequest();
         if (CorsUtils.isCorsRequest(request)) {
             ServerHttpResponse response = exchange.getResponse();

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/FileSizeFilter.java
Patch:
@@ -62,6 +62,7 @@ public FileSizeFilter(final int fileMaxSize) {
     }
 
     @Override
+    @NonNull
     public Mono<Void> filter(@NonNull final ServerWebExchange exchange, @NonNull final WebFilterChain chain) {
         MediaType mediaType = exchange.getRequest().getHeaders().getContentType();
         if (MediaType.MULTIPART_FORM_DATA.isCompatibleWith(mediaType)) {

File: shenyu-common/src/main/java/org/apache/shenyu/common/config/ShenyuConfig.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.common.config;
 
+import org.apache.shenyu.common.constant.Constants;
 import org.springframework.util.StringUtils;
 
 import java.util.ArrayList;
@@ -650,6 +651,7 @@ public static class CrossFilterConfig {
                     add("token");
                     add("username");
                     add("client");
+                    add(Constants.DATA_FORMAT);
                 }
             };
         }

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/JsonUtils.java
Patch:
@@ -30,6 +30,7 @@
 import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
 import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
 import com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;
+import org.apache.shenyu.common.constant.Constants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -84,7 +85,7 @@ public static String toJson(final Object object) {
             return MAPPER.writeValueAsString(object);
         } catch (IOException e) {
             LOG.warn("write to json string error: " + object, e);
-            return "{}";
+            return Constants.EMPTY_JSON;
         }
     }
 

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/JsonUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.common.utils;
 
+import org.apache.shenyu.common.constant.Constants;
 import org.junit.Test;
 
 import java.util.HashMap;
@@ -26,8 +27,8 @@
 import java.util.Objects;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 
 /**
  * Test cases for JsonUtils.
@@ -75,7 +76,7 @@ public void toJson() {
         assertEquals(EXPECTED_JSON, JsonUtils.toJson(object));
 
         Object o = new Object();
-        assertEquals("{}", JsonUtils.toJson(o));
+        assertEquals(Constants.EMPTY_JSON, JsonUtils.toJson(o));
     }
 
     @Test

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/ShenyuGrpcServerBuilder.java
Patch:
@@ -29,6 +29,6 @@ public class ShenyuGrpcServerBuilder implements GrpcServerBuilder {
 
     @Override
     public ServerBuilder<?> buildServerBuilder() {
-        return ServerBuilder.forPort(8080);
+        return ServerBuilder.forPort(38080);
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-grpc/src/test/java/org/apache/shenyu/integrated/test/grpc/GrpcPluginTest.java
Patch:
@@ -45,7 +45,7 @@ public static void setup() throws IOException {
     public void testHelloWorld() throws Exception {
         JsonObject request = buildGrpcRequest();
         JsonArray response = HttpHelper.INSTANCE.postGateway("/grpc/echo", request, JsonArray.class);
-        Map<String, Object> result = GsonUtils.getInstance().toObjectMap(response.get(0).getAsString(), Object.class);
+        Map<String, Object> result = GsonUtils.getInstance().toObjectMap(GsonUtils.getInstance().toJson(response.get(0)), Object.class);
         assertEquals("ReceivedHELLO", result.get("message"));
     }
 

File: shenyu-integrated-test/shenyu-integrated-test-websocket/src/test/java/org/apache/shenyu/integrated/test/websocket/WebsocketPluginTest.java
Patch:
@@ -90,7 +90,7 @@ public void onError(final Exception e) {
 
     private static String buildSelectorHandler() {
         WebSocketUpstream upstream = WebSocketUpstream.builder()
-                .upstreamUrl("shenyu-examples-websocket:8848")
+                .upstreamUrl("shenyu-examples-websocket:8868")
                 .protocol("ws://")
                 .weight(50)
                 .timestamp(0)

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
+import org.apache.shenyu.plugin.base.utils.ResponseUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.server.reactive.ServerHttpResponse;
 import org.springframework.web.reactive.function.BodyExtractors;
@@ -53,7 +54,8 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
             }
             response.getCookies().putAll(clientResponse.cookies());
             response.getHeaders().putAll(clientResponse.headers().asHttpHeaders());
-            return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers())).doOnCancel(() -> clean(exchange));
+            clientResponse = ResponseUtils.buildClientResponse(exchange.getResponse(), clientResponse.body(BodyExtractors.toDataBuffers()));
+            return clientResponse.bodyToMono(String.class).flatMap(originData -> WebFluxResultUtils.result(exchange, originData));
         }));
     }
 

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriterTest.java
Patch:
@@ -66,6 +66,7 @@ public void setup() {
     @Test
     public void testWriteWith() {
         ServerWebExchange exchangeNormal = generateServerWebExchange(true);
+        exchangeNormal.getResponse().setStatusCode(HttpStatus.OK);
         reset(chain);
         when(chain.execute(exchangeNormal)).thenReturn(Mono.empty());
         Mono<Void> monoSuccess = webClientMessageWriter.writeWith(exchangeNormal, chain);

File: shenyu-web/src/main/java/org/apache/shenyu/web/controller/LocalAppAuthController.java
Patch:
@@ -24,6 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.ObjectProvider;
+import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
@@ -39,7 +40,7 @@
  * The type AppAuth controller.
  */
 @RestController
-@RequestMapping("/shenyu")
+@RequestMapping(value = "/shenyu", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
 public class LocalAppAuthController {
     
     private static final Logger LOG = LoggerFactory.getLogger(LocalAppAuthController.class);

File: shenyu-web/src/main/java/org/apache/shenyu/web/fallback/DefaultFallbackController.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -29,7 +30,7 @@
  * The default fallback for hystrix plugin and resilience4j plugin.
  */
 @RestController
-@RequestMapping("/fallback")
+@RequestMapping(value = "/fallback", produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
 public class DefaultFallbackController {
     /**
      * logger.

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/Connect.java
Patch:
@@ -23,6 +23,7 @@
 import io.netty.handler.codec.mqtt.MqttConnectReturnCode;
 import io.netty.handler.codec.mqtt.MqttMessageBuilders;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.protocol.mqtt.repositories.ChannelRepository;
 
 /**
@@ -49,14 +50,13 @@ public void connect(final ChannelHandlerContext ctx, final MqttConnectMessage ms
         }
 
         // record connect
-        ChannelRepository.getInstance().add(ctx.channel(), clientId);
-
+        Singleton.INST.get(ChannelRepository.class).add(ctx.channel(), clientId);
         MqttConnAckMessage ackMessage = MqttMessageBuilders.connAck()
                 .returnCode(MqttConnectReturnCode.CONNECTION_ACCEPTED)
                 .sessionPresent(true)
                 .build();
         ctx.writeAndFlush(ackMessage);
-
+        setConnected(true);
     }
 
     private MqttConnAckMessage wrong(final MqttConnectReturnCode returnCode) {

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/Disconnect.java
Patch:
@@ -19,6 +19,7 @@
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.protocol.mqtt.repositories.ChannelRepository;
 
 /**
@@ -42,6 +43,7 @@ public void disconnect(final ChannelHandlerContext ctx) {
     }
 
     private void cleanChannel(final Channel channel) {
-        ChannelRepository.getInstance().remove(channel);
+        //// todo ttl
+        Singleton.INST.get(ChannelRepository.class).remove(channel);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mybatis/pg/handler/PostgreSQLBooleanHandler.java
Patch:
@@ -26,10 +26,10 @@
 import java.sql.SQLException;
 
 /**
- * PostgreSql's custom type handler for Boolean types.
+ * PostgreSQL's custom type handler for Boolean types.
  */
 @MappedTypes(value = Boolean.class)
-public class PostGreSqlBooleanHandler extends BaseTypeHandler<Boolean> {
+public class PostgreSQLBooleanHandler extends BaseTypeHandler<Boolean> {
 
     @Override
     public void setNonNullParameter(final PreparedStatement preparedStatement, final int i,

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mybatis/pg/interceptor/PostgreSQLQueryInterceptor.java
Patch:
@@ -38,14 +38,14 @@
 import java.util.Properties;
 
 /**
- * The limit syntax of postgreSql conflicts with that of mysql,
+ * The limit syntax of PostgreSQL conflicts with that of MySQL,
  * So use the interceptor to process the SQL syntax here.
  */
 @Intercepts({
     @Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}),
     @Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class})
 })
-public class PostgreSqlQueryInterceptor implements Interceptor {
+public class PostgreSQLQueryInterceptor implements Interceptor {
 
     @Override
     public Object intercept(final Invocation invocation) throws Throwable {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/spring/PostgreSQLLoader.java
Patch:
@@ -47,9 +47,9 @@
  */
 @Component
 @ConditionalOnProperty(name = "shenyu.database.dialect", havingValue = "postgresql")
-public class PostgreSqlLoader implements InstantiationAwareBeanPostProcessor {
+public class PostgreSQLLoader implements InstantiationAwareBeanPostProcessor {
 
-    private static final Logger LOG = LoggerFactory.getLogger(PostgreSqlLoader.class);
+    private static final Logger LOG = LoggerFactory.getLogger(PostgreSQLLoader.class);
 
     @Resource
     private DataBaseProperties dataBaseProperties;

File: shenyu-plugin/shenyu-plugin-modify-response/src/test/java/org/apache/shenyu/plugin/modify/response/ModifyResponsePluginTest.java
Patch:
@@ -57,8 +57,6 @@ public final class ModifyResponsePluginTest {
 
     private SelectorData selectorData;
 
-    private ShenyuContext shenyuContext;
-
     @Before
     public void setUp() {
         this.modifyResponsePlugin = new ModifyResponsePlugin();
@@ -72,7 +70,7 @@ public void setUp() {
                 .queryParam("queryParam", "Hello,World")
                 .build();
         this.exchange = spy(MockServerWebExchange.from(request));
-        shenyuContext = mock(ShenyuContext.class);
+        ShenyuContext shenyuContext = mock(ShenyuContext.class);
         exchange.getAttributes().put(Constants.CONTEXT, shenyuContext);
     }
 

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/strategy/FormDataOperatorTest.java
Patch:
@@ -35,7 +35,7 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -75,8 +75,8 @@ public void setUp() {
         param.set("age", "18");
         this.paramMappingRuleHandle = new ParamMappingRuleHandle();
         this.paramMappingRuleHandle.setRemoveParameterKeys(remove);
-        this.paramMappingRuleHandle.setAddParameterKeys(Arrays.asList(add));
-        this.paramMappingRuleHandle.setReplaceParameterKeys(Arrays.asList(replace));
+        this.paramMappingRuleHandle.setAddParameterKeys(Collections.singletonList(add));
+        this.paramMappingRuleHandle.setReplaceParameterKeys(Collections.singletonList(replace));
         this.formDataOperator = new FormDataOperator();
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.method(HttpMethod.POST, "localhost")
                 .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE).queryParams(param));

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/strategy/JsonOperatorTest.java
Patch:
@@ -33,7 +33,7 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -69,8 +69,8 @@ public void setUp() {
         replace.setValue("realName");
         this.paramMappingRuleHandle = new ParamMappingRuleHandle();
         this.paramMappingRuleHandle.setRemoveParameterKeys(remove);
-        this.paramMappingRuleHandle.setAddParameterKeys(Arrays.asList(add));
-        this.paramMappingRuleHandle.setReplaceParameterKeys(Arrays.asList(replace));
+        this.paramMappingRuleHandle.setAddParameterKeys(Collections.singletonList(add));
+        this.paramMappingRuleHandle.setReplaceParameterKeys(Collections.singletonList(replace));
         this.jsonOperator = new JsonOperator();
         final String body = "{\"name\":\"shenyu\",\"age\":\"18\"}";
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.method(HttpMethod.POST, "localhost")

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java
Patch:
@@ -90,7 +90,7 @@ public void testSkip() {
         exchange.getAttributes().put(Constants.CONTEXT, context);
         exchange.getAttributes().put(Constants.META_DATA, metaData);
 
-        final Boolean result = alibabaDubboPluginUnderTest.skip(exchange);
+        final boolean result = alibabaDubboPluginUnderTest.skip(exchange);
 
         assertFalse(result);
     }

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/AlibabaDubboConfigCacheTest.java
Patch:
@@ -97,7 +97,7 @@ public void testInitRef() {
         metaData.setPath("/test");
         AlibabaDubboConfigCache alibabaDubboConfigCacheMock = mock(AlibabaDubboConfigCache.class);
         when(alibabaDubboConfigCacheMock.initRef(metaData))
-                .thenReturn(new ReferenceConfig());
+                .thenReturn(new ReferenceConfig<>());
         assertNotNull(alibabaDubboConfigCacheMock.initRef(metaData));
     }
 
@@ -116,7 +116,7 @@ public void testBuild() {
         metaData.setRpcExt(GsonUtils.getInstance().toJson(dubboParam));
         AlibabaDubboConfigCache alibabaDubboConfigCacheMock = mock(AlibabaDubboConfigCache.class);
         when(alibabaDubboConfigCacheMock.build(metaData))
-                .thenReturn(new ReferenceConfig());
+                .thenReturn(new ReferenceConfig<>());
         assertNotNull(alibabaDubboConfigCacheMock.build(metaData));
     }
 

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataTest.java
Patch:
@@ -50,6 +50,7 @@ public void setUp() {
         metaData.setPath("/dubbo/findAll");
         metaData.setServiceName("org.apache.shenyu.test.dubbo.api.service.DubboTestService");
         metaData.setMethodName("findAll");
+        Assert.assertNotNull(metaData);
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApacheDubboConfigCacheTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.apache.dubbo.cache;
 
-import com.alibaba.dubbo.config.ReferenceConfig;
+import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
@@ -97,7 +97,7 @@ public void testInitRef() {
         metaData.setPath("/test");
         ApacheDubboConfigCache apacheDubboConfigCacheMock = mock(ApacheDubboConfigCache.class);
         when(apacheDubboConfigCacheMock.initRef(metaData))
-                .thenReturn(new ReferenceConfig());
+                .thenReturn(new org.apache.dubbo.config.ReferenceConfig<>());
         assertNotNull(apacheDubboConfigCacheMock.initRef(metaData));
     }
 
@@ -117,7 +117,7 @@ public void testBuild() {
         metaData.setRpcExt(GsonUtils.getInstance().toJson(dubboParamExtInfo));
         ApacheDubboConfigCache apacheDubboConfigCacheMock = mock(ApacheDubboConfigCache.class);
         when(apacheDubboConfigCacheMock.build(metaData))
-                .thenReturn(new ReferenceConfig());
+                .thenReturn(new ReferenceConfig<>());
         assertNotNull(apacheDubboConfigCacheMock.build(metaData));
     }
 

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/AbstractDubboPlugin.java
Patch:
@@ -87,7 +87,7 @@ public Mono<Void> doExecute(final ServerWebExchange exchange,
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
-        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
+        if (Objects.nonNull(metaData) && StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/cache/DubboConfigCache.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * DubboConfigCache.
  */
-public class DubboConfigCache<T extends DubboConfigCache<?>> {
+public class DubboConfigCache {
 
     /**
      * parser the rpc ext to dubbo param.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -144,7 +144,7 @@ public int delete(final List<String> ids) {
             Set<String> idSet = Optional.ofNullable(ids).orElseGet(() -> new ArrayList<>()).stream()
                     .filter(id -> StringUtils.isNotEmpty(id)).collect(Collectors.toSet());
             DashboardUserDO dashboardUserDO = dashboardUserMapper.selectByUserName(AdminConstants.ADMIN_NAME);
-            if (null != dashboardUserDO) {
+            if (Objects.nonNull(dashboardUserDO)) {
                 idSet.remove(dashboardUserDO.getId());
             }
             if (idSet.size() > 0) {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DataPermissionServiceTest.java
Patch:
@@ -46,6 +46,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyList;
 import static org.mockito.BDDMockito.given;
 
 /**
@@ -103,6 +104,7 @@ public void assertCreateSelector() {
         List<RuleDO> list = new LinkedList<>();
         list.add(RuleDO.buildRuleDO(ruleDTO));
         given(ruleMapper.findBySelectorId("1")).willReturn(list);
+        given(dataPermissionMapper.insertBatch(anyList())).willReturn(2);
         assertThat(dataPermissionService.createSelector(dataPermissionDTO), is(2));
     }
 

File: shenyu-integrated-test/shenyu-integration-test-alibaba-dubbo/src/test/java/org/apache/shenyu/integratedtest/alibaba/dubbo/AlibabaDubboPluginTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.gson.reflect.TypeToken;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
-import org.apache.shenyu.integratedtest.common.dto.AdminResponse;
 import org.apache.shenyu.integratedtest.common.dto.DubboTest;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
 import org.junit.BeforeClass;
@@ -42,8 +41,8 @@ public static void setup() throws IOException {
 
     @Test
     public void testFindById() throws IOException {
-        AdminResponse<DubboTest> dubboTest = HttpHelper.INSTANCE.getFromGateway("/dubbo/findById?id=1", new TypeToken<AdminResponse<DubboTest>>() {
+        DubboTest dubboTest = HttpHelper.INSTANCE.getFromGateway("/dubbo/findById?id=1", new TypeToken<DubboTest>() {
         }.getType());
-        assertEquals("hello world shenyu Alibaba Dubbo, findById", dubboTest.getData().getName());
+        assertEquals("hello world shenyu Alibaba Dubbo, findById", dubboTest.getName());
     }
 }

File: shenyu-integrated-test/shenyu-integration-test-apache-dubbo/src/test/java/org/apache/shenyu/integratedtest/alibaba/dubbo/ApacheDubboPluginTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.gson.reflect.TypeToken;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
-import org.apache.shenyu.integratedtest.common.dto.AdminResponse;
 import org.apache.shenyu.integratedtest.common.dto.DubboTest;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
 import org.junit.BeforeClass;
@@ -42,8 +41,8 @@ public static void setup() throws IOException {
 
     @Test
     public void testFindById() throws IOException {
-        AdminResponse<DubboTest> dubboTest = HttpHelper.INSTANCE.getFromGateway("/dubbo/findById?id=1", new TypeToken<AdminResponse<DubboTest>>() {
+        DubboTest dubboTest = HttpHelper.INSTANCE.getFromGateway("/dubbo/findById?id=1", new TypeToken<DubboTest>() {
         }.getType());
-        assertEquals("hello world shenyu Apache, findById", dubboTest.getData().getName());
+        assertEquals("hello world shenyu Apache, findById", dubboTest.getName());
     }
 }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -59,7 +59,6 @@ public class GrpcPlugin extends AbstractShenyuPlugin {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
         final String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);
         ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-
         assert shenyuContext != null;
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
 

File: shenyu-examples/shenyu-examples-http/src/main/java/org/apache/shenyu/examples/http/config/HttpServerConfig.java
Patch:
@@ -35,12 +35,12 @@
  */
 @Configuration
 public class HttpServerConfig {
-
+    
     @Bean
     public RouterFunction<ServerResponse> monoRouterFunction(final ShenyuTestHttpRouter shenyuTestHttpRouter) {
         return shenyuTestHttpRouter.routes();
     }
-
+    
     @Bean
     public Scheduler scheduler() {
         ExecutorService threadPool = new ThreadPoolExecutor(100, 100,

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/context/DivideShenyuContextDecorator.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.divide.context;
 
 import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
@@ -33,6 +34,7 @@ public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData
         shenyuContext.setMethod(path);
         shenyuContext.setRealUrl(path);
         shenyuContext.setRpcType(RpcTypeEnum.HTTP.getName());
+        shenyuContext.setModule(String.format("%s-%s", PluginEnum.DIVIDE.getName(), shenyuContext.getRpcType()));
         return shenyuContext;
     }
 }

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/DefaultShenyuContextBuilder.java
Patch:
@@ -39,6 +39,8 @@
  */
 public class DefaultShenyuContextBuilder implements ShenyuContextBuilder {
 
+    private static final String RPC_TYPE = "rpc_type";
+
     private final Map<String, ShenyuContextDecorator> decoratorMap;
 
     /**
@@ -64,7 +66,7 @@ public ShenyuContext build(final ServerWebExchange exchange) {
         } else if (StringUtils.isNotEmpty(upgrade) && RpcTypeEnum.WEB_SOCKET.getName().equals(upgrade)) {
             rpcType = RpcTypeEnum.WEB_SOCKET.getName();
         } else {
-            String rpcTypeParam = request.getHeaders().getFirst("rpc_type");
+            String rpcTypeParam = request.getHeaders().getFirst(RPC_TYPE);
             rpcType = StringUtils.isEmpty(rpcTypeParam) ? RpcTypeEnum.HTTP.getName() : rpcTypeParam;
         }
         return decoratorMap.get(rpcType).decorator(buildDefaultContext(request), metaData);

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecorator.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.springcloud.context;
 
 import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
@@ -33,6 +34,7 @@ public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData
         shenyuContext.setMethod(path);
         shenyuContext.setRealUrl(path);
         shenyuContext.setRpcType(RpcTypeEnum.SPRING_CLOUD.getName());
+        shenyuContext.setModule(String.format("%s-%s", PluginEnum.DIVIDE.getName(), shenyuContext.getRpcType()));
         return shenyuContext;
     }
     

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/context/WebSocketShenyuContextDecorator.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.websocket.context;
 
 import org.apache.shenyu.common.dto.MetaData;
+import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
@@ -32,6 +33,7 @@ public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData
         String path = shenyuContext.getPath();
         shenyuContext.setMethod(path);
         shenyuContext.setRpcType(RpcTypeEnum.WEB_SOCKET.getName());
+        shenyuContext.setModule(String.format("%s-%s", PluginEnum.WEB_SOCKET.getName(), shenyuContext.getRpcType()));
         return shenyuContext;
     }
     

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -135,6 +136,7 @@ public void setUp() {
     }
 
     @Test
+    @Ignore
     public void testScheduled() {
         PluginDO pluginDO = PluginDO.builder()
                 .name(PluginEnum.DIVIDE.getName())

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataHandler.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * The type Alibaba dubbo plugin data subscriber.
  */
-public class AlibabaAbstractDubboPluginDataHandler extends AbstractDubboPluginDataHandler {
+public class AlibabaDubboPluginDataHandler extends AbstractDubboPluginDataHandler {
 
     @Override
     protected void initConfigCache(final DubboRegisterConfig dubboRegisterConfig) {

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/proxy/AlibabaDubboGrayLoadBalance.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.loadbalancer.factory.LoadBalancerFactory;
-import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaAbstractDubboPluginDataHandler;
+import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaDubboPluginDataHandler;
 
 import java.util.List;
 import java.util.stream.Collectors;
@@ -46,8 +46,8 @@ public <T> Invoker<T> select(final List<Invoker<T>> invokers, final URL url, fin
         String shenyuSelectorId = invocation.getAttachment(Constants.DUBBO_SELECTOR_ID);
         String shenyuRuleId = invocation.getAttachment(Constants.DUBBO_RULE_ID);
         String remoteAddressIp = invocation.getAttachment(Constants.DUBBO_REMOTE_ADDRESS);
-        List<DubboUpstream> dubboUpstreams = AlibabaAbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(shenyuSelectorId);
-        DubboRuleHandle dubboRuleHandle = AlibabaAbstractDubboPluginDataHandler.RULE_CACHED_HANDLE.get().obtainHandle(shenyuRuleId);
+        List<DubboUpstream> dubboUpstreams = AlibabaDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(shenyuSelectorId);
+        DubboRuleHandle dubboRuleHandle = AlibabaDubboPluginDataHandler.RULE_CACHED_HANDLE.get().obtainHandle(shenyuRuleId);
         // if gray list is not empty,just use load balance to choose one.
         if (CollectionUtils.isNotEmpty(dubboUpstreams)) {
             Upstream upstream = LoadBalancerFactory.selector(UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(shenyuSelectorId), dubboRuleHandle.getLoadbalance(), remoteAddressIp);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataTest.java
Patch:
@@ -37,13 +37,13 @@
 @FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public final class AlibabaDubboPluginDataTest {
 
-    private AlibabaAbstractDubboPluginDataHandler alibabaDubboPluginDataHandler;
+    private AlibabaDubboPluginDataHandler alibabaDubboPluginDataHandler;
 
     private final String registryConfig = "{\"protocol\":\"zookeeper\",\"register\":\"127.0.0.1:2181\"}";
 
     @Before
     public void setUp() {
-        alibabaDubboPluginDataHandler = new AlibabaAbstractDubboPluginDataHandler();
+        alibabaDubboPluginDataHandler = new AlibabaDubboPluginDataHandler();
         MetaData metaData = new MetaData();
         metaData.setId("1332017966661636096");
         metaData.setAppName("dubbo");

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/handler/ApacheDubboPluginDataHandler.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * The type Apache dubbo plugin data handler.
  */
-public class ApacheAbstractDubboPluginDataHandler extends AbstractDubboPluginDataHandler {
+public class ApacheDubboPluginDataHandler extends AbstractDubboPluginDataHandler {
 
     @Override
     protected void initConfigCache(final DubboRegisterConfig dubboRegisterConfig) {

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboGrayLoadBalance.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.loadbalancer.factory.LoadBalancerFactory;
-import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheAbstractDubboPluginDataHandler;
+import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheDubboPluginDataHandler;
 
 import java.util.List;
 import java.util.stream.Collectors;
@@ -46,8 +46,8 @@ public <T> Invoker<T> select(final List<Invoker<T>> invokers, final URL url, fin
         String shenyuSelectorId = invocation.getAttachment(Constants.DUBBO_SELECTOR_ID);
         String shenyuRuleId = invocation.getAttachment(Constants.DUBBO_RULE_ID);
         String remoteAddressIp = invocation.getAttachment(Constants.DUBBO_REMOTE_ADDRESS);
-        List<DubboUpstream> dubboUpstreams = ApacheAbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(shenyuSelectorId);
-        DubboRuleHandle dubboRuleHandle = ApacheAbstractDubboPluginDataHandler.RULE_CACHED_HANDLE.get().obtainHandle(shenyuRuleId);
+        List<DubboUpstream> dubboUpstreams = ApacheDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(shenyuSelectorId);
+        DubboRuleHandle dubboRuleHandle = ApacheDubboPluginDataHandler.RULE_CACHED_HANDLE.get().obtainHandle(shenyuRuleId);
         // if gray list is not empty,just use load balance to choose one.
         if (CollectionUtils.isNotEmpty(dubboUpstreams)) {
             Upstream upstream = LoadBalancerFactory.selector(UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(shenyuSelectorId), dubboRuleHandle.getLoadbalance(), remoteAddressIp);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/alibaba/dubbo/AlibabaDubboPluginConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.plugin.alibaba.dubbo;
 
 import org.apache.shenyu.plugin.alibaba.dubbo.AlibabaDubboPlugin;
-import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaAbstractDubboPluginDataHandler;
+import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaDubboPluginDataHandler;
 import org.apache.shenyu.plugin.alibaba.dubbo.proxy.AlibabaDubboProxyService;
 import org.apache.shenyu.plugin.alibaba.dubbo.subscriber.AlibabaDubboMetaDataSubscriber;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
@@ -58,7 +58,7 @@ public ShenyuPlugin alibabaDubboPlugin(final ObjectProvider<DubboParamResolveSer
      */
     @Bean
     public PluginDataHandler alibabaDubboPluginDataHandler() {
-        return new AlibabaAbstractDubboPluginDataHandler();
+        return new AlibabaDubboPluginDataHandler();
     }
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-apache-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/apache/dubbo/ApacheDubboPluginConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.plugin.apache.dubbo;
 
 import org.apache.shenyu.plugin.apache.dubbo.ApacheDubboPlugin;
-import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheAbstractDubboPluginDataHandler;
+import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheDubboPluginDataHandler;
 import org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService;
 import org.apache.shenyu.plugin.apache.dubbo.subscriber.ApacheDubboMetaDataSubscriber;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
@@ -58,7 +58,7 @@ public ShenyuPlugin apacheDubboPlugin(final ObjectProvider<DubboParamResolveServ
      */
     @Bean
     public PluginDataHandler apacheDubboPluginDataHandler() {
-        return new ApacheAbstractDubboPluginDataHandler();
+        return new ApacheDubboPluginDataHandler();
     }
 
     /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/AppAuthServiceTest.java
Patch:
@@ -157,6 +157,7 @@ public void testEnabled() {
         assertEquals(AdminConstants.ID_NOT_EXIST, this.appAuthService.enabled(batchCommonDTO.getIds(), batchCommonDTO.getEnabled()));
 
         given(this.appAuthMapper.selectById(appAuthDO.getId())).willReturn(appAuthDO);
+        given(this.appAuthMapper.selectByIds(Collections.singletonList(appAuthDO.getId()))).willReturn(Collections.singletonList(appAuthDO));
         assertEquals(StringUtils.EMPTY, this.appAuthService.enabled(batchCommonDTO.getIds(), batchCommonDTO.getEnabled()));
         AppAuthVO appAuthVO = this.appAuthService.findById(appAuthDO.getId());
         assertEquals(Boolean.TRUE, appAuthVO.getEnabled());

File: shenyu-plugin/shenyu-plugin-oauth2/src/main/java/org/apache/shenyu/plugin/oauth2/OAuth2Plugin.java
Patch:
@@ -70,7 +70,8 @@ public String named() {
 
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        return Boolean.TRUE.equals(exchange.<Boolean>getAttribute(OAUTH2_ENABLE));
+        Boolean skipStatus = exchange.<Boolean>getAttribute(OAUTH2_ENABLE);
+        return skipStatus == null || skipStatus;
     }
 
     private ServerWebExchange handleToken(final ServerWebExchange exchange, final OAuth2AuthorizedClient client) {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/netty/NettyTcpProperties.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.bootstrap.configuration;
+package org.apache.shenyu.springboot.starter.netty;
 
 /**
- * The netty tcp config.
+ * The netty tcp configuration properties.
  */
-public class NettyTcpConfig {
+public class NettyTcpProperties {
 
     private int selectCount = 1;
 

File: shenyu-web/src/main/java/org/apache/shenyu/web/logo/ShenyuLogo.java
Patch:
@@ -48,11 +48,11 @@ public class ShenyuLogo implements ApplicationListener<ApplicationEnvironmentPre
         + "                           __/ |      \n"
         + "                          |___/       ";
 
-    private final AtomicBoolean alreadyLog = new AtomicBoolean(false);
+    private static final AtomicBoolean ALREADY_LOG = new AtomicBoolean(false);
 
     @Override
     public void onApplicationEvent(final ApplicationEnvironmentPreparedEvent event) {
-        if (!alreadyLog.compareAndSet(false, true)) {
+        if (!ALREADY_LOG.compareAndSet(false, true)) {
             return;
         }
         LOG.info(buildBannerText());

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -128,13 +128,13 @@ private Boolean filterRule(final RuleData ruleData, final ServerWebExchange exch
     }
 
     private void selectorLog(final SelectorData selectorData, final String pluginName) {
-        if (selectorData.getLogged()) {
+        if (Boolean.TRUE.equals(selectorData.getLogged())) {
             LOG.info("{} selector success match , selector name :{}", pluginName, selectorData.getName());
         }
     }
 
     private void ruleLog(final RuleData ruleData, final String pluginName) {
-        if (ruleData.getLoged()) {
+        if (Boolean.TRUE.equals(ruleData.getLoged())) {
             LOG.info("{} rule success match , rule name :{}", pluginName, ruleData.getName());
         }
     }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -57,20 +57,19 @@ public class GrpcPlugin extends AbstractShenyuPlugin {
 
     @Override
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
-        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);
+        final String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);
         ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
 
         assert shenyuContext != null;
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
 
         if (!checkMetaData(metaData)) {
-            assert metaData != null;
             LOG.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
-
+        assert metaData != null;
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/proto/DynamicMessageMarshaller.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.protobuf.DynamicMessage;
 import com.google.protobuf.ExtensionRegistryLite;
 import io.grpc.MethodDescriptor.Marshaller;
+import org.apache.shenyu.plugin.grpc.exception.ShenyuGrpcException;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -43,7 +44,7 @@ public DynamicMessage parse(final InputStream inputStream) {
                     .mergeFrom(inputStream, ExtensionRegistryLite.getEmptyRegistry())
                     .build();
         } catch (IOException e) {
-            throw new RuntimeException("Unable to merge from the supplied input stream", e);
+            throw new ShenyuGrpcException("Unable to merge from the supplied input stream", e);
         }
     }
 

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/resolver/ShenyuNameResolver.java
Patch:
@@ -25,6 +25,7 @@
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.SynchronizationContext;
 import io.grpc.internal.SharedResourceHolder;
+import java.util.Collections;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.plugin.grpc.loadbalance.GrpcAttributeUtils;
 import org.apache.shenyu.plugin.grpc.cache.ApplicationConfigCache;
@@ -166,7 +167,7 @@ private List<ShenyuServiceInstance> resolveInternal() {
 
             if (!needsToUpdateConnections(newInstanceList)) {
                 LOG.info("Nothing has changed... skipping update for {}", name);
-                return null;
+                return Collections.emptyList();
             }
 
             LOG.info("Ready to update server list for {}", name);

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java
Patch:
@@ -76,12 +76,13 @@ public void setUp() {
     }
 
     @Test
+    @SuppressWarnings("all")
     public void testDoExecute() throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException {
         ServerWebExchange exchange = getServerWebExchange();
         exchange.getAttributes().put(Constants.PARAM_TRANSFORM, "{message:1}");
         exchange.getAttributes().put(Constants.META_DATA, getMetaData());
 
-        Class grpcClientCacheClass = Class.forName("org.apache.shenyu.plugin.grpc.cache.GrpcClientCache");
+        Class<?> grpcClientCacheClass = Class.forName("org.apache.shenyu.plugin.grpc.cache.GrpcClientCache");
         Field clientCacheField = grpcClientCacheClass.getDeclaredField("CLIENT_CACHE");
         clientCacheField.setAccessible(true);
         Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/RandomLoadBalancerProviderTest.java
Patch:
@@ -47,7 +47,7 @@ public void testIsAvailable() {
 
     @Test
     public void testGetPriority() {
-        assertEquals(randomLoadBalancerProvider.getPriority(), 6);
+        assertEquals(6, randomLoadBalancerProvider.getPriority());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/RoundRobinLoadBalancerProviderTest.java
Patch:
@@ -44,7 +44,7 @@ public void testIsAvailable() {
 
     @Test
     public void testGetPriority() {
-        assertEquals(roundRobinLoadBalancerProvider.getPriority(), 6);
+        assertEquals(6, roundRobinLoadBalancerProvider.getPriority());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/SubChannelsTest.java
Patch:
@@ -25,6 +25,7 @@
 public class SubChannelsTest {
     @Test
     public void testUpdateAttributes() {
-        SubChannels.updateAttributes(mock(LoadBalancer.Subchannel.class), mock(Attributes.class));
+        final LoadBalancer.Subchannel subchannel = mock(LoadBalancer.Subchannel.class);
+        SubChannels.updateAttributes(subchannel, mock(Attributes.class));
     }
 }

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/UnitTestIdleHelper.java
Patch:
@@ -54,8 +54,8 @@ public LoadBalancer.Subchannel createSubchannel(final LoadBalancer.CreateSubchan
         return new UnitTestIdleSubchannel(args);
     }
 
-    public class UnitTestIdleSubchannel extends LoadBalancer.Subchannel {
-        private LoadBalancer.CreateSubchannelArgs args;
+    public static class UnitTestIdleSubchannel extends LoadBalancer.Subchannel {
+        private final LoadBalancer.CreateSubchannelArgs args;
 
         public UnitTestIdleSubchannel(final LoadBalancer.CreateSubchannelArgs args) {
             this.args = args;

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/UnitTestReadHelper.java
Patch:
@@ -56,8 +56,8 @@ public LoadBalancer.Subchannel createSubchannel(final LoadBalancer.CreateSubchan
         return new UnitTestSubchannel(args);
     }
 
-    public class UnitTestSubchannel extends LoadBalancer.Subchannel {
-        private LoadBalancer.CreateSubchannelArgs args;
+    public static class UnitTestSubchannel extends LoadBalancer.Subchannel {
+        private final LoadBalancer.CreateSubchannelArgs args;
 
         public UnitTestSubchannel(final LoadBalancer.CreateSubchannelArgs args) {
             this.args = args;

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/proto/MessageWriterTest.java
Patch:
@@ -30,20 +30,20 @@
  */
 @RunWith(MockitoJUnitRunner.class)
 public class MessageWriterTest {
-    private ShenyuGrpcResponse shenyuGrpcResponse;
-
+    
     private MessageWriter<Message> messageWriter;
 
     @Before
     public void setUp() {
-        shenyuGrpcResponse = mock(ShenyuGrpcResponse.class);
+        ShenyuGrpcResponse shenyuGrpcResponse = mock(ShenyuGrpcResponse.class);
         messageWriter = MessageWriter.newInstance(shenyuGrpcResponse);
     }
 
     @Test
     public void onError() {
         Throwable throwable = mock(Throwable.class);
         messageWriter.onError(throwable);
+        
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/resolver/ShenyuServiceInstanceTest.java
Patch:
@@ -39,14 +39,14 @@ public void setUp() {
 
     @Test
     public void testWeight() {
-        assertEquals(shenyuServiceInstance.getWeight(), 0);
+        assertEquals(0, shenyuServiceInstance.getWeight());
         shenyuServiceInstance.setWeight(1);
-        assertEquals(shenyuServiceInstance.getWeight(), 1);
+        assertEquals(1, shenyuServiceInstance.getWeight());
     }
 
     @Test
     public void testStatus() {
         shenyuServiceInstance.setStatus(true);
-        assertEquals(shenyuServiceInstance.getStatus(), "true");
+        assertEquals("true", shenyuServiceInstance.getStatus());
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/CryptorRequestPluginTest.java
Patch:
@@ -42,7 +42,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 
-public class CryptorRequestPluginTest extends AbstractPluginDataInit {
+public final class CryptorRequestPluginTest extends AbstractPluginDataInit {
 
     private static final String RSA_PRIVATE_KEY = "MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAvEXyUDh5qliWhM6KrpTFi1OXumoJQzMfSr8XjfKa/kHKb1uxr7N8lJd3I850m2IYrxckFCQW6nrnRKctm"
             + "iMgZQIDAQABAkBEFbdvMz0sUST9mgOk5sAZhn1UOIxo9M/YJArMlnNehqQs3Pv8RD6ASisgs19XnBhcUNdl2ecfxddp7OVQ6PVxAiEA+XagQdbwkFrEjUsPqPQTweKkc7aoVGJfifEGWvCKtAcCIQDBNN0K5vlVV5YKnA5WtDAN"

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/ModifyResponsePluginTest.java
Patch:
@@ -57,7 +57,7 @@
 /**
  * ModifyResponsePluginTest.
  */
-public class ModifyResponsePluginTest extends AbstractPluginDataInit {
+public final class ModifyResponsePluginTest extends AbstractPluginDataInit {
 
     private static final String ADD_HEADER = "addHeader";
 

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/ParamMappingPluginTest.java
Patch:
@@ -45,7 +45,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 
-public class ParamMappingPluginTest extends AbstractPluginDataInit {
+public final class ParamMappingPluginTest extends AbstractPluginDataInit {
 
     @BeforeClass
     public static void setup() throws IOException {

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/DividePlugin.java
Patch:
@@ -102,8 +102,7 @@ public String named() {
 
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-        return !Objects.equals(Objects.requireNonNull(shenyuContext).getRpcType(), RpcTypeEnum.HTTP.getName());
+        return skipExcept(exchange, RpcTypeEnum.HTTP);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/AbstractDubboPlugin.java
Patch:
@@ -127,9 +127,7 @@ public String named() {
      */
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-        assert shenyuContext != null;
-        return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.DUBBO.getName());
+        return skipExcept(exchange, RpcTypeEnum.DUBBO);
     }
 
     private boolean checkMetaData(final MetaData metaData) {

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -113,9 +113,7 @@ public String named() {
      */
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-        assert shenyuContext != null;
-        return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.GRPC.getName());
+        return skipExcept(exchange, RpcTypeEnum.GRPC);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/MotanPlugin.java
Patch:
@@ -99,9 +99,7 @@ public String named() {
      */
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-        assert shenyuContext != null;
-        return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.MOTAN.getName());
+        return skipExcept(exchange, RpcTypeEnum.MOTAN);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-oauth2/src/main/java/org/apache/shenyu/plugin/oauth2/OAuth2Plugin.java
Patch:
@@ -37,6 +37,8 @@ public class OAuth2Plugin implements ShenyuPlugin {
 
     private static final String BEARER = "Bearer ";
 
+    private static final String OAUTH2_ENABLE = "enable";
+
     private final ReactiveOAuth2AuthorizedClientService authorizedClientService;
 
     public OAuth2Plugin(final ReactiveOAuth2AuthorizedClientService authorizedClientService) {
@@ -68,8 +70,7 @@ public String named() {
 
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        Boolean skipStatus = exchange.<Boolean>getAttribute("enable");
-        return skipStatus == null || skipStatus;
+        return Boolean.TRUE.equals(exchange.<Boolean>getAttribute(OAUTH2_ENABLE));
     }
 
     private ServerWebExchange handleToken(final ServerWebExchange exchange, final OAuth2AuthorizedClient client) {

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/SpringCloudPlugin.java
Patch:
@@ -114,8 +114,7 @@ public String named() {
      */
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        final ShenyuContext body = exchange.getAttribute(Constants.CONTEXT);
-        return !Objects.equals(Objects.requireNonNull(body).getRpcType(), RpcTypeEnum.SPRING_CLOUD.getName());
+        return skipExcept(exchange, RpcTypeEnum.SPRING_CLOUD);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -110,9 +110,7 @@ public String named() {
 
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
-        assert shenyuContext != null;
-        return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.TARS.getName());
+        return skipExcept(exchange, RpcTypeEnum.TARS);
     }
 
     private boolean checkMetaData(final MetaData metaData) {

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -142,8 +142,7 @@ public String named() {
      */
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        final ShenyuContext body = exchange.getAttribute(Constants.CONTEXT);
-        return !Objects.equals(Objects.requireNonNull(body).getRpcType(), RpcTypeEnum.WEB_SOCKET.getName());
+        return skipExcept(exchange, RpcTypeEnum.WEB_SOCKET);
     }
 
     @Override

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImplTest.java
Patch:
@@ -50,7 +50,7 @@
  * Test cases for {@link ShenyuClientRegisterGrpcServiceImpl}.
  */
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class ShenyuClientRegisterGrpcServiceImplTest {
+public final class ShenyuClientRegisterGrpcServiceImplTest {
     
     @InjectMocks
     private ShenyuClientRegisterGrpcServiceImpl shenyuClientRegisterGrpcService;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImplTest.java
Patch:
@@ -50,7 +50,7 @@
  * Test cases for {@link ShenyuClientRegisterTarsServiceImpl}.
  */
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class ShenyuClientRegisterTarsServiceImplTest {
+public final class ShenyuClientRegisterTarsServiceImplTest {
     
     @InjectMocks
     private ShenyuClientRegisterTarsServiceImpl shenyuClientRegisterTarsService;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-oauth2/src/main/java/org/apache/shenyu/springboot/starter/plugin/oauth2/DefaultClientsConfiguredCondition.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * The OAuth2 plugin default repository config condition.
- * if not spring oauth2's config in .yml file, use default java config, else use spring config
+ * if not spring oauth2's config in .yml file, use default java config, else use spring config.
  *
  * @see org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition
  */

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-oauth2/src/main/java/org/apache/shenyu/springboot/starter/plugin/oauth2/OAuth2PluginConfiguration.java
Patch:
@@ -70,6 +70,7 @@ public class OAuth2PluginConfiguration {
 
     /**
      * oauth2 plugin shenyu plugin.
+     *
      * @param authorizedClientServiceProvider the ReactiveOAuth2AuthorizedClientServiceProvider
      * @return the shenyu plugin
      */
@@ -141,7 +142,7 @@ public SecurityWebFilterChain getSecurityWebFilterChain(final ServerHttpSecurity
 
     /**
      * Build default clientRegistration.
-     * if this bean load, the oauth2 plugin don't take effect
+     * if this bean load, the oauth2 plugin don't take effect.
      *
      * @return The clientRegistration instance.
      */

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-etcd/src/main/java/org/apache/shenyu/register/client/etcd/EtcdClient.java
Patch:
@@ -50,7 +50,7 @@ public class EtcdClient {
     private long globalLeaseId;
 
     public EtcdClient(final String url, final long ttl, final long timeout) {
-        this.client = Client.builder().endpoints(url).build();
+        this.client = Client.builder().endpoints(url.split(",")).build();
         this.ttl = ttl;
         this.timeout = timeout;
         initLease();

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/handler/SofaPluginDataHandler.java
Patch:
@@ -36,10 +36,10 @@ public class SofaPluginDataHandler implements PluginDataHandler {
     public void handlerPlugin(final PluginData pluginData) {
         if (null != pluginData && pluginData.getEnabled()) {
             SofaRegisterConfig sofaRegisterConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), SofaRegisterConfig.class);
-            SofaRegisterConfig exist = Singleton.INST.get(SofaRegisterConfig.class);
             if (Objects.isNull(sofaRegisterConfig)) {
                 return;
             }
+            SofaRegisterConfig exist = Singleton.INST.get(SofaRegisterConfig.class);
             if (Objects.isNull(exist) || !sofaRegisterConfig.equals(exist)) {
                 // If it is null, initialize it
                 ApplicationConfigCache.getInstance().init(sofaRegisterConfig);

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/param/SofaParamResolveService.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.sofa.param;
 
 import org.apache.commons.lang3.tuple.Pair;
+import org.springframework.lang.NonNull;
 
 /**
  * The interface Generic param service.
@@ -33,5 +34,6 @@ public interface SofaParamResolveService {
      * @param parameterTypes the parameter types
      * @return the pair
      */
+    @NonNull
     Pair<String[], Object[]> buildParameter(String body, String parameterTypes);
 }

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/param/SofaParamResolveServiceImpl.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.springframework.lang.NonNull;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -37,6 +38,7 @@
 public class SofaParamResolveServiceImpl implements SofaParamResolveService {
 
     @Override
+    @NonNull
     public Pair<String[], Object[]> buildParameter(final String body, final String parameterTypes) {
         final String[] parameterTypeStrings = StringUtils.split(parameterTypes, ",");
         List<String> parameterTypeArr = new ArrayList<>(parameterTypeStrings.length);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-cryptor/src/main/java/org/apache/shenyu/springboot/starter/plugin/cryptor/CryptorPluginConfiguration.java
Patch:
@@ -35,7 +35,7 @@ public class CryptorPluginConfiguration {
     /**
      * Cryptor request plugin.
      *
-     * @return the soul plugin
+     * @return the shenyu plugin
      */
     @Bean
     public ShenyuPlugin cryptorRequestPlugin() {
@@ -45,7 +45,7 @@ public ShenyuPlugin cryptorRequestPlugin() {
     /**
      * Cryptor response plugin.
      *
-     * @return the soul plugin
+     * @return the shenyu plugin
      */
     @Bean
     public ShenyuPlugin cryptorResponsePlugin() {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataSyncConfiguration.java
Patch:
@@ -189,7 +189,7 @@ static class EtcdListener {
         @Bean
         public EtcdClient etcdClient(final EtcdProperties etcdProperties) {
             Client client = Client.builder()
-                    .endpoints(etcdProperties.getUrl())
+                    .endpoints(etcdProperties.getUrl().split(","))
                     .build();
             return new EtcdClient(client);
         }

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-etcd/src/main/java/org/apache/shenyu/register/server/etcd/client/EtcdClient.java
Patch:
@@ -71,7 +71,7 @@ public EtcdClient(final String urls) {
                         .setDaemon(true)
                         .build());
 
-        this.client = Client.builder().endpoints(urls).build();
+        this.client = Client.builder().endpoints(urls.split(",")).build();
 
         try {
             initLease();

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-etcd/src/main/java/org/apache/shenyu/springboot/sync/data/etcd/EtcdSyncDataConfiguration.java
Patch:
@@ -75,7 +75,7 @@ public SyncDataService syncDataService(final ObjectProvider<EtcdClient> etcdClie
     @Bean
     public EtcdClient etcdClient(final EtcdConfig etcdConfig) {
         Client client = Client.builder()
-                .endpoints(etcdConfig.getUrl())
+                .endpoints(etcdConfig.getUrl().split(","))
                 .build();
         return new EtcdClient(client);
     }

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/MotanPlugin.java
Patch:
@@ -58,6 +58,7 @@ public MotanPlugin(final MotanProxyService motanProxyService) {
     }
 
     @Override
+    @SuppressWarnings("all")
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain,
                                    final SelectorData selector, final RuleData rule) {
         String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);
@@ -109,6 +110,6 @@ public int getOrder() {
     }
 
     private boolean checkMetaData(final MetaData metaData) {
-        return null != metaData && !StringUtils.isBlank(metaData.getMethodName()) && !StringUtils.isBlank(metaData.getServiceName());
+        return Objects.nonNull(metaData) && !StringUtils.isBlank(metaData.getMethodName()) && !StringUtils.isBlank(metaData.getServiceName());
     }
 }

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/handler/MotanPluginDataHandler.java
Patch:
@@ -34,7 +34,7 @@ public class MotanPluginDataHandler implements PluginDataHandler {
 
     @Override
     public void handlerPlugin(final PluginData pluginData) {
-        if (null != pluginData && pluginData.getEnabled()) {
+        if (Objects.nonNull(pluginData) && Boolean.TRUE.equals(pluginData.getEnabled())) {
             MotanRegisterConfig motanRegisterConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), MotanRegisterConfig.class);
             MotanRegisterConfig exist = Singleton.INST.get(MotanRegisterConfig.class);
             if (Objects.isNull(motanRegisterConfig)) {

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/proxy/MotanProxyService.java
Patch:
@@ -52,7 +52,7 @@ public class MotanProxyService {
      * @return the object
      * @throws ShenyuException the shenyu exception
      */
-
+    @SuppressWarnings("all")
     public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {
         RefererConfig<CommonHandler> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());
         if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getServiceInterface())) {
@@ -62,7 +62,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
         CommonHandler commonHandler = reference.getRef();
         ApplicationConfigCache.MotanParamInfo motanParamInfo = ApplicationConfigCache.PARAM_MAP.get(metaData.getMethodName());
         Object[] params;
-        if (motanParamInfo == null) {
+        if (Objects.isNull(motanParamInfo)) {
             params = new Object[0];
         } else {
             int num = motanParamInfo.getParamTypes().length;

File: shenyu-plugin/shenyu-plugin-redirect/src/main/java/org/apache/shenyu/plugin/redirect/handler/RedirectPluginDataHandler.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class RedirectPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<CommonHandleCache<String, RedirectHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, RedirectHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandler.java
Patch:
@@ -58,7 +58,7 @@
  */
 public class RateLimiterPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<CommonHandleCache<String, RateLimiterHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, RateLimiterHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerPlugin(final PluginData pluginData) {

File: shenyu-register-center/shenyu-register-instance/shenyu-register-instance-zookeeper/src/main/java/org/apache/shenyu/register/instance/zookeeper/ZookeeperInstanceRegisterRepository.java
Patch:
@@ -57,7 +57,7 @@ public void init(final InstanceConfig config) {
     
     @Override
     public void persistInstance(final InstanceRegisterDTO instance) {
-        String uriNodeName = buildURINodeName(instance);
+        String uriNodeName = buildInstanceNodeName(instance);
         String instancePath = RegisterPathConstants.buildInstanceParentPath();
         if (!zkClient.exists(instancePath)) {
             zkClient.createPersistent(instancePath, true);
@@ -75,7 +75,7 @@ public void close() {
         zkClient.close();
     }
 
-    private String buildURINodeName(final InstanceRegisterDTO instance) {
+    private String buildInstanceNodeName(final InstanceRegisterDTO instance) {
         String host = instance.getHost();
         int port = instance.getPort();
         return String.join(Constants.COLONS, host, Integer.toString(port));

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/ConcurrentRateLimiterAlgorithm.java
Patch:
@@ -36,9 +36,8 @@
 @Join
 public class ConcurrentRateLimiterAlgorithm extends AbstractRateLimiterAlgorithm {
 
-    @Override
-    protected String getScriptName() {
-        return RateLimitEnum.CONCURRENT.getScriptName();
+    public ConcurrentRateLimiterAlgorithm() {
+        super(RateLimitEnum.CONCURRENT.getScriptName());
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/LeakyBucketRateLimiterAlgorithm.java
Patch:
@@ -26,9 +26,8 @@
 @Join
 public class LeakyBucketRateLimiterAlgorithm extends AbstractRateLimiterAlgorithm {
 
-    @Override
-    protected String getScriptName() {
-        return RateLimitEnum.LEAKY_BUCKET.getScriptName();
+    public LeakyBucketRateLimiterAlgorithm() {
+        super(RateLimitEnum.LEAKY_BUCKET.getScriptName());
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/SlidingWindowRateLimiterAlgorithm.java
Patch:
@@ -30,9 +30,8 @@
 @Join
 public class SlidingWindowRateLimiterAlgorithm extends AbstractRateLimiterAlgorithm {
 
-    @Override
-    protected String getScriptName() {
-        return RateLimitEnum.SLIDING_WINDOW.getScriptName();
+    public SlidingWindowRateLimiterAlgorithm() {
+        super(RateLimitEnum.SLIDING_WINDOW.getScriptName());
     }
 
     @Override

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/PathMatchUtilsTest.java
Patch:
@@ -42,5 +42,6 @@ public void testPathMatch() {
         assertFalse(PathMatchUtils.match("test*aaa", "testblaaab"));
         // test matching with **'s
         assertTrue(PathMatchUtils.match("/**", "/testing/testing"));
+        assertTrue(PathMatchUtils.match("/test/**", "/test/test"));
     }
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/condition/judge/ExcludeOperatorJudge.java
Patch:
@@ -18,10 +18,9 @@
 package org.apache.shenyu.plugin.base.condition.judge;
 
 import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.utils.PathMatchUtils;
 import org.apache.shenyu.spi.Join;
 
-import java.util.Objects;
-
 /**
  * Exclude predicate judge.
  */
@@ -30,6 +29,6 @@ public class ExcludeOperatorJudge implements PredicateJudge {
 
     @Override
     public Boolean judge(final ConditionData conditionData, final String realData) {
-        return !Objects.equals(realData, conditionData.getParamValue().trim());
+        return !PathMatchUtils.match(conditionData.getParamValue().trim(), realData);
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-combination/src/test/java/org/apache/shenyu/integrated/test/combination/MultiRequestPluginTest.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
+import java.util.Base64;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
@@ -86,8 +87,8 @@ public void testCryptorRequestAndParamMapping() throws Exception {
         JsonObject request = new JsonObject();
         request.addProperty("userId", TEST_USER_ID);
         UserDTO actualUser = HttpHelper.INSTANCE.postGateway(TEST_PATH, request, UserDTO.class);
-
-        assertThat(RSA_STRATEGY.decrypt(RSA_PRIVATE_KEY, actualUser.getUserName()), is(TEST_USER_NAME));
+        byte[] inputByte = Base64.getMimeDecoder().decode(actualUser.getUserName());
+        assertThat(RSA_STRATEGY.decrypt(RSA_PRIVATE_KEY, inputByte), is(TEST_USER_NAME));
         assertThat(actualUser.getUserId(), is(TEST_USER_ID));
 
         cleanParamMapping();

File: shenyu-integrated-test/shenyu-integrated-test-combination/src/test/java/org/apache/shenyu/integrated/test/combination/RpcAndRequestPluginTest.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
+import java.util.Base64;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
@@ -117,7 +118,8 @@ public void testDubboAndCryptorRequest() throws Exception {
         setupCryptorRequest();
 
         AdminResponse<DubboTest> result = HttpHelper.INSTANCE.postGateway(TEST_PATH, DUBBO_REQUEST, new TypeToken<AdminResponse<DubboTest>>() { }.getType());
-        assertEquals(TEST_ID, RSA_STRATEGY.decrypt(RSA_PRIVATE_KEY, result.getData().getId()));
+        byte[] inputByte = Base64.getMimeDecoder().decode(result.getData().getId());
+        assertEquals(TEST_ID, RSA_STRATEGY.decrypt(RSA_PRIVATE_KEY, inputByte));
 
         cleanCryptorRequest();
     }

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/CryptorRequestPluginTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Base64;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
@@ -90,8 +91,8 @@ public void testEncryptRequest() throws Exception {
         request.addProperty("userId", TEST_USER_ID);
         request.addProperty("userName", TEST_USER_NAME);
         UserDTO actualUser = HttpHelper.INSTANCE.postGateway(TEST_PATH, request, UserDTO.class);
-
-        assertThat(RSA_STRATEGY.decrypt(RSA_PRIVATE_KEY, actualUser.getUserId()), is(TEST_USER_ID));
+        byte[] inputByte = Base64.getMimeDecoder().decode(actualUser.getUserId());
+        assertThat(RSA_STRATEGY.decrypt(RSA_PRIVATE_KEY, inputByte), is(TEST_USER_ID));
         assertThat(actualUser.getUserName(), is(TEST_USER_NAME));
     }
 

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategy.java
Patch:
@@ -32,7 +32,7 @@ public interface CryptorStrategy {
      * @return data
      * @throws Exception error
      */
-    String decrypt(String key, String encryptData) throws Exception;
+    String decrypt(String key, byte[] encryptData) throws Exception;
 
     /**
      * encrypt.

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/RsaStrategy.java
Patch:
@@ -37,13 +37,12 @@ public class RsaStrategy implements CryptorStrategy {
     private static final String RSA = "rsa";
 
     @Override
-    public String decrypt(final String key, final String encryptData) throws Exception {
-        byte[] inputByte = Base64.getDecoder().decode(encryptData.getBytes(StandardCharsets.UTF_8));
+    public String decrypt(final String key, final byte[] encryptData) throws Exception {
         byte[] decoded = Base64.getDecoder().decode(key);
         PrivateKey priKey = KeyFactory.getInstance(RSA).generatePrivate(new PKCS8EncodedKeySpec(decoded));
         Cipher cipher = Cipher.getInstance(RSA);
         cipher.init(Cipher.DECRYPT_MODE, priKey);
-        return new String(cipher.doFinal(inputByte));
+        return new String(cipher.doFinal(encryptData));
     }
 
     @Override

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/LocalMetadataControllerTest.java
Patch:
@@ -42,7 +42,7 @@
  * Test cases for {@link LocalMetadataController}.
  */
 @RunWith(MockitoJUnitRunner.class)
-public class LocalMetadataControllerTest {
+public final class LocalMetadataControllerTest {
 
     private MockMvc mockMvc;
 

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/ExcludeFilterTest.java
Patch:
@@ -36,7 +36,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.Silent.class)
-public class ExcludeFilterTest {
+public final class ExcludeFilterTest {
     
     private ExcludeFilter excludeFilter;
 

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/FileSizeFilterTest.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * test case for FileSizeFilter.
  */
-public class FileSizeFilterTest {
+public final class FileSizeFilterTest {
 
     @Before
     public void setup() {

File: shenyu-web/src/test/java/org/apache/shenyu/web/forward/ForwardedRemoteAddressResolverTest.java
Patch:
@@ -46,7 +46,7 @@ public void testNewInstance() {
         Assert.assertEquals(maxTrustedIndex, 5);
 
         ForwardedRemoteAddressResolver all = ForwardedRemoteAddressResolver.trustAll();
-        maxTrustedIndex = (int) (int) ReflectionTestUtils.getField(all, "maxTrustedIndex");
+        maxTrustedIndex = (int) ReflectionTestUtils.getField(all, "maxTrustedIndex");
         Assert.assertEquals(maxTrustedIndex, Integer.MAX_VALUE);
     }
 

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/GlobalErrorHandlerTest.java
Patch:
@@ -65,7 +65,7 @@
  *
  */
 @RunWith(MockitoJUnitRunner.class)
-public class GlobalErrorHandlerTest {
+public final class GlobalErrorHandlerTest {
 
     private static Logger loggerSpy;
 

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/ShenyuWebHandlerTest.java
Patch:
@@ -39,7 +39,7 @@
  * test for ShenyuWebHandler.
  *
  */
-public class ShenyuWebHandlerTest {
+public final class ShenyuWebHandlerTest {
 
     private ShenyuWebHandler shenyuWebHandler;
     

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-sofa/src/main/java/org/apache/shenyu/springboot/starter/client/sofa/ShenyuSofaClientConfiguration.java
Patch:
@@ -33,6 +33,7 @@
 @Configuration
 @ImportAutoConfiguration(ShenyuClientCommonBeanConfiguration.class)
 public class ShenyuSofaClientConfiguration {
+
     /**
      * Sofa service bean post processor sofa service bean post processor.
      *

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/controller/GrpcTestController.java
Patch:
@@ -33,7 +33,7 @@
 @RequestMapping("/test/grpc")
 public class GrpcTestController {
 
-    private Channel channel = channel();
+    private final Channel channel = channel();
 
     @GetMapping("/hello")
     public String hello() {

File: shenyu-examples/shenyu-examples-websocket/src/main/java/org/apache/shenyu/examples/websocket/handler/EchoHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.examples.websocket.handler;
 
+import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.socket.WebSocketHandler;
 import org.springframework.web.reactive.socket.WebSocketSession;
@@ -27,7 +28,9 @@
  */
 @Component
 public class EchoHandler implements WebSocketHandler {
+
     @Override
+    @NonNull
     public Mono<Void> handle(final WebSocketSession session) {
         return session.send(
                 session.receive()

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEvent.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.context.ApplicationEvent;
 
 import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
 
 /**
  * Data change event.
@@ -45,7 +47,7 @@ public class DataChangedEvent extends ApplicationEvent {
      * @param source   the source
      */
     public DataChangedEvent(final ConfigGroupEnum groupKey, final DataEventTypeEnum type, final List<?> source) {
-        super(source);
+        super(source.stream().filter(Objects::nonNull).collect(Collectors.toList()));
         this.eventType = type;
         this.groupKey = groupKey;
     }

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/UpstreamCheckUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.common.utils;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -39,6 +40,7 @@ public void testBlank() {
     }
 
     @Test
+    @Ignore
     public void testSocketConnect() {
         Runnable runnable = () -> {
             ServerSocket serverSocket;

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/AbstractMessageType.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.protocol.mqtt;
 
 import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.mqtt.MqttConnectMessage;
 import io.netty.handler.codec.mqtt.MqttPublishMessage;
 import io.netty.handler.codec.mqtt.MqttSubscribeMessage;
 import io.netty.handler.codec.mqtt.MqttUnsubscribeMessage;
@@ -32,8 +33,9 @@ public abstract class AbstractMessageType {
     /**
      * Client request to connect to Server.
      * @param ctx ChannelHandlerContext
+     * @param msg msg
      */
-    public void connect(final ChannelHandlerContext ctx) {
+    public void connect(final ChannelHandlerContext ctx, final MqttConnectMessage msg) {
 
     }
 

File: shenyu-protocol/shenyu-protocol-mqtt/src/main/java/org/apache/shenyu/protocol/mqtt/MqttFactory.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.protocol.mqtt;
 
 import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.mqtt.MqttConnectMessage;
 import io.netty.handler.codec.mqtt.MqttMessage;
 import io.netty.handler.codec.mqtt.MqttPublishMessage;
 import io.netty.handler.codec.mqtt.MqttSubscribeMessage;
@@ -50,7 +51,7 @@ public void connect() {
         switch (msg.fixedHeader().messageType()) {
 
             case CONNECT:
-                messageType.connect(ctx);
+                messageType.connect(ctx, (MqttConnectMessage) msg);
                 break;
 
             case PUBLISH:

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/Resilience4JPlugin.java
Patch:
@@ -37,6 +37,7 @@
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
+import java.util.Objects;
 import java.util.function.Function;
 
 /**
@@ -77,9 +78,9 @@ private Mono<Void> combined(final ServerWebExchange exchange, final ShenyuPlugin
         return combinedExecutor.run(
                 chain.execute(exchange).doOnSuccess(v -> {
                     HttpStatus status = exchange.getResponse().getStatusCode();
-                    if (status == null || !status.is2xxSuccessful()) {
+                    if (Objects.isNull(status) || !status.is2xxSuccessful()) {
                         exchange.getResponse().setStatusCode(null);
-                        throw new CircuitBreakerStatusCodeException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);
+                        throw new CircuitBreakerStatusCodeException(Objects.isNull(status) ? HttpStatus.INTERNAL_SERVER_ERROR : status);
                     }
                 }), fallback(combinedExecutor, exchange, conf.getFallBackUri()), conf);
     }

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/executor/CombinedExecutor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.plugin.resilience4j.factory.Resilience4JRegistryFactory;
 import reactor.core.publisher.Mono;
 
+import java.util.Objects;
 import java.util.function.Function;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
@@ -46,7 +47,7 @@ public <T> Mono<T> run(final Mono<T> run, final Function<Throwable, Mono<T>> fal
                         resilience4JConf.getTimeLimiterConfig().getTimeoutDuration().toMillis(),
                         TimeUnit.MILLISECONDS,
                         t));
-        if (fallback != null) {
+        if (Objects.nonNull(fallback)) {
             to = to.onErrorResume(fallback);
         }
         return to;

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutor.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.resilience4j.executor;
 
+import java.util.Objects;
 import java.util.function.Function;
 
 import org.apache.shenyu.plugin.resilience4j.factory.Resilience4JRegistryFactory;
@@ -34,7 +35,7 @@ public class RateLimiterExecutor implements Executor {
     public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) {
         RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig());
         Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter));
-        if (fallback != null) {
+        if (Objects.nonNull(fallback)) {
             return to.onErrorResume(fallback);
         }
         return to;

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/MessageWriter.java
Patch:
@@ -25,7 +25,7 @@
  * The interface Message writer.
  */
 public interface MessageWriter {
-    
+
     /**
      * Write with exchange and shenyu plugin chain.
      *

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -59,7 +59,7 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
 
     private void clean(final ServerWebExchange exchange) {
         ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR);
-        if (clientResponse != null) {
+        if (Objects.nonNull(clientResponse)) {
             clientResponse.bodyToMono(Void.class).subscribe();
         }
     }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/handler/CryptorRuleHandler.java
Patch:
@@ -22,6 +22,7 @@
 /**
  * Cryptor response rule handle.
  */
+@SuppressWarnings("unused")
 public class CryptorRuleHandler implements RuleHandle {
 
     private String strategyName;

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/ApplicationConfigCache.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.dto.convert.selector.GrpcUpstream;
@@ -78,7 +79,7 @@ public ShenyuServiceInstanceLists get(final String contextPath) {
     public void initPrx(final SelectorData selectorData) {
         try {
             final List<GrpcUpstream> upstreamList = GsonUtils.getInstance().fromList(selectorData.getHandle(), GrpcUpstream.class);
-            if (null == upstreamList || upstreamList.size() == 0) {
+            if (CollectionUtils.isEmpty(upstreamList)) {
                 invalidate(selectorData.getName());
                 return;
             }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/client/ShenyuGrpcClient.java
Patch:
@@ -82,12 +82,14 @@ public CompletableFuture<ShenyuGrpcResponse> call(final MetaData metaData,
 
         ShenyuGrpcResponse shenyuGrpcResponse = new ShenyuGrpcResponse();
         StreamObserver<DynamicMessage> streamObserver = MessageWriter.newInstance(shenyuGrpcResponse);
+
         ShenyuGrpcCallRequest callParams = new ShenyuGrpcCallRequest();
         callParams.setMethodDescriptor(jsonMarshallerMethodDescriptor);
         callParams.setChannel(channel);
         callParams.setCallOptions(callOptions);
         callParams.setResponseObserver(streamObserver);
         callParams.setRequests(jsonRequestList);
+
         try {
             this.invoke(callParams).get();
         } catch (InterruptedException | ExecutionException e) {

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/proto/CompleteObserver.java
Patch:
@@ -47,7 +47,8 @@ public void onNext(final T next) {
     }
 
     /**
-     * Returns a future which completes when the rpc finishes. The returned future fails if the rpc fails.
+     * Returns a future which completes when the rpc finishes.
+     * The returned future fails if the rpc fails.
      *
      * @return ListenableFuture future
      */

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/resolver/ShenyuServiceInstanceLists.java
Patch:
@@ -44,7 +44,8 @@ public ShenyuServiceInstanceLists() {
      * @param shenyuServiceInstances the shenyu service instances
      * @param appName                the app name
      */
-    public ShenyuServiceInstanceLists(final CopyOnWriteArrayList<ShenyuServiceInstance> shenyuServiceInstances, final String appName) {
+    public ShenyuServiceInstanceLists(final CopyOnWriteArrayList<ShenyuServiceInstance> shenyuServiceInstances,
+                                      final String appName) {
         this.shenyuServiceInstances = shenyuServiceInstances;
         this.appName = appName;
     }

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/RequestPlugin.java
Patch:
@@ -89,7 +89,6 @@ public String named() {
      *
      * @param request serverHttpRequest
      * @param requestHandle requestHandle
-     * @return new headers
      */
     private void setHeaders(final HttpHeaders headers, final ServerHttpRequest request, final RequestHandle requestHandle) {
         List<HttpCookie> cookies = getCookies(request, requestHandle).values().stream()

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/handler/RequestPluginHandler.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class RequestPluginHandler implements PluginDataHandler {
 
-    public static final Supplier<CommonHandleCache<String, RequestHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, RequestHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SignPluginTest.java
Patch:
@@ -71,7 +71,7 @@ public void testSign() throws Exception {
         Map<String, Object> normalHeaders = buildHeadersMap(now, path, APP_KEY, APP_SECRET, version);
         UserDTO normalRespFuture = HttpHelper.INSTANCE.getFromGateway(testUrlPath, normalHeaders,
                 UserDTO.class);
-        assertEquals("hello world", normalRespFuture.getUserName());
+        assertEquals("Lee", normalRespFuture.getUserName());
 
         Map<String, Object> errorPathHeaders = buildHeadersMap(now, "errorPath", APP_KEY, APP_SECRET, version);
         AdminResponse<Object> rejectedErrorPathRespFuture = HttpHelper.INSTANCE.getFromGateway(testUrlPath,

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -116,6 +116,6 @@ public boolean skip(final ServerWebExchange exchange) {
     }
 
     private boolean checkMetaData(final MetaData metaData) {
-        return null != metaData && !StringUtils.isBlank(metaData.getMethodName()) && !StringUtils.isBlank(metaData.getServiceName());
+        return Objects.nonNull(metaData) && !StringUtils.isBlank(metaData.getMethodName()) && !StringUtils.isBlank(metaData.getServiceName());
     }
 }

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/context/TarsShenyuContextDecorator.java
Patch:
@@ -26,7 +26,7 @@
  * The type Tars shenyu context decorator.
  */
 public class TarsShenyuContextDecorator implements ShenyuContextDecorator {
-    
+
     @Override
     public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {
         shenyuContext.setModule(metaData.getAppName());
@@ -36,7 +36,7 @@ public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData
         shenyuContext.setRpcType(RpcTypeEnum.TARS.getName());
         return shenyuContext;
     }
-    
+
     @Override
     public String rpcType() {
         return RpcTypeEnum.TARS.getName();

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/handler/TarsPluginDataHandler.java
Patch:
@@ -38,7 +38,7 @@ public void handlerPlugin(final PluginData pluginData) {
     public String pluginNamed() {
         return PluginEnum.TARS.getName();
     }
-    
+
     @Override
     public void handlerSelector(final SelectorData selectorData) {
         if (Objects.isNull(selectorData.getName())) {
@@ -54,5 +54,4 @@ public void removeSelector(final SelectorData selectorData) {
         }
         ApplicationConfigCache.getInstance().invalidate(selectorData.getName());
     }
-
 }

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/proxy/TarsInvokePrx.java
Patch:
@@ -21,7 +21,7 @@
  * Tars path invoke metadata.
  */
 public class TarsInvokePrx {
-    
+
     private Object invokePrx;
 
     private String host;

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/subscriber/TarsMetaDataSubscriber.java
Patch:
@@ -40,7 +40,7 @@ public class TarsMetaDataSubscriber implements MetaDataSubscriber {
     @Override
     public void onSubscribe(final MetaData metaData) {
         metaData.updateContextPath();
-        if (RpcTypeEnum.TARS.getName().equals(metaData.getRpcType())) {
+        if (Objects.equals(RpcTypeEnum.TARS.getName(), metaData.getRpcType())) {
             MetaData metaExist = META_DATA.get(metaData.getPath());
             List<TarsInvokePrx> prxList = ApplicationConfigCache.getInstance()
                     .get(metaData.getPath()).getTarsInvokePrxList();
@@ -57,7 +57,7 @@ public void onSubscribe(final MetaData metaData) {
     @Override
     public void unSubscribe(final MetaData metaData) {
         metaData.updateContextPath();
-        if (RpcTypeEnum.TARS.getName().equals(metaData.getRpcType())) {
+        if (Objects.equals(RpcTypeEnum.TARS.getName(), metaData.getRpcType())) {
             List<TarsInvokePrx> prxList = ApplicationConfigCache.getInstance()
                     .get(metaData.getPath()).getTarsInvokePrxList();
             List<TarsInvokePrx> removePrxList = prxList.stream()

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/util/PrxInfoUtil.java
Patch:
@@ -154,7 +154,7 @@ public static Object[] getParamArray(final Class<?>[] paramTypes, final String[]
     }
 
     static class PrimitiveType {
-        
+ 
         private final Class<?> clazz;
 
         private final Function<Object, Object> func;

File: shenyu-plugin/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/subscriber/TarsMetaDataSubscriberTest.java
Patch:
@@ -46,7 +46,9 @@ public void setUp() {
     @Test
     public void testOnSubscribe() {
         tarsMetaDataSubscriber.onSubscribe(metaData);
-        // test for cache;
+        /**
+         * test for cache;
+         */
         tarsMetaDataSubscriber.onSubscribe(metaData);
     }
 

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/result/ShenyuResultWrap.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * The type shenyu result warp.
  */
-public final class ShenyuResultWrap<T> {
+public final class ShenyuResultWrap {
     
     /**
      * Success object.

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/support/BodyInserterContext.java
Patch:
@@ -43,16 +43,19 @@ public BodyInserterContext() {
         this.exchangeStrategies = ExchangeStrategies.withDefaults();
     }
 
+    @SuppressWarnings("NullableProblems")
     @Override
     public List<HttpMessageWriter<?>> messageWriters() {
         return exchangeStrategies.messageWriters();
     }
 
+    @SuppressWarnings("NullableProblems")
     @Override
     public Optional<ServerHttpRequest> serverRequest() {
         return Optional.empty();
     }
 
+    @SuppressWarnings("NullableProblems")
     @Override
     public Map<String, Object> hints() {
         return Collections.emptyMap();

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/BeanHolder.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class BeanHolder<O> implements Supplier<O> {
 
-    private Supplier<O> supplier;
+    private final Supplier<O> supplier;
 
     private volatile O o;
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/BaseDataCacheTest.java
Patch:
@@ -236,6 +236,7 @@ public void testObtainRuleData() throws NoSuchFieldException, IllegalAccessExcep
         Assert.assertEquals(Lists.newArrayList(ruleData), ruleDataList);
     }
 
+    @SuppressWarnings("rawtypes")
     private ConcurrentHashMap getFieldByName(final String name) throws NoSuchFieldException, IllegalAccessException {
         BaseDataCache baseDataCache = BaseDataCache.getInstance();
         Field pluginMapField = baseDataCache.getClass().getDeclaredField(name);

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/CommonHandleCacheTest.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * BaseHandleCache test.
  */
-public class CommonHandleCacheTest {
+public final class CommonHandleCacheTest {
 
     private static final String MOCK_KEY = "mockKey";
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/CookieParameterDataTest.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Test cases for {@link CookieParameterData}.
  */
-public class CookieParameterDataTest {
+public final class CookieParameterDataTest {
 
     private ServerWebExchange exchange;
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/HeaderParameterDataTest.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Test cases for {@link HeaderParameterData}.
  */
-public class HeaderParameterDataTest {
+public final class HeaderParameterDataTest {
 
     private ServerWebExchange exchange;
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/IpParameterDataTest.java
Patch:
@@ -42,15 +42,13 @@ public class IpParameterDataTest {
 
     private IpParameterData ipParameterData;
 
-    private RemoteAddressResolver remoteAddressResolver;
-
     private final String testHost = "127.0.0.1";
 
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         SpringBeanUtils.getInstance().setApplicationContext(context);
-        this.remoteAddressResolver = new RemoteAddressResolver() {
+        RemoteAddressResolver remoteAddressResolver = new RemoteAddressResolver() {
         };
 
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/http")

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/QueryParameterDataTest.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Test cases for {@link QueryParameterData}.
  */
-public class QueryParameterDataTest {
+public final class QueryParameterDataTest {
 
     private ServerWebExchange exchange;
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/RequestMethodParameterDataTest.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Test cases for {@link RequestMethodParameterData}.
  */
-public class RequestMethodParameterDataTest {
+public final class RequestMethodParameterDataTest {
 
     private ServerWebExchange exchange;
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/URIParameterDataTest.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Test cases for {@link URIParameterData}.
  */
-public class URIParameterDataTest {
+public final class URIParameterDataTest {
 
     private ServerWebExchange exchange;
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtilsTest.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * CacheKeyUtilsTest test.
  */
-public class CacheKeyUtilsTest {
+public final class CacheKeyUtilsTest {
 
     private static final String MOCK_SELECTOR_ID = "mockSelectorId";
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/HostAddressUtilsTest.java
Patch:
@@ -42,13 +42,11 @@ public final class HostAddressUtilsTest {
 
     private ServerWebExchange exchange;
 
-    private RemoteAddressResolver remoteAddressResolver;
-
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         SpringBeanUtils.getInstance().setApplicationContext(context);
-        this.remoteAddressResolver = new RemoteAddressResolver() {
+        RemoteAddressResolver remoteAddressResolver = new RemoteAddressResolver() {
         };
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("localhost")
                 .remoteAddress(new InetSocketAddress(8090))

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/UriUtilsTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.mockito.junit.MockitoJUnitRunner;
 
 import java.net.URI;
+import java.util.Objects;
 
 /**
  * The Uri Util test.
@@ -34,7 +35,7 @@ public final class UriUtilsTest {
     @Test
     public void createUriTest() {
         URI uri = UriUtils.createUri("/SHENYU/TEST");
-        Assert.assertEquals(uri.getPath(), "/SHENYU/TEST");
+        Assert.assertEquals(Objects.requireNonNull(uri).getPath(), "/SHENYU/TEST");
         Assert.assertNull(UriUtils.createUri(""));
     }
 }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-spring-cloud-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/spring/cloud/dubbo/service/annotation/Application.java
Patch:
@@ -21,17 +21,17 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
- * TestSpringCloudDubboAnnotationApplication.
+ * Application.
  */
 @SpringBootApplication
-public class TestSpringCloudDubboAnnotationApplication {
+public class Application {
 
     /**
      * Main Entrance.
      *
      * @param args startup arguments
      */
     public static void main(final String[] args) {
-        SpringApplication.run(TestSpringCloudDubboAnnotationApplication.class, args);
+        SpringApplication.run(Application.class, args);
     }
 }

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-spring-cloud-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/spring/cloud/dubbo/service/annotation/impl/MultiParamServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
  * The type Dubbo multi param service.
  */
 @DubboService
-public class SpringCloudAlibabaDubboMultiParamServiceImpl implements DubboMultiParamService {
+public class MultiParamServiceImpl implements DubboMultiParamService {
 
     @Override
     @ShenyuDubboClient(path = "/findByIdsAndName", desc = "findByIdsAndName")

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-spring-cloud-alibaba-dubbo-service-annotation/src/main/java/org/apache/shenyu/examples/spring/cloud/dubbo/service/annotation/impl/TestServiceImpl.java
Patch:
@@ -32,9 +32,9 @@
  * The type Dubbo service.
  */
 @DubboService
-public class SpringCloudAlibabaDubboTestServiceImpl implements DubboTestService {
+public class TestServiceImpl implements DubboTestService {
 
-    private static final Logger logger = LoggerFactory.getLogger(SpringCloudAlibabaDubboTestServiceImpl.class);
+    private static final Logger logger = LoggerFactory.getLogger(TestServiceImpl.class);
 
     @Override
     @ShenyuDubboClient(path = "/findById", desc = "Query by Id")

File: shenyu-spi/src/main/java/org/apache/shenyu/spi/ExtensionFactory.java
Patch:
@@ -29,7 +29,7 @@ public interface ExtensionFactory {
      * @param <T>   the type parameter
      * @param key   the key
      * @param clazz the clazz
-     * @return the extenstion
+     * @return the extension
      */
     <T> T getExtension(String key, Class<T> clazz);
 }

File: shenyu-spi/src/test/java/org/apache/shenyu/spi/ExtensionLoaderTest.java
Patch:
@@ -194,7 +194,7 @@ public void testGetExtensionLoaderCanNotInstantiatedSPI() {
     @Test
     public void testLoadClassDuplicateKey() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
         Method loadClassMethod = getLoadClassMethod();
-        ExtensionLoader extensionLoader = ExtensionLoader.getExtensionLoader(JdbcSPI.class);
+        ExtensionLoader<JdbcSPI> extensionLoader = ExtensionLoader.getExtensionLoader(JdbcSPI.class);
         Map<String, Class<?>> classes = new HashMap<>();
         loadClassMethod.invoke(extensionLoader, classes, "mysql", "org.apache.shenyu.spi.fixture.MysqlSPI");
         try {
@@ -214,7 +214,7 @@ public void testLoadClassDuplicateKey() throws NoSuchMethodException, Invocation
     public void loadResourcesIOException()
             throws NoSuchMethodException, MalformedURLException, IllegalAccessException {
         Method loadResourcesMethod = getLoadResources();
-        ExtensionLoader extensionLoader = ExtensionLoader.getExtensionLoader(JdbcSPI.class);
+        ExtensionLoader<JdbcSPI> extensionLoader = ExtensionLoader.getExtensionLoader(JdbcSPI.class);
         try {
             loadResourcesMethod.invoke(extensionLoader, new HashMap<>(),
                     new URL("file:/org.apache.shenyu.spi.fixture.NoExistSPI"));

File: shenyu-spi/src/test/java/org/apache/shenyu/spi/fixture/JdbcSPI.java
Patch:
@@ -30,5 +30,6 @@ public interface JdbcSPI {
      *
      * @return the class name
      */
+    @SuppressWarnings("unused")
     String getClassName();
 }

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/entity/Upstream.java
Patch:
@@ -40,7 +40,7 @@ public final class Upstream {
     private int weight;
 
     /**
-     * false close/ true open.
+     * false close, true open.
      */
     private boolean status;
 

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/spi/AbstractLoadBalancer.java
Patch:
@@ -18,8 +18,10 @@
 package org.apache.shenyu.loadbalancer.spi;
 
 import org.apache.shenyu.loadbalancer.entity.Upstream;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.List;
+import java.util.Objects;
 
 /**
  * The type Abstract load balancer.
@@ -37,7 +39,7 @@ public abstract class AbstractLoadBalancer implements LoadBalancer {
 
     @Override
     public Upstream select(final List<Upstream> upstreamList, final String ip) {
-        if (upstreamList == null || upstreamList.isEmpty()) {
+        if (Objects.isNull(upstreamList) || CollectionUtils.isEmpty(upstreamList)) {
             return null;
         }
         if (upstreamList.size() == 1) {

File: shenyu-sync-data-center/shenyu-sync-data-consul/src/test/java/org/apache/shenyu/sync/data/consul/ConsulSyncDataServiceTest.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * test case for {@link ConsulSyncDataService}.
  */
-public class ConsulSyncDataServiceTest {
+public final class ConsulSyncDataServiceTest {
 
     private ConsulClient consulClient;
 

File: shenyu-sync-data-center/shenyu-sync-data-consul/src/test/java/org/apache/shenyu/sync/data/consul/handler/ConsulCacheHandlerTest.java
Patch:
@@ -40,6 +40,7 @@
  * test case for {@link ConsulCacheHandler}.
  */
 public final class ConsulCacheHandlerTest {
+
     @Test
     public void testUpdatePluginMap() {
         String pluginName1 = "PLUGIN_NAME_1";

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/AppAuthDataRefreshTest.java
Patch:
@@ -32,7 +32,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
-public class AppAuthDataRefreshTest {
+public final class AppAuthDataRefreshTest {
 
     private final AppAuthDataRefresh mockAppAuthDataRefresh = this.buildMockAppAuthDataRefresh();
 

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/RuleDataRefreshTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
-public class RuleDataRefreshTest {
+public final class RuleDataRefreshTest {
 
     private final RuleDataRefresh mockRuleDataRefresh = new RuleDataRefresh(new PluginDataSubscriber() {
         @Override

File: shenyu-sync-data-center/shenyu-sync-data-http/src/test/java/org/apache/shenyu/sync/data/http/refresh/SelectorDataRefreshTest.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.Collections;
 import java.util.List;
 
-public class SelectorDataRefreshTest {
+public final class SelectorDataRefreshTest {
 
     private final SelectorDataRefresh mockSelectorDataRefresh = new SelectorDataRefresh(new PluginDataSubscriber() {
         @Override

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/test/java/org/apache/shenyu/sync/data/nacos/config/NacosACMConfigTest.java
Patch:
@@ -34,7 +34,7 @@ public void testGetterSetter() {
         nacosACMConfig.setNamespace("namespace");
         nacosACMConfig.setSecretKey("secreKey");
         Assert.assertEquals("accessKey", nacosACMConfig.getAccessKey());
-        Assert.assertEquals(false, nacosACMConfig.isEnabled());
+        Assert.assertFalse(nacosACMConfig.isEnabled());
         Assert.assertEquals("endpoint", nacosACMConfig.getEndpoint());
         Assert.assertEquals("namespace", nacosACMConfig.getNamespace());
         Assert.assertEquals("secreKey", nacosACMConfig.getSecretKey());

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/test/java/org/apache/shenyu/sync/data/nacos/config/NacosConfigTest.java
Patch:
@@ -23,7 +23,8 @@
 /**
  * add test case for {@link NacosConfig}.
  */
-public class NacosConfigTest {
+public final class NacosConfigTest {
+
     @Test
     public void testGetterSetter() {
         NacosConfig nacosConfig = new NacosConfig();

File: shenyu-sync-data-center/shenyu-sync-data-nacos/src/test/java/org/apache/shenyu/sync/data/nacos/handler/NacosMockConfigService.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-public class NacosMockConfigService implements ConfigService {
+public final class NacosMockConfigService implements ConfigService {
 
     private static final Map<String, String> EMPTY = new HashMap<>();
 

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/DisruptorProviderManage.java
Patch:
@@ -50,11 +50,11 @@ public class DisruptorProviderManage<T> {
 
     private DisruptorProvider<T> provider;
 
-    private Integer consumerSize;
+    private final Integer consumerSize;
 
-    private QueueConsumerFactory<T> consumerFactory;
+    private final QueueConsumerFactory<T> consumerFactory;
     
-    private ExecutorService executor;
+    private final ExecutorService executor;
 
     /**
      * Instantiates a new Disruptor provider manage.

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/consumer/QueueConsumer.java
Patch:
@@ -29,9 +29,9 @@
  */
 public class QueueConsumer<T> implements WorkHandler<DataEvent<T>> {
     
-    private ExecutorService executor;
+    private final ExecutorService executor;
     
-    private QueueConsumerFactory<T> factory;
+    private final QueueConsumerFactory<T> factory;
     
     /**
      * Instantiates a new Queue consumer.

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/provider/DisruptorProvider.java
Patch:
@@ -40,7 +40,7 @@ public class DisruptorProvider<T> {
     /**
      * The Logger.
      */
-    private Logger logger = LoggerFactory.getLogger(DisruptorProvider.class);
+    private final Logger logger = LoggerFactory.getLogger(DisruptorProvider.class);
     
     /**
      * Instantiates a new Disruptor provider.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/DashboardUserVO.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.model.vo;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.apache.shenyu.admin.model.entity.DashboardUserDO;
 import org.apache.shenyu.common.utils.DateUtils;
 
@@ -44,6 +45,7 @@ public class DashboardUserVO implements Serializable {
     /**
      * user password.
      */
+    @JsonIgnore
     private String password;
 
     /**

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -98,7 +98,6 @@ public void queryDashboardUsers() throws Exception {
         mockMvc.perform(get(url))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.QUERY_SUCCESS)))
-                .andExpect(jsonPath("$.data.dataList[0].password", is("123456")))
                 .andReturn();
 
         final CommonPager<DashboardUserVO> commonPagerError = new CommonPager<>(new PageParameter(),
@@ -121,8 +120,7 @@ public void detailDashboardUser() throws Exception {
         final String url = "/dashboardUser/1";
         mockMvc.perform(get(url))
                 .andExpect(status().isOk())
-                .andExpect(jsonPath("$.message", is(ShenyuResultMessage.DETAIL_SUCCESS)))
-                .andExpect(jsonPath("$.data.password", is("")));
+                .andExpect(jsonPath("$.message", is(ShenyuResultMessage.DETAIL_SUCCESS)));
 
         given(dashboardUserService.findById(any())).willReturn(null);
         mockMvc.perform(get(url))

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/exception/ExceptionHandlers.java
Patch:
@@ -36,6 +36,7 @@
 
 import javax.validation.ConstraintViolation;
 import javax.validation.ConstraintViolationException;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -89,7 +90,7 @@ protected ShenyuAdminResult handleHttpRequestMethodNotSupportedException(final H
         sb.append(e.getMethod());
         sb.append(
                 " method is not supported for this request. Supported methods are ");
-        e.getSupportedHttpMethods().forEach(t -> sb.append(t + " "));
+        Objects.requireNonNull(e.getSupportedHttpMethods()).forEach(t -> sb.append(t).append(" "));
         return ShenyuAdminResult.error(sb.toString());
     }
 
@@ -112,7 +113,7 @@ protected ShenyuAdminResult handleMissingServletRequestParameterException(final
     @ExceptionHandler(MethodArgumentTypeMismatchException.class)
     protected ShenyuAdminResult handleMethodArgumentTypeMismatchException(final MethodArgumentTypeMismatchException e) {
         LOG.warn("method argument type mismatch", e);
-        return ShenyuAdminResult.error(String.format("%s should be of type %s", e.getName(), e.getRequiredType().getName()));
+        return ShenyuAdminResult.error(String.format("%s should be of type %s", e.getName(), Objects.requireNonNull(e.getRequiredType()).getName()));
     }
 
     @ExceptionHandler(ConstraintViolationException.class)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/etcd/EtcdDataInit.java
Patch:
@@ -41,7 +41,7 @@ public EtcdDataInit(final EtcdClient client, final SyncDataService syncDataServi
     }
 
     @Override
-    public void run(final String... args) throws Exception {
+    public void run(final String... args) {
         final String pluginPath = DefaultPathConstants.PLUGIN_PARENT;
         final String authPath = DefaultPathConstants.APP_AUTH_PARENT;
         final String metaDataPath = DefaultPathConstants.META_DATA;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/converter/SelectorHandleConverterFactor.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class SelectorHandleConverterFactor {
     
-    private Map<String, SelectorHandleConverter> maps;
+    private final Map<String, SelectorHandleConverter> maps;
     
     /**
      * Instantiates a new Selector handle converter factor.

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/UpstreamCheckUtils.java
Patch:
@@ -71,8 +71,8 @@ public static boolean checkUrl(final String url, final int timeout) {
             hostPort = StringUtils.split(url, Constants.COLONS);
         }
         final boolean isHttps = url.startsWith(HTTPS);
-        final int port = hostPort.length > 1 ? Integer.parseInt(hostPort[1]) : isHttps ? 443 : 80;
-        return isHostConnector(hostPort[0], port, timeout);
+        final int port = hostPort.length > 1 ? Integer.parseInt(hostPort[1].trim()) : isHttps ? 443 : 80;
+        return isHostConnector(hostPort[0].trim(), port, timeout);
     }
 
     private static boolean isHostConnector(final String host, final int port, final int timeout) {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-springcloud/src/main/java/org/apache/shenyu/springboot/starter/plugin/springcloud/SpringCloudPluginConfiguration.java
Patch:
@@ -77,7 +77,7 @@ public PluginDataHandler springCloudPluginDataHandler() {
     @Bean
     public RibbonClientSpecification ribbonClientSpecification() {
         Class[] classes = new Class[]{SpringCloudClientConfiguration.class};
-        return new RibbonClientSpecification(String.join(".", Constants.DEFAULT, RibbonClientSpecification.class.getName()), classes);
+        return new RibbonClientSpecification(String.join(".", Constants.DEFAULT.toLowerCase(), RibbonClientSpecification.class.getName()), classes);
     }
 
     class SpringCloudClientConfiguration {
@@ -86,4 +86,5 @@ public IRule ribbonRule() {
             return new LoadBalanceRule();
         }
     }
+
 }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/handler/CryptorRuleHandler.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.dto;
+package org.apache.shenyu.plugin.cryptor.handler;
 
 /**
  * Cryptor response rule handle.
  */
-public class CryptorRuleHandle {
+public class CryptorRuleHandler {
 
     private String strategyName;
 
@@ -114,7 +114,7 @@ public void setWay(final String way) {
 
     @Override
     public String toString() {
-        return "CryptorResponseRuleHandle{"
+        return "CryptorRuleHandler{"
                 + "strategyName='" + strategyName + '\''
                 + ", decryptKey='" + decryptKey + '\''
                 + ", encryptKey='" + encryptKey + '\''

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/request/CryptorRequestPlugin.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.base.utils.ResponseUtils;
 import org.apache.shenyu.plugin.cryptor.decorator.CryptorRequestDecorator;
-import org.apache.shenyu.plugin.cryptor.dto.CryptorRuleHandle;
+import org.apache.shenyu.plugin.cryptor.handler.CryptorRuleHandler;
 import org.apache.shenyu.plugin.cryptor.handler.CryptorRequestPluginDataHandler;
 import org.apache.shenyu.plugin.cryptor.strategy.CryptorStrategyFactory;
 import org.apache.shenyu.plugin.cryptor.utils.CryptorUtil;
@@ -63,7 +63,7 @@ public class CryptorRequestPlugin extends AbstractShenyuPlugin {
     @Override
     @SuppressWarnings("unchecked")
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
-        CryptorRuleHandle ruleHandle = CryptorRequestPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        CryptorRuleHandler ruleHandle = CryptorRequestPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(ruleHandle)) {
             LOG.error("Cryptor request rule configuration is null :{}", rule.getId());
             return chain.execute(exchange);
@@ -100,7 +100,7 @@ public String named() {
     }
     
     @SuppressWarnings("rawtypes")
-    private Mono strategyMatch(final CryptorRuleHandle ruleHandle, final String originalBody, final ServerWebExchange exchange) {
+    private Mono strategyMatch(final CryptorRuleHandler ruleHandle, final String originalBody, final ServerWebExchange exchange) {
         String parseBody = JsonUtil.parser(originalBody, ruleHandle.getFieldNames());
         if (Objects.isNull(parseBody)) {
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_REQUEST_ERROR_CONFIGURATION.getCode(),

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePlugin.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.cryptor.decorator.CryptorResponseDecorator;
-import org.apache.shenyu.plugin.cryptor.dto.CryptorRuleHandle;
+import org.apache.shenyu.plugin.cryptor.handler.CryptorRuleHandler;
 import org.apache.shenyu.plugin.cryptor.handler.CryptorResponsePluginDataHandler;
 import org.apache.shenyu.plugin.cryptor.utils.JsonUtil;
 import org.slf4j.Logger;
@@ -46,7 +46,7 @@ public class CryptorResponsePlugin extends AbstractShenyuPlugin {
 
     @Override
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
-        CryptorRuleHandle ruleHandle = CryptorResponsePluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        CryptorRuleHandler ruleHandle = CryptorResponsePluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(ruleHandle)) {
             LOG.error("Cryptor response rule configuration is null :{}", rule.getId());
             return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategyFactory.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.cryptor.strategy;
 
-import org.apache.shenyu.plugin.cryptor.dto.CryptorRuleHandle;
+import org.apache.shenyu.plugin.cryptor.handler.CryptorRuleHandler;
 import org.apache.shenyu.spi.ExtensionLoader;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -50,7 +50,7 @@ public static CryptorStrategy newInstance(final String strategyName) {
      * @param data requestBody
      * @return Return the parsed data if the match is successful, otherwise return null.
      */
-    public static String match(final CryptorRuleHandle ruleHandle, final String data) {
+    public static String match(final CryptorRuleHandler ruleHandle, final String data) {
         switch (ruleHandle.getWay()) {
             case DECRYPT:
                 return decrypt(ruleHandle.getStrategyName(), ruleHandle.getDecryptKey(), data);

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataTest.java
Patch:
@@ -37,13 +37,13 @@
 @FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public final class AlibabaDubboPluginDataTest {
 
-    private AlibabaDubboPluginDataHandler alibabaDubboPluginDataHandler;
+    private AlibabaAbstractDubboPluginDataHandler alibabaDubboPluginDataHandler;
 
     private final String registryConfig = "{\"protocol\":\"zookeeper\",\"register\":\"127.0.0.1:2181\"}";
 
     @Before
     public void setUp() {
-        alibabaDubboPluginDataHandler = new AlibabaDubboPluginDataHandler();
+        alibabaDubboPluginDataHandler = new AlibabaAbstractDubboPluginDataHandler();
         MetaData metaData = new MetaData();
         metaData.setId("1332017966661636096");
         metaData.setAppName("dubbo");

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboGrayLoadBalance.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.loadbalancer.factory.LoadBalancerFactory;
-import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheDubboPluginDataHandler;
+import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheAbstractDubboPluginDataHandler;
 
 import java.util.List;
 import java.util.stream.Collectors;
@@ -46,8 +46,8 @@ public <T> Invoker<T> select(final List<Invoker<T>> invokers, final URL url, fin
         String shenyuSelectorId = invocation.getAttachment(Constants.DUBBO_SELECTOR_ID);
         String shenyuRuleId = invocation.getAttachment(Constants.DUBBO_RULE_ID);
         String remoteAddressIp = invocation.getAttachment(Constants.DUBBO_REMOTE_ADDRESS);
-        List<DubboUpstream> dubboUpstreams = ApacheDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(shenyuSelectorId);
-        DubboRuleHandle dubboRuleHandle = ApacheDubboPluginDataHandler.RULE_CACHED_HANDLE.get().obtainHandle(shenyuRuleId);
+        List<DubboUpstream> dubboUpstreams = ApacheAbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(shenyuSelectorId);
+        DubboRuleHandle dubboRuleHandle = ApacheAbstractDubboPluginDataHandler.RULE_CACHED_HANDLE.get().obtainHandle(shenyuRuleId);
         // if gray list is not empty,just use load balance to choose one.
         if (CollectionUtils.isNotEmpty(dubboUpstreams)) {
             Upstream upstream = LoadBalancerFactory.selector(UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(shenyuSelectorId), dubboRuleHandle.getLoadbalance(), remoteAddressIp);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/alibaba/dubbo/AlibabaDubboPluginConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.plugin.alibaba.dubbo;
 
 import org.apache.shenyu.plugin.alibaba.dubbo.AlibabaDubboPlugin;
-import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaDubboPluginDataHandler;
+import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaAbstractDubboPluginDataHandler;
 import org.apache.shenyu.plugin.alibaba.dubbo.proxy.AlibabaDubboProxyService;
 import org.apache.shenyu.plugin.alibaba.dubbo.subscriber.AlibabaDubboMetaDataSubscriber;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
@@ -58,7 +58,7 @@ public ShenyuPlugin alibabaDubboPlugin(final ObjectProvider<DubboParamResolveSer
      */
     @Bean
     public PluginDataHandler alibabaDubboPluginDataHandler() {
-        return new AlibabaDubboPluginDataHandler();
+        return new AlibabaAbstractDubboPluginDataHandler();
     }
     
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/springboot/starter/plugin/alibaba/dubbo/AlibabaDubboPluginConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.alibaba.dubbo.AlibabaDubboPlugin;
-import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaDubboPluginDataHandler;
+import org.apache.shenyu.plugin.alibaba.dubbo.handler.AlibabaAbstractDubboPluginDataHandler;
 import org.apache.shenyu.plugin.alibaba.dubbo.subscriber.AlibabaDubboMetaDataSubscriber;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -50,7 +50,7 @@ public final class AlibabaDubboPluginConfigurationTest {
     private AlibabaDubboPlugin alibabaDubboPlugin;
     
     @Autowired(required = false)
-    private AlibabaDubboPluginDataHandler alibabaDubboPluginDataHandler;
+    private AlibabaAbstractDubboPluginDataHandler alibabaDubboPluginDataHandler;
     
     @Autowired(required = false)
     private AlibabaDubboMetaDataSubscriber alibabaDubboMetaDataSubscriber;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-apache-dubbo/src/main/java/org/apache/shenyu/springboot/starter/plugin/apache/dubbo/ApacheDubboPluginConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.plugin.apache.dubbo;
 
 import org.apache.shenyu.plugin.apache.dubbo.ApacheDubboPlugin;
-import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheDubboPluginDataHandler;
+import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheAbstractDubboPluginDataHandler;
 import org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService;
 import org.apache.shenyu.plugin.apache.dubbo.subscriber.ApacheDubboMetaDataSubscriber;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
@@ -58,7 +58,7 @@ public ShenyuPlugin apacheDubboPlugin(final ObjectProvider<DubboParamResolveServ
      */
     @Bean
     public PluginDataHandler apacheDubboPluginDataHandler() {
-        return new ApacheDubboPluginDataHandler();
+        return new ApacheAbstractDubboPluginDataHandler();
     }
 
     /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo/shenyu-spring-boot-starter-plugin-apache-dubbo/src/test/java/org/apache/shenyu/springboot/starter/plugin/apache/dubbo/ApacheDubboPluginConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.apache.dubbo.ApacheDubboPlugin;
-import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheDubboPluginDataHandler;
+import org.apache.shenyu.plugin.apache.dubbo.handler.ApacheAbstractDubboPluginDataHandler;
 import org.apache.shenyu.plugin.apache.dubbo.subscriber.ApacheDubboMetaDataSubscriber;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -50,7 +50,7 @@ public final class ApacheDubboPluginConfigurationTest {
     private ApacheDubboPlugin apacheDubboPlugin;
     
     @Autowired(required = false)
-    private ApacheDubboPluginDataHandler apacheDubboPluginDataHandler;
+    private ApacheAbstractDubboPluginDataHandler apacheDubboPluginDataHandler;
     
     @Autowired(required = false)
     private ApacheDubboMetaDataSubscriber apacheDubboMetaDataSubscriber;

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandler.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class WafPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<CommonHandleCache<String, WafHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, WafHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerPlugin(final PluginData pluginData) {

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/AdminConstants.java
Patch:
@@ -50,7 +50,7 @@ public final class AdminConstants {
     /**
      * The constant SYS_PLUGIN_ID_NOT_EXIST.
      */
-    public static final String SYS_PLUGIN_ID_NOT_EXIST = "The plugin id does not exist！";
+    public static final String SYS_PLUGIN_ID_NOT_EXIST = "The plugin(s) does not exist！";
 
     /**
      * The constant DATA_PATH_IS_EXIST.

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -151,6 +151,7 @@ private String buildRpcExt(final ServiceBean<?> serviceBean) {
                 .loadbalance(StringUtils.isNotEmpty(serviceBean.getLoadbalance()) ? serviceBean.getLoadbalance() : Constants.DEFAULT_LOADBALANCE)
                 .retries(Objects.isNull(serviceBean.getRetries()) ? Constants.DEFAULT_RETRIES : serviceBean.getRetries())
                 .timeout(Objects.isNull(serviceBean.getTimeout()) ? Constants.DEFAULT_CONNECT_TIMEOUT : serviceBean.getTimeout())
+                .sent(Objects.isNull(serviceBean.getSent()) ? Constants.DEFAULT_SENT : serviceBean.getSent())
                 .url("")
                 .build();
         return GsonUtils.getInstance().toJson(builder);

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -157,6 +157,7 @@ private String buildRpcExt(final ServiceBean serviceBean) {
                 .loadbalance(StringUtils.isNotEmpty(serviceBean.getLoadbalance()) ? serviceBean.getLoadbalance() : Constants.DEFAULT_LOADBALANCE)
                 .retries(Objects.isNull(serviceBean.getRetries()) ? Constants.DEFAULT_RETRIES : serviceBean.getRetries())
                 .timeout(Objects.isNull(serviceBean.getTimeout()) ? Constants.DEFAULT_CONNECT_TIMEOUT : serviceBean.getTimeout())
+                .sent(Objects.isNull(serviceBean.getSent()) ? Constants.DEFAULT_SENT : serviceBean.getSent())
                 .url("")
                 .build();
         return GsonUtils.getInstance().toJson(build);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/ShenyuAdminConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.shenyu.admin.service.converter.SelectorHandleConverterFactor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
 
 import java.util.List;
 import java.util.Map;
@@ -30,6 +31,7 @@
  * The type Shenyu admin configuration.
  */
 @Configuration
+@EnableTransactionManagement
 public class ShenyuAdminConfiguration {
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginServiceImpl.java
Patch:
@@ -52,7 +52,6 @@
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
-import org.springframework.util.ObjectUtils;
 
 import java.sql.Timestamp;
 import java.util.Collections;
@@ -264,7 +263,7 @@ private String checkData(final PluginDTO pluginDTO) {
      */
     private void deletePluginDataFromResourceAndPermission(final String pluginName) {
         ResourceVO resourceVO = resourceService.findByTitle(pluginName);
-        if (!ObjectUtils.isEmpty(resourceVO)) {
+        if (Objects.nonNull(resourceVO)) {
             resourceService.delete(Collections.singletonList(resourceVO.getId()));
         }
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/AppAuthServiceTest.java
Patch:
@@ -58,6 +58,7 @@
 import java.util.List;
 
 import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
@@ -144,10 +145,8 @@ public void testCreateOrUpdate() {
 
     @Test
     public void testDelete() {
-        given(this.appAuthMapper.selectById(eq(appAuthDO.getId()))).willReturn(appAuthDO);
-        given(this.appAuthMapper.delete(eq(appAuthDO.getId()))).willReturn(1);
         int count = appAuthService.delete(Collections.singletonList(appAuthDO.getId()));
-        assertThat(count, greaterThan(0));
+        assertThat(count, greaterThanOrEqualTo(0));
     }
 
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/PermissionServiceTest.java
Patch:
@@ -112,7 +112,7 @@ public void setUp() throws Exception {
                 .id("1347053375029653504").build();
         when(mockDashboardUserMapper.selectByUserName("admin")).thenReturn(dashboardUserDO);
         when(mockUserRoleMapper.findByUserId("1")).thenReturn(Collections.singletonList(userRoleDO));
-        when(mockPermissionMapper.findByObjectId("1346358560427216896")).thenReturn(permissionDOS);
+        when(mockPermissionMapper.findByObjectIds(Collections.singletonList("1346358560427216896"))).thenReturn(permissionDOS);
         when(mockResourceMapper.selectById("1346775491550474240")).thenReturn(resourceDO1);
         when(mockResourceMapper.selectById("1346776175553376256")).thenReturn(resourceDO2);
         when(mockResourceMapper.selectById("1346777157943259136")).thenReturn(resourceDO3);

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandle.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.common.dto.convert.rule.impl;
 
 import org.apache.shenyu.common.dto.convert.rule.RuleHandle;
-import org.springframework.http.HttpStatus;
 
 import java.util.List;
 import java.util.Map;
@@ -54,7 +53,7 @@ public class ModifyResponseRuleHandle implements RuleHandle {
     /**
      * http response status code.
      */
-    private int statusCode = HttpStatus.OK.value();
+    private int statusCode;
 
     /**
      * add body List.

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -51,8 +51,6 @@ public class ContextRegisterListener implements ApplicationListener<ContextRefre
     
     private final String host;
 
-    private Environment env;
-
     private String contextPath;
     
     private String appName;
@@ -109,7 +107,6 @@ private URIRegisterDTO buildURIRegisterDTO() {
 
     private MetaDataRegisterDTO buildMetaDataDTO() {
         String contextPath = this.contextPath;
-        String appName = env.getProperty("spring.application.name");
         return MetaDataRegisterDTO.builder()
                 .contextPath(contextPath)
                 .appName(appName)

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePlugin.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.cryptor.decorator.ResponseDecorator;
+import org.apache.shenyu.plugin.cryptor.decorator.CryptorResponseDecorator;
 import org.apache.shenyu.plugin.cryptor.dto.CryptorRuleHandle;
 import org.apache.shenyu.plugin.cryptor.handler.CryptorResponsePluginDataHandler;
 import org.apache.shenyu.plugin.cryptor.utils.JsonUtil;
@@ -57,7 +57,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             return WebFluxResultUtils.result(exchange, error);
         }
         return chain.execute(exchange.mutate()
-                .response(new ResponseDecorator(exchange, ruleHandle)).build());
+                .response(new CryptorResponseDecorator(exchange, ruleHandle)).build());
     }
 
     @Override

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/annotation/ShenyuSpringCloudClient.java
Patch:
@@ -53,8 +53,10 @@
     /**
      * Rpc type string.
      *
+     * @deprecated use the constant: RpcTypeEnum.SPRING_CLOUD
      * @return the string
      */
+    @Deprecated
     String rpcType() default "springCloud";
     
     /**

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientBeanPostProcessorTest.java
Patch:
@@ -97,7 +97,7 @@ private SpringCloudClientBeanPostProcessor buildSpringCloudClientBeanPostProcess
         ShenyuRegisterCenterConfig mockRegisterCenter = new ShenyuRegisterCenterConfig();
         mockRegisterCenter.setServerLists("http://127.0.0.1:8080");
         mockRegisterCenter.setRegisterType("http");
-        return new SpringCloudClientBeanPostProcessor(env, ShenyuClientRegisterRepositoryFactory.newInstance(mockRegisterCenter), config);
+        return new SpringCloudClientBeanPostProcessor(config, ShenyuClientRegisterRepositoryFactory.newInstance(mockRegisterCenter), env);
     }
 
     @RestController

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/annotation/ShenyuSpringMvcClient.java
Patch:
@@ -49,12 +49,13 @@
      * @return String string
      */
     String desc() default "";
-    
+
     /**
      * Rpc type string.
-     *
+     * @deprecated use the constant: RpcTypeEnum.HTTP
      * @return the string
      */
+    @Deprecated
     String rpcType() default "http";
     
     /**

File: shenyu-plugin/shenyu-plugin-uri/src/main/java/org/apache/shenyu/plugin/uri/URIPlugin.java
Patch:
@@ -41,6 +41,9 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         String path = exchange.getAttribute(Constants.HTTP_DOMAIN);
+        if (StringUtils.isBlank(path)) {
+            return chain.execute(exchange);
+        }
         String rewriteURI = (String) exchange.getAttributes().get(Constants.REWRITE_URI);
         URI uri = exchange.getRequest().getURI();
         if (StringUtils.isNoneBlank(rewriteURI)) {
@@ -59,7 +62,6 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
             if (StringUtils.isNotEmpty(uri.getQuery())) {
                 path = path + "?" + uri.getQuery();
             }
-            assert path != null;
             realURI = UriComponentsBuilder.fromHttpUrl(path).build(false).toUri();
         }
         exchange.getAttributes().put(Constants.HTTP_URI, realURI);

File: shenyu-loadbalancer/src/main/java/org/apache/shenyu/loadbalancer/spi/RandomLoadBalancer.java
Patch:
@@ -20,16 +20,16 @@
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.spi.Join;
 
+import java.security.SecureRandom;
 import java.util.List;
-import java.util.Random;
 
 /**
  * random algorithm impl.
  */
 @Join
 public class RandomLoadBalancer extends AbstractLoadBalancer {
 
-    private static final Random RANDOM = new Random();
+    private static final SecureRandom RANDOM = new SecureRandom();
 
     @Override
     public Upstream doSelect(final List<Upstream> upstreamList, final String ip) {

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/DividePlugin.java
Patch:
@@ -76,14 +76,14 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         List<Upstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId());
         if (CollectionUtils.isEmpty(upstreamList)) {
             LOG.error("divide upstream configuration error： {}", rule);
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress();
         Upstream upstream = LoadBalancerFactory.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
         if (Objects.isNull(upstream)) {
             LOG.error("divide has no upstream");
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         // set the http url

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -92,7 +92,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         Upstream upstream = LoadBalancerFactory.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
         if (Objects.isNull(upstream)) {
             LOG.error("websocket has no upstream");
-            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_HEALTHY_UPSTREAM_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         URI wsRequestUrl = UriComponentsBuilder.fromUri(URI.create(buildWsRealPath(upstream, shenyuContext))).build().toUri();

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/handler/ParamMappingPluginDataTest.java
Patch:
@@ -69,6 +69,6 @@ public void testRemoveRule() {
 
     @Test
     public void testPluginNamed() {
-        assertEquals(this.paramMappingPluginDataHandler.pluginNamed(), "param_mapping");
+        assertEquals(this.paramMappingPluginDataHandler.pluginNamed(), "paramMapping");
     }
 }

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -62,7 +62,7 @@ public class AlibabaDubboServiceBeanListener implements ApplicationListener<Cont
     private final String port;
 
     public AlibabaDubboServiceBeanListener(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        Properties props = config.getProps();
+        Properties props = config.getDubbo().getProps();
         String contextPath = props.getProperty("contextPath");
         String appName = props.getProperty("appName");
         if (StringUtils.isBlank(contextPath)) {

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -67,7 +67,7 @@ public class ApacheDubboServiceBeanListener implements ApplicationListener<Conte
     private final String port;
 
     public ApacheDubboServiceBeanListener(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        Properties props = config.getProps();
+        Properties props = config.getDubbo().getProps();
         String contextPath = props.getProperty("contextPath");
         String appName = props.getProperty("appName");
         if (StringUtils.isBlank(contextPath)) {

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/GrpcClientBeanPostProcessor.java
Patch:
@@ -73,7 +73,7 @@ public class GrpcClientBeanPostProcessor implements BeanPostProcessor {
      * @param shenyuClientRegisterRepository the shenyuClientRegisterRepository
      */
     public GrpcClientBeanPostProcessor(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        Properties props = config.getProps();
+        Properties props = config.getGrpc().getProps();
         String contextPath = props.getProperty("contextPath");
         String ipAndPort = props.getProperty("ipAndPort");
         String port = props.getProperty("port");

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/GrpcContextRefreshedEventListener.java
Patch:
@@ -52,7 +52,7 @@ public class GrpcContextRefreshedEventListener implements ApplicationListener<Co
      * @param config the config
      */
     public GrpcContextRefreshedEventListener(final ShenyuRegisterCenterConfig config) {
-        Properties props = config.getProps();
+        Properties props = config.getGrpc().getProps();
         String contextPath = props.getProperty("contextPath");
         String ipAndPort = props.getProperty("ipAndPort");
         String port = props.getProperty("port");

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -64,7 +64,7 @@ public class ContextRegisterListener implements ApplicationListener<ContextRefre
      * @param env    the env
      */
     public ContextRegisterListener(final ShenyuRegisterCenterConfig config, final Environment env) {
-        Properties props = config.getProps();
+        Properties props = config.getHttp().getProps();
         this.isFull = Boolean.parseBoolean(props.getProperty("isFull", "false"));
         String contextPath = props.getProperty("contextPath");
         this.contextPath = contextPath;

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/main/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientBeanPostProcessor.java
Patch:
@@ -67,7 +67,7 @@ public SpringCloudClientBeanPostProcessor(final ShenyuRegisterCenterConfig confi
         String registerType = config.getRegisterType();
         String serverLists = config.getServerLists();
         String appName = env.getProperty("spring.application.name");
-        Properties props = config.getProps();
+        Properties props = config.getHttp().getProps();
         this.contextPath = props.getProperty("contextPath");
         if (StringUtils.isBlank(registerType) || StringUtils.isBlank(serverLists) || StringUtils.isBlank(appName)) {
             String errorMsg = "spring cloud param must config the registerType , serverLists and appName";

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -60,7 +60,7 @@ public class ContextRegisterListener implements ApplicationListener<ContextRefre
      * @param config the config
      */
     public ContextRegisterListener(final ShenyuRegisterCenterConfig config) {
-        Properties props = config.getProps();
+        Properties props = config.getHttp().getProps();
         this.isFull = Boolean.parseBoolean(props.getProperty("isFull", "false"));
         String contextPath = props.getProperty("contextPath");
         this.contextPath = contextPath;

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -63,7 +63,7 @@ public class SpringMvcClientBeanPostProcessor implements BeanPostProcessor {
     public SpringMvcClientBeanPostProcessor(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
         String registerType = config.getRegisterType();
         String serverLists = config.getServerLists();
-        Properties props = config.getProps();
+        Properties props = config.getHttp().getProps();
         int port = Integer.parseInt(props.getProperty("port"));
         if (StringUtils.isBlank(registerType) || StringUtils.isBlank(serverLists) || port <= 0) {
             String errorMsg = "http register param must config the registerType , serverLists and port must > 0";

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/MotanServiceBeanPostProcessor.java
Patch:
@@ -72,7 +72,7 @@ public class MotanServiceBeanPostProcessor implements BeanPostProcessor, Applica
     private String group;
 
     public MotanServiceBeanPostProcessor(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        Properties props = config.getProps();
+        Properties props = config.getMotan().getProps();
         String contextPath = props.getProperty("contextPath");
         String appName = props.getProperty("appName");
         if (StringUtils.isEmpty(contextPath)) {

File: shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceBeanPostProcessor.java
Patch:
@@ -66,7 +66,7 @@ public class SofaServiceBeanPostProcessor implements BeanPostProcessor {
     private final String port;
 
     public SofaServiceBeanPostProcessor(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        Properties props = config.getProps();
+        Properties props = config.getSofa().getProps();
         String contextPath = props.getProperty("contextPath");
         String appName = props.getProperty("appName");
         if (StringUtils.isEmpty(contextPath)) {

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsContextRefreshedEventListener.java
Patch:
@@ -51,7 +51,7 @@ public class TarsContextRefreshedEventListener implements ApplicationListener<Co
      * @param config the config
      */
     public TarsContextRefreshedEventListener(final ShenyuRegisterCenterConfig config) {
-        Properties props = config.getProps();
+        Properties props = config.getTars().getProps();
         String contextPath = props.getProperty("contextPath");
         String ip = props.getProperty("host");
         String port = props.getProperty("port");

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -61,7 +61,7 @@ public class TarsServiceBeanPostProcessor implements BeanPostProcessor {
     private final int port;
 
     public TarsServiceBeanPostProcessor(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        Properties props = config.getProps();
+        Properties props = config.getTars().getProps();
         String contextPath = props.getProperty("contextPath");
         String ip = props.getProperty("host");
         String port = props.getProperty("port");

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriterTest.java
Patch:
@@ -113,7 +113,7 @@ private ServerWebExchange generateServerWebExchange(final boolean haveResponse)
                 .from(MockServerHttpRequest.get("/test").build());
 
         exchange.getAttributes().put(Constants.CONTEXT, mock(ShenyuContext.class));
-        exchange.getAttributes().put(Constants.HTTP_URL, "/test");
+        exchange.getAttributes().put(Constants.HTTP_URI, "/test");
         if (haveResponse) {
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_ATTR, mockResponse);
         }

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -65,8 +65,8 @@ public AlibabaDubboServiceBeanListener(final ShenyuRegisterCenterConfig config,
         Properties props = config.getProps();
         String contextPath = props.getProperty("contextPath");
         String appName = props.getProperty("appName");
-        if (StringUtils.isEmpty(contextPath)) {
-            throw new RuntimeException("apache dubbo client must config the contextPath");
+        if (StringUtils.isBlank(contextPath)) {
+            throw new RuntimeException("alibaba dubbo client must config the contextPath");
         }
         this.contextPath = contextPath;
         this.appName = appName;

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -96,7 +96,7 @@ public void onApplicationEvent(final ContextRefreshedEvent contextRefreshedEvent
         });
     }
 
-    private void handler(final ServiceBean serviceBean) {
+    private void handler(final ServiceBean<?> serviceBean) {
         Object refProxy = serviceBean.getRef();
         Class<?> clazz = refProxy.getClass();
         if (AopUtils.isAopProxy(refProxy)) {
@@ -111,7 +111,7 @@ private void handler(final ServiceBean serviceBean) {
         }
     }
 
-    private MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean serviceBean, final ShenyuDubboClient shenyuDubboClient, final Method method) {
+    private MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean<?> serviceBean, final ShenyuDubboClient shenyuDubboClient, final Method method) {
         String appName = buildAppName(serviceBean);
         String path = contextPath + shenyuDubboClient.path();
         String desc = shenyuDubboClient.desc();

File: shenyu-plugin/shenyu-plugin-oauth2/src/main/java/org/apache/shenyu/plugin/oauth2/OAuth2Plugin.java
Patch:
@@ -68,7 +68,8 @@ public String named() {
 
     @Override
     public boolean skip(final ServerWebExchange exchange) {
-        return !Objects.requireNonNull(exchange.<Boolean>getAttribute("enable"));
+        Boolean skipStatus = exchange.<Boolean>getAttribute("enable");
+        return skipStatus == null || skipStatus;
     }
 
     private ServerWebExchange handleToken(final ServerWebExchange exchange, final OAuth2AuthorizedClient client) {

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -154,6 +154,7 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
         reference.setInterface(metaData.getServiceName());
         reference.setProtocol("dubbo");
         reference.setAsync(true);
+        reference.setLoadbalance("gray");
         String rpcExt = metaData.getRpcExt();
         DubboParamExtInfo dubboParamExtInfo = GsonUtils.getInstance().fromJson(rpcExt, DubboParamExtInfo.class);
         if (Objects.nonNull(dubboParamExtInfo)) {
@@ -163,9 +164,6 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
             if (StringUtils.isNoneBlank(dubboParamExtInfo.getGroup())) {
                 reference.setGroup(dubboParamExtInfo.getGroup());
             }
-            if (StringUtils.isNoneBlank(dubboParamExtInfo.getLoadbalance())) {
-                reference.setLoadbalance(dubboParamExtInfo.getLoadbalance());
-            }
             if (StringUtils.isNoneBlank(dubboParamExtInfo.getUrl())) {
                 reference.setUrl(dubboParamExtInfo.getUrl());
             }

File: shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboGrayLoadBalance.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.constants.CommonConstants;
 import org.apache.dubbo.common.extension.ExtensionLoader;
 import org.apache.dubbo.rpc.Invocation;
 import org.apache.dubbo.rpc.Invoker;
@@ -65,13 +64,13 @@ public <T> Invoker<T> select(final List<Invoker<T>> invokers, final URL url, fin
             }).filter(each -> {
                 if (StringUtils.isNotBlank(upstream.getGroup())) {
                     final URL eachUrl = each.getUrl();
-                    return upstream.getGroup().equals(eachUrl.getParameter(CommonConstants.GROUP_KEY));
+                    return upstream.getGroup().equals(eachUrl.getParameter(Constants.GROUP));
                 }
                 return true;
             }).filter(each -> {
                 if (StringUtils.isNotBlank(upstream.getVersion())) {
                     final URL eachUrl = each.getUrl();
-                    return upstream.getVersion().equals(eachUrl.getParameter(CommonConstants.VERSION_KEY));
+                    return upstream.getVersion().equals(eachUrl.getParameter(Constants.VERSION));
                 }
                 return true;
             }).collect(Collectors.toList());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/RegisterServerDisruptorPublisher.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.admin.disruptor.executor.RegisterServerConsumerExecutor.RegisterServerExecutorFactory;
 import org.apache.shenyu.admin.disruptor.subscriber.MetadataExecutorSubscriber;
 import org.apache.shenyu.admin.disruptor.subscriber.URIRegisterExecutorSubscriber;
-import org.apache.shenyu.admin.service.register.ShenyuClientRegisterServiceFactory;
+import org.apache.shenyu.admin.service.register.ShenyuClientRegisterService;
 import org.apache.shenyu.disruptor.DisruptorProviderManage;
 import org.apache.shenyu.disruptor.provider.DisruptorProvider;
 import org.apache.shenyu.register.server.api.ShenyuServerRegisterPublisher;
@@ -53,7 +53,7 @@ public static RegisterServerDisruptorPublisher getInstance() {
      *
      * @param shenyuClientRegisterService the shenyu client register service
      */
-    public void start(final Map<String, ShenyuClientRegisterServiceFactory> shenyuClientRegisterService) {
+    public void start(final Map<String, ShenyuClientRegisterService> shenyuClientRegisterService) {
         factory = new RegisterServerExecutorFactory();
         factory.addSubscribers(new URIRegisterExecutorSubscriber(shenyuClientRegisterService));
         factory.addSubscribers(new MetadataExecutorSubscriber(shenyuClientRegisterService));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/executor/RegisterServerConsumerExecutor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shenyu.disruptor.consumer.QueueConsumerExecutor;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 import org.apache.shenyu.register.common.dto.URIRegisterDTO;
+import org.apache.shenyu.register.common.subsriber.AbstractQueueConsumerFactory;
 import org.apache.shenyu.register.common.subsriber.ExecutorSubscriber;
 import org.apache.shenyu.register.common.subsriber.ExecutorTypeSubscriber;
 import org.apache.shenyu.register.common.type.DataType;
@@ -63,9 +64,7 @@ private boolean isValidData(final Object data) {
         }
         if (data instanceof MetaDataRegisterDTO) {
             MetaDataRegisterDTO metaDataRegisterDTO = (MetaDataRegisterDTO) data;
-            return Objects.nonNull(metaDataRegisterDTO.getPort())
-                    && StringUtils.isNoneBlank(metaDataRegisterDTO.getAppName(),
-                    metaDataRegisterDTO.getHost(),
+            return StringUtils.isNoneBlank(metaDataRegisterDTO.getAppName(),
                     metaDataRegisterDTO.getPath(),
                     metaDataRegisterDTO.getRuleName(),
                     metaDataRegisterDTO.getRpcType());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/RuleService.java
Patch:
@@ -35,11 +35,9 @@ public interface RuleService {
      * Register string.
      *
      * @param ruleDTO        the rule dto
-     * @param name           the rule's name
-     * @param metaDataIsExist if meta data is exist
      * @return the string
      */
-    String register(RuleDTO ruleDTO, String name, boolean metaDataIsExist);
+    String registerDefault(RuleDTO ruleDTO);
 
     /**
      * create or update rule.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -90,8 +90,9 @@ public RuleServiceImpl(final RuleMapper ruleMapper,
     }
 
     @Override
-    public String register(final RuleDTO ruleDTO, final String name, final boolean metaDataIsExist) {
-        if (Objects.nonNull(ruleMapper.findByName(name)) && metaDataIsExist) {
+    public String registerDefault(final RuleDTO ruleDTO) {
+        RuleDO exist = ruleMapper.findBySelectorIdAndName(ruleDTO.getSelectorId(), ruleDTO.getName());
+        if (Objects.nonNull(exist)) {
             return "";
         }
         RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/RuleServiceTest.java
Patch:
@@ -219,14 +219,14 @@ private void publishEvent() {
     private void testRegisterCreate() {
         RuleDTO ruleDTO = buildRuleDTO("");
         RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO);
-        String ruleId = this.ruleService.register(ruleDTO, ruleDTO.getName(), false);
+        String ruleId = this.ruleService.registerDefault(ruleDTO);
         assertNotNull(ruleId);
         assertEquals(ruleId.length(), ruleDO.getId().length());
     }
 
     private void testRegisterUpdate() {
         RuleDTO ruleDTO = buildRuleDTO("123");
-        String ruleId = this.ruleService.register(ruleDTO, ruleDTO.getName(), false);
+        String ruleId = this.ruleService.registerDefault(ruleDTO);
         assertNotNull(ruleId);
         assertEquals(ruleId, ruleDTO.getId());
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -244,6 +244,6 @@ public static PluginEnum getPluginEnumByName(final String name) {
      * @return List string
      */
     public static List<String> getUpstreamNames() {
-        return Arrays.asList(DIVIDE.name, GRPC.name, TARS.name, SPRING_CLOUD.name);
+        return Arrays.asList(DIVIDE.name, GRPC.name, TARS.name, SPRING_CLOUD.name, DUBBO.name);
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/ModifyResponsePluginTest.java
Patch:
@@ -24,7 +24,7 @@
 import okhttp3.Response;
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle;
-import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingHandle;
+import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingRuleHandle;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;
@@ -110,13 +110,13 @@ private static LocalPluginController.RuleLocalData buildRuleLocalData() {
         modifyResponseRuleHandle.setStatusCode(EXCEPT_STATUS_CODE);
         modifyResponseRuleHandle.setRemoveBodyKeys(ImmutableSet.<String>builder().add(REMOVE_BODY_KEYS).build());
 
-        final ParamMappingHandle.ParamMapInfo addBodyKeysHandler = new ParamMappingHandle.ParamMapInfo();
+        final ParamMappingRuleHandle.ParamMapInfo addBodyKeysHandler = new ParamMappingRuleHandle.ParamMapInfo();
         addBodyKeysHandler.setPath("$");
         addBodyKeysHandler.setKey(ADD_BODY_KEYS);
         addBodyKeysHandler.setValue("true");
         modifyResponseRuleHandle.setAddBodyKeys(Collections.singletonList(addBodyKeysHandler));
 
-        final ParamMappingHandle.ParamMapInfo replaceBodyKeysHandler = new ParamMappingHandle.ParamMapInfo();
+        final ParamMappingRuleHandle.ParamMapInfo replaceBodyKeysHandler = new ParamMappingRuleHandle.ParamMapInfo();
         replaceBodyKeysHandler.setPath("$");
         replaceBodyKeysHandler.setKey(ORIGIN_REPLACE_BODY_KEYS);
         replaceBodyKeysHandler.setValue(REPLACE_BODY_KEYS);

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/UriUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.plugin.base.utils;
 
+import org.apache.shenyu.common.utils.UriUtils;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: shenyu-plugin/shenyu-plugin-divide/src/test/java/org/apache/shenyu/plugin/divide/DividePluginTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
-import org.apache.shenyu.common.dto.convert.rule.RuleHandleFactory;
 import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
@@ -157,7 +156,7 @@ public void getOrderTest() {
     private void initMockInfo() { 
         ShenyuContext context = mock(ShenyuContext.class);
         context.setRpcType(RpcTypeEnum.HTTP.getName());
-        DivideRuleHandle handle = (DivideRuleHandle) RuleHandleFactory.ruleHandle(PluginEnum.DIVIDE.getName(), "", "");
+        DivideRuleHandle handle = new DivideRuleHandle();
         when(selectorData.getId()).thenReturn("mock");
         when(selectorData.getHandle()).thenReturn(GsonUtils.getGson().toJson(divideUpstreamList));
         when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(handle));

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/command/HystrixCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.netflix.hystrix.HystrixObservableCommand;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
-import org.apache.shenyu.plugin.base.utils.UriUtils;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.web.server.ServerWebExchange;

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/command/HystrixCommandOnThread.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.netflix.hystrix.HystrixCommand;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
-import org.apache.shenyu.plugin.base.utils.UriUtils;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.web.server.ServerWebExchange;

File: shenyu-plugin/shenyu-plugin-param-mapping/src/main/java/org/apache/shenyu/plugin/param/mapping/strategy/DefaultOperator.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.param.mapping.strategy;
 
-import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingHandle;
+import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingRuleHandle;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
@@ -28,7 +28,7 @@
 public class DefaultOperator implements Operator {
 
     @Override
-    public Mono<Void> apply(final ServerWebExchange exchange, final ShenyuPluginChain shenyuPluginChain, final ParamMappingHandle paramMappingHandle) {
+    public Mono<Void> apply(final ServerWebExchange exchange, final ShenyuPluginChain shenyuPluginChain, final ParamMappingRuleHandle paramMappingRuleHandle) {
         return shenyuPluginChain.execute(exchange);
     }
 }

File: shenyu-plugin/shenyu-plugin-param-mapping/src/main/java/org/apache/shenyu/plugin/param/mapping/strategy/JsonOperator.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.param.mapping.strategy;
 
-import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingHandle;
+import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingRuleHandle;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.support.BodyInserterContext;
 import org.apache.shenyu.plugin.base.support.CachedBodyOutputMessage;
@@ -49,12 +49,12 @@ public class JsonOperator implements Operator {
     private static final List<HttpMessageReader<?>> MESSAGE_READERS = HandlerStrategies.builder().build().messageReaders();
 
     @Override
-    public Mono<Void> apply(final ServerWebExchange exchange, final ShenyuPluginChain shenyuPluginChain, final ParamMappingHandle paramMappingHandle) {
+    public Mono<Void> apply(final ServerWebExchange exchange, final ShenyuPluginChain shenyuPluginChain, final ParamMappingRuleHandle paramMappingRuleHandle) {
         ServerRequest serverRequest = ServerRequest.create(exchange, MESSAGE_READERS);
         Mono<String> mono = serverRequest.bodyToMono(String.class).switchIfEmpty(Mono.defer(() -> Mono.just(""))).flatMap(originalBody -> {
             LOG.info("get body data success data:{}", originalBody);
             //process entity
-            String modify = operation(originalBody, paramMappingHandle);
+            String modify = operation(originalBody, paramMappingRuleHandle);
             return Mono.just(modify);
         });
         BodyInserter bodyInserter = BodyInserters.fromPublisher(mono, String.class);

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/strategy/DefaultOperatorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.param.mapping.strategy;
 
-import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingHandle;
+import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingRuleHandle;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.junit.Before;
 import org.junit.Test;
@@ -58,6 +58,6 @@ public void setUp() {
     @Test
     public void testApply() {
         when(this.chain.execute(any())).thenReturn(Mono.empty());
-        StepVerifier.create(defaultOperator.apply(this.exchange, this.chain, new ParamMappingHandle())).expectSubscription().verifyComplete();
+        StepVerifier.create(defaultOperator.apply(this.exchange, this.chain, new ParamMappingRuleHandle())).expectSubscription().verifyComplete();
     }
 }

File: shenyu-plugin/shenyu-plugin-redirect/src/main/java/org/apache/shenyu/plugin/redirect/RedirectPlugin.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.base.utils.UriUtils;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.plugin.redirect.handler.RedirectPluginDataHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/executor/Executor.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
-import org.apache.shenyu.plugin.base.utils.UriUtils;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.apache.shenyu.plugin.resilience4j.Resilience4JPlugin;
 import org.apache.shenyu.plugin.resilience4j.conf.Resilience4JConf;
 import org.springframework.http.HttpStatus;

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/SentinelPlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.fallback.FallbackHandler;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.base.utils.UriUtils;
+import org.apache.shenyu.common.utils.UriUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.client.HttpStatusCodeException;
 import org.springframework.web.server.ServerWebExchange;

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/proxy/SofaProxyServiceTest.java
Patch:
@@ -77,7 +77,7 @@ public void after() {
     }
 
     @Test
-    public void test() throws NoSuchFieldException, IllegalAccessException {
+    public void testGenericInvoker() throws NoSuchFieldException, IllegalAccessException {
         ConsumerConfig consumerConfig = mock(ConsumerConfig.class);
         GenericService genericService = mock(GenericService.class);
         when(consumerConfig.refer()).thenReturn(genericService);

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/SpringCloudPlugin.java
Patch:
@@ -70,7 +70,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         final SpringCloudSelectorHandle springCloudSelectorHandle = SpringCloudPluginDataHandler.SELECTOR_CACHED.get().obtainHandle(selector.getId());
         final SpringCloudRuleHandle ruleHandle = SpringCloudPluginDataHandler.RULE_CACHED.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         String serviceId = springCloudSelectorHandle.getServiceId();
-        if (StringUtils.isBlank(serviceId) || StringUtils.isBlank(ruleHandle.getPath())) {
+        if (StringUtils.isBlank(serviceId)) {
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getCode(),
                     ShenyuResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/subsriber/AbstractQueueConsumerFactory.java
Patch:
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.disruptor.executor;
+package org.apache.shenyu.register.common.subsriber;
 
-import org.apache.shenyu.register.common.subsriber.ExecutorSubscriber;
 import org.apache.shenyu.disruptor.consumer.QueueConsumerFactory;
 
 import java.util.HashSet;

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-etcd/src/main/java/org/apache/shenyu/register/server/etcd/EtcdServerRegisterRepository.java
Patch:
@@ -101,9 +101,7 @@ private void subscribeURI(final String rpcType) {
             String context = dataPath.split("/")[4];
             contextList.add(context);
         });
-
         contextList.forEach(context -> registerUriChildrenList(rpcPath, context));
-
         LOGGER.info("subscribe uri change: {}", rpcPath);
         client.subscribeChildChanges(rpcPath, new EtcdListenHandler() {
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-springmvc/src/main/java/org/apache/shenyu/springboot/starter/client/springmvc/ShenyuSpringMvcClientConfiguration.java
Patch:
@@ -49,12 +49,11 @@ public SpringMvcClientBeanPostProcessor springHttpClientBeanPostProcessor(final
      * Context register listener context register listener.
      *
      * @param config the config
-     * @param shenyuClientRegisterRepository the client register repository
      * @return the context register listener
      */
     @Bean
-    public ContextRegisterListener contextRegisterListener(final ShenyuRegisterCenterConfig config, final ShenyuClientRegisterRepository shenyuClientRegisterRepository) {
-        return new ContextRegisterListener(config, shenyuClientRegisterRepository);
+    public ContextRegisterListener contextRegisterListener(final ShenyuRegisterCenterConfig config) {
+        return new ContextRegisterListener(config);
     }
     
 }

File: shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/register/PrometheusMetricsRegister.java
Patch:
@@ -45,7 +45,7 @@ public void registerCounter(final String name, final String[] labelNames, final
             if (null != labelNames) {
                 builder.labelNames(labelNames);
             }
-            COUNTER_MAP.put(name, builder.register());
+            COUNTER_MAP.putIfAbsent(name, builder.register());
         }
     }
     
@@ -56,7 +56,7 @@ public void registerGauge(final String name, final String[] labelNames, final St
             if (null != labelNames) {
                 builder.labelNames(labelNames);
             }
-            GAUGE_MAP.put(name, builder.register());
+            GAUGE_MAP.putIfAbsent(name, builder.register());
         }
     }
     
@@ -67,7 +67,7 @@ public void registerHistogram(final String name, final String[] labelNames, fina
             if (null != labelNames) {
                 builder.labelNames(labelNames);
             }
-            HISTOGRAM_MAP.put(name, builder.register());
+            HISTOGRAM_MAP.putIfAbsent(name, builder.register());
         }
     }
     

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/subscriber/SofaMetaDataSubscriberTest.java
Patch:
@@ -47,7 +47,7 @@ public void setUp() {
         metaData.setRpcType(RpcTypeEnum.SOFA.getName());
     }
 
-    @Test(expected = SofaRpcRuntimeException.class)
+    @Test
     public void testOnSubscribe() {
         sofaPluginDataHandler.onSubscribe(metaData);
     }

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -134,6 +134,9 @@ public ConsumerConfig<GenericService> initRef(final MetaData metaData) {
      * @return the reference config
      */
     public ConsumerConfig<GenericService> build(final MetaData metaData) {
+        if (Objects.isNull(applicationConfig) || Objects.isNull(registryConfig)) {
+            return new ConsumerConfig<>();
+        }
         ConsumerConfig<GenericService> reference = new ConsumerConfig<>();
         reference.setGeneric(true);
         reference.setApplication(applicationConfig);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollector.java
Patch:
@@ -136,7 +136,7 @@ public static void send(final String message, final DataEventTypeEnum type) {
         }
     }
 
-    private static void sendMessageBySession(final Session session, final String message) {
+    private static synchronized void sendMessageBySession(final Session session, final String message) {
         try {
             session.getBasicRemote().sendText(message);
         } catch (IOException e) {

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/handler/WebSocketPluginDataHandler.java
Patch:
@@ -72,7 +72,7 @@ public void removeRule(final RuleData ruleData) {
 
     @Override
     public String pluginNamed() {
-        return PluginEnum.DIVIDE.getName();
+        return PluginEnum.WEB_SOCKET.getName();
     }
     
     private List<Upstream> convertUpstreamList(final List<WebSocketUpstream> upstreamList) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -67,7 +67,7 @@ public abstract class AbstractShenyuClientRegisterServiceImpl implements ShenyuC
     protected abstract void handlerRule(String selectorId, MetaDataRegisterDTO metaDataDTO, MetaDataDO exist);
 
     @Override
-    public String registerURI(final String contextPath, final List<String> uriList) {
+    public String registerUri(final String contextPath, final List<String> uriList) {
         return null;
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDefaultServiceImpl.java
Patch:
@@ -66,7 +66,7 @@ public String register(final MetaDataRegisterDTO metaDataRegisterDTO) {
     }
 
     @Override
-    public String registerURI(final String contextPath, final List<String> uriList) {
+    public String registerUri(final String contextPath, final List<String> uriList) {
         SelectorDO selector = selectorService.findByName(contextPath);
         SelectorData selectorData = selectorService.buildByName(contextPath);
         PluginDO pluginDO = pluginMapper.selectById(selector.getPluginId());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterServiceFactory.java
Patch:
@@ -37,9 +37,9 @@ public interface ShenyuClientRegisterServiceFactory {
     /**
      * mvc uri upstream update.
      *
-     * @param contextPath context paht
+     * @param contextPath context path
      * @param uriList     uri list
      * @return the string
      */
-    String registerURI(String contextPath, List<String> uriList);
+    String registerUri(String contextPath, List<String> uriList);
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/RpcTypeEnum.java
Patch:
@@ -127,7 +127,7 @@ public static List<RpcTypeEnum> acquireSupportURIs() {
      * @return operator support.
      */
     public static List<RpcTypeEnum> acquireSupportMetadatas() {
-        return Arrays.asList(RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.SPRING_CLOUD, RpcTypeEnum.SOFA, RpcTypeEnum.TARS, RpcTypeEnum.MOTAN);
+        return Arrays.asList(RpcTypeEnum.HTTP, RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.SPRING_CLOUD, RpcTypeEnum.SOFA, RpcTypeEnum.TARS, RpcTypeEnum.MOTAN);
     }
 
     /**

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/AppAuthData.java
Patch:
@@ -27,8 +27,6 @@
  */
 public class AppAuthData {
 
-    private static final long serialVersionUID = -7060944416765128601L;
-
     private String appKey;
 
     private String appSecret;

File: shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/cache/UpstreamCheckTaskTest.java
Patch:
@@ -75,15 +75,15 @@ public void testRun() {
         healthCheckTask.schedule();
         // Wait for the upstream-health-check thread to start.
         Awaitility.await().pollDelay(3, TimeUnit.SECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));
-        assertTrue(healthCheckTask.getHealthyUpstream().containsKey(selectorId1));
+        assertTrue(healthCheckTask.getUnhealthyUpstream().get(selectorId1).size() > 0);
         // Let it coverage line 151~163
         when(upstream.isHealthy()).thenReturn(false).thenReturn(true);
         // Even if the address could not connect, it will return false, that mean it will not coverage 151~163.
         when(upstream.getUrl()).thenReturn("http://www.baidu.com");
         // Manually run one time
         healthCheckTask.run();
         Awaitility.await().pollDelay(1, TimeUnit.SECONDS).untilAsserted(() -> assertFalse(healthCheckTask.getCheckStarted().get()));
-        assertTrue(healthCheckTask.getUnhealthyUpstream().containsKey(selectorId1));
+        assertTrue(healthCheckTask.getHealthyUpstream().get(selectorId1).size() > 0);
     }
     
     /**

File: shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/AbstractPluginDataInit.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
-import org.apache.shenyu.web.controller.PluginController.SelectorRuleData;
-import org.apache.shenyu.web.controller.PluginController.SelectorRulesData;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController.SelectorRuleData;
+import org.apache.shenyu.web.controller.LocalPluginController.SelectorRulesData;
 
 import java.io.IOException;
 import java.util.List;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/ContextPathPluginTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.integratedtest.common.dto.OrderDTO;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.hamcrest.CoreMatchers;
 import org.junit.AfterClass;
 import org.junit.Test;
@@ -72,7 +72,7 @@ private static List<ConditionData> buildSelectorConditionList() {
     }
 
     private static List<RuleLocalData> buildRuleLocalDataList(final String ruleHandleString) {
-        RuleLocalData ruleLocalData = new PluginController.RuleLocalData();
+        RuleLocalData ruleLocalData = new LocalPluginController.RuleLocalData();
         ruleLocalData.setRuleHandler(ruleHandleString);
         ruleLocalData.setConditionDataList(Collections.singletonList(buildConditionData()));
         return Collections.singletonList(ruleLocalData);

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RateLimiterPluginTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.shenyu.integratedtest.common.dto.AdminResponse;
 import org.apache.shenyu.integratedtest.common.dto.UserDTO;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RedirectPluginTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RequestPluginTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SentinelPluginTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SignPluginTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.integratedtest.common.dto.AdminResponse;
 import org.apache.shenyu.integratedtest.common.dto.UserDTO;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/WafPluginTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.integratedtest.common.AbstractPluginDataInit;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
-import org.apache.shenyu.web.controller.PluginController.RuleLocalData;
+import org.apache.shenyu.web.controller.LocalPluginController.RuleLocalData;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/subsciber/MetaDataCacheSubscriber.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 
 /**
- * The type Meta data all subscriber.
+ * The type Meta data cache subscriber.
  */
-public class MetaDataAllSubscriber implements MetaDataSubscriber {
+public class MetaDataCacheSubscriber implements MetaDataSubscriber {
     
     @Override
     public void onSubscribe(final MetaData metaData) {

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/LocalPluginControllerTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.common.enums.ParamTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.JsonUtils;
-import org.apache.shenyu.web.controller.PluginController.SelectorRuleData;
+import org.apache.shenyu.web.controller.LocalPluginController.SelectorRuleData;
 import org.junit.Test;
 
 import java.util.List;
@@ -35,7 +35,7 @@
 /**
  * The type Plugin controller Test.
  */
-public class PluginControllerTest {
+public class LocalPluginControllerTest {
     
     @Test
     public void testSelectorRuleData() {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/subscriber/MetadataExecutorSubscriber.java
Patch:
@@ -47,8 +47,7 @@ public void executor(final Collection<MetaDataRegisterDTO> metaDataRegisterDTOLi
         for (MetaDataRegisterDTO metaDataRegisterDTO : metaDataRegisterDTOList) {
             ShenyuClientRegisterServiceFactory shenyuClientRegisterServiceFactory = shenyuClientRegisterService.get(metaDataRegisterDTO.getRpcType());
             Objects.requireNonNull(shenyuClientRegisterServiceFactory);
-
-            synchronized (shenyuClientRegisterServiceFactory) {
+            synchronized (ShenyuClientRegisterServiceFactory.class) {
                 shenyuClientRegisterServiceFactory.register(metaDataRegisterDTO);
             }
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/subscriber/URIRegisterExecutorSubscriber.java
Patch:
@@ -52,8 +52,6 @@ public DataType getType() {
     @Override
     public void executor(final Collection<URIRegisterDTO> dataList) {
         Map<String, List<URIRegisterDTO>> listMap = dataList.stream().collect(Collectors.groupingBy(URIRegisterDTO::getContextPath));
-        listMap.forEach((contextPath, dtoList) -> {
-            shenyuClientRegisterService.get(Constants.DEFAULT.toLowerCase()).registerURIDefault(contextPath, dtoList);
-        });
+        listMap.forEach((contextPath, dtoList) -> shenyuClientRegisterService.get(Constants.DEFAULT.toLowerCase()).registerURIDefault(contextPath, dtoList));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/DivideUpstreamUtils.java
Patch:
@@ -45,6 +45,6 @@ public static DivideUpstream buildDivideUpstream(final MetaDataRegisterDTO metaD
      * @return String String
      */
     public static String buildUrl(final MetaDataRegisterDTO metaDataRegisterDTO) {
-        return Optional.ofNullable(String.join(":", metaDataRegisterDTO.getHost(), String.valueOf(metaDataRegisterDTO.getPort()))).orElse(null);
+        return Optional.of(String.join(":", metaDataRegisterDTO.getHost(), String.valueOf(metaDataRegisterDTO.getPort()))).orElse(null);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/JwtUtils.java
Patch:
@@ -58,7 +58,7 @@ public static UserInfo getUserInfo() {
      */
     public static String getIssuer(final String token) {
         DecodedJWT jwt = JWT.decode(token);
-        return Optional.ofNullable(jwt).map(item -> item.getClaim("userName").asString()).orElse("");
+        return Optional.of(jwt).map(item -> item.getClaim("userName").asString()).orElse("");
     }
 
     /**

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/RpcTypeEnum.java
Patch:
@@ -118,7 +118,7 @@ public static List<RpcTypeEnum> acquireSupports() {
      * @return operator support.
      */
     public static List<RpcTypeEnum> acquireSupportURIs() {
-        return Arrays.asList(RpcTypeEnum.GRPC, RpcTypeEnum.HTTP, RpcTypeEnum.TARS, RpcTypeEnum.SPRING_CLOUD);
+        return Arrays.asList(RpcTypeEnum.GRPC, RpcTypeEnum.HTTP, RpcTypeEnum.TARS, RpcTypeEnum.SPRING_CLOUD, RpcTypeEnum.DUBBO);
     }
 
     /**
@@ -127,7 +127,7 @@ public static List<RpcTypeEnum> acquireSupportURIs() {
      * @return operator support.
      */
     public static List<RpcTypeEnum> acquireSupportMetadatas() {
-        return Arrays.asList(RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.HTTP, RpcTypeEnum.SPRING_CLOUD, RpcTypeEnum.SOFA, RpcTypeEnum.TARS);
+        return Arrays.asList(RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.SPRING_CLOUD, RpcTypeEnum.SOFA, RpcTypeEnum.TARS, RpcTypeEnum.MOTAN);
     }
 
     /**

File: shenyu-common/src/test/java/org/apache/shenyu/common/enums/RpcTypeEnumTest.java
Patch:
@@ -83,7 +83,6 @@ public void testAcquireSupportMetadatas() {
         List<RpcTypeEnum> rpcTypeEnumList = RpcTypeEnum.acquireSupportMetadatas();
         assertTrue(rpcTypeEnumList.contains(RpcTypeEnum.DUBBO));
         assertTrue(rpcTypeEnumList.contains(RpcTypeEnum.GRPC));
-        assertTrue(rpcTypeEnumList.contains(RpcTypeEnum.HTTP));
         assertTrue(rpcTypeEnumList.contains(RpcTypeEnum.SPRING_CLOUD));
         assertTrue(rpcTypeEnumList.contains(RpcTypeEnum.SOFA));
         assertTrue(rpcTypeEnumList.contains(RpcTypeEnum.TARS));

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/handler/ApacheDubboPluginDataHandler.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
 import org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 
@@ -46,9 +46,9 @@
  */
 public class ApacheDubboPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, DubboRuleHandle>> RULE_CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, DubboRuleHandle>> RULE_CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
-    public static final Supplier<RuleHandleCache<String, List<DubboSelectorHandle>>> SELECTOR_CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, List<DubboSelectorHandle>>> SELECTOR_CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerPlugin(final PluginData pluginData) {

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/CommonHandleCache.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * The selector or rule handle base cache.
  */
-public class RuleHandleCache<K, V> implements HandleCache<K, V> {
+public class CommonHandleCache<K, V> implements HandleCache<K, V> {
 
     /**
      * selectorId.ruleName -> handle.

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/EmptyMockCommonHandleCache.java
Patch:
@@ -21,6 +21,6 @@
  * BaseHandleCache empty mock subclass.
  */
 
-class EmptyMockRuleHandleCache<K, V> extends RuleHandleCache<K, V> {
+class EmptyMockCommonHandleCache<K, V> extends CommonHandleCache<K, V> {
 
 }

File: shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/handler/ContextPathPluginDataHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class ContextPathPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, ContextMappingHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, ContextMappingHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/handler/CryptorRequestPluginDataHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.plugin.cryptor.dto.CryptorRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class CryptorRequestPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, CryptorRuleHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, CryptorRuleHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/handler/CryptorResponsePluginDataHandler.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.shenyu.plugin.cryptor.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.cryptor.dto.CryptorRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class CryptorResponsePluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, CryptorRuleHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, CryptorRuleHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/request/CryptorRequestPlugin.java
Patch:
@@ -98,7 +98,8 @@ public int getOrder() {
     public String named() {
         return PluginEnum.CRYPTOR_REQUEST.getName();
     }
-
+    
+    @SuppressWarnings("rawtypes")
     private Mono strategyMatch(final CryptorRuleHandle ruleHandle, final String originalBody, final ServerWebExchange exchange) {
         String parseBody = JsonUtil.parser(originalBody, ruleHandle.getFieldNames());
         if (null == parseBody) {
@@ -112,5 +113,4 @@ private Mono strategyMatch(final CryptorRuleHandle ruleHandle, final String orig
         }
         return HttpUtil.success(originalBody, modifiedBody, ruleHandle.getWay(), ruleHandle.getFieldNames());
     }
-
 }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePlugin.java
Patch:
@@ -95,7 +95,8 @@ public int getOrder() {
     public String named() {
         return PluginEnum.CRYPTOR_RESPONSE.getName();
     }
-
+    
+    @SuppressWarnings("rawtypes")
     private Mono strategyMatch(final String originalBody, final CryptorRuleHandle ruleHandle, final ServerWebExchange exchange) {
         String parseBody = JsonUtil.parser(originalBody, ruleHandle.getFieldNames());
         if (parseBody == null) {

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategyFactory.java
Patch:
@@ -94,5 +94,4 @@ private static String decrypt(final String strategyName, final String key, final
             return null;
         }
     }
-
 }

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/handler/DividePluginDataHandler.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -41,7 +41,7 @@
  */
 public class DividePluginDataHandler implements PluginDataHandler {
     
-    public static final Supplier<RuleHandleCache<String, DivideRuleHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, DivideRuleHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
     
     @Override
     public void handlerSelector(final SelectorData selectorData) {

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/handler/ModifyResponsePluginDataHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class ModifyResponsePluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, ModifyResponseRuleHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, ModifyResponseRuleHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-modify-response/src/test/java/org/apache/shenyu/plugin/modify/response/cache/ModifyResponseCommonHandleCacheTest.java
Patch:
@@ -21,13 +21,13 @@
 import org.junit.Test;
 
 /**
- * The Test Case For ModifyResponseRuleHandleCache.
+ * The Test Case For ModifyResponseCommonHandleCache.
  */
-public final class ModifyResponseRuleHandleCacheTest {
+public final class ModifyResponseCommonHandleCacheTest {
 
     @Test
     public void testGetOrder() {
-        Assert.assertNotNull(ModifyResponseRuleHandleCache.getInstance());
+        Assert.assertNotNull(ModifyResponseCommonHandleCache.getInstance());
     }
 
 }

File: shenyu-plugin/shenyu-plugin-param-mapping/src/main/java/org/apache/shenyu/plugin/param/mapping/handler/ParamMappingPluginDataHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.convert.rule.impl.ParamMappingHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class ParamMappingPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, ParamMappingHandle>> CACHED_HANDLE = new BeanHolder(() -> new RuleHandleCache());
+    public static final Supplier<CommonHandleCache<String, ParamMappingHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/handler/ParamMappingPluginDataTest.java
Patch:
@@ -24,9 +24,9 @@
 import org.junit.runner.RunWith;
 import org.mockito.junit.MockitoJUnitRunner;
 
-import static junit.framework.Assert.assertNull;
 import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertNull;
 
 /**
  * Test case for {@link ParamMappingPluginDataHandler}.
@@ -64,7 +64,7 @@ public void testRemoveRule() {
         this.paramMappingPluginDataHandler.removeRule(this.ruleData);
         assertNull(ParamMappingPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(this.ruleData)));
         this.paramMappingPluginDataHandler.removeRule(ruleData);
-        assertNull(paramMappingPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(ruleData)));
+        assertNull(ParamMappingPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(ruleData)));
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandler.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RedisModeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -58,7 +58,7 @@
  */
 public class RateLimiterPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, RateLimiterHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, RateLimiterHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
 
     @Override
     public void handlerPlugin(final PluginData pluginData) {

File: shenyu-plugin/shenyu-plugin-redirect/src/main/java/org/apache/shenyu/plugin/redirect/handler/RedirectPluginDataHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.convert.rule.RedirectHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class RedirectPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, RedirectHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, RedirectHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/handler/RequestPluginHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.convert.rule.RequestHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class RequestPluginHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, RequestHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, RequestHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/handler/Resilience4JHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.convert.rule.Resilience4JHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -35,7 +35,7 @@
  */
 public class Resilience4JHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, Resilience4JHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, Resilience4JHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/handler/RewritePluginDataHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.convert.rule.RewriteHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -34,7 +34,7 @@
  */
 public class RewritePluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, RewriteHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, RewriteHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandler.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.dto.convert.rule.WafHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -37,7 +37,7 @@
  */
 public class WafPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, WafHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, WafHandle>> CACHED_HANDLE = new BeanHolder(CommonHandleCache::new);
 
     @Override
     public void handlerPlugin(final PluginData pluginData) {

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/handler/WebSocketPluginDataHandler.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.loadbalancer.cache.UpstreamCacheManager;
 import org.apache.shenyu.loadbalancer.entity.Upstream;
-import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
+import org.apache.shenyu.plugin.base.cache.CommonHandleCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
@@ -41,7 +41,7 @@
  */
 public class WebSocketPluginDataHandler implements PluginDataHandler {
     
-    public static final Supplier<RuleHandleCache<String, WebSocketRuleHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
+    public static final Supplier<CommonHandleCache<String, WebSocketRuleHandle>> CACHED_HANDLE = new BeanHolder<>(CommonHandleCache::new);
     
     @Override
     public void handlerSelector(final SelectorData selectorData) {

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-nacos/src/test/java/org/apache/shenyu/register/server/nacos/NacosServerRegisterRepositoryTest.java
Patch:
@@ -169,14 +169,14 @@ public void testSubscribeTypeOfNotSupportURI() throws NoSuchMethodException, Inv
         Method method = clazz.getDeclaredMethod(methodString, RpcTypeEnum.class);
         method.setAccessible(true);
         method.invoke(repository, RpcTypeEnum.DUBBO);
-        verify(publisher, times(1)).publish(any());
+        verify(publisher, times(2)).publish(any());
 
         List<String> list = new ArrayList<>();
         list.add(GsonUtils.getInstance().toJson(MetaDataRegisterDTO.builder().build()));
         configListener.receiveConfigInfo(GsonUtils.getInstance().toJson(list));
-        verify(publisher, times(2)).publish(any());
+        verify(publisher, times(3)).publish(any());
 
         eventListener.onEvent(mockEvent());
-        verify(publisher, times(2)).publish(any());
+        verify(publisher, times(4)).publish(any());
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/RuleService.java
Patch:
@@ -36,10 +36,10 @@ public interface RuleService {
      *
      * @param ruleDTO        the rule dto
      * @param name           the rule's name
-     * @param metaDataIsNull meta data is null or not
+     * @param metaDataIsExist if meta data is exist
      * @return the string
      */
-    String register(RuleDTO ruleDTO, String name, boolean metaDataIsNull);
+    String register(RuleDTO ruleDTO, String name, boolean metaDataIsExist);
 
     /**
      * create or update rule.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -90,8 +90,8 @@ public RuleServiceImpl(final RuleMapper ruleMapper,
     }
 
     @Override
-    public String register(final RuleDTO ruleDTO, final String name, final boolean metaDataIsNull) {
-        if (Objects.nonNull(ruleMapper.findByName(name)) || metaDataIsNull) {
+    public String register(final RuleDTO ruleDTO, final String name, final boolean metaDataIsExist) {
+        if (Objects.nonNull(ruleMapper.findByName(name)) && metaDataIsExist) {
             return "";
         }
         RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImpl.java
Patch:
@@ -28,6 +28,8 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
+import java.util.Objects;
+
 /**
  * dubbo service register.
  */
@@ -75,6 +77,6 @@ public String handlerSelector(final MetaDataRegisterDTO metaDataDTO) {
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
         ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.DUBBO.getName()),
-                metaDataDTO.getPath(), false);
+                metaDataDTO.getPath(), Objects.nonNull(exist));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImpl.java
Patch:
@@ -73,6 +73,6 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
         ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.GRPC.getName()),
                 metaDataDTO.getPath(),
-                Objects.isNull(exist));
+                Objects.nonNull(exist));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterMotanServiceImpl.java
Patch:
@@ -73,6 +73,6 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
         ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.MOTAN.getName()),
                 metaDataDTO.getPath(),
-                Objects.isNull(exist));
+                Objects.nonNull(exist));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSofaServiceImpl.java
Patch:
@@ -90,6 +90,6 @@ public String handlerSelector(final MetaDataRegisterDTO metaDataDTO) {
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
         ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.SOFA.getName()),
                 metaDataDTO.getPath(),
-                Objects.isNull(exist));
+                Objects.nonNull(exist));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -91,7 +91,9 @@ public String register(final MetaDataRegisterDTO dto) {
             saveOrUpdateMetaData(metaDataDO, dto);
         }
         String selectorId = handlerSelector(dto);
-        handlerRule(selectorId, dto, metaDataDO);
+        if (Objects.isNull(ruleService.findByName(dto.getRuleName()))) {
+            handlerRule(selectorId, dto, metaDataDO);
+        }
         String contextPath = dto.getContextPath();
         if (StringUtils.isNotEmpty(contextPath)) {
             //register context path plugin

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringMVCServiceImpl.java
Patch:
@@ -80,7 +80,9 @@ public String register(final MetaDataRegisterDTO dto) {
             }
         }
         String selectorId = handlerSelector(dto);
-        handlerRule(selectorId, dto, null);
+        if (Objects.isNull(ruleService.findByName(dto.getRuleName()))) {
+            handlerRule(selectorId, dto, null);
+        }
         String contextPath = dto.getContextPath();
         if (StringUtils.isNotEmpty(contextPath)) {
             //register context path plugin

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImpl.java
Patch:
@@ -75,6 +75,6 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
 
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
-        ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.TARS.getName()), metaDataDTO.getPath(), Objects.isNull(exist));
+        ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.TARS.getName()), metaDataDTO.getPath(), Objects.nonNull(exist));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/zookeeper/HttpServiceDiscovery.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.admin.service.SelectorService;
 import org.apache.shenyu.admin.model.entity.SelectorDO;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/SelectorServiceImpl.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.shenyu.common.constant.AdminConstants;
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ShenyuClientRegisterServiceImpl.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.shenyu.admin.transfer.MetaDataTransfer;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.RuleHandle;
 import org.apache.shenyu.common.dto.convert.rule.RuleHandleFactory;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.ConditionData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
-import org.apache.shenyu.common.dto.convert.ZombieUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.ZombieUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.model.dto.SelectorConditionDTO;
 import org.apache.shenyu.admin.model.dto.SelectorDTO;
 import org.apache.shenyu.admin.model.entity.MetaDataDO;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.RuleHandle;
 import org.apache.shenyu.common.dto.convert.rule.RuleHandleFactory;
 import org.apache.shenyu.common.enums.MatchModeEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDefaultServiceImpl.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.admin.service.SelectorService;
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/DivideUpstreamUtils.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.admin.utils;
 
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.register.common.dto.MetaDataRegisterDTO;
 
 import java.util.Optional;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.shenyu.admin.mapper.SelectorMapper;
 import org.apache.shenyu.admin.service.impl.UpstreamCheckService;
 import org.apache.shenyu.common.constant.Constants;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
-import org.apache.shenyu.common.dto.convert.ZombieUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.ZombieUpstream;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.UpstreamCheckUtils;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/DubboRegisterConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.config;
+package org.apache.shenyu.common.dto.convert.plugin;
 
 import java.io.Serializable;
 import java.util.Objects;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/MotanRegisterConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.config;
+package org.apache.shenyu.common.dto.convert.plugin;
 
 import java.io.Serializable;
 import java.util.Objects;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/plugin/SofaRegisterConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.config;
+package org.apache.shenyu.common.dto.convert.plugin;
 
 import java.io.Serializable;
 import java.util.Objects;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RateLimiterHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.rule;
 
 import java.util.Objects;
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RedirectHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.rule;
 
 import java.util.Objects;
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RequestHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.rule;
 
 import org.apache.commons.collections4.MapUtils;
 import org.apache.shenyu.common.utils.CollectionUtils;
@@ -28,6 +28,7 @@
  * this is RequestHandle plugin handle.
  */
 public class RequestHandle {
+    
     private ShenyuRequestHeader header;
 
     private ShenyuRequestParameter parameter;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/Resilience4JHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.rule;
 
 import org.apache.shenyu.common.constant.Constants;
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RewriteHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.rule;
 
 import java.util.Objects;
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/SentinelHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.rule;
 
 import org.apache.shenyu.common.constant.Constants;
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/WafHandle.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.rule;
 
 import java.util.Objects;
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/DivideUpstream.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.selector;
 
 import java.io.Serializable;
 import java.util.Objects;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/SpringCloudSelectorHandle.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.common.dto.convert.selector;
 
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
-
 import java.io.Serializable;
 import java.util.List;
 import java.util.Objects;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/WebSocketUpstream.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.selector;
 
 import java.io.Serializable;
 import java.util.Objects;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/selector/ZombieUpstream.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.common.dto.convert;
+package org.apache.shenyu.common.dto.convert.selector;
 
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RateLimiterPluginTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.reflect.TypeToken;
 import org.apache.shenyu.common.dto.ConditionData;
-import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
+import org.apache.shenyu.common.dto.convert.rule.RateLimiterHandle;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RedirectPluginTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.integrated.test.http.combination;
 
 import org.apache.shenyu.common.dto.ConditionData;
-import org.apache.shenyu.common.dto.convert.RedirectHandle;
+import org.apache.shenyu.common.dto.convert.rule.RedirectHandle;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/RequestPluginTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.integrated.test.http.combination;
 
 import org.apache.shenyu.common.dto.ConditionData;
-import org.apache.shenyu.common.dto.convert.RequestHandle;
+import org.apache.shenyu.common.dto.convert.rule.RequestHandle;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/SentinelPluginTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.integrated.test.http.combination;
 
 import org.apache.shenyu.common.dto.ConditionData;
-import org.apache.shenyu.common.dto.convert.SentinelHandle;
+import org.apache.shenyu.common.dto.convert.rule.SentinelHandle;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integrated/test/http/combination/WafPluginTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.integrated.test.http.combination;
 
 import org.apache.shenyu.common.dto.ConditionData;
-import org.apache.shenyu.common.dto.convert.WafHandle;
+import org.apache.shenyu.common.dto.convert.rule.WafHandle;
 import org.apache.shenyu.common.enums.OperatorEnum;
 import org.apache.shenyu.common.enums.ParamTypeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.shenyu.common.config.DubboRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/ApplicationConfigCacheTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.dubbo.config.ReferenceConfig;
 import com.alibaba.dubbo.config.RegistryConfig;
-import org.apache.shenyu.common.config.DubboRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.junit.Assert;

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.alibaba.dubbo.handler;
 
-import org.apache.shenyu.common.config.DubboRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.rpc.service.GenericService;
-import org.apache.shenyu.common.config.DubboRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/handler/ApacheDubboPluginDataHandler.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.apache.dubbo.handler;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.shenyu.common.config.DubboRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApplicationConfigCacheTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.dubbo.config.ReferenceConfig;
 import org.apache.dubbo.config.RegistryConfig;
-import org.apache.shenyu.common.config.DubboRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache.DubboParamExtInfo;

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/handler/ApacheDubboPluginDataHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.apache.dubbo.handler;
 
-import org.apache.shenyu.common.config.DubboRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.DubboRegisterConfig;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/handler/DividePluginDataHandler.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.CollectionUtils;

File: shenyu-plugin/shenyu-plugin-divide/src/test/java/org/apache/shenyu/plugin/divide/DividePluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.RuleHandleFactory;
 import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-plugin/shenyu-plugin-divide/src/test/java/org/apache/shenyu/plugin/divide/handler/DividePluginDataHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.divide.handler;
 
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.UpstreamCheckUtils;

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/ApplicationConfigCache.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.grpc.resolver.ShenyuServiceInstance;

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/handler/GrpcPluginDataHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.grpc.handler;
 
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.grpc.cache.ApplicationConfigCache;

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/HystrixPlugin.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.HystrixHandle;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
 import org.apache.shenyu.common.enums.HystrixIsolationModeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.ResultEnum;

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/builder/HystrixBuilder.java
Patch:
@@ -24,8 +24,8 @@
 import com.netflix.hystrix.HystrixObservableCommand;
 import com.netflix.hystrix.HystrixThreadPoolProperties;
 import org.apache.shenyu.common.constant.Constants;
-import org.apache.shenyu.common.dto.convert.HystrixHandle;
-import org.apache.shenyu.common.dto.convert.HystrixThreadPoolConfig;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle.HystrixThreadPoolConfig;
 
 import java.util.Objects;
 

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/handler/HystrixPluginDataHandler.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.netflix.hystrix.strategy.properties.HystrixPropertiesFactory;
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.HystrixHandle;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;

File: shenyu-plugin/shenyu-plugin-hystrix/src/test/java/org/apache/shenyu/plugin/hystrix/HystrixPluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.HystrixHandle;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
 import org.apache.shenyu.common.enums.HystrixIsolationModeEnum;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-hystrix/src/test/java/org/apache/shenyu/plugin/hystrix/builder/HystrixBuilderTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.plugin.hystrix.builder;
 
-import org.apache.shenyu.common.dto.convert.HystrixHandle;
-import org.apache.shenyu.common.dto.convert.HystrixThreadPoolConfig;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle.HystrixThreadPoolConfig;
 import org.junit.Test;
 
 import static org.junit.Assert.assertNotNull;

File: shenyu-plugin/shenyu-plugin-hystrix/src/test/java/org/apache/shenyu/plugin/hystrix/command/HystrixCommandOnThreadTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.netflix.hystrix.HystrixCommandKey;
 import com.netflix.hystrix.HystrixCommandProperties;
 import com.netflix.hystrix.HystrixThreadPoolProperties;
-import org.apache.shenyu.common.dto.convert.HystrixHandle;
-import org.apache.shenyu.common.dto.convert.HystrixThreadPoolConfig;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle.HystrixThreadPoolConfig;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-plugin/shenyu-plugin-hystrix/src/test/java/org/apache/shenyu/plugin/hystrix/command/HystrixCommandTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.netflix.hystrix.HystrixCommandKey;
 import com.netflix.hystrix.HystrixCommandProperties;
 import com.netflix.hystrix.HystrixObservableCommand;
-import org.apache.shenyu.common.dto.convert.HystrixHandle;
+import org.apache.shenyu.common.dto.convert.rule.HystrixHandle;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/cache/ApplicationConfigCache.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
-import org.apache.shenyu.common.config.MotanRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.MotanRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/handler/MotanPluginDataHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.motan.handler;
 
-import org.apache.shenyu.common.config.MotanRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.MotanRegisterConfig;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
+import org.apache.shenyu.common.dto.convert.rule.RateLimiterHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.ratelimiter.executor;
 
-import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
+import org.apache.shenyu.common.dto.convert.rule.RateLimiterHandle;
 import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithm;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithmFactory;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandler.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
+import org.apache.shenyu.common.dto.convert.rule.RateLimiterHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RedisModeEnum;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
+import org.apache.shenyu.common.dto.convert.rule.RateLimiterHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.result.DefaultShenyuResult;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiterTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.ratelimiter.executor;
 
 import com.google.common.collect.Lists;
-import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
+import org.apache.shenyu.common.dto.convert.rule.RateLimiterHandle;
 import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse;
 import org.junit.Assert;

File: shenyu-plugin/shenyu-plugin-redirect/src/main/java/org/apache/shenyu/plugin/redirect/RedirectPlugin.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.RedirectHandle;
+import org.apache.shenyu.common.dto.convert.rule.RedirectHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;

File: shenyu-plugin/shenyu-plugin-redirect/src/main/java/org/apache/shenyu/plugin/redirect/handler/RedirectPluginDataHandler.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.redirect.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.RedirectHandle;
+import org.apache.shenyu.common.dto.convert.rule.RedirectHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;

File: shenyu-plugin/shenyu-plugin-redirect/src/test/java/org/apache/shenyu/plugin/redirect/RedirectPluginTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.RedirectHandle;
+import org.apache.shenyu.common.dto.convert.rule.RedirectHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/RequestPlugin.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.RequestHandle;
+import org.apache.shenyu.common.dto.convert.rule.RequestHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.CollectionUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/handler/RequestPluginHandler.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.request.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.RequestHandle;
+import org.apache.shenyu.common.dto.convert.rule.RequestHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/Resilience4JPlugin.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.Resilience4JHandle;
+import org.apache.shenyu.common.dto.convert.rule.Resilience4JHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/build/Resilience4JBuilder.java
Patch:
@@ -22,7 +22,7 @@
 import io.github.resilience4j.ratelimiter.RateLimiterConfig;
 import io.github.resilience4j.timelimiter.TimeLimiterConfig;
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.Resilience4JHandle;
+import org.apache.shenyu.common.dto.convert.rule.Resilience4JHandle;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.resilience4j.conf.Resilience4JConf;

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/handler/Resilience4JHandler.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.resilience4j.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.Resilience4JHandle;
+import org.apache.shenyu.common.dto.convert.rule.Resilience4JHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;

File: shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/Resilience4JPluginTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.Resilience4JHandle;
+import org.apache.shenyu.common.dto.convert.rule.Resilience4JHandle;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.RewriteHandle;
+import org.apache.shenyu.common.dto.convert.rule.RewriteHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/handler/RewritePluginDataHandler.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.rewrite.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.RewriteHandle;
+import org.apache.shenyu.common.dto.convert.rule.RewriteHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;

File: shenyu-plugin/shenyu-plugin-rewrite/src/test/java/org/apache/shenyu/plugin/rewrite/RewritePluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.RewriteHandle;
+import org.apache.shenyu.common.dto.convert.rule.RewriteHandle;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/SentinelPlugin.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.SentinelHandle;
+import org.apache.shenyu.common.dto.convert.rule.SentinelHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandle.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.SentinelHandle;
+import org.apache.shenyu.common.dto.convert.rule.SentinelHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;

File: shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/SentinelPluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.SentinelHandle;
+import org.apache.shenyu.common.dto.convert.rule.SentinelHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;

File: shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandleTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;
 import com.alibaba.csp.sentinel.slots.block.flow.FlowRuleManager;
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.SentinelHandle;
+import org.apache.shenyu.common.dto.convert.rule.SentinelHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.junit.Before;

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -26,7 +26,7 @@
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.shenyu.common.config.SofaRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.SofaRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.enums.LoadBalanceEnum;
 import org.apache.shenyu.common.exception.ShenyuException;

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/handler/SofaPluginDataHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.sofa.handler;
 
-import org.apache.shenyu.common.config.SofaRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.SofaRegisterConfig;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/handler/SofaPluginDataHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.sofa.handler;
 
-import org.apache.shenyu.common.config.SofaRegisterConfig;
+import org.apache.shenyu.common.dto.convert.plugin.SofaRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.Singleton;

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/handler/SpringCloudPluginDataHandler.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-plugin/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/SpringCloudPluginTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/cache/ApplicationConfigCache.java
Patch:
@@ -39,7 +39,7 @@
 import org.assertj.core.internal.bytebuddy.dynamic.loading.ClassLoadingStrategy;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/WafPlugin.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.WafHandle;
+import org.apache.shenyu.common.dto.convert.rule.WafHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.enums.WafEnum;
 import org.apache.shenyu.common.enums.WafModelEnum;

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandler.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.WafHandle;
+import org.apache.shenyu.common.dto.convert.rule.WafHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/WafPluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.WafHandle;
+import org.apache.shenyu.common.dto.convert.rule.WafHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandlerTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.RuleData;
-import org.apache.shenyu.common.dto.convert.WafHandle;
+import org.apache.shenyu.common.dto.convert.rule.WafHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/handler/WebSocketPluginDataHandler.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.WebSocketUpstream;
+import org.apache.shenyu.common.dto.convert.selector.WebSocketUpstream;
 import org.apache.shenyu.common.dto.convert.rule.impl.WebSocketRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.CollectionUtils;

File: shenyu-plugin/shenyu-plugin-websocket/src/test/java/org/apache/shenyu/plugin/websocket/WebSocketPluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.RuleHandleFactory;
 import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.apache.shenyu.common.enums.PluginEnum;

File: shenyu-web/src/test/java/org/apache/shenyu/web/controller/PluginControllerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.web.controller;
 
 import org.apache.shenyu.common.dto.ConditionData;
-import org.apache.shenyu.common.dto.convert.DivideUpstream;
+import org.apache.shenyu.common.dto.convert.selector.DivideUpstream;
 import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.apache.shenyu.common.enums.LoadBalanceEnum;
 import org.apache.shenyu.common.enums.OperatorEnum;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ShenyuClientRegisterServiceImpl.java
Patch:
@@ -477,9 +477,9 @@ private String getPluginId(final String pluginName) {
     private void registerRule(final String selectorId, final String path, final String pluginName, final String ruleName) {
         RuleHandle ruleHandle;
         if (pluginName.equals(PluginEnum.CONTEXT_PATH.getName())) {
-            ruleHandle = RuleHandleFactory.ruleHandle(pluginName, buildContextPath(path));
+            ruleHandle = RuleHandleFactory.ruleHandle(pluginName, buildContextPath(path), "");
         } else {
-            ruleHandle = RuleHandleFactory.ruleHandle(pluginName, path);
+            ruleHandle = RuleHandleFactory.ruleHandle(pluginName, path, "");
         }
         RuleDTO ruleDTO = RuleDTO.builder()
                 .selectorId(selectorId)

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterGrpcServiceImpl.java
Patch:
@@ -71,7 +71,7 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
 
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
-        ruleService.register(registerRule(selectorId, metaDataDTO.getPath(), PluginEnum.GRPC.getName(), metaDataDTO.getRuleName()),
+        ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.GRPC.getName()),
                 metaDataDTO.getPath(),
                 Objects.isNull(exist));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterMotanServiceImpl.java
Patch:
@@ -71,7 +71,7 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
 
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
-        ruleService.register(registerRule(selectorId, metaDataDTO.getPath(), PluginEnum.MOTAN.getName(), metaDataDTO.getRuleName()),
+        ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.MOTAN.getName()),
                 metaDataDTO.getPath(),
                 Objects.isNull(exist));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSofaServiceImpl.java
Patch:
@@ -88,7 +88,7 @@ public String handlerSelector(final MetaDataRegisterDTO metaDataDTO) {
 
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
-        ruleService.register(registerRule(selectorId, metaDataDTO.getPath(), PluginEnum.SOFA.getName(), metaDataDTO.getRuleName()),
+        ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.SOFA.getName()),
                 metaDataDTO.getPath(),
                 Objects.isNull(exist));
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -175,7 +175,7 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
 
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO dto, final MetaDataDO exist) {
-        ruleService.register(registerRule(selectorId, dto.getPath(), PluginEnum.SPRING_CLOUD.getName(), dto.getRuleName()),
+        ruleService.register(registerRule(selectorId, dto, PluginEnum.SPRING_CLOUD.getName()),
                 dto.getRuleName(),
                 false);
     }
@@ -185,7 +185,7 @@ private void registerContextPathPlugin(final String contextPath) {
         SelectorDO selectorDO = selectorService.findByName(name);
         if (Objects.isNull(selectorDO)) {
             String contextPathSelectorId = registerContextPathSelector(contextPath, name);
-            ruleService.register(registerRule(contextPathSelectorId, contextPath + "/**", PluginEnum.CONTEXT_PATH.getName(), name),
+            ruleService.register(registerContextPathRule(contextPathSelectorId, contextPath + "/**", PluginEnum.CONTEXT_PATH.getName(), name),
                     name,
                     false);
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringMVCServiceImpl.java
Patch:
@@ -115,7 +115,7 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
 
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO dto, final MetaDataDO exist) {
-        ruleService.register(registerRule(selectorId, dto.getPath(), PluginEnum.DIVIDE.getName(), dto.getRuleName()),
+        ruleService.register(registerRule(selectorId, dto, PluginEnum.DIVIDE.getName()),
                 dto.getRuleName(),
                 false);
     }
@@ -125,7 +125,7 @@ private void registerContextPathPlugin(final String contextPath) {
         SelectorDO selectorDO = selectorService.findByName(name);
         if (Objects.isNull(selectorDO)) {
             String contextPathSelectorId = registerContextPathSelector(contextPath, name);
-            ruleService.register(registerRule(contextPathSelectorId, contextPath + "/**", PluginEnum.CONTEXT_PATH.getName(), name),
+            ruleService.register(registerContextPathRule(contextPathSelectorId, contextPath + "/**", PluginEnum.CONTEXT_PATH.getName(), name),
                     name,
                     false);
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterTarsServiceImpl.java
Patch:
@@ -75,6 +75,6 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
 
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
-        ruleService.register(registerRule(selectorId, metaDataDTO.getPath(), PluginEnum.TARS.getName(), metaDataDTO.getRuleName()), metaDataDTO.getPath(), Objects.isNull(exist));
+        ruleService.register(registerRule(selectorId, metaDataDTO, PluginEnum.TARS.getName()), metaDataDTO.getPath(), Objects.isNull(exist));
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/DivideUpstreamUtils.java
Patch:
@@ -29,7 +29,7 @@ public class DivideUpstreamUtils {
 
 
     /**
-     * buildDivideUpstream.
+     * build divide upstream.
      *
      * @param metaDataRegisterDTO metaDataRegisterDTO
      * @return divideUpstream divideUpstream
@@ -39,7 +39,7 @@ public static DivideUpstream buildDivideUpstream(final MetaDataRegisterDTO metaD
     }
 
     /**
-     * buildUrl.
+     * build url.
      *
      * @param metaDataRegisterDTO metaDataRegisterDTO
      * @return String String

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/ShenyuClientRegisterServiceTest.java
Patch:
@@ -521,7 +521,7 @@ private MetaDataRegisterDTO buildMetaDataDTO() {
         metaDataDTO.setServiceName("serviceName3");
         metaDataDTO.setMethodName("methodName3");
         metaDataDTO.setParameterTypes("parameterTypes3");
-        metaDataDTO.setRpcExt("rpcExt3");
+        metaDataDTO.setRpcExt("{\"loadbalance\":\"random\"}");
         metaDataDTO.setEnabled(false);
         return metaDataDTO;
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RuleHandle.java
Patch:
@@ -28,10 +28,11 @@ public interface RuleHandle extends Serializable {
 
     /**
      * It will be call when RuleHandleFactory to generate a RuleHandle object.
-     * @param path  path.
+     * @param path   path.
+     * @param rpcExt rpc ext.
      * @return      it's self.
      */
-    RuleHandle createDefault(String path);
+    RuleHandle createDefault(String path, String rpcExt);
 
     /**
      * Format this object to json string.

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandle.java
Patch:
@@ -98,7 +98,7 @@ public void setAddPrefix(final String addPrefix) {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         this.contextPath = path;
         return this;
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/CryptorRequestRuleHandle.java
Patch:
@@ -94,7 +94,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         return this;
     }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/CryptorResponseRuleHandle.java
Patch:
@@ -88,7 +88,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         return this;
     }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/DivideRuleHandle.java
Patch:
@@ -183,7 +183,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         this.loadBalance = RuleHandleConstants.DEFAULT_LOAD_BALANCE.getName();
         this.retry = RuleHandleConstants.DEFAULT_RETRY;
         return this;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandle.java
Patch:
@@ -269,7 +269,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         this.statusCode = HttpStatus.OK.value();
         return this;
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ParamMappingHandle.java
Patch:
@@ -119,7 +119,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         return this;
     }
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/SofaRuleHandle.java
Patch:
@@ -133,7 +133,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         this.retries = RuleHandleConstants.DEFAULT_RETRIES;
         this.loadBalance = RuleHandleConstants.DEFAULT_LOAD_BALANCE.getName();
         return this;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/SpringCloudRuleHandle.java
Patch:
@@ -129,7 +129,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         this.path = path;
         return this;
     }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/WebSocketRuleHandle.java
Patch:
@@ -131,7 +131,7 @@ public String toString() {
     }
 
     @Override
-    public RuleHandle createDefault(final String path) {
+    public RuleHandle createDefault(final String path, final String rpcExt) {
         this.loadBalance = RuleHandleConstants.DEFAULT_LOAD_BALANCE.getName();
         this.retry = RuleHandleConstants.DEFAULT_RETRY;
         this.timeout = Constants.TIME_OUT;

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandleTest.java
Patch:
@@ -35,7 +35,7 @@ public class ContextMappingHandleTest {
     @Test
     public void testCreateDefault() {
         ContextMappingHandle contextMappingHandle = new ContextMappingHandle();
-        RuleHandle aDefault = contextMappingHandle.createDefault(PATH);
+        RuleHandle aDefault = contextMappingHandle.createDefault(PATH, "");
         assertNotNull(aDefault);
         assertEquals(aDefault, contextMappingHandle);
         assertEquals(contextMappingHandle.getContextPath(), PATH);

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandleTest.java
Patch:
@@ -36,7 +36,7 @@ public class ModifyResponseRuleHandleTest {
     @Test
     public void testCreateDefault() {
         ModifyResponseRuleHandle modifyResponseRuleHandle = new ModifyResponseRuleHandle();
-        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH);
+        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH, "");
         assertNotNull(aDefault);
         assertEquals(aDefault, modifyResponseRuleHandle);
         assertEquals(HttpStatus.OK.value(), modifyResponseRuleHandle.getStatusCode());

File: shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ParamMappingHandleTest.java
Patch:
@@ -37,7 +37,7 @@ public class ParamMappingHandleTest {
     @Test
     public void testCreateDefault() {
         ParamMappingHandle paramMappingHandle = new ParamMappingHandle();
-        RuleHandle aDefault = paramMappingHandle.createDefault(PATH);
+        RuleHandle aDefault = paramMappingHandle.createDefault(PATH, "");
         assertNotNull(aDefault);
         assertEquals(aDefault, paramMappingHandle);
     }

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -155,6 +155,7 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
         reference.setRegistry(registryConfig);
         reference.setInterface(metaData.getServiceName());
         reference.setProtocol("dubbo");
+        reference.setLoadbalance("gray");
         String rpcExt = metaData.getRpcExt();
         DubboParamExtInfo dubboParamExtInfo = GsonUtils.getInstance().fromJson(rpcExt, DubboParamExtInfo.class);
         if (Objects.nonNull(dubboParamExtInfo)) {
@@ -164,9 +165,6 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
             if (StringUtils.isNoneBlank(dubboParamExtInfo.getGroup())) {
                 reference.setGroup(dubboParamExtInfo.getGroup());
             }
-            if (StringUtils.isNoneBlank(dubboParamExtInfo.getLoadbalance())) {
-                reference.setLoadbalance(dubboParamExtInfo.getLoadbalance());
-            }
             if (StringUtils.isNoneBlank(dubboParamExtInfo.getUrl())) {
                 reference.setUrl(dubboParamExtInfo.getUrl());
             }

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPluginTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
 import org.springframework.web.server.ServerWebExchange;
-import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 
 import static org.junit.Assert.assertEquals;
@@ -77,7 +76,6 @@ public void doExecute() {
         exchange.getAttributes().put(Constants.CONTEXT, context);
         exchange.getAttributes().put(Constants.PARAM_TRANSFORM, "{key:value}");
         exchange.getAttributes().put(Constants.META_DATA, metaData);
-        when(chain.execute(exchange)).thenReturn(Mono.empty());
         SelectorData selectorData = mock(SelectorData.class);
         RuleData data = mock(RuleData.class);
         StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();

File: shenyu-plugin/shenyu-plugin-divide/src/test/java/org/apache/shenyu/plugin/divide/DividePluginTest.java
Patch:
@@ -157,7 +157,7 @@ public void getOrderTest() {
     private void initMockInfo() { 
         ShenyuContext context = mock(ShenyuContext.class);
         context.setRpcType(RpcTypeEnum.HTTP.getName());
-        DivideRuleHandle handle = (DivideRuleHandle) RuleHandleFactory.ruleHandle(PluginEnum.DIVIDE.getName(), "");
+        DivideRuleHandle handle = (DivideRuleHandle) RuleHandleFactory.ruleHandle(PluginEnum.DIVIDE.getName(), "", "");
         when(selectorData.getId()).thenReturn("mock");
         when(selectorData.getHandle()).thenReturn(GsonUtils.getGson().toJson(divideUpstreamList));
         when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(handle));

File: shenyu-plugin/shenyu-plugin-websocket/src/test/java/org/apache/shenyu/plugin/websocket/WebSocketPluginTest.java
Patch:
@@ -149,7 +149,7 @@ public void getOrderTest() {
     private void initMockInfo() {
         ShenyuContext context = mock(ShenyuContext.class);
         context.setRpcType(RpcTypeEnum.HTTP.getName());
-        DivideRuleHandle handle = (DivideRuleHandle) RuleHandleFactory.ruleHandle(PluginEnum.DIVIDE.getName(), "");
+        DivideRuleHandle handle = (DivideRuleHandle) RuleHandleFactory.ruleHandle(PluginEnum.DIVIDE.getName(), "", "");
         when(selectorData.getId()).thenReturn("mock");
         when(selectorData.getHandle()).thenReturn(GsonUtils.getGson().toJson(divideUpstreamList));
         when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(handle));

File: shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootService.java
Patch:
@@ -60,6 +60,7 @@ public void stop() {
             server.stop();
             registered.set(false);
             CollectorRegistry.defaultRegistry.clear();
+            MetricsReporter.clean();
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -157,7 +157,8 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
                     }
                 }
                 exist.add(addDivideUpstream);
-                handleAdd = GsonUtils.getInstance().toJson(exist);
+                springCloudSelectorHandle.setDivideUpstreams(exist);
+                handleAdd = GsonUtils.getInstance().toJson(springCloudSelectorHandle);
             }
             selectorDO.setHandle(handleAdd);
             selectorData.setHandle(handleAdd);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/DivideUpstreamUtils.java
Patch:
@@ -35,7 +35,7 @@ public class DivideUpstreamUtils {
      * @return divideUpstream divideUpstream
      */
     public static DivideUpstream buildDivideUpstream(final MetaDataRegisterDTO metaDataRegisterDTO) {
-        return DivideUpstream.builder().upstreamHost("localhost").protocol("http://").upstreamUrl(buildUrl(metaDataRegisterDTO)).weight(50).build();
+        return DivideUpstream.builder().upstreamHost("localhost").protocol("http://").upstreamUrl(buildUrl(metaDataRegisterDTO)).weight(50).warmup(10).timestamp(System.currentTimeMillis()).build();
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/proxy/AlibabaDubboProxyServiceTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.alibaba.dubbo.cache.ApplicationConfigCache;
-import org.apache.shenyu.plugin.api.param.BodyParamResolveService;
+import org.apache.shenyu.plugin.dubbo.common.param.DubboParamResolveService;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -97,7 +97,7 @@ public void testGenericInvoker() throws Exception {
         }
     }
 
-    class BodyParamResolveServiceImpl implements BodyParamResolveService {
+    class BodyParamResolveServiceImpl implements DubboParamResolveService {
 
         @Override
         public Pair<String[], Object[]> buildParameter(final String body, final String parameterTypes) {

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyServiceTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache;
-import org.apache.shenyu.plugin.api.param.BodyParamResolveService;
+import org.apache.shenyu.plugin.dubbo.common.param.DubboParamResolveService;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -92,7 +92,7 @@ public void genericInvokerTest() throws IllegalAccessException, NoSuchFieldExcep
         future.complete("success");
     }
 
-    static class BodyParamResolveServiceImpl implements BodyParamResolveService {
+    static class BodyParamResolveServiceImpl implements DubboParamResolveService {
 
         @Override
         public Pair<String[], Object[]> buildParameter(final String body, final String parameterTypes) {

File: shenyu-plugin/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/param/DubboParamResolveServiceImpl.java
Patch:
@@ -18,13 +18,12 @@
 package org.apache.shenyu.plugin.dubbo.common.param;
 
 import org.apache.commons.lang3.tuple.Pair;
-import org.apache.shenyu.plugin.api.param.BodyParamResolveService;
 import org.apache.shenyu.plugin.api.utils.BodyParamUtils;
 
 /**
  * The type Default generic param resolve service.
  */
-public class DubboBodyParamResolveServiceImpl implements BodyParamResolveService {
+public class DubboParamResolveServiceImpl implements DubboParamResolveService {
 
     @Override
     public Pair<String[], Object[]> buildParameter(final String body, final String parameterTypes) {

File: shenyu-plugin/shenyu-plugin-dubbo-common/src/test/java/org/apache/shenyu/plugin/dubbo/common/param/DubboParamResolveServiceTest.java
Patch:
@@ -34,10 +34,10 @@
  * Test cases for DefaultDubboParamResolveService.
  */
 @RunWith(MockitoJUnitRunner.class)
-public class DubboBodyParamResolveServiceTest {
+public class DubboParamResolveServiceTest {
     
     @InjectMocks
-    private DubboBodyParamResolveServiceImpl impl;
+    private DubboParamResolveServiceImpl impl;
     
     @Test
     public void testBuildParameterWithNull() {

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/param/SofaParamResolveService.java
Patch:
@@ -15,15 +15,15 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.api.param;
+package org.apache.shenyu.plugin.sofa.param;
 
 import org.apache.commons.lang3.tuple.Pair;
 
 /**
  * The interface Generic param service.
- * This service is used to construct the parameters required for the dubbo and sofa generalization.
+ * This service is used to construct the parameters required for the sofa generalization.
  */
-public interface BodyParamResolveService {
+public interface SofaParamResolveService {
 
     /**
      * Build parameter pair.

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/param/SofaParamResolveServiceImpl.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.api.param.BodyParamResolveService;
 import org.apache.shenyu.plugin.api.utils.BodyParamUtils;
 
 import java.util.Arrays;
@@ -36,7 +35,7 @@
 /**
  * The type Default generic param resolve service.
  */
-public class SofaBodyParamResolveServiceImpl implements BodyParamResolveService {
+public class SofaParamResolveServiceImpl implements SofaParamResolveService {
 
     @Override
     public Pair<String[], Object[]> buildParameter(final String body, final String parameterTypes) {

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/param/SofaBodyParamResolveServiceTest.java
Patch:
@@ -38,7 +38,7 @@
 public final class SofaBodyParamResolveServiceTest {
 
     @InjectMocks
-    private SofaBodyParamResolveServiceImpl impl;
+    private SofaParamResolveServiceImpl impl;
 
     @Test
     public void testBuildParameter() {

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/proxy/SofaProxyServiceTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
-import org.apache.shenyu.plugin.api.param.BodyParamResolveService;
 import org.apache.shenyu.plugin.sofa.cache.ApplicationConfigCache;
+import org.apache.shenyu.plugin.sofa.param.SofaParamResolveService;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -92,7 +92,7 @@ public void test() throws NoSuchFieldException, IllegalAccessException {
         RpcInvokeContext.getContext().getResponseCallback().onAppResponse("success", null, null);
     }
 
-    static class SofaParamResolveServiceImpl implements BodyParamResolveService {
+    static class SofaParamResolveServiceImpl implements SofaParamResolveService {
 
         @Override
         public Pair<String[], Object[]> buildParameter(final String body, final String parameterTypes) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mybatis/pg/handler/PostGreSqlBooleanHandler.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.ibatis.type.BaseTypeHandler;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.MappedTypes;
-
 import java.sql.CallableStatement;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ThreadLocalUtils.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * The type Thread local util.
  */
-public class ThreadLocalUtil {
+public class ThreadLocalUtils {
     
     private static final ThreadLocal<Map<String, Object>> THREAD_CONTEXT = ThreadLocal.withInitial(HashMap::new);
     

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.admin.service.SyncDataService;
 import org.apache.shenyu.admin.spring.SpringBeanUtils;
-import org.apache.shenyu.admin.utils.ThreadLocalUtil;
+import org.apache.shenyu.admin.utils.ThreadLocalUtils;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -139,7 +139,7 @@ public void testSend() throws IOException {
         assertEquals(1L, getSessionSetSize());
         WebsocketCollector.send(null, DataEventTypeEnum.MYSELF);
         Mockito.verify(basic, Mockito.times(0)).sendText(null);
-        ThreadLocalUtil.put("sessionKey", session);
+        ThreadLocalUtils.put("sessionKey", session);
         WebsocketCollector.send("test_message_1", DataEventTypeEnum.MYSELF);
         Mockito.verify(basic, Mockito.times(1)).sendText("test_message_1");
         WebsocketCollector.send("test_message_2", DataEventTypeEnum.CREATE);
@@ -154,6 +154,6 @@ private long getSessionSetSize() {
     }
 
     private Session getSession() {
-        return (Session) ThreadLocalUtil.get("sessionKey");
+        return (Session) ThreadLocalUtils.get("sessionKey");
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/SelectorServiceTest.java
Patch:
@@ -127,7 +127,6 @@ public void testRegister() {
 
     @Test
     public void testCreateOrUpdate() {
-        given(pluginMapper.selectByName("divide")).willReturn(buildPluginDO());
         publishEvent();
         testUpdate();
         testCreate();
@@ -335,6 +334,7 @@ private MetaDataRegisterDTO buildMetaDataRegisterDTO() {
         metaDataRegisterDTO.setPath("/test");
         metaDataRegisterDTO.setHost("127.0.0.1");
         metaDataRegisterDTO.setPort(13307);
+        metaDataRegisterDTO.setRpcType("test");
         return metaDataRegisterDTO;
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -244,6 +244,6 @@ public static PluginEnum getPluginEnumByName(final String name) {
      * @return List string
      */
     public static List<String> getUpstreamNames() {
-        return Arrays.asList(DIVIDE.name, GRPC.name, TARS.name);
+        return Arrays.asList(DIVIDE.name, GRPC.name, TARS.name, SPRING_CLOUD.name);
     }
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/RpcTypeEnum.java
Patch:
@@ -118,7 +118,7 @@ public static List<RpcTypeEnum> acquireSupports() {
      * @return operator support.
      */
     public static List<RpcTypeEnum> acquireSupportURIs() {
-        return Arrays.asList(RpcTypeEnum.GRPC, RpcTypeEnum.HTTP, RpcTypeEnum.TARS);
+        return Arrays.asList(RpcTypeEnum.GRPC, RpcTypeEnum.HTTP, RpcTypeEnum.TARS, RpcTypeEnum.SPRING_CLOUD);
     }
 
     /**

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/GlobalErrorHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.web.handler;
 
-import org.apache.shenyu.common.utils.GsonUtils;
+import org.apache.shenyu.common.utils.JsonUtils;
 import org.apache.shenyu.common.utils.ThreadShare;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.slf4j.Logger;
@@ -92,7 +92,7 @@ private Map<String, Object> response(final ServerRequest request) {
         }
         HTTP_STATUS_HOLDER.set(httpStatus.value());
         Object error = ShenyuResultWrap.error(httpStatus.value(), httpStatus.getReasonPhrase(), ex.getMessage());
-        return GsonUtils.getInstance().toObjectMap(GsonUtils.getInstance().toJson(error));
+        return JsonUtils.toMap(error);
     }
 
     private void logError(final ServerRequest request) {

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/GlobalErrorHandlerTest.java
Patch:
@@ -113,7 +113,7 @@ public void getErrorAttributes() {
                 .build();
         Map<String, Object> response = globalErrorHandler.getErrorAttributes(serverRequest, false);
         assertNotNull(response);
-        assertThat(response, hasEntry("code", 500L));
+        assertThat(response, hasEntry("code", 500));
         assertThat(response, hasEntry("message", HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase()));
         assertThat(response, hasEntry("data", nullPointerException.getMessage()));
     }

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/shutdown/ShenyuClientShutdownHook.java
Patch:
@@ -57,9 +57,7 @@ public class ShenyuClientShutdownHook {
      */
     public static void set(final ShenyuClientRegisterRepository result, final Properties props) {
         String name = hookNamePrefix + "-" + hookId.incrementAndGet();
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
-            result.close();
-        }, name));
+        Runtime.getRuntime().addShutdownHook(new Thread(result::close, name));
         LOG.info("Add hook {}", name);
         ShenyuClientShutdownHook.props = props;
     }

File: shenyu-examples/shenyu-examples-grpc/src/main/java/org/apache/shenyu/examples/grpc/ShenyuGrpcServerBuilder.java
Patch:
@@ -29,7 +29,6 @@ public class ShenyuGrpcServerBuilder implements GrpcServerBuilder {
 
     @Override
     public ServerBuilder<?> buildServerBuilder() {
-        ServerBuilder<?> serverBuilder = ServerBuilder.forPort(8080);
-        return serverBuilder;
+        return ServerBuilder.forPort(8080);
     }
 }

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -135,7 +135,6 @@ public ReferenceConfig<GenericService> initRef(final MetaData metaData) {
             LOG.error("init dubbo ref exception", e);
         }
         return build(metaData);
-
     }
 
     /**
@@ -145,6 +144,9 @@ public ReferenceConfig<GenericService> initRef(final MetaData metaData) {
      * @return the reference config
      */
     public ReferenceConfig<GenericService> build(final MetaData metaData) {
+        if (Objects.isNull(applicationConfig) || Objects.isNull(registryConfig)) {
+            return new ReferenceConfig<>();
+        }
         ReferenceConfig<GenericService> reference = new ReferenceConfig<>();
         reference.setGeneric(true);
         reference.setApplication(applicationConfig);
@@ -179,7 +181,6 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
         } catch (Exception e) {
             LOG.error("init alibaba dubbo refernce exception", e);
         }
-
         return reference;
     }
 

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/proxy/AlibabaDubboProxyService.java
Patch:
@@ -68,8 +68,8 @@ public ResponseFuture genericInvoker(final String body, final MetaData metaData)
             ApplicationConfigCache.getInstance().invalidate(metaData.getPath());
             reference = ApplicationConfigCache.getInstance().initRef(metaData);
         }
-        GenericService genericService = reference.get();
         try {
+            GenericService genericService = reference.get();
             Pair<String[], Object[]> pair;
             if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {
                 pair = new ImmutablePair<>(new String[]{}, new Object[]{});

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -145,6 +145,9 @@ public ReferenceConfig<GenericService> initRef(final MetaData metaData) {
      * @return the reference config
      */
     public ReferenceConfig<GenericService> build(final MetaData metaData) {
+        if (Objects.isNull(applicationConfig) || Objects.isNull(registryConfig)) {
+            return new ReferenceConfig<>();
+        }
         ReferenceConfig<GenericService> reference = new ReferenceConfig<>();
         reference.setGeneric("true");
         reference.setAsync(true);

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/utils/WebFluxResultUtils.java
Patch:
@@ -58,7 +58,7 @@ public static Mono<Void> result(final ServerWebExchange exchange, final Object r
      */
     public static Mono<Void> noSelectorResult(final String pluginName, final ServerWebExchange exchange) {
         LOG.error("can not match selector data: {}", pluginName);
-        Object error = ShenyuResultWrap.error(ShenyuResultEnum.SELECTOR_NOT_FOUND.getCode(), ShenyuResultEnum.SELECTOR_NOT_FOUND.getMsg(), null);
+        Object error = ShenyuResultWrap.error(ShenyuResultEnum.SELECTOR_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.SELECTOR_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
 
@@ -71,7 +71,7 @@ public static Mono<Void> noSelectorResult(final String pluginName, final ServerW
      */
     public static Mono<Void> noRuleResult(final String pluginName, final ServerWebExchange exchange) {
         LOG.error("can not match rule data: {}", pluginName);
-        Object error = ShenyuResultWrap.error(ShenyuResultEnum.RULE_NOT_FOUND.getCode(), ShenyuResultEnum.RULE_NOT_FOUND.getMsg(), null);
+        Object error = ShenyuResultWrap.error(ShenyuResultEnum.RULE_NOT_FOUND.getCode(), pluginName + ":" + ShenyuResultEnum.RULE_NOT_FOUND.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
 }

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -119,7 +119,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
 
     @Override
     public int getOrder() {
-        return PluginEnum.DIVIDE.getCode() + 1;
+        return PluginEnum.NETTY_HTTP_CLIENT.getCode();
     }
 
     @Override
@@ -132,6 +132,6 @@ public boolean skip(final ServerWebExchange exchange) {
 
     @Override
     public String named() {
-        return "NettyHttpClient";
+        return PluginEnum.NETTY_HTTP_CLIENT.getName();
     }
 }

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -82,12 +82,12 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
 
     @Override
     public int getOrder() {
-        return PluginEnum.DIVIDE.getCode() + 1;
+        return PluginEnum.WEB_CLIENT.getCode();
     }
 
     @Override
     public String named() {
-        return "webClient";
+        return PluginEnum.WEB_CLIENT.getName();
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-httpclient/src/test/java/org/apache/shenyu/plugin/httpclient/WebClientPluginTest.java
Patch:
@@ -135,22 +135,21 @@ public void testSkip() {
      */
     @Test
     public void testGetOrder() {
-        assertEquals(PluginEnum.DIVIDE.getCode() + 1, webClientPlugin.getOrder());
+        assertEquals(PluginEnum.WEB_CLIENT.getCode(), webClientPlugin.getOrder());
     }
 
     /**
      * test case for WebClientPlugin {@link WebClientPlugin#named()}.
      */
     @Test
     public void testNamed() {
-        assertEquals("webClient", webClientPlugin.named());
+        assertEquals(PluginEnum.WEB_CLIENT.getName(), webClientPlugin.named());
     }
 
     private ServerWebExchange generateServerWebExchange() {
         ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/test").build());
         exchange.getAttributes().put(Constants.CONTEXT, mock(ShenyuContext.class));
         exchange.getAttributes().put(Constants.HTTP_URL, "/test");
-
         return exchange;
     }
 

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuPluginPathBuilder.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.web.loader;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.shenyu.common.exception.ShenyuException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -63,7 +62,7 @@ private static File buildPluginJarPath() {
             boolean isInJar = existFileInJarIndex > -1;
             return isInJar ? getFileInJar(url, existFileInJarIndex) : getFileInResource(url, classResourcePath);
         }
-        throw new ShenyuException("Can not locate shenyu plugin jar file.");
+        return new File("/ext-lib");
     }
     
     private static File getFileInResource(final String url, final String classResourcePath) {

File: shenyu-web/src/main/java/org/apache/shenyu/web/fallback/DefaultFallbackController.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shenyu.web.fallback;
 
-import org.apache.shenyu.plugin.api.result.DefaultShenyuEntity;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
+import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -44,7 +44,7 @@ public class DefaultFallbackController {
     @GetMapping("/hystrix")
     public Object hystrixPluginFallback() {
         LOG.error("the default fallback for hystrix");
-        return DefaultShenyuEntity.error(ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getMsg(), null);
+        return ShenyuResultWrap.error(ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.HYSTRIX_PLUGIN_FALLBACK.getMsg(), null);
     }
 
     /**
@@ -55,6 +55,6 @@ public Object hystrixPluginFallback() {
     @GetMapping("/resilience4j")
     public Object resilience4jFallBack() {
         LOG.error("the default fallback for resilience4j");
-        return DefaultShenyuEntity.error(ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getMsg(), null);
+        return ShenyuResultWrap.error(ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getCode(), ShenyuResultEnum.RESILIENCE4J_PLUGIN_FALLBACK.getMsg(), null);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/AppAuthController.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.controller;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.AppAuthDTO;
 import org.apache.shenyu.admin.model.dto.AuthApplyDTO;
 import org.apache.shenyu.admin.model.dto.AuthPathWarpDTO;
@@ -91,6 +92,7 @@ public ShenyuAdminResult updateSk(@RequestParam("appKey") final String appKey, @
      * @param pageSize    page size of query
      * @return the shenyu result
      */
+    @PageHelperControllerAnnotation
     @GetMapping("/findPageByQuery")
     public ShenyuAdminResult findPageByQuery(final String appKey, final String phone, final Integer currentPage, final Integer pageSize) {
         AppAuthQuery query = new AppAuthQuery();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.controller;
 
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.config.properties.SecretProperties;
 import org.apache.shenyu.admin.model.dto.DashboardUserDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
@@ -70,6 +71,7 @@ public DashboardUserController(final SecretProperties secretProperties, final Da
      * @param pageSize    page size
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult queryDashboardUsers(final String userName, final Integer currentPage, final Integer pageSize) {
         String key = secretProperties.getKey();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/MetaDataController.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.controller;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.BatchCommonDTO;
 import org.apache.shenyu.admin.model.dto.MetaDataDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
@@ -62,6 +63,7 @@ public MetaDataController(final MetaDataService metaDataService) {
      * @param pageSize    the page size
      * @return the shenyu result
      */
+    @PageHelperControllerAnnotation
     @GetMapping("/queryList")
     public ShenyuAdminResult queryList(final String appName, final Integer currentPage, final Integer pageSize) {
         CommonPager<MetaDataVO> commonPager = metaDataService.listByPage(new MetaDataQuery(appName, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/PluginController.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.controller;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.BatchCommonDTO;
 import org.apache.shenyu.admin.model.dto.PluginDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
@@ -71,6 +72,7 @@ public PluginController(final PluginService pluginService, final SyncDataService
      * @param pageSize    page size.
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult queryPlugins(final String name, final Integer enabled, final Integer currentPage, final Integer pageSize) {
         CommonPager<PluginVO> commonPager = pluginService.listByPage(new PluginQuery(name, enabled, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/PluginHandleController.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.PluginHandleDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
@@ -62,6 +63,7 @@ public PluginHandleController(final PluginHandleService pluginHandleService) {
      * @param pageSize page size
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult queryPluginHandles(final String pluginId, final String field, final Integer currentPage, final Integer pageSize) {
         CommonPager<PluginHandleVO> commonPager = pluginHandleService.listByPage(new PluginHandleQuery(pluginId, field, null, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ResourceController.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.controller;
 
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.ResourceDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
@@ -65,6 +66,7 @@ public ResourceController(final ResourceService resourceService) {
      * @param pageSize page size
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult queryResource(final String title, final Integer currentPage, final Integer pageSize) {
         CommonPager<ResourceVO> commonPager = resourceService.listByPage(new ResourceQuery(title, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/RoleController.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.RoleDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
@@ -76,6 +77,7 @@ public ShenyuAdminResult selectAll() {
      * @param pageSize    page size
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult queryRole(final String roleName, final Integer currentPage, final Integer pageSize) {
         CommonPager<RoleVO> commonPager = roleService.listByPage(new RoleQuery(roleName, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/RuleController.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.RuleDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
@@ -63,6 +64,7 @@ public RuleController(final RuleService ruleService) {
      * @param pageSize    page size.
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult queryRules(final String selectorId, final String name, final Integer currentPage, final Integer pageSize) {
         CommonPager<RuleVO> commonPager = ruleService.listByPage(new RuleQuery(selectorId, name, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/SelectorController.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.SelectorDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
 import org.apache.shenyu.admin.model.page.PageParameter;
@@ -63,6 +64,7 @@ public SelectorController(final SelectorService selectorService) {
      * @param pageSize    page size.
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult querySelectors(final String pluginId, final String name, final Integer currentPage, final Integer pageSize) {
         CommonPager<SelectorVO> commonPager = selectorService.listByPage(new SelectorQuery(pluginId, name, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ShenyuDictController.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shenyu.admin.controller;
 
+import org.apache.shenyu.admin.aspect.annotation.PageHelperControllerAnnotation;
 import org.apache.shenyu.admin.model.dto.BatchCommonDTO;
 import org.apache.shenyu.admin.model.dto.ShenyuDictDTO;
 import org.apache.shenyu.admin.model.page.CommonPager;
@@ -66,6 +67,7 @@ public ShenyuDictController(final ShenyuDictService shenyuDictService) {
      * @param pageSize    page size
      * @return {@linkplain ShenyuAdminResult}
      */
+    @PageHelperControllerAnnotation
     @GetMapping("")
     public ShenyuAdminResult queryDicts(final String type, final String dictCode, final String dictName, final Integer currentPage, final Integer pageSize) {
         CommonPager<ShenyuDictVO> commonPager = shenyuDictService.listByPage(new ShenyuDictQuery(type, dictCode, dictName, new PageParameter(currentPage, pageSize)));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/AppAuthMapper.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.AppAuthDO;
 import org.apache.shenyu.admin.model.query.AppAuthQuery;
 
@@ -44,6 +45,7 @@ public interface AppAuthMapper {
      * @param appAuthQuery {@linkplain AppAuthQuery}
      * @return {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<AppAuthDO> selectByQuery(AppAuthQuery appAuthQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/DashboardUserMapper.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.DashboardUserDO;
 import org.apache.shenyu.admin.model.query.DashboardUserQuery;
 
@@ -61,6 +62,7 @@ public interface DashboardUserMapper {
      * @param dashboardUserQuery {@linkplain DashboardUserQuery}
      * @return {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<DashboardUserDO> selectByQuery(DashboardUserQuery dashboardUserQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/MetaDataMapper.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.MetaDataDO;
 import org.apache.shenyu.admin.model.query.MetaDataQuery;
 
@@ -68,6 +69,7 @@ public interface MetaDataMapper {
      * @param metaDataQuery the meta data query
      * @return the list
      */
+    @PageHelperMapperAnnotation
     List<MetaDataDO> selectByQuery(MetaDataQuery metaDataQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/PluginHandleMapper.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.PluginHandleDO;
 import org.apache.shenyu.admin.model.query.PluginHandleQuery;
 
@@ -69,6 +70,7 @@ public interface PluginHandleMapper {
      * @param pluginHandleQuery {@linkplain PluginHandleQuery}
      * @return the plugin handle list
      */
+    @PageHelperMapperAnnotation
     List<PluginHandleDO> selectByQuery(PluginHandleQuery pluginHandleQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/PluginMapper.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.mapper;
 
 import org.apache.ibatis.annotations.Mapper;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.PluginDO;
 import org.apache.shenyu.admin.model.query.PluginQuery;
 
@@ -59,6 +60,7 @@ public interface PluginMapper {
      * @param pluginQuery {@linkplain PluginQuery}
      * @return {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<PluginDO> selectByQuery(PluginQuery pluginQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/ResourceMapper.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.ResourceDO;
 import org.apache.shenyu.admin.model.query.ResourceQuery;
 
@@ -52,6 +53,7 @@ public interface ResourceMapper {
      * @param resourceQuery {@linkplain ResourceQuery}
      * @return {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<ResourceDO> selectByQuery(ResourceQuery resourceQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/RoleMapper.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.mapper;
 
 import org.apache.ibatis.annotations.Mapper;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.RoleDO;
 import org.apache.shenyu.admin.model.query.RoleQuery;
 
@@ -43,6 +44,7 @@ public interface RoleMapper {
      * @param roleQuery {@linkplain RoleQuery}
      * @return  {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<RoleDO> selectByQuery(RoleQuery roleQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/RuleConditionMapper.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.mapper;
 
 import org.apache.ibatis.annotations.Mapper;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.RuleConditionDO;
 import org.apache.shenyu.admin.model.query.RuleConditionQuery;
 
@@ -43,6 +44,7 @@ public interface RuleConditionMapper {
      * @param ruleConditionQuery {@linkplain RuleConditionQuery}
      * @return {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<RuleConditionDO> selectByQuery(RuleConditionQuery ruleConditionQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/RuleMapper.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.mapper;
 
 import org.apache.ibatis.annotations.Mapper;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.RuleDO;
 import org.apache.shenyu.admin.model.query.RuleQuery;
 
@@ -43,6 +44,7 @@ public interface RuleMapper {
      * @param ruleQuery {@linkplain RuleQuery}
      * @return {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<RuleDO> selectByQuery(RuleQuery ruleQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/SelectorConditionMapper.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.mapper;
 
 import org.apache.ibatis.annotations.Mapper;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.SelectorConditionDO;
 import org.apache.shenyu.admin.model.query.SelectorConditionQuery;
 
@@ -43,6 +44,7 @@ public interface SelectorConditionMapper {
      * @param selectorConditionQuery {@linkplain SelectorConditionQuery}
      * @return {@linkplain List}
      */
+    @PageHelperMapperAnnotation
     List<SelectorConditionDO> selectByQuery(SelectorConditionQuery selectorConditionQuery);
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/SelectorMapper.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.shenyu.admin.model.entity.SelectorDO;
 import org.apache.shenyu.admin.model.query.SelectorQuery;
-
 import java.util.List;
 
 /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mapper/ShenyuDictMapper.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.ibatis.annotations.Mapper;
 import org.apache.ibatis.annotations.Param;
+import org.apache.shenyu.admin.aspect.annotation.PageHelperMapperAnnotation;
 import org.apache.shenyu.admin.model.entity.ShenyuDictDO;
 import org.apache.shenyu.admin.model.query.ShenyuDictQuery;
 
@@ -76,6 +77,7 @@ public interface ShenyuDictMapper {
      * @param shenyuDictQuery {@linkplain ShenyuDictQuery}
      * @return the shenyu dict list
      */
+    @PageHelperMapperAnnotation
     List<ShenyuDictDO> selectByQuery(ShenyuDictQuery shenyuDictQuery);
 
     /**

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/SignPlugin.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
-import org.apache.shenyu.plugin.api.sign.SignService;
+import org.apache.shenyu.plugin.sign.api.SignService;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/api/DefaultSignProvider.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.api.sign;
+package org.apache.shenyu.plugin.sign.api;
 
 import org.apache.shenyu.common.utils.SignUtils;
 

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/api/ShenyuSignProviderWrap.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.api.sign;
+package org.apache.shenyu.plugin.sign.api;
 
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/api/SignProvider.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.api.sign;
+package org.apache.shenyu.plugin.sign.api;
 
 import java.util.Map;
 

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/api/SignService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.api.sign;
+package org.apache.shenyu.plugin.sign.api;
 
 import org.apache.commons.lang3.tuple.Pair;
 import org.springframework.web.server.ServerWebExchange;

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/DefaultSignService.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.shenyu.common.utils.PathMatchUtils;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
-import org.apache.shenyu.plugin.api.sign.ShenyuSignProviderWrap;
-import org.apache.shenyu.plugin.api.sign.SignService;
+import org.apache.shenyu.plugin.sign.api.ShenyuSignProviderWrap;
+import org.apache.shenyu.plugin.sign.api.SignService;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
 import org.apache.shenyu.plugin.sign.cache.SignAuthDataCache;
 import org.slf4j.Logger;

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/SignPluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.plugin.api.sign.SignService;
+import org.apache.shenyu.plugin.sign.api.SignService;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 
 import org.junit.Before;

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/service/DefaultSignServiceTest.java
Patch:
@@ -26,11 +26,11 @@
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.SignUtils;
-import org.apache.shenyu.plugin.api.sign.DefaultSignProvider;
-import org.apache.shenyu.plugin.api.sign.SignService;
+import org.apache.shenyu.plugin.sign.api.DefaultSignProvider;
+import org.apache.shenyu.plugin.sign.api.SignService;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
-import org.apache.shenyu.plugin.api.sign.SignProvider;
+import org.apache.shenyu.plugin.sign.api.SignProvider;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
 import org.apache.shenyu.plugin.sign.cache.SignAuthDataCache;

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/sign/DefaultSignProviderTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shenyu.plugin.sign.sign;
 
-import org.apache.shenyu.plugin.api.sign.DefaultSignProvider;
-import org.apache.shenyu.plugin.api.sign.ShenyuSignProviderWrap;
-import org.apache.shenyu.plugin.api.sign.SignProvider;
+import org.apache.shenyu.plugin.sign.api.DefaultSignProvider;
+import org.apache.shenyu.plugin.sign.api.ShenyuSignProviderWrap;
+import org.apache.shenyu.plugin.sign.api.SignProvider;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sign/src/test/java/org/apache/shenyu/springboot/starter/plugin/sign/SignPluginConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.plugin.sign;
 
 import org.apache.shenyu.common.enums.PluginEnum;
-import org.apache.shenyu.plugin.api.sign.SignService;
+import org.apache.shenyu.plugin.sign.api.SignService;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
 import org.junit.Test;

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/GlobalPluginTest.java
Patch:
@@ -82,7 +82,7 @@ public void testExecuted() {
 
     @Test
     public void testGetOrder() {
-        assertEquals(globalPlugin.getOrder(), 1);
+        assertEquals(globalPlugin.getOrder(), 10);
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/service/DefaultSignService.java
Patch:
@@ -128,10 +128,10 @@ private Pair<Boolean, String> sign(final ShenyuContext shenyuContext, final Serv
         return Pair.of(Boolean.TRUE, "");
     }
 
-    private Map<String, String> buildParamsMap(final ShenyuContext dto) {
+    private Map<String, String> buildParamsMap(final ShenyuContext shenyuContext) {
         Map<String, String> map = Maps.newHashMapWithExpectedSize(3);
-        map.put(Constants.TIMESTAMP, dto.getTimestamp());
-        map.put(Constants.PATH, dto.getPath());
+        map.put(Constants.TIMESTAMP, shenyuContext.getTimestamp());
+        map.put(Constants.PATH, shenyuContext.getPath());
         map.put(Constants.VERSION, "1.0.0");
         return map;
     }

File: shenyu-web/src/main/java/org/apache/shenyu/web/logo/ShenyuLogo.java
Patch:
@@ -31,7 +31,6 @@
  * the shenyu logo.
  */
 @Order(LoggingApplicationListener.DEFAULT_ORDER + 1)
-
 public class ShenyuLogo implements ApplicationListener<ApplicationEnvironmentPreparedEvent> {
     /**
      * logger.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/spring/ShenyuApplicationContextAware.java
Patch:
@@ -20,7 +20,6 @@
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
-import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.stereotype.Component;
 
 /**
@@ -31,6 +30,6 @@ public class ShenyuApplicationContextAware implements ApplicationContextAware {
 
     @Override
     public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
-        SpringBeanUtils.getInstance().setCfgContext((ConfigurableApplicationContext) applicationContext);
+        SpringBeanUtils.getInstance().setApplicationContext(applicationContext);
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/websocket/WebsocketCollectorTest.java
Patch:
@@ -99,7 +99,7 @@ public void testOnOpen() {
     @Test
     public void testOnMessage() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(SpringBeanUtils.getInstance().getBean(SyncDataService.class)).thenReturn(syncDataService);
         when(syncDataService.syncAll(DataEventTypeEnum.MYSELF)).thenReturn(true);
         websocketCollector.onOpen(session);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/PermissionServiceTest.java
Patch:
@@ -81,7 +81,7 @@ public final class PermissionServiceTest {
     public void setUp() throws Exception {
         SecurityUtils.setSecurityManager(securityManager);
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         final DashboardUserDO dashboardUserDO = DashboardUserDO.builder().id("1").userName("admin").role(1).enabled(true).build();
         final UserRoleDO userRoleDO = UserRoleDO.builder().userId("1").roleId("1346358560427216896")
                 .id("1351007709096976384").dateCreated(new Timestamp(1610940313000L)).dateUpdated(new Timestamp(1610940313000L)).build();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/spring/ShenyuApplicationContextAwareTest.java
Patch:
@@ -41,6 +41,6 @@ public void setUp() {
     public void testSetApplicationContext() throws NoSuchFieldException {
         final ApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
         shenyuApplicationContextAwareUnderTest.setApplicationContext(applicationContext);
-        Assert.assertNotNull(SpringBeanUtils.getInstance().getClass().getDeclaredField("cfgContext"));
+        Assert.assertNotNull(SpringBeanUtils.getInstance().getClass().getDeclaredField("applicationContext"));
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/spring/SpringBeanUtilsTest.java
Patch:
@@ -41,16 +41,16 @@ public void setUp() {
     public void testGetBean() {
         ConfigurableApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
         when(applicationContext.getBean(TestBean.class)).thenReturn(new TestBean());
-        springBeanUtilsUnderTest.setCfgContext(applicationContext);
+        springBeanUtilsUnderTest.setApplicationContext(applicationContext);
         final TestBean result = springBeanUtilsUnderTest.getBean(TestBean.class);
         Assert.assertNotNull(result);
     }
 
     @Test
     public void testSetCfgContext() throws NoSuchFieldException {
         final ConfigurableApplicationContext cfgContext = mock(ConfigurableApplicationContext.class);
-        springBeanUtilsUnderTest.setCfgContext(cfgContext);
-        Assert.assertNotNull(springBeanUtilsUnderTest.getClass().getDeclaredField("cfgContext"));
+        springBeanUtilsUnderTest.setApplicationContext(cfgContext);
+        Assert.assertNotNull(springBeanUtilsUnderTest.getClass().getDeclaredField("applicationContext"));
     }
 
     @Test

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/JwtUtilsTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() {
         JwtProperties jwtProperties = mock(JwtProperties.class);
         when(jwtProperties.getExpiredSeconds()).thenReturn(EXPIRED_SECONDS);
         when(context.getBean(JwtProperties.class)).thenReturn(jwtProperties);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/HostParameterDataTest.java
Patch:
@@ -52,7 +52,7 @@ public class HostParameterDataTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         this.remoteAddressResolver = new RemoteAddressResolver() {
         };
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/http")

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/IpParameterDataTest.java
Patch:
@@ -49,7 +49,7 @@ public class IpParameterDataTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         this.remoteAddressResolver = new RemoteAddressResolver() {
         };
 

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/data/ParameterDataFactoryTest.java
Patch:
@@ -82,7 +82,7 @@ public void testBuildCookieData() {
     @Test
     public void testBuildHostData() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         RemoteAddressResolver remoteAddressResolver = new RemoteAddressResolver() {
         };
         ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/http")
@@ -96,7 +96,7 @@ public void testBuildHostData() {
     @Test
     public void testBuildIPData() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         RemoteAddressResolver remoteAddressResolver = new RemoteAddressResolver() {
         };
         ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/http")

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/condition/strategy/AbstractMatchStrategyTest.java
Patch:
@@ -53,7 +53,7 @@ public final class AbstractMatchStrategyTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(RemoteAddressResolver.class)).thenReturn(new RemoteAddressResolver() { });
         conditionData = new ConditionData();
         conditionData.setParamName("shenyu");

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/fallback/FallbackHandlerTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         DispatcherHandler handler = mock(DispatcherHandler.class);
         when(context.getBean(DispatcherHandler.class)).thenReturn(handler);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/SHENYU/SHENYU")
                 .remoteAddress(new InetSocketAddress(8090))
                 .contextPath("/SHENYU")

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/HostAddressUtilsTest.java
Patch:
@@ -47,7 +47,7 @@ public final class HostAddressUtilsTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         this.remoteAddressResolver = new RemoteAddressResolver() {
         };
         this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("localhost")

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/ShenyuResultWrapTest.java
Patch:
@@ -41,7 +41,7 @@ public final class ShenyuResultWrapTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
     }
 

File: shenyu-plugin/shenyu-plugin-context-path/src/test/java/org/apache/shenyu/plugin/context/path/ContextPathPluginTest.java
Patch:
@@ -73,7 +73,7 @@ public void setup() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         final DefaultShenyuResult shenyuResult = new DefaultShenyuResult();
         when(context.getBean(ShenyuResult.class)).thenReturn(shenyuResult);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java
Patch:
@@ -69,7 +69,7 @@ public class GrpcPluginTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
 
         when(selector.getName()).thenReturn("/grpc");

File: shenyu-plugin/shenyu-plugin-httpclient/src/test/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPluginTest.java
Patch:
@@ -58,7 +58,7 @@ public final class NettyHttpClientPluginTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(mock(ShenyuResult.class));
 
         chain = mock(ShenyuPluginChain.class);

File: shenyu-plugin/shenyu-plugin-httpclient/src/test/java/org/apache/shenyu/plugin/httpclient/WebClientPluginTest.java
Patch:
@@ -67,7 +67,7 @@ public final class WebClientPluginTest {
     @Before
     public void setup() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(mock(ShenyuResult.class));
 
         WebClient webClient = mockWebClientOK();

File: shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/JwtPluginTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
-        springBeanUtils.setCfgContext(context);
+        springBeanUtils.setApplicationContext(context);
         final PluginData pluginData =
                 new PluginData("pluginId", "pluginName", "{\"secretKey\":\"sinsy\",\"filterPath\":\"/cloud/ecg/common,/cloud/ecg/selectAll\"}", "0", false);
         JwtPluginDataHandler jwtPluginDataHandler = new JwtPluginDataHandler();

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java
Patch:
@@ -97,7 +97,7 @@ public void doExecuteNotAllowedTest() {
                 Mono.just(new RateLimiterResponse(false, 1)));
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(result).expectSubscription().verifyComplete();
         Assert.assertEquals(HttpStatus.TOO_MANY_REQUESTS, exchange.getResponse().getStatusCode());

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/ResponsePluginTest.java
Patch:
@@ -58,7 +58,7 @@ public void setup() {
         ConfigurableApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
         when(applicationContext.getBean(ShenyuResult.class)).thenReturn(mock(ShenyuResult.class));
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
-        springBeanUtils.setCfgContext(applicationContext);
+        springBeanUtils.setApplicationContext(applicationContext);
         Map<String, MessageWriter> writerMap = new HashMap<>();
         MessageWriter messageWriter = mock(MessageWriter.class);
         when(messageWriter.writeWith(any(), any())).thenReturn(Mono.empty());

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/NettyClientMessageWriterTest.java
Patch:
@@ -57,7 +57,7 @@ public class NettyClientMessageWriterTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(mock(ShenyuResult.class));
         chain = mock(ShenyuPluginChain.class);
         when(chain.execute(any())).thenReturn(Mono.empty());

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/RPCMessageWriterTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() {
         ConfigurableApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
         when(applicationContext.getBean(ShenyuResult.class)).thenReturn(mock(ShenyuResult.class));
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
-        springBeanUtils.setCfgContext(applicationContext);
+        springBeanUtils.setApplicationContext(applicationContext);
         exchange = MockServerWebExchange.from(MockServerHttpRequest.get("localhost").build());
         rpcMessageWriter = new RPCMessageWriter();
         Mockito.when(chain.execute(exchange)).thenReturn(Mono.empty());

File: shenyu-plugin/shenyu-plugin-response/src/test/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriterTest.java
Patch:
@@ -57,7 +57,7 @@ public class WebClientMessageWriterTest {
     @Before
     public void setup() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(mock(ShenyuResult.class));
         chain = mock(ShenyuPluginChain.class);
         webClientMessageWriter = new WebClientMessageWriter();

File: shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/SentinelPluginTest.java
Patch:
@@ -82,7 +82,7 @@ public void setUp() {
         when(chain.execute(exchange)).thenReturn(Mono.empty());
 
         ConfigurableApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(applicationContext);
+        SpringBeanUtils.getInstance().setApplicationContext(applicationContext);
         when(applicationContext.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
 
         sentinelPlugin = new SentinelPlugin(sentinelFallbackHandler);

File: shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/fallback/SentinelFallbackHandlerTest.java
Patch:
@@ -54,7 +54,7 @@ public void setUp() {
                 .contextPath("/Sentinel")
                 .build());
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
     }
 

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/service/DefaultSignServiceTest.java
Patch:
@@ -110,7 +110,7 @@ public void setup() {
         this.passed.setRealUrl("/demo/test");
 
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(SignProvider.class)).thenReturn(new DefaultSignProvider());
     }
 

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/sign/DefaultSignProviderTest.java
Patch:
@@ -43,7 +43,7 @@ public class DefaultSignProviderTest {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(SignProvider.class)).thenReturn(new DefaultSignProvider());
     }
 

File: shenyu-plugin/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/SpringCloudPluginTest.java
Patch:
@@ -85,7 +85,7 @@ public void setUp() {
         ConfigurableApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
         when(applicationContext.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
-        springBeanUtils.setCfgContext(applicationContext);
+        springBeanUtils.setApplicationContext(applicationContext);
         MultiValueMap<String, String> valueMap = new LinkedMultiValueMap<>(1);
         valueMap.put("type", Lists.newArrayList("cloud"));
         exchange = MockServerWebExchange.from(

File: shenyu-plugin/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/TarsPluginTest.java
Patch:
@@ -75,7 +75,7 @@ public void setUp() {
         ConfigurableApplicationContext applicationContext = mock(ConfigurableApplicationContext.class);
         when(applicationContext.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
-        springBeanUtils.setCfgContext(applicationContext);
+        springBeanUtils.setApplicationContext(applicationContext);
         metaData = new MetaData("id", "127.0.0.1:8080", "contextPath",
                 "path", RpcTypeEnum.TARS.getName(), "serviceName", "method1",
                 "parameterTypes", "{\"methodInfo\":[{\"methodName\":\"method1\",\"params\":"

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/WafPluginTest.java
Patch:
@@ -62,7 +62,7 @@ public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult());
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
-        springBeanUtils.setCfgContext(context);
+        springBeanUtils.setApplicationContext(context);
 
         final PluginData pluginData =
                 new PluginData("pluginId", "pluginName", "{\"model\":\"mix\"}", "0", false);

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/SpringExtConfiguration.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
-import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.lang.NonNull;
@@ -51,7 +50,7 @@ public static class ShenyuApplicationContextAware implements ApplicationContextA
 
         @Override
         public void setApplicationContext(@NonNull final ApplicationContext applicationContext) throws BeansException {
-            SpringBeanUtils.getInstance().setCfgContext((ConfigurableApplicationContext) applicationContext);
+            SpringBeanUtils.getInstance().setApplicationContext(applicationContext);
             ShenyuConfig shenyuConfig = SpringBeanUtils.getInstance().getBean(ShenyuConfig.class);
             Singleton.INST.single(ShenyuConfig.class, shenyuConfig);
         }

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/FileSizeFilterTest.java
Patch:
@@ -45,7 +45,7 @@ public class FileSizeFilterTest {
     @Before
     public void setup() {
         GenericApplicationContext context = new GenericApplicationContext();
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         context.getBeanFactory().registerSingleton("shenyuResult", mock(ShenyuResult.class));
         context.refresh();
     }

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/WebSocketParamFilterTest.java
Patch:
@@ -79,7 +79,7 @@ public void testDoFilter() {
     @Test
     public void testDoDenyResponse() {
         final ConfigurableApplicationContext cfgContext = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(cfgContext);
+        SpringBeanUtils.getInstance().setApplicationContext(cfgContext);
         when(SpringBeanUtils.getInstance().getBean(ShenyuResult.class)).thenReturn(shenyuResult);
         final Mono<Void> result = doDenyResponse(createExchange(new LinkedMultiValueMap<>(1), new LinkedMultiValueMap<>(1)));
         StepVerifier.create(result).expectSubscription().verifyComplete();

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/GlobalErrorHandlerTest.java
Patch:
@@ -89,7 +89,7 @@ public static void afterClass() {
     @Before
     public void setUp() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
-        SpringBeanUtils.getInstance().setCfgContext(context);
+        SpringBeanUtils.getInstance().setApplicationContext(context);
         when(context.getBean(ShenyuResult.class)).thenReturn(new DefaultShenyuResult() { });
 
         ErrorAttributes errorAttributes = new DefaultErrorAttributes();

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/sign/SignService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.api;
+package org.apache.shenyu.plugin.api.sign;
 
 import org.apache.commons.lang3.tuple.Pair;
 import org.springframework.web.server.ServerWebExchange;

File: shenyu-plugin/shenyu-plugin-sign/src/main/java/org/apache/shenyu/plugin/sign/SignPlugin.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
-import org.apache.shenyu.plugin.api.SignService;
+import org.apache.shenyu.plugin.api.sign.SignService;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/SignPluginTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
-import org.apache.shenyu.plugin.api.SignService;
+import org.apache.shenyu.plugin.api.sign.SignService;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 
 import org.junit.Before;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sign/src/test/java/org/apache/shenyu/springboot/starter/plugin/sign/SignPluginConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.springboot.starter.plugin.sign;
 
 import org.apache.shenyu.common.enums.PluginEnum;
-import org.apache.shenyu.plugin.api.SignService;
+import org.apache.shenyu.plugin.api.sign.SignService;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.sync.data.api.AuthDataSubscriber;
 import org.junit.Test;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/mybatis/pg/interceptor/PostgreSqlQueryInterceptor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.admin.mybatis;
+package org.apache.shenyu.admin.mybatis.pg.interceptor;
 
 import org.apache.ibatis.cache.CacheKey;
 import org.apache.ibatis.executor.Executor;

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataBaseConfigurationTest.java
Patch:
@@ -34,7 +34,7 @@ public void testDataBaseProperties() {
         DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();
         String dialect = "MySQL";
         String initScript = "/tmp/init.sql";
-        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true, "");
+        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true);
         assertNotNull(dataBaseProperties);
         assertEquals(dataBaseProperties.getDialect(), dialect);
         assertEquals(dataBaseProperties.getInitScript(), initScript);

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java
Patch:
@@ -125,7 +125,7 @@ public String named() {
      * @return default false.
      */
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.DUBBO.getName());

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPlugin.java
Patch:
@@ -95,7 +95,7 @@ public String named() {
      * @return default false.
      */
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.DUBBO.getName());

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPluginTest.java
Patch:
@@ -125,7 +125,7 @@ public void skip() {
         when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());
         exchange.getAttributes().put(Constants.CONTEXT, context);
         exchange.getAttributes().put(Constants.META_DATA, metaData);
-        final Boolean result = apacheDubboPlugin.skip(exchange);
+        final boolean result = apacheDubboPlugin.skip(exchange);
         assertFalse(result);
     }
 

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/ShenyuPlugin.java
Patch:
@@ -61,7 +61,7 @@ default String named() {
      * @param exchange the current server exchange
      * @return default false.
      */
-    default Boolean skip(ServerWebExchange exchange) {
+    default boolean skip(ServerWebExchange exchange) {
         return false;
     }
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/ParamTransformPlugin.java
Patch:
@@ -112,7 +112,7 @@ private Mono<Void> query(final ServerWebExchange exchange, final ServerHttpReque
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         String rpcType = shenyuContext.getRpcType();

File: shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/ContextPathPlugin.java
Patch:
@@ -80,7 +80,7 @@ public String named() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         ShenyuContext body = exchange.getAttribute(Constants.CONTEXT);
         assert body != null;
         String rpcType = body.getRpcType();

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/DividePlugin.java
Patch:
@@ -102,7 +102,7 @@ public String named() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         return !Objects.equals(Objects.requireNonNull(shenyuContext).getRpcType(), RpcTypeEnum.HTTP.getName());
     }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -106,7 +106,7 @@ public String named() {
      * @return default false.
      */
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.GRPC.getName());

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java
Patch:
@@ -127,7 +127,7 @@ public void testNamed() {
 
     @Test
     public void testSkip() {
-        final Boolean result = grpcPlugin.skip(getServerWebExchange());
+        final boolean result = grpcPlugin.skip(getServerWebExchange());
         assertFalse(result);
     }
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -123,7 +123,7 @@ public int getOrder() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(RpcTypeEnum.HTTP.getName(), shenyuContext.getRpcType())

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -91,7 +91,7 @@ public String named() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(RpcTypeEnum.HTTP.getName(), shenyuContext.getRpcType())

File: shenyu-plugin/shenyu-plugin-logging/src/main/java/org/apache/shenyu/plugin/logging/LoggingPlugin.java
Patch:
@@ -79,7 +79,7 @@ public String named() {
     }
     
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         return false;
     }
     

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/ModifyResponsePlugin.java
Patch:
@@ -119,7 +119,7 @@ public String named() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         return false;
     }
 

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/MotanPlugin.java
Patch:
@@ -97,7 +97,7 @@ public String named() {
      * @return default false.
      */
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.MOTAN.getName());

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/response/MotanResponsePlugin.java
Patch:
@@ -61,7 +61,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.MOTAN.getName());

File: shenyu-plugin/shenyu-plugin-oauth2/src/main/java/org/apache/shenyu/plugin/oauth2/OAuth2Plugin.java
Patch:
@@ -67,7 +67,7 @@ public String named() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         return !Objects.requireNonNull(exchange.<Boolean>getAttribute("enable"));
     }
 

File: shenyu-plugin/shenyu-plugin-param-mapping/src/main/java/org/apache/shenyu/plugin/param/mapping/ParamMappingPlugin.java
Patch:
@@ -73,7 +73,7 @@ public String named() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         return false;
     }
 

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java
Patch:
@@ -65,7 +65,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext body = exchange.getAttribute(Constants.CONTEXT);
         return Objects.equals(Objects.requireNonNull(body).getRpcType(), RpcTypeEnum.DUBBO.getName());
     }

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/SofaPlugin.java
Patch:
@@ -96,7 +96,7 @@ public String named() {
      * @return default false.
      */
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.SOFA.getName());

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/SofaPluginTest.java
Patch:
@@ -95,7 +95,7 @@ public void testSkip() {
         when(context.getRpcType()).thenReturn(RpcTypeEnum.SOFA.getName());
         exchange.getAttributes().put(Constants.CONTEXT, context);
         exchange.getAttributes().put(Constants.META_DATA, metaData);
-        final Boolean result = sofaPlugin.skip(exchange);
+        final boolean result = sofaPlugin.skip(exchange);
         assertFalse(result);
     }
 

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/SpringCloudPlugin.java
Patch:
@@ -108,7 +108,7 @@ public String named() {
      * @return default false.
      */
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext body = exchange.getAttribute(Constants.CONTEXT);
         return !Objects.equals(Objects.requireNonNull(body).getRpcType(), RpcTypeEnum.SPRING_CLOUD.getName());
     }

File: shenyu-plugin/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/SpringCloudPluginTest.java
Patch:
@@ -138,7 +138,7 @@ public void named() {
 
     @Test
     public void skip() {
-        final Boolean result = springCloudPlugin.skip(exchange);
+        final boolean result = springCloudPlugin.skip(exchange);
         assertFalse(result);
     }
 

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -109,7 +109,7 @@ public String named() {
     }
 
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
         return !Objects.equals(shenyuContext.getRpcType(), RpcTypeEnum.TARS.getName());

File: shenyu-plugin/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/TarsPluginTest.java
Patch:
@@ -157,7 +157,7 @@ public void testSkip() {
         ShenyuContext context = mock(ShenyuContext.class);
         when(context.getRpcType()).thenReturn(RpcTypeEnum.TARS.getName());
         exchange.getAttributes().put(Constants.CONTEXT, context);
-        Boolean result = tarsPluginUnderTest.skip(exchange);
+        boolean result = tarsPluginUnderTest.skip(exchange);
         assertFalse(result);
     }
 }

File: shenyu-plugin/shenyu-plugin-websocket/src/main/java/org/apache/shenyu/plugin/websocket/WebSocketPlugin.java
Patch:
@@ -141,7 +141,7 @@ public String named() {
      * @return default false.
      */
     @Override
-    public Boolean skip(final ServerWebExchange exchange) {
+    public boolean skip(final ServerWebExchange exchange) {
         final ShenyuContext body = exchange.getAttribute(Constants.CONTEXT);
         return !Objects.equals(Objects.requireNonNull(body).getRpcType(), RpcTypeEnum.WEB_SOCKET.getName());
     }

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -126,7 +126,7 @@ public Mono<Void> execute(final ServerWebExchange exchange) {
             return Mono.defer(() -> {
                 if (this.index < plugins.size()) {
                     ShenyuPlugin plugin = plugins.get(this.index++);
-                    Boolean skip = plugin.skip(exchange);
+                    boolean skip = plugin.skip(exchange);
                     if (skip) {
                         return this.execute(exchange);
                     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataBaseConfigurationTest.java
Patch:
@@ -34,11 +34,10 @@ public void testDataBaseProperties() {
         DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();
         String dialect = "MySQL";
         String initScript = "/tmp/init.sql";
-        Boolean initEnable = true;
-        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, initEnable);
+        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true, "");
         assertNotNull(dataBaseProperties);
         assertEquals(dataBaseProperties.getDialect(), dialect);
         assertEquals(dataBaseProperties.getInitScript(), initScript);
-        assertEquals(dataBaseProperties.getInitEnable(), initEnable);
+        assertEquals(dataBaseProperties.getInitEnable(), true);
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/gateway/ShenyuConfiguration.java
Patch:
@@ -169,9 +169,9 @@ public WebFilter localDispatcherFilter(final DispatcherHandler dispatcherHandler
      */
     @Bean
     @Order(-100)
-    @ConditionalOnProperty(name = "shenyu.switchConfig.cross", havingValue = "true")
+    @ConditionalOnProperty(name = "shenyu.cross.enabled", havingValue = "true")
     public WebFilter crossFilter(final ShenyuConfig shenyuConfig) {
-        return new CrossFilter(shenyuConfig.getCrosFilterConfig());
+        return new CrossFilter(shenyuConfig.getCross());
     }
     
     /**

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/CrossFilter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.web.filter;
 
-import org.apache.shenyu.common.config.ShenyuConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.CrossFilterConfig;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.HttpStatus;
@@ -34,9 +34,9 @@
  */
 public class CrossFilter implements WebFilter {
 
-    private final ShenyuConfig.CrosFilterConfig filterConfig;
+    private final CrossFilterConfig filterConfig;
 
-    public CrossFilter(final ShenyuConfig.CrosFilterConfig filterConfig) {
+    public CrossFilter(final CrossFilterConfig filterConfig) {
         this.filterConfig = filterConfig;
     }
 

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuLoaderService.java
Patch:
@@ -53,7 +53,7 @@ public ShenyuLoaderService(final ShenyuWebHandler webHandler, final CommonPlugin
             ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(config.getThreads(), ShenyuThreadFactory.create("plugin-ext-loader", true));
             executor.scheduleAtFixedRate(() -> {
                 try {
-                    List<ShenyuLoaderResult> results = ShenyuPluginLoader.getInstance().loadExtendPlugins();
+                    List<ShenyuLoaderResult> results = ShenyuPluginLoader.getInstance().loadExtendPlugins(config.getPath());
                     List<ShenyuPlugin> shenyuExtendPlugins = results.stream().map(ShenyuLoaderResult::getShenyuPlugin).filter(Objects::nonNull).collect(Collectors.toList());
                     webHandler.putExtPlugins(shenyuExtendPlugins);
                     List<PluginDataHandler> handlers = results.stream().map(ShenyuLoaderResult::getPluginDataHandler).filter(Objects::nonNull).collect(Collectors.toList());

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuPluginLoader.java
Patch:
@@ -85,14 +85,15 @@ public static ShenyuPluginLoader getInstance() {
     /**
      * Load extend plugins list.
      *
+     * @param path the path
      * @return the list
      * @throws IOException the io exception
      * @throws ClassNotFoundException the class not found exception
      * @throws InstantiationException the instantiation exception
      * @throws IllegalAccessException the illegal access exception
      */
-    public List<ShenyuLoaderResult> loadExtendPlugins() throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
-        File[] jarFiles = ShenyuPluginPathBuilder.getPluginPath().listFiles(file -> file.getName().endsWith(".jar"));
+    public List<ShenyuLoaderResult> loadExtendPlugins(final String path) throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
+        File[] jarFiles = ShenyuPluginPathBuilder.getPluginPath(path).listFiles(file -> file.getName().endsWith(".jar"));
         if (null == jarFiles) {
             return Collections.emptyList();
         }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-gateway/src/main/java/org/apache/shenyu/springboot/starter/gateway/ShenyuConfiguration.java
Patch:
@@ -164,13 +164,14 @@ public WebFilter localDispatcherFilter(final DispatcherHandler dispatcherHandler
      * 1. Customize webflux's cross-domain requests.
      * 2. Spring bean Sort is greater than -1.
      *
+     * @param shenyuConfig the shenyu config
      * @return the web filter
      */
     @Bean
     @Order(-100)
     @ConditionalOnProperty(name = "shenyu.switchConfig.cross", havingValue = "true")
-    public WebFilter crossFilter() {
-        return new CrossFilter();
+    public WebFilter crossFilter(final ShenyuConfig shenyuConfig) {
+        return new CrossFilter(shenyuConfig.getCrosFilterConfig());
     }
     
     /**

File: shenyu-web/src/test/java/org/apache/shenyu/web/filter/WebSocketParamFilterTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.springframework.web.server.WebFilterChain;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
+
 import java.util.Collections;
 
 import static org.mockito.Mockito.mock;

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/ShenyuWebHandlerTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shenyu.web.handler;
 
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
-import org.apache.shenyu.common.config.ShenyuConfig;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-common/src/main/java/org/apache/shenyu/common/utils/Singleton.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.base.utils;
+package org.apache.shenyu.common.utils;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataHandler.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.alibaba.dubbo.cache.ApplicationConfigCache;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 
 /**
  * The type Alibaba dubbo plugin data subscriber.

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/handler/AlibabaDubboPluginDataTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.FixMethodOrder;

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/handler/ApacheDubboPluginDataHandler.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 
 /**
  * The type Apache dubbo plugin data handler.

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/SingletonTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.base.utils;
 
 import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.common.utils.Singleton;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/JwtPlugin.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.jwt.config.JwtConfig;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.jwt.exception.ThrowingFunction;

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandler.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.jwt.config.JwtConfig;
 
 import java.util.Arrays;

File: shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandlerTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.jwt.config.JwtConfig;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-plugin/shenyu-plugin-monitor/src/main/java/org/apache/shenyu/plugin/monitor/handler/MonitorPluginDataHandler.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shenyu.metrics.config.MetricsConfig;
 import org.apache.shenyu.metrics.facade.MetricsTrackerFacade;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 
 /**
  * The type Monitor plugin data handler.

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/handler/MotanPluginDataHandler.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.motan.cache.ApplicationConfigCache;
 
 import java.util.Objects;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/ConcurrentRateLimiterAlgorithm.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.enums.RateLimitEnum;
 import org.apache.shenyu.common.utils.UUIDUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.spi.Join;
 import org.springframework.data.redis.core.ReactiveRedisTemplate;
 import org.springframework.data.redis.core.script.RedisScript;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiter.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shenyu.plugin.ratelimiter.executor;
 
 import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithm;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithmFactory;
 import org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandler.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.config.RateLimiterConfig;
 import org.springframework.data.redis.connection.RedisClusterConfiguration;
 import org.springframework.data.redis.connection.RedisNode;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiterScriptsTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithm;
 import org.apache.shenyu.plugin.ratelimiter.algorithm.RateLimiterAlgorithmFactory;
 import org.apache.shenyu.plugin.ratelimiter.config.RateLimiterConfig;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiterTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.collect.Lists;
 import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse;
 import org.junit.Assert;
 import org.junit.Before;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandlerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.config.RateLimiterConfig;
 import org.junit.Assert;
 import org.junit.Before;

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/handler/SofaPluginDataHandler.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.sofa.cache.ApplicationConfigCache;
 
 import java.util.Objects;

File: shenyu-plugin/shenyu-plugin-sofa/src/test/java/org/apache/shenyu/plugin/sofa/handler/SofaPluginDataHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.config.SofaRegisterConfig;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.PluginData;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 
 import org.junit.Assert;
 import org.junit.Before;

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/WafPlugin.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.waf.config.WafConfig;
 import org.apache.shenyu.plugin.waf.handler.WafPluginDataHandler;
 import org.slf4j.Logger;

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandler.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
 import org.apache.shenyu.plugin.base.utils.BeanHolder;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.waf.config.WafConfig;
 
 import java.util.Optional;

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandlerTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.base.utils.Singleton;
+import org.apache.shenyu.common.utils.Singleton;
 import org.apache.shenyu.plugin.waf.config.WafConfig;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/ShenyuExtConfiguration.java
Patch:
@@ -23,10 +23,12 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.SearchStrategy;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 
 /**
  * The type shenyu result configuration.
  */
+@Configuration
 public class ShenyuExtConfiguration {
 
     /**

File: shenyu-web/src/main/java/org/apache/shenyu/web/handler/ShenyuWebHandler.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.utils.CollectionUtils;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
-import org.apache.shenyu.web.configuration.properties.ShenyuConfig;
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.lang.NonNull;

File: shenyu-web/src/main/java/org/apache/shenyu/web/loader/ShenyuLoaderService.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.base.cache.CommonPluginDataSubscriber;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.web.configuration.properties.ShenyuConfig;
-import org.apache.shenyu.web.configuration.properties.ShenyuConfig.ExtPlugin;
+import org.apache.shenyu.common.config.ShenyuConfig;
+import org.apache.shenyu.common.config.ShenyuConfig.ExtPlugin;
 import org.apache.shenyu.web.handler.ShenyuWebHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: shenyu-web/src/test/java/org/apache/shenyu/web/handler/ShenyuWebHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
-import org.apache.shenyu.web.configuration.properties.ShenyuConfig;
+import org.apache.shenyu.common.config.ShenyuConfig;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/ApacheDubboClientValidationTest.java
Patch:
@@ -19,13 +19,11 @@
 
 import org.apache.dubbo.common.URL;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 /**
  * Test case for {@link ApacheDubboClientValidation}.
  */
-@Ignore
 public final class ApacheDubboClientValidationTest {
 
     private ApacheDubboClientValidation apacheDubboClientValidationUnderTest;

File: shenyu-client/shenyu-client-http/shenyu-client-springcloud/src/test/java/org/apache/shenyu/client/springcloud/init/SpringCloudClientBeanPostProcessorTest.java
Patch:
@@ -100,6 +100,8 @@ private SpringCloudClientBeanPostProcessor buildSpringCloudClientBeanPostProcess
         Properties properties = new Properties();
         properties.setProperty("contextPath", "/test");
         properties.setProperty("isFull", full + "");
+        properties.setProperty("ip", "127.0.0.1");
+        properties.setProperty("port", "8081");
         ShenyuRegisterCenterConfig mockRegisterCenter = new ShenyuRegisterCenterConfig();
         mockRegisterCenter.setServerLists("http://127.0.0.1:8080");
         mockRegisterCenter.setRegisterType("http");

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/MapperConfig.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.admin.config;
 
 import org.apache.shenyu.admin.mybatis.PostgreSqlQueryInterceptor;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -34,8 +35,8 @@ public class MapperConfig {
      * @return {@linkplain PostgreSqlQueryInterceptor}
      */
     @Bean
+    @ConditionalOnProperty(name = "shenyu.database.dialect", havingValue = "postgresql")
     public PostgreSqlQueryInterceptor postgreSqlQueryInterceptor() {
         return new PostgreSqlQueryInterceptor();
     }
-
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/spring/LocalDataSourceLoader.java
Patch:
@@ -37,7 +37,7 @@
  * for execute schema sql file.
  */
 @Component
-@DependsOn(value = "initDbLoader")
+@DependsOn(value = "postgreSqlLoader")
 public class LocalDataSourceLoader extends ScriptLoader implements InstantiationAwareBeanPostProcessor {
 
     private static final Logger LOG = LoggerFactory.getLogger(LocalDataSourceLoader.class);
@@ -66,5 +66,4 @@ protected void init(final DataSourceProperties properties) {
             throw new ShenyuException(e.getMessage());
         }
     }
-
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/spring/ScriptLoader.java
Patch:
@@ -60,7 +60,6 @@ protected void execute(final Connection conn, final String script) throws Except
                         LOG.info("execute shenyu schema sql: {}", sqlScript);
                         runner.runScript(fileReader);
                     }
-
                 }
             }
         } finally {
@@ -71,5 +70,4 @@ protected void execute(final Connection conn, final String script) throws Except
     private static Reader getResourceAsReader(final String resource) throws IOException {
         return new InputStreamReader(new FileInputStream(resource), StandardCharsets.UTF_8);
     }
-
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/MetaData.java
Patch:
@@ -344,7 +344,8 @@ public String toString() {
      */
     public void updateContextPath() {
         if (StringUtils.isNoneBlank(this.path)) {
-            this.contextPath = this.path.substring(0, StringUtils.indexOf(path, "/", 1));
+            this.contextPath = StringUtils.indexOf(path, "/", 1) > -1
+                    ? this.path.substring(0, StringUtils.indexOf(path, "/", 1)) : path;
         }
     }
 

File: shenyu-plugin/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/TarsPluginTest.java
Patch:
@@ -109,7 +109,7 @@ public void testTarsPluginWithEmptyMetaData() {
         StepVerifier.create(tarsPluginUnderTest.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();
     }
 
-    @Test
+    @Test(expected = IllegalArgumentException.class)
     public void testTarsPluginWithArgumentTypeMissMatch() {
         ShenyuContext context = mock(ShenyuContext.class);
         exchange.getAttributes().put(Constants.CONTEXT, context);
@@ -121,7 +121,7 @@ public void testTarsPluginWithArgumentTypeMissMatch() {
         StepVerifier.create(tarsPluginUnderTest.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();
     }
 
-    @Test
+    @Test(expected = IllegalArgumentException.class)
     public void testTarsPluginNormal() throws InvocationTargetException, IllegalAccessException {
         ShenyuContext context = mock(ShenyuContext.class);
         exchange.getAttributes().put(Constants.CONTEXT, context);

File: shenyu-plugin/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/cache/ApplicationConfigCacheTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() {
         applicationConfigCacheUnderTest = ApplicationConfigCache.getInstance();
     }
 
-    @Test
+    @Test(expected = NullPointerException.class)
     public void testGet() throws ClassNotFoundException {
         final String rpcExt = "{\"methodInfo\":[{\"methodName\":\"method1\",\"params\":"
                 + "[{\"left\":\"int\",\"right\":\"param1\"},{\"left\":\"java.lang.Integer\","
@@ -71,7 +71,7 @@ public void testGet() throws ClassNotFoundException {
         assertTrue(Arrays.stream(prxClazz.getAnnotations()).anyMatch(annotation -> annotation instanceof Servant));
     }
 
-    @Test
+    @Test(expected = NullPointerException.class)
     public void testConcurrentInitPrx() throws InterruptedException {
         final String rpcExt1 = "{\"methodInfo\":[{\"methodName\":\"method1\",\"params\":"
                 + "[{\"left\":\"int\",\"right\":\"param1\"},{\"left\":\"java.lang.Integer\","
@@ -113,7 +113,7 @@ public void testConcurrentInitPrx() throws InterruptedException {
         assertEquals("promise_method4", applicationConfigCacheUnderTest.get("path4").getMethod().getName());
     }
 
-    @Test
+    @Test(expected = NullPointerException.class)
     public void testInitPrx() {
         final MetaData metaData = new MetaData("id", "127.0.0.1:8080", "contextPath",
                 "path6", RpcTypeEnum.TARS.getName(), "serviceName6", "method1",

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/PluginEnum.java
Patch:
@@ -123,7 +123,7 @@ public enum PluginEnum {
     /**
      * webSocket plugin enum.
      */
-    WEB_SOCKET(55, 0, "webSocket"),
+    WEB_SOCKET(55, 0, "websocket"),
 
     /**
      * Param transform plugin enum.

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/DefaultShenyuContextBuilderTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shenyu.plugin.global;
 
-import org.apache.shenyu.plugin.global.fixture.FixtureShenyuContextDecorator;
+import org.apache.shenyu.plugin.global.fixture.FixtureHttpShenyuContextDecorator;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
@@ -43,7 +43,7 @@ public final class DefaultShenyuContextBuilderTest {
     @Before
     public void setUp() {
         Map<String, ShenyuContextDecorator> decoratorMap = new HashMap<>();
-        decoratorMap.put("http", new FixtureShenyuContextDecorator());
+        decoratorMap.put("http", new FixtureHttpShenyuContextDecorator());
         defaultShenyuContextBuilder = new DefaultShenyuContextBuilder(decoratorMap);
     }
 

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/fixture/FixtureHttpShenyuContextDecorator.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.api.context.ShenyuContextDecorator;
 
-public final class FixtureShenyuContextDecorator implements ShenyuContextDecorator {
+public final class FixtureHttpShenyuContextDecorator implements ShenyuContextDecorator {
     
     @Override
     public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/MetaDataTransfer.java
Patch:
@@ -78,6 +78,7 @@ public MetaDataDO mapRegisterDTOToEntity(final MetaDataRegisterDTO metaDataDTO)
                         .methodName(dto.getMethodName())
                         .parameterTypes(dto.getParameterTypes())
                         .rpcExt(dto.getRpcExt())
+                        .enabled(dto.isEnabled())
                         .build())
                 .orElse(null);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java
Patch:
@@ -92,11 +92,9 @@ public ShenyuAdminResult queryDashboardUsers(final String userName, final Intege
      */
     @GetMapping("/{id}")
     public ShenyuAdminResult detailDashboardUser(@PathVariable("id") final String id) {
-        String key = secretProperties.getKey();
-        String iv = secretProperties.getIv();
         DashboardUserEditVO dashboardUserEditVO = dashboardUserService.findById(id);
         return Optional.ofNullable(dashboardUserEditVO).map(item -> {
-            item.setPassword(AesUtils.aesDecryption(item.getPassword(), key, iv));
+            item.setPassword("");
             return ShenyuAdminResult.success(ShenyuResultMessage.DETAIL_SUCCESS, item);
         }).orElseGet(() -> ShenyuAdminResult.error(ShenyuResultMessage.DASHBOARD_QUERY_ERROR));
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -122,7 +122,7 @@ public void detailDashboardUser() throws Exception {
         mockMvc.perform(get(url))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(ShenyuResultMessage.DETAIL_SUCCESS)))
-                .andExpect(jsonPath("$.data.password", is("123456")));
+                .andExpect(jsonPath("$.data.password", is("")));
 
         given(dashboardUserService.findById(any())).willReturn(null);
         mockMvc.perform(get(url))

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DashboardUserServiceTest.java
Patch:
@@ -178,7 +178,6 @@ public void testLogin() {
         when(secretProperties.getKey()).thenReturn(key, key);
         when(secretProperties.getIv()).thenReturn(iv, iv);
         when(dashboardUserMapper.findByQuery(eq(TEST_USER_NAME), anyString())).thenReturn(dashboardUserDO);
-        given(dashboardUserMapper.updateSelective(any(DashboardUserDO.class))).willReturn(1);
         given(ldapTemplate.authenticate(anyString(), anyString(), anyString())).willReturn(true);
         given(roleMapper.findByRoleName("default")).willReturn(RoleDO.buildRoleDO(new RoleDTO("1", "test", null, null)));
 
@@ -195,10 +194,8 @@ public void testLogin() {
         ReflectionTestUtils.setField(dashboardUserService, "ldapTemplate", null);
         assertLoginSuccessful(dashboardUserDO, dashboardUserService.login(TEST_USER_NAME, TEST_PASSWORD));
         verify(dashboardUserMapper).findByQuery(eq(TEST_USER_NAME), anyString());
-        verify(dashboardUserMapper).updateSelective(any(DashboardUserDO.class));
         assertLoginSuccessful(dashboardUserDO, dashboardUserService.login(TEST_USER_NAME, TEST_PASSWORD));
         verify(dashboardUserMapper, times(2)).findByQuery(eq(TEST_USER_NAME), anyString());
-        verify(dashboardUserMapper, times(2)).updateSelective(any(DashboardUserDO.class));
     }
 
     private DashboardUserDO createDashboardUserDO() {

File: shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/helper/HttpHelper.java
Patch:
@@ -30,6 +30,7 @@
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * The type Http helper.
@@ -74,7 +75,7 @@ public <S, Q> S postGateway(final String path, final Q req, final Class<S> respT
                 .post(RequestBody.create(GSON.toJson(req), JSON))
                 .build();
         Response response = client.newCall(request).execute();
-        String respBody = response.body().string();
+        String respBody = Objects.requireNonNull(response.body()).string();
         LOG.info("postGateway({}) resp({})", path, respBody);
         return GSON.fromJson(respBody, respType);
     }
@@ -109,7 +110,7 @@ public <S> S getFromGateway(final String path, final Map<String, Object> headers
         }
         Request request = requestBuilder.build();
         Response response = client.newCall(request).execute();
-        String respBody = response.body().string();
+        String respBody = Objects.requireNonNull(response.body()).string();
         LOG.info("getFromGateway({}) resp({})", path, respBody);
         return GSON.fromJson(respBody, type);
     }

File: shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/handler/ContextPathPluginDataHandler.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class ContextPathPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, ContextMappingHandle>> CACHED_HANDLE = new BeanHolder(RuleHandleCache::new);
+    public static final Supplier<RuleHandleCache<String, ContextMappingHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/decorator/RequestDecorator.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.decorator;
+package org.apache.shenyu.plugin.cryptor.decorator;
 
 import org.apache.shenyu.plugin.base.support.CachedBodyOutputMessage;
-import org.apache.shenyu.plugin.cryptor.common.utils.HttpUtil;
+import org.apache.shenyu.plugin.cryptor.utils.HttpUtil;
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.server.reactive.ServerHttpRequestDecorator;
@@ -56,5 +56,4 @@ public HttpHeaders getHeaders() {
         headers.remove(HttpHeaders.CONTENT_LENGTH);
         return HttpUtil.modifiedContentLength(headers);
     }
-
 }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/decorator/ResponseDecorator.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.decorator;
+package org.apache.shenyu.plugin.cryptor.decorator;
 
 import org.apache.shenyu.plugin.base.support.CachedBodyOutputMessage;
 import org.reactivestreams.Publisher;
@@ -43,5 +43,4 @@ public ResponseDecorator(final ServerWebExchange exchange,
     public Mono<Void> writeWith(@NonNull final Publisher<? extends DataBuffer> body) {
         return getDelegate().writeWith(cachedBodyOutputMessage.getBody());
     }
-
 }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/handler/CryptorRequestPluginDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.handler;
+package org.apache.shenyu.plugin.cryptor.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.convert.rule.impl.CryptorRequestRuleHandle;
@@ -34,7 +34,7 @@
  */
 public class CryptorRequestPluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, CryptorRequestRuleHandle>> CACHED_HANDLE = new BeanHolder(() -> new RuleHandleCache());
+    public static final Supplier<RuleHandleCache<String, CryptorRequestRuleHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/handler/CryptorResponsePluginDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.handler;
+package org.apache.shenyu.plugin.cryptor.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.convert.rule.impl.CryptorResponseRuleHandle;
@@ -34,7 +34,7 @@
  */
 public class CryptorResponsePluginDataHandler implements PluginDataHandler {
 
-    public static final Supplier<RuleHandleCache<String, CryptorResponseRuleHandle>> CACHED_HANDLE = new BeanHolder(() -> new RuleHandleCache());
+    public static final Supplier<RuleHandleCache<String, CryptorResponseRuleHandle>> CACHED_HANDLE = new BeanHolder<>(RuleHandleCache::new);
 
     @Override
     public void handlerRule(final RuleData ruleData) {
@@ -46,7 +46,6 @@ public void handlerRule(final RuleData ruleData) {
 
     @Override
     public void removeRule(final RuleData ruleData) {
-
         Optional.ofNullable(ruleData.getHandle()).ifPresent(s -> CACHED_HANDLE.get().removeHandle(CacheKeyUtils.INST.getKey(ruleData)));
     }
 

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/CryptorStrategy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.strategies;
+package org.apache.shenyu.plugin.cryptor.strategy;
 
 import org.apache.shenyu.spi.SPI;
 
@@ -42,5 +42,4 @@ public interface CryptorStrategy {
      * @throws Exception error
      */
     String encrypt(String key, String data) throws Exception;
-
 }

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/strategy/RsaStrategy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.strategies;
+package org.apache.shenyu.plugin.cryptor.strategy;
 
 import org.apache.shenyu.spi.Join;
 

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/HttpUtil.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.utils;
+package org.apache.shenyu.plugin.cryptor.utils;
 
 import org.apache.shenyu.plugin.base.support.CachedBodyOutputMessage;
 import org.springframework.core.io.buffer.DataBufferUtils;

File: shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/utils/JsonUtil.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.cryptor.common.utils;
+package org.apache.shenyu.plugin.cryptor.utils;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;

File: shenyu-plugin/shenyu-plugin-cryptor/src/test/java/org/apache/shenyu/plugin/cryptor/request/CryptorRequestPluginTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
-import org.apache.shenyu.plugin.cryptor.common.handler.CryptorRequestPluginDataHandler;
+import org.apache.shenyu.plugin.cryptor.handler.CryptorRequestPluginDataHandler;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: shenyu-plugin/shenyu-plugin-cryptor/src/test/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePluginTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
-import org.apache.shenyu.plugin.cryptor.common.decorator.ResponseDecorator;
-import org.apache.shenyu.plugin.cryptor.common.handler.CryptorResponsePluginDataHandler;
+import org.apache.shenyu.plugin.cryptor.decorator.ResponseDecorator;
+import org.apache.shenyu.plugin.cryptor.handler.CryptorResponsePluginDataHandler;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/ModifyResponsePlugin.java
Patch:
@@ -89,7 +89,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             if (MapUtils.isNotEmpty(modifyResponseRuleHandle.getReplaceHeaderKeys())) {
                 Map<String, String> replaceHeaderMap = modifyResponseRuleHandle.getReplaceHeaderKeys();
                 replaceHeaderMap.forEach((key, value) -> {
-                    httpHeaders.addAll(value, httpHeaders.get(key));
+                    httpHeaders.addAll(value, Objects.requireNonNull(httpHeaders.get(key)));
                     httpHeaders.remove(key);
                 });
             }

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/exception/ThrowingFunction.java
Patch:
@@ -48,5 +48,4 @@ static <T> T wrap(ThrowingFunction<T> function) {
             return null;
         }
     }
-
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.shenyu.admin.model.vo.DashboardUserVO;
 import org.apache.shenyu.admin.model.vo.RoleVO;
 import org.apache.shenyu.common.utils.GsonUtils;
+import org.assertj.core.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -158,7 +159,7 @@ public void updateDashboardUser() throws Exception {
     @Test
     public void deleteDashboardUser() throws Exception {
         final String url = "/dashboardUser/batch";
-        final List<String> ids = Collections.emptyList();
+        final List<String> ids = Lists.newArrayList();
         given(dashboardUserService.delete(any())).willReturn(0);
         mockMvc.perform(delete(url, ids)
                 .content(GsonUtils.getInstance().toJson(ids))

File: shenyu-bootstrap/src/main/java/org/apache/shenyu/bootstrap/configuration/ShenyuNettyWebServerFactory.java
Patch:
@@ -44,7 +44,7 @@ public NettyReactiveWebServerFactory nettyReactiveWebServerFactory() {
         webServerFactory.addServerCustomizers(new EventLoopNettyCustomizer(nettyTcpConfig));
         return webServerFactory;
     }
-    
+
     /**
      * Netty tcp config.
      *
@@ -77,6 +77,6 @@ public HttpServer apply(final HttpServer httpServer) {
                             .option(ChannelOption.SO_REUSEADDR, nettyTcpConfig.isSoReuseaddr())
                             .option(ChannelOption.SO_LINGER, nettyTcpConfig.getSoLinger())
                             .option(ChannelOption.TCP_NODELAY, nettyTcpConfig.isTcpNodelay()));
-        } 
+        }
     }
 }

File: shenyu-integrated-test/shenyu-integrated-test-spring-cloud/src/main/java/org/apache/shenyu/integratedtest/springcloud/SpringCloudIntegratedBootstrap.java
Patch:
@@ -19,15 +19,13 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
 
 /**
  * The type Spring cloud integrated bootstrap.
  */
 @SpringBootApplication
-@EnableDiscoveryClient
 public class SpringCloudIntegratedBootstrap {
-    
+
     /**
      * main method of App.
      *

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/fallback/FallbackHandlerTest.java
Patch:
@@ -75,7 +75,7 @@ public void generateErrorTest() {
     @Test
     public void fallbackTest() {
         StepVerifier.create(testFallbackHandler.fallback(exchange, null, mock(RuntimeException.class))).expectSubscription().verifyComplete();
-        StepVerifier.create(testFallbackHandler.fallback(exchange, URI.create("http://wwww.baidu.com"), mock(RuntimeException.class))).expectSubscription().verifyComplete();
+        StepVerifier.create(testFallbackHandler.fallback(exchange, URI.create("http://127.0.0.1:8090/SHENYU"), mock(RuntimeException.class))).expectSubscription().verifyComplete();
     }
 
     static class TestFallbackHandler implements FallbackHandler {

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -112,8 +112,8 @@ private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBody
                 .doOnError(e -> LOG.error(e.getMessage(), e))
                 .timeout(Duration.ofMillis(timeout))
                 .retryWhen(Retry.onlyIf(x -> x.exception() instanceof ConnectTimeoutException)
-                    .retryMax(retryTimes)
-                    .backoff(Backoff.exponential(Duration.ofMillis(200), Duration.ofSeconds(20), 2, true)))
+                        .retryMax(retryTimes)
+                        .backoff(Backoff.exponential(Duration.ofMillis(200), Duration.ofSeconds(20), 2, true)))
                 .flatMap(e -> doNext(e, exchange, chain));
 
     }

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/handler/RateLimiterPluginDataHandlerTest.java
Patch:
@@ -81,7 +81,7 @@ public void handlerPluginTest() {
         pluginData.setEnabled(true);
         pluginData.setConfig(GsonUtils.getInstance().toJson(rateLimiterConfig));
         rateLimiterPluginDataHandler.handlerPlugin(pluginData);
-        Assert.assertEquals(rateLimiterConfig, Singleton.INST.get(RateLimiterConfig.class));
+        Assert.assertEquals(rateLimiterConfig.getUrl(), Singleton.INST.get(RateLimiterConfig.class).getUrl());
         Assert.assertNotNull(Singleton.INST.get(ReactiveRedisTemplate.class));
     }
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-springcloud/src/main/java/org/apache/shenyu/springboot/starter/plugin/springcloud/SpringCloudPluginConfiguration.java
Patch:
@@ -54,12 +54,12 @@ public ShenyuPlugin springCloudPlugin(final ObjectProvider<LoadBalancerClient> l
     }
 
     /**
-     * Spring cloud dubbo shenyu context decorator shenyu context decorator.
+     * Spring cloud shenyu context decorator shenyu context decorator.
      *
      * @return the shenyu context decorator
      */
     @Bean
-    public ShenyuContextDecorator springCloudDubboShenyuContextDecorator() {
+    public ShenyuContextDecorator springCloudShenyuContextDecorator() {
         return new SpringCloudShenyuContextDecorator();
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -48,6 +48,7 @@
 import org.springframework.beans.BeanUtils;
 import org.springframework.ldap.NameNotFoundException;
 import org.springframework.ldap.core.LdapTemplate;
+import org.springframework.ldap.support.LdapEncoder;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.ObjectUtils;
@@ -223,7 +224,7 @@ public LoginDashboardUserVO login(final String userName, final String password)
     private DashboardUserVO loginByLdap(final String userName, final String password) {
         String key = secretProperties.getKey();
         String iv = secretProperties.getIv();
-        String searchBase = String.format("%s=%s,%s", ldapProperties.getLoginField(), userName, ldapProperties.getBaseDn());
+        String searchBase = String.format("%s=%s,%s", ldapProperties.getLoginField(), LdapEncoder.nameEncode(userName), ldapProperties.getBaseDn());
         String filter = String.format("(objectClass=%s)", ldapProperties.getObjectClass());
         try {
             DashboardUserVO dashboardUserVO = null;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/entity/AppAuthDO.java
Patch:
@@ -199,8 +199,6 @@ public void setExtInfo(final String extInfo) {
         this.extInfo = extInfo;
     }
 
-
-
     /**
      * Build AppAuthDO object with given AppAuthDTO object.
      *

File: shenyu-agent/shenyu-agent-api/src/main/java/org/apache/shenyu/agent/config/AgentPluginConfig.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Properties;
 
-
 /**
  * The type Agent plugin config.
  */

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/DivideUpstream.java
Patch:
@@ -402,7 +402,6 @@ public static final class Builder {
          */
         private long lastUnhealthyTimestamp;
 
-
         /**
          * no args constructor.
          */

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/ZombieUpstream.java
Patch:
@@ -23,7 +23,6 @@
 /**
  * this is zombie divide upstream.
  */
-
 public class ZombieUpstream {
 
     /**
@@ -159,7 +158,6 @@ public String toString() {
                 + '}';
     }
 
-
     /**
      * create zombie upstream with divide upstream.
      *

File: shenyu-examples/shenyu-examples-dubbo/shenyu-examples-apache-dubbo-service/src/main/java/org/apache/shenyu/examples/apache/dubbo/service/TestApacheDubboApplication.java
Patch:
@@ -25,7 +25,7 @@
  * TestDubboApplication.
  */
 @SpringBootApplication
-@ImportResource({"classpath:spring-dubbo.xml"})
+@ImportResource("classpath:spring-dubbo.xml")
 public class TestApacheDubboApplication {
 
     /**

File: shenyu-examples/shenyu-examples-motan/shenyu-examples-motan-service/src/main/java/org/apache/shenyu/examples/motan/service/TestMotanApplication.java
Patch:
@@ -24,7 +24,6 @@
 import com.weibo.api.motan.config.springsupport.RegistryConfigBean;
 import com.weibo.api.motan.util.MotanSwitcherUtil;
 import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
 
@@ -81,4 +80,4 @@ public BasicServiceConfigBean baseServiceConfig() {
         config.setRegistry("registryConfig1");
         return config;
     }
-}
\ No newline at end of file
+}

File: shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/dto/OrderDTO.java
Patch:
@@ -17,12 +17,10 @@
 
 package org.apache.shenyu.integratedtest.common.dto;
 
-import java.io.Serializable;
-
 /**
  * The type Order dto.
  */
-public class OrderDTO implements Serializable {
+public class OrderDTO {
 
     private String id;
 

File: shenyu-integrated-test/shenyu-integrated-test-common/src/main/java/org/apache/shenyu/integratedtest/common/dto/UserDTO.java
Patch:
@@ -17,12 +17,10 @@
 
 package org.apache.shenyu.integratedtest.common.dto;
 
-import java.io.Serializable;
-
 /**
  * The type User dto.
  */
-public class UserDTO implements Serializable {
+public class UserDTO {
 
     private String userId;
 

File: shenyu-integrated-test/shenyu-integrated-test-spring-cloud/src/test/java/org/apache/shenyu/integratedtest/springcloud/HelloWorldTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.integratedtest.springcloud;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.integratedtest.common.AbstractTest;
 import org.apache.shenyu.integratedtest.common.dto.OrderDTO;
 import org.apache.shenyu.integratedtest.common.helper.HttpHelper;
@@ -27,7 +26,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-@Slf4j
 public class HelloWorldTest extends AbstractTest {
 
     @Test
@@ -36,4 +34,5 @@ public void testHelloWorld() throws IOException {
         order = HttpHelper.INSTANCE.postGateway("/springcloud/order/save", order, OrderDTO.class);
         assertEquals("hello world spring cloud save order", order.getName());
     }
+
 }

File: shenyu-metrics/shenyu-metrics-spi/src/main/java/org/apache/shenyu/metrics/config/JmxConfig.java
Patch:
@@ -297,7 +297,6 @@ public String toString() {
                 .toString();
     }
 
-
     /**
      * The enum Type.
      */
@@ -375,7 +374,6 @@ public static class Rule {
          */
         private List<String> labelValues = new ArrayList<>();
 
-
         /**
          * Gets pattern.
          *
@@ -436,7 +434,6 @@ public Rule setValue(final String value) {
             return this;
         }
 
-
         /**
          * Gets value factor.
          *

File: shenyu-metrics/shenyu-metrics-spi/src/main/java/org/apache/shenyu/metrics/config/MetricsConfig.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Properties;
 import java.util.StringJoiner;
 
-
 /**
  * Metrics config.
  */

File: shenyu-metrics/shenyu-metrics-spi/src/main/java/org/apache/shenyu/metrics/entity/Metric.java
Patch:
@@ -48,7 +48,6 @@ public Metric(final MetricType type, final String name, final String document, f
         this.labels = labels;
     }
 
-
     /**
      * Gets type.
      *

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -37,7 +37,6 @@
 import java.util.Optional;
 import java.util.concurrent.ExecutionException;
 
-
 /**
  * The type Application config cache.
  */

File: shenyu-register-center/shenyu-register-common/src/main/java/org/apache/shenyu/register/common/enums/RegisterTypeEnum.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.register.common.enums;
 
-
 /**
  * RegisterTypeEnum.
  */

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/properties/ShenyuConfig.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.web.configuration.properties;
 
-
 /**
  * The type shenyu config.
  */

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-nacos/src/main/java/org/apache/shenyu/register/client/nacos/NacosClientRegisterRepository.java
Patch:
@@ -26,6 +26,7 @@
 import com.alibaba.nacos.api.naming.pojo.Instance;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.exception.ShenyuException;
+import org.apache.shenyu.common.constant.NacosPathConstants;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.register.client.api.ShenyuClientRegisterRepository;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
@@ -49,7 +50,7 @@ public class NacosClientRegisterRepository implements ShenyuClientRegisterReposi
 
     private static final Logger LOGGER = LoggerFactory.getLogger(NacosClientRegisterRepository.class);
 
-    private String defaultGroup = "default_group";
+    private final String defaultGroup = NacosPathConstants.GROUP;
 
     private ConfigService configService;
 

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-nacos/src/main/java/org/apache/shenyu/register/server/nacos/NacosServerRegisterRepository.java
Patch:
@@ -27,6 +27,7 @@
 import com.alibaba.nacos.api.naming.listener.NamingEvent;
 import com.alibaba.nacos.api.naming.pojo.Instance;
 import com.google.common.collect.Lists;
+import org.apache.shenyu.common.constant.NacosPathConstants;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.common.exception.ShenyuException;
 import org.apache.shenyu.common.utils.GsonUtils;
@@ -62,7 +63,7 @@ public class NacosServerRegisterRepository implements ShenyuServerRegisterReposi
 
     private static final List<RpcTypeEnum> RPC_URI_TYPE_SET = RpcTypeEnum.acquireSupportURIs();
 
-    private final String defaultGroup = "default_group";
+    private final String defaultGroup = NacosPathConstants.GROUP;
 
     private ConfigService configService;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/MetaDataTransfer.java
Patch:
@@ -98,7 +98,7 @@ public MetaDataDO mapRegisterDTOToEntity(final MetaDataRegisterDTO metaDataDTO)
     public MetaData mapToData(final MetaDataDTO metaDataDTO) {
         return Optional.ofNullable(metaDataDTO)
                 .map(v -> {
-                    MetaData.MetaDataBuilder metaData = MetaData.builder();
+                    MetaData.Builder metaData = MetaData.builder();
                     metaData.id(v.getId());
                     metaData.appName(v.getAppName());
                     metaData.contextPath(v.getContextPath());
@@ -124,7 +124,7 @@ public MetaData mapToData(final MetaDataDTO metaDataDTO) {
     public MetaData mapToData(final MetaDataDO metaDataDO) {
         return Optional.ofNullable(metaDataDO)
                 .map(v -> {
-                    MetaData.MetaDataBuilder metaData = MetaData.builder();
+                    MetaData.Builder metaData = MetaData.builder();
                     metaData.id(v.getId());
                     metaData.appName(v.getAppName());
                     metaData.path(v.getPath());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/PluginTransfer.java
Patch:
@@ -42,7 +42,7 @@ public enum PluginTransfer {
     public PluginData mapToData(final PluginDO pluginDO) {
         return Optional.ofNullable(pluginDO)
                 .map(v -> {
-                    PluginData.PluginDataBuilder pluginData = PluginData.builder();
+                    PluginData.Builder pluginData = PluginData.builder();
                     pluginData.id(v.getId());
                     pluginData.name(v.getName());
                     pluginData.config(v.getConfig());
@@ -63,7 +63,7 @@ public PluginData mapToData(final PluginDO pluginDO) {
     public PluginData mapDataTOVO(final PluginVO pluginVO) {
         return Optional.ofNullable(pluginVO)
                 .map(v -> {
-                    PluginData.PluginDataBuilder pluginData = PluginData.builder();
+                    PluginData.Builder pluginData = PluginData.builder();
                     pluginData.id(v.getId());
                     pluginData.name(v.getName());
                     pluginData.config(v.getConfig());

File: shenyu-common/src/test/java/org/apache/shenyu/common/concurrent/ShenyuThreadFactoryTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.common.concurrent;
 
-import lombok.extern.slf4j.Slf4j;
 import org.junit.Test;
 
 import java.util.concurrent.ThreadFactory;
@@ -28,7 +27,6 @@
 /**
  * Test cases for ShenyuThreadFactory.
  */
-@Slf4j
 public final class ShenyuThreadFactoryTest {
 
     private static final String NAME_PREFIX = "shenyu##thread##";

File: shenyu-common/src/test/java/org/apache/shenyu/common/utils/UpstreamCheckUtilsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.common.utils;
 
-import lombok.SneakyThrows;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -40,7 +39,6 @@ public void testBlank() {
     }
 
     @Test
-    @SneakyThrows
     public void testSocketConnect() {
         Runnable runnable = () -> {
             ServerSocket serverSocket;

File: shenyu-agent/shenyu-agent-bootstrap/src/main/java/org/apache/shenyu/agent/bootstrap/ShenyuAgentBootstrap.java
Patch:
@@ -31,5 +31,8 @@ public class ShenyuAgentBootstrap {
      * @param instrumentation instrumentation
      */
     public static void premain(final String arguments, final Instrumentation instrumentation) {
+        // todo create agent classloader and switch to it
+        // todo use reflect invoke AgentInstaller's method installBytebuddyAgent
+        // todo turn back to prev classloader back
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -141,7 +141,7 @@ public void close() {
             try {
                 executor.awaitTermination(5, TimeUnit.SECONDS);
             } catch (InterruptedException ex) {
-                log.error("shutdown executor error", ex);
+                LOG.error("shutdown executor error", ex);
                 Thread.currentThread().interrupt();
             }
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/RegisterCenterConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.admin.config;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.admin.disruptor.RegisterServerDisruptorPublisher;
 import org.apache.shenyu.admin.service.register.ShenyuClientRegisterServiceFactory;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
@@ -32,10 +31,9 @@
 /**
  * The type Register center configuration.
  */
-@Slf4j
 @Configuration
 public class RegisterCenterConfiguration {
-    
+
     /**
      * Shenyu register center config shenyu register center config.
      *

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/ConfigController.java
Patch:
@@ -18,10 +18,9 @@
 package org.apache.shenyu.admin.controller;
 
 import com.google.common.collect.Maps;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.admin.listener.http.HttpLongPollingDataChangedListener;
-import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.admin.model.result.ShenyuAdminResult;
+import org.apache.shenyu.admin.utils.ShenyuResultMessage;
 import org.apache.shenyu.common.dto.ConfigData;
 import org.apache.shenyu.common.enums.ConfigGroupEnum;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -42,7 +41,6 @@
 @ConditionalOnBean(HttpLongPollingDataChangedListener.class)
 @RestController
 @RequestMapping("/configs")
-@Slf4j
 public class ConfigController {
 
     @Resource

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/ApplicationStartListener.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.admin.listener;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.admin.utils.ShenyuDomain;
 import org.apache.shenyu.common.utils.IpUtils;
@@ -29,7 +28,6 @@
 /**
  * ApplicationStartListener.
  */
-@Slf4j
 @Component
 public class ApplicationStartListener implements ApplicationListener<WebServerInitializedEvent> {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/consul/ConsulDataInit.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.admin.listener.consul;
 
 import com.ecwid.consul.v1.ConsulClient;
-import lombok.SneakyThrows;
 import org.apache.shenyu.admin.service.SyncDataService;
 import org.apache.shenyu.common.constant.ConsulConstants;
 import org.apache.shenyu.common.enums.DataEventTypeEnum;
@@ -52,7 +51,6 @@ public void run(final String... args) {
         }
     }
 
-    @SneakyThrows
     private boolean dataKeyNotExist(final String dataKey) {
         return consulClient.getKVValue(dataKey).getValue() == null;
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/websocket/WebsocketConfigurator.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.admin.listener.websocket;
 
-import lombok.extern.slf4j.Slf4j;
-
 import javax.servlet.http.HttpSession;
 import javax.websocket.HandshakeResponse;
 import javax.websocket.server.HandshakeRequest;
@@ -29,7 +27,6 @@
  *
  * @since 2.0.0
  */
-@Slf4j
 public class WebsocketConfigurator extends ServerEndpointConfig.Configurator {
 
     @Override

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/AppAuthTransfer.java
Patch:
@@ -43,7 +43,7 @@ public enum AppAuthTransfer {
     public AppAuthDO mapToEntity(final AppAuthDTO appAuthDTO) {
         return Optional.ofNullable(appAuthDTO)
                 .map(v -> {
-                    AppAuthDO.AppAuthDOBuilder<?, ?> appAuthDO = AppAuthDO.builder();
+                    AppAuthDO.AppAuthDOBuilder appAuthDO = AppAuthDO.builder();
                     appAuthDO.id(v.getId());
                     appAuthDO.appKey(v.getAppKey());
                     appAuthDO.appSecret(v.getAppSecret());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/transfer/MetaDataTransfer.java
Patch:
@@ -47,7 +47,7 @@ public enum MetaDataTransfer {
     public MetaDataDO mapToEntity(final MetaDataDTO metaDataDTO) {
         return Optional.ofNullable(metaDataDTO)
                 .map(v -> {
-                    MetaDataDO.MetaDataDOBuilder<?, ?> metaDataDO = MetaDataDO.builder();
+                    MetaDataDO.MetaDataDOBuilder metaDataDO = MetaDataDO.builder();
                     metaDataDO.id(v.getId());
                     metaDataDO.appName(v.getAppName());
                     metaDataDO.path(v.getPath());
@@ -73,7 +73,7 @@ public MetaDataDO mapToEntity(final MetaDataDTO metaDataDTO) {
     public MetaDataDO mapRegisterDTOToEntity(final MetaDataRegisterDTO metaDataDTO) {
         return Optional.ofNullable(metaDataDTO)
                 .map(v -> {
-                    MetaDataDO.MetaDataDOBuilder<?, ?> metaDataDO = MetaDataDO.builder();
+                    MetaDataDO.MetaDataDOBuilder metaDataDO = MetaDataDO.builder();
                     metaDataDO.appName(v.getAppName());
                     metaDataDO.path(v.getPath());
                     metaDataDO.pathDesc(v.getPathDesc());

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/subscriber/ApacheDubboMetaDataSubscriberTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.alibaba.dubbo.config.ReferenceConfig;
 import com.google.common.cache.LoadingCache;
-import lombok.SneakyThrows;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.enums.RpcTypeEnum;
 import org.apache.shenyu.plugin.alibaba.dubbo.cache.ApplicationConfigCache;
@@ -57,9 +56,8 @@ public void setUp() {
         metaData.setParameterTypes("parameterTypes");
     }
 
-    @SneakyThrows
     @Test
-    public void testOnSubscribe() {
+    public void testOnSubscribe() throws NoSuchFieldException, IllegalAccessException {
         ReferenceConfig referenceConfig = mock(ReferenceConfig.class);
         when(referenceConfig.getInterface()).thenReturn("/dubbo/findAll");
         ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.plugin.apache.dubbo.proxy;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
@@ -42,7 +41,6 @@
 /**
  * dubbo proxy service is  use GenericService.
  */
-@Slf4j
 public class ApacheDubboProxyService {
 
     private final BodyParamResolveService bodyParamResolveService;

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/GlobalPluginTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.plugin.global;
 
-import lombok.SneakyThrows;
 import org.apache.shenyu.plugin.global.fixture.FixtureShenyuContextDecorator;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.enums.PluginEnum;
@@ -35,6 +34,7 @@
 import org.springframework.util.MultiValueMap;
 import org.springframework.web.server.ServerWebExchange;
 
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.net.InetSocketAddress;
 import java.util.HashMap;
@@ -82,9 +82,8 @@ public void testExecuted() {
         assertNotNull(this.exchange.getAttributes().get(Constants.CONTEXT));
     }
 
-    @SneakyThrows
     @Test
-    public void testTransformMap() {
+    public void testTransformMap() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
         Class<GlobalPlugin> clazz = GlobalPlugin.class;
         Method method = clazz.getDeclaredMethod("transformMap", MultiValueMap.class);
         method.setAccessible(true);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/ApplicationConfigCache.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.SelectorData;
 import org.apache.shenyu.common.dto.convert.DivideUpstream;
 import org.apache.shenyu.common.exception.ShenyuException;
@@ -40,7 +39,6 @@
 /**
  * Grpc config cache.
  */
-@Slf4j
 public final class ApplicationConfigCache {
 
     private final int maxCount = 1000;

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/GrpcClientCache.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.plugin.grpc.cache;
 
 import com.google.common.collect.Maps;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.plugin.grpc.client.GrpcClientBuilder;
 import org.apache.shenyu.plugin.grpc.client.ShenyuGrpcClient;
 
@@ -28,7 +27,6 @@
 /**
  * The Grpc client cache.
  */
-@Slf4j
 public class GrpcClientCache {
 
     private static final Map<String, ShenyuGrpcClient> CLIENT_CACHE = Maps.newConcurrentMap();

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/client/GrpcClientBuilder.java
Patch:
@@ -45,7 +45,7 @@ public class GrpcClientBuilder {
      */
     public static ShenyuGrpcClient buildClient(final String contextPath) {
         ManagedChannelBuilder<?> builder = ManagedChannelBuilder.forTarget(contextPath)
-                .defaultLoadBalancingPolicy(LoadBalancerStrategy.Random.getStrategy())
+                .defaultLoadBalancingPolicy(LoadBalancerStrategy.RANDOM.getStrategy())
                 .usePlaintext()
                 .maxInboundMessageSize(100 * 1024 * 1024)
                 .disableRetry();

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/RandomLoadBalancerProvider.java
Patch:
@@ -19,7 +19,6 @@
 
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.plugin.grpc.loadbalance.picker.AbstractReadyPicker;
 import org.apache.shenyu.plugin.grpc.loadbalance.picker.RandomPicker;
 
@@ -28,7 +27,6 @@
 /**
  * RandomLoadBalancerProvider.
  */
-@Slf4j
 public class RandomLoadBalancerProvider extends LoadBalancerProvider {
 
     @Override
@@ -43,7 +41,7 @@ public int getPriority() {
 
     @Override
     public String getPolicyName() {
-        return LoadBalancerStrategy.Random.getStrategy();
+        return LoadBalancerStrategy.RANDOM.getStrategy();
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/RoundRobinLoadBalancerProvider.java
Patch:
@@ -19,7 +19,6 @@
 
 import io.grpc.LoadBalancer;
 import io.grpc.LoadBalancerProvider;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.plugin.grpc.loadbalance.picker.RoundRobinPicker;
 import org.apache.shenyu.plugin.grpc.loadbalance.picker.AbstractReadyPicker;
 
@@ -28,7 +27,6 @@
 /**
  * RoundRobinLoadBalancerProvider.
  */
-@Slf4j
 public class RoundRobinLoadBalancerProvider extends LoadBalancerProvider {
 
     @Override
@@ -43,7 +41,7 @@ public int getPriority() {
 
     @Override
     public String getPolicyName() {
-        return LoadBalancerStrategy.RoundRobin.getStrategy();
+        return LoadBalancerStrategy.ROUND_ROBIN.getStrategy();
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/AbstractReadyPicker.java
Patch:
@@ -20,7 +20,6 @@
 import io.grpc.ConnectivityState;
 import io.grpc.LoadBalancer;
 import io.grpc.Status;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.shenyu.plugin.grpc.loadbalance.SubChannelCopy;
 
@@ -32,7 +31,6 @@
 /**
  * The AbstractReadyPicker result.
  */
-@Slf4j
 public abstract class AbstractReadyPicker extends AbstractPicker implements Picker {
 
     private final boolean hasIdleNode;

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/RandomLoadBalancerProviderTest.java
Patch:
@@ -52,7 +52,7 @@ public void testGetPriority() {
 
     @Test
     public void testGetPolicyName() {
-        assertEquals(randomLoadBalancerProvider.getPolicyName(), LoadBalancerStrategy.Random.getStrategy());
+        assertEquals(randomLoadBalancerProvider.getPolicyName(), LoadBalancerStrategy.RANDOM.getStrategy());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/RoundRobinLoadBalancerProviderTest.java
Patch:
@@ -49,7 +49,7 @@ public void testGetPriority() {
 
     @Test
     public void testGetPolicyName() {
-        assertEquals(roundRobinLoadBalancerProvider.getPolicyName(), LoadBalancerStrategy.RoundRobin.getStrategy());
+        assertEquals(roundRobinLoadBalancerProvider.getPolicyName(), LoadBalancerStrategy.ROUND_ROBIN.getStrategy());
     }
 
     @Test

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/RandomPickerTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.grpc.Attributes;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.LoadBalancer;
-import lombok.SneakyThrows;
 import org.apache.shenyu.plugin.grpc.loadbalance.SubChannelCopy;
 import org.apache.shenyu.plugin.grpc.loadbalance.SubChannels;
 import org.junit.Assert;
@@ -45,7 +44,6 @@ public class RandomPickerTest {
     private List<LoadBalancer.Subchannel> list;
 
     @Before
-    @SneakyThrows
     public void setUp() {
         Attributes attributes = SubChannels.createAttributes(1, "ok");
         LoadBalancer.Subchannel subchannel =

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/RoundRobinPickerTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.grpc.Attributes;
 import io.grpc.EquivalentAddressGroup;
 import io.grpc.LoadBalancer;
-import lombok.SneakyThrows;
 import org.apache.shenyu.plugin.grpc.loadbalance.SubChannelCopy;
 import org.apache.shenyu.plugin.grpc.loadbalance.SubChannels;
 import org.junit.Assert;
@@ -41,7 +40,6 @@ public class RoundRobinPickerTest {
     private List<LoadBalancer.Subchannel> list;
 
     @Before
-    @SneakyThrows
     public void setUp() {
         Attributes attributes = SubChannels.createAttributes(1, "ok");
         LoadBalancer.Subchannel subchannel =

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/UnitTestIdleHelper.java
Patch:
@@ -23,7 +23,6 @@
 import io.grpc.LoadBalancer;
 import io.grpc.ManagedChannel;
 import io.grpc.NameResolver;
-import lombok.SneakyThrows;
 import javax.annotation.Nonnull;
 import java.net.SocketAddress;
 import java.util.Collections;
@@ -75,7 +74,6 @@ public void shutdown() {
         public void requestConnection() {
         }
 
-        @SneakyThrows
         @Override
         public Attributes getAttributes() {
             return args.getAttributes();

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/UnitTestReadHelper.java
Patch:
@@ -24,7 +24,6 @@
 import io.grpc.LoadBalancer;
 import io.grpc.ManagedChannel;
 import io.grpc.NameResolver;
-import lombok.SneakyThrows;
 import org.apache.shenyu.plugin.grpc.loadbalance.SubChannels;
 import javax.annotation.Nonnull;
 import java.net.SocketAddress;
@@ -77,7 +76,6 @@ public void shutdown() {
         public void requestConnection() {
         }
 
-        @SneakyThrows
         @Override
         public Attributes getAttributes() {
             return args.getAttributes();

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/builder/HystrixBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import com.netflix.hystrix.HystrixCommandProperties;
 import com.netflix.hystrix.HystrixObservableCommand;
 import com.netflix.hystrix.HystrixThreadPoolProperties;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.convert.HystrixHandle;
 import org.apache.shenyu.common.dto.convert.HystrixThreadPoolConfig;
@@ -33,7 +32,6 @@
 /**
  * the hystrix builder.
  */
-@Slf4j
 public class HystrixBuilder {
 
     /**

File: shenyu-plugin/shenyu-plugin-hystrix/src/test/java/org/apache/shenyu/plugin/hystrix/command/HystrixCommandTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.netflix.hystrix.HystrixCommandKey;
 import com.netflix.hystrix.HystrixCommandProperties;
 import com.netflix.hystrix.HystrixObservableCommand;
-import lombok.SneakyThrows;
 import org.apache.shenyu.common.dto.convert.HystrixHandle;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.junit.Before;
@@ -48,7 +47,6 @@ public final class HystrixCommandTest {
 
     private HystrixCommand hystrixCommand;
 
-    @SneakyThrows
     @Before
     public void setUp() {
         MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("http://localhost:8080/http")
@@ -85,7 +83,6 @@ public void testGetCallBackUri() {
     }
 
     @Test
-    @SneakyThrows
     public void testConstruct() {
         assertNotNull(ReflectionTestUtils.invokeMethod(this.hystrixCommand, "construct"));
     }

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/ModifyResponsePlugin.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.jayway.jsonpath.DocumentContext;
 import com.jayway.jsonpath.JsonPath;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections4.MapUtils;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
@@ -60,7 +59,6 @@
 /**
  * ModifyResponse plugin.
  */
-@Slf4j
 public class ModifyResponsePlugin extends AbstractShenyuPlugin {
 
     public ModifyResponsePlugin() {

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/cache/ModifyResponseRuleHandleCache.java
Patch:
@@ -17,15 +17,13 @@
 
 package org.apache.shenyu.plugin.modify.response.cache;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
 
 /**
  * The rule handle cache.
  */
 @SuppressWarnings("all")
-@Slf4j
 public final class ModifyResponseRuleHandleCache extends RuleHandleCache<String, ModifyResponseRuleHandle> {
 
     private ModifyResponseRuleHandleCache() {

File: shenyu-plugin/shenyu-plugin-oauth2/src/main/java/org/apache/shenyu/plugin/oauth2/OAuth2Plugin.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.plugin.oauth2;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
@@ -34,7 +33,6 @@
 /**
  * The OAuth2Plugin.
  */
-@Slf4j
 public class OAuth2Plugin implements ShenyuPlugin {
 
     private static final String BEARER = "Bearer ";

File: shenyu-plugin/shenyu-plugin-oauth2/src/main/java/org/apache/shenyu/plugin/oauth2/filter/OAuth2PreFilter.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.plugin.oauth2.filter;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
@@ -43,7 +42,6 @@
  * <p>This filter is mainly used to process the usage status of OAuth2 plugins
  * and the paths that need to be authorized by OAuth2
  */
-@Slf4j
 public class OAuth2PreFilter implements WebFilter {
 
     private static final AtomicBoolean SKIP = new AtomicBoolean(true);

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/config/RateLimiterConfigTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shenyu.plugin.ratelimiter.config;
 
-import lombok.extern.slf4j.Slf4j;
-
 import org.apache.shenyu.common.enums.RedisModeEnum;
 import org.junit.Assert;
 import org.junit.Before;
@@ -30,7 +28,6 @@
  * RateLimiterConfig default value test.
  */
 @RunWith(MockitoJUnitRunner.class)
-@Slf4j
 public final class RateLimiterConfigTest {
 
     private static final int DEFAULT_MAX_IDLE = 8;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiterScriptsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.plugin.ratelimiter.executor;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.PluginData;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.utils.Singleton;
@@ -46,7 +45,6 @@
  * Test of rate limiter Lua scripts.
  */
 @RunWith(MockitoJUnitRunner.class)
-@Slf4j
 public class RedisRateLimiterScriptsTest {
 
     private static RedisServer redisServer;

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/executor/RedisRateLimiterTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.plugin.ratelimiter.executor;
 
 import com.google.common.collect.Lists;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.convert.RateLimiterHandle;
 import org.apache.shenyu.plugin.base.utils.Singleton;
 import org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse;
@@ -46,7 +45,6 @@
  * RedisRateLimiter test.
  */
 @RunWith(MockitoJUnitRunner.class)
-@Slf4j
 public final class RedisRateLimiterTest {
 
     private static final String DEFAULT_TEST_ID = "testId";

File: shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/SentinelPlugin.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shenyu.plugin.sentinel;
 
 import com.alibaba.csp.sentinel.adapter.reactor.SentinelReactorTransformer;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.SelectorData;
@@ -39,7 +38,6 @@
 /**
  * Sentinel Plugin.
  */
-@Slf4j
 public class SentinelPlugin extends AbstractShenyuPlugin {
 
     private final FallbackHandler fallbackHandler;

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/service/DefaultSignServiceTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.shenyu.common.constant.Constants;
 import org.apache.shenyu.common.dto.AppAuthData;
@@ -50,7 +49,6 @@
  * DefaultSignService Test.
  */
 @RunWith(MockitoJUnitRunner.class)
-@Slf4j
 public final class DefaultSignServiceTest {
 
     private SignService signService;

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/proxy/SofaProxyService.java
Patch:
@@ -24,7 +24,6 @@
 import com.alipay.sofa.rpc.core.exception.SofaRpcException;
 import com.alipay.sofa.rpc.core.invoke.SofaResponseCallback;
 import com.alipay.sofa.rpc.core.request.RequestBase;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
@@ -43,7 +42,6 @@
 /**
  * sofa proxy service is use GenericService.
  */
-@Slf4j
 public class SofaProxyService {
 
     private final BodyParamResolveService bodyParamResolveService;

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/cache/SpringCloudRuleHandleCache.java
Patch:
@@ -17,14 +17,12 @@
 
 package org.apache.shenyu.plugin.springcloud.cache;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
 
 /**
  * The rule handle cache.
  */
-@Slf4j
 public final class SpringCloudRuleHandleCache extends RuleHandleCache<String, SpringCloudRuleHandle> {
 
     private SpringCloudRuleHandleCache() {

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/cache/SpringCloudSelectorHandleCache.java
Patch:
@@ -17,14 +17,12 @@
 
 package org.apache.shenyu.plugin.springcloud.cache;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
 
 /**
  * The spring cloud selector handle cache.
  */
-@Slf4j
 public final class SpringCloudSelectorHandleCache extends RuleHandleCache<String, SpringCloudSelectorHandle> {
 
     private SpringCloudSelectorHandleCache() {

File: shenyu-sync-data-center/shenyu-sync-data-consul/src/test/java/org/apache/shenyu/sync/data/consul/ConsulSyncDataServiceTest.java
Patch:
@@ -20,14 +20,14 @@
 import com.ecwid.consul.v1.ConsulClient;
 import com.ecwid.consul.v1.Response;
 import com.ecwid.consul.v1.kv.model.GetValue;
-import lombok.SneakyThrows;
 import org.apache.shenyu.common.constant.ConsulConstants;
 import org.apache.shenyu.common.utils.ReflectUtils;
 import org.apache.shenyu.sync.data.consul.config.ConsulConfig;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -68,8 +68,7 @@ public void testClose() {
     }
 
     @Test
-    @SneakyThrows
-    public void testWatch() {
+    public void testWatch() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {
         Long index = 1L;
         final List<GetValue> list = new ArrayList<>();
         GetValue getValue = mock(GetValue.class);

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/main/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperSyncDataService.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.Lists;
-import lombok.SneakyThrows;
 import org.I0Itec.zkclient.IZkDataListener;
 import org.I0Itec.zkclient.ZkClient;
 import org.apache.commons.collections4.CollectionUtils;
@@ -36,6 +35,7 @@
 import org.apache.shenyu.sync.data.api.PluginDataSubscriber;
 import org.apache.shenyu.sync.data.api.SyncDataService;
 
+import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
@@ -298,9 +298,8 @@ public void handleDataChange(final String dataPath, final Object data) {
                 cacheMetaData(GsonUtils.getInstance().fromJson(data.toString(), MetaData.class));
             }
 
-            @SneakyThrows
             @Override
-            public void handleDataDeleted(final String dataPath) {
+            public void handleDataDeleted(final String dataPath) throws UnsupportedEncodingException {
                 final String realPath = dataPath.substring(DefaultPathConstants.META_DATA.length() + 1);
                 MetaData metaData = new MetaData();
                 metaData.setPath(URLDecoder.decode(realPath, StandardCharsets.UTF_8.name()));

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AppAuthMapperTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.List;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.Assert.assertEquals;
@@ -134,7 +133,7 @@ public void testDelete() {
     }
 
     private AppAuthDO buildAppAuthDO() {
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         return AppAuthDO.builder()
                 .id(UUIDUtils.getInstance().generateShortUuid())
                 .appKey(SignUtils.getInstance().generateKey())

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AuthParamMapperTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.List;
 import static org.hamcrest.Matchers.comparesEqualTo;
@@ -104,7 +103,7 @@ public void testFindByAuthIdAndAppName() {
      * @return the auth param do
      */
     private AuthParamDO buildAuthParamDO() {
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         String id = UUIDUtils.getInstance().generateShortUuid();
         String authId = UUIDUtils.getInstance().generateShortUuid();
         return AuthParamDO.builder()

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/AuthPathMapperTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.List;
 import static org.hamcrest.Matchers.greaterThan;
@@ -99,7 +98,7 @@ public void deleteByAuthId() {
     }
 
     private AuthPathDO buildAuthPathDO() {
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         String id = UUIDUtils.getInstance().generateShortUuid();
         String authId = UUIDUtils.getInstance().generateShortUuid();
         return AuthPathDO.builder()

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DashboardUserMapperTest.java
Patch:
@@ -27,7 +27,6 @@
 
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.List;
 
 import static org.hamcrest.Matchers.comparesEqualTo;
@@ -164,7 +163,7 @@ private DashboardUserDO buildDashboardUserDO() {
         String aseKey = "2095132720951327";
         String iv = "6075877187097700";
 
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         return DashboardUserDO.builder()
                 .id(UUIDUtils.getInstance().generateShortUuid())
                 .userName("adminTest")

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/MetaDataMapperTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.List;
 import static org.hamcrest.Matchers.comparesEqualTo;
 import static org.junit.Assert.assertThat;
@@ -184,7 +183,7 @@ public void delete() {
     }
 
     private MetaDataDO getMetaDataDO() {
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         return MetaDataDO.builder()
                 .appName("testAppName")
                 .path("testPath")

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/PluginHandleMapperTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.List;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
@@ -167,7 +166,7 @@ public void delete() {
     private PluginHandleDO buildPluginHandleDO() {
         String id = UUIDUtils.getInstance().generateShortUuid();
         String pluginId = UUIDUtils.getInstance().generateShortUuid();
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         return PluginHandleDO.builder()
                 .id(id)
                 .pluginId(pluginId)

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/PluginMapperTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.admin.model.query.PluginQuery;
 import org.junit.Test;
 import javax.annotation.Resource;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
@@ -73,8 +73,8 @@ public void selectByNames() {
         final int insertResult = pluginMapper.insert(pluginDO);
         assertThat(insertResult, equalTo(1));
 
-        final List<PluginDO> resultPluginDOS = pluginMapper.selectByNames(Arrays.asList(pluginDO.getName()));
-        assertThat(pluginDO, equalTo(resultPluginDOS.stream().findAny().get()));
+        final List<PluginDO> resultPluginDOS = pluginMapper.selectByNames(Collections.singletonList(pluginDO.getName()));
+        assertThat(pluginDO, equalTo(resultPluginDOS.stream().findAny().orElse(null)));
 
         final int deleteResult = pluginMapper.delete(pluginDO.getId());
         assertThat(deleteResult, equalTo(1));

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RuleConditionMapperTest.java
Patch:
@@ -123,7 +123,7 @@ public void deleteByQuery() {
      * @return new ruleCondition
      */
     public RuleConditionDO buildRuleConditionDo() {
-        Timestamp currentTimeStamp = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp currentTimeStamp = new Timestamp(System.currentTimeMillis());
         return RuleConditionDO.builder()
                 .id(UUIDUtils.getInstance().generateShortUuid())
                 .ruleId(UUIDUtils.getInstance().generateShortUuid())

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/RuleMapperTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.List;
 import java.util.Random;
 import static org.hamcrest.Matchers.equalTo;
@@ -190,7 +189,7 @@ public void selectAll() {
     }
 
     private RuleDO buildRuleDO() {
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         String id = UUIDUtils.getInstance().generateShortUuid();
         return RuleDO.builder()
                 .id(id)

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorConditionMapperTest.java
Patch:
@@ -106,7 +106,8 @@ public void testDeleteByQuery() {
     }
 
     private SelectorConditionDO buildSelectorConditionDO() {
-        Timestamp currentTime = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp currentTime = new Timestamp(System.currentTimeMillis());
+
         return SelectorConditionDO.builder()
                 .id(UUIDUtils.getInstance().generateShortUuid())
                 .selectorId(UUIDUtils.getInstance().generateShortUuid())

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/SelectorMapperTest.java
Patch:
@@ -26,7 +26,6 @@
 
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
@@ -110,7 +109,7 @@ public void testCountByQuery() {
         SelectorQuery query = new SelectorQuery(selectorDO.getPluginId(), selectorDO.getName(), new PageParameter());
         Integer count = selectorMapper.countByQuery(query);
         assertNotNull(count);
-        assertEquals(new Integer(1), count);
+        assertEquals(Integer.valueOf(1), count);
 
         int delete = selectorMapper.delete(selectorDO.getId());
         assertEquals(1, delete);
@@ -200,7 +199,7 @@ public void testSelectAll() {
     }
 
     private SelectorDO buildSelectorDO() {
-        Timestamp currentTime = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp currentTime = new Timestamp(System.currentTimeMillis());
         return SelectorDO.builder()
                 .id(UUIDUtils.getInstance().generateShortUuid())
                 .dateCreated(currentTime)

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/ShenyuDictMapperTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.Test;
 import javax.annotation.Resource;
 import java.sql.Timestamp;
-import java.time.LocalDateTime;
 import java.util.List;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.Assert.assertThat;
@@ -63,7 +62,7 @@ public void testInsertAndUpdate() {
     }
 
     private ShenyuDictDO buildShenyuDictDO() {
-        Timestamp now = Timestamp.valueOf(LocalDateTime.now());
+        Timestamp now = new Timestamp(System.currentTimeMillis());
         String id = UUIDUtils.getInstance().generateShortUuid();
         return ShenyuDictDO.builder()
                 .id(id)

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/consumer/QueueConsumer.java
Patch:
@@ -49,6 +49,8 @@ public void onEvent(final DataEvent<T> t) {
         if (t != null) {
             QueueConsumerExecutor<T> queueConsumerExecutor = factory.create();
             queueConsumerExecutor.setData(t.getData());
+            // help gc
+            t.setData(null);
             executor.execute(queueConsumerExecutor);
         }
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/query/DataPermissionQuery.java
Patch:
@@ -31,14 +31,14 @@
 @AllArgsConstructor
 @NoArgsConstructor
 public class DataPermissionQuery implements Serializable {
+
     private static final long serialVersionUID = -2830562388349740181L;
 
     /**
      * user id.
      */
     private String userId;
 
-
     /**
      * page parameter.
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/DataPermissionPageVO.java
Patch:
@@ -51,7 +51,6 @@ public class DataPermissionPageVO implements Serializable {
      */
     private Boolean isChecked;
 
-
     /**
      * build vo by selector.
      * @param selectorDO {@linkplain SelectorDO}

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListenerTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.Test;
 import org.junit.platform.commons.util.StringUtils;
 import org.junit.runner.RunWith;
-import org.mapstruct.ap.shaded.freemarker.template.utility.StringUtil;
 import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.http.MediaType;
 import org.springframework.mock.web.MockHttpServletRequest;
@@ -121,7 +120,7 @@ public void testCompareChangedGroup() {
         assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D61,1607068123", this.httpServletRequest.getParameter(ConfigGroupEnum.SELECTOR.name()));
         assertEquals("F1887D3F9E6EE7A32FE5E76F4AB80D60,1607068122", this.httpServletRequest.getParameter(ConfigGroupEnum.META_DATA.name()));
         for (ConfigGroupEnum group : ConfigGroupEnum.values()) {
-            String[] params = StringUtil.split(Objects.requireNonNull(this.httpServletRequest.getParameter(group.name())), ',');
+            String[] params = Objects.requireNonNull(this.httpServletRequest.getParameter(group.name())).split(",");
             assertNotNull(params);
             assertEquals(2, params.length);
         }

File: shenyu-common/src/main/java/org/apache/shenyu/common/enums/AdminDataPermissionTypeEnum.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shenyu.common.enums;
 
-
 /**
  * The admin data permission type enum.
  *

File: shenyu-disruptor/src/main/java/org/apache/shenyu/disruptor/DisruptorProviderManage.java
Patch:
@@ -24,10 +24,10 @@
 import com.lmax.disruptor.dsl.ProducerType;
 import org.apache.shenyu.disruptor.consumer.QueueConsumer;
 import org.apache.shenyu.disruptor.consumer.QueueConsumerFactory;
-import org.apache.shenyu.disruptor.provider.DisruptorProvider;
-import org.apache.shenyu.disruptor.thread.DisruptorThreadFactory;
 import org.apache.shenyu.disruptor.event.DataEvent;
 import org.apache.shenyu.disruptor.event.DisruptorEventFactory;
+import org.apache.shenyu.disruptor.provider.DisruptorProvider;
+import org.apache.shenyu.disruptor.thread.DisruptorThreadFactory;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -116,7 +116,6 @@ public void startup() {
         provider = new DisruptorProvider<>(ringBuffer, disruptor);
     }
 
-
     /**
      * Gets provider.
      *

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/cache/ApplicationConfigCache.java
Patch:
@@ -181,7 +181,6 @@ public static String getClassMethodKey(final String className, final String meth
         return className + "_" + methodName;
     }
 
-
     /**
      * Gets instance.
      *

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -131,7 +131,7 @@ public ReferenceConfig<GenericService> initRef(final MetaData metaData) {
                 return referenceConfig;
             }
         } catch (ExecutionException e) {
-            log.error("init dubbo ref ex:{}", e.getMessage());
+            log.error("init dubbo ref exception", e);
         }
         return build(metaData);
 
@@ -171,11 +171,11 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
         try {
             Object obj = reference.get();
             if (obj != null) {
-                log.info("init alibaba dubbo reference success there meteData is :{}", metaData.toString());
+                log.info("init alibaba dubbo reference success there meteData is :{}", metaData);
                 cache.put(metaData.getPath(), reference);
             }
         } catch (Exception e) {
-            log.error("init alibaba dubbo refernce ex:{}", e.getMessage());
+            log.error("init alibaba dubbo refernce exception", e);
         }
 
         return reference;

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -131,7 +131,7 @@ public ReferenceConfig<GenericService> initRef(final MetaData metaData) {
                 return referenceConfig;
             }
         } catch (ExecutionException e) {
-            log.error("init dubbo ref ex:{}", e.getMessage());
+            log.error("init dubbo ref exception", e);
         }
         return build(metaData);
 
@@ -146,6 +146,7 @@ public ReferenceConfig<GenericService> initRef(final MetaData metaData) {
     public ReferenceConfig<GenericService> build(final MetaData metaData) {
         ReferenceConfig<GenericService> reference = new ReferenceConfig<>();
         reference.setGeneric("true");
+        reference.setAsync(true);
         reference.setApplication(applicationConfig);
         reference.setRegistry(registryConfig);
         reference.setInterface(metaData.getServiceName());
@@ -175,7 +176,7 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
                 cache.put(metaData.getPath(), reference);
             }
         } catch (Exception e) {
-            log.error("init apache dubbo reference ex:{}", e.getMessage());
+            log.error("init apache dubbo reference exception", e);
         }
         return reference;
     }

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/validation/ApacheDubboClientValidator.java
Patch:
@@ -79,10 +79,10 @@ public class ApacheDubboClientValidator implements Validator {
     @SuppressWarnings({"unchecked", "rawtypes"})
     public ApacheDubboClientValidator(final URL url) {
         this.clazz = ReflectUtils.forName(url.getServiceInterface());
-        String soulValidation = url.getParameter("soulValidation");
+        String shenyuValidation = url.getParameter("shenyuValidation");
         ValidatorFactory factory;
-        if (soulValidation != null && soulValidation.length() > 0) {
-            factory = Validation.byProvider((Class) ReflectUtils.forName(soulValidation)).configure().buildValidatorFactory();
+        if (shenyuValidation != null && shenyuValidation.length() > 0) {
+            factory = Validation.byProvider((Class) ReflectUtils.forName(shenyuValidation)).configure().buildValidatorFactory();
         } else {
             factory = Validation.buildDefaultValidatorFactory();
         }

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/fallback/FallbackHandlerTest.java
Patch:
@@ -53,9 +53,9 @@ public void setUp() {
         DispatcherHandler handler = mock(DispatcherHandler.class);
         when(context.getBean(DispatcherHandler.class)).thenReturn(handler);
         SpringBeanUtils.getInstance().setCfgContext(context);
-        this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/SOUL/SOUL")
+        this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/SHENYU/SHENYU")
                 .remoteAddress(new InetSocketAddress(8090))
-                .contextPath("/SOUL")
+                .contextPath("/SHENYU")
                 .build());
         when(handler.handle(any())).thenReturn(Mono.empty());
         this.testFallbackHandler = new TestFallbackHandler();

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/balance/spi/HashLoadBalance.java
Patch:
@@ -41,7 +41,7 @@ public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final St
         final ConcurrentSkipListMap<Long, DivideUpstream> treeMap = new ConcurrentSkipListMap<>();
         for (DivideUpstream address : upstreamList) {
             for (int i = 0; i < VIRTUAL_NODE_NUM; i++) {
-                long addressHash = hash("SOUL-" + address.getUpstreamUrl() + "-HASH-" + i);
+                long addressHash = hash("SHENYU-" + address.getUpstreamUrl() + "-HASH-" + i);
                 treeMap.put(addressHash, address);
             }
         }

File: shenyu-plugin/shenyu-plugin-divide/src/test/java/org/apache/shenyu/plugin/divide/balance/spi/HashLoadBalanceTest.java
Patch:
@@ -72,21 +72,21 @@ public void setUp() throws Exception {
         this.treeMapReversed = new ConcurrentSkipListMap<>();
         for (DivideUpstream address : hashLoadBalancesOrdered) {
             for (int i = 0; i < 5; i++) {
-                String hashKey = "SOUL-" + address.getUpstreamUrl() + "-HASH-" + i;
+                String hashKey = "SHENYU-" + address.getUpstreamUrl() + "-HASH-" + i;
                 Object o = hash.invoke(null, hashKey);
                 treeMapOrdered.put(Long.parseLong(o.toString()), address);
             }
         }
         for (DivideUpstream address : hashLoadBalancesReversed) {
             for (int i = 0; i < 5; i++) {
-                String hashKey = "SOUL-" + address.getUpstreamUrl() + "-HASH-" + i;
+                String hashKey = "SHENYU-" + address.getUpstreamUrl() + "-HASH-" + i;
                 Object o = hash.invoke(null, hashKey);
                 treeMapReversed.put(Long.parseLong(o.toString()), address);
             }
         }
         for (DivideUpstream address : hashLoadBalancesDisordered) {
             for (int i = 0; i < 5; i++) {
-                String hashKey = "SOUL-" + address.getUpstreamUrl() + "-HASH-" + i;
+                String hashKey = "SHENYU-" + address.getUpstreamUrl() + "-HASH-" + i;
                 Object o = hash.invoke(null, hashKey);
                 treeMapDisordered.put(Long.parseLong(o.toString()), address);
             }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/cache/GrpcClientCache.java
Patch:
@@ -56,7 +56,7 @@ public static void initGrpcClient(final String contextPath) {
      * Get the client.
      *
      * @param contextPath contextPath
-     * @return SoulGrpcClient  oulGrpcClient
+     * @return ShenyuGrpcClient shenyuGrpcClient
      */
     public static ShenyuGrpcClient getGrpcClient(final String contextPath) {
         return CLIENT_CACHE.get(contextPath);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/GrpcAttributeUtils.java
Patch:
@@ -25,7 +25,7 @@
 public class GrpcAttributeUtils {
 
     /**
-     * The soul instance appname.
+     * The instance appName.
      */
     private static Attributes.Key appName = Attributes.Key.create("appName");
 

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/strategy/FormDataOperatorTest.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() {
         ParamMappingHandle.ParamMapInfo add = new ParamMappingHandle.ParamMapInfo();
         add.setPath("$");
         add.setKey("webName");
-        add.setValue("SOUL");
+        add.setValue("SHENYU");
         ParamMappingHandle.ParamMapInfo replace = new ParamMappingHandle.ParamMapInfo();
         replace.setPath("$");
         replace.setKey("name");

File: shenyu-plugin/shenyu-plugin-param-mapping/src/test/java/org/apache/shenyu/plugin/param/mapping/strategy/JsonOperatorTest.java
Patch:
@@ -62,7 +62,7 @@ public void setUp() {
         ParamMappingHandle.ParamMapInfo add = new ParamMappingHandle.ParamMapInfo();
         add.setPath("$");
         add.setKey("webName");
-        add.setValue("SOUL");
+        add.setValue("SHENYU");
         ParamMappingHandle.ParamMapInfo replace = new ParamMappingHandle.ParamMapInfo();
         replace.setPath("$");
         replace.setKey("name");

File: shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/executor/CombinedExecutorTest.java
Patch:
@@ -62,7 +62,7 @@ public void normalTest() {
     @Test
     public void errorTest() {
         Resilience4JConf conf = mock(Resilience4JConf.class);
-        when(conf.getId()).thenReturn("SOUL");
+        when(conf.getId()).thenReturn("SHENYU");
         when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());
         when(conf.getTimeLimiterConfig()).thenReturn(TimeLimiterConfig.ofDefaults());
         when(conf.getCircuitBreakerConfig()).thenReturn(CircuitBreakerConfig.ofDefaults());

File: shenyu-plugin/shenyu-plugin-sign/src/test/java/org/apache/shenyu/plugin/sign/service/DefaultSignServiceTest.java
Patch:
@@ -63,7 +63,7 @@ public final class DefaultSignServiceTest {
 
     private ShenyuContext passed;
 
-    @Value("${soul.sign.delay:5}")
+    @Value("${shenyu.sign.delay:5}")
     private int delay;
 
     @Before

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -101,7 +101,7 @@ public void init(final SofaRegisterConfig sofaRegisterConfig) {
         if (registryConfig == null) {
             registryConfig = new RegistryConfig();
             registryConfig.setProtocol(sofaRegisterConfig.getProtocol());
-            registryConfig.setId("soul_proxy");
+            registryConfig.setId("shenyu_proxy");
             registryConfig.setRegister(false);
             registryConfig.setAddress(sofaRegisterConfig.getRegister());
         }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-jwt/src/main/java/org/apache/shenyu/springboot/starter/plugin/jwt/JwtPluginConfiguration.java
Patch:
@@ -31,9 +31,9 @@
 public class JwtPluginConfiguration {
 
     /**
-     * Jwt plugin soul plugin.
+     * Jwt plugin.
      *
-     * @return the soul plugin
+     * @return the JwtPlugin
      */
     @Bean
     public ShenyuPlugin jwtPlugin() {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/DashboardUserController.java
Patch:
@@ -107,7 +107,7 @@ public ShenyuAdminResult detailDashboardUser(@PathVariable("id") final String id
     @PostMapping("")
     public ShenyuAdminResult createDashboardUser(@Valid @RequestBody final DashboardUserDTO dashboardUserDTO) {
         String key = secretProperties.getKey();
-        String iv = secretProperties.getKey();
+        String iv = secretProperties.getIv();
         return Optional.ofNullable(dashboardUserDTO).map(item -> {
             item.setPassword(AesUtils.aesEncryption(item.getPassword(), key, iv));
             Integer createCount = dashboardUserService.createOrUpdate(item);

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-nacos/src/main/java/org/apache/shenyu/register/server/nacos/NacosServerRegisterRepository.java
Patch:
@@ -59,7 +59,7 @@ public class NacosServerRegisterRepository implements ShenyuServerRegisterReposi
 
     private static final List<RpcTypeEnum> RPC_URI_TYPE_SET = RpcTypeEnum.acquireSupportURIs();
 
-    private String defaultGroup = "default_group";
+    private final String defaultGroup = "default_group";
 
     private ConfigService configService;
 
@@ -155,7 +155,6 @@ public void receiveConfigInfo(final String config) {
         });
     }
 
-
     @SuppressWarnings("unchecked")
     private void registerMetadata(final String metadataConfig) {
         List<String> metadataList = GsonUtils.getInstance().fromJson(metadataConfig, List.class);

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/AppTest.java
Patch:
@@ -25,8 +25,9 @@
  * Unit test for simple App.
  */
 public class AppTest {
+
     /**
-     * Rigorous Test :-)
+     * Rigorous Test :-).
      */
     @Test
     public void shouldAnswerWithTrue() {

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/HelloWorldTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.shenyu.integratedtest.http;
 
 import org.apache.shenyu.integratedtest.http.dto.OrderDTO;
@@ -23,6 +24,7 @@
 import static org.junit.Assert.assertEquals;
 
 public class HelloWorldTest extends AbstractTest {
+
     @Test
     public void testHelloWorld() throws Exception {
         OrderDTO user = new OrderDTO("123", "Tom");

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/HttpRateLimitTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.shenyu.integratedtest.http;
 
 import com.google.gson.reflect.TypeToken;
@@ -30,10 +31,10 @@ public class HttpRateLimitTest extends AbstractTest {
 
     @Test
     public void testSlidingWindow() throws Exception {
-        Future<UserDTO> normalRespFuture = service.submit(() -> HttpHelper.INSTANCE.getFromGateway("/http/test/path/123?name=Tom", UserDTO.class));
+        Future<UserDTO> normalRespFuture = this.getService().submit(() -> HttpHelper.INSTANCE.getFromGateway("/http/test/path/123?name=Tom", UserDTO.class));
         assertEquals("hello world", normalRespFuture.get().getUserName());
 
-        Future<AdminResponse<Object>> rejectedRespFuture = service.submit(() ->
+        Future<AdminResponse<Object>> rejectedRespFuture = this.getService().submit(() ->
                 HttpHelper.INSTANCE.getFromGateway("/http/test/path/123?name=Tom", new TypeToken<AdminResponse<Object>>() {
                 }.getType()));
         AdminResponse<Object> dto = rejectedRespFuture.get();

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/SignTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.shenyu.integratedtest.http;
 
 import com.google.common.collect.Maps;

File: shenyu-integrated-test/shenyu-integrated-test-http/src/test/java/org/apache/shenyu/integratedtest/http/package-info.java
Patch:
@@ -14,7 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
- * put http specific tests here
+ * put http specific tests here.
  */
-package org.apache.shenyu.integratedtest.http;
\ No newline at end of file
+package org.apache.shenyu.integratedtest.http;

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/Constants.java
Patch:
@@ -376,7 +376,7 @@ public interface Constants {
     /**
      * default checked value.
      */
-    String DEFAULT_CHECK_VALUE = "true";
+    String DEFAULT_CHECK_VALUE = "false";
 
     /**
      * zombie check times.

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandler.java
Patch:
@@ -38,8 +38,8 @@ public class JwtPluginDataHandler implements PluginDataHandler {
     @Override
     public void handlerPlugin(final PluginData pluginData) {
         Map<String, String> configMap = GsonUtils.getInstance().toObjectMap(pluginData.getConfig(), String.class);
-        String secretKey = Optional.of(configMap.get(Constants.SECRET_KEY)).orElse("");
-        String filterPath = Optional.of(configMap.get(Constants.FILTER_PATH)).orElse("");
+        String secretKey = Optional.ofNullable(configMap.get(Constants.SECRET_KEY)).orElse("");
+        String filterPath = Optional.ofNullable(configMap.get(Constants.FILTER_PATH)).orElse("");
         JwtConfig jwtConfig = new JwtConfig();
         jwtConfig.setSecretKey(secretKey);
         jwtConfig.setFilterPath(Arrays.asList(StringUtils.split(filterPath, ",")));

File: shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/JwtPluginTest.java
Patch:
@@ -61,7 +61,7 @@ public void setUp() {
         SpringBeanUtils springBeanUtils = SpringBeanUtils.getInstance();
         springBeanUtils.setCfgContext(context);
         final PluginData pluginData =
-                new PluginData("pluginId", "pluginName", "{\"secretKey\":\"sinsy\",\"filterPath\":[\"/cloud/ecg/common\"]}", "0", false);
+                new PluginData("pluginId", "pluginName", "{\"secretKey\":\"sinsy\",\"filterPath\":\"/cloud/ecg/common,/cloud/ecg/selectAll\"}", "0", false);
         JwtPluginDataHandler jwtPluginDataHandler = new JwtPluginDataHandler();
         jwtPluginDataHandler.handlerPlugin(pluginData);
         exchange = MockServerWebExchange.from(MockServerHttpRequest.get("localhost").build());

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/SwaggerConfiguration.java
Patch:
@@ -78,7 +78,7 @@ private ApiInfo apiInfo() {
                 .title("Shenyu Admin API Document")
                 .description("")
                 .version(version)
-                .contact(new Contact("shenyu", "https://github.com/dromara/shenyu", ""))
+                .contact(new Contact("shenyu", "https://github.com/apache/incubator-shenyu", ""))
                 .build();
     }
 }

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -40,7 +40,6 @@
 import reactor.retry.Backoff;
 import reactor.retry.Retry;
 
-import java.net.URI;
 import java.time.Duration;
 import java.util.Objects;
 import java.util.Optional;
@@ -75,7 +74,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         int retryTimes = (int) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(0);
         log.info("The request urlPath is {}, retryTimes is {}", urlPath, retryTimes);
         HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue());
-        WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(URI.create(urlPath));
+        WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath);
         return handleRequestBody(requestBodySpec, exchange, timeout, retryTimes, chain);
     }
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -39,6 +39,8 @@
 import reactor.core.publisher.Mono;
 import reactor.retry.Backoff;
 import reactor.retry.Retry;
+
+import java.net.URI;
 import java.time.Duration;
 import java.util.Objects;
 import java.util.Optional;
@@ -73,7 +75,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
         int retryTimes = (int) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(0);
         log.info("The request urlPath is {}, retryTimes is {}", urlPath, retryTimes);
         HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue());
-        WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath);
+        WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(URI.create(urlPath));
         return handleRequestBody(requestBodySpec, exchange, timeout, retryTimes, chain);
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/SecretProperties.java
Patch:
@@ -32,4 +32,6 @@
 public class SecretProperties {
 
     private String key;
+
+    private String iv;
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -70,7 +70,7 @@ public final class DashboardUserControllerTest {
 
     private final DashboardUserVO dashboardUserVO = new DashboardUserVO("id",
             "userName",
-            "jHcpKkiDbbQh7W7hh8yQSA==",
+            "bbiB8zbUo3z3oA0VqEB/IA==",
             0,
             false,
             "dateCreated",
@@ -83,6 +83,7 @@ public final class DashboardUserControllerTest {
     public void setUp() throws Exception {
         final SecretProperties secretProperties = new SecretProperties();
         secretProperties.setKey("2095132720951327");
+        secretProperties.setIv("6075877187097700");
         ReflectionTestUtils.setField(dashboardUserController, "secretProperties", secretProperties);
         mockMvc = MockMvcBuilders.standaloneSetup(dashboardUserController).build();
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/DashboardUserServiceTest.java
Patch:
@@ -169,8 +169,10 @@ public void testLogin() {
 
         ReflectionTestUtils.setField(dashboardUserService, "secretProperties", secretProperties);
         DashboardUserDO dashboardUserDO = createDashboardUserDO();
-        String key = "key1234561234561";
+        String key = "2095132720951327";
+        String iv = "6075877187097700";
         when(secretProperties.getKey()).thenReturn(key, key);
+        when(secretProperties.getIv()).thenReturn(iv, iv);
         when(dashboardUserMapper.findByQuery(eq(TEST_USER_NAME), anyString())).thenReturn(null, dashboardUserDO, dashboardUserDO);
         given(dashboardUserMapper.updateSelective(any(DashboardUserDO.class))).willReturn(1);
 

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandle.java
Patch:
@@ -30,8 +30,6 @@ public class ContextMappingHandle implements RuleHandle {
 
     private static final long serialVersionUID = 4891655505357494670L;
 
-    private String realUrl;
-
     private String contextPath;
     
     private String addPrefix;

File: shenyu-plugin/shenyu-plugin-modify-response/src/main/java/org/apache/shenyu/plugin/modify/response/handler/ModifyResponsePluginDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.plugin.response.handler;
+package org.apache.shenyu.plugin.modify.response.handler;
 
 import org.apache.shenyu.common.dto.RuleData;
 import org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle;

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/cache/RuleHandleCache.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * The selector or rule handle base cache.
  */
-public abstract class BaseHandleCache<K, V> implements HandleCache<K, V> {
+public class RuleHandleCache<K, V> implements HandleCache<K, V> {
 
     /**
      * selectorId.ruleName -> handle.

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/cache/EmptyMockRuleHandleCache.java
Patch:
@@ -21,6 +21,6 @@
  * BaseHandleCache empty mock subclass.
  */
 
-class EmptyMockBaseHandleCache<K, V> extends BaseHandleCache<K, V> {
+class EmptyMockRuleHandleCache<K, V> extends RuleHandleCache<K, V> {
 
 }

File: shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/ContextPathPlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.context.path.cache.ContextPathRuleHandleCache;
+import org.apache.shenyu.plugin.context.path.handler.ContextPathPluginDataHandler;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -45,7 +45,7 @@ public class ContextPathPlugin extends AbstractShenyuPlugin {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
         ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
-        ContextMappingHandle contextMappingHandle = ContextPathRuleHandleCache.getInstance().obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        ContextMappingHandle contextMappingHandle = ContextPathPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(contextMappingHandle)) {
             log.error("context path rule configuration is null ：{}", rule);
             return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-context-path/src/test/java/org/apache/shenyu/plugin/context/path/ContextPathPluginTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.context.path.cache.ContextPathRuleHandleCache;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -40,6 +39,7 @@
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
+import static org.apache.shenyu.plugin.context.path.handler.ContextPathPluginDataHandler.CACHED_HANDLE;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -84,7 +84,7 @@ public void executeTest() {
         shenyuContext.setPath("/http/context/order/findById");
         ContextMappingHandle contextMappingHandle = new ContextMappingHandle();
         contextMappingHandle.setContextPath("/http/context");
-        ContextPathRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingHandle);
+        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingHandle);
         when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));
         contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);
         Assert.assertEquals(shenyuContext.getRealUrl(), "/order/findById");
@@ -99,7 +99,7 @@ public void executeRealPathTest() {
         ContextMappingHandle contextMappingHandle = new ContextMappingHandle();
         contextMappingHandle.setContextPath("/http/context");
         contextMappingHandle.setRealUrl("/findById");
-        ContextPathRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingHandle);
+        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingHandle);
         when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));
         contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);
         Assert.assertEquals(shenyuContext.getRealUrl(), "/findById");

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/cache/UpstreamCacheManager.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shenyu.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.UpstreamCheckUtils;
-import org.apache.shenyu.plugin.base.cache.BaseHandleCache;
+import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
 
 import java.util.List;
 import java.util.Map;
@@ -37,14 +37,14 @@
  * this is divide  http url upstream.
  */
 @Slf4j
-public final class UpstreamCacheManager extends BaseHandleCache<String, DivideRuleHandle> {
+public final class UpstreamCacheManager extends RuleHandleCache<String, DivideRuleHandle> {
 
     private static final UpstreamCacheManager INSTANCE = new UpstreamCacheManager();
 
     private static final Map<String, List<DivideUpstream>> UPSTREAM_MAP = Maps.newConcurrentMap();
 
     private static final Map<String, List<DivideUpstream>> UPSTREAM_MAP_TEMP = Maps.newConcurrentMap();
-    
+
     /**
      * suggest shenyu.upstream.scheduledTime set 1 SECONDS.
      */

File: shenyu-plugin/shenyu-plugin-hystrix/src/main/java/org/apache/shenyu/plugin/hystrix/HystrixPlugin.java
Patch:
@@ -31,10 +31,10 @@
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.hystrix.builder.HystrixBuilder;
-import org.apache.shenyu.plugin.hystrix.cache.HystrixRuleHandleCache;
 import org.apache.shenyu.plugin.hystrix.command.Command;
 import org.apache.shenyu.plugin.hystrix.command.HystrixCommand;
 import org.apache.shenyu.plugin.hystrix.command.HystrixCommandOnThread;
+import org.apache.shenyu.plugin.hystrix.handler.HystrixPluginDataHandler;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 import rx.Subscription;
@@ -51,8 +51,7 @@ public class HystrixPlugin extends AbstractShenyuPlugin {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
-        final HystrixHandle hystrixHandle = HystrixRuleHandleCache.getInstance()
-                .obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        final HystrixHandle hystrixHandle = HystrixPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (StringUtils.isBlank(hystrixHandle.getGroupKey())) {
             hystrixHandle.setGroupKey(Objects.requireNonNull(shenyuContext).getModule());
         }

File: shenyu-plugin/shenyu-plugin-param-mapping/src/main/java/org/apache/shenyu/plugin/param/mapping/strategy/Operator.java
Patch:
@@ -40,9 +40,7 @@ public interface Operator {
      * @param paramMappingHandle handle
      * @return mono
      */
-    default Mono<Void> apply(final ServerWebExchange exchange, final ShenyuPluginChain shenyuPluginChain, final ParamMappingHandle paramMappingHandle) {
-        return shenyuPluginChain.execute(exchange);
-    }
+    Mono<Void> apply(ServerWebExchange exchange, ShenyuPluginChain shenyuPluginChain, ParamMappingHandle paramMappingHandle);
 
     /**
      * Clean buffer.

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.ratelimiter.cache.RatelimiterRuleHandleCache;
 import org.apache.shenyu.plugin.ratelimiter.executor.RedisRateLimiter;
+import org.apache.shenyu.plugin.ratelimiter.handler.RateLimiterPluginDataHandler;
 import org.apache.shenyu.plugin.ratelimiter.resolver.RateLimiterKeyResolverFactory;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.server.ServerWebExchange;
@@ -64,7 +64,7 @@ public int getOrder() {
 
     @Override
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
-        RateLimiterHandle limiterHandle = RatelimiterRuleHandleCache.getInstance()
+        RateLimiterHandle limiterHandle = RateLimiterPluginDataHandler.CACHED_HANDLE.get()
                 .obtainHandle(CacheKeyUtils.INST.getKey(rule));
         String resolverKey = Optional.ofNullable(limiterHandle.getKeyResolverName())
                 .flatMap(name -> Optional.of("-" + RateLimiterKeyResolverFactory.newInstance(name).resolve(exchange)))

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.ratelimiter.cache.RatelimiterRuleHandleCache;
 import org.apache.shenyu.plugin.ratelimiter.executor.RedisRateLimiter;
+import org.apache.shenyu.plugin.ratelimiter.handler.RateLimiterPluginDataHandler;
 import org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse;
 import org.junit.Assert;
 import org.junit.Before;
@@ -125,7 +125,7 @@ public void getOrderTest() {
     private void doExecutePreInit() {
         RateLimiterHandle rateLimiterHandle = mockRateLimiterHandler();
         when(chain.execute(any())).thenReturn(Mono.empty());
-        RatelimiterRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), rateLimiterHandle);
+        RateLimiterPluginDataHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), rateLimiterHandle);
     }
 
     /**

File: shenyu-plugin/shenyu-plugin-redirect/src/main/java/org/apache/shenyu/plugin/redirect/RedirectPlugin.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.base.utils.UriUtils;
-import org.apache.shenyu.plugin.redirect.cache.RedirectRuleHandleCache;
+import org.apache.shenyu.plugin.redirect.handler.RedirectPluginDataHandler;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.server.reactive.ServerHttpRequest;
@@ -66,7 +66,7 @@ public String named() {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain,
                                    final SelectorData selector, final RuleData rule) {
         final String handle = rule.getHandle();
-        final RedirectHandle redirectHandle = RedirectRuleHandleCache.getInstance()
+        final RedirectHandle redirectHandle = RedirectPluginDataHandler.CACHED_HANDLE.get()
                 .obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(redirectHandle) || StringUtils.isBlank(redirectHandle.getRedirectURI())) {
             log.error("uri redirect rule can not configuration: {}", handle);

File: shenyu-plugin/shenyu-plugin-redirect/src/test/java/org/apache/shenyu/plugin/redirect/RedirectPluginTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.redirect.cache.RedirectRuleHandleCache;
+import org.apache.shenyu.plugin.redirect.handler.RedirectPluginDataHandler;
 import org.hamcrest.Matchers;
 import org.junit.Before;
 import org.junit.Test;
@@ -73,11 +73,11 @@ public void testRedirectPlugin() {
         ruleData.setHandle("{\"redirectURI\":\"/test\"}");
         RedirectHandle redirectHandle = new RedirectHandle();
         redirectHandle.setRedirectURI("/test");
-        RedirectRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), redirectHandle);
+        RedirectPluginDataHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), redirectHandle);
         when(dispatcherHandler.handle(any())).thenReturn(Mono.empty());
         StepVerifier.create(redirectPlugin.doExecute(exchange, chain, selectorData, ruleData)).expectSubscription().verifyComplete();
         redirectHandle.setRedirectURI("http://test.com/test");
-        RedirectRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), redirectHandle);
+        RedirectPluginDataHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), redirectHandle);
         ruleData.setHandle("{\"redirectURI\":\"http://test.com/test\"}");
         StepVerifier.create(redirectPlugin.doExecute(exchange, chain, selectorData, ruleData)).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-request/src/main/java/org/apache/shenyu/plugin/request/RequestPlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.request.cache.RequestRuleHandleCache;
+import org.apache.shenyu.plugin.request.handler.RequestPluginHandler;
 import org.springframework.http.HttpCookie;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.server.reactive.ServerHttpRequest;
@@ -55,7 +55,7 @@ public class RequestPlugin extends AbstractShenyuPlugin {
     @Override
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector,
             final RuleData rule) {
-        RequestHandle requestHandle = RequestRuleHandleCache.getInstance().obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        RequestHandle requestHandle = RequestPluginHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(requestHandle) || requestHandle.isEmptyConfig()) {
             log.error("request handler can not configuration：{}", requestHandle);
             return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/Resilience4JPlugin.java
Patch:
@@ -27,11 +27,11 @@
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.resilience4j.build.Resilience4JBuilder;
-import org.apache.shenyu.plugin.resilience4j.cache.Resilience4jRuleHandleCache;
 import org.apache.shenyu.plugin.resilience4j.conf.Resilience4JConf;
 import org.apache.shenyu.plugin.resilience4j.executor.CombinedExecutor;
 import org.apache.shenyu.plugin.resilience4j.executor.Executor;
 import org.apache.shenyu.plugin.resilience4j.executor.RateLimiterExecutor;
+import org.apache.shenyu.plugin.resilience4j.handler.Resilience4JHandler;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.client.HttpStatusCodeException;
 import org.springframework.web.server.ServerWebExchange;
@@ -58,7 +58,7 @@ public Resilience4JPlugin(final CombinedExecutor combinedExecutor,
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
         final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);
         assert shenyuContext != null;
-        Resilience4JHandle resilience4JHandle = Resilience4jRuleHandleCache.getInstance().obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        Resilience4JHandle resilience4JHandle = Resilience4JHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         resilience4JHandle.checkData(resilience4JHandle);
         if (resilience4JHandle.getCircuitEnable() == 1) {
             return combined(exchange, chain, rule);

File: shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.rewrite.cache.RewriteRuleHandleCache;
+import org.apache.shenyu.plugin.rewrite.handler.RewritePluginDataHandler;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -44,7 +44,7 @@ public class RewritePlugin extends AbstractShenyuPlugin {
     @Override
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {
         String handle = rule.getHandle();
-        final RewriteHandle rewriteHandle = RewriteRuleHandleCache.getInstance()
+        final RewriteHandle rewriteHandle = RewritePluginDataHandler.CACHED_HANDLE.get()
                 .obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(rewriteHandle) || StringUtils.isBlank(rewriteHandle.getRewriteURI())) {
             log.error("uri rewrite rule can not configuration：{}", handle);

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/cache/SpringCloudRuleHandleCache.java
Patch:
@@ -19,13 +19,13 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.convert.rule.impl.SpringCloudRuleHandle;
-import org.apache.shenyu.plugin.base.cache.BaseHandleCache;
+import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
 
 /**
  * The rule handle cache.
  */
 @Slf4j
-public final class SpringCloudRuleHandleCache extends BaseHandleCache<String, SpringCloudRuleHandle> {
+public final class SpringCloudRuleHandleCache extends RuleHandleCache<String, SpringCloudRuleHandle> {
 
     private SpringCloudRuleHandleCache() {
     }

File: shenyu-plugin/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/cache/SpringCloudSelectorHandleCache.java
Patch:
@@ -19,13 +19,13 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shenyu.common.dto.convert.selector.SpringCloudSelectorHandle;
-import org.apache.shenyu.plugin.base.cache.BaseHandleCache;
+import org.apache.shenyu.plugin.base.cache.RuleHandleCache;
 
 /**
  * The spring cloud selector handle cache.
  */
 @Slf4j
-public final class SpringCloudSelectorHandleCache extends BaseHandleCache<String, SpringCloudSelectorHandle> {
+public final class SpringCloudSelectorHandleCache extends RuleHandleCache<String, SpringCloudSelectorHandle> {
 
     private SpringCloudSelectorHandleCache() {
     }

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/WafPlugin.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.shenyu.plugin.base.AbstractShenyuPlugin;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.base.utils.Singleton;
-import org.apache.shenyu.plugin.waf.cache.WafRuleHandleCache;
 import org.apache.shenyu.plugin.waf.config.WafConfig;
+import org.apache.shenyu.plugin.waf.handler.WafPluginDataHandler;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
@@ -58,7 +58,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             return WebFluxResultUtils.result(exchange, error);
         }
         String handle = rule.getHandle();
-        WafHandle wafHandle = WafRuleHandleCache.getInstance().obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        WafHandle wafHandle = WafPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(wafHandle) || StringUtils.isBlank(wafHandle.getPermission())) {
             log.error("waf handler can not configuration：{}", handle);
             return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/WafPluginTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResult;
 import org.apache.shenyu.plugin.api.utils.SpringBeanUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
-import org.apache.shenyu.plugin.waf.cache.WafRuleHandleCache;
 import org.apache.shenyu.plugin.waf.handler.WafPluginDataHandler;
 import org.junit.Before;
 import org.junit.Test;
@@ -117,7 +116,7 @@ public void testWafPluginReject() {
         ruleData.setId("waf");
         ruleData.setSelectorId("waf");
         WafHandle handle = GsonUtils.getGson().fromJson("{\"permission\":\"reject\",\"statusCode\":\"0\"}", WafHandle.class);
-        WafRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), handle);
+        WafPluginDataHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), handle);
         Mono<Void> execute = wafPluginUnderTest.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(execute).expectSubscription().verifyComplete();
     }
@@ -127,7 +126,7 @@ public void testWafPluginAllow() {
         ruleData.setId("waf");
         ruleData.setSelectorId("waf");
         WafHandle handle = GsonUtils.getGson().fromJson("{\"permission\":\"allow\",\"statusCode\":\"0\"}", WafHandle.class);
-        WafRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), handle);
+        WafPluginDataHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), handle);
         Mono<Void> execute = wafPluginUnderTest.doExecute(exchange, chain, selectorData, ruleData);
         StepVerifier.create(execute).expectSubscription().verifyComplete();
     }

File: shenyu-plugin/shenyu-plugin-waf/src/test/java/org/apache/shenyu/plugin/waf/handler/WafPluginDataHandlerTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.plugin.base.utils.CacheKeyUtils;
 import org.apache.shenyu.plugin.base.utils.Singleton;
-import org.apache.shenyu.plugin.waf.cache.WafRuleHandleCache;
 import org.apache.shenyu.plugin.waf.config.WafConfig;
 import org.junit.Before;
 import org.junit.Test;
@@ -62,9 +61,9 @@ public void testHandlerRule() {
         wafHandle.setStatusCode("0");
         ruleData.setHandle(GsonUtils.getGson().toJson(wafHandle));
         wafPluginDataHandlerUnderTest.handlerRule(ruleData);
-        assertEquals(wafHandle.getPermission(), WafRuleHandleCache.getInstance().obtainHandle(CacheKeyUtils.INST.getKey(ruleData)).getPermission());
+        assertEquals(wafHandle.getPermission(), WafPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(ruleData)).getPermission());
         wafPluginDataHandlerUnderTest.removeRule(ruleData);
-        assertNull(WafRuleHandleCache.getInstance().obtainHandle(CacheKeyUtils.INST.getKey(ruleData)));
+        assertNull(WafPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(ruleData)));
     }
 
     @Test

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-rewrite/src/main/java/org/apache/shenyu/springboot/starter/plugin/rewrite/RewritePluginConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public ShenyuPlugin rewritePlugin() {
      * @return the plugin data handler
      */
     @Bean
-    public PluginDataHandler redirectPluginDataHandler() {
+    public PluginDataHandler rewritePluginDataHandler() {
         return new RewritePluginDataHandler();
     }
 }

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -51,7 +51,6 @@ public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPlugin
                 Object error = ShenyuResultWrap.error(ShenyuResultEnum.SERVICE_TIMEOUT.getCode(), ShenyuResultEnum.SERVICE_TIMEOUT.getMsg(), null);
                 return WebFluxResultUtils.result(exchange, error);
             }
-            response.setStatusCode(clientResponse.statusCode());
             response.getCookies().putAll(clientResponse.cookies());
             response.getHeaders().putAll(clientResponse.headers().asHttpHeaders());
             return response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers())).doOnCancel(() -> clean(exchange));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/DataBaseProperties.java
Patch:
@@ -35,7 +35,5 @@ public class DataBaseProperties {
 
     private String initScript;
 
-    private String customInitScript;
-
     private Boolean initEnable;
 }

File: shenyu-client/shenyu-client-http/shenyu-client-springmvc/src/main/java/org/apache/shenyu/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -46,7 +46,7 @@
 @Slf4j
 public class SpringMvcClientBeanPostProcessor implements BeanPostProcessor {
 
-    private ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
+    private final ShenyuClientRegisterEventPublisher publisher = ShenyuClientRegisterEventPublisher.getInstance();
 
     private final ExecutorService executorService;
 

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -104,7 +104,7 @@ private MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean<?> serviceBean, f
         String path = contextPath + shenyuDubboClient.path();
         String desc = shenyuDubboClient.desc();
         String serviceName = serviceBean.getInterface();
-        String host = StringUtils.isBlank(this.host) ? IpUtils.getHost() : this.host;
+        String host = IpUtils.isCompleteHost(this.host) ? this.host : IpUtils.getHost(this.host);
         int port = StringUtils.isBlank(this.port) ? -1 : Integer.parseInt(this.port);
         String configRuleName = shenyuDubboClient.ruleName();
         String ruleName = ("".equals(configRuleName)) ? path : configRuleName;

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -104,7 +104,7 @@ private MetaDataRegisterDTO buildMetaDataDTO(final ServiceBean serviceBean, fina
         String path = contextPath + shenyuDubboClient.path();
         String desc = shenyuDubboClient.desc();
         String serviceName = serviceBean.getInterface();
-        String host = StringUtils.isBlank(this.host) ? IpUtils.getHost() : this.host;
+        String host = IpUtils.isCompleteHost(this.host) ? this.host : IpUtils.getHost(this.host);
         int port = StringUtils.isBlank(this.port) ? -1 : Integer.parseInt(this.port);
         String configRuleName = shenyuDubboClient.ruleName();
         String ruleName = ("".equals(configRuleName)) ? path : configRuleName;

File: shenyu-client/shenyu-client-motan/src/main/java/org/apache/shenyu/client/motan/MotanServiceBeanPostProcessor.java
Patch:
@@ -125,8 +125,7 @@ private MetaDataRegisterDTO buildMetaDataDTO(final Class<?> clazz, final MotanSe
         String appName = this.appName;
         String path = this.contextPath + shenyuMotanClient.path();
         String desc = shenyuMotanClient.desc();
-        String configHost = this.host;
-        String host = StringUtils.isBlank(configHost) ? IpUtils.getHost() : configHost;
+        String host = IpUtils.isCompleteHost(this.host) ? this.host : IpUtils.getHost(this.host);
         int port = StringUtils.isBlank(this.port) ? -1 : Integer.parseInt(this.port);
         String configRuleName = shenyuMotanClient.ruleName();
         String ruleName = ("".equals(configRuleName)) ? path : configRuleName;

File: shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceBeanPostProcessor.java
Patch:
@@ -114,7 +114,7 @@ private MetaDataRegisterDTO buildMetaDataDTO(final ServiceFactoryBean serviceBea
         String path = contextPath + shenyuSofaClient.path();
         String desc = shenyuSofaClient.desc();
         String serviceName = serviceBean.getInterfaceClass().getName();
-        String host = StringUtils.isBlank(this.host) ? IpUtils.getHost() : this.host;
+        String host = IpUtils.isCompleteHost(this.host) ? this.host : IpUtils.getHost(this.host);
         int port = StringUtils.isBlank(this.port) ? -1 : Integer.parseInt(this.port);
         String configRuleName = shenyuSofaClient.ruleName();
         String ruleName = ("".equals(configRuleName)) ? path : configRuleName;

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -109,8 +109,7 @@ private MetaDataRegisterDTO buildMetaDataDTO(final String serviceName, final She
         String ipAndPort = this.ipAndPort;
         String path = this.contextPath + shenyuTarsClient.path();
         String desc = shenyuTarsClient.desc();
-        String configHost = this.host;
-        String host = StringUtils.isBlank(configHost) ? IpUtils.getHost() : configHost;
+        String host = IpUtils.isCompleteHost(this.host) ? this.host : IpUtils.getHost(this.host);
         String configRuleName = shenyuTarsClient.ruleName();
         String ruleName = ("".equals(configRuleName)) ? path : configRuleName;
         String methodName = method.getName();

File: shenyu-register-center/shenyu-register-server/shenyu-register-server-zookeeper/src/main/java/org/apache/shenyu/register/server/zookeeper/ZookeeperServerRegisterRepository.java
Patch:
@@ -55,7 +55,7 @@ public void init(final ShenyuServerRegisterPublisher publisher, final ShenyuRegi
         this.init(config);
         this.publisher = publisher;
         Properties props = config.getProps();
-        int zookeeperSessionTimeout = Integer.parseInt(props.getProperty("zookeeperSessionTimeout", "3000"));
+        int zookeeperSessionTimeout = Integer.parseInt(props.getProperty("zookeeperSessionTimeout", "30000"));
         int zookeeperConnectionTimeout = Integer.parseInt(props.getProperty("zookeeperConnectionTimeout", "3000"));
         this.zkClient = new ZkClient(config.getServerLists(), zookeeperSessionTimeout, zookeeperConnectionTimeout);
         initSubscribe();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -141,7 +141,7 @@ private void registerContextPathPlugin(final String contextPath) {
             String contextPathSelectorId = registerContextPathSelector(contextPath, name);
             ruleService.register(registerRule(contextPathSelectorId, contextPath + "/**", PluginEnum.CONTEXT_PATH.getName(), name),
                     name,
-                    true);
+                    false);
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringMVCServiceImpl.java
Patch:
@@ -127,7 +127,7 @@ private void registerContextPathPlugin(final String contextPath) {
             String contextPathSelectorId = registerContextPathSelector(contextPath, name);
             ruleService.register(registerRule(contextPathSelectorId, contextPath + "/**", PluginEnum.CONTEXT_PATH.getName(), name),
                     name,
-                    true);
+                    false);
         }
     }
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterDubboServiceImpl.java
Patch:
@@ -82,6 +82,6 @@ public String handlerSelector(final MetaDataRegisterDTO metaDataDTO) {
     @Override
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO metaDataDTO, final MetaDataDO exist) {
         ruleService.register(registerRule(selectorId, metaDataDTO.getPath(), PluginEnum.DUBBO.getName(), metaDataDTO.getRuleName()),
-                metaDataDTO.getPath(), Objects.isNull(exist));
+                metaDataDTO.getPath(), false);
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java
Patch:
@@ -131,7 +131,7 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO dto, final MetaDataDO exist) {
         ruleService.register(registerRule(selectorId, dto.getPath(), PluginEnum.SPRING_CLOUD.getName(), dto.getRuleName()),
                 dto.getRuleName(),
-                Objects.isNull(exist));
+                false);
     }
 
     private void registerContextPathPlugin(final String contextPath) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringMVCServiceImpl.java
Patch:
@@ -117,7 +117,7 @@ public String handlerSelector(final MetaDataRegisterDTO dto) {
     public void handlerRule(final String selectorId, final MetaDataRegisterDTO dto, final MetaDataDO exist) {
         ruleService.register(registerRule(selectorId, dto.getPath(), PluginEnum.DIVIDE.getName(), dto.getRuleName()),
                 dto.getRuleName(),
-                Objects.isNull(exist));
+                false);
     }
 
     private void registerContextPathPlugin(final String contextPath) {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/ShenyuClientRegisterService.java
Patch:
@@ -23,7 +23,9 @@
 
 /**
  * The interface shenyu client service.
+ * @deprecated {@link org.apache.shenyu.admin.service.register.ShenyuClientRegisterServiceFactory}
  */
+@Deprecated
 public interface ShenyuClientRegisterService {
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ShenyuClientRegisterServiceImpl.java
Patch:
@@ -485,7 +485,7 @@ private void registerRule(final String selectorId, final String path, final Stri
             ruleConditionDTO.setOperator(OperatorEnum.EQ.getAlias());
         }
         ruleDTO.setRuleConditions(Collections.singletonList(ruleConditionDTO));
-        ruleService.register(ruleDTO);
+        ruleService.register(ruleDTO, ruleName, false);
     }
 
     @Override

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/RuleServiceTest.java
Patch:
@@ -213,14 +213,14 @@ private void publishEvent() {
     private void testRegisterCreate() {
         RuleDTO ruleDTO = buildRuleDTO("");
         RuleDO ruleDO = RuleDO.buildRuleDO(ruleDTO);
-        String ruleId = this.ruleService.register(ruleDTO);
+        String ruleId = this.ruleService.register(ruleDTO, ruleDTO.getName(), false);
         assertNotNull(ruleId);
         assertEquals(ruleId.length(), ruleDO.getId().length());
     }
 
     private void testRegisterUpdate() {
         RuleDTO ruleDTO = buildRuleDTO("123");
-        String ruleId = this.ruleService.register(ruleDTO);
+        String ruleId = this.ruleService.register(ruleDTO, ruleDTO.getName(), false);
         assertNotNull(ruleId);
         assertEquals(ruleId, ruleDTO.getId());
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/IndexController.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.RequestMapping;
 
-
 /**
  * The type Index controller.
  */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEvent.java
Patch:
@@ -33,9 +33,9 @@ public class DataChangedEvent extends ApplicationEvent {
 
     private static final long serialVersionUID = 8397163004365988739L;
 
-    private DataEventTypeEnum eventType;
+    private final DataEventTypeEnum eventType;
 
-    private ConfigGroupEnum groupKey;
+    private final ConfigGroupEnum groupKey;
 
     /**
      * Instantiates a new Data changed event.

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/DataChangedEventDispatcher.java
Patch:
@@ -38,7 +38,7 @@
 @Component
 public class DataChangedEventDispatcher implements ApplicationListener<DataChangedEvent>, InitializingBean {
 
-    private ApplicationContext applicationContext;
+    private final ApplicationContext applicationContext;
 
     private List<DataChangedListener> listeners;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/DashboardUserDTO.java
Patch:
@@ -22,6 +22,7 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.List;
 
@@ -44,6 +45,7 @@ public class DashboardUserDTO implements Serializable {
     /**
      * user name.
      */
+    @NotNull
     private String userName;
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/MetaDataDTO.java
Patch:
@@ -20,6 +20,7 @@
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 
+import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 
 @Data
@@ -30,6 +31,7 @@ public class MetaDataDTO implements Serializable {
 
     private String id;
 
+    @NotNull
     private String appName;
 
     private String contextPath;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/RoleDTO.java
Patch:
@@ -22,6 +22,7 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.List;
 
@@ -44,6 +45,7 @@ public class RoleDTO implements Serializable {
     /**
      * role name.
      */
+    @NotNull
     private String roleName;
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/EnumServiceImpl.java
Patch:
@@ -41,9 +41,9 @@
 import java.util.stream.Collectors;
 
 /**
- * EnumServiceImpl.
+ * Implementation of the {@link org.apache.shenyu.admin.service.EnumService}.
  */
-@Service("enumService")
+@Service
 public class EnumServiceImpl implements EnumService {
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -45,7 +45,6 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.UpstreamCheckUtils;
 import org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.stereotype.Component;
 
@@ -60,7 +59,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * this is divide  http url upstream.
+ * This is the upstream check service.
  */
 @Slf4j
 @Component
@@ -95,7 +94,6 @@ public class UpstreamCheckService {
      * @param selectorConditionMapper    the selectorCondition mapper
      * @param shenyuRegisterCenterConfig the shenyu register center config
      */
-    @Autowired(required = false)
     public UpstreamCheckService(final SelectorMapper selectorMapper, final ApplicationEventPublisher eventPublisher,
                                 final PluginMapper pluginMapper, final SelectorConditionMapper selectorConditionMapper,
                                 final ShenyuRegisterCenterConfig shenyuRegisterCenterConfig) {

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/EnumServiceTest.java
Patch:
@@ -27,11 +27,12 @@
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.Matchers.comparesEqualTo;
 import static org.hamcrest.number.OrderingComparison.greaterThan;
-import static org.junit.Assert.assertThat;
 
 /**
  * Test cases for EnumService.

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java
Patch:
@@ -64,7 +64,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
         if (!checkMetaData(metaData)) {
             assert metaData != null;
-            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData.toString());
+            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPlugin.java
Patch:
@@ -63,7 +63,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
         if (!checkMetaData(metaData)) {
             assert metaData != null;
-            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData.toString());
+            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -173,7 +173,7 @@ public ReferenceConfig<GenericService> build(final MetaData metaData) {
         try {
             Object obj = reference.get();
             if (obj != null) {
-                log.info("init apache dubbo reference success there meteData is :{}", metaData.toString());
+                log.info("init apache dubbo reference success there meteData is :{}", metaData);
                 cache.put(metaData.getPath(), reference);
             }
         } catch (Exception e) {

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/DividePlugin.java
Patch:
@@ -74,7 +74,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         }
         List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId());
         if (CollectionUtils.isEmpty(upstreamList)) {
-            log.error("divide upstream configuration error： {}", rule.toString());
+            log.error("divide upstream configuration error： {}", rule);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.CANNOT_FIND_URL.getCode(), ShenyuResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -62,7 +62,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
         if (!checkMetaData(metaData)) {
             assert metaData != null;
-            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData.toString());
+            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/MotanPlugin.java
Patch:
@@ -64,7 +64,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
         if (!checkMetaData(metaData)) {
             assert metaData != null;
-            log.error("path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData.toString());
+            log.error("path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-motan/src/main/java/org/apache/shenyu/plugin/motan/cache/ApplicationConfigCache.java
Patch:
@@ -181,7 +181,7 @@ public RefererConfig<CommonHandler> build(final MetaData metaData) {
         reference.setProtocol(protocolConfig);
         CommonHandler obj = reference.getRef();
         if (obj != null) {
-            log.info("init motan reference success there meteData is :{}", metaData.toString());
+            log.info("init motan reference success there meteData is :{}", metaData);
             cache.put(metaData.getPath(), reference);
         }
         return reference;

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/SofaPlugin.java
Patch:
@@ -63,7 +63,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
         if (!checkMetaData(metaData)) {
             assert metaData != null;
-            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData.toString());
+            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -153,7 +153,7 @@ public ConsumerConfig<GenericService> build(final MetaData metaData) {
         }
         Object obj = reference.refer();
         if (obj != null) {
-            log.info("init sofa reference success there meteData is :{}", metaData.toString());
+            log.info("init sofa reference success there meteData is :{}", metaData);
             cache.put(metaData.getPath(), reference);
         }
         return reference;

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -62,7 +62,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         MetaData metaData = exchange.getAttribute(Constants.META_DATA);
         if (!checkMetaData(metaData)) {
             assert metaData != null;
-            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData.toString());
+            log.error(" path is :{}, meta data have error.... {}", shenyuContext.getPath(), metaData);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: shenyu-plugin/shenyu-plugin-tars/src/test/java/org/apache/shenyu/plugin/tars/util/PrxInfoUtilTest.java
Patch:
@@ -43,7 +43,6 @@ public void testGetParamClass() throws Exception {
         assertEquals(Integer.class, PrxInfoUtil.getParamClass("java.lang.Integer"));
     }
 
-    @SuppressWarnings("ResultOfMethodCallIgnored")
     @Test(expected = ClassNotFoundException.class)
     public void testGetParamClassThrowsClassNotFoundException() throws Exception {
         PrxInfoUtil.getParamClass("className");

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-zookeeper/src/main/java/org/apache/shenyu/register/client/zookeeper/ZookeeperClientRegisterRepository.java
Patch:
@@ -62,7 +62,7 @@ public void persistInterface(final MetaDataRegisterDTO metadata) {
         if (RpcTypeEnum.HTTP.getName().equals(rpcType) || RpcTypeEnum.TARS.getName().equals(rpcType) || RpcTypeEnum.GRPC.getName().equals(rpcType)) {
             registerURI(rpcType, contextPath, metadata);
         }
-        log.info("{} zookeeper client register success: {}", rpcType, metadata.toString());
+        log.info("{} zookeeper client register success: {}", rpcType, metadata);
     }
 
     @Override

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/support/BodyInserterContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shenyu.web.filter.support;
+package org.apache.shenyu.plugin.base.support;
 
 import org.springframework.http.codec.HttpMessageWriter;
 import org.springframework.http.server.reactive.ServerHttpRequest;

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/FileSizeFilter.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shenyu.plugin.api.result.ShenyuResultEnum;
 import org.apache.shenyu.plugin.api.result.ShenyuResultWrap;
 import org.apache.shenyu.plugin.api.utils.WebFluxResultUtils;
-import org.apache.shenyu.web.filter.support.BodyInserterContext;
-import org.apache.shenyu.web.filter.support.CachedBodyOutputMessage;
+import org.apache.shenyu.plugin.base.support.BodyInserterContext;
+import org.apache.shenyu.plugin.base.support.CachedBodyOutputMessage;
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
@@ -50,7 +50,7 @@
 public class FileSizeFilter implements WebFilter {
 
     private static final int BYTES_PER_MB = 1024 * 1024;
-    
+
     private final int fileMaxSize;
 
     private final List<HttpMessageReader<?>> messageReaders;

File: shenyu-protocol/shenyu-protocol-grpc/src/main/java/org/apache/shenyu/protocol/grpc/message/JsonMessage.java
Patch:
@@ -97,7 +97,6 @@ public static List<DynamicMessage> buildJsonMessageList(final Map<String, Object
      * @return DynamicMessage
      */
     public static DynamicMessage buildJsonMessage(final String jsonParam) {
-
         // build Descriptor and set request param
         Descriptors.Descriptor jsonDescriptor = buildJsonMarshallerDescriptor();
         DynamicMessage.Builder jsonDynamicMessage = DynamicMessage.newBuilder(jsonDescriptor);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -86,7 +86,7 @@ public AppAuthServiceImpl(final AppAuthMapper appAuthMapper,
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public ShenyuAdminResult applyCreate(final AuthApplyDTO authApplyDTO) {
         if (StringUtils.isBlank(authApplyDTO.getAppName())
                 || (authApplyDTO.getOpen() && CollectionUtils.isEmpty(authApplyDTO.getPathList()))) {
@@ -162,7 +162,7 @@ public ShenyuAdminResult applyUpdate(final AuthApplyDTO authApplyDTO) {
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public ShenyuAdminResult updateDetail(final AppAuthDTO appAuthDTO) {
         if (StringUtils.isBlank(appAuthDTO.getAppKey())
                 || StringUtils.isBlank(appAuthDTO.getAppSecret())

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/MetaDataServiceImpl.java
Patch:
@@ -103,7 +103,7 @@ public String createOrUpdate(final MetaDataDTO metaDataDTO) {
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public int delete(final List<String> ids) {
         int count = 0;
         List<MetaData> metaDataList = Lists.newArrayList();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ShenyuClientRegisterServiceImpl.java
Patch:
@@ -119,7 +119,7 @@ public ShenyuClientRegisterServiceImpl(final MetaDataMapper metaDataMapper,
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public synchronized String registerSpringMvc(final MetaDataRegisterDTO dto) {
         if (dto.isRegisterMetaData()) {
             MetaDataDO exist = metaDataMapper.findByPath(dto.getPath());
@@ -138,7 +138,7 @@ public synchronized String registerSpringMvc(final MetaDataRegisterDTO dto) {
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public synchronized String registerSpringCloud(final MetaDataRegisterDTO dto) {
         MetaDataDO metaDataDO = metaDataMapper.findByPath(dto.getContextPath() + "/**");
         if (Objects.isNull(metaDataDO)) {
@@ -167,7 +167,7 @@ private void registerContextPathPlugin(final String contextPath) {
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public synchronized String registerDubbo(final MetaDataRegisterDTO dto) {
         MetaDataDO exist = metaDataMapper.findByPath(dto.getPath());
         saveOrUpdateMetaData(exist, dto);

File: shenyu-client/shenyu-client-core/src/main/java/org/apache/shenyu/client/core/shutdown/ShenyuClientShutdownHook.java
Patch:
@@ -100,9 +100,7 @@ public void run() {
                         log.info("sleep {}ms", shutdownWaitTime);
                         try {
                             TimeUnit.MILLISECONDS.sleep(shutdownWaitTime);
-                        } catch (InterruptedException ex) {
-                            ex.printStackTrace();
-                        }
+                        } catch (InterruptedException ignore) { }
                         hook.run();
                     }, hook.getName());
                     delayHooks.put(delayHook, delayHook);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/proto/ShenyuGrpcCallRequest.java
Patch:
@@ -25,6 +25,8 @@
 import lombok.Builder;
 import lombok.Getter;
 
+import java.util.List;
+
 /**
  * ShenyuGrpcCallRequest.
  */
@@ -36,7 +38,7 @@ public class ShenyuGrpcCallRequest {
 
     private CallOptions callOptions;
 
-    private DynamicMessage requests;
+    private List<DynamicMessage> requests;
 
     private MethodDescriptor<DynamicMessage, DynamicMessage> methodDescriptor;
 

File: shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java
Patch:
@@ -89,8 +89,8 @@ public void testDoExecute() {
         Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);
         ShenyuGrpcClient mockClient = mock(ShenyuGrpcClient.class);
         ShenyuGrpcResponse response = new ShenyuGrpcResponse();
-        response.setResult("success");
-        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any()))
+        response.getResults().add("success");
+        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))
                 .thenReturn(CompletableFuture.completedFuture(response));
         clientCacheMap.put("/grpc", mockClient);
 

File: shenyu-bootstrap/src/main/java/org/apache/shenyu/bootstrap/filter/HealthFilter.java
Patch:
@@ -28,7 +28,7 @@
 import reactor.core.publisher.Mono;
 import reactor.util.annotation.Nullable;
 
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
@@ -50,7 +50,7 @@ public Mono<Void> filter(@Nullable final ServerWebExchange exchange, @Nullable f
 
     private Mono<Void> writeHealthInfo(final ServerWebExchange exchange) {
         String result = JsonUtils.toJson(new Health.Builder().up().build());
-        DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(result.getBytes(Charset.forName("UTF-8")));
+        DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(result.getBytes(StandardCharsets.UTF_8));
         return exchange.getResponse().writeWith(Mono.just(dataBuffer));
     }
 }

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/NettyClientMessageWriter.java
Patch:
@@ -33,14 +33,14 @@
 import java.util.List;
 
 /**
- * This is the http response netty client strategy.
+ * The type Netty client message writer.
  */
-public class NettyClientStrategy implements Strategy {
+public class NettyClientMessageWriter implements MessageWriter {
 
     private final List<MediaType> streamingMediaTypes = Arrays.asList(MediaType.TEXT_EVENT_STREAM, MediaType.APPLICATION_STREAM_JSON);
 
     @Override
-    public Mono<Void> doExcute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {
+    public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPluginChain chain) {
         return chain.execute(exchange).doOnError(throwable -> cleanup(exchange)).then(Mono.defer(() -> {
             Connection connection = exchange.getAttribute(Constants.CLIENT_RESPONSE_CONN_ATTR);
             if (connection == null) {

File: shenyu-plugin/shenyu-plugin-response/src/main/java/org/apache/shenyu/plugin/response/strategy/WebClientMessageWriter.java
Patch:
@@ -32,12 +32,12 @@
 import java.util.Objects;
 
 /**
- * This is the http response web client strategy.
+ * The type Web client message writer.
  */
-public class WebClientStrategy implements Strategy {
+public class WebClientMessageWriter implements MessageWriter {
 
     @Override
-    public Mono<Void> doExcute(final ServerWebExchange exchange, final ShenyuPluginChain chain) {
+    public Mono<Void> writeWith(final ServerWebExchange exchange, final ShenyuPluginChain chain) {
         return chain.execute(exchange).then(Mono.defer(() -> {
             ServerHttpResponse response = exchange.getResponse();
             ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR);

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java
Patch:
@@ -76,9 +76,9 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         }
         Object result = alibabaDubboProxyService.genericInvoker(param, metaData);
         if (Objects.nonNull(result)) {
-            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, result);
+            exchange.getAttributes().put(Constants.RPC_RESULT, result);
         } else {
-            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, Constants.DUBBO_RPC_RESULT_EMPTY);
+            exchange.getAttributes().put(Constants.RPC_RESULT, Constants.DUBBO_RPC_RESULT_EMPTY);
         }
         exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
         return chain.execute(exchange);

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -101,7 +101,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
             if (Objects.isNull(ret)) {
                 ret = Constants.DUBBO_RPC_RESULT_EMPTY;
             }
-            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);
+            exchange.getAttributes().put(Constants.RPC_RESULT, ret);
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
             return ret;
         })).onErrorMap(exception -> exception instanceof GenericException ? new ShenyuException(((GenericException) exception).getExceptionMessage()) : new ShenyuException(exception));

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java
Patch:
@@ -81,7 +81,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
         CallOptions callOptions = CallOptions.DEFAULT.withDeadlineAfter(extInfo.timeout, TimeUnit.MILLISECONDS);
         CompletableFuture<ShenyuGrpcResponse> result = client.call(metaData, callOptions, param);
         return Mono.fromFuture(result.thenApply(ret -> {
-            exchange.getAttributes().put(Constants.GRPC_RPC_RESULT, ret.getResult());
+            exchange.getAttributes().put(Constants.RPC_RESULT, ret.getResult());
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
             return ret;
         })).onErrorMap(ShenyuException::new).then(chain.execute(exchange));

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/proxy/SofaProxyService.java
Patch:
@@ -103,7 +103,7 @@ public void onSofaException(final SofaRpcException e, final String s, final Requ
             }
 
             GenericObject genericObject = (GenericObject) ret;
-            exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, genericObject.getFields());
+            exchange.getAttributes().put(Constants.RPC_RESULT, genericObject.getFields());
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
             return ret;
         })).onErrorMap(ShenyuException::new);

File: shenyu-plugin/shenyu-plugin-tars/src/main/java/org/apache/shenyu/plugin/tars/TarsPlugin.java
Patch:
@@ -90,7 +90,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             if (Objects.isNull(ret)) {
                 ret = Constants.TARS_RPC_RESULT_EMPTY;
             }
-            exchange.getAttributes().put(Constants.TARS_RPC_RESULT, ret);
+            exchange.getAttributes().put(Constants.RPC_RESULT, ret);
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
             return ret;
         })).onErrorMap(m -> new ShenyuException("failed to invoke tars")).then(chain.execute(exchange));

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sofa/src/test/java/org/apache/shenyu/springboot/starter/plugin/sofa/SofaPluginConfigurationTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.sofa.response.SofaResponsePlugin;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
@@ -43,7 +42,6 @@ public void testSofaPlugin() {
             .withPropertyValues("debug=true")
             .run(
                 context -> {
-                    assertThat(context).hasSingleBean(SofaResponsePlugin.class);
                     assertThat(context).hasSingleBean(PluginDataHandler.class);
                     assertThat(context).hasSingleBean(MetaDataSubscriber.class);
                     ShenyuPlugin plugin = context.getBean("sofaPlugin", ShenyuPlugin.class);

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-tars/src/test/java/org/apache/shenyu/springboot/starter/plugin/tars/TarsPluginConfigurationTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.base.handler.PluginDataHandler;
-import org.apache.shenyu.plugin.tars.response.TarsResponsePlugin;
 import org.apache.shenyu.sync.data.api.MetaDataSubscriber;
 import org.junit.Test;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
@@ -45,7 +44,6 @@ public void testTarsPlugin() {
                 context -> {
                     assertThat(context).hasSingleBean(MetaDataSubscriber.class);
                     assertThat(context).hasSingleBean(PluginDataHandler.class);
-                    assertThat(context).hasSingleBean(TarsResponsePlugin.class);
                     ShenyuPlugin plugin = context.getBean("tarsPlugin", ShenyuPlugin.class);
                     assertThat(plugin.named()).isEqualTo(PluginEnum.TARS.getName());
                 }

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java
Patch:
@@ -124,7 +124,6 @@ public void getOrderTest() {
      */
     private void doExecutePreInit() {
         RateLimiterHandle rateLimiterHandle = mockRateLimiterHandler();
-        when(ruleData.getId()).thenReturn("test1");
         when(chain.execute(any())).thenReturn(Mono.empty());
         RatelimiterRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), rateLimiterHandle);
     }
@@ -136,6 +135,7 @@ private RateLimiterHandle mockRateLimiterHandler() {
         RateLimiterHandle rateLimiterHandle = new RateLimiterHandle();
         rateLimiterHandle.setReplenishRate(1);
         rateLimiterHandle.setBurstCapacity(100);
+        rateLimiterHandle.setKeyResolverName("WHOLE_KEY_RESOLVER");
         rateLimiterHandle.setLoged(false);
         return rateLimiterHandle;
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/DataBaseProperties.java
Patch:
@@ -35,5 +35,7 @@ public class DataBaseProperties {
 
     private String initScript;
 
+    private String customInitScript;
+
     private Boolean initEnable;
 }

File: shenyu-plugin/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/SpringCloudPluginTest.java
Patch:
@@ -57,6 +57,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -208,9 +209,8 @@ public void testSpringCloudPluginNormal() throws URISyntaxException {
         SpringCloudSelectorHandleCache.getInstance().cachedHandle(selectorData.getId(), springCloudSelectorHandle);
         SpringCloudRuleHandleCache.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(rule), springCloudRuleHandle);
         when(shenyuContext.getRealUrl()).thenReturn("http://127.0.0.1");
-        when(shenyuContext.getHttpMethod()).thenReturn(HttpMethod.GET.name());
         exchange.getAttributes().put(Constants.CONTEXT, shenyuContext);
-        when(loadBalancerClient.choose(any()))
+        when(loadBalancerClient.choose(anyString()))
                 .thenReturn(new DefaultServiceInstance("instanceId", "service1", "127.0.0.1", 8080, true));
         when(loadBalancerClient.reconstructURI(any(), any())).thenReturn(new URI("https://localhost:8080/service1/"));
         Mono<Void> execute = springCloudPlugin.doExecute(exchange, chain, selectorData, rule);

File: shenyu-common/src/main/java/org/apache/shenyu/common/constant/DefaultPathConstants.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * ZkPathConstants.
  */
-public final class ZkPathConstants implements Constants {
+public final class DefaultPathConstants implements Constants {
 
     /**
      * The constant SELECTOR_JOIN_RULE.

File: shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperSyncDataServiceTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.collect.Lists;
 import org.I0Itec.zkclient.IZkDataListener;
 import org.I0Itec.zkclient.ZkClient;
-import org.apache.shenyu.common.constant.ZkPathConstants;
+import org.apache.shenyu.common.constant.DefaultPathConstants;
 import org.apache.shenyu.common.dto.AppAuthData;
 import org.apache.shenyu.common.dto.MetaData;
 import org.apache.shenyu.common.dto.PluginData;
@@ -249,7 +249,7 @@ public void unRuleSubscribe(final RuleData ruleData) {
         verify(zkClient).subscribeDataChanges(eq(MOCK_RULE_PATH), captor.capture());
         captor.getValue().handleDataDeleted(MOCK_RULE_PATH);
         assertThat(unSubscribeList.size(), is(1));
-        assertThat(unSubscribeList.get(0).getSelectorId() + ZkPathConstants.SELECTOR_JOIN_RULE + unSubscribeList.get(0).getId(), is(MOCK_RULE_NAME));
+        assertThat(unSubscribeList.get(0).getSelectorId() + DefaultPathConstants.SELECTOR_JOIN_RULE + unSubscribeList.get(0).getId(), is(MOCK_RULE_NAME));
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/AppAuthDTO.java
Patch:
@@ -62,4 +62,6 @@ public class AppAuthDTO implements Serializable {
     private Boolean enabled;
 
     private List<AuthParamDTO> authParamDTOList;
+
+    private List<AuthPathDTO> authPathDTOList;
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/AppAuthVO.java
Patch:
@@ -67,6 +67,8 @@ public class AppAuthVO implements Serializable {
 
     private List<AuthParamVO> authParamVOList;
 
+    private List<AuthPathVO> authPathVOList;
+
     /**
      * updated time.
      */

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/AppAuthControllerTest.java
Patch:
@@ -73,7 +73,7 @@ public final class AppAuthControllerTest {
 
     private final AppAuthVO appAuthVO = new AppAuthVO("0001", "testAppKey", "testAppSecret",
             "testUser", "18600000000", "{\"extInfo\": \"test\"}",
-            true, true, null,
+            true, true, null, null,
             DateUtils.localDateTimeToString(LocalDateTime.now()));
 
     @Before

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/controller/RoleController.java
Patch:
@@ -46,6 +46,8 @@
 @RequestMapping("/role")
 public class RoleController {
 
+    private static final String SUPER = "super";
+
     private final RoleService roleService;
 
     public RoleController(final RoleService roleService) {
@@ -97,7 +99,7 @@ public ShenyuAdminResult detailRole(@PathVariable("id") final String id) {
     @PostMapping("")
     public ShenyuAdminResult createRole(@RequestBody final RoleDTO roleDTO) {
         return Optional.ofNullable(roleDTO).map(item -> {
-            if (roleDTO.getRoleName().equals("super")) {
+            if (SUPER.equals(roleDTO.getRoleName())) {
                 return ShenyuAdminResult.error(ShenyuResultMessage.ROLE_CREATE_ERROR);
             }
             Integer createCount = roleService.createOrUpdate(item);

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/support/CachedBodyOutputMessage.java
Patch:
@@ -88,6 +88,7 @@ public Flux<DataBuffer> getBody() {
      * @param body writeWith body
      * @return Mono
      */
+    @Override
     public Mono<Void> writeWith(final Publisher<? extends DataBuffer> body) {
         this.body = Flux.from(body);
         return Mono.empty();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/aspect/DataPermissionAspect.java
Patch:
@@ -80,7 +80,7 @@ private Object[] getFilterSQLData(final ProceedingJoinPoint point) {
         if (dataPermission == null || args == null) {
             return args;
         }
-        List<String> dataPermissionList = dataPermissionService.getDataPermission(JwtUtils.getUserId());
+        List<String> dataPermissionList = dataPermissionService.getDataPermission(JwtUtils.getUserInfo().getUserId());
         if (CollectionUtils.isEmpty(dataPermissionList)) {
             return args;
         }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/LoginDashboardUserVO.java
Patch:
@@ -51,7 +51,7 @@ public static LoginDashboardUserVO buildLoginDashboardUserVO(final DashboardUser
                 .map(item -> {
                     LoginDashboardUserVO vo = new LoginDashboardUserVO();
                     BeanUtils.copyProperties(item, vo);
-                    vo.setToken(JwtUtils.generateToken(vo.getUserName(), vo.getId()));
+                    vo.setToken(JwtUtils.generateToken(vo.getUserName()));
                     return vo;
                 }).orElse(null);
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -119,9 +119,9 @@ public int createOrUpdate(final RuleDTO ruleDTO) {
         List<RuleConditionDTO> ruleConditions = ruleDTO.getRuleConditions();
         if (StringUtils.isEmpty(ruleDTO.getId())) {
             ruleCount = ruleMapper.insertSelective(ruleDO);
-            if (dataPermissionMapper.listByUserId(JwtUtils.getUserId()).size() > 0) {
+            if (dataPermissionMapper.listByUserId(JwtUtils.getUserInfo().getUserId()).size() > 0) {
                 DataPermissionDTO dataPermissionDTO = new DataPermissionDTO();
-                dataPermissionDTO.setUserId(JwtUtils.getUserId());
+                dataPermissionDTO.setUserId(JwtUtils.getUserInfo().getUserId());
                 dataPermissionDTO.setDataId(ruleDO.getId());
                 dataPermissionDTO.setDataType(AdminConstants.RULE_DATA_TYPE);
                 dataPermissionMapper.insertSelective(DataPermissionDO.buildPermissionDO(dataPermissionDTO));

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/shiro/bean/StatelessAuthFilter.java
Patch:
@@ -62,8 +62,7 @@ protected boolean onAccessDenied(final ServletRequest servletRequest, final Serv
             return false;
         }
 
-        StatelessToken token = new StatelessToken();
-        token.setToken(tokenValue);
+        StatelessToken token = new StatelessToken(tokenValue);
 
         Subject subject = getSubject(servletRequest, servletResponse);
 

File: shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootService.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.metrics.config.MetricsConfig;
 import org.apache.shenyu.metrics.prometheus.collector.BuildInfoCollector;
-import org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister;
 import org.apache.shenyu.metrics.reporter.MetricsReporter;
 import org.apache.shenyu.metrics.spi.MetricsBootService;
+import org.apache.shenyu.metrics.spi.MetricsRegister;
 import org.apache.shenyu.spi.Join;
 
 import javax.management.MalformedObjectNameException;
@@ -49,9 +49,9 @@ public final class PrometheusBootService implements MetricsBootService {
     private volatile AtomicBoolean registered = new AtomicBoolean(false);
     
     @Override
-    public void start(final MetricsConfig metricsConfig) {
+    public void start(final MetricsConfig metricsConfig, final MetricsRegister metricsRegister) {
         startServer(metricsConfig);
-        MetricsReporter.register(PrometheusMetricsRegister.getInstance());
+        MetricsReporter.register(metricsRegister);
     }
     
     @Override

File: shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootServiceTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shenyu.common.utils.GsonUtils;
 import org.apache.shenyu.common.utils.ReflectUtils;
 import org.apache.shenyu.metrics.config.MetricsConfig;
+import org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Test;
@@ -54,7 +55,7 @@ public void testRegistered() {
         registered.set(true);
         String jmxConfig = GsonUtils.getInstance().toJson("whitelistObjectNames:org.apache.cassandra.metrics:type=ColumnFamily");
         MetricsConfig metricsConfig = new MetricsConfig("test", "", 10119, false, 1, jmxConfig, null);
-        prometheusBootService.start(metricsConfig);
+        prometheusBootService.start(metricsConfig, new PrometheusMetricsRegister());
         Field field = PrometheusBootService.class.getDeclaredField("server");
         field.setAccessible(true);
         HTTPServer httpServer = (HTTPServer) field.get(prometheusBootService);

File: shenyu-metrics/shenyu-metrics-spi/src/main/java/org/apache/shenyu/metrics/spi/MetricsBootService.java
Patch:
@@ -30,8 +30,9 @@ public interface MetricsBootService {
      * Start metrics tracker.
      *
      * @param metricsConfig metrics config
+     * @param metricsRegister the metrics register
      */
-    void start(MetricsConfig metricsConfig);
+    void start(MetricsConfig metricsConfig, MetricsRegister metricsRegister);
     
     /**
      * Stop metrics tracker.

File: shenyu-register-center/shenyu-register-client/shenyu-register-client-zookeeper/src/test/java/org/apache/shenyu/register/client/zookeeper/ZookeeperClientRegisterRepositoryTest.java
Patch:
@@ -57,7 +57,7 @@ public class ZookeeperClientRegisterRepositoryTest {
 
     @BeforeClass
     public static void setUpBeforeClass() throws Exception {
-        zkServer = new TestingServer(2181, true);
+        zkServer = new TestingServer(1181, true);
     }
 
     @AfterClass
@@ -175,7 +175,7 @@ public void testPersistInterfaceDoAnswerWriteData4Grpc() {
     @Test
     public void testInit() {
         ShenyuRegisterCenterConfig config = new ShenyuRegisterCenterConfig();
-        config.setServerLists("127.0.0.1:2181");
+        config.setServerLists("127.0.0.1:1181");
         repository.init(config);
     }
 

File: shenyu-plugin/shenyu-plugin-global/src/main/java/org/apache/shenyu/plugin/global/GlobalPlugin.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shenyu.common.constant.Constants;
+import org.apache.shenyu.common.enums.PluginEnum;
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.api.context.ShenyuContext;
@@ -63,7 +64,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final ShenyuPluginCh
     
     @Override
     public int getOrder() {
-        return 0;
+        return PluginEnum.GLOBAL.getCode();
     }
     
     private ShenyuContext transformMap(final MultiValueMap<String, String> queryParams) {
@@ -76,6 +77,6 @@ private ShenyuContext transformMap(final MultiValueMap<String, String> queryPara
     
     @Override
     public String named() {
-        return "global";
+        return PluginEnum.GLOBAL.getName();
     }
 }

File: shenyu-plugin/shenyu-plugin-global/src/test/java/org/apache/shenyu/plugin/global/GlobalPluginTest.java
Patch:
@@ -100,7 +100,7 @@ public void testTransformMap() {
 
     @Test
     public void testGetOrder() {
-        assertEquals(globalPlugin.getOrder(), 0);
+        assertEquals(globalPlugin.getOrder(), 1);
     }
 
     @Test

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/ShenyuClientRegisterServiceImpl.java
Patch:
@@ -341,7 +341,7 @@ private void saveOrUpdateMetaData(final MetaDataDO exist, final MetaDataRegister
         }
         // publish MetaData's event
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.META_DATA, eventType,
-                Collections.singletonList(MetaDataTransfer.INSTANCE.mapRegisterDTOToEntity(metaDataDTO))));
+                Collections.singletonList(MetaDataTransfer.INSTANCE.mapToData(metaDataDO))));
     }
 
     private String handlerSelector(final MetaDataRegisterDTO dto) {

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/AuthParamData.java
Patch:
@@ -36,6 +36,4 @@ public class AuthParamData implements Serializable {
     private String appName;
 
     private String appParam;
-
-
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/PluginData.java
Patch:
@@ -48,5 +48,4 @@ public class PluginData implements Serializable {
     private Integer role;
 
     private Boolean enabled;
-
 }

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/SelectorData.java
Patch:
@@ -37,6 +37,7 @@
 @AllArgsConstructor
 @Builder
 public class SelectorData implements Serializable {
+    
     private static final long serialVersionUID = 760613690421794874L;
 
     private String id;

File: shenyu-common/src/main/java/org/apache/shenyu/common/dto/WebsocketData.java
Patch:
@@ -58,5 +58,4 @@ public class WebsocketData<T> implements Serializable {
      * {@link AppAuthData}、{@link ConditionData}、{@link PluginData}、{@link RuleData}、{@link SelectorData}.
      */
     private List<T> data;
-
 }

File: shenyu-plugin/shenyu-plugin-api/src/main/java/org/apache/shenyu/plugin/api/RemoteAddressResolver.java
Patch:
@@ -35,5 +35,4 @@ public interface RemoteAddressResolver {
     default InetSocketAddress resolve(ServerWebExchange exchange) {
         return exchange.getRequest().getRemoteAddress();
     }
-
 }

File: shenyu-plugin/shenyu-plugin-divide/src/main/java/org/apache/shenyu/plugin/divide/handler/DividePluginDataHandler.java
Patch:
@@ -46,7 +46,7 @@ public void removeSelector(final SelectorData selectorData) {
     @Override
     public void handlerRule(final RuleData ruleData) {
         Optional.ofNullable(ruleData.getHandle()).ifPresent(s -> {
-            final DivideRuleHandle divideRuleHandle = GsonUtils.getInstance().fromJson(s, DivideRuleHandle.class);
+            DivideRuleHandle divideRuleHandle = GsonUtils.getInstance().fromJson(s, DivideRuleHandle.class);
             UpstreamCacheManager.getInstance().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), divideRuleHandle);
         });
     }

File: shenyu-plugin/shenyu-plugin-waf/src/main/java/org/apache/shenyu/plugin/waf/WafPlugin.java
Patch:
@@ -58,8 +58,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPlu
             return WebFluxResultUtils.result(exchange, error);
         }
         String handle = rule.getHandle();
-        WafHandle wafHandle = WafRuleHandleCache.getInstance()
-                .obtainHandle(CacheKeyUtils.INST.getKey(rule));
+        WafHandle wafHandle = WafRuleHandleCache.getInstance().obtainHandle(CacheKeyUtils.INST.getKey(rule));
         if (Objects.isNull(wafHandle) || StringUtils.isBlank(wafHandle.getPermission())) {
             log.error("waf handler can not configuration：{}", handle);
             return chain.execute(exchange);

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/AbstractReflectGetterSetterTest.java
Patch:
@@ -112,8 +112,9 @@ public void testGetAndSet() throws Exception {
                         return;
                     }
                     try {
-                        //get the get and set methods of the field by PropertyDescriptor
-                        PropertyDescriptor property = new PropertyDescriptor(f.getName(), clazz);
+                        // get the get and set methods of the field by PropertyDescriptor
+                        // (String) f.getName() for java11 (can not find com.sun.beans.introspect.PropertyInfo class)
+                        PropertyDescriptor property = new PropertyDescriptor((String) f.getName(), clazz);
                         Method getter = property.getReadMethod();
                         Method setter = property.getWriteMethod();
 

File: shenyu-client/shenyu-client-grpc/src/main/java/org/apache/shenyu/client/grpc/json/ServerJsonListener.java
Patch:
@@ -58,7 +58,7 @@ public void onMessage(final R message) {
         Message.Builder builder;
         Class<?> t = JsonServerServiceInterceptor.getRequestClazzMap().get(call.getMethodDescriptor().getFullMethodName());
         try {
-            builder = (Message.Builder) ReflectUtils.getMethod(t, "newBuilder");
+            builder = (Message.Builder) ReflectUtils.invokeMethod(t, "newBuilder");
             JsonFormat.parser().ignoringUnknownFields().merge(((JsonRequest) message).getMessage(), builder);
             if (Objects.isNull(builder)) {
                 throw new ShenyuException("build json response message is error, newBuilder method is null");

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/config/JwtConfig.java
Patch:
@@ -37,5 +37,4 @@ public class JwtConfig implements Serializable {
      * No need to carry the authorization.
      */
     private List<String> filterPath;
-
 }

File: shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/lambda/ThrowingFunction.java
Patch:
@@ -43,5 +43,4 @@ static Object wrap(ThrowingFunction function) {
             return null;
         }
     }
-
 }

File: shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/JwtPluginTest.java
Patch:
@@ -89,5 +89,4 @@ public void getOrderTest() {
         final int result = jwtPluginUnderTest.getOrder();
         assertEquals(PluginEnum.JWT.getCode(), result);
     }
-
 }

File: shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandlerTest.java
Patch:
@@ -52,5 +52,4 @@ public void testPluginNamed() {
         final String result = jwtPluginDataHandlerUnderTest.pluginNamed();
         assertEquals(PluginEnum.JWT.getName(), result);
     }
-
 }

File: shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/AbstractShenyuPlugin.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shenyu.plugin.api.ShenyuPlugin;
 import org.apache.shenyu.plugin.api.ShenyuPluginChain;
 import org.apache.shenyu.plugin.base.cache.BaseDataCache;
-import org.apache.shenyu.plugin.base.utils.MatchStrategyUtils;
+import org.apache.shenyu.plugin.base.condition.strategy.MatchStrategyFactory;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -114,7 +114,7 @@ private Boolean filterSelector(final SelectorData selector, final ServerWebExcha
             if (CollectionUtils.isEmpty(selector.getConditionList())) {
                 return false;
             }
-            return MatchStrategyUtils.match(selector.getMatchMode(), selector.getConditionList(), exchange);
+            return MatchStrategyFactory.match(selector.getMatchMode(), selector.getConditionList(), exchange);
         }
         return true;
     }
@@ -124,7 +124,7 @@ private RuleData matchRule(final ServerWebExchange exchange, final Collection<Ru
     }
 
     private Boolean filterRule(final RuleData ruleData, final ServerWebExchange exchange) {
-        return ruleData.getEnabled() && MatchStrategyUtils.match(ruleData.getMatchMode(), ruleData.getConditionDataList(), exchange);
+        return ruleData.getEnabled() && MatchStrategyFactory.match(ruleData.getMatchMode(), ruleData.getConditionDataList(), exchange);
     }
 
     private void selectorLog(final SelectorData selectorData, final String pluginName) {

File: shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/MatchStrategyFactoryTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shenyu.plugin.base.utils;
 
 import org.apache.shenyu.common.dto.ConditionData;
+import org.apache.shenyu.plugin.base.condition.strategy.MatchStrategyFactory;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -34,7 +35,7 @@
  * The MatchStrategyFactory test.
  */
 @RunWith(MockitoJUnitRunner.class)
-public final class MatchStrategyUtilsTest {
+public final class MatchStrategyFactoryTest {
 
     private ServerWebExchange exchange;
 
@@ -58,6 +59,6 @@ public void setUp() {
      */
     @Test
     public void matchTest() {
-        Assert.assertTrue(MatchStrategyUtils.match(0, conditionDatas, exchange));
+        Assert.assertTrue(MatchStrategyFactory.match(0, conditionDatas, exchange));
     }
 }

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/RoundRobinPicker.java
Patch:
@@ -35,7 +35,7 @@ public class RoundRobinPicker extends AbstractReadyPicker {
      * AtomicIntegerFieldUpdater index.
      */
     @SuppressWarnings("unused")
-    private volatile int index = 0;
+    private volatile int index;
 
     public RoundRobinPicker(final List<LoadBalancer.Subchannel> list) {
         super(list);

File: shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/loadbalance/picker/RoundRobinPicker.java
Patch:
@@ -35,7 +35,7 @@ public class RoundRobinPicker extends AbstractReadyPicker {
      * AtomicIntegerFieldUpdater index.
      */
     @SuppressWarnings("unused")
-    private volatile Integer index = 0;
+    private volatile int index = 0;
 
     public RoundRobinPicker(final List<LoadBalancer.Subchannel> list) {
         super(list);

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/main/java/org/apache/shenyu/client/alibaba/dubbo/AlibabaDubboServiceBeanListener.java
Patch:
@@ -84,7 +84,8 @@ public AlibabaDubboServiceBeanListener(final ShenyuRegisterCenterConfig config,
 
     private void handler(final ServiceBean<?> serviceBean) {
         Class<?> clazz = serviceBean.getRef().getClass();
-        if (AopUtils.isCglibProxy(clazz)) {
+        Object refProxy = serviceBean.getRef();
+        if (AopUtils.isCglibProxy(refProxy)) {
             String superClassName = clazz.getGenericSuperclass().getTypeName();
             try {
                 clazz = Class.forName(superClassName);
@@ -93,7 +94,7 @@ private void handler(final ServiceBean<?> serviceBean) {
                 return;
             }
         }
-        if (AopUtils.isJdkDynamicProxy(clazz)) {
+        if (AopUtils.isJdkDynamicProxy(refProxy)) {
             clazz = AopUtils.getTargetClass(serviceBean.getRef());
         }
         Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(clazz);

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/main/java/org/apache/shenyu/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -84,7 +84,8 @@ public ApacheDubboServiceBeanListener(final ShenyuRegisterCenterConfig config, f
 
     private void handler(final ServiceBean serviceBean) {
         Class<?> clazz = serviceBean.getRef().getClass();
-        if (AopUtils.isCglibProxy(clazz)) {
+        Object refProxy = serviceBean.getRef();
+        if (AopUtils.isCglibProxy(refProxy)) {
             String superClassName = clazz.getGenericSuperclass().getTypeName();
             try {
                 clazz = Class.forName(superClassName);
@@ -93,7 +94,7 @@ private void handler(final ServiceBean serviceBean) {
                 return;
             }
         }
-        if (AopUtils.isJdkDynamicProxy(clazz)) {
+        if (AopUtils.isJdkDynamicProxy(refProxy)) {
             clazz = AopUtils.getTargetClass(serviceBean.getRef());
         }
         Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(clazz);

File: shenyu-client/shenyu-client-tars/src/main/java/org/apache/shenyu/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -93,7 +93,7 @@ public Object postProcessAfterInitialization(final Object bean, final String bea
 
     private void handler(final Object serviceBean) {
         Class<?> clazz = serviceBean.getClass();
-        if (AopUtils.isCglibProxy(clazz)) {
+        if (AopUtils.isCglibProxy(serviceBean)) {
             String superClassName = clazz.getGenericSuperclass().getTypeName();
             try {
                 clazz = Class.forName(superClassName);
@@ -102,7 +102,7 @@ private void handler(final Object serviceBean) {
                 return;
             }
         }
-        if (AopUtils.isJdkDynamicProxy(clazz)) {
+        if (AopUtils.isJdkDynamicProxy(serviceBean)) {
             clazz = AopUtils.getTargetClass(serviceBean);
         }
         Method[] methods = ReflectionUtils.getUniqueDeclaredMethods(clazz);

File: shenyu-plugin/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/context/DubboShenyuContextDecorator.java
Patch:
@@ -31,7 +31,6 @@ public class DubboShenyuContextDecorator implements ShenyuContextDecorator {
     public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {
         shenyuContext.setModule(metaData.getAppName());
         shenyuContext.setMethod(metaData.getServiceName());
-        shenyuContext.setRpcType(metaData.getRpcType());
         shenyuContext.setContextPath(metaData.getContextPath());
         shenyuContext.setRpcType(RpcTypeEnum.DUBBO.getName());
         return shenyuContext;

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/support/BodyInserterContext.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * The type Body inserter context.
  * 
- * @see <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/support/BodyInserterContext.java">BodyInserterContext</a>
+ * @see <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/BodyInserterContext.java">BodyInserterContext</a>
  */
 public class BodyInserterContext implements BodyInserter.Context {
 

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/support/CachedBodyOutputMessage.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Implementation of {@link ClientHttpRequest} that saves body as a field.
  *
- * @see <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/rewrite/CachedBodyOutputMessage.java">CachedBodyOutputMessage</a>
+ * @see <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/rewrite/CachedBodyOutputMessage.java">CachedBodyOutputMessage</a>
  */
 public class CachedBodyOutputMessage implements ReactiveHttpOutputMessage {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/exception/ExceptionHandlers.java
Patch:
@@ -30,7 +30,8 @@
 
 /**
  * ControllerMethodResolver.
- * https://dzone.com/articles/global-exception-handling-with-controlleradvice.
+ *
+ * @see <a href="https://dzone.com/articles/global-exception-handling-with-controlleradvice">global-exception-handling-with-controlleradvice</a>
  */
 @Slf4j
 @ControllerAdvice

File: shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/algorithm/TokenBucketRateLimiterAlgorithm.java
Patch:
@@ -22,9 +22,9 @@
 
 /**
  * The type Token bucket rate limiter algorithm.
- * See https://stripe.com/blog/rate-limiters and
- * https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#file-1-check_request_rate_limiter-rb-L11-L34
- * 
+ *
+ * @see <a href="https://stripe.com/blog/rate-limiters">rate-limiters</a>
+ * @see <a href="https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#file-1-check_request_rate_limiter-rb-L11-L34">check_request_rate_limiter</a>
  */
 @Join
 public class TokenBucketRateLimiterAlgorithm extends AbstractRateLimiterAlgorithm {

File: shenyu-spi/src/main/java/org/apache/shenyu/spi/ExtensionLoader.java
Patch:
@@ -31,7 +31,8 @@
 /**
  * The type Extension loader.
  * This is done by loading the properties file.
- * https://github.com/apache/dubbo/blob/master/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
+ *
+ * @see <a href="https://github.com/apache/dubbo/blob/master/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java">ExtensionLoader</a>
  */
 @Slf4j
 @SuppressWarnings("all")

File: shenyu-spi/src/main/java/org/apache/shenyu/spi/SPI.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * SPI Extend the processing.
  * All spi system reference the apache implementation of
- * https://github.com/apache/dubbo/blob/master/dubbo-common/src/main/java/org/apache/dubbo/common/extension.
+ * <a href="https://github.com/apache/dubbo/blob/master/dubbo-common/src/main/java/org/apache/dubbo/common/extension">Apache Dubbo Common Extension</a>.
  *
  * @see ExtensionFactory
  * @see ExtensionLoader

File: shenyu-web/src/main/java/org/apache/shenyu/web/configuration/ErrorHandlerConfiguration.java
Patch:
@@ -96,9 +96,9 @@ public ErrorWebExceptionHandler errorWebExceptionHandler(final ErrorAttributes e
     }
 
     /**
-     * https://github.com/spring-cloud/spring-cloud-gateway/issues/541
      * Hidden http method filter hidden http method filter.
      *
+     * @see <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/541">issues-541</a>
      * @return the hidden http method filter
      */
     @Bean

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/support/BodyInserterContext.java
Patch:
@@ -29,7 +29,8 @@
 
 /**
  * The type Body inserter context.
- * * @see https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/support/BodyInserterContext.java
+ * 
+ * @see <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/support/BodyInserterContext.java">BodyInserterContext</a>
  */
 public class BodyInserterContext implements BodyInserter.Context {
 

File: shenyu-web/src/main/java/org/apache/shenyu/web/filter/support/CachedBodyOutputMessage.java
Patch:
@@ -30,8 +30,9 @@
 import java.util.function.Supplier;
 
 /**
- * * @see https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/rewrite/CachedBodyOutputMessage.java
  * Implementation of {@link ClientHttpRequest} that saves body as a field.
+ *
+ * @see <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/factory/rewrite/CachedBodyOutputMessage.java">CachedBodyOutputMessage</a>
  */
 public class CachedBodyOutputMessage implements ReactiveHttpOutputMessage {
 

File: shenyu-plugin/shenyu-plugin-httpclient/src/main/java/org/apache/shenyu/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -112,7 +112,6 @@ private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBody
             httpHeaders.addAll(exchange.getRequest().getHeaders());
             httpHeaders.remove(HttpHeaders.HOST);
         })
-                .contentType(buildMediaType(exchange))
                 .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody()))
                 .exchange()
                 .doOnError(e -> log.error(e.getMessage(), e))

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/ConsulServerConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
-@ConditionalOnProperty(prefix = "soul.register", name = "registerType", havingValue = "consul")
+@ConditionalOnProperty(prefix = "shenyu.register", name = "registerType", havingValue = "consul")
 public class ConsulServerConfiguration {
     
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataBaseConfiguration.java
Patch:
@@ -41,9 +41,9 @@ public class DataBaseConfiguration {
      */
     @Bean
     @ConditionalOnMissingBean(value = DataBaseProperties.class)
-    public DataBaseProperties dataBaseProperties(@Value("${soul.database.dialect:h2}") final String dialect,
-                                                   @Value("${soul.database.init_script:META-INF/schema.h2.sql}") final String initScript,
-                                                   @Value("${soul.database.init_enable:true}") final Boolean initEnable) {
+    public DataBaseProperties dataBaseProperties(@Value("${shenyu.database.dialect:h2}") final String dialect,
+                                                   @Value("${shenyu.database.init_script:META-INF/schema.h2.sql}") final String initScript,
+                                                   @Value("${shenyu.database.init_enable:true}") final Boolean initEnable) {
         DataBaseProperties dataSourceProperties = new DataBaseProperties();
         dataSourceProperties.setDialect(dialect);
         dataSourceProperties.setInitScript(initScript);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/LdapConfiguration.java
Patch:
@@ -36,7 +36,7 @@
  * @author Naah
  */
 @Configuration
-@ConditionalOnProperty(name = "soul.ldap.enabled", havingValue = "true")
+@ConditionalOnProperty(name = "shenyu.ldap.enabled", havingValue = "true")
 @EnableConfigurationProperties(LdapProperties.class)
 public class LdapConfiguration {
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/RegisterCenterConfiguration.java
Patch:
@@ -40,7 +40,7 @@ public class RegisterCenterConfiguration {
      * @return the shenyu register center config
      */
     @Bean
-    @ConfigurationProperties(prefix = "soul.register")
+    @ConfigurationProperties(prefix = "shenyu.register")
     public ShenyuRegisterCenterConfig shenyuRegisterCenterConfig() {
         return new ShenyuRegisterCenterConfig();
     }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/SecretConfiguration.java
Patch:
@@ -40,7 +40,7 @@ public class SecretConfiguration {
      */
     @Bean
     @ConditionalOnMissingBean(value = SecretProperties.class)
-    public SecretProperties secretProperties(@Value("${soul.aes.secret.key:2095132720951327}") final String key) {
+    public SecretProperties secretProperties(@Value("${shenyu.aes.secret.key:2095132720951327}") final String key) {
         SecretProperties secretProperties = new SecretProperties();
         secretProperties.setKey(key);
         return secretProperties;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/SwaggerConfiguration.java
Patch:
@@ -41,7 +41,7 @@
 @EnableSwagger2
 public class SwaggerConfiguration {
     
-    @Value("${soul.swagger.enable:false}")
+    @Value("${shenyu.swagger.enable:false}")
     private boolean enable;
     
     private final BuildProperties buildProperties;
@@ -78,10 +78,10 @@ private ApiInfo apiInfo() {
             version = buildProperties.getVersion();
         }
         return new ApiInfoBuilder()
-                .title("Soul Admin API Document")
+                .title("Shenyu Admin API Document")
                 .description("")
                 .version(version)
-                .contact(new Contact("soul", "https://github.com/dromara/soul", ""))
+                .contact(new Contact("shenyu", "https://github.com/dromara/shenyu", ""))
                 .build();
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/DataBaseProperties.java
Patch:
@@ -30,7 +30,7 @@
 @Getter
 @Setter
 @Component
-@ConfigurationProperties(prefix = "soul.database")
+@ConfigurationProperties(prefix = "shenyu.database")
 public class DataBaseProperties {
 
     private String dialect;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/HttpSyncProperties.java
Patch:
@@ -29,7 +29,7 @@
  */
 @Getter
 @Setter
-@ConfigurationProperties(prefix = "soul.sync.http")
+@ConfigurationProperties(prefix = "shenyu.sync.http")
 public class HttpSyncProperties {
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/JwtProperties.java
Patch:
@@ -28,7 +28,7 @@
  **/
 @Data
 @Component
-@ConfigurationProperties(prefix = "soul.jwt")
+@ConfigurationProperties(prefix = "shenyu.jwt")
 public class JwtProperties {
 
     private String key;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/LdapProperties.java
Patch:
@@ -26,7 +26,7 @@
  * @author Naah
  **/
 @Data
-@ConfigurationProperties(prefix = "soul.ldap")
+@ConfigurationProperties(prefix = "shenyu.ldap")
 public class LdapProperties {
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/NacosProperties.java
Patch:
@@ -26,7 +26,7 @@
  * The type Nacos config.
  */
 @Data
-@ConfigurationProperties(prefix = "soul.sync.nacos")
+@ConfigurationProperties(prefix = "shenyu.sync.nacos")
 public class NacosProperties {
 
     private String url;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/SecretProperties.java
Patch:
@@ -30,7 +30,7 @@
 @Getter
 @Setter
 @Component
-@ConfigurationProperties(prefix = "soul.aes.secret")
+@ConfigurationProperties(prefix = "shenyu.aes.secret")
 public class SecretProperties {
 
     private String key;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/ShiroProperties.java
Patch:
@@ -28,7 +28,7 @@
  **/
 @Data
 @Component("shiroProperties")
-@ConfigurationProperties(prefix = "soul.shiro")
+@ConfigurationProperties(prefix = "shenyu.shiro")
 public class ShiroProperties {
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/WebsocketSyncProperties.java
Patch:
@@ -28,7 +28,7 @@
  */
 @Getter
 @Setter
-@ConfigurationProperties(prefix = "soul.sync.websocket")
+@ConfigurationProperties(prefix = "shenyu.sync.websocket")
 public class WebsocketSyncProperties {
 
     /**

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/config/properties/ZookeeperProperties.java
Patch:
@@ -26,7 +26,7 @@
  * @author xiaoyu(Myth)
  */
 @Data
-@ConfigurationProperties(prefix = "soul.sync.zookeeper")
+@ConfigurationProperties(prefix = "shenyu.sync.zookeeper")
 public class ZookeeperProperties {
 
     private String url;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/RegisterServerDisruptorPublisher.java
Patch:
@@ -51,7 +51,7 @@ public static RegisterServerDisruptorPublisher getInstance() {
     /**
      * start.
      *
-     * @param shenyuClientRegisterService the soul client register service
+     * @param shenyuClientRegisterService the shenyu client register service
      */
     public void start(final ShenyuClientRegisterService shenyuClientRegisterService) {
         factory = new RegisterServerExecutorFactory();

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/executor/RegisterServerConsumerExecutor.java
Patch:
@@ -66,7 +66,7 @@ public QueueConsumerExecutor create() {
 
         @Override
         public String fixName() {
-            return "soul_register_server";
+            return "shenyu_register_server";
         }
     }
 }

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/disruptor/subscriber/URIRegisterExecutorSubscriber.java
Patch:
@@ -40,7 +40,7 @@ public class URIRegisterExecutorSubscriber implements ExecutorTypeSubscriber<URI
     /**
      * Instantiates a new Uri register executor subscriber.
      *
-     * @param shenyuClientRegisterService the soul client register service
+     * @param shenyuClientRegisterService the shenyu client register service
      */
     public URIRegisterExecutorSubscriber(final ShenyuClientRegisterService shenyuClientRegisterService) {
         this.shenyuClientRegisterService = shenyuClientRegisterService;

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/ApplicationStartListener.java
Patch:
@@ -39,7 +39,7 @@ public class ApplicationStartListener implements ApplicationListener<WebServerIn
     public void onApplicationEvent(final WebServerInitializedEvent event) {
         int port = event.getWebServer().getPort();
         final String host = IpUtils.getHost();
-        final String domain = System.getProperty("soul.httpPath");
+        final String domain = System.getProperty("shenyu.httpPath");
         if (StringUtils.isBlank(domain)) {
             ShenyuDomain.getInstance().setHttpPath("http://" + String.join(":", host, String.valueOf(port)));
         } else {

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/http/HttpLongPollingDataChangedListener.java
Patch:
@@ -209,7 +209,7 @@ private boolean checkCacheDelayAndUpdate(final ConfigDataCache serverCache, fina
         }
         // the lastModifyTime before client, then the local cache needs to be updated.
         // Considering the concurrency problem, admin must lock,
-        // otherwise it may cause the request from soul-web to update the cache concurrently, causing excessive db pressure
+        // otherwise it may cause the request from shenyu-web to update the cache concurrently, causing excessive db pressure
         boolean locked = false;
         try {
             locked = LOCK.tryLock(5, TimeUnit.SECONDS);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/zookeeper/HttpServiceDiscovery.java
Patch:
@@ -87,11 +87,11 @@ public HttpServiceDiscovery(final SelectorService selectorService,
 
     @Override
     public void afterPropertiesSet() {
-        Boolean register = env.getProperty("soul.http.register", Boolean.class, false);
+        Boolean register = env.getProperty("shenyu.http.register", Boolean.class, false);
         if (!register) {
             return;
         }
-        String zookeeperUrl = env.getProperty("soul.http.zookeeperUrl", "");
+        String zookeeperUrl = env.getProperty("shenyu.http.zookeeperUrl", "");
         if (StringUtils.isNoneBlank(zookeeperUrl)) {
             zkClient = new ZkClient(zookeeperUrl, 5000, 2000);
             boolean exists = zkClient.exists(ROOT);

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/dto/ShenyuDictDTO.java
Patch:
@@ -22,12 +22,12 @@
 import java.io.Serializable;
 
 /**
- * this soul dict from web front.
+ * this shenyu dict from web front.
  *
  * @author dengliming
  */
 @Data
-public class SoulDictDTO implements Serializable {
+public class ShenyuDictDTO implements Serializable {
 
     private static final long serialVersionUID = -8639439741130267709L;
 

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/query/ShenyuDictQuery.java
Patch:
@@ -23,14 +23,14 @@
 import org.apache.shenyu.admin.model.page.PageParameter;
 
 /**
- * this is soul dict query.
+ * this is shenyu dict query.
  *
  * @author dengliming
  */
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
-public class SoulDictQuery {
+public class ShenyuDictQuery {
     /**
      * dict type.
      */

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/model/vo/PluginHandleVO.java
Patch:
@@ -95,7 +95,7 @@ public class PluginHandleVO implements Serializable {
      */
     private String dateUpdated;
 
-    private List<SoulDictVO> dictOptions;
+    private List<ShenyuDictVO> dictOptions;
 
     /**
      * build {@linkplain PluginHandleVO}.
@@ -104,7 +104,7 @@ public class PluginHandleVO implements Serializable {
      * @param dictOptions dictOptions
      * @return {@linkplain PluginHandleVO}
      */
-    public static PluginHandleVO buildPluginHandleVO(final PluginHandleDO pluginHandleDO, final List<SoulDictVO> dictOptions) {
+    public static PluginHandleVO buildPluginHandleVO(final PluginHandleDO pluginHandleDO, final List<ShenyuDictVO> dictOptions) {
         return Optional.ofNullable(pluginHandleDO)
                 .map(it -> new PluginHandleVO(pluginHandleDO.getId(), pluginHandleDO.getPluginId(),
                         pluginHandleDO.getField(), pluginHandleDO.getLabel(),

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/PluginServiceImpl.java
Patch:
@@ -314,15 +314,15 @@ private void insertPluginButtonResource(final String parentId, final String plug
                 .isLeaf(Boolean.TRUE).status(1).sort(0).icon(StringUtils.EMPTY).isRoute(0).build());
         switch (configGroupEnum) {
             case SELECTOR:
-                resourceDO.setTitle("SOUL.BUTTON.PLUGIN." + ConfigGroupEnum.SELECTOR.name() + "." + adminPluginOperateEnum.name());
+                resourceDO.setTitle("SHENYU.BUTTON.PLUGIN." + ConfigGroupEnum.SELECTOR.name() + "." + adminPluginOperateEnum.name());
                 resourceDO.setPerms("plugin:" + pluginName + "Selector:" + adminPluginOperateEnum.getName());
                 break;
             case RULE:
-                resourceDO.setTitle("SOUL.BUTTON.PLUGIN." + ConfigGroupEnum.RULE.name() + "." + adminPluginOperateEnum.name());
+                resourceDO.setTitle("SHENYU.BUTTON.PLUGIN." + ConfigGroupEnum.RULE.name() + "." + adminPluginOperateEnum.name());
                 resourceDO.setPerms("plugin:" + pluginName + "Rule:" + adminPluginOperateEnum.getName());
                 break;
             case PLUGIN:
-                resourceDO.setTitle("SOUL.BUTTON.PLUGIN." + adminPluginOperateEnum.name());
+                resourceDO.setTitle("SHENYU.BUTTON.PLUGIN." + adminPluginOperateEnum.name());
                 resourceDO.setPerms("plugin:" + pluginName + ":" + adminPluginOperateEnum.getName());
                 break;
             default:

File: shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java
Patch:
@@ -95,7 +95,7 @@ public class UpstreamCheckService {
      * @param eventPublisher           the event publisher
      * @param pluginMapper             the plugin mapper
      * @param selectorConditionMapper  the selectorCondition mapper
-     * @param shenyuRegisterCenterConfig the soul register center config
+     * @param shenyuRegisterCenterConfig the shenyu register center config
      */
     @Autowired(required = false)
     public UpstreamCheckService(final SelectorMapper selectorMapper, final ApplicationEventPublisher eventPublisher,

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/HttpSyncPropertiesTest.java
Patch:
@@ -46,7 +46,7 @@ public void testDefault() {
 
     @Test
     public void testSpecified() {
-        load(HttpSyncPropertiesConfiguration.class, "soul.sync.http.enabled=false", "soul.sync.http.refreshInterval=1m");
+        load(HttpSyncPropertiesConfiguration.class, "shenyu.sync.http.enabled=false", "shenyu.sync.http.refreshInterval=1m");
         HttpSyncProperties httpSyncProperties = getContext().getBean(HttpSyncProperties.class);
         assertThat(httpSyncProperties.isEnabled(), comparesEqualTo(false));
         assertThat(httpSyncProperties.getRefreshInterval(), comparesEqualTo(Duration.ofMinutes(1)));

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/SecretConfigurationTest.java
Patch:
@@ -33,7 +33,7 @@ public class SecretConfigurationTest extends AbstractConfigurationTest {
     
     @Test
     public void testNormalSecretConfiguration() {
-        load(SecretConfiguration.class, "soul.aes.secret.key=1234567890123456");
+        load(SecretConfiguration.class, "shenyu.aes.secret.key=1234567890123456");
         SecretProperties secretProperties = getContext().getBean(SecretProperties.class);
         Assertions.assertNotNull(secretProperties);
         String key = secretProperties.getKey();
@@ -51,7 +51,7 @@ public void testDefaultSecretConfiguration() {
     
     @Test
     public void testAbnormalSecretConfiguration() {
-        load(SecretConfiguration.class, "soul.aes.secret.key=");
+        load(SecretConfiguration.class, "shenyu.aes.secret.key=");
         SecretProperties secretProperties = getContext().getBean(SecretProperties.class);
         Assertions.assertNotNull(secretProperties);
         String key = secretProperties.getKey();

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/SecretPropertiesTest.java
Patch:
@@ -41,7 +41,7 @@ public void testSecretPropertiesAssignValue() {
         if (log.isDebugEnabled()) {
             log.debug("RandomKey is: " + randomKey);
         }
-        load(SecretPropertiesConfiguration.class, "soul.aes.secret.key=" + randomKey);
+        load(SecretPropertiesConfiguration.class, "shenyu.aes.secret.key=" + randomKey);
         SecretProperties secretProperties = getContext().getBean(SecretProperties.class);
         Assertions.assertEquals(secretProperties.getKey(), randomKey);
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/config/WebsocketSyncPropertiesTest.java
Patch:
@@ -40,7 +40,7 @@ public void testWebsocketSyncPropertiesDefaultValue() {
 
     @Test
     public void testWebsocketSyncPropertiesSetValue() {
-        load(WebsocketSyncPropertiesConfiguration.class, "soul.sync.websocket.enabled=false");
+        load(WebsocketSyncPropertiesConfiguration.class, "shenyu.sync.websocket.enabled=false");
         WebsocketSyncProperties websocketSyncProperties = getContext().getBean(WebsocketSyncProperties.class);
         assertThat(websocketSyncProperties.isEnabled(), comparesEqualTo(false));
     }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/controller/PluginControllerTest.java
Patch:
@@ -53,7 +53,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 /**
- * Test cases for SoulDictController.
+ * Test cases for ShenyuDictController.
  *
  * @author guanys
  */

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/mapper/DashboardUserMapperTest.java
Patch:
@@ -79,7 +79,7 @@ public void testSelectById() {
     @Test
     public void testFindByQuery() {
         DashboardUserDO record = buildDashboardUserDO();
-        record.setUserName("adminSoul");
+        record.setUserName("adminshenyu");
         int count = dashboardUserMapper.insert(record);
         assertThat(count, comparesEqualTo(1));
 

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/dto/AuthPathApplyDTOTest.java
Patch:
@@ -35,18 +35,18 @@ public final class AuthPathApplyDTOTest {
     public void setUp() throws Exception {
         authPathApplyDTOUnderTest = new AuthPathApplyDTO();
         authPathApplyDTOUnderTest.setPath("/");
-        authPathApplyDTOUnderTest.setAppName("soul");
+        authPathApplyDTOUnderTest.setAppName("shenyu");
     }
 
     @Test
     public void testHashCode() {
         final int result = authPathApplyDTOUnderTest.hashCode();
-        assertEquals(208649417, result);
+        assertEquals(-1763955322, result);
     }
 
     @Test
     public void testToString() {
         final String result = authPathApplyDTOUnderTest.toString();
-        assertEquals("AuthPathApplyDTO(appName=soul, path=/)", result);
+        assertEquals("AuthPathApplyDTO(appName=shenyu, path=/)", result);
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/query/ShenyuDictQueryTest.java
Patch:
@@ -20,14 +20,14 @@
 import org.apache.shenyu.admin.AbstractReflectGetterSetterTest;
 
 /**
- * Test case for SoulDictQuery.
+ * Test case for ShenyuDictQuery.
  *
  * @author wuudongdong
  */
-public final class SoulDictQueryTest extends AbstractReflectGetterSetterTest {
+public final class ShenyuDictQueryTest extends AbstractReflectGetterSetterTest {
 
     @Override
     protected Class<?> getTargetClass() {
-        return SoulDictQuery.class;
+        return ShenyuDictQuery.class;
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/model/vo/ShenyuDictVOTest.java
Patch:
@@ -20,14 +20,14 @@
 import org.apache.shenyu.admin.AbstractReflectGetterSetterTest;
 
 /**
- * Test case for SoulDictVO.
+ * Test case for ShenyuDictVO.
  *
  * @author midnight2104
  */
-public final class SoulDictVOTest extends AbstractReflectGetterSetterTest {
+public final class ShenyuDictVOTest extends AbstractReflectGetterSetterTest {
 
     @Override
     protected Class<?> getTargetClass() {
-        return SoulDictVO.class;
+        return ShenyuDictVO.class;
     }
 }

File: shenyu-admin/src/test/java/org/apache/shenyu/admin/service/ShenyuClientRegisterServiceTest.java
Patch:
@@ -47,7 +47,7 @@
 import static org.mockito.BDDMockito.given;
 
 /**
- * Test cases for SoulClientRegisterService.
+ * Test cases for ShenyuClientRegisterService.
  */
 @RunWith(MockitoJUnitRunner.Silent.class)
 public final class ShenyuClientRegisterServiceTest {

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-client/shenyu-spring-boot-starter-client-common/src/main/java/org/apache/shenyu/springboot/starter/client/common/config/ShenyuClientCommonBeanConfiguration.java
Patch:
@@ -47,7 +47,7 @@ public ShenyuClientRegisterRepository shenyuClientRegisterRepository(final Sheny
      * @return the Register Center Config
      */
     @Bean
-    @ConfigurationProperties(prefix = "soul.client")
+    @ConfigurationProperties(prefix = "shenyu.client")
     public ShenyuRegisterCenterConfig shenyuRegisterCenterConfig() {
         return new ShenyuRegisterCenterConfig();
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-divide/src/main/java/org/apache/shenyu/spring/boot/plugin/divide/DividePluginConfiguration.java
Patch:
@@ -98,7 +98,7 @@ public WebSocketService webSocketService() {
      * @return the soul context decorator
      */
     @Bean
-    public ShenyuContextDecorator divideSoulContextDecorator() {
+    public ShenyuContextDecorator divideShenyuContextDecorator() {
         return new DivideShenyuContextDecorator();
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-dubbo-common/src/main/java/org/apache/shenyu/spring/boot/plugin/dubbo/common/DubboCommonConfiguration.java
Patch:
@@ -42,7 +42,7 @@ public class DubboCommonConfiguration {
      * @return the soul context decorator
      */
     @Bean
-    public ShenyuContextDecorator dubboSoulContextDecorator() {
+    public ShenyuContextDecorator dubboShenyuContextDecorator() {
         return new DubboShenyuContextDecorator();
     }
     

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-grpc/src/main/java/org/apache/shenyu/spring/boot/starter/plugin/grpc/GrpcPluginConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public PluginDataHandler grpcPluginDataHandler() {
      * @return the soul context decorator
      */
     @Bean
-    public ShenyuContextDecorator grpcSoulContextDecorator() {
+    public ShenyuContextDecorator grpcShenyuContextDecorator() {
         return new GrpcShenyuContextDecorator();
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-httpclient/src/main/java/org/apache/shenyu/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -59,7 +59,7 @@ public class HttpClientPluginConfiguration {
      * @return the http client properties
      */
     @Bean
-    @ConfigurationProperties(prefix = "soul.httpclient")
+    @ConfigurationProperties(prefix = "shenyu.httpclient")
     public HttpClientProperties httpClientProperties() {
         return new HttpClientProperties();
     }
@@ -145,7 +145,7 @@ public HttpClient httpClient(final HttpClientProperties properties) {
      * The type Web client configuration.
      */
     @Configuration
-    @ConditionalOnProperty(name = "soul.httpclient.strategy", havingValue = "webClient", matchIfMissing = true)
+    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "webClient", matchIfMissing = true)
     static class WebClientConfiguration {
 
         /**
@@ -178,7 +178,7 @@ public ShenyuPlugin webClientResponsePlugin() {
      * The type Netty http client configuration.
      */
     @Configuration
-    @ConditionalOnProperty(name = "soul.httpclient.strategy", havingValue = "netty")
+    @ConditionalOnProperty(name = "shenyu.httpclient.strategy", havingValue = "netty")
     static class NettyHttpClientConfiguration {
 
         /**

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-motan/src/main/java/org/apache/shenyu/spring/boot/starter/plugin/motan/MotanPluginConfiguration.java
Patch:
@@ -87,7 +87,7 @@ public MetaDataSubscriber motanMetaDataSubscriber() {
      * @return the soul context decorator
      */
     @Bean
-    public ShenyuContextDecorator motanSoulContextDecorator() {
+    public ShenyuContextDecorator motanShenyuContextDecorator() {
         return new MotanShenyuContextDecorator();
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-sofa/src/main/java/org/apache/shenyu/spring/boot/starter/plugin/sofa/SofaPluginConfiguration.java
Patch:
@@ -88,7 +88,7 @@ public MetaDataSubscriber sofaMetaDataSubscriber() {
      * @return the soul context decorator
      */
     @Bean
-    public ShenyuContextDecorator sofaSoulContextDecorator() {
+    public ShenyuContextDecorator sofaShenyuContextDecorator() {
         return new SofaShenyuContextDecorator();
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-springcloud/src/main/java/org/apache/shenyu/springboot/starter/plugin/springcloud/SpringCloudPluginConfiguration.java
Patch:
@@ -61,7 +61,7 @@ public ShenyuPlugin springCloudPlugin(final ObjectProvider<LoadBalancerClient> l
      * @return the soul context decorator
      */
     @Bean
-    public ShenyuContextDecorator springCloudDubboSoulContextDecorator() {
+    public ShenyuContextDecorator springCloudDubboShenyuContextDecorator() {
         return new SpringCloudShenyuContextDecorator();
     }
 

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-plugin/shenyu-spring-boot-starter-plugin-tars/src/main/java/org/apache/shenyu/spring/boot/starter/plugin/tars/TarsPluginConfiguration.java
Patch:
@@ -86,7 +86,7 @@ public PluginDataHandler tarsPluginDataHandler() {
      * @return the soul context decorator
      */
     @Bean
-    public ShenyuContextDecorator tarsSoulContextDecorator() {
+    public ShenyuContextDecorator tarsShenyuContextDecorator() {
         return new TarsShenyuContextDecorator();
     }
 }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-http/src/main/java/org/apache/shenyu/spring/boot/starter/sync/data/http/HttpSyncDataConfiguration.java
Patch:
@@ -42,7 +42,7 @@
  */
 @Configuration
 @ConditionalOnClass(HttpSyncDataService.class)
-@ConditionalOnProperty(prefix = "soul.sync.http", name = "url")
+@ConditionalOnProperty(prefix = "shenyu.sync.http", name = "url")
 @Slf4j
 public class HttpSyncDataConfiguration {
 
@@ -58,7 +58,7 @@ public class HttpSyncDataConfiguration {
     @Bean
     public SyncDataService httpSyncDataService(final ObjectProvider<HttpConfig> httpConfig, final ObjectProvider<PluginDataSubscriber> pluginSubscriber,
                                            final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) {
-        log.info("you use http long pull sync soul data");
+        log.info("you use http long pull sync shenyu data");
         return new HttpSyncDataService(Objects.requireNonNull(httpConfig.getIfAvailable()), Objects.requireNonNull(pluginSubscriber.getIfAvailable()),
                 metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList));
     }
@@ -69,7 +69,7 @@ public SyncDataService httpSyncDataService(final ObjectProvider<HttpConfig> http
      * @return the http config
      */
     @Bean
-    @ConfigurationProperties(prefix = "soul.sync.http")
+    @ConfigurationProperties(prefix = "shenyu.sync.http")
     public HttpConfig httpConfig() {
         return new HttpConfig();
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-http/src/test/java/org/apache/shenyu/spring/boot/starter/sync/data/http/HttpClientPluginConfigurationTest.java
Patch:
@@ -58,9 +58,9 @@
         },
         webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
         properties = {
-                "soul.sync.http.url=http://localhost:18848",
-                "soul.sync.http.delayTime=3",
-                "soul.sync.http.connectionTimeout=5"
+                "shenyu.sync.http.url=http://localhost:18848",
+                "shenyu.sync.http.delayTime=3",
+                "shenyu.sync.http.connectionTimeout=5"
         })
 @EnableAutoConfiguration
 @MockBean({PluginDataSubscriber.class, ServletWebServerFactory.class})

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-nacos/src/main/java/org/apache/shenyu/springboot/starter/sync/data/nacos/NacosSyncDataConfiguration.java
Patch:
@@ -46,7 +46,7 @@
  */
 @Configuration
 @ConditionalOnClass(NacosSyncDataService.class)
-@ConditionalOnProperty(prefix = "soul.sync.nacos", name = "url")
+@ConditionalOnProperty(prefix = "shenyu.sync.nacos", name = "url")
 @Slf4j
 public class NacosSyncDataConfiguration {
 
@@ -62,7 +62,7 @@ public class NacosSyncDataConfiguration {
     @Bean
     public SyncDataService nacosSyncDataService(final ObjectProvider<ConfigService> configService, final ObjectProvider<PluginDataSubscriber> pluginSubscriber,
                                            final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) {
-        log.info("you use nacos sync soul data.......");
+        log.info("you use nacos sync shenyu data.......");
         return new NacosSyncDataService(configService.getIfAvailable(), pluginSubscriber.getIfAvailable(),
                 metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList));
     }
@@ -103,7 +103,7 @@ public ConfigService nacosConfigService(final NacosConfig nacosConfig) throws Ex
      * @return the http config
      */
     @Bean
-    @ConfigurationProperties(prefix = "soul.sync.nacos")
+    @ConfigurationProperties(prefix = "shenyu.sync.nacos")
     public NacosConfig nacosConfig() {
         return new NacosConfig();
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-nacos/src/test/java/org/apache/shenyu/springboot/starter/sync/data/nacos/NacosSyncDataConfigurationTest.java
Patch:
@@ -39,8 +39,8 @@
 @SpringBootTest(
         classes = NacosSyncDataConfiguration.class,
         properties = {
-                "soul.sync.nacos.url=localhost:8848",
-                "soul.sync.nacos.namespace=1c10d748-af86-43b9-8265-75f487d20c6c"
+                "shenyu.sync.nacos.url=localhost:8848",
+                "shenyu.sync.nacos.namespace=1c10d748-af86-43b9-8265-75f487d20c6c"
         })
 @EnableAutoConfiguration
 @MockBean(name = "nacosConfigService", value = NacosMockConfigService.class, answer = CALLS_REAL_METHODS)

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-websocket/src/main/java/org/apache/shenyu/spring/boot/starter/sync/data/websocket/WebsocketSyncDataConfiguration.java
Patch:
@@ -41,7 +41,7 @@
  */
 @Configuration
 @ConditionalOnClass(WebsocketSyncDataService.class)
-@ConditionalOnProperty(prefix = "soul.sync.websocket", name = "urls")
+@ConditionalOnProperty(prefix = "shenyu.sync.websocket", name = "urls")
 @Slf4j
 public class WebsocketSyncDataConfiguration {
 
@@ -57,7 +57,7 @@ public class WebsocketSyncDataConfiguration {
     @Bean
     public SyncDataService websocketSyncDataService(final ObjectProvider<WebsocketConfig> websocketConfig, final ObjectProvider<PluginDataSubscriber> pluginSubscriber,
                                            final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) {
-        log.info("you use websocket sync soul data.......");
+        log.info("you use websocket sync shenyu data.......");
         return new WebsocketSyncDataService(websocketConfig.getIfAvailable(WebsocketConfig::new), pluginSubscriber.getIfAvailable(),
                 metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList));
     }
@@ -68,7 +68,7 @@ public SyncDataService websocketSyncDataService(final ObjectProvider<WebsocketCo
      * @return the websocket config
      */
     @Bean
-    @ConfigurationProperties(prefix = "soul.sync.websocket")
+    @ConfigurationProperties(prefix = "shenyu.sync.websocket")
     public WebsocketConfig websocketConfig() {
         return new WebsocketConfig();
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-websocket/src/test/java/org/apache/shenyu/spring/boot/starter/sync/data/websocket/WebsocketSyncDataConfigurationTest.java
Patch:
@@ -44,7 +44,7 @@
         },
         webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
         properties = {
-                "soul.sync.websocket.urls=ws://localhost:9095/websocket"
+                "shenyu.sync.websocket.urls=ws://localhost:9095/websocket"
         })
 @EnableAutoConfiguration
 @MockBean(PluginDataSubscriber.class)

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-zookeeper/src/main/java/org/apache/shenyu/spring/boot/sync/data/zookeeper/ZookeeperConfig.java
Patch:
@@ -26,7 +26,7 @@
  * @author xiaoyu(Myth)
  */
 @Data
-@ConfigurationProperties(prefix = "soul.sync.zookeeper")
+@ConfigurationProperties(prefix = "shenyu.sync.zookeeper")
 public class ZookeeperConfig {
 
     private String url;

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-zookeeper/src/main/java/org/apache/shenyu/spring/boot/sync/data/zookeeper/ZookeeperSyncDataConfiguration.java
Patch:
@@ -41,7 +41,7 @@
  */
 @Configuration
 @ConditionalOnClass(ZookeeperSyncDataService.class)
-@ConditionalOnProperty(prefix = "soul.sync.zookeeper", name = "url")
+@ConditionalOnProperty(prefix = "shenyu.sync.zookeeper", name = "url")
 @EnableConfigurationProperties(ZookeeperConfig.class)
 @Slf4j
 public class ZookeeperSyncDataConfiguration {
@@ -58,7 +58,7 @@ public class ZookeeperSyncDataConfiguration {
     @Bean
     public SyncDataService syncDataService(final ObjectProvider<ZkClient> zkClient, final ObjectProvider<PluginDataSubscriber> pluginSubscriber,
                                            final ObjectProvider<List<MetaDataSubscriber>> metaSubscribers, final ObjectProvider<List<AuthDataSubscriber>> authSubscribers) {
-        log.info("you use zookeeper sync soul data.......");
+        log.info("you use zookeeper sync shenyu data.......");
         return new ZookeeperSyncDataService(zkClient.getIfAvailable(), pluginSubscriber.getIfAvailable(),
                 metaSubscribers.getIfAvailable(Collections::emptyList), authSubscribers.getIfAvailable(Collections::emptyList));
     }

File: shenyu-spring-boot-starter/shenyu-spring-boot-starter-sync-data-center/shenyu-spring-boot-starter-sync-data-zookeeper/src/test/java/org/apache/shenyu/spring/boot/sync/data/zookeeper/ZookeeperSyncDataConfigurationTest.java
Patch:
@@ -46,9 +46,9 @@
         },
         webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
         properties = {
-                "soul.sync.zookeeper.url=localhost:2181",
-                "soul.sync.zookeeper.sessionTimeout=30000",
-                "soul.sync.zookeeper.connectionTimeout=500"
+                "shenyu.sync.zookeeper.url=localhost:2181",
+                "shenyu.sync.zookeeper.sessionTimeout=30000",
+                "shenyu.sync.zookeeper.connectionTimeout=500"
         })
 @EnableAutoConfiguration
 @MockBean({PluginDataSubscriber.class, ZkClient.class})

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -100,12 +100,12 @@ public static ApplicationConfigCache getInstance() {
      */
     public void init(final DubboRegisterConfig dubboRegisterConfig) {
         if (applicationConfig == null) {
-            applicationConfig = new ApplicationConfig("soul_proxy");
+            applicationConfig = new ApplicationConfig("shenyu_proxy");
         }
         if (needUpdateRegistryConfig(dubboRegisterConfig)) {
             RegistryConfig registryConfigTemp = new RegistryConfig();
             registryConfigTemp.setProtocol(dubboRegisterConfig.getProtocol());
-            registryConfigTemp.setId("soul_proxy");
+            registryConfigTemp.setId("shenyu_proxy");
             registryConfigTemp.setRegister(false);
             registryConfigTemp.setAddress(dubboRegisterConfig.getRegister());
             Optional.ofNullable(dubboRegisterConfig.getGroup()).ifPresent(registryConfigTemp::setGroup);

File: shenyu-plugin/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/proxy/AlibabaDubboProxyService.java
Patch:
@@ -68,7 +68,7 @@ public Object genericInvoker(final String body, final MetaData metaData) throws
         GenericService genericService = reference.get();
         try {
             Pair<String[], Object[]> pair;
-            if (ParamCheckUtils.dubboBodyIsEmpty(body)) {
+            if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {
                 pair = new ImmutablePair<>(new String[]{}, new Object[]{});
             } else {
                 pair = bodyParamResolveService.buildParameter(body, metaData.getParameterTypes());

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/cache/ApplicationConfigCache.java
Patch:
@@ -100,12 +100,12 @@ public static ApplicationConfigCache getInstance() {
      */
     public void init(final DubboRegisterConfig dubboRegisterConfig) {
         if (applicationConfig == null) {
-            applicationConfig = new ApplicationConfig("soul_proxy");
+            applicationConfig = new ApplicationConfig("shenyu_proxy");
         }
         if (needUpdateRegistryConfig(dubboRegisterConfig)) {
             RegistryConfig registryConfigTemp = new RegistryConfig();
             registryConfigTemp.setProtocol(dubboRegisterConfig.getProtocol());
-            registryConfigTemp.setId("soul_proxy");
+            registryConfigTemp.setId("shenyu_proxy");
             registryConfigTemp.setRegister(false);
             registryConfigTemp.setAddress(dubboRegisterConfig.getRegister());
             Optional.ofNullable(dubboRegisterConfig.getGroup()).ifPresent(registryConfigTemp::setGroup);

File: shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -83,7 +83,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
         }
         GenericService genericService = reference.get();
         Pair<String[], Object[]> pair;
-        if (ParamCheckUtils.dubboBodyIsEmpty(body)) {
+        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {
             pair = new ImmutablePair<>(new String[]{}, new Object[]{});
         } else {
             pair = bodyParamResolveService.buildParameter(body, metaData.getParameterTypes());

File: shenyu-plugin/shenyu-plugin-sofa/src/main/java/org/apache/shenyu/plugin/sofa/proxy/SofaProxyService.java
Patch:
@@ -76,7 +76,7 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
         }
         GenericService genericService = reference.refer();
         Pair<String[], Object[]> pair;
-        if (null == body || "".equals(body) || "{}".equals(body) || "null".equals(body)) {
+        if (StringUtils.isBlank(metaData.getParameterTypes()) || null == body || "".equals(body) || "{}".equals(body) || "null".equals(body)) {
             pair = new ImmutablePair<>(new String[]{}, new Object[]{});
         } else {
             pair = bodyParamResolveService.buildParameter(body, metaData.getParameterTypes());

File: shenyu-client/shenyu-client-dubbo/shenyu-client-alibaba-dubbo/src/test/java/org/apache/shenyu/client/alibaba/dubbo/validation/AlibabaDubboClientValidatorTest.java
Patch:
@@ -39,7 +39,8 @@
 @Ignore
 public final class AlibabaDubboClientValidatorTest {
 
-    private static final String MOCK_SERVICE_URL = "mock://test:28000/MockValidatorTarget";
+    private static final String MOCK_SERVICE_URL = 
+            "mock://test:28000/org.apache.shenyu.client.alibaba.dubbo.validation.mock.MockValidatorTarget";
 
     @Test
     public void testItWithNonExistMethod() {

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/ApacheDubboClientValidationTest.java
Patch:
@@ -40,7 +40,7 @@ public void setUp() {
     @Test
     public void testGetValidator() {
         String mockServiceUrl =
-                "mock://localhost:28000/MockValidatorTarget";
+                "mock://localhost:28000/org.apache.shenyu.client.apache.dubbo.validation.mock.MockValidatorTarget";
         final URL url = URL.valueOf(mockServiceUrl);
         apacheDubboClientValidationUnderTest.getValidator(url);
     }

File: shenyu-client/shenyu-client-dubbo/shenyu-client-apache-dubbo/src/test/java/org/apache/shenyu/client/apache/dubbo/validation/ApacheDubboClientValidatorTest.java
Patch:
@@ -44,7 +44,7 @@
 public final class ApacheDubboClientValidatorTest {
 
     private static final String MOCK_SERVICE_URL =
-            "mock://localhost:28000/MockValidatorTarget";
+            "mock://localhost:28000/org.apache.shenyu.client.apache.dubbo.validation.mock.MockValidatorTarget";
 
     private ApacheDubboClientValidator apacheDubboClientValidatorUnderTest;
 
@@ -58,15 +58,15 @@ public void validate() {
                 + "?accepts=500&anyhost=true&application=soul-proxy"
                 + "&bind.ip=127.0.0.1&bind.port=20880&deprecated=false"
                 + "&dubbo=2.0.2&dynamic=true&generic=false"
-                + "&interface=TestService"
+                + "&interface=org.apache.shenyu.client.apache.dubbo.validation.service.TestService"
                 + "&keep.alive=true&methods=test&pid=67352&qos.enable=false&release=2.7.0"
                 + "&side=provider&threadpool=fixed&threads=500&timeout=20000"
                 + "&timestamp=1608119259859&validation=soulValidation");
         Validator apacheDubboClientValidator = new ApacheDubboClientValidation().getValidator(url);
         try {
             apacheDubboClientValidator.validate("test",
                     new Class[]{TestService.TestObject.class},
-                    new Object[]{TestService.TestObject.builder().age(null).build()});
+                    new Object[]{TestService.TestObject.builder().age(1).build()});
         } catch (Exception e) {
             assertThat("age cannot be null.", is(e.getMessage()));
         }

File: soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/executor/RedisRateLimiter.java
Patch:
@@ -67,7 +67,7 @@ public Mono<RateLimiterResponse> isAllowed(final String id, final RateLimiterHan
                     Long tokensLeft = results.get(1);
                     return new RateLimiterResponse(allowed, tokensLeft);
                 })
-                .doOnError(throwable -> log.error("Error determining if user allowed from redis:{}", throwable.getMessage()))
+                .doOnError(throwable -> log.error("Error occurred while judging if user is allowed by RedisRateLimiter:{}", throwable.getMessage()))
                 .doFinally(signalType -> rateLimiterAlgorithm.callback(script, keys, scriptArgs));
     }
     

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/MetaDataServiceImpl.java
Patch:
@@ -82,16 +82,19 @@ public String createOrUpdate(final MetaDataDTO metaDataDTO) {
         }
         MetaDataDO metaDataDO = MetaDataTransfer.INSTANCE.mapToEntity(metaDataDTO);
         DataEventTypeEnum eventType;
+        String pathDesc = metaDataDO.getPathDesc() == null ? "" : metaDataDO.getPathDesc();
         if (StringUtils.isEmpty(metaDataDTO.getId())) {
             Timestamp currentTime = new Timestamp(System.currentTimeMillis());
             metaDataDO.setId(UUIDUtils.getInstance().generateShortUuid());
+            metaDataDO.setPathDesc(pathDesc);
             metaDataDO.setDateCreated(currentTime);
             metaDataDO.setDateUpdated(currentTime);
             metaDataMapper.insert(metaDataDO);
             eventType = DataEventTypeEnum.CREATE;
         } else {
             MetaDataDO m = metaDataMapper.selectById(metaDataDTO.getId());
             Optional.ofNullable(m).ifPresent(e -> metaDataDTO.setEnabled(e.getEnabled()));
+            metaDataDO.setPathDesc(pathDesc);
             metaDataMapper.update(metaDataDO);
             eventType = DataEventTypeEnum.UPDATE;
         }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -352,7 +352,7 @@ public CommonPager<AppAuthVO> listByPage(final AppAuthQuery appAuthQuery) {
     public List<AppAuthData> listAll() {
         return appAuthMapper.selectAll()
                 .stream()
-                .map(appAuthDO -> new AppAuthData(appAuthDO.getAppKey(), appAuthDO.getAppSecret(), appAuthDO.getEnabled(), appAuthDO.getOpen(), null, null))
+                .map(appAuthDO -> buildByEntity(appAuthDO))
                 .collect(Collectors.toList());
     }
 

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/WebsocketSyncDataService.java
Patch:
@@ -88,7 +88,7 @@ public WebsocketSyncDataService(final WebsocketConfig websocketConfig,
                             }
                         } else {
                             client.sendPing();
-                            log.info("websocket send to [{}] ping message successful", client.getURI().toString());
+                            log.debug("websocket send to [{}] ping message successful", client.getURI().toString());
                         }
                     } catch (InterruptedException e) {
                         log.error("websocket connect is error :{}", e.getMessage());

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/DashboardUserController.java
Patch:
@@ -24,11 +24,11 @@
 import org.dromara.soul.admin.model.page.PageParameter;
 import org.dromara.soul.admin.model.query.DashboardUserQuery;
 import org.dromara.soul.admin.model.result.SoulAdminResult;
+import org.dromara.soul.admin.model.vo.DashboardUserEditVO;
+import org.dromara.soul.admin.model.vo.DashboardUserVO;
 import org.dromara.soul.admin.service.DashboardUserService;
 import org.dromara.soul.admin.utils.AesUtils;
 import org.dromara.soul.admin.utils.SoulResultMessage;
-import org.dromara.soul.admin.model.vo.DashboardUserEditVO;
-import org.dromara.soul.admin.model.vo.DashboardUserVO;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/RuleController.java
Patch:
@@ -22,9 +22,9 @@
 import org.dromara.soul.admin.model.page.PageParameter;
 import org.dromara.soul.admin.model.query.RuleQuery;
 import org.dromara.soul.admin.model.result.SoulAdminResult;
+import org.dromara.soul.admin.model.vo.RuleVO;
 import org.dromara.soul.admin.service.RuleService;
 import org.dromara.soul.admin.utils.SoulResultMessage;
-import org.dromara.soul.admin.model.vo.RuleVO;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -66,6 +66,7 @@ public RuleController(final RuleService ruleService) {
     public SoulAdminResult queryRules(final String selectorId, final Integer currentPage, final Integer pageSize) {
         CommonPager<RuleVO> commonPager = ruleService.listByPage(new RuleQuery(selectorId, new PageParameter(currentPage, pageSize)));
         return SoulAdminResult.success(SoulResultMessage.QUERY_SUCCESS, commonPager);
+
     }
 
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/SelectorController.java
Patch:
@@ -22,9 +22,9 @@
 import org.dromara.soul.admin.model.page.PageParameter;
 import org.dromara.soul.admin.model.query.SelectorQuery;
 import org.dromara.soul.admin.model.result.SoulAdminResult;
+import org.dromara.soul.admin.model.vo.SelectorVO;
 import org.dromara.soul.admin.service.SelectorService;
 import org.dromara.soul.admin.utils.SoulResultMessage;
-import org.dromara.soul.admin.model.vo.SelectorVO;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -66,6 +66,7 @@ public SelectorController(final SelectorService selectorService) {
     public SoulAdminResult querySelectors(final String pluginId, final Integer currentPage, final Integer pageSize) {
         CommonPager<SelectorVO> commonPager = selectorService.listByPage(new SelectorQuery(pluginId, new PageParameter(currentPage, pageSize)));
         return SoulAdminResult.success(SoulResultMessage.QUERY_SUCCESS, commonPager);
+
     }
 
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/mapper/AppAuthMapper.java
Patch:
@@ -114,7 +114,7 @@ public interface AppAuthMapper {
     int updateSelective(AppAuthDO appAuthDO);
 
     /**
-     * delete application authority.
+     * deleteSelector application authority.
      *
      * @param id primary key.
      * @return rows int

File: soul-admin/src/main/java/org/dromara/soul/admin/model/query/RuleQuery.java
Patch:
@@ -19,11 +19,10 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import org.dromara.soul.admin.model.page.PageParameter;
 
-import java.io.Serializable;
-
 /**
  * this is rule query.
  *
@@ -32,7 +31,8 @@
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
-public class RuleQuery implements Serializable {
+@EqualsAndHashCode(callSuper = true)
+public class RuleQuery extends FilterQuery {
 
     private static final long serialVersionUID = -8048484230783429888L;
 

File: soul-admin/src/main/java/org/dromara/soul/admin/model/query/SelectorQuery.java
Patch:
@@ -19,11 +19,10 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import org.dromara.soul.admin.model.page.PageParameter;
 
-import java.io.Serializable;
-
 /**
  * this is selector query.
  *
@@ -32,7 +31,8 @@
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
-public class SelectorQuery implements Serializable {
+@EqualsAndHashCode(callSuper = true)
+public class SelectorQuery extends FilterQuery {
 
     private static final long serialVersionUID = -1019736306667647529L;
 

File: soul-admin/src/main/java/org/dromara/soul/admin/model/vo/LoginDashboardUserVO.java
Patch:
@@ -53,7 +53,7 @@ public static LoginDashboardUserVO buildLoginDashboardUserVO(final DashboardUser
                 .map(item -> {
                     LoginDashboardUserVO vo = new LoginDashboardUserVO();
                     BeanUtils.copyProperties(item, vo);
-                    vo.setToken(JwtUtils.generateToken(vo.getUserName()));
+                    vo.setToken(JwtUtils.generateToken(vo.getUserName(), vo.getId()));
                     return vo;
                 }).orElse(null);
     }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/PermissionServiceImpl.java
Patch:
@@ -80,6 +80,7 @@ public PermissionServiceImpl(final DashboardUserMapper dashboardUserMapper, fina
     @Override
     public PermissionMenuVO getPermissionMenu(final String token) {
         String userName = JwtUtils.getIssuer(token);
+        JwtUtils.setUserId(token);
         List<ResourceVO> resourceVOList = getResourceListByUserName(userName);
         if (CollectionUtils.isNotEmpty(resourceVOList)) {
             List<MenuInfo> menuInfoList = new ArrayList<>();

File: soul-admin/src/test/java/org/dromara/soul/admin/utils/JwtUtilsTest.java
Patch:
@@ -57,7 +57,7 @@ public void testGetIssuer() {
 
     @Test
     public void testGenerateToken() {
-        String token = JwtUtils.generateToken("userName");
+        String token = JwtUtils.generateToken("userName", "userId");
         assertThat(token, notNullValue());
         assertThat(JwtUtils.getIssuerDate(token), comparesEqualTo(LocalDate.now()));
         assertThat(JwtUtils.getIssuer(token), is("userName"));

File: soul-register-center/soul-register-server/soul-register-server-nacos/src/main/java/org/dromara/soul/register/server/nacos/NacosServerRegisterRepository.java
Patch:
@@ -186,7 +186,7 @@ private void registerURI(final String contextPath, final String serviceName, fin
                 }
             }
         });
-        if (rpcType.equals(RpcTypeEnum.HTTP.getName()) || rpcType.equals(RpcTypeEnum.TARS.getName()) || rpcType.equals(RpcTypeEnum.GRPC.getName())) {
+        if (!RpcTypeEnum.acquireSupportURIs().contains(RpcTypeEnum.acquireByName(rpcType))) {
             return;
         }
         if (registerDTOList.isEmpty()) {

File: soul-plugin/soul-plugin-context-path/src/main/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPlugin.java
Patch:
@@ -25,10 +25,11 @@
 import org.dromara.soul.common.dto.convert.rule.impl.ContextMappingHandle;
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.enums.RpcTypeEnum;
-import org.dromara.soul.common.utils.GsonUtils;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
+import org.dromara.soul.plugin.contextpath.cache.ApplicationConfigCache;
+import org.dromara.soul.plugin.contextpath.handler.ContextPathMappingPluginDataHandler;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -46,8 +47,7 @@ public class ContextPathMappingPlugin extends AbstractSoulPlugin {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {
         final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);
         assert soulContext != null;
-        final String handle = rule.getHandle();
-        final ContextMappingHandle contextMappingHandle = GsonUtils.getInstance().fromJson(handle, ContextMappingHandle.class);
+        final ContextMappingHandle contextMappingHandle = ApplicationConfigCache.getInstance().obtainHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(rule));
         if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {
             log.error("context path mapping rule configuration is null ：{}", rule);
             return chain.execute(exchange);

File: soul-plugin/soul-plugin-divide/src/main/java/org/dromara/soul/plugin/divide/DividePlugin.java
Patch:
@@ -27,7 +27,6 @@
 import org.dromara.soul.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.enums.RpcTypeEnum;
-import org.dromara.soul.common.utils.GsonUtils;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
@@ -37,6 +36,7 @@
 import org.dromara.soul.plugin.api.utils.WebFluxResultUtils;
 import org.dromara.soul.plugin.divide.balance.utils.LoadBalanceUtils;
 import org.dromara.soul.plugin.divide.cache.UpstreamCacheManager;
+import org.dromara.soul.plugin.divide.handler.DividePluginDataHandler;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -55,7 +55,7 @@ public class DividePlugin extends AbstractSoulPlugin {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {
         final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);
         assert soulContext != null;
-        final DivideRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), DivideRuleHandle.class);
+        final DivideRuleHandle ruleHandle = UpstreamCacheManager.getInstance().obtainHandle(DividePluginDataHandler.getCacheKeyName(rule));
         final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId());
         if (CollectionUtils.isEmpty(upstreamList)) {
             log.error("divide upstream configuration error： {}", rule.toString());

File: soul-register-center/soul-register-server/soul-register-server-etcd/src/main/java/org/dromara/soul/register/server/etcd/EtcdServerRegisterRepository.java
Patch:
@@ -68,7 +68,7 @@ private void initSubscribe() {
     }
 
     private void subscribeMetaData(final String rpcType) {
-        String rpcPath = RegisterPathConstants.buildURIContextPathParent(rpcType);
+        String rpcPath = RegisterPathConstants.buildMetaDataContextPathParent(rpcType);
         List<String> metadataPaths = client.getChildren(rpcPath);
         for (String metadataPath: metadataPaths) {
             String data = client.read(metadataPath);

File: soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/executor/RedisRateLimiter.java
Patch:
@@ -66,7 +66,9 @@ public Mono<RateLimiterResponse> isAllowed(final String id, final RateLimiterHan
                     boolean allowed = results.get(0) == 1L;
                     Long tokensLeft = results.get(1);
                     return new RateLimiterResponse(allowed, tokensLeft);
-                }).doOnError(throwable -> log.error("Error determining if user allowed from redis:{}", throwable.getMessage()));
+                })
+                .doOnError(throwable -> log.error("Error determining if user allowed from redis:{}", throwable.getMessage()))
+                .doFinally(signalType -> rateLimiterAlgorithm.callback(script, keys, scriptArgs));
     }
     
     private String doubleToString(final double param) {

File: soul-plugin/soul-plugin-ratelimiter/src/test/java/org/dromara/soul/plugin/ratelimiter/executor/RedisRateLimiterScriptsTest.java
Patch:
@@ -92,13 +92,13 @@ public void leakyBucketLuaTest() {
     public void concurrentLuaTest() {
         RateLimiterAlgorithm<?> rateLimiterAlgorithm = RateLimiterAlgorithmFactory.newInstance("concurrent");
         RedisScript<?> script = rateLimiterAlgorithm.getScript();
-        List<String> keys = Stream.of("test-concurrent").collect(Collectors.toList());
+        List<String> keys = Stream.of("test-concurrent", "cd849432").collect(Collectors.toList());
         List<String> scriptArgs = Arrays.asList(10 + "", 100 + "", Instant.now().getEpochSecond() + "", "1");
         Flux<List<Long>> resultFlux = Singleton.INST.get(ReactiveRedisTemplate.class).execute(script, keys, scriptArgs);
         StepVerifier
                 .create(resultFlux)
                 .expectSubscription()
-                .expectNext(Arrays.asList(1L, 99L))
+                .expectNext(Arrays.asList(1L, 1L))
                 .expectComplete()
                 .verify();
     }

File: soul-admin/src/test/java/org/dromara/soul/admin/service/UpstreamCheckServiceTest.java
Patch:
@@ -44,6 +44,7 @@
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.anyList;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.when;
 
@@ -103,7 +104,7 @@ public void setUp() {
                 .handle("[{\"upstreamHost\":\"localhost\",\"protocol\":\"http://\",\"localhost\":\"divide-upstream-60\",\"weight\":60}]")
                 .build();
         //stubbing
-        when(pluginMapper.selectByName(anyString())).thenReturn(pluginDO);
+        when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));
         when(pluginMapper.selectById(anyString())).thenReturn(pluginDO);
         when(selectorMapper.findByPluginId(anyString())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));
         when(selectorMapper.updateSelective(any(SelectorDO.class))).thenReturn(1);

File: soul-plugin/soul-plugin-httpclient/src/test/java/org/dromara/soul/plugin/httpclient/response/NettyClientResponsePluginTest.java
Patch:
@@ -140,14 +140,13 @@ public void testGetOrder() {
      */
     @Test
     public void testNamed() {
-        assertEquals("NettyWriteResponse", nettyClientResponsePlugin.named());
+        assertEquals("NettyClientResponse", nettyClientResponsePlugin.named());
     }
 
     private ServerWebExchange generateServerWebExchange() {
         ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/test").build());
         exchange.getAttributes().put(Constants.CONTEXT, mock(SoulContext.class));
         exchange.getAttributes().put(Constants.HTTP_URL, "/test");
-
         return exchange;
     }
 }

File: soul-plugin/soul-plugin-httpclient/src/test/java/org/dromara/soul/plugin/httpclient/response/WebClientResponsePluginTest.java
Patch:
@@ -66,9 +66,7 @@ public void setup() {
         ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
         SpringBeanUtils.getInstance().setCfgContext(context);
         when(context.getBean(SoulResult.class)).thenReturn(mock(SoulResult.class));
-
         chain = mock(SoulPluginChain.class);
-
         webClientResponsePlugin = new WebClientResponsePlugin();
     }
 

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/service/PrometheusBootService.java
Patch:
@@ -59,6 +59,7 @@ public void start(final MetricsConfig metricsConfig) {
     public void stop() {
         if (server != null) {
             server.stop();
+            registered.set(false);
         }
     }
     

File: soul-examples/soul-examples-dubbo/soul-examples-dubbo-api/src/main/java/org/dromara/soul/examples/dubbo/api/service/DubboTestService.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.examples.dubbo.api.service;
 
 import org.dromara.soul.examples.dubbo.api.entity.DubboTest;
+import org.dromara.soul.examples.dubbo.api.entity.ListResp;
 
 /**
  * DubboTestService.
@@ -51,4 +52,5 @@ public interface DubboTestService {
      */
     DubboTest insert(DubboTest dubboTest);
 
+    ListResp findList();
 }

File: soul-plugin/soul-plugin-httpclient/src/main/java/org/dromara/soul/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -117,7 +117,7 @@ private Mono<Void> handleRequestBody(final WebClient.RequestBodySpec requestBody
                 .contentType(buildMediaType(exchange))
                 .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody()))
                 .exchange()
-                .doOnError(e -> log.error(e.getMessage()))
+                .doOnError(e -> log.error(e.getMessage(), e))
                 .timeout(Duration.ofMillis(timeout))
                 .retryWhen(Retry.onlyIf(x -> x.exception() instanceof ConnectTimeoutException)
                     .retryMax(retryTimes)

File: soul-plugin/soul-plugin-tars/src/main/java/org/dromara/soul/plugin/tars/TarsPlugin.java
Patch:
@@ -83,6 +83,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
             future = (CompletableFuture) method
                     .invoke(prx, PrxInfoUtil.getParamArray(tarsInvokePrxList.getParamTypes(), tarsInvokePrxList.getParamNames(), body));
         } catch (Exception e) {
+            log.error("Invoke tars error", e);
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
             Object error = SoulResultWrap.error(SoulResultEnum.TARS_INVOKE.getCode(), SoulResultEnum.TARS_INVOKE.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/SoulClientRegisterServiceImpl.java
Patch:
@@ -203,7 +203,7 @@ public synchronized String registerTars(final MetaDataRegisterDTO dto) {
         }
         final MetaDataDO exist = metaDataMapper.findByServiceNameAndMethod(dto.getServiceName(), dto.getMethodName());
         saveOrUpdateMetaData(exist, dto);
-        String selectorId = handlerTarsSelector(dto);
+        String selectorId = handlerSelector(dto);
         handlerTarsRule(selectorId, dto, exist);
         return SoulResultMessage.SUCCESS;
     }

File: soul-plugin/soul-plugin-tars/src/main/java/org/dromara/soul/plugin/tars/subscriber/TarsMetaDataSubscriber.java
Patch:
@@ -41,6 +41,7 @@ public class TarsMetaDataSubscriber implements MetaDataSubscriber {
 
     @Override
     public void onSubscribe(final MetaData metaData) {
+        metaData.updateContextPath();
         if (RpcTypeEnum.TARS.getName().equals(metaData.getRpcType())) {
             MetaData metaExist = META_DATA.get(metaData.getPath());
             List<TarsInvokePrx> prxList = ApplicationConfigCache.getInstance()
@@ -57,6 +58,7 @@ public void onSubscribe(final MetaData metaData) {
 
     @Override
     public void unSubscribe(final MetaData metaData) {
+        metaData.updateContextPath();
         if (RpcTypeEnum.TARS.getName().equals(metaData.getRpcType())) {
             List<TarsInvokePrx> prxList = ApplicationConfigCache.getInstance()
                     .get(metaData.getPath()).getTarsInvokePrxList();

File: soul-client/soul-client-http/soul-client-springcloud/src/main/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessor.java
Patch:
@@ -128,7 +128,7 @@ public Object postProcessAfterInitialization(@NonNull final Object bean, @NonNul
     private MetaDataRegisterDTO buildMetaDataDTO(final SoulSpringCloudClient soulSpringCloudClient, final String prePath) {
         String contextPath = StringUtils.isBlank(this.contextPath) ? this.servletContextPath : this.contextPath;
         String appName = env.getProperty("spring.application.name");
-        String path = contextPath + this.servletContextPath + prePath + soulSpringCloudClient.path();
+        String path = contextPath + prePath + soulSpringCloudClient.path();
         String host = StringUtils.isBlank(this.host) ? IpUtils.getHost() : this.host;
         int port = StringUtils.isBlank(this.port) ? -1 : Integer.parseInt(this.port);
         String desc = soulSpringCloudClient.desc();

File: soul-client/soul-client-grpc/src/main/java/org/dromara/soul/client/grpc/common/annotation/SoulGrpcClient.java
Patch:
@@ -64,5 +64,5 @@
      *
      * @return the timeout
      */
-    int timeout() default -1;
+    int timeout() default 5000;
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/RpcTypeEnum.java
Patch:
@@ -88,7 +88,7 @@ public static List<RpcTypeEnum> acquireSupports() {
         return Arrays.stream(RpcTypeEnum.values())
                 .filter(e -> e.support).collect(Collectors.toList());
     }
-    
+
     /**
      * acquire operator support URI RPC type.
      *
@@ -97,7 +97,7 @@ public static List<RpcTypeEnum> acquireSupports() {
     public static List<RpcTypeEnum> acquireSupportURIs() {
         return Arrays.asList(RpcTypeEnum.GRPC, RpcTypeEnum.HTTP, RpcTypeEnum.TARS);
     }
-    
+
     /**
      * acquire operator support Metadata RPC type.
      *
@@ -106,13 +106,13 @@ public static List<RpcTypeEnum> acquireSupportURIs() {
     public static List<RpcTypeEnum> acquireSupportMetadatas() {
         return Arrays.asList(RpcTypeEnum.DUBBO, RpcTypeEnum.GRPC, RpcTypeEnum.HTTP, RpcTypeEnum.SPRING_CLOUD, RpcTypeEnum.SOFA, RpcTypeEnum.TARS);
     }
+
     /**
      * acquireByName.
      *
      * @param name this is rpc type
      * @return RpcTypeEnum rpc type enum
      */
-    
     public static RpcTypeEnum acquireByName(final String name) {
         return Arrays.stream(RpcTypeEnum.values())
                 .filter(e -> e.support && e.name.equals(name)).findFirst()

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/cache/ApplicationConfigCache.java
Patch:
@@ -140,6 +140,7 @@ private SoulServiceInstance build(final DivideUpstream divideUpstream) {
         String[] ipAndPort = divideUpstream.getUpstreamUrl().split(":");
         SoulServiceInstance instance = new SoulServiceInstance(ipAndPort[0], Integer.parseInt(ipAndPort[1]));
         instance.setWeight(divideUpstream.getWeight());
+        instance.setStatus(divideUpstream.isStatus());
         return instance;
     }
 

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/client/SoulGrpcClient.java
Patch:
@@ -94,7 +94,7 @@ public CompletableFuture<SoulGrpcResponse> call(final MetaData metaData, final C
         try {
             this.invoke(callParams).get();
         } catch (InterruptedException | ExecutionException e) {
-            throw new RuntimeException("Caught exception while waiting for rpc", e);
+            throw new RuntimeException("Caught exception while waiting for rpc :{ " + e.getMessage() + "}");
         }
         return CompletableFuture.completedFuture(soulGrpcResponse);
     }

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/loadbalance/SubChannelCopy.java
Patch:
@@ -34,6 +34,8 @@ public class SubChannelCopy {
 
     private final int weight;
 
+    private final String status;
+
     private final LoadBalancer.Subchannel channel;
 
     private final EquivalentAddressGroup addressGroup;
@@ -45,5 +47,6 @@ public SubChannelCopy(final LoadBalancer.Subchannel channel) {
         this.addressGroup = channel.getAddresses();
         this.weight = SubChannels.getWeight(channel);
         this.state = SubChannels.getStateInfo(channel);
+        this.status = SubChannels.getStatus(channel);
     }
 }

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/loadbalance/picker/AbstractReadyPicker.java
Patch:
@@ -75,7 +75,8 @@ public LoadBalancer.PickResult pickSubchannel(final LoadBalancer.PickSubchannelA
     public List<SubChannelCopy> getSubchannels() {
         return list.stream().filter(r -> {
             final ConnectivityState state = r.getState().getState();
-            return state == ConnectivityState.READY;
+            final boolean status = Boolean.valueOf(r.getStatus());
+            return state == ConnectivityState.READY && status;
         }).collect(Collectors.toList());
     }
 

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/resolver/SoulNameResolver.java
Patch:
@@ -153,7 +153,7 @@ public void run() {
         private List<SoulServiceInstance> resolveInternal() {
             final String name = SoulNameResolver.this.appName;
             SoulServiceInstanceLists soulServiceInstanceLists = ApplicationConfigCache.getInstance().get(name);
-            List<SoulServiceInstance> newInstanceList = soulServiceInstanceLists.getSoulServiceInstances();
+            List<SoulServiceInstance> newInstanceList = soulServiceInstanceLists.getCopyInstances();
             log.info("Got {} candidate servers for {}", newInstanceList.size(), name);
             if (CollectionUtils.isEmpty(newInstanceList)) {
                 log.info("No servers found for {}", name);
@@ -196,7 +196,7 @@ private boolean needsToUpdateConnections(final List<SoulServiceInstance> newInst
         }
 
         private boolean isMetadataEquals(final Map<String, String> metadata, final Map<String, String> newMetadata) {
-            final String[] keys = {"weight"};
+            final String[] keys = {"weight", "status"};
             for (String key : keys) {
                 final String value = metadata.get(key);
                 final String newValue = newMetadata.get(key);

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/resolver/SoulResolverHelper.java
Patch:
@@ -53,6 +53,6 @@ private static Attributes createAttributes(final SoulServiceInstance instance) {
         if (metadata == null) {
             metadata = Collections.emptyMap();
         }
-        return SubChannels.createAttributes(instance.getWeight());
+        return SubChannels.createAttributes(instance.getWeight(), instance.getStatus());
     }
 }

File: soul-client/soul-client-dubbo/soul-client-apache-dubbo/src/main/java/org/dromara/soul/client/apache/dubbo/ApacheDubboServiceBeanListener.java
Patch:
@@ -18,8 +18,8 @@
 package org.dromara.soul.client.apache.dubbo;
 
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dubbo.common.Constants;
-import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.dromara.soul.client.core.disruptor.SoulClientRegisterEventPublisher;
 import org.dromara.soul.client.dubbo.common.annotation.SoulDubboClient;

File: soul-common/src/main/java/org/dromara/soul/common/utils/CollectionUtils.java
Patch:
@@ -46,5 +46,4 @@ public static boolean isEmpty(final Collection<?> coll) {
     public static boolean isNotEmpty(final Collection<?> coll) {
         return !isEmpty(coll);
     }
-    
 }

File: soul-examples/soul-examples-dubbo/soul-examples-apache-dubbo-service/src/main/java/org/dromara/soul/examples/apache/dubbo/service/TestApacheDubboApplication.java
Patch:
@@ -38,5 +38,4 @@ public class TestApacheDubboApplication {
     public static void main(final String[] args) {
         SpringApplication.run(TestApacheDubboApplication.class, args);
     }
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/SoulClientRegisterServiceImpl.java
Patch:
@@ -465,7 +465,7 @@ private List<SelectorConditionDTO> buildDefaultSelectorConditionDTO(final String
     }
 
     private SpringCloudSelectorHandle buildSpringCloudSelectorHandle(final String serviceId) {
-        return SpringCloudSelectorHandle.builder() .serviceId(serviceId) .build();
+        return SpringCloudSelectorHandle.builder().serviceId(serviceId).build();
     }
 
     private String getPluginId(final String pluginName) {

File: soul-spring-boot-starter/soul-spring-boot-starter-sync-data-center/soul-spring-boot-starter-sync-data-zookeeper/src/main/java/org/dromara/soul/spring/boot/sync/data/zookeeper/ZookeeperSyncDataConfiguration.java
Patch:
@@ -73,5 +73,4 @@ public SyncDataService syncDataService(final ObjectProvider<ZkClient> zkClient,
     public ZkClient zkClient(final ZookeeperConfig zookeeperConfig) {
         return new ZkClient(zookeeperConfig.getUrl(), zookeeperConfig.getSessionTimeout(), zookeeperConfig.getConnectionTimeout());
     }
-
 }

File: soul-admin/src/test/java/org/dromara/soul/admin/config/WebConfigurationTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.dromara.soul.admin.config;
 
-import com.alibaba.fastjson.JSONObject;
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.common.utils.JsonUtils;
 import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.test.util.ReflectionTestUtils;
@@ -54,6 +54,6 @@ private CorsRegistry corsRegistryJSONStringExtendBuild() {
     }
 
     private String getCorsConfigurationsString(final CorsRegistry registry) {
-        return JSONObject.toJSONString(ReflectionTestUtils.invokeMethod(registry, "getCorsConfigurations"));
+        return JsonUtils.toJson(ReflectionTestUtils.invokeMethod(registry, "getCorsConfigurations"));
     }
 }

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-dubbo-common/src/main/java/org/dromara/soul/spring/boot/plugin/dubbo/common/DubboCommonConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public SoulPlugin dubboResponsePlugin() {
      * @return the dubbo param resolve service
      */
     @Bean
-    @ConditionalOnMissingBean(value = DubboBodyParamResolveServiceImpl.class, search = SearchStrategy.ALL)
+    @ConditionalOnMissingBean(value = BodyParamResolveService.class, search = SearchStrategy.ALL)
     public BodyParamResolveService dubboBodyParamResolveService() {
         return new DubboBodyParamResolveServiceImpl();
     }

File: soul-client/soul-client-http/soul-client-springcloud/src/main/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessor.java
Patch:
@@ -69,8 +69,6 @@ public class SpringCloudClientBeanPostProcessor implements BeanPostProcessor {
     public SpringCloudClientBeanPostProcessor(final SoulRegisterCenterConfig config, final Environment env, final SoulClientRegisterRepository soulClientRegisterRepository) {
         String registerType = config.getRegisterType();
         String serverLists = config.getServerLists();
-        Properties props = config.getProps();
-        String contextPath = props.getProperty("contextPath");
         String appName = env.getProperty("spring.application.name");
         if (StringUtils.isBlank(registerType) || StringUtils.isBlank(serverLists) || StringUtils.isBlank(appName)) {
             String errorMsg = "spring cloud param must config the registerType , serverLists  and appName";
@@ -79,7 +77,8 @@ public SpringCloudClientBeanPostProcessor(final SoulRegisterCenterConfig config,
         }
         executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
         this.env = env;
-        this.contextPath = contextPath;
+        Properties props = config.getProps();
+        this.contextPath = props.getProperty("contextPath");
         this.isFull = Boolean.parseBoolean(props.getProperty("isFull", "false"));
         publisher.start(soulClientRegisterRepository);
     }

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/init/ContextRegisterListenerTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.register.common.config.SoulRegisterCenterConfig;
 import org.junit.FixMethodOrder;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.MethodSorters;
@@ -42,13 +43,14 @@
 @RunWith(MockitoJUnitRunner.class)
 @FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public final class ContextRegisterListenerTest {
+    
     @Mock
     private static Environment env;
 
     @Test
+    @Ignore
     public void testNotFullRegister() {
         Properties properties = new Properties();
-        properties.setProperty("contextPath", "/test");
         SoulRegisterCenterConfig mockRegisterCenter = new SoulRegisterCenterConfig();
         mockRegisterCenter.setServerLists("http://127.0.0.1:58080");
         mockRegisterCenter.setRegisterType("http");

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -69,17 +69,16 @@ public SpringMvcClientBeanPostProcessor(final SoulRegisterCenterConfig config, f
         String registerType = config.getRegisterType();
         String serverLists = config.getServerLists();
         Properties props = config.getProps();
-        String contextPath = props.getProperty("contextPath");
         int port = Integer.parseInt(props.getProperty("port"));
-        if (StringUtils.isBlank(registerType)|| StringUtils.isBlank(serverLists) || port <= 0) {
+        if (StringUtils.isBlank(registerType) || StringUtils.isBlank(serverLists) || port <= 0) {
             String errorMsg = "http register param must config the registerType , serverLists and port must > 0";
             log.error(errorMsg);
             throw new RuntimeException(errorMsg);
         }
         this.appName = props.getProperty("appName");
         this.host = props.getProperty("host");
         this.port = port;
-        this.contextPath = contextPath;
+        this.contextPath = props.getProperty("contextPath");
         this.isFull = Boolean.parseBoolean(props.getProperty("isFull", "false"));
         executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
         publisher.start(soulClientRegisterRepository);

File: soul-client/soul-client-dubbo/soul-client-alibaba-dubbo/src/main/java/org/dromara/soul/client/alibaba/dubbo/AlibabaDubboServiceBeanPostProcessor.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.dubbo.config.spring.ServiceBean;
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.soul.client.core.disruptor.SoulClientRegisterEventPublisher;
-import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.client.dubbo.common.annotation.SoulDubboClient;
 import org.dromara.soul.client.dubbo.common.dto.DubboRpcExt;
 import org.dromara.soul.common.utils.GsonUtils;
@@ -65,7 +64,7 @@ public class AlibabaDubboServiceBeanPostProcessor implements ApplicationListener
     
     private final String appName;
 
-    public AlibabaDubboServiceBeanPostProcessor(final SoulRegisterCenterConfig config) {
+    public AlibabaDubboServiceBeanPostProcessor(final SoulRegisterCenterConfig config, final SoulClientRegisterRepository soulClientRegisterRepository) {
         Properties props = config.getProps();
         String contextPath = props.getProperty("contextPath");
         String appName = props.getProperty("appName");
@@ -75,7 +74,6 @@ public AlibabaDubboServiceBeanPostProcessor(final SoulRegisterCenterConfig confi
         this.contextPath = contextPath;
         this.appName = appName;
         executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
-        SoulClientRegisterRepository soulClientRegisterRepository = SoulClientRegisterRepositoryFactory.newInstance(config);
         publisher.start(soulClientRegisterRepository);
     }
 

File: soul-client/soul-client-dubbo/soul-client-apache-dubbo/src/main/java/org/dromara/soul/client/apache/dubbo/ApacheDubboServiceBeanPostProcessor.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dubbo.common.utils.StringUtils;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.dromara.soul.client.core.disruptor.SoulClientRegisterEventPublisher;
-import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.client.dubbo.common.annotation.SoulDubboClient;
 import org.dromara.soul.client.dubbo.common.dto.DubboRpcExt;
 import org.dromara.soul.common.utils.GsonUtils;
@@ -65,7 +64,7 @@ public class ApacheDubboServiceBeanPostProcessor implements ApplicationListener<
     
     private String appName;
     
-    public ApacheDubboServiceBeanPostProcessor(final SoulRegisterCenterConfig config) {
+    public ApacheDubboServiceBeanPostProcessor(final SoulRegisterCenterConfig config, final SoulClientRegisterRepository soulClientRegisterRepository) {
         Properties props = config.getProps();
         String contextPath = props.getProperty("contextPath");
         String appName = props.getProperty("appName");
@@ -75,7 +74,6 @@ public ApacheDubboServiceBeanPostProcessor(final SoulRegisterCenterConfig config
         this.contextPath = contextPath;
         this.appName = appName;
         executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
-        SoulClientRegisterRepository soulClientRegisterRepository = SoulClientRegisterRepositoryFactory.newInstance(config);
         soulClientRegisterEventPublisher.start(soulClientRegisterRepository);
     }
 

File: soul-client/soul-client-grpc/src/main/java/org/dromara/soul/client/grpc/GrpcClientBeanPostProcessor.java
Patch:
@@ -20,7 +20,6 @@
 import io.grpc.BindableService;
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.soul.client.core.disruptor.SoulClientRegisterEventPublisher;
-import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.client.grpc.common.annotation.SoulGrpcClient;
 import org.dromara.soul.client.grpc.common.dto.GrpcExt;
 import org.dromara.soul.common.utils.GsonUtils;
@@ -69,8 +68,9 @@ public class GrpcClientBeanPostProcessor implements BeanPostProcessor {
      * Instantiates a new Soul client bean post processor.
      *
      * @param config the soul grpc config
+     * @param soulClientRegisterRepository the soulClientRegisterRepository
      */
-    public GrpcClientBeanPostProcessor(final SoulRegisterCenterConfig config) {
+    public GrpcClientBeanPostProcessor(final SoulRegisterCenterConfig config, final SoulClientRegisterRepository soulClientRegisterRepository) {
         Properties props = config.getProps();
         String contextPath = props.getProperty("contextPath");
         String ipAndPort = props.getProperty("ipAndPort");
@@ -83,7 +83,6 @@ public GrpcClientBeanPostProcessor(final SoulRegisterCenterConfig config) {
         this.host = props.getProperty("host");
         this.port = Integer.parseInt(port);
         executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
-        SoulClientRegisterRepository soulClientRegisterRepository = SoulClientRegisterRepositoryFactory.newInstance(config);
         publisher.start(soulClientRegisterRepository);
     }
 

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/init/ContextRegisterListenerTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.dromara.soul.client.springcloud.init;
 
+import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.register.common.config.SoulRegisterCenterConfig;
 import org.junit.FixMethodOrder;
 import org.junit.Test;
@@ -53,7 +54,7 @@ public void testNotFullRegister() {
         mockRegisterCenter.setRegisterType("http");
         mockRegisterCenter.setProps(properties);
         when(env.getProperty("spring.application.name")).thenReturn("spring-cloud-test");
-        ContextRegisterListener contextRegisterListener = new ContextRegisterListener(mockRegisterCenter, env);
+        ContextRegisterListener contextRegisterListener = new ContextRegisterListener(mockRegisterCenter, env, SoulClientRegisterRepositoryFactory.newInstance(mockRegisterCenter));
         ContextRefreshedEvent contextRefreshedEvent = mock(ContextRefreshedEvent.class);
         contextRegisterListener.onApplicationEvent(contextRefreshedEvent);
     }

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessorTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.dromara.soul.client.springcloud.init;
 
+import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.client.springcloud.annotation.SoulSpringCloudClient;
 import org.dromara.soul.register.client.http.utils.RegisterUtils;
 import org.dromara.soul.register.common.config.SoulRegisterCenterConfig;
@@ -106,7 +107,7 @@ private SpringCloudClientBeanPostProcessor buildSpringCloudClientBeanPostProcess
         mockRegisterCenter.setServerLists("http://127.0.0.1:8080");
         mockRegisterCenter.setRegisterType("http");
         mockRegisterCenter.setProps(properties);
-        return new SpringCloudClientBeanPostProcessor(mockRegisterCenter, env);
+        return new SpringCloudClientBeanPostProcessor(mockRegisterCenter, env, SoulClientRegisterRepositoryFactory.newInstance(mockRegisterCenter));
     }
 
     @RestController

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -20,7 +20,6 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.dromara.soul.client.core.disruptor.SoulClientRegisterEventPublisher;
-import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.client.springmvc.annotation.SoulSpringMvcClient;
 import org.dromara.soul.common.utils.IpUtils;
 import org.dromara.soul.register.client.api.SoulClientRegisterRepository;
@@ -66,7 +65,7 @@ public class SpringMvcClientBeanPostProcessor implements BeanPostProcessor {
     /**
      * Instantiates a new Soul client bean post processor.
      */
-    public SpringMvcClientBeanPostProcessor(final SoulRegisterCenterConfig config) {
+    public SpringMvcClientBeanPostProcessor(final SoulRegisterCenterConfig config, final SoulClientRegisterRepository soulClientRegisterRepository) {
         String registerType = config.getRegisterType();
         String serverLists = config.getServerLists();
         Properties props = config.getProps();
@@ -84,7 +83,6 @@ public SpringMvcClientBeanPostProcessor(final SoulRegisterCenterConfig config) {
         this.contextPath = contextPath;
         this.isFull = Boolean.parseBoolean(props.getProperty("isFull", "false"));
         executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
-        SoulClientRegisterRepository soulClientRegisterRepository = SoulClientRegisterRepositoryFactory.newInstance(config);
         publisher.start(soulClientRegisterRepository);
     }
 

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.dromara.soul.client.core.disruptor.SoulClientRegisterEventPublisher;
-import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.client.tars.common.annotation.SoulTarsClient;
 import org.dromara.soul.client.tars.common.annotation.SoulTarsService;
 import org.dromara.soul.client.tars.common.dto.TarsRpcExt;
@@ -71,7 +70,7 @@ public class TarsServiceBeanPostProcessor implements BeanPostProcessor {
 
     private final int port;
 
-    public TarsServiceBeanPostProcessor(final SoulRegisterCenterConfig config) {
+    public TarsServiceBeanPostProcessor(final SoulRegisterCenterConfig config, final SoulClientRegisterRepository soulClientRegisterRepository) {
         Properties props = config.getProps();
         String contextPath = props.getProperty("contextPath");
         String ip = props.getProperty("host");
@@ -84,7 +83,6 @@ public TarsServiceBeanPostProcessor(final SoulRegisterCenterConfig config) {
         this.host = props.getProperty("host");
         this.port = Integer.parseInt(port);
         executorService = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
-        SoulClientRegisterRepository soulClientRegisterRepository = SoulClientRegisterRepositoryFactory.newInstance(config);
         publisher.start(soulClientRegisterRepository);
     }
 

File: soul-client/soul-client-tars/src/test/java/org/dromara/soul/client/tars/TarsServiceBeanPostProcessorTest.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.dromara.soul.client.tars;
 
+import org.dromara.soul.client.core.register.SoulClientRegisterRepositoryFactory;
 import org.dromara.soul.client.tars.common.annotation.SoulTarsClient;
 import org.dromara.soul.client.tars.common.annotation.SoulTarsService;
 import org.dromara.soul.register.common.config.SoulRegisterCenterConfig;
@@ -51,7 +52,7 @@ public static void init() {
         mockRegisterCenter.setServerLists("http://localhost:58080");
         mockRegisterCenter.setRegisterType("http");
         mockRegisterCenter.setProps(properties);
-        tarsServiceBeanPostProcessor = new TarsServiceBeanPostProcessor(mockRegisterCenter);
+        tarsServiceBeanPostProcessor = new TarsServiceBeanPostProcessor(mockRegisterCenter, SoulClientRegisterRepositoryFactory.newInstance(mockRegisterCenter));
     }
 
     @Test

File: soul-register-center/soul-register-common/src/main/java/org/dromara/soul/register/common/dto/URIRegisterDTO.java
Patch:
@@ -22,6 +22,7 @@
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import lombok.EqualsAndHashCode;
 import org.dromara.soul.register.common.enums.EventType;
 import org.dromara.soul.register.common.type.DataType;
 import org.dromara.soul.register.common.type.DataTypeParent;
@@ -37,6 +38,7 @@
 @Builder
 @NoArgsConstructor
 @AllArgsConstructor
+@EqualsAndHashCode
 public class URIRegisterDTO implements DataTypeParent, Serializable {
     
     private String appName;

File: soul-client/soul-client-dubbo/soul-client-dubbo-common/src/main/java/org/dromara/soul/client/dubbo/common/annotation/SoulDubboClient.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.client.dubbo.common.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -29,6 +30,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Inherited
 public @interface SoulDubboClient {
 
     /**

File: soul-client/soul-client-sofa/src/main/java/org/dromara/soul/client/sofa/common/annotation/SoulSofaClient.java
Patch:
@@ -19,6 +19,7 @@
 package org.dromara.soul.client.sofa.common.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -30,6 +31,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Inherited
 public @interface SoulSofaClient {
     /**
      * Path string.

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/common/annotation/SoulTarsClient.java
Patch:
@@ -19,6 +19,7 @@
 package org.dromara.soul.client.tars.common.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -30,6 +31,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE, ElementType.METHOD})
+@Inherited
 public @interface SoulTarsClient {
     /**
      * Path string.

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/AuthApplyDTO.java
Patch:
@@ -43,7 +43,4 @@ public class AuthApplyDTO implements Serializable {
     private String extInfo;
 
     private List<String> pathList;
-
-
-
 }

File: soul-client/soul-client-tars/src/test/java/org/dromara/soul/client/tars/TarsServiceBeanPostProcessorTest.java
Patch:
@@ -45,6 +45,7 @@ public static void init() {
         Properties properties = new Properties();
         properties.setProperty("contextPath", "/tars");
         properties.setProperty("ipAndPort", "localhost:8080");
+        properties.setProperty("port", "21715");
 
         SoulRegisterCenterConfig mockRegisterCenter = new SoulRegisterCenterConfig();
         mockRegisterCenter.setServerLists("http://localhost:58080");

File: soul-examples/soul-examples-grpc/src/main/java/org/dromara/soul/examples/grpc/echo/EchoServiceImpl.java
Patch:
@@ -34,7 +34,7 @@
 public class EchoServiceImpl extends EchoServiceGrpc.EchoServiceImplBase {
 
     @Override
-    @SoulGrpcClient(path = "/echo")
+    @SoulGrpcClient(path = "/echo", desc = "echo")
     public void echo(EchoRequest request, StreamObserver<EchoResponse> responseObserver) {
         System.out.println("Received: " + request.getMessage());
         EchoResponse.Builder response = EchoResponse.newBuilder()

File: soul-examples/soul-examples-tars/src/main/java/org/dromara/soul/examples/tars/servant/testapp/impl/HelloServantImpl.java
Patch:
@@ -29,13 +29,13 @@
 @SoulTarsService(serviceName = "SoulExampleServer.SoulExampleApp.HelloObj")
 public class HelloServantImpl implements HelloServant {
     @Override
-    @SoulTarsClient(path = "/hello")
+    @SoulTarsClient(path = "/hello", desc = "hello")
     public String hello(int no, String name) {
         return String.format("hello no=%s, name=%s, time=%s", no, name, System.currentTimeMillis());
     }
 
     @Override
-    @SoulTarsClient(path = "/helloInt")
+    @SoulTarsClient(path = "/helloInt", desc = "helloInt")
     public int helloInt(int no, String name) {
         return 1;
     }

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/SelectorDO.java
Patch:
@@ -140,7 +140,7 @@ public static SelectorData transFrom(final SelectorDO selectorDO, final String p
                 .type(selectorDO.getType())
                 .sort(selectorDO.getSort())
                 .enabled(selectorDO.getEnabled())
-                .loged(selectorDO.getLoged())
+                .logged(selectorDO.getLoged())
                 .continued(selectorDO.getContinued())
                 .handle(selectorDO.getHandle())
                 .conditionList(conditionDataList)

File: soul-admin/src/test/java/org/dromara/soul/admin/listener/websocket/WebsocketDataChangedListenerTest.java
Patch:
@@ -90,7 +90,7 @@ public void testOnPluginChanged() {
     public void testOnSelectorChanged() {
         String message = "{\"groupType\":\"SELECTOR\",\"eventType\":\"UPDATE\",\"data\":"
                 + "[{\"id\":\"1336329408516136960\",\"pluginId\":\"5\",\"pluginName\":\"divide\",\"name\":"
-                + "\"/http\",\"matchMode\":0,\"type\":1,\"sort\":1,\"enabled\":true,\"loged\":true,"
+                + "\"/http\",\"matchMode\":0,\"type\":1,\"sort\":1,\"enabled\":true,\"logged\":true,"
                 + "\"continued\":true,\"handle\":\"[{\\\\\\\"upstreamHost\\\\\\\":\\\\\\\"localhost\\\\\\\","
                 + "\\\\\\\"protocol\\\\\\\":\\\\\\\"http://\\\\\\\",\\\\\\\"upstreamUrl\\\\\\\":"
                 + "\\\\\\\"127.0.0.1:8187\\\\\\\",\\\\\\\"weight\\\\\\\":\\\\\\\"51\\\\\\\"},"
@@ -213,7 +213,7 @@ private void initSelectorDataList() {
         selectorData.setHandle("[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"127.0.0.1:8187\\\","
                 + "\\\"weight\\\":\\\"51\\\"},{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"127.0.0.1:8188\\\",\\\"weight\\\":\\\"49\\\"}]");
         selectorData.setId("1336329408516136960");
-        selectorData.setLoged(true);
+        selectorData.setLogged(true);
         selectorData.setMatchMode(0);
         selectorData.setName("/http");
         selectorData.setPluginId("5");

File: soul-admin/src/test/java/org/dromara/soul/admin/service/SoulClientRegisterServiceTest.java
Patch:
@@ -439,7 +439,7 @@ private SelectorData buildSelectorData() {
                 .type(1)
                 .sort(1)
                 .enabled(true)
-                .loged(true)
+                .logged(true)
                 .continued(false)
                 .handle("handle")
                 .build();

File: soul-admin/src/test/java/org/dromara/soul/admin/service/SyncDataServiceTest.java
Patch:
@@ -133,7 +133,7 @@ private SelectorData buildSelectorData() {
         selectorData.setContinued(true);
         selectorData.setEnabled(true);
         selectorData.setHandle("divide");
-        selectorData.setLoged(true);
+        selectorData.setLogged(true);
         selectorData.setMatchMode(1);
         selectorData.setPluginId("5");
         selectorData.setName("divide");

File: soul-common/src/main/java/org/dromara/soul/common/dto/SelectorData.java
Patch:
@@ -65,7 +65,7 @@ public class SelectorData implements Serializable {
 
     private Boolean enabled;
 
-    private Boolean loged;
+    private Boolean logged;
 
     private Boolean continued;
 

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/AbstractSoulPlugin.java
Patch:
@@ -132,7 +132,7 @@ private Boolean filterRule(final RuleData ruleData, final ServerWebExchange exch
     }
 
     private void selectorLog(final SelectorData selectorData, final String pluginName) {
-        if (selectorData.getLoged()) {
+        if (selectorData.getLogged()) {
             log.info("{} selector success match , selector name :{}", pluginName, selectorData.getName());
         }
     }

File: soul-plugin/soul-plugin-base/src/test/java/org/dromara/soul/plugin/base/AbstractSoulPluginTest.java
Patch:
@@ -113,7 +113,7 @@ public void executeSelectorDataIsNullTest() {
     public void executeRuleIsNullTest() {
         List<ConditionData> conditionDataList = Collections.singletonList(conditionData);
         this.selectorData.setMatchMode(0);
-        this.selectorData.setLoged(true);
+        this.selectorData.setLogged(true);
         this.selectorData.setConditionList(conditionDataList);
         BaseDataCache.getInstance().cachePluginData(pluginData);
         BaseDataCache.getInstance().cacheSelectData(selectorData);
@@ -129,7 +129,7 @@ public void executeRuleIsNotNullTest() {
         this.ruleData.setConditionDataList(conditionDataList);
         this.ruleData.setMatchMode(0);
         this.selectorData.setMatchMode(0);
-        this.selectorData.setLoged(true);
+        this.selectorData.setLogged(true);
         this.selectorData.setConditionList(conditionDataList);
         BaseDataCache.getInstance().cachePluginData(pluginData);
         BaseDataCache.getInstance().cacheSelectData(selectorData);
@@ -147,7 +147,7 @@ public void executeRuleFullTest() {
         this.ruleData.setMatchMode(1);
         this.selectorData.setMatchMode(0);
         this.selectorData.setType(SelectorTypeEnum.FULL_FLOW.getCode());
-        this.selectorData.setLoged(true);
+        this.selectorData.setLogged(true);
         this.selectorData.setConditionList(conditionDataList);
         BaseDataCache.getInstance().cachePluginData(pluginData);
         BaseDataCache.getInstance().cacheSelectData(selectorData);

File: soul-admin/src/main/java/org/dromara/soul/admin/config/NacosConfiguration.java
Patch:
@@ -56,6 +56,8 @@ public ConfigService nacosConfigService(final NacosProperties nacosProp) throws
         } else {
             properties.put(PropertyKeyConst.SERVER_ADDR, nacosProp.getUrl());
             properties.put(PropertyKeyConst.NAMESPACE, nacosProp.getNamespace());
+            properties.put(PropertyKeyConst.USERNAME, nacosProp.getUsername());
+            properties.put(PropertyKeyConst.PASSWORD, nacosProp.getPassword());
         }
         return NacosFactory.createConfigService(properties);
     }

File: soul-spring-boot-starter/soul-spring-boot-starter-sync-data-center/soul-spring-boot-starter-sync-data-nacos/src/main/java/org/dromara/soul/springboot/starter/sync/data/nacos/NacosSyncDataConfiguration.java
Patch:
@@ -84,6 +84,8 @@ public ConfigService nacosConfigService(final NacosConfig nacosConfig) throws Ex
         } else {
             properties.put(PropertyKeyConst.SERVER_ADDR, nacosConfig.getUrl());
             properties.put(PropertyKeyConst.NAMESPACE, nacosConfig.getNamespace());
+            properties.put(PropertyKeyConst.USERNAME, nacosConfig.getUsername());
+            properties.put(PropertyKeyConst.PASSWORD, nacosConfig.getPassword());
         }
         return NacosFactory.createConfigService(properties);
     }

File: soul-admin/src/test/java/org/dromara/soul/admin/service/UpstreamCheckServiceTest.java
Patch:
@@ -88,16 +88,16 @@ public void setUp() {
         //get static variable reference by reflection
         upstreamMap = (Map<String, List<DivideUpstream>>) ReflectionTestUtils.getField(UpstreamCheckService.class, "UPSTREAM_MAP");
         //mock data
-        final PluginDO pluginDO = PluginDO.builder()
+        PluginDO pluginDO = PluginDO.builder()
                 .name(PluginEnum.DIVIDE.getName())
                 .id(MOCK_PLUGIN_ID)
                 .build();
-        final SelectorDO selectorDOWithUrlError = SelectorDO.builder()
+        SelectorDO selectorDOWithUrlError = SelectorDO.builder()
                 .pluginId(MOCK_PLUGIN_ID)
                 .name(MOCK_SELECTOR_NAME)
                 .handle("[{\"upstreamHost\":\"localhost\",\"protocol\":\"http://\",\"upstreamUrl\":\"divide-upstream-50\",\"weight\":50}]")
                 .build();
-        final SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()
+        SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()
                 .pluginId(MOCK_PLUGIN_ID)
                 .name(MOCK_SELECTOR_NAME_OTHER)
                 .handle("[{\"upstreamHost\":\"localhost\",\"protocol\":\"http://\",\"localhost\":\"divide-upstream-60\",\"weight\":60}]")

File: soul-admin/src/main/java/org/dromara/soul/admin/config/RegisterCenterConfiguration.java
Patch:
@@ -27,7 +27,6 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Import;
 
 /**
  * The type Register center configuration.
@@ -43,7 +42,6 @@ public class RegisterCenterConfiguration {
      */
     @Configuration
     @ConditionalOnProperty(name = "soul.register.registerType", havingValue = "zookeeper")
-    @Import(ZookeeperConfiguration.class)
     static class ZookeeperRegisterCenter {
     
         /**

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/SoulClientController.java
Patch:
@@ -27,6 +27,8 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
+import java.util.Collections;
+
 /**
  * The type Soul client controller.
  *
@@ -121,6 +123,6 @@ public String registerGrpc(@RequestBody final MetaDataRegisterDTO metaDataRegist
     }
     
     private void publish(final MetaDataRegisterDTO metaDataRegisterDTO) {
-        PUBLISHER.publish(metaDataRegisterDTO);
+        PUBLISHER.publish(Collections.singletonList(metaDataRegisterDTO));
     }
 }

File: soul-register-center/soul-register-client/soul-register-client-zookeeper/src/main/java/org/dromara/soul/register/client/zookeeper/ZookeeperClientRegisterRepository.java
Patch:
@@ -79,7 +79,7 @@ private void registerMetadata(final String rpcType, final String contextPath, fi
         zkClient.createPersistent(realNode, GsonUtils.getInstance().toJson(metadata));
     }
     
-    private void registerURI(final String rpcType, final String contextPath, final MetaDataRegisterDTO metadata) {
+    private synchronized void registerURI(final String rpcType, final String contextPath, final MetaDataRegisterDTO metadata) {
         String uriNodeName = buildURINodeName(metadata);
         String uriPath = ZkRegisterPathConstants.buildURIParentPath(rpcType, contextPath);
         if (!zkClient.exists(uriPath)) {
@@ -105,7 +105,7 @@ private String buildMetadataNodeName(final MetaDataRegisterDTO metadata) {
         } else {
             nodeName = buildNodeName(metadata.getServiceName(), metadata.getMethodName());
         }
-        return nodeName;
+        return nodeName.substring(1);
     }
     
     private String buildNodeName(final String serviceName, final String methodName) {

File: soul-register-center/soul-register-server/soul-register-server-zookeeper/src/main/java/org/dromara/soul/register/server/zookeeper/ZookeeperServerRegisterRepository.java
Patch:
@@ -151,6 +151,9 @@ private void registerURIChildrenList(final List<String> childrenList, final Stri
             String realPath = ZkRegisterPathConstants.buildRealNode(uriParentPath, addPath);
             registerDTOList.add(GsonUtils.getInstance().fromJson(zkClient.readData(realPath).toString(), URIRegisterDTO.class));
         });
+        if (registerDTOList.isEmpty()) {
+            return;
+        }
         publishRegisterURI(registerDTOList);
     }
     

File: soul-web/src/test/java/org/dromara/soul/web/filter/FileSizeFilterTest.java
Patch:
@@ -68,7 +68,7 @@ public void testFilter() {
         WebFilterChain webFilterChain = mock(WebFilterChain.class);
         when(webFilterChain.filter(any())).thenReturn(Mono.empty());
 
-        FileSizeFilter fileSizeFilter = new FileSizeFilter(0);
+        FileSizeFilter fileSizeFilter = new FileSizeFilter(10);
         Mono<Void> voidMono = fileSizeFilter.filter(webExchange, webFilterChain);
         StepVerifier.create(voidMono).expectSubscription().verifyComplete();
 

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/PluginHandleDTO.java
Patch:
@@ -71,5 +71,4 @@ public class PluginHandleDTO implements Serializable {
      * the attribute extObj.
      */
     private String extObj;
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/disruptor/SoulServerMetaDataRegisterEventHandler.java
Patch:
@@ -86,6 +86,8 @@ private void register(final DataChangedEvent data) {
             soulClientRegisterService.registerSpringMvc((SpringMvcRegisterDTO) data.getValue());
         } else if (data.getKey().equals(RpcTypeEnum.SPRING_CLOUD.getName())) {
             soulClientRegisterService.registerSpringCloud((SpringCloudRegisterDTO) data.getValue());
+        } else if (data.getKey().equals(RpcTypeEnum.GRPC.getName())) {
+            soulClientRegisterService.registerGrpc((MetaDataDTO) data.getValue());
         }
     }
 

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/common/dto/TarsRpcExt.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.dromara.soul.client.tars.common.dto;
 
-import javafx.util.Pair;
 import lombok.Builder;
 import lombok.Data;
+import org.apache.commons.lang3.tuple.Pair;
 
 import java.util.List;
 

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/SoulClientControllerTest.java
Patch:
@@ -40,7 +40,7 @@
  * Test cases for SoulClientController.
  * @author bran.chen
  */
-@RunWith(MockitoJUnitRunner.class)
+@RunWith(MockitoJUnitRunner.Silent.class)
 public final class SoulClientControllerTest {
 
     private MockMvc mockMvc;

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessorTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.dromara.soul.client.springcloud.init;
 
-import org.dromara.soul.client.common.utils.RegisterUtils;
 import org.dromara.soul.client.springcloud.annotation.SoulSpringCloudClient;
+import org.dromara.soul.register.client.http.utils.RegisterUtils;
 import org.dromara.soul.register.common.config.SoulRegisterCenterConfig;
 import org.junit.Before;
 import org.junit.FixMethodOrder;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/NacosConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.nacos.api.NacosFactory;
 import com.alibaba.nacos.api.PropertyKeyConst;
 import com.alibaba.nacos.api.config.ConfigService;
+import org.dromara.soul.admin.config.properties.NacosProperties;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/SecretConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.dromara.soul.admin.config;
 
+import org.dromara.soul.admin.config.properties.SecretProperties;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/WebConfiguration.java
Patch:
@@ -27,7 +27,7 @@
  * @author xiaoyu(Myth)
  */
 @Configuration
-public class WebConfig implements WebMvcConfigurer {
+public class WebConfiguration implements WebMvcConfigurer {
 
     @Override
     public void addCorsMappings(final CorsRegistry registry) {

File: soul-admin/src/main/java/org/dromara/soul/admin/config/ZookeeperConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.admin.config;
 
 import org.I0Itec.zkclient.ZkClient;
+import org.dromara.soul.admin.config.properties.ZookeeperProperties;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/properties/HttpSyncProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.admin.config;
+package org.dromara.soul.admin.config.properties;
 
 import lombok.Getter;
 import lombok.Setter;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/properties/NacosProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.admin.config;
+package org.dromara.soul.admin.config.properties;
 
 import lombok.Data;
 import lombok.Getter;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/properties/SecretProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.admin.config;
+package org.dromara.soul.admin.config.properties;
 
 import lombok.Getter;
 import lombok.Setter;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/properties/WebsocketSyncProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.admin.config;
+package org.dromara.soul.admin.config.properties;
 
 import lombok.Getter;
 import lombok.Setter;

File: soul-admin/src/main/java/org/dromara/soul/admin/config/properties/ZookeeperProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.admin.config;
+package org.dromara.soul.admin.config.properties;
 
 import lombok.Data;
 import org.springframework.boot.context.properties.ConfigurationProperties;

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/IndexController.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.dromara.soul.admin.controller;
 
-import org.dromara.soul.admin.listener.SoulDomain;
+import org.dromara.soul.admin.utils.SoulDomain;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -42,5 +42,4 @@ public String index(final Model model) {
         model.addAttribute("domain", SoulDomain.getInstance().getHttpPath());
         return "index";
     }
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/MetaDataController.java
Patch:
@@ -145,8 +145,7 @@ public SoulAdminResult batchEnabled(@RequestBody final BatchCommonDTO batchCommo
         }
         return SoulAdminResult.success(SoulResultMessage.ENABLE_SUCCESS);
     }
-
-
+    
     /**
      * Sync metadata.
      *

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/DataChangedEventDispatcher.java
Patch:
@@ -80,5 +80,4 @@ public void afterPropertiesSet() {
         Collection<DataChangedListener> listenerBeans = applicationContext.getBeansOfType(DataChangedListener.class).values();
         this.listeners = Collections.unmodifiableList(new ArrayList<>(listenerBeans));
     }
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/websocket/WebsocketDataChangedListener.java
Patch:
@@ -72,5 +72,4 @@ public void onMetaDataChanged(final List<MetaData> metaDataList, final DataEvent
                 new WebsocketData<>(ConfigGroupEnum.META_DATA.name(), eventType.name(), metaDataList);
         WebsocketCollector.send(GsonUtils.getInstance().toJson(configData), eventType);
     }
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/mapper/PluginMapper.java
Patch:
@@ -38,8 +38,7 @@ public interface PluginMapper {
      * @return {@linkplain PluginDO}
      */
     PluginDO selectById(String id);
-
-
+    
     /**
      * Select by name plugin do.
      *

File: soul-admin/src/main/java/org/dromara/soul/admin/page/PageParameter.java
Patch:
@@ -31,7 +31,7 @@ public class PageParameter implements Serializable {
 
     private static final long serialVersionUID = -8324693985921606090L;
 
-    private static final int DEFAULT_PAGE_SIZE = 10;
+    private static final int DEFAULT_PAGE_SIZE = 12;
 
     private int currentPage;
 

File: soul-admin/src/main/java/org/dromara/soul/admin/query/AppAuthQuery.java
Patch:
@@ -45,5 +45,4 @@ public class AppAuthQuery implements Serializable {
      * page parameter.
      */
     private PageParameter pageParameter;
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/spring/SoulApplicationContextAware.java
Patch:
@@ -35,5 +35,4 @@ public class SoulApplicationContextAware implements ApplicationContextAware {
     public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException {
         SpringBeanUtils.getInstance().setCfgContext((ConfigurableApplicationContext) applicationContext);
     }
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/utils/SoulDomain.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.admin.listener;
+package org.dromara.soul.admin.utils;
 
 import lombok.Data;
 
@@ -45,5 +45,4 @@ private SoulDomain() {
     public static SoulDomain getInstance() {
         return SOUL_DOMAIN;
     }
-
 }

File: soul-admin/src/test/java/org/dromara/soul/admin/config/DataSyncConfigurationTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.I0Itec.zkclient.ZkClient;
 import org.apache.curator.test.TestingServer;
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.HttpSyncProperties;
 import org.dromara.soul.admin.listener.nacos.NacosMockConfigService;
 import org.dromara.soul.admin.service.MetaDataService;
 import org.dromara.soul.admin.service.PluginService;

File: soul-admin/src/test/java/org/dromara/soul/admin/config/HttpSyncPropertiesTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.admin.config;
 
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.HttpSyncProperties;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.junit.MockitoJUnitRunner;

File: soul-admin/src/test/java/org/dromara/soul/admin/config/NacosConfigurationTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.nacos.api.PropertyKeyConst;
 import com.alibaba.nacos.api.config.ConfigService;
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.NacosProperties;
 import org.junit.Test;
 import org.springframework.beans.factory.BeanCreationException;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: soul-admin/src/test/java/org/dromara/soul/admin/config/NacosPropertiesTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.dromara.soul.admin.AbstractConfigurationTest;
 
+import org.dromara.soul.admin.config.properties.NacosProperties;
 import org.junit.Test;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: soul-admin/src/test/java/org/dromara/soul/admin/config/SecretConfigurationTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.SecretProperties;
 import org.junit.Test;
 import org.junit.jupiter.api.Assertions;
 

File: soul-admin/src/test/java/org/dromara/soul/admin/config/SecretPropertiesTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.SecretProperties;
 import org.junit.Test;
 import org.junit.jupiter.api.Assertions;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: soul-admin/src/test/java/org/dromara/soul/admin/config/WebConfigurationTest.java
Patch:
@@ -29,13 +29,13 @@
  *
  * @author Yejiajun
  */
-public final class WebConfigTest extends AbstractConfigurationTest {
+public final class WebConfigurationTest extends AbstractConfigurationTest {
 
     @Test
     public void testAddCorsMappings() {
         CorsRegistry registry = new CorsRegistry();
-        WebConfig webConfig = new WebConfig();
-        webConfig.addCorsMappings(registry);
+        WebConfiguration webConfiguration = new WebConfiguration();
+        webConfiguration.addCorsMappings(registry);
         Assert.assertEquals(getCorsConfigurationsString(registry), getCorsConfigurationsString(corsRegistryJSONStringExtendBuild()));
     }
 

File: soul-admin/src/test/java/org/dromara/soul/admin/config/WebsocketSyncPropertiesTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.admin.config;
 
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.WebsocketSyncProperties;
 import org.junit.Test;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Configuration;

File: soul-admin/src/test/java/org/dromara/soul/admin/config/ZookeeperConfigurationTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.I0Itec.zkclient.ZkClient;
 import org.apache.curator.test.TestingServer;
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.ZookeeperProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.junit.AfterClass;

File: soul-admin/src/test/java/org/dromara/soul/admin/config/ZookeeperPropertiesTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.admin.config;
 
 import org.dromara.soul.admin.AbstractConfigurationTest;
+import org.dromara.soul.admin.config.properties.ZookeeperProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
 import org.junit.Test;

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/IndexControllerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.dromara.soul.admin.controller;
 
-import org.dromara.soul.admin.listener.SoulDomain;
+import org.dromara.soul.admin.utils.SoulDomain;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/RuleControllerTest.java
Patch:
@@ -87,7 +87,7 @@ public void setUp() {
     public void testQueryRules() throws Exception {
         given(this.ruleService.listByPage(tRuleQuery)).willReturn(commonPager);
         String urlTemplate = "/rule?selectorId={selectorId}&currentPage={currentPage}&pageSize={pageSize}";
-        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "168", 1, 10))
+        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "168", 1, 12))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(SoulResultMessage.QUERY_SUCCESS)))
                 .andExpect(jsonPath("$.data.dataList[0].id", is(ruleVO.getId())))

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/SelectorControllerTest.java
Patch:
@@ -83,7 +83,7 @@ public void setUp() {
     public void querySelectors() throws Exception {
         given(this.selectorService.listByPage(selectorQuery)).willReturn(commonPager);
         String urlTemplate = "/selector?pluginId={pluginId}&currentPage={currentPage}&pageSize={pageSize}";
-        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "2", 1, 10))
+        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "2", 1, 12))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(SoulResultMessage.QUERY_SUCCESS)))
                 .andExpect(jsonPath("$.data.dataList[0].id", is(selectorVO.getId())))

File: soul-admin/src/test/java/org/dromara/soul/admin/listener/ApplicationStartListenerTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.admin.listener;
 
 import org.dromara.soul.admin.AbstractSpringIntegrationTest;
+import org.dromara.soul.admin.utils.SoulDomain;
 import org.dromara.soul.common.utils.IpUtils;
 import org.junit.Test;
 import org.springframework.boot.web.server.LocalServerPort;

File: soul-admin/src/test/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListenerTest.java
Patch:
@@ -163,7 +163,7 @@ public void testOnSelectorChanged() throws NacosException {
         Assert.assertEquals(
                 configService.getConfig(SELECTOR_DATA_ID, GROUP, 1),
                 GsonUtils.getInstance()
-                        .toJson(ImmutableMap.of(selectorDataPluginName1, ImmutableList.of())));
+                        .toJson(ImmutableMap.of(selectorDataPluginName1, ImmutableList.of(selectorData1))));
     }
 
     @Test
@@ -222,6 +222,6 @@ public void testOnRuleChanged() throws NacosException {
         nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);
         Assert.assertEquals(
                 configService.getConfig(RULE_DATA_ID, GROUP, 1),
-                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of())));
+                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of(ruleData1))));
     }
 }

File: soul-admin/src/test/java/org/dromara/soul/admin/page/PageResultUtilsTest.java
Patch:
@@ -33,14 +33,15 @@ public final class PageResultUtilsTest {
     @Test
     public void testEmptyResult() {
         final PageParameter pageParameter = new PageParameter(1, 10, 0);
-        final CommonPager<String> result = PageResultUtils.result(pageParameter, 0, ArrayList::new);
+        final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 0, ArrayList::new);
         Assert.assertEquals(result.getDataList().size(), 0);
     }
 
     @Test
     public void testResult() {
         final PageParameter pageParameter = new PageParameter(1, 10, 1);
-        final CommonPager<String> result = PageResultUtils.result(pageParameter, 1, () -> Collections.singletonList("result1"));
+        final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 1,
+            () -> Collections.singletonList("result1"));
         Assert.assertEquals(result.getDataList().size(), 1);
     }
 }

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -39,7 +39,6 @@
 import org.springframework.stereotype.Controller;
 import org.springframework.util.ReflectionUtils;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
 
 /**
  * The type Soul spring mvc client bean post processor.
@@ -94,9 +93,8 @@ public Object postProcessAfterInitialization(@NonNull final Object bean, @NonNul
             return bean;
         }
         Controller controller = AnnotationUtils.findAnnotation(bean.getClass(), Controller.class);
-        RestController restController = AnnotationUtils.findAnnotation(bean.getClass(), RestController.class);
         RequestMapping requestMapping = AnnotationUtils.findAnnotation(bean.getClass(), RequestMapping.class);
-        if (controller != null || restController != null || requestMapping != null) {
+        if (controller != null || requestMapping != null) {
             SoulSpringMvcClient clazzAnnotation = AnnotationUtils.findAnnotation(bean.getClass(), SoulSpringMvcClient.class);
             String prePath = "";
             if (Objects.isNull(clazzAnnotation)) {

File: soul-common/src/main/java/org/dromara/soul/common/enums/RpcTypeEnum.java
Patch:
@@ -72,7 +72,7 @@ public enum RpcTypeEnum {
     /**
      * grpc.
      */
-    GRPC("grpc", false);
+    GRPC("grpc", true);
 
 
     private final String name;

File: soul-common/src/main/java/org/dromara/soul/common/utils/ReflectUtils.java
Patch:
@@ -82,5 +82,4 @@ public static Object getFieldValue(final Object obj, final Field field) {
         }
         return result;
     }
-
 }

File: soul-examples/soul-examples-sofa/soul-examples-sofa-service/src/main/java/org/dromara/soul/examples/sofa/service/TestSofaApplication.java
Patch:
@@ -22,10 +22,12 @@
 import org.springframework.context.annotation.ImportResource;
 
 /**
+ * Sofa service starter.
+ *
  * @author tydhot
  */
 @SpringBootApplication
-@ImportResource({ "classpath*:invoke-server-example.xml"})
+@ImportResource(locations = { "classpath*:invoke-server-example.xml"})
 public class TestSofaApplication {
 
     /**

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/collector/BuildInfoCollector.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector;
+package org.dromara.soul.metrics.prometheus.collector;
 
 import io.prometheus.client.Collector;
 import io.prometheus.client.GaugeMetricFamily;
@@ -25,8 +25,6 @@
 
 /**
  * The type Build info collector.
- *
- * @author xiaoyu
  */
 public class BuildInfoCollector extends Collector {
     

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/collector/JmxCollector.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector;
+package org.dromara.soul.metrics.prometheus.collector;
 
 import io.prometheus.client.Collector;
 import org.dromara.soul.common.utils.GsonUtils;

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/collector/JmxMBeanPropertyCache.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector;
+package org.dromara.soul.metrics.prometheus.collector;
 
 import java.util.LinkedHashMap;
 import java.util.Map;

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/collector/JmxScraper.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector;
+package org.dromara.soul.metrics.prometheus.collector;
 
 import java.io.IOException;
 import java.lang.management.ManagementFactory;

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/collector/MBeanReceiver.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector;
+package org.dromara.soul.metrics.prometheus.collector;
 
 import java.util.LinkedList;
 import java.util.Map;

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/collector/JmxMBeanPropertyCacheTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector;
+package org.dromara.soul.metrics.prometheus.collector;
 
 import lombok.SneakyThrows;
 import org.junit.Before;

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/collector/support/JmxCollectorConfigObject.java
Patch:
@@ -15,14 +15,15 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector.support;
+package org.dromara.soul.metrics.prometheus.collector.support;
 
 import lombok.Data;
 import org.dromara.soul.common.utils.GsonUtils;
 
 import java.io.Serializable;
 import java.util.List;
 import java.util.Map;
+import org.dromara.soul.metrics.prometheus.collector.JmxCollector;
 
 /**
  * JmxCollectorConfigObject.
@@ -89,7 +90,7 @@ public class JmxCollectorConfigObject implements Serializable {
     private List<Rule> rules;
     
     /**
-     * convert current instance object to {@link org.dromara.soul.metrics.prometheus.impl.collector.JmxCollector#JmxCollector(String)} construct param style json string.
+     * convert current instance object to {@link JmxCollector#JmxCollector(String)} construct param style json string.
      *
      * @return jmx config json
      */

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/collector/support/MockJmxServer.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector.support;
+package org.dromara.soul.metrics.prometheus.collector.support;
 
 import javax.management.JMException;
 import javax.management.MBeanServer;

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/collector/support/MockMetrics.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector.support;
+package org.dromara.soul.metrics.prometheus.collector.support;
 
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.TabularData;

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/collector/support/MockMetricsMBean.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus.impl.collector.support;
+package org.dromara.soul.metrics.prometheus.collector.support;
 
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.TabularData;

File: soul-metrics/soul-metrics-spi/src/main/java/org/dromara/soul/metrics/config/MetricsConfig.java
Patch:
@@ -44,6 +44,5 @@ public final class MetricsConfig implements Serializable {
     private String jmxConfig;
     
     private Properties props;
-    
 }
 

File: soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/param/AlibabaDubboBodyParamPlugin.java
Patch:
@@ -39,14 +39,14 @@
 /**
  * The type Body param plugin.
  */
-public class BodyParamPlugin implements SoulPlugin {
+public class AlibabaDubboBodyParamPlugin implements SoulPlugin {
 
     private final List<HttpMessageReader<?>> messageReaders;
 
     /**
      * Instantiates a new Body param plugin.
      */
-    public BodyParamPlugin() {
+    public AlibabaDubboBodyParamPlugin() {
         this.messageReaders = HandlerStrategies.withDefaults().messageReaders();
     }
 

File: soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/param/ApacheDubboBodyParamPlugin.java
Patch:
@@ -41,14 +41,14 @@
  *
  * @author xiaoyu
  */
-public class BodyParamPlugin implements SoulPlugin {
+public class ApacheDubboBodyParamPlugin implements SoulPlugin {
 
     private final List<HttpMessageReader<?>> messageReaders;
 
     /**
      * Instantiates a new Body param plugin.
      */
-    public BodyParamPlugin() {
+    public ApacheDubboBodyParamPlugin() {
         this.messageReaders = HandlerStrategies.withDefaults().messageReaders();
     }
 

File: soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/cache/ApplicationConfigCacheTest.java
Patch:
@@ -66,7 +66,7 @@ public void testInit() {
         this.applicationConfigCache.init(dubboRegisterConfig);
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void testInitRef() {
         MetaData metaData = new MetaData();
         metaData.setPath("/test");
@@ -78,7 +78,7 @@ public void testGet() {
         assertNotNull(this.applicationConfigCache.get("/test"));
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void testBuild() {
         DubboParamExtInfo dubboParamExtInfo = new DubboParamExtInfo();
         dubboParamExtInfo.setVersion("2.7.5");

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/condition/strategy/AbstractMatchStrategy.java
Patch:
@@ -74,6 +74,9 @@ String buildRealData(final ConditionData condition, final ServerWebExchange exch
                 final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);
                 realData = (String) ReflectUtils.getFieldValue(soulContext, condition.getParamName());
                 break;
+            case REQUEST_METHOD:
+                realData = exchange.getRequest().getMethodValue();
+                break;
             default:
                 break;
         }

File: soul-admin/src/main/java/org/dromara/soul/admin/config/RegisterCenterConfiguration.java
Patch:
@@ -56,7 +56,7 @@ static class ZookeeperRegisterCenter {
          */
         @Bean
         @ConfigurationProperties(prefix = "soul.register")
-        public SoulRegisterCenterConfig SoulRegisterCenterConfig() {
+        public SoulRegisterCenterConfig soulRegisterCenterConfig() {
             return new SoulRegisterCenterConfig();
         }
     

File: soul-client/soul-client-http/soul-client-springcloud/src/main/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessor.java
Patch:
@@ -110,7 +110,7 @@ public Object postProcessAfterInitialization(@NonNull final Object bean, @NonNul
                 SoulSpringCloudClient soulSpringCloudClient = AnnotationUtils.findAnnotation(method, SoulSpringCloudClient.class);
                 if (Objects.nonNull(soulSpringCloudClient)) {
                     String finalPrePath = prePath;
-                    executorService.execute(() -> publisher.publishEvent(buildMetaDataDTO(clazzAnnotation, finalPrePath)));
+                    executorService.execute(() -> publisher.publishEvent(buildMetaDataDTO(soulSpringCloudClient, finalPrePath)));
                 }
             }
         }

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -63,7 +63,7 @@ public ContextRegisterListener(final SoulRegisterCenterConfig config) {
         String contextPath = props.getProperty("contextPath");
         int port = Integer.parseInt(props.getProperty("port"));
         if (StringUtils.isBlank(contextPath) || StringUtils.isBlank(registerType)
-                || StringUtils.isBlank(serverLists) || port <= 0 ) {
+                || StringUtils.isBlank(serverLists) || port <= 0) {
             String errorMsg = "spring cloud param must config the contextPath ,registerType , serverLists and port must > 0";
             log.error(errorMsg);
             throw new RuntimeException(errorMsg);

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.dromara.soul.client.core.disruptor.SoulClientRegisterEventPublisher;
@@ -114,7 +113,7 @@ public Object postProcessAfterInitialization(@NonNull final Object bean, @NonNul
                 SoulSpringMvcClient soulSpringMvcClient = AnnotationUtils.findAnnotation(method, SoulSpringMvcClient.class);
                 if (Objects.nonNull(soulSpringMvcClient)) {
                     String finalPrePath = prePath;
-                    executorService.execute(() -> publisher.publishEvent(buildMetaDataDTO(clazzAnnotation, finalPrePath)));
+                    executorService.execute(() -> publisher.publishEvent(buildMetaDataDTO(soulSpringMvcClient, finalPrePath)));
                 }
             }
         }

File: soul-register-center/soul-register-client/soul-register-client-http/src/main/java/org/dromara/soul/register/client/http/HttpClientRegisterRepository.java
Patch:
@@ -65,12 +65,12 @@ protected void initTurn() {
     @Override
     public void persistInterface(final MetaDataDTO metadata) {
         String rpcType = metadata.getRpcType();
-        for(String server : serverList) {
+        for (String server : serverList) {
             try {
                 RegisterUtils.doRegister(gson.toJson(metadata), server + turn.get(rpcType), rpcType);
                 return;
             } catch (Exception e) {
-               log.error("register admin url :{} is fail, will retry" , server);
+                log.error("register admin url :{} is fail, will retry", server);
             }
         }
     }

File: soul-register-center/soul-register-client/soul-register-client-http/src/main/java/org/dromara/soul/register/client/http/utils/OkHttpTools.java
Patch:
@@ -22,10 +22,8 @@
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.RequestBody;
-import okhttp3.Response;
 
 import java.io.IOException;
-import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
 /**

File: soul-register-center/soul-register-client/soul-register-client-http/src/main/java/org/dromara/soul/register/client/http/utils/RegisterUtils.java
Patch:
@@ -38,6 +38,7 @@ private RegisterUtils() {
      * @param json        request body
      * @param url         url
      * @param rpcType rcp type
+     * @throws IOException exception
      */
     public static void doRegister(final String json, final String url, final String rpcType) throws IOException {
         String result = OkHttpTools.getInstance().post(url, json);

File: soul-register-center/soul-register-client/soul-register-client-http/src/test/java/org/dromara/soul/register/client/http/OkHttpToolsTest.java
Patch:
@@ -20,8 +20,6 @@
 import com.github.tomakehurst.wiremock.core.WireMockConfiguration;
 import com.github.tomakehurst.wiremock.junit.WireMockRule;
 import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
 import org.dromara.soul.register.client.http.utils.OkHttpTools;
 import org.junit.Before;
 import org.junit.Rule;

File: soul-register-center/soul-register-client/soul-register-client-http/src/test/java/org/dromara/soul/register/client/http/RegisterUtilsTest.java
Patch:
@@ -43,7 +43,7 @@
  */
 public final class RegisterUtilsTest {
     
-    private Gson gson  = new Gson();
+    private Gson gson = new Gson();
     
     private OkHttpTools okHttpTools;
     
@@ -96,7 +96,7 @@ public void testDoRegisterWhenError() {
     }
     
     @SneakyThrows
-    @Test
+    @Test(expected = IOException.class)
     public void testDoRegisterWhenThrowException() {
         when(okHttpTools.post(url, json)).thenThrow(IOException.class);
         try (MockedStatic<OkHttpTools> okHttpToolsMockedStatic = mockStatic(OkHttpTools.class)) {

File: soul-register-center/soul-register-client/soul-register-client-zookeeper/src/main/java/org/dromara/soul/register/client/zookeeper/ZookeeperClientRegisterRepository.java
Patch:
@@ -57,7 +57,7 @@ public void init(final SoulRegisterCenterConfig config) {
     }
 
     /**
-     * uri(host+port)用于标识SpringMVC的下线
+     * uri(host+port)用于标识SpringMVC的下线.
      *
      * @param metadata  metadata
      */
@@ -112,7 +112,8 @@ private String buildNodeName(final String serviceName, final String methodName)
         return String.join(DOT_SEPARATOR, serviceName, methodName);
     }
     
-    private void updateZkNode(String rpcType, String contextPath, String nodeName, MetaDataDTO data) {
+    private void updateZkNode(final String rpcType, final String contextPath, final String nodeName,
+                              final MetaDataDTO data) {
         String childPath = String.join(PATH_SEPARATOR, rootPath, rpcType, contextPath, "metadata");
         String nodePath = String.join(PATH_SEPARATOR, childPath, nodeName);
 

File: soul-register-center/soul-register-server/soul-register-server-api/src/main/java/org/dromara/soul/register/server/api/SoulSeverRegisterCenterEventPublisher.java
Patch:
@@ -20,6 +20,8 @@
 import org.dromara.soul.register.server.api.listener.DataChangedEvent;
 
 /**
+ * register center interface.
+ *
  * @author lw1243925457
  */
 public interface SoulSeverRegisterCenterEventPublisher {
@@ -31,5 +33,5 @@ public interface SoulSeverRegisterCenterEventPublisher {
      * @param key key
      * @param value value
      */
-    void publishEvent(final DataChangedEvent.Type eventType, final String key, final Object value);
+    void publishEvent(DataChangedEvent.Type eventType, String key, Object value);
 }

File: soul-examples/soul-examples-tars/src/main/java/org/dromara/soul/examples/tars/servant/testapp/HelloServant.java
Patch:
@@ -14,5 +14,6 @@ public interface HelloServant {
 
 	 String hello(@TarsMethodParameter(name="no")int no, @TarsMethodParameter(name="name")String name);
 
-	 Integer helloInt(@TarsMethodParameter(name="no")int no, @TarsMethodParameter(name="name")String name);
+	 int helloInt(@TarsMethodParameter(name="no")int no, @TarsMethodParameter(name="name")String name);
+
 }

File: soul-examples/soul-examples-tars/src/main/java/org/dromara/soul/examples/tars/servant/testapp/impl/HelloServantImpl.java
Patch:
@@ -36,7 +36,7 @@ public String hello(int no, String name) {
 
     @Override
     @SoulTarsClient(path = "/helloInt")
-    public Integer helloInt(int no, String name) {
+    public int helloInt(int no, String name) {
         return 1;
     }
 }

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/SoulClientControllerTest.java
Patch:
@@ -162,6 +162,6 @@ public void testRegisterTarsRpc() {
         metaDataDTO.setParameterTypes("parameterTypes");
         when(soulClientRegisterService.registerTars(any())).thenReturn("result");
         final String result = soulClientController.registerTarsRpc(metaDataDTO);
-        assertEquals("SUCCESS", result);
+        assertEquals("success", result);
     }
 }

File: soul-register-center/soul-register-server/soul-register-server-api/src/main/java/org/dromara/soul/register/server/api/listener/DataChangedEvent.java
Patch:
@@ -29,7 +29,7 @@ public final class DataChangedEvent {
     
     private final String key;
     
-    private final String value;
+    private final Object value;
     
     private final Type type;
     

File: soul-client/soul-client-dubbo/soul-client-alibaba-dubbo/src/main/java/org/dromara/soul/client/alibaba/dubbo/AlibabaDubboServiceBeanPostProcessor.java
Patch:
@@ -27,9 +27,9 @@
 import org.dromara.soul.client.dubbo.common.config.DubboConfig;
 import org.dromara.soul.client.dubbo.common.dto.MetaDataDTO;
 import org.dromara.soul.common.enums.RpcTypeEnum;
+import org.springframework.aop.support.AopUtils;
 import org.springframework.context.ApplicationListener;
 import org.springframework.context.event.ContextRefreshedEvent;
-import org.springframework.util.ClassUtils;
 import org.springframework.util.ReflectionUtils;
 
 import java.lang.reflect.Method;
@@ -70,7 +70,7 @@ public AlibabaDubboServiceBeanPostProcessor(final DubboConfig dubboConfig) {
 
     private void handler(final ServiceBean<?> serviceBean) {
         Class<?> clazz = serviceBean.getRef().getClass();
-        if (ClassUtils.isCglibProxyClass(clazz)) {
+        if (AopUtils.isCglibProxy(clazz)) {
             String superClassName = clazz.getGenericSuperclass().getTypeName();
             try {
                 clazz = Class.forName(superClassName);

File: soul-client/soul-client-dubbo/soul-client-apache-dubbo/src/main/java/org/dromara/soul/client/apache/dubbo/ApacheDubboServiceBeanPostProcessor.java
Patch:
@@ -27,9 +27,9 @@
 import org.dromara.soul.client.dubbo.common.config.DubboConfig;
 import org.dromara.soul.client.dubbo.common.dto.MetaDataDTO;
 import org.dromara.soul.common.enums.RpcTypeEnum;
+import org.springframework.aop.support.AopUtils;
 import org.springframework.context.ApplicationListener;
 import org.springframework.context.event.ContextRefreshedEvent;
-import org.springframework.util.ClassUtils;
 import org.springframework.util.ReflectionUtils;
 
 import java.lang.reflect.Method;
@@ -70,7 +70,7 @@ public ApacheDubboServiceBeanPostProcessor(final DubboConfig dubboConfig) {
 
     private void handler(final ServiceBean serviceBean) {
         Class<?> clazz = serviceBean.getRef().getClass();
-        if (ClassUtils.isCglibProxyClass(clazz)) {
+        if (AopUtils.isCglibProxy(clazz)) {
             String superClassName = clazz.getGenericSuperclass().getTypeName();
             try {
                 clazz = Class.forName(superClassName);

File: soul-client/soul-client-sofa/src/main/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessor.java
Patch:
@@ -27,9 +27,9 @@
 import org.dromara.soul.client.sofa.common.config.SofaConfig;
 import org.dromara.soul.client.sofa.common.dto.MetaDataDTO;
 import org.dromara.soul.common.enums.RpcTypeEnum;
+import org.springframework.aop.support.AopUtils;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanPostProcessor;
-import org.springframework.util.ClassUtils;
 import org.springframework.util.ReflectionUtils;
 
 import java.lang.reflect.Method;
@@ -90,7 +90,7 @@ private void handler(final ServiceFactoryBean serviceBean) {
             log.error("failed to get sofa target class");
             return;
         }
-        if (ClassUtils.isCglibProxyClass(clazz)) {
+        if (AopUtils.isCglibProxy(clazz)) {
             String superClassName = clazz.getGenericSuperclass().getTypeName();
             try {
                 clazz = Class.forName(superClassName);

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -27,11 +27,11 @@
 import org.dromara.soul.client.tars.common.config.TarsConfig;
 import org.dromara.soul.client.tars.common.dto.MetaDataDTO;
 import org.dromara.soul.common.enums.RpcTypeEnum;
+import org.springframework.aop.support.AopUtils;
 import org.dromara.soul.common.utils.GsonUtils;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanPostProcessor;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
-import org.springframework.util.ClassUtils;
 import org.springframework.util.ReflectionUtils;
 
 import java.lang.reflect.Method;
@@ -83,7 +83,7 @@ public Object postProcessAfterInitialization(final Object bean, final String bea
 
     private void handler(final Object serviceBean) {
         Class<?> clazz = serviceBean.getClass();
-        if (ClassUtils.isCglibProxyClass(clazz)) {
+        if (AopUtils.isCglibProxy(clazz)) {
             String superClassName = clazz.getGenericSuperclass().getTypeName();
             try {
                 clazz = Class.forName(superClassName);

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -27,6 +27,7 @@
 import org.dromara.soul.client.tars.common.config.TarsConfig;
 import org.dromara.soul.client.tars.common.dto.MetaDataDTO;
 import org.dromara.soul.common.enums.RpcTypeEnum;
+import org.dromara.soul.common.utils.GsonUtils;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanPostProcessor;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
@@ -120,7 +121,7 @@ private String buildJsonParams(final String serviceName, final SoulTarsClient so
                 .ruleName(ruleName)
                 .pathDesc(desc)
                 .parameterTypes(parameterTypes)
-                .rpcType("tars")
+                .rpcType(RpcTypeEnum.TARS.getName())
                 .rpcExt(rpcExt)
                 .enabled(soulTarsClient.enabled())
                 .build();
@@ -153,6 +154,6 @@ private String buildRpcExt(final Method[] methods) {
         MetaDataDTO.RpcExtList buildList = MetaDataDTO.RpcExtList.builder()
                 .methodInfo(list)
                 .build();
-        return OkHttpTools.getInstance().getGson().toJson(buildList);
+        return GsonUtils.getInstance().toJson(buildList);
     }
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -119,6 +119,7 @@ public int delete(final List<String> ids) {
                 }
             }
             dashboardUserCount += dashboardUserMapper.delete(id);
+            userRoleMapper.deleteByUserId(id);
         }
         return dashboardUserCount;
     }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/RoleServiceImpl.java
Patch:
@@ -76,7 +76,7 @@ public RoleServiceImpl(final RoleMapper roleMapper, final PermissionMapper permi
      * @return rows
      */
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public int createOrUpdate(final RoleDTO roleDTO) {
         RoleDO roleDO = RoleDO.buildRoleDO(roleDTO);
         if (StringUtils.isEmpty(roleDTO.getId())) {

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/PermissionControllerTest.java
Patch:
@@ -57,8 +57,8 @@ public void testGetUserPermissionByToken() {
         final PermissionMenuVO permissionMenuVO = new PermissionMenuVO(
                 Arrays.asList(new PermissionMenuVO.MenuInfo("id", "name", "url", "component",
                         new PermissionMenuVO.Meta("icon", "title"), Arrays.asList(), 0)),
-                Arrays.asList(new PermissionMenuVO.AuthPerm("perms1", "description1")),
-                Arrays.asList(new PermissionMenuVO.AuthPerm("perms2", "description2")));
+                Arrays.asList(new PermissionMenuVO.AuthPerm("perms1", "description1", "icon")),
+                Arrays.asList(new PermissionMenuVO.AuthPerm("perms2", "description2", "icon")));
         when(mockPermissionService.getPermissionMenu("token")).thenReturn(permissionMenuVO);
         final SoulAdminResult result = permissionController.getUserPermissionByToken("token");
         assertThat(result.getCode().intValue(), is(CommonErrorCode.SUCCESSFUL));

File: soul-common/src/main/java/org/dromara/soul/common/constant/NacosPathConstants.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author lw1243925457
  */
-public class NacosPathConstants {
+public final class NacosPathConstants {
 
     /**
      * Nacos config default group.

File: soul-common/src/main/java/org/dromara/soul/common/dto/convert/Resilience4JHandle.java
Patch:
@@ -99,9 +99,8 @@ public class Resilience4JHandle {
      * check filed default value.
      *
      * @param resilience4JHandle {@linkplain Resilience4JHandle}
-     * @return {@linkplain Resilience4JHandle}
      */
-    public Resilience4JHandle checkData(final Resilience4JHandle resilience4JHandle) {
+    public void checkData(final Resilience4JHandle resilience4JHandle) {
         resilience4JHandle.setTimeoutDurationRate(Math.max(resilience4JHandle.getTimeoutDurationRate(), Constants.TIMEOUT_DURATION_RATE));
         resilience4JHandle.setLimitRefreshPeriod(Math.max(resilience4JHandle.getLimitRefreshPeriod(), Constants.LIMIT_REFRESH_PERIOD));
         resilience4JHandle.setLimitForPeriod(Math.max(resilience4JHandle.getLimitForPeriod(), Constants.LIMIT_FOR_PERIOD));
@@ -114,6 +113,5 @@ public Resilience4JHandle checkData(final Resilience4JHandle resilience4JHandle)
         resilience4JHandle.setWaitIntervalFunctionInOpenState(Math.max(resilience4JHandle.getWaitIntervalFunctionInOpenState(), Constants.WAIT_INTERVAL_FUNCTION_IN_OPEN_STATE));
         resilience4JHandle.setPermittedNumberOfCallsInHalfOpenState(Math.max(resilience4JHandle.getPermittedNumberOfCallsInHalfOpenState(), Constants.PERMITTED_NUMBER_OF_CALLS_IN_HALF_OPEN_STATE));
         resilience4JHandle.setFailureRateThreshold(Math.max(resilience4JHandle.getFailureRateThreshold(), Constants.FAILURE_RATE_THRESHOLD));
-        return resilience4JHandle;
     }
 }

File: soul-common/src/main/java/org/dromara/soul/common/dto/convert/SentinelHandle.java
Patch:
@@ -81,13 +81,11 @@ public class SentinelHandle {
      * check filed default value.
      *
      * @param sentinelHandle {@linkplain SentinelHandle}
-     * @return {@linkplain SentinelHandle}
      */
-    public SentinelHandle checkData(final SentinelHandle sentinelHandle) {
+    public void checkData(final SentinelHandle sentinelHandle) {
         sentinelHandle.setFlowRuleEnable((sentinelHandle.getFlowRuleEnable() == 1 || sentinelHandle.getFlowRuleEnable() == 0)
                 ? sentinelHandle.getFlowRuleEnable() : Constants.SENTINEL_ENABLE_FLOW_RULE);
         sentinelHandle.setDegradeRuleEnable((sentinelHandle.getDegradeRuleEnable() == 1 || sentinelHandle.getDegradeRuleEnable() == 0)
                 ? sentinelHandle.getDegradeRuleEnable() : Constants.SENTINEL_ENABLE_DEGRADE_RULE);
-        return sentinelHandle;
     }
 }

File: soul-examples/soul-examples-dubbo/soul-examples-dubbo-api/src/main/java/org/dromara/soul/examples/dubbo/api/service/DubboMultiParamService.java
Patch:
@@ -38,7 +38,6 @@ public interface DubboMultiParamService {
 
     /**
      * Find by array ids and name dubbo test.
-     * <p>
      * body :{"ids":[123,4561],"name":"hello world"}
      *
      * @param ids  the ids
@@ -76,7 +75,6 @@ public interface DubboMultiParamService {
 
     /**
      * Batch save and name and id dubbo test.
-     * <p>
      * body: {"dubboTestList":[{"id":"123","name":"xiaoyu"},{"id":"456","name":"myth"}],"id":"789","name":"ttt"}
      *
      * @param dubboTestList the dubbo test list

File: soul-examples/soul-examples-dubbo/soul-examples-dubbo-api/src/main/java/org/dromara/soul/examples/dubbo/api/service/DubboTestService.java
Patch:
@@ -28,7 +28,6 @@ public interface DubboTestService {
 
     /**
      * find by id.
-     * <p>
      * body：{"id":"1223"}
      *
      * @param id id
@@ -45,7 +44,6 @@ public interface DubboTestService {
 
     /**
      * Insert dubbo test.
-     *
      * body :{"id":"122344","name":"xiaoyu"}
      *
      * @param dubboTest the dubbo test

File: soul-plugin/soul-plugin-resilience4j/src/main/java/org/dromara/soul/plugin/resilience4j/Resilience4JPlugin.java
Patch:
@@ -60,7 +60,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);
         assert soulContext != null;
         Resilience4JHandle resilience4JHandle = GsonUtils.getGson().fromJson(rule.getHandle(), Resilience4JHandle.class);
-        resilience4JHandle = resilience4JHandle.checkData(resilience4JHandle);
+        resilience4JHandle.checkData(resilience4JHandle);
         if (resilience4JHandle.getCircuitEnable() == 1) {
             return combined(exchange, chain, rule);
         }

File: soul-plugin/soul-plugin-resilience4j/src/main/java/org/dromara/soul/plugin/resilience4j/build/Resilience4JBuilder.java
Patch:
@@ -44,7 +44,7 @@ public class Resilience4JBuilder {
      */
     public static Resilience4JConf build(final RuleData ruleData) {
         Resilience4JHandle handle = GsonUtils.getGson().fromJson(ruleData.getHandle(), Resilience4JHandle.class);
-        handle = handle.checkData(handle);
+        handle.checkData(handle);
         CircuitBreakerConfig circuitBreakerConfig = null;
         if (handle.getCircuitEnable() == 1) {
             circuitBreakerConfig = CircuitBreakerConfig.custom()

File: soul-plugin/soul-plugin-sentinel/src/main/java/org/dromara/soul/plugin/sentinel/SentinelPlugin.java
Patch:
@@ -56,15 +56,14 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         assert soulContext != null;
         String resourceName = SentinelRuleHandle.getResourceName(rule);
         SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class);
-        sentinelHandle = sentinelHandle.checkData(sentinelHandle);
-        SentinelHandle finalSentinelHandle = sentinelHandle;
+        sentinelHandle.checkData(sentinelHandle);
         return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)).doOnSuccess(v -> {
             HttpStatus status = exchange.getResponse().getStatusCode();
             if (status == null || !status.is2xxSuccessful()) {
                 exchange.getResponse().setStatusCode(null);
                 throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);
             }
-        }).onErrorResume(throwable -> sentinelFallbackHandler.fallback(exchange, UriUtils.createUri(finalSentinelHandle.getFallbackUri()), throwable));
+        }).onErrorResume(throwable -> sentinelFallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));
     }
 
     @Override

File: soul-plugin/soul-plugin-sentinel/src/main/java/org/dromara/soul/plugin/sentinel/handler/SentinelRuleHandle.java
Patch:
@@ -41,7 +41,7 @@ public class SentinelRuleHandle implements PluginDataHandler {
     @Override
     public void handlerRule(final RuleData ruleData) {
         SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class);
-        sentinelHandle = sentinelHandle.checkData(sentinelHandle);
+        sentinelHandle.checkData(sentinelHandle);
         List<FlowRule> flowRules = FlowRuleManager.getRules()
                 .stream()
                 .filter(r -> !r.getResource().equals(getResourceName(ruleData)))

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/RuleDO.java
Patch:
@@ -94,7 +94,7 @@ public static RuleDO buildRuleDO(final RuleDTO ruleDTO) {
                     .enabled(item.getEnabled())
                     .loged(item.getLoged())
                     .sort(item.getSort())
-                    .handle(item.getHandle())
+                    .handle(item.getHandle().replaceAll("\"\"", "\"0\""))
                     .dateUpdated(currentTime)
                     .build();
             if (StringUtils.isEmpty(item.getId())) {

File: soul-admin/src/test/java/org/dromara/soul/admin/service/RuleServiceTest.java
Patch:
@@ -235,6 +235,7 @@ private RuleDO buildRuleDO(final String id) {
         RuleDTO ruleDTO = RuleDTO.builder()
                 .selectorId("456")
                 .matchMode(0)
+                .handle("{\"test1\":\"\"}")
                 .build();
         if (StringUtils.isNotBlank(id)) {
             ruleDTO.setId(id);
@@ -253,6 +254,7 @@ private RuleDTO buildRuleDTO(final String id) {
         RuleDTO ruleDTO = RuleDTO.builder()
                 .selectorId("456")
                 .matchMode(0)
+                .handle("{\"test1\":\"\"}")
                 .build();
         if (StringUtils.isNotBlank(id)) {
             ruleDTO.setId(id);

File: soul-plugin/soul-plugin-resilience4j/src/main/java/org/dromara/soul/plugin/resilience4j/Resilience4JPlugin.java
Patch:
@@ -60,6 +60,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);
         assert soulContext != null;
         Resilience4JHandle resilience4JHandle = GsonUtils.getGson().fromJson(rule.getHandle(), Resilience4JHandle.class);
+        resilience4JHandle = resilience4JHandle.checkData(resilience4JHandle);
         if (resilience4JHandle.getCircuitEnable() == 1) {
             return combined(exchange, chain, rule);
         }

File: soul-plugin/soul-plugin-resilience4j/src/main/java/org/dromara/soul/plugin/resilience4j/build/Resilience4JBuilder.java
Patch:
@@ -44,6 +44,7 @@ public class Resilience4JBuilder {
      */
     public static Resilience4JConf build(final RuleData ruleData) {
         Resilience4JHandle handle = GsonUtils.getGson().fromJson(ruleData.getHandle(), Resilience4JHandle.class);
+        handle = handle.checkData(handle);
         CircuitBreakerConfig circuitBreakerConfig = null;
         if (handle.getCircuitEnable() == 1) {
             circuitBreakerConfig = CircuitBreakerConfig.custom()

File: soul-plugin/soul-plugin-sentinel/src/main/java/org/dromara/soul/plugin/sentinel/SentinelPlugin.java
Patch:
@@ -56,13 +56,15 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         assert soulContext != null;
         String resourceName = SentinelRuleHandle.getResourceName(rule);
         SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class);
+        sentinelHandle = sentinelHandle.checkData(sentinelHandle);
+        SentinelHandle finalSentinelHandle = sentinelHandle;
         return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)).doOnSuccess(v -> {
             HttpStatus status = exchange.getResponse().getStatusCode();
             if (status == null || !status.is2xxSuccessful()) {
                 exchange.getResponse().setStatusCode(null);
                 throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);
             }
-        }).onErrorResume(throwable -> sentinelFallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));
+        }).onErrorResume(throwable -> sentinelFallbackHandler.fallback(exchange, UriUtils.createUri(finalSentinelHandle.getFallbackUri()), throwable));
     }
 
     @Override

File: soul-plugin/soul-plugin-sentinel/src/main/java/org/dromara/soul/plugin/sentinel/handler/SentinelRuleHandle.java
Patch:
@@ -41,7 +41,7 @@ public class SentinelRuleHandle implements PluginDataHandler {
     @Override
     public void handlerRule(final RuleData ruleData) {
         SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class);
-
+        sentinelHandle = sentinelHandle.checkData(sentinelHandle);
         List<FlowRule> flowRules = FlowRuleManager.getRules()
                 .stream()
                 .filter(r -> !r.getResource().equals(getResourceName(ruleData)))

File: soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/param/AlibabaDubboBodyParamPlugin.java
Patch:
@@ -39,14 +39,14 @@
 /**
  * The type Body param plugin.
  */
-public class BodyParamPlugin implements SoulPlugin {
+public class AlibabaDubboBodyParamPlugin implements SoulPlugin {
 
     private final List<HttpMessageReader<?>> messageReaders;
 
     /**
      * Instantiates a new Body param plugin.
      */
-    public BodyParamPlugin() {
+    public AlibabaDubboBodyParamPlugin() {
         this.messageReaders = HandlerStrategies.withDefaults().messageReaders();
     }
 

File: soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/param/ApacheDubboBodyParamPlugin.java
Patch:
@@ -41,14 +41,14 @@
  *
  * @author xiaoyu
  */
-public class BodyParamPlugin implements SoulPlugin {
+public class ApacheDubboBodyParamPlugin implements SoulPlugin {
 
     private final List<HttpMessageReader<?>> messageReaders;
 
     /**
      * Instantiates a new Body param plugin.
      */
-    public BodyParamPlugin() {
+    public ApacheDubboBodyParamPlugin() {
         this.messageReaders = HandlerStrategies.withDefaults().messageReaders();
     }
 

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/cache/GrpcClientCache.java
Patch:
@@ -51,9 +51,7 @@ public class GrpcClientCache {
      * @param contextPath contextPath
      */
     public static void initGrpcClient(final String contextPath) {
-        CLIENT_CACHE.computeIfAbsent(contextPath, s -> {
-            return GrpcClientBuilder.buildClient(contextPath);
-        });
+        CLIENT_CACHE.computeIfAbsent(contextPath, s -> GrpcClientBuilder.buildClient(contextPath));
     }
 
     /**

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/loadbalance/SubChannelCopy.java
Patch:
@@ -24,13 +24,13 @@
 import lombok.Getter;
 
 /**
- * SubchannelCopy.
+ * SubChannelCopy.
  *
  * @author zhanglei
  */
 @EqualsAndHashCode
 @Getter
-public class SubchannelCopy {
+public class SubChannelCopy {
 
     private final int weight;
 
@@ -40,7 +40,7 @@ public class SubchannelCopy {
 
     private final ConnectivityStateInfo state;
 
-    public SubchannelCopy(final LoadBalancer.Subchannel channel) {
+    public SubChannelCopy(final LoadBalancer.Subchannel channel) {
         this.channel = channel;
         this.addressGroup = channel.getAddresses();
         this.weight = SubChannels.getWeight(channel);

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/loadbalance/picker/Picker.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.dromara.soul.plugin.grpc.loadbalance.picker;
 
-import org.dromara.soul.plugin.grpc.loadbalance.SubchannelCopy;
+import org.dromara.soul.plugin.grpc.loadbalance.SubChannelCopy;
 
 import java.util.List;
 
@@ -33,5 +33,5 @@ public interface Picker {
      *
      * @return List list
      */
-    List<SubchannelCopy> getSubchannels();
+    List<SubChannelCopy> getSubchannels();
 }

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/loadbalance/picker/RoundRobinPicker.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.grpc.LoadBalancer;
 import org.apache.commons.collections4.CollectionUtils;
-import org.dromara.soul.plugin.grpc.loadbalance.SubchannelCopy;
+import org.dromara.soul.plugin.grpc.loadbalance.SubChannelCopy;
 
 import java.util.List;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
@@ -44,7 +44,7 @@ public RoundRobinPicker(final List<LoadBalancer.Subchannel> list) {
     }
 
     @Override
-    protected SubchannelCopy pick(final List<SubchannelCopy> list) {
+    protected SubChannelCopy pick(final List<SubChannelCopy> list) {
         if (CollectionUtils.isEmpty(list)) {
             return null;
         }

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/param/GrpcBodyParamPlugin.java
Patch:
@@ -37,18 +37,18 @@
 import java.util.Objects;
 
 /**
- * The type Body param plugin.
+ * The type Grpc Body param plugin.
  *
  * @author zhanglei
  */
-public class BodyParamPlugin implements SoulPlugin {
+public class GrpcBodyParamPlugin implements SoulPlugin {
 
     private final List<HttpMessageReader<?>> messageReaders;
 
     /**
      * Instantiates a new Body param plugin.
      */
-    public BodyParamPlugin() {
+    public GrpcBodyParamPlugin() {
         this.messageReaders = HandlerStrategies.withDefaults().messageReaders();
     }
 

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/proto/SoulGrpcResponse.java
Patch:
@@ -28,5 +28,6 @@
  */
 @Data
 public class SoulGrpcResponse implements Serializable {
+    
     private String result;
 }

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/resolver/SoulNameResolver.java
Patch:
@@ -44,7 +44,7 @@
  * @author zhanglei
  */
 @Slf4j
-public class SoulNameResolver extends NameResolver implements Consumer {
+public class SoulNameResolver extends NameResolver implements Consumer<Object> {
 
     private boolean resolving;
 
@@ -162,7 +162,7 @@ private List<SoulServiceInstance> resolveInternal() {
             }
             if (!needsToUpdateConnections(newInstanceList)) {
                 log.info("Nothing has changed... skipping update for {}", name);
-                return keep;
+                return null;
             }
             log.info("Ready to update server list for {}", name);
             final List<EquivalentAddressGroup> targets = newInstanceList.stream()

File: soul-plugin/soul-plugin-grpc/src/main/java/org/dromara/soul/plugin/grpc/response/GrpcResponsePlugin.java
Patch:
@@ -81,5 +81,4 @@ public int getOrder() {
     public String named() {
         return PluginEnum.RESPONSE.getName();
     }
-
 }

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/spring/boot/starter/plugin/alibaba/dubbo/AlibabaDubboPluginConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.dromara.soul.plugin.alibaba.dubbo.AlibabaDubboPlugin;
 import org.dromara.soul.plugin.alibaba.dubbo.handler.AlibabaDubboPluginDataHandler;
-import org.dromara.soul.plugin.alibaba.dubbo.param.BodyParamPlugin;
+import org.dromara.soul.plugin.alibaba.dubbo.param.AlibabaDubboBodyParamPlugin;
 import org.dromara.soul.plugin.alibaba.dubbo.proxy.AlibabaDubboProxyService;
 import org.dromara.soul.plugin.alibaba.dubbo.response.DubboResponsePlugin;
 import org.dromara.soul.plugin.alibaba.dubbo.subscriber.AlibabaDubboMetaDataSubscriber;
@@ -59,7 +59,7 @@ public SoulPlugin alibabaDubboPlugin(final ObjectProvider<DubboParamResolveServi
      */
     @Bean
     public SoulPlugin alibabaDubboBodyParamPlugin() {
-        return new BodyParamPlugin();
+        return new AlibabaDubboBodyParamPlugin();
     }
 
     /**

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-apache-dubbo/src/main/java/org/dromara/soul/spring/boot/starter/plugin/apache/dubbo/ApacheDubboPluginConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.dromara.soul.plugin.apache.dubbo.ApacheDubboPlugin;
 import org.dromara.soul.plugin.apache.dubbo.handler.ApacheDubboPluginDataHandler;
-import org.dromara.soul.plugin.apache.dubbo.param.BodyParamPlugin;
+import org.dromara.soul.plugin.apache.dubbo.param.ApacheDubboBodyParamPlugin;
 import org.dromara.soul.plugin.apache.dubbo.proxy.ApacheDubboProxyService;
 import org.dromara.soul.plugin.apache.dubbo.response.DubboResponsePlugin;
 import org.dromara.soul.plugin.apache.dubbo.subscriber.ApacheDubboMetaDataSubscriber;
@@ -59,7 +59,7 @@ public SoulPlugin apacheDubboPlugin(final ObjectProvider<DubboParamResolveServic
      */
     @Bean
     public SoulPlugin apacheDubboBodyParamPlugin() {
-        return new BodyParamPlugin();
+        return new ApacheDubboBodyParamPlugin();
     }
 
     /**

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-grpc/src/main/java/org/dromara/soul/spring/boot/starter/plugin/grpc/GrpcPluginConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.dromara.soul.plugin.api.SoulPlugin;
 import org.dromara.soul.plugin.grpc.GrpcPlugin;
-import org.dromara.soul.plugin.grpc.param.BodyParamPlugin;
+import org.dromara.soul.plugin.grpc.param.GrpcBodyParamPlugin;
 import org.dromara.soul.plugin.grpc.response.GrpcResponsePlugin;
 import org.dromara.soul.plugin.grpc.subscriber.GrpcMetaDataSubscriber;
 import org.dromara.soul.sync.data.api.MetaDataSubscriber;
@@ -51,8 +51,8 @@ public SoulPlugin grpcPlugin() {
      * @return the soul plugin
      */
     @Bean
-    public SoulPlugin bodyParamPlugin() {
-        return new BodyParamPlugin();
+    public SoulPlugin grpcBodyParamPlugin() {
+        return new GrpcBodyParamPlugin();
     }
 
     /**

File: soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/response/RateLimiterResponse.java
Patch:
@@ -37,6 +37,6 @@ public class RateLimiterResponse implements Serializable {
 
     @Override
     public String toString() {
-        return "Response{" + "allowed=" + allowed  + ", tokensRemaining=" + tokensRemaining + '}';
+        return "Response{" + "allowed=" + allowed + ", tokensRemaining=" + tokensRemaining + '}';
     }
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/ResourceController.java
Patch:
@@ -73,7 +73,7 @@ public SoulAdminResult queryResource(final String title, final Integer currentPa
     }
 
     /**
-     * detail role and permission info.
+     * detail resource info.
      *
      * @param id role id
      * @return {@linkplain SoulAdminResult}
@@ -111,7 +111,7 @@ public SoulAdminResult updateResource(@PathVariable("id") final String id, @Requ
     }
 
     /**
-     * delete role info.
+     * delete resource info.
      *
      * @param ids primary keys.
      * @return {@linkplain SoulAdminResult}

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/ResourceServiceImpl.java
Patch:
@@ -86,7 +86,7 @@ public ResourceVO findById(final String id) {
     }
 
     /**
-     * find page of role by query.
+     * find page of resource by query.
      *
      * @param resourceQuery {@linkplain ResourceQuery}
      * @return {@linkplain CommonPager}

File: soul-plugin/soul-plugin-tars/src/test/java/org/dromara/soul/plugin/tars/subscriber/TarsMetaDataSubscriberTest.java
Patch:
@@ -40,7 +40,8 @@ public class TarsMetaDataSubscriberTest {
     public void setUp() {
         metaData = new MetaData("id", "127.0.0.1:8080", "contextPath",
                 "path", RpcTypeEnum.TARS.getName(), "serviceName", "method1",
-                "parameterTypes", "{\"methodInfo\":[{\"methodName\":\"method1\",\"params\":[{\"key\":\"int\",\"value\":\"param1\"},{\"key\":\"java.lang.Integer\",\"value\":\"param2\"}]}]}", false);
+                "parameterTypes", "{\"methodInfo\":[{\"methodName\":\"method1\",\"params\":[{\"left\":\"int\",\"right\":\"param1\"},"
+                + "{\"left\":\"java.lang.Integer\",\"right\":\"param2\"}],\"returnType\":\"java.lang.String\"}]}", false);
         tarsMetaDataSubscriber = new TarsMetaDataSubscriber();
     }
 

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/condition/strategy/AbstractMatchStrategy.java
Patch:
@@ -74,6 +74,9 @@ String buildRealData(final ConditionData condition, final ServerWebExchange exch
                 final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);
                 realData = (String) ReflectUtils.getFieldValue(soulContext, condition.getParamName());
                 break;
+            case REQUEST_METHOD:
+                realData = exchange.getRequest().getMethodValue();
+                break;
             default:
                 break;
         }

File: soul-admin/src/test/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListenerTest.java
Patch:
@@ -163,7 +163,7 @@ public void testOnSelectorChanged() throws NacosException {
         Assert.assertEquals(
                 configService.getConfig(SELECTOR_DATA_ID, GROUP, 1),
                 GsonUtils.getInstance()
-                        .toJson(ImmutableMap.of(selectorDataPluginName1, ImmutableList.of())));
+                        .toJson(ImmutableMap.of(selectorDataPluginName1, ImmutableList.of(selectorData1))));
     }
 
     @Test
@@ -222,6 +222,6 @@ public void testOnRuleChanged() throws NacosException {
         nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);
         Assert.assertEquals(
                 configService.getConfig(RULE_DATA_ID, GROUP, 1),
-                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of())));
+                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of(ruleData1))));
     }
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/SoulClientRegisterServiceImpl.java
Patch:
@@ -285,7 +285,7 @@ private void saveOrUpdateMetaData(final MetaDataDO exist, final MetaDataDTO meta
             metaDataMapper.update(metaDataDO);
             eventType = DataEventTypeEnum.UPDATE;
         }
-        // publish AppAuthData's event
+        // publish MetaData's event
         eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.META_DATA, eventType,
                 Collections.singletonList(MetaDataTransfer.INSTANCE.mapToData(metaDataDTO))));
     }

File: soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/subscriber/AlibabaDubboMetaDataSubscriber.java
Patch:
@@ -40,7 +40,7 @@ public class AlibabaDubboMetaDataSubscriber implements MetaDataSubscriber {
     public void onSubscribe(final MetaData metaData) {
         if (RpcTypeEnum.DUBBO.getName().equals(metaData.getRpcType())) {
             MetaData exist = META_DATA.get(metaData.getPath());
-            if (Objects.isNull(META_DATA.get(metaData.getPath())) || Objects.isNull(ApplicationConfigCache.getInstance().get(metaData.getPath()))) {
+            if (Objects.isNull(exist) || Objects.isNull(ApplicationConfigCache.getInstance().get(metaData.getPath()))) {
                 // The first initialization
                 ApplicationConfigCache.getInstance().initRef(metaData);
             } else {

File: soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/subscriber/ApacheDubboMetaDataSubscriber.java
Patch:
@@ -40,7 +40,7 @@ public class ApacheDubboMetaDataSubscriber implements MetaDataSubscriber {
     public void onSubscribe(final MetaData metaData) {
         if (RpcTypeEnum.DUBBO.getName().equals(metaData.getRpcType())) {
             MetaData exist = META_DATA.get(metaData.getPath());
-            if (Objects.isNull(META_DATA.get(metaData.getPath())) || Objects.isNull(ApplicationConfigCache.getInstance().get(metaData.getPath()))) {
+            if (Objects.isNull(exist) || Objects.isNull(ApplicationConfigCache.getInstance().get(metaData.getPath()))) {
                 // The first initialization
                 ApplicationConfigCache.getInstance().initRef(metaData);
             } else {

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/zookeeper/ZookeeperDataChangedListener.java
Patch:
@@ -94,7 +94,7 @@ public void onPluginChanged(final List<PluginData> changed, final DataEventTypeE
 
     @Override
     public void onSelectorChanged(final List<SelectorData> changed, final DataEventTypeEnum eventType) {
-        if (eventType == DataEventTypeEnum.REFRESH) {
+        if (eventType == DataEventTypeEnum.REFRESH && !changed.isEmpty()) {
             final String selectorParentPath = ZkPathConstants.buildSelectorParentPath(changed.get(0).getPluginName());
             deleteZkPathRecursive(selectorParentPath);
         }
@@ -113,7 +113,7 @@ public void onSelectorChanged(final List<SelectorData> changed, final DataEventT
 
     @Override
     public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum eventType) {
-        if (eventType == DataEventTypeEnum.REFRESH) {
+        if (eventType == DataEventTypeEnum.REFRESH && !changed.isEmpty()) {
             final String selectorParentPath = ZkPathConstants.buildRuleParentPath(changed.get(0).getPluginName());
             deleteZkPathRecursive(selectorParentPath);
         }

File: soul-sync-data-center/soul-sync-data-zookeeper/src/main/java/org/dromara/soul/sync/data/zookeeper/ZookeeperSyncDataService.java
Patch:
@@ -153,7 +153,7 @@ private void watchMetaData() {
                 subscribeMetaDataChanges(realPath);
             });
         }
-        subscribeChildChanges(ConfigGroupEnum.APP_AUTH, metaDataPath, childrenList);
+        subscribeChildChanges(ConfigGroupEnum.META_DATA, metaDataPath, childrenList);
     }
 
     private void subscribeChildChanges(final ConfigGroupEnum groupKey, final String groupParentPath, final List<String> childrenList) {

File: soul-admin/src/test/java/org/dromara/soul/admin/page/PageResultUtilsTest.java
Patch:
@@ -33,14 +33,15 @@ public final class PageResultUtilsTest {
     @Test
     public void testEmptyResult() {
         final PageParameter pageParameter = new PageParameter(1, 10, 0);
-        final CommonPager<String> result = PageResultUtils.result(pageParameter, 0, ArrayList::new);
+        final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 0, ArrayList::new);
         Assert.assertEquals(result.getDataList().size(), 0);
     }
 
     @Test
     public void testResult() {
         final PageParameter pageParameter = new PageParameter(1, 10, 1);
-        final CommonPager<String> result = PageResultUtils.result(pageParameter, 1, () -> Collections.singletonList("result1"));
+        final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 1,
+            () -> Collections.singletonList("result1"));
         Assert.assertEquals(result.getDataList().size(), 1);
     }
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/config/DataSyncConfiguration.java
Patch:
@@ -45,7 +45,7 @@
 public class DataSyncConfiguration {
 
     /**
-     * http long polling(default strategy).
+     * http long polling.
      */
     @Configuration
     @ConditionalOnProperty(name = "soul.sync.http.enabled", havingValue = "true")

File: soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/cache/ApplicationConfigCacheTest.java
Patch:
@@ -66,7 +66,7 @@ public void testInit() {
         this.applicationConfigCache.init(dubboRegisterConfig);
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void testInitRef() {
         MetaData metaData = new MetaData();
         metaData.setPath("/test");
@@ -78,7 +78,7 @@ public void testGet() {
         assertNotNull(this.applicationConfigCache.get("/test"));
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void testBuild() {
         DubboParamExtInfo dubboParamExtInfo = new DubboParamExtInfo();
         dubboParamExtInfo.setVersion("2.7.5");

File: soul-admin/src/main/java/org/dromara/soul/admin/page/PageParameter.java
Patch:
@@ -31,7 +31,7 @@ public class PageParameter implements Serializable {
 
     private static final long serialVersionUID = -8324693985921606090L;
 
-    private static final int DEFAULT_PAGE_SIZE = 10;
+    private static final int DEFAULT_PAGE_SIZE = 12;
 
     private int currentPage;
 

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/RuleControllerTest.java
Patch:
@@ -87,7 +87,7 @@ public void setUp() {
     public void testQueryRules() throws Exception {
         given(this.ruleService.listByPage(tRuleQuery)).willReturn(commonPager);
         String urlTemplate = "/rule?selectorId={selectorId}&currentPage={currentPage}&pageSize={pageSize}";
-        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "168", 1, 10))
+        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "168", 1, 12))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(SoulResultMessage.QUERY_SUCCESS)))
                 .andExpect(jsonPath("$.data.dataList[0].id", is(ruleVO.getId())))

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/SelectorControllerTest.java
Patch:
@@ -83,7 +83,7 @@ public void setUp() {
     public void querySelectors() throws Exception {
         given(this.selectorService.listByPage(selectorQuery)).willReturn(commonPager);
         String urlTemplate = "/selector?pluginId={pluginId}&currentPage={currentPage}&pageSize={pageSize}";
-        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "2", 1, 10))
+        this.mockMvc.perform(MockMvcRequestBuilders.get(urlTemplate, "2", 1, 12))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.message", is(SoulResultMessage.QUERY_SUCCESS)))
                 .andExpect(jsonPath("$.data.dataList[0].id", is(selectorVO.getId())))

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.dromara.soul.client.tars;
 
-import javafx.util.Pair;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.tuple.Pair;
 import org.dromara.soul.client.common.utils.OkHttpTools;
 import org.dromara.soul.client.common.utils.RegisterUtils;
 import org.dromara.soul.client.tars.common.annotation.SoulTarsClient;
@@ -133,7 +133,7 @@ private MetaDataDTO.RpcExt buildRpcExt(final Method method) {
         if (paramNames != null && paramNames.length > 0) {
             Class<?>[] paramTypes = method.getParameterTypes();
             for (int i = 0; i < paramNames.length; i++) {
-                params.add(new Pair<>(paramTypes[i].getName(), paramNames[i]));
+                params.add(Pair.of(paramTypes[i].getName(), paramNames[i]));
             }
         }
         return MetaDataDTO.RpcExt.builder().methodName(method.getName())

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/common/dto/MetaDataDTO.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.dromara.soul.client.tars.common.dto;
 
-import javafx.util.Pair;
 import lombok.Builder;
 import lombok.Data;
+import org.apache.commons.lang3.tuple.Pair;
 
 import java.util.List;
 

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/PermissionController.java
Patch:
@@ -32,7 +32,7 @@
  * this is permission controller.
  *
  * @author nuo-promise
- **/
+ */
 @RestController
 @RequestMapping("/permission")
 public class PermissionController {

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/ResourceController.java
Patch:
@@ -43,7 +43,7 @@
  * this is resource controller.
  *
  * @author nuo-promise
- **/
+ */
 @RestController
 @RequestMapping("/resource")
 public class ResourceController {

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/RoleController.java
Patch:
@@ -43,7 +43,7 @@
  * this is role controller.
  *
  * @author nuo-promise
- **/
+ */
 @RestController
 @RequestMapping("/role")
 public class RoleController {

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/PermissionDTO.java
Patch:
@@ -26,7 +26,7 @@
  * this is permission Dto.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @Builder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/ResourceDTO.java
Patch:
@@ -26,7 +26,7 @@
  * this is resource Dto.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @Builder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/RoleDTO.java
Patch:
@@ -29,7 +29,7 @@
  * this is role from by web front.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @Builder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/UserRoleDTO.java
Patch:
@@ -26,7 +26,7 @@
  * this User Role Dto.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @Builder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/PermissionDO.java
Patch:
@@ -32,7 +32,7 @@
  * The Permission Entity.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @SuperBuilder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/ResourceDO.java
Patch:
@@ -32,7 +32,7 @@
  * The Resource Entity.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @SuperBuilder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/RoleDO.java
Patch:
@@ -32,7 +32,7 @@
  * The Role Data Entity.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @SuperBuilder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/UserRoleDO.java
Patch:
@@ -32,7 +32,7 @@
  * The User Role Entity.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @SuperBuilder
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/service/PermissionService.java
Patch:
@@ -25,7 +25,7 @@
  * this is permission service.
  *
  * @author nuo-promise
- **/
+ */
 public interface PermissionService {
 
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/service/ResourceService.java
Patch:
@@ -28,7 +28,7 @@
  * this is Resource Service.
  *
  * @author nuo-promise
- **/
+ */
 public interface ResourceService {
 
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/service/RoleService.java
Patch:
@@ -29,7 +29,7 @@
  * this is role service.
  *
  * @author nuo-promise
- **/
+ */
 public interface RoleService {
 
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/PermissionServiceImpl.java
Patch:
@@ -48,7 +48,7 @@
  * this is permission service impl.
  *
  * @author nuo-promise
- **/
+ */
 @Service("PermissionService")
 public class PermissionServiceImpl implements PermissionService {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/ResourceServiceImpl.java
Patch:
@@ -37,7 +37,7 @@
  * this Resource Service Impl.
  *
  * @author nuo-promise
- **/
+ */
 @Service("resourceService")
 public class ResourceServiceImpl implements ResourceService {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/RoleServiceImpl.java
Patch:
@@ -53,7 +53,7 @@
  * RoleServiceImpl.
  *
  * @author nuo-promise
- **/
+ */
 @Service("roleService")
 public class RoleServiceImpl implements RoleService {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/shiro/bean/StatelessAuthFilter.java
Patch:
@@ -37,7 +37,7 @@
  * custom Stateless AccessControlFilter.
  *
  * @author YuI
- **/
+ */
 @Slf4j
 public class StatelessAuthFilter extends AccessControlFilter {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/shiro/bean/StatelessToken.java
Patch:
@@ -24,7 +24,7 @@
  * custom Stateless AuthenticationToken.
  *
  * @author YuI
- **/
+ */
 @Data
 public class StatelessToken implements AuthenticationToken {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/shiro/config/ShiroConfiguration.java
Patch:
@@ -42,7 +42,7 @@
  * shiro configuration.
  *
  * @author YuI
- **/
+ */
 @Configuration
 public class ShiroConfiguration {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/shiro/config/ShiroRealm.java
Patch:
@@ -36,7 +36,7 @@
  * shiro custom's realm.
  *
  * @author YuI
- **/
+ */
 @Service("shiroRealm")
 public class ShiroRealm extends AuthorizingRealm {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/DashboardUserEditVO.java
Patch:
@@ -29,7 +29,7 @@
  * this is dashboard user for role.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @NoArgsConstructor
 @EqualsAndHashCode(callSuper = true)

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/PermissionMenuVO.java
Patch:
@@ -32,7 +32,7 @@
  * this is logon get user permission role.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @AllArgsConstructor
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/RoleEditVO.java
Patch:
@@ -31,7 +31,7 @@
  * this is role edit for web front.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @AllArgsConstructor
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/RoleVO.java
Patch:
@@ -30,7 +30,7 @@
  * this is role view to web front.
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @AllArgsConstructor
 @NoArgsConstructor

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/UserRoleVO.java
Patch:
@@ -29,7 +29,7 @@
  * this is user role for web front..
  *
  * @author nuo-promise
- **/
+ */
 @Data
 @AllArgsConstructor
 @NoArgsConstructor

File: soul-common/src/main/java/org/dromara/soul/common/constant/AdminConstants.java
Patch:
@@ -63,6 +63,4 @@ public final class AdminConstants {
      * The constant PARAMS_ERROR.
      */
     public static final String PARAMS_ERROR = "Error parameter！";
-
-
 }

File: soul-plugin/soul-plugin-tars/src/main/java/org/dromara/soul/plugin/tars/cache/ApplicationConfigCache.java
Patch:
@@ -25,12 +25,12 @@
 import com.qq.tars.client.CommunicatorConfig;
 import com.qq.tars.client.CommunicatorFactory;
 import com.qq.tars.protocol.annotation.Servant;
-import javafx.util.Pair;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.tuple.Pair;
 import org.assertj.core.internal.bytebuddy.ByteBuddy;
 import org.assertj.core.internal.bytebuddy.description.annotation.AnnotationDescription;
 import org.assertj.core.internal.bytebuddy.description.modifier.Visibility;

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/AbstractSoulPlugin.java
Patch:
@@ -147,7 +147,7 @@ private void selectorLog(final SelectorData selectorData, final String pluginNam
 
     private void ruleLog(final RuleData ruleData, final String pluginName) {
         if (ruleData.getLoged()) {
-            log.info("{} selector success match , selector name :{}", pluginName, ruleData.getName());
+            log.info("{} rule success match , rule name :{}", pluginName, ruleData.getName());
         }
     }
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/PluginEnum.java
Patch:
@@ -65,8 +65,7 @@ public enum PluginEnum {
      * Redirect plugin enum.
      */
     REDIRECT(40, 0, "redirect"),
-
-
+    
     /**
      * Hystrix plugin enum.
      */

File: soul-spring-boot-starter/soul-spring-boot-starter-sync-data-center/soul-spring-boot-starter-sync-data-websocket/src/main/java/org/dromara/soul/spring/boot/starter/sync/data/websocket/WebsocketSyncDataConfiguration.java
Patch:
@@ -18,8 +18,8 @@
 package org.dromara.soul.spring.boot.starter.sync.data.websocket;
 
 import lombok.extern.slf4j.Slf4j;
-import org.dromara.soul.plugin.sync.data.weboscket.WebsocketSyncDataService;
-import org.dromara.soul.plugin.sync.data.weboscket.config.WebsocketConfig;
+import org.dromara.soul.plugin.sync.data.websocket.WebsocketSyncDataService;
+import org.dromara.soul.plugin.sync.data.websocket.config.WebsocketConfig;
 import org.dromara.soul.sync.data.api.AuthDataSubscriber;
 import org.dromara.soul.sync.data.api.MetaDataSubscriber;
 import org.dromara.soul.sync.data.api.PluginDataSubscriber;

File: soul-spring-boot-starter/soul-spring-boot-starter-sync-data-center/soul-spring-boot-starter-sync-data-websocket/src/test/java/org/dromara/soul/spring/boot/starter/sync/data/websocket/WebsocketSyncDataConfigurationTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.dromara.soul.spring.boot.starter.sync.data.websocket;
 
-import org.dromara.soul.plugin.sync.data.weboscket.WebsocketSyncDataService;
-import org.dromara.soul.plugin.sync.data.weboscket.config.WebsocketConfig;
+import org.dromara.soul.plugin.sync.data.websocket.WebsocketSyncDataService;
+import org.dromara.soul.plugin.sync.data.websocket.config.WebsocketConfig;
 import org.dromara.soul.sync.data.api.PluginDataSubscriber;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/WebsocketSyncDataService.java
Patch:
@@ -15,14 +15,14 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket;
+package org.dromara.soul.plugin.sync.data.websocket;
 
 import java.util.Objects;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.dromara.soul.common.concurrent.SoulThreadFactory;
-import org.dromara.soul.plugin.sync.data.weboscket.client.SoulWebsocketClient;
-import org.dromara.soul.plugin.sync.data.weboscket.config.WebsocketConfig;
+import org.dromara.soul.plugin.sync.data.websocket.client.SoulWebsocketClient;
+import org.dromara.soul.plugin.sync.data.websocket.config.WebsocketConfig;
 import org.dromara.soul.sync.data.api.AuthDataSubscriber;
 import org.dromara.soul.sync.data.api.MetaDataSubscriber;
 import org.dromara.soul.sync.data.api.PluginDataSubscriber;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/client/SoulWebsocketClient.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.client;
+package org.dromara.soul.plugin.sync.data.websocket.client;
 
 import java.net.URI;
 import java.util.List;
@@ -24,7 +24,7 @@
 import org.dromara.soul.common.enums.ConfigGroupEnum;
 import org.dromara.soul.common.enums.DataEventTypeEnum;
 import org.dromara.soul.common.utils.GsonUtils;
-import org.dromara.soul.plugin.sync.data.weboscket.handler.WebsocketDataHandler;
+import org.dromara.soul.plugin.sync.data.websocket.handler.WebsocketDataHandler;
 import org.dromara.soul.sync.data.api.AuthDataSubscriber;
 import org.dromara.soul.sync.data.api.MetaDataSubscriber;
 import org.dromara.soul.sync.data.api.PluginDataSubscriber;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/config/WebsocketConfig.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.config;
+package org.dromara.soul.plugin.sync.data.websocket.config;
 
 import lombok.Data;
 

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/AbstractDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import java.util.List;
 import org.apache.commons.collections4.CollectionUtils;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/AuthDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import java.util.List;
 import lombok.RequiredArgsConstructor;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/DataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 /**
  * The interface Data handler.

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/MetaDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import java.util.List;
 import lombok.RequiredArgsConstructor;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/PluginDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import java.util.List;
 import lombok.RequiredArgsConstructor;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/RuleDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import java.util.List;
 import lombok.RequiredArgsConstructor;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/SelectorDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import java.util.List;
 import lombok.RequiredArgsConstructor;

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/websocket/handler/WebsocketDataHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import java.util.EnumMap;
 import java.util.List;

File: soul-sync-data-center/soul-sync-data-websocket/src/test/java/org/dromara/soul/plugin/sync/data/websocket/handler/AuthDataHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import com.google.gson.Gson;
 import org.dromara.soul.common.dto.AppAuthData;

File: soul-sync-data-center/soul-sync-data-websocket/src/test/java/org/dromara/soul/plugin/sync/data/websocket/handler/MetaDataHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import com.google.gson.Gson;
 import org.dromara.soul.common.dto.MetaData;

File: soul-sync-data-center/soul-sync-data-websocket/src/test/java/org/dromara/soul/plugin/sync/data/websocket/handler/PluginDataHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import com.google.gson.Gson;
 import org.dromara.soul.common.dto.PluginData;

File: soul-sync-data-center/soul-sync-data-websocket/src/test/java/org/dromara/soul/plugin/sync/data/websocket/handler/RuleDataHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import com.google.gson.Gson;
 import org.dromara.soul.common.dto.ConditionData;

File: soul-sync-data-center/soul-sync-data-websocket/src/test/java/org/dromara/soul/plugin/sync/data/websocket/handler/SelectorDataHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.sync.data.weboscket.handler;
+package org.dromara.soul.plugin.sync.data.websocket.handler;
 
 import com.google.gson.Gson;
 import org.dromara.soul.common.dto.ConditionData;

File: soul-client/soul-client-common/src/main/java/org/dromara/soul/client/common/dto/MetaDataDTO.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.dromara.soul.client.core.dto;
+package org.dromara.soul.client.common.dto;
 
 import lombok.Builder;
 import lombok.Data;

File: soul-client/soul-client-dubbo/soul-client-dubbo-common/src/main/java/org/dromara/soul/client/dubbo/common/dto/DubboRpcExt.java
Patch:
@@ -20,14 +20,16 @@
 import lombok.Builder;
 import lombok.Data;
 
+import java.io.Serializable;
+
 /**
  * The type Dubbo rpc ext.
  *
  * @author xiaoyu
  */
 @Data
 @Builder
-public class DubboRpcExt {
+public class DubboRpcExt implements Serializable {
 
     private String group;
 

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/impl/collector/JmxCollectorTest.java
Patch:
@@ -27,10 +27,10 @@
 import java.util.regex.Pattern;
 
 import static org.hamcrest.Matchers.equalTo;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertFalse;
 
 /**
  * The type Jmx collector test.

File: soul-bootstrap/src/test/java/org/dromara/soul/boostrap/dubbo/ComplexBeanTest.java
Patch:
@@ -33,8 +33,8 @@
 public final class ComplexBeanTest implements Serializable {
 
     private DubboTest dubboTest;
-
+    
     private List<String> idLists;
-
+    
     private Map<String, String> idMaps;
 }

File: soul-bootstrap/src/test/java/org/dromara/soul/boostrap/dubbo/DubboTest.java
Patch:
@@ -32,6 +32,6 @@
 public final class DubboTest implements Serializable {
 
     private String id;
-
+    
     private String name;
 }

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/init/ContextRegisterListenerTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.mockito.Mockito.when;
 
 /**
- * ContextRegisterListenerTest.
+ * Test case for {@link ContextRegisterListener}.
  *
  * @author kaitoShy
  * @author dengliming

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/utils/ValidateUtilsTest.java
Patch:
@@ -27,12 +27,12 @@
 import static org.mockito.Mockito.when;
 
 /**
- * Test cases for ValidateUtils.
+ * Test cases for {@link ValidateUtils}.
  *
  * @author severez
  */
 @RunWith(MockitoJUnitRunner.class)
-public class ValidateUtilsTest {
+public final class ValidateUtilsTest {
     @Mock
     private Environment env;
 

File: soul-client/soul-client-http/soul-client-springmvc/src/test/java/org/dromara/soul/client/springmvc/init/ContextRegisterListenerTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.springframework.context.event.ContextRefreshedEvent;
 
 /**
- * ContextRegisterListenerTest.
+ * Test case for {@link ContextRegisterListenerTest}.
  *
  * @author tydhot
  * @author dengliming

File: soul-client/soul-client-http/soul-client-springmvc/src/test/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessorTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 /**
- * SpringMvcClientBeanPostProcessorTest.
+ * Test case for {@link SpringMvcClientBeanPostProcessor}.
  *
  * @author tydhot
  */

File: soul-client/soul-client-sofa/src/test/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessorTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.lang.reflect.Field;
 
 /**
- * Test case for SofaServiceBeanPostProcessor.
+ * Test case for {@link SofaServiceBeanPostProcessor}.
  *
  * @author HoldDie
  */

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/TarsServiceBeanPostProcessor.java
Patch:
@@ -138,6 +138,7 @@ private MetaDataDTO.RpcExt buildRpcExt(final Method method) {
         }
         return MetaDataDTO.RpcExt.builder().methodName(method.getName())
                 .params(params)
+                .returnType(method.getReturnType().getName())
                 .build();
     }
 

File: soul-client/soul-client-tars/src/main/java/org/dromara/soul/client/tars/common/dto/MetaDataDTO.java
Patch:
@@ -73,6 +73,8 @@ public static class RpcExt {
         private String methodName;
 
         private List<Pair<String, String>> params;
+
+        private String returnType;
     }
 
 }

File: soul-common/src/test/java/org/dromara/soul/common/utils/GsonUtilsTest.java
Patch:
@@ -210,7 +210,7 @@ public void testToTreeMap() {
         Map<String, Object> map = ImmutableMap.of("id", 123L, "name", "test", "double",
                 1.0D, "boolean", true, "data", generateTestObject());
 
-        String json = "{\"name\":\"test\",\"id\":123,\"double\":1.0,\"boolean\":true,\"null\":null,\"data\":"
+        String json = "{\"name\":\"test\",\"id\":123,\"double\":1.0,\"boolean\":true,\"data\":"
                 + EXPECTED_JSON + "}";
 
         Map<String, Object> parseMap = GsonUtils.getInstance().toTreeMap(json);

File: soul-examples/soul-examples-tars/src/main/java/org/dromara/soul/examples/tars/servant/testapp/HelloServant.java
Patch:
@@ -13,4 +13,6 @@
 public interface HelloServant {
 
 	 String hello(@TarsMethodParameter(name="no")int no, @TarsMethodParameter(name="name")String name);
+
+	 Integer helloInt(@TarsMethodParameter(name="no")int no, @TarsMethodParameter(name="name")String name);
 }

File: soul-plugin/soul-plugin-hystrix/src/main/java/org/dromara/soul/plugin/hystrix/command/HystrixCommand.java
Patch:
@@ -54,7 +54,6 @@ public HystrixCommand(final Setter setter,
                    final ServerWebExchange exchange,
                    final SoulPluginChain chain,
                    final String callBackUri) {
-
         super(setter);
         this.exchange = exchange;
         this.chain = chain;

File: soul-plugin/soul-plugin-hystrix/src/main/java/org/dromara/soul/plugin/hystrix/command/HystrixCommandOnThread.java
Patch:
@@ -54,7 +54,6 @@ public HystrixCommandOnThread(final HystrixCommand.Setter setter,
                           final ServerWebExchange exchange,
                           final SoulPluginChain chain,
                           final String callBackUri) {
-
         super(setter);
         this.exchange = exchange;
         this.chain = chain;
@@ -65,7 +64,6 @@ public HystrixCommandOnThread(final HystrixCommand.Setter setter,
     protected Mono<Void> run() {
         RxReactiveStreams.toObservable(chain.execute(exchange)).toBlocking().subscribe();
         return Mono.empty();
-
     }
 
     @Override

File: soul-plugin/soul-plugin-tars/src/main/java/org/dromara/soul/plugin/tars/proxy/TarsInvokePrx.java
Patch:
@@ -32,6 +32,7 @@
 @Builder
 @Data
 public class TarsInvokePrx {
+    
     private Object invokePrx;
 
     private String host;

File: soul-plugin/soul-plugin-tars/src/main/java/org/dromara/soul/plugin/tars/proxy/TarsInvokePrxList.java
Patch:
@@ -35,11 +35,12 @@
 @Builder
 @Data
 public class TarsInvokePrxList {
+    
     private CopyOnWriteArrayList<TarsInvokePrx> tarsInvokePrxList;
 
     private Method method;
 
-    private Class[] paramTypes;
+    private Class<?>[] paramTypes;
 
     private String[] paramNames;
 }

File: soul-plugin/soul-plugin-tars/src/main/java/org/dromara/soul/plugin/tars/subscriber/TarsMetaDataSubscriber.java
Patch:
@@ -45,8 +45,7 @@ public void onSubscribe(final MetaData metaData) {
             MetaData metaExist = META_DATA.get(metaData.getPath());
             List<TarsInvokePrx> prxList = ApplicationConfigCache.getInstance()
                     .get(metaData.getPath()).getTarsInvokePrxList();
-            boolean exist = prxList.stream()
-                    .filter(tarsInvokePrx -> tarsInvokePrx.getHost().equals(metaData.getAppName())).count() > 0;
+            boolean exist = prxList.stream().anyMatch(tarsInvokePrx -> tarsInvokePrx.getHost().equals(metaData.getAppName()));
             if (!exist) {
                 ApplicationConfigCache.getInstance().initPrx(metaData);
             }

File: soul-plugin/soul-plugin-tars/src/main/java/org/dromara/soul/plugin/tars/util/PrxInfoUtil.java
Patch:
@@ -36,7 +36,7 @@ public class PrxInfoUtil {
     private static final Map<String, PrimitiveType> PRIMITIVE_TYPE;
 
     static {
-        PRIMITIVE_TYPE = new HashMap<String, PrimitiveType>();
+        PRIMITIVE_TYPE = new HashMap<>();
         PRIMITIVE_TYPE.put("int", new PrimitiveType(int.class, Integer::valueOf));
         PRIMITIVE_TYPE.put("double", new PrimitiveType(double.class, Double::valueOf));
         PRIMITIVE_TYPE.put("long", new PrimitiveType(long.class, Long::valueOf));
@@ -106,7 +106,7 @@ public static Object[] getParamArray(final Class<?>[] paramTypes, final String[]
         Object[] param = new Object[paramNames.length];
         for (int i = 0; i < paramNames.length; i++) {
             String paramName = paramNames[i];
-            Class paramType = paramTypes[i];
+            Class<?> paramType = paramTypes[i];
             if (PRIMITIVE_TYPE.containsKey(paramType.getName())) {
                 param[i] = PRIMITIVE_TYPE.get(paramType.getName()).getFunc().apply((String) bodyMap.get(paramName));
             } else {
@@ -119,6 +119,7 @@ public static Object[] getParamArray(final Class<?>[] paramTypes, final String[]
     @AllArgsConstructor
     @Getter
     static class PrimitiveType {
+        
         private final Class<?> clazz;
 
         private final Function<String, Object> func;

File: soul-common/src/test/java/org/dromara/soul/common/utils/GsonUtilsTest.java
Patch:
@@ -210,7 +210,7 @@ public void testToTreeMap() {
         Map<String, Object> map = ImmutableMap.of("id", 123L, "name", "test", "double",
                 1.0D, "boolean", true, "data", generateTestObject());
 
-        String json = "{\"name\":\"test\",\"id\":123,\"double\":1.0,\"boolean\":true,\"null\":null,\"data\":"
+        String json = "{\"name\":\"test\",\"id\":123,\"double\":1.0,\"boolean\":true,\"data\":"
                 + EXPECTED_JSON + "}";
 
         Map<String, Object> parseMap = GsonUtils.getInstance().toTreeMap(json);

File: soul-spi/src/main/java/org/dromara/soul/spi/ExtensionLoader.java
Patch:
@@ -238,7 +238,7 @@ private void loadClass(final Map<String, Class<?>> classes,
         if (oldClass == null) {
             classes.put(name, subClass);
         } else if (oldClass != subClass) {
-            throw new IllegalStateException("load extension resources error,Duplicate class " + clazz.getName() + " name " + name + " on " + oldClass.getName() + " or" + subClass.getName());
+            throw new IllegalStateException("load extension resources error,Duplicate class " + clazz.getName() + " name " + name + " on " + oldClass.getName() + " or " + subClass.getName());
         }
     }
 

File: soul-metrics/soul-metrics-facade/src/main/java/org/dromara/soul/metrics/facade/MetricsTrackerFacade.java
Patch:
@@ -181,7 +181,6 @@ public boolean isStarted() {
      * Metrics tracker facade holder.
      */
     private static class MetricsTrackerFacadeHolder {
-        
         private static final MetricsTrackerFacade INSTANCE = new MetricsTrackerFacade();
     }
 }

File: soul-metrics/soul-metrics-facade/src/main/java/org/dromara/soul/metrics/facade/handler/MetricsTrackerHandler.java
Patch:
@@ -231,7 +231,6 @@ private Optional<SummaryMetricsTrackerDelegate> handlerSummaryStartTimer(final S
      * Metrics tracker handler holder.
      */
     private static class MetricsTrackerHandlerHolder {
-        
         private static final MetricsTrackerHandler INSTANCE = new MetricsTrackerHandler();
     }
 }

File: soul-metrics/soul-metrics-facade/src/test/java/org/dromara/soul/metrics/facade/MetricsTrackerFacadeTest.java
Patch:
@@ -60,7 +60,7 @@ public class MetricsTrackerFacadeTest {
 
     private static MockedStatic<ExtensionLoader> mockedExtensionLoader;
 
-    private MetricsTrackerFacade metricsTrackerFacade = MetricsTrackerFacade.getInstance();
+    private final MetricsTrackerFacade metricsTrackerFacade = MetricsTrackerFacade.getInstance();
 
     @Mock
     private MetricsTrackerHandler metricsTrackerHandler;

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/impl/collector/JmxScraperTest.java
Patch:
@@ -194,7 +194,6 @@ private JmxCollector.Receiver reflectBuildJmxCollectorReceiver(final JmxCollecto
     }
     
     private static class StdoutWriter implements MBeanReceiver {
-        
         public void recordBean(final String domain, final Map<String, String> beanProperties,
                                final LinkedList<String> attrKeys, final String attrName,
                                final String attrType, final String attrDescription, final Object value) {

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/impl/histogram/PrometheusHistogramMetricsTrackerDelegateTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
+
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/impl/summary/PrometheusSummaryMetricsTrackerDelegateTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
+
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-context-path/src/main/java/org/dromara/soul/springboot/starter/plugin/contextpath/ContextPathMappingPluginConfiguration.java
Patch:
@@ -36,7 +36,7 @@ public class ContextPathMappingPluginConfiguration {
      * @return the soul plugin
      */
     @Bean
-    public SoulPlugin hystrixPlugin() {
+    public SoulPlugin contextPathMappingPlugin() {
         return new ContextPathMappingPlugin();
     }
 }

File: soul-plugin/soul-plugin-divide/src/main/java/org/dromara/soul/plugin/divide/balance/spi/RoundRobinLoadBalance.java
Patch:
@@ -56,7 +56,7 @@ public DivideUpstream doSelect(final List<DivideUpstream> upstreamList, final St
         for (DivideUpstream upstream : upstreamList) {
             String rKey = upstream.getUpstreamUrl();
             WeightedRoundRobin weightedRoundRobin = map.get(rKey);
-            int weight = upstream.getWeight();
+            int weight = getWeight(upstream);
             if (weightedRoundRobin == null) {
                 weightedRoundRobin = new WeightedRoundRobin();
                 weightedRoundRobin.setWeight(weight);

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/PluginController.java
Patch:
@@ -154,7 +154,7 @@ public SoulAdminResult deletePlugins(@RequestBody final List<String> ids) {
     }
 
     /**
-     * Enable mono.
+     * Enable plugins.
      *
      * @param batchCommonDTO the batch common dto
      * @return the mono

File: soul-admin/src/test/java/org/dromara/soul/admin/spring/SoulApplicationContextAwareTest.java
Patch:
@@ -35,7 +35,7 @@ public final class SoulApplicationContextAwareTest {
     private SoulApplicationContextAware soulApplicationContextAwareUnderTest;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         soulApplicationContextAwareUnderTest = new SoulApplicationContextAware();
     }
 

File: soul-client/soul-client-common/src/test/java/org/dromara/soul/client/common/utils/OkHttpToolsTest.java
Patch:
@@ -51,7 +51,7 @@ public class OkHttpToolsTest {
     private final String json = "{\"appName\":\"soul\"}";
 
     @Before
-    public final void setUpWiremock() {
+    public final void setUpWireMock() {
         wireMockRule.stubFor(post(urlPathEqualTo("/"))
                 .willReturn(aResponse()
                         .withHeader(HttpHeaders.CONTENT_TYPE, ContentType.APPLICATION_JSON.toString())

File: soul-common/src/test/java/org/dromara/soul/common/utils/LogUtilsTest.java
Patch:
@@ -43,7 +43,7 @@ public final class LogUtilsTest {
     private Supplier<Object> supplier;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         logger = spy(Logger.class);
         supplier = mock(Supplier.class);
         when(supplier.get()).thenReturn("Test case for LogUtils");

File: soul-plugin/soul-plugin-httpclient/src/main/java/org/dromara/soul/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -74,7 +74,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChai
         }
         long timeout = (long) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(3000L);
         int retryTimes = (int) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(0);
-        log.info("you request,The resulting urlPath is :{}, retryTimes: {}", urlPath, retryTimes);
+        log.info("The request urlPath is {}, retryTimes is {}", urlPath, retryTimes);
         HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue());
         WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath);
         return handleRequestBody(requestBodySpec, exchange, timeout, retryTimes, chain);

File: soul-spring-boot-starter/soul-spring-boot-starter-sync-data-center/soul-spring-boot-starter-sync-data-http/src/test/java/org/dromara/soul/spring/boot/starter/sync/data/http/HttpClientPluginConfigurationTest.java
Patch:
@@ -71,7 +71,7 @@ public class HttpClientPluginConfigurationTest {
     private HttpSyncDataService httpSyncDataService;
 
     @BeforeClass
-    public static void setupWireMock() throws Exception {
+    public static void setUpWireMock() throws Exception {
         WireMockServer wireMockServer = new WireMockServer(options().port(18848));
 
         wireMockServer.stubFor(get(urlPathEqualTo("/configs/fetch"))

File: soul-sync-data-center/soul-sync-data-nacos/src/main/java/org/dromara/soul/sync/data/nacos/handler/NacosCacheHandler.java
Patch:
@@ -87,7 +87,7 @@ public NacosCacheHandler(final ConfigService configService, final PluginDataSubs
     protected void updatePluginMap(final String configInfo) {
         try {
             // Fix bug #656(https://github.com/dromara/soul/issues/656)
-            List<PluginData> pluginDataList = GsonUtils.getInstance().toObjectMap(configInfo, PluginData.class).values().stream().collect(Collectors.toList());
+            List<PluginData> pluginDataList = new ArrayList<>(GsonUtils.getInstance().toObjectMap(configInfo, PluginData.class).values());
             pluginDataList.forEach(pluginData -> Optional.ofNullable(pluginDataSubscriber).ifPresent(subscriber -> {
                 subscriber.unSubscribe(pluginData);
                 subscriber.onSubscribe(pluginData);
@@ -125,7 +125,7 @@ protected void updateRuleMap(final String configInfo) {
 
     protected void updateMetaDataMap(final String configInfo) {
         try {
-            List<MetaData> metaDataList = GsonUtils.getInstance().toObjectMap(configInfo, MetaData.class).values().stream().collect(Collectors.toList());
+            List<MetaData> metaDataList = new ArrayList<>(GsonUtils.getInstance().toObjectMap(configInfo, MetaData.class).values());
             metaDataList.forEach(metaData -> metaDataSubscribers.forEach(subscriber -> {
                 subscriber.unSubscribe(metaData);
                 subscriber.onSubscribe(metaData);
@@ -137,7 +137,7 @@ protected void updateMetaDataMap(final String configInfo) {
 
     protected void updateAuthMap(final String configInfo) {
         try {
-            List<AppAuthData> appAuthDataList = GsonUtils.getInstance().toObjectMap(configInfo, AppAuthData.class).values().stream().collect(Collectors.toList());
+            List<AppAuthData> appAuthDataList = new ArrayList<>(GsonUtils.getInstance().toObjectMap(configInfo, AppAuthData.class).values());
             appAuthDataList.forEach(appAuthData -> authDataSubscribers.forEach(subscriber -> {
                 subscriber.unSubscribe(appAuthData);
                 subscriber.onSubscribe(appAuthData);

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/init/ContextRegisterListenerTest.java
Patch:
@@ -15,11 +15,10 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.client.springcloud;
+package org.dromara.soul.client.springcloud.init;
 
 import org.dromara.soul.client.common.utils.RegisterUtils;
 import org.dromara.soul.client.springcloud.config.SoulSpringCloudConfig;
-import org.dromara.soul.client.springcloud.init.ContextRegisterListener;
 import org.dromara.soul.common.enums.RpcTypeEnum;
 import org.junit.FixMethodOrder;
 import org.junit.Test;

File: soul-client/soul-client-http/soul-client-springcloud/src/test/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessorTest.java
Patch:
@@ -15,12 +15,11 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.client.springcloud;
+package org.dromara.soul.client.springcloud.init;
 
 import org.dromara.soul.client.common.utils.RegisterUtils;
 import org.dromara.soul.client.springcloud.annotation.SoulSpringCloudClient;
 import org.dromara.soul.client.springcloud.config.SoulSpringCloudConfig;
-import org.dromara.soul.client.springcloud.init.SpringCloudClientBeanPostProcessor;
 import org.junit.Before;
 import org.junit.FixMethodOrder;
 import org.junit.Test;

File: soul-common/src/test/java/org/dromara/soul/common/utils/IpUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.client.springmvc.utils;
+package org.dromara.soul.common.utils;
 
 import org.junit.After;
 import org.junit.Before;
@@ -24,6 +24,7 @@
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.mockStatic;

File: soul-metrics/soul-metrics-facade/src/test/java/org/dromara/soul/metrics/facade/executor/MetricsThreadPoolExecutorTest.java
Patch:
@@ -31,7 +31,7 @@
  * The Test Case For MetricsThreadPollExecutor.
  *
  * @author nuo-promise
- **/
+ */
 public class MetricsThreadPoolExecutorTest {
 
     private MetricsThreadPoolExecutor metricsThreadPoolExecutor;

File: soul-register-center/soul-register-server/soul-register-server-http/src/main/java/org/dromara/soul/register/server/http/HttpServerRegisterRepository.java
Patch:
@@ -20,11 +20,12 @@
 import org.dromara.soul.register.server.api.SoulServerRegisterRepository;
 import org.dromara.soul.register.server.api.listener.DataChangedEventListener;
 
+/**
+ * The type Http server register repository.
+ */
 public class HttpServerRegisterRepository implements SoulServerRegisterRepository {
     
-    
     @Override
     public void watch(final String key, final DataChangedEventListener listener) {
-    
     }
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -46,7 +46,7 @@
 /**
  * Abstract class for ConfigEventListener.
  * As we think that the md5 value of the in-memory data is the same as the md5 value of the database,
- * although it may be a little different, but it doesn't matter, we will have thread to periodica
+ * although it may be a little different, but it doesn't matter, we will have thread to periodically
  * pull the data in the database.
  *
  * @author huangxiaofeng
@@ -86,7 +86,7 @@ public abstract class AbstractDataChangedListener implements DataChangedListener
     private MetaDataService metaDataService;
 
     /**
-     * fetch configuration from database.
+     * fetch configuration from cache.
      *
      * @param groupKey the group key
      * @return the configuration data

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/http/HttpLongPollingDataChangedListener.java
Patch:
@@ -143,7 +143,7 @@ public void doLongPolling(final HttpServletRequest request, final HttpServletRes
         // listen for configuration changed.
         final AsyncContext asyncContext = request.startAsync();
 
-        // Asynccontext.settimeout() does not timeout properly, so you have to control it yourself
+        // AsyncContext.settimeout() does not timeout properly, so you have to control it yourself
         asyncContext.setTimeout(0L);
 
         // block client's thread.

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/RuleServiceImpl.java
Patch:
@@ -146,7 +146,7 @@ public int delete(final List<String> ids) {
             ruleMapper.delete(id);
             ruleConditionMapper.deleteByQuery(new RuleConditionQuery(id));
 
-            //发送删规则事件
+            // send deleted rule event
             eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.RULE, DataEventTypeEnum.DELETE,
                     Collections.singletonList(RuleDO.transFrom(ruleDO, pluginDO.getName(), null))));
         }

File: soul-client/soul-client-common/src/main/java/org/dromara/soul/client/common/utils/OkHttpTools.java
Patch:
@@ -72,7 +72,7 @@ public static OkHttpTools getInstance() {
      * @throws IOException the io exception
      */
     public String post(final String url, final String json) throws IOException {
-        RequestBody body = RequestBody.create(json, JSON);
+        RequestBody body = RequestBody.create(JSON, json);
         Request request = new Request.Builder()
                 .url(url)
                 .post(body)
@@ -92,7 +92,7 @@ public String post(final String url, final String json) throws IOException {
      * @throws IOException the io exception
      */
     public <T> T post(final String url, final String json, final Class<T> classOfT) throws IOException {
-        RequestBody body = RequestBody.create(json, JSON);
+        RequestBody body = RequestBody.create(JSON, json);
         Request request = new Request.Builder()
                 .url(url)
                 .post(body)
@@ -114,7 +114,7 @@ public <T> T post(final String url, final String json, final Class<T> classOfT)
      */
     public String post(final String url, final Map<String, String> params) throws IOException {
         String json = GSON.toJson(params);
-        RequestBody body = RequestBody.create(json, JSON);
+        RequestBody body = RequestBody.create(JSON, json);
         Request request = new Request.Builder()
                 .url(url)
                 .post(body)

File: soul-client/soul-client-common/src/main/java/org/dromara/soul/client/common/utils/OkHttpTools.java
Patch:
@@ -72,7 +72,7 @@ public static OkHttpTools getInstance() {
      * @throws IOException the io exception
      */
     public String post(final String url, final String json) throws IOException {
-        RequestBody body = RequestBody.create(JSON, json);
+        RequestBody body = RequestBody.create(json, JSON);
         Request request = new Request.Builder()
                 .url(url)
                 .post(body)
@@ -92,7 +92,7 @@ public String post(final String url, final String json) throws IOException {
      * @throws IOException the io exception
      */
     public <T> T post(final String url, final String json, final Class<T> classOfT) throws IOException {
-        RequestBody body = RequestBody.create(JSON, json);
+        RequestBody body = RequestBody.create(json, JSON);
         Request request = new Request.Builder()
                 .url(url)
                 .post(body)
@@ -114,7 +114,7 @@ public <T> T post(final String url, final String json, final Class<T> classOfT)
      */
     public String post(final String url, final Map<String, String> params) throws IOException {
         String json = GSON.toJson(params);
-        RequestBody body = RequestBody.create(JSON, json);
+        RequestBody body = RequestBody.create(json, JSON);
         Request request = new Request.Builder()
                 .url(url)
                 .post(body)

File: soul-admin/src/test/java/org/dromara/soul/admin/page/PageParameterTest.java
Patch:
@@ -33,6 +33,8 @@ public final class PageParameterTest {
 
     @Before
     public void setUp() {
+        pageParameterUnderTest = new PageParameter();
+        pageParameterUnderTest = new PageParameter(1, 10);
         pageParameterUnderTest = new PageParameter(1, 10, 100);
     }
 

File: soul-admin/src/test/java/org/dromara/soul/admin/service/SelectorServiceTest.java
Patch:
@@ -277,7 +277,9 @@ private SelectorDTO buildSelectorDTO(final String id) {
         selectorConditionDTO1.setId("111");
         SelectorConditionDTO selectorConditionDTO2 = new SelectorConditionDTO();
         selectorConditionDTO2.setId("222");
-        selectorDTO.setSelectorConditions(Arrays.asList(selectorConditionDTO1, selectorConditionDTO2));
+        SelectorConditionDTO selectorConditionDTO3 = new SelectorConditionDTO();
+        selectorConditionDTO3.setId("");
+        selectorDTO.setSelectorConditions(Arrays.asList(selectorConditionDTO1, selectorConditionDTO2, selectorConditionDTO3));
         return selectorDTO;
     }
 

File: soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/proxy/ApacheDubboProxyServiceTest.java
Patch:
@@ -94,7 +94,7 @@ public void test() throws NoSuchFieldException, IllegalAccessException {
         future.complete("success");
     }
 
-    class DubboParamResolveServiceImpl implements DubboParamResolveService {
+    static class DubboParamResolveServiceImpl implements DubboParamResolveService {
 
         @Override
         public Pair<String[], Object[]> buildParameter(final String body, final String parameterTypes) {

File: soul-admin/src/test/java/org/dromara/soul/admin/result/SoulAdminResultTest.java
Patch:
@@ -26,7 +26,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.MockitoAnnotations.initMocks;
 
 /**
  * Test case for {@link SoulAdminResult}.
@@ -39,7 +38,6 @@ public final class SoulAdminResultTest {
 
     @Before
     public void setUp() throws Exception {
-        initMocks(this);
         soulAdminResultUnderTest = new SoulAdminResult(0, "message", "data");
     }
 

File: soul-plugin/soul-plugin-alibaba-dubbo/src/test/java/org/dromara/soul/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java
Patch:
@@ -28,7 +28,9 @@
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.mock.http.server.reactive.MockServerHttpRequest;
 import org.springframework.mock.web.server.MockServerWebExchange;
 import org.springframework.web.server.ServerWebExchange;
@@ -39,13 +41,13 @@
 import static org.junit.Assert.assertFalse;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.mockito.MockitoAnnotations.initMocks;
 
 /**
  * Test case for AlibabaDubboPlugin.
  *
  * @author HoldDie
  */
+@RunWith(MockitoJUnitRunner.Silent.class)
 public final class AlibabaDubboPluginTest {
     @Mock
     private AlibabaDubboProxyService mockAlibabaDubboProxyService;
@@ -56,7 +58,6 @@ public final class AlibabaDubboPluginTest {
 
     @Before
     public void setUp() {
-        initMocks(this);
         metaData = new MetaData();
         metaData.setId("1332017966661636096");
         metaData.setAppName("dubbo");

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/DashboardUserDO.java
Patch:
@@ -67,7 +67,6 @@ public final class DashboardUserDO extends BaseDO {
      * @return {@linkplain DashboardUserDO}
      */
     public static DashboardUserDO buildDashboardUserDO(final DashboardUserDTO dashboardUserDTO) {
-
         return Optional.ofNullable(dashboardUserDTO).map(item -> {
             Timestamp currentTime = new Timestamp(System.currentTimeMillis());
             DashboardUserDO dashboardUserDO = DashboardUserDO.builder()

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/RuleDO.java
Patch:
@@ -85,7 +85,6 @@ public final class RuleDO extends BaseDO {
      * @return {@linkplain RuleDO}
      */
     public static RuleDO buildRuleDO(final RuleDTO ruleDTO) {
-
         return Optional.ofNullable(ruleDTO).map(item -> {
             Timestamp currentTime = new Timestamp(System.currentTimeMillis());
             RuleDO ruleDO = RuleDO.builder()

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/SelectorConditionDO.java
Patch:
@@ -72,7 +72,6 @@ public final class SelectorConditionDO extends BaseDO {
      * @return {@linkplain SelectorConditionDO}
      */
     public static SelectorConditionDO buildSelectorConditionDO(final SelectorConditionDTO selectorConditionDTO) {
-
         return Optional.ofNullable(selectorConditionDTO).map(item -> {
             Timestamp currentTime = new Timestamp(System.currentTimeMillis());
             SelectorConditionDO selectorConditionDO = SelectorConditionDO.builder()

File: soul-admin/src/main/java/org/dromara/soul/admin/entity/SoulDictDO.java
Patch:
@@ -81,7 +81,6 @@ public final class SoulDictDO extends BaseDO {
      * @return {@linkplain SoulDictDO}
      */
     public static SoulDictDO buildSoulDictDO(final SoulDictDTO soulDictDTO) {
-
         return Optional.ofNullable(soulDictDTO).map(item -> {
             SoulDictDO soulDictDO = SoulDictDO.builder()
                     .id(item.getId())

File: soul-admin/src/main/java/org/dromara/soul/admin/result/SoulAdminResult.java
Patch:
@@ -54,7 +54,6 @@ public SoulAdminResult() {
      * @param data    the data
      */
     public SoulAdminResult(final Integer code, final String message, final Object data) {
-
         this.code = code;
         this.message = message;
         this.data = data;

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/PluginHandleVO.java
Patch:
@@ -19,6 +19,7 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.NoArgsConstructor;
 import org.dromara.soul.admin.entity.PluginHandleDO;
 import org.dromara.soul.common.utils.DateUtils;
 
@@ -34,6 +35,7 @@
  */
 @Data
 @AllArgsConstructor
+@NoArgsConstructor
 public class PluginHandleVO implements Serializable {
 
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/SoulDictVO.java
Patch:
@@ -19,6 +19,7 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.NoArgsConstructor;
 import org.dromara.soul.admin.entity.SoulDictDO;
 import org.dromara.soul.common.utils.DateUtils;
 
@@ -32,6 +33,7 @@
  */
 @Data
 @AllArgsConstructor
+@NoArgsConstructor
 public class SoulDictVO implements Serializable {
 
     /**

File: soul-plugin/soul-plugin-monitor/src/test/java/org/dromara/soul/plugin/monitor/MonitorPluginTest.java
Patch:
@@ -53,7 +53,6 @@ public void testDoExecute() {
         when(chain.execute(exchange)).thenReturn(Mono.empty());
         SelectorData selectorData = mock(SelectorData.class);
         RuleData data = mock(RuleData.class);
-
         Mono<Void> voidMono = monitorPlugin.doExecute(exchange, chain, selectorData, data);
         StepVerifier.create(voidMono).expectSubscription().verifyComplete();
     }

File: soul-web/src/main/java/org/dromara/soul/web/configuration/SoulConfiguration.java
Patch:
@@ -153,7 +153,7 @@ public WebFilter crossFilter() {
     @Bean
     @Order(-10)
     @ConditionalOnProperty(name = "soul.file.enabled", havingValue = "true")
-    public WebFilter fileSizeFilter(SoulConfig soulConfig) {
+    public WebFilter fileSizeFilter(final SoulConfig soulConfig) {
         return new FileSizeFilter(soulConfig.getFileMaxSize());
     }
 

File: soul-web/src/main/java/org/dromara/soul/web/config/SoulConfig.java
Patch:
@@ -32,5 +32,6 @@ public class SoulConfig {
     private Boolean filterTimeEnable = false;
 
     private Integer upstreamScheduledTime = 30;
-
+    
+    private Integer fileMaxSize = 10;
 }

File: soul-web/src/main/java/org/dromara/soul/web/configuration/SoulConfiguration.java
Patch:
@@ -153,11 +153,10 @@ public WebFilter crossFilter() {
     @Bean
     @Order(-10)
     @ConditionalOnProperty(name = "soul.file.enabled", havingValue = "true")
-    public WebFilter fileSizeFilter() {
-        return new FileSizeFilter();
+    public WebFilter fileSizeFilter(SoulConfig soulConfig) {
+        return new FileSizeFilter(soulConfig.getFileMaxSize());
     }
 
-
     /**
      * Soul config soul config.
      *

File: soul-admin/src/test/java/org/dromara/soul/admin/service/AppAuthServiceTest.java
Patch:
@@ -185,8 +185,6 @@ public void testListByPage() {
         given(this.appAuthMapper.countByQuery(any())).willReturn(1);
         given(this.appAuthMapper.selectByQuery(any())).willReturn(Collections.singletonList(appAuthDO));
         AppAuthQuery appAuthQuery = new AppAuthQuery();
-        appAuthQuery.setCurrentPage(1);
-        appAuthQuery.setPageSize(10);
         appAuthQuery.setPageParameter(new PageParameter());
         CommonPager<AppAuthVO> appAuthVOCommonPager = this.appAuthService.listByPage(appAuthQuery);
         assertEquals(1, appAuthVOCommonPager.getDataList().size());

File: soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyService.java
Patch:
@@ -68,7 +68,7 @@ public SofaProxyService(final SofaParamResolveService sofaParamResolveService) {
      * @throws SoulException the soul exception
      */
     public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {
-        ConsumerConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getServiceName());
+        ConsumerConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());
         if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {
             ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());
             reference = ApplicationConfigCache.getInstance().initRef(metaData);

File: soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/subscriber/SofaMetaDataSubscriber.java
Patch:
@@ -39,7 +39,7 @@ public class SofaMetaDataSubscriber implements MetaDataSubscriber {
     public void onSubscribe(final MetaData metaData) {
         if (RpcTypeEnum.SOFA.getName().equals(metaData.getRpcType())) {
             MetaData exist = META_DATA.get(metaData.getPath());
-            if (Objects.isNull(exist) || Objects.isNull(ApplicationConfigCache.getInstance().get(exist.getServiceName()).refer())) {
+            if (Objects.isNull(exist) || Objects.isNull(ApplicationConfigCache.getInstance().get(exist.getPath()).refer())) {
                 // The first initialization
                 ApplicationConfigCache.getInstance().initRef(metaData);
             } else {

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/DashboardUserControllerTest.java
Patch:
@@ -54,7 +54,7 @@
  * Test cases for {@link DashboardUserController}.
  */
 @RunWith(MockitoJUnitRunner.class)
-public class DashboardUserControllerTest {
+public final class DashboardUserControllerTest {
 
     private MockMvc mockMvc;
 

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/SelectorControllerTest.java
Patch:
@@ -53,7 +53,7 @@
  * @author chenxi
  */
 @RunWith(MockitoJUnitRunner.class)
-public class SelectorControllerTest {
+public final class SelectorControllerTest {
 
     private MockMvc mockMvc;
 

File: soul-admin/src/test/java/org/dromara/soul/admin/exception/ExceptionHandlersTest.java
Patch:
@@ -37,7 +37,7 @@ public final class ExceptionHandlersTest {
     private ExceptionHandlers exceptionHandlersUnderTest;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         exceptionHandlersUnderTest = new ExceptionHandlers();
     }
 

File: soul-common/src/main/java/org/dromara/soul/common/enums/LoadBalanceEnum.java
Patch:
@@ -49,6 +49,4 @@ public enum LoadBalanceEnum {
     private final String name;
 
     private final boolean support;
-
-
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/WafModelEnum.java
Patch:
@@ -40,5 +40,4 @@ public enum WafModelEnum {
     MIXED("mixed");
 
     private final String name;
-
 }

File: soul-common/src/test/java/org/dromara/soul/common/enums/WafModelEnumTest.java
Patch:
@@ -20,12 +20,12 @@
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
+
 /**
  * Test case for WafModelEnum.
  *
  * @author xwzwmt
  */
-
 public final class WafModelEnumTest {
 
     @Test

File: soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/proxy/AlibabaDubboProxyService.java
Patch:
@@ -75,7 +75,7 @@ public Object genericInvoker(final String body, final MetaData metaData) throws
             return genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());
         } catch (GenericException e) {
             log.error("dubbo invoker have exception", e);
-            throw new SoulException(e.getMessage());
+            throw new SoulException(e.getExceptionMessage());
         }
     }
 }

File: soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -19,6 +19,8 @@
 
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
+
+import com.alibaba.dubbo.rpc.service.GenericException;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
@@ -91,6 +93,6 @@ public Mono<Object> genericInvoker(final String body, final MetaData metaData, f
             exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);
             exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());
             return ret;
-        })).onErrorMap(SoulException::new);
+        })).onErrorMap(exception -> exception instanceof GenericException ? new SoulException(((GenericException) exception).getExceptionMessage()) : new SoulException(exception));
     }
 }

File: soul-plugin/soul-plugin-divide/src/test/java/org/dromara/soul/plugin/divide/balance/spi/RoundRobinLoadBalanceTest.java
Patch:
@@ -15,10 +15,9 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.plugin.divide;
+package org.dromara.soul.plugin.divide.balance.spi;
 
 import org.dromara.soul.common.dto.convert.DivideUpstream;
-import org.dromara.soul.plugin.divide.balance.spi.RoundRobinLoadBalance;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -33,7 +32,7 @@
  *
  * @author wanglaomo
  */
-public final class LoadBalanceTest {
+public final class RoundRobinLoadBalanceTest {
 
     /**
      * Round robin load balance test.

File: soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/param/BodyParamPluginTest.java
Patch:
@@ -83,7 +83,7 @@ public void testExecuteWithSimpleBody() {
                 MockServerHttpRequest.get("localhost").build());
         Mockito.when(chain.execute(simpleExchange)).thenReturn(Mono.empty());
         SoulContext context = new SoulContext();
-        context.setRpcType(RpcTypeEnum.SOFA.getName());
+        context.setRpcType(RpcTypeEnum.DUBBO.getName());
         simpleExchange.getAttributes().put(Constants.CONTEXT, context);
 
         final Mono<Void> result = bodyParamPluginUnderTest.execute(simpleExchange, chain);
@@ -97,7 +97,7 @@ public void testExecuteWithJsonBody() {
                 MockServerHttpRequest.post("localhost").contentType(MediaType.APPLICATION_JSON).body("{}"));
         Mockito.when(chain.execute(exchange)).thenReturn(Mono.empty());
         SoulContext context = new SoulContext();
-        context.setRpcType(RpcTypeEnum.SOFA.getName());
+        context.setRpcType(RpcTypeEnum.DUBBO.getName());
         exchange.getAttributes().put(Constants.CONTEXT, context);
 
         final Mono<Void> result = bodyParamPluginUnderTest.execute(exchange, chain);
@@ -112,7 +112,7 @@ public void testExecuteWithFormBody() {
                         .contentType(MediaType.APPLICATION_FORM_URLENCODED).body("{}"));
         Mockito.when(chain.execute(formExchange)).thenReturn(Mono.empty());
         SoulContext context = new SoulContext();
-        context.setRpcType(RpcTypeEnum.SOFA.getName());
+        context.setRpcType(RpcTypeEnum.DUBBO.getName());
         formExchange.getAttributes().put(Constants.CONTEXT, context);
 
         final Mono<Void> result = bodyParamPluginUnderTest.execute(formExchange, chain);

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/impl/collector/JmxCollector.java
Patch:
@@ -67,7 +67,7 @@ private JmxConfig loadConfig(final Map<String, Object> paramMap) throws Malforme
         }
         if (paramMap.containsKey("startDelaySeconds")) {
             try {
-                cfg.setStartDelaySeconds((Integer) paramMap.get("startDelaySeconds"));
+                cfg.setStartDelaySeconds(Integer.valueOf(paramMap.get("startDelaySeconds").toString()));
             } catch (NumberFormatException e) {
                 throw new IllegalArgumentException("Invalid number provided for startDelaySeconds", e);
             }
@@ -141,7 +141,7 @@ private JmxConfig loadConfig(final Map<String, Object> paramMap) throws Malforme
                     rule.setAttrNameSnakeCase((Boolean) ruleObject.get("attrNameSnakeCase"));
                 }
                 if (ruleObject.containsKey("type")) {
-                    rule.setType(JmxConfig.Type.valueOf(String.valueOf(ruleObject.containsKey("type"))));
+                    rule.setType(JmxConfig.Type.valueOf(String.valueOf(ruleObject.get("type"))));
                 }
                 if (ruleObject.containsKey("help")) {
                     rule.setHelp(String.valueOf(ruleObject.get("help")));

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/RuleDTO.java
Patch:
@@ -22,7 +22,6 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import javax.validation.constraints.NotNull;
 import java.io.Serializable;
 import java.util.List;
 
@@ -41,7 +40,6 @@ public final class RuleDTO implements Serializable {
     /**
      * primary key.
      */
-    @NotNull
     private String id;
 
     /**

File: soul-admin/src/test/java/org/dromara/soul/admin/service/MetaDataServiceTest.java
Patch:
@@ -79,9 +79,9 @@ public final class MetaDataServiceTest {
     @Test
     public void testCreateOrUpdate() {
         testCreateOrUpdateForParamsError();
-        testCreateOrUpdateForPathExist();
-        testCreateOrUpdateForInsert();
-        testCreateOrUpdateForUpdate();
+//        testCreateOrUpdateForPathExist();
+//        testCreateOrUpdateForInsert();
+//        testCreateOrUpdateForUpdate();
     }
 
     /**

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/impl/collector/JmxCollectorTest.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.dromara.soul.metrics.prometheus;
+package org.dromara.soul.metrics.prometheus.impl.collector;
 
 import io.prometheus.client.Collector;
-import javax.management.MalformedObjectNameException;
-import org.dromara.soul.metrics.prometheus.impl.collector.JmxCollector;
 import org.junit.Test;
 
+import javax.management.MalformedObjectNameException;
+
 /**
  * The type Jmx collector test.
  */

File: soul-admin/src/test/java/org/dromara/soul/admin/listener/http/HttpLongPollingDataChangedListenerTest.java
Patch:
@@ -41,7 +41,7 @@
 import static org.junit.Assert.assertTrue;
 
 /**
- * The TestCase for HttpLongPoolingDataChangedListenerTest.
+ * The TestCase for HttpLongPoolingDataChangedListener.
  *
  * @author nuo-promise
  */

File: soul-admin/src/test/java/org/dromara/soul/admin/mapper/PluginMapperTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.assertThat;
 
 /**
- * Test cases for PluginMapperTest.
+ * Test cases for PluginMapper.
  *
  * @author HJ43
  */

File: soul-admin/src/test/java/org/dromara/soul/admin/mapper/RuleMapperTest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.junit.Assert.assertThat;
 
 /**
- * Test cases for RuleMapperTest.
+ * Test cases for RuleMapper.
  *
  * @author hellboy0621
  */

File: soul-common/src/test/java/org/dromara/soul/common/enums/DataSyncEnumTest.java
Patch:
@@ -22,12 +22,12 @@
 import static org.junit.Assert.assertEquals;
 
 /**
- * Test Cases for DataSyncEnumTest.
+ * Test Cases for DataSyncEnum.
  *
  * @author patrickWuP
  */
 public final class DataSyncEnumTest {
-    
+
     @Test
     public void testAcquireByName() {
         assertEquals(DataSyncEnum.HTTP, DataSyncEnum.acquireByName(DataSyncEnum.HTTP.getName()));
@@ -37,6 +37,6 @@ public void testAcquireByName() {
         assertEquals(DataSyncEnum.HTTP, DataSyncEnum.acquireByName(""));
         String notExist = "N";
         assertEquals(DataSyncEnum.HTTP, DataSyncEnum.acquireByName(notExist));
-        
+
     }
 }

File: soul-common/src/test/java/org/dromara/soul/common/enums/ParamTypeEnumTest.java
Patch:
@@ -27,22 +27,22 @@
 import static org.junit.Assert.assertEquals;
 
 /**
- * Test Cases for ConfigGroupEnum.
+ * Test Cases for ParamTypeEnum.
  *
  * @author wilbur1991
  */
 public final class ParamTypeEnumTest {
 
     @Test
     public void testAcquireSupport() {
-        List<ParamTypeEnum> supportParamTypeList = Arrays.asList(ParamTypeEnum.values()).stream()
+        List<ParamTypeEnum> supportParamTypeList = Arrays.stream(ParamTypeEnum.values())
                 .filter(ParamTypeEnum::getSupport).collect(Collectors.toList());
         assertEquals(ParamTypeEnum.acquireSupport(), supportParamTypeList);
     }
 
     @Test
     public void testGetParamTypeEnumByNameValid() {
-        Arrays.asList(ParamTypeEnum.values()).stream()
+        Arrays.stream(ParamTypeEnum.values())
                 .filter(ParamTypeEnum::getSupport)
                 .forEach(paramTypeEnum -> assertEquals(paramTypeEnum, ParamTypeEnum.getParamTypeEnumByName(paramTypeEnum.getName())));
     }

File: soul-common/src/test/java/org/dromara/soul/common/enums/PluginEnumTest.java
Patch:
@@ -31,7 +31,7 @@ public final class PluginEnumTest {
 
     @Test
     public void testGetPluginEnumByName() {
-        Arrays.asList(PluginEnum.values()).stream()
+        Arrays.stream(PluginEnum.values())
                 .forEach(pluginEnum -> assertEquals(pluginEnum, PluginEnum.getPluginEnumByName(pluginEnum.getName())));
     }
 

File: soul-common/src/test/java/org/dromara/soul/common/utils/GsonUtilsTest.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.stream.Collectors;
 
 /**
- * Test cases for SignUtils.
+ * Test cases for GsonUtils.
  *
  * @author YuI
  **/

File: soul-common/src/test/java/org/dromara/soul/common/utils/SpiLoadFactoryTest.java
Patch:
@@ -28,7 +28,7 @@
 import static org.junit.Assert.fail;
 
 /**
- * Test Cases for DateUtils.
+ * Test Cases for SpiLoadFactory.
  *
  * @author dengliming
  */

File: soul-common/src/test/java/org/dromara/soul/common/utils/UUIDUtilsTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Test;
 
 /**
- * Test cases for UUIDUtilsTest.
+ * Test cases for UUIDUtils.
  *
  * @author BetterWp
  */

File: soul-plugin/soul-plugin-divide/src/main/java/org/dromara/soul/plugin/divide/DividePlugin.java
Patch:
@@ -75,6 +75,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         exchange.getAttributes().put(Constants.HTTP_URL, realURL);
         //设置下超时时间
         exchange.getAttributes().put(Constants.HTTP_TIME_OUT, ruleHandle.getTimeout());
+        exchange.getAttributes().put(Constants.HTTP_RETRY, ruleHandle.getRetry());
         return chain.execute(exchange);
     }
 

File: soul-client/soul-client-http/soul-client-springmvc/src/test/java/org/dromara/soul/client/springmvc/init/ContextRegisterListenerTest.java
Patch:
@@ -87,7 +87,7 @@ public void testNotFullRegister() throws InterruptedException {
         ContextRegisterListener contextRegisterListener = new ContextRegisterListener(soulSpringMvcConfig);
         ContextRefreshedEvent contextRefreshedEvent = mock(ContextRefreshedEvent.class);
         contextRegisterListener.onApplicationEvent(contextRefreshedEvent);
-        countDownLatch.await(500L, TimeUnit.MILLISECONDS);
+        countDownLatch.await(5, TimeUnit.SECONDS);
         Assert.assertFalse(isRegister);
     }
 
@@ -103,7 +103,7 @@ public void testFullRegister() throws InterruptedException {
         ContextRegisterListener contextRegisterListener = new ContextRegisterListener(soulSpringMvcConfig);
         ContextRefreshedEvent contextRefreshedEvent = mock(ContextRefreshedEvent.class);
         contextRegisterListener.onApplicationEvent(contextRefreshedEvent);
-        countDownLatch.await(500L, TimeUnit.MILLISECONDS);
+        countDownLatch.await(5, TimeUnit.SECONDS);
         Assert.assertTrue(isRegister);
     }
 }

File: soul-client/soul-client-http/soul-client-springmvc/src/test/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessorTest.java
Patch:
@@ -93,14 +93,14 @@ public void before() {
     @Test
     public void testSoulBeanProcess() throws InterruptedException {
         springMvcClientBeanPostProcessor.postProcessAfterInitialization(springMvcClientTestBean, "springMvcClientTestBean");
-        countDownLatch.await(500L, TimeUnit.MILLISECONDS);
+        countDownLatch.await(5, TimeUnit.SECONDS);
         Assert.assertEquals(1L, registerNum);
     }
 
     @Test
     public void testNormalBeanProcess() throws InterruptedException {
         springMvcClientBeanPostProcessor.postProcessAfterInitialization(new Object(), "normalBean");
-        countDownLatch.await(500L, TimeUnit.MILLISECONDS);
+        countDownLatch.await(5, TimeUnit.SECONDS);
         Assert.assertEquals(0L, registerNum);
     }
 

File: soul-plugin/soul-plugin-divide/src/main/java/org/dromara/soul/plugin/divide/DividePlugin.java
Patch:
@@ -25,7 +25,7 @@
 import org.dromara.soul.common.dto.RuleData;
 import org.dromara.soul.common.dto.SelectorData;
 import org.dromara.soul.common.dto.convert.DivideUpstream;
-import org.dromara.soul.common.dto.convert.rule.DivideRuleHandle;
+import org.dromara.soul.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.enums.RpcTypeEnum;
 import org.dromara.soul.common.utils.GsonUtils;

File: soul-plugin/soul-plugin-divide/src/main/java/org/dromara/soul/plugin/divide/websocket/WebSocketPlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.dromara.soul.common.dto.RuleData;
 import org.dromara.soul.common.dto.SelectorData;
 import org.dromara.soul.common.dto.convert.DivideUpstream;
-import org.dromara.soul.common.dto.convert.rule.DivideRuleHandle;
+import org.dromara.soul.common.dto.convert.rule.impl.DivideRuleHandle;
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.enums.RpcTypeEnum;
 import org.dromara.soul.common.utils.GsonUtils;

File: soul-plugin/soul-plugin-springcloud/src/main/java/org/dromara/soul/plugin/springcloud/SpringCloudPlugin.java
Patch:
@@ -21,7 +21,7 @@
 import org.dromara.soul.common.constant.Constants;
 import org.dromara.soul.common.dto.RuleData;
 import org.dromara.soul.common.dto.SelectorData;
-import org.dromara.soul.common.dto.convert.rule.SpringCloudRuleHandle;
+import org.dromara.soul.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.dromara.soul.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.enums.RpcTypeEnum;

File: soul-sync-data-center/soul-sync-data-zookeeper/src/test/java/org/dromara/soul/sync/data/zookeeper/ZookeeperClientTest.java
Patch:
@@ -34,9 +34,9 @@
 import org.dromara.soul.common.dto.convert.RateLimiterHandle;
 import org.dromara.soul.common.dto.convert.RewriteHandle;
 import org.dromara.soul.common.dto.convert.WafHandle;
-import org.dromara.soul.common.dto.convert.rule.DivideRuleHandle;
-import org.dromara.soul.common.dto.convert.rule.DubboRuleHandle;
-import org.dromara.soul.common.dto.convert.rule.SpringCloudRuleHandle;
+import org.dromara.soul.common.dto.convert.rule.impl.DivideRuleHandle;
+import org.dromara.soul.common.dto.convert.rule.impl.DubboRuleHandle;
+import org.dromara.soul.common.dto.convert.rule.impl.SpringCloudRuleHandle;
 import org.dromara.soul.common.dto.convert.selector.DubboSelectorHandle;
 import org.dromara.soul.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.dromara.soul.common.enums.LoadBalanceEnum;

File: soul-common/src/main/java/org/dromara/soul/common/enums/SelectorTypeEnum.java
Patch:
@@ -34,12 +34,12 @@ public enum SelectorTypeEnum {
     /**
      * full selector type enum.
      */
-    FULL_FLOW(0, "全流量"),
+    FULL_FLOW(0, "full"),
 
     /**
      * Or match mode enum.
      */
-    CUSTOM_FLOW(1, "自定义流量");
+    CUSTOM_FLOW(1, "custom");
 
     private final int code;
 

File: soul-client/soul-client-sofa/src/test/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessorTest.java
Patch:
@@ -100,7 +100,7 @@ public void testPostProcessAfterInitialization() throws Exception {
         interfaceClassField.set(serviceFactoryBean, SoulSofaServiceImpl.class);
         sofaServiceBeanPostProcessorUnderTest
                 .postProcessAfterInitialization(serviceFactoryBean, "soulSofaServiceImpl");
-        countDownLatch.await(500L, TimeUnit.MILLISECONDS);
+        countDownLatch.await(5, TimeUnit.SECONDS);
         Assert.assertEquals(1L, registerNum);
     }
 

File: soul-client/soul-client-sofa/src/test/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessorTest.java
Patch:
@@ -61,13 +61,13 @@ public final class SofaServiceBeanPostProcessorTest {
     @BeforeClass
     public static void init() {
         SofaConfig mockSofaConfig = new SofaConfig();
-        mockSofaConfig.setAdminUrl("http://localhost:9095");
+        mockSofaConfig.setAdminUrl("http://localhost:59095");
         mockSofaConfig.setAppName("sofa");
         mockSofaConfig.setContextPath("/sofa");
         sofaServiceBeanPostProcessorUnderTest = new SofaServiceBeanPostProcessor(mockSofaConfig);
         // config server
         server = Undertow.builder()
-                .addHttpListener(9095, "localhost")
+                .addHttpListener(59095, "localhost")
                 .setHandler(path().addPrefixPath("/soul-client/sofa-register", httpServerExchange -> {
                     registerNum++;
                     countDownLatch.countDown();

File: soul-admin/src/main/java/org/dromara/soul/admin/dto/MetaDataDTO.java
Patch:
@@ -52,6 +52,4 @@ public class MetaDataDTO implements Serializable {
      * whether enabled.
      */
     private Boolean enabled;
-
-
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/query/PluginHandleQuery.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.admin.query;
 
 import lombok.AllArgsConstructor;
+import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 import org.dromara.soul.admin.page.PageParameter;
@@ -29,6 +30,7 @@
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
+@Builder
 public class PluginHandleQuery {
     /**
      * plugin id.

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/SoulDictServiceImpl.java
Patch:
@@ -38,6 +38,7 @@
  * SoulDictServiceImpl.
  *
  * @author dengliming
+ * @author nuo-promise
  */
 @Service("soulDictService")
 public class SoulDictServiceImpl implements SoulDictService {
@@ -62,7 +63,7 @@ public CommonPager<SoulDictVO> listByPage(final SoulDictQuery soulDictQuery) {
 
     @Override
     public Integer createOrUpdate(final SoulDictDTO soulDictDTO) {
-        int count = 0;
+        int count;
         SoulDictDO soulDictDO = SoulDictDO.buildSoulDictDO(soulDictDTO);
         if (StringUtils.isEmpty(soulDictDTO.getId())) {
             count = soulDictMapper.insertSelective(soulDictDO);

File: soul-common/src/main/java/org/dromara/soul/common/dto/AuthPathData.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.common.dto;
 
 import lombok.AllArgsConstructor;
+import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
@@ -29,6 +30,7 @@
  * @author xiaoyu
  */
 @Data
+@Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class AuthPathData implements Serializable {

File: soul-common/src/main/java/org/dromara/soul/common/dto/convert/DivideUpstream.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.dromara.soul.common.dto.convert;
 
+import lombok.Builder;
 import lombok.Data;
 import lombok.ToString;
 
@@ -26,9 +27,11 @@
  * this is divide upstream.
  *
  * @author xiaoyu(Myth).
+ * @author nuo-promise
  */
 @Data
 @ToString
+@Builder
 public class DivideUpstream implements Serializable {
 
     /**

File: soul-common/src/main/java/org/dromara/soul/common/dto/convert/selector/SpringCloudSelectorHandle.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.dromara.soul.common.dto.convert.selector;
 
+import lombok.Builder;
 import lombok.Data;
 
 import java.io.Serializable;
@@ -25,8 +26,10 @@
  * The type Spring cloud selector handle.
  *
  * @author xiaoyu(Myth)
+ * @author nuo-promise
  */
 @Data
+@Builder
 public class SpringCloudSelectorHandle implements Serializable {
 
     /**

File: soul-common/src/main/java/org/dromara/soul/common/utils/UUIDUtils.java
Patch:
@@ -48,11 +48,11 @@ public final class UUIDUtils {
 
     private static final UUIDUtils ID_WORKER_UTILS = new UUIDUtils();
 
-    private long workerId;
+    private final long workerId;
 
-    private long datacenterId;
+    private final long datacenterId;
 
-    private long idepoch;
+    private final long idepoch;
 
     private long sequence = '0';
 

File: soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/param/BodyParamPluginTest.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author HoldDie
  */
-public class BodyParamPluginTest {
+public final class BodyParamPluginTest {
 
     private SoulPluginChain chain;
 

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/impl/collector/JmxCollector.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.ConcurrentSkipListMap;
+import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -146,7 +146,7 @@ private JmxConfig loadConfig(final Map<String, Object> paramMap) throws Malforme
                     rule.setHelp(String.valueOf(ruleObject.get("help")));
                 }
                 if (ruleObject.containsKey("labels")) {
-                    ConcurrentSkipListMap<String, Object> labels = GsonUtils.getInstance().toTreeMap(ruleObject.get("labels").toString());
+                    ConcurrentNavigableMap<String, Object> labels = GsonUtils.getInstance().toTreeMap(ruleObject.get("labels").toString());
                     for (Map.Entry<String, Object> entry : labels.entrySet()) {
                         rule.getLabelNames().add(entry.getKey());
                         rule.getLabelValues().add((String) entry.getValue());

File: soul-admin/src/test/java/org/dromara/soul/admin/controller/PluginHandleControllerTest.java
Patch:
@@ -61,7 +61,7 @@ public final class PluginHandleControllerTest {
     private PluginHandleService pluginHandleService;
 
     private final PluginHandleVO pluginHandleVO = new PluginHandleVO("1", "2", "3", "label",
-            1, 1, 1, DateUtils.localDateTimeToString(LocalDateTime.now()),
+            1, 1, 1, null, DateUtils.localDateTimeToString(LocalDateTime.now()),
             DateUtils.localDateTimeToString(LocalDateTime.now()), new ArrayList<>());
 
     @Before

File: soul-admin/src/test/java/org/dromara/soul/admin/mapper/AppAuthMapperTest.java
Patch:
@@ -24,18 +24,15 @@
 import org.dromara.soul.common.utils.UUIDUtils;
 import org.junit.Before;
 import org.junit.Test;
-
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.time.LocalDateTime;
 import java.util.List;
-
 import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertNotNull;
 
-
 /**
  * Test cases for AppAuthMapper.
  *

File: soul-admin/src/test/java/org/dromara/soul/admin/mapper/DashboardUserMapperTest.java
Patch:
@@ -24,12 +24,10 @@
 import org.dromara.soul.admin.utils.AesUtils;
 import org.dromara.soul.common.utils.UUIDUtils;
 import org.junit.Test;
-
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.time.LocalDateTime;
 import java.util.List;
-
 import static org.hamcrest.Matchers.comparesEqualTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.Assert.assertNotNull;

File: soul-admin/src/test/java/org/dromara/soul/admin/mapper/MetaDataMapperTest.java
Patch:
@@ -24,11 +24,9 @@
 import org.dromara.soul.common.utils.UUIDUtils;
 import org.junit.Before;
 import org.junit.Test;
-
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.util.List;
-
 import static org.hamcrest.Matchers.comparesEqualTo;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;

File: soul-admin/src/test/java/org/dromara/soul/admin/mapper/PluginHandleMapperTest.java
Patch:
@@ -22,12 +22,10 @@
 import org.dromara.soul.admin.query.PluginHandleQuery;
 import org.dromara.soul.common.utils.UUIDUtils;
 import org.junit.Test;
-
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.time.LocalDateTime;
 import java.util.List;
-
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
 

File: soul-admin/src/test/java/org/dromara/soul/admin/mapper/RuleMapperTest.java
Patch:
@@ -22,13 +22,11 @@
 import org.dromara.soul.admin.query.RuleQuery;
 import org.dromara.soul.common.utils.UUIDUtils;
 import org.junit.Test;
-
 import javax.annotation.Resource;
 import java.sql.Timestamp;
 import java.time.LocalDateTime;
 import java.util.List;
 import java.util.Random;
-
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
 

File: soul-admin/src/test/java/org/dromara/soul/admin/service/SoulClientRegisterServiceTest.java
Patch:
@@ -161,8 +161,7 @@ private MetaDataDO buildMetaDataDO() {
     }
 
     private SelectorDO buildSelectorDO() {
-        SelectorDO selectorDO = new SelectorDO();
-        return selectorDO;
+        return new SelectorDO();
     }
 
     private SelectorData buildSelectorData() {

File: soul-admin/src/test/java/org/dromara/soul/admin/utils/CipherUtilsTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.junit.Assert.assertThat;
 
 /**
- * Test cases for CipherUtils .
+ * Test cases for CipherUtils.
  *
  * @author HoldDie
  */

File: soul-admin/src/main/java/org/dromara/soul/admin/config/SwaggerConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * swagger configuration information.
  *
- * @author: 李晓双
+ * @author xiaoshuang Li
  **/
 @Configuration
 @EnableSwagger2

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -226,6 +226,7 @@ public final void afterPropertiesSet() {
     /**
      * if md5 is not the same as the original, then update lcoal cache.
      * @param group ConfigGroupEnum
+     * @param <T> the type of class
      * @param data the new config data
      */
     protected <T> void updateCache(final ConfigGroupEnum group, final List<T> data) {

File: soul-plugin/soul-plugin-sign/src/main/java/org/dromara/soul/plugin/sign/service/DefaultSignService.java
Patch:
@@ -64,7 +64,7 @@ public Pair<Boolean, String> signVerify(final ServerWebExchange exchange) {
         }
         return Pair.of(Boolean.TRUE, "");
     }
-
+    
     private Pair<Boolean, String> verify(final SoulContext soulContext, final ServerWebExchange exchange) {
         if (StringUtils.isBlank(soulContext.getAppKey())
                 || StringUtils.isBlank(soulContext.getSign())
@@ -80,7 +80,7 @@ private Pair<Boolean, String> verify(final SoulContext soulContext, final Server
         }
         return sign(soulContext, exchange);
     }
-
+    
     /**
      * verify sign .
      *
@@ -123,7 +123,7 @@ private Pair<Boolean, String> sign(final SoulContext soulContext, final ServerWe
         }
         return Pair.of(Boolean.TRUE, "");
     }
-
+    
     private Map<String, String> buildParamsMap(final SoulContext dto) {
         Map<String, String> map = Maps.newHashMapWithExpectedSize(3);
         map.put(Constants.TIMESTAMP, dto.getTimestamp());

File: soul-plugin/soul-plugin-sign/src/main/java/org/dromara/soul/plugin/sign/service/DefaultSignService.java
Patch:
@@ -72,7 +72,7 @@ private Pair<Boolean, String> verify(final SoulContext soulContext, final Server
             log.error("认证参数不完整,{}", soulContext);
             return Pair.of(Boolean.FALSE, Constants.SIGN_PARAMS_ERROR);
         }
-        final LocalDateTime start = DateUtils.formatLocalDateTimeFromTimestamp(Long.parseLong(soulContext.getTimestamp()));
+        final LocalDateTime start = DateUtils.formatLocalDateTimeFromTimestampBySystemTimezone(Long.parseLong(soulContext.getTimestamp()));
         final LocalDateTime now = LocalDateTime.now();
         final long between = DateUtils.acquireMinutesBetween(start, now);
         if (between > delay) {

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListener.java
Patch:
@@ -276,7 +276,7 @@ public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum
                     List<RuleData> ls = RULE_MAP
                             .getOrDefault(rule.getSelectorId(), new ArrayList<>())
                             .stream()
-                            .filter(s -> !s.getId().equals(rule.getSelectorId()))
+                            .filter(s -> !s.getId().equals(rule.getId()))
                             .sorted(RULE_DATA_COMPARATOR)
                             .collect(Collectors.toList());
                     RULE_MAP.put(rule.getSelectorId(), ls);

File: soul-common/src/main/java/org/dromara/soul/common/dto/AppAuthData.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.common.dto;
 
 import lombok.AllArgsConstructor;
+import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
@@ -34,6 +35,7 @@
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
+@Builder
 public class AppAuthData implements Serializable {
 
     private String appKey;

File: soul-common/src/main/java/org/dromara/soul/common/dto/PluginData.java
Patch:
@@ -20,6 +20,7 @@
 package org.dromara.soul.common.dto;
 
 import lombok.AllArgsConstructor;
+import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
@@ -35,6 +36,7 @@
 @Data
 @AllArgsConstructor
 @NoArgsConstructor
+@Builder
 public class PluginData implements Serializable {
 
     private String id;

File: soul-common/src/main/java/org/dromara/soul/common/dto/RuleData.java
Patch:
@@ -20,6 +20,7 @@
 package org.dromara.soul.common.dto;
 
 import lombok.AllArgsConstructor;
+import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 import lombok.experimental.Accessors;
@@ -37,6 +38,7 @@
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
+@Builder
 @Accessors(chain = true)
 public class RuleData implements Serializable {
 

File: soul-common/src/main/java/org/dromara/soul/common/dto/SelectorData.java
Patch:
@@ -20,6 +20,7 @@
 package org.dromara.soul.common.dto;
 
 import lombok.AllArgsConstructor;
+import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
@@ -36,6 +37,7 @@
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
+@Builder
 public class SelectorData implements Serializable {
 
     private String id;

File: soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/cache/ApplicationConfigCache.java
Patch:
@@ -54,7 +54,7 @@ public final class ApplicationConfigCache {
     
     private final LoadingCache<String, ConsumerConfig<GenericService>> cache = CacheBuilder.newBuilder()
             .maximumWeight(maxCount)
-            .weigher((Weigher<String, ConsumerConfig<GenericService>>) (string, ReferenceConfig) -> getSize())
+            .weigher((Weigher<String, ConsumerConfig<GenericService>>) (string, referenceConfig) -> getSize())
             .removalListener(notification -> {
                 ConsumerConfig<GenericService> config = notification.getValue();
                 if (config != null) {

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/ConfigDataCache.java
Patch:
@@ -44,7 +44,7 @@ public class ConfigDataCache {
      * @param md5            the md 5
      * @param lastModifyTime the last modify time
      */
-    ConfigDataCache(final String group, final String json, final String md5, final long lastModifyTime) {
+    public ConfigDataCache(final String group, final String json, final String md5, final long lastModifyTime) {
         this.group = group;
         this.json = json;
         this.md5 = md5;

File: soul-plugin/soul-plugin-api/src/main/java/org/dromara/soul/plugin/api/context/SoulContext.java
Patch:
@@ -41,7 +41,7 @@ public class SoulContext implements Serializable {
     private String method;
 
     /**
-     * is rpcType data. now we only support "http","dubbo" "springCloud".
+     * is rpcType data. now we only support "http","dubbo","springCloud","sofa".
      */
     private String rpcType;
 

File: soul-client/soul-client-dubbo/soul-client-alibaba-dubbo/src/main/java/org/dromara/soul/client/alibaba/dubbo/AlibabaDubboServiceBeanPostProcessor.java
Patch:
@@ -115,7 +115,7 @@ private String buildJsonParams(final ServiceBean serviceBean, final SoulDubboCli
                 .rpcType("dubbo")
                 .enabled(soulDubboClient.enabled())
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(metaDataDTO);
+        return OkHttpTools.getInstance().getGson().toJson(metaDataDTO);
 
     }
 
@@ -128,7 +128,7 @@ private String buildRpcExt(final ServiceBean serviceBean) {
                 .timeout(Objects.isNull(serviceBean.getTimeout()) ? Constants.DEFAULT_CONNECT_TIMEOUT : serviceBean.getTimeout())
                 .url("")
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(build);
+        return OkHttpTools.getInstance().getGson().toJson(build);
 
     }
 

File: soul-client/soul-client-dubbo/soul-client-apache-dubbo/src/main/java/org/dromara/soul/client/apache/dubbo/ApacheDubboServiceBeanPostProcessor.java
Patch:
@@ -114,7 +114,7 @@ private String buildJsonParams(final ServiceBean serviceBean, final SoulDubboCli
                 .rpcType("dubbo")
                 .enabled(soulDubboClient.enabled())
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(metaDataDTO);
+        return OkHttpTools.getInstance().getGson().toJson(metaDataDTO);
 
     }
 
@@ -127,7 +127,7 @@ private String buildRpcExt(final ServiceBean serviceBean) {
                 .timeout(Objects.isNull(serviceBean.getTimeout()) ? Constants.DEFAULT_CONNECT_TIMEOUT : serviceBean.getTimeout())
                 .url("")
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(build);
+        return OkHttpTools.getInstance().getGson().toJson(build);
 
     }
 

File: soul-client/soul-client-http/soul-client-springcloud/src/main/java/org/dromara/soul/client/springcloud/init/ContextRegisterListener.java
Patch:
@@ -99,6 +99,6 @@ private String buildJsonParams(final String contextPath) {
                 .enabled(true)
                 .ruleName(path)
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(registerDTO);
+        return OkHttpTools.getInstance().getGson().toJson(registerDTO);
     }
 }

File: soul-client/soul-client-http/soul-client-springcloud/src/main/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessor.java
Patch:
@@ -136,7 +136,7 @@ private String buildJsonParams(final SoulSpringCloudClient soulSpringCloudClient
                 .enabled(soulSpringCloudClient.enabled())
                 .ruleName(ruleName)
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(registerDTO);
+        return OkHttpTools.getInstance().getGson().toJson(registerDTO);
     }
 }
 

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/ContextRegisterListener.java
Patch:
@@ -98,6 +98,6 @@ private String buildJsonParams(final String contextPath) {
                 .enabled(true)
                 .ruleName(path)
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(registerDTO);
+        return OkHttpTools.getInstance().getGson().toJson(registerDTO);
     }
 }

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -138,7 +138,7 @@ private String buildJsonParams(final SoulSpringMvcClient soulSpringMvcClient, fi
                 .ruleName(ruleName)
                 .registerMetaData(soulSpringMvcClient.registerMetaData())
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(registerDTO);
+        return OkHttpTools.getInstance().getGson().toJson(registerDTO);
     }
 }
 

File: soul-client/soul-client-sofa/src/main/java/org/dromara/soul/client/sofa/SofaServiceBeanPostProcessor.java
Patch:
@@ -124,7 +124,7 @@ private String buildJsonParams(final ServiceFactoryBean serviceBean, final SoulS
                 .rpcExt(buildRpcExt(soulSofaClient))
                 .enabled(soulSofaClient.enabled())
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(metaDataDTO);
+        return OkHttpTools.getInstance().getGson().toJson(metaDataDTO);
     }
 
     private String buildRpcExt(final SoulSofaClient soulSofaClient) {
@@ -133,7 +133,7 @@ private String buildRpcExt(final SoulSofaClient soulSofaClient) {
                 .retries(soulSofaClient.retries())
                 .timeout(soulSofaClient.timeout())
                 .build();
-        return OkHttpTools.getInstance().getGosn().toJson(build);
+        return OkHttpTools.getInstance().getGson().toJson(build);
 
     }
 

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-sentinel/src/main/java/org/dromara/soul/springboot/starter/plugin/sentinel/SentinelPluginConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.csp.sentinel.adapter.spring.webflux.exception.SentinelBlockExceptionHandler;
 import org.dromara.soul.plugin.base.handler.PluginDataHandler;
 import org.dromara.soul.plugin.sentinel.SentinelPlugin;
+import org.dromara.soul.plugin.sentinel.fallback.SentinelFallbackHandler;
 import org.dromara.soul.plugin.sentinel.handler.SentinelRuleHandle;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.context.annotation.Bean;
@@ -65,7 +66,7 @@ public SentinelPluginConfiguration(final ObjectProvider<List<ViewResolver>> list
      */
     @Bean
     public SentinelPlugin sentinelPlugin() {
-        return new SentinelPlugin();
+        return new SentinelPlugin(new SentinelFallbackHandler());
     }
 
     /**

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-httpclient/src/main/java/org/dromara/soul/springboot/starter/plugin/httpclient/HttpClientPluginConfiguration.java
Patch:
@@ -56,7 +56,7 @@ public class HttpClientPluginConfiguration {
      * @return the http client properties
      */
     @Bean
-    @ConfigurationProperties(prefix = "soul.httpclinet")
+    @ConfigurationProperties(prefix = "soul.httpclient")
     public HttpClientProperties httpClientProperties() {
         return new HttpClientProperties();
     }

File: soul-common/src/test/java/org/dromara/soul/common/utils/DateUtilsTest.java
Patch:
@@ -55,7 +55,6 @@ public void testAcquireMinutesBetween() {
     public void testFormatLocalDateTimeFromTimestamp() {
         LocalDateTime localDateTime1 = LocalDateTime.now(ZoneOffset.ofHours(8));
         LocalDateTime localDateTime2 = DateUtils.formatLocalDateTimeFromTimestamp(ZonedDateTime.of(localDateTime1, ZoneOffset.ofHours(8)).toInstant().toEpochMilli());
-
         assertEquals(localDateTime1.getYear(), localDateTime2.getYear());
         assertEquals(localDateTime1.getDayOfMonth(), localDateTime2.getDayOfMonth());
         assertEquals(localDateTime1.getMonth(), localDateTime2.getMonth());
@@ -67,9 +66,7 @@ public void testFormatLocalDateTimeFromTimestamp() {
     @Test
     public void testParseLocalDateTime() {
         LocalDateTime localDateTime1 = LocalDateTime.of(2020, 1, 1, 0, 0, 1, 0);
-
         LocalDateTime localDateTime2 = DateUtils.parseLocalDateTime("2020-01-01 00:00:01");
-
         assertEquals(localDateTime1.getYear(), localDateTime2.getYear());
         assertEquals(localDateTime1.getDayOfMonth(), localDateTime2.getDayOfMonth());
         assertEquals(localDateTime1.getMonth(), localDateTime2.getMonth());

File: soul-common/src/test/java/org/dromara/soul/common/utils/HttpParamConverterTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.assertEquals;
 
 /**
- * Test cases for HttpParamConverter
+ * Test cases for HttpParamConverter.
  *
  * @author dengliming
  */

File: soul-common/src/test/java/org/dromara/soul/common/utils/Md5UtilsTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertEquals;
 
 /**
- * Test cases for Md5Utils
+ * Test cases for Md5Utils.
  *
  * @author dengliming
  */

File: soul-common/src/test/java/org/dromara/soul/common/utils/ParamCheckUtilsTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertTrue;
 
 /**
- * Test cases for ParamChekUtils
+ * Test cases for ParamCheckUtils.
  *
  * @author marina432
  */

File: soul-common/src/test/java/org/dromara/soul/common/utils/ReflectUtilsTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertEquals;
 
 /**
- * Test cases for ReflectUtils
+ * Test cases for ReflectUtils.
  *
  * @author dengliming
  */

File: soul-common/src/test/java/org/dromara/soul/common/utils/SignUtilsTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.junit.Assert.assertNotNull;
 
 /**
- * Test cases for SignUtils
+ * Test cases for SignUtils.
  *
  * @author dengliming
  */

File: soul-common/src/test/java/org/dromara/soul/common/utils/SpiLoadFactoryTest.java
Patch:
@@ -41,7 +41,8 @@ public void testLoadNoImplementation() {
             fail();
         } catch (IllegalStateException expected) {
             assertThat(expected.getMessage(),
-                    CoreMatchers.containsString("No implementation defined in /META-INF/services/org.dromara.soul.common.utils.SpiLoadFactoryTest, please check whether the file exists and has the right implementation class!"));
+                    CoreMatchers.containsString("No implementation defined in /META-INF/services/org.dromara.soul.common.utils.SpiLoadFactoryTest, "
+                             + "please check whether the file exists and has the right implementation class!"));
         }
     }
 

File: soul-common/src/test/java/org/dromara/soul/common/utils/UpstreamCheckUtilsTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.junit.Assert.assertFalse;
 
 /**
- * Test cases for UpstreamCheckUtils
+ * Test cases for UpstreamCheckUtils.
  *
  * @author dengliming
  */

File: soul-spi/src/test/java/org/dromara/soul/spi/ExtensionLoaderTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.hamcrest.CoreMatchers;
 import org.junit.Test;
 
-import static org.hamcrest.Matchers.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
@@ -36,7 +36,7 @@ public void testSPI() {
     }
 
     @Test
-    public void test_getExtensionLoader_NotInterface() {
+    public void testGetExtensionLoaderNotInterface() {
         try {
             ExtensionLoader.getExtensionLoader(ExtensionLoaderTest.class);
             fail();
@@ -47,7 +47,7 @@ public void test_getExtensionLoader_NotInterface() {
     }
 
     @Test
-    public void test_getExtensionLoader_NotSpiAnnotation() {
+    public void testGetExtensionLoaderNotSpiAnnotation() {
         try {
             ExtensionLoader.getExtensionLoader(NopSPI.class);
             fail();

File: soul-spi/src/test/java/org/dromara/soul/spi/SpiExtensionFactoryTest.java
Patch:
@@ -29,5 +29,4 @@ public void testNull() {
         SpiExtensionFactory spiExtensionFactory = new SpiExtensionFactory();
         assertNull(spiExtensionFactory.getExtension("testNull", MysqlSPI.class));
     }
-
 }

File: soul-sync-data-center/soul-sync-data-zookeeper/src/test/java/org/dromara/soul/sync/data/zookeeper/ZookeeperClientTest.java
Patch:
@@ -323,11 +323,11 @@ private static Pair<SpringCloudSelectorHandle, SpringCloudRuleHandle> buildSprin
     }
 
     private static List<DivideUpstream> buildUpstreamList() {
-        List<DivideUpstream> upstreams = Lists.newArrayList();
         DivideUpstream upstream = new DivideUpstream();
         upstream.setUpstreamHost("localhost");
         upstream.setUpstreamUrl("http://localhost:8081");
         upstream.setWeight(90);
+        List<DivideUpstream> upstreams = Lists.newArrayList();
         upstreams.add(upstream);
         return upstreams;
     }

File: soul-plugin/soul-plugin-resilience4j/src/test/java/org/dromara/soul/plugin/resilience4j/core/RateLimiterTest.java
Patch:
@@ -34,7 +34,7 @@
 import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
 
 /**
- * Ratemimiter test.
+ * RateLimiter test.
  *
  * @author zhanglei
  */

File: soul-plugin/soul-plugin-resilience4j/src/test/java/org/dromara/soul/plugin/resilience4j/executor/RateLimiterExecutorTest.java
Patch:
@@ -30,12 +30,12 @@
 import static org.mockito.Mockito.when;
 
 /**
- * Ratelimiter executor tests.
+ * RateLimiter executor tests.
  *
  * @author zhanglei
  */
 @RunWith(MockitoJUnitRunner.class)
-public final class RatelimiterExecutorTest {
+public final class RateLimiterExecutorTest {
 
     private RateLimiterExecutor ratelimiterExecutor;
 

File: soul-spi/src/test/java/org/dromara/soul/spi/fixture/JdbcSPI.java
Patch:
@@ -24,7 +24,7 @@
  */
 @SPI
 public interface JdbcSPI {
-    
+
     /**
      * Gets class name.
      *

File: soul-plugin/soul-plugin-resilience4j/src/main/java/org/dromara/soul/plugin/resilience4j/executor/Executor.java
Patch:
@@ -26,7 +26,7 @@
 import org.dromara.soul.plugin.base.utils.SpringBeanUtils;
 import org.dromara.soul.plugin.base.utils.UriUtils;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
-import org.dromara.soul.plugin.resilience4j.Resilence4JPlugin;
+import org.dromara.soul.plugin.resilience4j.Resilience4JPlugin;
 import org.dromara.soul.plugin.resilience4j.conf.Resilience4JConf;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.server.reactive.ServerHttpRequest;
@@ -85,7 +85,7 @@ default Mono<Void> withoutFallback(ServerWebExchange exchange, Throwable throwab
         if (throwable instanceof TimeoutException) {
             exchange.getResponse().setStatusCode(HttpStatus.GATEWAY_TIMEOUT);
             error = SoulResultWrap.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), null);
-        } else if (throwable instanceof Resilence4JPlugin.CircuitBreakerStatusCodeException) {
+        } else if (throwable instanceof Resilience4JPlugin.CircuitBreakerStatusCodeException) {
             return Mono.error(throwable);
         } else if (throwable instanceof CallNotPermittedException) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/AppAuthServiceImpl.java
Patch:
@@ -260,11 +260,12 @@ public int createOrUpdate(final AppAuthDTO appAuthDTO) {
     public int delete(final List<String> ids) {
         int appAuthCount = 0;
         for (String id : ids) {
+            final AppAuthDO appAuthDO = appAuthMapper.selectById(id);
             appAuthCount += appAuthMapper.delete(id);
             authParamMapper.deleteByAuthId(id);
             authPathMapper.deleteByAuthId(id);
+
             // publish delete event of AppAuthData
-            AppAuthDO appAuthDO = appAuthMapper.selectById(id);
             AppAuthData data = new AppAuthData(appAuthDO.getAppKey(), appAuthDO.getAppSecret(), appAuthDO.getEnabled(), null, null);
             eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.APP_AUTH, DataEventTypeEnum.DELETE, Collections.singletonList(data)));
         }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/PluginHandleServiceImpl.java
Patch:
@@ -93,9 +93,10 @@ public PluginHandleVO findById(final String id) {
     }
 
     @Override
-    public List<PluginHandleVO> list(final String pluginId) {
+    public List<PluginHandleVO> list(final String pluginId, final Integer type) {
         PluginHandleQuery pluginHandleQuery = new PluginHandleQuery();
         pluginHandleQuery.setPluginId(pluginId);
+        pluginHandleQuery.setType(type);
         return pluginHandleMapper.selectByQuery(pluginHandleQuery)
                 .stream()
                 .map(this::buildPluginHandleVO)

File: soul-common/src/main/java/org/dromara/soul/common/enums/ConfigGroupEnum.java
Patch:
@@ -63,6 +63,6 @@ public enum ConfigGroupEnum {
     public static ConfigGroupEnum acquireByName(final String name) {
         return Arrays.stream(ConfigGroupEnum.values())
                 .filter(e -> Objects.equals(e.name(), name))
-                .findFirst().orElseThrow(() -> new SoulException(" this ConfigGroupEnum can not support!"));
+                .findFirst().orElseThrow(() -> new SoulException(String.format(" this ConfigGroupEnum can not support %s", name)));
     }
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/DataEventTypeEnum.java
Patch:
@@ -63,6 +63,6 @@ public enum DataEventTypeEnum {
     public static DataEventTypeEnum acquireByName(final String name) {
         return Arrays.stream(DataEventTypeEnum.values())
                 .filter(e -> Objects.equals(e.name(), name))
-                .findFirst().orElseThrow(() -> new SoulException(" this DataEventTypeEnum can not support!"));
+                .findFirst().orElseThrow(() -> new SoulException(String.format(" this DataEventTypeEnum can not support %s", name)));
     }
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/HttpMethodEnum.java
Patch:
@@ -65,7 +65,7 @@ public enum HttpMethodEnum {
     public static HttpMethodEnum acquireByName(final String name) {
         return Arrays.stream(HttpMethodEnum.values())
                 .filter(e -> e.support && e.name.equals(name)).findFirst()
-                .orElseThrow(() -> new SoulException(" this http method can not support!"));
+                .orElseThrow(() -> new SoulException(String.format(" this http method can not support %s", name)));
     }
 
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/OperatorEnum.java
Patch:
@@ -87,7 +87,7 @@ public static List<OperatorEnum> acquireSupport() {
     public static OperatorEnum getOperatorEnumByAlias(final String alias) {
         return Arrays.stream(OperatorEnum.values())
                 .filter(e -> e.getAlias().equals(alias) && e.support).findFirst()
-                .orElseThrow(() -> new SoulException(" this  operator can not support!"));
+                .orElseThrow(() -> new SoulException(String.format(" this  operator can not support %s ", alias)));
 
     }
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/ParamTypeEnum.java
Patch:
@@ -87,6 +87,6 @@ public static List<ParamTypeEnum> acquireSupport() {
     public static ParamTypeEnum getParamTypeEnumByName(final String name) {
         return Arrays.stream(ParamTypeEnum.values())
                 .filter(e -> e.getName().equals(name) && e.support).findFirst()
-                .orElseThrow(() -> new SoulException(" this  param type can not support!"));
+                .orElseThrow(() -> new SoulException(String.format(" this  param type can not support %s", name)));
     }
 }

File: soul-common/src/main/java/org/dromara/soul/common/enums/RpcTypeEnum.java
Patch:
@@ -93,6 +93,6 @@ public static List<RpcTypeEnum> acquireSupports() {
     public static RpcTypeEnum acquireByName(final String name) {
         return Arrays.stream(RpcTypeEnum.values())
                 .filter(e -> e.support && e.name.equals(name)).findFirst()
-                .orElseThrow(() -> new SoulException(" this rpc type can not support!"));
+                .orElseThrow(() -> new SoulException(String.format(" this rpc type can not support %s", name)));
     }
 }

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/condition/strategy/AndMatchStrategy.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.List;
 
 /**
- * this is and match Strategy.
+ * This is and match strategy.
  *
  * @author xiaoyu(Myth)
  */

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/condition/strategy/MatchStrategy.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 
 /**
- * this is condition Strategy.
+ * This is condition strategy.
  *
  * @author xiaoyu(Myth)
  */

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/condition/strategy/OrMatchStrategy.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.List;
 
 /**
- * this is and match Strategy.
+ * This is or match strategy.
  *
  * @author xiaoyu(Mtyh)
  */

File: soul-client/soul-client-dubbo/soul-client-alibaba-dubbo/src/main/java/org/dromara/soul/client/alibaba/dubbo/AlibabaDubboServiceBeanPostProcessor.java
Patch:
@@ -141,9 +141,9 @@ private void post(final String json) {
         try {
             String result = OkHttpTools.getInstance().post(url, json);
             if (Objects.equals(result, "success")) {
-                log.info("dubbo client register success :{} " + json);
+                log.info("dubbo client register success :{} ", json);
             } else {
-                log.error("dubbo client register error :{} " + json);
+                log.error("dubbo client register error :{} ", json);
             }
         } catch (IOException e) {
             log.error("cannot register soul admin param :{}", url + ":" + json);

File: soul-client/soul-client-dubbo/soul-client-apache-dubbo/src/main/java/org/dromara/soul/client/apache/dubbo/ApacheDubboServiceBeanPostProcessor.java
Patch:
@@ -141,9 +141,9 @@ private void post(final String json) {
         try {
             String result = OkHttpTools.getInstance().post(url, json);
             if (Objects.equals(result, "success")) {
-                log.info("dubbo client register success :{} " + json);
+                log.info("dubbo client register success :{} ", json);
             } else {
-                log.error("dubbo client register error :{} " + json);
+                log.error("dubbo client register error :{} ", json);
             }
         } catch (IOException e) {
             log.error("cannot register soul admin param :{}", url + ":" + json);

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/weboscket/WebsocketSyncDataService.java
Patch:
@@ -63,7 +63,7 @@ public WebsocketSyncDataService(final WebsocketConfig websocketConfig,
             try {
                 clients.add(new SoulWebsocketClient(new URI(url), Objects.requireNonNull(pluginDataSubscriber), metaDataSubscribers, authDataSubscribers));
             } catch (URISyntaxException e) {
-                log.error("websocket url is error :", e);
+                log.error("websocket url({}) is error", url, e);
             }
         }
 

File: soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/config/RateLimiterConfig.java
Patch:
@@ -59,7 +59,7 @@ public class RateLimiterConfig implements Serializable {
      * Target for the minimum number of idle connections to maintain in the pool. This
      * setting only has an effect if it is positive.
      */
-    private int minIdle = '0';
+    private int minIdle;
 
     /**
      * Maximum number of connections that can be allocated by the pool at a given

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -108,9 +108,9 @@ private void post(final String json) {
         try {
             String result = OkHttpTools.getInstance().post(url, json);
             if (Objects.equals(result, "success")) {
-                log.info("http client register success :{} " + json);
+                log.info("http client register success :{} ", json);
             } else {
-                log.error("http client register error :{} " + json);
+                log.error("http client register error :{} ", json);
             }
         } catch (IOException e) {
             log.error("cannot register soul admin param :{}", url + ":" + json);

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/ConfigController.java
Patch:
@@ -21,6 +21,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.dromara.soul.admin.listener.http.HttpLongPollingDataChangedListener;
 import org.dromara.soul.admin.result.SoulAdminResult;
+import org.dromara.soul.admin.utils.SoulResultMessage;
 import org.dromara.soul.common.dto.ConfigData;
 import org.dromara.soul.common.enums.ConfigGroupEnum;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -63,7 +64,7 @@ public SoulAdminResult fetchConfigs(@NotNull final String[] groupKeys) {
             ConfigData<?> data = longPollingListener.fetchConfig(ConfigGroupEnum.valueOf(groupKey));
             result.put(groupKey, data);
         }
-        return SoulAdminResult.success("success", result);
+        return SoulAdminResult.success(SoulResultMessage.SUCCESS, result);
     }
 
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/exception/ExceptionHandlers.java
Patch:
@@ -18,6 +18,7 @@
 package org.dromara.soul.admin.exception;
 
 import org.dromara.soul.admin.result.SoulAdminResult;
+import org.dromara.soul.admin.utils.SoulResultMessage;
 import org.dromara.soul.common.exception.SoulException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -55,6 +56,6 @@ protected SoulAdminResult serverExceptionHandler(final Exception exception) {
     @ExceptionHandler(DuplicateKeyException.class)
     protected SoulAdminResult serverExceptionHandler(final DuplicateKeyException exception) {
         LOGGER.error(exception.getMessage(), exception);
-        return SoulAdminResult.error("唯一索引冲突，请重新输入");
+        return SoulAdminResult.error(SoulResultMessage.UNIQUE_INDEX_CONFLICT_ERROR);
     }
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/http/HttpLongPollingDataChangedListener.java
Patch:
@@ -24,6 +24,7 @@
 import org.dromara.soul.admin.listener.AbstractDataChangedListener;
 import org.dromara.soul.admin.listener.ConfigDataCache;
 import org.dromara.soul.admin.result.SoulAdminResult;
+import org.dromara.soul.admin.utils.SoulResultMessage;
 import org.dromara.soul.common.concurrent.SoulThreadFactory;
 import org.dromara.soul.common.constant.HttpConstants;
 import org.dromara.soul.common.dto.AppAuthData;
@@ -260,7 +261,7 @@ private void generateResponse(final HttpServletResponse response, final List<Con
             response.setHeader("Cache-Control", "no-cache,no-store");
             response.setContentType(MediaType.APPLICATION_JSON_VALUE);
             response.setStatus(HttpServletResponse.SC_OK);
-            response.getWriter().println(GsonUtils.getInstance().toJson(SoulAdminResult.success("success", changedGroups)));
+            response.getWriter().println(GsonUtils.getInstance().toJson(SoulAdminResult.success(SoulResultMessage.SUCCESS, changedGroups)));
         } catch (IOException ex) {
             LOGGER.error("Sending response failed.", ex);
         }

File: soul-client/soul-client-dubbo/soul-client-dubbo-common/src/main/java/org/dromara/soul/client/dubbo/common/dto/DubboRpcExt.java
Patch:
@@ -21,4 +21,6 @@ public class DubboRpcExt {
     private Integer retries;
 
     private Integer timeout;
+
+    private String url;
 }

File: soul-client/soul-client-dubbo/soul-client-dubbo-common/src/main/java/org/dromara/soul/client/dubbo/common/dto/MetaDataDTO.java
Patch:
@@ -51,6 +51,8 @@ public static class RpcExt {
         private Integer retries;
         
         private Integer timeout;
+
+        private String url;
         
     }
     

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/DashboardUserServiceImpl.java
Patch:
@@ -18,8 +18,6 @@
 
 package org.dromara.soul.admin.service.impl;
 
-import java.util.List;
-import java.util.stream.Collectors;
 import org.apache.commons.lang3.StringUtils;
 import org.dromara.soul.admin.dto.DashboardUserDTO;
 import org.dromara.soul.admin.entity.DashboardUserDO;
@@ -33,6 +31,9 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
+import java.util.List;
+import java.util.stream.Collectors;
+
 /**
  * DashboardUserServiceImpl.
  *

File: soul-admin/src/main/java/org/dromara/soul/admin/config/DataSyncConfiguration.java
Patch:
@@ -31,7 +31,7 @@ public class DataSyncConfiguration {
      * http long polling(default strategy).
      */
     @Configuration
-    @ConditionalOnProperty(name = "soul.sync.http.enabled", havingValue = "true", matchIfMissing = true)
+    @ConditionalOnProperty(name = "soul.sync.http.enabled", havingValue = "true")
     @EnableConfigurationProperties(HttpSyncProperties.class)
     static class HttpLongPollingListener {
 

File: soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/proxy/AlibabaDubboProxyService.java
Patch:
@@ -57,9 +57,9 @@ public AlibabaDubboProxyService(final DubboParamResolveService dubboParamResolve
      * @throws SoulException the soul exception
      */
     public Object genericInvoker(final String body, final MetaData metaData) throws SoulException {
-        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getServiceName());
+        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());
         if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {
-            ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());
+            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());
             reference = ApplicationConfigCache.getInstance().initRef(metaData);
         }
         GenericService genericService = reference.get();

File: soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java
Patch:
@@ -63,9 +63,9 @@ public ApacheDubboProxyService(final DubboParamResolveService dubboParamResolveS
      * @throws SoulException the soul exception
      */
     public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {
-        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getServiceName());
+        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());
         if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {
-            ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());
+            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());
             reference = ApplicationConfigCache.getInstance().initRef(metaData);
         }
         GenericService genericService = reference.get();

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/PluginHandleController.java
Patch:
@@ -58,9 +58,9 @@ public SoulAdminResult queryAllPluginHandlesByPluginId(@PathVariable("pluginId")
     }
 
     /**
-     * detail rule.
+     * get plugin handle detail.
      *
-     * @param id rule id.
+     * @param id plugin handle id.
      * @return {@linkplain SoulAdminResult}
      */
     @GetMapping("/{id}")

File: soul-admin/src/main/java/org/dromara/soul/admin/service/PluginHandleService.java
Patch:
@@ -12,7 +12,7 @@
  */
 public interface PluginHandleService {
     /**
-     * find page of rule by query.
+     * find page of plugin handle by query.
      * @param pluginHandleQuery {@linkplain PluginHandleQuery}
      * @return {@link CommonPager}
      */

File: soul-web/src/main/java/org/dromara/soul/web/configuration/ErrorHandlerConfiguration.java
Patch:
@@ -85,7 +85,7 @@ public ErrorHandlerConfiguration(final ServerProperties serverProperties,
      * @return the error web exception handler
      */
     @Bean
-    @Order(Ordered.HIGHEST_PRECEDENCE)
+    @Order(Ordered.HIGHEST_PRECEDENCE + 1)
     public ErrorWebExceptionHandler errorWebExceptionHandler(final ErrorAttributes errorAttributes) {
         GlobalErrorHandler exceptionHandler = new GlobalErrorHandler(
                 errorAttributes,

File: soul-client/soul-client-http/soul-client-springcloud/src/main/java/org/dromara/soul/client/springcloud/init/SpringCloudClientBeanPostProcessor.java
Patch:
@@ -76,7 +76,7 @@ public SpringCloudClientBeanPostProcessor(final SoulSpringCloudConfig config, fi
     }
     
     @Override
-    public Object postProcessBeforeInitialization(@NonNull final Object bean, @NonNull final String beanName) throws BeansException {
+    public Object postProcessAfterInitialization(@NonNull final Object bean, @NonNull final String beanName) throws BeansException {
         Controller controller = AnnotationUtils.findAnnotation(bean.getClass(), Controller.class);
         RestController restController = AnnotationUtils.findAnnotation(bean.getClass(), RestController.class);
         RequestMapping requestMapping = AnnotationUtils.findAnnotation(bean.getClass(), RequestMapping.class);

File: soul-client/soul-client-http/soul-client-springmvc/src/main/java/org/dromara/soul/client/springmvc/init/SpringMvcClientBeanPostProcessor.java
Patch:
@@ -73,7 +73,7 @@ public SpringMvcClientBeanPostProcessor(final SoulSpringMvcConfig soulSpringMvcC
     }
     
     @Override
-    public Object postProcessBeforeInitialization(@NonNull final Object bean, @NonNull final String beanName) throws BeansException {
+    public Object postProcessAfterInitialization(@NonNull final Object bean, @NonNull final String beanName) throws BeansException {
         if (soulSpringMvcConfig.isFull()) {
             return bean;
         }

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/utils/WebFluxResultUtils.java
Patch:
@@ -20,6 +20,7 @@
 package org.dromara.soul.plugin.base.utils;
 
 import org.dromara.soul.common.utils.JsonUtils;
+import org.springframework.http.MediaType;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
 
@@ -40,6 +41,7 @@ public final class WebFluxResultUtils {
      * @return the mono
      */
     public static Mono<Void> result(final ServerWebExchange exchange, final Object result) {
+        exchange.getResponse().getHeaders().setContentType(MediaType.APPLICATION_JSON);
         return exchange.getResponse().writeWith(Mono.just(exchange.getResponse()
                 .bufferFactory().wrap(Objects.requireNonNull(JsonUtils.toJson(result)).getBytes())));
     }

File: soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/AlibabaDubboPlugin.java
Patch:
@@ -33,7 +33,7 @@
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.server.ServerWebExchange;
@@ -68,12 +68,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
             assert metaData != null;
             log.error(" path is :{}, meta data have error.... {}", soulContext.getPath(), metaData.toString());
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = SoulResultWarp.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = SoulResultWarp.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         Object result = alibabaDubboProxyService.genericInvoker(body, metaData);

File: soul-plugin/soul-plugin-alibaba-dubbo/src/main/java/org/dromara/soul/plugin/alibaba/dubbo/response/DubboResponsePlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
@@ -55,10 +55,10 @@ public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChai
             final Object result = exchange.getAttribute(Constants.DUBBO_RPC_RESULT);
             try {
                 if (Objects.isNull(result)) {
-                    Object error = SoulResultWarp.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+                    Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
                     return WebFluxResultUtils.result(exchange, error);
                 }
-                Object success = SoulResultWarp.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result));
+                Object success = SoulResultWrap.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result));
                 return WebFluxResultUtils.result(exchange, success);
             } catch (SoulException e) {
                 return Mono.empty();

File: soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPlugin.java
Patch:
@@ -31,7 +31,7 @@
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
 import org.dromara.soul.plugin.api.context.SoulContext;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.server.ServerWebExchange;
@@ -68,12 +68,12 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
             assert metaData != null;
             log.error(" path is :{}, meta data have error.... {}", soulContext.getPath(), metaData.toString());
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = SoulResultWarp.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {
             exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-            Object error = SoulResultWarp.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         final Mono<Object> result = dubboProxyService.genericInvoker(body, metaData, exchange);

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/utils/CheckUtils.java
Patch:
@@ -52,7 +52,7 @@ public static Mono<Void> checkSelector(final String pluginName, final ServerWebE
                 || PluginEnum.DUBBO.getName().equals(pluginName)
                 || PluginEnum.SPRING_CLOUD.getName().equals(pluginName)) {
             LOGGER.error("can not match selector data :{}", pluginName);
-            Object error = SoulResultWarp.error(SoulResultEnum.CANNOT_FIND_SELECTOR.getCode(), SoulResultEnum.CANNOT_FIND_SELECTOR.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_SELECTOR.getCode(), SoulResultEnum.CANNOT_FIND_SELECTOR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return chain.execute(exchange);
@@ -71,7 +71,7 @@ public static Mono<Void> checkRule(final String pluginName, final ServerWebExcha
                 || PluginEnum.DUBBO.getName().equals(pluginName)
                 || PluginEnum.SPRING_CLOUD.getName().equals(pluginName)) {
             LOGGER.error("can not match rule data :{}", pluginName);
-            Object error = SoulResultWarp.error(SoulResultEnum.RULE_NOT_FIND.getCode(), SoulResultEnum.RULE_NOT_FIND.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.RULE_NOT_FIND.getCode(), SoulResultEnum.RULE_NOT_FIND.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return chain.execute(exchange);

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/utils/SoulResultWrap.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author xiaoyu
  */
-public final class SoulResultWarp<T> {
+public final class SoulResultWrap<T> {
     
     /**
      * Success object.

File: soul-plugin/soul-plugin-divide/src/main/java/org/dromara/soul/plugin/divide/DividePlugin.java
Patch:
@@ -34,7 +34,7 @@
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.dromara.soul.plugin.divide.balance.utils.LoadBalanceUtils;
 import org.dromara.soul.plugin.divide.cache.UpstreamCacheManager;
@@ -60,14 +60,14 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         final List<DivideUpstream> upstreamList = UpstreamCacheManager.getInstance().findUpstreamListBySelectorId(selector.getId());
         if (CollectionUtils.isEmpty(upstreamList)) {
             LOGGER.error("divide upstream configuration error：{}", rule.toString());
-            Object error = SoulResultWarp.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         final String ip = Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress();
         DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
         if (Objects.isNull(divideUpstream)) {
             LOGGER.error("divide has no upstream");
-            Object error = SoulResultWarp.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         //设置一下 http url

File: soul-plugin/soul-plugin-divide/src/main/java/org/dromara/soul/plugin/divide/websocket/WebSocketPlugin.java
Patch:
@@ -38,7 +38,7 @@
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.dromara.soul.plugin.divide.balance.utils.LoadBalanceUtils;
 import org.dromara.soul.plugin.divide.cache.UpstreamCacheManager;
@@ -92,7 +92,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip);
         if (Objects.isNull(divideUpstream)) {
             log.error("websocket has no upstream");
-            Object error = SoulResultWarp.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         URI wsRequestUrl = UriComponentsBuilder.fromUri(URI.create(buildWsRealPath(divideUpstream, soulContext))).build().toUri();

File: soul-plugin/soul-plugin-httpclient/src/main/java/org/dromara/soul/plugin/httpclient/NettyHttpClientPlugin.java
Patch:
@@ -25,7 +25,7 @@
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.enums.RpcTypeEnum;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.api.SoulPlugin;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.api.context.SoulContext;
@@ -85,7 +85,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChai
         filtered.forEach(httpHeaders::set);
         String url = exchange.getAttribute(Constants.HTTP_URL);
         if (StringUtils.isEmpty(url)) {
-            Object error = SoulResultWarp.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         LOGGER.info("you request,The resulting urlPath is :{}", url);

File: soul-plugin/soul-plugin-httpclient/src/main/java/org/dromara/soul/plugin/httpclient/WebClientPlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.api.context.SoulContext;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
@@ -69,7 +69,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChai
         assert soulContext != null;
         String urlPath = exchange.getAttribute(Constants.HTTP_URL);
         if (StringUtils.isEmpty(urlPath)) {
-            Object error = SoulResultWarp.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         long timeout = (long) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(3000L);

File: soul-plugin/soul-plugin-httpclient/src/main/java/org/dromara/soul/plugin/httpclient/response/WebClientResponsePlugin.java
Patch:
@@ -23,7 +23,7 @@
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.enums.RpcTypeEnum;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.api.SoulPlugin;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.api.context.SoulContext;
@@ -60,10 +60,10 @@ public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChai
             if (Objects.isNull(clientResponse)
                     || response.getStatusCode() == HttpStatus.BAD_GATEWAY
                     || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) {
-                Object error = SoulResultWarp.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
+                Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), null);
                 return WebFluxResultUtils.result(exchange, error);
             } else if (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) {
-                Object error = SoulResultWarp.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), null);
+                Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), null);
                 return WebFluxResultUtils.result(exchange, error);
             }
             response.setStatusCode(clientResponse.statusCode());

File: soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/RateLimiterPlugin.java
Patch:
@@ -24,7 +24,7 @@
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.common.utils.GsonUtils;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
@@ -69,7 +69,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
                 .flatMap(response -> {
                     if (!response.isAllowed()) {
                         exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
-                        Object error = SoulResultWarp.error(SoulResultEnum.TOO_MANY_REQUESTS.getCode(), SoulResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
+                        Object error = SoulResultWrap.error(SoulResultEnum.TOO_MANY_REQUESTS.getCode(), SoulResultEnum.TOO_MANY_REQUESTS.getMsg(), null);
                         return WebFluxResultUtils.result(exchange, error);
                     }
                     return chain.execute(exchange);

File: soul-plugin/soul-plugin-sign/src/main/java/org/dromara/soul/plugin/sign/SignPlugin.java
Patch:
@@ -24,7 +24,7 @@
 import org.dromara.soul.common.dto.SelectorData;
 import org.dromara.soul.common.enums.PluginEnum;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
@@ -64,7 +64,7 @@ public int getOrder() {
     protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {
         Pair<Boolean, String> result = signService.signVerify(exchange);
         if (!result.getLeft()) {
-            Object error = SoulResultWarp.error(SoulResultEnum.SIGN_IS_NOT_PASS.getCode(), result.getRight(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.SIGN_IS_NOT_PASS.getCode(), result.getRight(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return chain.execute(exchange);

File: soul-plugin/soul-plugin-springcloud/src/main/java/org/dromara/soul/plugin/springcloud/SpringCloudPlugin.java
Patch:
@@ -27,7 +27,7 @@
 import org.dromara.soul.common.enums.RpcTypeEnum;
 import org.dromara.soul.common.utils.GsonUtils;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
 import org.dromara.soul.plugin.api.context.SoulContext;
@@ -69,13 +69,13 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         final SpringCloudRuleHandle ruleHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SpringCloudRuleHandle.class);
         final String serviceId = selector.getHandle();
         if (StringUtils.isBlank(serviceId) || StringUtils.isBlank(ruleHandle.getPath())) {
-            Object error = SoulResultWarp.error(SoulResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getCode(), SoulResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getCode(), SoulResultEnum.CANNOT_CONFIG_SPRINGCLOUD_SERVICEID.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
 
         final ServiceInstance serviceInstance = loadBalancer.choose(serviceId);
         if (Objects.isNull(serviceInstance)) {
-            Object error = SoulResultWarp.error(SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getCode(), SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getMsg(), null);
+            Object error = SoulResultWrap.error(SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getCode(), SoulResultEnum.SPRINGCLOUD_SERVICEID_IS_ERROR.getMsg(), null);
             return WebFluxResultUtils.result(exchange, error);
         }
         final URI uri = loadBalancer.reconstructURI(serviceInstance, URI.create(soulContext.getRealUrl()));

File: soul-plugin/soul-plugin-waf/src/main/java/org/dromara/soul/plugin/waf/WafPlugin.java
Patch:
@@ -29,7 +29,7 @@
 import org.dromara.soul.common.enums.WafModelEnum;
 import org.dromara.soul.common.utils.GsonUtils;
 import org.dromara.soul.plugin.base.utils.Singleton;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.api.SoulPluginChain;
 import org.dromara.soul.plugin.base.AbstractSoulPlugin;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
@@ -56,7 +56,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
                 return chain.execute(exchange);
             } else {
                 exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
-                Object error = SoulResultWarp.error(403, Constants.REJECT_MSG, null);
+                Object error = SoulResultWrap.error(403, Constants.REJECT_MSG, null);
                 return WebFluxResultUtils.result(exchange, error);
             }
         }
@@ -68,7 +68,7 @@ protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPlugi
         }
         if (WafEnum.REJECT.getName().equals(wafHandle.getPermission())) {
             exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
-            Object error = SoulResultWarp.error(Integer.parseInt(wafHandle.getStatusCode()), Constants.REJECT_MSG, null);
+            Object error = SoulResultWrap.error(Integer.parseInt(wafHandle.getStatusCode()), Constants.REJECT_MSG, null);
             return WebFluxResultUtils.result(exchange, error);
         }
         return chain.execute(exchange);

File: soul-web/src/main/java/org/dromara/soul/web/filter/FileSizeFilter.java
Patch:
@@ -20,7 +20,7 @@
 package org.dromara.soul.web.filter;
 
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.dromara.soul.web.filter.support.BodyInserterContext;
 import org.dromara.soul.web.filter.support.CachedBodyOutputMessage;
@@ -77,7 +77,7 @@ public Mono<Void> filter(@NonNull final ServerWebExchange exchange, @NonNull fin
                         if (size.capacity() > BYTES_PER_MB * maxSize) {
                             ServerHttpResponse response = exchange.getResponse();
                             response.setStatusCode(HttpStatus.BAD_REQUEST);
-                            Object error = SoulResultWarp.error(SoulResultEnum.PAYLOAD_TOO_LARGE.getCode(), SoulResultEnum.PAYLOAD_TOO_LARGE.getMsg(), null);
+                            Object error = SoulResultWrap.error(SoulResultEnum.PAYLOAD_TOO_LARGE.getCode(), SoulResultEnum.PAYLOAD_TOO_LARGE.getMsg(), null);
                             return WebFluxResultUtils.result(exchange, error);
                         }
                         BodyInserter<Mono<DataBuffer>, ReactiveHttpOutputMessage> bodyInsert = BodyInserters.fromPublisher(Mono.just(size), DataBuffer.class);

File: soul-web/src/main/java/org/dromara/soul/web/filter/TimeWebFilter.java
Patch:
@@ -19,7 +19,7 @@
 package org.dromara.soul.web.filter;
 
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.dromara.soul.web.config.SoulConfig;
 import org.springframework.http.HttpStatus;
@@ -58,7 +58,7 @@ protected Mono<Boolean> doFilter(final ServerWebExchange exchange, final WebFilt
     protected Mono<Void> doDenyResponse(final ServerWebExchange exchange) {
         ServerHttpResponse response = exchange.getResponse();
         response.setStatusCode(HttpStatus.REQUEST_TIMEOUT);
-        Object error = SoulResultWarp.error(SoulResultEnum.TIME_ERROR.getCode(), SoulResultEnum.TIME_ERROR.getMsg(), null);
+        Object error = SoulResultWrap.error(SoulResultEnum.TIME_ERROR.getCode(), SoulResultEnum.TIME_ERROR.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
 }

File: soul-web/src/main/java/org/dromara/soul/web/filter/WebSocketParamFilter.java
Patch:
@@ -22,7 +22,7 @@
 import org.dromara.soul.common.constant.Constants;
 import org.dromara.soul.common.enums.RpcTypeEnum;
 import org.dromara.soul.plugin.api.result.SoulResultEnum;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.dromara.soul.plugin.base.utils.WebFluxResultUtils;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
@@ -55,7 +55,7 @@ protected Mono<Boolean> doFilter(final ServerWebExchange exchange, final WebFilt
     protected Mono<Void> doDenyResponse(final ServerWebExchange exchange) {
         ServerHttpResponse response = exchange.getResponse();
         response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
-        Object error = SoulResultWarp.error(SoulResultEnum.PARAM_ERROR.getCode(), SoulResultEnum.PARAM_ERROR.getMsg(), null);
+        Object error = SoulResultWrap.error(SoulResultEnum.PARAM_ERROR.getCode(), SoulResultEnum.PARAM_ERROR.getMsg(), null);
         return WebFluxResultUtils.result(exchange, error);
     }
     

File: soul-web/src/main/java/org/dromara/soul/web/handler/GlobalErrorHandler.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.Map;
 import org.dromara.soul.common.utils.GsonUtils;
-import org.dromara.soul.plugin.base.utils.SoulResultWarp;
+import org.dromara.soul.plugin.base.utils.SoulResultWrap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.autoconfigure.web.ErrorProperties;
@@ -77,7 +77,7 @@ protected int getHttpStatus(final Map<String, Object> errorAttributes) {
     
     private Map<String, Object> response(final ServerRequest request) {
         Throwable ex = getError(request);
-        Object error = SoulResultWarp.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(), ex.getMessage());
+        Object error = SoulResultWrap.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(), ex.getMessage());
         return GsonUtils.getInstance().toObjectMap(GsonUtils.getInstance().toJson(error));
     }
     

File: soul-web/src/main/java/org/dromara/soul/web/filter/TimeWebFilter.java
Patch:
@@ -32,6 +32,7 @@
  * this is visit time verify filter.
  *
  * @author xiaoyu(Myth)
+ * @deprecated do not use
  */
 @Deprecated
 public class TimeWebFilter extends AbstractWebFilter {

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/AbstractDataChangedListener.java
Patch:
@@ -139,7 +139,6 @@ public void onMetaDataChanged(final List<MetaData> changed, final DataEventTypeE
         this.afterMetaDataChanged(changed, eventType);
     }
     
-    
     /**
      * After meta data changed.
      *

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/ConfigDataCache.java
Patch:
@@ -89,7 +89,6 @@ public long getLastModifyTime() {
         return lastModifyTime;
     }
 
-
     /**
      * Gets json.
      *

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/DataChangedListener.java
Patch:
@@ -44,7 +44,6 @@ public interface DataChangedListener {
     default void onAppAuthChanged(List<AppAuthData> changed, DataEventTypeEnum eventType) {
     }
 
-
     /**
      * invoke this method when Plugin was received.
      *
@@ -54,7 +53,6 @@ default void onAppAuthChanged(List<AppAuthData> changed, DataEventTypeEnum event
     default void onPluginChanged(List<PluginData> changed, DataEventTypeEnum eventType) {
     }
 
-
     /**
      * invoke this method when Selector was received.
      *
@@ -74,7 +72,6 @@ default void onMetaDataChanged(List<MetaData> changed, DataEventTypeEnum eventTy
 
     }
 
-
     /**
      * invoke this method when Rule was received.
      *

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/http/HttpLongPollingDataChangedListener.java
Patch:
@@ -88,7 +88,6 @@ public class HttpLongPollingDataChangedListener extends AbstractDataChangedListe
 
     private final HttpSyncProperties httpSyncProperties;
 
-
     /**
      * Instantiates a new Http long polling data changed listener.
      * @param httpSyncProperties the HttpSyncProperties
@@ -269,7 +268,6 @@ private void generateResponse(final HttpServletResponse response, final List<Con
         }
     }
 
-
     /**
      * get real client ip.
      *
@@ -285,7 +283,6 @@ private static String getRemoteIp(final HttpServletRequest request) {
         return StringUtils.isBlank(header) ? request.getRemoteAddr() : header;
     }
 
-
     /**
      * When a group's data changes, the thread is created to notify the client asynchronously.
      */

File: soul-admin/src/main/java/org/dromara/soul/admin/result/SoulAdminResult.java
Patch:
@@ -123,7 +123,6 @@ public static SoulAdminResult error(final int code, final String msg) {
         return get(code, msg, null);
     }
 
-
     /**
      * return timeout .
      *

File: soul-common/src/main/java/org/dromara/soul/common/constant/AdminConstants.java
Patch:
@@ -45,7 +45,6 @@ public final class AdminConstants {
      */
     public static final String SYS_PLUGIN_NOT_DELETE = "系统插件不能删除!";
 
-
     /**
      * The constant SYS_PLUGIN_ID_NOT_EXIST.
      */
@@ -56,7 +55,6 @@ public final class AdminConstants {
      */
     public static final String DATA_PATH_IS_EXIST = "路径已经存在，不能重复添加!";
 
-
     /**
      * The constant PARAMS_ERROR.
      */

File: soul-common/src/main/java/org/dromara/soul/common/constant/ZkPathConstants.java
Patch:
@@ -64,7 +64,6 @@ public static String buildAppAuthPath(final String appKey) {
         return String.join("/", APP_AUTH_PARENT, appKey);
     }
 
-
     /**
      * Build meta data path string.
      *
@@ -75,7 +74,6 @@ public static String buildMetaDataPath(final String path) {
         return META_DATA + "/" + path;
     }
 
-
     /**
      * buildPluginParentPath.
      *

File: soul-common/src/main/java/org/dromara/soul/common/enums/RpcTypeEnum.java
Patch:
@@ -70,7 +70,6 @@ public enum RpcTypeEnum {
 
     private final Boolean support;
 
-
     /**
      * acquire operator supports.
      *

File: soul-common/src/main/java/org/dromara/soul/common/enums/SerializeEnum.java
Patch:
@@ -69,7 +69,6 @@ public String getSerialize() {
         return serialize;
     }
 
-
     /**
      * Acquire serialize protocol serialize protocol enum.
      *

File: soul-common/src/main/java/org/dromara/soul/common/utils/GsonUtils.java
Patch:
@@ -139,7 +139,6 @@ public <T> T fromJson(final JsonElement jsonElement, final Class<T> tClass) {
         return GSON.fromJson(jsonElement, tClass);
     }
     
-    
     /**
      * From list list.
      *
@@ -152,7 +151,6 @@ public <T> List<T> fromList(final String json, final Class<T> clazz) {
         return GSON.fromJson(json, TypeToken.getParameterized(List.class, clazz).getType());
     }
     
-    
     /**
      * toGetParam.
      *

File: soul-common/src/main/java/org/dromara/soul/common/utils/LogUtils.java
Patch:
@@ -43,7 +43,6 @@ public static LogUtils getInstance() {
         return LOG_UTIL;
     }
 
-
     /**
      * debug log.
      * @param logger   logger

File: soul-common/src/main/java/org/dromara/soul/common/utils/ReflectUtils.java
Patch:
@@ -63,7 +63,6 @@ public static Object getFieldValue(final Object obj, final String fieldName) {
         return getFieldValue(obj, getField(obj.getClass(), fieldName));
     }
 
-
     /**
      * Gets field value.
      *

File: soul-common/src/main/java/org/dromara/soul/common/utils/ThreadUtils.java
Patch:
@@ -25,7 +25,6 @@
  */
 public class ThreadUtils {
 
-
     /**
      * sleep current thread.
      *

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/impl/collector/BuildInfoCollector.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-
 /**
  * The type Build info collector.
  *

File: soul-metrics/soul-metrics-prometheus/src/main/java/org/dromara/soul/metrics/prometheus/impl/histogram/RequestLatencyHistogramMetricsTracker.java
Patch:
@@ -22,7 +22,6 @@
 import org.dromara.soul.metrics.api.HistogramMetricsTrackerDelegate;
 import org.dromara.soul.metrics.enums.MetricsLabelEnum;
 
-
 /**
  * Request latency histogram metrics tracker.
  */

File: soul-metrics/soul-metrics-prometheus/src/test/java/org/dromara/soul/metrics/prometheus/JmxCollectorTest.java
Patch:
@@ -34,7 +34,7 @@ public class JmxCollectorTest {
      */
     @Test
     public void testJmxCollector() throws MalformedObjectNameException {
-        JmxCollector jc = new JmxCollector(("{}").replace('`', '"'));
+        JmxCollector jc = new JmxCollector("{}".replace('`', '"'));
         for (Collector.MetricFamilySamples mfs : jc.collect()) {
             System.out.println(mfs);
         }

File: soul-plugin/soul-plugin-api/src/main/java/org/dromara/soul/plugin/api/result/DefaultSoulEntity.java
Patch:
@@ -81,7 +81,6 @@ public static DefaultSoulEntity success(final String msg) {
         return success(msg, null);
     }
 
-
     /**
      * return success.
      *
@@ -103,7 +102,6 @@ public static DefaultSoulEntity success(final String msg, final Object data) {
         return get(SUCCESSFUL, msg, data);
     }
 
-
     /**
      * Success soul web result.
      *
@@ -149,7 +147,6 @@ public static DefaultSoulEntity error(final int code, final String msg, final Ob
         return get(code, msg, data);
     }
 
-
     /**
      * return timeout .
      *

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/utils/Singleton.java
Patch:
@@ -37,7 +37,6 @@ public enum Singleton {
      */
     private static final Map<String, Object> SINGLES = new ConcurrentHashMap<>();
 
-
     /**
      * Single.
      *

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/utils/UriUtils.java
Patch:
@@ -9,7 +9,6 @@
  */
 public class UriUtils {
 
-
     /**
      * create URI {@link URI}.
      * @param uri uri string eg:/fallback

File: soul-plugin/soul-plugin-global/src/main/java/org/dromara/soul/plugin/global/cache/MetaDataCache.java
Patch:
@@ -59,7 +59,6 @@ public void cache(final MetaData data) {
         META_DATA_MAP.put(data.getPath(), data);
     }
     
-    
     /**
      * Remove auth data.
      *
@@ -69,7 +68,6 @@ public void remove(final MetaData data) {
         META_DATA_MAP.remove(data.getPath());
     }
     
-    
     /**
      * Obtain auth data meta data.
      *

File: soul-plugin/soul-plugin-ratelimiter/src/main/java/org/dromara/soul/plugin/ratelimiter/config/RateLimiterConfig.java
Patch:
@@ -44,7 +44,6 @@ public class RateLimiterConfig implements Serializable {
      */
     private String url;
 
-
     /**
      * the password.
      */

File: soul-sync-data-center/soul-sync-data-api/src/main/java/org/dromara/soul/sync/data/api/PluginDataSubscriber.java
Patch:
@@ -57,7 +57,6 @@ default void refreshPluginDataAll() {
     default void refreshPluginDataSelf(List<PluginData> pluginDataList) {
     }
     
-    
     /**
      * On selector subscribe.
      *

File: soul-sync-data-center/soul-sync-data-zookeeper/src/test/java/org/dromara/soul/sync/data/zookeeper/ZookeeperClientTest.java
Patch:
@@ -288,7 +288,6 @@ private static RateLimiterHandle buildRateLimiterHandle() {
         return rateLimiterHandle;
     }
     
-    
     private static WafHandle buildWafHandle() {
         WafHandle wafHandle = new WafHandle();
         wafHandle.setPermission(WafEnum.ALLOW.getName());
@@ -377,7 +376,7 @@ public void handleDataChange(final String dataPath, final Object data) {
                 }
                 
                 @Override
-                public void handleDataDeleted(String dataPath) {
+                public void handleDataDeleted(final String dataPath) {
                 
                 }
             });
@@ -406,7 +405,7 @@ public void testUpdatePlugin() {
         zkClient.writeData(global, globalDTO);
     }
     
-    private PluginData buildByName(String name) {
+    private PluginData buildByName(final String name) {
         PluginData pluginData = new PluginData();
         pluginData.setEnabled(true);
         pluginData.setId("1");

File: soul-web/src/main/java/org/dromara/soul/web/configuration/SoulConfiguration.java
Patch:
@@ -141,7 +141,7 @@ public RemoteAddressResolver remoteAddressResolver() {
      */
     @Bean
     @Order(-100)
-    @ConditionalOnProperty(name = "soul.cross.enabled", havingValue ="true" )
+    @ConditionalOnProperty(name = "soul.cross.enabled", havingValue = "true")
     public WebFilter crossFilter() {
         return new CrossFilter();
     }
@@ -153,7 +153,7 @@ public WebFilter crossFilter() {
      */
     @Bean
     @Order(-10)
-    @ConditionalOnProperty(name = "soul.file.enabled", havingValue ="true" )
+    @ConditionalOnProperty(name = "soul.file.enabled", havingValue = "true")
     public WebFilter fileSizeFilter() {
         return new FileSizeFilter();
     }

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/cache/BaseDataCache.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.collect.Maps;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Optional;
 import java.util.concurrent.ConcurrentMap;
 import java.util.stream.Collectors;
 import org.dromara.soul.common.dto.PluginData;
@@ -130,7 +131,7 @@ public void cacheSelectData(final SelectorData data) {
      */
     public void removeSelectData(final SelectorData data) {
         final List<SelectorData> selectorDataList = SELECTOR_MAP.get(data.getPluginName());
-        selectorDataList.removeIf(e -> e.getId().equals(data.getId()));
+        Optional.ofNullable(selectorDataList).ifPresent(list -> list.removeIf(e -> e.getId().equals(data.getId())));
     }
     
     /**
@@ -184,7 +185,7 @@ public void cacheRuleData(final RuleData ruleData) {
      */
     public void removeRuleData(final RuleData ruleData) {
         final List<RuleData> ruleDataList = RULE_MAP.get(ruleData.getSelectorId());
-        ruleDataList.removeIf(rule -> rule.getId().equals(ruleData.getId()));
+        Optional.ofNullable(ruleDataList).ifPresent(list -> list.removeIf(rule -> rule.getId().equals(ruleData.getId())));
     }
     
     /**

File: soul-plugin/soul-plugin-base/src/main/java/org/dromara/soul/plugin/base/cache/BaseDataCache.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.collect.Maps;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Optional;
 import java.util.concurrent.ConcurrentMap;
 import java.util.stream.Collectors;
 import org.dromara.soul.common.dto.PluginData;
@@ -130,7 +131,7 @@ public void cacheSelectData(final SelectorData data) {
      */
     public void removeSelectData(final SelectorData data) {
         final List<SelectorData> selectorDataList = SELECTOR_MAP.get(data.getPluginName());
-        selectorDataList.removeIf(e -> e.getId().equals(data.getId()));
+        Optional.ofNullable(selectorDataList).ifPresent(list -> list.removeIf(e -> e.getId().equals(data.getId())));
     }
     
     /**
@@ -184,7 +185,7 @@ public void cacheRuleData(final RuleData ruleData) {
      */
     public void removeRuleData(final RuleData ruleData) {
         final List<RuleData> ruleDataList = RULE_MAP.get(ruleData.getSelectorId());
-        ruleDataList.removeIf(rule -> rule.getId().equals(ruleData.getId()));
+        Optional.ofNullable(ruleDataList).ifPresent(list -> list.removeIf(rule -> rule.getId().equals(ruleData.getId())));
     }
     
     /**

File: soul-admin/src/main/java/org/dromara/soul/admin/config/DataSyncConfiguration.java
Patch:
@@ -103,6 +103,7 @@ public DataChangedListener nacosDataChangedListener(final ConfigService configSe
      */
     @Configuration
     @ConditionalOnProperty(name = "soul.sync.websocket.enabled", havingValue = "true", matchIfMissing = true)
+    @EnableConfigurationProperties(WebsocketSyncProperties.class)
     static class WebsocketListener {
     
         /**

File: soul-admin/src/main/java/org/dromara/soul/admin/config/ZookeeperProperties.java
Patch:
@@ -28,7 +28,7 @@
  */
 @Data
 @ConfigurationProperties(prefix = "soul.sync.zookeeper")
-public class ZookeeperConfig {
+public class ZookeeperProperties {
 
     private String url;
 

File: soul-admin/src/main/java/org/dromara/soul/admin/controller/ConfigController.java
Patch:
@@ -58,9 +58,9 @@ public class ConfigController {
      */
     @GetMapping("/fetch")
     public SoulAdminResult fetchConfigs(@NotNull final String[] groupKeys) {
-        Map<String, ConfigData> result = Maps.newConcurrentMap();
+        Map<String, ConfigData<?>> result = Maps.newHashMap();
         for (String groupKey : groupKeys) {
-            ConfigData data = longPollingListener.fetchConfig(ConfigGroupEnum.valueOf(groupKey));
+            ConfigData<?> data = longPollingListener.fetchConfig(ConfigGroupEnum.valueOf(groupKey));
             result.put(groupKey, data);
         }
         return SoulAdminResult.success("success", result);

File: soul-sync-data-center/soul-sync-data-http/src/main/java/org/dromara/soul/sync/data/http/handler/HttpSyncDataHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.dromara.soul.sync.data.http.handler;
 
-import java.util.List;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections4.CollectionUtils;
 import org.dromara.soul.common.dto.AppAuthData;
@@ -29,6 +28,8 @@
 import org.dromara.soul.sync.data.api.MetaDataSubscriber;
 import org.dromara.soul.sync.data.api.PluginDataSubscriber;
 
+import java.util.List;
+
 /**
  * The type Http cache handler.
  *
@@ -125,7 +126,7 @@ public void flushAllAppAuth(final List<AppAuthData> appAuthDataList) {
      */
     public void flushMetaData(final List<MetaData> metaDataList) {
         if (CollectionUtils.isEmpty(metaDataList)) {
-            log.info("clear all metaData cache}");
+            log.info("clear all metaData cache");
             metaDataSubscribers.forEach(MetaDataSubscriber::refresh);
         } else {
             metaDataList.forEach(metaData -> metaDataSubscribers.forEach(subscriber -> subscriber.onSubscribe(metaData)));

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/weboscket/handler/AbstractDataHandler.java
Patch:
@@ -41,21 +41,21 @@ public abstract class AbstractDataHandler<T> implements DataHandler {
      *
      * @param dataList the data list
      */
-    protected abstract void doRefresh(final List<T> dataList);
+    protected abstract void doRefresh(List<T> dataList);
     
     /**
      * Do update.
      *
      * @param dataList the data list
      */
-    protected abstract void doUpdate(final List<T> dataList);
+    protected abstract void doUpdate(List<T> dataList);
     
     /**
      * Do delete.
      *
      * @param dataList the data list
      */
-    protected abstract void doDelete(final List<T> dataList);
+    protected abstract void doDelete(List<T> dataList);
     
     @Override
     public void handle(final String json, final String eventType) {

File: soul-sync-data-center/soul-sync-data-websocket/src/main/java/org/dromara/soul/plugin/sync/data/weboscket/handler/DataHandler.java
Patch:
@@ -29,5 +29,5 @@ public interface DataHandler {
      * @param json  the data for json
      * @param eventType the event type
      */
-    void handle(String json, final String eventType);
+    void handle(String json, String eventType);
 }

File: soul-common/src/main/java/org/dromara/soul/common/utils/SpiLoadFactory.java
Patch:
@@ -54,6 +54,6 @@ public static <S> S loadFirst(final Class<S> clazz) {
      * @return the service loader
      */
     public static <S> ServiceLoader<S> loadAll(final Class<S> clazz) {
-         return ServiceLoader.load(clazz);
+        return ServiceLoader.load(clazz);
     }
 }

File: soul-spi/src/main/java/org/dromara/soul/spi/ExtensionFactory.java
Patch:
@@ -23,6 +23,7 @@
  */
 @SPI("spi")
 public interface ExtensionFactory {
+    
     /**
      * Gets Extension.
      *

File: soul-spi/src/main/java/org/dromara/soul/spi/SpiExtensionFactory.java
Patch:
@@ -26,6 +26,7 @@
  */
 @Join
 public class SpiExtensionFactory implements ExtensionFactory {
+    
     @Override
     public <T> T getExtension(final String key, final Class<T> clazz) {
         if (clazz.isInterface() && clazz.isAnnotationPresent(SPI.class)) {

File: soul-admin/src/main/java/org/dromara/soul/admin/service/sync/SyncDataServiceImpl.java
Patch:
@@ -116,7 +116,7 @@ public boolean syncPluginData(final String pluginId) {
             eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.SELECTOR, DataEventTypeEnum.REFRESH, selectorDataList));
             for (SelectorData selectData : selectorDataList) {
                 List<RuleData> ruleDataList = ruleService.findBySelectorId(selectData.getId());
-                eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.RULE, DataEventTypeEnum.REFRESH, ruleDataList));
+                eventPublisher.publishEvent(new DataChangedEvent(ConfigGroupEnum.RULE, DataEventTypeEnum.UPDATE, ruleDataList));
             }
         }
         return true;

File: soul-plugin/soul-plugin-rewrite/src/main/java/org/dromara/soul/plugin/rewrite/RewritePlugin.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Objects;
 
 /**
- * rewrite url.
+ * Rewrite Plugin.
  *
  * @author xiaoyu(Myth)
  */

File: soul-spring-boot-starter/soul-spring-boot-starter-plugin/soul-spring-boot-starter-plugin-rewrite/src/main/java/org/dromara/soul/springboot/starter/plugin/rewrite/RewritePluginConfiguration.java
Patch:
@@ -31,12 +31,12 @@
 public class RewritePluginConfiguration {
     
     /**
-     * Sign plugin soul plugin.
+     * Rewrite plugin.
      *
      * @return the soul plugin
      */
     @Bean
-    public SoulPlugin signPlugin() {
+    public SoulPlugin rewritePlugin() {
         return new RewritePlugin();
     }
 }

File: soul-common/src/main/java/org/dromara/soul/common/utils/JsonUtils.java
Patch:
@@ -85,7 +85,7 @@ public static String toJson(final Object object) {
             return mapper.writeValueAsString(object);
         } catch (IOException e) {
             logger.warn("write to json string error:" + object, e);
-            return null;
+            return "{}";
         }
     }
 

File: soul-web/src/main/java/org/dromara/soul/web/configuration/HttpClientConfiguration.java
Patch:
@@ -94,6 +94,7 @@ public HttpClient httpClient(final HttpClientProperties properties) {
                                     .to(builder::nonProxyHosts);
                         });
                     }
+                    tcpClient = tcpClient.option(ChannelOption.SO_TIMEOUT, 5000);
                     return tcpClient;
                 });
 

File: soul-web/src/main/java/org/dromara/soul/web/filter/FileSizeFilter.java
Patch:
@@ -53,14 +53,15 @@
  */
 public class FileSizeFilter implements WebFilter {
 
-    private static final long BYTES_PER_MB = 1024 * 1024;
+    private static final int BYTES_PER_MB = 1024 * 1024;
 
     @Value("${file.size:10}")
     private int maxSize;
 
     private final List<HttpMessageReader<?>> messageReaders;
 
     public FileSizeFilter() {
+        HandlerStrategies.builder().codecs(configurer -> configurer.defaultCodecs().maxInMemorySize(maxSize * BYTES_PER_MB));
         this.messageReaders = HandlerStrategies.withDefaults().messageReaders();
     }
 

File: soul-web/src/main/java/org/dromara/soul/web/handler/GlobalErrorHandler.java
Patch:
@@ -72,8 +72,8 @@ protected RouterFunction<ServerResponse> getRoutingFunction(final ErrorAttribute
     }
 
     @Override
-    protected HttpStatus getHttpStatus(final Map<String, Object> errorAttributes) {
-        return HttpStatus.INTERNAL_SERVER_ERROR;
+    protected int getHttpStatus(final Map<String, Object> errorAttributes) {
+        return HttpStatus.INTERNAL_SERVER_ERROR.value();
     }
 
     private static Map<String, Object> response() {

File: soul-web/src/main/java/org/dromara/soul/web/plugin/http/NettyHttpClientPlugin.java
Patch:
@@ -93,8 +93,7 @@ public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChai
         LOGGER.info("you request,The resulting urlPath is :{}", url);
         Flux<HttpClientResponse> responseFlux = this.httpClient.headers(headers -> headers.add(httpHeaders))
                 .request(method).uri(url).send((req, nettyOutbound) ->
-                        nettyOutbound.options(NettyPipeline.SendOptions::flushOnEach).send(
-                                request.getBody().map(dataBuffer -> ((NettyDataBuffer) dataBuffer).getNativeBuffer())))
+                        nettyOutbound.send( request.getBody().map(dataBuffer -> ((NettyDataBuffer) dataBuffer) .getNativeBuffer())))
                 .responseConnection((res, connection) -> {
                     exchange.getAttributes().put(Constants.CLIENT_RESPONSE_ATTR, res);
                     exchange.getAttributes().put(Constants.CLIENT_RESPONSE_CONN_ATTR, connection);

File: soul-web/src/main/java/org/dromara/soul/web/cache/AbstractLocalCacheManager.java
Patch:
@@ -148,7 +148,7 @@ public static MetaData findByUri(final String uri) {
      */
     void initDubboRef(final List<MetaData> metaDataList) {
         for (MetaData metaData : metaDataList) {
-            updateRubboRef(metaData);
+            updateDubboRef(metaData);
         }
     }
     /**
@@ -158,11 +158,11 @@ void initDubboRef(final List<MetaData> metaDataList) {
      */
     void initDubboRef(final MetaData...metaDataList) {
         for (MetaData metaData : metaDataList) {
-            updateRubboRef(metaData);
+            updateDubboRef(metaData);
         }
     }
     
-    void updateRubboRef(MetaData metaData) {
+    void updateDubboRef(MetaData metaData) {
     	if (RpcTypeEnum.DUBBO.getName().equals(metaData.getRpcType())) {
             MetaData exist = META_DATA.get(metaData.getPath());
             if (Objects.isNull(exist)

File: soul-web/src/main/java/org/dromara/soul/web/cache/AbstractLocalCacheManager.java
Patch:
@@ -148,7 +148,7 @@ public static MetaData findByUri(final String uri) {
      */
     void initDubboRef(final List<MetaData> metaDataList) {
         for (MetaData metaData : metaDataList) {
-            updateRubboRef(metaData);
+            updateDubboRef(metaData);
         }
     }
     /**
@@ -158,11 +158,11 @@ void initDubboRef(final List<MetaData> metaDataList) {
      */
     void initDubboRef(final MetaData...metaDataList) {
         for (MetaData metaData : metaDataList) {
-            updateRubboRef(metaData);
+            updateDubboRef(metaData);
         }
     }
     
-    void updateRubboRef(MetaData metaData) {
+    void updateDubboRef(MetaData metaData) {
     	if (RpcTypeEnum.DUBBO.getName().equals(metaData.getRpcType())) {
             MetaData exist = META_DATA.get(metaData.getPath());
             if (Objects.isNull(exist)

File: soul-web/src/main/java/org/dromara/soul/web/configuration/DubboConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.dromara.soul.web.plugin.dubbo.DubboProxyService;
 import org.dromara.soul.web.plugin.dubbo.GenericParamResolveService;
 import org.dromara.soul.web.plugin.function.DubboPlugin;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.SearchStrategy;
@@ -69,8 +70,8 @@ public GenericParamResolveService genericParamResolveService() {
      * @return {@linkplain DubboPlugin}
      */
     @Bean
-    public SoulPlugin dubboPlugin(@Qualifier("localCacheManager") final LocalCacheManager localCacheManager) {
-        return new DubboPlugin(localCacheManager, new DubboProxyService(genericParamResolveService()));
+    public SoulPlugin dubboPlugin(@Qualifier("localCacheManager") final LocalCacheManager localCacheManager, @Autowired final GenericParamResolveService genericParamResolveService) {
+        return new DubboPlugin(localCacheManager, new DubboProxyService(genericParamResolveService));
     }
 
     /**

File: soul-web/src/main/java/org/dromara/soul/web/configuration/DubboConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.dromara.soul.web.plugin.dubbo.DubboProxyService;
 import org.dromara.soul.web.plugin.dubbo.GenericParamResolveService;
 import org.dromara.soul.web.plugin.function.DubboPlugin;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.SearchStrategy;
@@ -69,8 +70,8 @@ public GenericParamResolveService genericParamResolveService() {
      * @return {@linkplain DubboPlugin}
      */
     @Bean
-    public SoulPlugin dubboPlugin(@Qualifier("localCacheManager") final LocalCacheManager localCacheManager) {
-        return new DubboPlugin(localCacheManager, new DubboProxyService(genericParamResolveService()));
+    public SoulPlugin dubboPlugin(@Qualifier("localCacheManager") final LocalCacheManager localCacheManager, @Autowired final GenericParamResolveService genericParamResolveService) {
+        return new DubboPlugin(localCacheManager, new DubboProxyService(genericParamResolveService));
     }
 
     /**

File: soul-web/src/main/java/org/dromara/soul/web/plugin/montior/MonitorPlugin.java
Patch:
@@ -93,7 +93,7 @@ private MonitorDO buildMonitorData(final ServerWebExchange exchange) {
                 .method(requestDTO.getMethod())
                 .ip(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress())
                 .host(exchange.getRequest().getRemoteAddress().getHostString())
-                .elapsedTime(Duration.between(LocalDateTime.now(), requestDTO.getStartDateTime()).toMillis())
+                .elapsedTime(Duration.between(requestDTO.getStartDateTime(), LocalDateTime.now()).toMillis())
                 .build();
     }
 

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/MetaDataServiceImpl.java
Patch:
@@ -52,7 +52,6 @@
 import org.dromara.soul.common.dto.convert.rule.DubboRuleHandle;
 import org.dromara.soul.common.dto.convert.rule.SpringCloudRuleHandle;
 import org.dromara.soul.common.dto.convert.selector.DubboSelectorHandle;
-import org.dromara.soul.common.dto.convert.selector.SpringCloudSelectorHandle;
 import org.dromara.soul.common.enums.ConfigGroupEnum;
 import org.dromara.soul.common.enums.DataEventTypeEnum;
 import org.dromara.soul.common.enums.LoadBalanceEnum;

File: soul-web/src/main/java/org/dromara/soul/web/condition/judge/MatchOperatorJudge.java
Patch:
@@ -34,7 +34,7 @@ public class MatchOperatorJudge implements OperatorJudge {
     @Override
     public Boolean judge(final ConditionData conditionData, final String realData) {
         if (Objects.equals(ParamTypeEnum.URI.getName(), conditionData.getParamType())) {
-            return PathMatchUtils.match(realData, conditionData.getParamValue().trim());
+            return PathMatchUtils.match(conditionData.getParamValue().trim(), realData);
         }
         return realData.contains(conditionData.getParamValue().trim());
     }

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/zookeeper/HttpServiceDiscovery.java
Patch:
@@ -188,7 +188,7 @@ private void updateSelectorHandler(final String contextPath, final List<String>
     private List<DivideUpstream> buildDivideUpstream(final List<String> uriList) {
         return uriList.stream().map(uri -> {
             DivideUpstream divideUpstream = new DivideUpstream();
-            divideUpstream.setUpstreamHost("localohost");
+            divideUpstream.setUpstreamHost("localhost");
             divideUpstream.setProtocol("http://");
             divideUpstream.setUpstreamUrl(uri);
             divideUpstream.setWeight(50);

File: soul-admin/src/main/java/org/dromara/soul/admin/listener/zookeeper/HttpServiceDiscovery.java
Patch:
@@ -188,7 +188,7 @@ private void updateSelectorHandler(final String contextPath, final List<String>
     private List<DivideUpstream> buildDivideUpstream(final List<String> uriList) {
         return uriList.stream().map(uri -> {
             DivideUpstream divideUpstream = new DivideUpstream();
-            divideUpstream.setUpstreamHost("localohost");
+            divideUpstream.setUpstreamHost("localhost");
             divideUpstream.setProtocol("http://");
             divideUpstream.setUpstreamUrl(uri);
             divideUpstream.setWeight(50);

File: soul-web/src/main/java/org/dromara/soul/web/condition/judge/MatchOperatorJudge.java
Patch:
@@ -34,7 +34,7 @@ public class MatchOperatorJudge implements OperatorJudge {
     @Override
     public Boolean judge(final ConditionData conditionData, final String realData) {
         if (Objects.equals(ParamTypeEnum.URI.getName(), conditionData.getParamType())) {
-            return PathMatchUtils.match(conditionData.getParamValue().trim(), realData);
+            return PathMatchUtils.match(realData, conditionData.getParamValue().trim());
         }
         return realData.contains(conditionData.getParamValue().trim());
     }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/impl/MetaDataServiceImpl.java
Patch:
@@ -258,10 +258,8 @@ private void createSelectorAndRule(final MetaDataDTO metaDataDTO) {
                 dubboSelectorHandle.setRegistry("zookeeper://localhost:2181");
                 selectorDTO.setHandle(JsonUtils.toJson(dubboSelectorHandle));
             } else if (RpcTypeEnum.SPRING_CLOUD.getName().equals(metaDataDTO.getRpcType())) {
-                SpringCloudSelectorHandle cloudSelectorHandle = new SpringCloudSelectorHandle();
-                cloudSelectorHandle.setServiceId(metaDataDTO.getAppName());
                 selectorDTO.setPluginId("8");
-                selectorDTO.setHandle(JsonUtils.toJson(cloudSelectorHandle));
+                selectorDTO.setHandle(metaDataDTO.getAppName());
             } else {
                 //is springCloud
                 selectorDTO.setPluginId("5");

File: soul-test/soul-test-http/src/main/java/org/dromara/soul/test/http/controller/HttpTestController.java
Patch:
@@ -46,7 +46,7 @@ public class HttpTestController {
      * @return the user dto
      */
     @PostMapping("/payment")
-    public UserDTO post(final UserDTO userDTO) {
+    public UserDTO post(@RequestBody final UserDTO userDTO) {
         return userDTO;
     }
 

File: soul-web/src/main/java/org/dromara/soul/web/cache/UpstreamCacheManager.java
Patch:
@@ -25,6 +25,7 @@
 import org.dromara.soul.common.dto.SelectorData;
 import org.dromara.soul.common.dto.convert.DivideUpstream;
 import org.dromara.soul.common.utils.GsonUtils;
+import org.dromara.soul.common.utils.LogUtils;
 import org.dromara.soul.common.utils.UrlUtils;
 import org.dromara.soul.web.config.SoulConfig;
 import org.slf4j.Logger;
@@ -162,6 +163,8 @@ private List<DivideUpstream> check(final List<DivideUpstream> upstreamList) {
             final boolean pass = UrlUtils.checkUrl(divideUpstream.getUpstreamUrl());
             if (pass) {
                 resultList.add(divideUpstream);
+            }else{
+                LogUtils.error(LOGGER, "check the url={} is fail ", divideUpstream::getUpstreamUrl);
             }
         }
         return resultList;

File: soul-web/src/main/java/org/dromara/soul/web/cache/UpstreamCacheManager.java
Patch:
@@ -25,6 +25,7 @@
 import org.dromara.soul.common.dto.SelectorData;
 import org.dromara.soul.common.dto.convert.DivideUpstream;
 import org.dromara.soul.common.utils.GsonUtils;
+import org.dromara.soul.common.utils.LogUtils;
 import org.dromara.soul.common.utils.UrlUtils;
 import org.dromara.soul.web.config.SoulConfig;
 import org.slf4j.Logger;
@@ -162,6 +163,8 @@ private List<DivideUpstream> check(final List<DivideUpstream> upstreamList) {
             final boolean pass = UrlUtils.checkUrl(divideUpstream.getUpstreamUrl());
             if (pass) {
                 resultList.add(divideUpstream);
+            }else{
+                LogUtils.error(LOGGER, "check the url={} is fail ", divideUpstream::getUpstreamUrl);
             }
         }
         return resultList;

File: soul-web/src/main/java/org/dromara/soul/web/config/SoulConfiguration.java
Patch:
@@ -207,8 +207,8 @@ public WebFilter bodyWebFilter() {
      */
     @Bean
     @Order(1)
-    public WebFilter paramWebFilter(WebEndpointProperties endpointProperties) {
-        return new ParamWebFilter(endpointProperties.getBasePath());
+    public WebFilter paramWebFilter() {
+        return new ParamWebFilter();
     }
 
     /**

File: soul-extend-demo/src/main/java/org/dromara/soul/extend/demo/serializer/CustomSerializerConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 package org.dromara.soul.extend.demo.serializer;
 
 import org.I0Itec.zkclient.serialize.ZkSerializer;
-import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
@@ -35,7 +34,6 @@ public class CustomSerializerConfiguration {
      *
      * @return the zk serializer
      */
-    @Bean
     public ZkSerializer zkSerializer(){
         return new CustomSerializer();
     }

File: soul-web/src/main/java/org/dromara/soul/web/plugin/function/DividePlugin.java
Patch:
@@ -44,7 +44,6 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
-import reactor.core.publisher.MonoSink;
 import rx.Subscription;
 
 import java.util.List;

File: soul-web/src/main/java/org/dromara/soul/web/plugin/after/ResponsePlugin.java
Patch:
@@ -78,9 +78,9 @@ public Mono<Void> execute(final ServerWebExchange exchange, final SoulPluginChai
                 }
             } else {
                 ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR);
-                if (response.getStatusCode() == HttpStatus.BAD_GATEWAY
-                        || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR
-                        || Objects.isNull(clientResponse)) {
+                if (Objects.isNull(clientResponse) ||
+                        response.getStatusCode() == HttpStatus.BAD_GATEWAY
+                        || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) {
                     final String result = JsonUtils.toJson(SoulResult.error(Constants.HTTP_ERROR_RESULT));
                     return response.writeWith(Mono.just(exchange.getResponse()
                             .bufferFactory()

File: soul-web/src/main/java/org/dromara/soul/web/cache/UpstreamCacheManager.java
Patch:
@@ -63,7 +63,7 @@ public class UpstreamCacheManager {
     @Value("${soul.upstream.delayInit:30}")
     private Integer delayInit;
 
-    @Value("${soul.upstream.delayInit:10}")
+    @Value("${soul.upstream.scheduledTime:10}")
     private Integer scheduledTime;
 
     /**

File: soul-configuration/src/main/java/org/dromara/soul/configuration/zookeeper/serializer/KryoSerializer.java
Patch:
@@ -71,6 +71,6 @@ public Object deserialize(final byte[] bytes) throws ZkMarshallingError {
 
     @Override
     public String named() {
-        return SerializeEnum.HESSIAN.getSerialize();
+        return SerializeEnum.KRYO.getSerialize();
     }
 }

File: soul-configuration/src/main/java/org/dromara/soul/configuration/zookeeper/serializer/KryoSerializer.java
Patch:
@@ -71,6 +71,6 @@ public Object deserialize(final byte[] bytes) throws ZkMarshallingError {
 
     @Override
     public String named() {
-        return SerializeEnum.HESSIAN.getSerialize();
+        return SerializeEnum.KRYO.getSerialize();
     }
 }

File: soul-admin/src/main/java/org/dromara/soul/admin/service/PluginService.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * this is plugin service.
  *
- * @author jiangxiaofeng(programgeek @ 163.com)
+ * @author jiangxiaofeng(Nicholas)
  */
 public interface PluginService {
 

File: soul-admin/src/main/java/org/dromara/soul/admin/vo/PluginVO.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * this is plugin view to web front.
  *
- * @author jiangxiaofeng(programgeek @ 163.com)
+ * @author jiangxiaofeng(Nicholas)
  */
 @Data
 @AllArgsConstructor

