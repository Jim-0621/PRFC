File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
Patch:
@@ -196,7 +196,7 @@ private String resolveFontPath(Context context, AttributeSet attrs) {
     }
 
     /**
-     * Will forceably set text on the views then remove ones that didn't have copy.
+     * Will forcibly set text on the views then remove ones that didn't have copy.
      *
      * @param view toolbar view.
      */
@@ -206,8 +206,8 @@ private void applyFontToToolbar(final Toolbar view) {
         // The toolbar inflates both the title and the subtitle views lazily but luckily they do it
         // synchronously when you set a title and a subtitle programmatically.
         // So we set a title and a subtitle to something, then get the views, then revert.
-        view.setTitle(" ");
-        view.setSubtitle(" ");
+        view.setTitle("uk.co.chrisjenx.calligraphy:toolbar_title");
+        view.setSubtitle("uk.co.chrisjenx.calligraphy:toolbar_subtitle");
 
         // Iterate through the children to run post inflation on them
         final int childCount = view.getChildCount();

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyActivityFactory.java
Patch:
@@ -13,7 +13,7 @@ interface CalligraphyActivityFactory {
     /**
      * Used to Wrap the Activity onCreateView method.
      *
-     * You implement this method like so in you base activity.
+     * You implement this method like so in your base activity.
      * <pre>
      * {@code
      * public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
Patch:
@@ -196,7 +196,7 @@ private String resolveFontPath(Context context, AttributeSet attrs) {
     }
 
     /**
-     * Will forceably set text on the views then remove ones that didn't have copy.
+     * Will forcibly set text on the views then remove ones that didn't have copy.
      *
      * @param view toolbar view.
      */
@@ -206,8 +206,8 @@ private void applyFontToToolbar(final Toolbar view) {
         // The toolbar inflates both the title and the subtitle views lazily but luckily they do it
         // synchronously when you set a title and a subtitle programmatically.
         // So we set a title and a subtitle to something, then get the views, then revert.
-        view.setTitle(" ");
-        view.setSubtitle(" ");
+        view.setTitle("uk.co.chrisjenx.calligraphy:toolbar_title");
+        view.setSubtitle("uk.co.chrisjenx.calligraphy:toolbar_subtitle");
 
         // Iterate through the children to run post inflation on them
         final int childCount = view.getChildCount();

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyActivityFactory.java
Patch:
@@ -13,7 +13,7 @@ interface CalligraphyActivityFactory {
     /**
      * Used to Wrap the Activity onCreateView method.
      *
-     * You implement this method like so in you base activity.
+     * You implement this method like so in your base activity.
      * <pre>
      * {@code
      * public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -31,7 +31,7 @@ protected void onCreate(Bundle savedInstanceState) {
         handler.postDelayed(new Runnable() {
             @Override
             public void run() {
-                toolbar.setTitle("Calligraphy Added");
+//                toolbar.setTitle("Calligraphy Added");
                 toolbar.setSubtitle("Added subtitle");
             }
         }, 1000);

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
Patch:
@@ -30,7 +30,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle st
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        ButterKnife.inject(this, view);
+        ButterKnife.bind(this, view);
 
         ViewStub stub = ButterKnife.findById(view, R.id.stub);
         stub.inflate();

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
Patch:
@@ -16,6 +16,7 @@ public void onCreate() {
         CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
                         .setDefaultFontPath("fonts/Roboto-ThinItalic.ttf")
                         .setFontAttrId(R.attr.fontPath)
+                        .addCustomViewWithSetTypeface(CustomViewWithTypefaceSupport.class)
                         .addCustomStyle(TextField.class, R.attr.textFieldStyle)
                         .build()
         );

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/CalligraphyApplication.java
Patch:
@@ -16,6 +16,7 @@ public void onCreate() {
         CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()
                         .setDefaultFontPath("fonts/Roboto-ThinItalic.ttf")
                         .setFontAttrId(R.attr.fontPath)
+                        .setCustomViewTypefaceSupport(true)
                         .addCustomStyle(TextField.class, R.attr.textFieldStyle)
                         .build()
         );

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -5,10 +5,11 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.support.v7.app.ActionBarActivity;
+import android.support.v7.app.AppCompatActivity;
 
 import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;
 
-public class MainActivity extends ActionBarActivity {
+public class MainActivity extends AppCompatActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/PlaceholderFragment.java
Patch:
@@ -9,6 +9,7 @@
 import android.view.ViewGroup;
 import android.view.ViewStub;
 import android.widget.Toast;
+
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyContextWrapper.java
Patch:
@@ -108,7 +108,7 @@ public CalligraphyContextWrapper(Context base, int attributeId) {
     public Object getSystemService(String name) {
         if (LAYOUT_INFLATER_SERVICE.equals(name)) {
             if (mInflater == null) {
-                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId);
+                mInflater = new CalligraphyLayoutInflater(LayoutInflater.from(getBaseContext()), this, mAttributeId, false);
             }
             return mInflater;
         }

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
Patch:
@@ -160,7 +160,7 @@ protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoun
         for (String prefix : sClassPrefixList) {
             try {
                 view = createView(name, prefix, attrs);
-            } catch (ClassNotFoundException e) {
+            } catch (ClassNotFoundException ignored) {
             }
         }
         // In this case we want to let the base class take a crack

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/ReflectionUtils.java
Patch:
@@ -31,7 +31,7 @@ static Object getValue(Field field, Object obj) {
     static void setValue(Field field, Object obj, Object value) {
         try {
             field.set(obj, value);
-        } catch (IllegalAccessException e) {
+        } catch (IllegalAccessException ignored) {
         }
     }
 

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.res.AssetManager;
 import android.graphics.Typeface;
-import android.support.annotation.Nullable;
 import android.util.Log;
 
 import java.util.HashMap;
@@ -69,7 +68,7 @@ public static CalligraphyTypefaceSpan getSpan(final Typeface typeface) {
      * @param typeface nullable, the typeface to check if ours.
      * @return true if we have loaded it false otherwise.
      */
-    public static boolean isLoaded(@Nullable Typeface typeface) {
+    public static boolean isLoaded(Typeface typeface) {
         return typeface != null && sCachedFonts.containsValue(typeface);
     }
 

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
Patch:
@@ -320,7 +320,7 @@ static String pullFontPathFromTheme(Context context, int styleAttrId, int subSty
     static boolean canCheckForToolbar() {
         if (sToolbarCheck == null) {
             try {
-                Class.forName("android.support.v7.widget.Toolbar", false, null);
+                Class.forName("android.support.v7.widget.Toolbar");
                 sToolbarCheck = Boolean.TRUE;
             } catch (ClassNotFoundException e) {
                 sToolbarCheck = Boolean.FALSE;

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
Patch:
@@ -153,7 +153,7 @@ static void applyFontToTextView(final Context context, final TextView textView,
      * @return null if attribute is not defined or added to View
      */
     static String pullFontPathFromView(Context context, AttributeSet attrs, int attributeId) {
-        if (attributeId == -1)
+        if (attributeId == -1 || attrs == null)
             return null;
 
         final String attributeName;
@@ -180,7 +180,7 @@ static String pullFontPathFromView(Context context, AttributeSet attrs, int attr
      * @return null if attribute is not defined or found in the Style
      */
     static String pullFontPathFromStyle(Context context, AttributeSet attrs, int attributeId) {
-        if (attributeId == -1)
+        if (attributeId == -1 || attrs == null)
             return null;
         final TypedArray typedArray = context.obtainStyledAttributes(attrs, new int[]{attributeId});
         if (typedArray != null) {
@@ -208,7 +208,7 @@ static String pullFontPathFromStyle(Context context, AttributeSet attrs, int att
      * @return returns null if attribute is not defined or if no TextAppearance is found.
      */
     static String pullFontPathFromTextAppearance(final Context context, AttributeSet attrs, int attributeId) {
-        if (attributeId == -1) {
+        if (attributeId == -1 || attrs == null) {
             return null;
         }
 

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyFactory.java
Patch:
@@ -120,7 +120,9 @@ protected void onViewCreated(View view, String name, Context context, AttributeS
                 else
                     textViewFont = CalligraphyUtils.pullFontPathFromTheme(context, styleForTextView[0], mAttributeId);
             }
-            CalligraphyUtils.applyFontToTextView(context, (TextView) view, CalligraphyConfig.get(), textViewFont);
+
+            final boolean deferred = matchesResourceIdName(view, ACTION_BAR_TITLE) || matchesResourceIdName(view, ACTION_BAR_SUBTITLE);
+            CalligraphyUtils.applyFontToTextView(context, (TextView) view, CalligraphyConfig.get(), textViewFont, deferred);
         }
     }
 

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -7,7 +7,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
+import android.support.v7.app.ActionBarActivity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -17,7 +17,7 @@
 import butterknife.OnClick;
 import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;
 
-public class MainActivity extends FragmentActivity {
+public class MainActivity extends ActionBarActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -29,7 +29,7 @@ protected void onCreate(Bundle savedInstanceState) {
             @Override
             public void run() {
                 setTitle("Calligraphy changed");
-                getActionBar().setSubtitle("Added subtitle");
+                getSupportActionBar().setSubtitle("Added subtitle");
             }
         }, 1000);
     }

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -15,7 +15,6 @@
 
 import butterknife.ButterKnife;
 import butterknife.OnClick;
-import uk.co.chrisjenx.calligraphy.CalligraphyConfig;
 import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;
 
 public class MainActivity extends FragmentActivity {

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
Patch:
@@ -10,9 +10,9 @@
  * A helper loading {@link android.graphics.Typeface} avoiding the leak of the font when loaded
  * by multiple calls to {@link android.graphics.Typeface#createFromAsset(android.content.res.AssetManager, String)}
  * on pre-ICS versions.
- * <p/>
+ * <p>
  * More details can be found here https://code.google.com/p/android/issues/detail?id=9904
- * <p/>
+ * <p>
  * Created by Chris Jenkins on 04/09/13.
  */
 public final class TypefaceUtils {

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/TypefaceUtils.java
Patch:
@@ -10,9 +10,9 @@
  * A helper loading {@link android.graphics.Typeface} avoiding the leak of the font when loaded
  * by multiple calls to {@link android.graphics.Typeface#createFromAsset(android.content.res.AssetManager, String)}
  * on pre-ICS versions.
- * <p/>
+ * <p>
  * More details can be found here https://code.google.com/p/android/issues/detail?id=9904
- * <p/>
+ * <p>
  * Created by Chris Jenkins on 04/09/13.
  */
 public final class TypefaceUtils {

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -21,7 +21,6 @@ public class MainActivity extends FragmentActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        CalligraphyConfig.initDefault("fonts/Roboto-ThinItalic.ttf");
 
         setContentView(R.layout.activity_main);
 
@@ -36,7 +35,7 @@ public void run() {
 
     @Override
     protected void attachBaseContext(Context newBase) {
-        super.attachBaseContext(new CalligraphyContextWrapper(newBase, R.attr.fontPath));
+        super.attachBaseContext(new CalligraphyContextWrapper(newBase));
     }
 
     /**

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
Patch:
@@ -45,7 +45,7 @@ public static void applyFontToTextView(final Context context, final TextView tex
         applyFontToTextView(context, textView, config);
     }
 
-    static final String pullFontPath(Context context, AttributeSet attrs, int attributeId) {
+    static final String pullFontPath(Context context, AttributeSet attrs, int attributeId) throws Resources.NotFoundException {
         final String attributeName = context.getResources().getResourceEntryName(attributeId);
         final int stringResourceId = attrs.getAttributeResourceValue(null, attributeName, -1);
         return stringResourceId > 0

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyUtils.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.res.AssetManager;
 import android.content.res.TypedArray;
+import android.graphics.Paint;
 import android.graphics.Typeface;
 import android.text.TextUtils;
 import android.util.AttributeSet;

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -29,7 +29,6 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected void attachBaseContext(Context newBase) {
-        CalligraphyConfig.initDefault("fonts/Roboto-ThinItalic.ttf");
         super.attachBaseContext(new CalligraphyContextWrapper(newBase));
     }
 

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -29,7 +29,6 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected void attachBaseContext(Context newBase) {
-        CalligraphyConfig.initDefault("fonts/Roboto-ThinItalic.ttf");
         super.attachBaseContext(new CalligraphyContextWrapper(newBase));
     }
 

File: CalligraphySample/src/main/java/uk/co/chrisjenx/calligraphy/sample/MainActivity.java
Patch:
@@ -8,6 +8,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import uk.co.chrisjenx.calligraphy.CalligraphyConfig;
 import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;
 
 public class MainActivity extends Activity {
@@ -26,6 +27,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected void attachBaseContext(Context newBase) {
+        CalligraphyConfig.initDefault("fonts/Roboto-ThinItalic.ttf");
         super.attachBaseContext(new CalligraphyContextWrapper(newBase));
     }
 

File: calligraphy/src/main/java/uk/co/chrisjenx/calligraphy/CalligraphyLayoutInflater.java
Patch:
@@ -10,7 +10,7 @@
  * Created by chris on 19/12/2013
  * Project: Calligraphy
  */
-public class CalligraphyLayoutInflater extends LayoutInflater {
+class CalligraphyLayoutInflater extends LayoutInflater {
     private static final String[] sClassPrefixList = {
             "android.widget.",
             "android.webkit."
@@ -54,8 +54,9 @@ public LayoutInflater cloneInContext(Context newContext) {
     }
 
     private final void textViewFilter(final View view, final String name) {
-        if(view == null) return;
+        if (view == null) return;
         if (sTextViewClassName.equals(name)) {
+            CalligraphyUtils.applyFontToTextView(getContext(), (TextView) view, CalligraphyConfig.get());
         }
     }
 }

