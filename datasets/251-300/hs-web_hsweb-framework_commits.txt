File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/DefaultQueryHelper.java
Patch:
@@ -370,9 +370,6 @@ void applyValue(R result, String[] column, Object sqlValue) {
                     RDBColumnMetadata metadata = target.getColumn(column[1]).orElse(null);
 
                     if (metadata != null) {
-                        if(metadata.getFeature(EntityPropertyDescriptor.ID).isPresent()){
-                            return;
-                        }
                         ObjectPropertyOperator operator = GlobalConfig.getPropertyOperator();
                         if (targetProperty == null) {
                             operator.setProperty(result, column[1], metadata.decode(sqlValue));

File: hsweb-core/src/main/java/org/hswebframework/web/i18n/MultipleI18nSupportEntity.java
Patch:
@@ -12,7 +12,7 @@ public interface MultipleI18nSupportEntity extends I18nSupportEntity {
     @Override
     default Map<String, String> getI18nMessages(String key) {
         Map<String, Map<String, String>> source = getI18nMessages();
-        if (MapUtils.isNotEmpty(source)) {
+        if (MapUtils.isEmpty(source)) {
             return Collections.emptyMap();
         }
         return source.get(key);

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/QueryHelper.java
Patch:
@@ -657,6 +657,7 @@ static <T, ID, R> Flux<T> combineOneToMany(Flux<T> source,
         return combineOneToMany(source,
                                 idMapper,
                                 list -> fetcher
+                                    .copy()
                                     .in(MethodReferenceConverter.convertToColumn(mainIdGetter), list)
                                     .fetch(),
                                 mainIdGetter,

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/entity/CustomTestEntity.java
Patch:
@@ -6,6 +6,7 @@
 import lombok.Setter;
 import org.hswebframework.web.api.crud.entity.GenericEntity;
 import org.hswebframework.web.bean.ToString;
+import org.hswebframework.web.crud.annotation.EnableEntityEvent;
 import org.hswebframework.web.crud.generator.Generators;
 
 import javax.persistence.Column;
@@ -16,6 +17,7 @@
 @Setter
 @AllArgsConstructor(staticName = "of")
 @NoArgsConstructor
+@EnableEntityEvent
 public class CustomTestEntity extends TestEntity {
 
 

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/ReactiveAuthenticationHolder.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.hswebframework.web.authorization;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.web.authorization.simple.SimpleAuthentication;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/access/DimensionHelper.java
Patch:
@@ -2,7 +2,7 @@
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.web.authorization.Authentication;
 import org.hswebframework.web.authorization.Dimension;
 import org.hswebframework.web.authorization.DimensionType;

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/define/DimensionsDefinition.java
Patch:
@@ -2,7 +2,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.web.authorization.Dimension;
 import org.hswebframework.web.authorization.annotation.Logical;
 

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/define/ResourceDefinition.java
Patch:
@@ -5,7 +5,7 @@
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.web.authorization.annotation.Logical;
 import org.hswebframework.web.bean.FastBeanCopier;
 

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/define/ResourcesDefinition.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.web.authorization.Authentication;
 import org.hswebframework.web.authorization.Permission;
 import org.hswebframework.web.authorization.annotation.Logical;

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/simple/CompositeReactiveAuthenticationManager.java
Patch:
@@ -2,7 +2,7 @@
 
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.web.authorization.*;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/simple/SimplePermission.java
Patch:
@@ -1,7 +1,7 @@
 package org.hswebframework.web.authorization.simple;
 
 import lombok.*;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.web.authorization.Permission;
 import org.hswebframework.web.authorization.access.DataAccessConfig;
 

File: hsweb-authorization/hsweb-authorization-basic/src/main/java/org/hswebframework/web/authorization/basic/handler/access/DimensionDataAccessHandler.java
Patch:
@@ -5,7 +5,7 @@
 import lombok.Setter;
 import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.ezorm.core.param.Param;
 import org.hswebframework.ezorm.core.param.QueryParam;
 import org.hswebframework.web.api.crud.entity.Entity;

File: hsweb-authorization/hsweb-authorization-oauth2/src/test/java/org/hswebframework/web/oauth2/server/code/DefaultAuthorizationCodeGranterTest.java
Patch:
@@ -5,12 +5,14 @@
 import org.hswebframework.web.oauth2.server.OAuth2Client;
 import org.hswebframework.web.oauth2.server.RedisHelper;
 import org.hswebframework.web.oauth2.server.impl.RedisAccessTokenManager;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.context.support.StaticApplicationContext;
 import reactor.test.StepVerifier;
 
 import java.util.Collections;
 
+@Ignore
 public class DefaultAuthorizationCodeGranterTest {
 
     @Test

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/QueryParamEntity.java
Patch:
@@ -5,7 +5,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.collections4.MapUtils;
 import org.hswebframework.ezorm.core.NestConditional;
 import org.hswebframework.ezorm.core.dsl.Query;

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/events/EntityEventListener.java
Patch:
@@ -3,7 +3,7 @@
 
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.ezorm.core.GlobalConfig;
 import org.hswebframework.ezorm.core.param.QueryParam;
 import org.hswebframework.ezorm.rdb.events.EventListener;

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/service/CrudService.java
Patch:
@@ -1,6 +1,6 @@
 package org.hswebframework.web.crud.service;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.ezorm.core.param.QueryParam;
 import org.hswebframework.ezorm.rdb.mapping.SyncDelete;
 import org.hswebframework.ezorm.rdb.mapping.SyncQuery;

File: hsweb-starter/src/main/java/org/hswebframework/web/starter/CorsProperties.java
Patch:
@@ -3,7 +3,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import lombok.ToString;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.http.HttpMethod;
 import org.springframework.web.reactive.config.CorsRegistration;

File: hsweb-starter/src/main/java/org/hswebframework/web/starter/initialize/SystemInitialize.java
Patch:
@@ -27,6 +27,7 @@
 /**
  * @author zhouhao
  */
+@Deprecated
 public class SystemInitialize {
     private final Logger logger = LoggerFactory.getLogger(SystemInitialize.class);
 

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/main/java/org/hswebframework/web/system/authorization/defaults/configuration/AuthorizationServiceAutoConfiguration.java
Patch:
@@ -26,8 +26,8 @@
 public class AuthorizationServiceAutoConfiguration {
 
     @AutoConfiguration
-    @AutoConfigureBefore(DefaultAuthorizationAutoConfiguration.class)
-    static class ReactiveAuthorizationServiceAutoConfiguration {
+    public static class ReactiveAuthorizationServiceAutoConfiguration {
+
         @ConditionalOnBean(ReactiveRepository.class)
         @Bean
         public ReactiveUserService reactiveUserService() {

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/main/java/org/hswebframework/web/system/authorization/defaults/service/DefaultDimensionService.java
Patch:
@@ -1,6 +1,6 @@
 package org.hswebframework.web.system.authorization.defaults.service;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.ezorm.rdb.mapping.ReactiveRepository;
 import org.hswebframework.web.authorization.Dimension;
 import org.hswebframework.web.authorization.DimensionProvider;

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/main/java/org/hswebframework/web/system/authorization/defaults/service/DefaultReactiveAuthenticationInitializeService.java
Patch:
@@ -1,7 +1,7 @@
 package org.hswebframework.web.system.authorization.defaults.service;
 
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.ezorm.rdb.mapping.ReactiveRepository;
 import org.hswebframework.web.authorization.Authentication;
 import org.hswebframework.web.authorization.Dimension;

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/main/java/org/hswebframework/web/system/authorization/defaults/webflux/WebFluxPermissionController.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.ezorm.rdb.operator.dml.query.SortOrder;
 import org.hswebframework.web.api.crud.entity.QueryNoPagingOperation;
 import org.hswebframework.web.api.crud.entity.QueryOperation;

File: hsweb-system/hsweb-system-file/src/main/java/org/hswebframework/web/file/FileUploadProperties.java
Patch:
@@ -2,7 +2,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.hswebframework.utils.time.DateFormatter;
 import org.hswebframework.web.id.IDGenerator;
 import org.springframework.boot.context.properties.ConfigurationProperties;

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/main/java/org/hswebframework/web/system/authorization/defaults/service/terms/DimensionTerm.java
Patch:
@@ -90,8 +90,8 @@ public SqlFragments createFragments(String columnFullName, RDBColumnMetadata col
                 .add(SqlFragments.RIGHT_BRACKET)
                 .addParameter(values);
         }
-        
-        fragments.add(SqlFragments.COMMA);
+
+        fragments.add(SqlFragments.RIGHT_BRACKET);
         return fragments;
     }
 }
\ No newline at end of file

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/events/TestEntityListener.java
Patch:
@@ -99,6 +99,7 @@ public void handlePrepareModify(EntityPrepareModifyEvent<EventTestEntity> event)
             for (EventTestEntity eventTestEntity : event.getAfter()) {
                 if(eventTestEntity.getName().equals("prepare-xx")){
                     eventTestEntity.setName("prepare-0");
+                    eventTestEntity.setAge(null);
                 }
             }
         }));

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/events/EntityEventListener.java
Patch:
@@ -290,7 +290,8 @@ protected void handleUpdateBefore(DSLUpdate<?, ?> update, EventContext context)
                                                        after,
                                                        entityType,
                                                        EntityPrepareModifyEvent::new)
-                                    .then(Mono.fromRunnable(() -> prepareUpdateInstance(after, context)));
+                                    .then(Mono.fromRunnable(() -> prepareUpdateInstance(after, context)))
+                                    ;
 
                             }).then())
                     );

File: hsweb-authorization/hsweb-authorization-basic/src/main/java/org/hswebframework/web/authorization/basic/configuration/AuthorizingHandlerAutoConfiguration.java
Patch:
@@ -130,7 +130,7 @@ public BasicAuthorizationTokenParser basicAuthorizationTokenParser(Authenticatio
 
 
     @Bean
-    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
+    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
     public AuthorizationLoginLoggerInfoHandler authorizationLoginLoggerInfoHandler() {
         return new AuthorizationLoginLoggerInfoHandler();
     }

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/token/DefaultUserTokenManager.java
Patch:
@@ -144,7 +144,7 @@ public Mono<Boolean> tokenIsLoggedIn(String token) {
             return Mono.just(false);
         }
         return getByToken(token)
-                .map(t -> !t.isExpired())
+                .map(UserToken::isNormal)
                 .defaultIfEmpty(false);
     }
 

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/QueryAnalyzerImpl.java
Patch:
@@ -662,7 +662,8 @@ public void visit(PlainSelect plainSelect) {
 
 
             if (plainSelect.getDistinct() != null) {
-                columns.append(plainSelect.getDistinct());
+                columns.append(plainSelect.getDistinct())
+                    .append(' ');
                 fastCount = false;
             }
 

File: hsweb-core/src/test/java/org/hswebframework/web/dict/EnumDictTest.java
Patch:
@@ -90,6 +90,8 @@ public void testEq() {
     public static class TestEntity {
         private TestEnum testEnum = TestEnum.E1;
 
+        private TestEnumInteger testEnumInteger = TestEnumInteger.E1;
+
         private SimpleEnum simpleEnum = SimpleEnum.A;
 
         private TestEnum[] testEnums;

File: hsweb-core/src/main/java/org/hswebframework/web/bean/CompareUtils.java
Patch:
@@ -63,11 +63,11 @@ public static boolean compare(Object source, Object target) {
             return compare(((Map) target), source);
         }
 
-        if (source.getClass().isEnum()) {
+        if (source.getClass().isEnum() || source instanceof Enum) {
             return compare(((Enum) source), target);
         }
 
-        if (target.getClass().isEnum()) {
+        if (target.getClass().isEnum() || source instanceof Enum) {
             return compare(((Enum) target), source);
         }
 

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/QueryHelper.java
Patch:
@@ -169,7 +169,7 @@ interface NativeQuerySpec<T> extends ExecuteSpec<T> {
          * @return this
          */
         default ExecuteSpec<T> where(Consumer<Query<?, QueryParamEntity>> dsl) {
-            Query<?, QueryParamEntity> query = QueryParamEntity.newQuery();
+            Query<?, QueryParamEntity> query = QueryParamEntity.newQuery().noPaging();
             dsl.accept(query);
             return where(query.getParam());
         }

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/events/EntityEventListener.java
Patch:
@@ -88,9 +88,9 @@ public void onEvent(EventType type, EventContext context) {
                                       EntityCreatedEvent::new);
             } else {
                 handleBatchOperation(mapping.getEntityType(),
-                                     EntityEventType.save,
+                                     EntityEventType.create,
                                      context,
-                                     EntityPrepareSaveEvent::new,
+                                     EntityPrepareCreateEvent::new,
                                      EntityBeforeCreateEvent::new,
                                      EntityCreatedEvent::new);
             }

File: hsweb-system/hsweb-system-dictionary/src/main/java/org/hswebframework/web/dictionary/entity/DictionaryEntity.java
Patch:
@@ -27,6 +27,7 @@
 import org.hswebframework.web.crud.generator.Generators;
 import org.hswebframework.web.dict.DictDefine;
 import org.hswebframework.web.dict.defaults.DefaultDictDefine;
+import org.hswebframework.web.validator.CreateGroup;
 
 import javax.persistence.Column;
 import javax.persistence.Table;
@@ -45,7 +46,7 @@
 public class DictionaryEntity extends GenericEntity<String> implements RecordCreationEntity {
     //字典名称
     @Column(nullable = false)
-    @NotBlank(message = "名称不能为空")
+    @NotBlank(message = "名称不能为空",groups = CreateGroup.class)
     @Schema(description = "字典名称")
     private String name;
     //分类

File: hsweb-system/hsweb-system-dictionary/src/main/java/org/hswebframework/web/dictionary/webflux/WebfluxDictionaryController.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.media.Schema;
-import io.swagger.v3.oas.annotations.parameters.RequestBody;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import io.swagger.v3.oas.annotations.Parameter;
 import org.hswebframework.web.api.crud.entity.QueryParamEntity;

File: hsweb-authorization/hsweb-authorization-basic/src/main/java/org/hswebframework/web/authorization/basic/web/AuthorizationController.java
Patch:
@@ -116,7 +116,7 @@ private Mono<Map<String, Object>> doLogin(Mono<Map<String, Object>> parameter) {
                         failedEvent.setException(err);
                         return failedEvent
                                 .publish(eventPublisher)
-                                .then(Mono.error(failedEvent.getException()));
+                                .then(Mono.error(failedEvent::getException));
                     });
         });
     }

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/query/DefaultQueryHelperTest.java
Patch:
@@ -156,6 +156,7 @@ public void testNative() {
     public void testCustomFirstPageIndex() {
         DefaultQueryHelper helper = new DefaultQueryHelper(database);
         QueryParamEntity e = new QueryParamEntity();
+        e.and("id","eq","testCustomFirstPageIndex");
         e.setFirstPageIndex(1);
         e.setPageIndex(2);
 

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/query/DefaultQueryHelperTest.java
Patch:
@@ -47,9 +47,9 @@ public void testGroup() {
                 .sync();
 
         helper.select("select name as \"name\",count(1) totalResult from s_test group by name having count(1) > ? ", GroupResult::new,0)
-              .where(dsl -> dsl
-                      .is("age", "31")
-                      .orderByAsc(GroupResult::getTotalResult))
+//              .where(dsl -> dsl
+//                      .is("age", "31")
+//                      .orderByAsc(GroupResult::getTotalResult))
               .fetch()
               .doOnNext(v -> System.out.println(JSON.toJSONString(v, SerializerFeature.PrettyFormat)))
               .as(StepVerifier::create)

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/DefaultQueryHelper.java
Patch:
@@ -162,7 +162,7 @@ public void wrapColumn(ColumnWrapperContext<Map<String, Object>> context) {
             QueryAnalyzer.Column col = analyzer.findColumn(column).orElse(null);
 
             if (col != null && !analyzer.columnIsExpression(column, context.getColumnIndex())) {
-                doWrap(instance, col.alias, col.metadata.decode(context.getResult()));
+                doWrap(instance, column, col.metadata.decode(context.getResult()));
             } else {
                 doWrap(instance, col == null ? QueryHelperUtils.toHump(column) : col.alias, getCodec().decode(context.getResult()));
             }
@@ -1153,7 +1153,7 @@ public T applyColumn(String mainColumn,
                     .getColumn(column)
                     .orElseThrow(() -> new IllegalArgumentException("column [" + column + "] not found"));
 
-            getAccepter().accept(mainColumn, termType, NativeSql.of(columnMetadata.getFullName(alias)));
+            getAccepter().accept(mainColumn, termType, new JoinConditionalSpecImpl.ColumnRef(columnMetadata,alias));
 
             return (T) this;
         }

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/query/DefaultQueryHelperTest.java
Patch:
@@ -103,7 +103,7 @@ public void testNative() {
         }
 
 
-        helper.select("select e.*,t.* from s_test t " +
+        helper.select("select t.*,e.*,e.name ename,e.id `x.id` from s_test t " +
                               "left join s_test_event e on e.id = t.id " +
                               "where t.age = ?", 20)
               .logger(LoggerFactory.getLogger("org.hswebframework.test.native"))

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/DefaultQueryHelper.java
Patch:
@@ -369,6 +369,9 @@ JoinConditionalSpecImpl getJoin() {
 
             @Override
             SelectColumnSupplier[] forSelect() {
+                if(propertyTypeIsCollection()){
+                    return new SelectColumnSupplier[0];
+                }
                 //查询主表
                 if (tableType == parent.from) {
                     return toColumns(this.target = parent.table, null);

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/query/DefaultQueryHelperTest.java
Patch:
@@ -45,10 +45,10 @@ public void testGroup() {
                 .execute()
                 .sync();
 
-        helper.select("select name,count(1) total_result from s_test group by name having count(1) > ? ", GroupResult::new,0)
+        helper.select("select name as \"name\",count(1) totalResult from s_test group by name having count(1) > ? ", GroupResult::new,0)
               .where(dsl -> dsl
                       .is("age", "31")
-                      .orderByAsc("name"))
+                      .orderByAsc(GroupResult::getTotalResult))
               .fetch()
               .doOnNext(v -> System.out.println(JSON.toJSONString(v, SerializerFeature.PrettyFormat)))
               .as(StepVerifier::create)

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/DefaultQueryHelper.java
Patch:
@@ -161,10 +161,10 @@ public void wrapColumn(ColumnWrapperContext<Map<String, Object>> context) {
             String column = context.getColumnLabel();
             QueryAnalyzer.Column col = analyzer.findColumn(column).orElse(null);
 
-            if (col != null) {
-                doWrap(instance, column, col.metadata.decode(context.getResult()));
+            if (col != null && !analyzer.columnIsExpression(column, context.getColumnIndex())) {
+                doWrap(instance, col.alias, col.metadata.decode(context.getResult()));
             } else {
-                doWrap(instance, toHump(column), getCodec().decode(context.getResult()));
+                doWrap(instance, col == null ? toHump(column) : col.alias, getCodec().decode(context.getResult()));
             }
         }
 

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/QueryAnalyzerImpl.java
Patch:
@@ -628,11 +628,11 @@ public SqlRequest refactor(QueryParamEntity param, Object... args) {
 
             appendWhere(sql, param);
 
-            appendOrderBy(sql, param);
-
             sql.addSql(suffix)
                .addParameter(getSuffixParameters(args));
 
+            appendOrderBy(sql, param);
+
             return sql.toRequest();
         }
 

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/query/QueryAnalyzerImpl.java
Patch:
@@ -76,7 +76,7 @@ public Select select() {
 
     @Override
     public Optional<Column> findColumn(String name) {
-        return Optional.ofNullable(columnMappings.get(name));
+        return Optional.ofNullable(getColumnMappings().get(name));
     }
 
     @Override

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/query/DefaultQueryHelperTest.java
Patch:
@@ -85,7 +85,7 @@ public void testNative() {
         }
 
 
-        helper.select("select e.*,t.id as \"id\" from s_test t " +
+        helper.select("select e.*,t.* from s_test t " +
                               "left join s_test_event e on e.id = t.id " +
                               "where t.age = ?", 20)
               .logger(LoggerFactory.getLogger("org.hswebframework.test.native"))

File: hsweb-commons/hsweb-commons-crud/src/test/java/org/hswebframework/web/crud/query/DefaultQueryHelperTest.java
Patch:
@@ -134,7 +134,7 @@ public void test() {
               )
               .orderByAsc(TestEntity::getAge)
               .orderByDesc(EventTestEntity::getAge)
-              .fetch()
+              .fetchPaged()
               .doOnNext(info -> System.out.println(JSON.toJSONString(info, SerializerFeature.PrettyFormat)))
               .as(StepVerifier::create)
               .expectNextCount(1)

File: hsweb-commons/hsweb-commons-crud/src/main/java/org/hswebframework/web/crud/web/CommonWebFluxConfiguration.java
Patch:
@@ -25,6 +25,7 @@ public CommonErrorControllerAdvice commonErrorControllerAdvice() {
 
     @Bean
     @ConditionalOnClass(name = "io.r2dbc.spi.R2dbcException")
+    @ConditionalOnMissingBean
     public R2dbcErrorControllerAdvice r2dbcErrorControllerAdvice() {
         return new R2dbcErrorControllerAdvice();
     }

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/test/java/org/hswebframework/web/system/authorization/defaults/service/reactive/ReactiveTestApplication.java
Patch:
@@ -4,8 +4,8 @@
 import org.hswebframework.web.crud.configuration.JdbcSqlExecutorConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
+import org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration;
 
 @SpringBootApplication(exclude = {
          //TransactionAutoConfiguration.class,

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/test/java/org/hswebframework/web/system/authorization/defaults/service/reactive/WebFluxPermissionControllerTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
-import org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration;
 import org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration;
+import org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration;
 import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
 import org.springframework.test.context.junit4.SpringRunner;

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-oauth2/src/test/java/org/hswebframework/web/oauth2/ReactiveTestApplication.java
Patch:
@@ -4,8 +4,8 @@
 import org.hswebframework.web.crud.configuration.JdbcSqlExecutorConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
+import org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration;
 
 @SpringBootApplication(exclude = {
          //TransactionAutoConfiguration.class,

File: hsweb-starter/src/main/java/org/hswebframework/web/starter/jackson/CustomTypeFactory.java
Patch:
@@ -4,6 +4,7 @@
 import com.fasterxml.jackson.databind.type.*;
 import com.fasterxml.jackson.databind.util.ArrayBuilders;
 import com.fasterxml.jackson.databind.util.LRUMap;
+import com.fasterxml.jackson.databind.util.LookupCache;
 import org.hswebframework.web.api.crud.entity.EntityFactory;
 
 public class CustomTypeFactory extends TypeFactory {
@@ -15,7 +16,7 @@ public CustomTypeFactory(EntityFactory factory) {
         this.entityFactory = factory;
     }
 
-    protected CustomTypeFactory(LRUMap<Object, JavaType> typeCache, TypeParser p,
+    protected CustomTypeFactory(LookupCache<Object, JavaType> typeCache, TypeParser p,
                                 TypeModifier[] mods, ClassLoader classLoader) {
         super(typeCache, p, mods, classLoader);
     }
@@ -33,7 +34,7 @@ public TypeFactory withClassLoader(ClassLoader classLoader) {
 
     @Override
     public TypeFactory withModifier(TypeModifier mod) {
-        LRUMap<Object, JavaType> typeCache = _typeCache;
+        LookupCache<Object, JavaType> typeCache = _typeCache;
         TypeModifier[] mods;
         if (mod == null) { // mostly for unit tests
             mods = null;

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/token/redis/RedisUserTokenManager.java
Patch:
@@ -184,7 +184,7 @@ public Mono<Void> signOutByToken(String token) {
         return getByToken(token)
                 .flatMap(t -> operations
                         .delete(getTokenRedisKey(t.getToken()))
-                        .then(userTokenMapping.remove(getUserRedisKey(t.getToken()), token))
+                        .then(userTokenMapping.remove(getUserRedisKey(t.getUserId()), token))
                         .then(onTokenRemoved(t))
                 )
                 .then();

File: hsweb-starter/src/test/java/org/hswebframework/web/starter/jackson/CustomJackson2jsonEncoderTest.java
Patch:
@@ -6,6 +6,7 @@
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import org.hswebframework.web.dict.EnumDict;
+import org.hswebframework.web.i18n.LocaleUtils;
 import org.hswebframework.web.i18n.MessageSourceInitializer;
 import org.junit.Before;
 import org.junit.Test;
@@ -55,7 +56,7 @@ public void doTest(TestEntity entity, Locale locale, Predicate<String> verify){
                .as(DataBufferUtils::join)
                .map(buf -> buf.toString(StandardCharsets.UTF_8))
                .doOnNext(System.out::println)
-               .subscriberContext(ctx->ctx.put(LocaleContext.class,new SimpleLocaleContext(locale)))
+               .subscriberContext(LocaleUtils.useLocale(locale))
                .as(StepVerifier::create)
                .expectNextMatches(verify)
                .verifyComplete();

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/Authentication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/AuthenticationHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/AuthenticationManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/AuthenticationSupplier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/Permission.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/ReactiveAuthenticationInitializeService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/ReactiveAuthenticationManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/ReactiveAuthenticationSupplier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/Role.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/User.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/access/DataAccessConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/annotation/Authorize.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/annotation/DataAccess.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/annotation/Logical.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/builder/AuthenticationBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/events/AbstractAuthorizationEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/events/AuthorizationBeforeEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/events/AuthorizationDecodeEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/events/AuthorizationEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/events/AuthorizationExitEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/events/AuthorizationFailedEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/events/AuthorizationSuccessEvent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/exception/UnAuthorizedException.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/simple/SimpleAuthentication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/token/DefaultUserTokenManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/token/UserTokenManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-basic/src/main/java/org/hswebframework/web/authorization/basic/web/AuthorizationController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
 import org.hswebframework.web.logging.AccessLogger;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.ApplicationEventPublisher;
+import org.springframework.context.event.EventListener;
 import org.springframework.http.MediaType;
 import org.springframework.util.Assert;
 import org.springframework.web.bind.annotation.*;

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/Entity.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/EntityFactory.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/GenericEntity.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/GenericTreeSortSupportEntity.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/PagerResult.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/SortSupportEntity.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/TreeSortSupportEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-commons/hsweb-commons-api/src/main/java/org/hswebframework/web/api/crud/entity/TreeSupportEntity.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-core/src/main/java/org/hswebframework/web/aop/MethodInterceptorContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-core/src/main/java/org/hswebframework/web/aop/MethodInterceptorHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-core/src/main/java/org/hswebframework/web/exception/BusinessException.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-core/src/main/java/org/hswebframework/web/exception/NotFoundException.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-core/src/main/java/org/hswebframework/web/id/IDGenerator.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-core/src/main/java/org/hswebframework/web/utils/AnnotationUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 http://www.hswebframework.org
+ * Copyright 2020 http://www.hswebframework.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: hsweb-core/src/main/java/org/hswebframework/web/utils/WebUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2019 http://www.hswebframework.org
+ *  Copyright 2020 http://www.hswebframework.org
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: hsweb-logging/hsweb-access-logging-aop/src/main/java/org/hswebframework/web/logging/aop/EnableAccessLogger.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-logging/hsweb-access-logging-api/src/main/java/org/hswebframework/web/logging/AccessLogger.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-starter/src/main/java/org/hswebframework/web/starter/initialize/DependencyInstaller.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-starter/src/main/java/org/hswebframework/web/starter/initialize/DependencyUpgrader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  * Copyright 2019 http://www.hswebframework.org
+ *  * Copyright 2020 http://www.hswebframework.org
  *  *
  *  * Licensed under the Apache License, Version 2.0 (the "License");
  *  * you may not use this file except in compliance with the License.

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/token/event/UserTokenChangedEvent.java
Patch:
@@ -5,7 +5,7 @@
 import org.springframework.context.ApplicationEvent;
 
 public class UserTokenChangedEvent extends ApplicationEvent implements AuthorizationEvent {
-    private UserToken before, after;
+    private final UserToken before, after;
 
     public UserTokenChangedEvent(UserToken before, UserToken after) {
         super(after);

File: hsweb-core/src/main/java/org/hswebframework/web/context/ContextUtils.java
Patch:
@@ -11,8 +11,7 @@
  */
 public class ContextUtils {
 
-    private static ThreadLocal<Context> contextThreadLocal = ThreadLocal.withInitial(MapContext::new);
-
+    private static final ThreadLocal<Context> contextThreadLocal = ThreadLocal.withInitial(MapContext::new);
 
     public static Context currentContext() {
         return contextThreadLocal.get();
@@ -23,6 +22,8 @@ public static Mono<Context> reactiveContext() {
                 .<Context>handle((context, sink) -> {
                     if (context.hasKey(Context.class)) {
                         sink.next(context.get(Context.class));
+                    }else {
+                        sink.complete();
                     }
                 })
                 .subscriberContext(acceptContext(ctx -> {

File: hsweb-logging/hsweb-access-logging-aop/src/main/java/org/hswebframework/web/logging/aop/AccessLoggerParser.java
Patch:
@@ -1,4 +1,4 @@
-package org.hswebframework.web.loggin.aop;
+package org.hswebframework.web.logging.aop;
 
 
 import org.hswebframework.web.aop.MethodInterceptorHolder;

File: hsweb-logging/hsweb-access-logging-aop/src/main/java/org/hswebframework/web/logging/aop/AopAccessLoggerSupport.java
Patch:
@@ -1,4 +1,4 @@
-package org.hswebframework.web.loggin.aop;
+package org.hswebframework.web.logging.aop;
 
 import org.aopalliance.intercept.MethodInterceptor;
 import org.hswebframework.web.aop.MethodInterceptorHolder;
@@ -9,13 +9,11 @@
 import org.hswebframework.web.logging.events.AccessLoggerAfterEvent;
 import org.hswebframework.web.logging.events.AccessLoggerBeforeEvent;
 import org.hswebframework.web.utils.WebUtils;
-import org.reactivestreams.Publisher;
 import org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.core.Ordered;
 import org.springframework.util.ClassUtils;
-import reactor.core.publisher.Mono;
 
 import javax.servlet.http.HttpServletRequest;
 import java.lang.reflect.Method;

File: hsweb-logging/hsweb-access-logging-aop/src/main/java/org/hswebframework/web/logging/aop/DefaultAccessLoggerParser.java
Patch:
@@ -1,4 +1,4 @@
-package org.hswebframework.web.loggin.aop;
+package org.hswebframework.web.logging.aop;
 
 
 import org.hswebframework.web.aop.MethodInterceptorHolder;

File: hsweb-logging/hsweb-access-logging-aop/src/main/java/org/hswebframework/web/logging/aop/EnableAccessLogger.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.hswebframework.web.loggin.aop;
+package org.hswebframework.web.logging.aop;
 
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 

File: hsweb-logging/hsweb-access-logging-aop/src/main/java/org/hswebframework/web/logging/aop/ResourceAccessLoggerParser.java
Patch:
@@ -1,12 +1,11 @@
-package org.hswebframework.web.loggin.aop;
+package org.hswebframework.web.logging.aop;
 
 
 import org.hswebframework.web.aop.MethodInterceptorHolder;
 import org.hswebframework.web.authorization.annotation.Resource;
 import org.hswebframework.web.authorization.annotation.ResourceAction;
 import org.hswebframework.web.logging.LoggerDefine;
 import org.springframework.core.annotation.AnnotatedElementUtils;
-import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.util.ClassUtils;
 
 import java.lang.annotation.Annotation;

File: hsweb-logging/hsweb-access-logging-aop/src/main/java/org/hswebframework/web/logging/aop/SwaggerAccessLoggerParser.java
Patch:
@@ -1,4 +1,4 @@
-package org.hswebframework.web.loggin.aop;
+package org.hswebframework.web.logging.aop;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: hsweb-commons/hsweb-commons-entity/src/main/java/org/hswebframework/web/commons/entity/LogicalDeleteEntity.java
Patch:
@@ -10,7 +10,7 @@ public interface LogicalDeleteEntity {
 
     Boolean getDeleted();
 
-    void setDeleted(boolean deleted);
+    void setDeleted(Boolean deleted);
 
     Long getDeleteTime();
 

File: hsweb-commons/hsweb-commons-entity/src/main/java/org/hswebframework/web/commons/entity/LogicalDeleteEntity.java
Patch:
@@ -10,7 +10,7 @@ public interface LogicalDeleteEntity {
 
     Boolean getDeleted();
 
-    void setDeleted(boolean deleted);
+    void setDeleted(Boolean deleted);
 
     Long getDeleteTime();
 

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/main/java/org/hswebframework/web/dao/mybatis/MyBatisAutoConfiguration.java
Patch:
@@ -38,6 +38,7 @@
 import org.springframework.context.annotation.Primary;
 import org.springframework.core.io.DefaultResourceLoader;
 import org.springframework.core.io.ResourceLoader;
+import org.springframework.util.ClassUtils;
 import org.springframework.util.StringUtils;
 
 import javax.sql.DataSource;
@@ -112,7 +113,7 @@ public Transaction newTransaction(DataSource dataSource, TransactionIsolationLev
         EnumDictHandlerRegister.register("org.hswebframework.web;" + mybatisProperties.getTypeHandlersPackage());
 
         try {
-            Class.forName("javax.persistence.Table");
+            ClassUtils.forName("javax.persistence.Table", null);
             EasyOrmSqlBuilder.getInstance().useJpa = mybatisProperties.isUseJpa();
         } catch (@SuppressWarnings("all") Exception ignore) {
         }

File: hsweb-datasource/hsweb-datasource-jta/src/main/java/org/hswebframework/web/datasource/jta/AtomikosDataSourceConfig.java
Patch:
@@ -7,6 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.hswebframework.web.bean.FastBeanCopier;
 import org.hswebframework.web.datasource.config.DynamicDataSourceConfig;
+import org.springframework.util.ClassUtils;
 
 import javax.sql.XADataSource;
 import java.sql.SQLException;
@@ -42,7 +43,7 @@ public void putProperties(AtomikosDataSourceBean atomikosDataSourceBean) {
             xaProperties.entrySet().forEach(entry -> entry.setValue(String.valueOf(entry.getValue())));
         }
         //fix #87
-        XADataSource dataSource = (XADataSource) Class.forName(getXaDataSourceClassName()).newInstance();
+        XADataSource dataSource = (XADataSource) ClassUtils.forName(getXaDataSourceClassName(), null).newInstance();
         FastBeanCopier.copy(xaProperties, dataSource);
         atomikosDataSourceBean.setXaDataSource(dataSource);
 

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/main/java/org/hswebframework/web/dao/mybatis/MyBatisAutoConfiguration.java
Patch:
@@ -38,6 +38,7 @@
 import org.springframework.context.annotation.Primary;
 import org.springframework.core.io.DefaultResourceLoader;
 import org.springframework.core.io.ResourceLoader;
+import org.springframework.util.ClassUtils;
 import org.springframework.util.StringUtils;
 
 import javax.sql.DataSource;
@@ -112,7 +113,7 @@ public Transaction newTransaction(DataSource dataSource, TransactionIsolationLev
         EnumDictHandlerRegister.register("org.hswebframework.web;" + mybatisProperties.getTypeHandlersPackage());
 
         try {
-            Class.forName("javax.persistence.Table");
+            ClassUtils.forName("javax.persistence.Table", null);
             EasyOrmSqlBuilder.getInstance().useJpa = mybatisProperties.isUseJpa();
         } catch (@SuppressWarnings("all") Exception ignore) {
         }

File: hsweb-datasource/hsweb-datasource-jta/src/main/java/org/hswebframework/web/datasource/jta/AtomikosDataSourceConfig.java
Patch:
@@ -7,6 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.hswebframework.web.bean.FastBeanCopier;
 import org.hswebframework.web.datasource.config.DynamicDataSourceConfig;
+import org.springframework.util.ClassUtils;
 
 import javax.sql.XADataSource;
 import java.sql.SQLException;
@@ -42,7 +43,7 @@ public void putProperties(AtomikosDataSourceBean atomikosDataSourceBean) {
             xaProperties.entrySet().forEach(entry -> entry.setValue(String.valueOf(entry.getValue())));
         }
         //fix #87
-        XADataSource dataSource = (XADataSource) Class.forName(getXaDataSourceClassName()).newInstance();
+        XADataSource dataSource = (XADataSource) ClassUtils.forName(getXaDataSourceClassName(), null).newInstance();
         FastBeanCopier.copy(xaProperties, dataSource);
         atomikosDataSourceBean.setXaDataSource(dataSource);
 

File: hsweb-datasource/hsweb-datasource-api/src/main/java/org/hswebframework/web/datasource/DynamicDataSourceAutoConfiguration.java
Patch:
@@ -41,7 +41,7 @@ public DefaultTableSwitcher defaultTableSwitcher() {
 
     @Bean
     @ConditionalOnMissingBean(DynamicDataSourceConfigRepository.class)
-    public DynamicDataSourceConfigRepository inSpringDynamicDataSourceConfigRepository() {
+    public InSpringDynamicDataSourceConfigRepository inSpringDynamicDataSourceConfigRepository() {
         return new InSpringDynamicDataSourceConfigRepository();
     }
 

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/test/java/org/hswebframework/web/dao/crud/TestEntity.java
Patch:
@@ -1,5 +1,6 @@
 package org.hswebframework.web.dao.crud;
 
+import com.alibaba.fastjson.JSONObject;
 import lombok.Getter;
 import lombok.Setter;
 import lombok.ToString;
@@ -50,4 +51,5 @@ public class TestEntity implements org.hswebframework.web.commons.entity.Entity
     @CollectionTable(name = "nest_table2")
     private NestEntity nest2;
 
+    private JSONObject jsonField;
 }

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/simple/DimensionDataAccessConfig.java
Patch:
@@ -1,5 +1,6 @@
 package org.hswebframework.web.authorization.simple;
 
+import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
 import org.hswebframework.web.authorization.DimensionType;
@@ -12,6 +13,7 @@
 
 @Getter
 @Setter
+@EqualsAndHashCode(callSuper = true)
 public class DimensionDataAccessConfig extends AbstractDataAccessConfig implements ScopeDataAccessConfig {
 
     private Set<Object> scope;

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-default/src/main/java/org/hswebframework/web/system/authorization/defaults/service/DefaultReactiveAuthenticationInitializeService.java
Patch:
@@ -121,7 +121,7 @@ protected SimpleAuthentication handlePermission(SimpleAuthentication authenticat
                 SimplePermission permission = new SimplePermission();
                 permission.setId(permissionEntity.getId());
                 permission.setName(permissionEntity.getName());
-                Map<DataAccessType, DataAccessConfig> configs = new HashMap<>();
+                Set<DataAccessConfig> configs = new HashSet<>();
 
                 for (AuthorizationSettingEntity permissionSetting : permissionSettings) {
 
@@ -142,15 +142,15 @@ protected SimpleAuthentication handlePermission(SimpleAuthentication authenticat
                                     return config;
                                 })
                                 .filter(Objects::nonNull)
-                                .forEach(access -> configs.put(access.getType(), access));
+                                .forEach(configs::add);
                     }
                     if (CollectionUtils.isNotEmpty(permissionSetting.getActions())) {
                         permission.getActions().addAll(permissionSetting.getActions());
                     }
 
                 }
                 allowed.put(permissionEntity.getId(), permission);
-                permission.setDataAccesses(new HashSet<>(configs.values()));
+                permission.setDataAccesses(configs);
             }
 
             //处理关联权限

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-api/src/main/java/org/hswebframework/web/system/authorization/api/entity/DimensionEntity.java
Patch:
@@ -22,7 +22,7 @@
 public class DimensionEntity extends GenericTreeSortSupportEntity<String> {
 
     @Comment("维度类型ID")
-    @Column(length = 32)
+    @Column(length = 32,name = "type_id")
     private String typeId;
 
     @Comment("维度名称")

File: hsweb-boost/hsweb-boost-excel/src/main/java/org/hswebframework/web/excel/DefaultExcelImporter.java
Patch:
@@ -94,7 +94,7 @@ protected Map<Class, HeaderMapper> createHeaderMapping(Class type) {
     }
 
     @SneakyThrows
-    protected <T> ExcelCellConverter<T> createConvert(Class<ExcelCellConverter> converterClass, Class<T> type) {
+    protected <T> ExcelCellConverter<T> createConvert(Class<? extends ExcelCellConverter> converterClass, Class<T> type) {
         if (converterClass != ExcelCellConverter.class) {
             try {
                 return ApplicationContextHolder.get().getBean(converterClass);

File: hsweb-boost/hsweb-boost-excel/src/main/java/org/hswebframework/web/excel/Excel.java
Patch:
@@ -55,6 +55,6 @@
      * @return 实例必须注入到spring容器中
      * @see org.springframework.context.ApplicationContext#getBean(Class)
      */
-    Class<ExcelCellConverter> converter() default ExcelCellConverter.class;
+    Class<? extends ExcelCellConverter> converter() default ExcelCellConverter.class;
 
 }

File: hsweb-starter/hsweb-spring-boot-starter/src/main/java/org/hswebframework/web/starter/init/simple/SimpleDependencyInstaller.java
Patch:
@@ -48,15 +48,15 @@ public void doInitialize(Map<String, Object> context) {
 
     public void doUnInstall(Map<String, Object> context) {
         if (unInstaller != null) {
-            installer.execute(context);
+            unInstaller.execute(context);
         }
     }
 
     public void doUpgrade(Map<String, Object> context, SystemVersion.Dependency installed) {
         SimpleDependencyUpgrader simpleDependencyUpgrader =
                 new SimpleDependencyUpgrader(installed, dependency, context);
         context.put("upgrader", simpleDependencyUpgrader);
-        if (unInstaller != null) {
+        if (upgrader != null) {
             upgrader.execute(context);
         }
     }

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-web/src/main/java/org/hswebframework/web/authorization/controller/UserSettingController.java
Patch:
@@ -39,7 +39,7 @@ public ResponseMessage<UserSettingEntity> get(Authentication authentication,
                                                   @PathVariable String id) {
         UserSettingEntity entity = userSettingService.selectByUser(authentication.getUser().getId(), key, id);
         if (entity != null && entity.hasPermission(R, RW)) {
-            return ResponseMessage.ok();
+            return ResponseMessage.ok(entity);
         }
         return ResponseMessage.ok();
     }

File: hsweb-datasource/hsweb-datasource-api/src/main/java/org/hswebframework/web/datasource/DynamicDataSourceProxy.java
Patch:
@@ -1,5 +1,6 @@
 package org.hswebframework.web.datasource;
 
+import lombok.Setter;
 import lombok.SneakyThrows;
 
 import javax.sql.DataSource;
@@ -21,6 +22,7 @@ public class DynamicDataSourceProxy implements DynamicDataSource {
 
     private String id;
 
+    @Setter
     private volatile DatabaseType databaseType;
 
     private DataSource proxy;

File: hsweb-starter/hsweb-spring-boot-starter/src/main/java/org/hswebframework/web/starter/HswebAutoConfiguration.java
Patch:
@@ -172,7 +172,6 @@ public void afterCompletion(HttpServletRequest request, HttpServletResponse resp
     public MapperEntityFactory mapperEntityFactory() {
         MapperEntityFactory entityFactory = new MapperEntityFactory(entityProperties.createMappers());
         FastBeanCopier.setBeanFactory(entityFactory);
-        ;
         return entityFactory;
     }
 

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-core/src/main/java/org/hswebframework/web/oauth2/core/ErrorType.java
Patch:
@@ -57,6 +57,8 @@ public enum ErrorType {
 
     USER_NOT_EXIST(4041),//客户端不存在
 
+    STATE_ERROR(4042), //stat错误
+
     ACCESS_DENIED(503), //访问被拒绝
 
     OTHER(5001), //其他错误 ;

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/test/java/org/hswebframework/web/dao/crud/TestEntity.java
Patch:
@@ -45,4 +45,5 @@ public class TestEntity implements org.hswebframework.web.commons.entity.Entity
     private DataType[] dataTypes;
 
     private NestEntity nest;
+
 }

File: hsweb-authorization/hsweb-authorization-basic/src/main/java/org/hswebframework/web/authorization/basic/embed/EmbedAuthenticationManager.java
Patch:
@@ -55,6 +55,7 @@ public void init() {
                     }
                 }
             }
+            authentications.put(id, properties.toAuthentication(dataAccessConfigBuilderFactory));
         });
     }
 
@@ -66,7 +67,7 @@ public Authentication authenticate(AuthenticationRequest request) {
                             ((PlainTextUsernamePasswordAuthenticationRequest) request).getUsername().equals(user.getUsername())
                                     && ((PlainTextUsernamePasswordAuthenticationRequest) request).getPassword().equals(user.getPassword()))
                     .findFirst()
-                    .map(properties -> properties.toAuthentication(dataAccessConfigBuilderFactory))
+                    .map(properties -> authentications.get(properties.getId()))
                     .orElseThrow(() -> new ValidationException("用户不存在")));
         }
 

File: hsweb-commons/hsweb-commons-service/hsweb-commons-service-oauth2/src/main/java/org/hswebframework/web/service/oauth2/OAuth2CrudService.java
Patch:
@@ -2,7 +2,7 @@
 
 public interface OAuth2CrudService<E, PK> extends OAuth2QueryService<E, PK>
         , OAuth2QueryByEntityService<E>
-        , OAuth2DeleteService<PK>
+        , OAuth2DeleteService<E,PK>
         , OAuth2InsertService<E, PK>
         , OAuth2UpdateService<E, PK> {
 }

File: hsweb-commons/hsweb-commons-service/hsweb-commons-service-oauth2/src/main/java/org/hswebframework/web/service/oauth2/OAuth2DeleteService.java
Patch:
@@ -2,9 +2,9 @@
 
 import org.hswebframework.web.service.DeleteService;
 
-public interface OAuth2DeleteService<PK> extends DeleteService<PK>, OAuth2ServiceSupport {
+public interface OAuth2DeleteService<E, PK> extends DeleteService<E, PK>, OAuth2ServiceSupport {
     @Override
-    default int deleteByPk(PK pk) {
-        return createRequest("/" + pk).delete().as(Integer.class);
+    default E deleteByPk(PK pk) {
+        return createRequest("/" + pk).delete().as(getEntityType());
     }
 }

File: hsweb-system/hsweb-system-dynamic-form/hsweb-system-dynamic-form-local/src/main/java/org/hswebframework/web/service/form/simple/SimpleDynamicFormService.java
Patch:
@@ -601,7 +601,7 @@ protected ValueConverter initColumnValueConvert(JDBCType jdbcType, Class javaTyp
                 .contains(javaType) || javaType != Map.class || javaType != List.class;
 
         if (javaType.isEnum() && EnumDict.class.isAssignableFrom(javaType)) {
-            return new EnumDictValueConverter<EnumDict>(() -> new Arr);
+            return new EnumDictValueConverter<EnumDict>(() -> (List) Arrays.asList(javaType.getEnumConstants()));
         }
         switch (jdbcType) {
             case BLOB:

File: hsweb-system/hsweb-system-dynamic-form/hsweb-system-dynamic-form-local/src/main/java/org/hswebframework/web/service/form/simple/dict/DictionaryOptionalConvertBuilderStrategy.java
Patch:
@@ -47,7 +47,7 @@ public OptionConverter build(DictConfig dictConfig) {
         converter.setWriteObject(!"false".equalsIgnoreCase(writeObject));
 
         if (!StringUtils.isEmpty(sppliter)) {
-            converter.setSplitter(str -> new Arr);
+            converter.setSplitter(str -> Arrays.asList(str.split(sppliter)));
         }
 
         return converter;

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/main/java/org/hswebframework/web/dao/mybatis/mapper/dict/DictInTermTypeMapper.java
Patch:
@@ -35,10 +35,10 @@ public DictInTermTypeMapper(boolean not) {
 
     private boolean support(RDBColumnMetaData column) {
         Class type = column.getJavaType();
-        if (type.isArray()) {
+        if (type != null && type.isArray()) {
             type = type.getComponentType();
         }
-        return ((type.isEnum() && EnumDict.class.isAssignableFrom(type))
+        return ((type != null && type.isEnum() && EnumDict.class.isAssignableFrom(type))
                 ||
                 (column.getProperty(USE_DICT_MASK_FLAG).isTrue() && column.getOptionConverter() != null));
     }

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/main/java/org/hswebframework/web/dao/mybatis/mapper/dict/DictTermTypeMapper.java
Patch:
@@ -35,14 +35,15 @@ public DictTermTypeMapper(boolean not) {
 
     private boolean support(RDBColumnMetaData column) {
         Class type = column.getJavaType();
-        if (type.isArray()) {
+        if (type != null && type.isArray()) {
             type = type.getComponentType();
         }
-        return ((type.isEnum() && EnumDict.class.isAssignableFrom(type))
+        return ((type != null && type.isEnum() && EnumDict.class.isAssignableFrom(type))
                 ||
                 (column.getProperty(USE_DICT_MASK_FLAG).isTrue() && column.getOptionConverter() != null));
     }
 
+
     @SuppressWarnings("all")
     private List<EnumDict> getAllOption(RDBColumnMetaData column) {
         Class type = column.getJavaType();

File: hsweb-system/hsweb-system-dictionary/hsweb-system-dictionary-web/src/main/java/org/hswebframework/web/controller/dictionary/DictionaryController.java
Patch:
@@ -25,6 +25,7 @@
 import org.hswebframework.web.controller.message.ResponseMessage;
 import org.hswebframework.web.dict.DictDefine;
 import org.hswebframework.web.dict.DictDefineRepository;
+import org.hswebframework.web.dict.EnumDict;
 import org.hswebframework.web.dict.ItemDefine;
 import org.hswebframework.web.dictionary.api.DictionaryService;
 import org.hswebframework.web.dictionary.api.entity.DictionaryEntity;
@@ -73,7 +74,7 @@ public ResponseMessage<DictDefine> getDefineById(@PathVariable String id) {
     @GetMapping("/define/{id:.+}/items")
     @Authorize(merge = false)
     @ApiOperation("获取数据字典选项信息")
-    public ResponseMessage<List<ItemDefine>> getItemDefineById(@PathVariable String id) {
+    public ResponseMessage<List<EnumDict<Object>>> getItemDefineById(@PathVariable String id) {
         return ok(Optional.ofNullable(repository.getDefine(id))
                 .map(DictDefine::getItems)
                 .orElse(Collections.emptyList()));

File: hsweb-system/hsweb-system-dictionary/hsweb-system-dictionary-local/src/main/java/org/hswebframework/web/dictionary/simple/BoostDictDefineRepository.java
Patch:
@@ -32,8 +32,7 @@ public DictDefine getDefine(String id) {
         if (entity == null) {
             return super.getDefine(id);
         }
-        List<EnumDict<String>> items = new ArrayList<>(entity.getItems());
-
+        List<EnumDict<Object>> items = (List) new ArrayList<>(entity.getItems());
 
         return DefaultDictDefine.builder()
                 .id(id)

File: hsweb-system/hsweb-system-organizational/hsweb-system-organizational-local/src/main/java/org/hswebframework/web/service/organizational/simple/terms/UserInPositionSqlTerm.java
Patch:
@@ -36,7 +36,7 @@ public SqlAppender accept(String wherePrefix, Term term, RDBColumnMetaData colum
         ChangedTermValue termValue = createChangedTermValue(term);
 
         SqlAppender appender = new SqlAppender();
-        appender.addSpc(not ? "not" : "", "exists(select 1 from s_person_position tmp_");
+        appender.addSpc(not ? "not" : "", "exists(select 1 from s_person_position _tmp");
         if (isChild()) {
             appender.addSpc(",s_position _pos");
         }
@@ -46,10 +46,10 @@ public SqlAppender accept(String wherePrefix, Term term, RDBColumnMetaData colum
 
         appender.addSpc("where ",
                 createColumnName(column, tableAlias), "=",
-                isForPerson() ? " _tmp.person_id" : "_person.user_id and _person.u_id=tmp_.person_id");
+                isForPerson() ? " _tmp.person_id" : "_person.user_id and _person.u_id=_tmp.person_id");
 
         if (isChild()) {
-            appender.addSpc("and _pos.u_id=tmp_.position_id");
+            appender.addSpc("and _pos.u_id=_tmp.position_id");
         }
 
         List<Object> positionIdList = BoostTermTypeMapper.convertList(column, termValue.getOld());

File: hsweb-system/hsweb-system-organizational/hsweb-system-organizational-local/src/main/java/org/hswebframework/web/service/organizational/simple/terms/UserInPositionSqlTerm.java
Patch:
@@ -46,7 +46,7 @@ public SqlAppender accept(String wherePrefix, Term term, RDBColumnMetaData colum
 
         appender.addSpc("where ",
                 createColumnName(column, tableAlias), "=",
-                isForPerson() ? "_person.u_id=tmp_.person_id and _tmp.person_id" : "_person.user_id");
+                isForPerson() ? " _tmp.person_id" : "_person.user_id and _person.u_id=tmp_.person_id");
 
         if (isChild()) {
             appender.addSpc("and _pos.u_id=tmp_.position_id");

File: hsweb-core/src/main/java/org/hswebframework/web/id/IDGenerator.java
Patch:
@@ -30,13 +30,14 @@
  * @author zhouhao
  * @since 3.0
  */
+@FunctionalInterface
 public interface IDGenerator<T> {
     T generate();
 
     /**
      * 使用UUID生成id
      */
-    IDGenerator<String> UUID = java.util.UUID.randomUUID()::toString;
+    IDGenerator<String> UUID = () -> java.util.UUID.randomUUID().toString();
 
     /**
      * 随机字符

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/simple/builder/SimpleAuthenticationBuilder.java
Patch:
@@ -83,7 +83,7 @@ public AuthenticationBuilder permission(String permissionJson) {
         JSONArray jsonArray = JSON.parseArray(permissionJson);
         List<Permission> permissions = new ArrayList<>();
         for (int i = 0; i < jsonArray.size(); i++) {
-            JSONObject jsonObject = jsonArray.getJSONObject(0);
+            JSONObject jsonObject = jsonArray.getJSONObject(i);
             SimplePermission permission = new SimplePermission();
             permission.setId(jsonObject.getString("id"));
 

File: hsweb-system/hsweb-system-database-manager/hsweb-system-database-manager-api/src/main/java/org/hswebframework/web/database/manager/meta/table/parser/support/OracleTableMetaDataParser.java
Patch:
@@ -4,7 +4,7 @@
 import org.hswebframework.web.database.manager.meta.table.parser.AbstractSqlTableMetaDataParser;
 import org.hswebframework.web.datasource.DatabaseType;
 
-public class OralceTableMetaDataParser extends AbstractSqlTableMetaDataParser {
+public class OracleTableMetaDataParser extends AbstractSqlTableMetaDataParser {
 
     private final static String TABLE_META_SQL = "select distinct(cols.column_name) as \"name\"" +
             ",cols.table_name as \"name\"" +
@@ -23,7 +23,7 @@ public class OralceTableMetaDataParser extends AbstractSqlTableMetaDataParser {
 
     private final static String ALL_TABLE_SQL = "select table_name as \"name\" from user_tab_comments where table_type='TABLE'";
 
-    public OralceTableMetaDataParser(SqlExecutor sqlExecutor) {
+    public OracleTableMetaDataParser(SqlExecutor sqlExecutor) {
         super(sqlExecutor, DatabaseType.oracle);
     }
 

File: hsweb-system/hsweb-system-database-manager/hsweb-system-database-manager-starter/src/main/java/org/hswebframework/web/database/manager/TableMetaDataParserAutoConfiguration.java
Patch:
@@ -1,13 +1,13 @@
 package org.hswebframework.web.database.manager;
 
 import org.hswebframework.ezorm.rdb.executor.SqlExecutor;
-import org.hswebframework.ezorm.rdb.meta.parser.OracleTableMetaParser;
 import org.hswebframework.web.database.manager.meta.ObjectMetadata;
 import org.hswebframework.web.database.manager.meta.table.parser.MetaDataParserRegister;
 import org.hswebframework.web.database.manager.meta.table.parser.MetaDataParserSupplier;
 import org.hswebframework.web.database.manager.meta.table.parser.TableMetaDataParser;
 import org.hswebframework.web.database.manager.meta.table.parser.support.H2TableMetaDataParser;
 import org.hswebframework.web.database.manager.meta.table.parser.support.MysqlTableMetaDataParser;
+import org.hswebframework.web.database.manager.meta.table.parser.support.OracleTableMetaDataParser;
 import org.hswebframework.web.database.manager.meta.table.parser.support.SqlServerTableMetaDataParser;
 import org.hswebframework.web.datasource.DatabaseType;
 import org.springframework.beans.BeansException;
@@ -40,8 +40,8 @@ public MysqlTableMetaDataParser mysqlTableMetaDataParser() {
 
     @Bean
     @ConditionalOnClass(name = "oracle.jdbc.driver.OracleDriver")
-    public OracleTableMetaParser oracleTableMetaParser() {
-        return new OracleTableMetaParser(sqlExecutor);
+    public OracleTableMetaDataParser oracleTableMetaParser() {
+        return new OracleTableMetaDataParser(sqlExecutor);
     }
 
     @Bean

File: hsweb-system/hsweb-system-dynamic-form/hsweb-system-dynamic-form-service/hsweb-system-dynamic-form-service-simple/src/main/java/org/hswebframework/web/service/form/simple/SimpleDynamicFormOperationService.java
Patch:
@@ -64,7 +64,7 @@ public <T> PagerResult<T> selectPager(String formId, QueryParamEntity paramEntit
                 return PagerResult.empty();
             }
             paramEntity.rePaging(total);
-            List<T> list = query.setParam(paramEntity).list();
+            List<T> list = query.setParam(paramEntity).list(paramEntity.getPageIndex(),paramEntity.getPageSize());
             return PagerResult.of(total, list);
         } catch (SQLException e) {
             throw new DynamicFormException("selectPager fail:" + e.getMessage(), e);

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/test/java/org/hswebframework/web/dao/crud/DataType.java
Patch:
@@ -9,7 +9,8 @@
 public enum DataType implements EnumDict<Byte> {
     TYPE1((byte) 1, "类型1"),
     TYPE2((byte) 2, "类型2"),
-    TYPE3((byte) 3, "类型3");
+    TYPE3((byte) 3, "类型3"),
+    TYPE4((byte) 4, "类型4");
 
     private Byte value;
 

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/test/java/org/hswebframework/web/dao/crud/TestCrud.java
Patch:
@@ -51,8 +51,7 @@ public void testInsert() {
 
         QueryParamEntity query = new QueryParamEntity();
 
-        query.where("dataTypes", "in",Arrays.asList(DataType.TYPE3, DataType.TYPE3))
-        .or("name","123").or("name" ,"in","123");
+        query.where("dataTypes", "ain",Arrays.asList(DataType.TYPE4, DataType.TYPE2));
 
         List<TestEntity> entities = testDao.query(query);
 

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-starter/src/test/java/org/hswebframework/web/authorization/starter/AutoSyncPermissionTest.java
Patch:
@@ -72,7 +72,7 @@ public void test() throws NoSuchMethodException {
         Assert.assertEquals(permissionEntity.getName(), "测试权限");
         Assert.assertTrue(!permissionEntity.getActions().isEmpty());
 
-        Assert.assertEquals(permissionEntity.getOptionalFields().size(), 2);
+        Assert.assertEquals(permissionEntity.getOptionalFields().size(), 3);
     }
 
     @Authorize(permission = "test", description = "测试权限")

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/main/java/org/hswebframework/web/dao/mybatis/dynamic/DynamicSpringManagedTransaction.java
Patch:
@@ -89,7 +89,7 @@ public Connection getConnection() throws SQLException {
 
         if (LOGGER.isDebugEnabled()) {
             LOGGER.debug(
-                    "DataSource (" + dsId + ") JDBC Connection ["
+                    "DataSource (" + (dsId == null ? "default" : dsId) + ") JDBC Connection ["
                             + connection
                             + "] will"
                             + (proxy.isConnectionTransactional ? " " : " not ")
@@ -171,7 +171,7 @@ public Connection getConnection() throws SQLException {
         public void commit() throws SQLException {
             if (this.connection != null && !this.isConnectionTransactional && !this.autoCommit) {
                 if (LOGGER.isDebugEnabled()) {
-                    LOGGER.debug("Committing DataSource (" + dataSourceId + ") JDBC Connection [" + this.connection + "]");
+                    LOGGER.debug("Committing DataSource (" + (dataSourceId == null ? "default" : dataSourceId) + ") JDBC Connection [" + this.connection + "]");
                 }
                 this.connection.commit();
             }

File: hsweb-datasource/hsweb-datasource-api/src/main/java/org/hswebframework/web/datasource/DynamicDataSourceProxy.java
Patch:
@@ -50,10 +50,10 @@ public String getId() {
     public DatabaseType getType() {
         if (databaseType == null) {
             lock.lock();
-            if (databaseType != null) {
-                return databaseType;
-            }
             try {
+                if (databaseType != null) {
+                    return databaseType;
+                }
                 try (Connection connection = proxy.getConnection()) {
                     databaseType = DatabaseType.fromJdbcUrl(connection.getMetaData().getURL());
                 }

File: hsweb-examples/hsweb-examples-simple/src/main/java/org/hswebframework/web/example/simple/TestController.java
Patch:
@@ -82,7 +82,7 @@ public ResponseMessage<List<UserModel>> testUpdate(@RequestBody List<UserModel>
 
     @PutMapping("/test/testPersonnel")
     public ResponseMessage<PersonnelAuthorization> testPersonnel() {
-        return ResponseMessage.ok(PersonnelAuthorization.current().get());
+        return ResponseMessage.ok(PersonnelAuthorization.current().orElseThrow(UnAuthorizedException::new));
     }
 
     @Override

File: hsweb-system/hsweb-system-oauth2-server/hsweb-system-oauth2-server-starter/src/main/java/org/hswebframework/web/oauth2/authorization/OAuth2UserTokenParser.java
Patch:
@@ -49,7 +49,7 @@ public ParsedToken parseToken(HttpServletRequest request) {
             throw new GrantTokenException(ErrorType.INVALID_TOKEN);
         }
         Long time = auth2AccessToken.getUpdateTime() != null ? auth2AccessToken.getUpdateTime() : auth2AccessToken.getCreateTime();
-        if (System.currentTimeMillis() - time > auth2AccessToken.getExpiresIn() * 1000) {
+        if (System.currentTimeMillis() - time > auth2AccessToken.getExpiresIn() * 1000L) {
             throw new GrantTokenException(ErrorType.EXPIRED_TOKEN);
         }
 
@@ -71,7 +71,7 @@ public String getType() {
 
             @Override
             public long getMaxInactiveInterval() {
-                return auth2AccessToken.getExpiresIn() * 1000;
+                return auth2AccessToken.getExpiresIn() * 1000L;
             }
         };
     }

File: hsweb-system/hsweb-system-workflow/hsweb-system-workflow-flowable/src/main/java/org/hswebframework/web/workflow/flowable/controller/FlowableModelManagerController.java
Patch:
@@ -108,7 +108,6 @@ public ResponseMessage createModel(@RequestBody JSONObject model) throws Excepti
         modelObjectNode.put(MODEL_DESCRIPTION, model.getString(MODEL_DESCRIPTION));
         modelObjectNode.put(MODEL_KEY, model.getString(MODEL_KEY));
         modelObjectNode.put(MODEL_NAME, model.getString(MODEL_NAME));
-        modelObjectNode.put(MODEL_DESCRIPTION, model.getString(MODEL_DESCRIPTION));
 
         Model modelData = repositoryService.newModel();
         modelData.setMetaInfo(modelObjectNode.toJSONString());

File: hsweb-examples/hsweb-examples-oauth2/hsweb-examples-oauth2-client/src/main/java/org/hswebframework/web/example/oauth2/github/GithubSSOAuthorizingListener.java
Patch:
@@ -55,7 +55,8 @@ public void on(OAuth2CodeAuthBeforeEvent event) {
         String bio = String.valueOf(userInfo.get("bio"));
 
         Authentication authentication = new SimpleAuthenticationBuilder(new SimpleDataAccessConfigBuilderFactory())
-                .user(SimpleUser.builder().username(bio).name(name).id("github-user:" + id).build())
+                .user(SimpleUser.builder().username(bio).name(name)
+                        .type("github").id("github-user:" + id).build())
                 .role(Arrays.asList(SimpleRole.builder().id("admin").name("github用户").build()))
                 .permission(Arrays.asList(SimplePermission.builder().id("user-info").actions(new HashSet<>(Arrays.asList("get"))).build()))
                 .attributes((Map) userInfo)

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-service/hsweb-system-authorization-service-simple/src/main/java/org/hswebframework/web/service/authorization/simple/SimpleAuthorizationSettingService.java
Patch:
@@ -329,6 +329,7 @@ public Authentication initUserAuthorization(String userId) {
             List<String> allActions = entity.getActions().stream().map(ActionEntity::getAction).collect(Collectors.toList());
 
             if (isNotEmpty(entity.getActions()) && isNotEmpty(detail.getActions())) {
+
                 detail.setActions(detail.getActions().stream().filter(allActions::contains).collect(Collectors.toSet()));
             }
             if (isEmpty(entity.getSupportDataAccessTypes())) {

File: hsweb-system/hsweb-system-dynamic-form/hsweb-system-dynamic-form-service/hsweb-system-dynamic-form-service-simple/src/main/java/org/hswebframework/web/service/form/simple/SimpleDatabaseRepository.java
Patch:
@@ -16,6 +16,7 @@
 import org.springframework.stereotype.Service;
 
 import javax.annotation.PostConstruct;
+import java.util.EnumMap;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -27,11 +28,11 @@
 @Service
 public class SimpleDatabaseRepository implements DatabaseRepository {
 
-    private RDBDatabase defaultDatabase = null;
+    private volatile RDBDatabase defaultDatabase = null;
     private SqlExecutor sqlExecutor     = null;
 
     private final Map<String, RDBDatabase>                                 repository            = new HashMap<>();
-    private final Map<DatabaseType, Supplier<AbstractRDBDatabaseMetaData>> databaseMetaSuppliers = new HashMap<>();
+    private final Map<DatabaseType, Supplier<AbstractRDBDatabaseMetaData>> databaseMetaSuppliers = new EnumMap<>(DatabaseType.class);
 
     @Autowired
     public void setSqlExecutor(SqlExecutor sqlExecutor) {

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-client/src/main/java/org/hswebframework/web/authorization/oauth2/client/request/OAuth2Session.java
Patch:
@@ -30,7 +30,7 @@
  * @see OAuth2Request
  * @since 3.0
  */
-public interface OAuth2Session extends Serializable {
+public interface OAuth2Session{
     /**
      * 尝试进行认证
      *

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-client/src/main/java/org/hswebframework/web/authorization/oauth2/client/simple/SimpleOAuth2SessionBuilder.java
Patch:
@@ -25,6 +25,8 @@
 import org.hswebframework.web.authorization.oauth2.client.simple.session.CachedOAuth2Session;
 import org.hswebframework.web.authorization.oauth2.client.simple.session.DefaultOAuth2Session;
 import org.hswebframework.web.authorization.oauth2.client.simple.session.PasswordSession;
+import org.hswebframework.web.oauth2.core.GrantType;
+import org.hswebframework.web.oauth2.core.OAuth2Constants;
 
 import java.util.List;
 import java.util.concurrent.locks.ReadWriteLock;
@@ -110,7 +112,7 @@ public OAuth2Session byAuthorizationCode(String code) {
     }
 
 
-    Supplier<AccessTokenInfo> tokenGetter = () -> {
+   private Supplier<AccessTokenInfo> tokenGetter = () -> {
         readWriteLock.readLock().lock();
         try {
             return getClientCredentialsToken();

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-client/src/main/java/org/hswebframework/web/authorization/oauth2/client/simple/session/AuthorizationCodeSession.java
Patch:
@@ -18,10 +18,10 @@
 
 package org.hswebframework.web.authorization.oauth2.client.simple.session;
 
-import org.hswebframework.web.authorization.oauth2.client.GrantType;
 import org.hswebframework.web.authorization.oauth2.client.OAuth2Constants;
 import org.hswebframework.web.authorization.oauth2.client.request.OAuth2Request;
 import org.hswebframework.web.authorization.oauth2.client.request.OAuth2Session;
+import org.hswebframework.web.oauth2.core.GrantType;
 
 /**
  * @author zhouhao

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-client/src/main/java/org/hswebframework/web/authorization/oauth2/client/simple/session/PasswordSession.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.hswebframework.web.authorization.oauth2.client.simple.session;
 
-import org.hswebframework.web.authorization.oauth2.client.GrantType;
 import org.hswebframework.web.authorization.oauth2.client.OAuth2Constants;
 import org.hswebframework.web.authorization.oauth2.client.request.OAuth2Request;
+import org.hswebframework.web.oauth2.core.GrantType;
 
 /**
  * @author zhouhao

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-core/src/main/java/org/hswebframework/web/oauth2/core/GrantType.java
Patch:
@@ -25,6 +25,7 @@
 public interface GrantType {
     String authorization_code = "authorization_code";
     String implicit           = "implicit";
+    @SuppressWarnings("all")
     String password           = "password";
     String client_credentials = "client_credentials";
     String refresh_token      = "refresh_token";

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-core/src/main/java/org/hswebframework/web/oauth2/core/OAuth2Constants.java
Patch:
@@ -19,8 +19,6 @@
 package org.hswebframework.web.oauth2.core;
 
 /**
- * TODO 完成注释
- *
  * @author zhouhao
  */
 public interface OAuth2Constants {
@@ -36,6 +34,8 @@ public interface OAuth2Constants {
     String state         = "state";
     String code          = "code";
     String username      = "username";
+
+    @SuppressWarnings("all")
     String password      = "password";
 
 }

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/main/java/org/hswebframework/web/dao/mybatis/dynamic/DynamicSqlSessionFactory.java
Patch:
@@ -88,7 +88,7 @@ public Configuration getConfiguration() {
         return configuration;
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings("all")
     private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
         Transaction tx = null;
         try {

File: hsweb-datasource/hsweb-datasource-api/src/main/java/org/hswebframework/web/datasource/service/DataSourceCache.java
Patch:
@@ -30,8 +30,9 @@ public DynamicDataSource getDataSource() {
             try {
                 //等待初始化完成
                 initLatch.await();
-            } catch (InterruptedException ignored) {
+            } catch (Exception ignored) {
                 log.warn(ignored.getMessage(),ignored);
+
             } finally {
                 initLatch = null;
             }

File: hsweb-datasource/hsweb-datasource-jta/src/main/java/org/hswebframework/web/datasource/jta/JtaDynamicDataSourceService.java
Patch:
@@ -93,6 +93,7 @@ public void closeDataSource() {
                     downLatch.countDown();
                 } catch (Exception e) {
                     logger.error("init datasource {} error", id, e);
+
                     //atomikosDataSourceBean.close();
                 }
             });
@@ -102,6 +103,7 @@ public void closeDataSource() {
                     Thread.sleep(config.getInitTimeout() * 1000L);
                 } catch (InterruptedException ignored) {
                     logger.warn(ignored.getMessage(), ignored);
+                    Thread.currentThread().interrupt();
                 } finally {
                     if (successCounter.get() == 0) {
                         // 初始化超时,认定为失败

File: hsweb-examples/hsweb-examples-oauth2/hsweb-examples-oauth2-client/src/main/java/org/hswebframework/web/example/oauth2/OAuth2SSOAuthorizingListener.java
Patch:
@@ -73,7 +73,7 @@ public void on(OAuth2CodeAuthBeforeEvent event) {
         HttpSession httpSession = WebUtil.getHttpServletRequest()
                 .getSession();
 
-        userTokenManager.signIn(httpSession.getId(), "sessionId",authentication.getUser().getId(), 60 * 60 * 1000);
+        userTokenManager.signIn(httpSession.getId(), "sessionId",authentication.getUser().getId(), 60 * 60 * 1000L);
 
 
     }

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-controller/src/main/java/org/hswebframework/web/controller/authorization/UserController.java
Patch:
@@ -70,13 +70,15 @@ public void setUserService(UserService userService) {
     }
 
     @Override
+    @SuppressWarnings("all")
     public ResponseMessage<PagerResult<UserEntity>> list(QueryParamEntity param) {
         param.excludes("password", "salt");
         return QueryController.super.list(param)
                 .exclude(UserEntity.class, "password", "salt");
     }
 
     @Override
+    @SuppressWarnings("all")
     public ResponseMessage<UserEntity> getByPrimaryKey(@PathVariable String id) {
         return QueryController.super.getByPrimaryKey(id)
                 .exclude(UserEntity.class, "password", "salt");

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-entity/src/main/java/org/hswebframework/web/entity/authorization/UserEntity.java
Patch:
@@ -22,15 +22,13 @@
 import org.hswebframework.web.commons.entity.RecordCreationEntity;
 
 /**
- * TODO 完成注释
- *
  * @author zhouhao
  */
 public interface UserEntity extends GenericEntity<String>, RecordCreationEntity {
     String name     = "name";
     String username = "username";
     String salt     = "salt";
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings("all")
     String password = "password";
     String status = "status";
 

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/token/DefaultUserTokenManager.java
Patch:
@@ -265,7 +265,7 @@ public void touch(String token) {
     public void checkExpiredToken() {
         for (SimpleUserToken token : tokenStorage.values()) {
             checkTimeout(token);
-            if (token.isExpired()) {
+            if (token!=null&&token.isExpired()) {
                 signOutByToken(token.getToken());
             }
         }

File: hsweb-authorization/hsweb-authorization-api/src/main/java/org/hswebframework/web/authorization/token/event/UserTokenRemovedEvent.java
Patch:
@@ -5,14 +5,14 @@
 import org.springframework.context.ApplicationEvent;
 
 public class UserTokenRemovedEvent extends ApplicationEvent implements AuthorizationEvent {
-    private UserToken detail;
+
+    private static final long serialVersionUID = -6662943150068863177L;
 
     public UserTokenRemovedEvent(UserToken token) {
         super(token);
-        this.detail = detail;
     }
 
     public UserToken getDetail() {
-        return detail;
+        return ((UserToken) getSource());
     }
 }

File: hsweb-commons/hsweb-commons-dao/hsweb-commons-dao-mybatis/src/main/java/org/hswebframework/web/dao/mybatis/dynamic/DynamicSqlSessionFactory.java
Patch:
@@ -88,6 +88,7 @@ public Configuration getConfiguration() {
         return configuration;
     }
 
+    @SuppressWarnings("unchecked")
     private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {
         Transaction tx = null;
         try {

File: hsweb-datasource/hsweb-datasource-api/src/main/java/org/hswebframework/web/datasource/DynamicDataSourceProxy.java
Patch:
@@ -17,7 +17,7 @@ public class DynamicDataSourceProxy implements DynamicDataSource {
 
     private String id;
 
-    private DatabaseType databaseType;
+    private volatile DatabaseType databaseType;
 
     private DataSource proxy;
 

File: hsweb-datasource/hsweb-datasource-api/src/main/java/org/hswebframework/web/datasource/service/DataSourceCache.java
Patch:
@@ -1,5 +1,6 @@
 package org.hswebframework.web.datasource.service;
 
+import lombok.extern.slf4j.Slf4j;
 import org.hswebframework.web.datasource.DynamicDataSource;
 import org.hswebframework.web.datasource.exception.DataSourceClosedException;
 
@@ -10,6 +11,7 @@
  *
  * @author zhouhao
  */
+@Slf4j
 public class DataSourceCache {
     private long hash;
 
@@ -29,6 +31,7 @@ public DynamicDataSource getDataSource() {
                 //等待初始化完成
                 initLatch.await();
             } catch (InterruptedException ignored) {
+                log.warn(ignored.getMessage(),ignored);
             } finally {
                 initLatch = null;
             }

File: hsweb-datasource/hsweb-datasource-jta/src/main/java/org/hswebframework/web/datasource/jta/JtaDynamicDataSourceService.java
Patch:
@@ -21,8 +21,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * TODO 完成注释
- *
  * @author zhouhao
  */
 public class JtaDynamicDataSourceService extends AbstractDynamicDataSourceService {
@@ -101,8 +99,9 @@ public void closeDataSource() {
             //初始化状态判断
             executor.execute(() -> {
                 try {
-                    Thread.sleep(config.getInitTimeout() * 1000);
+                    Thread.sleep(config.getInitTimeout() * 1000L);
                 } catch (InterruptedException ignored) {
+                    logger.warn(ignored.getMessage(), ignored);
                 } finally {
                     if (successCounter.get() == 0) {
                         // 初始化超时,认定为失败

File: hsweb-system/hsweb-system-config/hsweb-system-config-entity/src/main/java/org/hswebframework/web/entity/config/SimpleConfigEntity.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.stream.Collectors;
 
 /**
- * TODO 完成注释
- *
  * @author zhouhao
  */
 public class SimpleConfigEntity extends SimpleGenericEntity<String> implements ConfigEntity {
@@ -51,7 +49,7 @@ public class SimpleConfigEntity extends SimpleGenericEntity<String> implements C
     @NotNull
     private String creatorId;
 
-    private Map<String, ConfigContent> cache;
+    private volatile Map<String, ConfigContent> cache;
 
     @Override
     public String getCreatorId() {

File: hsweb-system/hsweb-system-dictionary/hsweb-system-dictionary-service/hsweb-system-dictionary-service-simple/src/main/java/org/hswebframework/web/service/dictionary/simple/parser/ScriptSingleDictParser.java
Patch:
@@ -10,8 +10,6 @@
 import java.util.Optional;
 
 /**
- * TODO 完成注释
- *
  * @author zhouhao
  */
 public class ScriptSingleDictParser implements SingleDictParser {
@@ -31,7 +29,7 @@ public Optional<String> parse(String target, Object context) {
             }
             Object result = engine.execute(scriptId, vars).getIfSuccess();
             if (result == null) {
-                return null;
+                return Optional.empty();
             }
             return Optional.of(String.valueOf(result));
         } catch (Exception e) {

File: hsweb-authorization/hsweb-authorization-jwt/src/main/java/org/hswebframework/web/authorization/jwt/JwtTokenParser.java
Patch:
@@ -14,7 +14,8 @@
 import javax.servlet.http.HttpServletRequest;
 
 /**
- * Created by zhouhao on 2017/8/30.
+ * @see UserTokenParser
+ * @since 3.0
  */
 public class JwtTokenParser implements UserTokenParser {
 
@@ -47,7 +48,7 @@ public ParsedToken parseToken(HttpServletRequest request) {
 
                     return null;
                 }
-                return JSON.parseObject(claims.getSubject(), DefaultAuthorizedToken.class);
+                return JSON.parseObject(claims.getSubject(), JwtAuthorizedToken.class);
             } catch (ExpiredJwtException e) {
                 return null;
             } catch (Exception e) {

File: hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-client/src/main/java/org/hswebframework/web/authorization/oauth2/client/simple/session/DefaultOAuth2Session.java
Patch:
@@ -113,6 +113,9 @@ public OAuth2Request request(String uriOrUrl) {
         if (accessTokenInfo == null) {
             authorize();
         }
+        if(accessTokenInfo.isExpire()){
+            refreshToken();
+        }
         OAuth2Request request = createRequest(getRealUrl(uriOrUrl));
         request.onTokenExpired(retry -> {
             refreshToken(); //刷新token

File: hsweb-authorization/hsweb-authorization-basic/src/main/java/org/hswebframework/web/authorization/basic/configuration/AopAuthorizeAutoConfiguration.java
Patch:
@@ -1,11 +1,9 @@
 package org.hswebframework.web.authorization.basic.configuration;
 
-import org.hswebframework.web.authorization.access.DataAccessController;
 import org.hswebframework.web.authorization.basic.aop.AopAuthorizingController;
 import org.hswebframework.web.authorization.basic.aop.AopMethodAuthorizeDefinitionParser;
 import org.hswebframework.web.authorization.basic.aop.DefaultAopMethodAuthorizeDefinitionParser;
 import org.hswebframework.web.authorization.basic.handler.AuthorizingHandler;
-import org.hswebframework.web.authorization.basic.handler.DefaultAuthorizingHandler;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;

File: hsweb-commons/hsweb-commons-utils/src/main/java/org/hswebframework/web/ApplicationContextHolder.java
Patch:
@@ -13,7 +13,7 @@
 public class ApplicationContextHolder {
     private static ApplicationContext context;
 
-    public static final ApplicationContext get() {
+    public static ApplicationContext get() {
         if (null == context) {
             throw new UnsupportedOperationException("ApplicationContext not ready!");
         }
@@ -22,7 +22,8 @@ public static final ApplicationContext get() {
 
     @Autowired
     public void setContext(ApplicationContext context) {
-        if (null == ApplicationContextHolder.context)
+        if (null == ApplicationContextHolder.context) {
             ApplicationContextHolder.context = context;
+        }
     }
 }

File: hsweb-examples/hsweb-examples-simple/src/main/java/org/hswebframework/web/example/simple/SpringBootExample.java
Patch:
@@ -302,5 +302,8 @@ public void run(String... strings) throws Exception {
         relationInfo.setRelationId("leader");
         relationInfoService.insert(relationInfo);
 
+//        relationInfoService
+//                .getRelations("person","王伟")
+//                .findRev("直属上级");
     }
 }

File: hsweb-system/hsweb-system-dynamic-form/hsweb-system-dynamic-form-controller/src/main/java/org/hswebframework/web/controller/form/DynamicFormColumnController.java
Patch:
@@ -24,7 +24,7 @@
 @RequestMapping("${hsweb.web.mappings.dynamic/form/column:dynamic/form/column}")
 @Authorize(permission = "dynamic-form")
 @AccessLogger("动态表单")
-@Api(tags = "dynamic-form", description = "动态表单")
+@Api(tags = "dynamic-form", value = "动态表单")
 public class DynamicFormColumnController {
 
     private DynamicFormService dynamicFormService;

File: hsweb-system/hsweb-system-dynamic-form/hsweb-system-dynamic-form-controller/src/main/java/org/hswebframework/web/controller/form/DynamicFormController.java
Patch:
@@ -26,7 +26,7 @@
 @RequestMapping("${hsweb.web.mappings.dynamic/form:dynamic/form}")
 @Authorize(permission = "dynamic-form")
 @AccessLogger("动态表单")
-@Api(tags = "dynamic-form", description = "动态表单")
+@Api(tags = "dynamic-form", value = "动态表单")
 public class DynamicFormController implements SimpleGenericEntityController<DynamicFormEntity, String, QueryParamEntity> {
 
     private DynamicFormService dynamicFormService;

File: hsweb-system/hsweb-system-file/hsweb-system-file-controller/src/main/java/org/hswebframework/web/controller/file/FileController.java
Patch:
@@ -51,6 +51,7 @@
 @RequestMapping("${hsweb.web.mappings.file:file}")
 @Authorize(permission = "file")
 @AccessLogger("文件")
+@SuppressWarnings("all")
 public class FileController {
 
     private FileService fileService;
@@ -87,6 +88,7 @@ public void downloadZip(@PathVariable("name") String name,
                             @RequestParam("data") String dataStr,
                             HttpServletResponse response) throws IOException {
         response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
+
         response.setHeader("Content-disposition", "attachment;filename=" + URLEncoder.encode(name, "utf-8"));
         ZIPWriter writer = Compress.zip();
         List<Map<String, String>> data = (List) JSON.parseArray(dataStr, Map.class);
@@ -245,7 +247,7 @@ public ResponseMessage<FileInfoEntity> upload(@RequestParam("file") MultipartFil
         if (params.get("charset") == null) {
             try {
                 fileName = new String(file.getOriginalFilename().getBytes("ISO-8859-1"), "utf-8");
-            } catch (UnsupportedEncodingException ignore) {
+            } catch (@SuppressWarnings("all")UnsupportedEncodingException ignore) {
             }
         }
         if (logger.isInfoEnabled())

File: hsweb-system/hsweb-system-organizational/hsweb-system-organizational-service/hsweb-system-organizational-service-simple/src/main/java/org/hswebframework/web/service/organizational/simple/SimplePersonService.java
Patch:
@@ -366,7 +366,9 @@ public static <V extends TreeSupportEntity<String>> Set<TreeNode<String>> transf
     @Cacheable(cacheNames = "person", key = "'auth:user-id'+#userId")
     public PersonnelAuthorization getPersonnelAuthorizationByUserId(String userId) {
         PersonEntity entity = createQuery().where(PersonEntity.userId, userId).single();
-        assertNotNull(entity);
+        if (entity == null) {
+            return null;
+        }
         return getPersonnelAuthorizationByPersonId(entity.getId());
     }
 

File: hsweb-system/hsweb-system-organizational/hsweb-system-organizational-service/hsweb-system-organizational-service-simple/src/main/java/org/hswebframework/web/service/organizational/simple/SimplePersonService.java
Patch:
@@ -34,7 +34,7 @@
 import org.hswebframework.web.organizational.authorization.simple.SimplePersonnel;
 import org.hswebframework.web.organizational.authorization.simple.SimplePersonnelAuthorization;
 import org.hswebframework.web.service.DefaultDSLQueryService;
-import org.hswebframework.web.service.EnableCacheGenericEntityService;
+import org.hswebframework.web.service.GenericEntityService;
 import org.hswebframework.web.service.authorization.AuthorizationSettingTypeSupplier;
 import org.hswebframework.web.service.authorization.UserService;
 import org.hswebframework.web.service.organizational.PersonService;
@@ -62,7 +62,7 @@
  */
 @Service("personService")
 @CacheConfig(cacheNames = "person")
-public class SimplePersonService extends EnableCacheGenericEntityService<PersonEntity, String>
+public class SimplePersonService extends GenericEntityService<PersonEntity, String>
         implements PersonService, PersonnelAuthorizationManager, AuthorizationSettingTypeSupplier {
 
     private static String SETTING_TYPE_PERSON   = "person";

File: hsweb-system/hsweb-system-authorization/hsweb-system-authorization-service/hsweb-system-authorization-service-simple/src/main/java/org/hswebframework/web/service/authorization/simple/SimpleUserService.java
Patch:
@@ -163,7 +163,7 @@ public void update(String userId, UserEntity userEntity) {
         tryValidateProperty(!userExists, GenericEntity.id, "{username_exists}");
         List<String> updateProperties = Arrays.asList("name");
         //修改密码
-        if (!StringUtils.hasLength(userEntity.getPassword())) {
+        if (StringUtils.hasLength(userEntity.getPassword())) {
             //密码强度验证
             tryValidateProperty(usernameValidator, UserEntity.password, userEntity.getPassword());
             //密码MD5

File: hsweb-web-concurrent/hsweb-web-concurrent-lock/src/main/java/org/hsweb/concurrent/lock/support/AnnotationLockAopAdvice.java
Patch:
@@ -32,7 +32,7 @@ public class AnnotationLockAopAdvice {
 
     @Autowired
     private LockFactory lockFactory;
-    private ConcurrentMap<String, Lock> lockMap = new ConcurrentHashMap<>();
+    private ConcurrentMap<String, Lock>          lockMap          = new ConcurrentHashMap<>();
     private ConcurrentMap<String, ReadWriteLock> readWriteLockMap = new ConcurrentHashMap<>();
 
     @Autowired(required = false)
@@ -175,8 +175,7 @@ public String getLockName(ProceedingJoinPoint pjp) throws Throwable {
                 }
                 if (expressionScopeBeanMap != null) var.putAll(expressionScopeBeanMap);
                 ExecuteResult result = engine.execute(expressionId, var);
-                if (result.getException() != null) throw result.getException();
-                lockNameStr = result.getResult().toString();
+                lockNameStr = (String) result.getIfSuccess();
             } else {
                 lockNameStr = lockName.value();
             }

File: hsweb-web-core/src/main/java/org/hsweb/web/core/authorize/validator/SimpleAuthorizeValidator.java
Patch:
@@ -55,14 +55,14 @@ public boolean validate(User user, Map<String, Object> param, AuthorizeValidator
                     DynamicScriptEngine engine = DynamicScriptEngineFactory.getEngine(expression.getLanguage());
                     Map<String, Object> var = getExpressionRoot(user);
                     var.putAll(param);
-                    return StringUtils.isTrue(engine.execute(expression.getId(), var).getResult());
+                    return StringUtils.isTrue(engine.execute(expression.getId(), var).get());
                 });
             else
                 access = expressions.stream().anyMatch(expression -> {
                     DynamicScriptEngine engine = DynamicScriptEngineFactory.getEngine(expression.getLanguage());
                     Map<String, Object> var = getExpressionRoot(user);
                     var.putAll(param);
-                    return StringUtils.isTrue(engine.execute(expression.getId(), var).getResult());
+                    return StringUtils.isTrue(engine.execute(expression.getId(), var).get());
                 });
         }
 

File: hsweb-web-service/hsweb-web-service-simple/src/main/java/org/hsweb/web/service/impl/form/validator/GroovyDycBeanValidator.java
Patch:
@@ -35,7 +35,7 @@ public GroovyDycBeanValidator(String className, javax.validation.Validator hiber
     public boolean validateMap(Map<Object, Object> data, Operation operation) {
         ValidateResults results = new ValidateResults();
         try {
-            Class validatorTargetClass = (Class) engine.execute(className, new HashMap<>()).getResult();
+            Class validatorTargetClass = (Class) engine.execute(className, new HashMap<>()).getIfSuccess();
             Object validatorTarget = validatorTargetClass.newInstance();
             Set<ConstraintViolation<Object>> result = new LinkedHashSet<>();
             if (operation == Operation.INSERT) {

File: hsweb-web-concurrent/hsweb-web-concurrent-lock/src/main/java/org/hsweb/concurrent/lock/support/AnnotationLockAopAdvice.java
Patch:
@@ -32,7 +32,7 @@ public class AnnotationLockAopAdvice {
 
     @Autowired
     private LockFactory lockFactory;
-    private ConcurrentMap<String, Lock> lockMap = new ConcurrentHashMap<>();
+    private ConcurrentMap<String, Lock>          lockMap          = new ConcurrentHashMap<>();
     private ConcurrentMap<String, ReadWriteLock> readWriteLockMap = new ConcurrentHashMap<>();
 
     @Autowired(required = false)
@@ -175,8 +175,7 @@ public String getLockName(ProceedingJoinPoint pjp) throws Throwable {
                 }
                 if (expressionScopeBeanMap != null) var.putAll(expressionScopeBeanMap);
                 ExecuteResult result = engine.execute(expressionId, var);
-                if (result.getException() != null) throw result.getException();
-                lockNameStr = result.getResult().toString();
+                lockNameStr = (String) result.getIfSuccess();
             } else {
                 lockNameStr = lockName.value();
             }

File: hsweb-web-core/src/main/java/org/hsweb/web/core/authorize/validator/SimpleAuthorizeValidator.java
Patch:
@@ -55,14 +55,14 @@ public boolean validate(User user, Map<String, Object> param, AuthorizeValidator
                     DynamicScriptEngine engine = DynamicScriptEngineFactory.getEngine(expression.getLanguage());
                     Map<String, Object> var = getExpressionRoot(user);
                     var.putAll(param);
-                    return StringUtils.isTrue(engine.execute(expression.getId(), var).getResult());
+                    return StringUtils.isTrue(engine.execute(expression.getId(), var).get());
                 });
             else
                 access = expressions.stream().anyMatch(expression -> {
                     DynamicScriptEngine engine = DynamicScriptEngineFactory.getEngine(expression.getLanguage());
                     Map<String, Object> var = getExpressionRoot(user);
                     var.putAll(param);
-                    return StringUtils.isTrue(engine.execute(expression.getId(), var).getResult());
+                    return StringUtils.isTrue(engine.execute(expression.getId(), var).get());
                 });
         }
 

File: hsweb-web-service/hsweb-web-service-simple/src/main/java/org/hsweb/web/service/impl/form/validator/GroovyDycBeanValidator.java
Patch:
@@ -35,7 +35,7 @@ public GroovyDycBeanValidator(String className, javax.validation.Validator hiber
     public boolean validateMap(Map<Object, Object> data, Operation operation) {
         ValidateResults results = new ValidateResults();
         try {
-            Class validatorTargetClass = (Class) engine.execute(className, new HashMap<>()).getResult();
+            Class validatorTargetClass = (Class) engine.execute(className, new HashMap<>()).getIfSuccess();
             Object validatorTarget = validatorTargetClass.newInstance();
             Set<ConstraintViolation<Object>> result = new LinkedHashSet<>();
             if (operation == Operation.INSERT) {

File: hsweb-web-controller/src/main/java/org/hsweb/web/controller/system/DatabaseManagerController.java
Patch:
@@ -62,7 +62,7 @@ public ResponseMessage showTables(boolean reload) throws SQLException {
         }
         return ok(cached)
                 .include(RDBTableMetaData.class, "name", "alias", "comment", "columns")
-                .include(RDBColumnMetaData.class, "name", "alias", "comment", "dataType", "notNull", "primaryKey", "properties")
+                .include(RDBColumnMetaData.class, "name", "alias", "comment", "dataType","jdbcType", "javaType", "notNull", "primaryKey", "properties")
                 .onlyData();
     }
 
@@ -98,7 +98,7 @@ public ResponseMessage showTables(@PathVariable("dataSourceId") String dataSourc
             }
             return ok(cached)
                     .include(RDBTableMetaData.class, "name", "alias", "comment", "columns")
-                    .include(RDBColumnMetaData.class, "name", "alias", "comment", "dataType", "notNull", "primaryKey", "properties")
+                    .include(RDBColumnMetaData.class, "name", "alias", "comment", "jdbcType", "javaType", "dataType", "notNull", "primaryKey", "properties")
                     .onlyData();
         } finally {
             DynamicDataSource.useDefault(false);

File: hsweb-web-core/src/main/java/org/hsweb/web/core/session/simple/SimpleHttpSessionManagerAutoConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.hsweb.web.core.session.siample;
+package org.hsweb.web.core.session.simple;
 
 import org.hsweb.web.core.session.HttpSessionManager;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/DynamicFormServiceImpl.java
Patch:
@@ -110,11 +110,11 @@ public TableMetaData parseMeta(Form form) throws Exception {
     public void deploy(Form form) throws Exception {
         TableMetaData metaData = formParser.parse(form);
         initDefaultField(metaData);
-        TableMetaData lastDeployMetaData = null;
+        TableMetaData lastDeployMetaData;
         if (tableMetaParser == null) {
             History history = historyService.selectLastHistoryByType("form.deploy." + form.getName());
             Form lastDeploy = JSON.parseObject(history.getChangeAfter(), Form.class);
-            formParser.parse(lastDeploy);
+            lastDeployMetaData = formParser.parse(lastDeploy);
             initDefaultField(lastDeployMetaData);
         } else {
             lastDeployMetaData = tableMetaParser.parse(form.getName());

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/DefaultFormParser.java
Patch:
@@ -208,6 +208,8 @@ protected boolean validatorSupport(String validator) {
         put("byte", Byte.class);
         put("char", Character.class);
         put("float", Double.class);
+        put("long", Long.class);
+        put("short", Short.class);
         put("date", Date.class);
         put("Date", Date.class);
     }};

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/DynamicFormServiceImpl.java
Patch:
@@ -323,7 +323,7 @@ public Map<String, Object> importExcel(String name, InputStream inputStream) thr
             var.put("headerMapper", headerMapper);
             var.put("excelData", excelData);
             var.put("dataList", dataList);
-            metaData.on("export.excel", var);
+            metaData.on("export.import.before", var);
         } else
             excelData.forEach(data -> {
                 Map<String, Object> newData = new HashMap<>();
@@ -347,7 +347,7 @@ public Map<String, Object> importExcel(String name, InputStream inputStream) thr
                     var.put("headerMapper", headerMapper);
                     var.put("excelData", excelData);
                     var.put("dataList", dataList);
-                    TriggerResult triggerResult = metaData.on("export.excel", var);
+                    TriggerResult triggerResult = metaData.on("export.import.each", var);
                     if (!triggerResult.isSuccess()) {
                         throw new TriggerException(triggerResult.getMessage());
                     }

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/validator/GroovyDycBeanValidator.java
Patch:
@@ -37,8 +37,8 @@ public List valid(Object data, boolean insert) {
             if (!(data instanceof Map)) {
                 throw new ValidationException("数据类型错误!");
             }
-            Object validatorTarget = engine.execute(className + ".instance", new HashMap<>()).getResult();
-            Class validatorTargetClass = validatorTarget.getClass();
+            Class validatorTargetClass = (Class)engine.execute(className, new HashMap<>()).getResult();
+            Object validatorTarget = validatorTargetClass.newInstance();
             Map<String, Object> mapData = ((Map) data);
             Set<ConstraintViolation<Object>> result = new LinkedHashSet<>();
             if (insert) {

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/validator/GroovyDycBeanValidatorFactory.java
Patch:
@@ -86,7 +86,6 @@ public Validator initValidator(TableMetaData metaData) {
         script.append("}");
         try {
             engine.compile(className, script.toString());
-            engine.compile(className + ".instance", "return new "+ className + "();");
         } catch (Exception e) {
             throw new BusinessException("创建动态表单验证器失败!", e, 500);
         }

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/user/UserServiceImpl.java
Patch:
@@ -51,7 +51,6 @@ public User selectByUserName(String username) throws Exception {
     public String insert(User data) throws Exception {
         tryValidPo(data);
         Assert.isNull(selectByUserName(data.getUsername()), "用户已存在!");
-
         data.setU_id(RandomUtil.randomChar(6));
         data.setCreate_date(new Date());
         data.setUpdate_date(new Date());
@@ -82,7 +81,7 @@ public int update(User data) throws Exception {
             data.setPassword(MD5.encode(data.getPassword()));
             userMapper.updatePassword(data);
         }
-        int i = userMapper.update(new UpdateParam<>(data));
+        int i = userMapper.update(new UpdateParam<>(data).excludes("status","password","create_date"));
         if (data.getUserRoles().size() != 0) {
             //删除所有
             userRoleMapper.deleteByUserId(data.getU_id());

File: hsweb-web-controller/src/main/java/org/hsweb/web/controller/DefaultErrorController.java
Patch:
@@ -23,7 +23,7 @@ public class DefaultErrorController implements ErrorController {
     @Autowired
     private ErrorAttributes errorAttributes;
 
-    @RequestMapping(produces = MediaType.TEXT_HTML_VALUE)
+    @RequestMapping
     public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) {
         RequestAttributes requestAttributes = new ServletRequestAttributes(request);
         Map<String, Object> model = errorAttributes.getErrorAttributes(requestAttributes, true);
@@ -32,7 +32,7 @@ public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse re
         return new ModelAndView("error/" + response.getStatus(), model);
     }
 
-    @RequestMapping
+    @RequestMapping(produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE})
     @ResponseBody
     public Object error(HttpServletRequest request, HttpServletResponse response) {
         RequestAttributes requestAttributes = new ServletRequestAttributes(request);

File: hsweb-web-service-interface/src/main/java/org/hsweb/web/service/form/DynamicFormService.java
Patch:
@@ -11,6 +11,8 @@
  */
 public interface DynamicFormService {
 
+    Object parseMeta(Form form) throws Exception;
+
     void deploy(Form form) throws Exception;
 
     void unDeploy(Form form) throws Exception;

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/DefaultFormParser.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
+import org.hibernate.validator.constraints.Length;
 import org.hsweb.web.bean.po.form.Form;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Element;
@@ -21,7 +22,6 @@
  * Created by zhouhao on 16-4-20.
  */
 public class DefaultFormParser implements FormParser {
-
     @Override
     public TableMetaData parse(Form form) {
         String meta = form.getMeta();

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/validator/GroovyDycBeanValidatorFactory.java
Patch:
@@ -56,6 +56,7 @@ public Validator initValidator(TableMetaData metaData) {
         script.append("public class ").append(metaData.getName()).append("{\n");
         boolean hasValidator = false;
         for (FieldMetaData fieldMetaData : metaData.getFields()) {
+            if(fieldMetaData.getValidator().isEmpty())continue;
             for (String ann : fieldMetaData.getValidator()) {
                 hasValidator = true;
                 script.append("\t@").append(ann).append("\n");
@@ -67,6 +68,7 @@ public Validator initValidator(TableMetaData metaData) {
         //没有配置验证器
         if (!hasValidator) return null;
         for (FieldMetaData fieldMetaData : metaData.getFields()) {
+            if(fieldMetaData.getValidator().isEmpty())continue;
             script.append("public ")
                     .append(fieldMetaData.getJavaType().getName()).append(" get")
                     .append(StringUtils.toUpperCaseFirstOne(fieldMetaData.getName()))
@@ -84,7 +86,7 @@ public Validator initValidator(TableMetaData metaData) {
         script.append("}");
         try {
             engine.compile(className, script.toString());
-            engine.compile(className + ".getInstance", "return new " + className + "();");
+            engine.compile(className + ".instance", "return new "+ className + "();");
         } catch (Exception e) {
             throw new BusinessException("创建动态表单验证器失败!", e, 500);
         }

File: hsweb-web-service-impl-common/src/main/java/org/hsweb/web/service/impl/form/FormServiceImpl.java
Patch:
@@ -66,6 +66,7 @@ public String createNewVersion(String oldVersionId) throws Exception {
         old.setVersion(old.getVersion() + 1);
         old.setCreate_date(new Date());
         old.setUpdate_date(null);
+        old.setUsing(false);
         getMapper().insert(new InsertParam<>(old));
         return old.getU_id();
     }

File: hsweb-web-controller/src/main/java/org/hsweb/web/controller/FastJsonHttpMessageConverter.java
Patch:
@@ -32,7 +32,9 @@ public class FastJsonHttpMessageConverter extends AbstractHttpMessageConverter<O
     private SerializerFeature[] features = new SerializerFeature[0];
 
     public FastJsonHttpMessageConverter() {
-        super(new MediaType("application", "json", UTF8), new MediaType("application", "*+json", UTF8));
+        super(new MediaType("application", "json", UTF8),
+                new MediaType("application", "*+json", UTF8),
+                MediaType.APPLICATION_JSON);
     }
 
     @Override

File: hsweb-web-dao-impl-mybatis/src/main/java/org/hsweb/web/mybatis/plgins/pager/PagerInterceptor.java
Patch:
@@ -53,7 +53,7 @@ public Object plugin(Object target) {
             if (obj instanceof QueryParam) {
                 QueryParam param = (QueryParam) obj;
                 PagerHelper helper = pagerHelperBase.get(dialect);
-                if (helper != null) {
+                if (helper != null && !sql.contains("count(0)")) {
                     String newSql = helper.doPaging(param, sql);
                     metaStatementHandler.setValue("delegate.boundSql.sql", newSql);
                 }

File: hsweb-web-websocket/src/main/java/org/hsweb/web/socket/CmdWebSocketHandler.java
Patch:
@@ -54,7 +54,7 @@ public void afterConnectionEstablished(WebSocketSession session) throws Exceptio
 //            return;
 //        }
         for (CmdProcessor processor : processorContainer.getAll()) {
-            processor.onSessionClose(session);
+            processor.onSessionConnect(session);
         }
     }
 

