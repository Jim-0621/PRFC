File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/LibraryLoader.java
Patch:
@@ -36,6 +36,7 @@ private static Context getContext() {
 			try {
 				@SuppressLint("PrivateApi")
 				final Class<?> activityThread = Class.forName("android.app.ActivityThread");
+				@SuppressLint("DiscouragedPrivateApi")
 				final Method currentApplicationMethod = activityThread.getDeclaredMethod("currentApplication");
 				sAppContext = (Context) currentApplicationMethod.invoke(null);
 			} catch (Exception e) {

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/LibraryLoader.java
Patch:
@@ -5,16 +5,16 @@
 
 import androidx.annotation.NonNull;
 
-import com.getkeepsafe.relinker.ReLinker;
-
 import java.lang.reflect.Method;
 
+import pl.droidsonroids.relinker.ReLinker;
+
 /**
  * Helper used to work around native libraries loading on some systems.
  * See <a href="https://medium.com/keepsafe-engineering/the-perils-of-loading-native-libraries-on-android-befa49dce2db">ReLinker</a> for more details.
  */
 public class LibraryLoader {
-	static final String BASE_LIBRARY_NAME = "pl_droidsonroids_gif";
+    private static final String BASE_LIBRARY_NAME = "pl_droidsonroids_gif";
 	@SuppressLint("StaticFieldLeak") //workaround for Android bug
 	private static Context sAppContext;
 

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/LibraryLoader.java
Patch:
@@ -5,16 +5,16 @@
 
 import androidx.annotation.NonNull;
 
-import com.getkeepsafe.relinker.ReLinker;
-
 import java.lang.reflect.Method;
 
+import pl.droidsonroids.relinker.ReLinker;
+
 /**
  * Helper used to work around native libraries loading on some systems.
  * See <a href="https://medium.com/keepsafe-engineering/the-perils-of-loading-native-libraries-on-android-befa49dce2db">ReLinker</a> for more details.
  */
 public class LibraryLoader {
-	static final String BASE_LIBRARY_NAME = "pl_droidsonroids_gif";
+    private static final String BASE_LIBRARY_NAME = "pl_droidsonroids_gif";
 	@SuppressLint("StaticFieldLeak") //workaround for Android bug
 	private static Context sAppContext;
 

File: android-gif-drawable/src/androidTest/java/pl/droidsonroids/gif/GifViewDescriptorTest.java
Patch:
@@ -45,7 +45,7 @@ public void loopCountSetOnGifTextView() {
 		final GifTextView view = (GifTextView) rootView.findViewById(R.id.textView);
 
 		assertThat(view.getBackground()).hasLoopCountEqualTo(TEXT_VIEW_LOOP_COUNT);
-		for (final Drawable drawable : view.getCompoundDrawables()) {
+		for (final Drawable drawable : view.getCompoundDrawablesRelative()) {
 			assertThat(drawable).hasLoopCountEqualTo(TEXT_VIEW_LOOP_COUNT);
 		}
 	}

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -74,7 +74,7 @@ private static long openFd(FileDescriptor fileDescriptor, long offset) throws Gi
 		if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O_MR1) {
 			try {
 				nativeFileDescriptor = getNativeFileDescriptor(fileDescriptor);
-			} catch (ErrnoException e) {
+			} catch (Exception e) {
 				throw new GifIOException(GifError.OPEN_FAILED.errorCode, e.getMessage());
 			}
 		} else {

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -74,7 +74,7 @@ private static long openFd(FileDescriptor fileDescriptor, long offset) throws Gi
 		if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O_MR1) {
 			try {
 				nativeFileDescriptor = getNativeFileDescriptor(fileDescriptor);
-			} catch (ErrnoException e) {
+			} catch (Exception e) {
 				throw new GifIOException(GifError.OPEN_FAILED.errorCode, e.getMessage());
 			}
 		} else {

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -367,7 +367,7 @@ void seekToFrameGL(@IntRange(from = 0) final int index) {
 	}
 
 	private void throwIfFrameIndexOutOfBounds(@IntRange(from = 0) final int index) {
-		final float numberOfFrames = getNumberOfFrames(gifInfoPtr);
+		final int numberOfFrames = getNumberOfFrames(gifInfoPtr);
 		if (index < 0 || index >= numberOfFrames) {
 			throw new IndexOutOfBoundsException("Frame index is not in range <0;" + numberOfFrames + '>');
 		}

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifIOException.java
Patch:
@@ -27,7 +27,7 @@ public String getMessage() {
 		return reason.getFormattedDescription() + ": " + mErrnoMessage;
 	}
 
-	private GifIOException(int errorCode, String errnoMessage) {
+	GifIOException(int errorCode, String errnoMessage) {
 		reason = GifError.fromCode(errorCode);
 		mErrnoMessage = errnoMessage;
 	}

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifTexImage2D.java
Patch:
@@ -18,7 +18,7 @@
  * Note that call {@link #seekToFrame(int)} while decoder thread is running will cause frame change
  * but it can be immediately changed again by decoder thread.
  * <br>
- * Current frame can be copied to 2D texture when needed. See {@link #glTexImage2D(int, int)} and {@link #glTexImage2D(int, int)}.
+ * Current frame can be copied to 2D texture when needed. See {@link #glTexImage2D(int, int)} and {@link #glTexSubImage2D(int, int)}.
  */
 @Beta
 public class GifTexImage2D {

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifTexImage2D.java
Patch:
@@ -18,7 +18,7 @@
  * Note that call {@link #seekToFrame(int)} while decoder thread is running will cause frame change
  * but it can be immediately changed again by decoder thread.
  * <br>
- * Current frame can be copied to 2D texture when needed. See {@link #glTexImage2D(int, int)} and {@link #glTexImage2D(int, int)}.
+ * Current frame can be copied to 2D texture when needed. See {@link #glTexImage2D(int, int)} and {@link #glTexSubImage2D(int, int)}.
  */
 @Beta
 public class GifTexImage2D {

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageButton.java
Patch:
@@ -71,8 +71,8 @@ public GifImageButton(Context context, AttributeSet attrs, int defStyle, int def
 		postInit(GifViewUtils.initImageView(this, attrs, defStyle, defStyleRes));
 	}
 
-	private void postInit(GifViewUtils.InitResult result) {
-		mFreezesAnimation = result.mFreezesAnimation;
+	private void postInit(GifViewUtils.GifImageViewAttributes result) {
+		mFreezesAnimation = result.freezesAnimation;
 		if (result.mSourceResId > 0) {
 			super.setImageResource(result.mSourceResId);
 		}

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageView.java
Patch:
@@ -71,8 +71,8 @@ public GifImageView(Context context, AttributeSet attrs, int defStyle, int defSt
 		postInit(GifViewUtils.initImageView(this, attrs, defStyle, defStyleRes));
 	}
 
-	private void postInit(GifViewUtils.InitResult result) {
-		mFreezesAnimation = result.mFreezesAnimation;
+	private void postInit(GifViewUtils.GifImageViewAttributes result) {
+		mFreezesAnimation = result.freezesAnimation;
 		if (result.mSourceResId > 0) {
 			super.setImageResource(result.mSourceResId);
 		}

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageButton.java
Patch:
@@ -71,8 +71,8 @@ public GifImageButton(Context context, AttributeSet attrs, int defStyle, int def
 		postInit(GifViewUtils.initImageView(this, attrs, defStyle, defStyleRes));
 	}
 
-	private void postInit(GifViewUtils.InitResult result) {
-		mFreezesAnimation = result.mFreezesAnimation;
+	private void postInit(GifViewUtils.GifImageViewAttributes result) {
+		mFreezesAnimation = result.freezesAnimation;
 		if (result.mSourceResId > 0) {
 			super.setImageResource(result.mSourceResId);
 		}

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifImageView.java
Patch:
@@ -71,8 +71,8 @@ public GifImageView(Context context, AttributeSet attrs, int defStyle, int defSt
 		postInit(GifViewUtils.initImageView(this, attrs, defStyle, defStyleRes));
 	}
 
-	private void postInit(GifViewUtils.InitResult result) {
-		mFreezesAnimation = result.mFreezesAnimation;
+	private void postInit(GifViewUtils.GifImageViewAttributes result) {
+		mFreezesAnimation = result.freezesAnimation;
 		if (result.mSourceResId > 0) {
 			super.setImageResource(result.mSourceResId);
 		}

File: android-gif-drawable/src/androidTest/java/pl/droidsonroids/gif/ErrnoMessageTest.java
Patch:
@@ -10,7 +10,6 @@
 
 import java.io.File;
 
-
 @RunWith(AndroidJUnit4.class)
 public class ErrnoMessageTest {
 

File: android-gif-drawable/src/androidTest/java/pl/droidsonroids/gif/AllocationByteCountTest.java
Patch:
@@ -15,7 +15,7 @@
 public class AllocationByteCountTest {
 
 	@Test
-	public void testAllocationByteCountConsistency() throws Exception {
+	public void allocationByteCountIsConsistent() throws Exception {
 		final Resources resources = InstrumentationRegistry.getContext().getResources();
 		final GifDrawable drawable = new GifDrawable(resources, R.raw.test);
 		final GifAnimationMetaData metaData = new GifAnimationMetaData(resources, R.raw.test);

File: android-gif-drawable/src/androidTest/java/pl/droidsonroids/gif/InputStreamTest.java
Patch:
@@ -25,7 +25,7 @@ public class InputStreamTest {
 	public MockWebServer mMockWebServer = new MockWebServer();
 
 	@Test
-	public void testGifDrawableCreationFromInputStream() throws Exception {
+	public void gifDrawableCreatedFromInputStream() throws Exception {
 		final InputStream originalStream = InstrumentationRegistry.getContext().getResources().openRawResource(R.raw.test);
 		mMockWebServer.enqueue(new MockResponse().setChunkedBody(new Buffer().readFrom(originalStream), 1 << 8));
 

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDrawableBuilder.java
Patch:
@@ -43,9 +43,11 @@ public class GifDrawableBuilder {
 	 * Note that this call will overwrite sample size set previously by {@link #options(GifOptions)}
 	 *
 	 * @param sampleSize the sample size
+	 * @return this builder instance, to chain calls
 	 */
-	public void sampleSize(@IntRange(from = 1, to = Character.MAX_VALUE) final int sampleSize) {
+	public GifDrawableBuilder sampleSize(@IntRange(from = 1, to = Character.MAX_VALUE) final int sampleSize) {
 		mOptions.setInSampleSize(sampleSize);
+		return this;
 	}
 
 	/**

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifError.java
Patch:
@@ -92,7 +92,7 @@ public enum GifError {
 	/**
 	 * Input source rewind has failed, animation is stopped.
 	 */
-	REWIND_FAILED(1004, "Input source rewind has failed, animation is stopped"),
+	REWIND_FAILED(1004, "Input source rewind failed, animation stopped"),
 	/**
 	 * Invalid and/or indirect byte buffer specified.
 	 */

File: android-gif-drawable/src/main/java/pl/droidsonroids/gif/GifDecoder.java
Patch:
@@ -94,7 +94,7 @@ public void seekToFrame(@IntRange(from = 0, to = Integer.MAX_VALUE) final int fr
 	/**
 	 * See {@link GifDrawable#getAllocationByteCount()}
 	 *
-	 * @return size of the allocated memory used to store pixels of this object
+	 * @return possible size of the memory needed to store pixels of this object
 	 */
 	public long getAllocationByteCount() {
 		return mGifInfoHandle.getAllocationByteCount();

File: src/main/java/pl/droidsonroids/gif/GifAnimationMetaData.java
Patch:
@@ -7,10 +7,9 @@
 import android.net.Uri;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.annotation.DrawableRes;
+import android.support.annotation.AnyRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
 
 import java.io.File;
 import java.io.FileDescriptor;
@@ -42,7 +41,7 @@ public class GifAnimationMetaData implements Serializable, Parcelable {
 	 * @throws java.io.IOException                             when opening failed
 	 * @throws NullPointerException                            if res is null
 	 */
-	public GifAnimationMetaData(@NonNull Resources res, @DrawableRes @RawRes int id) throws Resources.NotFoundException, IOException {
+	public GifAnimationMetaData(@NonNull Resources res, @AnyRes int id) throws Resources.NotFoundException, IOException {
 		this(res.openRawResourceFd(id));
 	}
 

File: src/main/java/pl/droidsonroids/gif/LibraryLoader.java
Patch:
@@ -9,7 +9,7 @@
  * Helper used to work around native libraries loading on some systems.
  * See <a href="https://medium.com/keepsafe-engineering/the-perils-of-loading-native-libraries-on-android-befa49dce2db">ReLinker</a> for more details.
  */
-class LibraryLoader {
+public class LibraryLoader {
 	static final String SURFACE_LIBRARY_NAME = "pl_droidsonroids_gif_surface";
 	static final String BASE_LIBRARY_NAME = "pl_droidsonroids_gif";
 	private static Context sAppContext;

File: src/main/java/pl/droidsonroids/gif/GifDecoder.java
Patch:
@@ -72,7 +72,7 @@ public long getSourceLength() {
 	 *
 	 * @param position position to seek to in milliseconds
 	 * @param buffer   the frame buffer
-	 * @throws IllegalArgumentException if <code>position</code>&lt;0 or <code>buffer</code> is recycled
+	 * @throws IllegalArgumentException if {@code position < 0 }or {@code buffer} is recycled
 	 */
 	public void seekToTime(@IntRange(from = 0, to = Integer.MAX_VALUE) final int position, @NonNull final Bitmap buffer) {
 		checkBuffer(buffer);
@@ -84,7 +84,7 @@ public void seekToTime(@IntRange(from = 0, to = Integer.MAX_VALUE) final int pos
 	 *
 	 * @param frameIndex position to seek to in milliseconds
 	 * @param buffer     the frame buffer
-	 * @throws IllegalArgumentException if <code>frameIndex</code>&lt;0 or <code>buffer</code> is recycled
+	 * @throws IllegalArgumentException if {@code frameIndex < 0} or {@code buffer} is recycled
 	 */
 	public void seekToFrame(@IntRange(from = 0, to = Integer.MAX_VALUE) final int frameIndex, @NonNull final Bitmap buffer) {
 		checkBuffer(buffer);
@@ -105,7 +105,7 @@ public long getAllocationByteCount() {
 	 *
 	 * @param index index of the frame
 	 * @return duration of the given frame in milliseconds
-	 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= number of frames
+	 * @throws IndexOutOfBoundsException if {@code index < 0 || index >= <number of frames>}
 	 */
 	public int getFrameDuration(@IntRange(from = 0) int index) {
 		return mGifInfoHandle.getFrameDuration(index);

File: src/main/java/pl/droidsonroids/gif/GifTexImage2D.java
Patch:
@@ -47,7 +47,7 @@ public GifTexImage2D(final InputSource inputSource, @Nullable GifOptions options
 	 *
 	 * @param index index of the frame
 	 * @return duration of the given frame in milliseconds
-	 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= number of frames
+	 * @throws IndexOutOfBoundsException if {@code index < 0 || index >= <number of frames>}
 	 */
 	public int getFrameDuration(@IntRange(from = 0) int index) {
 		return mGifInfoHandle.getFrameDuration(index);
@@ -57,7 +57,7 @@ public int getFrameDuration(@IntRange(from = 0) int index) {
 	 * Seeks to given frame
 	 *
 	 * @param index index of the frame
-	 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= number of frames
+	 * @throws IndexOutOfBoundsException if {@code index < 0 || index >= <number of frames>}
 	 */
 	public void seekToFrame(@IntRange(from = 0) int index) {
 		mGifInfoHandle.seekToFrameGL(index);

File: src/main/java/pl/droidsonroids/gif/GifViewSavedState.java
Patch:
@@ -30,7 +30,7 @@ private GifViewSavedState(Parcel in) {
 			mStates[i] = in.createLongArray();
 	}
 
-	public GifViewSavedState(Parcelable superState, long[] savedState) {
+	GifViewSavedState(Parcelable superState, long[] savedState) {
 		super(superState);
 		mStates = new long[1][];
 		mStates[0] = savedState;

File: src/main/java/pl/droidsonroids/gif/RenderTask.java
Patch:
@@ -19,7 +19,7 @@ public void doWork() {
 			mGifDrawable.mNextFrameRenderTime = SystemClock.uptimeMillis() + invalidationDelay;
 			if (mGifDrawable.isVisible() && mGifDrawable.mIsRunning && !mGifDrawable.mIsRenderingTriggeredOnDraw) {
 				mGifDrawable.mExecutor.remove(this);
-				mGifDrawable.mSchedule = mGifDrawable.mExecutor.schedule(this, invalidationDelay, TimeUnit.MILLISECONDS);
+				mGifDrawable.mRenderTaskSchedule = mGifDrawable.mExecutor.schedule(this, invalidationDelay, TimeUnit.MILLISECONDS);
 			}
 			if (!mGifDrawable.mListeners.isEmpty() && mGifDrawable.getCurrentFrameIndex() == mGifDrawable.mNativeInfoHandle.getNumberOfFrames() - 1) {
 				mGifDrawable.mInvalidationHandler.sendEmptyMessageAtTime(mGifDrawable.getCurrentLoop(), mGifDrawable.mNextFrameRenderTime);

File: src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -113,7 +113,7 @@ private GifInfoHandle() {
 
     private static native int getHeight(long gifFileInPtr);
 
-    private native int getNumberOfFrames(long gifInfoPtr);
+    private static native int getNumberOfFrames(long gifInfoPtr);
 
     GifInfoHandle(InputStream stream, boolean justDecodeMetaData) throws GifIOException {
         if (!stream.markSupported()) {

File: src/main/java/pl/droidsonroids/gif/GifDecoder.java
Patch:
@@ -46,7 +46,7 @@ public int getLoopCount() {
     /**
      * See {@link GifDrawable#getInputSourceByteCount()}
      *
-     * @return loop count, 0 means that animation is infinite
+     * @return number of bytes backed by input source or -1 if it is unknown
      */
     public long getSourceLength() {
         return mGifInfoHandle.getSourceLength();
@@ -56,6 +56,7 @@ public long getSourceLength() {
      * See {@link GifDrawable#seekTo(int)}
      *
      * @param position position to seek to in milliseconds
+     * @param buffer the frame buffer
      * @throws IllegalArgumentException if <code>position</code>&lt;0 or <code>buffer</code> is recycled
      */
     public void seekToTime(@IntRange(from = 0, to = Integer.MAX_VALUE) final int position, @NonNull final Bitmap buffer) {
@@ -67,6 +68,7 @@ public void seekToTime(@IntRange(from = 0, to = Integer.MAX_VALUE) final int pos
      * See {@link GifDrawable#seekToFrame(int)}
      *
      * @param frameIndex position to seek to in milliseconds
+     * @param buffer the frame buffer
      * @throws IllegalArgumentException if <code>frameIndex</code>&lt;0 or <code>buffer</code> is recycled
      */
     public void seekToFrame(@IntRange(from = 0, to = Integer.MAX_VALUE) final int frameIndex, @NonNull final Bitmap buffer) {

File: src/main/java/pl/droidsonroids/gif/GifTextureView.java
Patch:
@@ -326,7 +326,7 @@ public void setSpeed(@FloatRange(from = 0, fromInclusive = false) float factor)
 
     /**
      * Returns last {@link IOException} occurred during loading or playing GIF (in such case only {@link GifIOException}
-     * can be returned. Null is returned when source is not, surface was not yet created or no error
+     * can be returned. Null is returned when source is not set, surface was not yet created or no error
      * occurred.
      *
      * @return exception occurred during loading or playing GIF or null
@@ -342,7 +342,7 @@ public IOException getIOException() {
 
     /**
      * Controls how the image should be resized or moved to match the size
-     * of this ImageView.
+     * of this GifTextureView.
      *
      * @param scaleType The desired scaling mode.
      */

File: src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -39,9 +39,7 @@ private GifInfoHandle(long gifInfoPtr, int width, int height, int frameCount) {
     static final GifInfoHandle NULL_INFO = new GifInfoHandle(0, 0, 0, 0);
 
     static {
-        if (!WorkaroundLibraryLoader.areLibrariesLoaded) {
-            System.loadLibrary("pl_droidsonroids_gif");
-        }
+        LibraryLoader.loadLibrary(null, LibraryLoader.BASE_LIBRARY_NAME);
     }
 
     static native GifInfoHandle openFd(FileDescriptor fd, long offset, boolean justDecodeMetaData) throws

File: src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -39,7 +39,9 @@ private GifInfoHandle(long gifInfoPtr, int width, int height, int frameCount) {
     static final GifInfoHandle NULL_INFO = new GifInfoHandle(0, 0, 0, 0);
 
     static {
-        System.loadLibrary("pl_droidsonroids_gif");
+        if (!WorkaroundLibraryLoader.areLibrariesLoaded) {
+            System.loadLibrary("pl_droidsonroids_gif");
+        }
     }
 
     static native GifInfoHandle openFd(FileDescriptor fd, long offset, boolean justDecodeMetaData) throws

File: src/main/java/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -445,7 +445,7 @@ public static GifDrawable createFromResource(@NonNull Resources res, @DrawableRe
 	 * @param factor new speed factor, eg. 0.5f means half speed, 1.0f - normal, 2.0f - double speed
 	 * @throws IllegalArgumentException if factor&lt;=0
 	 */
-	public void setSpeed(@FloatRange(from = 0, fromInclusive = false) float factor) {
+	public void setSpeed(@FloatRange(from = 0, fromInclusive = false) final float factor) {
 		mNativeInfoHandle.setSpeedFactor(factor);
 	}
 
@@ -922,7 +922,7 @@ public boolean isAnimationCompleted() {
 	 * @return duration of the given frame in milliseconds
 	 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= number of frames
 	 */
-	public int getFrameDuration(int index) {
+	public int getFrameDuration(@IntRange(from = 0) final int index) {
 		return mNativeInfoHandle.getFrameDuration(index);
 	}
 

File: src/main/java/pl/droidsonroids/gif/AnimationListener.java
Patch:
@@ -6,6 +6,7 @@
 public interface AnimationListener {
     /**
      * Called when a single loop of the animation is completed.
+     * @param loopNumber 0-based number of the completed loop, 0 for infinite animations
      */
-    void onAnimationCompleted();
+    void onAnimationCompleted(int loopNumber);
 }

File: src/main/java/pl/droidsonroids/gif/RenderTask.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.os.SystemClock;
 
+import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
 class RenderTask extends SafeRunnable {
@@ -25,7 +26,8 @@ public void doWork() {
             mGifDrawable.mNextFrameRenderTime = SystemClock.uptimeMillis() + invalidationDelay;
             if (mGifDrawable.isVisible()) {
                 if (mGifDrawable.mIsRunning && !mGifDrawable.mIsRenderingTriggeredOnDraw) {
-                    mGifDrawable.mExecutor.schedule(this, invalidationDelay, TimeUnit.MILLISECONDS);
+                    mGifDrawable.mExecutor.remove(this);
+                    mGifDrawable.mSchedule = mGifDrawable.mExecutor.schedule(this, invalidationDelay, TimeUnit.MILLISECONDS);
                 }
             }
             if (!mGifDrawable.mListeners.isEmpty() && mGifDrawable.getCurrentFrameIndex() == mGifDrawable.mNativeInfoHandle.frameCount - 1) {

File: src/main/java/pl/droidsonroids/gif/SafeRunnable.java
Patch:
@@ -26,5 +26,5 @@ public final void run() {
         }
     }
 
-    protected abstract void doWork();
+    abstract void doWork();
 }

File: src/main/java/pl/droidsonroids/gif/GifTextureView.java
Patch:
@@ -42,6 +42,9 @@
  */
 @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
 public class GifTextureView extends TextureView {
+    static {
+        System.loadLibrary("pl_droidsonroids_gif_surface");
+    }
 
     private ScaleType mScaleType = ScaleType.FIT_CENTER;
     private final Matrix mTransform = new Matrix();

File: src/main/java/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -360,6 +360,7 @@ public int getLoopCount() {
 
     /**
      * Sets loop count of the animation. Loop count must be in range &lt;0 ,65535&gt;
+     *
      * @param loopCount loop count, 0 means infinity
      */
     public void setLoopCount(final int loopCount) {
@@ -705,7 +706,7 @@ public void draw(Canvas canvas) {
         }
 
         if (mIsRenderingTriggeredOnDraw && mIsRunning && mNextFrameRenderTime != Long.MIN_VALUE) {
-            final long renderDelay = Math.max(0, mNextFrameRenderTime - SystemClock.elapsedRealtime());
+            final long renderDelay = Math.max(0, mNextFrameRenderTime - SystemClock.uptimeMillis());
             mNextFrameRenderTime = Long.MIN_VALUE;
             mExecutor.schedule(mRenderTask, renderDelay, TimeUnit.MILLISECONDS);
         }

File: src/main/java/pl/droidsonroids/gif/MultiCallback.java
Patch:
@@ -3,7 +3,9 @@
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.Drawable.Callback;
 import android.support.annotation.NonNull;
+import android.util.Log;
 import android.view.View;
+import android.widget.ImageView;
 
 import java.lang.ref.WeakReference;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -25,7 +27,7 @@ public void invalidateDrawable(final Drawable who) {
             final ViewWeakReference reference = mViewList.get(i);
             final View view = reference.get();
             if (view != null) {
-                view.invalidate();
+                view.invalidateDrawable(who);
             } else {
                 // Always remove null references to reduce Set size
                 mViewList.remove(reference);

File: src/main/java/pl/droidsonroids/gif/GifTextureView.java
Patch:
@@ -52,6 +52,7 @@ public class GifTextureView extends TextureView {
 
     public GifTextureView(Context context) {
         super(context);
+        init(null, 0, 0);
     }
 
     public GifTextureView(Context context, AttributeSet attrs) {
@@ -282,6 +283,7 @@ protected void onDetachedFromWindow() {
      * @param inputSource new animation source, may be null
      */
     public synchronized void setInputSource(@Nullable InputSource inputSource) {
+        mRenderThread.dispose();
         mInputSource = inputSource;
         mRenderThread = new RenderThread();
         if (inputSource != null) {

File: src/main/java/pl/droidsonroids/gif/RenderTask.java
Patch:
@@ -31,9 +31,9 @@ public void doWork() {
         } else {
             mGifDrawable.mNextFrameRenderTime = Long.MIN_VALUE;
             mGifDrawable.mIsRunning = false;
-            if (!mGifDrawable.mListeners.isEmpty()) {
-                mGifDrawable.scheduleSelf(mNotifyListenersTask, 0L);
-            }
+        }
+        if (!mGifDrawable.mListeners.isEmpty() && mGifDrawable.getCurrentFrameIndex() == mGifDrawable.mNativeInfoHandle.frameCount - 1) {
+            mGifDrawable.scheduleSelf(mNotifyListenersTask, 0L);
         }
         if (mGifDrawable.isVisible() && !mGifDrawable.mInvalidationHandler.hasMessages(0)) {
             mGifDrawable.mInvalidationHandler.sendEmptyMessageAtTime(0, 0);

File: src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -45,7 +45,7 @@ private GifInfoHandle(long gifInfoPtr, int width, int height, int frameCount) {
     static native GifInfoHandle openStream(InputStream stream, boolean justDecodeMetaData) throws GifIOException;
     static native GifInfoHandle openFile(String filePath, boolean justDecodeMetaData) throws GifIOException;
     private static native long renderFrame(long gifFileInPtr, Bitmap frameBuffer);
-    private static native void bindSurface(long gifInfoPtr, Surface surface, long[] savedState, boolean isOpaque, boolean wasOpaque);
+    private static native void bindSurface(long gifInfoPtr, Surface surface, long[] savedState, boolean isOpaque);
     private static native void free(long gifFileInPtr);
     private static native boolean reset(long gifFileInPtr);
     private static native void setSpeedFactor(long gifFileInPtr, float factor);
@@ -94,8 +94,8 @@ synchronized long renderFrame(Bitmap frameBuffer) {
         return renderFrame(gifInfoPtr, frameBuffer);
     }
 
-    void bindSurface(Surface surface, long[] savedState, boolean isOpaque, boolean wasOpaque) {
-        bindSurface(gifInfoPtr, surface, savedState, isOpaque, wasOpaque);
+    void bindSurface(Surface surface, long[] savedState, boolean isOpaque) {
+        bindSurface(gifInfoPtr, surface, savedState, isOpaque);
     }
 
     synchronized void recycle() {

File: src/main/java/pl/droidsonroids/gif/InputSource.java
Patch:
@@ -148,7 +148,7 @@ public AssetSource(@NonNull AssetManager assetManager, @NonNull String assetName
 
         @Override
         GifInfoHandle open() throws IOException {
-            return GifInfoHandle.openAssetFileDescriptor(mAssetManager.openNonAssetFd(mAssetName), false);
+            return GifInfoHandle.openAssetFileDescriptor(mAssetManager.openFd(mAssetName), false);
         }
     }
 

File: src/main/java/pl/droidsonroids/gif/GifViewSavedState.java
Patch:
@@ -54,7 +54,7 @@ public GifViewSavedState[] newArray(int size) {
     };
 
     void setPosition(Drawable drawable, int i) {
-        if (drawable instanceof GifDrawable && mPositions[i] >= 0) {
+        if (drawable instanceof GifDrawable && mPositions[i] > 0) {
             ((GifDrawable) drawable).seekTo(mPositions[i]);
         }
     }

File: src/main/java/pl/droidsonroids/gif/GifTextureView.java
Patch:
@@ -186,9 +186,8 @@ public void run() {
                     continue;
                 }
                 final Surface surface = new Surface(surfaceTexture);
-                //mGifInfoHandle.reset();
                 try {
-                    Log.e("libgif", "binding");
+                    Log.e("libgif", "binding "+mStartPosition);
                     mGifInfoHandle.bindSurface(surface, mStartPosition);
                 } finally {
                     surface.release();

File: src/main/java/pl/droidsonroids/gif/GifError.java
Patch:
@@ -96,7 +96,8 @@ public enum GifError {
     /**
      * Human readable description of the error
      */
-    @NonNull public final String description;
+    @NonNull
+    public final String description;
     private int errorCode;
 
     GifError(int code, @NonNull String description) {

File: src/main/java/pl/droidsonroids/gif/GifIOException.java
Patch:
@@ -14,15 +14,16 @@ public class GifIOException extends IOException {
     /**
      * Reason which caused an exception
      */
-    @NonNull public final GifError reason;
+    @NonNull
+    public final GifError reason;
 
     private GifIOException(@NonNull GifError reason) {
         super(reason.getFormattedDescription());
         this.reason = reason;
     }
 
     @SuppressWarnings("UnusedDeclaration")
-    //invoked from native code
+        //invoked from native code
     GifIOException(int errorCode) {
         this(GifError.fromCode(errorCode));
     }

File: src/main/java/pl/droidsonroids/gif/GifImageButton.java
Patch:
@@ -128,6 +128,7 @@ public void onRestoreInstanceState(Parcelable state) {
     /**
      * Sets whether animation position is saved in {@link #onSaveInstanceState()} and restored
      * in {@link #onRestoreInstanceState(Parcelable)}
+     *
      * @param freezesAnimation whether animation position is saved
      */
     public void setFreezesAnimation(boolean freezesAnimation) {

File: src/main/java/pl/droidsonroids/gif/GifImageView.java
Patch:
@@ -128,6 +128,7 @@ public void onRestoreInstanceState(Parcelable state) {
     /**
      * Sets whether animation position is saved in {@link #onSaveInstanceState()} and restored
      * in {@link #onRestoreInstanceState(Parcelable)}
+     *
      * @param freezesAnimation whether animation position is saved
      */
     public void setFreezesAnimation(boolean freezesAnimation) {

File: src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -98,7 +98,9 @@ static GifInfoHandle openAssetFileDescriptor(AssetFileDescriptor afd, boolean ju
 
     static GifInfoHandle openUri(ContentResolver resolver, Uri uri, boolean justDecodeMetaData) throws IOException {
         if (ContentResolver.SCHEME_FILE.equals(uri.getScheme())) //workaround for #128
+        {
             return openFile(uri.getPath(), justDecodeMetaData);
+        }
         return openAssetFileDescriptor(resolver.openAssetFileDescriptor(uri, "r"), justDecodeMetaData);
     }
 

File: src/main/java/pl/droidsonroids/gif/GifTextView.java
Patch:
@@ -219,6 +219,7 @@ public void onRestoreInstanceState(Parcelable state) {
     /**
      * Sets whether animation position is saved in {@link #onSaveInstanceState()} and restored
      * in {@link #onRestoreInstanceState(Parcelable)}. This is applicable to all compound drawables.
+     *
      * @param freezesAnimation whether animation position is saved
      */
     public void setFreezesAnimation(boolean freezesAnimation) {

File: src/main/java/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -404,9 +404,6 @@ public static GifDrawable createFromResource(Resources res, int resourceId) {
      * @throws IllegalArgumentException if factor&lt;=0
      */
     public void setSpeed(float factor) {
-        if (factor <= 0f) {
-            throw new IllegalArgumentException("Speed factor is not positive");
-        }
         mNativeInfoHandle.setSpeedFactor(factor);
     }
 

File: src/main/java/pl/droidsonroids/gif/GifInfoHandle.java
Patch:
@@ -144,6 +144,9 @@ synchronized int getNativeErrorCode() {
     }
 
     synchronized void setSpeedFactor(float factor) {
+        if (factor <= 0f || Float.isNaN(factor)) {
+            throw new IllegalArgumentException("Speed factor is not positive");
+        }
         setSpeedFactor(gifInfoPtr, factor);
     }
 

File: src/main/java/pl/droidsonroids/gif/GifViewUtils.java
Patch:
@@ -64,8 +64,8 @@ static boolean setResource(ImageView view, boolean isSrc, int resId) {
     }
 
     static boolean isFreezingAnimation(View view, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
-        final TypedArray gifViewAttributes = view.getContext().obtainStyledAttributes(attrs, R.styleable.GifView, defStyleAttr, defStyleRes);
-        boolean freezesAnimation = gifViewAttributes.getBoolean(R.styleable.GifView_freezesAnimation, false);
+        final TypedArray gifViewAttributes = view.getContext().obtainStyledAttributes(attrs, R.styleable.GifTextureView, defStyleAttr, defStyleRes);
+        boolean freezesAnimation = gifViewAttributes.getBoolean(R.styleable.GifTextureView_freezesAnimation, false);
         gifViewAttributes.recycle();
         return freezesAnimation;
     }

File: src/main/java/pl/droidsonroids/gif/GifAnimationMetaData.java
Patch:
@@ -159,7 +159,7 @@ private GifAnimationMetaData(final GifInfoHandle gifInfoHandle) {
         gifInfoHandle.recycle();
         mWidth = gifInfoHandle.width;
         mHeight = gifInfoHandle.height;
-        mImageCount = gifInfoHandle.imageCount;
+        mImageCount = gifInfoHandle.frameCount;
     }
 
     /**

File: src/main/java/pl/droidsonroids/gif/RenderTask.java
Patch:
@@ -34,6 +34,8 @@ public void doWork() {
                 mGifDrawable.unscheduleSelf(mGifDrawable.mInvalidateTask);
                 mGifDrawable.scheduleSelf(mGifDrawable.mInvalidateTask, 0L);
             }
+        } else {
+            mGifDrawable.mIsRunning = false;
         }
     }
 }

File: src/main/java/pl/droidsonroids/gif/GifAnimationMetaData.java
Patch:
@@ -159,7 +159,7 @@ private GifAnimationMetaData(final GifInfoHandle gifInfoHandle) {
         gifInfoHandle.recycle();
         mWidth = gifInfoHandle.width;
         mHeight = gifInfoHandle.height;
-        mImageCount = gifInfoHandle.imageCount;
+        mImageCount = gifInfoHandle.frameCount;
     }
 
     /**

File: src/main/java/pl/droidsonroids/gif/RenderTask.java
Patch:
@@ -34,6 +34,8 @@ public void doWork() {
                 mGifDrawable.unscheduleSelf(mGifDrawable.mInvalidateTask);
                 mGifDrawable.scheduleSelf(mGifDrawable.mInvalidateTask, 0L);
             }
+        } else {
+            mGifDrawable.mIsRunning = false;
         }
     }
 }

File: src/main/java/pl/droidsonroids/gif/GifAnimationMetaData.java
Patch:
@@ -150,7 +150,7 @@ public GifAnimationMetaData(ByteBuffer buffer) throws IOException {
      * @throws IOException if resolution fails or destination is not a GIF.
      */
     public GifAnimationMetaData(ContentResolver resolver, Uri uri) throws IOException {
-        this(resolver.openAssetFileDescriptor(uri, "r"));
+        this(GifInfoHandle.openUri(resolver, uri, true));
     }
 
     private GifAnimationMetaData(final GifInfoHandle gifInfoHandle) {

File: src/main/java/pl/droidsonroids/gif/GifTextureView.java
Patch:
@@ -102,6 +102,7 @@ private static class RenderThread extends Thread {
             mSurfaceTexture = surfaceTexture;
             mSource = source;
             mStartPosition = startPosition;
+            setPriority(MAX_PRIORITY);
         }
 
         @Override

File: src/main/java/pl/droidsonroids/gif/GifTextureView.java
Patch:
@@ -117,6 +117,7 @@ public void run() {
             Surface surface = new Surface(mSurfaceTexture);
             mGifInfoHandle.bindSurface(surface, mStartPosition);
             surface.release();
+            mGifInfoHandle.recycle();
         }
 
     }

File: src/main/java/pl/droidsonroids/gif/GifTextView.java
Patch:
@@ -124,6 +124,8 @@ public void setBackgroundResource(int resid) {
         setBackgroundInternal(getGifOrDefaultDrawable(resid));
     }
 
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP) //Resources#getDrawable(int, Theme)
+    @SuppressWarnings("deprecation") //Resources#getDrawable(int)
     private Drawable getGifOrDefaultDrawable(int resId) {
         if (resId == 0) {
             return null;
@@ -139,7 +141,6 @@ private Drawable getGifOrDefaultDrawable(int resId) {
         if (Build.VERSION.SDK_INT>=Build.VERSION_CODES.LOLLIPOP)
             return resources.getDrawable(resId, getContext().getTheme());
         else
-            //noinspection deprecation
             return resources.getDrawable(resId);
     }
 

File: src/main/java/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * A {@link Drawable} which can be used to hold GIF images, especially animations.
- * Basic GIF metadata can be also obtained.
+ * Basic GIF metadata can also be examined.
  *
  * @author koral--
  */

File: src/main/java/pl/droidsonroids/gif/RenderTask.java
Patch:
@@ -20,15 +20,15 @@ public void run() {
     public void doWork() {
         final long renderResult = mGifDrawable.mNativeInfoHandle.renderFrame(mGifDrawable.mBuffer);
         final int invalidationDelay = (int) (renderResult >> 1);
+        mGifDrawable.nextFrameRenderTime = System.currentTimeMillis() + invalidationDelay;
         if ((int) (renderResult & 1L) == 1 && !mGifDrawable.mListeners.isEmpty()) {
             mGifDrawable.scheduleSelf(mNotifyListenersTask, 0L);
         }
         if (invalidationDelay >= 0) {
             if (mGifDrawable.isVisible() && mGifDrawable.mIsRunning) {
-                mGifDrawable.mExecutor.schedule(this, invalidationDelay, TimeUnit.MILLISECONDS);
+                mGifDrawable.unscheduleSelf(mGifDrawable.mInvalidateTask);
+                mGifDrawable.scheduleSelf(mGifDrawable.mInvalidateTask, 0L);
             }
-            mGifDrawable.unscheduleSelf(mGifDrawable.mInvalidateTask);
-            mGifDrawable.scheduleSelf(mGifDrawable.mInvalidateTask, 0L);
         }
     }
 }

File: src/main/java/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -379,8 +379,7 @@ public int getLoopCount() {
      */
     @Override
     public String toString() {
-        return String.format(Locale.US, "GIF: size: %dx%d, frames: %d, error: %d", mNativeInfoHandle.width, mNativeInfoHandle.height, mNativeInfoHandle.imageCount,
-                mNativeInfoHandle.getNativeErrorCode());
+        return String.format(Locale.US, "GIF: size: %dx%d, frames: %d, error: %d", mNativeInfoHandle.width, mNativeInfoHandle.height, mNativeInfoHandle.imageCount, mNativeInfoHandle.getNativeErrorCode());
     }
 
     /**
@@ -776,7 +775,6 @@ public boolean isStateful() {
 
     /**
      * Sets whether this drawable is visible.
-     * <p/>
      * When the drawable becomes invisible, it will pause its animation. A
      * subsequent change to visible with <code>restart</code> set to true will
      * restart the animation from the first frame. If <code>restart</code> is

File: src/main/java/pl/droidsonroids/gif/GifAnimationMetaData.java
Patch:
@@ -154,9 +154,9 @@ public GifAnimationMetaData(ContentResolver resolver, Uri uri) throws IOExceptio
     }
 
     private GifAnimationMetaData(final GifInfoHandle gifInfoHandle) {
-        mLoopCount = GifInfoHandle.getLoopCount(gifInfoHandle.gifInfoPtr);
-        mDuration = GifInfoHandle.getDuration(gifInfoHandle.gifInfoPtr);
-        GifInfoHandle.free(gifInfoHandle.gifInfoPtr);
+        mLoopCount = gifInfoHandle.getLoopCount();
+        mDuration = gifInfoHandle.getDuration();
+        gifInfoHandle.recycle();
         mWidth = gifInfoHandle.width;
         mHeight = gifInfoHandle.height;
         mImageCount = gifInfoHandle.imageCount;

File: src/main/java/pl/droidsonroids/gif/GifError.java
Patch:
@@ -8,6 +8,7 @@
  *
  * @author koral--
  */
+@SuppressWarnings("MagicNumber") //error code constants matching native ones
 public enum GifError {
     /**
      * Special value indicating lack of errors

File: src/main/java/pl/droidsonroids/gif/GifAnimationMetaData.java
Patch:
@@ -67,7 +67,7 @@ public GifAnimationMetaData(String filePath) throws IOException {
     }
 
     /**
-     * Equivalent to {@code} Gifmetadata(file.getPath())}
+     * Equivalent to {@code} GifMetadata(file.getPath())}
      *
      * @param file the GIF file
      * @throws IOException          when opening failed

File: src/main/java/pl/droidsonroids/gif/GifError.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Locale;
 
 /**
- * Encapsulation of decoding errors ocurring in native code.
+ * Encapsulation of decoding errors occurring in native code.
  * Three digit codes are equal to GIFLib error codes.
  * @author koral--
  */
@@ -91,7 +91,7 @@ public enum GifError
 	 */
 	UNKNOWN ( -1, "Unknown error" );
 	/**
-	 * Human readable descpription of the error
+	 * Human readable description of the error
 	 */
 	public final String description;
 	private int errorCode;

File: src/main/java/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -449,8 +449,9 @@ public static GifDrawable createFromResource(Resources res, int resourceId) {
 
     /**
      * Sets new animation speed factor.<br>
-     * Note: If animation is in progress ({@link #draw(Canvas)} was already called)
-     * then effects will be visible starting from the next frame. Duration of the currently rendered frame is not affected.
+     * Note: If animation is in progress ({@link #draw(Canvas)}) was already called)
+     * then effects will be visible starting from the next frame. Duration of the currently rendered
+     * frame is not affected.
      *
      * @param factor new speed factor, eg. 0.5f means half speed, 1.0f - normal, 2.0f - double speed
      * @throws IllegalArgumentException if factor&lt;=0

File: src/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -291,7 +291,7 @@ public GifDrawable ( ByteBuffer buffer ) throws IOException
 	 * Like {@link android.graphics.Bitmap#recycle()} this is an advanced call and
 	 * is invoked implicitly by finalizer.
 	 */
-	public void git recycle ()
+	public void recycle ()
 	{
 		mIsRunning = false;
 		int tmpPtr = mGifInfoPtr;

File: src/pl/droidsonroids/gif/GifIOException.java
Patch:
@@ -21,6 +21,7 @@ public class GifIOException extends IOException
 		this.reason = reason;
 	}
 
+    @SuppressWarnings("UnusedDeclaration") // native code only
 	GifIOException ( int errorCode )
 	{
 		this( GifError.fromCode( errorCode ) );

File: src/pl/droidsonroids/gif/GifImageButton.java
Patch:
@@ -96,11 +96,11 @@ else if ( Build.VERSION.SDK_INT >= 16 )
 				setBackgroundDrawable( d );
 			return;
 		}
-		catch ( IOException e )
+		catch ( IOException ignored )
 		{
 			//ignored
 		}
-		catch ( NotFoundException e )
+		catch ( NotFoundException ignored )
 		{
 			//ignored
 		}

File: src/pl/droidsonroids/gif/GifImageView.java
Patch:
@@ -97,11 +97,11 @@ else if ( Build.VERSION.SDK_INT >= 16 )
 				setBackgroundDrawable( d );
 			return;
 		}
-		catch ( IOException e )
+		catch ( IOException ignored )
 		{
 			//ignored
 		}
-		catch ( NotFoundException e )
+		catch ( NotFoundException ignored )
 		{
 			//ignored
 		}

File: src/pl/droidsonroids/gif/GifTextView.java
Patch:
@@ -99,11 +99,11 @@ private Drawable getGifOrDefaultDrawable ( int resId )
 			{
 				return new GifDrawable( resources, resId );
 			}
-			catch ( IOException e )
+			catch ( IOException ignored )
 			{
 				// ignored
 			}
-			catch ( NotFoundException e )
+			catch ( NotFoundException ignored )
 			{
 				//ignored
 			}

File: src/pl/droidsonroids/gif/GifIOException.java
Patch:
@@ -21,6 +21,7 @@ public class GifIOException extends IOException
 		this.reason = reason;
 	}
 
+    @SuppressWarnings("UnusedDeclaration") // native code only
 	GifIOException ( int errorCode )
 	{
 		this( GifError.fromCode( errorCode ) );

File: src/pl/droidsonroids/gif/GifImageButton.java
Patch:
@@ -96,11 +96,11 @@ else if ( Build.VERSION.SDK_INT >= 16 )
 				setBackgroundDrawable( d );
 			return;
 		}
-		catch ( IOException e )
+		catch ( IOException ignored )
 		{
 			//ignored
 		}
-		catch ( NotFoundException e )
+		catch ( NotFoundException ignored )
 		{
 			//ignored
 		}

File: src/pl/droidsonroids/gif/GifImageView.java
Patch:
@@ -97,11 +97,11 @@ else if ( Build.VERSION.SDK_INT >= 16 )
 				setBackgroundDrawable( d );
 			return;
 		}
-		catch ( IOException e )
+		catch ( IOException ignored )
 		{
 			//ignored
 		}
-		catch ( NotFoundException e )
+		catch ( NotFoundException ignored )
 		{
 			//ignored
 		}

File: src/pl/droidsonroids/gif/GifTextView.java
Patch:
@@ -99,11 +99,11 @@ private Drawable getGifOrDefaultDrawable ( int resId )
 			{
 				return new GifDrawable( resources, resId );
 			}
-			catch ( IOException e )
+			catch ( IOException ignored )
 			{
 				// ignored
 			}
-			catch ( NotFoundException e )
+			catch ( NotFoundException ignored )
 			{
 				//ignored
 			}

File: src/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -290,7 +290,7 @@ public int getOpacity ()
 
 	/**
 	 * Starts the animation. Does nothing if GIF is not animated.
-	 * Can be called from background thread.
+	 * Can be called from any thread.
 	 */
 	@Override
 	public void start ()
@@ -302,6 +302,7 @@ public void start ()
 	 * Causes the animation to start over. 
 	 * If animation is stopped any effects will occur after restart.<br>
 	 * If rewinding input source fails then state is not affected.
+	 * Can be called from any thread.
 	 */
 	public void reset ()
 	{
@@ -320,7 +321,7 @@ public void run ()
 
 	/**
 	 * Stops the animation. Does nothing if GIF is not animated.
-	 * Can be called from background thread.
+	 * Can be called from any thread.
 	 */
 	@Override
 	public void stop ()

File: src/pl/droidsonroids/gif/GifError.java
Patch:
@@ -17,8 +17,8 @@ public enum GifError
 	READ_FAILED ( 102, "Failed to read from given input" ),
 	NOT_GIF_FILE ( 103, "Data is not in GIF format" ),
 	NO_SCRN_DSCR ( 104, "No screen descriptor detected" ),
-	NO_IMAG_DSCR ( 105, "No Image Descriptor detected" ),
-	NO_COLOR_MAP ( 106, "Neither global nor local color map" ),
+	NO_IMAG_DSCR ( 105, "No image descriptor detected" ),
+	NO_COLOR_MAP ( 106, "Neither global nor local color map found" ),
 	WRONG_RECORD ( 107, "Wrong record type detected" ),
 	DATA_TOO_BIG ( 108, "Number of pixels bigger than width * height" ),
 	NOT_ENOUGH_MEM ( 109, "Failed to allocate required memory" ),

File: src/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -278,7 +278,7 @@ public int getLoopCount ()
 	@Override
 	public String toString ()
 	{
-		return String.format( Locale.US, "Size: %dx%d, %d frames", mMetaData[ 1 ], mMetaData[ 2 ], mMetaData[ 0 ] );
+		return String.format( Locale.US, "Size: %dx%d, %d frames %d error", mMetaData[ 0 ], mMetaData[ 1 ], mMetaData[ 2 ], mMetaData[ 3 ] );
 	}
 
 	/**

File: src/pl/droidsonroids/gif/GifDrawable.java
Patch:
@@ -278,7 +278,7 @@ public int getLoopCount ()
 	@Override
 	public String toString ()
 	{
-		return String.format( Locale.US, "Size: %dx%d, %d frames", mMetaData[ 1 ], mMetaData[ 2 ], mMetaData[ 0 ] );
+		return String.format( Locale.US, "Size: %dx%d, %d frames %d error", mMetaData[ 0 ], mMetaData[ 1 ], mMetaData[ 2 ], mMetaData[ 3 ] );
 	}
 
 	/**

File: src/pl/droidsonroids/gif/TestActivity.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.InputStream;
 import android.annotation.SuppressLint;
 import android.app.Activity;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.StrictMode;
@@ -53,7 +54,7 @@ public void onCreate ( Bundle savedInstanceState )
 			final InputStream stream =
 					new BufferedInputStream( new FileInputStream(pth),16356041) ;
 				//	getResources().openRawResource( R.drawable.piggy );
-			drw = new GifDrawable(stream);
+			drw = new GifDrawable(pth);
 			//drw.recycle();
 		}
 		catch ( Exception e )

