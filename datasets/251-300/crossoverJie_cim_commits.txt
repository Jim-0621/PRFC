File: cim-client-sdk/src/test/java/com/crossoverjie/cim/client/sdk/ClientTest.java
Patch:
@@ -265,7 +265,7 @@ public void testReconnect() throws Exception {
         String msg = "hello";
         client1.sendGroup(msg);
         Awaitility.await()
-                .untilAsserted(() -> Assertions.assertEquals(String.format("cj:%s", msg), client2Receive.get()));
+                .untilAsserted(() -> Assertions.assertEquals(msg, client2Receive.get()));
         client2Receive.set("");
 
 

File: cim-client-sdk/src/main/java/com/crossoverjie/cim/client/sdk/impl/ClientImpl.java
Patch:
@@ -6,10 +6,10 @@
 import com.crossoverjie.cim.client.sdk.ReConnectManager;
 import com.crossoverjie.cim.client.sdk.RouteManager;
 import com.crossoverjie.cim.client.sdk.io.CIMClientHandleInitializer;
-import com.crossoverjie.cim.common.constant.Constants;
 import com.crossoverjie.cim.common.exception.CIMException;
 import com.crossoverjie.cim.common.kit.HeartBeatHandler;
 import com.crossoverjie.cim.common.pojo.CIMUserInfo;
+import com.crossoverjie.cim.common.protocol.BaseCommand;
 import com.crossoverjie.cim.common.protocol.Request;
 import com.crossoverjie.cim.route.api.vo.req.ChatReqVO;
 import com.crossoverjie.cim.route.api.vo.req.LoginReqVO;
@@ -82,7 +82,7 @@ public ClientImpl(ClientConfigurationData conf) {
         heartBeatPacket = Request.newBuilder()
                 .setRequestId(this.conf.getAuth().getUserId())
                 .setReqMsg("ping")
-                .setType(Constants.CommandType.PING)
+                .setCmd(BaseCommand.PING)
                 .build();
         client = this;
 
@@ -177,7 +177,7 @@ private void loginServer() {
         Request login = Request.newBuilder()
                 .setRequestId(this.conf.getAuth().getUserId())
                 .setReqMsg(this.conf.getAuth().getUserName())
-                .setType(Constants.CommandType.LOGIN)
+                .setCmd(BaseCommand.LOGIN_REQUEST)
                 .build();
         channel.writeAndFlush(login)
                 .addListener((ChannelFutureListener) channelFuture ->

File: cim-client-sdk/src/main/java/com/crossoverjie/cim/client/sdk/io/CIMClientHandle.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.crossoverjie.cim.client.sdk.ClientState;
 import com.crossoverjie.cim.client.sdk.impl.ClientImpl;
-import com.crossoverjie.cim.common.constant.Constants;
+import com.crossoverjie.cim.common.protocol.BaseCommand;
 import com.crossoverjie.cim.common.protocol.Response;
 import com.crossoverjie.cim.common.util.NettyAttrUtil;
 import io.netty.channel.ChannelFutureListener;
@@ -60,12 +60,12 @@ public void channelInactive(ChannelHandlerContext ctx) {
     protected void channelRead0(ChannelHandlerContext ctx, Response msg) {
 
 
-        if (msg.getType() == Constants.CommandType.PING) {
+        if (msg.getCmd() == com.crossoverjie.cim.common.protocol.BaseCommand.PING) {
             ClientImpl.getClient().getConf().getEvent().debug("received ping from server");
             NettyAttrUtil.updateReaderTime(ctx.channel(), System.currentTimeMillis());
         }
 
-        if (msg.getType() != Constants.CommandType.PING) {
+        if (msg.getCmd() != BaseCommand.PING) {
             // callback
             ClientImpl.getClient().getConf().getCallbackThreadPool().execute(() -> {
                 ClientImpl.getClient().getConf().getMessageListener().received(ClientImpl.getClient(), msg.getResMsg());

File: cim-common/src/test/java/com/crossoverjie/cim/common/util/ProtocolTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.crossoverjie.cim.common.util;
 
+import com.crossoverjie.cim.common.protocol.BaseCommand;
 import com.crossoverjie.cim.common.protocol.Request;
 import com.google.protobuf.InvalidProtocolBufferException;
 import org.junit.Test;
@@ -11,7 +12,7 @@ public void testProtocol() throws InvalidProtocolBufferException {
         Request protocol = Request.newBuilder()
                 .setRequestId(123L)
                 .setReqMsg("你好啊")
-                .setType(1)
+                .setCmd(BaseCommand.LOGIN_REQUEST)
                 .build();
 
         byte[] encode = encode(protocol);

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/service/impl/UserInfoCacheServiceImpl.java
Patch:
@@ -41,8 +41,7 @@ public class UserInfoCacheServiceImpl implements UserInfoCacheService {
     @Override
     public Optional<CIMUserInfo> loadUserInfoByUserId(Long userId) {
         //Retrieve user information using a second-level cache.
-        Optional<CIMUserInfo> cimUserInfo = userInfoMap.getUnchecked(userId);
-        return cimUserInfo;
+        return userInfoMap.getUnchecked(userId);
     }
 
     @Override

File: cim-server/src/main/java/com/crossoverjie/cim/server/config/BeanConfig.java
Patch:
@@ -1,9 +1,9 @@
 package com.crossoverjie.cim.server.config;
 
-import com.crossoverjie.cim.common.constant.Constants;
 import com.crossoverjie.cim.common.core.proxy.RpcProxyManager;
 import com.crossoverjie.cim.common.metastore.MetaStore;
 import com.crossoverjie.cim.common.metastore.ZkMetaStoreImpl;
+import com.crossoverjie.cim.common.protocol.BaseCommand;
 import com.crossoverjie.cim.common.protocol.Request;
 import com.crossoverjie.cim.route.api.RouteApi;
 import jakarta.annotation.Resource;
@@ -54,7 +54,7 @@ public Request heartBeat() {
         return Request.newBuilder()
                 .setRequestId(0L)
                 .setReqMsg("pong")
-                .setType(Constants.CommandType.PING)
+                .setCmd(BaseCommand.PING)
                 .build();
     }
 

File: cim-server/src/main/java/com/crossoverjie/cim/server/handle/CIMServerHandle.java
Patch:
@@ -1,9 +1,9 @@
 package com.crossoverjie.cim.server.handle;
 
-import com.crossoverjie.cim.common.constant.Constants;
 import com.crossoverjie.cim.common.exception.CIMException;
 import com.crossoverjie.cim.common.kit.HeartBeatHandler;
 import com.crossoverjie.cim.common.pojo.CIMUserInfo;
+import com.crossoverjie.cim.common.protocol.BaseCommand;
 import com.crossoverjie.cim.common.protocol.Request;
 import com.crossoverjie.cim.common.util.NettyAttrUtil;
 import com.crossoverjie.cim.server.kit.RouteHandler;
@@ -74,15 +74,15 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
     protected void channelRead0(ChannelHandlerContext ctx, Request msg) throws Exception {
         log.info("received msg=[{}]", msg.toString());
 
-        if (msg.getType() == Constants.CommandType.LOGIN) {
+        if (msg.getCmd() == BaseCommand.LOGIN_REQUEST) {
             //保存客户端与 Channel 之间的关系
             SessionSocketHolder.put(msg.getRequestId(), (NioSocketChannel) ctx.channel());
             SessionSocketHolder.saveSession(msg.getRequestId(), msg.getReqMsg());
             log.info("client [{}] online success!!", msg.getReqMsg());
         }
 
         //心跳更新时间
-        if (msg.getType() == Constants.CommandType.PING){
+        if (msg.getCmd() == BaseCommand.PING){
             NettyAttrUtil.updateReaderTime(ctx.channel(),System.currentTimeMillis());
             //向客户端响应 pong 消息
             Request heartBeat = SpringBeanFactory.getBean("heartBeat", Request.class);

File: cim-server/src/main/java/com/crossoverjie/cim/server/server/CIMServer.java
Patch:
@@ -1,6 +1,6 @@
 package com.crossoverjie.cim.server.server;
 
-import com.crossoverjie.cim.common.constant.Constants;
+import com.crossoverjie.cim.common.protocol.BaseCommand;
 import com.crossoverjie.cim.common.protocol.Request;
 import com.crossoverjie.cim.server.api.vo.req.SendMsgReqVO;
 import com.crossoverjie.cim.server.init.CIMServerInitializer;
@@ -89,7 +89,7 @@ public void sendMsg(SendMsgReqVO sendMsgReqVO){
         Request protocol = Request.newBuilder()
                 .setRequestId(sendMsgReqVO.getUserId())
                 .setReqMsg(sendMsgReqVO.getMsg())
-                .setType(Constants.CommandType.MSG)
+                .setCmd(BaseCommand.MESSAGE)
                 .build();
 
         ChannelFuture future = socketChannel.writeAndFlush(protocol);

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/service/UserInfoCacheService.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.crossoverjie.cim.common.pojo.CIMUserInfo;
 
+import java.util.Optional;
 import java.util.Set;
 
 /**
@@ -19,7 +20,7 @@ public interface UserInfoCacheService {
      * @return
      * @throws Exception
      */
-    CIMUserInfo loadUserInfoByUserId(Long userId) ;
+    Optional<CIMUserInfo> loadUserInfoByUserId(Long userId) ;
 
     /**
      * 保存和检查用户登录情况

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/service/impl/UserInfoCacheServiceImpl.java
Patch:
@@ -74,7 +74,7 @@ public Set<CIMUserInfo> onlineUser() {
             }
             Optional<CIMUserInfo> cimUserInfo = loadUserInfoByUserId(Long.valueOf(member)) ;
 
-            cimUserInfo.ifPresentOrElse(set::add, () -> {});
+            cimUserInfo.ifPresent(set::add);
         }
 
         return set;

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/service/impl/UserInfoCacheServiceImpl.java
Patch:
@@ -73,7 +73,8 @@ public Set<CIMUserInfo> onlineUser() {
                 set = new HashSet<>(64) ;
             }
             Optional<CIMUserInfo> cimUserInfo = loadUserInfoByUserId(Long.valueOf(member)) ;
-            set.add(cimUserInfo.get()) ;
+
+            cimUserInfo.ifPresentOrElse(set::add, () -> {});
         }
 
         return set;

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/service/impl/AccountServiceRedisImpl.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Optional;
 
 import static com.crossoverjie.cim.common.enums.StatusEnum.OFF_LINE;
 import static com.crossoverjie.cim.route.constant.Constant.*;
@@ -150,11 +151,11 @@ private void parseServerInfo(Map<Long, CIMServerResVO> routes, String key) {
 
     @Override
     public void pushMsg(CIMServerResVO cimServerResVO, long sendUserId, ChatReqVO groupReqVO) throws Exception {
-        CIMUserInfo cimUserInfo = userInfoCacheService.loadUserInfoByUserId(sendUserId);
+        Optional<CIMUserInfo> cimUserInfo = userInfoCacheService.loadUserInfoByUserId(sendUserId);
 
         String url = "http://" + cimServerResVO.getIp() + ":" + cimServerResVO.getHttpPort();
         ServerApi serverApi = RpcProxyManager.create(ServerApi.class, okHttpClient);
-        SendMsgReqVO vo = new SendMsgReqVO(cimUserInfo.getUserName() + ":" + groupReqVO.getMsg(), groupReqVO.getUserId());
+        SendMsgReqVO vo = new SendMsgReqVO(cimUserInfo.get().getUserName() + ":" + groupReqVO.getMsg(), groupReqVO.getUserId());
         serverApi.sendMsg(vo, url);
     }
 

File: cim-server-api/src/main/java/com/crossoverjie/cim/server/api/ServerApi.java
Patch:
@@ -1,5 +1,6 @@
 package com.crossoverjie.cim.server.api;
 
+import com.crossoverjie.cim.common.core.proxy.DynamicUrl;
 import com.crossoverjie.cim.common.res.BaseResponse;
 import com.crossoverjie.cim.server.api.vo.req.SendMsgReqVO;
 import com.crossoverjie.cim.server.api.vo.res.SendMsgResVO;
@@ -19,5 +20,5 @@ public interface ServerApi {
      * @return
      * @throws Exception
      */
-    BaseResponse<SendMsgResVO> sendMsg(SendMsgReqVO sendMsgReqVO) throws Exception;
+    BaseResponse<SendMsgResVO> sendMsg(SendMsgReqVO sendMsgReqVO, @DynamicUrl String url) throws Exception;
 }

File: cim-server/src/main/java/com/crossoverjie/cim/server/controller/IndexController.java
Patch:
@@ -1,5 +1,6 @@
 package com.crossoverjie.cim.server.controller;
 
+import com.crossoverjie.cim.common.core.proxy.DynamicUrl;
 import com.crossoverjie.cim.common.enums.StatusEnum;
 import com.crossoverjie.cim.common.res.BaseResponse;
 import com.crossoverjie.cim.server.api.ServerApi;
@@ -38,7 +39,7 @@ public class IndexController implements ServerApi {
     @Operation(summary = "Push msg to client")
     @RequestMapping(value = "sendMsg",method = RequestMethod.POST)
     @ResponseBody
-    public BaseResponse<SendMsgResVO> sendMsg(@RequestBody SendMsgReqVO sendMsgReqVO){
+    public BaseResponse<SendMsgResVO> sendMsg(@RequestBody SendMsgReqVO sendMsgReqVO, @DynamicUrl String url){
         BaseResponse<SendMsgResVO> res = new BaseResponse();
         cimServer.sendMsg(sendMsgReqVO) ;
 

File: cim-client-sdk/src/main/java/com/crossoverjie/cim/client/sdk/io/CIMClientHandle.java
Patch:
@@ -48,7 +48,7 @@ public void channelActive(ChannelHandlerContext ctx) {
     @Override
     public void channelInactive(ChannelHandlerContext ctx) {
 
-        if (ClientImpl.getClient().getConf().getReconnectCheck().isNeedReconnect(ClientImpl.getClient())) {
+        if (!ClientImpl.getClient().getConf().getReconnectCheck().isNeedReconnect(ClientImpl.getClient())) {
             return;
         }
         ClientImpl.getClient().setState(ClientState.State.Closed);

File: cim-client-sdk/src/test/java/com/crossoverjie/cim/client/sdk/ClientTest.java
Patch:
@@ -34,6 +34,7 @@ public void createClient() throws Exception {
                 .userId(id)
                 .routeUrl(routeUrl)
                 .build();
+        TimeUnit.SECONDS.sleep(3);
         ClientState.State state = client.getState();
         Awaitility.await().atMost(10, TimeUnit.SECONDS)
                 .untilAsserted(() -> Assertions.assertEquals(ClientState.State.Ready, state));

File: cim-client/src/main/java/com/crossoverjie/cim/client/client/CIMClient.java
Patch:
@@ -25,6 +25,8 @@
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Component;
 
 import jakarta.annotation.PostConstruct;
@@ -38,6 +40,7 @@
  */
 @Component
 @Slf4j
+@ConditionalOnWebApplication
 public class CIMClient {
 
 

File: cim-client/src/main/java/com/crossoverjie/cim/client/controller/IndexController.java
Patch:
@@ -12,6 +12,7 @@
 import com.crossoverjie.cim.common.res.NULLBody;
 import io.swagger.v3.oas.annotations.Operation;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -27,6 +28,7 @@
  */
 @Controller
 @RequestMapping("/")
+@ConditionalOnWebApplication
 public class IndexController {
 
 

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/ClientHeartBeatHandlerImpl.java
Patch:
@@ -5,6 +5,7 @@
 import com.crossoverjie.cim.common.kit.HeartBeatHandler;
 import io.netty.channel.ChannelHandlerContext;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Service;
 
 /**
@@ -15,6 +16,7 @@
  * @since JDK 1.8
  */
 @Service
+@ConditionalOnWebApplication
 public class ClientHeartBeatHandlerImpl implements HeartBeatHandler {
 
     @Autowired

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/command/ShutDownCommand.java
Patch:
@@ -9,6 +9,7 @@
 import com.crossoverjie.cim.common.data.construct.RingBufferWheel;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Service;
 
 import jakarta.annotation.Resource;
@@ -24,6 +25,7 @@
  */
 @Slf4j
 @Service
+@ConditionalOnWebApplication
 public class ShutDownCommand implements InnerCommand {
 
     @Autowired

File: cim-common/src/main/java/com/crossoverjie/cim/common/data/construct/SortArrayMap.java
Patch:
@@ -82,7 +82,7 @@ public void sort() {
             if (o1.key > o2.key) {
                 return 1;
             } else {
-                return -1;
+                return 0;
             }
         });
     }

File: cim-common/src/main/java/com/crossoverjie/cim/common/data/construct/SortArrayMap.java
Patch:
@@ -82,7 +82,7 @@ public void sort() {
             if (o1.key > o2.key) {
                 return 1;
             } else {
-                return -1;
+                return 0;
             }
         });
     }

File: cim-client/src/main/java/com/crossoverjie/cim/client/client/CIMClient.java
Patch:
@@ -25,6 +25,8 @@
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Component;
 
 import jakarta.annotation.PostConstruct;
@@ -38,6 +40,7 @@
  */
 @Component
 @Slf4j
+@ConditionalOnWebApplication
 public class CIMClient {
 
 

File: cim-client/src/main/java/com/crossoverjie/cim/client/controller/IndexController.java
Patch:
@@ -12,6 +12,7 @@
 import com.crossoverjie.cim.common.res.NULLBody;
 import io.swagger.v3.oas.annotations.Operation;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -27,6 +28,7 @@
  */
 @Controller
 @RequestMapping("/")
+@ConditionalOnWebApplication
 public class IndexController {
 
 

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/ClientHeartBeatHandlerImpl.java
Patch:
@@ -5,6 +5,7 @@
 import com.crossoverjie.cim.common.kit.HeartBeatHandler;
 import io.netty.channel.ChannelHandlerContext;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Service;
 
 /**
@@ -15,6 +16,7 @@
  * @since JDK 1.8
  */
 @Service
+@ConditionalOnWebApplication
 public class ClientHeartBeatHandlerImpl implements HeartBeatHandler {
 
     @Autowired

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/command/ShutDownCommand.java
Patch:
@@ -9,6 +9,7 @@
 import com.crossoverjie.cim.common.data.construct.RingBufferWheel;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.stereotype.Service;
 
 import jakarta.annotation.Resource;
@@ -24,6 +25,7 @@
  */
 @Slf4j
 @Service
+@ConditionalOnWebApplication
 public class ShutDownCommand implements InnerCommand {
 
     @Autowired

File: cim-common/src/test/java/com/crossoverjie/cim/common/metastore/MetaStoreTest.java
Patch:
@@ -18,8 +18,9 @@ public class MetaStoreTest {
 
     private static final String connectionString = "127.0.0.1:2181";
 
+    // TODO: 2024/8/30 integration test
     @SneakyThrows
-    @Test
+//    @Test
     public void testZk() {
         ExponentialBackoffRetry retryPolicy = new ExponentialBackoffRetry(1000, 3);
         CuratorFramework client = CuratorFrameworkFactory.builder()
@@ -92,7 +93,7 @@ public static List<String> curatorWatcherGetChildren(CuratorFramework client, St
 
 
     @SneakyThrows
-    @Test
+//    @Test
     public void zkClientTest(){
         ZkClient zkClient = new ZkClient(connectionString, 5000);
         zkClient.subscribeChildChanges("/cim", (parentPath, currentChildren) -> {

File: cim-common/src/test/java/com/crossoverjie/cim/common/util/HttpClientTest.java
Patch:
@@ -28,6 +28,7 @@ public void call() throws IOException {
         jsonObject.put("msg", "hello");
         jsonObject.put("userId", 1586617710861L);
 
-        HttpClient.call(okHttpClient,jsonObject.toString(),"http://127.0.0.1:8081/sendMsg") ;
+        // TODO: 2024/8/30 Integration test
+//        HttpClient.call(okHttpClient,jsonObject.toString(),"http://127.0.0.1:8081/sendMsg") ;
     }
 }
\ No newline at end of file

File: cim-common/src/test/java/com/crossoverjie/cim/common/metastore/MetaStoreTest.java
Patch:
@@ -18,8 +18,9 @@ public class MetaStoreTest {
 
     private static final String connectionString = "127.0.0.1:2181";
 
+    // TODO: 2024/8/30 integration test
     @SneakyThrows
-    @Test
+//    @Test
     public void testZk() {
         ExponentialBackoffRetry retryPolicy = new ExponentialBackoffRetry(1000, 3);
         CuratorFramework client = CuratorFrameworkFactory.builder()
@@ -92,7 +93,7 @@ public static List<String> curatorWatcherGetChildren(CuratorFramework client, St
 
 
     @SneakyThrows
-    @Test
+//    @Test
     public void zkClientTest(){
         ZkClient zkClient = new ZkClient(connectionString, 5000);
         zkClient.subscribeChildChanges("/cim", (parentPath, currentChildren) -> {

File: cim-common/src/test/java/com/crossoverjie/cim/common/util/HttpClientTest.java
Patch:
@@ -28,6 +28,7 @@ public void call() throws IOException {
         jsonObject.put("msg", "hello");
         jsonObject.put("userId", 1586617710861L);
 
-        HttpClient.call(okHttpClient,jsonObject.toString(),"http://127.0.0.1:8081/sendMsg") ;
+        // TODO: 2024/8/30 Integration test
+//        HttpClient.call(okHttpClient,jsonObject.toString(),"http://127.0.0.1:8081/sendMsg") ;
     }
 }
\ No newline at end of file

File: cim-server/src/main/java/com/crossoverjie/cim/server/server/CIMServer.java
Patch:
@@ -86,6 +86,7 @@ public void sendMsg(SendMsgReqVO sendMsgReqVO){
 
         if (null == socketChannel) {
             LOGGER.error("client {} offline!", sendMsgReqVO.getUserId());
+            return;
         }
         CIMRequestProto.CIMReqProtocol protocol = CIMRequestProto.CIMReqProtocol.newBuilder()
                 .setRequestId(sendMsgReqVO.getUserId())

File: cim-common/src/main/java/com/crossoverjie/cim/common/enums/StatusEnum.java
Patch:
@@ -29,7 +29,7 @@ public enum StatusEnum {
 
     SERVER_NOT_AVAILABLE("7100", "cim server is not available, please try again later!"),
 
-    RECONNECT_FAIL("7200", "reconnect fail, continue to retry!"),
+    RECONNECT_FAIL("7200", "Reconnect fail, continue to retry!"),
 
     /** 登录信息不匹配 */
     ACCOUNT_NOT_MATCH("9100", "The User information you have used is incorrect!"),

File: cim-common/src/main/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/SortArrayMapConsistentHash.java
Patch:
@@ -20,6 +20,8 @@ public class SortArrayMapConsistentHash extends AbstractConsistentHash {
 
     @Override
     public void add(long key, String value) {
+        // fix https://github.com/crossoverJie/cim/issues/79
+        sortArrayMap.clear();
         for (int i = 0; i < VIRTUAL_NODE_SIZE; i++) {
             Long hash = super.hash("vir" + key + i);
             sortArrayMap.add(hash,value);

File: cim-common/src/main/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/TreeMapConsistentHash.java
Patch:
@@ -23,6 +23,9 @@ public class TreeMapConsistentHash extends AbstractConsistentHash {
 
     @Override
     public void add(long key, String value) {
+
+        // fix https://github.com/crossoverJie/cim/issues/79
+        treeMap.clear();
         for (int i = 0; i < VIRTUAL_NODE_SIZE; i++) {
             Long hash = super.hash("vir" + key + i);
             treeMap.put(hash,value);

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/controller/RouteController.java
Patch:
@@ -154,6 +154,8 @@ public BaseResponse<CIMServerResVO> login(@RequestBody LoginReqVO loginReqVO) th
 
         // check server available
         String server = routeHandle.routeServer(serverCache.getServerList(),String.valueOf(loginReqVO.getUserId()));
+        LOGGER.info("userName=[{}] route server info=[{}]", loginReqVO.getUserName(), server);
+
         RouteInfo routeInfo = RouteInfoParseUtil.parse(server);
         commonBizService.checkServerAvailable(routeInfo);
 

File: cim-common/src/main/java/com/crossoverjie/cim/common/enums/StatusEnum.java
Patch:
@@ -29,7 +29,7 @@ public enum StatusEnum {
 
     SERVER_NOT_AVAILABLE("7100", "cim server is not available, please try again later!"),
 
-    RECONNECT_FAIL("7200", "reconnect fail, continue to retry!"),
+    RECONNECT_FAIL("7200", "Reconnect fail, continue to retry!"),
 
     /** 登录信息不匹配 */
     ACCOUNT_NOT_MATCH("9100", "The User information you have used is incorrect!"),

File: cim-common/src/main/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/SortArrayMapConsistentHash.java
Patch:
@@ -20,6 +20,8 @@ public class SortArrayMapConsistentHash extends AbstractConsistentHash {
 
     @Override
     public void add(long key, String value) {
+        // fix https://github.com/crossoverJie/cim/issues/79
+        sortArrayMap.clear();
         for (int i = 0; i < VIRTUAL_NODE_SIZE; i++) {
             Long hash = super.hash("vir" + key + i);
             sortArrayMap.add(hash,value);

File: cim-common/src/main/java/com/crossoverjie/cim/common/route/algorithm/consistenthash/TreeMapConsistentHash.java
Patch:
@@ -23,6 +23,9 @@ public class TreeMapConsistentHash extends AbstractConsistentHash {
 
     @Override
     public void add(long key, String value) {
+
+        // fix https://github.com/crossoverJie/cim/issues/79
+        treeMap.clear();
         for (int i = 0; i < VIRTUAL_NODE_SIZE; i++) {
             Long hash = super.hash("vir" + key + i);
             treeMap.put(hash,value);

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/controller/RouteController.java
Patch:
@@ -154,6 +154,8 @@ public BaseResponse<CIMServerResVO> login(@RequestBody LoginReqVO loginReqVO) th
 
         // check server available
         String server = routeHandle.routeServer(serverCache.getServerList(),String.valueOf(loginReqVO.getUserId()));
+        LOGGER.info("userName=[{}] route server info=[{}]", loginReqVO.getUserName(), server);
+
         RouteInfo routeInfo = RouteInfoParseUtil.parse(server);
         commonBizService.checkServerAvailable(routeInfo);
 

File: cim-client/src/main/java/com/crossoverjie/cim/client/config/BeanConfig.java
Patch:
@@ -87,7 +87,7 @@ public ThreadPoolExecutor buildCallerThread(){
     @Bean("scheduledTask")
     public ScheduledExecutorService buildSchedule(){
         ThreadFactory sche = new ThreadFactoryBuilder()
-                .setNameFormat("scheduled-%d")
+                .setNameFormat("reConnect-job-%d")
                 .setDaemon(true)
                 .build();
         ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1,sche) ;

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/ClientHeartBeatHandlerImpl.java
Patch:
@@ -1,6 +1,7 @@
 package com.crossoverjie.cim.client.service.impl;
 
 import com.crossoverjie.cim.client.client.CIMClient;
+import com.crossoverjie.cim.client.thread.ContextHolder;
 import com.crossoverjie.cim.common.kit.HeartBeatHandler;
 import io.netty.channel.ChannelHandlerContext;
 import org.slf4j.Logger;
@@ -28,6 +29,7 @@ public class ClientHeartBeatHandlerImpl implements HeartBeatHandler {
     public void process(ChannelHandlerContext ctx) throws Exception {
 
         //重连
+        ContextHolder.setReconnect(true);
         cimClient.reconnect();
 
     }

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/command/ShutDownCommand.java
Patch:
@@ -37,7 +37,7 @@ public class ShutDownCommand implements InnerCommand {
     private MsgLogger msgLogger;
 
     @Resource(name = "callBackThreadPool")
-    private ThreadPoolExecutor executor;
+    private ThreadPoolExecutor callBackExecutor;
 
     @Autowired
     private EchoService echoService ;
@@ -55,10 +55,10 @@ public void process(String msg) {
         shutDownMsg.shutdown();
         routeRequest.offLine();
         msgLogger.stop();
-        executor.shutdown();
+        callBackExecutor.shutdown();
         ringBufferWheel.stop(false);
         try {
-            while (!executor.awaitTermination(1, TimeUnit.SECONDS)) {
+            while (!callBackExecutor.awaitTermination(1, TimeUnit.SECONDS)) {
                 echoService.echo("thread pool closing");
             }
             cimClient.close();

File: cim-common/src/main/java/com/crossoverjie/cim/common/enums/StatusEnum.java
Patch:
@@ -27,7 +27,9 @@ public enum StatusEnum {
     /** 账号不在线 */
     OFF_LINE("7000", "你选择的账号不在线，请重新选择！"),
 
-    SERVER_NOT_AVAILABLE("7100", "CIM server is not available, please try again later!"),
+    SERVER_NOT_AVAILABLE("7100", "cim server is not available, please try again later!"),
+
+    RECONNECT_FAIL("7200", "reconnect fail, continue to retry!"),
 
     /** 登录信息不匹配 */
     ACCOUNT_NOT_MATCH("9100", "The User information you have used is incorrect!"),

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/controller/RouteController.java
Patch:
@@ -153,7 +153,7 @@ public BaseResponse<CIMServerResVO> login(@RequestBody LoginReqVO loginReqVO) th
         BaseResponse<CIMServerResVO> res = new BaseResponse();
 
         // check server available
-        String server = routeHandle.routeServer(serverCache.getAll(),String.valueOf(loginReqVO.getUserId()));
+        String server = routeHandle.routeServer(serverCache.getServerList(),String.valueOf(loginReqVO.getUserId()));
         RouteInfo routeInfo = RouteInfoParseUtil.parse(server);
         commonBizService.checkServerAvailable(routeInfo);
 

File: cim-client/src/main/java/com/crossoverjie/cim/client/config/BeanConfig.java
Patch:
@@ -87,7 +87,7 @@ public ThreadPoolExecutor buildCallerThread(){
     @Bean("scheduledTask")
     public ScheduledExecutorService buildSchedule(){
         ThreadFactory sche = new ThreadFactoryBuilder()
-                .setNameFormat("reconnect-job-%d")
+                .setNameFormat("reConnect-job-%d")
                 .setDaemon(true)
                 .build();
         ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1,sche) ;

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/RouteRequestImpl.java
Patch:
@@ -143,7 +143,7 @@ public CIMServerResVO.ServerInfo getCIMServer(LoginReqVO loginReqVO) throws Exce
             if (!cimServerResVO.getCode().equals(StatusEnum.SUCCESS.getCode())){
                 echoService.echo(cimServerResVO.getMessage());
 
-                // when client in reconnect state, could not exit.
+                // when client in reConnect state, could not exit.
                 if (ContextHolder.getReconnect()){
                     echoService.echo("###{}###", StatusEnum.RECONNECT_FAIL.getMessage());
                     throw new CIMException(StatusEnum.RECONNECT_FAIL);

File: cim-client/src/main/java/com/crossoverjie/cim/client/client/CIMClient.java
Patch:
@@ -112,7 +112,7 @@ private void startClient(CIMServerResVO.ServerInfo cimServer) {
             LOGGER.error("连接失败", e);
         }
         if (future.isSuccess()) {
-            echoService.echo("start cim client success!");
+            echoService.echo("Start cim client success!");
             LOGGER.info("启动 cim client 成功");
         }
         channel = (SocketChannel) future.channel();
@@ -158,7 +158,7 @@ private void loginCIMServer() {
                 .build();
         ChannelFuture future = channel.writeAndFlush(login);
         future.addListener((ChannelFutureListener) channelFuture ->
-                        echoService.echo("registry cim server success!")
+                        echoService.echo("Registry cim server success!")
                 );
     }
 

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/RouteApplication.java
Patch:
@@ -17,7 +17,7 @@ public class RouteApplication implements CommandLineRunner{
 
 	public static void main(String[] args) {
         SpringApplication.run(RouteApplication.class, args);
-		LOGGER.info("启动 route 成功");
+		LOGGER.info("Start cim route success!!!");
 	}
 
 	@Override

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/kit/ZKit.java
Patch:
@@ -40,7 +40,7 @@ public void subscribeEvent(String path) {
         zkClient.subscribeChildChanges(path, new IZkChildListener() {
             @Override
             public void handleChildChange(String parentPath, List<String> currentChilds) throws Exception {
-                logger.info("清除/更新本地缓存 parentPath=【{}】,currentChilds=【{}】", parentPath,currentChilds.toString());
+                logger.info("Clear or update local cache parentPath=[{}],currentChilds=[{}]", parentPath,currentChilds.toString());
 
                 //更新所有缓存/先删除 再新增
                 serverCache.updateCache(currentChilds) ;

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/service/UserInfoCacheService.java
Patch:
@@ -38,8 +38,8 @@ public interface UserInfoCacheService {
 
 
     /**
-     *
-     * @return 获取所有在线用户
+     * query all online user
+     * @return online user
      */
     Set<CIMUserInfo> onlineUser() ;
 }

File: cim-server/src/main/java/com/crossoverjie/cim/server/CIMServerApplication.java
Patch:
@@ -28,7 +28,7 @@ public class CIMServerApplication implements CommandLineRunner{
 
 	public static void main(String[] args) {
         SpringApplication.run(CIMServerApplication.class, args);
-		LOGGER.info("启动 Server 成功");
+		LOGGER.info("Start cim server success!!!");
 	}
 
 	@Override

File: cim-server/src/main/java/com/crossoverjie/cim/server/kit/RegistryZK.java
Patch:
@@ -42,7 +42,7 @@ public void run() {
         if (appConfiguration.isZkSwitch()){
             String path = appConfiguration.getZkRoot() + "/ip-" + ip + ":" + cimServerPort + ":" + httpPort;
             zKit.createNode(path);
-            logger.info("注册 zookeeper 成功，msg=[{}]", path);
+            logger.info("Registry zookeeper success, msg=[{}]", path);
         }
 
 

File: cim-client/src/main/java/com/crossoverjie/cim/client/client/CIMClient.java
Patch:
@@ -106,7 +106,7 @@ private void startClient(CIMServerResVO.ServerInfo cimServer) {
             errorCount++;
 
             if (errorCount >= configuration.getErrorCount()) {
-                LOGGER.error("链接失败次数达到上限[{}]次", errorCount);
+                LOGGER.error("连接失败次数达到上限[{}]次", errorCount);
                 msgHandle.shutdown();
             }
             LOGGER.error("连接失败", e);

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/command/QueryHistoryCommand.java
Patch:
@@ -25,6 +25,9 @@ public class QueryHistoryCommand implements InnerCommand {
     @Override
     public void process(String msg) {
         String[] split = msg.split(" ");
+        if (split.length < 2){
+            return;
+        }
         String res = msgLogger.query(split[1]);
         System.out.println(res);
     }

File: cim-client/src/main/java/com/crossoverjie/cim/client/handle/CIMClientHandle.java
Patch:
@@ -41,7 +41,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
             if (idleStateEvent.state() == IdleState.WRITER_IDLE){
                 CIMRequestProto.CIMReqProtocol heartBeat = SpringBeanFactory.getBean("heartBeat",
                         CIMRequestProto.CIMReqProtocol.class);
-                ctx.writeAndFlush(heartBeat).sync().addListeners(ChannelFutureListener.CLOSE_ON_FAILURE) ;
+                ctx.writeAndFlush(heartBeat).addListeners(ChannelFutureListener.CLOSE_ON_FAILURE) ;
             }
 
 

File: cim-server/src/main/java/com/crossoverjie/cim/server/handle/CIMServerHandle.java
Patch:
@@ -42,6 +42,7 @@ public class CIMServerHandle extends SimpleChannelInboundHandler<CIMRequestProto
     public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         CIMUserInfo userInfo = SessionSocketHolder.getUserId((NioSocketChannel) ctx.channel());
         userOffLine(userInfo, (NioSocketChannel) ctx.channel());
+        ctx.channel().close();
     }
 
     @Override

File: cim-client/src/main/java/com/crossoverjie/cim/client/service/impl/RouteRequestImpl.java
Patch:
@@ -124,7 +124,7 @@ public CIMServerResVO.ServerInfo getCIMServer(LoginReqVO loginReqVO) throws Exce
 
         //重复失败
         if (!cimServerResVO.getCode().equals(StatusEnum.SUCCESS.getCode())){
-            LOGGER.error(appConfiguration.getUserName() + ":" + StatusEnum.REPEAT_LOGIN.getMessage());
+            LOGGER.error(appConfiguration.getUserName() + ":" + cimServerResVO.getMessage());
             System.exit(-1);
         }
 

File: cim-common/src/main/java/com/crossoverjie/cim/common/enums/StatusEnum.java
Patch:
@@ -25,7 +25,7 @@ public enum StatusEnum {
     OFF_LINE("7000", "你选择的账号不在线，请重新选择！"),
 
     /** 登录信息不匹配 */
-    ACCOUNT_NOT_MATCH("9000", "登录信息不匹配！"),
+    ACCOUNT_NOT_MATCH("9100", "登录信息不匹配！"),
 
     /** 请求限流 */
     REQUEST_LIMIT("6000", "请求限流"),

File: cim-forward-route/src/main/java/com/crossoverjie/cim/route/service/AccountService.java
Patch:
@@ -1,5 +1,6 @@
 package com.crossoverjie.cim.route.service;
 
+import com.crossoverjie.cim.common.enums.StatusEnum;
 import com.crossoverjie.cim.route.vo.req.ChatReqVO;
 import com.crossoverjie.cim.route.vo.req.LoginReqVO;
 import com.crossoverjie.cim.route.vo.res.CIMServerResVO;
@@ -30,7 +31,7 @@ public interface AccountService {
      * @return true 成功 false 失败
      * @throws Exception
      */
-    boolean login(LoginReqVO loginReqVO) throws Exception ;
+    StatusEnum login(LoginReqVO loginReqVO) throws Exception ;
 
     /**
      * 保存路由信息

File: cim-server/src/main/java/com/crossoverjie/cim/server/kit/RegistryZK.java
Patch:
@@ -41,7 +41,7 @@ public void run() {
         //是否要将自己注册到 ZK
         if (appConfiguration.isZkSwitch()){
             String path = appConfiguration.getZkRoot() + "/ip-" + ip + ":" + cimServerPort + ":" + httpPort;
-            zKit.createNode(path, path);
+            zKit.createNode(path);
             logger.info("注册 zookeeper 成功，msg=[{}]", path);
         }
 

File: cim-server/src/main/java/com/crossoverjie/cim/server/kit/ZKit.java
Patch:
@@ -43,10 +43,9 @@ public void createRootNode(){
      * 写入指定节点 临时目录
      *
      * @param path
-     * @param value
      */
-    public void createNode(String path, String value) {
-        zkClient.createEphemeral(path, value);
+    public void createNode(String path) {
+        zkClient.createEphemeral(path);
     }
 
 }

