File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/server/ServerService.java
Patch:
@@ -109,7 +109,7 @@ public boolean isEnableServer(final String ip) {
     
     /**
      *  Remove unused server IP.
-     *  
+     *
      * @return num of server IP to be removed
      */
     public int removeOfflineServers() {
@@ -132,7 +132,7 @@ public int removeOfflineServers() {
                 return;
             }
             String status = jobNodeStorage.getJobNodeData(serverNode.getServerNode(serverIp));
-            if (StringUtils.isNotBlank(status)) {
+            if (StringUtils.isBlank(status)) {
                 return;
             }
             jobNodeStorage.removeJobNodeIfExisted(serverNode.getServerNode(serverIp));

File: test/native/src/test/java/org/apache/shardingsphere/elasticjob/test/natived/TestMain.java
Patch:
@@ -20,6 +20,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Spring Boot Web Server for testing only.
+ */
 @SpringBootApplication
 public class TestMain {
     

File: test/native/src/test/java/org/apache/shardingsphere/elasticjob/test/natived/TestMain.java
Patch:
@@ -20,6 +20,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Spring Boot Web Server for testing only.
+ */
 @SpringBootApplication
 public class TestMain {
     

File: spring/boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/spring/boot/tracing/TracingProperties.java
Patch:
@@ -21,6 +21,7 @@
 import lombok.Setter;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
 import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -32,6 +33,7 @@ public class TracingProperties {
     
     private String type;
     
+    @NestedConfigurationProperty
     private DataSourceProperties dataSource;
     
     private Set<String> includeJobNames = new HashSet<>();

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/failover/FailoverListenerManager.java
Patch:
@@ -97,6 +97,7 @@ public void onChange(final DataChangedEvent event) {
                 if (!failoverItems.isEmpty()) {
                     for (int each : failoverItems) {
                         failoverService.setCrashedFailoverFlagDirectly(each);
+                        executionService.clearRunningInfo(Collections.singletonList(each));
                         failoverService.failoverIfNecessary();
                     }
                 } else {

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/failover/FailoverListenerManagerTest.java
Patch:
@@ -157,6 +157,7 @@ void assertJobCrashedJobListenerWhenIsOtherFailoverInstanceCrashed() {
         when(instanceNode.getInstanceFullPath()).thenReturn("/test_job/instances");
         failoverListenerManager.new JobCrashedJobListener().onChange(new DataChangedEvent(Type.DELETED, "/test_job/instances/127.0.0.1@-@1", ""));
         verify(failoverService).setCrashedFailoverFlagDirectly(1);
+        verify(executionService).clearRunningInfo(Collections.singletonList(1));
         verify(failoverService).failoverIfNecessary();
         JobRegistry.getInstance().shutdown("test_job");
     }

File: bootstrap/src/main/java/org/apache/shardingsphere/elasticjob/bootstrap/type/OneOffJobBootstrap.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * One off job bootstrap.
  */
-public final class OneOffJobBootstrap implements JobBootstrap {
+public class OneOffJobBootstrap implements JobBootstrap {
     
     private final JobScheduler jobScheduler;
     

File: test/native/src/test/java/org/apache/shardingsphere/elasticjob/test/natived/JavaTest.java
Patch:
@@ -157,7 +157,7 @@ void testScriptJob() {
         ScheduleJobBootstrap jobBootstrap = new ScheduleJobBootstrap(regCenter, "SCRIPT",
                 JobConfiguration.newBuilder("scriptElasticJob", 3)
                         .cron("0/5 * * * * ?")
-                        .setProperty(ScriptJobProperties.SCRIPT_KEY, Paths.get("src/test/resources/script/demo.sh").toString())
+                        .setProperty(ScriptJobProperties.SCRIPT_KEY, Paths.get("src/test/resources/test-native/sh/demo.sh").toString())
                         .addExtraConfigurations(tracingConfig)
                         .build());
         assertDoesNotThrow(() -> {

File: bootstrap/src/main/java/org/apache/shardingsphere/elasticjob/bootstrap/type/OneOffJobBootstrap.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * One off job bootstrap.
  */
-public final class OneOffJobBootstrap implements JobBootstrap {
+public class OneOffJobBootstrap implements JobBootstrap {
     
     private final JobScheduler jobScheduler;
     

File: restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/impl/DefaultJsonRequestBodyDeserializer.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.Gson;
 import io.netty.handler.codec.http.HttpHeaderValues;
-import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.kernel.infra.json.GsonFactory;
 import org.apache.shardingsphere.elasticjob.restful.deserializer.RequestBodyDeserializer;
 
 import java.nio.charset.StandardCharsets;

File: restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/impl/DefaultJsonResponseBodySerializer.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.Gson;
 import io.netty.handler.codec.http.HttpHeaderValues;
-import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.kernel.infra.json.GsonFactory;
 import org.apache.shardingsphere.elasticjob.restful.serializer.ResponseBodySerializer;
 
 import java.nio.charset.StandardCharsets;

File: restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/impl/DefaultJsonRequestBodyDeserializer.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.Gson;
 import io.netty.handler.codec.http.HttpHeaderValues;
-import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.kernel.infra.json.GsonFactory;
 import org.apache.shardingsphere.elasticjob.restful.deserializer.RequestBodyDeserializer;
 
 import java.nio.charset.StandardCharsets;

File: restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/impl/DefaultJsonResponseBodySerializer.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.Gson;
 import io.netty.handler.codec.http.HttpHeaderValues;
-import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.kernel.infra.json.GsonFactory;
 import org.apache.shardingsphere.elasticjob.restful.serializer.ResponseBodySerializer;
 
 import java.nio.charset.StandardCharsets;

File: spring/boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/spring/boot/tracing/ElasticJobTracingConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import com.zaxxer.hikari.HikariDataSource;
 import org.apache.shardingsphere.elasticjob.kernel.tracing.config.TracingConfiguration;
 import org.springframework.beans.BeanUtils;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
@@ -68,7 +69,8 @@ public DataSource tracingDataSource(final TracingProperties tracingProperties) {
          */
         @Bean
         @ConditionalOnBean(DataSource.class)
-        public TracingConfiguration<DataSource> tracingConfiguration(final DataSource dataSource, @Nullable final DataSource tracingDataSource) {
+        public TracingConfiguration<DataSource> tracingConfiguration(@Qualifier("dataSource") final DataSource dataSource,
+                                                                     @Qualifier("tracingDataSource") @Nullable final DataSource tracingDataSource) {
             return new TracingConfiguration<>("RDB", null == tracingDataSource ? dataSource : tracingDataSource);
         }
     }

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/datasource/DataSourceConfiguration.java
Patch:
@@ -40,8 +40,8 @@
 /**
  * Data source configuration.
  */
-@Getter
 @RequiredArgsConstructor
+@Getter
 public final class DataSourceConfiguration implements TracingStorageConfiguration<DataSource> {
     
     private static final String GETTER_PREFIX = "get";

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/tracing/fixture/config/TracingStorageFixture.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.tracing.fixture;
+package org.apache.shardingsphere.elasticjob.kernel.tracing.fixture.config;
 
-public interface JobEventCaller {
+public interface TracingStorageFixture {
     
     /**
-     * Execute call.
+     * Call.
      */
     void call();
 }

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/tracing/fixture/listener/TestTracingFailureConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.tracing.fixture;
+package org.apache.shardingsphere.elasticjob.kernel.tracing.fixture.listener;
 
 import org.apache.shardingsphere.elasticjob.kernel.tracing.listener.TracingListenerConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.tracing.listener.TracingListener;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/tracing/storage/TracingStorageConverterFactoryTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.tracing.storage;
 
-import org.apache.shardingsphere.elasticjob.kernel.tracing.fixture.JobEventCaller;
+import org.apache.shardingsphere.elasticjob.kernel.tracing.fixture.config.TracingStorageFixture;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
@@ -27,7 +27,7 @@ class TracingStorageConverterFactoryTest {
     
     @Test
     void assertConverterExists() {
-        assertTrue(TracingStorageConverterFactory.findConverter(JobEventCaller.class).isPresent());
+        assertTrue(TracingStorageConverterFactory.findConverter(TracingStorageFixture.class).isPresent());
     }
     
     @Test

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/TracingStorageDatabaseType.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 
 /**
- * Database type.
+ * Tracing storage database type.
  */
 @SingletonSPI
-public interface DatabaseType extends TypedSPI {
+public interface TracingStorageDatabaseType extends TypedSPI {
     
     /**
      * Get database product name.

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/DB2TracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * DB2 database type.
+ * Tracing storage database type for DB2.
  */
-public final class DB2DatabaseType implements DatabaseType {
+public final class DB2TracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/DefaultTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * Default database type.
+ * Default tracing storage database type.
  */
-public class DefaultDatabaseType implements DatabaseType {
+public class DefaultTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/H2TracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * H2 database type.
+ * Tracing storage database type for H2.
  */
-public final class H2DatabaseType implements DatabaseType {
+public final class H2TracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/MySQLTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * MySQL database type.
+ * Tracing storage database type for MySQL.
  */
-public final class MySQLDatabaseType implements DatabaseType {
+public final class MySQLTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/OracleTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * Oracle database type.
+ * Tracing storage database type for Oracle.
  */
-public final class OracleDatabaseType implements DatabaseType {
+public final class OracleTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/PostgreSQLTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * PostgreSQL database type.
+ * Tracing storage database type for PostgreSQL.
  */
-public final class PostgreSQLDatabaseType implements DatabaseType {
+public final class PostgreSQLTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/SQLServerTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * SQLServer database type.
+ * Tracing storage database type for SQLServer.
  */
-public final class SQLServerDatabaseType implements DatabaseType {
+public final class SQLServerTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/tracing/yaml/YamlTracingConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.kernel.tracing.yaml;
 
 import lombok.Getter;
-import lombok.NoArgsConstructor;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.kernel.infra.yaml.config.YamlConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.tracing.api.TracingConfiguration;
@@ -28,7 +27,6 @@
  *
  * @param <T> type of storage
  */
-@NoArgsConstructor
 @Getter
 @Setter
 public final class YamlTracingConfiguration<T> implements YamlConfiguration<TracingConfiguration<T>> {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/TracingStorageDatabaseType.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 
 /**
- * Database type.
+ * Tracing storage database type.
  */
 @SingletonSPI
-public interface DatabaseType extends TypedSPI {
+public interface TracingStorageDatabaseType extends TypedSPI {
     
     /**
      * Get database product name.

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/DB2TracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * DB2 database type.
+ * Tracing storage database type for DB2.
  */
-public final class DB2DatabaseType implements DatabaseType {
+public final class DB2TracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/DefaultTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * Default database type.
+ * Default tracing storage database type.
  */
-public class DefaultDatabaseType implements DatabaseType {
+public class DefaultTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/H2TracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * H2 database type.
+ * Tracing storage database type for H2.
  */
-public final class H2DatabaseType implements DatabaseType {
+public final class H2TracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/MySQLTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * MySQL database type.
+ * Tracing storage database type for MySQL.
  */
-public final class MySQLDatabaseType implements DatabaseType {
+public final class MySQLTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/OracleTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * Oracle database type.
+ * Tracing storage database type for Oracle.
  */
-public final class OracleDatabaseType implements DatabaseType {
+public final class OracleTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/PostgreSQLTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * PostgreSQL database type.
+ * Tracing storage database type for PostgreSQL.
  */
-public final class PostgreSQLDatabaseType implements DatabaseType {
+public final class PostgreSQLTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/type/impl/SQLServerTracingStorageDatabaseType.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.tracing.rdb.type.impl;
 
-import org.apache.shardingsphere.elasticjob.tracing.rdb.type.DatabaseType;
+import org.apache.shardingsphere.elasticjob.tracing.rdb.type.TracingStorageDatabaseType;
 
 /**
- * SQLServer database type.
+ * Tracing storage database type for SQLServer.
  */
-public final class SQLServerDatabaseType implements DatabaseType {
+public final class SQLServerTracingStorageDatabaseType implements TracingStorageDatabaseType {
     
     @Override
     public String getType() {

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/tracing/yaml/YamlTracingConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.kernel.tracing.yaml;
 
 import lombok.Getter;
-import lombok.NoArgsConstructor;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.kernel.infra.yaml.config.YamlConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.tracing.api.TracingConfiguration;
@@ -28,7 +27,6 @@
  *
  * @param <T> type of storage
  */
-@NoArgsConstructor
 @Getter
 @Setter
 public final class YamlTracingConfiguration<T> implements YamlConfiguration<TracingConfiguration<T>> {

File: ecosystem/error-handler/normal/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/normal/IgnoreJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
+package org.apache.shardingsphere.elasticjob.error.handler.normal;
 
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 

File: ecosystem/error-handler/normal/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/normal/LogJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
+package org.apache.shardingsphere.elasticjob.error.handler.normal;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;

File: ecosystem/error-handler/normal/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/normal/ThrowJobErrorHandler.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
+package org.apache.shardingsphere.elasticjob.error.handler.normal;
 
-import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.kernel.infra.exception.JobSystemException;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 
 /**
  * Job error handler for throw exception.

File: ecosystem/error-handler/normal/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/normal/IgnoreJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
+package org.apache.shardingsphere.elasticjob.error.handler.normal;
 
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;

File: ecosystem/error-handler/normal/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/normal/LogJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
+package org.apache.shardingsphere.elasticjob.error.handler.normal;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.LoggingEvent;

File: ecosystem/error-handler/normal/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/normal/ThrowJobErrorHandlerTest.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
+package org.apache.shardingsphere.elasticjob.error.handler.normal;
 
-import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.kernel.infra.exception.JobSystemException;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.Test;
 

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/ElasticJobExecutorTest.java
Patch:
@@ -80,7 +80,7 @@ void setUp() {
     
     private JobConfiguration createJobConfiguration() {
         return JobConfiguration.newBuilder("test_job", 3)
-                .cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").jobParameter("param").failover(true).misfire(false).jobErrorHandlerType("THROW").description("desc").build();
+                .cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").jobParameter("param").failover(true).misfire(false).jobErrorHandlerType("FOO").description("desc").build();
     }
     
     @Test

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/type/IgnoreJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
 
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/type/LogJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/type/ThrowJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
 
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.kernel.infra.exception.JobSystemException;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/JobErrorHandlerReloaderTest.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler;
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general.IgnoreJobErrorHandler;
-import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general.LogJobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type.IgnoreJobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type.LogJobErrorHandler;
 import org.apache.shardingsphere.elasticjob.test.util.ReflectionUtils;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/type/IgnoreJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
 
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/type/LogJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.LoggingEvent;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/type/ThrowJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.type;
 
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.kernel.infra.exception.JobSystemException;

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBJobEventStorage.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.Strings;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.kernel.infra.constant.ExecutionType;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ExecutionType;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.event.JobStatusTraceEvent;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.event.JobStatusTraceEvent.State;

File: ecosystem/tracing/rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/listener/RDBTracingListenerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.tracing.rdb.listener;
 
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.shardingsphere.elasticjob.kernel.infra.constant.ExecutionType;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ExecutionType;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.JobTracingEventBus;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.api.TracingConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.event.JobExecutionEvent;

File: ecosystem/tracing/rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBJobEventStorageTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.tracing.rdb.storage;
 
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.shardingsphere.elasticjob.kernel.infra.constant.ExecutionType;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ExecutionType;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.event.JobStatusTraceEvent;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.event.JobStatusTraceEvent.State;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/context/TaskContext.java
Patch:
@@ -24,7 +24,7 @@
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
-import org.apache.shardingsphere.elasticjob.kernel.infra.constant.ExecutionType;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ExecutionType;
 
 import java.util.Collections;
 import java.util.List;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/ExecutionType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.infra.constant;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor;
 
 /**
  * Execution type.

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/tracing/event/JobStatusTraceEvent.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.kernel.infra.constant.ExecutionType;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ExecutionType;
 
 import java.util.Date;
 import java.util.UUID;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/context/TaskContextTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.internal.context;
 
-import org.apache.shardingsphere.elasticjob.kernel.infra.constant.ExecutionType;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ExecutionType;
 import org.apache.shardingsphere.elasticjob.kernel.internal.context.TaskContext.MetaInfo;
 import org.apache.shardingsphere.elasticjob.kernel.internal.context.fixture.TaskNode;
 import org.hamcrest.CoreMatchers;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/context/fixture/TaskNode.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.kernel.internal.context.fixture;
 
 import lombok.Builder;
-import org.apache.shardingsphere.elasticjob.kernel.infra.constant.ExecutionType;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ExecutionType;
 
 @Builder
 public final class TaskNode {

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/JobFacadeTest.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.infra.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.spi.listener.param.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.kernel.api.listener.fixture.ElasticJobListenerCaller;
-import org.apache.shardingsphere.elasticjob.kernel.api.listener.fixture.TestElasticJobListener;
+import org.apache.shardingsphere.elasticjob.kernel.listener.fixture.ElasticJobListenerCaller;
+import org.apache.shardingsphere.elasticjob.kernel.listener.fixture.TestElasticJobListener;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.kernel.internal.failover.FailoverService;
 import org.apache.shardingsphere.elasticjob.kernel.internal.sharding.ExecutionContextService;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/listener/DistributeOnceElasticJobListenerTest.java
Patch:
@@ -15,14 +15,14 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.api.listener;
+package org.apache.shardingsphere.elasticjob.kernel.listener;
 
 import com.google.common.collect.Sets;
 import org.apache.shardingsphere.elasticjob.kernel.infra.time.TimeService;
 import org.apache.shardingsphere.elasticjob.kernel.infra.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.spi.listener.param.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.kernel.api.listener.fixture.ElasticJobListenerCaller;
-import org.apache.shardingsphere.elasticjob.kernel.api.listener.fixture.TestDistributeOnceElasticJobListener;
+import org.apache.shardingsphere.elasticjob.kernel.listener.fixture.ElasticJobListenerCaller;
+import org.apache.shardingsphere.elasticjob.kernel.listener.fixture.TestDistributeOnceElasticJobListener;
 import org.apache.shardingsphere.elasticjob.kernel.internal.guarantee.GuaranteeService;
 import org.apache.shardingsphere.elasticjob.test.util.ReflectionUtils;
 import org.junit.jupiter.api.BeforeEach;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/listener/fixture/ElasticJobListenerCaller.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.api.listener.fixture;
+package org.apache.shardingsphere.elasticjob.kernel.listener.fixture;
 
 public interface ElasticJobListenerCaller {
     

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/listener/fixture/TestDistributeOnceElasticJobListener.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.api.listener.fixture;
+package org.apache.shardingsphere.elasticjob.kernel.listener.fixture;
 
 import org.apache.shardingsphere.elasticjob.spi.listener.param.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.kernel.listener.AbstractDistributeOnceElasticJobListener;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/listener/fixture/TestElasticJobListener.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.api.listener.fixture;
+package org.apache.shardingsphere.elasticjob.kernel.listener.fixture;
 
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.spi.listener.ElasticJobListener;

File: bootstrap/src/main/java/org/apache/shardingsphere/elasticjob/bootstrap/type/OneOffJobBootstrap.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.bootstrap.impl;
+package org.apache.shardingsphere.elasticjob.bootstrap.type;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;

File: bootstrap/src/main/java/org/apache/shardingsphere/elasticjob/bootstrap/type/ScheduleJobBootstrap.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.bootstrap.impl;
+package org.apache.shardingsphere.elasticjob.bootstrap.type;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;

File: bootstrap/src/test/java/org/apache/shardingsphere/elasticjob/bootstrap/type/OneOffJobBootstrapTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.bootstrap.impl;
+package org.apache.shardingsphere.elasticjob.bootstrap.type;
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobScheduler;

File: examples/elasticjob-example-java/src/main/java/org/apache/shardingsphere/elasticjob/example/JavaMain.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.shardingsphere.elasticjob.error.handler.wechat.WechatPropertiesConstants;
 import org.apache.shardingsphere.elasticjob.example.job.dataflow.JavaDataflowJob;
 import org.apache.shardingsphere.elasticjob.http.props.HttpJobProperties;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.example.job.simple.JavaOccurErrorJob;
 import org.apache.shardingsphere.elasticjob.example.job.simple.JavaSimpleJob;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;

File: examples/elasticjob-example-springboot/src/main/java/org/apache/shardingsphere/elasticjob/example/controller/OneOffJobController.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.controller;
 
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.web.bind.annotation.GetMapping;

File: spring/boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/spring/boot/job/ElasticJobBootstrapConfiguration.java
Patch:
@@ -23,8 +23,8 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.spring.boot.tracing.TracingProperties;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.kernel.internal.tracing.api.TracingConfiguration;

File: spring/boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/spring/boot/job/ScheduleJobBootstrapStartupRunner.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Setter;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.springframework.boot.CommandLineRunner;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;

File: spring/boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/spring/boot/job/ElasticJobSpringBootScannerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.spring.boot.job;
 
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.spring.boot.job.fixture.job.impl.AnnotationCustomJob;
 import org.apache.shardingsphere.elasticjob.spring.core.scanner.ElasticJobScan;
 import org.apache.shardingsphere.elasticjob.test.util.EmbedTestingServer;

File: spring/boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/spring/boot/job/ElasticJobSpringBootTest.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobExtraConfiguration;
 import org.apache.shardingsphere.elasticjob.bootstrap.JobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobScheduler;
 import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.spring.boot.job.fixture.job.impl.CustomTestJob;

File: spring/core/src/main/java/org/apache/shardingsphere/elasticjob/spring/core/scanner/ClassPathJobScanner.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.springframework.beans.factory.config.BeanDefinitionHolder;
 import org.springframework.beans.factory.config.RuntimeBeanReference;

File: spring/namespace/src/main/java/org/apache/shardingsphere/elasticjob/spring/namespace/job/parser/JobBeanDefinitionParser.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.google.common.base.Strings;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.spring.namespace.job.tag.JobBeanDefinitionTag;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.AbstractBeanDefinition;

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/job/AbstractOneOffJobSpringIntegrateTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.spring.namespace.job;
 
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.spring.namespace.fixture.job.DataflowElasticJob;

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/job/OneOffJobSpringNamespaceWithRefTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.spring.namespace.job;
 
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.spring.namespace.fixture.job.ref.RefFooSimpleElasticJob;

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/job/OneOffJobSpringNamespaceWithTypeTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.spring.namespace.job;
 
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.test.util.EmbedTestingServer;

File: test/e2e/src/test/java/org/apache/shardingsphere/elasticjob/test/e2e/annotation/BaseAnnotationE2ETest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.bootstrap.JobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.annotation.JobAnnotationBuilder;
 import org.apache.shardingsphere.elasticjob.kernel.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;

File: test/e2e/src/test/java/org/apache/shardingsphere/elasticjob/test/e2e/raw/BaseE2ETest.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.bootstrap.JobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.OneOffJobBootstrap;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.OneOffJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.test.util.ReflectionUtils;

File: test/e2e/src/test/java/org/apache/shardingsphere/elasticjob/test/e2e/raw/disable/DisabledJobE2ETest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.infra.env.IpUtils;
 import org.apache.shardingsphere.elasticjob.kernel.infra.yaml.YamlEngine;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.kernel.internal.server.ServerStatus;

File: test/e2e/src/test/java/org/apache/shardingsphere/elasticjob/test/e2e/raw/enable/EnabledJobE2ETest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.kernel.infra.env.IpUtils;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.kernel.infra.yaml.YamlEngine;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.test.e2e.raw.BaseE2ETest;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.kernel.internal.server.ServerStatus;

File: test/e2e/src/test/java/org/apache/shardingsphere/elasticjob/test/e2e/snapshot/BaseSnapshotServiceE2ETest.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.bootstrap.impl.ScheduleJobBootstrap;
+import org.apache.shardingsphere.elasticjob.bootstrap.type.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.kernel.internal.snapshot.SnapshotService;
 import org.apache.shardingsphere.elasticjob.test.util.ReflectionUtils;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/ElasticJobExecutor.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandlerReloader;
 import org.apache.shardingsphere.elasticjob.spi.JobItemExecutor;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.item.JobItemExecutorFactory;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/JobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler;
 
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/JobErrorHandlerPropertiesValidator.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler;
 
 import org.apache.shardingsphere.infra.spi.annotation.SingletonSPI;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/JobErrorHandlerReloader.java
Patch:
@@ -19,7 +19,6 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 
 import java.io.Closeable;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/IgnoreJobErrorHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 
 /**
  * Job error handler for ignore exception.

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/LogJobErrorHandler.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 
 /**
  * Job error handler for log error message.

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/ThrowJobErrorHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 
 /**

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/schedule/JobScheduler.java
Patch:
@@ -22,7 +22,7 @@
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerPropertiesValidator;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandlerPropertiesValidator;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.JobFacade;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/JobErrorHandlerReloaderTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler;
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general.IgnoreJobErrorHandler;
 import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general.LogJobErrorHandler;
 import org.apache.shardingsphere.elasticjob.test.util.ReflectionUtils;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.Test;
 

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.LoggingEvent;
 import ch.qos.logback.core.read.ListAppender;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/ThrowJobErrorHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.Test;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/fixture/executor/TypedFooJobExecutor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.fixture.executor;
+package org.apache.shardingsphere.elasticjob.kernel.fixture.executor;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/fixture/job/FailedJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.kernel.internal.executor.fixture.job;
+package org.apache.shardingsphere.elasticjob.kernel.fixture.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/item/JobItemExecutorFactoryTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.kernel.fixture.executor.ClassedFooJobExecutor;
 import org.apache.shardingsphere.elasticjob.kernel.fixture.job.DetailedFooJob;
 import org.apache.shardingsphere.elasticjob.kernel.fixture.job.FooJob;
-import org.apache.shardingsphere.elasticjob.kernel.internal.executor.fixture.job.FailedJob;
+import org.apache.shardingsphere.elasticjob.kernel.fixture.job.FailedJob;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.instanceOf;

File: ecosystem/error-handler/type/dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkJobErrorHandlerPropertiesValidatorTest.java
Patch:
@@ -47,7 +47,7 @@ void assertValidateWithPropsIsNull() {
     void assertValidateWithWebhookIsNull() {
         try {
             TypedSPILoader.getService(JobErrorHandlerPropertiesValidator.class, "DINGTALK").validate(new Properties());
-        } catch (final NullPointerException ex) {
+        } catch (final IllegalArgumentException ex) {
             assertThat(ex.getMessage(), is(String.format("The property `%s` is required.", DingtalkPropertiesConstants.WEBHOOK)));
         }
     }

File: ecosystem/error-handler/type/email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerPropertiesValidatorTest.java
Patch:
@@ -51,7 +51,7 @@ void assertValidateWithPropsIsNull() {
     void assertValidateWithHostIsNull() {
         try {
             TypedSPILoader.getService(JobErrorHandlerPropertiesValidator.class, "EMAIL").validate(new Properties());
-        } catch (final NullPointerException ex) {
+        } catch (final IllegalArgumentException ex) {
             assertThat(ex.getMessage(), is(String.format("The property `%s` is required.", EmailPropertiesConstants.HOST)));
         }
     }

File: ecosystem/error-handler/type/wechat/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatJobErrorHandlerPropertiesValidatorTest.java
Patch:
@@ -47,7 +47,7 @@ void assertValidateWithPropsIsNull() {
     void assertValidateWithWebhookIsNull() {
         try {
             TypedSPILoader.getService(JobErrorHandlerPropertiesValidator.class, "WECHAT").validate(new Properties());
-        } catch (final NullPointerException ex) {
+        } catch (final IllegalArgumentException ex) {
             assertThat(ex.getMessage(), is(String.format("The property `%s` is required.", WechatPropertiesConstants.WEBHOOK)));
         }
     }

File: api/src/main/java/org/apache/shardingsphere/elasticjob/spi/param/ShardingContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.api;
+package org.apache.shardingsphere.elasticjob.spi.param;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;

File: api/src/main/java/org/apache/shardingsphere/elasticjob/spi/type/ClassedJobItemExecutor.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.item.impl;
+package org.apache.shardingsphere.elasticjob.spi.type;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
+import org.apache.shardingsphere.elasticjob.spi.JobItemExecutor;
 import org.apache.shardingsphere.infra.spi.annotation.SingletonSPI;
 
 /**

File: api/src/main/java/org/apache/shardingsphere/elasticjob/spi/type/TypedJobItemExecutor.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.item.impl;
+package org.apache.shardingsphere.elasticjob.spi.type;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
+import org.apache.shardingsphere.elasticjob.spi.JobItemExecutor;
 import org.apache.shardingsphere.infra.spi.annotation.SingletonSPI;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 

File: api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/job/CustomJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.annotation.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 public interface CustomJob extends ElasticJob {
     

File: api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/job/impl/SimpleTestJob.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
 import org.apache.shardingsphere.elasticjob.annotation.SimpleTracingConfigurationFactory;
 import org.apache.shardingsphere.elasticjob.annotation.job.CustomJob;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 @ElasticJobConfiguration(
         cron = "0/5 * * * * ?",

File: ecosystem/error-handler/type/dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkJobErrorHandlerPropertiesValidator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.dingtalk;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerPropertiesValidator;
-import org.apache.shardingsphere.elasticjob.error.handler.JobPropertiesValidateRule;
+import org.apache.shardingsphere.elasticjob.infra.validate.JobPropertiesValidateRule;
 
 import java.util.Properties;
 

File: ecosystem/error-handler/type/email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerPropertiesValidator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.email;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerPropertiesValidator;
-import org.apache.shardingsphere.elasticjob.error.handler.JobPropertiesValidateRule;
+import org.apache.shardingsphere.elasticjob.infra.validate.JobPropertiesValidateRule;
 
 import java.util.Properties;
 

File: ecosystem/error-handler/type/wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatJobErrorHandlerPropertiesValidator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.wechat;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerPropertiesValidator;
-import org.apache.shardingsphere.elasticjob.error.handler.JobPropertiesValidateRule;
+import org.apache.shardingsphere.elasticjob.infra.validate.JobPropertiesValidateRule;
 
 import java.util.Properties;
 

File: ecosystem/executor/type/dataflow/src/main/java/org/apache/shardingsphere/elasticjob/dataflow/job/DataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.dataflow.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 import java.util.List;
 

File: ecosystem/executor/type/simple/src/main/java/org/apache/shardingsphere/elasticjob/simple/job/SimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.simple.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 /**
  * Simple job.

File: ecosystem/executor/type/simple/src/test/java/org/apache/shardingsphere/elasticjob/simple/executor/SimpleJobExecutorTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.simple.executor;
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.spi.param.JobRuntimeService;
 import org.apache.shardingsphere.elasticjob.simple.job.FooSimpleJob;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.junit.jupiter.api.BeforeEach;
@@ -43,7 +43,7 @@ class SimpleJobExecutorTest {
     private JobConfiguration jobConfig;
     
     @Mock
-    private JobFacade jobFacade;
+    private JobRuntimeService jobRuntimeService;
     
     private SimpleJobExecutor jobExecutor;
     
@@ -54,7 +54,7 @@ void setUp() {
     
     @Test
     void assertProcess() {
-        jobExecutor.process(fooSimpleJob, jobConfig, jobFacade, any());
+        jobExecutor.process(fooSimpleJob, jobConfig, jobRuntimeService, any());
         verify(fooSimpleJob, times(1)).execute(any());
     }
     

File: ecosystem/executor/type/simple/src/test/java/org/apache/shardingsphere/elasticjob/simple/job/FooSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.simple.job;
 
 import lombok.Getter;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 @Getter
 public final class FooSimpleJob implements SimpleJob {

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/example/job/dataflow/JavaDataflowJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job.dataflow;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.example.fixture.repository.FooRepository;

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/example/job/dataflow/SpringDataflowJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job.dataflow;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.example.fixture.repository.FooRepository;

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/example/job/simple/JavaOccurErrorJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job.simple;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 
 public final class JavaOccurErrorJob implements SimpleJob {

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/example/job/simple/JavaSimpleJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job.simple;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.example.fixture.repository.FooRepository;

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/example/job/simple/SpringSimpleJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job.simple;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.example.fixture.repository.FooRepository;

File: examples/elasticjob-example-springboot/src/main/java/org/apache/shardingsphere/elasticjob/example/job/SpringBootDataflowJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.example.entity.Foo;
 import org.apache.shardingsphere.elasticjob.example.repository.FooRepository;

File: examples/elasticjob-example-springboot/src/main/java/org/apache/shardingsphere/elasticjob/example/job/SpringBootOccurErrorNoticeDingtalkJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.springframework.stereotype.Component;
 

File: examples/elasticjob-example-springboot/src/main/java/org/apache/shardingsphere/elasticjob/example/job/SpringBootOccurErrorNoticeEmailJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.springframework.stereotype.Component;
 

File: examples/elasticjob-example-springboot/src/main/java/org/apache/shardingsphere/elasticjob/example/job/SpringBootOccurErrorNoticeWechatJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.springframework.stereotype.Component;
 

File: examples/elasticjob-example-springboot/src/main/java/org/apache/shardingsphere/elasticjob/example/job/SpringBootSimpleJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.example.job;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.example.entity.Foo;
 import org.apache.shardingsphere.elasticjob.example.repository.FooRepository;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/listener/ShardingContexts.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 import java.io.Serializable;
 import java.util.Map;

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/validate/JobPropertiesValidateRule.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler;
+package org.apache.shardingsphere.elasticjob.infra.validate;
 
 import com.google.common.base.Preconditions;
 import lombok.AccessLevel;

File: infra/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/ShardingContextsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.infra.listener;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/JobErrorHandlerReloader.java
Patch:
@@ -15,10 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler;
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 
 import java.io.Closeable;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/IgnoreJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/LogJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/ThrowJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/item/JobItemExecutorFactory.java
Patch:
@@ -15,12 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.item;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.item;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.executor.item.impl.ClassedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.spi.JobItemExecutor;
+import org.apache.shardingsphere.elasticjob.spi.type.ClassedJobItemExecutor;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;
 

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/ElasticJobExecutorService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool;
 
 import com.google.common.util.concurrent.MoreExecutors;
 import org.apache.commons.lang3.concurrent.BasicThreadFactory;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/ExecutorServiceReloader.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool;
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/JobExecutorThreadPoolSizeProvider.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool;
 
 import org.apache.shardingsphere.infra.spi.annotation.SingletonSPI;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/type/CPUUsageJobExecutorThreadPoolSizeProvider.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool.type;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.type;
 
-import org.apache.shardingsphere.elasticjob.executor.threadpool.JobExecutorThreadPoolSizeProvider;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.JobExecutorThreadPoolSizeProvider;
 
 /**
  * Job executor pool size provider with use CPU available processors.

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/type/SingleThreadJobExecutorThreadPoolSizeProvider.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool.type;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.type;
 
-import org.apache.shardingsphere.elasticjob.executor.threadpool.JobExecutorThreadPoolSizeProvider;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.JobExecutorThreadPoolSizeProvider;
 
 /**
  * Job executor pool size provider with single thread.

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/schedule/LiteJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.kernel.internal.schedule;
 
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.executor.ElasticJobExecutor;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.ElasticJobExecutor;
 import org.quartz.Job;
 import org.quartz.JobExecutionContext;
 

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/fixture/YamlConstants.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.NoArgsConstructor;
 
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
-public final class LiteYamlConstants {
+public final class YamlConstants {
     
     private static final String JOB_YAML = "jobName: test_job\n"
             + "cron: 0/1 * * * * ?\n"

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/fixture/job/AnnotationSimpleJob.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 
 @Getter

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/fixture/job/AnnotationUnShardingJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 
 @Getter

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/fixture/job/DetailedFooJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.kernel.fixture.job;
 
 import lombok.Getter;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 import java.util.Collection;
 import java.util.concurrent.CopyOnWriteArraySet;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/fixture/job/FooJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.kernel.fixture.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 public interface FooJob extends ElasticJob {
     

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.LoggingEvent;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/error/handler/general/ThrowJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.general;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/fixture/job/DetailedFooJob.java
Patch:
@@ -15,10 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.fixture.job;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.fixture.job;
 
 import lombok.Getter;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.kernel.fixture.job.FooJob;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 import java.util.Collection;
 import java.util.concurrent.CopyOnWriteArraySet;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/fixture/job/FailedJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.fixture.job;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.fixture.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/ElasticJobExecutorServiceTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool;
 
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.Test;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/ExecutorServiceReloaderTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool;
 
 import lombok.SneakyThrows;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/type/CPUUsageJobExecutorThreadPoolSizeProviderTest.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool.type;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.type;
 
-import org.apache.shardingsphere.elasticjob.executor.threadpool.JobExecutorThreadPoolSizeProvider;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.JobExecutorThreadPoolSizeProvider;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.Test;
 

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/executor/threadpool/type/SingleThreadJobExecutorThreadPoolSizeProviderTest.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.executor.threadpool.type;
+package org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.type;
 
-import org.apache.shardingsphere.elasticjob.executor.threadpool.JobExecutorThreadPoolSizeProvider;
+import org.apache.shardingsphere.elasticjob.kernel.internal.executor.threadpool.JobExecutorThreadPoolSizeProvider;
 import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.Test;
 

File: spring/boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/spring/boot/job/fixture/job/CustomJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.spring.boot.job.fixture.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 public interface CustomJob extends ElasticJob {
     

File: spring/boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/spring/boot/job/fixture/job/impl/AnnotationCustomJob.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.spring.boot.job.fixture.job.CustomJob;
 import org.springframework.transaction.annotation.Transactional;
 

File: spring/boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/spring/boot/job/fixture/job/impl/CustomTestJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.spring.boot.job.fixture.job.impl;
 
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.spring.boot.job.fixture.job.CustomJob;
 import org.apache.shardingsphere.elasticjob.spring.boot.job.repository.BarRepository;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring/core/src/test/java/org/apache/shardingsphere/elasticjob/spring/core/util/TargetJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.spring.core.util;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 
 public class TargetJob implements ElasticJob {
     

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/fixture/job/DataflowElasticJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.spring.namespace.fixture.job;
 
 import lombok.Getter;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 
 import java.util.Collections;

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/fixture/job/FooSimpleElasticJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.spring.namespace.fixture.job;
 
 import lombok.Getter;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 
 public class FooSimpleElasticJob implements SimpleJob {

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/fixture/job/annotation/AnnotationSimpleJob.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobConfiguration;
 import org.apache.shardingsphere.elasticjob.annotation.ElasticJobProp;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 
 @Getter

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/fixture/job/ref/RefFooDataflowElasticJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.spring.namespace.fixture.service.FooService;
 

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/spring/namespace/fixture/job/ref/RefFooSimpleElasticJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.spi.param.ShardingContext;
 import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.spring.namespace.fixture.service.FooService;
 

File: ecosystem/error-handler/type/dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkJobErrorHandlerPropertiesValidator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.dingtalk;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerPropertiesValidator;
-import org.apache.shardingsphere.elasticjob.infra.validator.JobPropertiesValidateRule;
+import org.apache.shardingsphere.elasticjob.error.handler.JobPropertiesValidateRule;
 
 import java.util.Properties;
 

File: ecosystem/error-handler/type/email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerPropertiesValidator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.email;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerPropertiesValidator;
-import org.apache.shardingsphere.elasticjob.infra.validator.JobPropertiesValidateRule;
+import org.apache.shardingsphere.elasticjob.error.handler.JobPropertiesValidateRule;
 
 import java.util.Properties;
 

File: ecosystem/error-handler/type/general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobPropertiesValidateRule.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.validator;
+package org.apache.shardingsphere.elasticjob.error.handler;
 
 import com.google.common.base.Preconditions;
 import lombok.AccessLevel;

File: ecosystem/error-handler/type/general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/JobPropertiesValidateRuleTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.validator;
+package org.apache.shardingsphere.elasticjob.error.handler;
 
 import org.junit.jupiter.api.Test;
 

File: ecosystem/error-handler/type/wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatJobErrorHandlerPropertiesValidator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.wechat;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerPropertiesValidator;
-import org.apache.shardingsphere.elasticjob.infra.validator.JobPropertiesValidateRule;
+import org.apache.shardingsphere.elasticjob.error.handler.JobPropertiesValidateRule;
 
 import java.util.Properties;
 

File: ecosystem/tracing/api/src/main/java/org/apache/shardingsphere/elasticjob/tracing/event/JobStatusTraceEvent.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
+import org.apache.shardingsphere.elasticjob.infra.constant.ExecutionType;
 
 import java.util.Date;
 import java.util.UUID;

File: ecosystem/tracing/rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBJobEventStorage.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.Strings;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
+import org.apache.shardingsphere.elasticjob.infra.constant.ExecutionType;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent.State;

File: ecosystem/tracing/rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/listener/RDBTracingListenerTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.SneakyThrows;
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
+import org.apache.shardingsphere.elasticjob.infra.constant.ExecutionType;
 import org.apache.shardingsphere.elasticjob.tracing.JobTracingEventBus;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;

File: ecosystem/tracing/rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBJobEventStorageTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.tracing.rdb.storage;
 
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
+import org.apache.shardingsphere.elasticjob.infra.constant.ExecutionType;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent.State;

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/constant/ExecutionType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.context;
+package org.apache.shardingsphere.elasticjob.infra.constant;
 
 /**
  * Execution type.

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/api/listener/AbstractDistributeOnceElasticJobListener.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Set;
 
 /**
- * Distributed once elasticjob listener.
+ * Distributed once ElasticJob listener.
  */
 public abstract class AbstractDistributeOnceElasticJobListener implements ElasticJobListener {
     

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/config/ConfigurationService.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.kernel.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.kernel.internal.time.TimeService;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/config/JobConfigurationPOJO.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.pojo;
+package org.apache.shardingsphere.elasticjob.kernel.internal.config;
 
 import lombok.Getter;
 import lombok.Setter;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/config/RescheduleListenerManager.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/context/TaskContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.context;
+package org.apache.shardingsphere.elasticjob.kernel.internal.context;
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
@@ -24,6 +24,7 @@
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
+import org.apache.shardingsphere.elasticjob.infra.constant.ExecutionType;
 
 import java.util.Collections;
 import java.util.List;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/failover/FailoverListenerManager.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.kernel.internal.failover;
 
 import org.apache.shardingsphere.elasticjob.kernel.internal.sharding.JobInstance;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.ConfigurationNode;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.ConfigurationService;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/schedule/LiteJobFacade.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
+import org.apache.shardingsphere.elasticjob.kernel.internal.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.infra.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.infra.listener.ShardingContexts;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/sharding/MonitorExecutionListenerManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.internal.sharding;
 
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.ConfigurationNode;
 import org.apache.shardingsphere.elasticjob.kernel.internal.listener.AbstractListenerManager;

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/sharding/ShardingListenerManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.kernel.internal.sharding;
 
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.ConfigurationNode;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.ConfigurationService;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/integrate/disable/DisabledJobIntegrateTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.api.bootstrap.impl.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.fixture.job.DetailedFooJob;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/integrate/enable/EnabledJobIntegrateTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.api.bootstrap.impl.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.kernel.integrate.BaseIntegrateTest;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/annotation/integrate/OneOffEnabledJobTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.fixture.job.AnnotationUnShardingJob;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/annotation/integrate/ScheduleEnabledJobTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.fixture.job.AnnotationSimpleJob;
 import org.apache.shardingsphere.elasticjob.kernel.internal.schedule.JobRegistry;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/config/ConfigurationServiceTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.fixture.LiteYamlConstants;
 import org.apache.shardingsphere.elasticjob.kernel.internal.storage.JobNodeStorage;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/config/JobConfigurationPOJOTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.pojo;
+package org.apache.shardingsphere.elasticjob.kernel.internal.config;
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/context/fixture/TaskNode.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.context.fixture;
+package org.apache.shardingsphere.elasticjob.kernel.internal.context.fixture;
 
 import lombok.Builder;
-import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
+import org.apache.shardingsphere.elasticjob.infra.constant.ExecutionType;
 
 @Builder
 public final class TaskNode {

File: lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lifecycle/api/JobConfigurationAPI.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lifecycle.api;
 
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 
 /**
  * Job configuration API.

File: lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lifecycle/internal/settings/JobConfigurationAPIImpl.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.kernel.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lifecycle.api.JobConfigurationAPI;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;

File: lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lifecycle/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.kernel.internal.sharding.JobInstance;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.kernel.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lifecycle.api.JobStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lifecycle.domain.JobBriefInfo;

File: lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lifecycle/internal/settings/JobConfigurationAPIImplTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lifecycle.internal.settings;
 
 import org.apache.shardingsphere.elasticjob.dataflow.props.DataflowJobProperties;
-import org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO;
+import org.apache.shardingsphere.elasticjob.kernel.internal.config.JobConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.lifecycle.api.JobConfigurationAPI;
 import org.apache.shardingsphere.elasticjob.lifecycle.fixture.LifecycleYamlConstants;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/json/GsonFactory.java
Patch:
@@ -28,14 +28,14 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class GsonFactory {
     
-    private static final Gson gson = new GsonBuilder().create();
+    private static final Gson GSON = new GsonBuilder().create();
     
     /**
      * Get gson instance.
      *
      * @return gson instance
      */
     public static Gson getGson() {
-        return gson;
+        return GSON;
     }
 }

File: api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfiguration.java
Patch:
@@ -125,11 +125,11 @@
     String jobShardingStrategyType() default "";
     
     /**
-     * Job thread pool handler type.
+     * Job executor thread pool size provider type.
      * 
-     * @return job executor service handler type
+     * @return job executor thread pool size provider type
      */
-    String jobExecutorServiceHandlerType() default "";
+    String jobExecutorThreadPoolSizeProviderType() default "";
     
     /**
      * Job thread pool handler type.

File: api/src/test/java/org/apache/shardingsphere/elasticjob/api/JobConfigurationTest.java
Patch:
@@ -36,7 +36,7 @@ void assertBuildAllProperties() {
                 .shardingItemParameters("0=a,1=b,2=c").jobParameter("param")
                 .monitorExecution(false).failover(true).misfire(false)
                 .maxTimeDiffSeconds(1000).reconcileIntervalMinutes(60)
-                .jobShardingStrategyType("AVG_ALLOCATION").jobExecutorServiceHandlerType("SINGLE_THREAD").jobErrorHandlerType("IGNORE")
+                .jobShardingStrategyType("AVG_ALLOCATION").jobExecutorThreadPoolSizeProviderType("SINGLE_THREAD").jobErrorHandlerType("IGNORE")
                 .description("desc").setProperty("key", "value")
                 .disabled(true).overwrite(true).build();
         assertThat(actual.getJobName(), is("test_job"));
@@ -51,7 +51,7 @@ void assertBuildAllProperties() {
         assertThat(actual.getMaxTimeDiffSeconds(), is(1000));
         assertThat(actual.getReconcileIntervalMinutes(), is(60));
         assertThat(actual.getJobShardingStrategyType(), is("AVG_ALLOCATION"));
-        assertThat(actual.getJobExecutorServiceHandlerType(), is("SINGLE_THREAD"));
+        assertThat(actual.getJobExecutorThreadPoolSizeProviderType(), is("SINGLE_THREAD"));
         assertThat(actual.getJobErrorHandlerType(), is("IGNORE"));
         assertThat(actual.getDescription(), is("desc"));
         assertThat(actual.getProps().getProperty("key"), is("value"));
@@ -74,7 +74,7 @@ public void assertBuildRequiredProperties() {
         assertThat(actual.getMaxTimeDiffSeconds(), is(-1));
         assertThat(actual.getReconcileIntervalMinutes(), is(10));
         assertNull(actual.getJobShardingStrategyType());
-        assertNull(actual.getJobExecutorServiceHandlerType());
+        assertNull(actual.getJobExecutorThreadPoolSizeProviderType());
         assertNull(actual.getJobErrorHandlerType());
         assertThat(actual.getDescription(), is(""));
         assertTrue(actual.getProps().isEmpty());

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/threadpool/ElasticJobExecutorService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.concurrent;
+package org.apache.shardingsphere.elasticjob.infra.handler.threadpool;
 
 import com.google.common.util.concurrent.MoreExecutors;
 import org.apache.commons.lang3.concurrent.BasicThreadFactory;

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/pojo/JobConfigurationPOJO.java
Patch:
@@ -61,7 +61,7 @@ public final class JobConfigurationPOJO {
     
     private String jobShardingStrategyType;
     
-    private String jobExecutorServiceHandlerType;
+    private String jobExecutorThreadPoolSizeProviderType;
     
     private String jobErrorHandlerType;
     
@@ -91,7 +91,7 @@ public JobConfiguration toJobConfiguration() {
                 .cron(cron).timeZone(timeZone).shardingItemParameters(shardingItemParameters).jobParameter(jobParameter)
                 .monitorExecution(monitorExecution).failover(failover).misfire(misfire)
                 .maxTimeDiffSeconds(maxTimeDiffSeconds).reconcileIntervalMinutes(reconcileIntervalMinutes)
-                .jobShardingStrategyType(jobShardingStrategyType).jobExecutorServiceHandlerType(jobExecutorServiceHandlerType)
+                .jobShardingStrategyType(jobShardingStrategyType).jobExecutorThreadPoolSizeProviderType(jobExecutorThreadPoolSizeProviderType)
                 .jobErrorHandlerType(jobErrorHandlerType).jobListenerTypes(jobListenerTypes.toArray(new String[]{})).description(description)
                 .disabled(disabled).overwrite(overwrite).label(label).staticSharding(staticSharding).build();
         jobExtraConfigurations.stream().map(YamlConfiguration::toConfiguration).forEach(result.getExtraConfigurations()::add);
@@ -122,7 +122,7 @@ public static JobConfigurationPOJO fromJobConfiguration(final JobConfiguration j
         result.setMaxTimeDiffSeconds(jobConfig.getMaxTimeDiffSeconds());
         result.setReconcileIntervalMinutes(jobConfig.getReconcileIntervalMinutes());
         result.setJobShardingStrategyType(jobConfig.getJobShardingStrategyType());
-        result.setJobExecutorServiceHandlerType(jobConfig.getJobExecutorServiceHandlerType());
+        result.setJobExecutorThreadPoolSizeProviderType(jobConfig.getJobExecutorThreadPoolSizeProviderType());
         result.setJobErrorHandlerType(jobConfig.getJobErrorHandlerType());
         result.setJobListenerTypes(jobConfig.getJobListenerTypes());
         jobConfig.getExtraConfigurations().stream()

File: infra/src/test/java/org/apache/shardingsphere/elasticjob/infra/concurrent/ElasticJobExecutorServiceTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.infra.concurrent;
 
+import org.apache.shardingsphere.elasticjob.infra.handler.threadpool.ElasticJobExecutorService;
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.Test;
 

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/annotation/JobAnnotationBuilder.java
Patch:
@@ -54,7 +54,7 @@ public static JobConfiguration generateJobConfiguration(final Class<?> type) {
                 .maxTimeDiffSeconds(annotation.maxTimeDiffSeconds())
                 .reconcileIntervalMinutes(annotation.reconcileIntervalMinutes())
                 .jobShardingStrategyType(Strings.isNullOrEmpty(annotation.jobShardingStrategyType()) ? null : annotation.jobShardingStrategyType())
-                .jobExecutorServiceHandlerType(Strings.isNullOrEmpty(annotation.jobExecutorServiceHandlerType()) ? null : annotation.jobExecutorServiceHandlerType())
+                .jobExecutorThreadPoolSizeProviderType(Strings.isNullOrEmpty(annotation.jobExecutorThreadPoolSizeProviderType()) ? null : annotation.jobExecutorThreadPoolSizeProviderType())
                 .jobErrorHandlerType(Strings.isNullOrEmpty(annotation.jobErrorHandlerType()) ? null : annotation.jobErrorHandlerType())
                 .jobListenerTypes(annotation.jobListenerTypes())
                 .description(annotation.description())

File: kernel/src/test/java/org/apache/shardingsphere/elasticjob/kernel/internal/annotation/JobAnnotationBuilderTest.java
Patch:
@@ -42,7 +42,7 @@ void assertGenerateJobConfiguration() {
         assertThat(jobConfig.getMaxTimeDiffSeconds(), is(-1));
         assertThat(jobConfig.getReconcileIntervalMinutes(), is(10));
         assertNull(jobConfig.getJobShardingStrategyType());
-        assertNull(jobConfig.getJobExecutorServiceHandlerType());
+        assertNull(jobConfig.getJobExecutorThreadPoolSizeProviderType());
         assertNull(jobConfig.getJobErrorHandlerType());
         assertThat(jobConfig.getDescription(), is("desc"));
         assertThat(jobConfig.getProps().getProperty("print.title"), is("test title"));

File: spring/boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/spring/boot/job/ElasticJobConfigurationProperties.java
Patch:
@@ -61,7 +61,7 @@ public final class ElasticJobConfigurationProperties {
     
     private String jobShardingStrategyType;
     
-    private String jobExecutorServiceHandlerType;
+    private String jobExecutorThreadPoolSizeProviderType;
     
     private String jobErrorHandlerType;
     
@@ -86,7 +86,7 @@ public JobConfiguration toJobConfiguration(final String jobName) {
                 .cron(cron).timeZone(timeZone).shardingItemParameters(shardingItemParameters).jobParameter(jobParameter)
                 .monitorExecution(monitorExecution).failover(failover).misfire(misfire)
                 .maxTimeDiffSeconds(maxTimeDiffSeconds).reconcileIntervalMinutes(reconcileIntervalMinutes)
-                .jobShardingStrategyType(jobShardingStrategyType).jobExecutorServiceHandlerType(jobExecutorServiceHandlerType).jobErrorHandlerType(jobErrorHandlerType)
+                .jobShardingStrategyType(jobShardingStrategyType).jobExecutorThreadPoolSizeProviderType(jobExecutorThreadPoolSizeProviderType).jobErrorHandlerType(jobErrorHandlerType)
                 .jobListenerTypes(jobListenerTypes.toArray(new String[0])).description(description).disabled(disabled).overwrite(overwrite).build();
         props.stringPropertyNames().forEach(each -> result.getProps().setProperty(each, props.getProperty(each)));
         return result;

File: spring/boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/spring/boot/job/ElasticJobConfigurationPropertiesTest.java
Patch:
@@ -45,7 +45,7 @@ void assertToJobConfiguration() {
         properties.setMaxTimeDiffSeconds(1);
         properties.setReconcileIntervalMinutes(2);
         properties.setJobShardingStrategyType("strategyType");
-        properties.setJobExecutorServiceHandlerType("executorType");
+        properties.setJobExecutorThreadPoolSizeProviderType("executorType");
         properties.setJobErrorHandlerType("errorHandlerType");
         properties.setJobListenerTypes(Collections.singleton("listenerType"));
         properties.setDescription("test desc");
@@ -62,7 +62,7 @@ void assertToJobConfiguration() {
         assertThat(actual.getMaxTimeDiffSeconds(), is(properties.getMaxTimeDiffSeconds()));
         assertThat(actual.getReconcileIntervalMinutes(), is(properties.getReconcileIntervalMinutes()));
         assertThat(actual.getJobShardingStrategyType(), is(properties.getJobShardingStrategyType()));
-        assertThat(actual.getJobExecutorServiceHandlerType(), is(properties.getJobExecutorServiceHandlerType()));
+        assertThat(actual.getJobExecutorThreadPoolSizeProviderType(), is(properties.getJobExecutorThreadPoolSizeProviderType()));
         assertThat(actual.getJobErrorHandlerType(), is(properties.getJobErrorHandlerType()));
         assertThat(actual.getJobListenerTypes().toArray(), is(properties.getJobListenerTypes().toArray()));
         assertThat(actual.getDescription(), is(properties.getDescription()));

File: ecosystem/error-handler/type/dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkJobErrorHandlerTest.java
Patch:
@@ -20,12 +20,12 @@
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.LoggingEvent;
 import ch.qos.logback.core.read.ListAppender;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.error.handler.dingtalk.fixture.DingtalkInternalController;
-import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.restful.NettyRestfulService;
 import org.apache.shardingsphere.elasticjob.restful.NettyRestfulServiceConfiguration;
 import org.apache.shardingsphere.elasticjob.restful.RestfulService;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
@@ -124,7 +124,7 @@ void assertHandleExceptionWithNoSign() {
     }
     
     private DingtalkJobErrorHandler getDingtalkJobErrorHandler(final Properties props) {
-        return (DingtalkJobErrorHandler) JobErrorHandlerFactory.createHandler("DINGTALK", props).orElseThrow(() -> new JobConfigurationException("DINGTALK error handler not found."));
+        return (DingtalkJobErrorHandler) TypedSPILoader.getService(JobErrorHandler.class, "DINGTALK", props);
     }
     
     private Properties createConfigurationProperties(final String webhook) {

File: ecosystem/error-handler/type/email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerTest.java
Patch:
@@ -21,8 +21,8 @@
 import ch.qos.logback.classic.spi.LoggingEvent;
 import ch.qos.logback.core.read.ListAppender;
 import lombok.SneakyThrows;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
-import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -97,7 +97,7 @@ void assertHandleExceptionSucceedInSendingEmail() {
     }
     
     private EmailJobErrorHandler getEmailJobErrorHandler(final Properties props) {
-        return (EmailJobErrorHandler) JobErrorHandlerFactory.createHandler("EMAIL", props).orElseThrow(() -> new JobConfigurationException("EMAIL error handler not found."));
+        return (EmailJobErrorHandler) TypedSPILoader.getService(JobErrorHandler.class, "EMAIL", props);
     }
     
     private void setUpMockSession(final Session session) {

File: ecosystem/error-handler/type/general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -20,8 +20,8 @@
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.LoggingEvent;
 import ch.qos.logback.core.read.ListAppender;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
-import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -52,7 +52,7 @@ void setUp() {
     
     @Test
     void assertHandleException() {
-        LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.createHandler("LOG", new Properties()).orElseThrow(() -> new JobConfigurationException("LOG error handler not found."));
+        LogJobErrorHandler actual = (LogJobErrorHandler) TypedSPILoader.getService(JobErrorHandler.class, "LOG", new Properties());
         Throwable cause = new RuntimeException("test");
         actual.handleException("test_job", cause);
         assertThat(appenderList.size(), is(1));

File: ecosystem/error-handler/type/wechat/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatJobErrorHandlerTest.java
Patch:
@@ -20,12 +20,12 @@
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.LoggingEvent;
 import ch.qos.logback.core.read.ListAppender;
-import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.error.handler.wechat.fixture.WechatInternalController;
-import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.restful.NettyRestfulService;
 import org.apache.shardingsphere.elasticjob.restful.NettyRestfulServiceConfiguration;
 import org.apache.shardingsphere.elasticjob.restful.RestfulService;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
@@ -114,7 +114,7 @@ void assertHandleExceptionWithUrlIsNotFound() {
     }
     
     private WechatJobErrorHandler getWechatJobErrorHandler(final Properties props) {
-        return (WechatJobErrorHandler) JobErrorHandlerFactory.createHandler("WECHAT", props).orElseThrow(() -> new JobConfigurationException("WECHAT error handler not found."));
+        return (WechatJobErrorHandler) TypedSPILoader.getService(JobErrorHandler.class, "WECHAT", props);
     }
     
     private Properties createConfigurationProperties(final String webhook) {

File: ecosystem/executor/kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutor.java
Patch:
@@ -24,13 +24,15 @@
 import org.apache.shardingsphere.elasticjob.executor.context.ExecutorContext;
 import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
 import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutorFactory;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.TypedJobItemExecutor;
 import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
 import org.apache.shardingsphere.elasticjob.infra.exception.ExceptionUtils;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.infra.listener.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent.ExecutionSource;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent.State;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 
 import java.util.Collection;
 import java.util.Map;
@@ -59,7 +61,7 @@ public ElasticJobExecutor(final ElasticJob elasticJob, final JobConfiguration jo
     }
     
     public ElasticJobExecutor(final String type, final JobConfiguration jobConfig, final JobFacade jobFacade) {
-        this(null, jobConfig, jobFacade, JobItemExecutorFactory.getExecutor(type));
+        this(null, jobConfig, jobFacade, TypedSPILoader.getService(TypedJobItemExecutor.class, type));
     }
     
     private ElasticJobExecutor(final ElasticJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final JobItemExecutor jobItemExecutor) {

File: ecosystem/executor/kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/impl/TypedJobItemExecutor.java
Patch:
@@ -19,10 +19,12 @@
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
-import org.apache.shardingsphere.elasticjob.infra.spi.TypedSPI;
+import org.apache.shardingsphere.infra.spi.annotation.SingletonSPI;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 
 /**
  * Typed job item executor.
  */
+@SingletonSPI
 public interface TypedJobItemExecutor extends JobItemExecutor<ElasticJob>, TypedSPI {
 }

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/JobShardingStrategy.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.infra.handler.sharding;
 
-import org.apache.shardingsphere.elasticjob.infra.spi.TypedSPI;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 
 import java.util.List;
 import java.util.Map;

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/threadpool/JobExecutorServiceHandler.java
Patch:
@@ -17,13 +17,15 @@
 
 package org.apache.shardingsphere.elasticjob.infra.handler.threadpool;
 
-import org.apache.shardingsphere.elasticjob.infra.spi.TypedSPI;
+import org.apache.shardingsphere.infra.spi.annotation.SingletonSPI;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 
 import java.util.concurrent.ExecutorService;
 
 /**
  * Job executor service handler.
  */
+@SingletonSPI
 public interface JobExecutorServiceHandler extends TypedSPI {
     
     /**

File: infra/src/main/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListener.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.infra.listener;
 
-import org.apache.shardingsphere.elasticjob.infra.spi.TypedSPI;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
 
 /**
  * ElasticJob listener.

File: kernel/src/main/java/org/apache/shardingsphere/elasticjob/kernel/internal/sharding/ShardingService.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shardingsphere.elasticjob.infra.concurrent.BlockUtils;
 import org.apache.shardingsphere.elasticjob.infra.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.infra.handler.sharding.JobShardingStrategy;
-import org.apache.shardingsphere.elasticjob.infra.handler.sharding.JobShardingStrategyFactory;
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.apache.shardingsphere.elasticjob.kernel.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.kernel.internal.election.LeaderService;
@@ -34,6 +33,7 @@
 import org.apache.shardingsphere.elasticjob.kernel.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.reg.base.transaction.TransactionOperation;
+import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -121,7 +121,7 @@ public void shardingIfNecessary() {
         log.debug("Job '{}' sharding begin.", jobName);
         jobNodeStorage.fillEphemeralJobNode(ShardingNode.PROCESSING, "");
         resetShardingInfo(shardingTotalCount);
-        JobShardingStrategy jobShardingStrategy = JobShardingStrategyFactory.getStrategy(jobConfig.getJobShardingStrategyType());
+        JobShardingStrategy jobShardingStrategy = TypedSPILoader.getService(JobShardingStrategy.class, jobConfig.getJobShardingStrategyType());
         jobNodeStorage.executeInTransaction(getShardingResultTransactionOperations(jobShardingStrategy.sharding(availableJobInstances, jobName, shardingTotalCount)));
         log.debug("Job '{}' sharding complete.", jobName);
     }

File: core/src/test/java/org/apache/shardingsphere/elasticjob/engine/integrate/disable/DisabledJobIntegrateTest.java
Patch:
@@ -42,7 +42,7 @@ public DisabledJobIntegrateTest(final TestType type) {
     }
     
     protected final void assertDisabledRegCenterInfo() {
-        Awaitility.await().atLeast(100L, TimeUnit.MILLISECONDS).atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> {
+        Awaitility.await().atLeast(1L, TimeUnit.MILLISECONDS).atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> {
             assertThat(JobRegistry.getInstance().getCurrentShardingTotalCount(getJobName()), is(3));
             assertThat(JobRegistry.getInstance().getJobInstance(getJobName()).getServerIp(), is(IpUtils.getIp()));
         });

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/engine/spring/namespace/job/OneOffJobSpringNamespaceWithTypeTest.java
Patch:
@@ -52,6 +52,6 @@ void tearDown() {
     void jobScriptWithJobTypeTest() {
         OneOffJobBootstrap bootstrap = applicationContext.getBean(scriptJobName, OneOffJobBootstrap.class);
         bootstrap.execute();
-        Awaitility.await().atLeast(100L, TimeUnit.MILLISECONDS).atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> assertTrue(regCenter.isExisted("/" + scriptJobName + "/sharding")));
+        Awaitility.await().atLeast(1L, TimeUnit.MILLISECONDS).atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> assertTrue(regCenter.isExisted("/" + scriptJobName + "/sharding")));
     }
 }

File: spring/namespace/src/test/java/org/apache/shardingsphere/elasticjob/engine/spring/namespace/scanner/AbstractJobSpringIntegrateTest.java
Patch:
@@ -59,7 +59,7 @@ void assertSpringJobBean() {
     }
     
     private void assertSimpleElasticJobBean() {
-        Awaitility.await().atMost(5L, TimeUnit.SECONDS).untilAsserted(() -> assertThat(AnnotationSimpleJob.isCompleted(), is(true)));
+        Awaitility.await().atMost(10L, TimeUnit.SECONDS).untilAsserted(() -> assertThat(AnnotationSimpleJob.isCompleted(), is(true)));
         assertTrue(AnnotationSimpleJob.isCompleted());
         assertTrue(regCenter.isExisted("/" + simpleJobName + "/sharding"));
     }

File: elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobProp.java
Patch:
@@ -30,12 +30,14 @@
     
     /**
      * Prop key.
+     * 
      * @return key
      */
     String key();
     
     /**
      * Prop value.
+     * 
      * @return value
      */
     String value() default "";

File: elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/api/JobExtraConfigurationFactory.java
Patch:
@@ -25,8 +25,9 @@
 public interface JobExtraConfigurationFactory {
     
     /**
-     * Get JobExtraConfiguration.
-     * @return JobExtraConfiguration
+     * Get job extra configuration.
+     * 
+     * @return job extra configuration
      */
     Optional<JobExtraConfiguration> getJobExtraConfiguration();
 }

File: elasticjob-api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/ElasticJobConfigurationTest.java
Patch:
@@ -29,10 +29,10 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 
-public final class ElasticJobConfigurationTest {
+class ElasticJobConfigurationTest {
     
     @Test
-    public void assertAnnotationJob() {
+    void assertAnnotationJob() {
         ElasticJobConfiguration annotation = SimpleTestJob.class.getAnnotation(ElasticJobConfiguration.class);
         assertThat(annotation.jobName(), is("SimpleTestJob"));
         assertThat(annotation.cron(), is("0/5 * * * * ?"));

File: elasticjob-api/src/test/java/org/apache/shardingsphere/elasticjob/annotation/job/impl/SimpleTestJob.java
Patch:
@@ -29,7 +29,7 @@
         shardingTotalCount = 3,
         shardingItemParameters = "0=Beijing,1=Shanghai,2=Guangzhou",
         jobListenerTypes = {"NOOP", "LOG"},
-        extraConfigurations = {SimpleTracingConfigurationFactory.class},
+        extraConfigurations = SimpleTracingConfigurationFactory.class,
         props = {
                 @ElasticJobProp(key = "print.title", value = "test title"),
                 @ElasticJobProp(key = "print.content", value = "test content")

File: elasticjob-cloud/elasticjob-cloud-executor/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/prod/TaskExecutorThreadTest.java
Patch:
@@ -43,15 +43,15 @@
 import static org.mockito.Mockito.verify;
 
 @ExtendWith(MockitoExtension.class)
-public final class TaskExecutorThreadTest {
+class TaskExecutorThreadTest {
     
     @Mock
     private ExecutorDriver executorDriver;
     
     private final String taskId = String.format("%s@-@0@-@%s@-@fake_slave_id@-@0", "test_job", ExecutionType.READY);
     
     @Test
-    public void assertLaunchTaskWithDaemonTaskAndJavaSimpleJob() {
+    void assertLaunchTaskWithDaemonTaskAndJavaSimpleJob() {
         TaskInfo taskInfo = buildJavaTransientTaskInfo();
         TaskThread taskThread = new TaskExecutor(new TestSimpleJob()).new TaskThread(executorDriver, taskInfo);
         taskThread.run();
@@ -60,7 +60,7 @@ public void assertLaunchTaskWithDaemonTaskAndJavaSimpleJob() {
     }
     
     @Test
-    public void assertLaunchTaskWithDaemonTaskAndJavaScriptJob() {
+    void assertLaunchTaskWithDaemonTaskAndJavaScriptJob() {
         TaskInfo taskInfo = buildSpringScriptTransientTaskInfo();
         TaskThread taskThread = new TaskExecutor(new TestSimpleJob()).new TaskThread(executorDriver, taskInfo);
         taskThread.run();

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/AbstractCloudControllerTest.java
Patch:
@@ -57,7 +57,7 @@ public abstract class AbstractCloudControllerTest {
     private static RestfulService slaveServer;
     
     @BeforeAll
-    public static void setUpClass() {
+    static void setUpClass() {
         initRestfulServer();
         initMesosServer();
     }
@@ -86,15 +86,15 @@ private static void initMesosServer() {
     }
     
     @AfterAll
-    public static void tearDown() {
+    static void tearDown() {
         consoleBootstrap.stop();
         masterServer.shutdown();
         slaveServer.shutdown();
         MesosStateService.deregister();
     }
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         reset(regCenter);
         reset(jobEventRdbSearch);
     }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/app/CloudAppConfigurationNodeTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class CloudAppConfigurationNodeTest {
+class CloudAppConfigurationNodeTest {
     
     @Test
-    public void assertGetRootNodePath() {
+    void assertGetRootNodePath() {
         assertThat(CloudAppConfigurationNode.getRootNodePath("test_job_app"), is("/config/app/test_job_app"));
     }
 }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/app/pojo/CloudAppConfigurationPOJOTest.java
Patch:
@@ -24,10 +24,10 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class CloudAppConfigurationPOJOTest {
+class CloudAppConfigurationPOJOTest {
     
     @Test
-    public void assertToCloudAppConfiguration() {
+    void assertToCloudAppConfiguration() {
         CloudAppConfigurationPOJO pojo = new CloudAppConfigurationPOJO();
         pojo.setAppName("app");
         pojo.setAppURL("url");
@@ -43,7 +43,7 @@ public void assertToCloudAppConfiguration() {
     }
     
     @Test
-    public void assertFromCloudAppConfiguration() {
+    void assertFromCloudAppConfiguration() {
         CloudAppConfigurationPOJO actual = CloudAppConfigurationPOJO.fromCloudAppConfiguration(new CloudAppConfiguration("app", "url", "start.sh"));
         assertThat(actual.getAppName(), is("app"));
         assertThat(actual.getAppURL(), is("url"));

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/job/CloudJobConfigurationNodeTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class CloudJobConfigurationNodeTest {
+class CloudJobConfigurationNodeTest {
     
     @Test
-    public void assertGetRootNodePath() {
+    void assertGetRootNodePath() {
         assertThat(CloudJobConfigurationNode.getRootNodePath("test_job"), is("/config/job/test_job"));
     }
 }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/context/JobContextTest.java
Patch:
@@ -25,10 +25,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class JobContextTest {
+class JobContextTest {
     
     @Test
-    public void assertFrom() {
+    void assertFrom() {
         CloudJobConfiguration cloudJobConfig = CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job").toCloudJobConfiguration();
         JobContext actual = JobContext.from(cloudJobConfig, ExecutionType.READY);
         assertThat(actual.getAssignedShardingItems().size(), is(10));

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/LaunchingTasksTest.java
Patch:
@@ -41,7 +41,7 @@
 import static org.mockito.Mockito.when;
 
 @ExtendWith(MockitoExtension.class)
-public final class LaunchingTasksTest {
+class LaunchingTasksTest {
     
     @Mock
     private CoordinatorRegistryCenter regCenter;
@@ -61,7 +61,7 @@ public final class LaunchingTasksTest {
     private LaunchingTasks launchingTasks;
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         FacadeService facadeService = new FacadeService(regCenter);
         ReflectionUtils.setFieldValue(facadeService, "jobConfigService", jobConfigService);
         ReflectionUtils.setFieldValue(facadeService, "readyService", readyService);
@@ -74,7 +74,7 @@ public void setUp() {
     }
     
     @Test
-    public void assertGetPendingTasks() {
+    void assertGetPendingTasks() {
         List<TaskRequest> actual = launchingTasks.getPendingTasks();
         assertThat(actual.size(), is(20));
     }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/LeasesQueueTest.java
Patch:
@@ -24,12 +24,12 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class LeasesQueueTest {
+class LeasesQueueTest {
     
     private final LeasesQueue leasesQueue = LeasesQueue.getInstance();
     
     @Test
-    public void assertOperate() {
+    void assertOperate() {
         assertTrue(leasesQueue.drainTo().isEmpty());
         leasesQueue.offer(OfferBuilder.createOffer("offer_1"));
         leasesQueue.offer(OfferBuilder.createOffer("offer_2"));

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/SupportedExtractionTypeTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class SupportedExtractionTypeTest {
+class SupportedExtractionTypeTest {
     
     @Test
-    public void assertIsExtraction() {
+    void assertIsExtraction() {
         assertTrue(SupportedExtractionType.isExtraction("http://localhost:8080/test.tar"));
         assertTrue(SupportedExtractionType.isExtraction("http://localhost:8080/test.tar.gz"));
         assertTrue(SupportedExtractionType.isExtraction("http://localhost:8080/test.tar.bz2"));

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/ProducerJobTest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.mockito.Mockito.when;
 
 @ExtendWith(MockitoExtension.class)
-public final class ProducerJobTest {
+class ProducerJobTest {
     
     @Mock
     private JobExecutionContext jobExecutionContext;
@@ -44,14 +44,14 @@ public final class ProducerJobTest {
     private TransientProducerScheduler.ProducerJob producerJob;
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         producerJob = new TransientProducerScheduler.ProducerJob();
         producerJob.setRepository(repository);
         producerJob.setReadyService(readyService);
     }
     
     @Test
-    public void assertExecute() {
+    void assertExecute() {
         when(jobExecutionContext.getJobDetail()).thenReturn(JobBuilder.newJob(TransientProducerScheduler.ProducerJob.class).withIdentity("0/30 * * * * ?").build());
         repository.put(JobKey.jobKey("0/30 * * * * ?"), "test_job");
         producerJob.execute(jobExecutionContext);

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/app/DisableAppNodeTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class DisableAppNodeTest {
+class DisableAppNodeTest {
     
     @Test
-    public void assertGetDisableAppNodePath() {
+    void assertGetDisableAppNodePath() {
         assertThat(DisableAppNode.getDisableAppNodePath("test_app0000000001"), is("/state/disable/app/test_app0000000001"));
     }
 }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/job/DisableJobNodeTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class DisableJobNodeTest {
+class DisableJobNodeTest {
     
     @Test
-    public void assertGetDisableAppNodePath() {
+    void assertGetDisableAppNodePath() {
         assertThat(DisableJobNode.getDisableJobNodePath("test_job0000000001"), is("/state/disable/job/test_job0000000001"));
     }
 }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/failover/FailoverNodeTest.java
Patch:
@@ -24,15 +24,15 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class FailoverNodeTest {
+class FailoverNodeTest {
     
     @Test
-    public void assertGetFailoverJobNodePath() {
+    void assertGetFailoverJobNodePath() {
         assertThat(FailoverNode.getFailoverJobNodePath("test_job"), is("/state/failover/test_job"));
     }
     
     @Test
-    public void assertGetFailoverTaskNodePath() {
+    void assertGetFailoverTaskNodePath() {
         String jobNodePath = TaskNode.builder().type(ExecutionType.FAILOVER).build().getTaskNodePath();
         assertThat(FailoverNode.getFailoverTaskNodePath(jobNodePath), is("/state/failover/test_job/" + jobNodePath));
     }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/ready/ReadyNodeTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class ReadyNodeTest {
+class ReadyNodeTest {
     
     @Test
-    public void assertGetReadyJobNodePath() {
+    void assertGetReadyJobNodePath() {
         assertThat(ReadyNode.getReadyJobNodePath("test_job0000000001"), is("/state/ready/test_job0000000001"));
     }
 }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/running/RunningNodeTest.java
Patch:
@@ -23,15 +23,15 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class RunningNodeTest {
+class RunningNodeTest {
     
     @Test
-    public void assertGetRunningJobNodePath() {
+    void assertGetRunningJobNodePath() {
         assertThat(RunningNode.getRunningJobNodePath("test_job"), is("/state/running/test_job"));
     }
     
     @Test
-    public void assertGetRunningTaskNodePath() {
+    void assertGetRunningTaskNodePath() {
         String nodePath = TaskNode.builder().build().getTaskNodePath();
         assertThat(RunningNode.getRunningTaskNodePath(nodePath), is("/state/running/test_job/" + nodePath));
     }

File: elasticjob-ecosystem/elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -23,10 +23,10 @@
 
 import java.util.Properties;
 
-public final class IgnoreJobErrorHandlerTest {
+class IgnoreJobErrorHandlerTest {
     
     @Test
-    public void assertHandleException() {
+    void assertHandleException() {
         JobErrorHandlerFactory.createHandler("IGNORE", new Properties())
                 .orElseThrow(() -> new JobConfigurationException("IGNORE error handler not found.")).handleException("test_job", new RuntimeException("test"));
     }

File: elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-api/src/test/java/org/apache/shardingsphere/elasticjob/tracing/storage/TracingStorageConverterFactoryTest.java
Patch:
@@ -23,15 +23,15 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class TracingStorageConverterFactoryTest {
+class TracingStorageConverterFactoryTest {
     
     @Test
-    public void assertConverterExists() {
+    void assertConverterExists() {
         assertTrue(TracingStorageConverterFactory.findConverter(JobEventCaller.class).isPresent());
     }
     
     @Test
-    public void assertConverterNotFound() {
+    void assertConverterNotFound() {
         assertFalse(TracingStorageConverterFactory.findConverter(AClassWithoutCorrespondingConverter.class).isPresent());
     }
     

File: elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-api/src/test/java/org/apache/shardingsphere/elasticjob/tracing/yaml/YamlTracingConfigurationConverterTest.java
Patch:
@@ -26,10 +26,10 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class YamlTracingConfigurationConverterTest {
+class YamlTracingConfigurationConverterTest {
     
     @Test
-    public void assertConvertTracingConfiguration() {
+    void assertConvertTracingConfiguration() {
         JobEventCaller expectedStorage = () -> {
         };
         TracingConfiguration<JobEventCaller> tracingConfiguration = new TracingConfiguration<>("TEST", expectedStorage);

File: elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/datasource/DataSourceRegistryTest.java
Patch:
@@ -32,13 +32,13 @@
 import static org.mockito.Mockito.when;
 
 @ExtendWith(MockitoExtension.class)
-public final class DataSourceRegistryTest {
+class DataSourceRegistryTest {
     
     @Mock
     private DataSourceConfiguration dataSourceConfiguration;
     
     @Test
-    public void assertGetDataSourceBySameConfiguration() {
+    void assertGetDataSourceBySameConfiguration() {
         when(dataSourceConfiguration.createDataSource()).then(invocation -> mock(DataSource.class));
         DataSource expected = DataSourceRegistry.getInstance().getDataSource(dataSourceConfiguration);
         DataSource actual = DataSourceRegistry.getInstance().getDataSource(dataSourceConfiguration);
@@ -47,7 +47,7 @@ public void assertGetDataSourceBySameConfiguration() {
     }
     
     @Test
-    public void assertGetDataSourceWithDifferentConfiguration() {
+    void assertGetDataSourceWithDifferentConfiguration() {
         when(dataSourceConfiguration.createDataSource()).then(invocation -> mock(DataSource.class));
         DataSourceConfiguration anotherDataSourceConfiguration = mock(DataSourceConfiguration.class);
         when(anotherDataSourceConfiguration.createDataSource()).then(invocation -> mock(DataSource.class));

File: elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/listener/RDBTracingListenerConfigurationTest.java
Patch:
@@ -25,10 +25,10 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public final class RDBTracingListenerConfigurationTest {
+class RDBTracingListenerConfigurationTest {
     
     @Test
-    public void assertCreateTracingListenerSuccess() throws TracingConfigurationException {
+    void assertCreateTracingListenerSuccess() throws TracingConfigurationException {
         BasicDataSource dataSource = new BasicDataSource();
         dataSource.setDriverClassName(org.h2.Driver.class.getName());
         dataSource.setUrl("jdbc:h2:mem:job_event_storage");
@@ -38,7 +38,7 @@ public void assertCreateTracingListenerSuccess() throws TracingConfigurationExce
     }
     
     @Test
-    public void assertCreateTracingListenerFailure() {
+    void assertCreateTracingListenerFailure() {
         assertThrows(TracingConfigurationException.class, () -> new RDBTracingListenerConfiguration().createTracingListener(new BasicDataSource()));
     }
 }

File: elasticjob-ecosystem/elasticjob-tracing/elasticjob-tracing-rdb/src/test/java/org/apache/shardingsphere/elasticjob/tracing/rdb/yaml/YamlDataSourceConfigurationConverterTest.java
Patch:
@@ -28,10 +28,10 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class YamlDataSourceConfigurationConverterTest {
+class YamlDataSourceConfigurationConverterTest {
     
     @Test
-    public void assertConvertDataSourceConfiguration() {
+    void assertConvertDataSourceConfiguration() {
         DataSourceConfiguration dataSourceConfiguration = new DataSourceConfiguration("org.h2.Driver");
         dataSourceConfiguration.getProps().put("foo", "bar");
         YamlDataSourceConfigurationConverter converter = new YamlDataSourceConfigurationConverter();

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/concurrent/ElasticJobExecutorServiceTest.java
Patch:
@@ -28,12 +28,12 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class ElasticJobExecutorServiceTest {
+class ElasticJobExecutorServiceTest {
     
     private static boolean hasExecuted;
     
     @Test
-    public void assertCreateExecutorService() {
+    void assertCreateExecutorService() {
         ElasticJobExecutorService executorServiceObject = new ElasticJobExecutorService("executor-service-test", 1);
         assertThat(executorServiceObject.getActiveThreadCount(), is(0));
         assertThat(executorServiceObject.getWorkQueueSize(), is(0));

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/env/HostExceptionTest.java
Patch:
@@ -24,10 +24,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class HostExceptionTest {
+class HostExceptionTest {
     
     @Test
-    public void assertGetCause() {
+    void assertGetCause() {
         IOException cause = new IOException();
         assertThat(new HostException(cause).getCause(), is(cause));
     }

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/env/TimeServiceTest.java
Patch:
@@ -21,12 +21,12 @@
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public class TimeServiceTest {
+class TimeServiceTest {
     
     private final TimeService timeService = new TimeService();
     
     @Test
-    public void assertGetCurrentMillis() {
+    void assertGetCurrentMillis() {
         assertTrue(timeService.getCurrentMillis() <= System.currentTimeMillis());
     }
 }

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/exception/JobConfigurationExceptionTest.java
Patch:
@@ -23,15 +23,15 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class JobConfigurationExceptionTest {
+class JobConfigurationExceptionTest {
     
     @Test
-    public void assertGetMessage() {
+    void assertGetMessage() {
         assertThat(new JobConfigurationException("message is: '%s'", "test").getMessage(), is("message is: 'test'"));
     }
     
     @Test
-    public void assertGetCause() {
+    void assertGetCause() {
         assertThat(new JobConfigurationException(new RuntimeException()).getCause(), instanceOf(RuntimeException.class));
     }
 }

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/exception/JobExecutionEnvironmentExceptionTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class JobExecutionEnvironmentExceptionTest {
+class JobExecutionEnvironmentExceptionTest {
     
     @Test
-    public void assertGetMessage() {
+    void assertGetMessage() {
         assertThat(new JobExecutionEnvironmentException("message is: '%s'", "test").getMessage(), is("message is: 'test'"));
     }
 }

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/exception/JobStatisticExceptionTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public class JobStatisticExceptionTest {
+class JobStatisticExceptionTest {
     
     @Test
-    public void assertGetCause() {
+    void assertGetCause() {
         assertThat(new JobStatisticException(new RuntimeException()).getCause(), instanceOf(RuntimeException.class));
     }
 }

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/impl/OdevitySortByNameJobShardingStrategyTest.java
Patch:
@@ -29,12 +29,12 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class OdevitySortByNameJobShardingStrategyTest {
+class OdevitySortByNameJobShardingStrategyTest {
     
     private final OdevitySortByNameJobShardingStrategy odevitySortByNameJobShardingStrategy = new OdevitySortByNameJobShardingStrategy();
     
     @Test
-    public void assertShardingByAsc() {
+    void assertShardingByAsc() {
         Map<JobInstance, List<Integer>> expected = new HashMap<>();
         expected.put(new JobInstance("host0@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host1@-@0"), Collections.singletonList(1));
@@ -43,7 +43,7 @@ public void assertShardingByAsc() {
     }
     
     @Test
-    public void assertShardingByDesc() {
+    void assertShardingByDesc() {
         Map<JobInstance, List<Integer>> expected = new HashMap<>();
         expected.put(new JobInstance("host2@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host1@-@0"), Collections.singletonList(1));

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/handler/threadpool/impl/CPUUsageJobExecutorServiceHandlerTest.java
Patch:
@@ -23,10 +23,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class CPUUsageJobExecutorServiceHandlerTest {
+class CPUUsageJobExecutorServiceHandlerTest {
     
     @Test
-    public void assertGetPoolSizeAndType() {
+    void assertGetPoolSizeAndType() {
         CPUUsageJobExecutorServiceHandler cpuUsageJobExecutorServiceHandler = (CPUUsageJobExecutorServiceHandler) JobExecutorServiceHandlerFactory.getHandler("CPU");
         assertThat(cpuUsageJobExecutorServiceHandler.getPoolSize(), is(Runtime.getRuntime().availableProcessors() * 2));
         assertThat(cpuUsageJobExecutorServiceHandler.getType(), is("CPU"));

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/handler/threadpool/impl/SingleThreadJobExecutorServiceHandlerTest.java
Patch:
@@ -23,10 +23,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class SingleThreadJobExecutorServiceHandlerTest {
+class SingleThreadJobExecutorServiceHandlerTest {
     
     @Test
-    public void assertGetPoolSizeAndType() {
+    void assertGetPoolSizeAndType() {
         SingleThreadJobExecutorServiceHandler singleThreadJobExecutorServiceHandler = (SingleThreadJobExecutorServiceHandler) JobExecutorServiceHandlerFactory.getHandler("SINGLE_THREAD");
         assertThat(singleThreadJobExecutorServiceHandler.getPoolSize(), is(1));
         assertThat(singleThreadJobExecutorServiceHandler.getType(), is("SINGLE_THREAD"));

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListenerFactoryTest.java
Patch:
@@ -25,15 +25,15 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public final class ElasticJobListenerFactoryTest {
+class ElasticJobListenerFactoryTest {
     
     @Test
-    public void assertCreateInvalidJobListener() {
+    void assertCreateInvalidJobListener() {
         assertThrows(JobConfigurationException.class, () -> ElasticJobListenerFactory.createListener("INVALID").orElseThrow(() -> new JobConfigurationException("Invalid elastic job listener!")));
     }
     
     @Test
-    public void assertCreatJobListener() {
+    void assertCreatJobListener() {
         assertThat(ElasticJobListenerFactory.createListener("fooElasticJobListener").orElse(null), instanceOf(FooElasticJobListener.class));
     }
 }

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/ShardingContextsTest.java
Patch:
@@ -26,10 +26,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class ShardingContextsTest {
+class ShardingContextsTest {
     
     @Test
-    public void assertCreateShardingContext() {
+    void assertCreateShardingContext() {
         ShardingContexts shardingContexts = createShardingContexts();
         ShardingContext actual = shardingContexts.createShardingContext(1);
         assertThat(actual.getJobName(), is(shardingContexts.getJobName()));

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/yaml/config/YamlConfigurationConverterFactoryTest.java
Patch:
@@ -21,14 +21,13 @@
 
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
-public final class YamlConfigurationConverterFactoryTest {
+class YamlConfigurationConverterFactoryTest {
     
     @Test
-    public void assertConverterNotFound() {
+    void assertConverterNotFound() {
         assertFalse(YamlConfigurationConverterFactory.findConverter(AClassWithoutCorrespondingConverter.class).isPresent());
     }
     
     private static class AClassWithoutCorrespondingConverter {
-        
     }
 }

File: elasticjob-infra/elasticjob-registry-center/elasticjob-registry-center-api/src/main/java/org/apache/shardingsphere/elasticjob/reg/listener/ConnectionStateChangedEventListener.java
Patch:
@@ -30,7 +30,7 @@ enum State {
         
         RECONNECTED,
         
-        UNAVAILABLE,
+        UNAVAILABLE
     }
     
     /**

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperConfigurationTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class ZookeeperConfigurationTest {
+class ZookeeperConfigurationTest {
     
     @Test
-    public void assertNewZookeeperConfigurationForServerListsAndNamespace() {
+    void assertNewZookeeperConfigurationForServerListsAndNamespace() {
         ZookeeperConfiguration zkConfig = new ZookeeperConfiguration("localhost:2181", "myNamespace");
         assertThat(zkConfig.getServerLists(), is("localhost:2181"));
         assertThat(zkConfig.getNamespace(), is("myNamespace"));

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperElectionServiceTest.java
Patch:
@@ -40,7 +40,7 @@
 import static org.mockito.Mockito.verify;
 
 @ExtendWith(MockitoExtension.class)
-public class ZookeeperElectionServiceTest {
+class ZookeeperElectionServiceTest {
     
     private static final String HOST_AND_PORT = "localhost:8899";
     
@@ -50,12 +50,12 @@ public class ZookeeperElectionServiceTest {
     private ElectionCandidate electionCandidate;
     
     @BeforeAll
-    public static void init() {
+    static void init() {
         EmbedTestingServer.start();
     }
     
     @Test
-    public void assertContend() throws Exception {
+    void assertContend() throws Exception {
         CuratorFramework client = CuratorFrameworkFactory.newClient(EmbedTestingServer.getConnectionString(), new RetryOneTime(2000));
         client.start();
         client.blockUntilConnected();

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperRegistryCenterInitFailureTest.java
Patch:
@@ -22,10 +22,10 @@
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public final class ZookeeperRegistryCenterInitFailureTest {
+class ZookeeperRegistryCenterInitFailureTest {
     
     @Test
-    public void assertInitFailure() {
+    void assertInitFailure() {
         assertThrows(RegException.class, () -> {
             ZookeeperRegistryCenter zkRegCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration("localhost:1", ZookeeperRegistryCenterInitFailureTest.class.getName()));
             zkRegCenter.init();

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/exception/ZookeeperCuratorIgnoredExceptionProviderTest.java
Patch:
@@ -28,10 +28,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class ZookeeperCuratorIgnoredExceptionProviderTest {
+class ZookeeperCuratorIgnoredExceptionProviderTest {
     
     @Test
-    public void assertIgnoredException() {
+    void assertIgnoredException() {
         List<Class<? extends Throwable>> expected = Arrays.asList(ConnectionLossException.class, NoNodeException.class, NodeExistsException.class);
         assertThat(new ZookeeperCuratorIgnoredExceptionProvider().getIgnoredExceptions(), is(expected));
     }

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/util/ZookeeperRegistryCenterTestUtil.java
Patch:
@@ -25,7 +25,7 @@
 import java.lang.reflect.Field;
 
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
-public class ZookeeperRegistryCenterTestUtil {
+public final class ZookeeperRegistryCenterTestUtil {
     
     /**
      * Persist the data to registry center.

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/annotation/ParamSource.java
Patch:
@@ -46,5 +46,5 @@ public enum ParamSource {
     /**
      * Unknown source.
      */
-    UNKNOWN,
+    UNKNOWN
 }

File: elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerFactoryTest.java
Patch:
@@ -23,16 +23,16 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public final class RequestBodyDeserializerFactoryTest {
+class RequestBodyDeserializerFactoryTest {
     
     @Test
-    public void assertGetJsonDefaultDeserializer() {
+    void assertGetJsonDefaultDeserializer() {
         RequestBodyDeserializer deserializer = RequestBodyDeserializerFactory.getRequestBodyDeserializer(HttpHeaderValues.APPLICATION_JSON.toString());
         assertNotNull(deserializer);
     }
     
     @Test
-    public void assertDeserializerNotFound() {
+    void assertDeserializerNotFound() {
         assertThrows(RequestBodyDeserializerNotFoundException.class, () -> RequestBodyDeserializerFactory.getRequestBodyDeserializer("Unknown"));
     }
 }

File: elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HandlerParameterDecoderTest.java
Patch:
@@ -43,12 +43,12 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class HandlerParameterDecoderTest {
+class HandlerParameterDecoderTest {
     
     private EmbeddedChannel channel;
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         ContextInitializationInboundHandler contextInitializationInboundHandler = new ContextInitializationInboundHandler();
         HttpRequestDispatcher httpRequestDispatcher = new HttpRequestDispatcher(Collections.singletonList(new DecoderTestController()), false);
         HandlerParameterDecoder handlerParameterDecoder = new HandlerParameterDecoder();
@@ -57,7 +57,7 @@ public void setUp() {
     }
     
     @Test
-    public void assertDecodeParameters() {
+    void assertDecodeParameters() {
         QueryStringEncoder queryStringEncoder = new QueryStringEncoder("/myApp/C");
         queryStringEncoder.addParam("cron", "0 * * * * ?");
         queryStringEncoder.addParam("integer", "30");

File: elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HttpRequestDispatcherTest.java
Patch:
@@ -30,10 +30,10 @@
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public final class HttpRequestDispatcherTest {
+class HttpRequestDispatcherTest {
     
     @Test
-    public void assertDispatcherHandlerNotFound() {
+    void assertDispatcherHandlerNotFound() {
         assertThrows(HandlerNotFoundException.class, () -> {
             EmbeddedChannel channel = new EmbeddedChannel(new HttpRequestDispatcher(Lists.newArrayList(new JobController()), false));
             FullHttpRequest fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/hello/myJob/myCron");

File: elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/NettyRestfulServiceTrailingSlashInsensitiveTest.java
Patch:
@@ -25,14 +25,14 @@
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public final class NettyRestfulServiceTrailingSlashInsensitiveTest {
+class NettyRestfulServiceTrailingSlashInsensitiveTest {
     
     private static final String HOST = "localhost";
     
     private static final int PORT = 18082;
     
     @Test
-    public void assertPathDuplicateWhenTrailingSlashInsensitive() {
+    void assertPathDuplicateWhenTrailingSlashInsensitive() {
         assertThrows(IllegalArgumentException.class, () -> {
             NettyRestfulServiceConfiguration configuration = new NettyRestfulServiceConfiguration(PORT);
             configuration.setHost(HOST);

File: elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerFactoryTest.java
Patch:
@@ -23,16 +23,16 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-public final class ResponseBodySerializerFactoryTest {
+class ResponseBodySerializerFactoryTest {
     
     @Test
-    public void assertGetJsonDefaultSerializer() {
+    void assertGetJsonDefaultSerializer() {
         ResponseBodySerializer serializer = ResponseBodySerializerFactory.getResponseBodySerializer(HttpHeaderValues.APPLICATION_JSON.toString());
         assertNotNull(serializer);
     }
     
     @Test
-    public void assertSerializerNotFound() {
+    void assertSerializerNotFound() {
         assertThrows(ResponseBodySerializerNotFoundException.class, () -> ResponseBodySerializerFactory.getResponseBodySerializer("Unknown"));
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileService.java
Patch:
@@ -53,7 +53,7 @@ public ReconcileService(final CoordinatorRegistryCenter regCenter, final String
     @Override
     protected void runOneIteration() {
         int reconcileIntervalMinutes = configService.load(true).getReconcileIntervalMinutes();
-        if (reconcileIntervalMinutes > 0 && (System.currentTimeMillis() - lastReconcileTime >= reconcileIntervalMinutes * 60 * 1000)) {
+        if (reconcileIntervalMinutes > 0 && System.currentTimeMillis() - lastReconcileTime >= (long) reconcileIntervalMinutes * 60 * 1000) {
             lastReconcileTime = System.currentTimeMillis();
             if (!shardingService.isNeedSharding() && shardingService.hasShardingInfoInOfflineServers() && !(isStaticSharding() && hasShardingInfo())) {
                 log.warn("Elastic Job: job status node has inconsistent value,start reconciling...");

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/BaseIntegrateTest.java
Patch:
@@ -74,14 +74,14 @@ private JobBootstrap createJobBootstrap(final TestType type, final ElasticJob el
     }
     
     @BeforeAll
-    public static void init() {
+    static void init() {
         EmbedTestingServer.start();
         ZOOKEEPER_CONFIG.setConnectionTimeoutMilliseconds(30000);
         REGISTRY_CENTER.init();
     }
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         if (jobBootstrap instanceof ScheduleJobBootstrap) {
             ((ScheduleJobBootstrap) jobBootstrap).schedule();
         } else {
@@ -90,7 +90,7 @@ public void setUp() {
     }
     
     @AfterEach
-    public void tearDown() {
+    void tearDown() {
         jobBootstrap.shutdown();
         ReflectionUtils.setFieldValue(JobRegistry.getInstance(), "instance", null);
     }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/disable/OneOffDisabledJobIntegrateTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.junit.jupiter.api.Test;
 
-public final class OneOffDisabledJobIntegrateTest extends DisabledJobIntegrateTest {
+class OneOffDisabledJobIntegrateTest extends DisabledJobIntegrateTest {
     
-    public OneOffDisabledJobIntegrateTest() {
+    OneOffDisabledJobIntegrateTest() {
         super(TestType.ONE_OFF);
     }
     
@@ -33,7 +33,7 @@ protected JobConfiguration getJobConfiguration(final String jobName) {
     }
     
     @Test
-    public void assertJobRunning() {
+    void assertJobRunning() {
         assertDisabledRegCenterInfo();
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/disable/ScheduleDisabledJobIntegrateTest.java
Patch:
@@ -30,9 +30,9 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class ScheduleDisabledJobIntegrateTest extends DisabledJobIntegrateTest {
+class ScheduleDisabledJobIntegrateTest extends DisabledJobIntegrateTest {
     
-    public ScheduleDisabledJobIntegrateTest() {
+    ScheduleDisabledJobIntegrateTest() {
         super(TestType.SCHEDULE);
     }
     
@@ -43,7 +43,7 @@ protected JobConfiguration getJobConfiguration(final String jobName) {
     }
     
     @Test
-    public void assertJobRunning() {
+    void assertJobRunning() {
         assertDisabledRegCenterInfo();
         setJobEnable();
         Awaitility.await().atMost(10L, TimeUnit.SECONDS).untilAsserted(() -> assertThat(((DetailedFooJob) getElasticJob()).isCompleted(), is(true)));

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/enable/EnabledJobIntegrateTest.java
Patch:
@@ -40,7 +40,7 @@ protected EnabledJobIntegrateTest(final TestType type, final ElasticJob elasticJ
     }
     
     @BeforeEach
-    public final void assertEnabledRegCenterInfo() {
+    void assertEnabledRegCenterInfo() {
         assertThat(JobRegistry.getInstance().getCurrentShardingTotalCount(getJobName()), is(3));
         assertThat(JobRegistry.getInstance().getJobInstance(getJobName()).getServerIp(), is(IpUtils.getIp()));
         JobConfiguration jobConfig = YamlEngine.unmarshal(getREGISTRY_CENTER().get("/" + getJobName() + "/config"), JobConfigurationPOJO.class).toJobConfiguration();

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/enable/OneOffEnabledJobIntegrateTest.java
Patch:
@@ -28,9 +28,9 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class OneOffEnabledJobIntegrateTest extends EnabledJobIntegrateTest {
+class OneOffEnabledJobIntegrateTest extends EnabledJobIntegrateTest {
     
-    public OneOffEnabledJobIntegrateTest() {
+    OneOffEnabledJobIntegrateTest() {
         super(TestType.ONE_OFF, new DetailedFooJob());
     }
     
@@ -41,7 +41,7 @@ protected JobConfiguration getJobConfiguration(final String jobName) {
     }
     
     @Test
-    public void assertJobInit() {
+    void assertJobInit() {
         Awaitility.await().atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> assertThat(((DetailedFooJob) getElasticJob()).isCompleted(), is(true)));
         assertTrue(getREGISTRY_CENTER().isExisted("/" + getJobName() + "/sharding"));
     }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/enable/ScheduleEnabledJobIntegrateTest.java
Patch:
@@ -28,9 +28,9 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class ScheduleEnabledJobIntegrateTest extends EnabledJobIntegrateTest {
+class ScheduleEnabledJobIntegrateTest extends EnabledJobIntegrateTest {
     
-    public ScheduleEnabledJobIntegrateTest() {
+    ScheduleEnabledJobIntegrateTest() {
         super(TestType.SCHEDULE, new DetailedFooJob());
     }
     
@@ -41,7 +41,7 @@ protected JobConfiguration getJobConfiguration(final String jobName) {
     }
     
     @Test
-    public void assertJobInit() {
+    void assertJobInit() {
         Awaitility.await().atMost(10L, TimeUnit.SECONDS).untilAsserted(() -> assertThat(((DetailedFooJob) getElasticJob()).isCompleted(), is(true)));
         assertTrue(getREGISTRY_CENTER().isExisted("/" + getJobName() + "/sharding"));
     }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/annotation/JobAnnotationBuilderTest.java
Patch:
@@ -27,10 +27,10 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class JobAnnotationBuilderTest {
+class JobAnnotationBuilderTest {
     
     @Test
-    public void assertGenerateJobConfiguration() {
+    void assertGenerateJobConfiguration() {
         JobConfiguration jobConfiguration = JobAnnotationBuilder.generateJobConfiguration(AnnotationSimpleJob.class);
         assertThat(jobConfiguration.getJobName(), is("AnnotationSimpleJob"));
         assertThat(jobConfiguration.getShardingTotalCount(), is(3));

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/annotation/integrate/BaseAnnotationTest.java
Patch:
@@ -74,14 +74,14 @@ private JobBootstrap createJobBootstrap(final TestType type, final ElasticJob el
     }
     
     @BeforeAll
-    public static void init() {
+    static void init() {
         EmbedTestingServer.start();
         ZOOKEEPER_CONFIG.setConnectionTimeoutMilliseconds(30000);
         REGISTRY_CENTER.init();
     }
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         if (jobBootstrap instanceof ScheduleJobBootstrap) {
             ((ScheduleJobBootstrap) jobBootstrap).schedule();
         } else {
@@ -90,7 +90,7 @@ public void setUp() {
     }
     
     @AfterEach
-    public void tearDown() {
+    void tearDown() {
         jobBootstrap.shutdown();
         ReflectionUtils.setFieldValue(JobRegistry.getInstance(), "instance", null);
     }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/config/ConfigurationNodeTest.java
Patch:
@@ -21,12 +21,12 @@
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class ConfigurationNodeTest {
+class ConfigurationNodeTest {
     
     private final ConfigurationNode configurationNode = new ConfigurationNode("test_job");
     
     @Test
-    public void assertIsConfigPath() {
+    void assertIsConfigPath() {
         assertTrue(configurationNode.isConfigPath("/test_job/config"));
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/election/LeaderNodeTest.java
Patch:
@@ -22,17 +22,17 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public final class LeaderNodeTest {
+class LeaderNodeTest {
     
     private final LeaderNode leaderNode = new LeaderNode("test_job");
     
     @Test
-    public void assertIsLeaderInstancePath() {
+    void assertIsLeaderInstancePath() {
         assertTrue(leaderNode.isLeaderInstancePath("/test_job/leader/election/instance"));
     }
     
     @Test
-    public void assertIsNotLeaderInstancePath() {
+    void assertIsNotLeaderInstancePath() {
         assertFalse(leaderNode.isLeaderInstancePath("/test_job/leader/election/instance1"));
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/ListenerManagerTest.java
Patch:
@@ -38,7 +38,7 @@
 import static org.mockito.Mockito.verify;
 
 @ExtendWith(MockitoExtension.class)
-public final class ListenerManagerTest {
+class ListenerManagerTest {
     
     @Mock
     private JobNodeStorage jobNodeStorage;
@@ -73,7 +73,7 @@ public final class ListenerManagerTest {
     private final ListenerManager listenerManager = new ListenerManager(null, "test_job", Collections.emptyList());
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         ReflectionUtils.setFieldValue(listenerManager, "jobNodeStorage", jobNodeStorage);
         ReflectionUtils.setFieldValue(listenerManager, "electionListenerManager", electionListenerManager);
         ReflectionUtils.setFieldValue(listenerManager, "shardingListenerManager", shardingListenerManager);
@@ -87,7 +87,7 @@ public void setUp() {
     }
     
     @Test
-    public void assertStartAllListeners() {
+    void assertStartAllListeners() {
         listenerManager.startAllListeners();
         verify(electionListenerManager).start();
         verify(shardingListenerManager).start();

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/ListenerNotifierManagerTest.java
Patch:
@@ -27,17 +27,17 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 
 @ExtendWith(MockitoExtension.class)
-public class ListenerNotifierManagerTest {
+class ListenerNotifierManagerTest {
     
     @Test
-    public void assertRegisterAndGetJobNotifyExecutor() {
+    void assertRegisterAndGetJobNotifyExecutor() {
         String jobName = "test_job";
         ListenerNotifierManager.getInstance().registerJobNotifyExecutor(jobName);
         assertThat(ListenerNotifierManager.getInstance().getJobNotifyExecutor(jobName), notNullValue(Executor.class));
     }
     
     @Test
-    public void assertRemoveAndShutDownJobNotifyExecutor() {
+    void assertRemoveAndShutDownJobNotifyExecutor() {
         String jobName = "test_job";
         ListenerNotifierManager.getInstance().registerJobNotifyExecutor(jobName);
         ListenerNotifierManager.getInstance().removeJobNotifyExecutor(jobName);

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/DefaultJobClassNameProviderTest.java
Patch:
@@ -26,10 +26,10 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class DefaultJobClassNameProviderTest {
+class DefaultJobClassNameProviderTest {
     
     @Test
-    public void assertGetOrdinaryClassJobName() {
+    void assertGetOrdinaryClassJobName() {
         JobClassNameProvider jobClassNameProvider = new DefaultJobClassNameProvider();
         String result = jobClassNameProvider.getJobClassName(new DetailedFooJob());
         assertThat(result, is("org.apache.shardingsphere.elasticjob.lite.fixture.job.DetailedFooJob"));
@@ -38,7 +38,7 @@ public void assertGetOrdinaryClassJobName() {
     // TODO OpenJDK 21 breaks this unit test.
     @Test
     @DisabledForJreRange(min = JRE.JAVA_21, max = JRE.OTHER)
-    public void assertGetLambdaJobName() {
+    void assertGetLambdaJobName() {
         JobClassNameProvider jobClassNameProvider = new DefaultJobClassNameProvider();
         FooJob lambdaFooJob = shardingContext -> {
         };

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobClassNameProviderFactoryTest.java
Patch:
@@ -22,10 +22,10 @@
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class JobClassNameProviderFactoryTest {
+class JobClassNameProviderFactoryTest {
     
     @Test
-    public void assertGetDefaultStrategy() {
+    void assertGetDefaultStrategy() {
         assertThat(JobClassNameProviderFactory.getProvider(), instanceOf(DefaultJobClassNameProvider.class));
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/snapshot/BaseSnapshotServiceTest.java
Patch:
@@ -54,20 +54,20 @@ public BaseSnapshotServiceTest(final ElasticJob elasticJob) {
     }
     
     @BeforeAll
-    public static void init() {
+    static void init() {
         EmbedTestingServer.start();
         ZOOKEEPER_CONFIG.setConnectionTimeoutMilliseconds(30000);
         REG_CENTER.init();
     }
     
     @BeforeEach
-    public final void setUp() {
+    void setUp() {
         REG_CENTER.init();
         bootstrap.schedule();
     }
     
     @AfterEach
-    public final void tearDown() {
+    void tearDown() {
         bootstrap.shutdown();
         ReflectionUtils.setFieldValue(JobRegistry.getInstance(), "instance", null);
     }

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/util/SensitiveInfoUtilsTest.java
Patch:
@@ -25,16 +25,16 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public final class SensitiveInfoUtilsTest {
+class SensitiveInfoUtilsTest {
     
     @Test
-    public void assertFilterContentWithoutIp() {
+    void assertFilterContentWithoutIp() {
         List<String> actual = Arrays.asList("/simpleElasticDemoJob/servers", "/simpleElasticDemoJob/leader");
         assertThat(SensitiveInfoUtils.filterSensitiveIps(actual), is(actual));
     }
     
     @Test
-    public void assertFilterContentWithSensitiveIp() {
+    void assertFilterContentWithSensitiveIp() {
         List<String> actual = Arrays.asList("/simpleElasticDemoJob/servers/127.0.0.1", "/simpleElasticDemoJob/servers/192.168.0.1/hostName | 192.168.0.1",
                 "/simpleElasticDemoJob/servers/192.168.0.11", "/simpleElasticDemoJob/servers/192.168.0.111");
         List<String> expected = Arrays.asList("/simpleElasticDemoJob/servers/ip1", "/simpleElasticDemoJob/servers/ip2/hostName | ip2",

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/AbstractEmbedZookeeperBaseTest.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractEmbedZookeeperBaseTest {
     private static final Object INIT_LOCK = new Object();
     
     @BeforeAll
-    public static void setUp() {
+    static void setUp() {
         startEmbedTestingServer();
     }
     

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ShardingStatisticsAPIImplTest.java
Patch:
@@ -34,7 +34,7 @@
 import static org.mockito.Mockito.when;
 
 @ExtendWith(MockitoExtension.class)
-public final class ShardingStatisticsAPIImplTest {
+class ShardingStatisticsAPIImplTest {
     
     private ShardingStatisticsAPI shardingStatisticsAPI;
     
@@ -43,12 +43,12 @@ public final class ShardingStatisticsAPIImplTest {
     private CoordinatorRegistryCenter regCenter;
     
     @BeforeEach
-    public void setUp() {
+    void setUp() {
         shardingStatisticsAPI = new ShardingStatisticsAPIImpl(regCenter);
     }
     
     @Test
-    public void assertGetShardingInfo() {
+    void assertGetShardingInfo() {
         when(regCenter.getChildrenKeys("/test_job/sharding")).thenReturn(Arrays.asList("0", "1", "2", "3"));
         when(regCenter.get("/test_job/sharding/0/instance")).thenReturn("ip1@-@1234");
         when(regCenter.get("/test_job/sharding/1/instance")).thenReturn("ip2@-@2341");

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/ElasticJobSpringBootScannerTest.java
Patch:
@@ -39,19 +39,19 @@
 @SpringBootTest
 @ActiveProfiles("elasticjob")
 @ElasticJobScan(basePackages = "org.apache.shardingsphere.elasticjob.lite.spring.boot.job.fixture.job.impl")
-public class ElasticJobSpringBootScannerTest {
+class ElasticJobSpringBootScannerTest {
     
     @Autowired
     private ApplicationContext applicationContext;
     
     @BeforeAll
-    public static void init() {
+    static void init() {
         EmbedTestingServer.start();
         AnnotationCustomJob.reset();
     }
     
     @Test
-    public void assertDefaultBeanNameWithTypeJob() {
+    void assertDefaultBeanNameWithTypeJob() {
         Awaitility.await().atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> assertThat(AnnotationCustomJob.isCompleted(), is(true)));
         assertTrue(AnnotationCustomJob.isCompleted());
         assertNotNull(applicationContext);

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/reg/snapshot/ElasticJobSnapshotServiceConfigurationTest.java
Patch:
@@ -32,18 +32,18 @@
 @SpringBootTest
 @SpringBootApplication
 @ActiveProfiles("snapshot")
-public class ElasticJobSnapshotServiceConfigurationTest {
+class ElasticJobSnapshotServiceConfigurationTest {
     
     @Autowired
     private ApplicationContext applicationContext;
     
     @BeforeAll
-    public static void init() {
+    static void init() {
         EmbedTestingServer.start();
     }
     
     @Test
-    public void assertSnapshotServiceConfiguration() {
+    void assertSnapshotServiceConfiguration() {
         assertNotNull(applicationContext);
         assertNotNull(applicationContext.getBean(SnapshotService.class));
     }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/tracing/TracingConfigurationTest.java
Patch:
@@ -38,18 +38,18 @@
 @SpringBootTest
 @SpringBootApplication
 @ActiveProfiles("tracing")
-public class TracingConfigurationTest {
+class TracingConfigurationTest {
     
     @Autowired
     private ApplicationContext applicationContext;
     
     @BeforeAll
-    public static void init() {
+    static void init() {
         EmbedTestingServer.start();
     }
     
     @Test
-    public void assertNotRDBConfiguration() {
+    void assertNotRDBConfiguration() {
         assertNotNull(applicationContext);
         assertFalse(applicationContext.containsBean("tracingDataSource"));
         ObjectProvider<Object> provider = applicationContext.getBeanProvider(ResolvableType.forClassWithGenerics(TracingConfiguration.class, DataSource.class));

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/core/util/TargetJob.java
Patch:
@@ -28,6 +28,5 @@ public class TargetJob implements ElasticJob {
      * @param shardingContext shardingContext
      */
     public void execute(final ShardingContext shardingContext) {
-        
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/AbstractJobSpringIntegrateTest.java
Patch:
@@ -47,19 +47,19 @@ public abstract class AbstractJobSpringIntegrateTest extends AbstractZookeeperJU
     
     @BeforeEach
     @AfterEach
-    public void reset() {
+    void reset() {
         FooSimpleElasticJob.reset();
         DataflowElasticJob.reset();
     }
     
     @AfterEach
-    public void tearDown() {
+    void tearDown() {
         JobRegistry.getInstance().shutdown(simpleJobName);
         JobRegistry.getInstance().shutdown(throughputDataflowJobName);
     }
     
     @Test
-    public void assertSpringJobBean() {
+    void assertSpringJobBean() {
         assertSimpleElasticJobBean();
         assertThroughputDataflowElasticJobBean();
     }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/AbstractOneOffJobSpringIntegrateTest.java
Patch:
@@ -52,19 +52,19 @@ public abstract class AbstractOneOffJobSpringIntegrateTest extends AbstractZooke
     
     @BeforeEach
     @AfterEach
-    public void reset() {
+    void reset() {
         FooSimpleElasticJob.reset();
         DataflowElasticJob.reset();
     }
     
     @AfterEach
-    public void tearDown() {
+    void tearDown() {
         JobRegistry.getInstance().shutdown(simpleJobName);
         JobRegistry.getInstance().shutdown(throughputDataflowJobName);
     }
     
     @Test
-    public void assertSpringJobBean() {
+    void assertSpringJobBean() {
         assertSimpleElasticJobBean();
         assertThroughputDataflowElasticJobBean();
     }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/JobSpringNamespaceWithEventTraceRdbTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withEventTraceRdb.xml")
-public final class JobSpringNamespaceWithEventTraceRdbTest extends AbstractJobSpringIntegrateTest {
+class JobSpringNamespaceWithEventTraceRdbTest extends AbstractJobSpringIntegrateTest {
     
-    public JobSpringNamespaceWithEventTraceRdbTest() {
+    JobSpringNamespaceWithEventTraceRdbTest() {
         super("simpleElasticJob_namespace_event_trace_rdb", "dataflowElasticJob_namespace_event_trace_rdb");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/JobSpringNamespaceWithJobHandlerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withJobHandler.xml")
-public final class JobSpringNamespaceWithJobHandlerTest extends AbstractJobSpringIntegrateTest {
+class JobSpringNamespaceWithJobHandlerTest extends AbstractJobSpringIntegrateTest {
     
-    public JobSpringNamespaceWithJobHandlerTest() {
+    JobSpringNamespaceWithJobHandlerTest() {
         super("simpleElasticJob_namespace_job_handler", "dataflowElasticJob_namespace_job_handler");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/JobSpringNamespaceWithListenerAndCglibTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withListenerAndCglib.xml")
-public final class JobSpringNamespaceWithListenerAndCglibTest extends AbstractJobSpringIntegrateTest {
+class JobSpringNamespaceWithListenerAndCglibTest extends AbstractJobSpringIntegrateTest {
     
-    public JobSpringNamespaceWithListenerAndCglibTest() {
+    JobSpringNamespaceWithListenerAndCglibTest() {
         super("simpleElasticJob_namespace_listener_cglib", "dataflowElasticJob_namespace_listener_cglib");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/JobSpringNamespaceWithListenerAndJdkDynamicProxyTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withListenerAndJdkDynamicProxy.xml")
-public final class JobSpringNamespaceWithListenerAndJdkDynamicProxyTest extends AbstractJobSpringIntegrateTest {
+class JobSpringNamespaceWithListenerAndJdkDynamicProxyTest extends AbstractJobSpringIntegrateTest {
     
-    public JobSpringNamespaceWithListenerAndJdkDynamicProxyTest() {
+    JobSpringNamespaceWithListenerAndJdkDynamicProxyTest() {
         super("simpleElasticJob_namespace_listener_jdk_proxy", "dataflowElasticJob_namespace_listener_jdk_proxy");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/JobSpringNamespaceWithListenerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withListener.xml")
-public final class JobSpringNamespaceWithListenerTest extends AbstractJobSpringIntegrateTest {
+class JobSpringNamespaceWithListenerTest extends AbstractJobSpringIntegrateTest {
     
-    public JobSpringNamespaceWithListenerTest() {
+    JobSpringNamespaceWithListenerTest() {
         super("simpleElasticJob_namespace_listener", "dataflowElasticJob_namespace_listener");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/JobSpringNamespaceWithTypeTest.java
Patch:
@@ -36,7 +36,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withJobType.xml")
-public final class JobSpringNamespaceWithTypeTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
+class JobSpringNamespaceWithTypeTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
     
     private final String scriptJobName = "scriptElasticJob_job_type";
     
@@ -46,13 +46,13 @@ public final class JobSpringNamespaceWithTypeTest extends AbstractZookeeperJUnit
     private Scheduler scheduler;
     
     @AfterEach
-    public void tearDown() {
+    void tearDown() {
         Awaitility.await().atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> assertThat(scheduler.getCurrentlyExecutingJobs().isEmpty(), is(true)));
         JobRegistry.getInstance().getJobScheduleController(scriptJobName).shutdown();
     }
     
     @Test
-    public void jobScriptWithJobTypeTest() throws SchedulerException {
+    void jobScriptWithJobTypeTest() throws SchedulerException {
         Awaitility.await().atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> assertThat(regCenter.isExisted("/" + scriptJobName + "/sharding"), is(true)));
         scheduler = (Scheduler) ReflectionTestUtils.getField(JobRegistry.getInstance().getJobScheduleController(scriptJobName), "scheduler");
         assertTrue(scheduler.isStarted());

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/JobSpringNamespaceWithoutListenerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withoutListener.xml")
-public final class JobSpringNamespaceWithoutListenerTest extends AbstractJobSpringIntegrateTest {
+class JobSpringNamespaceWithoutListenerTest extends AbstractJobSpringIntegrateTest {
     
-    public JobSpringNamespaceWithoutListenerTest() {
+    JobSpringNamespaceWithoutListenerTest() {
         super("simpleElasticJob_namespace", "dataflowElasticJob_namespace");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/OneOffJobSpringNamespaceWithEventTraceRdbTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/oneOffWithEventTraceRdb.xml")
-public final class OneOffJobSpringNamespaceWithEventTraceRdbTest extends AbstractOneOffJobSpringIntegrateTest {
+class OneOffJobSpringNamespaceWithEventTraceRdbTest extends AbstractOneOffJobSpringIntegrateTest {
     
-    public OneOffJobSpringNamespaceWithEventTraceRdbTest() {
+    OneOffJobSpringNamespaceWithEventTraceRdbTest() {
         super("oneOffSimpleElasticJob_namespace_event_trace_rdb", "oneOffDataflowElasticJob_namespace_event_trace_rdb");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/OneOffJobSpringNamespaceWithJobHandlerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/oneOffWithJobHandler.xml")
-public final class OneOffJobSpringNamespaceWithJobHandlerTest extends AbstractOneOffJobSpringIntegrateTest {
+class OneOffJobSpringNamespaceWithJobHandlerTest extends AbstractOneOffJobSpringIntegrateTest {
     
-    public OneOffJobSpringNamespaceWithJobHandlerTest() {
+    OneOffJobSpringNamespaceWithJobHandlerTest() {
         super("oneOffSimpleElasticJob_namespace_job_handler", "oneOffDataflowElasticJob_namespace_job_handler");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/OneOffJobSpringNamespaceWithListenerAndCglibTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/oneOffWithListenerAndCglib.xml")
-public final class OneOffJobSpringNamespaceWithListenerAndCglibTest extends AbstractOneOffJobSpringIntegrateTest {
+class OneOffJobSpringNamespaceWithListenerAndCglibTest extends AbstractOneOffJobSpringIntegrateTest {
     
-    public OneOffJobSpringNamespaceWithListenerAndCglibTest() {
+    OneOffJobSpringNamespaceWithListenerAndCglibTest() {
         super("simpleElasticJob_namespace_listener_cglib", "dataflowElasticJob_namespace_listener_cglib");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/OneOffJobSpringNamespaceWithListenerAndJdkDynamicProxyTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/oneOffWithListenerAndJdkDynamicProxy.xml")
-public final class OneOffJobSpringNamespaceWithListenerAndJdkDynamicProxyTest extends AbstractOneOffJobSpringIntegrateTest {
+class OneOffJobSpringNamespaceWithListenerAndJdkDynamicProxyTest extends AbstractOneOffJobSpringIntegrateTest {
     
-    public OneOffJobSpringNamespaceWithListenerAndJdkDynamicProxyTest() {
+    OneOffJobSpringNamespaceWithListenerAndJdkDynamicProxyTest() {
         super("simpleElasticJob_namespace_listener_jdk_proxy", "dataflowElasticJob_namespace_listener_jdk_proxy");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/OneOffJobSpringNamespaceWithListenerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/oneOffWithListener.xml")
-public final class OneOffJobSpringNamespaceWithListenerTest extends AbstractOneOffJobSpringIntegrateTest {
+class OneOffJobSpringNamespaceWithListenerTest extends AbstractOneOffJobSpringIntegrateTest {
     
-    public OneOffJobSpringNamespaceWithListenerTest() {
+    OneOffJobSpringNamespaceWithListenerTest() {
         super("simpleElasticJob_namespace_listener", "dataflowElasticJob_namespace_listener");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/OneOffJobSpringNamespaceWithTypeTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/oneOffWithJobType.xml")
-public final class OneOffJobSpringNamespaceWithTypeTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
+class OneOffJobSpringNamespaceWithTypeTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
     
     private final String scriptJobName = "oneOffScriptElasticJob_job_type";
     
@@ -44,12 +44,12 @@ public final class OneOffJobSpringNamespaceWithTypeTest extends AbstractZookeepe
     private CoordinatorRegistryCenter regCenter;
     
     @AfterEach
-    public void tearDown() {
+    void tearDown() {
         JobRegistry.getInstance().shutdown(scriptJobName);
     }
     
     @Test
-    public void jobScriptWithJobTypeTest() {
+    void jobScriptWithJobTypeTest() {
         OneOffJobBootstrap bootstrap = applicationContext.getBean(scriptJobName, OneOffJobBootstrap.class);
         bootstrap.execute();
         Awaitility.await().atLeast(100L, TimeUnit.MILLISECONDS).atMost(1L, TimeUnit.MINUTES).untilAsserted(() -> assertTrue(regCenter.isExisted("/" + scriptJobName + "/sharding")));

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/OneOffJobSpringNamespaceWithoutListenerTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/oneOffWithoutListener.xml")
-public final class OneOffJobSpringNamespaceWithoutListenerTest extends AbstractOneOffJobSpringIntegrateTest {
+class OneOffJobSpringNamespaceWithoutListenerTest extends AbstractOneOffJobSpringIntegrateTest {
     
-    public OneOffJobSpringNamespaceWithoutListenerTest() {
+    OneOffJobSpringNamespaceWithoutListenerTest() {
         super("oneOffSimpleElasticJob", "oneOffDataflowElasticJob");
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/snapshot/SnapshotSpringNamespaceDisableTest.java
Patch:
@@ -27,10 +27,10 @@
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
 @ContextConfiguration(locations = "classpath:META-INF/snapshot/snapshotDisabled.xml")
-public final class SnapshotSpringNamespaceDisableTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
+class SnapshotSpringNamespaceDisableTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
     
     @Test
-    public void assertSnapshotDisable() {
+    void assertSnapshotDisable() {
         assertThrows(IOException.class, () -> SocketUtils.sendCommand(SnapshotService.DUMP_COMMAND, 9998));
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/snapshot/SnapshotSpringNamespaceEnableTest.java
Patch:
@@ -26,10 +26,10 @@
 import static org.junit.jupiter.api.Assertions.assertNull;
 
 @ContextConfiguration(locations = "classpath:META-INF/snapshot/snapshotEnabled.xml")
-public final class SnapshotSpringNamespaceEnableTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
+class SnapshotSpringNamespaceEnableTest extends AbstractZookeeperJUnitJupiterSpringContextTests {
     
     @Test
-    public void assertSnapshotEnable() throws IOException {
+    void assertSnapshotEnable() throws IOException {
         assertNull(SocketUtils.sendCommand("unknown_command", 9988));
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/test/AbstractZookeeperJUnitJupiterSpringContextTests.java
Patch:
@@ -28,8 +28,6 @@
  * @see org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests
  */
 @ExtendWith(SpringExtension.class)
-@TestExecutionListeners(listeners = {EmbedZookeeperTestExecutionListener.class},
-        inheritListeners = false,
-        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)
+@TestExecutionListeners(listeners = EmbedZookeeperTestExecutionListener.class, inheritListeners = false, mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)
 public abstract class AbstractZookeeperJUnitJupiterSpringContextTests {
 }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/ConfigurationService.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.config;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
@@ -85,7 +86,7 @@ private void checkConflictJob(final String newJobClassName, final JobConfigurati
             return;
         }
         String originalJobClassName = jobNodeStorage.getJobRootNodeData();
-        if (null != originalJobClassName && !originalJobClassName.equals(newJobClassName)) {
+        if (StringUtils.isNotBlank(originalJobClassName) && !originalJobClassName.equals(newJobClassName)) {
             throw new JobConfigurationException(
                     "Job conflict with register center. The job '%s' in register center's class is '%s', your job class is '%s'", jobConfig.getJobName(), originalJobClassName, newJobClassName);
         }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/ElasticJobNamespaceHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.namespace;
 
+import org.apache.shardingsphere.elasticjob.lite.spring.namespace.scanner.parser.JobScannerBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.spring.namespace.job.parser.JobBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.spring.namespace.reg.parser.ZookeeperBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.spring.namespace.snapshot.parser.SnapshotBeanDefinitionParser;
@@ -34,5 +35,6 @@ public void init() {
         registerBeanDefinitionParser("zookeeper", new ZookeeperBeanDefinitionParser());
         registerBeanDefinitionParser("snapshot", new SnapshotBeanDefinitionParser());
         registerBeanDefinitionParser("rdb-tracing", new TracingBeanDefinitionParser());
+        registerBeanDefinitionParser("job-scanner", new JobScannerBeanDefinitionParser());
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverListenerManager.java
Patch:
@@ -154,7 +154,7 @@ public void onChange(final DataChangedEvent event) {
         }
         
         private boolean isCurrentInstanceOnline(final DataChangedEvent event) {
-            return Type.ADDED == event.getType() && event.getKey().endsWith(instanceNode.getLocalInstancePath());
+            return Type.ADDED == event.getType() && !JobRegistry.getInstance().isShutdown(jobName) && event.getKey().endsWith(instanceNode.getLocalInstancePath());
         }
         
         private boolean isTheOnlyInstance(final Set<JobInstance> availableJobInstances) {

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingServiceTest.java
Patch:
@@ -250,8 +250,9 @@ public void assertGetCrashedShardingItemsWithEnabledServer() {
         when(serverService.isEnableServer("127.0.0.1")).thenReturn(true);
         when(configService.load(true)).thenReturn(JobConfiguration.newBuilder("test_job", 3).cron("0/1 * * * * ?").build());
         when(jobNodeStorage.getJobNodeData("sharding/0/instance")).thenReturn("127.0.0.1@-@0");
-        when(jobNodeStorage.getJobNodeData("sharding/1/instance")).thenReturn("127.0.0.1@-@1");
+        when(jobNodeStorage.isJobNodeExisted("sharding/0/running")).thenReturn(true);
         when(jobNodeStorage.getJobNodeData("sharding/2/instance")).thenReturn("127.0.0.1@-@0");
+        when(jobNodeStorage.isJobNodeExisted("sharding/2/running")).thenReturn(true);
         assertThat(shardingService.getCrashedShardingItems("127.0.0.1@-@0"), is(Arrays.asList(0, 2)));
         JobRegistry.getInstance().shutdown("test_job");
     }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobRegistry.java
Patch:
@@ -20,6 +20,7 @@
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.infra.handler.sharding.JobInstance;
+import org.apache.shardingsphere.elasticjob.lite.internal.listener.ListenerNotifierManager;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Map;
@@ -169,6 +170,7 @@ public void setCurrentShardingTotalCount(final String jobName, final int current
     public void shutdown(final String jobName) {
         Optional.ofNullable(schedulerMap.remove(jobName)).ifPresent(JobScheduleController::shutdown);
         Optional.ofNullable(regCenterMap.remove(jobName)).ifPresent(regCenter -> regCenter.evictCacheData("/" + jobName));
+        ListenerNotifierManager.getInstance().removeJobNotifyExecutor(jobName);
         jobInstanceMap.remove(jobName);
         jobRunningMap.remove(jobName);
         currentShardingTotalCountMap.remove(jobName);

File: elasticjob-infra/elasticjob-registry-center/elasticjob-registry-center-api/src/main/java/org/apache/shardingsphere/elasticjob/reg/base/LeaderExecutionCallback.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.internal.storage;
+package org.apache.shardingsphere.elasticjob.reg.base;
 
 /**
  * Leader server execution callback.

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/main/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperConfiguration.java
Patch:
@@ -7,7 +7,7 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *  
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/main/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperElectionService.java
Patch:
@@ -7,7 +7,7 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *  
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: elasticjob-infra/elasticjob-registry-center/elasticjob-regitry-center-provider/elasticjob-registry-center-zookeeper-curator/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperElectionServiceTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.curator.framework.recipes.leader.LeaderSelector;
 import org.apache.curator.retry.RetryOneTime;
 import org.apache.curator.test.KillSession;
-import org.apache.shardingsphere.elasticjob.reg.zookeeper.fixture.EmbedTestingServer;
 import org.apache.shardingsphere.elasticjob.reg.base.ElectionCandidate;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.fixture.EmbedTestingServer;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -35,9 +35,9 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.function.Supplier;
 
+import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.atLeastOnce;
 
 @RunWith(MockitoJUnitRunner.class)
 public class ZookeeperElectionServiceTest {

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/election/LeaderService.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.internal.storage.LeaderExecutionCallback;
+import org.apache.shardingsphere.elasticjob.reg.base.LeaderExecutionCallback;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.infra.concurrent.BlockUtils;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverService.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.internal.storage.LeaderExecutionCallback;
+import org.apache.shardingsphere.elasticjob.reg.base.LeaderExecutionCallback;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/AbstractListenerManager.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.listener;
 
-import org.apache.curator.framework.recipes.cache.CuratorCacheListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.listener.DataChangedEventListener;
 
 /**
  * Listener manager.
@@ -37,7 +37,7 @@ protected AbstractListenerManager(final CoordinatorRegistryCenter regCenter, fin
      */
     public abstract void start();
     
-    protected void addDataListener(final CuratorCacheListener listener) {
+    protected void addDataListener(final DataChangedEventListener listener) {
         jobNodeStorage.addDataListener(listener);
     }
 }

File: elasticjob-ecosystem/elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutor.java
Patch:
@@ -129,6 +129,7 @@ private void execute(final JobConfiguration jobConfig, final ShardingContexts sh
                 jobFacade.postJobStatusTraceEvent(taskId, State.TASK_FINISHED, "");
             } else {
                 jobFacade.postJobStatusTraceEvent(taskId, State.TASK_ERROR, itemErrorMessages.toString());
+                itemErrorMessages.clear();
             }
         }
     }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/tracing/ElasticJobTracingConfiguration.java
Patch:
@@ -20,13 +20,15 @@
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 
 import javax.sql.DataSource;
 
 /**
  * ElasticJob tracing auto configuration.
  */
+@EnableConfigurationProperties(TracingProperties.class)
 public class ElasticJobTracingConfiguration {
     
     /**

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/InstanceService.java
Patch:
@@ -70,7 +70,7 @@ public List<JobInstance> getAvailableJobInstances() {
         List<JobInstance> result = new LinkedList<>();
         for (String each : jobNodeStorage.getJobNodeChildrenKeys(InstanceNode.ROOT)) {
             JobInstance jobInstance = YamlEngine.unmarshal(jobNodeStorage.getJobNodeData(instanceNode.getInstancePath(each)), JobInstance.class);
-            if (serverService.isEnableServer(jobInstance.getServerIp())) {
+            if (null != jobInstance && serverService.isEnableServer(jobInstance.getServerIp())) {
                 result.add(new JobInstance(each));
             }
         }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -131,7 +131,7 @@ public void clearMisfire(final Collection<Integer> shardingItems) {
     
     @Override
     public boolean isExecuteMisfired(final Collection<Integer> shardingItems) {
-        return !isNeedSharding() && configService.load(true).isMisfire() && !executionService.getMisfiredJobItems(shardingItems).isEmpty();
+        return configService.load(true).isMisfire() && !isNeedSharding() && !executionService.getMisfiredJobItems(shardingItems).isEmpty();
     }
     
     @Override

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/console/ConsoleBootstrap.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.shardingsphere.elasticjob.cloud.console.controller.CloudAppController;
 import org.apache.shardingsphere.elasticjob.cloud.console.controller.CloudJobController;
 import org.apache.shardingsphere.elasticjob.cloud.console.controller.CloudOperationController;
+import org.apache.shardingsphere.elasticjob.cloud.console.security.AuthenticationFilter;
+import org.apache.shardingsphere.elasticjob.cloud.console.security.AuthenticationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.RestfulServerConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.ReconcileService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;
@@ -43,6 +45,7 @@ public ConsoleBootstrap(final CoordinatorRegistryCenter regCenter, final Restful
         NettyRestfulServiceConfiguration restfulServiceConfiguration = new NettyRestfulServiceConfiguration(config.getPort());
         restfulServiceConfiguration.addControllerInstances(new CloudJobController(), new CloudAppController(), new CloudOperationController());
         restfulServiceConfiguration.addExceptionHandler(Exception.class, new ConsoleExceptionHandler());
+        restfulServiceConfiguration.addFilterInstances(new AuthenticationFilter(new AuthenticationService()));
         restfulService = new NettyRestfulService(restfulServiceConfiguration);
     }
     

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/storage/JobNodeStorage.java
Patch:
@@ -109,7 +109,7 @@ public String getJobRootNodeData() {
     /**
      * Create job node if needed.
      * 
-     * <p>Do not create node if root root not existed, which means job is shutdown.</p>
+     * <p>Do not create node if root node not existed, which means job is shutdown.</p>
      * 
      * @param node node
      */

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironmentTest.java
Patch:
@@ -121,6 +121,8 @@ public void assertGetMesosRole() {
 
     @Test
     public void assertGetFrameworkHostPort() {
+        Properties properties = new Properties();
+        ReflectionUtils.setFieldValue(bootstrapEnvironment, "properties", properties);
         assertThat(bootstrapEnvironment.getFrameworkHostPort(), is("localhost:8899"));
     }
 

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/console/controller/CloudJobControllerTest.java
Patch:
@@ -87,9 +87,8 @@ public void assertRegisterWithoutApp() {
     @Test
     public void assertRegisterWithExistedName() {
         when(getRegCenter().get("/config/app/test_app")).thenReturn(CloudAppJsonConstants.getAppJson("test_app"));
-        when(getRegCenter().isExisted("/config/test_job")).thenReturn(false);
+        when(getRegCenter().get("/config/job/test_job")).thenReturn(null, CloudJsonConstants.getJobJson());
         assertThat(HttpTestUtil.post("http://127.0.0.1:19000/api/job/register", CloudJsonConstants.getJobJson()), is(200));
-        when(getRegCenter().get("/config/job/test_job")).thenReturn(CloudJsonConstants.getJobJson());
         assertThat(HttpTestUtil.post("http://127.0.0.1:19000/api/job/register", CloudJsonConstants.getJobJson()), is(500));
         HttpTestUtil.delete("http://127.0.0.1:19000/api/job/test_job/deregister");
     }

File: elasticjob-ecosystem/elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactory.java
Patch:
@@ -31,7 +31,7 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobErrorHandlerFactory {
     
-    private static final String DEFAULT_HANDLER = "LOG";
+    public static final String DEFAULT_HANDLER = "LOG";
     
     static {
         ElasticJobServiceLoader.registerTypedService(JobErrorHandler.class);

File: elasticjob-ecosystem/elasticjob-executor/elasticjob-executor-kernel/src/test/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutorTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.Map;
 
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.times;
@@ -62,6 +63,7 @@ public final class ElasticJobExecutorTest {
     @Before
     public void setUp() {
         jobConfig = createJobConfiguration();
+        when(jobFacade.loadJobConfiguration(anyBoolean())).thenReturn(jobConfig);
         elasticJobExecutor = new ElasticJobExecutor(fooJob, jobConfig, jobFacade);
         setJobItemExecutor();
     }

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/threadpool/JobExecutorServiceHandlerFactory.java
Patch:
@@ -29,7 +29,7 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobExecutorServiceHandlerFactory {
     
-    private static final String DEFAULT_HANDLER = "CPU";
+    public static final String DEFAULT_HANDLER = "CPU";
     
     static {
         ElasticJobServiceLoader.registerTypedService(JobExecutorServiceHandler.class);

File: elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/api/JobConfiguration.java
Patch:
@@ -251,13 +251,13 @@ public Builder reconcileIntervalMinutes(final int reconcileIntervalMinutes) {
         }
         
         /**
-         * Set job sharding sharding type.
+         * Set job sharding strategy type.
          *
          * <p>
          * Default for {@code AverageAllocationJobShardingStrategy}.
          * </p>
          *
-         * @param jobShardingStrategyType job sharding sharding type
+         * @param jobShardingStrategyType job sharding strategy type
          * @return ElasticJob configuration builder
          */
         public Builder jobShardingStrategyType(final String jobShardingStrategyType) {

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/JobShardingStrategy.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 /**
- * Job sharding sharding.
+ * Job sharding strategy.
  */
 public interface JobShardingStrategy extends TypedSPI {
     

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/bootstrap/impl/OneOffJobBootstrapTest.java
Patch:
@@ -76,7 +76,7 @@ public void assertExecute() {
             counter.incrementAndGet();
         }, JobConfiguration.newBuilder("test_one_off_job_execute", SHARDING_TOTAL_COUNT).build());
         oneOffJobBootstrap.execute();
-        blockUtilFinish(oneOffJobBootstrap);
+        blockUtilFinish(oneOffJobBootstrap, counter);
         assertThat(counter.get(), is(SHARDING_TOTAL_COUNT));
         getJobScheduler(oneOffJobBootstrap).shutdown();
     }
@@ -105,9 +105,9 @@ private Scheduler getScheduler(final OneOffJobBootstrap oneOffJobBootstrap) {
     }
 
     @SneakyThrows
-    private void blockUtilFinish(final OneOffJobBootstrap oneOffJobBootstrap) {
+    private void blockUtilFinish(final OneOffJobBootstrap oneOffJobBootstrap, final AtomicInteger counter) {
         Scheduler scheduler = getScheduler(oneOffJobBootstrap);
-        while (!scheduler.isStarted() || !scheduler.getCurrentlyExecutingJobs().isEmpty()) {
+        while (0 == counter.get() || !scheduler.getCurrentlyExecutingJobs().isEmpty()) {
             Thread.sleep(100);
         }
     }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java
Patch:
@@ -102,7 +102,7 @@ public void handleException(final String jobName, final Throwable cause) {
         String errorMessage = getErrorMessage(jobName, cause);
         try {
             sendMessage(createMessage(errorMessage));
-            log.error("An exception has occurred in Job '{}'. An email has been sent successfully.", jobName, cause);
+            log.info("An exception has occurred in Job '{}', an email has been sent successfully.", jobName, cause);
         } catch (final MessagingException ex) {
             cause.addSuppressed(ex);
             log.error("An exception has occurred in Job '{}' but failed to send email because of", jobName, cause);

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerTest.java
Patch:
@@ -72,7 +72,7 @@ public void assertHandleExceptionSucceedInSendingEmail() {
         when(session.getTransport()).thenReturn(transport);
         emailJobErrorHandler.handleException(jobName, cause);
         verify(transport).sendMessage(any(Message.class), any(Address[].class));
-        verify(log).error("An exception has occurred in Job '{}'. An email has been sent successfully.", jobName, cause);
+        verify(log).info("An exception has occurred in Job '{}', an email has been sent successfully.", jobName, cause);
     }
     
     private EmailJobErrorHandler getEmailJobErrorHandler(final Properties props) {

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java
Patch:
@@ -61,8 +61,8 @@ public final class EmailJobErrorHandler implements JobErrorHandler {
     public void init(final Properties props) {
         String host = props.getProperty(EmailPropertiesConstants.HOST);
         int port = Integer.parseInt(props.getProperty(EmailPropertiesConstants.PORT));
-        boolean isUseSSL = Boolean.getBoolean(props.getProperty(EmailPropertiesConstants.IS_USE_SSL, EmailPropertiesConstants.DEFAULT_IS_USE_SSL));
-        boolean isDebug = Boolean.getBoolean(props.getProperty(EmailPropertiesConstants.IS_DEBUG, EmailPropertiesConstants.DEFAULT_IS_DEBUG));
+        boolean isUseSSL = Boolean.parseBoolean(props.getProperty(EmailPropertiesConstants.IS_USE_SSL, EmailPropertiesConstants.DEFAULT_IS_USE_SSL));
+        boolean isDebug = Boolean.parseBoolean(props.getProperty(EmailPropertiesConstants.IS_DEBUG, EmailPropertiesConstants.DEFAULT_IS_DEBUG));
         String username = props.getProperty(EmailPropertiesConstants.USERNAME);
         String password = props.getProperty(EmailPropertiesConstants.PASSWORD);
         session = Session.getDefaultInstance(createSessionProperties(host, port, isUseSSL, isDebug), getSessionAuthenticator(username, password));

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
+import java.util.Properties;
 
 import static org.mockito.Mockito.verify;
 
@@ -39,10 +40,10 @@ public final class LogJobErrorHandlerTest {
     
     @Test
     public void assertHandleException() {
-        LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.createHandler("LOG").orElseThrow(() -> new JobConfigurationException("LOG error handler not found."));
+        LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.createHandler("LOG", new Properties()).orElseThrow(() -> new JobConfigurationException("LOG error handler not found."));
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
-        actual.handleException("test_job", null, cause);
+        actual.handleException("test_job", cause);
         verify(log).error("Job 'test_job' exception occur in job processing", cause);
     }
     

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListenerFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.shardingsphere.elasticjob.infra.spi.ElasticJobServiceLoader;
 
 import java.util.Optional;
+import java.util.Properties;
 
 /**
  * Job listener factory.
@@ -40,6 +41,6 @@ public final class ElasticJobListenerFactory {
      * @return optional job listener instance
      */
     public static Optional<ElasticJobListener> createListener(final String type) {
-        return ElasticJobServiceLoader.newTypedServiceInstance(ElasticJobListener.class, type);
+        return ElasticJobServiceLoader.newTypedServiceInstance(ElasticJobListener.class, type, new Properties());
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java
Patch:
@@ -53,10 +53,10 @@ public void handleException(final String jobName, final Properties props, final
         EmailConfiguration config = createConfiguration(props);
         try {
             sendMessage(createMessage(errorMessage, config), config);
-            log.error("An exception has occurred in Job '{}', Notification to email was successful..", jobName, cause);
+            log.error("An exception has occurred in Job '{}'. An email has been sent successfully.", jobName, cause);
         } catch (final MessagingException ex) {
             cause.addSuppressed(ex);
-            log.error("An exception has occurred in Job '{}', But failed to send alert by email because of", jobName, cause);
+            log.error("An exception has occurred in Job '{}' but failed to send email because of", jobName, cause);
         }
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java
Patch:
@@ -65,13 +65,13 @@ private EmailConfiguration createConfiguration(final Properties props) {
         int port = Integer.parseInt(props.getProperty(EmailPropertiesConstants.PORT));
         String username = props.getProperty(EmailPropertiesConstants.USERNAME);
         String password = props.getProperty(EmailPropertiesConstants.PASSWORD);
-        boolean isUseSSL = Boolean.getBoolean(props.getProperty(EmailPropertiesConstants.IS_USE_SSL, EmailPropertiesConstants.DEFAULT_IS_USE_SSL));
+        boolean isUseSSL = Boolean.parseBoolean(props.getProperty(EmailPropertiesConstants.IS_USE_SSL, EmailPropertiesConstants.DEFAULT_IS_USE_SSL));
         String subject = props.getProperty(EmailPropertiesConstants.SUBJECT, EmailPropertiesConstants.DEFAULT_SUBJECT);
         String from = props.getProperty(EmailPropertiesConstants.FROM);
         String to = props.getProperty(EmailPropertiesConstants.TO);
         String cc = props.getProperty(EmailPropertiesConstants.CC);
         String bcc = props.getProperty(EmailPropertiesConstants.BCC);
-        boolean isDebug = Boolean.getBoolean(props.getProperty(EmailPropertiesConstants.IS_DEBUG, EmailPropertiesConstants.DEFAULT_IS_DEBUG));
+        boolean isDebug = Boolean.parseBoolean(props.getProperty(EmailPropertiesConstants.IS_DEBUG, EmailPropertiesConstants.DEFAULT_IS_DEBUG));
         return new EmailConfiguration(host, port, username, password, isUseSSL, subject, from, to, cc, bcc, isDebug);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkConfiguration.java
Patch:
@@ -34,7 +34,7 @@ public final class DingtalkConfiguration implements ErrorHandlerConfiguration {
     
     private final String secret;
     
-    private final int connectTimeoutMillisecond;
+    private final int connectTimeoutMilliseconds;
     
-    private final int readTimeoutMillisecond;
+    private final int readTimeoutMilliseconds;
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatConfiguration.java
Patch:
@@ -30,7 +30,7 @@ public final class WechatConfiguration implements ErrorHandlerConfiguration {
     
     private final String webhook;
     
-    private final int connectTimeoutMillisecond;
+    private final int connectTimeoutMilliseconds;
     
-    private final int readTimeoutMillisecond;
+    private final int readTimeoutMilliseconds;
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatJobErrorHandlerTest.java
Patch:
@@ -119,8 +119,8 @@ private void setStaticFieldValue(final WechatJobErrorHandler wechatJobErrorHandl
     private Properties createConfigurationProperties(final String webhook) {
         Properties result = new Properties();
         result.setProperty(WechatPropertiesConstants.WEBHOOK, webhook);
-        result.setProperty(WechatPropertiesConstants.CONNECT_TIMEOUT_MILLISECOND, "1000");
-        result.setProperty(WechatPropertiesConstants.READ_TIMEOUT_MILLISECOND, "2000");
+        result.setProperty(WechatPropertiesConstants.CONNECT_TIMEOUT_MILLISECONDS, "1000");
+        result.setProperty(WechatPropertiesConstants.READ_TIMEOUT_MILLISECONDS, "2000");
         return result;
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/parser/JobBeanDefinitionParser.java
Patch:
@@ -82,7 +82,7 @@ private BeanDefinition createJobConfigurationBeanDefinition(final Element elemen
         } else {
             result.addConstructorArgValue(Arrays.asList(element.getAttribute(JobBeanDefinitionTag.JOB_LISTENER_TYPES_ATTRIBUTE).split(",")));
         }
-        result.addConstructorArgValue(parseExtraConfigs(new String[]{JobBeanDefinitionTag.TRACING_REF_ATTRIBUTE, JobBeanDefinitionTag.ERROR_HANDLER_CONFIG_REF_ATTRIBUTE},
+        result.addConstructorArgValue(parseExtraConfigs(new String[]{JobBeanDefinitionTag.TRACING_REF_ATTRIBUTE},
                 element, parserContext));
         result.addConstructorArgValue(element.getAttribute(JobBeanDefinitionTag.DESCRIPTION_ATTRIBUTE));
         result.addConstructorArgValue(parsePropsElement(element, parserContext));

File: examples/elasticjob-example-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/SpringMain.java
Patch:
@@ -27,6 +27,6 @@ public final class SpringMain {
     public static void main(final String[] args) {
     // CHECKSTYLE:ON
         EmbedZookeeperServer.start(EMBED_ZOOKEEPER_PORT);
-        new ClassPathXmlApplicationContext("classpath:META-INF/applicationContext.xml");
+        new ClassPathXmlApplicationContext("classpath:META-INF/application-context.xml");
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkJobErrorHandlerTest.java
Patch:
@@ -125,10 +125,10 @@ private void setStaticFieldValue(final DingtalkJobErrorHandler dingtalkJobErrorH
     }
     
     private DingtalkConfiguration createDingtalkConfiguration(final String webhook) {
-        return new DingtalkConfiguration(webhook, "mocked_keyword", "mocked_secret", 4000, 6000);
+        return DingtalkConfiguration.newBuilder(webhook).keyword("mocked_keyword").secret("mocked_secret").connectTimeoutMillisecond(4000).readTimeoutMillisecond(6000).build();
     }
     
     private DingtalkConfiguration createNoSignJobDingtalkConfiguration(final String webhook) {
-        return new DingtalkConfiguration(webhook, "mocked_keyword", null, 4000, 6000);
+        return DingtalkConfiguration.newBuilder(webhook).keyword("mocked_keyword").connectTimeoutMillisecond(4000).readTimeoutMillisecond(6000).build();
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerTest.java
Patch:
@@ -61,6 +61,6 @@ private void setStaticFieldValue(final EmailJobErrorHandler wechatJobErrorHandle
     }
     
     private EmailConfiguration createEmailConfiguration() {
-        return new EmailConfiguration("xxx", 465, "xxx", "xxx", true, "Unit test notification", "from@xxx.com", "to1@xxx.com,to2@xxx.com", "cc@xxx.com", "bcc@xxx.com", false);
+        return EmailConfiguration.newBuilder("xxx", 465, "xxx", "xxx", "from@xxx.xx", "to1@xxx.xx,to2@xxx.xx").subject("Unit test notification").cc("cc@xxx.xx").bcc("bcc@xxx.xx").build();
     }
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/tag/JobBeanDefinitionTag.java
Patch:
@@ -62,6 +62,8 @@ public final class JobBeanDefinitionTag {
 
     public static final String EXTRA_CONFIGURATION_REF_ATTRIBUTE = "extra-configurations-ref";
     
+    public static final String ERROR_HANDLER_CONFIG_REF_ATTRIBUTE = "error-handler-config-ref";
+    
     public static final String DESCRIPTION_ATTRIBUTE = "description";
     
     public static final String PROPS_TAG = "props";

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironmentTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.commons.dbcp.BasicDataSource;
 import org.apache.shardingsphere.elasticjob.cloud.ReflectionUtils;
 import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.junit.Test;
 
 import java.util.Map;
@@ -75,8 +74,7 @@ public void assertGetEventTraceRdbConfiguration() {
         properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_USERNAME.getKey(), "sa");
         properties.setProperty(BootstrapEnvironment.EnvironmentArgument.EVENT_TRACE_RDB_PASSWORD.getKey(), "password");
         ReflectionUtils.setFieldValue(bootstrapEnvironment, "properties", properties);
-        Optional<TracingConfiguration<?>> tracingConfiguration = bootstrapEnvironment.getTracingConfiguration();
-        tracingConfiguration.ifPresent(tracingConfiguration1 -> assertThat(tracingConfiguration1.getStorage(), instanceOf(BasicDataSource.class)));
+        bootstrapEnvironment.getTracingConfiguration().ifPresent(tracingConfig -> assertThat(tracingConfig.getStorage(), instanceOf(BasicDataSource.class)));
     }
     
     @Test

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironment.java
Patch:
@@ -90,11 +90,11 @@ public MesosConfiguration getMesosConfiguration() {
     }
     
     /**
-     * Get zookeeper config.
+     * Get zookeeper configuration.
      *
-     * @return zookeeper config
+     * @return zookeeper configuration
      */
-    // TODO Other zkConfig values ​​are configurable
+    // TODO Other zkConfig values are configurable
     public ZookeeperConfiguration getZookeeperConfiguration() {
         ZookeeperConfiguration result = new ZookeeperConfiguration(getValue(EnvironmentArgument.ZOOKEEPER_SERVERS), getValue(EnvironmentArgument.ZOOKEEPER_NAMESPACE));
         String digest = getValue(EnvironmentArgument.ZOOKEEPER_DIGEST);

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/exception/HttpClientException.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class HttpClientException extends RuntimeException {
     
+    private static final long serialVersionUID = 6769285134744353127L;
+    
     public HttpClientException(final Exception cause) {
         super(cause);
     }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/AppConstraintEvaluator.java
Patch:
@@ -155,6 +155,8 @@ private CloudJobConfiguration getJobConfiguration(final TaskContext taskContext)
     
     private static class LackConfigException extends Exception {
         
+        private static final long serialVersionUID = -3340824363577154813L;
+        
         LackConfigException(final String scope, final String configName) {
             super(String.format("Lack %s's config %s", scope, configName));
         }

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/pojo/JobConfigurationPOJOTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.junit.Test;
 
-import java.util.Arrays;
+import java.util.Collections;
 
 import static org.hamcrest.CoreMatchers.hasItem;
 import static org.hamcrest.CoreMatchers.is;
@@ -76,7 +76,7 @@ public void assertToJobConfiguration() {
         pojo.setJobShardingStrategyType("AVG_ALLOCATION");
         pojo.setJobExecutorServiceHandlerType("CPU");
         pojo.setJobErrorHandlerType("IGNORE");
-        pojo.setJobListenerTypes(Arrays.asList("LOG"));
+        pojo.setJobListenerTypes(Collections.singletonList("LOG"));
         pojo.setDescription("Job description");
         pojo.getProps().setProperty("key", "value");
         pojo.setDisabled(true);

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerNotFoundException.java
Patch:
@@ -24,6 +24,8 @@
  */
 public final class RequestBodyDeserializerNotFoundException extends RuntimeException {
     
+    private static final long serialVersionUID = 828418332240856770L;
+    
     public RequestBodyDeserializerNotFoundException(final String mimeType) {
         super(MessageFormat.format("RequestBodySerializer not found for [{0}]", mimeType));
     }

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/handler/HandlerNotFoundException.java
Patch:
@@ -21,6 +21,8 @@
 
 public final class HandlerNotFoundException extends RuntimeException {
     
+    private static final long serialVersionUID = 7316145545440327554L;
+    
     private final String path;
     
     public HandlerNotFoundException(final String path) {

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/mapping/AmbiguousPathPatternException.java
Patch:
@@ -22,6 +22,8 @@
  */
 public final class AmbiguousPathPatternException extends RuntimeException {
     
+    private static final long serialVersionUID = -7109813692538597236L;
+    
     public AmbiguousPathPatternException(final String message) {
         super(message);
     }

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerNotFoundException.java
Patch:
@@ -24,6 +24,8 @@
  */
 public final class ResponseBodySerializerNotFoundException extends RuntimeException {
     
+    private static final long serialVersionUID = 3201288074956273247L;
+    
     public ResponseBodySerializerNotFoundException(final String mimeType) {
         super(MessageFormat.format("ResponseBodySerializer not found for [{0}]", mimeType));
     }

File: elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HttpClient.java
Patch:
@@ -48,7 +48,6 @@ public final class HttpClient {
      * @param request HTTP request
      * @param consumer HTTP response consumer
      * @param timeoutSeconds wait for consume
-     * @throws InterruptedException interrupted
      */
     @SneakyThrows
     public static void request(final String host, final int port, final FullHttpRequest request, final Consumer<FullHttpResponse> consumer, final Long timeoutSeconds) {

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaSimpleJob.java
Patch:
@@ -33,8 +33,8 @@ public class JavaSimpleJob implements SimpleJob {
     
     @Override
     public void execute(final ShardingContext shardingContext) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE");
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/SpringSimpleJob.java
Patch:
@@ -34,8 +34,8 @@ public class SpringSimpleJob implements SimpleJob {
     
     @Override
     public void execute(final ShardingContext shardingContext) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE");
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeDingtalkJob.java
Patch:
@@ -22,10 +22,10 @@
 import org.springframework.stereotype.Component;
 
 @Component
-public class SpringBootOccurErrorNoticeDingtlakJob implements SimpleJob {
+public class SpringBootOccurErrorNoticeDingtalkJob implements SimpleJob {
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         throw new RuntimeException(String.format("An exception has occurred in Job, The parameter is %s", shardingContext.getShardingParameter()));
     }
 }

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeEmailJob.java
Patch:
@@ -25,7 +25,7 @@
 public class SpringBootOccurErrorNoticeEmailJob implements SimpleJob {
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         throw new RuntimeException(String.format("An exception has occurred in Job, The parameter is %s", shardingContext.getShardingParameter()));
     }
 }

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeWechatJob.java
Patch:
@@ -25,7 +25,7 @@
 public class SpringBootOccurErrorNoticeWechatJob implements SimpleJob {
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         throw new RuntimeException(String.format("An exception has occurred in Job, The parameter is %s", shardingContext.getShardingParameter()));
     }
 }

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootSimpleJob.java
Patch:
@@ -39,7 +39,7 @@ public class SpringBootSimpleJob implements SimpleJob {
     private FooRepository fooRepository;
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         logger.info("Item: {} | Time: {} | Thread: {} | {}",
                 shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE");
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkConfiguration.java
Patch:
@@ -36,7 +36,7 @@ public final class DingtalkConfiguration implements ErrorHandlerConfiguration {
     
     // TODO default value is 3000
     private final int connectTimeoutMillisecond;
-
+    
     // TODO default value is 5000
     private final int readTimeoutMillisecond;
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public final class EmailConfiguration implements ErrorHandlerConfiguration {
     private final String cc;
     
     private final String bcc;
-
+    
     // TODO default value is false
     private final boolean debug;
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkConfiguration.java
Patch:
@@ -34,8 +34,10 @@ public final class DingtalkConfiguration implements ErrorHandlerConfiguration {
     
     private final String secret;
     
+    // TODO default value is 3000
     private final int connectTimeoutMillisecond;
-    
+
+    // TODO default value is 5000
     private final int readTimeoutMillisecond;
     
     @Override

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatConfiguration.java
Patch:
@@ -30,8 +30,10 @@ public final class WechatConfiguration implements ErrorHandlerConfiguration {
     
     private final String webhook;
     
+    // TODO default value is 3000
     private final int connectTimeoutMillisecond;
     
+    // TODO default value is 3000
     private final int readTimeoutMillisecond;
     
     @Override

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/tracing/parser/TracingBeanDefinitionParser.java
Patch:
@@ -26,7 +26,7 @@
 import org.w3c.dom.Element;
 
 /**
- * Job bean definition parser.
+ * Tracing bean definition parser.
  */
 public final class TracingBeanDefinitionParser extends AbstractBeanDefinitionParser {
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkJobErrorHandler.java
Patch:
@@ -136,6 +136,6 @@ private String getErrorMessage(final String jobName, final DingtalkConfiguration
     
     @Override
     public String getType() {
-        return "DINGTALK";
+        return DingtalkType.TYPE;
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java
Patch:
@@ -132,6 +132,6 @@ public PasswordAuthentication getPasswordAuthentication() {
     
     @Override
     public String getType() {
-        return "EMAIL";
+        return EmailType.TYPE;
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatJobErrorHandler.java
Patch:
@@ -106,6 +106,6 @@ private String getErrorMessage(final String jobName, final Throwable cause) {
     
     @Override
     public String getType() {
-        return "WECHAT";
+        return WechatType.TYPE;
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -28,7 +28,6 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.Properties;
 
 import static org.mockito.Mockito.verify;
 
@@ -43,7 +42,7 @@ public void assertHandleException() {
         LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.createHandler("LOG").orElseThrow(() -> new JobConfigurationException("LOG error handler not found."));
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
-        actual.handleException("test_job", new Properties(), cause);
+        actual.handleException("test_job", null, cause);
         verify(log).error("Job 'test_job' exception occur in job processing", cause);
     }
     

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/job/tag/JobBeanDefinitionTag.java
Patch:
@@ -59,6 +59,8 @@ public final class JobBeanDefinitionTag {
     public static final String JOB_ERROR_HANDLER_TYPE_ATTRIBUTE = "job-error-handler-type";
     
     public static final String JOB_LISTENER_TYPES_ATTRIBUTE = "job-listener-types";
+
+    public static final String EXTRA_CONFIGURATION_REF_ATTRIBUTE = "extra-configurations-ref";
     
     public static final String DESCRIPTION_ATTRIBUTE = "description";
     

File: elasticjob-tracing/elasticjob-tracing-api/src/main/java/org/apache/shardingsphere/elasticjob/tracing/api/TracingConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.elasticjob.api.JobExtraConfiguration;
 
 /**
  * Tracing configuration.
@@ -27,7 +28,7 @@
  */
 @RequiredArgsConstructor
 @Getter
-public final class TracingConfiguration<T> {
+public final class TracingConfiguration<T> implements JobExtraConfiguration {
     
     private final String type;
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/fixture/DingtalkInternalController.java
Patch:
@@ -40,11 +40,11 @@
 
 public final class DingtalkInternalController implements RestfulController {
     
-    private static final String ACCESS_TOKEN = "42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f";
+    private static final String ACCESS_TOKEN = "mocked_token";
     
-    private static final String KEYWORD = "keyword";
+    private static final String KEYWORD = "mocked_keyword";
     
-    private static final String SECRET = "SEC0b0a6b13b6823b95737dd83491c23adee5d8a7a649899a12217e038eddc84ff4";
+    private static final String SECRET = "mocked_secret";
     
     /**
      * Send Dingtalk message.

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatJobErrorHandlerTest.java
Patch:
@@ -72,7 +72,7 @@ public void assertHandleExceptionWithNotifySuccessful() {
         WechatJobErrorHandler actual = getWechatJobErrorHandler();
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
-        actual.handleException("test_job", getJobProperties("http://localhost:9872/send?key=TLQEC0cPivqV1MkT0IPMtzunTBBVyIV3"), cause);
+        actual.handleException("test_job", getJobProperties("http://localhost:9872/send?key=mocked_key"), cause);
         verify(log).info("An exception has occurred in Job '{}', Notification to wechat was successful.", "test_job", cause);
     }
     
@@ -81,7 +81,7 @@ public void assertHandleExceptionWithWrongToken() {
         WechatJobErrorHandler actual = getWechatJobErrorHandler();
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
-        actual.handleException("test_job", getJobProperties("http://localhost:9872/send?key=wrongToken"), cause);
+        actual.handleException("test_job", getJobProperties("http://localhost:9872/send?key=wrong_key"), cause);
         verify(log).info("An exception has occurred in Job '{}', But failed to send alert by wechat because of: {}", "test_job", "token is invalid", cause);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/fixture/WechatInternalController.java
Patch:
@@ -28,7 +28,7 @@
 
 public final class WechatInternalController implements RestfulController {
     
-    private static final String KEY = "TLQEC0cPivqV1MkT0IPMtzunTBBVyIV3";
+    private static final String KEY = "mocked_key";
     
     /**
      * Send wechat message.

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/JobItemExecutorFactory.java
Patch:
@@ -67,6 +67,7 @@ public static JobItemExecutor getExecutor(final Class<? extends ElasticJob> elas
      * @return job item executor
      */
     public static JobItemExecutor getExecutor(final String elasticJobType) {
-        return ElasticJobServiceLoader.getCachedInstance(TypedJobItemExecutor.class, elasticJobType);
+        return ElasticJobServiceLoader.getCachedTypedServiceInstance(TypedJobItemExecutor.class, elasticJobType)
+                .orElseThrow(() -> new JobConfigurationException("Cannot find executor for elastic job type `%s`", elasticJobType));
     }
 }

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListenerFactory.java
Patch:
@@ -40,6 +40,6 @@ public final class ElasticJobListenerFactory {
      * @return optional job listener instance
      */
     public static Optional<ElasticJobListener> createListener(final String type) {
-        return Optional.ofNullable(ElasticJobServiceLoader.newTypedServiceInstance(ElasticJobListener.class, type));
+        return ElasticJobServiceLoader.newTypedServiceInstance(ElasticJobListener.class, type);
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandler.java
Patch:
@@ -17,16 +17,17 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 
+import java.util.Properties;
+
 /**
  * Job error handler for ignore exception.
  */
 public final class IgnoreJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final JobConfiguration jobConfig, final Throwable cause) {
+    public void handleException(final String jobName, final Properties props, final Throwable cause) {
     }
     
     @Override

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandler.java
Patch:
@@ -17,17 +17,18 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 
+import java.util.Properties;
+
 /**
  * Job error handler for throw exception.
  */
 public final class ThrowJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final JobConfiguration jobConfig, final Throwable cause) {
+    public void handleException(final String jobName, final Properties props, final Throwable cause) {
         throw new JobSystemException(cause);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -17,16 +17,17 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.junit.Test;
 
+import java.util.Properties;
+
 public final class IgnoreJobErrorHandlerTest {
     
     @Test
     public void assertHandleException() {
         JobErrorHandlerFactory.createHandler("IGNORE").orElseThrow(() -> new JobConfigurationException("IGNORE error handler not found."))
-                .handleException(JobConfiguration.newBuilder("test_job", 3).build(), new RuntimeException("test"));
+                .handleException("test_job", new Properties(), new RuntimeException("test"));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import lombok.SneakyThrows;
-import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.junit.Test;
@@ -29,6 +28,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
+import java.util.Properties;
 
 import static org.mockito.Mockito.verify;
 
@@ -43,7 +43,7 @@ public void assertHandleException() {
         LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.createHandler("LOG").orElseThrow(() -> new JobConfigurationException("LOG error handler not found."));
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
-        actual.handleException(JobConfiguration.newBuilder("test_job", 3).build(), cause);
+        actual.handleException("test_job", new Properties(), cause);
         verify(log).error("Job 'test_job' exception occur in job processing", cause);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandlerTest.java
Patch:
@@ -17,17 +17,18 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
-import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.junit.Test;
 
+import java.util.Properties;
+
 public final class ThrowJobErrorHandlerTest {
     
     @Test(expected = JobSystemException.class)
     public void assertHandleException() {
         JobErrorHandlerFactory.createHandler("THROW").orElseThrow(() -> new JobConfigurationException("THROW error handler not found."))
-                .handleException(JobConfiguration.newBuilder("test_job", 3).build(), new RuntimeException("test"));
+                .handleException("test_job", new Properties(), new RuntimeException("test"));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactory.java
Patch:
@@ -50,6 +50,6 @@ public static Optional<JobErrorHandler> createHandler(final String type) {
     }
     
     private static Optional<JobErrorHandler> newHandlerInstance(final String type) {
-        return Optional.ofNullable(ElasticJobServiceLoader.newTypedServiceInstance(JobErrorHandler.class, type));
+        return Optional.of(ElasticJobServiceLoader.newTypedServiceInstance(JobErrorHandler.class, type));
     }
 }

File: elasticjob-api/src/main/java/org/apache/shardingsphere/elasticjob/api/JobConfiguration.java
Patch:
@@ -283,7 +283,7 @@ public Builder jobErrorHandlerType(final String jobErrorHandlerType) {
             this.jobErrorHandlerType = jobErrorHandlerType;
             return this;
         }
-    
+        
         /**
          * Set job listener types.
          *

File: elasticjob-error-handler/elasticjob-error-handler-spi/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandler.java
Patch:
@@ -28,8 +28,8 @@ public interface JobErrorHandler extends TypedSPI {
     /**
      * Handle exception.
      * 
-     * @param jobConfiguration job config
-     * @param cause cause
+     * @param jobConfig job configuration
+     * @param cause failure cause
      */
-    void handleException(JobConfiguration jobConfiguration, Throwable cause);
+    void handleException(JobConfiguration jobConfig, Throwable cause);
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkConstants.java
Patch:
@@ -17,6 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.dingtalk;
 
+/**
+ * Dingtalk constants.
+ */
 public final class DingtalkConstants {
     
     public static final String PREFIX = "dingtalk.";

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConstants.java
Patch:
@@ -17,6 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.email;
 
+/**
+ * Email constants.
+ */
 public final class EmailConstants {
     
     public static final String PREFIX = "email.";

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandler.java
Patch:
@@ -26,7 +26,7 @@
 public final class IgnoreJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final JobConfiguration jobConfiguration, final Throwable cause) {
+    public void handleException(final JobConfiguration jobConfig, final Throwable cause) {
     }
     
     @Override

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandler.java
Patch:
@@ -28,8 +28,8 @@
 public final class LogJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final JobConfiguration jobConfiguration, final Throwable cause) {
-        log.error(String.format("Job '%s' exception occur in job processing", jobConfiguration.getJobName()), cause);
+    public void handleException(final JobConfiguration jobConfig, final Throwable cause) {
+        log.error(String.format("Job '%s' exception occur in job processing", jobConfig.getJobName()), cause);
     }
     
     @Override

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandler.java
Patch:
@@ -27,7 +27,7 @@
 public final class ThrowJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final JobConfiguration jobConfiguration, final Throwable cause) {
+    public void handleException(final JobConfiguration jobConfig, final Throwable cause) {
         throw new JobSystemException(cause);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/WechatConstants.java
Patch:
@@ -17,6 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.wechat;
 
+/**
+ * Wechat constants.
+ */
 public final class WechatConstants {
     
     public static final String PREFIX = "wechat.";

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-wechat/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/wechat/fixture/WechatInternalController.java
Patch:
@@ -19,15 +19,13 @@
 
 import com.google.common.collect.ImmutableMap;
 import lombok.SneakyThrows;
-import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.infra.json.GsonFactory;
 import org.apache.shardingsphere.elasticjob.restful.Http;
 import org.apache.shardingsphere.elasticjob.restful.RestfulController;
 import org.apache.shardingsphere.elasticjob.restful.annotation.Mapping;
 import org.apache.shardingsphere.elasticjob.restful.annotation.Param;
 import org.apache.shardingsphere.elasticjob.restful.annotation.ParamSource;
 
-@Slf4j
 public final class WechatInternalController implements RestfulController {
     
     private static final String KEY = "TLQEC0cPivqV1MkT0IPMtzunTBBVyIV3";
@@ -36,7 +34,7 @@ public final class WechatInternalController implements RestfulController {
      * Send wechat message.
      *
      * @param key access token
-     * @return Send Result.
+     * @return send Result
      */
     @SneakyThrows
     @Mapping(method = Http.POST, path = "/send")

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/JobFacade.java
Patch:
@@ -39,7 +39,7 @@ public interface JobFacade {
     JobConfiguration loadJobConfiguration(boolean fromCache);
     
     /**
-     * check job execution environment.
+     * Check job execution environment.
      * 
      * @throws JobExecutionEnvironmentException job execution environment exception
      */

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/JobItemExecutorFactory.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * Job item executor factory.
  */
+@SuppressWarnings("rawtypes")
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobItemExecutorFactory {
     

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/concurrent/BlockUtils.java
Patch:
@@ -25,14 +25,14 @@
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class BlockUtils {
-
+    
     /**
      * Wait short time.
      */
     public static void waitingShortTime() {
         sleep(100L);
     }
-
+    
     /**
      * Sleep for the specified number of milliseconds.
      *

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/context/ExecutionType.java
Patch:
@@ -21,12 +21,12 @@
  * Execution type.
  */
 public enum ExecutionType {
-
+    
     /**
      * Ready of execute.
      */
     READY,
-
+    
     /**
      * Failover execution.
      */

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/yaml/YamlEngine.java
Patch:
@@ -64,6 +64,7 @@ public static <T> T unmarshal(final String yamlContent, final Class<T> classType
      * @param <T> type of class
      * @return object from YAML
      */
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public static <T> T unmarshal(final String prefix, final InputStream configFileInput, final Class<T> classType) {
         Map<String, Object> configDataMap = new Yaml().loadAs(configFileInput, Map.class);
         if (null != configDataMap && StringUtils.isNotBlank(prefix)) {

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListenerFactoryTest.java
Patch:
@@ -25,12 +25,12 @@
 import static org.junit.Assert.assertThat;
 
 public final class ElasticJobListenerFactoryTest {
-
+    
     @Test(expected = JobConfigurationException.class)
     public void assertCreateInvalidJobListener() {
         ElasticJobListenerFactory.createListener("INVALID").orElseThrow(() -> new JobConfigurationException("Invalid elastic job listener!"));
     }
-
+    
     @Test
     public void assertCreatJobListener() {
         assertThat(ElasticJobListenerFactory.createListener("fooElasticJobListener").orElse(null), instanceOf(FooElasticJobListener.class));

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/listener/fixture/FooElasticJobListener.java
Patch:
@@ -29,7 +29,7 @@ public void beforeJobExecuted(final ShardingContexts shardingContexts) {
     @Override
     public void afterJobExecuted(final ShardingContexts shardingContexts) {
     }
-
+    
     @Override
     public String getType() {
         return "fooElasticJobListener";

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/RestfulController.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.restful;
 
 /**
- * Mark a class as RestfulController.
+ * RESTFul controller.
  */
 public interface RestfulController {
 }

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/RestfulService.java
Patch:
@@ -23,12 +23,12 @@
 public interface RestfulService {
     
     /**
-     * Start Restful Service.
+     * Start RESTFul service.
      */
     void startup();
     
     /**
-     * Shutdown Restful Service.
+     * Shutdown RESTFul service.
      */
     void shutdown();
 }

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/handler/ExceptionHandleResult.java
Patch:
@@ -24,7 +24,7 @@
 @Builder
 @Getter
 public final class ExceptionHandleResult {
-
+    
     private final Object result;
     
     @Builder.Default

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/mapping/RegexPathMatcher.java
Patch:
@@ -78,15 +78,15 @@ private String convertToRegexPattern(final String pathPattern) {
     
     private List<String> extractTemplateNames(final String pathPattern) {
         String[] pathFragments = pathPattern.split(PATH_SEPARATOR);
-        List<String> names = new ArrayList<>();
+        List<String> result = new ArrayList<>();
         for (String fragment : pathFragments) {
             int start = fragment.indexOf('{');
             int end = fragment.lastIndexOf('}');
             if (-1 != start && -1 != end) {
-                names.add(fragment.substring(start + 1, end));
+                result.add(fragment.substring(start + 1, end));
             }
         }
-        return names;
+        return result;
     }
     
     private String trimUriQuery(final String uri) {

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/pipeline/ExceptionHandling.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * Catch exceptions and look for a ExceptionHandler.
+ * Catch exceptions and look for exception handler.
  */
 @Slf4j
 @Sharable

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HandlerParameterDecoder.java
Patch:
@@ -68,7 +68,7 @@ private Object[] prepareArguments(final FullHttpRequest httpRequest, final Mappi
         List<HandlerParameter> handlerParameters = handler.getHandlerParameters();
         Map<String, List<String>> queryParameters = parseQuery(httpRequest.uri());
         Map<String, String> templateVariables = pathMatcher.captureVariables(mappingContext.pattern(), httpRequest.uri());
-        Object[] args = new Object[handlerParameters.size()];
+        Object[] result = new Object[handlerParameters.size()];
         boolean requestBodyAlreadyParsed = false;
         for (int i = 0; i < handlerParameters.size(); i++) {
             HandlerParameter handlerParameter = handlerParameters.get(i);
@@ -115,9 +115,9 @@ private Object[] prepareArguments(final FullHttpRequest httpRequest, final Mappi
                     break;
                 default:
             }
-            args[i] = parsedValue;
+            result[i] = parsedValue;
         }
-        return args;
+        return result;
     }
     
     private Map<String, List<String>> parseQuery(final String uri) {

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HttpRequestDispatcher.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.Optional;
 
 /**
- * If a HTTP request reached, HttpRequestDispatcher would lookup a proper Handler for the request.
+ * If a HTTP request reached, HTTP request dispatcher would lookup a proper Handler for the request.
  * Assemble a {@link HandleContext} with HTTP request and {@link MappingContext}, then pass it to the next in-bound handler.
  */
 @Sharable

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializer.java
Patch:
@@ -32,7 +32,7 @@ public interface ResponseBodySerializer {
     /**
      * Serialize object to bytes.
      *
-     * @param responseBody Object to be serialized
+     * @param responseBody object to be serialized
      * @return bytes
      */
     byte[] serialize(Object responseBody);

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerFactory.java
Patch:
@@ -72,7 +72,7 @@ public byte[] serialize(final Object responseBody) {
      * </p>
      *
      * @param contentType HTTP content type
-     * @return Serializer
+     * @return serializer
      */
     public static ResponseBodySerializer getResponseBodySerializer(final String contentType) {
         ResponseBodySerializer result = RESPONSE_BODY_SERIALIZERS.get(contentType);

File: elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/factory/SerializerFactory.java
Patch:
@@ -37,7 +37,7 @@ public interface SerializerFactory {
     /**
      * Serializer factory method.
      *
-     * @return Instance of serializer
+     * @return instance of serializer
      */
     ResponseBodySerializer createSerializer();
 }

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/reg/RegistryCenterFactory.java
Patch:
@@ -55,9 +55,9 @@ public static CoordinatorRegistryCenter createCoordinatorRegistryCenter(final St
         }
         HashCode hashCode = hasher.hash();
         return REG_CENTER_REGISTRY.computeIfAbsent(hashCode, unused -> {
-            final CoordinatorRegistryCenter coordinatorRegistryCenter = newCoordinatorRegistryCenter(connectString, namespace, digest);
-            coordinatorRegistryCenter.init();
-            return coordinatorRegistryCenter;
+            CoordinatorRegistryCenter result = newCoordinatorRegistryCenter(connectString, namespace, digest);
+            result.init();
+            return result;
         });
     }
     

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/operate/ShardingOperateAPIImplTest.java
Patch:
@@ -45,11 +45,10 @@ public void assertDisableSharding() {
         shardingOperateAPI.disable("test_job", "0");
         verify(regCenter).persist("/test_job/sharding/0/disabled", "");
     }
-
+    
     @Test
     public void assertEnableSharding() {
         shardingOperateAPI.enable("test_job", "0");
         verify(regCenter).remove("/test_job/sharding/0/disabled");
     }
-
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/ElasticJobProperties.java
Patch:
@@ -31,6 +31,6 @@
 @Setter
 @ConfigurationProperties(prefix = "elasticjob")
 public class ElasticJobProperties {
-
+    
     private Map<String, ElasticJobConfigurationProperties> jobs = new LinkedHashMap<>();
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/tracing/ElasticJobTracingConfiguration.java
Patch:
@@ -28,7 +28,7 @@
  * ElasticJob tracing auto configuration.
  */
 public class ElasticJobTracingConfiguration {
-
+    
     /**
      * Create a bean of tracing configuration.
      *

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/executor/PrintJobProperties.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.boot.job.executor;
 
-public class PrintJobProperties {
-
+public final class PrintJobProperties {
+    
     public static final String CONTENT_KEY = "print.content";
 }

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/fixture/job/CustomJob.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
 
 public interface CustomJob extends ElasticJob {
-
+    
     /**
      * Execute custom job.
      *

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/fixture/job/impl/CustomTestJob.java
Patch:
@@ -30,10 +30,10 @@
 @Component
 @Slf4j
 public class CustomTestJob implements CustomJob {
-
+    
     @Autowired
     private BarRepository barRepository;
-
+    
     @Override
     public void execute(final ShardingContext shardingContext) {
         int i = shardingContext.getShardingItem();

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/repository/BarRepository.java
Patch:
@@ -21,11 +21,11 @@
  * Bar Repository.
  */
 public interface BarRepository {
-
+    
     /**
-     * Get data by id.
+     * Get data by ID.
      *
-     * @param id id
+     * @param id ID
      * @return data
      */
     String getById(int id);

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-boot-starter/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/boot/job/repository/impl/BarRepositoryImpl.java
Patch:
@@ -22,9 +22,9 @@
 
 @Repository
 public class BarRepositoryImpl implements BarRepository {
-
+    
     private static final String[] DATA = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
-
+    
     @Override
     public String getById(final int id) {
         return id >= 0 && id < DATA.length ? DATA[id] : null;

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConfiguration.java
Patch:
@@ -37,8 +37,6 @@ public final class EmailConfiguration {
     
     private String password;
     
-    private String protocol;
-    
     private boolean useSsl;
     
     private String subject;
@@ -63,7 +61,6 @@ public static EmailConfiguration getByProps(final Properties props) {
         EmailConfiguration configuration = new EmailConfiguration();
         configuration.setHost(props.getProperty(EmailConstants.EMAIL_HOST));
         configuration.setPort(Integer.parseInt(props.getProperty(EmailConstants.EMAIL_PORT)));
-        configuration.setProtocol(props.getProperty(EmailConstants.EMAIL_PROTOCOL));
         configuration.setUsername(props.getProperty(EmailConstants.EMAIL_USERNAME));
         configuration.setPassword(props.getProperty(EmailConstants.EMAIL_PASSWORD));
         configuration.setUseSsl(Boolean.parseBoolean(props.getOrDefault(EmailConstants.EMAIL_USE_SSL, Boolean.FALSE.toString()).toString()));

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailConstants.java
Patch:
@@ -29,8 +29,6 @@ public final class EmailConstants {
     
     public static final String EMAIL_PASSWORD = PREFIX + "password";
     
-    public static final String EMAIL_PROTOCOL = PREFIX + "protocol";
-    
     public static final String EMAIL_USE_SSL = PREFIX + "useSsl";
     
     public static final String EMAIL_SUBJECT = PREFIX + "subject";

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandler.java
Patch:
@@ -60,7 +60,7 @@ private Properties createSessionProperties(final EmailConfiguration emailConfigu
         result.put("mail.smtp.host", emailConfiguration.getHost());
         result.put("mail.smtp.port", emailConfiguration.getPort());
         result.put("mail.smtp.auth", "true");
-        result.put("mail.transport.protocol", emailConfiguration.getProtocol());
+        result.put("mail.transport.protocol", "smtp");
         result.setProperty("mail.debug", Boolean.toString(emailConfiguration.isDebug()));
         if (emailConfiguration.isUseSsl()) {
             result.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerTest.java
Patch:
@@ -63,7 +63,6 @@ private JobConfiguration getJobConfiguration() {
                 .setProperty(EmailConstants.EMAIL_PORT, "465")
                 .setProperty(EmailConstants.EMAIL_USERNAME, "xxx")
                 .setProperty(EmailConstants.EMAIL_PASSWORD, "xxx")
-                .setProperty(EmailConstants.EMAIL_PROTOCOL, "smtp")
                 .setProperty(EmailConstants.EMAIL_USE_SSL, "true")
                 .setProperty(EmailConstants.EMAIL_SUBJECT, "Unit test notification")
                 .setProperty(EmailConstants.EMAIL_FROM, "from@xxx.com")

File: examples/elasticjob-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -163,7 +163,6 @@ private static void setEmailConfig(JobConfiguration jobConfiguration) {
         jobConfiguration.getProps().setProperty(EmailConstants.EMAIL_PORT, "465");
         jobConfiguration.getProps().setProperty(EmailConstants.EMAIL_USERNAME, "username");
         jobConfiguration.getProps().setProperty(EmailConstants.EMAIL_PASSWORD, "password");
-        jobConfiguration.getProps().setProperty(EmailConstants.EMAIL_PROTOCOL, "smtp");
         jobConfiguration.getProps().setProperty(EmailConstants.EMAIL_USE_SSL, "true");
         jobConfiguration.getProps().setProperty(EmailConstants.EMAIL_SUBJECT, "Test elasticJob error message");
         jobConfiguration.getProps().setProperty(EmailConstants.EMAIL_FROM, "from@xxx.com");

File: elasticjob-error-handler/elasticjob-error-handler-spi/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler;
 
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.spi.TypedSPI;
 
 /**
@@ -27,8 +28,8 @@ public interface JobErrorHandler extends TypedSPI {
     /**
      * Handle exception.
      * 
-     * @param jobName job name
+     * @param jobConfiguration job config
      * @param cause cause
      */
-    void handleException(String jobName, Throwable cause);
+    void handleException(JobConfiguration jobConfiguration, Throwable cause);
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 
 /**
@@ -25,7 +26,7 @@
 public final class IgnoreJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final String jobName, final Throwable cause) {
+    public void handleException(final JobConfiguration jobConfiguration, final Throwable cause) {
     }
     
     @Override

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandler.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 
 /**
@@ -27,8 +28,8 @@
 public final class LogJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final String jobName, final Throwable cause) {
-        log.error(String.format("Job '%s' exception occur in job processing", jobName), cause);
+    public void handleException(final JobConfiguration jobConfiguration, final Throwable cause) {
+        log.error(String.format("Job '%s' exception occur in job processing", jobConfiguration.getJobName()), cause);
     }
     
     @Override

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandler.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 
@@ -26,7 +27,7 @@
 public final class ThrowJobErrorHandler implements JobErrorHandler {
     
     @Override
-    public void handleException(final String jobName, final Throwable cause) {
+    public void handleException(final JobConfiguration jobConfiguration, final Throwable cause) {
         throw new JobSystemException(cause);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.junit.Test;
@@ -25,6 +26,7 @@ public final class IgnoreJobErrorHandlerTest {
     
     @Test
     public void assertHandleException() {
-        JobErrorHandlerFactory.createHandler("IGNORE").orElseThrow(() -> new JobConfigurationException("IGNORE error handler not found.")).handleException("test_job", new RuntimeException("test"));
+        JobErrorHandlerFactory.createHandler("IGNORE").orElseThrow(() -> new JobConfigurationException("IGNORE error handler not found."))
+                .handleException(JobConfiguration.newBuilder("test_job", 3).build(), new RuntimeException("test"));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import lombok.SneakyThrows;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.junit.Test;
@@ -42,7 +43,7 @@ public void assertHandleException() {
         LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.createHandler("LOG").orElseThrow(() -> new JobConfigurationException("LOG error handler not found."));
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
-        actual.handleException("test_job", cause);
+        actual.handleException(JobConfiguration.newBuilder("test_job", 3).build(), cause);
         verify(log).error("Job 'test_job' exception occur in job processing", cause);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandlerTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
@@ -26,6 +27,7 @@ public final class ThrowJobErrorHandlerTest {
     
     @Test(expected = JobSystemException.class)
     public void assertHandleException() {
-        JobErrorHandlerFactory.createHandler("THROW").orElseThrow(() -> new JobConfigurationException("THROW error handler not found.")).handleException("test_job", new RuntimeException("test"));
+        JobErrorHandlerFactory.createHandler("THROW").orElseThrow(() -> new JobConfigurationException("THROW error handler not found."))
+                .handleException(JobConfiguration.newBuilder("test_job", 3).build(), new RuntimeException("test"));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactory.java
Patch:
@@ -33,7 +33,7 @@ public final class JobErrorHandlerFactory {
     private static final String DEFAULT_HANDLER = "LOG";
     
     static {
-        ElasticJobServiceLoader.register(JobErrorHandler.class);
+        ElasticJobServiceLoader.registerTypedService(JobErrorHandler.class);
     }
     
     /**
@@ -50,6 +50,6 @@ public static Optional<JobErrorHandler> createHandler(final String type) {
     }
     
     private static Optional<JobErrorHandler> newHandlerInstance(final String type) {
-        return ElasticJobServiceLoader.newServiceInstances(JobErrorHandler.class).stream().filter(handler -> handler.getType().equalsIgnoreCase(type)).findFirst();
+        return Optional.ofNullable(ElasticJobServiceLoader.newTypedServiceInstance(JobErrorHandler.class, type));
     }
 }

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/listener/ElasticJobListenerFactory.java
Patch:
@@ -30,7 +30,7 @@
 public final class ElasticJobListenerFactory {
     
     static {
-        ElasticJobServiceLoader.register(ElasticJobListener.class);
+        ElasticJobServiceLoader.registerTypedService(ElasticJobListener.class);
     }
     
     /**
@@ -40,6 +40,6 @@ public final class ElasticJobListenerFactory {
      * @return optional job listener instance
      */
     public static Optional<ElasticJobListener> createListener(final String type) {
-        return ElasticJobServiceLoader.newServiceInstances(ElasticJobListener.class).stream().filter(listener -> listener.getType().equalsIgnoreCase(type)).findFirst();
+        return Optional.ofNullable(ElasticJobServiceLoader.newTypedServiceInstance(ElasticJobListener.class, type));
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobClassNameProviderFactory.java
Patch:
@@ -32,7 +32,7 @@ public final class JobClassNameProviderFactory {
     
     private static final List<JobClassNameProvider> PROVIDERS = new LinkedList<>();
     
-    private static final JobClassNameProvider DEFAULT_PROVIDER = new SimpleJobClassNameProvider();
+    private static final JobClassNameProvider DEFAULT_PROVIDER = new DefaultJobClassNameProvider();
     
     static {
         for (JobClassNameProvider each : ServiceLoader.load(JobClassNameProvider.class)) {

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobClassNameProviderFactoryTest.java
Patch:
@@ -26,6 +26,6 @@ public final class JobClassNameProviderFactoryTest {
     
     @Test
     public void assertGetDefaultStrategy() {
-        assertThat(JobClassNameProviderFactory.getProvider(), instanceOf(SimpleJobClassNameProvider.class));
+        assertThat(JobClassNameProviderFactory.getProvider(), instanceOf(DefaultJobClassNameProvider.class));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-dingtalk/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/dingtalk/DingtalkJobErrorHandlerTest.java
Patch:
@@ -116,7 +116,7 @@ public static void close() {
     
     private DingtalkJobErrorHandler getDingtalkJobErrorHandler() {
         for (JobErrorHandler each : ServiceLoader.load(JobErrorHandler.class)) {
-            if (null != each && each instanceof DingtalkJobErrorHandler) {
+            if (each instanceof DingtalkJobErrorHandler) {
                 return (DingtalkJobErrorHandler) each;
             }
         }

File: elasticjob-error-handler/elasticjob-error-handler-type/elasticjob-error-handler-email/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/email/EmailJobErrorHandlerTest.java
Patch:
@@ -71,7 +71,7 @@ public void assertHandleExceptionWithSession() throws ReflectiveOperationExcepti
     
     private EmailJobErrorHandler getEmailJobErrorHandler() {
         for (JobErrorHandler each : ServiceLoader.load(JobErrorHandler.class)) {
-            if (null != each && each instanceof EmailJobErrorHandler) {
+            if (each instanceof EmailJobErrorHandler) {
                 return (EmailJobErrorHandler) each;
             }
         }

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactoryTest.java
Patch:
@@ -29,16 +29,16 @@ public final class JobErrorHandlerFactoryTest {
     
     @Test
     public void assertGetDefaultHandler() {
-        assertThat(JobErrorHandlerFactory.getHandler(""), instanceOf(LogJobErrorHandler.class));
+        assertThat(JobErrorHandlerFactory.createHandler("").orElse(null), instanceOf(LogJobErrorHandler.class));
     }
     
     @Test(expected = JobConfigurationException.class)
     public void assertGetInvalidHandler() {
-        JobErrorHandlerFactory.getHandler("INVALID");
+        JobErrorHandlerFactory.createHandler("INVALID").orElseThrow(() -> new JobConfigurationException(""));
     }
     
     @Test
     public void assertGetHandler() {
-        assertThat(JobErrorHandlerFactory.getHandler("THROW"), instanceOf(ThrowJobErrorHandler.class));
+        assertThat(JobErrorHandlerFactory.createHandler("THROW").orElse(null), instanceOf(ThrowJobErrorHandler.class));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -18,12 +18,13 @@
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.junit.Test;
 
 public final class IgnoreJobErrorHandlerTest {
     
     @Test
     public void assertHandleException() {
-        JobErrorHandlerFactory.getHandler("IGNORE").handleException("test_job", new RuntimeException("test"));
+        JobErrorHandlerFactory.createHandler("IGNORE").orElseThrow(() -> new JobConfigurationException("IGNORE error handler not found.")).handleException("test_job", new RuntimeException("test"));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import lombok.SneakyThrows;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -38,7 +39,7 @@ public final class LogJobErrorHandlerTest {
     
     @Test
     public void assertHandleException() {
-        LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.getHandler("LOG");
+        LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.createHandler("LOG").orElseThrow(() -> new JobConfigurationException("LOG error handler not found."));
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
         actual.handleException("test_job", cause);

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandlerTest.java
Patch:
@@ -18,13 +18,14 @@
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.junit.Test;
 
 public final class ThrowJobErrorHandlerTest {
     
     @Test(expected = JobSystemException.class)
     public void assertHandleException() {
-        JobErrorHandlerFactory.getHandler("THROW").handleException("test_job", new RuntimeException("test"));
+        JobErrorHandlerFactory.createHandler("THROW").orElseThrow(() -> new JobConfigurationException("THROW error handler not found.")).handleException("test_job", new RuntimeException("test"));
     }
 }

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutor.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
 import org.apache.shardingsphere.elasticjob.infra.exception.ExceptionUtils;
+import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.infra.handler.threadpool.JobExecutorServiceHandlerFactory;
 import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
@@ -73,7 +74,8 @@ private ElasticJobExecutor(final ElasticJob elasticJob, final JobConfiguration j
         this.jobFacade = jobFacade;
         this.jobItemExecutor = jobItemExecutor;
         executorService = JobExecutorServiceHandlerFactory.getHandler(jobConfig.getJobExecutorServiceHandlerType()).createExecutorService(jobConfig.getJobName());
-        jobErrorHandler = JobErrorHandlerFactory.getHandler(jobConfig.getJobErrorHandlerType());
+        jobErrorHandler = JobErrorHandlerFactory.createHandler(jobConfig.getJobErrorHandlerType())
+                .orElseThrow(() -> new JobConfigurationException("Can not find job error handler type '%s'.", jobConfig.getJobErrorHandlerType()));
         itemErrorMessages = new ConcurrentHashMap<>(jobConfig.getShardingTotalCount(), 1);
     }
     

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -17,12 +17,13 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.junit.Test;
 
 public final class IgnoreJobErrorHandlerTest {
     
     @Test
     public void assertHandleException() {
-        new IgnoreJobErrorHandler().handleException("test_job", new RuntimeException("test"));
+        JobErrorHandlerFactory.getHandler("IGNORE").handleException("test_job", new RuntimeException("test"));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import lombok.SneakyThrows;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -37,7 +38,7 @@ public final class LogJobErrorHandlerTest {
     
     @Test
     public void assertHandleException() {
-        LogJobErrorHandler actual = new LogJobErrorHandler();
+        LogJobErrorHandler actual = (LogJobErrorHandler) JobErrorHandlerFactory.getHandler("LOG");
         setStaticFieldValue(actual);
         Throwable cause = new RuntimeException("test");
         actual.handleException("test_job", cause);

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandlerTest.java
Patch:
@@ -17,13 +17,14 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler.general;
 
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.junit.Test;
 
 public final class ThrowJobErrorHandlerTest {
     
     @Test(expected = JobSystemException.class)
     public void assertHandleException() {
-        new ThrowJobErrorHandler().handleException("test_job", new RuntimeException("test"));
+        JobErrorHandlerFactory.getHandler("THROW").handleException("test_job", new RuntimeException("test"));
     }
 }

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactoryTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shardingsphere.elasticjob.error.handler;
 
-import org.apache.shardingsphere.elasticjob.error.handler.impl.LogJobErrorHandler;
-import org.apache.shardingsphere.elasticjob.error.handler.impl.ThrowJobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.general.LogJobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.general.ThrowJobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
 import org.junit.Test;
 

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/IgnoreJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import org.junit.Test;
 

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/LogJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import lombok.SneakyThrows;
 import org.junit.Test;

File: elasticjob-error-handler/elasticjob-error-handler-impl/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/general/ThrowJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.error.handler.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.general;
 
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/listener/DistributeOnceElasticJobListenerTest.java
Patch:
@@ -57,8 +57,9 @@ public final class DistributeOnceElasticJobListenerTest {
     
     @Before
     public void setUp() {
-        distributeOnceElasticJobListener = new TestDistributeOnceElasticJobListener(elasticJobListenerCaller);
-        distributeOnceElasticJobListener.setGuaranteeService(guaranteeService);
+        distributeOnceElasticJobListener = new TestDistributeOnceElasticJobListener();
+        distributeOnceElasticJobListener.setCaller(elasticJobListenerCaller);
+        distributeOnceElasticJobListener.addGuaranteeService(guaranteeService, "test_job", 1L, 1L);
         ReflectionUtils.setSuperclassFieldValue(distributeOnceElasticJobListener, "timeService", timeService);
         Map<Integer, String> map = new HashMap<>(2, 1);
         map.put(0, "");

File: elasticjob-lite/elasticjob-lite-spring/elasticjob-lite-spring-namespace/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/namespace/fixture/listener/SimpleOnceListener.java
Patch:
@@ -40,7 +40,6 @@ public SimpleOnceListener() {
     }
     
     public SimpleOnceListener(final long startedTimeoutMilliseconds, final long completedTimeoutMilliseconds) {
-        super(startedTimeoutMilliseconds, completedTimeoutMilliseconds);
         this.startedTimeoutMilliseconds = startedTimeoutMilliseconds;
         this.completedTimeoutMilliseconds = completedTimeoutMilliseconds;
     }

File: elasticjob-error-handler/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error;
+package org.apache.shardingsphere.elasticjob.error.handler;
 
 import org.apache.shardingsphere.elasticjob.infra.spi.TypedSPI;
 

File: elasticjob-error-handler/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error;
+package org.apache.shardingsphere.elasticjob.error.handler;
 
 import com.google.common.base.Strings;
 import lombok.AccessLevel;

File: elasticjob-error-handler/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/IgnoreJobErrorHandler.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
 
-import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 
 /**
  * Job error handler for ignore exception.

File: elasticjob-error-handler/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/LogJobErrorHandler.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
 
-import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 
 /**
  * Job error handler for log error message.

File: elasticjob-error-handler/elasticjob-error-handler-general/src/main/java/org/apache/shardingsphere/elasticjob/error/handler/impl/ThrowJobErrorHandler.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
 
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
 
 /**
  * Job error handler for throw exception.

File: elasticjob-error-handler/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/JobErrorHandlerFactoryTest.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error;
+package org.apache.shardingsphere.elasticjob.error.handler;
 
+import org.apache.shardingsphere.elasticjob.error.handler.impl.LogJobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.impl.ThrowJobErrorHandler;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
-import org.apache.shardingsphere.elasticjob.infra.handler.error.impl.LogJobErrorHandler;
-import org.apache.shardingsphere.elasticjob.infra.handler.error.impl.ThrowJobErrorHandler;
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.instanceOf;

File: elasticjob-error-handler/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/IgnoreJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
 
 import org.junit.Test;
 

File: elasticjob-error-handler/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/LogJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
 
 import lombok.SneakyThrows;
 import org.junit.Test;

File: elasticjob-error-handler/elasticjob-error-handler-general/src/test/java/org/apache/shardingsphere/elasticjob/error/handler/impl/ThrowJobErrorHandlerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.infra.handler.error.impl;
+package org.apache.shardingsphere.elasticjob.error.handler.impl;
 
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.junit.Test;

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutor.java
Patch:
@@ -21,11 +21,11 @@
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandler;
+import org.apache.shardingsphere.elasticjob.error.handler.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.env.IpUtils;
 import org.apache.shardingsphere.elasticjob.infra.exception.ExceptionUtils;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
-import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandler;
-import org.apache.shardingsphere.elasticjob.infra.handler.error.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.infra.handler.threadpool.JobExecutorServiceHandlerFactory;
 import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
 import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutorFactory;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/bootstrap/impl/OneOffJobBootstrap.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl;
 
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.JobBootstrap;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.listener.ElasticJobListener;
@@ -54,6 +56,7 @@ public OneOffJobBootstrap(final CoordinatorRegistryCenter regCenter, final Strin
      * Execute job.
      */
     public void execute() {
+        Preconditions.checkArgument(Strings.isNullOrEmpty(jobScheduler.getJobConfig().getCron()), "Cron should be empty.");
         jobScheduler.getJobScheduleController().executeJob();
     }
     

File: elasticjob-infra/elasticjob-tracing/elasticjob-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBJobEventStorage.java
Patch:
@@ -353,7 +353,7 @@ List<JobStatusTraceEvent> getJobStatusTraceEvents(final String taskId) {
                 while (resultSet.next()) {
                     JobStatusTraceEvent jobStatusTraceEvent = new JobStatusTraceEvent(resultSet.getString(1), resultSet.getString(2), resultSet.getString(3), resultSet.getString(4),
                             resultSet.getString(5), Source.valueOf(resultSet.getString(6)), resultSet.getString(7), resultSet.getString(8),
-                            State.valueOf(resultSet.getString(9)), resultSet.getString(10), new SimpleDateFormat("yyyy-mm-dd HH:MM:SS").parse(resultSet.getString(11)));
+                            State.valueOf(resultSet.getString(9)), resultSet.getString(10), new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(resultSet.getString(11)));
                     result.add(jobStatusTraceEvent);
                 }
             }

File: examples/elasticjob-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example;
 
 import org.apache.commons.dbcp.BasicDataSource;
+import org.apache.shardingsphere.elasticjob.http.props.HttpJobProperties;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.dataflow.props.DataflowJobProperties;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/app/CloudAppConfigurationListener.java
Patch:
@@ -50,9 +50,8 @@ public CloudAppConfigurationListener(final CoordinatorRegistryCenter regCenter,
     }
     
     @Override
-
     public void event(final Type type, final ChildData oldData, final ChildData data) {
-        String path = data.getPath();
+        String path = Type.NODE_DELETED == type ? oldData.getPath() : data.getPath();
         if (Type.NODE_DELETED == type && isJobAppConfigNode(path)) {
             String appName = path.substring(CloudAppConfigurationNode.ROOT.length() + 1);
             stopExecutors(appName);

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/job/CloudJobConfigurationListener.java
Patch:
@@ -51,9 +51,8 @@ public CloudJobConfigurationListener(final CoordinatorRegistryCenter regCenter,
     }
     
     @Override
-
     public void event(final Type type, final ChildData oldData, final ChildData data) {
-        String path = data.getPath();
+        String path = Type.NODE_DELETED == type ? oldData.getPath() : data.getPath();
         if (Type.NODE_CREATED == type && isJobConfigNode(path)) {
             CloudJobConfigurationPOJO cloudJobConfig = getCloudJobConfiguration(data);
             if (null != cloudJobConfig) {

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/app/CloudAppDisableListener.java
Patch:
@@ -47,7 +47,7 @@ public CloudAppDisableListener(final CoordinatorRegistryCenter regCenter, final
     
     @Override
     public void event(final Type type, final ChildData oldData, final ChildData data) {
-        String path = data.getPath();
+        String path = Type.NODE_DELETED == type ? oldData.getPath() : data.getPath();
         if (Type.NODE_CREATED == type && isAppDisableNode(path)) {
             String appName = path.substring(DisableAppNode.ROOT.length() + 1);
             if (Objects.nonNull(appName)) {

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/job/CloudJobDisableListener.java
Patch:
@@ -42,7 +42,7 @@ public CloudJobDisableListener(final CoordinatorRegistryCenter regCenter, final
     
     @Override
     public void event(final Type type, final ChildData oldData, final ChildData data) {
-        String path = data.getPath();
+        String path = Type.NODE_DELETED == type ? oldData.getPath() : data.getPath();
         if (Type.NODE_CREATED == type && isJobDisableNode(path)) {
             String jobName = path.substring(DisableJobNode.ROOT.length() + 1);
             if (Objects.nonNull(jobName)) {

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/console/config/WebMvcConfig.java
Patch:
@@ -21,8 +21,6 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.method.HandlerTypePredicate;
 import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
-import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
-import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 /**

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/console/config/WebMvcConfig.java
Patch:
@@ -21,8 +21,6 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.method.HandlerTypePredicate;
 import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
-import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
-import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 /**

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/ElasticJobExecutor.java
Patch:
@@ -113,6 +113,8 @@ public void execute() {
         } catch (final Throwable cause) {
             //CHECKSTYLE:ON
             jobErrorHandler.handleException(jobConfig.getJobName(), cause);
+        } finally {
+            executorService.shutdown();
         }
     }
     

File: elasticjob-cloud/elasticjob-cloud-executor/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/prod/TaskExecutorTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.mesos.Protos.SlaveInfo;
 import org.apache.mesos.Protos.TaskID;
 import org.apache.mesos.Protos.TaskInfo;
-import org.apache.shardingsphere.elasticjob.cloud.executor.local.fixture.TestSimpleJob;
+import org.apache.shardingsphere.elasticjob.cloud.executor.fixture.TestSimpleJob;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-executor/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/prod/TaskExecutorThreadTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.mesos.Protos.TaskInfo;
 import org.apache.mesos.Protos.TaskState;
 import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.cloud.executor.local.fixture.TestSimpleJob;
+import org.apache.shardingsphere.elasticjob.cloud.executor.fixture.TestSimpleJob;
 import org.apache.shardingsphere.elasticjob.cloud.executor.prod.TaskExecutor.TaskThread;
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/exception/AppConfigurationException.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.cloud.exception;
+package org.apache.shardingsphere.elasticjob.cloud.scheduler.exception;
 
 /**
  * Application configuration exception.

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/ProducerManager.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.mesos.SchedulerDriver;
 import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.config.pojo.CloudJobConfigurationPOJO;
-import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.pojo.CloudAppConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/CloudAppRestfulApi.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.mesos.Protos.ExecutorID;
 import org.apache.mesos.Protos.SlaveID;
 import org.apache.shardingsphere.elasticjob.cloud.config.pojo.CloudJobConfigurationPOJO;
-import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.pojo.CloudAppConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/ProducerManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.ReflectionUtils;
 import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.config.pojo.CloudJobConfigurationPOJO;
-import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.pojo.CloudAppConfigurationPOJO;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/impl/AverageAllocationJobShardingStrategy.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 
 /**
- * Sharding sharding which for average by sharding item.
+ * Sharding strategy which for average by sharding item.
  * 
  * <p>
  * If the job server number and sharding count cannot be divided, 

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/impl/OdevitySortByNameJobShardingStrategy.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 /**
- * Sharding sharding which for hash with job name to determine IP asc or desc.
+ * Sharding strategy which for hash with job name to determine IP asc or desc.
  * 
  * <p>
  * IP address asc if job name' hashcode is odd;

File: elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/handler/sharding/impl/RoundRobinByNameJobShardingStrategy.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 /**
- * Sharding sharding which for round robin by name job.
+ * Sharding strategy which for round robin by name job.
  */
 public final class RoundRobinByNameJobShardingStrategy implements JobShardingStrategy {
     

File: elasticjob-lite/elasticjob-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/tag/JobBeanDefinitionTag.java
Patch:
@@ -28,6 +28,8 @@ public final class JobBeanDefinitionTag {
     
     public static final String JOB_REF_ATTRIBUTE = "job-ref";
     
+    public static final String JOB_TYPE_ATTRIBUTE = "job-type";
+    
     public static final String REGISTRY_CENTER_REF_ATTRIBUTE = "registry-center-ref";
     
     public static final String TRACING_REF_ATTRIBUTE = "tracing-ref";

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/JobClassNameProviderFactory.java
Patch:
@@ -32,7 +32,7 @@ public final class JobClassNameProviderFactory {
     
     private static final List<JobClassNameProvider> PROVIDERS = new LinkedList<>();
     
-    private static final JobClassNameProvider DEFAULT_STRATEGY = new SimpleJobClassNameProvider();
+    private static final JobClassNameProvider DEFAULT_PROVIDER = new SimpleJobClassNameProvider();
     
     static {
         for (JobClassNameProvider each : ServiceLoader.load(JobClassNameProvider.class)) {
@@ -46,6 +46,6 @@ public final class JobClassNameProviderFactory {
      * @return job class name provider
      */
     public static JobClassNameProvider getProvider() {
-        return PROVIDERS.isEmpty() ? DEFAULT_STRATEGY : PROVIDERS.get(0);
+        return PROVIDERS.isEmpty() ? DEFAULT_PROVIDER : PROVIDERS.get(0);
     }
 }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/SimpleJobClassNameProvider.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 
 /**
- * Simple provider for get job class name.
+ * Simple job class name provider.
  */
 public final class SimpleJobClassNameProvider implements JobClassNameProvider {
     

File: elasticjob-lite/elasticjob-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/setup/SpringProxyJobClassNameProvider.java
Patch:
@@ -23,13 +23,14 @@
 import org.springframework.aop.support.AopUtils;
 
 /**
- * Provider for get job class name.
+ * Spring job class name provider.
+ * 
  * <p>
  * Consider the proxy object that generated by cglib or jdk dynamic proxy.
  * </p>
  */
 public final class SpringProxyJobClassNameProvider implements JobClassNameProvider {
-
+    
     @Override
     public String getJobClassName(final ElasticJob elasticJob) {
         return AopUtils.isAopProxy(elasticJob) ? AopTargetUtils.getTarget(elasticJob).getClass().getName() : elasticJob.getClass().getName();

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduler.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.shardingsphere.elasticjob.infra.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.AbstractDistributeOnceElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.guarantee.GuaranteeService;
+import org.apache.shardingsphere.elasticjob.lite.internal.setup.JobClassNameProviderFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.setup.SetUpFacade;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
@@ -89,7 +90,8 @@ public JobScheduler(final CoordinatorRegistryCenter regCenter, final ElasticJob
         this.tracingConfig = tracingConfig;
         setUpFacade = new SetUpFacade(regCenter, jobConfig.getJobName(), this.elasticJobListeners);
         schedulerFacade = new SchedulerFacade(regCenter, jobConfig.getJobName());
-        this.jobConfig = setUpFacade.setUpJobConfiguration(elasticJob.getClass().getName(), jobConfig);
+        String jobClassName = JobClassNameProviderFactory.getProvider().getJobClassName(elasticJob);
+        this.jobConfig = setUpFacade.setUpJobConfiguration(jobClassName, jobConfig);
         setGuaranteeServiceForElasticJobListeners(regCenter, this.elasticJobListeners);
         jobScheduleController = createJobScheduleController();
     }

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduler.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.shardingsphere.elasticjob.infra.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.guarantee.GuaranteeService;
 import org.apache.shardingsphere.elasticjob.lite.internal.setup.SetUpFacade;
+import org.apache.shardingsphere.elasticjob.lite.internal.util.ProxyUtils;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.quartz.JobBuilder;
@@ -89,7 +90,8 @@ public JobScheduler(final CoordinatorRegistryCenter regCenter, final ElasticJob
         this.tracingConfig = tracingConfig;
         setUpFacade = new SetUpFacade(regCenter, jobConfig.getJobName(), this.elasticJobListeners);
         schedulerFacade = new SchedulerFacade(regCenter, jobConfig.getJobName());
-        this.jobConfig = setUpFacade.setUpJobConfiguration(elasticJob.getClass().getName(), jobConfig);
+        String jobClassName = ProxyUtils.isCglibProxy(elasticJob) ? ProxyUtils.getTargetClass(elasticJob).getName() : elasticJob.getClass().getName();
+        this.jobConfig = setUpFacade.setUpJobConfiguration(jobClassName, jobConfig);
         setGuaranteeServiceForElasticJobListeners(regCenter, this.elasticJobListeners);
         jobScheduleController = createJobScheduleController();
     }

File: elasticjob-lite/elasticjob-lite-spring-boot-starter/src/main/java/org/apache/shardingsphere/elasticjob/lite/boot/ElasticJobLiteAutoConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.boot;
 
+import com.google.common.base.Strings;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
@@ -26,7 +27,6 @@
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.reg.boot.ElasticJobRegistryCenterAutoConfiguration;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
-import org.assertj.core.util.Strings;
 import org.springframework.beans.factory.BeanCreationException;
 import org.springframework.beans.factory.config.SingletonBeanRegistry;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/pojo/JobConfigurationPOJO.java
Patch:
@@ -46,7 +46,7 @@ public final class JobConfigurationPOJO {
     
     private boolean misfire;
     
-    private int maxTimeDiffSeconds;
+    private int maxTimeDiffSeconds = -1;
     
     private int reconcileIntervalMinutes;
     

File: elasticjob-infra/elasticjob-tracing/elasticjob-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/tracing/rdb/storage/RDBStorageSQLMapper.java
Patch:
@@ -75,6 +75,6 @@ private Properties loadProps(final String sqlPropertiesFileName) {
     
     private InputStream getPropertiesInputStream(final String sqlPropertiesFileName) {
         InputStream sqlPropertiesFile = RDBJobEventStorage.class.getClassLoader().getResourceAsStream(String.format("META-INF/sql/%s", sqlPropertiesFileName));
-        return null == sqlPropertiesFile ? RDBJobEventStorage.class.getClassLoader().getResourceAsStream("META-INF/sql/sql92.properties") : sqlPropertiesFile;
+        return null == sqlPropertiesFile ? RDBJobEventStorage.class.getClassLoader().getResourceAsStream("META-INF/sql/SQL92.properties") : sqlPropertiesFile;
     }
 }

File: elasticjob-cloud/elasticjob-cloud-common/src/main/java/org/apache/shardingsphere/elasticjob/cloud/util/json/CloudConfigurationConstants.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.constants;
+package org.apache.shardingsphere.elasticjob.cloud.util.json;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/app/CloudAppConfigurationGsonFactory.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app;
 
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.constants.CloudConfigurationConstants;
+import org.apache.shardingsphere.elasticjob.cloud.util.json.CloudConfigurationConstants;
 import org.apache.shardingsphere.elasticjob.cloud.util.json.GsonFactory;
 import com.google.gson.TypeAdapter;
 import com.google.gson.stream.JsonReader;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/JobTaskRequest.java
Patch:
@@ -36,7 +36,7 @@ public final class JobTaskRequest implements TaskRequest {
     
     private final TaskContext taskContext;
     
-    private final CloudJobConfiguration jobConfig;
+    private final CloudJobConfiguration cloudJobConfig;
     
     @Override
     public String getId() {
@@ -50,12 +50,12 @@ public String taskGroupName() {
     
     @Override
     public double getCPUs() {
-        return jobConfig.getCpuCount();
+        return cloudJobConfig.getCpuCount();
     }
     
     @Override
     public double getMemory() {
-        return jobConfig.getMemoryMB();
+        return cloudJobConfig.getMemoryMB();
     }
     
     @Override

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/CloudAppRestfulApi.java
Patch:
@@ -163,7 +163,7 @@ public void disable(@PathParam("appName") final String appName) {
             disableAppService.add(appName);
             for (CloudJobConfiguration each : jobConfigService.loadAll()) {
                 if (appName.equals(each.getAppName())) {
-                    producerManager.unschedule(each.getJobName());
+                    producerManager.unschedule(each.getJobConfig().getJobName());
                 }
             }
         }
@@ -181,7 +181,7 @@ public void enable(@PathParam("appName") final String appName) {
             disableAppService.remove(appName);
             for (CloudJobConfiguration each : jobConfigService.loadAll()) {
                 if (appName.equals(each.getAppName())) {
-                    producerManager.reschedule(each.getJobName());
+                    producerManager.reschedule(each.getJobConfig().getJobName());
                 }
             }
         }
@@ -205,7 +205,7 @@ public void deregister(@PathParam("appName") final String appName) {
     private void removeAppAndJobConfigurations(final String appName) {
         for (CloudJobConfiguration each : jobConfigService.loadAll()) {
             if (appName.equals(each.getAppName())) {
-                producerManager.deregister(each.getJobName());
+                producerManager.deregister(each.getJobConfig().getJobName());
             }
         }
         disableAppService.remove(appName);

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/failover/FailoverService.java
Patch:
@@ -96,14 +96,14 @@ public Collection<JobContext> getAllEligibleJobContexts() {
                 regCenter.remove(FailoverNode.getFailoverJobNodePath(each));
                 continue;
             }
-            Optional<CloudJobConfiguration> jobConfig = configService.load(each);
-            if (!jobConfig.isPresent()) {
+            Optional<CloudJobConfiguration> cloudJobConfig = configService.load(each);
+            if (!cloudJobConfig.isPresent()) {
                 regCenter.remove(FailoverNode.getFailoverJobNodePath(each));
                 continue;
             }
             List<Integer> assignedShardingItems = getAssignedShardingItems(each, taskIdList, assignedTasks);
             if (!assignedShardingItems.isEmpty()) {
-                result.add(new JobContext(jobConfig.get(), assignedShardingItems, ExecutionType.FAILOVER));    
+                result.add(new JobContext(cloudJobConfig.get(), assignedShardingItems, ExecutionType.FAILOVER));    
             }
         }
         return result;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/ready/ReadyService.java
Patch:
@@ -119,7 +119,7 @@ public Collection<JobContext> getAllEligibleJobContexts(final Collection<JobCont
         if (!regCenter.isExisted(ReadyNode.ROOT)) {
             return Collections.emptyList();
         }
-        Collection<String> ineligibleJobNames = ineligibleJobContexts.stream().map(input -> input.getJobConfig().getJobName()).collect(Collectors.toList());
+        Collection<String> ineligibleJobNames = ineligibleJobContexts.stream().map(input -> input.getCloudJobConfig().getJobConfig().getJobName()).collect(Collectors.toList());
         List<String> jobNames = regCenter.getChildrenKeys(ReadyNode.ROOT);
         List<JobContext> result = new ArrayList<>(jobNames.size());
         for (String each : jobNames) {

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/running/RunningService.java
Patch:
@@ -96,8 +96,8 @@ public void add(final TaskContext taskContext) {
     }
     
     private boolean isDaemon(final String jobName) {
-        Optional<CloudJobConfiguration> cloudJobConfigurationOptional = configurationService.load(jobName);
-        return cloudJobConfigurationOptional.isPresent() && CloudJobExecutionType.DAEMON == cloudJobConfigurationOptional.get().getJobExecutionType();
+        Optional<CloudJobConfiguration> cloudJobConfig = configurationService.load(jobName);
+        return cloudJobConfig.isPresent() && CloudJobExecutionType.DAEMON == cloudJobConfig.get().getJobExecutionType();
     }
     
     /**

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/context/JobContextTest.java
Patch:
@@ -29,8 +29,8 @@ public final class JobContextTest {
     
     @Test
     public void assertFrom() {
-        CloudJobConfiguration jobConfig = CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job");
-        JobContext actual = JobContext.from(jobConfig, ExecutionType.READY);
+        CloudJobConfiguration cloudJobConfig = CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job");
+        JobContext actual = JobContext.from(cloudJobConfig, ExecutionType.READY);
         assertThat(actual.getAssignedShardingItems().size(), is(10));
         for (int i = 0; i < actual.getAssignedShardingItems().size(); i++) {
             assertThat(actual.getAssignedShardingItems().get(i), is(i));

File: elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/yaml/fixture/FooYamlConfiguration.java
Patch:
@@ -27,4 +27,6 @@ public final class FooYamlConfiguration {
     private String foo;
     
     private String bar;
+    
+    private FooYamlConfiguration nest;
 }

File: elasticjob-cloud/elasticjob-cloud-common/src/main/java/org/apache/shardingsphere/elasticjob/cloud/config/CloudJobExecutionType.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job;
+package org.apache.shardingsphere.elasticjob.cloud.config;
 
 /**
  * Cloud job execution type.

File: elasticjob-cloud/elasticjob-cloud-executor/src/main/java/org/apache/shardingsphere/elasticjob/cloud/executor/DaemonTaskScheduler.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.mesos.ExecutorDriver;
 import org.apache.mesos.Protos;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
+import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.cloud.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
@@ -64,7 +64,7 @@ public final class DaemonTaskScheduler {
     
     private final String elasticJobType;
     
-    private final JobCoreConfiguration jobConfig;
+    private final JobConfiguration jobConfig;
     
     private final JobFacade jobFacade;
     

File: elasticjob-cloud/elasticjob-cloud-executor/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/TaskExecutorTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.mesos.Protos.SlaveInfo;
 import org.apache.mesos.Protos.TaskID;
 import org.apache.mesos.Protos.TaskInfo;
+import org.apache.shardingsphere.elasticjob.cloud.executor.fixture.TestJob;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -57,7 +58,7 @@ public final class TaskExecutorTest {
     
     @Before
     public void setUp() throws NoSuchFieldException {
-        taskExecutor = new TaskExecutor();
+        taskExecutor = new TaskExecutor(new TestJob());
         ReflectionUtils.setFieldValue(taskExecutor, "executorService", executorService);
         executorInfo = ExecutorInfo.getDefaultInstance();
     }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/job/CloudJobConfigurationService.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job;
 
 import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/context/JobContext.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.context;
 
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
@@ -46,7 +46,7 @@ public final class JobContext {
      * @return Job running context
      */
     public static JobContext from(final CloudJobConfiguration jobConfig, final ExecutionType type) {
-        int shardingTotalCount = jobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount();
+        int shardingTotalCount = jobConfig.getJobConfig().getShardingTotalCount();
         List<Integer> shardingItems = new ArrayList<>(shardingTotalCount);
         for (int i = 0; i < shardingTotalCount; i++) {
             shardingItems.add(i);

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/AppConstraintEvaluator.java
Patch:
@@ -30,7 +30,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.codehaus.jettison.json.JSONException;
 
 import java.util.ArrayList;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/FacadeService.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.app.DisableAppService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.job.DisableJobService;
@@ -165,7 +165,7 @@ public void recordFailoverTask(final TaskContext taskContext) {
             return;
         }
         CloudJobConfiguration jobConfig = jobConfigOptional.get();
-        if (jobConfig.getTypeConfig().getCoreConfig().isFailover() || CloudJobExecutionType.DAEMON == jobConfig.getJobExecutionType()) {
+        if (jobConfig.getJobConfig().isFailover() || CloudJobExecutionType.DAEMON == jobConfig.getJobExecutionType()) {
             failoverService.add(taskContext);
         }
     }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/JobTaskRequest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos;
 
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
 import com.netflix.fenzo.ConstraintEvaluator;
 import com.netflix.fenzo.TaskRequest;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/LaunchingTasks.java
Patch:
@@ -69,7 +69,7 @@ Collection<String> getIntegrityViolationJobs(final Collection<VMAssignmentResult
         Collection<String> result = new HashSet<>(assignedJobShardingTotalCountMap.size(), 1);
         for (Map.Entry<String, Integer> entry : assignedJobShardingTotalCountMap.entrySet()) {
             JobContext jobContext = eligibleJobContextsMap.get(entry.getKey());
-            if (ExecutionType.FAILOVER != jobContext.getType() && !entry.getValue().equals(jobContext.getJobConfig().getTypeConfig().getCoreConfig().getShardingTotalCount())) {
+            if (ExecutionType.FAILOVER != jobContext.getType() && !entry.getValue().equals(jobContext.getJobConfig().getJobConfig().getShardingTotalCount())) {
                 log.warn("Job {} is not assigned at this time, because resources not enough to run all sharding instances.", entry.getKey());
                 result.add(entry.getKey());
             }

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/ProducerManager.java
Patch:
@@ -27,9 +27,9 @@
 import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.app.DisableAppService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.job.DisableJobService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/TransientProducerScheduler.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.producer;
 
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobSystemException;
 import org.quartz.CronScheduleBuilder;
@@ -86,7 +86,7 @@ private Properties getQuartzProperties() {
     
     // TODO Concurrency optimization
     synchronized void register(final CloudJobConfiguration jobConfig) {
-        String cron = jobConfig.getTypeConfig().getCoreConfig().getCron();
+        String cron = jobConfig.getJobConfig().getCron();
         JobKey jobKey = buildJobKey(cron);
         repository.put(jobKey, jobConfig.getJobName());
         try {
@@ -111,7 +111,7 @@ private Trigger buildTrigger(final String cron) {
     
     synchronized void deregister(final CloudJobConfiguration jobConfig) {
         repository.remove(jobConfig.getJobName());
-        String cron = jobConfig.getTypeConfig().getCoreConfig().getCron();
+        String cron = jobConfig.getJobConfig().getCron();
         if (!repository.containsKey(buildJobKey(cron))) {
             try {
                 scheduler.unscheduleJob(TriggerKey.triggerKey(cron));

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/CloudAppRestfulApi.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.MesosStateService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/failover/FailoverService.java
Patch:
@@ -24,7 +24,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/ready/ReadyService.java
Patch:
@@ -20,9 +20,9 @@
 import com.google.common.base.Strings;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
@@ -73,7 +73,7 @@ public void addTransient(final String jobName) {
         }
         String readyJobNode = ReadyNode.getReadyJobNodePath(jobName);
         String times = regCenter.getDirectly(readyJobNode);
-        if (cloudJobConfig.get().getTypeConfig().getCoreConfig().isMisfire()) {
+        if (cloudJobConfig.get().getJobConfig().isMisfire()) {
             regCenter.persist(readyJobNode, Integer.toString(null == times ? 1 : Integer.parseInt(times) + 1));
         } else {
             regCenter.persist(ReadyNode.getReadyJobNodePath(jobName), "1");

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/running/RunningService.java
Patch:
@@ -22,9 +22,9 @@
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext.MetaInfo;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Collection;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/job/CloudJobConfigurationServiceTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job;
 
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJsonConstants;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
@@ -106,8 +107,6 @@ public void assertLoadWithSpringConfig() {
         when(regCenter.get("/config/job/test_spring_job")).thenReturn(CloudJsonConstants.getSpringJobJson());
         Optional<CloudJobConfiguration> actual = configService.load("test_spring_job");
         assertTrue(actual.isPresent());
-        assertThat(actual.get().getBeanName(), is("springSimpleJob"));
-        assertThat(actual.get().getApplicationContext(), is("applicationContext.xml"));
     }
     
     @Test

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/context/JobContextTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.context;
 
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.junit.Test;
 

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/FacadeServiceTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudAppConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/TaskLaunchScheduledServiceTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.mesos.SchedulerDriver;
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudAppConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/ProducerManagerTest.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudAppConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.job.DisableJobService;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/ready/ReadyServiceTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.collect.Lists;
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/running/RunningServiceTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.infra.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.cloud.config.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJsonConstants;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.TaskNode;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;

File: examples/elasticjob-example-cloud/src/main/java/com/dangdang/ddframe/job/example/CloudJobMain.java
Patch:
@@ -24,6 +24,6 @@ public final class CloudJobMain {
     // CHECKSTYLE:OFF
     public static void main(final String[] args) {
     // CHECKSTYLE:ON
-        JobBootstrap.execute();
+        JobBootstrap.execute("SCRIPT");
     }
 }

File: elasticjob-cloud/elasticjob-cloud-common/src/main/java/org/apache/shardingsphere/elasticjob/cloud/config/JobCoreConfiguration.java
Patch:
@@ -181,7 +181,6 @@ public Builder jobProperties(final String key, final String value) {
          */
         public final JobCoreConfiguration build() {
             Preconditions.checkArgument(!Strings.isNullOrEmpty(jobName), "jobName can not be empty.");
-            Preconditions.checkArgument(!Strings.isNullOrEmpty(cron), "cron can not be empty.");
             Preconditions.checkArgument(shardingTotalCount > 0, "shardingTotalCount should larger than zero.");
             return new JobCoreConfiguration(jobName, cron, shardingTotalCount, shardingItemParameters, jobParameter, failover, misfire, description, jobProperties);
         }

File: elasticjob-cloud/elasticjob-cloud-common/src/main/java/org/apache/shardingsphere/elasticjob/cloud/config/JobRootConfiguration.java
Patch:
@@ -21,7 +21,7 @@
  * Job root configuration.
  */
 public interface JobRootConfiguration {
-
+    
     /**
      * Get type Configuration.
      *

File: elasticjob-cloud/elasticjob-cloud-common/src/main/java/org/apache/shardingsphere/elasticjob/cloud/executor/type/ScriptJobExecutor.java
Patch:
@@ -40,7 +40,7 @@ public ScriptJobExecutor(final JobFacade jobFacade) {
     
     @Override
     protected void process(final ShardingContext shardingContext) {
-        final String scriptCommandLine = ((ScriptJobConfiguration) getJobRootConfig().getTypeConfig()).getScriptCommandLine();
+        final String scriptCommandLine = ((ScriptJobConfiguration) getJobConfig()).getScriptCommandLine();
         if (Strings.isNullOrEmpty(scriptCommandLine)) {
             throw new JobConfigurationException("Cannot find script command line for job '%s', job is not executed.", shardingContext.getJobName());
         }

File: elasticjob-cloud/elasticjob-cloud-common/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/type/ScriptJobExecutorTest.java
Patch:
@@ -43,7 +43,7 @@ public final class ScriptJobExecutorTest {
     @Test
     public void assertExecuteWhenCommandLineIsEmpty() {
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, ShardingContextsBuilder.getMultipleShardingContexts());
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("", IgnoreJobExceptionHandler.class));
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("", IgnoreJobExceptionHandler.class).getTypeConfig());
         scriptJobExecutor = new ScriptJobExecutor(jobFacade);
         scriptJobExecutor.execute();
     }
@@ -60,7 +60,7 @@ public void assertExecuteWhenExecuteFailureForMultipleShardingItems() {
     
     private void assertExecuteWhenExecuteFailure(final ShardingContexts shardingContexts) {
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, shardingContexts);
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("not_exists_file", ThrowJobExceptionHandler.class));
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("not_exists_file", ThrowJobExceptionHandler.class).getTypeConfig());
         scriptJobExecutor = new ScriptJobExecutor(jobFacade);
         scriptJobExecutor.execute();
     }
@@ -77,7 +77,7 @@ public void assertExecuteSuccessForSingleShardingItems() {
     
     private void assertExecuteSuccess(final ShardingContexts shardingContexts) {
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, shardingContexts);
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("exists_file param0 param1", IgnoreJobExceptionHandler.class));
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("exists_file param0 param1", IgnoreJobExceptionHandler.class).getTypeConfig());
         scriptJobExecutor = new ScriptJobExecutor(jobFacade);
         scriptJobExecutor.execute();
         verify(jobFacade).loadJobRootConfiguration(true);

File: elasticjob-cloud/elasticjob-cloud-common/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/type/SimpleJobExecutorTest.java
Patch:
@@ -58,13 +58,13 @@ public final class SimpleJobExecutorTest {
     
     @Before
     public void setUp() {
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration());
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration().getTypeConfig());
         simpleJobExecutor = new SimpleJobExecutor(new TestSimpleJob(jobCaller), jobFacade);
     }
     
     @Test
     public void assertNewExecutorWithDefaultHandlers() throws NoSuchFieldException {
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration("ErrorHandler", Object.class.getName()));
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration("ErrorHandler", Object.class.getName()).getTypeConfig());
         SimpleJobExecutor simpleJobExecutor = new SimpleJobExecutor(new TestSimpleJob(jobCaller), jobFacade);
         assertThat(ReflectionUtils.getFieldValue(simpleJobExecutor, AbstractElasticJobExecutor.class.getDeclaredField("executorService")), 
                 instanceOf(new DefaultExecutorServiceHandler().createExecutorService("test_job").getClass()));

File: elasticjob-cloud/elasticjob-cloud-common/src/test/java/org/apache/shardingsphere/elasticjob/cloud/executor/type/WrongJobExecutorTest.java
Patch:
@@ -44,7 +44,7 @@ public final class WrongJobExecutorTest {
     
     @Before
     public void setUp() {
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration());
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration().getTypeConfig());
         wrongSimpleJobExecutor = new SimpleJobExecutor(new TestWrongJob(), jobFacade);
     }
     

File: elasticjob-cloud/elasticjob-cloud-executor/src/main/java/org/apache/shardingsphere/elasticjob/cloud/executor/TaskExecutor.java
Patch:
@@ -123,12 +123,12 @@ public void run() {
             JobConfigurationContext jobConfig = new JobConfigurationContext((Map<String, String>) data.get("jobConfigContext"));
             try {
                 ElasticJob elasticJob = getElasticJobInstance(jobConfig);
-                final CloudJobFacade jobFacade = new CloudJobFacade(shardingContexts, jobConfig, jobEventBus);
+                final CloudJobFacade jobFacade = new CloudJobFacade(shardingContexts, jobConfig.getTypeConfig(), jobEventBus);
                 if (jobConfig.isTransient()) {
                     JobExecutorFactory.getJobExecutor(elasticJob, jobFacade).execute();
                     executorDriver.sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskInfo.getTaskId()).setState(Protos.TaskState.TASK_FINISHED).build());
                 } else {
-                    new DaemonTaskScheduler(elasticJob, jobConfig, jobFacade, executorDriver, taskInfo.getTaskId()).init();
+                    new DaemonTaskScheduler(elasticJob, jobConfig.getTypeConfig().getCoreConfig(), jobFacade, executorDriver, taskInfo.getTaskId()).init();
                 }
                 // CHECKSTYLE:OFF
             } catch (final Throwable ex) {

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/JobFacade.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor;
+package org.apache.shardingsphere.elasticjob.executor;
 
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/JobItemExecutor.java
Patch:
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.item;
+package org.apache.shardingsphere.elasticjob.executor.item;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.executor.JobFacade;
 
 /**
  * Job item executor.

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/JobItemExecutorFactory.java
Patch:
@@ -15,14 +15,14 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.item;
+package org.apache.shardingsphere.elasticjob.executor.item;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobConfigurationException;
-import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.ClassedJobItemExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.TypedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.ClassedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.TypedJobItemExecutor;
 
 import java.util.Map;
 import java.util.Map.Entry;

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/impl/ClassedJobItemExecutor.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.item.impl;
+package org.apache.shardingsphere.elasticjob.executor.item.impl;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.executor.item.JobItemExecutor;
+import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
 
 /**
  * Classed job item executor.

File: elasticjob-executor/elasticjob-executor-kernel/src/main/java/org/apache/shardingsphere/elasticjob/executor/item/impl/TypedJobItemExecutor.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.item.impl;
+package org.apache.shardingsphere.elasticjob.executor.item.impl;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.executor.item.JobItemExecutor;
+import org.apache.shardingsphere.elasticjob.executor.item.JobItemExecutor;
 import org.apache.shardingsphere.elasticjob.infra.spi.TypedSPI;
 
 /**

File: elasticjob-executor/elasticjob-executor-kernel/src/test/java/org/apache/shardingsphere/elasticjob/executor/fixture/job/FailedJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.fixture.job;
+package org.apache.shardingsphere.elasticjob.executor.fixture.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 

File: elasticjob-executor/elasticjob-executor-type/elasticjob-dataflow-executor/src/main/java/org/apache/shardingsphere/elasticjob/dataflow/job/DataflowJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.dataflow.job;
+package org.apache.shardingsphere.elasticjob.dataflow.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;

File: elasticjob-executor/elasticjob-executor-type/elasticjob-dataflow-executor/src/main/java/org/apache/shardingsphere/elasticjob/dataflow/props/DataflowJobProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.dataflow.props;
+package org.apache.shardingsphere.elasticjob.dataflow.props;
 
 /**
  * Dataflow job properties.

File: elasticjob-executor/elasticjob-executor-type/elasticjob-dataflow-executor/src/test/java/org/apache/shardingsphere/elasticjob/dataflow/job/BatchDataflowJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.dataflow.job;
+package org.apache.shardingsphere.elasticjob.dataflow.job;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
 

File: elasticjob-executor/elasticjob-executor-type/elasticjob-dataflow-executor/src/test/java/org/apache/shardingsphere/elasticjob/dataflow/job/StreamingDataflowJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.dataflow.job;
+package org.apache.shardingsphere.elasticjob.dataflow.job;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
 

File: elasticjob-executor/elasticjob-executor-type/elasticjob-script-executor/src/main/java/org/apache/shardingsphere/elasticjob/script/props/ScriptJobProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.script.props;
+package org.apache.shardingsphere.elasticjob.script.props;
 
 /**
  * Script job properties.

File: elasticjob-executor/elasticjob-executor-type/elasticjob-simple-executor/src/main/java/org/apache/shardingsphere/elasticjob/simple/job/SimpleJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.simple.job;
+package org.apache.shardingsphere.elasticjob.simple.job;
 
 import org.apache.shardingsphere.elasticjob.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;

File: elasticjob-executor/elasticjob-executor-type/elasticjob-simple-executor/src/test/java/org/apache/shardingsphere/elasticjob/simple/job/FooSimpleJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.simple.job;
+package org.apache.shardingsphere.elasticjob.simple.job;
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;
+import org.apache.shardingsphere.elasticjob.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.infra.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.infra.exception.JobExecutionEnvironmentException;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.failover.FailoverService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionContextService;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/executor/ClassedFooJobExecutor.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.executor;
 
-import org.apache.shardingsphere.elasticjob.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.ClassedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.executor.item.impl.ClassedJobItemExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.FooJob;
 
 public final class ClassedFooJobExecutor implements ClassedJobItemExecutor<FooJob> {

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/fixture/TestDataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
+import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 
 import java.util.List;
 

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/fixture/TestSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 
 public class TestSimpleJob implements SimpleJob {
     

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobConfigurationAPIImplTest.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.settings;
 
-import org.apache.shardingsphere.elasticjob.lite.dataflow.props.DataflowJobProperties;
+import org.apache.shardingsphere.elasticjob.dataflow.props.DataflowJobProperties;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobConfigurationAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture.LifecycleYamlConstants;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.script.props.ScriptJobProperties;
+import org.apache.shardingsphere.elasticjob.script.props.ScriptJobProperties;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/DataflowElasticJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
+import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 
 import java.util.Collections;
 import java.util.List;

File: elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/FooSimpleElasticJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 
 public class FooSimpleElasticJob implements SimpleJob {
     

File: elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/ref/RefFooDataflowElasticJob.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
+import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 
 import java.util.Collections;

File: elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/ref/RefFooSimpleElasticJob.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 
 public class RefFooSimpleElasticJob implements SimpleJob {

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/JavaDataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.dataflow;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
+import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepositoryFactory;

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/SpringDataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.dataflow;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
+import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.simple;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepositoryFactory;

File: examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/SpringSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.simple;
 
 import org.apache.shardingsphere.elasticjob.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 

File: examples/elasticjob-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -20,13 +20,13 @@
 import org.apache.commons.dbcp.BasicDataSource;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.props.DataflowJobProperties;
+import org.apache.shardingsphere.elasticjob.dataflow.props.DataflowJobProperties;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.JavaDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaSimpleJob;
 import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
 import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.script.props.ScriptJobProperties;
+import org.apache.shardingsphere.elasticjob.script.props.ScriptJobProperties;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 
 import javax.sql.DataSource;

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
-import org.apache.shardingsphere.elasticjob.lite.dataflow.props.DataflowJobProperties;
+import org.apache.shardingsphere.elasticjob.dataflow.job.DataflowJob;
+import org.apache.shardingsphere.elasticjob.dataflow.props.DataflowJobProperties;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.SpringDataflowJob;
 import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.config;
 
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl.ScheduleJobBootstrap;
-import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
+import org.apache.shardingsphere.elasticjob.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.SpringSimpleJob;
 import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/app/CloudAppConfigurationService.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app;
 
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/job/CloudJobConfigurationListener.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job;
 
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.recipes.cache.TreeCache;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
 import org.apache.curator.framework.recipes.cache.TreeCacheListener;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Collections;
 import java.util.concurrent.Executors;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/job/CloudJobConfigurationService.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job;
 
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironment.java
Patch:
@@ -23,7 +23,7 @@
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.dbcp.BasicDataSource;
-import org.apache.shardingsphere.elasticjob.cloud.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 
 import javax.sql.DataSource;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/ha/FrameworkIDService.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.Strings;
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Optional;
 

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/FacadeService.java
Patch:
@@ -20,7 +20,6 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
@@ -33,6 +32,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.failover.FailoverTaskInfo;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.codehaus.jettison.json.JSONException;
 
 import java.util.ArrayList;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/MesosStateService.java
Patch:
@@ -26,8 +26,8 @@
 import lombok.Builder;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.ha.FrameworkIDService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.codehaus.jettison.json.JSONArray;
 import org.codehaus.jettison.json.JSONException;
 import org.codehaus.jettison.json.JSONObject;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/SchedulerService.java
Patch:
@@ -24,14 +24,14 @@
 import org.apache.mesos.MesosSchedulerDriver;
 import org.apache.mesos.Protos;
 import org.apache.mesos.SchedulerDriver;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationListener;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.MesosConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.ha.FrameworkIDService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.restful.RestfulService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.statistics.StatisticManager;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.JobEventBus;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/ProducerManager.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.exception.JobConfigurationException;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
@@ -36,6 +35,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.job.DisableJobService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Optional;
 

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/CloudAppRestfulApi.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.mesos.Protos.SlaveID;
 import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
@@ -31,6 +30,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.app.DisableAppService;
 import org.apache.shardingsphere.elasticjob.cloud.util.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.codehaus.jettison.json.JSONException;
 
 import javax.ws.rs.Consumes;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/CloudJobRestfulApi.java
Patch:
@@ -22,7 +22,6 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.cloud.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
@@ -41,6 +40,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.task.TaskResultStatistics;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.task.TaskRunningStatistics;
 import org.apache.shardingsphere.elasticjob.cloud.util.json.GsonFactory;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/CloudOperationRestfulApi.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.restful;
 
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.MesosStateService;
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.ReconcileService;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import com.google.gson.JsonArray;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.MesosStateService;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.ReconcileService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.codehaus.jettison.json.JSONException;
 
 import javax.ws.rs.GET;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/RestfulService.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.restful;
 
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.restful.RestfulServer;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.RestfulServerConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.ReconcileService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;
 import org.apache.shardingsphere.elasticjob.cloud.security.WwwAuthFilter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Restful server.

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/app/DisableAppService.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.app;
 
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Disable app service.

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/job/DisableJobService.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.job;
 
-import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Disable job service.

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/failover/FailoverService.java
Patch:
@@ -24,12 +24,12 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/ready/ReadyService.java
Patch:
@@ -20,13 +20,13 @@
 import com.google.common.base.Strings;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/running/RunningService.java
Patch:
@@ -22,10 +22,10 @@
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext.MetaInfo;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Collection;
 import java.util.HashMap;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/statistics/StatisticManager.java
Patch:
@@ -21,7 +21,6 @@
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.cloud.api.JobType;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
@@ -37,6 +36,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.job.JobTypeStatistics;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.task.TaskResultStatistics;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.task.TaskRunningStatistics;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 
 import javax.sql.DataSource;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/statistics/job/JobRunningStatisticJob.java
Patch:
@@ -21,13 +21,13 @@
 import lombok.Setter;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.statistics.util.StatisticTimeUtils;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.StatisticInterval;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.rdb.StatisticRdbRepository;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.job.JobRunningStatistics;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.task.TaskRunningStatistics;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.quartz.CronScheduleBuilder;
 import org.quartz.JobBuilder;
 import org.quartz.JobDetail;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/app/CloudAppConfigurationServiceTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app;
 
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudAppConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudAppJsonConstants;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/config/job/CloudJobConfigurationServiceTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job;
 
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJsonConstants;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironmentTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.env;
 
 import org.apache.commons.dbcp.BasicDataSource;
-import org.apache.shardingsphere.elasticjob.cloud.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.junit.Test;
 import org.unitils.util.ReflectionUtils;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/fixture/EmbedTestingServer.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture;
 
-import org.apache.shardingsphere.elasticjob.cloud.reg.exception.RegExceptionHandler;
 import com.google.common.base.Joiner;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.curator.test.TestingServer;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegExceptionHandler;
 
 import java.io.File;
 import java.io.IOException;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/ha/FrameworkIDServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.ha;
 
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/FacadeServiceTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.common.collect.Sets;
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
@@ -35,6 +34,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.failover.FailoverService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/LaunchingTasksTest.java
Patch:
@@ -19,13 +19,13 @@
 
 import com.netflix.fenzo.TaskRequest;
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.failover.FailoverService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/MesosStateServiceTest.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos;
 
 import com.google.gson.JsonArray;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.ha.HANode;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.restful.AbstractCloudRestfulApiTest;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/SchedulerEngineTest.java
Patch:
@@ -22,13 +22,13 @@
 import org.apache.mesos.Protos;
 import org.apache.mesos.SchedulerDriver;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.TaskNode;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.ha.FrameworkIDService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.fixture.OfferBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.statistics.StatisticManager;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.JobEventBus;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/producer/ProducerManagerTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
 import org.apache.shardingsphere.elasticjob.cloud.exception.AppConfigurationException;
 import org.apache.shardingsphere.elasticjob.cloud.exception.JobConfigurationException;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.app.CloudAppConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfiguration;
@@ -34,6 +33,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.job.DisableJobService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.ready.ReadyService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/restful/AbstractCloudRestfulApiTest.java
Patch:
@@ -20,7 +20,6 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import org.apache.mesos.SchedulerDriver;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.restful.RestfulServer;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.RestfulServerConfiguration;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.FacadeService;
@@ -30,6 +29,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.mesos.fixture.slave.MesosSlaveServerMock;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.producer.ProducerManager;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.restful.search.JobEventRdbSearch;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/app/DisableAppServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.app;
 
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/disable/job/DisableJobServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.state.disable.job;
 
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/failover/FailoverServiceTest.java
Patch:
@@ -20,13 +20,13 @@
 import com.google.common.collect.Lists;
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.TaskNode;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/ready/ReadyServiceTest.java
Patch:
@@ -19,13 +19,13 @@
 
 import com.google.common.collect.Lists;
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.context.JobContext;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.env.BootstrapEnvironment;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.state.running.RunningService;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/state/running/RunningServiceTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import org.apache.shardingsphere.elasticjob.cloud.context.ExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.context.TaskContext;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJsonConstants;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.TaskNode;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/statistics/StatisticManagerTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.cloud.scheduler.statistics;
 
 import com.google.common.collect.Lists;
-import org.apache.shardingsphere.elasticjob.cloud.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobConfigurationService;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.config.job.CloudJobExecutionType;
 import org.apache.shardingsphere.elasticjob.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
@@ -28,6 +27,7 @@
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.job.JobRunningStatistics;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.task.TaskResultStatistics;
 import org.apache.shardingsphere.elasticjob.cloud.statistics.type.task.TaskRunningStatistics;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-cloud/elasticjob-cloud-scheduler/src/test/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/statistics/job/TaskResultStatisticJobTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
-import org.quartz.SchedulerException;
 import org.quartz.Trigger;
 
 import java.util.Optional;
@@ -82,7 +81,7 @@ public void assertGetDataMap() {
     }
     
     @Test
-    public void assertExecuteWhenRepositoryIsEmpty() throws SchedulerException {
+    public void assertExecuteWhenRepositoryIsEmpty() {
         Optional<TaskResultStatistics> latestOne = Optional.empty();
         for (StatisticInterval each : StatisticInterval.values()) {
             taskResultStatisticJob.setStatisticInterval(each);
@@ -95,7 +94,7 @@ public void assertExecuteWhenRepositoryIsEmpty() throws SchedulerException {
     }
     
     @Test
-    public void assertExecute() throws SchedulerException {
+    public void assertExecute() {
         for (StatisticInterval each : StatisticInterval.values()) {
             taskResultStatisticJob.setStatisticInterval(each);
             Optional<TaskResultStatistics> latestOne = Optional.of(new TaskResultStatistics(0, 0, each, StatisticTimeUtils.getStatisticTime(each, -3)));

File: elasticjob-common/elasticjob-registry-center/src/main/java/org/apache/shardingsphere/elasticjob/reg/base/CoordinatorRegistryCenter.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.base;
+package org.apache.shardingsphere.elasticjob.reg.base;
 
 import java.util.List;
 

File: elasticjob-common/elasticjob-registry-center/src/main/java/org/apache/shardingsphere/elasticjob/reg/base/ElectionCandidate.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.base;
+package org.apache.shardingsphere.elasticjob.reg.base;
 
 /**
  * Election candidate.

File: elasticjob-common/elasticjob-registry-center/src/main/java/org/apache/shardingsphere/elasticjob/reg/base/RegistryCenter.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.base;
+package org.apache.shardingsphere.elasticjob.reg.base;
 
 /**
  * Registry center.

File: elasticjob-common/elasticjob-registry-center/src/main/java/org/apache/shardingsphere/elasticjob/reg/exception/RegException.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.exception;
+package org.apache.shardingsphere.elasticjob.reg.exception;
 
 /**
  * Registry center exception.

File: elasticjob-common/elasticjob-registry-center/src/main/java/org/apache/shardingsphere/elasticjob/reg/exception/RegExceptionHandler.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.exception;
+package org.apache.shardingsphere.elasticjob.reg.exception;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elasticjob-common/elasticjob-registry-center/src/main/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperConfiguration.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
+package org.apache.shardingsphere.elasticjob.reg.zookeeper;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;

File: elasticjob-common/elasticjob-registry-center/src/test/java/org/apache/shardingsphere/elasticjob/reg/exception/RegExceptionHandlerTest.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.exception;
+package org.apache.shardingsphere.elasticjob.reg.exception;
 
 import org.apache.zookeeper.KeeperException.ConnectionLossException;
 import org.apache.zookeeper.KeeperException.NoNodeException;

File: elasticjob-common/elasticjob-registry-center/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperConfigurationTest.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
+package org.apache.shardingsphere.elasticjob.reg.zookeeper;
 
 import org.junit.Test;
 

File: elasticjob-common/elasticjob-registry-center/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperRegistryCenterInitFailureTest.java
Patch:
@@ -7,17 +7,17 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
+package org.apache.shardingsphere.elasticjob.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegException;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegException;
 import org.junit.Test;
 
 public final class ZookeeperRegistryCenterInitFailureTest {

File: elasticjob-common/elasticjob-registry-center/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/ZookeeperRegistryCenterMiscellaneousTest.java
Patch:
@@ -7,19 +7,19 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.cloud.reg.zookeeper;
+package org.apache.shardingsphere.elasticjob.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.cloud.fixture.EmbedTestingServer;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.recipes.cache.TreeCache;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.fixture.EmbedTestingServer;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: elasticjob-common/elasticjob-registry-center/src/test/java/org/apache/shardingsphere/elasticjob/reg/zookeeper/util/ZookeeperRegistryCenterTestUtil.java
Patch:
@@ -7,19 +7,19 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util;
+package org.apache.shardingsphere.elasticjob.reg.zookeeper.util;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public class ZookeeperRegistryCenterTestUtil {

File: elasticjob-lite/elasticjob-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/controller/RegistryCenterController.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.console.service.RegistryCenterConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.console.util.SessionRegistryCenterConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.reg.RegistryCenterFactory;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegException;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegException;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;

File: elasticjob-lite/elasticjob-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/filter/GlobalConfigurationFilter.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.shardingsphere.elasticjob.lite.console.util.SessionEventTraceDataSourceConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.console.util.SessionRegistryCenterConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.reg.RegistryCenterFactory;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegException;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegException;
 
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/bootstrap/impl/OneOffJobBootstrap.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduler;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/bootstrap/impl/ScheduleJobBootstrap.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduler;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/ElasticJobExecutor.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shardingsphere.elasticjob.lite.handler.error.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.lite.handler.threadpool.JobExecutorServiceHandlerFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.LiteJobFacade;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent.ExecutionSource;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/ConfigurationService.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.env.TimeService;
 import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/RescheduleListenerManager.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 
 /**

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/election/ElectionListenerManager.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerStatus;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Objects;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/election/LeaderService.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.LeaderExecutionCallback;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.concurrent.BlockUtils;
 
 /**

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverListenerManager.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 
 import java.util.List;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverService.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.LeaderExecutionCallback;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeListenerManager.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
 
 import java.util.List;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeService.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Collection;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/InstanceService.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.LinkedList;
 import java.util.List;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/ShutdownListenerManager.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.SchedulerFacade;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Job instance shutdown listener manager.

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/TriggerListenerManager.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
 
 /**

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/AbstractListenerManager.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.curator.framework.recipes.cache.TreeCacheListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Listener manager.

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/ListenerManager.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.MonitorExecutionListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.List;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/RegistryCenterConnectionStateListener.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Registry center connection state listener.

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileService.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.concurrent.TimeUnit;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobRegistry.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduler.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.guarantee.GuaranteeService;
 import org.apache.shardingsphere.elasticjob.lite.internal.setup.SetUpFacade;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.quartz.JobBuilder;
 import org.quartz.JobDetail;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobShutdownHookPlugin.java
Patch:
@@ -22,7 +22,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.instance.InstanceService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.quartz.Scheduler;
 import org.quartz.SchedulerException;
 import org.quartz.spi.ClassLoadHelper;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJob.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.quartz.Job;
 import org.quartz.JobExecutionContext;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionContextService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.JobEventBus;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobExecutionEvent;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/SchedulerFacade.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.reconcile.ReconcileService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Scheduler facade.

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/server/ServerService.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.instance.InstanceNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.concurrent.BlockUtils;
 
 import java.util.List;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/SetUpFacade.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.reconcile.ReconcileService;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.List;
 

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionContextService.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.config.ShardingItemParameters;
 
 import java.util.ArrayList;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionService.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/MonitorExecutionListenerManager.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 
 /**

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingListenerManager.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerNode;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 
 /**

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingService.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.TransactionExecutionCallback;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.concurrent.BlockUtils;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/snapshot/SnapshotService.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.Joiner;
 import org.apache.shardingsphere.elasticjob.lite.internal.util.SensitiveInfoUtils;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.curator.framework.recipes.cache.ChildData;
 import org.apache.curator.framework.recipes.cache.TreeCache;

File: elasticjob-lite/elasticjob-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/storage/JobNodeStorage.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.curator.framework.recipes.leader.LeaderLatch;
 import org.apache.curator.framework.state.ConnectionStateListener;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegExceptionHandler;
 
 import java.util.List;
 

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/ElasticJobExecutorTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.fixture.executor.ClassedFooJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.FooJob;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.event.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/EmbedTestingServer.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.curator.test.TestingServer;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegExceptionHandler;
 
 import java.io.File;
 import java.io.IOException;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/BaseIntegrateTest.java
Patch:
@@ -30,9 +30,9 @@
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.After;
 import org.junit.Before;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/config/RescheduleListenerManagerTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/election/ElectionListenerManagerTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerStatus;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/election/LeaderServiceTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/ShutdownListenerManagerTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.SchedulerFacade;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.After;
 import org.junit.Before;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/TriggerListenerManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/RegistryCenterConnectionStateListenerTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobRegistryTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Test;
 

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.reconcile.ReconcileService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/server/ServerServiceTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingListenerManagerTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingServiceTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerService;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.TransactionExecutionCallback;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/snapshot/BaseSnapshotServiceTest.java
Patch:
@@ -24,9 +24,9 @@
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.After;
 import org.junit.Before;

File: elasticjob-lite/elasticjob-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/storage/JobNodeStorageTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.curator.framework.recipes.cache.TreeCache;
 import org.apache.curator.framework.recipes.cache.TreeCacheListener;
 import org.apache.curator.framework.state.ConnectionStateListener;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/operate/JobOperateAPIImpl.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.server.ServerStatus;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobOperateAPI;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.List;
 

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/operate/ShardingOperateAPIImpl.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingOperateAPI;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 /**
  * Sharding operate API implementation class.

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/reg/RegistryCenterFactory.java
Patch:
@@ -24,9 +24,9 @@
 import com.google.common.hash.Hashing;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 
 import java.util.concurrent.ConcurrentHashMap;
 

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobConfigurationAPIImpl.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobConfigurationAPI;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 
 /**

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.JobBriefInfo;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 
 import java.util.ArrayList;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ServerStatisticsAPIImpl.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ServerStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ServerBriefInfo;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ShardingStatisticsAPIImpl.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ShardingInfo;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/AbstractEmbedZookeeperBaseTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle;
 
 import com.google.common.base.Joiner;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegExceptionHandler;
 import org.apache.curator.test.TestingServer;
 import org.junit.BeforeClass;
 

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/operate/JobOperateAPIImplTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.operate;
 
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobOperateAPI;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/operate/ShardingOperateAPIImplTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.operate;
 
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingOperateAPI;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/reg/RegistryCenterFactoryTest.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.reg;
 
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.AbstractEmbedZookeeperBaseTest;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.junit.Test;
 
 import java.lang.reflect.Method;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobConfigurationAPIImplTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobConfigurationAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture.LifecycleYamlConstants;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.script.props.ScriptJobProperties;
 import org.junit.Before;
 import org.junit.Test;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/JobStatisticsAPIImplTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.JobBriefInfo;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture.LifecycleYamlConstants;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ServerStatisticsAPIImplTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ServerStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ServerBriefInfo;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-lite/elasticjob-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ShardingStatisticsAPIImplTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ShardingInfo;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elasticjob-lite/elasticjob-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/reg/parser/ZookeeperBeanDefinitionParser.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.shardingsphere.elasticjob.lite.spring.reg.parser;
 
 import com.google.common.base.Strings;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.spring.reg.tag.ZookeeperBeanDefinitionTag;
 import org.springframework.beans.factory.support.AbstractBeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;

File: elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/job/AbstractJobSpringIntegrateTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.spring.fixture.job.DataflowElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.fixture.job.FooSimpleElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.test.AbstractZookeeperJUnit4SpringContextTests;

File: elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/job/JobSpringNamespaceWithRefTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.spring.job;
 
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.spring.fixture.job.ref.RefFooSimpleElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.test.AbstractZookeeperJUnit4SpringContextTests;
 import org.apache.shardingsphere.elasticjob.lite.util.concurrent.BlockUtils;

File: elasticjob-lite/elasticjob-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/test/EmbedZookeeperTestExecutionListener.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.spring.test;
 
 import org.apache.curator.test.TestingServer;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
+import org.apache.shardingsphere.elasticjob.reg.exception.RegExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.util.concurrent.BlockUtils;
 import org.springframework.test.context.TestContext;
 import org.springframework.test.context.support.AbstractTestExecutionListener;

File: examples/elasticjob-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.shardingsphere.elasticjob.lite.dataflow.props.DataflowJobProperties;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.JavaDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaSimpleJob;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.script.props.ScriptJobProperties;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.dataflow.props.DataflowJobProperties;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.SpringDataflowJob;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/RegistryCenterConfig.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shardingsphere.elasticjob.lite.example.config;
 
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.context.annotation.Bean;

File: examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.SpringSimpleJob;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
 import org.apache.shardingsphere.elasticjob.tracing.api.TracingConfiguration;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/BaseIntegrateTest.java
Patch:
@@ -118,7 +118,7 @@ public void afterJobExecuted(final ShardingContexts shardingContexts) {
     private final class TestDistributeOnceElasticJobListener extends AbstractDistributeOnceElasticJobListener {
     
         private TestDistributeOnceElasticJobListener() {
-            super(-1L, -1L);
+            super(100L, 100L);
         }
         
         @Override

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -35,8 +35,8 @@ public class DataflowJobConfig {
     
     @Resource
     private ZookeeperRegistryCenter regCenter;
-    
-    @Resource
+
+    @Resource(name = "tracingConfiguration")
     private TracingConfiguration tracingConfig;
     
     @Bean

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -35,7 +35,7 @@ public class SimpleJobConfig {
     @Resource
     private ZookeeperRegistryCenter regCenter;
     
-    @Resource
+    @Resource(name = "tracingConfiguration")
     private TracingConfiguration tracingConfig;
     
     @Bean

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/storage/RDBStorageSQLMapper.java
Patch:
@@ -74,7 +74,7 @@ private Properties loadProps(final String sqlPropertiesFileName) {
     }
     
     private InputStream getPropertiesInputStream(final String sqlPropertiesFileName) {
-        InputStream sqlPropertiesFile = RDBJobEventStorage.class.getClassLoader().getResourceAsStream(String.format("META-INF/sql/%s.properties", sqlPropertiesFileName));
+        InputStream sqlPropertiesFile = RDBJobEventStorage.class.getClassLoader().getResourceAsStream(String.format("META-INF/sql/%s", sqlPropertiesFileName));
         return null == sqlPropertiesFile ? RDBJobEventStorage.class.getClassLoader().getResourceAsStream("META-INF/sql/sql92.properties") : sqlPropertiesFile;
     }
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/ElasticJobExecutor.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtils;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutorFactory;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.JobItemExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.JobItemExecutorFactory;
 import org.apache.shardingsphere.elasticjob.lite.handler.error.JobErrorHandler;
 import org.apache.shardingsphere.elasticjob.lite.handler.error.JobErrorHandlerFactory;
 import org.apache.shardingsphere.elasticjob.lite.handler.threadpool.JobExecutorServiceHandlerFactory;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/item/JobItemExecutor.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.item;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.job.ShardingContext;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/item/JobItemExecutorFactory.java
Patch:
@@ -15,12 +15,14 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.item;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.ClassedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.TypedJobItemExecutor;
 
 import java.util.Map;
 import java.util.Map.Entry;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/item/impl/ClassedJobItemExecutor.java
Patch:
@@ -15,9 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.item.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.JobItemExecutor;
 
 /**
  * Classed job item executor.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/item/impl/TypedJobItemExecutor.java
Patch:
@@ -15,9 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.item.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.JobItemExecutor;
 import org.apache.shardingsphere.elasticjob.lite.spi.TypedSPI;
 
 /**

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/item/JobItemExecutorFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.item;
 
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.fixture.executor.ClassedFooJobExecutor;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/executor/ClassedFooJobExecutor.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.job.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.ClassedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.ClassedJobItemExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.FooJob;
 
 public final class ClassedFooJobExecutor implements ClassedJobItemExecutor<FooJob> {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/executor/TypedFooJobExecutor.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.job.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.TypedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.TypedJobItemExecutor;
 
 public final class TypedFooJobExecutor implements TypedJobItemExecutor {
     

File: elastic-job-lite-executor/elastic-job-lite-dataflow-executor/src/main/java/org/apache/shardingsphere/elasticjob/lite/dataflow/executor/DataflowJobExecutor.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.dataflow.job.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.ClassedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.ClassedJobItemExecutor;
 
 import java.util.List;
 

File: elastic-job-lite-executor/elastic-job-lite-script-executor/src/main/java/org/apache/shardingsphere/elasticjob/lite/script/executor/ScriptJobExecutor.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.TypedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.TypedJobItemExecutor;
 import org.apache.shardingsphere.elasticjob.lite.util.json.GsonFactory;
 
 import java.io.IOException;

File: elastic-job-lite-executor/elastic-job-lite-simple-executor/src/main/java/org/apache/shardingsphere/elasticjob/lite/simple/executor/SimpleJobExecutor.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.job.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.simple.job.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.ClassedJobItemExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.item.impl.ClassedJobItemExecutor;
 
 /**
  * Simple job executor.

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/OneOffDisabledJobIntegrateTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.oneoff;
+package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/ScheduleDisabledJobIntegrateTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.schedule;
+package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterQueryWithoutCacheTest.java
Patch:
@@ -90,7 +90,7 @@ public void assertGetRegistryCenterTime() {
         long updatedRegCenterTime = zkRegCenter.getRegistryCenterTime("/_systemTime/current");
         assertTrue(regCenterTime < updatedRegCenterTime);
     }
-
+    
     @Test
     public void assertGetWithoutNode() {
         assertNull(zkRegCenter.get("/notExisted"));

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/server/ServerStatus.java
Patch:
@@ -22,5 +22,5 @@
  */
 public enum ServerStatus {
     
-    DISABLED
+    ENABLED, DISABLED
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/BaseIntegrateTest.java
Patch:
@@ -151,7 +151,7 @@ private void assertRegCenterCommonInfo() {
             }
             regCenter.persist("/" + jobName + "/servers/" + JobRegistry.getInstance().getJobInstance(jobName).getIp(), "");
         } else {
-            assertThat(regCenter.get("/" + jobName + "/servers/" + JobRegistry.getInstance().getJobInstance(jobName).getIp()), is(""));
+            assertThat(regCenter.get("/" + jobName + "/servers/" + JobRegistry.getInstance().getJobInstance(jobName).getIp()), is(ServerStatus.ENABLED.name()));
             assertThat(regCenter.get("/" + jobName + "/leader/election/instance"), is(JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId()));
         }
         assertTrue(regCenter.isExisted("/" + jobName + "/instances/" + JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId()));

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/DisabledJobIntegrateTest.java
Patch:
@@ -37,9 +37,7 @@ public void reset() {
     
     @Test
     public final void assertJobRunning() {
+        BlockUtils.waitingShortTime();
         assertRegCenterCommonInfoWithDisabled();
-        while (!FooSimpleJob.isCompleted()) {
-            BlockUtils.waitingShortTime();
-        }
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/fixture/executor/ClassedFooJobExecutor.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type.fixture.executor;
+package org.apache.shardingsphere.elasticjob.lite.executor.fixture.executor;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.job.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.ClassedJobItemExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.fixture.job.FooJob;
+import org.apache.shardingsphere.elasticjob.lite.executor.fixture.job.FooJob;
 
 public final class ClassedFooJobExecutor implements ClassedJobItemExecutor<FooJob> {
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/fixture/executor/TypedFooJobExecutor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type.fixture.executor;
+package org.apache.shardingsphere.elasticjob.lite.executor.fixture.executor;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.job.ShardingContext;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/fixture/job/DetailedFooJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type.fixture.job;
+package org.apache.shardingsphere.elasticjob.lite.executor.fixture.job;
 
 public final class DetailedFooJob implements FooJob {
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/fixture/job/FailedJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type.fixture.job;
+package org.apache.shardingsphere.elasticjob.lite.executor.fixture.job;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/fixture/job/FooJob.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type.fixture.job;
+package org.apache.shardingsphere.elasticjob.lite.executor.fixture.job;
 
 import org.apache.shardingsphere.elasticjob.lite.api.job.ElasticJob;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperElectionService.java
Patch:
@@ -74,7 +74,7 @@ public void stop() {
         try {
             leaderSelector.close();
             // CHECKSTYLE:OFF
-        } catch (final Exception ignored) {
+        } catch (final Exception ignore) {
         }
         // CHECKSTYLE:ON
     }

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -20,8 +20,8 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.job.impl.ScriptJob;
 
 import java.io.Serializable;
 
@@ -89,7 +89,7 @@ public YamlJobConfiguration toYamlJobConfiguration() {
         result.setDescription(description);
         result.getProps().setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.valueOf(streamingProcess).toString());
         if (null != scriptCommandLine) {
-            result.getProps().setProperty(ScriptJob.SCRIPT_KEY, scriptCommandLine);
+            result.getProps().setProperty(ScriptJobExecutor.SCRIPT_KEY, scriptCommandLine);
         }
         return result;
     }

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -22,9 +22,9 @@
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.job.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
-import org.apache.shardingsphere.elasticjob.lite.job.impl.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobSettingsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.JobSettings;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
@@ -47,8 +47,8 @@ public JobSettings getJobSettings(final String jobName) {
         if (jobConfig.getProps().containsKey(DataflowJobExecutor.STREAM_PROCESS_KEY)) {
             result.setStreamingProcess(Boolean.parseBoolean(jobConfig.getProps().get(DataflowJobExecutor.STREAM_PROCESS_KEY).toString()));
         }
-        if (jobConfig.getProps().containsKey(ScriptJob.SCRIPT_KEY)) {
-            result.setScriptCommandLine(jobConfig.getProps().getProperty(ScriptJob.SCRIPT_KEY));
+        if (jobConfig.getProps().containsKey(ScriptJobExecutor.SCRIPT_KEY)) {
+            result.setScriptCommandLine(jobConfig.getProps().getProperty(ScriptJobExecutor.SCRIPT_KEY));
         }
         return result;
     }

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/script/ScriptJobBeanDefinitionParser.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.job.parser.script;
 
-import org.apache.shardingsphere.elasticjob.lite.job.impl.ScriptJob;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.w3c.dom.Element;
 
@@ -31,7 +31,7 @@ public final class ScriptJobBeanDefinitionParser extends AbstractJobBeanDefiniti
     @Override
     protected Properties getProps(final Element element) {
         Properties result = new Properties();
-        result.setProperty(ScriptJob.SCRIPT_KEY, element.getAttribute(ScriptJobBeanDefinitionParserTag.SCRIPT_COMMAND_LINE_ATTRIBUTE));
+        result.setProperty(ScriptJobExecutor.SCRIPT_KEY, element.getAttribute(ScriptJobBeanDefinitionParserTag.SCRIPT_COMMAND_LINE_ATTRIBUTE));
         return result;
     }
 }

File: examples/elastic-job-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.JavaDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
-import org.apache.shardingsphere.elasticjob.lite.job.impl.ScriptJob;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
@@ -96,7 +96,7 @@ private static void setUpDataflowJob(final CoordinatorRegistryCenter regCenter,
     
     private static void setUpScriptJob(final CoordinatorRegistryCenter regCenter, final TracingConfiguration tracingConfig) throws IOException {
         new ScheduleJobBootstrap(regCenter, "SCRIPT", JobConfiguration.newBuilder("scriptElasticJob", 3)
-                .cron("0/5 * * * * ?").setProperty(ScriptJob.SCRIPT_KEY, buildScriptCommandLine()).build(), tracingConfig).schedule();
+                .cron("0/5 * * * * ?").setProperty(ScriptJobExecutor.SCRIPT_KEY, buildScriptCommandLine()).build(), tracingConfig).schedule();
     }
     
     private static String buildScriptCommandLine() throws IOException {

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/dao/search/JobExecutionLogRepository.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.console.dao.search;
 
+import org.apache.shardingsphere.elasticjob.lite.console.domain.JobExecutionLog;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
 

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/dao/search/JobStatusTraceLogRepository.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.console.dao.search;
 
+import org.apache.shardingsphere.elasticjob.lite.console.domain.JobStatusTraceLog;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
 

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/domain/JobExecutionLog.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.console.dao.search;
+package org.apache.shardingsphere.elasticjob.lite.console.domain;
 
 import lombok.Data;
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobExecutionEvent;

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/domain/JobStatusTraceLog.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.console.dao.search;
+package org.apache.shardingsphere.elasticjob.lite.console.domain;
 
 import lombok.Data;
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobStatusTraceEvent;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/bootstrap/JobBootstrap.java
Patch:
@@ -97,7 +97,7 @@ public JobBootstrap(final CoordinatorRegistryCenter regCenter, final String elas
     
     public JobBootstrap(final CoordinatorRegistryCenter regCenter, final String elasticJobType, final JobConfiguration jobConfig, final TracingConfiguration tracingConfig,
                         final ElasticJobListener... elasticJobListeners) {
-        this(regCenter, TypedJobFactory.getJob(elasticJobType, jobConfig.getProps()), jobConfig, tracingConfig, elasticJobListeners);
+        this(regCenter, TypedJobFactory.createJobInstance(elasticJobType, jobConfig.getProps()), jobConfig, tracingConfig, elasticJobListeners);
     }
     
     private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistryCenter regCenter, final List<ElasticJobListener> elasticJobListeners) {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/job/impl/ScriptJobTest.java
Patch:
@@ -31,7 +31,7 @@ public final class ScriptJobTest {
     @Test(expected = JobConfigurationException.class)
     public void assertExecuteWhenCommandLineIsEmpty() {
         ScriptJob scriptJob = new ScriptJob();
-        scriptJob.setProps(new Properties());
+        scriptJob.init(new Properties());
         scriptJob.execute(mock(ShardingContext.class));
     }
     
@@ -40,7 +40,7 @@ public void assertExecuteWhenExecuteFailure() {
         ScriptJob scriptJob = new ScriptJob();
         Properties props = new Properties();
         props.setProperty(ScriptJob.SCRIPT_KEY, "not_exists_file");
-        scriptJob.setProps(props);
+        scriptJob.init(props);
         scriptJob.execute(mock(ShardingContext.class));
     }
     
@@ -49,7 +49,7 @@ public void assertExecuteWhenExecuteSuccess() {
         ScriptJob scriptJob = new ScriptJob();
         Properties props = new Properties();
         props.setProperty(ScriptJob.SCRIPT_KEY, "echo");
-        scriptJob.setProps(props);
+        scriptJob.init(props);
         scriptJob.execute(mock(ShardingContext.class));
     }
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/job/TypedJob.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.shardingsphere.elasticjob.lite.job;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.spi.TypedSPI;
 
 import java.util.Properties;
 
 /**
  * Typed job.
  */
-public interface TypedJob extends SimpleJob, TypedSPI {
+public interface TypedJob extends ElasticJob, TypedSPI {
     
     /**
      * Get props.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/job/impl/ScriptJob.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.commons.exec.CommandLine;
 import org.apache.commons.exec.DefaultExecutor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.job.TypedJob;
@@ -36,7 +37,7 @@
  */
 @Getter
 @Setter
-public final class ScriptJob implements TypedJob {
+public final class ScriptJob implements SimpleJob, TypedJob {
     
     public static final String SCRIPT_KEY = "script.command.line";
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/ElasticJobExecutor.java
Patch:
@@ -79,7 +79,6 @@ public ElasticJobExecutor(final CoordinatorRegistryCenter regCenter,
         itemErrorMessages = new ConcurrentHashMap<>(jobConfig.getShardingTotalCount(), 1);
     }
     
-    @SuppressWarnings("unchecked")
     private static JobItemExecutor getJobItemExecutor(final ElasticJob elasticJob) {
         if (elasticJob instanceof SimpleJob) {
             return new SimpleJobExecutor();

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/election/LeaderNode.java
Patch:
@@ -26,7 +26,7 @@ public final class LeaderNode {
     
     public static final String ROOT = "leader";
     
-    static final String ELECTION_ROOT = ROOT + "/election";
+    private static final String ELECTION_ROOT = ROOT + "/election";
     
     static final String INSTANCE = ELECTION_ROOT + "/instance";
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeNode.java
Patch:
@@ -25,7 +25,7 @@
  */
 public final class GuaranteeNode {
     
-    static final String ROOT = "guarantee";
+    private static final String ROOT = "guarantee";
     
     static final String STARTED_ROOT = ROOT + "/started";
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/DataflowJobExecutorTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
@@ -170,7 +169,7 @@ public void assertExecuteWhenFetchDataIsNotEmptyAndIsNotEligibleForJobRunningFor
     
     private void setUp(final boolean isStreamingProcess, final ShardingContexts shardingContexts) {
         this.shardingContexts = shardingContexts;
-        JobConfiguration jobConfig = JobConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, JobType.DATAFLOW, 3)
+        JobConfiguration jobConfig = JobConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, 3)
                 .cron("0/1 * * * * ?").jobErrorHandlerType("IGNORE").setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.toString(isStreamingProcess)).build();
         when(jobFacade.getShardingContexts()).thenReturn(shardingContexts);
         elasticJobExecutor = new ElasticJobExecutor(regCenter, new TestDataflowJob(jobCaller), jobConfig, Collections.emptyList(), null);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutorTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
@@ -68,7 +67,7 @@ public void setUp() {
     }
     
     private JobConfiguration createJobConfiguration(final String jobExecutorServiceHandlerType, final String jobErrorHandlerType) {
-        return JobConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, JobType.SIMPLE, 3)
+        return JobConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, 3)
                 .cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").jobParameter("param").failover(true).misfire(false)
                 .jobExecutorServiceHandlerType(jobExecutorServiceHandlerType).jobErrorHandlerType(jobErrorHandlerType).description("desc").build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/WrongJobExecutorTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
@@ -58,7 +57,7 @@ public void setUp() {
     }
     
     private JobConfiguration createJobConfiguration() {
-        return JobConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, JobType.SIMPLE, 3)
+        return JobConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, 3)
                 .cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").jobParameter("param").failover(true).misfire(false).jobErrorHandlerType("THROW").description("desc").build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/LiteYamlConstants.java
Patch:
@@ -24,7 +24,6 @@
 public final class LiteYamlConstants {
     
     private static final String JOB_YAML = "jobName: test_job\n"
-            + "jobType: SIMPLE\n"
             + "cron: 0/1 * * * * ?\n"
             + "shardingTotalCount: 3\n"
             + "jobParameter: 'param'\n"

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/util/JobConfigurationUtil.java
Patch:
@@ -19,7 +19,6 @@
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
@@ -31,7 +30,7 @@ public final class JobConfigurationUtil {
      * @return job configuration
      */
     public static JobConfiguration createSimpleJobConfiguration() {
-        return JobConfiguration.newBuilder("test_job", JobType.SIMPLE, 3).cron("0/1 * * * * ?").build();
+        return JobConfiguration.newBuilder("test_job", 3).cron("0/1 * * * * ?").build();
     }
     
     /**
@@ -41,6 +40,6 @@ public static JobConfiguration createSimpleJobConfiguration() {
      * @return job configuration
      */
     public static JobConfiguration createSimpleJobConfiguration(final boolean overwrite) {
-        return JobConfiguration.newBuilder("test_job", JobType.SIMPLE, 3).cron("0/1 * * * * ?").overwrite(overwrite).build();
+        return JobConfiguration.newBuilder("test_job", 3).cron("0/1 * * * * ?").overwrite(overwrite).build();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/oneoff/OneOffDisabledJobIntegrateTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.oneoff;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;
 
@@ -29,6 +28,6 @@ public OneOffDisabledJobIntegrateTest() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).shardingItemParameters("0=A,1=B,2=C").disabled(true).overwrite(true).build();
+        return JobConfiguration.newBuilder(jobName, 3).shardingItemParameters("0=A,1=B,2=C").disabled(true).overwrite(true).build();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/schedule/ScheduleDisabledJobIntegrateTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;
 
@@ -29,6 +28,6 @@ public ScheduleDisabledJobIntegrateTest() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").disabled(true).overwrite(true).build();
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").disabled(true).overwrite(true).build();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).shardingItemParameters("0=A,1=B,2=C").misfire(false).overwrite(true)
+        return JobConfiguration.newBuilder(jobName, 3).shardingItemParameters("0=A,1=B,2=C").misfire(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.FALSE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
+        return JobConfiguration.newBuilder(jobName, 3)
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
+        return JobConfiguration.newBuilder(jobName, 3)
                 .shardingItemParameters("0=A,1=B,2=C").jobErrorHandlerType("IGNORE").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
+        return JobConfiguration.newBuilder(jobName, 3)
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
+        return JobConfiguration.newBuilder(jobName, 3)
                 .shardingItemParameters("0=A,1=B,2=C").monitorExecution(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
+        return JobConfiguration.newBuilder(jobName, 3)
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/script/ScriptElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.script;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
@@ -37,7 +36,7 @@ public ScriptElasticJobTest() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.SCRIPT, 3).shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(ScriptJob.SCRIPT_KEY, "echo").build();
+        return JobConfiguration.newBuilder(jobName, 3).shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(ScriptJob.SCRIPT_KEY, "echo").build();
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/simple/SimpleElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.simple;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;
@@ -42,7 +41,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).shardingItemParameters("0=A,1=B,2=C").overwrite(true).build();
+        return JobConfiguration.newBuilder(jobName, 3).shardingItemParameters("0=A,1=B,2=C").overwrite(true).build();
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").misfire(false).overwrite(true)
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").misfire(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.FALSE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").jobErrorHandlerType("IGNORE").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").monitorExecution(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -43,7 +42,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/script/ScriptElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.script;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
@@ -37,7 +36,7 @@ public ScriptElasticJobTest() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.SCRIPT, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(ScriptJob.SCRIPT_KEY, "echo").build();
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(ScriptJob.SCRIPT_KEY, "echo").build();
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/simple/SimpleElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.simple;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;
@@ -42,7 +41,7 @@ public void reset() {
     
     @Override
     protected JobConfiguration getJobConfiguration(final String jobName) {
-        return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").overwrite(true).build();
+        return JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").overwrite(true).build();
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/monitor/BaseMonitorServiceTest.java
Patch:
@@ -20,7 +20,6 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
@@ -50,7 +49,7 @@ public abstract class BaseMonitorServiceTest {
     private final String jobName = System.nanoTime() + "_test_job";
     
     public BaseMonitorServiceTest(final ElasticJob elasticJob) {
-        bootstrap = new ScheduleJobBootstrap(regCenter, elasticJob, JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).cron("0/1 * * * * ?").overwrite(true).build());
+        bootstrap = new ScheduleJobBootstrap(regCenter, elasticJob, JobConfiguration.newBuilder(jobName, 3).cron("0/1 * * * * ?").overwrite(true).build());
     }
     
     @BeforeClass

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileServiceTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.reconcile;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
@@ -60,7 +59,7 @@ public void setup() {
     
     @Test
     public void assertReconcile() {
-        when(configService.load(true)).thenReturn(JobConfiguration.newBuilder("test_job", JobType.SIMPLE, 3).cron("0/1 * * * * ?").reconcileIntervalMinutes(1).build());
+        when(configService.load(true)).thenReturn(JobConfiguration.newBuilder("test_job", 3).cron("0/1 * * * * ?").reconcileIntervalMinutes(1).build());
         when(shardingService.isNeedSharding()).thenReturn(false);
         when(shardingService.hasShardingInfoInOfflineServers()).thenReturn(true);
         when(leaderService.isLeaderUntilBlock()).thenReturn(true);

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/fixture/LifecycleYamlConstants.java
Patch:
@@ -24,7 +24,6 @@
 public final class LifecycleYamlConstants {
     
     private static final String SIMPLE_JOB_YAML = "jobName: %s\n"
-            + "jobType: SIMPLE\n"
             + "cron: 0/1 * * * * ?\n"
             + "shardingTotalCount: 3\n"
             + "jobParameter: param\n"
@@ -43,7 +42,6 @@ public final class LifecycleYamlConstants {
             + "failover: false\n"
             + "jobName: test_job\n"
             + "jobParameter: param\n"
-            + "jobType: DATAFLOW\n"
             + "maxTimeDiffSeconds: -1\n"
             + "misfire: true\n"
             + "monitorExecution: true\n"
@@ -54,7 +52,6 @@ public final class LifecycleYamlConstants {
             + "shardingTotalCount: 3\n";
     
     private static final String SCRIPT_JOB_YAML = "jobName: test_job\n"
-            + "jobType: SCRIPT\n"
             + "cron: 0/1 * * * * ?\n"
             + "shardingTotalCount: 3\n"
             + "jobParameter: param\n"

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.example.config;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
@@ -53,7 +52,7 @@ public ScheduleJobBootstrap dataflowJobScheduler(final DataflowJob dataflowJob,
     }
     
     private JobConfiguration getJobConfiguration(final Class<? extends DataflowJob> jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) {
-        return JobConfiguration.newBuilder(jobClass.getName(), JobType.DATAFLOW, shardingTotalCount)
+        return JobConfiguration.newBuilder(jobClass.getName(), shardingTotalCount)
                 .cron(cron).shardingItemParameters(shardingItemParameters).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).overwrite(true).build();
     }
 }

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.example.config;
 
-import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
@@ -51,6 +50,6 @@ public ScheduleJobBootstrap simpleJobScheduler(final SimpleJob simpleJob, @Value
     }
     
     private JobConfiguration getJobConfiguration(final Class<? extends SimpleJob> jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) {
-        return JobConfiguration.newBuilder(jobClass.getName(), JobType.SIMPLE, shardingTotalCount).cron(cron).shardingItemParameters(shardingItemParameters).overwrite(true).build();
+        return JobConfiguration.newBuilder(jobClass.getName(), shardingTotalCount).cron(cron).shardingItemParameters(shardingItemParameters).overwrite(true).build();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ElasticJobVerify.java
Patch:
@@ -30,7 +30,7 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 final class ElasticJobVerify {
     
-    public static void prepareForIsNotMisfire(final JobFacade jobFacade, final ShardingContexts shardingContexts) {
+    static void prepareForIsNotMisfire(final JobFacade jobFacade, final ShardingContexts shardingContexts) {
         when(jobFacade.getShardingContexts()).thenReturn(shardingContexts);
         when(jobFacade.misfireIfRunning(shardingContexts.getShardingItemParameters().keySet())).thenReturn(false);
         when(jobFacade.isExecuteMisfired(shardingContexts.getShardingItemParameters().keySet())).thenReturn(false);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/BaseIntegrateTest.java
Patch:
@@ -66,12 +66,12 @@ public abstract class BaseIntegrateTest {
     private final String jobName = System.nanoTime() + "_test_job";
     
     protected BaseIntegrateTest(final TestType type, final ElasticJob elasticJob) {
-        jobConfiguration = getJobConfiguration(elasticJob, jobName);
+        jobConfiguration = getJobConfiguration(jobName);
         bootstrap = createJobBootstrap(type, elasticJob);
         leaderService = new LeaderService(regCenter, jobName);
     }
     
-    protected abstract JobConfiguration getJobConfiguration(ElasticJob elasticJob, String jobName);
+    protected abstract JobConfiguration getJobConfiguration(String jobName);
     
     private JobBootstrap createJobBootstrap(final TestType type, final ElasticJob elasticJob) {
         switch (type) {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/oneoff/OneOffDisabledJobIntegrateTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.oneoff;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;
@@ -29,7 +28,7 @@ public OneOffDisabledJobIntegrateTest() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).shardingItemParameters("0=A,1=B,2=C").disabled(true).overwrite(true).build();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/schedule/ScheduleDisabledJobIntegrateTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;
@@ -29,7 +28,7 @@ public ScheduleDisabledJobIntegrateTest() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").disabled(true).overwrite(true).build();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).shardingItemParameters("0=A,1=B,2=C").misfire(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.FALSE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
                 .shardingItemParameters("0=A,1=B,2=C").jobErrorHandlerType("IGNORE").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
                 .shardingItemParameters("0=A,1=B,2=C").monitorExecution(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3)
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/simple/SimpleElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.simple;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -42,7 +41,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).shardingItemParameters("0=A,1=B,2=C").overwrite(true).build();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").misfire(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.FALSE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").jobErrorHandlerType("IGNORE").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").monitorExecution(false).overwrite(true)
                 .setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
@@ -43,7 +42,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.DATAFLOW, 3).cron("0/1 * * * * ?")
                 .shardingItemParameters("0=A,1=B,2=C").overwrite(true).setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString()).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/simple/SimpleElasticJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.simple;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
@@ -42,7 +41,7 @@ public void reset() {
     }
     
     @Override
-    protected JobConfiguration getJobConfiguration(final ElasticJob elasticJob, final String jobName) {
+    protected JobConfiguration getJobConfiguration(final String jobName) {
         return JobConfiguration.newBuilder(jobName, JobType.SIMPLE, 3).cron("0/1 * * * * ?").shardingItemParameters("0=A,1=B,2=C").overwrite(true).build();
     }
     

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -21,8 +21,8 @@
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.job.impl.ScriptJob;
 
 import java.io.Serializable;
 
@@ -93,7 +93,7 @@ public YamlJobConfiguration toYamlJobConfiguration() {
         result.setDescription(description);
         result.getProps().setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.valueOf(streamingProcess).toString());
         if (null != scriptCommandLine) {
-            result.getProps().setProperty(ScriptJobExecutor.SCRIPT_KEY, scriptCommandLine);
+            result.getProps().setProperty(ScriptJob.SCRIPT_KEY, scriptCommandLine);
         }
         return result;
     }

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
+import org.apache.shardingsphere.elasticjob.lite.job.impl.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobSettingsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.JobSettings;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
@@ -78,7 +78,7 @@ private void buildDataflowJobSettings(final JobSettings jobSettings, final JobCo
     }
     
     private void buildScriptJobSettings(final JobSettings jobSettings, final JobConfiguration config) {
-        jobSettings.setScriptCommandLine(config.getProps().getProperty(ScriptJobExecutor.SCRIPT_KEY));
+        jobSettings.setScriptCommandLine(config.getProps().getProperty(ScriptJob.SCRIPT_KEY));
     }
     
     @Override

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/script/ScriptJobBeanDefinitionParser.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.spring.job.parser.script;
 
 import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.job.impl.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.w3c.dom.Element;
 
@@ -32,7 +32,7 @@ public final class ScriptJobBeanDefinitionParser extends AbstractJobBeanDefiniti
     @Override
     protected Properties getProps(final Element element) {
         Properties result = new Properties();
-        result.setProperty(ScriptJobExecutor.SCRIPT_KEY, element.getAttribute(ScriptJobBeanDefinitionParserTag.SCRIPT_COMMAND_LINE_ATTRIBUTE));
+        result.setProperty(ScriptJob.SCRIPT_KEY, element.getAttribute(ScriptJobBeanDefinitionParserTag.SCRIPT_COMMAND_LINE_ATTRIBUTE));
         return result;
     }
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/bootstrap/JobBootstrap.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.AbstractDistributeOnceElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
-import org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.script.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/type/JobType.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.api;
+package org.apache.shardingsphere.elasticjob.lite.api.type;
 
 /**
  * Job type.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/type/dataflow/DataflowJob.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.api.dataflow;
+package org.apache.shardingsphere.elasticjob.lite.api.type.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/type/script/ScriptJob.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.api.script;
+package org.apache.shardingsphere.elasticjob.lite.api.type.script;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/type/simple/SimpleJob.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.api.simple;
+package org.apache.shardingsphere.elasticjob.lite.api.type.simple;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/config/JobConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 
 import java.util.Properties;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/ElasticJobExecutor.java
Patch:
@@ -20,9 +20,9 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtils;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/DataflowJobExecutor.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ScriptJobExecutor.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.commons.exec.CommandLine;
 import org.apache.commons.exec.DefaultExecutor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.script.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutor.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/yaml/YamlJobConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 
 import java.util.Properties;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.Strings;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.context.TaskContext;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/config/JobConfigurationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.config;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/DataflowJobExecutorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ScriptJobExecutorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/WrongJobExecutorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/TestDataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.fixture;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 
 import java.util.List;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/TestSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.fixture;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 
 public class TestSimpleJob implements SimpleJob {
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/TestDataflowJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 
 import java.util.List;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/TestSimpleJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 
 @RequiredArgsConstructor
 public final class TestSimpleJob implements SimpleJob {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/TestWrongJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 
 @RequiredArgsConstructor
 public final class TestWrongJob implements SimpleJob {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/util/JobConfigurationUtil.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 
 @NoArgsConstructor(access = AccessLevel.PRIVATE)

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/oneoff/OneOffDisabledJobIntegrateTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.oneoff;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/disable/schedule/ScheduleDisabledJobIntegrateTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.disable.schedule;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.DisabledJobIntegrateTest;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/script/ScriptElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.script;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.util.ScriptElasticJobUtil;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/oneoff/simple/SimpleElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.oneoff.simple;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/script/ScriptElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.script;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.util.ScriptElasticJobUtil;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/assertion/enable/schedule/simple/SimpleElasticJobTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.assertion.enable.schedule.simple;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.integrate.EnabledJobIntegrateTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/OneOffDataflowElasticJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 
 import java.util.Arrays;
 import java.util.List;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 
 import java.util.Arrays;
 import java.util.List;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJobForExecuteFailure.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 
 import java.util.Collections;
 import java.util.List;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJobForExecuteThrowsException.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 
 import java.util.Collections;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/simple/FooSimpleElasticJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 
 public final class FooSimpleElasticJob implements SimpleJob {
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/config/yaml/YamlJobConfigurationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.config.yaml;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.junit.Test;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverListenerManagerTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.failover;
 
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.LiteYamlConstants;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.guarantee;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/monitor/BaseMonitorServiceTest.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.reconcile;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacadeTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
 import com.google.common.collect.Lists;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.fixture.ElasticJobListenerCaller;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.fixture.TestElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/setup/SetUpFacadeTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.setup;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.TestDataflowJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionContextServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.sharding;
 
 import com.google.common.collect.Lists;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.sharding;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingServiceTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.curator.framework.api.transaction.CuratorTransactionFinal;
 import org.apache.curator.framework.api.transaction.TransactionCreateBuilder;
 import org.apache.curator.framework.api.transaction.TransactionDeleteBuilder;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/util/yaml/YamlEngineTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.util.yaml;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.junit.Test;
 

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/fixture/TestDataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 
 import java.util.List;
 

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/fixture/TestSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 
 public class TestSimpleJob implements SimpleJob {
     

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImplTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.settings;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobSettingsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.JobSettings;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.fixture.LifecycleYamlConstants;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.Strings;
 import lombok.SneakyThrows;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.OneOffJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/dataflow/DataflowJobBeanDefinitionParser.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.job.parser.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.w3c.dom.Element;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/script/ScriptJobBeanDefinitionParser.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.job.parser.script;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.w3c.dom.Element;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/simple/SimpleJobBeanDefinitionParser.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.job.parser.simple;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.w3c.dom.Element;
 

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/DataflowElasticJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 
 import java.util.Collections;
 import java.util.List;

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/FooSimpleElasticJob.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 
 public class FooSimpleElasticJob implements SimpleJob {
     

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/ref/RefFooDataflowElasticJob.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 
 import java.util.Collections;

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/ref/RefFooSimpleElasticJob.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 
 public class RefFooSimpleElasticJob implements SimpleJob {

File: examples/elastic-job-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/JavaDataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepositoryFactory;

File: examples/elastic-job-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/SpringDataflowJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 

File: examples/elastic-job-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.simple;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepositoryFactory;

File: examples/elastic-job-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/SpringSimpleJob.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example.job.simple;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.entity.Foo;
 import org.apache.shardingsphere.elasticjob.lite.example.fixture.repository.FooRepository;
 

File: examples/elastic-job-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.example;
 
 import org.apache.commons.dbcp.BasicDataSource;
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.JavaDataflowJob;

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.lite.example.config;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.SpringDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.lite.example.config;
 
-import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.type.JobType;
 import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.api.type.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.SpringSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/dao/statistics/StatisticInterval.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.tracing.rdb.statistics;
+package org.apache.shardingsphere.elasticjob.lite.console.dao.statistics;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/dao/statistics/type/job/JobExecutionTypeStatistics.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.tracing.rdb.statistics.type.job;
+package org.apache.shardingsphere.elasticjob.lite.console.dao.statistics.type.job;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/dao/statistics/type/job/JobTypeStatistics.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.tracing.rdb.statistics.type.job;
+package org.apache.shardingsphere.elasticjob.lite.console.dao.statistics.type.job;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/repository/impl/AbstractXmlRepositoryImpl.java
Patch:
@@ -50,6 +50,7 @@ protected AbstractXmlRepositoryImpl(final String fileName, final Class<E> clazz)
         }
     }
     
+    @SuppressWarnings("unchecked")
     @Override
     public synchronized E load() {
         if (!file.exists()) {
@@ -60,9 +61,7 @@ public synchronized E load() {
             }
         }
         try {
-            @SuppressWarnings("unchecked")
-            E result = (E) jaxbContext.createUnmarshaller().unmarshal(file);
-            return result;
+            return (E) jaxbContext.createUnmarshaller().unmarshal(file);
         } catch (final JAXBException ex) {
             throw new JobConsoleException(ex);
         }

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/service/EventTraceDataSourceConfigurationService.java
Patch:
@@ -19,7 +19,8 @@
 
 import org.apache.shardingsphere.elasticjob.lite.console.domain.EventTraceDataSourceConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.console.domain.EventTraceDataSourceConfigurations;
-import com.google.common.base.Optional;
+
+import java.util.Optional;
 
 /**
  * Event trace data source configuration service.

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/service/RegistryCenterConfigurationService.java
Patch:
@@ -19,7 +19,8 @@
 
 import org.apache.shardingsphere.elasticjob.lite.console.domain.RegistryCenterConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.console.domain.RegistryCenterConfigurations;
-import com.google.common.base.Optional;
+
+import java.util.Optional;
 
 /**
  * Registry center configuration service.

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/service/impl/JobAPIServiceImpl.java
Patch:
@@ -27,10 +27,12 @@
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ServerStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingOperateAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingStatisticsAPI;
+import org.springframework.stereotype.Service;
 
 /**
  * Job API service implementation.
  */
+@Service
 public final class JobAPIServiceImpl implements JobAPIService {
     
     @Override

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/JobItemExecutor.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.config.JobRootConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 
 /**
@@ -33,9 +33,9 @@ public interface JobItemExecutor<T extends ElasticJob> {
      * Process job item.
      * 
      * @param elasticJob elastic job
-     * @param jobRootConfig job root configuration
+     * @param jobConfig job configuration
      * @param jobFacade job facade
      * @param shardingContext sharding context
      */
-    void process(T elasticJob, JobRootConfiguration jobRootConfig, JobFacade jobFacade, ShardingContext shardingContext);
+    void process(T elasticJob, JobConfiguration jobConfig, JobFacade jobFacade, ShardingContext shardingContext);
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutor.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
-import org.apache.shardingsphere.elasticjob.lite.config.JobRootConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
 
@@ -29,7 +29,7 @@
 public final class SimpleJobExecutor implements JobItemExecutor<SimpleJob> {
     
     @Override
-    public void process(final SimpleJob elasticJob, final JobRootConfiguration jobRootConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
+    public void process(final SimpleJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
         elasticJob.execute(shardingContext);
     }
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/handler/threadpool/JobExecutorServiceHandlerFactory.java
Patch:
@@ -56,5 +56,5 @@ public static JobExecutorServiceHandler getHandler(final String type) {
             throw new JobConfigurationException("Can not find executor service handler type '%s'.", type);
         }
         return HANDLERS.get(type);
-    } 
+    }
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/RescheduleListenerManager.java
Patch:
@@ -18,10 +18,12 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.config;
 
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.yaml.YamlJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
+import org.apache.shardingsphere.elasticjob.lite.util.yaml.YamlEngine;
 
 /**
  * Reschedule listener manager.
@@ -48,7 +50,7 @@ class CronSettingAndJobEventChangedJobListener extends AbstractJobListener {
         @Override
         protected void dataChanged(final String path, final Type eventType, final String data) {
             if (configNode.isConfigPath(path) && Type.NODE_UPDATED == eventType && !JobRegistry.getInstance().isShutdown(jobName)) {
-                JobRegistry.getInstance().getJobScheduleController(jobName).rescheduleJob(LiteJobConfigurationGsonFactory.fromJson(data).getTypeConfig().getCoreConfig().getCron());
+                JobRegistry.getInstance().getJobScheduleController(jobName).rescheduleJob(YamlEngine.unmarshal(data, YamlJobConfiguration.class).toJobConfiguration().getCron());
             }
         }
     }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeService.java
Patch:
@@ -55,7 +55,7 @@ public void registerStart(final Collection<Integer> shardingItems) {
      */
     public boolean isAllStarted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.STARTED_ROOT)
-                && configService.load(false).getTypeConfig().getCoreConfig().getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
+                && configService.load(false).getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
     }
     
     /**
@@ -83,7 +83,7 @@ public void registerComplete(final Collection<Integer> shardingItems) {
      */
     public boolean isAllCompleted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT)
-                && configService.load(false).getTypeConfig().getCoreConfig().getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
+                && configService.load(false).getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
     }
     
     /**

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileService.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.util.concurrent.AbstractScheduledService;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
@@ -50,7 +50,7 @@ public ReconcileService(final CoordinatorRegistryCenter regCenter, final String
     
     @Override
     protected void runOneIteration() {
-        LiteJobConfiguration config = configService.load(true);
+        JobConfiguration config = configService.load(true);
         int reconcileIntervalMinutes = null == config ? -1 : config.getReconcileIntervalMinutes();
         if (reconcileIntervalMinutes > 0 && (System.currentTimeMillis() - lastReconcileTime >= reconcileIntervalMinutes * 60 * 1000)) {
             lastReconcileTime = System.currentTimeMillis();

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionService.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.sharding;
 
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
@@ -100,7 +100,7 @@ public void clearRunningInfo(final List<Integer> items) {
      * @return has running items or not
      */
     public boolean hasRunningItems(final Collection<Integer> items) {
-        LiteJobConfiguration jobConfig = configService.load(true);
+        JobConfiguration jobConfig = configService.load(true);
         if (null == jobConfig || !jobConfig.isMonitorExecution()) {
             return false;
         }
@@ -122,7 +122,7 @@ public boolean hasRunningItems() {
     }
     
     private List<Integer> getAllItems() {
-        int shardingTotalCount = configService.load(true).getTypeConfig().getCoreConfig().getShardingTotalCount();
+        int shardingTotalCount = configService.load(true).getShardingTotalCount();
         List<Integer> result = new ArrayList<>(shardingTotalCount);
         for (int i = 0; i < shardingTotalCount; i++) {
             result.add(i);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ElasticJobVerify.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobStatusTraceEvent.State;
+import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/JobListenerTest.java
Patch:
@@ -49,14 +49,14 @@ public void setUp() {
     }
     
     @Test
-    public void assertChildEventWhenEventDataIsEmpty() throws Exception {
+    public void assertChildEventWhenEventDataIsEmpty() {
         when(event.getData()).thenReturn(null);
         fooJobListener.childEvent(null, event);
         verify(list, times(0)).clear();
     }
     
     @Test
-    public void assertChildEventSuccess() throws Exception {
+    public void assertChildEventSuccess() {
         when(event.getData()).thenReturn(new ChildData("/test_job", null, null));
         fooJobListener.childEvent(null, event);
         verify(list).clear();

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduleControllerTest.java
Patch:
@@ -187,20 +187,20 @@ public void assertShutdownJobIfShutdown() throws SchedulerException {
     
     @Test(expected = JobSystemException.class)
     public void assertShutdownFailure() throws SchedulerException {
-        doThrow(SchedulerException.class).when(scheduler).shutdown();
+        doThrow(SchedulerException.class).when(scheduler).shutdown(false);
         ReflectionUtils.setFieldValue(jobScheduleController, "scheduler", scheduler);
         try {
             jobScheduleController.shutdown();
         } finally {
-            verify(scheduler).shutdown();
+            verify(scheduler).shutdown(false);
         }
     }
     
     @Test
     public void assertShutdownSuccess() throws SchedulerException {
         ReflectionUtils.setFieldValue(jobScheduleController, "scheduler", scheduler);
         jobScheduleController.shutdown();
-        verify(scheduler).shutdown();
+        verify(scheduler).shutdown(false);
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterQueryWithoutCacheTest.java
Patch:
@@ -88,7 +88,6 @@ public void assertGetRegistryCenterTime() {
         long regCenterTime = zkRegCenter.getRegistryCenterTime("/_systemTime/current");
         assertTrue(regCenterTime <= System.currentTimeMillis());
         long updatedRegCenterTime = zkRegCenter.getRegistryCenterTime("/_systemTime/current");
-        System.out.println(regCenterTime + "," + updatedRegCenterTime);
         assertTrue(regCenterTime < updatedRegCenterTime);
     }
 

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ServerStatisticsAPIImpl.java
Patch:
@@ -44,9 +44,7 @@ public int getServersTotalCount() {
         Set<String> servers = new HashSet<>();
         for (String jobName : regCenter.getChildrenKeys("/")) {
             JobNodePath jobNodePath = new JobNodePath(jobName);
-            for (String each : regCenter.getChildrenKeys(jobNodePath.getServerNodePath())) {
-                servers.add(each);
-            }
+            servers.addAll(regCenter.getChildrenKeys(jobNodePath.getServerNodePath()));
         }
         return servers.size();
     }

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -42,8 +42,6 @@ public final class BaseJobBeanDefinitionParserTag {
     
     public static final String MONITOR_EXECUTION_ATTRIBUTE = "monitor-execution";
     
-    public static final String MONITOR_PORT_ATTRIBUTE = "monitor-port";
-    
     public static final String FAILOVER_ATTRIBUTE = "failover";
     
     public static final String MAX_TIME_DIFF_SECONDS_ATTRIBUTE = "max-time-diff-seconds";

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/job/JobSpringNamespaceWithRefTest.java
Patch:
@@ -57,7 +57,7 @@ public void assertSpringJobBean() {
 
     private void assertSimpleElasticJobBean() {
         while (!RefFooSimpleElasticJob.isCompleted()) {
-            BlockUtils.sleep(100L);
+            BlockUtils.waitingShortTime();
         }
         assertTrue(RefFooSimpleElasticJob.isCompleted());
         assertTrue(regCenter.isExisted("/" + simpleJobName + "/sharding"));

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/event/JobEvent.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.tracing;
+package org.apache.shardingsphere.elasticjob.lite.tracing.event;
 
 /**
  * Job event.

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/event/JobStatusTraceEvent.java
Patch:
@@ -7,21 +7,20 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.tracing.type;
+package org.apache.shardingsphere.elasticjob.lite.tracing.event;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
-import org.apache.shardingsphere.elasticjob.lite.tracing.JobEvent;
 
 import java.util.Date;
 import java.util.UUID;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/ConfigurationService.java
Patch:
@@ -56,7 +56,6 @@ public JobConfiguration load(final boolean fromCache) {
         } else {
             result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.ROOT);
         }
-        // TODO investigate why sometimes result is null
         return YamlEngine.unmarshal(result, YamlJobConfiguration.class).toJobConfiguration();
     }
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverListenerManager.java
Patch:
@@ -74,7 +74,7 @@ class JobCrashedJobListener extends AbstractJobListener {
         
         @Override
         protected void dataChanged(final String path, final Type eventType, final String data) {
-            if (isFailoverEnabled() && Type.NODE_REMOVED == eventType && instanceNode.isInstancePath(path)) {
+            if (!JobRegistry.getInstance().isShutdown(jobName) && isFailoverEnabled() && Type.NODE_REMOVED == eventType && instanceNode.isInstancePath(path)) {
                 String jobInstanceId = path.substring(instanceNode.getInstanceFullPath().length() + 1);
                 if (jobInstanceId.equals(JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId())) {
                     return;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/config/JobConfiguration.java
Patch:
@@ -347,7 +347,6 @@ public Builder overwrite(final boolean overwrite) {
         public final JobConfiguration build() {
             Preconditions.checkArgument(!Strings.isNullOrEmpty(jobName), "jobName can not be empty.");
             Preconditions.checkNotNull(jobType, "jobType can not be null.");
-            Preconditions.checkArgument(!Strings.isNullOrEmpty(cron), "cron can not be empty.");
             Preconditions.checkArgument(shardingTotalCount > 0, "shardingTotalCount should larger than zero.");
             return new JobConfiguration(jobName, jobType, cron, shardingTotalCount, shardingItemParameters, jobParameter, 
                     monitorExecution, failover, misfire, maxTimeDiffSeconds, reconcileIntervalMinutes,

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJob.java
Patch:
@@ -47,8 +47,6 @@ public final class LiteJob implements Job {
     
     @Override
     public void execute(final JobExecutionContext context) {
-        ElasticJobExecutor executor = null == tracingConfig
-                ? new ElasticJobExecutor(regCenter, elasticJob, jobConfig, elasticJobListeners) : new ElasticJobExecutor(regCenter, elasticJob, jobConfig, elasticJobListeners, tracingConfig);
-        executor.execute();
+        new ElasticJobExecutor(regCenter, elasticJob, jobConfig, elasticJobListeners, tracingConfig).execute();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/DataflowJobExecutorTest.java
Patch:
@@ -177,7 +177,7 @@ private void setUp(final boolean isStreamingProcess, final ShardingContexts shar
         JobConfiguration jobConfig = JobConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, JobType.DATAFLOW, "0/1 * * * * ?", 3)
                 .jobErrorHandlerType("IGNORE").setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.toString(isStreamingProcess)).build();
         when(jobFacade.getShardingContexts()).thenReturn(shardingContexts);
-        elasticJobExecutor = new ElasticJobExecutor(regCenter, new TestDataflowJob(jobCaller), jobConfig, Collections.emptyList());
+        elasticJobExecutor = new ElasticJobExecutor(regCenter, new TestDataflowJob(jobCaller), jobConfig, Collections.emptyList(), null);
         ReflectionUtils.setFieldValue(elasticJobExecutor, "jobFacade", jobFacade);
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, shardingContexts);
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ScriptJobExecutorTest.java
Patch:
@@ -47,7 +47,7 @@ public final class ScriptJobExecutorTest {
     @Test
     public void assertExecuteWhenCommandLineIsEmpty() {
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, ShardingContextsBuilder.getMultipleShardingContexts());
-        elasticJobExecutor = new ElasticJobExecutor(regCenter, null, createJobConfiguration("", "IGNORE"), Collections.emptyList());
+        elasticJobExecutor = new ElasticJobExecutor(regCenter, null, createJobConfiguration("", "IGNORE"), Collections.emptyList(), null);
         ReflectionUtils.setFieldValue(elasticJobExecutor, "jobFacade", jobFacade);
         elasticJobExecutor.execute();
     }
@@ -64,7 +64,7 @@ public void assertExecuteWhenExecuteFailureForMultipleShardingItems() {
     
     private void assertExecuteWhenExecuteFailure(final ShardingContexts shardingContexts) {
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, shardingContexts);
-        elasticJobExecutor = new ElasticJobExecutor(regCenter, null, createJobConfiguration("not_exists_file", "THROW"), Collections.emptyList());
+        elasticJobExecutor = new ElasticJobExecutor(regCenter, null, createJobConfiguration("not_exists_file", "THROW"), Collections.emptyList(), null);
         ReflectionUtils.setFieldValue(elasticJobExecutor, "jobFacade", jobFacade);
         elasticJobExecutor.execute();
     }
@@ -81,7 +81,7 @@ public void assertExecuteSuccessForSingleShardingItems() {
     
     private void assertExecuteSuccess(final ShardingContexts shardingContexts) {
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, shardingContexts);
-        elasticJobExecutor = new ElasticJobExecutor(regCenter, null, createJobConfiguration("exists_file param0 param1", "IGNORE"), Collections.emptyList());
+        elasticJobExecutor = new ElasticJobExecutor(regCenter, null, createJobConfiguration("exists_file param0 param1", "IGNORE"), Collections.emptyList(), null);
         ReflectionUtils.setFieldValue(elasticJobExecutor, "jobFacade", jobFacade);
         elasticJobExecutor.execute();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutorTest.java
Patch:
@@ -63,7 +63,7 @@ public final class SimpleJobExecutorTest {
     
     @Before
     public void setUp() {
-        elasticJobExecutor = new ElasticJobExecutor(regCenter, new TestSimpleJob(jobCaller), createJobConfiguration(null, "THROW"), Collections.emptyList());
+        elasticJobExecutor = new ElasticJobExecutor(regCenter, new TestSimpleJob(jobCaller), createJobConfiguration(null, "THROW"), Collections.emptyList(), null);
         ReflectionUtils.setFieldValue(elasticJobExecutor, "jobFacade", jobFacade);
     }
     
@@ -75,7 +75,7 @@ private JobConfiguration createJobConfiguration(final String jobExecutorServiceH
     
     @Test
     public void assertNewExecutorWithDefaultHandlers() {
-        elasticJobExecutor = new ElasticJobExecutor(regCenter, new TestSimpleJob(jobCaller), createJobConfiguration(null, null), Collections.emptyList());
+        elasticJobExecutor = new ElasticJobExecutor(regCenter, new TestSimpleJob(jobCaller), createJobConfiguration(null, null), Collections.emptyList(), null);
         assertThat(ReflectionUtils.getFieldValue(elasticJobExecutor, "executorService"), instanceOf(new CPUUsageJobExecutorServiceHandler().createExecutorService("test_job").getClass()));
         assertThat(ReflectionUtils.getFieldValue(elasticJobExecutor, "jobErrorHandler"), instanceOf(LogJobErrorHandler.class));
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/WrongJobExecutorTest.java
Patch:
@@ -53,7 +53,7 @@ public final class WrongJobExecutorTest {
     
     @Before
     public void setUp() {
-        wrongJobExecutor = new ElasticJobExecutor(regCenter, new TestWrongJob(), createJobConfiguration(), Collections.emptyList());
+        wrongJobExecutor = new ElasticJobExecutor(regCenter, new TestWrongJob(), createJobConfiguration(), Collections.emptyList(), null);
         ReflectionUtils.setFieldValue(wrongJobExecutor, "jobFacade", jobFacade);
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/AbstractBaseStdJobAutoInitTest.java
Patch:
@@ -33,7 +33,7 @@ protected void setJobConfiguration(final JobConfiguration jobConfig) {
     @Before
     public void autoJobInit() {
         setJobConfiguration(getJobConfiguration());
-        initJob();
+        scheduleJob();
         assertRegCenterCommonInfoWithEnabled();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/simple/DisabledJobTest.java
Patch:
@@ -37,7 +37,7 @@ public void reset() {
     
     @Test
     public void assertJobInit() {
-        initJob();
+        scheduleJob();
         assertRegCenterCommonInfoWithDisabled();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacadeTest.java
Patch:
@@ -75,7 +75,7 @@ public final class LiteJobFacadeTest {
     
     @Before
     public void setUp() {
-        liteJobFacade = new LiteJobFacade(null, "test_job", Collections.singletonList(new TestElasticJobListener(caller)));
+        liteJobFacade = new LiteJobFacade(null, "test_job", Collections.singletonList(new TestElasticJobListener(caller)), null);
         ReflectionUtils.setFieldValue(liteJobFacade, "configService", configService);
         ReflectionUtils.setFieldValue(liteJobFacade, "shardingService", shardingService);
         ReflectionUtils.setFieldValue(liteJobFacade, "executionContextService", executionContextService);

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.google.common.base.Strings;
 import lombok.SneakyThrows;
-import org.apache.shardingsphere.elasticjob.lite.api.JobScheduler;
 import org.apache.shardingsphere.elasticjob.lite.api.JobType;
+import org.apache.shardingsphere.elasticjob.lite.api.bootstrap.ScheduleJobBootstrap;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.tracing.api.TracingConfiguration;
 import org.springframework.beans.factory.config.BeanDefinition;
@@ -43,8 +43,8 @@ public abstract class AbstractJobBeanDefinitionParser extends AbstractBeanDefini
     @SneakyThrows
     @Override
     protected final AbstractBeanDefinition parseInternal(final Element element, final ParserContext parserContext) {
-        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(JobScheduler.class);
-        factory.setInitMethodName("init");
+        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ScheduleJobBootstrap.class);
+        factory.setInitMethodName("schedule");
         factory.addConstructorArgReference(element.getAttribute(BaseJobBeanDefinitionParserTag.REGISTRY_CENTER_REF_ATTRIBUTE));
         factory.addConstructorArgReference(element.getAttribute(BaseJobBeanDefinitionParserTag.JOB_REF_ATTRIBUTE));
         factory.addConstructorArgValue(createJobConfiguration(element));

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/config/JobConfigurationTest.java
Patch:
@@ -73,7 +73,7 @@ public void assertBuildRequiredProperties() {
         assertThat(actual.getMaxTimeDiffSeconds(), is(-1));
         assertThat(actual.getReconcileIntervalMinutes(), is(10));
         assertThat(actual.getMonitorPort(), is(-1));
-        assertThat(actual.getJobShardingStrategyType(), is(""));
+        assertNull(actual.getJobShardingStrategyType());
         assertNull(actual.getJobExecutorServiceHandlerType());
         assertNull(actual.getJobErrorHandlerType());
         assertThat(actual.getDescription(), is(""));

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -99,11 +99,11 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
      */
     public void init() {
         JobConfiguration jobConfigFromRegCenter = schedulerFacade.updateJobConfiguration(null == elasticJob ? ScriptJob.class.getName() : elasticJob.getClass().getName(), jobConfig);
-        JobRegistry.getInstance().setCurrentShardingTotalCount(jobConfigFromRegCenter.getJobName(), jobConfigFromRegCenter.getTypeConfig().getCoreConfig().getShardingTotalCount());
+        JobRegistry.getInstance().setCurrentShardingTotalCount(jobConfigFromRegCenter.getJobName(), jobConfigFromRegCenter.getShardingTotalCount());
         JobScheduleController jobScheduleController = new JobScheduleController(createScheduler(), createJobDetail(elasticJob), jobConfigFromRegCenter.getJobName());
         JobRegistry.getInstance().registerJob(jobConfigFromRegCenter.getJobName(), jobScheduleController, regCenter);
         schedulerFacade.registerStartUpInfo(!jobConfigFromRegCenter.isDisabled());
-        jobScheduleController.scheduleJob(jobConfigFromRegCenter.getTypeConfig().getCoreConfig().getCron());
+        jobScheduleController.scheduleJob(jobConfigFromRegCenter.getCron());
     }
     
     private Scheduler createScheduler() {

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/DataflowJobExecutor.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
 
@@ -31,10 +30,11 @@
  */
 public final class DataflowJobExecutor implements JobItemExecutor<DataflowJob> {
     
+    public static final String STREAM_PROCESS_KEY = "streaming.process";
+    
     @Override
     public void process(final DataflowJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
-        DataflowJobConfiguration dataflowConfig = (DataflowJobConfiguration) jobConfig.getTypeConfig();
-        if (dataflowConfig.isStreamingProcess()) {
+        if (Boolean.parseBoolean(jobConfig.getProps().getOrDefault(STREAM_PROCESS_KEY, false).toString())) {
             streamingExecute(elasticJob, jobFacade, shardingContext);
         } else {
             oneOffExecute(elasticJob, shardingContext);

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ScriptJobExecutor.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
@@ -36,9 +35,11 @@
  */
 public final class ScriptJobExecutor implements JobItemExecutor<ScriptJob> {
     
+    public static final String SCRIPT_KEY = "script.command.line";
+    
     @Override
     public void process(final ScriptJob elasticJob, final JobConfiguration jobConfig, final JobFacade jobFacade, final ShardingContext shardingContext) {
-        String scriptCommandLine = ((ScriptJobConfiguration) jobConfig.getTypeConfig()).getScriptCommandLine();
+        String scriptCommandLine = jobConfig.getProps().getProperty(SCRIPT_KEY);
         if (Strings.isNullOrEmpty(scriptCommandLine)) {
             throw new JobConfigurationException("Cannot find script command line for job '%s', job is not executed.", shardingContext.getJobName());
         }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/RescheduleListenerManager.java
Patch:
@@ -49,7 +49,7 @@ class CronSettingAndJobEventChangedJobListener extends AbstractJobListener {
         @Override
         protected void dataChanged(final String path, final Type eventType, final String data) {
             if (configNode.isConfigPath(path) && Type.NODE_UPDATED == eventType && !JobRegistry.getInstance().isShutdown(jobName)) {
-                JobRegistry.getInstance().getJobScheduleController(jobName).rescheduleJob(JobConfigurationGsonFactory.fromJson(data).getTypeConfig().getCoreConfig().getCron());
+                JobRegistry.getInstance().getJobScheduleController(jobName).rescheduleJob(JobConfigurationGsonFactory.fromJson(data).getCron());
             }
         }
     }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/guarantee/GuaranteeService.java
Patch:
@@ -55,7 +55,7 @@ public void registerStart(final Collection<Integer> shardingItems) {
      */
     public boolean isAllStarted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.STARTED_ROOT)
-                && configService.load(false).getTypeConfig().getCoreConfig().getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
+                && configService.load(false).getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
     }
     
     /**
@@ -83,7 +83,7 @@ public void registerComplete(final Collection<Integer> shardingItems) {
      */
     public boolean isAllCompleted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT)
-                && configService.load(false).getTypeConfig().getCoreConfig().getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
+                && configService.load(false).getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
     }
     
     /**

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionService.java
Patch:
@@ -122,7 +122,7 @@ public boolean hasRunningItems() {
     }
     
     private List<Integer> getAllItems() {
-        int shardingTotalCount = configService.load(true).getTypeConfig().getCoreConfig().getShardingTotalCount();
+        int shardingTotalCount = configService.load(true).getShardingTotalCount();
         List<Integer> result = new ArrayList<>(shardingTotalCount);
         for (int i = 0; i < shardingTotalCount; i++) {
             result.add(i);

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingListenerManager.java
Patch:
@@ -62,7 +62,7 @@ class ShardingTotalCountChangedJobListener extends AbstractJobListener {
         @Override
         protected void dataChanged(final String path, final Type eventType, final String data) {
             if (configNode.isConfigPath(path) && 0 != JobRegistry.getInstance().getCurrentShardingTotalCount(jobName)) {
-                int newShardingTotalCount = JobConfigurationGsonFactory.fromJson(data).getTypeConfig().getCoreConfig().getShardingTotalCount();
+                int newShardingTotalCount = JobConfigurationGsonFactory.fromJson(data).getShardingTotalCount();
                 if (newShardingTotalCount != JobRegistry.getInstance().getCurrentShardingTotalCount(jobName)) {
                     shardingService.setReshardingFlag();
                     JobRegistry.getInstance().setCurrentShardingTotalCount(jobName, newShardingTotalCount);

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingService.java
Patch:
@@ -109,7 +109,7 @@ public void shardingIfNecessary() {
         }
         waitingOtherShardingItemCompleted();
         JobConfiguration jobConfig = configService.load(false);
-        int shardingTotalCount = jobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount();
+        int shardingTotalCount = jobConfig.getShardingTotalCount();
         log.debug("Job '{}' sharding begin.", jobName);
         jobNodeStorage.fillEphemeralJobNode(ShardingNode.PROCESSING, "");
         resetShardingInfo(shardingTotalCount);
@@ -157,7 +157,7 @@ public List<Integer> getShardingItems(final String jobInstanceId) {
             return Collections.emptyList();
         }
         List<Integer> result = new LinkedList<>();
-        int shardingTotalCount = configService.load(true).getTypeConfig().getCoreConfig().getShardingTotalCount();
+        int shardingTotalCount = configService.load(true).getShardingTotalCount();
         for (int i = 0; i < shardingTotalCount; i++) {
             if (jobInstance.getJobInstanceId().equals(jobNodeStorage.getJobNodeData(ShardingNode.getInstanceNode(i)))) {
                 result.add(i);
@@ -185,7 +185,7 @@ public List<Integer> getLocalShardingItems() {
      */
     public boolean hasShardingInfoInOfflineServers() {
         List<String> onlineInstances = jobNodeStorage.getJobNodeChildrenKeys(InstanceNode.ROOT);
-        int shardingTotalCount = configService.load(true).getTypeConfig().getCoreConfig().getShardingTotalCount();
+        int shardingTotalCount = configService.load(true).getShardingTotalCount();
         for (int i = 0; i < shardingTotalCount; i++) {
             if (!onlineInstances.contains(jobNodeStorage.getJobNodeData(ShardingNode.getInstanceNode(i)))) {
                 return true;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/JobSchedulerTest.java
Patch:
@@ -17,9 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api;
 
-import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
@@ -58,7 +56,7 @@ public final class JobSchedulerTest {
     @Before
     public void setUp() {
         JobRegistry.getInstance().addJobInstance("test_job", new JobInstance("127.0.0.1@-@0"));
-        jobConfig = JobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "* * 0/10 * * ? 2050", 3).build())).build();
+        jobConfig = JobConfiguration.newBuilder("test_job", JobType.SIMPLE, "* * 0/10 * * ? 2050", 3).build();
         jobScheduler = new JobScheduler(regCenter, new TestSimpleJob(), jobConfig);
         ReflectionUtils.setFieldValue(jobScheduler, "regCenter", regCenter);
         ReflectionUtils.setFieldValue(jobScheduler, "schedulerFacade", schedulerFacade);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.std.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.OneOffDataflowElasticJob;
@@ -42,8 +43,8 @@ public void reset() {
     
     @Override
     protected void setJobConfiguration(final JobConfiguration jobConfig) {
-        ReflectionUtils.setFieldValue(jobConfig.getTypeConfig().getCoreConfig(), "misfire", false);
-        ReflectionUtils.setFieldValue(jobConfig.getTypeConfig(), "streamingProcess", false);
+        ReflectionUtils.setFieldValue(jobConfig, "misfire", false);
+        jobConfig.getProps().setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.FALSE.toString());
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -42,7 +42,7 @@ public void reset() {
     
     @Override
     protected void setJobConfiguration(final JobConfiguration jobConfig) {
-        ReflectionUtils.setFieldValue(jobConfig.getTypeConfig(), "streamingProcess", true);
+        ReflectionUtils.setFieldValue(jobConfig, "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -42,7 +42,7 @@ public void reset() {
     
     @Override
     protected void setJobConfiguration(final JobConfiguration jobConfig) {
-        ReflectionUtils.setFieldValue(jobConfig.getTypeConfig(), "streamingProcess", true);
+        ReflectionUtils.setFieldValue(jobConfig, "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -42,7 +42,7 @@ public void reset() {
     
     @Override
     protected void setJobConfiguration(final JobConfiguration jobConfig) {
-        ReflectionUtils.setFieldValue(jobConfig.getTypeConfig(), "streamingProcess", true);
+        ReflectionUtils.setFieldValue(jobConfig, "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.std.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
@@ -43,7 +44,7 @@ public void reset() {
     @Override
     protected void setJobConfiguration(final JobConfiguration jobConfig) {
         ReflectionUtils.setFieldValue(jobConfig, "monitorExecution", false);
-        ReflectionUtils.setFieldValue(jobConfig.getTypeConfig(), "streamingProcess", true);
+        jobConfig.getProps().setProperty(DataflowJobExecutor.STREAM_PROCESS_KEY, Boolean.TRUE.toString());
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -42,7 +42,7 @@ public void reset() {
     
     @Override
     protected void setJobConfiguration(final JobConfiguration jobConfig) {
-        ReflectionUtils.setFieldValue(jobConfig.getTypeConfig(), "streamingProcess", true);
+        ReflectionUtils.setFieldValue(jobConfig, "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/script/ScriptElasticJobTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.util.ScriptElasticJobUtil;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
@@ -41,8 +41,8 @@ public ScriptElasticJobTest() {
     public void assertJobInit() throws IOException {
         ScriptElasticJobUtil.buildScriptCommandLine();
         WaitingUtils.waitingShortTime();
-        String scriptCommandLine = ((ScriptJobConfiguration) getJobConfiguration().getTypeConfig()).getScriptCommandLine();
+        String scriptCommandLine = getJobConfiguration().getProps().getProperty(ScriptJobExecutor.SCRIPT_KEY);
         JobConfiguration jobConfig = JobConfigurationGsonFactory.fromJson(getRegCenter().get("/" + getJobName() + "/config"));
-        assertThat(((ScriptJobConfiguration) jobConfig.getTypeConfig()).getScriptCommandLine(), is(scriptCommandLine));
+        assertThat(jobConfig.getProps().getProperty(ScriptJobExecutor.SCRIPT_KEY), is(scriptCommandLine));
     }
 }

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -69,10 +69,10 @@ public JobBriefInfo getJobBriefInfo(final String jobName) {
             return null;
         }
         JobConfiguration jobConfig = JobConfigurationGsonFactory.fromJson(jobConfigJson);
-        result.setDescription(jobConfig.getTypeConfig().getCoreConfig().getDescription());
-        result.setCron(jobConfig.getTypeConfig().getCoreConfig().getCron());
+        result.setDescription(jobConfig.getDescription());
+        result.setCron(jobConfig.getCron());
         result.setInstanceCount(getJobInstanceCount(jobName));
-        result.setShardingTotalCount(jobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount());
+        result.setShardingTotalCount(jobConfig.getShardingTotalCount());
         result.setStatus(getJobStatus(jobName));
         return result;
     }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/ConfigurationService.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.util.env.TimeService;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/RescheduleListenerManager.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.config;
 
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverListenerManager.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
-import org.apache.shardingsphere.elasticjob.lite.internal.config.LiteJobConfigurationGsonFactory;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.instance.InstanceNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/MonitorExecutionListenerManager.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.sharding;
 
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationNode;
-import org.apache.shardingsphere.elasticjob.lite.internal.config.LiteJobConfigurationGsonFactory;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingListenerManager.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.sharding;
 
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationNode;
-import org.apache.shardingsphere.elasticjob.lite.internal.config.LiteJobConfigurationGsonFactory;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.instance.InstanceNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractListenerManager;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
-import org.apache.shardingsphere.elasticjob.lite.internal.config.LiteJobConfigurationGsonFactory;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.SchedulerFacade;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/script/ScriptElasticJobTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.fixture.util.ScriptElasticJobUtil;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
-import org.apache.shardingsphere.elasticjob.lite.internal.config.LiteJobConfigurationGsonFactory;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.junit.Test;
 
 import java.io.IOException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/config/ConfigurationServiceTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.fixture.LiteJsonConstants;
 import org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.shardingsphere.elasticjob.lite.util.ReflectionUtils;
 import org.junit.Before;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/config/LiteJobConfigurationGsonFactoryTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.internal.config.LiteJobConfigurationGsonFactory;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobSettingsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.JobSettings;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.internal.config.LiteJobConfigurationGsonFactory;
+import org.apache.shardingsphere.elasticjob.lite.internal.config.json.LiteJobConfigurationGsonFactory;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.JobBriefInfo;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/LiteJobConfigurationGsonFactory.java
Patch:
@@ -72,7 +72,7 @@ public static LiteJobConfiguration fromJson(final String liteJobConfigJson) {
     /**
      * Job configuration gson type adapter.
      */
-    static final class LiteJobConfigurationGsonTypeAdapter extends AbstractJobConfigurationGsonTypeAdapter<LiteJobConfiguration> {
+    public static final class LiteJobConfigurationGsonTypeAdapter extends AbstractJobConfigurationGsonTypeAdapter<LiteJobConfiguration> {
         
         @Override
         protected void addToCustomizedValueMap(final String jsonName, final JsonReader in, final Map<String, Object> customizedValueMap) throws IOException {

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/handler/threadpool/JobExecutorServiceHandlerFactory.java
Patch:
@@ -56,5 +56,5 @@ public static JobExecutorServiceHandler getHandler(final String type) {
             throw new JobConfigurationException("Can not find executor service handler type '%s'.", type);
         }
         return HANDLERS.get(type);
-    } 
+    }
 }

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/listener/RDBTracingListener.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobStatusTraceEvent;
 import org.apache.shardingsphere.elasticjob.lite.tracing.listener.TracingListener;
+import org.apache.shardingsphere.elasticjob.lite.tracing.rdb.storage.JobEventRdbStorage;
 
 import javax.sql.DataSource;
 import java.sql.SQLException;

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/storage/JobEventRdbStorage.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.tracing.rdb.listener;
+package org.apache.shardingsphere.elasticjob.lite.tracing.rdb.storage;
 
 import com.google.common.base.Strings;
 import lombok.extern.slf4j.Slf4j;

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/test/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/search/JobEventRdbSearchTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobStatusTraceEvent;
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobStatusTraceEvent.Source;
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobStatusTraceEvent.State;
-import org.apache.shardingsphere.elasticjob.lite.tracing.rdb.listener.JobEventRdbStorage;
+import org.apache.shardingsphere.elasticjob.lite.tracing.rdb.storage.JobEventRdbStorage;
 import org.junit.BeforeClass;
 import org.junit.Test;
 

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/test/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/storage/JobEventRdbStorageTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.tracing.rdb.listener;
+package org.apache.shardingsphere.elasticjob.lite.tracing.rdb.storage;
 
 import org.apache.commons.dbcp.BasicDataSource;
 import org.apache.shardingsphere.elasticjob.lite.tracing.event.JobExecutionEvent;

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.tracing.config.TracingConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.SpringDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.lite.tracing.api.TracingConfiguration;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -38,7 +38,7 @@ public class DataflowJobConfig {
     private ZookeeperRegistryCenter regCenter;
     
     @Resource
-    private TracingConfiguration tracingConfiguration;
+    private TracingConfiguration tracingConfig;
     
     @Bean
     public DataflowJob dataflowJob() {
@@ -48,7 +48,7 @@ public DataflowJob dataflowJob() {
     @Bean(initMethod = "init")
     public JobScheduler dataflowJobScheduler(final DataflowJob dataflowJob, @Value("${dataflowJob.cron}") final String cron, @Value("${dataflowJob.shardingTotalCount}") final int shardingTotalCount,
                                              @Value("${dataflowJob.shardingItemParameters}") final String shardingItemParameters) {
-        return new JobScheduler(regCenter, dataflowJob, getLiteJobConfiguration(dataflowJob.getClass(), cron, shardingTotalCount, shardingItemParameters), tracingConfiguration);
+        return new JobScheduler(regCenter, dataflowJob, getLiteJobConfiguration(dataflowJob.getClass(), cron, shardingTotalCount, shardingItemParameters), tracingConfig);
     }
     
     private LiteJobConfiguration getLiteJobConfiguration(final Class<? extends DataflowJob> jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) {

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.tracing.config.TracingConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.SpringSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.lite.tracing.api.TracingConfiguration;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -38,7 +38,7 @@ public class SimpleJobConfig {
     private ZookeeperRegistryCenter regCenter;
     
     @Resource
-    private TracingConfiguration tracingConfiguration;
+    private TracingConfiguration tracingConfig;
     
     @Bean
     public SimpleJob simpleJob() {
@@ -48,7 +48,7 @@ public SimpleJob simpleJob() {
     @Bean(initMethod = "init")
     public JobScheduler simpleJobScheduler(final SimpleJob simpleJob, @Value("${simpleJob.cron}") final String cron, @Value("${simpleJob.shardingTotalCount}") final int shardingTotalCount,
                                            @Value("${simpleJob.shardingItemParameters}") final String shardingItemParameters) {
-        return new JobScheduler(regCenter, simpleJob, getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters), tracingConfiguration);
+        return new JobScheduler(regCenter, simpleJob, getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters), tracingConfig);
     }
     
     private LiteJobConfiguration getLiteJobConfiguration(final Class<? extends SimpleJob> jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) {

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/restful/EventTraceHistoryRESTfulAPI.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.shardingsphere.elasticjob.lite.console.service.EventTraceDataSourceConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.console.service.impl.EventTraceDataSourceConfigurationServiceImpl;
 import org.apache.shardingsphere.elasticjob.lite.console.util.SessionEventTraceDataSourceConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.rdb.JobEventRdbSearch;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobExecutionEvent;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent;
+import org.apache.shardingsphere.elasticjob.lite.tracing.rdb.JobEventRdbSearch;
+import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobExecutionEvent;
+import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobStatusTraceEvent;
 import org.apache.commons.dbcp.BasicDataSource;
 
 import javax.sql.DataSource;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -21,8 +21,8 @@
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventBus;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventBus;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.handler.sharding.JobInstance;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/exception/ExceptionUtils.java
Patch:
@@ -24,10 +24,10 @@
 import java.io.StringWriter;
 
 /**
- * Exception utility.
+ * Exception utilities.
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
-public final class ExceptionUtil {
+public final class ExceptionUtils {
     
     /**
      * Transform throwable to string.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/JobFacade.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.shardingsphere.elasticjob.lite.executor;
 
 import org.apache.shardingsphere.elasticjob.lite.config.JobRootConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobExecutionEvent;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent.State;
+import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobExecutionEvent;
+import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 
 import java.util.Collection;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/util/concurrent/ElasticJobExecutorService.java
Patch:
@@ -38,8 +38,8 @@ public final class ElasticJobExecutorService {
     
     public ElasticJobExecutorService(final String namingPattern, final int threadSize) {
         workQueue = new LinkedBlockingQueue<>();
-        threadPoolExecutor = new ThreadPoolExecutor(threadSize, threadSize, 5L, TimeUnit.MINUTES, workQueue, 
-                new BasicThreadFactory.Builder().namingPattern(Joiner.on("-").join(namingPattern, "%s")).build());
+        threadPoolExecutor = new ThreadPoolExecutor(
+                threadSize, threadSize, 5L, TimeUnit.MINUTES, workQueue, new BasicThreadFactory.Builder().namingPattern(Joiner.on("-").join(namingPattern, "%s")).build());
         threadPoolExecutor.allowCoreThreadTimeOut(true);
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ElasticJobVerify.java
Patch:
@@ -19,7 +19,7 @@
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent.State;
+import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent.State;
+import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/WrongJobExecutorTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent.State;
+import org.apache.shardingsphere.elasticjob.lite.tracing.type.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacadeTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventBus;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventBus;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/restful/RESTfulAPIExceptionMapper.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.restful;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtil;
+import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtils;
 
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
@@ -32,6 +32,6 @@ public final class RESTfulAPIExceptionMapper implements ExceptionMapper<Throwabl
     
     @Override
     public Response toResponse(final Throwable cause) {
-        return Response.ok(ExceptionUtil.transform(cause), MediaType.TEXT_PLAIN).status(Response.Status.INTERNAL_SERVER_ERROR).build();
+        return Response.ok(ExceptionUtils.transform(cause), MediaType.TEXT_PLAIN).status(Response.Status.INTERNAL_SERVER_ERROR).build();
     }
 }

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.api.JobScheduler;
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.rdb.JobEventRdbConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.rdb.JobEventRdbConfiguration;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.AbstractBeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/JobEvent.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event;
+package org.apache.shardingsphere.elasticjob.lite.tracing;
 
 /**
  * Job event.

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/JobEventConfiguration.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event;
+package org.apache.shardingsphere.elasticjob.lite.tracing;
 
 /**
  * Job event configuration.

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/JobEventIdentity.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event;
+package org.apache.shardingsphere.elasticjob.lite.tracing;
 
 /**
  * Job event identity.

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/JobEventListenerConfigurationException.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event;
+package org.apache.shardingsphere.elasticjob.lite.tracing;
 
 /**
  * Job event listener configuration exception.

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/test/java/org/apache/shardingsphere/elasticjob/lite/tracing/fixture/JobEventCaller.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event.fixture;
+package org.apache.shardingsphere.elasticjob.lite.tracing.fixture;
 
 public interface JobEventCaller {
     

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/test/java/org/apache/shardingsphere/elasticjob/lite/tracing/fixture/TestJobEventConfiguration.java
Patch:
@@ -15,11 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event.fixture;
+package org.apache.shardingsphere.elasticjob.lite.tracing.fixture;
 
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventListener;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventListener;
 
 @RequiredArgsConstructor
 public final class TestJobEventConfiguration extends TestJobEventIdentity implements JobEventConfiguration {

File: elastic-job-lite-tracing/elastic-job-lite-tracing-api/src/test/java/org/apache/shardingsphere/elasticjob/lite/tracing/fixture/TestJobEventIdentity.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event.fixture;
+package org.apache.shardingsphere.elasticjob.lite.tracing.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventIdentity;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventIdentity;
 
 public class TestJobEventIdentity implements JobEventIdentity {
     

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/DatabaseType.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event.rdb;
+package org.apache.shardingsphere.elasticjob.lite.tracing.rdb;
 
 import java.util.Arrays;
 import java.util.Optional;

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/main/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/JobEventRdbIdentity.java
Patch:
@@ -7,17 +7,17 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event.rdb;
+package org.apache.shardingsphere.elasticjob.lite.tracing.rdb;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventIdentity;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventIdentity;
 
 /**
  * Job event RDB identity.

File: elastic-job-lite-tracing/elastic-job-lite-tracing-rdb/src/test/java/org/apache/shardingsphere/elasticjob/lite/tracing/rdb/JobEventRdbIdentityTest.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.event.rdb;
+package org.apache.shardingsphere.elasticjob.lite.tracing.rdb;
 
 import org.junit.Test;
 

File: examples/elastic-job-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.rdb.JobEventRdbConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.rdb.JobEventRdbConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.JavaDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.dataflow.SpringDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
 import org.springframework.beans.factory.annotation.Value;

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/JobEventConfig.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.shardingsphere.elasticjob.lite.example.config;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.rdb.JobEventRdbConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.rdb.JobEventRdbConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.tracing.JobEventConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.example.job.simple.SpringSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
 import org.springframework.beans.factory.annotation.Value;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/JobExecutorFactory.java
Patch:
@@ -23,10 +23,10 @@
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.DataflowJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.ScriptJobExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.SimpleJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.SimpleJobExecutor;
 
 /**
  * Job executor factory.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/DataflowJobExecutor.java
Patch:
@@ -7,21 +7,22 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobRootConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
 
 import java.util.List;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ScriptJobExecutor.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import com.google.common.base.Strings;
 import org.apache.commons.exec.CommandLine;
@@ -26,6 +26,7 @@
 import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
 import org.apache.shardingsphere.elasticjob.lite.util.json.GsonFactory;
 
 import java.io.IOException;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutor.java
Patch:
@@ -7,20 +7,21 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobRootConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
 
 /**
  * Simple job executor.

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/JobExecutorFactoryTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import lombok.SneakyThrows;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.DataflowJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.DataflowJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.type.JobItemExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.ScriptJobExecutor;
-import org.apache.shardingsphere.elasticjob.lite.executor.type.SimpleJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.ScriptJobExecutor;
+import org.apache.shardingsphere.elasticjob.lite.executor.type.impl.SimpleJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestDataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestSimpleJobConfiguration;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/DataflowJobExecutorTest.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ElasticJobVerify.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/ScriptJobExecutorTest.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/SimpleJobExecutorTest.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/impl/WrongJobExecutorTest.java
Patch:
@@ -7,15 +7,15 @@
  * the License.  You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
- *
+ *  
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.elasticjob.lite.executor.type;
+package org.apache.shardingsphere.elasticjob.lite.executor.type.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent.State;
 import org.apache.shardingsphere.elasticjob.lite.executor.ElasticJobExecutor;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/handler/error/impl/IgnoreJobErrorHandler.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.handler.error.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.JobExceptionHandler;
+import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.JobErrorHandler;
 
 /**
- * Job exception handler for ignore exception.
+ * Job error handler for ignore exception.
  */
-public final class IgnoreJobExceptionHandler implements JobExceptionHandler {
+public final class IgnoreJobErrorHandler implements JobErrorHandler {
     
     @Override
     public void handleException(final String jobName, final Throwable cause) {

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/handler/error/impl/LogJobErrorHandler.java
Patch:
@@ -17,14 +17,14 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.handler.error.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.JobExceptionHandler;
+import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.JobErrorHandler;
 import lombok.extern.slf4j.Slf4j;
 
 /**
- * Job exception handler for log error message.
+ * Job error handler for log error message.
  */
 @Slf4j
-public final class LogJobExceptionHandler implements JobExceptionHandler {
+public final class LogJobErrorHandler implements JobErrorHandler {
     
     @Override
     public void handleException(final String jobName, final Throwable cause) {

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/handler/error/impl/ThrowJobErrorHandler.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.shardingsphere.elasticjob.lite.executor.handler.error.impl;
 
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.JobExceptionHandler;
+import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.JobErrorHandler;
 
 /**
- * Job exception handler for throw exception.
+ * Job error handler for throw exception.
  */
-public final class ThrowJobExceptionHandler implements JobExceptionHandler {
+public final class ThrowJobErrorHandler implements JobErrorHandler {
     
     @Override
     public void handleException(final String jobName, final Throwable cause) {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/config/JobCoreConfigurationTest.java
Patch:
@@ -29,7 +29,7 @@ public final class JobCoreConfigurationTest {
     @Test
     public void assertBuildAllProperties() {
         JobCoreConfiguration actual = JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3)
-                .shardingItemParameters("0=a,1=b,2=c").jobParameter("param").failover(true).misfire(false).jobExceptionHandlerType("IGNORE").description("desc").build();
+                .shardingItemParameters("0=a,1=b,2=c").jobParameter("param").failover(true).misfire(false).jobErrorHandlerType("IGNORE").description("desc").build();
         assertRequiredProperties(actual);
         assertThat(actual.getShardingItemParameters(), is("0=a,1=b,2=c"));
         assertThat(actual.getJobParameter(), is("param"));

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/handler/error/impl/LogJobErrorHandlerTest.java
Patch:
@@ -27,14 +27,14 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(MockitoJUnitRunner.class)
-public final class LogJobExceptionHandlerTest {
+public final class LogJobErrorHandlerTest {
     
     @Mock
     private JobEventCaller caller;
     
     @Test
     public void assertHandleException() {
-        new LogJobExceptionHandler().handleException("test_job", new RuntimeException("test"));
+        new LogJobErrorHandler().handleException("test_job", new RuntimeException("test"));
         verify(caller, atMost(1)).call();
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/SimpleJobExecutorTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.threadpool.impl.CPUUsageJobExecutorServiceHandler;
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.impl.LogJobExceptionHandler;
+import org.apache.shardingsphere.elasticjob.lite.executor.handler.error.impl.LogJobErrorHandler;
 import org.apache.shardingsphere.elasticjob.lite.fixture.ShardingContextsBuilder;
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestSimpleJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.JobCaller;
@@ -68,7 +68,7 @@ public void assertNewExecutorWithDefaultHandlers() throws NoSuchFieldException {
         elasticJobExecutor = new ElasticJobExecutor(new TestSimpleJob(jobCaller), jobFacade, new SimpleJobExecutor());
         assertThat(ReflectionUtils.getFieldValue(elasticJobExecutor, ElasticJobExecutor.class.getDeclaredField("executorService")), 
                 instanceOf(new CPUUsageJobExecutorServiceHandler().createExecutorService("test_job").getClass()));
-        assertThat(ReflectionUtils.getFieldValue(elasticJobExecutor, ElasticJobExecutor.class.getDeclaredField("jobExceptionHandler")), instanceOf(LogJobExceptionHandler.class));
+        assertThat(ReflectionUtils.getFieldValue(elasticJobExecutor, ElasticJobExecutor.class.getDeclaredField("jobErrorHandler")), instanceOf(LogJobErrorHandler.class));
     }
     
     @Test(expected = JobSystemException.class)

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/config/TestDataflowJobConfiguration.java
Patch:
@@ -31,6 +31,6 @@ public final class TestDataflowJobConfiguration implements JobRootConfiguration
     
     @Override
     public JobTypeConfiguration getTypeConfig() {
-        return new DataflowJobConfiguration(JobCoreConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, "0/1 * * * * ?", 3).jobExceptionHandlerType("IGNORE").build(), streamingProcess);
+        return new DataflowJobConfiguration(JobCoreConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, "0/1 * * * * ?", 3).jobErrorHandlerType("IGNORE").build(), streamingProcess);
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/config/TestScriptJobConfiguration.java
Patch:
@@ -29,11 +29,11 @@ public final class TestScriptJobConfiguration implements JobRootConfiguration {
     
     private final String scriptCommandLine;
     
-    private final String jobExceptionHandlerType;
+    private final String jobErrorHandlerType;
     
     @Override
     public JobTypeConfiguration getTypeConfig() {
         return new ScriptJobConfiguration(
-                JobCoreConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, "0/1 * * * * ?", 3).jobExceptionHandlerType(jobExceptionHandlerType).build(), scriptCommandLine);
+                JobCoreConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, "0/1 * * * * ?", 3).jobErrorHandlerType(jobErrorHandlerType).build(), scriptCommandLine);
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/config/TestSimpleJobConfiguration.java
Patch:
@@ -32,14 +32,14 @@ public final class TestSimpleJobConfiguration implements JobRootConfiguration {
     
     private String jobExecutorServiceHandlerType;
     
-    private String jobExceptionHandlerType;
+    private String jobErrorHandlerType;
     
     @Override
     public JobTypeConfiguration getTypeConfig() {
         Builder builder = JobCoreConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, "0/1 * * * * ?", 3)
                 .shardingItemParameters("0=A,1=B,2=C").jobParameter("param").failover(true).misfire(false).description("desc");
         builder.jobExecutorServiceHandlerType(jobExecutorServiceHandlerType);
-        builder.jobExceptionHandlerType(jobExceptionHandlerType);
+        builder.jobErrorHandlerType(jobErrorHandlerType);
         return new SimpleJobConfiguration(builder.build());
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -116,7 +116,7 @@ private LiteJobConfiguration initJobConfig(final Class<? extends ElasticJob> ela
         String cron = "0/1 * * * * ?";
         int totalShardingCount = 3;
         String shardingParameters = "0=A,1=B,2=C";
-        JobCoreConfiguration jobCoreConfig = JobCoreConfiguration.newBuilder(jobName, cron, totalShardingCount).shardingItemParameters(shardingParameters).jobExceptionHandlerType("IGNORE").build();
+        JobCoreConfiguration jobCoreConfig = JobCoreConfiguration.newBuilder(jobName, cron, totalShardingCount).shardingItemParameters(shardingParameters).jobErrorHandlerType("IGNORE").build();
         JobTypeConfiguration jobTypeConfig;
         if (DataflowJob.class.isAssignableFrom(elasticJobClass)) {
             jobTypeConfig = new DataflowJobConfiguration(jobCoreConfig, false);

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -57,7 +57,7 @@ public final class JobSettings implements Serializable {
     
     private String jobShardingStrategyType;
     
-    private String jobExceptionHandlerType;
+    private String jobErrorHandlerType;
     
     private String jobExecutorServiceHandlerType;
     

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -68,7 +68,7 @@ private void buildSimpleJobSettings(final String jobName, final JobSettings resu
         result.setMisfire(liteJobConfig.getTypeConfig().getCoreConfig().isMisfire());
         result.setJobShardingStrategyType(liteJobConfig.getJobShardingStrategyType());
         result.setJobExecutorServiceHandlerType(liteJobConfig.getTypeConfig().getCoreConfig().getJobExecutorServiceHandlerType());
-        result.setJobExceptionHandlerType(liteJobConfig.getTypeConfig().getCoreConfig().getJobExceptionHandlerType());
+        result.setJobErrorHandlerType(liteJobConfig.getTypeConfig().getCoreConfig().getJobErrorHandlerType());
         result.setReconcileIntervalMinutes(liteJobConfig.getReconcileIntervalMinutes());
         result.setDescription(liteJobConfig.getTypeConfig().getCoreConfig().getDescription());
     }

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -84,7 +84,7 @@ private BeanDefinition createJobCoreBeanDefinition(final Element element) {
         jobCoreBeanDefinitionBuilder.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.FAILOVER_ATTRIBUTE));
         jobCoreBeanDefinitionBuilder.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.MISFIRE_ATTRIBUTE));
         jobCoreBeanDefinitionBuilder.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.JOB_EXECUTOR_SERVICE_HANDLER_ATTRIBUTE));
-        jobCoreBeanDefinitionBuilder.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.JOB_EXCEPTION_HANDLER_ATTRIBUTE));
+        jobCoreBeanDefinitionBuilder.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.JOB_ERROR_HANDLER_ATTRIBUTE));
         jobCoreBeanDefinitionBuilder.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.DESCRIPTION_ATTRIBUTE));
         return jobCoreBeanDefinitionBuilder.getBeanDefinition();
     }

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -68,7 +68,7 @@ public final class BaseJobBeanDefinitionParserTag {
     
     public static final String JOB_EXECUTOR_SERVICE_HANDLER_ATTRIBUTE = "job-executor-service-handler";
     
-    public static final String JOB_EXCEPTION_HANDLER_ATTRIBUTE = "job-exception-handler";
+    public static final String JOB_ERROR_HANDLER_ATTRIBUTE = "job-error-handler";
     
     public static final String EVENT_TRACE_RDB_DATA_SOURCE_ATTRIBUTE = "event-trace-rdb-data-source";
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -101,7 +101,7 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
      * Initialize job.
      */
     public void init() {
-        LiteJobConfiguration liteJobConfigFromRegCenter = schedulerFacade.updateJobConfiguration(elasticJob.getClass().getName(), liteJobConfig);
+        LiteJobConfiguration liteJobConfigFromRegCenter = schedulerFacade.updateJobConfiguration(null == elasticJob ? ScriptJob.class.getName() : elasticJob.getClass().getName(), liteJobConfig);
         JobRegistry.getInstance().setCurrentShardingTotalCount(liteJobConfigFromRegCenter.getJobName(), liteJobConfigFromRegCenter.getTypeConfig().getCoreConfig().getShardingTotalCount());
         JobScheduleController jobScheduleController = new JobScheduleController(createScheduler(), createJobDetail(elasticJob), liteJobConfigFromRegCenter.getJobName());
         JobRegistry.getInstance().registerJob(liteJobConfigFromRegCenter.getJobName(), jobScheduleController, regCenter);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/JobExecutorFactoryTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestDataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestSimpleJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.fixture.handler.IgnoreJobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.OtherJob;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.TestDataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.TestSimpleJob;
@@ -50,7 +49,7 @@ public final class JobExecutorFactoryTest {
     
     @Test
     public void assertGetJobExecutorForScriptJob() {
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("test.sh", IgnoreJobExceptionHandler.class));
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestScriptJobConfiguration("test.sh", "IGNORE"));
         assertThat(getJobItemExecutor(JobExecutorFactory.getJobExecutor(null, jobFacade)), instanceOf(ScriptJobExecutor.class));
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/WrongJobExecutorTest.java
Patch:
@@ -45,7 +45,7 @@ public final class WrongJobExecutorTest {
     
     @Before
     public void setUp() {
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration());
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration(null, "THROW"));
         wrongJobExecutor = new ElasticJobExecutor(new TestWrongJob(), jobFacade, new SimpleJobExecutor());
     }
     

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -66,7 +66,7 @@ public final class BaseJobBeanDefinitionParserTag {
     
     public static final String DISTRIBUTED_LISTENER_COMPLETED_TIMEOUT_MILLISECONDS_ATTRIBUTE = "completed-timeout-milliseconds";
     
-    public static final String EXECUTOR_SERVICE_HANDLER_ATTRIBUTE = "executor-service-handler";
+    public static final String JOB_EXECUTOR_SERVICE_HANDLER_ATTRIBUTE = "job-executor-service-handler";
     
     public static final String JOB_EXCEPTION_HANDLER_ATTRIBUTE = "job-exception-handler";
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/JobShardingStrategyFactory.java
Patch:
@@ -34,6 +34,8 @@ public final class JobShardingStrategyFactory {
     
     private static final Map<String, JobShardingStrategy> JOB_SHARDING_STRATEGIES = new LinkedHashMap<>();
     
+    private static final String DEFAULT_JOB_SHARDING_STRATEGY = "AVG_ALLOCATION";
+    
     static {
         for (JobShardingStrategy each : ServiceLoader.load(JobShardingStrategy.class)) {
             JOB_SHARDING_STRATEGIES.put(each.getType(), each);
@@ -48,7 +50,7 @@ public final class JobShardingStrategyFactory {
      */
     public static JobShardingStrategy getStrategy(final String type) {
         if (Strings.isNullOrEmpty(type)) {
-            return JOB_SHARDING_STRATEGIES.values().iterator().next();
+            return JOB_SHARDING_STRATEGIES.get(DEFAULT_JOB_SHARDING_STRATEGY);
         }
         if (!JOB_SHARDING_STRATEGIES.containsKey(type)) {
             throw new JobConfigurationException("Can not find sharding strategy type '%s'.", type);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/JobShardingStrategyFactoryTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.api.strategy;
 
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.impl.AverageAllocationJobShardingStrategy;
+import org.apache.shardingsphere.elasticjob.lite.api.strategy.impl.OdevitySortByNameJobShardingStrategy;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.junit.Test;
 
@@ -38,6 +39,6 @@ public void assertGetStrategyFailureWhenTypeNotFound() {
     
     @Test
     public void assertGetStrategySuccess() {
-        assertThat(JobShardingStrategyFactory.getStrategy("AVG_ALLOCATION"), instanceOf(AverageAllocationJobShardingStrategy.class));
+        assertThat(JobShardingStrategyFactory.getStrategy("ODEVITY"), instanceOf(OdevitySortByNameJobShardingStrategy.class));
     }
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/config/LiteJobConfigurationConstants.java
Patch:
@@ -28,7 +28,7 @@ public final class LiteJobConfigurationConstants {
     
     public static final String MONITOR_PORT = "monitorPort";
     
-    public static final String JOB_SHARDING_STRATEGY_CLASS = "jobShardingStrategyClass";
+    public static final String JOB_SHARDING_STRATEGY_TYPE = "jobShardingStrategyType";
     
     public static final String RECONCILE_INTERVAL_MINUTES = "reconcileIntervalMinutes";
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingService.java
Patch:
@@ -113,7 +113,7 @@ public void shardingIfNecessary() {
         log.debug("Job '{}' sharding begin.", jobName);
         jobNodeStorage.fillEphemeralJobNode(ShardingNode.PROCESSING, "");
         resetShardingInfo(shardingTotalCount);
-        JobShardingStrategy jobShardingStrategy = JobShardingStrategyFactory.getStrategy(liteJobConfig.getJobShardingStrategyClass());
+        JobShardingStrategy jobShardingStrategy = JobShardingStrategyFactory.getStrategy(liteJobConfig.getJobShardingStrategyType());
         jobNodeStorage.executeInTransaction(new PersistShardingInfoTransactionExecutionCallback(jobShardingStrategy.sharding(availableJobInstances, jobName, shardingTotalCount)));
         log.debug("Job '{}' sharding complete.", jobName);
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/RotateServerByNameJobShardingStrategyTest.java
Patch:
@@ -31,7 +31,7 @@
 
 public final class RotateServerByNameJobShardingStrategyTest {
     
-    private RotateServerByNameJobShardingStrategy rotateServerByNameJobShardingStrategy = new RotateServerByNameJobShardingStrategy();
+    private RoundRobinByNameJobShardingStrategy rotateServerByNameJobShardingStrategy = new RoundRobinByNameJobShardingStrategy();
     
     @Test
     public void assertSharding1() {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/LiteJsonConstants.java
Patch:
@@ -31,7 +31,7 @@ public final class LiteJsonConstants {
     private static final String JOB_JSON = "{\"jobName\":\"test_job\",\"jobType\":\"SIMPLE\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"param\",\"failover\":%s,\"misfire\":false,\"description\":\"desc\","
             + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":%s,\"maxTimeDiffSeconds\":%s,"
-            + "\"monitorPort\":8888,\"jobShardingStrategyClass\":\"testClass\",\"disabled\":true,\"overwrite\":true, \"reconcileIntervalMinutes\": 15}";
+            + "\"monitorPort\":8888,\"jobShardingStrategyType\":\"testClass\",\"disabled\":true,\"overwrite\":true, \"reconcileIntervalMinutes\": 15}";
     
     private static final boolean DEFAULT_FAILOVER = true;
     

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -58,7 +58,7 @@ public final class JobSettings implements Serializable {
     
     private boolean misfire;
     
-    private String jobShardingStrategyClass;
+    private String jobShardingStrategyType;
     
     private String description;
     

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -67,7 +67,7 @@ private void buildSimpleJobSettings(final String jobName, final JobSettings resu
         result.setMonitorPort(liteJobConfig.getMonitorPort());
         result.setFailover(liteJobConfig.getTypeConfig().getCoreConfig().isFailover());
         result.setMisfire(liteJobConfig.getTypeConfig().getCoreConfig().isMisfire());
-        result.setJobShardingStrategyClass(liteJobConfig.getJobShardingStrategyClass());
+        result.setJobShardingStrategyType(liteJobConfig.getJobShardingStrategyType());
         result.setDescription(liteJobConfig.getTypeConfig().getCoreConfig().getDescription());
         result.setReconcileIntervalMinutes(liteJobConfig.getReconcileIntervalMinutes());
         result.getJobProperties().put(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER.getKey(),

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/fixture/LifecycleJsonConstants.java
Patch:
@@ -31,18 +31,18 @@ public final class LifecycleJsonConstants {
     private static final String SIMPLE_JOB_JSON = "{\"jobName\":\"%s\","
             + "\"jobType\":\"SIMPLE\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"param\",\"failover\":true,\"misfire\":false,\"description\":\"%s\","
-            + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":false,\"maxTimeDiffSeconds\":1000,\"monitorPort\":8888,\"jobShardingStrategyClass\":\"testClass\","
+            + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":false,\"maxTimeDiffSeconds\":1000,\"monitorPort\":8888,\"jobShardingStrategyType\":\"testClass\","
             + "\"disabled\":true,\"overwrite\":true}";
     
     private static final String DATAFLOW_JOB_JSON = "{\"jobName\":\"test_job\",\"jobType\":\"DATAFLOW\","
             + "\"cron\":\"0/1 * * * * ?\",\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"param\",\"failover\":false,\"misfire\":true,\"description\":\"\","
-            + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":true,\"maxTimeDiffSeconds\":-1,\"monitorPort\":8888,\"jobShardingStrategyClass\":\"\",\"disabled\":false,"
+            + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":true,\"maxTimeDiffSeconds\":-1,\"monitorPort\":8888,\"jobShardingStrategyType\":\"\",\"disabled\":false,"
             + "\"overwrite\":false,\"streamingProcess\":true}";
     
     private static final String SCRIPT_JOB_JSON = "{\"jobName\":\"%s\","
             + "\"jobType\":\"SCRIPT\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"param\",\"failover\":false,\"misfire\":true,\"description\":\"\","
-            + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":true,\"maxTimeDiffSeconds\":-1,\"monitorPort\":8888,\"jobShardingStrategyClass\":\"\","
+            + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":true,\"maxTimeDiffSeconds\":-1,\"monitorPort\":8888,\"jobShardingStrategyType\":\"\","
             + "\"disabled\":false,\"overwrite\":false,\"scriptCommandLine\":\"test.sh\"}";
     
     /**

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImplTest.java
Patch:
@@ -77,7 +77,7 @@ private void assertJobSettings(final JobSettings jobSettings, final String jobTy
         assertThat(jobSettings.getMonitorPort(), is(8888));
         assertFalse(jobSettings.isFailover());
         assertTrue(jobSettings.isMisfire());
-        assertThat(jobSettings.getJobShardingStrategyClass(), is(""));
+        assertThat(jobSettings.getJobShardingStrategyType(), is(""));
         assertThat(jobSettings.getReconcileIntervalMinutes(), is(10));
         jobSettings.getJobProperties().put(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER.getKey(), DefaultExecutorServiceHandler.class.getCanonicalName());
         jobSettings.getJobProperties().put(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.getKey(), DefaultJobExceptionHandler.class.getCanonicalName());

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -70,7 +70,7 @@ private BeanDefinition createLiteJobConfigurationBeanDefinition(final ParserCont
         result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.MONITOR_EXECUTION_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.MAX_TIME_DIFF_SECONDS_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.MONITOR_PORT_ATTRIBUTE));
-        result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.JOB_SHARDING_STRATEGY_CLASS_ATTRIBUTE));
+        result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.JOB_SHARDING_STRATEGY_TYPE_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.RECONCILE_INTERVAL_MINUTES));
         result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.DISABLED_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(BaseJobBeanDefinitionParserTag.OVERWRITE_ATTRIBUTE));

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/common/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -50,7 +50,7 @@ public final class BaseJobBeanDefinitionParserTag {
     
     public static final String MISFIRE_ATTRIBUTE = "misfire";
     
-    public static final String JOB_SHARDING_STRATEGY_CLASS_ATTRIBUTE = "job-sharding-strategy-class";
+    public static final String JOB_SHARDING_STRATEGY_TYPE_ATTRIBUTE = "job-sharding-strategy-type";
     
     public static final String DESCRIPTION_ATTRIBUTE = "description";
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -102,7 +102,7 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
      * Initialize job.
      */
     public void init() {
-        LiteJobConfiguration liteJobConfigFromRegCenter = schedulerFacade.updateJobConfiguration(liteJobConfig);
+        LiteJobConfiguration liteJobConfigFromRegCenter = schedulerFacade.updateJobConfiguration(elasticJob.getClass().getName(), liteJobConfig);
         JobRegistry.getInstance().setCurrentShardingTotalCount(liteJobConfigFromRegCenter.getJobName(), liteJobConfigFromRegCenter.getTypeConfig().getCoreConfig().getShardingTotalCount());
         JobScheduleController jobScheduleController = new JobScheduleController(createScheduler(), createJobDetail(elasticJob), liteJobConfigFromRegCenter.getJobName());
         JobRegistry.getInstance().registerJob(liteJobConfigFromRegCenter.getJobName(), jobScheduleController, regCenter);

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/config/dataflow/DataflowJobConfiguration.java
Patch:
@@ -34,7 +34,5 @@ public final class DataflowJobConfiguration implements JobTypeConfiguration {
     
     private final JobType jobType = JobType.DATAFLOW;
     
-    private final String jobClass;
-    
     private final boolean streamingProcess;
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/config/script/ScriptJobConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.JobType;
-import org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob;
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.JobTypeConfiguration;
 
@@ -35,7 +34,5 @@ public final class ScriptJobConfiguration implements JobTypeConfiguration {
     
     private final JobType jobType = JobType.SCRIPT;
     
-    private final String jobClass = ScriptJob.class.getCanonicalName();
-    
     private final String scriptCommandLine;
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/config/simple/SimpleJobConfiguration.java
Patch:
@@ -33,6 +33,4 @@ public final class SimpleJobConfiguration implements JobTypeConfiguration {
     private final JobCoreConfiguration coreConfig;
     
     private final JobType jobType = JobType.SIMPLE;
-    
-    private final String jobClass;
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/SchedulerFacade.java
Patch:
@@ -94,11 +94,12 @@ public JobTriggerListener newJobTriggerListener() {
     /**
      * Update job configuration.
      *
+     * @param jobClassName job class name
      * @param liteJobConfig job configuration to be updated
      * @return updated job configuration
      */
-    public LiteJobConfiguration updateJobConfiguration(final LiteJobConfiguration liteJobConfig) {
-        configService.persist(liteJobConfig);
+    public LiteJobConfiguration updateJobConfiguration(final String jobClassName, final LiteJobConfiguration liteJobConfig) {
+        configService.persist(jobClassName, liteJobConfig);
         return configService.load(false);
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/JobSchedulerTest.java
Patch:
@@ -57,8 +57,7 @@ public final class JobSchedulerTest {
     @Before
     public void initMocks() throws NoSuchFieldException {
         JobRegistry.getInstance().addJobInstance("test_job", new JobInstance("127.0.0.1@-@0"));
-        liteJobConfig = LiteJobConfiguration.newBuilder(
-                new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "* * 0/10 * * ? 2050", 3).build(), TestSimpleJob.class.getCanonicalName())).build();
+        liteJobConfig = LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "* * 0/10 * * ? 2050", 3).build())).build();
         jobScheduler = new JobScheduler(regCenter, new TestSimpleJob(), liteJobConfig);
         MockitoAnnotations.initMocks(this);
         ReflectionUtils.setFieldValue(jobScheduler, "regCenter", regCenter);
@@ -67,7 +66,7 @@ public void initMocks() throws NoSuchFieldException {
     
     @Test
     public void assertInit() throws NoSuchFieldException, SchedulerException {
-        when(schedulerFacade.updateJobConfiguration(liteJobConfig)).thenReturn(liteJobConfig);
+        when(schedulerFacade.updateJobConfiguration(TestSimpleJob.class.getName(), liteJobConfig)).thenReturn(liteJobConfig);
         when(schedulerFacade.newJobTriggerListener()).thenReturn(new JobTriggerListener(null, null));
         jobScheduler.init();
         verify(schedulerFacade).registerStartUpInfo(true);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/APIJsonConstants.java
Patch:
@@ -26,15 +26,15 @@ public final class APIJsonConstants {
     
     private static final String JOB_PROPS_JSON = "{\"job_exception_handler\":\"%s\",\"executor_service_handler\":\"" + DefaultExecutorServiceHandler.class.getCanonicalName() + "\"}";
     
-    private static final String SIMPLE_JOB_JSON = "{\"jobName\":\"test_job\",\"jobClass\":\"org.apache.shardingsphere.elasticjob.lite.fixture.job.TestSimpleJob\",\"jobType\":\"SIMPLE\","
+    private static final String SIMPLE_JOB_JSON = "{\"jobName\":\"test_job\",\"jobType\":\"SIMPLE\","
             + "\"cron\":\"0/1 * * * * ?\",\"shardingTotalCount\":3,\"shardingItemParameters\":\"0\\u003dA,1\\u003dB,2\\u003dC\",\"jobParameter\":\"param\",\"failover\":true,\"misfire\":false,"
             + "\"description\":\"desc\",\"jobProperties\":%s}";
     
-    private static final String DATAFLOW_JOB_JSON = "{\"jobName\":\"test_job\",\"jobClass\":\"org.apache.shardingsphere.elasticjob.lite.fixture.job.TestDataflowJob\",\"jobType\":\"DATAFLOW\","
+    private static final String DATAFLOW_JOB_JSON = "{\"jobName\":\"test_job\",\"jobType\":\"DATAFLOW\","
             + "\"cron\":\"0/1 * * * * ?\",\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"\",\"failover\":false,\"misfire\":true,\"description\":\"\","
             + "\"jobProperties\":%s,\"streamingProcess\":true}";
     
-    private static final String SCRIPT_JOB_JSON = "{\"jobName\":\"test_job\",\"jobClass\":\"org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob\",\"jobType\":\"SCRIPT\","
+    private static final String SCRIPT_JOB_JSON = "{\"jobName\":\"test_job\",\"jobType\":\"SCRIPT\","
             + "\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"\",\"failover\":false,\"misfire\":true,\"description\":\"\","
             + "\"jobProperties\":%s,\"scriptCommandLine\":\"test.sh\"}";

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/config/TestDataflowJobConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobProperties.JobPropertiesEnum;
 import org.apache.shardingsphere.elasticjob.lite.fixture.ShardingContextsBuilder;
 import org.apache.shardingsphere.elasticjob.lite.fixture.handler.IgnoreJobExceptionHandler;
-import org.apache.shardingsphere.elasticjob.lite.fixture.job.TestDataflowJob;
 
 @RequiredArgsConstructor
 public final class TestDataflowJobConfiguration implements JobRootConfiguration {
@@ -35,7 +34,6 @@ public final class TestDataflowJobConfiguration implements JobRootConfiguration
     @Override
     public JobTypeConfiguration getTypeConfig() {
         return new DataflowJobConfiguration(JobCoreConfiguration.newBuilder(ShardingContextsBuilder.JOB_NAME, "0/1 * * * * ?", 3)
-                .jobProperties(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.getKey(), IgnoreJobExceptionHandler.class.getCanonicalName()).build(), 
-                TestDataflowJob.class.getCanonicalName(), streamingProcess);
+                .jobProperties(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.getKey(), IgnoreJobExceptionHandler.class.getCanonicalName()).build(), streamingProcess);
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/config/TestSimpleJobConfiguration.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobProperties.JobPropertiesEnum;
 import org.apache.shardingsphere.elasticjob.lite.fixture.ShardingContextsBuilder;
 import org.apache.shardingsphere.elasticjob.lite.fixture.handler.ThrowJobExceptionHandler;
-import org.apache.shardingsphere.elasticjob.lite.fixture.job.TestSimpleJob;
 
 @NoArgsConstructor
 public final class TestSimpleJobConfiguration implements JobRootConfiguration {
@@ -52,6 +51,6 @@ public JobTypeConfiguration getTypeConfig() {
         if (null != executorServiceHandlerClassName) {
             builder.jobProperties(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER.getKey(), executorServiceHandlerClassName);
         }
-        return new SimpleJobConfiguration(builder.build(), TestSimpleJob.class.getCanonicalName());
+        return new SimpleJobConfiguration(builder.build());
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -122,11 +122,11 @@ private LiteJobConfiguration initJobConfig(final Class<? extends ElasticJob> ela
                 .jobProperties(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.getKey(), IgnoreJobExceptionHandler.class.getCanonicalName()).build();
         JobTypeConfiguration jobTypeConfig;
         if (DataflowJob.class.isAssignableFrom(elasticJobClass)) {
-            jobTypeConfig = new DataflowJobConfiguration(jobCoreConfig, elasticJobClass.getCanonicalName(), false);
+            jobTypeConfig = new DataflowJobConfiguration(jobCoreConfig, false);
         } else if (ScriptJob.class.isAssignableFrom(elasticJobClass)) {
             jobTypeConfig = new ScriptJobConfiguration(jobCoreConfig, AbstractBaseStdJobTest.class.getResource("/script/test.sh").getPath());
         } else {
-            jobTypeConfig = new SimpleJobConfiguration(jobCoreConfig, elasticJobClass.getCanonicalName());
+            jobTypeConfig = new SimpleJobConfiguration(jobCoreConfig);
         }
         return LiteJobConfiguration.newBuilder(jobTypeConfig).monitorPort(monitorPort).disabled(disabled).overwrite(true).build();
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileServiceTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
@@ -59,8 +58,8 @@ public void setup() throws NoSuchFieldException {
     
     @Test
     public void assertReconcile() {
-        Mockito.when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
-                TestSimpleJob.class.getCanonicalName())).reconcileIntervalMinutes(1).build());
+        Mockito.when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(
+                new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build())).reconcileIntervalMinutes(1).build());
         Mockito.when(shardingService.isNeedSharding()).thenReturn(false);
         Mockito.when(shardingService.hasShardingInfoInOfflineServers()).thenReturn(true);
         Mockito.when(leaderService.isLeaderUntilBlock()).thenReturn(true);

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -38,8 +38,6 @@ public final class JobSettings implements Serializable {
     
     private String jobType;
     
-    private String jobClass;
-    
     private String cron;
     
     private int shardingTotalCount;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -58,7 +58,6 @@ public JobSettings getJobSettings(final String jobName) {
     private void buildSimpleJobSettings(final String jobName, final JobSettings result, final LiteJobConfiguration liteJobConfig) {
         result.setJobName(jobName);
         result.setJobType(liteJobConfig.getTypeConfig().getJobType().name());
-        result.setJobClass(liteJobConfig.getTypeConfig().getJobClass());
         result.setShardingTotalCount(liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount());
         result.setCron(liteJobConfig.getTypeConfig().getCoreConfig().getCron());
         result.setShardingItemParameters(liteJobConfig.getTypeConfig().getCoreConfig().getShardingItemParameters());

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/fixture/LifecycleJsonConstants.java
Patch:
@@ -28,18 +28,18 @@ public final class LifecycleJsonConstants {
     private static final String JOB_PROPS_JSON = "{\"job_exception_handler\":\"" + DefaultJobExceptionHandler.class.getCanonicalName() + "\","
             + "\"executor_service_handler\":\"" + DefaultExecutorServiceHandler.class.getCanonicalName() + "\"}";
     
-    private static final String SIMPLE_JOB_JSON = "{\"jobName\":\"%s\",\"jobClass\":\"org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob\","
+    private static final String SIMPLE_JOB_JSON = "{\"jobName\":\"%s\","
             + "\"jobType\":\"SIMPLE\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"param\",\"failover\":true,\"misfire\":false,\"description\":\"%s\","
             + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":false,\"maxTimeDiffSeconds\":1000,\"monitorPort\":8888,\"jobShardingStrategyClass\":\"testClass\","
             + "\"disabled\":true,\"overwrite\":true}";
     
-    private static final String DATAFLOW_JOB_JSON = "{\"jobName\":\"test_job\",\"jobClass\":\"org.apache.shardingsphere.elasticjob.lite.fixture.TestDataflowJob\",\"jobType\":\"DATAFLOW\","
+    private static final String DATAFLOW_JOB_JSON = "{\"jobName\":\"test_job\",\"jobType\":\"DATAFLOW\","
             + "\"cron\":\"0/1 * * * * ?\",\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"param\",\"failover\":false,\"misfire\":true,\"description\":\"\","
             + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":true,\"maxTimeDiffSeconds\":-1,\"monitorPort\":8888,\"jobShardingStrategyClass\":\"\",\"disabled\":false,"
             + "\"overwrite\":false,\"streamingProcess\":true}";
     
-    private static final String SCRIPT_JOB_JSON = "{\"jobName\":\"%s\",\"jobClass\":\"org.apache.shardingsphere.elasticjob.lite.api.script.ScriptJob\","
+    private static final String SCRIPT_JOB_JSON = "{\"jobName\":\"%s\","
             + "\"jobType\":\"SCRIPT\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"param\",\"failover\":false,\"misfire\":true,\"description\":\"\","
             + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":true,\"maxTimeDiffSeconds\":-1,\"monitorPort\":8888,\"jobShardingStrategyClass\":\"\","

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImplTest.java
Patch:
@@ -68,7 +68,6 @@ public void assertGetScriptJobSettings() {
     private void assertJobSettings(final JobSettings jobSettings, final String jobType, final String className) {
         assertThat(jobSettings.getJobName(), is("test_job"));
         assertThat(jobSettings.getJobType(), is(jobType));
-        assertThat(jobSettings.getJobClass(), is(className));
         assertThat(jobSettings.getShardingTotalCount(), is(3));
         assertThat(jobSettings.getCron(), is("0/1 * * * * ?"));
         assertThat(jobSettings.getShardingItemParameters(), is(""));
@@ -96,7 +95,6 @@ public void assertUpdateJobSettings() {
         when(regCenter.get("/test_job/config")).thenReturn(LifecycleJsonConstants.getDataflowJobJson());
         JobSettings jobSettings = new JobSettings();
         jobSettings.setJobName("test_job");
-        jobSettings.setJobClass("org.apache.shardingsphere.elasticjob.lite.fixture.TestDataflowJob");
         jobSettings.setShardingTotalCount(10);
         jobSettings.setMaxTimeDiffSeconds(-1);
         jobSettings.setMonitorExecution(true);
@@ -108,7 +106,7 @@ public void assertUpdateJobSettings() {
         jobSettings.getJobProperties().put(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.getKey(), DefaultJobExceptionHandler.class.getCanonicalName());
         jobSettings.setReconcileIntervalMinutes(70);
         jobSettingsAPI.updateJobSettings(jobSettings);
-        verify(regCenter).update("/test_job/config", "{\"jobName\":\"test_job\",\"jobClass\":\"org.apache.shardingsphere.elasticjob.lite.fixture.TestDataflowJob\","
+        verify(regCenter).update("/test_job/config", "{\"jobName\":\"test_job\","
                 + "\"cron\":\"0/1 * * * * ?\",\"shardingTotalCount\":10,\"monitorExecution\":true,\"streamingProcess\":true,"
                 + "\"maxTimeDiffSeconds\":-1,\"monitorPort\":-1,\"failover\":false,\"misfire\":true,"
                 + "\"jobProperties\":{\"executor_service_handler\":\"" + DefaultExecutorServiceHandler.class.getCanonicalName() + "\","

File: examples/elastic-job-example-lite-java/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/JavaMain.java
Patch:
@@ -88,13 +88,13 @@ private static DataSource setUpEventTraceDataSource() {
     
     private static void setUpSimpleJob(final CoordinatorRegistryCenter regCenter, final JobEventConfiguration jobEventConfig) {
         JobCoreConfiguration coreConfig = JobCoreConfiguration.newBuilder("javaSimpleJob", "0/5 * * * * ?", 3).shardingItemParameters("0=Beijing,1=Shanghai,2=Guangzhou").build();
-        SimpleJobConfiguration simpleJobConfig = new SimpleJobConfiguration(coreConfig, JavaSimpleJob.class.getCanonicalName());
+        SimpleJobConfiguration simpleJobConfig = new SimpleJobConfiguration(coreConfig);
         new JobScheduler(regCenter, new JavaSimpleJob(), LiteJobConfiguration.newBuilder(simpleJobConfig).build(), jobEventConfig).init();
     }
     
     private static void setUpDataflowJob(final CoordinatorRegistryCenter regCenter, final JobEventConfiguration jobEventConfig) {
         JobCoreConfiguration coreConfig = JobCoreConfiguration.newBuilder("javaDataflowElasticJob", "0/5 * * * * ?", 3).shardingItemParameters("0=Beijing,1=Shanghai,2=Guangzhou").build();
-        DataflowJobConfiguration dataflowJobConfig = new DataflowJobConfiguration(coreConfig, JavaDataflowJob.class.getCanonicalName(), true);
+        DataflowJobConfiguration dataflowJobConfig = new DataflowJobConfiguration(coreConfig, true);
         new JobScheduler(regCenter, new JavaDataflowJob(), LiteJobConfiguration.newBuilder(dataflowJobConfig).build(), jobEventConfig).init();
     }
     

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/DataflowJobConfig.java
Patch:
@@ -53,6 +53,6 @@ public JobScheduler dataflowJobScheduler(final DataflowJob dataflowJob, @Value("
     
     private LiteJobConfiguration getLiteJobConfiguration(final Class<? extends DataflowJob> jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) {
         return LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder(
-                jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build(), jobClass.getCanonicalName(), true)).overwrite(true).build();
+                jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build(), true)).overwrite(true).build();
     }
 }

File: examples/elastic-job-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/config/SimpleJobConfig.java
Patch:
@@ -52,7 +52,7 @@ public JobScheduler simpleJobScheduler(final SimpleJob simpleJob, @Value("${simp
     }
     
     private LiteJobConfiguration getLiteJobConfiguration(final Class<? extends SimpleJob> jobClass, final String cron, final int shardingTotalCount, final String shardingItemParameters) {
-        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(
-                jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build(), jobClass.getCanonicalName())).overwrite(true).build();
+        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(
+                JobCoreConfiguration.newBuilder(jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build())).overwrite(true).build();
     }
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -139,7 +139,7 @@ private JobDetail createJobDetail(final ElasticJob elasticJob) {
         result.getJobDataMap().put(JOB_FACADE_DATA_MAP_KEY, jobFacade);
         if (liteJobConfig.getTypeConfig() instanceof JobInstanceProvided && null != ((JobInstanceProvided) liteJobConfig.getTypeConfig()).getJobInstance()) {
             result.getJobDataMap().put(ELASTIC_JOB_DATA_MAP_KEY, ((JobInstanceProvided) liteJobConfig.getTypeConfig()).getJobInstance());
-        } else if (!elasticJob.getClass().getName().equals(ScriptJob.class.getName())) {
+        } else if (null != elasticJob && !elasticJob.getClass().getName().equals(ScriptJob.class.getName())) {
             result.getJobDataMap().put(ELASTIC_JOB_DATA_MAP_KEY, elasticJob);
         }
         return result;

File: examples/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/dataflow/JavaDataflowJob.java
Patch:
@@ -17,11 +17,11 @@
 
 package com.dangdang.ddframe.job.example.job.dataflow;
 
-import com.dangdang.ddframe.job.api.ShardingContext;
-import com.dangdang.ddframe.job.api.dataflow.DataflowJob;
 import com.dangdang.ddframe.job.example.fixture.entity.Foo;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepository;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepositoryFactory;
+import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;

File: examples/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/dataflow/SpringDataflowJob.java
Patch:
@@ -17,10 +17,10 @@
 
 package com.dangdang.ddframe.job.example.job.dataflow;
 
-import com.dangdang.ddframe.job.api.ShardingContext;
-import com.dangdang.ddframe.job.api.dataflow.DataflowJob;
 import com.dangdang.ddframe.job.example.fixture.entity.Foo;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepository;
+import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 
 import javax.annotation.Resource;
 import java.text.SimpleDateFormat;

File: examples/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/simple/JavaSimpleJob.java
Patch:
@@ -17,11 +17,11 @@
 
 package com.dangdang.ddframe.job.example.job.simple;
 
-import com.dangdang.ddframe.job.api.ShardingContext;
-import com.dangdang.ddframe.job.api.simple.SimpleJob;
 import com.dangdang.ddframe.job.example.fixture.entity.Foo;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepository;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepositoryFactory;
+import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;

File: examples/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/simple/SpringSimpleJob.java
Patch:
@@ -17,10 +17,10 @@
 
 package com.dangdang.ddframe.job.example.job.simple;
 
-import com.dangdang.ddframe.job.api.ShardingContext;
-import com.dangdang.ddframe.job.api.simple.SimpleJob;
 import com.dangdang.ddframe.job.example.fixture.entity.Foo;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepository;
+import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
+import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 
 import javax.annotation.Resource;
 import java.text.SimpleDateFormat;

File: examples/elastic-job-example-lite-springboot/src/main/java/com/dangdang/ddframe/job/example/config/RegistryCenterConfig.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.example.config;
 
-import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperConfiguration;
-import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;
+import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.context.annotation.Bean;

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/restful/JobOperationRESTfulAPI.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ShardingInfo;
 
 import javax.ws.rs.Consumes;
-import javax.ws.rs.DELETE;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
@@ -141,8 +140,8 @@ public void disableSharding(@PathParam("jobName") final String jobName, @PathPar
      * @param jobName job name
      * @param item sharding item
      */
-    @DELETE
-    @Path("/{jobName}/sharding/{item}/disable")
+    @POST
+    @Path("/{jobName}/sharding/{item}/enable")
     @Consumes(MediaType.APPLICATION_JSON)
     public void enableSharding(@PathParam("jobName") final String jobName, @PathParam("item") final String item) {
         jobAPIService.getShardingOperateAPI().enable(jobName, item);

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/restful/ServerOperationRESTfulAPI.java
Patch:
@@ -136,8 +136,8 @@ public void disableServerJob(@PathParam("serverIp") final String serverIp, @Path
      * @param serverIp server IP address
      * @param jobName job name
      */
-    @DELETE
-    @Path("/{serverIp}/jobs/{jobName}/disable")
+    @POST
+    @Path("/{serverIp}/jobs/{jobName}/enable")
     public void enableServerJob(@PathParam("serverIp") final String serverIp, @PathParam("jobName") final String jobName) {
         jobAPIService.getJobOperatorAPI().enable(jobName, serverIp);
     }

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/restful/JobOperationRESTfulAPI.java
Patch:
@@ -90,8 +90,8 @@ public void disableJob(@PathParam("jobName") final String jobName) {
      *
      * @param jobName job name
      */
-    @DELETE
-    @Path("/{jobName}/disable")
+    @POST
+    @Path("/{jobName}/enable")
     @Consumes(MediaType.APPLICATION_JSON)
     public void enableJob(@PathParam("jobName") final String jobName) {
         jobAPIService.getJobOperatorAPI().enable(jobName, null);

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/restful/ServerOperationRESTfulAPI.java
Patch:
@@ -77,8 +77,8 @@ public void disableServer(@PathParam("serverIp") final String serverIp) {
      *
      * @param serverIp server IP address
      */
-    @DELETE
-    @Path("/{serverIp}/disable")
+    @POST
+    @Path("/{serverIp}/enable")
     public void enableServer(@PathParam("serverIp") final String serverIp) {
         jobAPIService.getJobOperatorAPI().enable(null, serverIp);
     }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/OdevitySortByNameJobShardingStrategy.java
Patch:
@@ -29,7 +29,7 @@
  * 
  * <p>
  * IP address asc if job name' hashcode is odd;
- * IP address asc if job name' hashcode is even.
+ * IP address desc if job name' hashcode is even.
  * Used to average assign to job server.
  * 
  * For example: 

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/filter/GlobalConfigurationFilter.java
Patch:
@@ -82,7 +82,7 @@ private void loadActivatedRegCenter(final HttpSession httpSession) {
     private boolean setRegistryCenterNameToSession(final RegistryCenterConfiguration regCenterConfig, final HttpSession session) {
         session.setAttribute(RegistryCenterRESTfulAPI.REG_CENTER_CONFIG_KEY, regCenterConfig);
         try {
-            RegistryCenterFactory.createCoordinatorRegistryCenter(regCenterConfig.getZkAddressList(), regCenterConfig.getNamespace(), Optional.fromNullable(regCenterConfig.getDigest()));
+            RegistryCenterFactory.createCoordinatorRegistryCenter(regCenterConfig.getZkAddressList(), regCenterConfig.getNamespace(), regCenterConfig.getDigest());
             SessionRegistryCenterConfiguration.setRegistryCenterConfiguration((RegistryCenterConfiguration) session.getAttribute(RegistryCenterRESTfulAPI.REG_CENTER_CONFIG_KEY));
         } catch (final RegException ex) {
             return false;

File: elastic-job-lite-console/src/main/java/org/apache/shardingsphere/elasticjob/lite/console/restful/config/RegistryCenterRESTfulAPI.java
Patch:
@@ -120,7 +120,7 @@ public boolean connect(final RegistryCenterConfiguration config, final @Context
     private boolean setRegistryCenterNameToSession(final RegistryCenterConfiguration regCenterConfig, final HttpSession session) {
         session.setAttribute(REG_CENTER_CONFIG_KEY, regCenterConfig);
         try {
-            RegistryCenterFactory.createCoordinatorRegistryCenter(regCenterConfig.getZkAddressList(), regCenterConfig.getNamespace(), Optional.fromNullable(regCenterConfig.getDigest()));
+            RegistryCenterFactory.createCoordinatorRegistryCenter(regCenterConfig.getZkAddressList(), regCenterConfig.getNamespace(), regCenterConfig.getDigest());
             SessionRegistryCenterConfiguration.setRegistryCenterConfiguration((RegistryCenterConfiguration) session.getAttribute(REG_CENTER_CONFIG_KEY));
         } catch (final RegException ex) {
             return false;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api;
 
-import com.google.common.base.Optional;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.AbstractDistributeOnceElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
@@ -45,6 +44,7 @@
 
 import java.util.Arrays;
 import java.util.List;
+import java.util.Optional;
 import java.util.Properties;
 
 /**
@@ -131,7 +131,7 @@ private JobDetail createJobDetail(final String jobClass) {
     }
     
     protected Optional<ElasticJob> createElasticJobInstance() {
-        return Optional.absent();
+        return Optional.empty();
     }
     
     private Scheduler createScheduler() {

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/JobShardingStrategy.java
Patch:
@@ -31,7 +31,7 @@ public interface JobShardingStrategy {
      * @param jobInstances all job instances which participate in sharding
      * @param jobName job name
      * @param shardingTotalCount sharding total count
-     * @return sharding reuslt
+     * @return sharding result
      */
     Map<JobInstance, List<Integer>> sharding(List<JobInstance> jobInstances, String jobName, int shardingTotalCount);
 }

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/AbstractJobListener.java
Patch:
@@ -30,7 +30,7 @@
 public abstract class AbstractJobListener implements TreeCacheListener {
     
     @Override
-    public final void childEvent(final CuratorFramework client, final TreeCacheEvent event) throws Exception {
+    public final void childEvent(final CuratorFramework client, final TreeCacheEvent event) {
         ChildData childData = event.getData();
         if (null == childData) {
             return;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionContextService.java
Patch:
@@ -61,7 +61,7 @@ public ShardingContexts getJobShardingContext(final List<Integer> shardingItems)
         removeRunningIfMonitorExecution(liteJobConfig.isMonitorExecution(), shardingItems);
         if (shardingItems.isEmpty()) {
             return new ShardingContexts(buildTaskId(liteJobConfig, shardingItems), liteJobConfig.getJobName(), liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount(), 
-                    liteJobConfig.getTypeConfig().getCoreConfig().getJobParameter(), Collections.<Integer, String>emptyMap());
+                    liteJobConfig.getTypeConfig().getCoreConfig().getJobParameter(), Collections.emptyMap());
         }
         Map<Integer, String> shardingItemParameterMap = new ShardingItemParameters(liteJobConfig.getTypeConfig().getCoreConfig().getShardingItemParameters()).getMap();
         return new ShardingContexts(buildTaskId(liteJobConfig, shardingItems), liteJobConfig.getJobName(), liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount(), 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/listener/DistributeOnceElasticJobListenerTest.java
Patch:
@@ -54,7 +54,7 @@ public final class DistributeOnceElasticJobListenerTest {
     private TestDistributeOnceElasticJobListener distributeOnceElasticJobListener;
     
     @Before
-    public void setUp() throws NoSuchFieldException {
+    public void setUp() {
         MockitoAnnotations.initMocks(this);
         distributeOnceElasticJobListener = new TestDistributeOnceElasticJobListener(elasticJobListenerCaller);
         ReflectionUtils.setFieldValue(distributeOnceElasticJobListener, ReflectionUtils.getFieldWithName(AbstractDistributeOnceElasticJobListener.class, "guaranteeService", false), guaranteeService);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/AverageAllocationJobShardingStrategyTest.java
Patch:
@@ -36,7 +36,7 @@ public final class AverageAllocationJobShardingStrategyTest {
     
     @Test
     public void shardingForZeroServer() {
-        assertThat(jobShardingStrategy.sharding(Collections.<JobInstance>emptyList(), "test_job", 3), is(Collections.<JobInstance, List<Integer>>emptyMap()));
+        assertThat(jobShardingStrategy.sharding(Collections.emptyList(), "test_job", 3), is(Collections.<JobInstance, List<Integer>>emptyMap()));
     }
     
     @Test
@@ -51,7 +51,7 @@ public void shardingForServersMoreThanShardingCount() {
         Map<JobInstance, List<Integer>> expected = new LinkedHashMap<>(3, 1);
         expected.put(new JobInstance("host0@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host1@-@0"), Collections.singletonList(1));
-        expected.put(new JobInstance("host2@-@0"), Collections.<Integer>emptyList());
+        expected.put(new JobInstance("host2@-@0"), Collections.emptyList());
         assertThat(jobShardingStrategy.sharding(Arrays.asList(new JobInstance("host0@-@0"), new JobInstance("host1@-@0"), new JobInstance("host2@-@0")), "test_job", 2), is(expected));
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/OdevitySortByNameJobShardingStrategyTest.java
Patch:
@@ -38,7 +38,7 @@ public void assertShardingByAsc() {
         Map<JobInstance, List<Integer>> expected = new HashMap<>();
         expected.put(new JobInstance("host0@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host1@-@0"), Collections.singletonList(1));
-        expected.put(new JobInstance("host2@-@0"), Collections.<Integer>emptyList());
+        expected.put(new JobInstance("host2@-@0"), Collections.emptyList());
         assertThat(odevitySortByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance("host0@-@0"), new JobInstance("host1@-@0"), new JobInstance("host2@-@0")), "1", 2), is(expected));
     }
     
@@ -47,7 +47,7 @@ public void assertShardingByDesc() {
         Map<JobInstance, List<Integer>> expected = new HashMap<>();
         expected.put(new JobInstance("host2@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host1@-@0"), Collections.singletonList(1));
-        expected.put(new JobInstance("host0@-@0"), Collections.<Integer>emptyList());
+        expected.put(new JobInstance("host0@-@0"), Collections.emptyList());
         assertThat(odevitySortByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance("host0@-@0"), new JobInstance("host1@-@0"), new JobInstance("host2@-@0")), "0", 2), is(expected));
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/RotateServerByNameJobShardingStrategyTest.java
Patch:
@@ -38,7 +38,7 @@ public void assertSharding1() {
         Map<JobInstance, List<Integer>> expected = new HashMap<>();
         expected.put(new JobInstance("host1@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host2@-@0"), Collections.singletonList(1));
-        expected.put(new JobInstance("host0@-@0"), Collections.<Integer>emptyList());
+        expected.put(new JobInstance("host0@-@0"), Collections.emptyList());
         assertThat(rotateServerByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance("host0@-@0"), new JobInstance("host1@-@0"), new JobInstance("host2@-@0")), "1", 2), is(expected));
     }
     
@@ -47,7 +47,7 @@ public void assertSharding2() {
         Map<JobInstance, List<Integer>> expected = new HashMap<>();
         expected.put(new JobInstance("host2@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host0@-@0"), Collections.singletonList(1));
-        expected.put(new JobInstance("host1@-@0"), Collections.<Integer>emptyList());
+        expected.put(new JobInstance("host1@-@0"), Collections.emptyList());
         assertThat(rotateServerByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance("host0@-@0"), new JobInstance("host1@-@0"), new JobInstance("host2@-@0")), "2", 2), is(expected));
     }
     
@@ -56,7 +56,7 @@ public void assertSharding3() {
         Map<JobInstance, List<Integer>> expected = new HashMap<>();
         expected.put(new JobInstance("host0@-@0"), Collections.singletonList(0));
         expected.put(new JobInstance("host1@-@0"), Collections.singletonList(1));
-        expected.put(new JobInstance("host2@-@0"), Collections.<Integer>emptyList());
+        expected.put(new JobInstance("host2@-@0"), Collections.emptyList());
         assertThat(rotateServerByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance("host0@-@0"), new JobInstance("host1@-@0"), new JobInstance("host2@-@0")), "3", 2), is(expected));
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/event/JobEventBusTest.java
Patch:
@@ -73,6 +73,6 @@ public void assertPostWithoutListener() throws NoSuchFieldException {
     }
     
     private void assertIsRegistered(final boolean actual) throws NoSuchFieldException {
-        assertThat((boolean) ReflectionUtils.getFieldValue(jobEventBus, JobEventBus.class.getDeclaredField("isRegistered")), is(actual));
+        assertThat(ReflectionUtils.getFieldValue(jobEventBus, JobEventBus.class.getDeclaredField("isRegistered")), is(actual));
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/event/rdb/JobEventRdbConfigurationTest.java
Patch:
@@ -34,7 +34,7 @@ public void assertGetDataSource() {
         dataSource.setUrl("jdbc:h2:mem:job_event_storage");
         dataSource.setUsername("sa");
         dataSource.setPassword("");
-        assertThat((BasicDataSource) (new JobEventRdbConfiguration(dataSource).getDataSource()), is(dataSource));
+        assertThat(new JobEventRdbConfiguration(dataSource).getDataSource(), is(dataSource));
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/SimpleJobExecutorTest.java
Patch:
@@ -57,7 +57,7 @@ public final class SimpleJobExecutorTest {
     private SimpleJobExecutor simpleJobExecutor;
     
     @Before
-    public void setUp() throws NoSuchFieldException {
+    public void setUp() {
         when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration());
         simpleJobExecutor = new SimpleJobExecutor(new TestSimpleJob(jobCaller), jobFacade);
     }
@@ -85,7 +85,7 @@ public void assertExecuteWhenCheckMaxTimeDiffSecondsIntolerable() throws JobExec
     
     @Test
     public void assertExecuteWhenPreviousJobStillRunning() throws JobExecutionEnvironmentException {
-        ShardingContexts shardingContexts = new ShardingContexts("fake_task_id", "test_job", 10, "", Collections.<Integer, String>emptyMap());
+        ShardingContexts shardingContexts = new ShardingContexts("fake_task_id", "test_job", 10, "", Collections.emptyMap());
         when(jobFacade.getShardingContexts()).thenReturn(shardingContexts);
         when(jobFacade.misfireIfRunning(shardingContexts.getShardingItemParameters().keySet())).thenReturn(true);
         simpleJobExecutor.execute();
@@ -100,7 +100,7 @@ public void assertExecuteWhenPreviousJobStillRunning() throws JobExecutionEnviro
     
     @Test
     public void assertExecuteWhenShardingItemsIsEmpty() throws JobExecutionEnvironmentException {
-        ShardingContexts shardingContexts = new ShardingContexts("fake_task_id", "test_job", 10, "", Collections.<Integer, String>emptyMap());
+        ShardingContexts shardingContexts = new ShardingContexts("fake_task_id", "test_job", 10, "", Collections.emptyMap());
         ElasticJobVerify.prepareForIsNotMisfire(jobFacade, shardingContexts);
         simpleJobExecutor.execute();
         verify(jobFacade).postJobStatusTraceEvent(shardingContexts.getTaskId(), State.TASK_STAGING, "Job 'test_job' execute begin.");

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/WrongJobExecutorTest.java
Patch:
@@ -43,13 +43,13 @@ public final class WrongJobExecutorTest {
     private SimpleJobExecutor wrongSimpleJobExecutor;
     
     @Before
-    public void setUp() throws NoSuchFieldException {
+    public void setUp() {
         when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration());
         wrongSimpleJobExecutor = new SimpleJobExecutor(new TestWrongJob(), jobFacade);
     }
     
     @Test(expected = RuntimeException.class)
-    public void assertWrongJobExecutorWithSingleItem() throws NoSuchFieldException {
+    public void assertWrongJobExecutorWithSingleItem() {
         Map<Integer, String> map = new HashMap<>(1, 1);
         map.put(0, "A");
         ShardingContexts shardingContexts = new ShardingContexts("fake_task_id", "test_job", 10, "", map);
@@ -58,7 +58,7 @@ public void assertWrongJobExecutorWithSingleItem() throws NoSuchFieldException {
     }
     
     @Test
-    public void assertWrongJobExecutorWithMultipleItems() throws NoSuchFieldException {
+    public void assertWrongJobExecutorWithMultipleItems() {
         Map<Integer, String> map = new HashMap<>(1, 1);
         map.put(0, "A");
         map.put(1, "B");

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -48,7 +48,6 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.quartz.SchedulerException;
 import org.unitils.util.ReflectionUtils;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -142,7 +141,7 @@ public void setUp() {
     }
     
     @After
-    public void tearDown() throws SchedulerException, NoSuchFieldException {
+    public void tearDown() throws NoSuchFieldException {
         jobScheduler.getSchedulerFacade().shutdownInstance();
         ReflectionUtils.setFieldValue(JobRegistry.getInstance(), "instance", null);
         

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/config/RescheduleListenerManagerTest.java
Patch:
@@ -66,19 +66,19 @@ public void assertStart() {
     @Test
     public void assertCronSettingChangedJobListenerWhenIsNotCronPath() {
         rescheduleListenerManager.new CronSettingAndJobEventChangedJobListener().dataChanged("/test_job/config/other", Type.NODE_ADDED, LiteJsonConstants.getJobJson());
-        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.<String>any());
+        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.any());
     }
     
     @Test
     public void assertCronSettingChangedJobListenerWhenIsCronPathButNotUpdate() {
         rescheduleListenerManager.new CronSettingAndJobEventChangedJobListener().dataChanged("/test_job/config", Type.NODE_ADDED, LiteJsonConstants.getJobJson());
-        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.<String>any());
+        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.any());
     }
     
     @Test
     public void assertCronSettingChangedJobListenerWhenIsCronPathAndUpdateButCannotFindJob() {
         rescheduleListenerManager.new CronSettingAndJobEventChangedJobListener().dataChanged("/test_job/config", Type.NODE_UPDATED, LiteJsonConstants.getJobJson());
-        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.<String>any());
+        verify(jobScheduleController, times(0)).rescheduleJob(ArgumentMatchers.any());
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverServiceTest.java
Patch:
@@ -92,7 +92,7 @@ public void assertFailoverIfUnnecessaryWhenItemsRootNodeNotExisted() {
     @Test
     public void assertFailoverIfUnnecessaryWhenItemsRootNodeIsEmpty() {
         when(jobNodeStorage.isJobNodeExisted("leader/failover/items")).thenReturn(true);
-        when(jobNodeStorage.getJobNodeChildrenKeys("leader/failover/items")).thenReturn(Collections.<String>emptyList());
+        when(jobNodeStorage.getJobNodeChildrenKeys("leader/failover/items")).thenReturn(Collections.emptyList());
         failoverService.failoverIfNecessary();
         verify(jobNodeStorage).isJobNodeExisted("leader/failover/items");
         verify(jobNodeStorage).getJobNodeChildrenKeys("leader/failover/items");

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/ShutdownListenerManagerTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.instance;
 
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
-import org.apache.curator.framework.recipes.cache.TreeCacheListener;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
@@ -74,7 +73,7 @@ public void tearDown() {
     @Test
     public void assertStart() {
         shutdownListenerManager.start();
-        verify(jobNodeStorage).addDataListener(ArgumentMatchers.<TreeCacheListener>any());
+        verify(jobNodeStorage).addDataListener(ArgumentMatchers.any());
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/TriggerListenerManagerTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.instance;
 
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
-import org.apache.curator.framework.recipes.cache.TreeCacheListener;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduleController;
@@ -62,7 +61,7 @@ public void setUp() throws NoSuchFieldException {
     @Test
     public void assertStart() {
         triggerListenerManager.start();
-        verify(jobNodeStorage).addDataListener(ArgumentMatchers.<TreeCacheListener>any());
+        verify(jobNodeStorage).addDataListener(ArgumentMatchers.any());
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/ListenerManagerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.listener;
 
-import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.RescheduleListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.ElectionListenerManager;
 import org.apache.shardingsphere.elasticjob.lite.internal.failover.FailoverListenerManager;
@@ -69,7 +68,7 @@ public class ListenerManagerTest {
     @Mock
     private RegistryCenterConnectionStateListener regCenterConnectionStateListener;
     
-    private final ListenerManager listenerManager = new ListenerManager(null, "test_job", Collections.<ElasticJobListener>emptyList());
+    private final ListenerManager listenerManager = new ListenerManager(null, "test_job", Collections.emptyList());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileServiceTest.java
Patch:
@@ -58,7 +58,7 @@ public void setup() throws NoSuchFieldException {
     }
     
     @Test
-    public void assertReconcile() throws Exception {
+    public void assertReconcile() {
         Mockito.when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
                 TestSimpleJob.class.getCanonicalName())).reconcileIntervalMinutes(1).build());
         Mockito.when(shardingService.isNeedSharding()).thenReturn(false);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobTriggerListenerTest.java
Patch:
@@ -48,7 +48,7 @@ public final class JobTriggerListenerTest {
     private JobTriggerListener jobTriggerListener;
     
     @Before
-    public void setUp() throws NoSuchFieldException {
+    public void setUp() {
         MockitoAnnotations.initMocks(this);
         jobTriggerListener = new JobTriggerListener(executionService, shardingService);
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.config.JobCoreConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
@@ -87,7 +86,7 @@ public class SchedulerFacadeTest {
     public void setUp() throws NoSuchFieldException {
         JobRegistry.getInstance().addJobInstance("test_job", new JobInstance("127.0.0.1@-@0"));
         MockitoAnnotations.initMocks(this);
-        schedulerFacade = new SchedulerFacade(null, "test_job", Collections.<ElasticJobListener>emptyList());
+        schedulerFacade = new SchedulerFacade(null, "test_job", Collections.emptyList());
         when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
                 TestDataflowJob.class.getCanonicalName(), false)).build());
         ReflectionUtils.setFieldValue(schedulerFacade, "configService", configService);

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ExecutionContextServiceTest.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() throws NoSuchFieldException {
     public void assertGetShardingContextWhenNotAssignShardingItem() {
         when(configService.load(false)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(), 
                 TestDataflowJob.class.getCanonicalName(), true)).monitorExecution(false).build());
-        ShardingContexts shardingContexts = executionContextService.getJobShardingContext(Collections.<Integer>emptyList());
+        ShardingContexts shardingContexts = executionContextService.getJobShardingContext(Collections.emptyList());
         assertTrue(shardingContexts.getTaskId().startsWith("test_job@-@@-@READY@-@"));
         assertThat(shardingContexts.getShardingTotalCount(), is(3));
     }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/ShardingListenerManagerTest.java
Patch:
@@ -87,7 +87,7 @@ public void assertShardingTotalCountChangedJobListenerWhenIsConfigPathAndCurrent
     }
     
     @Test
-    public void assertShardingTotalCountChangedJobListenerWhenIsConfigPathAndCurrentShardingTotalCountIsNotEqualToNewShardingTotalCount() throws NoSuchFieldException {
+    public void assertShardingTotalCountChangedJobListenerWhenIsConfigPathAndCurrentShardingTotalCountIsNotEqualToNewShardingTotalCount() {
         JobRegistry.getInstance().setCurrentShardingTotalCount("test_job", 5);
         shardingListenerManager.new ShardingTotalCountChangedJobListener().dataChanged("/test_job/config", Type.NODE_UPDATED, LiteJsonConstants.getJobJson());
         verify(shardingService).setReshardingFlag();

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperElectionServiceTest.java
Patch:
@@ -44,7 +44,7 @@ public class ZookeeperElectionServiceTest {
     private ElectionCandidate electionCandidate;
     
     @BeforeClass
-    public static void init() throws InterruptedException {
+    public static void init() {
         EmbedTestingServer.start();
     }
     

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/util/config/ShardingItemsTest.java
Patch:
@@ -49,7 +49,7 @@ public void assertToItemListForDuplicated() {
     
     @Test
     public void assertToItemsStringWhenEmpty() {
-        assertThat(ShardingItems.toItemsString(Collections.<Integer>emptyList()), is(""));
+        assertThat(ShardingItems.toItemsString(Collections.emptyList()), is(""));
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/util/env/HostExceptionTest.java
Patch:
@@ -29,6 +29,6 @@ public final class HostExceptionTest {
     @Test
     public void assertGetCause() {
         IOException cause = new IOException();
-        assertThat(new HostException(cause).getCause(), Is.<Throwable>is(cause));
+        assertThat(new HostException(cause).getCause(), Is.is(cause));
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/util/json/GsonFactoryTest.java
Patch:
@@ -41,7 +41,7 @@ public void assertRegisterTypeAdapter() {
         GsonFactory.registerTypeAdapter(GsonFactoryTest.class, new TypeAdapter() {
             
             @Override
-            public Object read(final JsonReader in) throws IOException {
+            public Object read(final JsonReader in) {
                 return null;
             }
             

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/restful/GsonJsonProvider.java
Patch:
@@ -57,7 +57,7 @@ public Object readFrom(final Class<Object> type, final Type genericType, final A
     
     @Override
     public void writeTo(final Object object, final Class<?> type, final Type genericType, final Annotation[] annotations, final MediaType mediaType,
-                        final MultivaluedMap<String, Object> httpHeaders, final OutputStream entityStream) throws IOException, WebApplicationException {
+                        final MultivaluedMap<String, Object> httpHeaders, final OutputStream entityStream) throws WebApplicationException {
         try (OutputStreamWriter writer = new OutputStreamWriter(entityStream, UTF_8)) {
             GsonFactory.getGson().toJson(object, type.equals(genericType) ? type : genericType, writer);
         } catch (final IOException ex) {

File: elastic-job-lite-lifecycle/src/test/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/restful/fixture/TestFilter.java
Patch:
@@ -30,7 +30,7 @@
 public final class TestFilter implements Filter {
     
     @Override
-    public void init(final FilterConfig filterConfig) throws ServletException {
+    public void init(final FilterConfig filterConfig) {
     }
     
     @Override

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/api/SpringJobScheduler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.api;
 
-import com.google.common.base.Optional;
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.JobScheduler;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
@@ -27,6 +26,8 @@
 import org.apache.shardingsphere.elasticjob.lite.spring.job.util.AopTargetUtils;
 import org.springframework.beans.factory.DisposableBean;
 
+import java.util.Optional;
+
 /**
  * Job scheduler for spring.
  */
@@ -55,7 +56,7 @@ private static ElasticJobListener[] getTargetElasticJobListeners(final ElasticJo
     
     @Override
     protected Optional<ElasticJob> createElasticJobInstance() {
-        return Optional.fromNullable(elasticJob);
+        return Optional.ofNullable(elasticJob);
     }
     
     @Override

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/event/rdb/JobEventRdbIdentity.java
Patch:
@@ -25,7 +25,7 @@
 public class JobEventRdbIdentity implements JobEventIdentity {
     
     @Override
-    public String getIdentity() {
+    public final String getIdentity() {
         return "rdb";
     }
 }

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/ShardingContextTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.lite.fixture.ShardingContextsBuilder;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.fixture.ShardingContextsBuilder;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/listener/fixture/TestDistributeOnceElasticJobListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.listener.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.api.listener.AbstractDistributeOnceElasticJobListener;
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.AbstractDistributeOnceElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/listener/fixture/TestElasticJobListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.listener.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/JobInstanceTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.strategy;
 
-import org.apache.shardingsphere.elasticjob.lite.util.env.IpUtils;
 import org.apache.shardingsphere.elasticjob.lite.util.env.IpUtils;
 import org.hamcrest.CoreMatchers;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/JobShardingStrategyFactoryTest.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.strategy;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.fixture.InvalidJobShardingStrategy;
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.impl.AverageAllocationJobShardingStrategy;
-import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.fixture.InvalidJobShardingStrategy;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.impl.AverageAllocationJobShardingStrategy;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/fixture/InvalidJobShardingStrategy.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.strategy.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobShardingStrategy;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/AverageAllocationJobShardingStrategyTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.strategy.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobShardingStrategy;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobShardingStrategy;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/OdevitySortByNameJobShardingStrategyTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.strategy.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.junit.Test;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/api/strategy/impl/RotateServerByNameJobShardingStrategyTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.api.strategy.impl;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.junit.Test;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/config/JobCoreConfigurationTest.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.config;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobProperties;
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.impl.DefaultJobExceptionHandler;
-import org.apache.shardingsphere.elasticjob.lite.fixture.handler.IgnoreJobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobProperties;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.impl.DefaultJobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.fixture.handler.IgnoreJobExceptionHandler;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/config/LiteJobConfigurationTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.config;
 
-import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/context/TaskContextTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.collect.Lists;
 import org.apache.shardingsphere.elasticjob.lite.fixture.context.TaskNode;
-import org.apache.shardingsphere.elasticjob.lite.fixture.context.TaskNode;
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/event/JobExecutionEventTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.event;
 
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.lite.event.type.JobExecutionEvent;
 import org.junit.Test;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/event/fixture/TestJobEventFailureConfiguration.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.event.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventListener;
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventListenerConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.event.JobEventConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.event.JobEventListener;
 import org.apache.shardingsphere.elasticjob.lite.event.JobEventListenerConfigurationException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/event/fixture/TestJobEventIdentity.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.event.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventIdentity;
 import org.apache.shardingsphere.elasticjob.lite.event.JobEventIdentity;
 
 public class TestJobEventIdentity implements JobEventIdentity {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/event/fixture/TestJobEventListener.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.event.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventListener;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobExecutionEvent;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.event.JobEventListener;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/event/rdb/JobEventRdbConfigurationTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.event.rdb;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventListenerConfigurationException;
 import org.apache.commons.dbcp.BasicDataSource;
 import org.apache.shardingsphere.elasticjob.lite.event.JobEventListenerConfigurationException;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/handler/ExecutorServiceHandlerRegistryTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.executor.handler;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.impl.DefaultExecutorServiceHandler;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.impl.DefaultExecutorServiceHandler;
 import org.junit.After;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/handler/JobPropertiesTest.java
Patch:
@@ -21,8 +21,6 @@
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.impl.DefaultJobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.fixture.APIJsonConstants;
 import org.apache.shardingsphere.elasticjob.lite.fixture.handler.IgnoreJobExceptionHandler;
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.impl.DefaultExecutorServiceHandler;
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.impl.DefaultJobExceptionHandler;
 import org.junit.Test;
 import org.unitils.util.ReflectionUtils;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/DataflowJobExecutorTest.java
Patch:
@@ -23,8 +23,6 @@
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestDataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.JobCaller;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.TestDataflowJob;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/ScriptJobExecutorTest.java
Patch:
@@ -24,9 +24,6 @@
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.handler.IgnoreJobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.fixture.handler.ThrowJobExceptionHandler;
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/executor/type/WrongJobExecutorTest.java
Patch:
@@ -22,9 +22,6 @@
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.apache.shardingsphere.elasticjob.lite.fixture.config.TestSimpleJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.fixture.job.TestWrongJob;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent.State;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/EmbedTestingServer.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.lite.fixture;
 
 import com.google.common.base.Joiner;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.curator.test.TestingServer;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/ShardingContextsBuilder.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 import lombok.AccessLevel;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/TestDataflowJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/TestSimpleJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/config/TestJobRootConfiguration.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.config;
 
-import org.apache.shardingsphere.elasticjob.lite.config.JobRootConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.config.JobTypeConfiguration;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.config.JobRootConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.JobTypeConfiguration;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/context/TaskNode.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.lite.fixture.context;
 
 import com.google.common.base.Joiner;
-import org.apache.shardingsphere.elasticjob.lite.context.ExecutionType;
 import lombok.Builder;
 import org.apache.shardingsphere.elasticjob.lite.context.ExecutionType;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/OtherJob.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.job;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 
 public final class OtherJob implements ElasticJob {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/TestDataflowJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.job;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/TestSimpleJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.job;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/job/TestWrongJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.job;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/AbstractBaseStdJobAutoInitTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.api.ElasticJob;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.junit.Before;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/IgnoreJobExceptionHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 
 public final class IgnoreJobExceptionHandler implements JobExceptionHandler {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/OneOffDataflowElasticJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJobForExecuteFailure.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJobForExecuteThrowsException.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/fixture/simple/FooSimpleElasticJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -18,12 +18,10 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.std.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.OneOffDataflowElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.OneOffDataflowElasticJob;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -18,12 +18,10 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.std.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJobForExecuteFailure;
-import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJobForExecuteFailure;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -18,12 +18,10 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.std.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJobForExecuteThrowsException;
-import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJobForExecuteThrowsException;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -18,12 +18,10 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.std.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -22,8 +22,6 @@
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -18,11 +18,10 @@
 package org.apache.shardingsphere.elasticjob.lite.integrate.std.dataflow;
 
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
+import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.fixture.util.JobConfigurationUtil;
-import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/simple/DisabledJobTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/integrate/std/simple/SimpleElasticJobTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import org.apache.shardingsphere.elasticjob.lite.integrate.WaitingUtils;
 import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;
-import org.apache.shardingsphere.elasticjob.lite.integrate.fixture.simple.FooSimpleElasticJob;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/InstanceNodeTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.instance;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
-import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.junit.BeforeClass;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/listener/fixture/FooJobListener.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.listener.fixture;
 
-import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;
 import lombok.RequiredArgsConstructor;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
 import org.apache.shardingsphere.elasticjob.lite.internal.listener.AbstractJobListener;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/monitor/MonitorServiceDisableTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobTest;
-import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobTest;
 import org.junit.Test;
 
 import java.io.IOException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/monitor/MonitorServiceEnableTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shardingsphere.elasticjob.lite.fixture.TestSimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobTest;
-import org.apache.shardingsphere.elasticjob.lite.integrate.AbstractBaseStdJobTest;
 import org.junit.Test;
 
 import java.io.IOException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobRegistryTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduleControllerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobTriggerListenerTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.junit.Before;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/server/ServerNodeTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.server;
 
-import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
-import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.api.strategy.JobInstance;
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.junit.BeforeClass;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/sharding/MonitorExecutionListenerManagerTest.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.sharding;
 
-import org.apache.shardingsphere.elasticjob.lite.fixture.LiteJsonConstants;
-import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
+import org.apache.shardingsphere.elasticjob.lite.fixture.LiteJsonConstants;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodeStorage;
 import org.junit.Before;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/internal/storage/JobNodeStorageTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.storage;
 
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.api.transaction.CuratorTransaction;
 import org.apache.curator.framework.api.transaction.CuratorTransactionBridge;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperElectionServiceTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.ElectionCandidate;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.RetryOneTime;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterForAuthTest.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util.ZookeeperRegistryCenterTestUtil;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.RetryOneTime;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
+import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util.ZookeeperRegistryCenterTestUtil;
 import org.apache.zookeeper.KeeperException.NoAuthException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterInitFailureTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegException;
 import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegException;
 import org.junit.Test;
 

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterMiscellaneousTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.recipes.cache.TreeCache;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util.ZookeeperRegistryCenterTestUtil;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.retry.RetryOneTime;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
+import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util.ZookeeperRegistryCenterTestUtil;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterQueryWithCacheTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util.ZookeeperRegistryCenterTestUtil;
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util.ZookeeperRegistryCenterTestUtil;
 import org.junit.AfterClass;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterQueryWithoutCacheTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util.ZookeeperRegistryCenterTestUtil;
-import org.apache.shardingsphere.elasticjob.lite.fixture.EmbedTestingServer;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/util/ZookeeperRegistryCenterTestUtil.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.util;
 
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/util/config/ShardingItemParametersTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.util.config;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import org.junit.Test;
 

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/handler/SimpleExecutorServiceHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.handler;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.ExecutorServiceHandler;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.ExecutorServiceHandler;
 
 import java.util.concurrent.ExecutorService;

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/handler/SimpleJobExceptionHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.handler;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 
 public class SimpleJobExceptionHandler implements JobExceptionHandler {

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/DataflowElasticJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.job;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/FooSimpleElasticJob.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.job;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/ref/RefFooDataflowElasticJob.java
Patch:
@@ -17,13 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.job.ref;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
-import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.dataflow.DataflowJob;
+import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 
 import java.util.Collections;
 import java.util.List;

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/job/ref/RefFooSimpleElasticJob.java
Patch:
@@ -17,13 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.job.ref;
 
-import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
-import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
-import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.lite.api.ShardingContext;
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
+import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 
 public class RefFooSimpleElasticJob implements SimpleJob {
 

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/listener/SimpleCglibListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.listener;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/listener/SimpleJdkDynamicProxyListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.listener;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/listener/SimpleListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.listener;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
 

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/fixture/listener/SimpleOnceListener.java
Patch:
@@ -17,11 +17,9 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.fixture.listener;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
-import org.apache.shardingsphere.elasticjob.lite.api.listener.AbstractDistributeOnceElasticJobListener;
-import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.AbstractDistributeOnceElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.executor.ShardingContexts;
+import org.apache.shardingsphere.elasticjob.lite.spring.fixture.service.FooService;
 
 import javax.annotation.Resource;
 

File: elastic-job-lite-spring/src/test/java/org/apache/shardingsphere/elasticjob/lite/spring/test/EmbedZookeeperTestExecutionListener.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.test;
 
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
-import org.apache.shardingsphere.elasticjob.lite.util.concurrent.BlockUtils;
 import org.apache.curator.test.TestingServer;
 import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.util.concurrent.BlockUtils;
@@ -33,7 +31,7 @@ public final class EmbedZookeeperTestExecutionListener extends AbstractTestExecu
     private static volatile TestingServer testingServer;
     
     @Override
-    public void beforeTestClass(final TestContext testContext) throws Exception {
+    public void beforeTestClass(final TestContext testContext) {
         startEmbedTestingServer();
     }
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -110,9 +110,9 @@ public void init() {
    /**
     * Shutdown job.
     */
-   public void shutdown() {
-	   schedulerFacade.shutdownInstance();
-   }
+    public void shutdown() { 
+        schedulerFacade.shutdownInstance();
+    }
     
     private JobDetail createJobDetail(final String jobClass) {
         JobDetail result = JobBuilder.newJob(LiteJob.class).withIdentity(liteJobConfig.getJobName()).build();

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/context/TaskContext.java
Patch:
@@ -96,7 +96,7 @@ public static String getIdForUnassignedSlave(final String id) {
     }
     
     /**
-     * Set job server ID
+     * Set job server ID.
      * 
      * @param slaveId job server ID
      */
@@ -130,7 +130,7 @@ public String getExecutorId(final String appName) {
     @RequiredArgsConstructor
     @Getter
     @EqualsAndHashCode
-    public static class MetaInfo {
+    public static final class MetaInfo {
         
         private final String jobName;
         

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/event/JobEventListener.java
Patch:
@@ -21,8 +21,6 @@
 import com.google.common.eventbus.Subscribe;
 import org.apache.shardingsphere.elasticjob.lite.event.type.JobExecutionEvent;
 import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobExecutionEvent;
-import org.apache.shardingsphere.elasticjob.lite.event.type.JobStatusTraceEvent;
 
 /**
  * Job event listener.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/event/rdb/JobEventRdbIdentity.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.event.rdb;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEventIdentity;
 import org.apache.shardingsphere.elasticjob.lite.event.JobEventIdentity;
 
 /**

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/event/type/JobExecutionEvent.java
Patch:
@@ -17,14 +17,13 @@
 
 package org.apache.shardingsphere.elasticjob.lite.event.type;
 
-import org.apache.shardingsphere.elasticjob.lite.event.JobEvent;
-import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtil;
-import org.apache.shardingsphere.elasticjob.lite.util.env.IpUtils;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
+import org.apache.shardingsphere.elasticjob.lite.event.JobEvent;
 import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtil;
+import org.apache.shardingsphere.elasticjob.lite.util.env.IpUtils;
 
 import java.util.Date;
 import java.util.UUID;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/DataflowJobExecutor.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.executor.AbstractElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 
 import java.util.List;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/executor/type/SimpleJobExecutor.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shardingsphere.elasticjob.lite.api.simple.SimpleJob;
 import org.apache.shardingsphere.elasticjob.lite.executor.AbstractElasticJobExecutor;
 import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
-import org.apache.shardingsphere.elasticjob.lite.executor.JobFacade;
 
 /**
  * Simple job executor.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/failover/FailoverNode.java
Patch:
@@ -20,8 +20,6 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingNode;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
-import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderNode;
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingNode;
 
 /**
  * Failover node.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/instance/InstanceNode.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
-import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 
 /**
  * Instance node.

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/reconcile/ReconcileService.java
Patch:
@@ -18,13 +18,12 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.reconcile;
 
 import com.google.common.util.concurrent.AbstractScheduledService;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService;
 import org.apache.shardingsphere.elasticjob.lite.internal.election.LeaderService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 
 import java.util.concurrent.TimeUnit;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobScheduleController.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.quartz.CronScheduleBuilder;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/JobTriggerListener.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.quartz.Trigger;
 import org.quartz.listeners.TriggerListenerSupport;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.elasticjob.lite.internal.schedule;
 
 import com.google.common.base.Strings;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.lite.api.listener.ElasticJobListener;
 import org.apache.shardingsphere.elasticjob.lite.config.LiteJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
@@ -36,9 +37,6 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.lite.exception.JobExecutionEnvironmentException;
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 
 import java.util.Collection;
 import java.util.List;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/schedule/SchedulerFacade.java
Patch:
@@ -29,8 +29,6 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ExecutionService;
 import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.internal.reconcile.ReconcileService;
-import org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingService;
 
 import java.util.List;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/internal/server/ServerNode.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.util.env.IpUtils;
-import org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobRegistry;
 
 import java.util.regex.Pattern;
 

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/reg/base/ElectionCandidate.java
Patch:
@@ -20,7 +20,9 @@
 /**
  * Election candidate.
  * 
- * Guarantee {@link #startLeadership()} and {@link #stopLeadership()} method run in same thread. 
+ * <p>
+ *     Guarantee {@link #startLeadership()} and {@link #stopLeadership()} method run in same thread.
+ * </p>
  */
 public interface ElectionCandidate {
     

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperElectionService.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.reg.zookeeper;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.ElectionCandidate;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.recipes.leader.LeaderSelector;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -20,8 +20,6 @@
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.exception.RegExceptionHandler;
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/statistics/rdb/StatisticRdbRepository.java
Patch:
@@ -18,13 +18,12 @@
 package org.apache.shardingsphere.elasticjob.lite.statistics.rdb;
 
 import com.google.common.base.Optional;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.shardingsphere.elasticjob.lite.statistics.StatisticInterval;
 import org.apache.shardingsphere.elasticjob.lite.statistics.type.job.JobRegisterStatistics;
 import org.apache.shardingsphere.elasticjob.lite.statistics.type.job.JobRunningStatistics;
 import org.apache.shardingsphere.elasticjob.lite.statistics.type.task.TaskResultStatistics;
 import org.apache.shardingsphere.elasticjob.lite.statistics.type.task.TaskRunningStatistics;
-import lombok.extern.slf4j.Slf4j;
-import org.apache.shardingsphere.elasticjob.lite.statistics.type.task.TaskRunningStatistics;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/util/config/ShardingItemParameters.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.lite.util.config;
 
 import com.google.common.base.Strings;
-import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobConfigurationException;

File: elastic-job-lite-core/src/main/java/org/apache/shardingsphere/elasticjob/lite/util/digest/Encryption.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.util.digest;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/handler/IgnoreJobExceptionHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.handler;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 
 public final class IgnoreJobExceptionHandler implements JobExceptionHandler {

File: elastic-job-lite-core/src/test/java/org/apache/shardingsphere/elasticjob/lite/fixture/handler/ThrowJobExceptionHandler.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.fixture.handler;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobExceptionHandler;
 

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/api/ServerStatisticsAPI.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.api;
 
-import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ServerBriefInfo;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ServerBriefInfo;
 
 import java.util.Collection;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.domain;
 
-import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobProperties.JobPropertiesEnum;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.elasticjob.lite.executor.handler.JobProperties.JobPropertiesEnum;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/operate/JobOperateAPIImpl.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.operate;
 
-import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
-import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobOperateAPI;
-import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Optional;
 import com.google.common.base.Preconditions;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
+import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.JobOperateAPI;
+import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 
 import java.util.List;
 

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/operate/ShardingOperateAPIImpl.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingOperateAPI;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 
 /**
  * Sharding operate API implementation class.

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ServerStatisticsAPIImpl.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.statistics;
 
+import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ServerStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ServerBriefInfo;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/internal/statistics/ShardingStatisticsAPIImpl.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.internal.statistics;
 
+import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.api.ShardingStatisticsAPI;
 import org.apache.shardingsphere.elasticjob.lite.lifecycle.domain.ShardingInfo;
 import org.apache.shardingsphere.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.elasticjob.lite.internal.storage.JobNodePath;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: elastic-job-lite-lifecycle/src/main/java/org/apache/shardingsphere/elasticjob/lite/lifecycle/restful/RESTfulAPIExceptionMapper.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.lifecycle.restful;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtil;
 import org.apache.shardingsphere.elasticjob.lite.exception.ExceptionUtil;
 
 import javax.ws.rs.core.MediaType;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/handler/JobNamespaceHandler.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.shardingsphere.elasticjob.lite.spring.job.handler;
 
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.dataflow.DataflowJobBeanDefinitionParser;
-import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.simple.SimpleJobBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.script.ScriptJobBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.simple.SimpleJobBeanDefinitionParser;
 import org.springframework.beans.factory.xml.NamespaceHandlerSupport;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/dataflow/DataflowJobBeanDefinitionParser.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag;
-import org.apache.shardingsphere.elasticjob.lite.config.dataflow.DataflowJobConfiguration;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.xml.ParserContext;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/script/ScriptJobBeanDefinitionParser.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.job.parser.script;
 
-import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.config.script.ScriptJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.springframework.beans.factory.config.BeanDefinition;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/parser/simple/SimpleJobBeanDefinitionParser.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.apache.shardingsphere.elasticjob.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag;
-import org.apache.shardingsphere.elasticjob.lite.config.simple.SimpleJobConfiguration;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.xml.ParserContext;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/job/util/AopTargetUtils.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.shardingsphere.elasticjob.lite.spring.job.util;
 
-import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.elasticjob.lite.exception.JobSystemException;

File: elastic-job-lite-spring/src/main/java/org/apache/shardingsphere/elasticjob/lite/spring/reg/parser/ZookeeperBeanDefinitionParser.java
Patch:
@@ -20,8 +20,6 @@
 import com.google.common.base.Strings;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
 import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.lite.reg.zookeeper.ZookeeperRegistryCenter;
 import org.springframework.beans.factory.support.AbstractBeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/ConsoleBootstrap.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 界面启动器.
- *
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 @Slf4j

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/EventTraceDataSource.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 事件追踪数据源.
- * 
- * @author zhangxinguo
  */
 @Slf4j
 public final class EventTraceDataSource {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/EventTraceDataSourceConfiguration.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 事件追踪数据源配置.
- *
- * @author zhangxinguo
  */
 @NoArgsConstructor
 @Getter

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/EventTraceDataSourceConfigurations.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 事件追踪数据源配置根对象.
- *
- * @author zhangxinguo
  */
 @Getter
 @XmlRootElement

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/EventTraceDataSourceFactory.java
Patch:
@@ -30,8 +30,6 @@
 
 /**
  * 事件追踪数据源工厂.
- *
- * @author zhangxinguo
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class EventTraceDataSourceFactory {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/GlobalConfiguration.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 全局配置.
- *
- * @author zhangxinguo
  */
 @Getter
 @Setter

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/RegistryCenterConfiguration.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 注册中心配置.
- *
- * @author zhangliang
  */
 @Getter
 @Setter

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/RegistryCenterConfigurations.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 注册中心配置根对象.
- *
- * @author zhangliang
  */
 @Getter
 @XmlRootElement

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/exception/JobConsoleException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 控制台异常.
- *
- * @author zhangliang
  */
 public final class JobConsoleException extends RuntimeException {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/filter/GlobalConfigurationFilter.java
Patch:
@@ -44,8 +44,6 @@
 
 /**
  * 全局配置过滤器.
- *
- * @author caohao
  */
 public final class GlobalConfigurationFilter implements Filter {
     
@@ -54,7 +52,7 @@ public final class GlobalConfigurationFilter implements Filter {
     private final EventTraceDataSourceConfigurationService rdbService = new EventTraceDataSourceConfigurationServiceImpl();
     
     @Override
-    public void init(final FilterConfig filterConfig) throws ServletException {
+    public void init(final FilterConfig filterConfig) {
     }
     
     @Override

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/repository/ConfigurationsXmlRepository.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 基于XML的全局配置数据访问器.
- *
- * @author zhangliang
  */
 public interface ConfigurationsXmlRepository extends XmlRepository<GlobalConfiguration> {
 }

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/repository/XmlRepository.java
Patch:
@@ -20,8 +20,6 @@
 /**
  * 基于XML的数据访问器.
  *
- * @author zhangliang
- * 
  * @param <E> 数据类型
  */
 public interface XmlRepository<E> {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/repository/impl/AbstractXmlRepositoryImpl.java
Patch:
@@ -29,8 +29,6 @@
 /**
  * 基于XML的数据访问器实现类.
  *
- * @author zhangliang
- *
  * @param <E> 数据类型
  */
 public abstract class AbstractXmlRepositoryImpl<E> implements XmlRepository<E> {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/repository/impl/ConfigurationsXmlRepositoryImpl.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 基于XML的全局配置数据访问器实现类.
- *
- * @author zhangliang
  */
 public final class ConfigurationsXmlRepositoryImpl extends AbstractXmlRepositoryImpl<GlobalConfiguration> implements ConfigurationsXmlRepository {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/restful/EventTraceHistoryRestfulApi.java
Patch:
@@ -44,8 +44,6 @@
 
 /**
  * 事件追踪历史记录的RESTful API.
- *
- * @author zhangxinguo
  */
 @Path("/event-trace")
 public final class EventTraceHistoryRestfulApi {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/restful/JobOperationRestfulApi.java
Patch:
@@ -35,8 +35,6 @@
 
 /**
  * 作业维度操作的RESTful API.
- *
- * @author caohao
  */
 @Path("/jobs")
 public final class JobOperationRestfulApi {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/restful/ServerOperationRestfulApi.java
Patch:
@@ -34,8 +34,6 @@
 
 /**
  * 服务器维度操作的RESTful API.
- *
- * @author caohao
  */
 @Path("/servers")
 public final class ServerOperationRestfulApi {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/restful/config/EventTraceDataSourceRestfulApi.java
Patch:
@@ -38,8 +38,6 @@
 
 /**
  * 事件追踪数据源配置的RESTful API.
- *
- * @author caohao
  */
 @Path("/data-source")
 public final class EventTraceDataSourceRestfulApi {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/restful/config/LiteJobConfigRestfulApi.java
Patch:
@@ -32,8 +32,6 @@
 
 /**
  * 作业配置的RESTful API.
- *
- * @author caohao
  */
 @Path("/jobs/config")
 public final class LiteJobConfigRestfulApi {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/restful/config/RegistryCenterRestfulApi.java
Patch:
@@ -39,8 +39,6 @@
 
 /**
  * 注册中心配置的RESTful API.
- *
- * @author caohao
  */
 @Path("/registry-center")
 public final class RegistryCenterRestfulApi {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/service/EventTraceDataSourceConfigurationService.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 事件追踪数据源配置服务.
- * 
- * @author caohao
  */
 public interface EventTraceDataSourceConfigurationService {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/service/RegistryCenterConfigurationService.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 注册中心配置服务.
- *
- * @author zhangliang
  */
 public interface RegistryCenterConfigurationService {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/service/impl/EventTraceDataSourceConfigurationServiceImpl.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 事件追踪数据源配置服务实现类.
- *
- * @author caohao
  */
 public final class EventTraceDataSourceConfigurationServiceImpl implements EventTraceDataSourceConfigurationService {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/service/impl/JobAPIServiceImpl.java
Patch:
@@ -31,8 +31,6 @@
 
 /**
  * 作业API服务实现类.
- * 
- * @author zhangliang 
  */
 public final class JobAPIServiceImpl implements JobAPIService {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/service/impl/RegistryCenterConfigurationServiceImpl.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 注册中心配置服务实现类.
- *
- * @author zhangliang
  */
 public final class RegistryCenterConfigurationServiceImpl implements RegistryCenterConfigurationService {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/util/HomeFolderUtils.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * 用户目录工具类.
- * 
- * @author zhangliang 
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class HomeFolderUtils {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/util/SessionEventTraceDataSourceConfiguration.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * 事件追踪数据源配置的会话声明周期.
- *
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class SessionEventTraceDataSourceConfiguration {

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/util/SessionRegistryCenterConfiguration.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 注册中心配置的会话声明周期.
- * 
- * @author zhangliang 
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class SessionRegistryCenterConfiguration {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/ElasticJob.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 弹性化分布式作业标识接口.
- * 
- * @author zhangliang
  */
 public interface ElasticJob {
 }

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/JobScheduler.java
Patch:
@@ -49,9 +49,6 @@
 
 /**
  * 作业调度器.
- * 
- * @author zhangliang
- * @author caohao
  */
 public class JobScheduler {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/JobType.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业类型.
- *
- * @author caohao
  */
 public enum JobType {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/ShardingContext.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 分片上下文.
- * 
- * @author zhangliang
  */
 @Getter
 @ToString

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/dataflow/DataflowJob.java
Patch:
@@ -25,8 +25,6 @@
 /**
  * 数据流分布式作业接口.
  * 
- * @author zhangliang
- * 
  * @param <T> 数据类型
  */
 public interface DataflowJob<T> extends ElasticJob {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/listener/AbstractDistributeOnceElasticJobListener.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 在分布式作业中只执行一次的监听器.
- * 
- * @author zhangliang
  */
 public abstract class AbstractDistributeOnceElasticJobListener implements ElasticJobListener {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/listener/ElasticJobListener.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 弹性化分布式作业监听器接口.
- * 
- * @author zhangliang
  */
 public interface ElasticJobListener {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/script/ScriptJob.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 脚本分布式作业接口.
- * 
- * @author zhangliang
  */
 public interface ScriptJob extends ElasticJob {
 }

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/simple/SimpleJob.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 简单分布式作业接口.
- * 
- * @author zhangliang
  */
 public interface SimpleJob extends ElasticJob {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/strategy/JobInstance.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 作业运行实例.
- * 
- * @author zhangliang
  */
 @RequiredArgsConstructor
 @Getter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/strategy/JobShardingStrategy.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 作业分片策略.
- * 
- * @author zhangliang
  */
 public interface JobShardingStrategy {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/strategy/JobShardingStrategyFactory.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 作业分片策略工厂.
- * 
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobShardingStrategyFactory {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/strategy/impl/AverageAllocationJobShardingStrategy.java
Patch:
@@ -36,8 +36,6 @@
  * 2. 如果有3台服务器, 分成8片, 则每台服务器分到的分片是: 1=[0,1,6], 2=[2,3,7], 3=[4,5].
  * 3. 如果有3台服务器, 分成10片, 则每台服务器分到的分片是: 1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8].
  * </p>
- * 
- * @author zhangliang
  */
 public final class AverageAllocationJobShardingStrategy implements JobShardingStrategy {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/strategy/impl/OdevitySortByNameJobShardingStrategy.java
Patch:
@@ -35,8 +35,6 @@
  * 1. 如果有3台服务器, 分成2片, 作业名称的哈希值为奇数, 则每台服务器分到的分片是: 1=[0], 2=[1], 3=[].
  * 2. 如果有3台服务器, 分成2片, 作业名称的哈希值为偶数, 则每台服务器分到的分片是: 3=[0], 2=[1], 1=[].
  * </p>
- * 
- * @author zhangliang
  */
 public final class OdevitySortByNameJobShardingStrategy implements JobShardingStrategy {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/strategy/impl/RotateServerByNameJobShardingStrategy.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 根据作业名的哈希值对服务器列表进行轮转的分片策略.
- * 
- * @author weishubin
  */
 public final class RotateServerByNameJobShardingStrategy implements JobShardingStrategy {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/config/JobCoreConfiguration.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 作业核心配置.
- * 
- * @author zhangliang
  */
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 @Getter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/config/JobRootConfiguration.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业配置根接口.
- *
- * @author zhangliang
  */
 public interface JobRootConfiguration {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/config/JobTypeConfiguration.java
Patch:
@@ -21,9 +21,6 @@
 
 /**
  * 作业类型配置.
- * 
- * @author caohao
- * @author zhangliang
  */
 public interface JobTypeConfiguration {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/config/LiteJobConfiguration.java
Patch:
@@ -24,9 +24,6 @@
 
 /**
  * Lite作业配置.
- * 
- * @author caohao
- * @author zhangliang
  */
 @Getter
 @AllArgsConstructor(access = AccessLevel.PRIVATE)

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/config/dataflow/DataflowJobConfiguration.java
Patch:
@@ -25,9 +25,6 @@
 
 /**
  * 数据流作业配置信息.
- * 
- * @author caohao
- * @author zhangliang
  */
 @RequiredArgsConstructor
 @Getter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/config/script/ScriptJobConfiguration.java
Patch:
@@ -26,9 +26,6 @@
 
 /**
  * 脚本作业配置.
- * 
- * @author caohao
- * @author zhangliang
  */
 @RequiredArgsConstructor
 @Getter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/config/simple/SimpleJobConfiguration.java
Patch:
@@ -25,9 +25,6 @@
 
 /**
  * 简单作业配置.
- * 
- * @author caohao
- * @author zhangliang
  */
 @RequiredArgsConstructor
 @Getter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/context/ExecutionType.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 执行类型.
- *
- * @author zhangliang
  */
 public enum ExecutionType {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/context/TaskContext.java
Patch:
@@ -34,9 +34,6 @@
 
 /**
  * 任务运行时上下文.
- *
- * @author zhangliang
- * @author caohao
  */
 @Getter
 @EqualsAndHashCode(of = "id")

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/JobEvent.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业事件接口.
- *
- * @author zhangliang
  */
 public interface JobEvent {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/JobEventBus.java
Patch:
@@ -24,9 +24,6 @@
 
 /**
  * 运行痕迹事件总线.
- * 
- * @author zhangliang
- * @author caohao
  */
 @Slf4j
 public final class JobEventBus {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/JobEventConfiguration.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业事件配置标识接口.
- *
- * @author caohao
  */
 public interface JobEventConfiguration extends JobEventIdentity {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/JobEventIdentity.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业事件标识.
- *
- * @author zhangliang
  */
 public interface JobEventIdentity {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/JobEventListener.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * 作业事件监听器.
- *
- * @author zhangliang
  */
 public interface JobEventListener extends JobEventIdentity {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/JobEventListenerConfigurationException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业事件监听器配置异常.
- * 
- * @author zhangliang
  */
 public final class JobEventListenerConfigurationException extends Exception {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/rdb/DatabaseType.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 支持的数据库类型.
- * 
- * @author caohao
  */
 public enum DatabaseType {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/rdb/JobEventRdbConfiguration.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 作业数据库事件配置.
- *
- * @author caohao
  */
 @RequiredArgsConstructor
 @Getter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/rdb/JobEventRdbIdentity.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 关系型数据库作业事件标识.
- *
- * @author zhangliang
  */
 public class JobEventRdbIdentity implements JobEventIdentity {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/rdb/JobEventRdbListener.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 运行痕迹事件数据库监听器.
- *
- * @author caohao
  */
 public final class JobEventRdbListener extends JobEventRdbIdentity implements JobEventListener {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/rdb/JobEventRdbStorage.java
Patch:
@@ -35,8 +35,6 @@
 
 /**
  * 运行痕迹事件数据库存储.
- *
- * @author caohao
  */
 @Slf4j
 final class JobEventRdbStorage {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/type/JobExecutionEvent.java
Patch:
@@ -30,8 +30,6 @@
 
 /**
  * 作业执行事件.
- *
- * @author zhangliang
  */
 @RequiredArgsConstructor
 @AllArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/type/JobExecutionEventThrowable.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * 作业执行事件Throwable.
- *
- * @author liguangyun
  */
 @RequiredArgsConstructor
 @AllArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/type/JobStatusTraceEvent.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 作业状态痕迹事件.
- *
- * @author caohao
  */
 @RequiredArgsConstructor
 @AllArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/exception/AppConfigurationException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业App配置异常.
- * 
- * @author caohao
  */
 public final class AppConfigurationException extends RuntimeException {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/exception/ExceptionUtil.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 异常处理工具类.
- *
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class ExceptionUtil {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/exception/JobConfigurationException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业配置异常.
- * 
- * @author zhangliang
  */
 public final class JobConfigurationException extends RuntimeException {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/exception/JobExecutionEnvironmentException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业执行环境异常.
- * 
- * @author zhangliang
  */
 public final class JobExecutionEnvironmentException extends Exception {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/exception/JobStatisticException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业统计异常.
- * 
- * @author liguangyun
  */
 public final class JobStatisticException extends RuntimeException {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/exception/JobSystemException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业系统异常.
- * 
- * @author zhangliang
  */
 public final class JobSystemException extends RuntimeException {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/AbstractElasticJobExecutor.java
Patch:
@@ -40,8 +40,6 @@
 
 /**
  * 弹性化分布式作业执行器.
- *
- * @author zhangliang
  */
 @Slf4j
 public abstract class AbstractElasticJobExecutor {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/JobExecutorFactory.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 作业执行器工厂.
- *
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobExecutorFactory {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/JobFacade.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 作业内部服务门面服务.
- * 
- * @author zhangliang
  */
 public interface JobFacade {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/ShardingContexts.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 分片上下文集合.
- * 
- * @author zhangliang
  */
 @RequiredArgsConstructor
 @Getter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/handler/ExecutorServiceHandler.java
Patch:
@@ -23,8 +23,6 @@
  * 线程池服务处理器.
  * 
  * <p>用于作业内部的线程池处理使用.</p>
- *
- * @author zhangliang
  */
 public interface ExecutorServiceHandler {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/handler/ExecutorServiceHandlerRegistry.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 线程池服务处理器注册表.
- * 
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class ExecutorServiceHandlerRegistry {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/handler/JobExceptionHandler.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业异常处理器.
- *
- * @author zhangliang
  */
 public interface JobExceptionHandler {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/handler/JobProperties.java
Patch:
@@ -31,8 +31,6 @@
 
 /**
  * 作业属性配置.
- *
- * @author zhangliang
  */
 @AllArgsConstructor
 @NoArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/handler/impl/DefaultExecutorServiceHandler.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * 默认线程池服务处理器.
- * 
- * @author zhangliang
  */
 public final class DefaultExecutorServiceHandler implements ExecutorServiceHandler {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/handler/impl/DefaultJobExceptionHandler.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 默认作业异常处理器.
- *
- * @author zhangliang
  */
 @Slf4j
 public final class DefaultJobExceptionHandler implements JobExceptionHandler {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/type/DataflowJobExecutor.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 数据流作业执行器.
- * 
- * @author zhangliang
  */
 public final class DataflowJobExecutor extends AbstractElasticJobExecutor {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/type/ScriptJobExecutor.java
Patch:
@@ -31,9 +31,6 @@
 
 /**
  * 脚本作业执行器.
- * 
- * @author zhangliang
- * @author caohao
  */
 public final class ScriptJobExecutor extends AbstractElasticJobExecutor {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/type/SimpleJobExecutor.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * 简单作业执行器.
- * 
- * @author zhangliang
  */
 public final class SimpleJobExecutor extends AbstractElasticJobExecutor {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/config/ConfigurationNode.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 配置节点路径.
- * 
- * @author zhangliang
  */
 public final class ConfigurationNode {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/config/ConfigurationService.java
Patch:
@@ -27,9 +27,6 @@
 
 /**
  * 弹性化分布式作业配置服务.
- * 
- * @author zhangliang
- * @author caohao
  */
 public final class ConfigurationService {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/config/LiteJobConfigurationConstants.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * Lite配置的常量.
- *
- * @author caohao
  */
 public final class LiteJobConfigurationConstants {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/config/RescheduleListenerManager.java
Patch:
@@ -25,9 +25,6 @@
 
 /**
  * 重调度监听管理器.
- * 
- * @author caohao
- * @author zhangliang
  */
 public final class RescheduleListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/election/ElectionListenerManager.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 主节点选举监听管理器.
- * 
- * @author zhangliang
  */
 public final class ElectionListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/election/LeaderNode.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 主节点路径.
- * 
- * @author zhangliang
  */
 public final class LeaderNode {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/election/LeaderService.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 主节点服务.
- * 
- * @author zhangliang
  */
 @Slf4j
 public final class LeaderService {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/failover/FailoverListenerManager.java
Patch:
@@ -33,8 +33,6 @@
 
 /**
  * 失效转移监听管理器.
- * 
- * @author zhangliang
  */
 public final class FailoverListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/failover/FailoverNode.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 失效转移节点路径.
- * 
- * @author zhangliang
  */
 public final class FailoverNode {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/failover/FailoverService.java
Patch:
@@ -33,8 +33,6 @@
 
 /**
  * 作业失效转移服务.
- * 
- * @author zhangliang
  */
 @Slf4j
 public final class FailoverService {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/guarantee/GuaranteeListenerManager.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 保证分布式任务全部开始和结束状态监听管理器.
- * 
- * @author zhangliang
  */
 public final class GuaranteeListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/guarantee/GuaranteeNode.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 保证分布式任务全部开始和结束状态节点路径.
- * 
- * @author zhangliang
  */
 public final class GuaranteeNode {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/guarantee/GuaranteeService.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 保证分布式任务全部开始和结束状态的服务.
- * 
- * @author zhangliang
  */
 public final class GuaranteeService {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/instance/InstanceNode.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 运行实例节点路径.
- * 
- * @author zhangliang
  */
 public final class InstanceNode {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/instance/InstanceOperation.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 作业运行实例操作.
- * 
- * @author zhangliang
  */
 public enum InstanceOperation {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/instance/InstanceService.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 作业运行实例服务.
- * 
- * @author zhangliang
  */
 public final class InstanceService {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/instance/ShutdownListenerManager.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 运行实例关闭监听管理器.
- * 
- * @author zhangliang
  */
 public final class ShutdownListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/instance/TriggerListenerManager.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 作业触发监听管理器.
- * 
- * @author zhangliang
  */
 public final class TriggerListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/listener/AbstractJobListener.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 作业注册中心的监听器.
- * 
- * @author zhangliang
  */
 public abstract class AbstractJobListener implements TreeCacheListener {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/listener/AbstractListenerManager.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 作业注册中心的监听器管理者的抽象类.
- * 
- * @author zhangliang
  */
 public abstract class AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/listener/ListenerManager.java
Patch:
@@ -33,8 +33,6 @@
 
 /**
  * 作业注册中心的监听器管理者.
- * 
- * @author zhangliang
  */
 public final class ListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/listener/RegistryCenterConnectionStateListener.java
Patch:
@@ -30,8 +30,6 @@
 
 /**
  * 注册中心连接状态监听器.
- *
- * @author zhangliang
  */
 public final class RegistryCenterConnectionStateListener implements ConnectionStateListener {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/monitor/MonitorService.java
Patch:
@@ -37,8 +37,6 @@
 
 /**
  * 作业监控服务.
- * 
- * @author caohao
  */
 @Slf4j
 public final class MonitorService {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/reconcile/ReconcileService.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 调解分布式作业不一致状态服务.
- *
- * @author caohao
  */
 @Slf4j
 public final class ReconcileService extends AbstractScheduledService {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/schedule/JobRegistry.java
Patch:
@@ -27,9 +27,6 @@
 
 /**
  * 作业注册表.
- * 
- * @author zhangliang
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobRegistry {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/schedule/JobScheduleController.java
Patch:
@@ -30,8 +30,6 @@
 
 /**
  * 作业调度控制器.
- * 
- * @author zhangliang
  */
 @RequiredArgsConstructor
 public final class JobScheduleController {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/schedule/JobShutdownHookPlugin.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 作业关闭钩子.
- *
- * @author zhangliang
  */
 public final class JobShutdownHookPlugin extends ShutdownHookPlugin {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/schedule/JobTriggerListener.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 作业触发监听器.
- * 
- * @author zhangliang
  */
 @RequiredArgsConstructor
 public final class JobTriggerListener extends TriggerListenerSupport {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -43,8 +43,6 @@
 
 /**
  * 为作业提供内部服务的门面类.
- * 
- * @author zhangliang
  */
 @Slf4j
 public final class LiteJobFacade implements JobFacade {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/schedule/SchedulerFacade.java
Patch:
@@ -34,8 +34,6 @@
 
 /**
  * 为调度器提供内部服务的门面类.
- * 
- * @author zhangliang
  */
 public final class SchedulerFacade {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/server/ServerNode.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 服务器节点路径.
- * 
- * @author zhangliang
  */
 public final class ServerNode {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/server/ServerService.java
Patch:
@@ -26,9 +26,6 @@
 
 /**
  * 作业服务器服务.
- * 
- * @author zhangliang
- * @author caohao
  */
 public final class ServerService {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/server/ServerStatus.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 服务器状态.
- * 
- * @author zhangliang
  */
 public enum ServerStatus {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/sharding/ExecutionContextService.java
Patch:
@@ -35,8 +35,6 @@
 
 /**
  * 作业运行时上下文服务.
- * 
- * @author zhangliang
  */
 public final class ExecutionContextService {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/sharding/ExecutionService.java
Patch:
@@ -30,9 +30,6 @@
 
 /**
  * 执行作业的服务.
- * 
- * @author zhangliang
- * @author caohao
  */
 public final class ExecutionService {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/sharding/MonitorExecutionListenerManager.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 幂等性监听管理器.
- * 
- * @author zhangliang
  */
 public final class MonitorExecutionListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/sharding/ShardingListenerManager.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 分片监听管理器.
- * 
- * @author zhangliang
  */
 public final class ShardingListenerManager extends AbstractListenerManager {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/sharding/ShardingNode.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 分片节点路径.
- * 
- * @author zhangliang
  */
 public final class ShardingNode {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/sharding/ShardingService.java
Patch:
@@ -43,8 +43,6 @@
 
 /**
  * 作业分片服务.
- * 
- * @author zhangliang
  */
 @Slf4j
 public final class ShardingService {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/storage/JobNodePath.java
Patch:
@@ -25,8 +25,6 @@
  * <p>
  * 作业节点是在普通的节点前加上作业名称的前缀.
  * </p>
- * 
- * @author zhangliang
  */
 @RequiredArgsConstructor
 public final class JobNodePath {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/storage/JobNodeStorage.java
Patch:
@@ -35,8 +35,6 @@
  * <p>
  * 作业节点是在普通的节点前加上作业名称的前缀.
  * </p>
- * 
- * @author zhangliang
  */
 public final class JobNodeStorage {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/storage/LeaderExecutionCallback.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 主节点执行操作的回调接口.
- * 
- * @author zhangliang
  */
 public interface LeaderExecutionCallback {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/storage/TransactionExecutionCallback.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 事务执行操作的回调接口.
- * 
- * @author zhangliang
  */
 public interface TransactionExecutionCallback {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/util/SensitiveInfoUtils.java
Patch:
@@ -33,8 +33,6 @@
 
 /**
  * 敏感信息过滤工具类.
- * 
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class SensitiveInfoUtils {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/base/CoordinatorRegistryCenter.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 用于协调分布式服务的注册中心.
- * 
- * @author zhangliang
  */
 public interface CoordinatorRegistryCenter extends RegistryCenter {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/base/ElectionCandidate.java
Patch:
@@ -21,8 +21,6 @@
  * 选举候选人.
  * 保证{@link #startLeadership()}与{@link #stopLeadership()}方法在同一个线程内交替运行,
  * 且不会出现并发执行的情况.
- * 
- * @author gaohongtao
  */
 public interface ElectionCandidate {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/base/RegistryCenter.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 注册中心.
- * 
- * @author zhangliang
  */
 public interface RegistryCenter {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/exception/RegException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 注册中心异常.
- * 
- * @author zhangliang
  */
 public final class RegException extends RuntimeException {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/exception/RegExceptionHandler.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 注册中心异常处理类.
- * 
- * @author zhangliang
  */
 @Slf4j
 @NoArgsConstructor(access = AccessLevel.PRIVATE)

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/zookeeper/ZookeeperConfiguration.java
Patch:
@@ -23,9 +23,6 @@
 
 /**
  * 基于Zookeeper的注册中心配置.
- * 
- * @author zhangliang
- * @author caohao
  */
 @Getter
 @Setter

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/zookeeper/ZookeeperElectionService.java
Patch:
@@ -28,9 +28,6 @@
 
 /**
  * 使用{@link LeaderSelector}实现选举服务.
- * 
- * @author gaohongtao
- * @author caohao
  */
 @Slf4j
 public final class ZookeeperElectionService {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -48,8 +48,6 @@
 
 /**
  * 基于Zookeeper的注册中心.
- * 
- * @author zhangliang
  */
 @Slf4j
 public final class ZookeeperRegistryCenter implements CoordinatorRegistryCenter {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/StatisticInterval.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 统计时间间隔.
- *
- * @author liguangyun
  */
 @Getter
 @RequiredArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/rdb/StatisticRdbRepository.java
Patch:
@@ -39,8 +39,6 @@
 
 /**
  * 统计信息数据仓库，基于数据库.
- *
- * @author liguangyun
  */
 @Slf4j
 public class StatisticRdbRepository {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/type/job/JobExecutionTypeStatistics.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 作业执行类型统计数据.
- *
- * @author liguangyun
  */
 @Getter
 @AllArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/type/job/JobRegisterStatistics.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 作业注册到Cloud平台统计数据.
- *
- * @author liguangyun
  */
 @Getter
 @RequiredArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/type/job/JobRunningStatistics.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 运行中的作业统计数据.
- *
- * @author liguangyun
  */
 @Getter
 @RequiredArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/type/job/JobTypeStatistics.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 作业类型统计数据.
- *
- * @author liguangyun
  */
 @Getter
 @AllArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/type/task/TaskResultStatistics.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 任务运行结果统计数据.
- *
- * @author liguangyun
  */
 @Getter
 @AllArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/statistics/type/task/TaskRunningStatistics.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * 运行中的任务统计数据.
- *
- * @author liguangyun
  */
 @Getter
 @RequiredArgsConstructor

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/concurrent/ExecutorServiceObject.java
Patch:
@@ -29,8 +29,6 @@
 
 /**
  * 线程池执行服务对象.
- *
- * @author zhangliang
  */
 public final class ExecutorServiceObject {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/config/ShardingItemParameters.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 分片序列号个性化参数.
- *
- * @author zhangliang
  */
 @Getter
 public final class ShardingItemParameters {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/config/ShardingItems.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 分片项工具类.
- *
- * @author zhangliang
  */
 @Getter
 public final class ShardingItems {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/digest/Encryption.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 字符串加密工具类.
- *
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class Encryption {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/env/HostException.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 网络主机异常.
- * 
- * @author zhangliang
  */
 public final class HostException extends RuntimeException {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/env/IpUtils.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 获取真实本机网络的服务.
- * 
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class IpUtils {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/env/TimeService.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 获取时间的服务.
- * 
- * @author zhangliang
  */
 public final class TimeService {
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/json/AbstractJobConfigurationGsonTypeAdapter.java
Patch:
@@ -38,9 +38,6 @@
 /**
  * 作业配置的Json转换适配器.
  *
- * @author zhangliang
- * @author caohao
- *
  * @param <T> 作业配置对象泛型
  */
 public abstract class AbstractJobConfigurationGsonTypeAdapter<T extends JobRootConfiguration> extends TypeAdapter<T> {

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/json/GsonFactory.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * Gson构建器.
- *
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class GsonFactory {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/JobAPIFactory.java
Patch:
@@ -30,8 +30,6 @@
 
 /**
  * 作业API工厂.
- *
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JobAPIFactory {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/JobOperateAPI.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 操作作业的API.
- *
- * @author zhangliang
  */
 public interface JobOperateAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/JobSettingsAPI.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * 作业配置的API.
- *
- * @author zhangliang
  */
 public interface JobSettingsAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/JobStatisticsAPI.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 作业状态展示的API.
- *
- * @author caohao
  */
 public interface JobStatisticsAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/ServerStatisticsAPI.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 作业服务器状态展示的API.
- *
- * @author caohao
  */
 public interface ServerStatisticsAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/ShardingOperateAPI.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * 操作分片的API.
- *
- * @author caohao
  */
 public interface ShardingOperateAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/ShardingStatisticsAPI.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 作业分片状态展示的API.
- *
- * @author caohao
  */
 public interface ShardingStatisticsAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/domain/JobSettings.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 作业设置对象.
- * 
- * @author zhangliang
  */
 @Getter
 @Setter

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/domain/ServerBriefInfo.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 服务器维度简明信息对象.
- *
- * @author caohao
  */
 @RequiredArgsConstructor
 @Getter

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/operate/JobOperateAPIImpl.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 操作作业的实现类.
- *
- * @author caohao
  */
 public final class JobOperateAPIImpl implements JobOperateAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/operate/ShardingOperateAPIImpl.java
Patch:
@@ -23,8 +23,6 @@
 
 /**
  * 操作分片的实现类.
- *
- * @author caohao
  */
 public final class ShardingOperateAPIImpl implements ShardingOperateAPI {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/reg/RegistryCenterFactory.java
Patch:
@@ -32,8 +32,6 @@
 
 /**
  * 注册中心工厂.
- *
- * @author zhangliang
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class RegistryCenterFactory {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -33,9 +33,6 @@
 
 /**
  * 作业配置的实现类.
- *
- * @author zhangliang
- * @author caohao
  */
 @RequiredArgsConstructor
 public final class JobSettingsAPIImpl implements JobSettingsAPI {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -34,8 +34,6 @@
 
 /**
  * 作业状态展示的实现类.
- *
- * @author caohao
  */
 @RequiredArgsConstructor
 public final class JobStatisticsAPIImpl implements JobStatisticsAPI {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/statistics/ServerStatisticsAPIImpl.java
Patch:
@@ -33,8 +33,6 @@
 
 /**
  * 作业服务器状态展示的实现类.
- *
- * @author caohao
  */
 @RequiredArgsConstructor
 public final class ServerStatisticsAPIImpl implements ServerStatisticsAPI {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/statistics/ShardingStatisticsAPIImpl.java
Patch:
@@ -30,8 +30,6 @@
 
 /**
  * 作业分片状态展示的实现类.
- *
- * @author caohao
  */
 @RequiredArgsConstructor
 public final class ShardingStatisticsAPIImpl implements ShardingStatisticsAPI {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/restful/GsonJsonProvider.java
Patch:
@@ -37,8 +37,6 @@
 
 /**
  * 基于GSON解析JSON的解析器.
- *
- * @author zhangliang
  */
 @Provider
 @Produces(MediaType.APPLICATION_JSON)

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/restful/RestfulException.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * REST API异常.
- *
- * @author zhangliang
  */
 public final class RestfulException extends RuntimeException {
     

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/restful/RestfulExceptionMapper.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * RESTFul API的异常处理器.
- *
- * @author zhangliang
  */
 @Provider
 public final class RestfulExceptionMapper implements ExceptionMapper<Throwable> {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/restful/RestfulServer.java
Patch:
@@ -35,9 +35,6 @@
 
 /**
  * REST API的内嵌服务器.
- *
- * @author zhangliang
- * @author caohao
  */
 @Slf4j
 public final class RestfulServer {

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/security/WwwAuthFilter.java
Patch:
@@ -36,8 +36,6 @@
 
 /**
  * 认证过滤器.
- * 
- * @author zhangliang 
  */
 @Slf4j
 public final class WwwAuthFilter implements Filter {

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/handler/JobNamespaceHandler.java
Patch:
@@ -24,8 +24,6 @@
 
 /**
  * 分布式作业的命名空间处理器.
- * 
- * @author caohao
  */
 public final class JobNamespaceHandler extends NamespaceHandlerSupport {
     

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -37,9 +37,6 @@
 
 /**
  * 基本作业的命名空间解析器.
- * 
- * @author zhangliang
- * @author caohao
  */
 public abstract class AbstractJobBeanDefinitionParser extends AbstractBeanDefinitionParser {
     

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/parser/common/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 作业基本属性解析标签.
- *
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class BaseJobBeanDefinitionParserTag {

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/parser/dataflow/DataflowJobBeanDefinitionParser.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 数据流作业的命名空间解析器.
- * 
- * @author caohao
  */
 public final class DataflowJobBeanDefinitionParser extends AbstractJobBeanDefinitionParser {
     

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/parser/dataflow/DataflowJobBeanDefinitionParserTag.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 数据流作业属性解析标签.
- *
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class DataflowJobBeanDefinitionParserTag {

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/parser/script/ScriptJobBeanDefinitionParser.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * 脚本作业的命名空间解析器.
- * 
- * @author caohao
  */
 public final class ScriptJobBeanDefinitionParser extends AbstractJobBeanDefinitionParser {
     

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/parser/script/ScriptJobBeanDefinitionParserTag.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 脚本作业属性解析标签.
- *
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class ScriptJobBeanDefinitionParserTag {

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/parser/simple/SimpleJobBeanDefinitionParser.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 简单作业的命名空间解析器.
- * 
- * @author caohao
  */
 public final class SimpleJobBeanDefinitionParser extends AbstractJobBeanDefinitionParser {
     

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/job/util/AopTargetUtils.java
Patch:
@@ -27,8 +27,6 @@
 
 /**
  * 基于Spring AOP获取目标对象.
- * 
- * @author caohao
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class AopTargetUtils {

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/reg/handler/RegNamespaceHandler.java
Patch:
@@ -22,8 +22,6 @@
 
 /**
  * 注册中心的命名空间处理器.
- * 
- * @author zhangliang
  */
 public final class RegNamespaceHandler extends NamespaceHandlerSupport {
     

File: elastic-job-lite-spring/src/main/java/io/elasticjob/lite/spring/reg/parser/ZookeeperBeanDefinitionParser.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * 基于Zookeeper注册中心的命名空间解析器.
- * 
- * @author caohao
  */
 public final class ZookeeperBeanDefinitionParser extends AbstractBeanDefinitionParser {
     

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
Patch:
@@ -98,6 +98,8 @@ public void assertPersistSequential() throws Exception {
             assertThat(each, startsWith("test_sequential"));
             assertThat(zkRegCenter.get("/sequential/" + each), startsWith("test_value"));
         }
+        zkRegCenter.remove("/sequential");
+        assertFalse(zkRegCenter.isExisted("/sequential"));
     }
     
     @Test

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/schedule/JobRegistryTest.java
Patch:
@@ -20,6 +20,7 @@
 import io.elasticjob.lite.api.strategy.JobInstance;
 import io.elasticjob.lite.reg.base.CoordinatorRegistryCenter;
 import org.junit.Test;
+import org.unitils.util.ReflectionUtils;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertFalse;
@@ -69,9 +70,10 @@ public void assertGetCurrentShardingTotalCountIfNull() {
     }
     
     @Test
-    public void assertGetCurrentShardingTotalCountIfNotNull() {
+    public void assertGetCurrentShardingTotalCountIfNotNull() throws NoSuchFieldException {
         JobRegistry.getInstance().setCurrentShardingTotalCount("exist_job_instance", 10);
         assertThat(JobRegistry.getInstance().getCurrentShardingTotalCount("exist_job_instance"), is(10));
+        ReflectionUtils.setFieldValue(JobRegistry.getInstance(), "instance", null);
     }
     
     @Test

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/util/env/IpUtils.java
Patch:
@@ -37,7 +37,7 @@ public final class IpUtils {
     /**
      * IP地址的正则表达式.
      */
-    public static final String IP_REGEX = "((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3})";
+    public static final String IP_REGEX = "((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(1\\d{2}|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)){3})";
     
     private static volatile String cachedIpAddress;
     

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -40,10 +40,10 @@
 
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -57,7 +57,7 @@ public final class ZookeeperRegistryCenter implements CoordinatorRegistryCenter
     @Getter(AccessLevel.PROTECTED)
     private ZookeeperConfiguration zkConfig;
     
-    private final Map<String, TreeCache> caches = new HashMap<>();
+    private final Map<String, TreeCache> caches = new ConcurrentHashMap<>();
     
     @Getter
     private CuratorFramework client;

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/domain/EventTraceDataSourceFactory.java
Patch:
@@ -31,7 +31,7 @@ public final class EventTraceDataSourceFactory {
      * @return 事件追踪数据源
      */
     public static EventTraceDataSource createEventTraceDataSource(final String driver, final String url, final String username, final Optional<String> password) {
-        Hasher hasher =  Hashing.md5().newHasher().putString(driver, Charsets.UTF_8).putString(url, Charsets.UTF_8);
+        Hasher hasher = Hashing.md5().newHasher().putString(driver, Charsets.UTF_8).putString(url, Charsets.UTF_8);
         if (!Strings.isNullOrEmpty(username)) {
             hasher.putString(username, Charsets.UTF_8);
         }

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/repository/XmlRepository.java
Patch:
@@ -19,10 +19,10 @@
 
 /**
  * 基于XML的数据访问器.
+ *
+ * @author zhangliang
  * 
  * @param <E> 数据类型
- * 
- * @author zhangliang
  */
 public interface XmlRepository<E> {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/repository/impl/AbstractXmlRepositoryImpl.java
Patch:
@@ -28,9 +28,10 @@
 
 /**
  * 基于XML的数据访问器实现类.
- * 
- * @param <E> 数据类型
+ *
  * @author zhangliang
+ *
+ * @param <E> 数据类型
  */
 public abstract class AbstractXmlRepositoryImpl<E> implements XmlRepository<E> {
     

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/service/EventTraceDataSourceConfigurationService.java
Patch:
@@ -50,7 +50,7 @@ public interface EventTraceDataSourceConfigurationService {
      * @param configs 全部事件追踪数据源配置
      * @return 事件追踪数据源配置
      */
-    EventTraceDataSourceConfiguration find(final String name, final EventTraceDataSourceConfigurations configs);
+    EventTraceDataSourceConfiguration find(String name, EventTraceDataSourceConfigurations configs);
     
     /**
      * 读取已连接的事件追踪数据源配置.

File: elastic-job-lite-console/src/main/java/io/elasticjob/lite/console/service/RegistryCenterConfigurationService.java
Patch:
@@ -50,7 +50,7 @@ public interface RegistryCenterConfigurationService {
      * @param configs 全部注册中心配置
      * @return 注册中心配置
      */
-    RegistryCenterConfiguration find(final String name, final RegistryCenterConfigurations configs);
+    RegistryCenterConfiguration find(String name, RegistryCenterConfigurations configs);
     
     /**
      * 读取已连接的注册中心配置.

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/api/listener/ElasticJobListener.java
Patch:
@@ -31,12 +31,12 @@ public interface ElasticJobListener {
      * 
      * @param shardingContexts 分片上下文
      */
-    void beforeJobExecuted(final ShardingContexts shardingContexts);
+    void beforeJobExecuted(ShardingContexts shardingContexts);
     
     /**
      * 作业执行后的执行的方法.
      *
      * @param shardingContexts 分片上下文
      */
-    void afterJobExecuted(final ShardingContexts shardingContexts);
+    void afterJobExecuted(ShardingContexts shardingContexts);
 }

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/event/JobEventListener.java
Patch:
@@ -17,7 +17,6 @@
 
 package io.elasticjob.lite.event;
 
-
 import com.google.common.eventbus.AllowConcurrentEvents;
 import com.google.common.eventbus.Subscribe;
 import io.elasticjob.lite.event.type.JobExecutionEvent;

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/AbstractElasticJobExecutor.java
Patch:
@@ -167,7 +167,7 @@ private void process(final ShardingContexts shardingContexts, final JobExecution
         Collection<Integer> items = shardingContexts.getShardingItemParameters().keySet();
         if (1 == items.size()) {
             int item = shardingContexts.getShardingItemParameters().keySet().iterator().next();
-            JobExecutionEvent jobExecutionEvent =  new JobExecutionEvent(shardingContexts.getTaskId(), jobName, executionSource, item);
+            JobExecutionEvent jobExecutionEvent = new JobExecutionEvent(shardingContexts.getTaskId(), jobName, executionSource, item);
             process(shardingContexts, item, jobExecutionEvent);
             return;
         }

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/executor/handler/ExecutorServiceHandler.java
Patch:
@@ -35,5 +35,5 @@ public interface ExecutorServiceHandler {
      * 
      * @return 线程池服务对象
      */
-    ExecutorService createExecutorService(final String jobName);
+    ExecutorService createExecutorService(String jobName);
 }

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/config/ConfigurationService.java
Patch:
@@ -99,8 +99,8 @@ private Optional<LiteJobConfiguration> find() {
      * @throws JobExecutionEnvironmentException 本机与注册中心的时间误差秒数不在允许范围所抛出的异常
      */
     public void checkMaxTimeDiffSecondsTolerable() throws JobExecutionEnvironmentException {
-        int maxTimeDiffSeconds =  load(true).getMaxTimeDiffSeconds();
-        if (-1  == maxTimeDiffSeconds) {
+        int maxTimeDiffSeconds = load(true).getMaxTimeDiffSeconds();
+        if (-1 == maxTimeDiffSeconds) {
             return;
         }
         long timeDiff = Math.abs(timeService.getCurrentMillis() - jobNodeStorage.getRegistryCenterTime());

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/listener/AbstractJobListener.java
Patch:
@@ -44,5 +44,5 @@ public final void childEvent(final CuratorFramework client, final TreeCacheEvent
         dataChanged(path, event.getType(), null == childData.getData() ? "" : new String(childData.getData(), Charsets.UTF_8));
     }
     
-    protected abstract void dataChanged(final String path, final Type eventType, final String data);
+    protected abstract void dataChanged(String path, Type eventType, String data);
 }

File: elastic-job-lite-core/src/main/java/io/elasticjob/lite/internal/monitor/MonitorService.java
Patch:
@@ -117,7 +117,7 @@ private void dumpDirectly(final String path, final List<String> result) {
             }
             TreeCache treeCache = (TreeCache) regCenter.getRawCache("/" + jobName);
             ChildData treeCacheData = treeCache.getCurrentData(zkPath);
-            String treeCachePath =  null == treeCacheData ? "" : treeCacheData.getPath();
+            String treeCachePath = null == treeCacheData ? "" : treeCacheData.getPath();
             String treeCacheValue = null == treeCacheData ? "" : new String(treeCacheData.getData());
             if (zkValue.equals(treeCacheValue) && zkPath.equals(treeCachePath)) {
                 result.add(Joiner.on(" | ").join(zkPath, zkValue));

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/api/ShardingContextTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.elasticjob.lite.fixture.ShardingContextsBuilder;
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class ShardingContextTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/api/strategy/JobInstanceTest.java
Patch:
@@ -1,10 +1,9 @@
 package io.elasticjob.lite.api.strategy;
 
 import io.elasticjob.lite.util.env.IpUtils;
-import org.hamcrest.core.Is;
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class JobInstanceTest {
@@ -16,6 +15,6 @@ public void assertGetJobInstanceId() {
     
     @Test
     public void assertGetIp() {
-        assertThat(new JobInstance().getIp(), Is.is(IpUtils.getIp()));
+        assertThat(new JobInstance().getIp(), is(IpUtils.getIp()));
     }
 }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/config/JobCoreConfigurationTest.java
Patch:
@@ -22,7 +22,7 @@
 import io.elasticjob.lite.fixture.handler.IgnoreJobExceptionHandler;
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/config/LiteJobConfigurationTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.elasticjob.lite.fixture.TestSimpleJob;
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/JobEventBusTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.mockito.junit.MockitoJUnitRunner;
 import org.unitils.util.ReflectionUtils;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/JobExecutionEventTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.elasticjob.lite.event.type.JobExecutionEvent;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.startsWith;
-import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/fixture/JobEventCaller.java
Patch:
@@ -19,5 +19,8 @@
 
 public interface JobEventCaller {
     
+    /**
+     * Execute call.
+     */
     void call();
 }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/fixture/TestJobEventListener.java
Patch:
@@ -42,6 +42,9 @@ public void listen(final JobStatusTraceEvent jobStatusTraceEvent) {
         jobEventCaller.call();
     }
     
+    /**
+     * Set executionEventCalled to false.
+     */
     public static void reset() {
         executionEventCalled = false;
     }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/rdb/JobEventRdbConfigurationTest.java
Patch:
@@ -22,13 +22,13 @@
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class JobEventRdbConfigurationTest {
     
     @Test
-    public void assertGetDataSource() throws JobEventListenerConfigurationException {
+    public void assertGetDataSource() {
         BasicDataSource dataSource = new BasicDataSource();
         dataSource.setDriverClassName(org.h2.Driver.class.getName());
         dataSource.setUrl("jdbc:h2:mem:job_event_storage");

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/rdb/JobEventRdbIdentityTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class JobEventRdbIdentityTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/rdb/JobEventRdbListenerTest.java
Patch:
@@ -74,7 +74,7 @@ public void assertPostJobExecutionEvent() {
     @Test
     public void assertPostJobStatusTraceEvent() {
         JobStatusTraceEvent jobStatusTraceEvent = new JobStatusTraceEvent(
-                JOB_NAME, "fake_task_id", "fake_slave_id",  Source.LITE_EXECUTOR, ExecutionType.READY, "0", State.TASK_RUNNING, "message is empty.");
+                JOB_NAME, "fake_task_id", "fake_slave_id", Source.LITE_EXECUTOR, ExecutionType.READY, "0", State.TASK_RUNNING, "message is empty.");
         jobEventBus.post(jobStatusTraceEvent);
         verify(repository, atMost(1)).addJobStatusTraceEvent(jobStatusTraceEvent);
     }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/event/rdb/JobEventRdbSearchTest.java
Patch:
@@ -38,7 +38,7 @@ public class JobEventRdbSearchTest {
     
     private static JobEventRdbStorage storage;
     
-    private static JobEventRdbSearch  repository;
+    private static JobEventRdbSearch repository;
     
     @BeforeClass
     public static void setUpClass() throws SQLException {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/exception/ExceptionUtilTest.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.junit.Test;
 
-import static junit.framework.TestCase.assertTrue;
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 
 public final class ExceptionUtilTest {
     

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/exception/JobConfigurationExceptionTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class JobConfigurationExceptionTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/exception/JobExecutionEnvironmentExceptionTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class JobExecutionEnvironmentExceptionTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/exception/JobSystemExceptionTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class JobSystemExceptionTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/executor/JobExecutorFactoryTest.java
Patch:
@@ -33,9 +33,9 @@
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
 
-import static junit.framework.TestCase.assertTrue;
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/executor/handler/ExecutorServiceHandlerRegistryTest.java
Patch:
@@ -30,8 +30,8 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsNot.not;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertThat;
 
 public final class ExecutorServiceHandlerRegistryTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/integrate/WaitingUtils.java
Patch:
@@ -23,6 +23,9 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class WaitingUtils {
     
+    /**
+     * Wait for a short time.
+     */
     public static void waitingShortTime() {
         sleep(300L);
     }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJobForExecuteFailure.java
Patch:
@@ -42,6 +42,9 @@ public void processData(final ShardingContext shardingContext, final List<String
         completed = true;
     }
     
+    /**
+     * Set completed to false.
+     */
     public static void reset() {
         completed = false;
     }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/integrate/fixture/dataflow/StreamingDataflowElasticJobForExecuteThrowsException.java
Patch:
@@ -44,6 +44,9 @@ public void processData(final ShardingContext shardingContext, final List<String
         throw new JobSystemException("I want an error.");
     }
     
+    /**
+     * Set completed to false.
+     */
     public static void reset() {
         completed = false;
     }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/integrate/fixture/simple/FooSimpleElasticJob.java
Patch:
@@ -31,6 +31,9 @@ public void execute(final ShardingContext shardingContext) {
         completed = true;
     }
     
+    /**
+     * Set completed to false.
+     */
     public static void reset() {
         completed = false;
     }

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/config/LiteJobConfigurationGsonFactoryTest.java
Patch:
@@ -31,7 +31,7 @@
 import io.elasticjob.lite.fixture.TestSimpleJob;
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
@@ -41,7 +41,7 @@ public final class LiteJobConfigurationGsonFactoryTest {
     private static final String JOB_PROPS_JSON = "{\"job_exception_handler\":\"" + DefaultJobExceptionHandler.class.getCanonicalName() + "\","
             + "\"executor_service_handler\":\"" + DefaultExecutorServiceHandler.class.getCanonicalName() + "\"}";
     
-    private String simpleJobJson =  "{\"jobName\":\"test_job\",\"jobClass\":\"io.elasticjob.lite.fixture.TestSimpleJob\",\"jobType\":\"SIMPLE\",\"cron\":\"0/1 * * * * ?\","
+    private String simpleJobJson = "{\"jobName\":\"test_job\",\"jobClass\":\"io.elasticjob.lite.fixture.TestSimpleJob\",\"jobType\":\"SIMPLE\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"\",\"failover\":true,\"misfire\":false,\"description\":\"\","
             + "\"jobProperties\":" + JOB_PROPS_JSON + ",\"monitorExecution\":false,\"maxTimeDiffSeconds\":1000,\"monitorPort\":8888,"
             + "\"jobShardingStrategyClass\":\"testClass\",\"reconcileIntervalMinutes\":15,\"disabled\":true,\"overwrite\":true}";

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/guarantee/GuaranteeNodeTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.junit.Test;
 
-import static junit.framework.TestCase.assertFalse;
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/instance/InstanceServiceTest.java
Patch:
@@ -13,9 +13,9 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import static junit.framework.TestCase.assertTrue;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/schedule/LiteJobFacadeTest.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -41,8 +41,8 @@
 
 import java.util.Collections;
 
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/sharding/ExecutionContextServiceTest.java
Patch:
@@ -38,9 +38,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static junit.framework.TestCase.assertTrue;
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 
 public final class ExecutionContextServiceTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/sharding/ExecutionServiceTest.java
Patch:
@@ -109,7 +109,6 @@ public void assertRegisterJobCompletedWithMonitorExecution() {
         assertFalse(JobRegistry.getInstance().isJobRunning("test_job"));
     }
     
-    
     @Test
     public void assertClearAllRunningInfo() {
         when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/internal/sharding/MonitorExecutionListenerManagerTest.java
Patch:
@@ -20,7 +20,6 @@ public final class MonitorExecutionListenerManagerTest {
     @Mock
     private ExecutionService executionService;
     
-    
     private final MonitorExecutionListenerManager monitorExecutionListenerManager = new MonitorExecutionListenerManager(null, "test_job");
     
     @Before

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/reg/zookeeper/ZookeeperConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class ZookeeperConfigurationTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
Patch:
@@ -85,7 +85,6 @@ public void assertPersistEphemeral() throws Exception {
         zkRegCenter.init();
     }
     
-    
     @Test
     public void assertPersistSequential() throws Exception {
         assertThat(zkRegCenter.persistSequential("/sequential/test_sequential", "test_value"), startsWith("/sequential/test_sequential"));

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/reg/zookeeper/ZookeeperRegistryCenterQueryWithoutCacheTest.java
Patch:
@@ -26,9 +26,9 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import static junit.framework.TestCase.assertNull;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/util/digest/EncryptionTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 
 public final class EncryptionTest {

File: elastic-job-lite-core/src/test/java/io/elasticjob/lite/util/env/TimeServiceTest.java
Patch:
@@ -19,14 +19,14 @@
 
 import org.junit.Test;
 
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 
 public class TimeServiceTest {
     
     private TimeService timeService = new TimeService();
     
     @Test
-    public void assertGetCurrentMillis() throws Exception {
+    public void assertGetCurrentMillis() {
         assertTrue(timeService.getCurrentMillis() <= System.currentTimeMillis());
     }
 }

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/api/JobSettingsAPI.java
Patch:
@@ -46,5 +46,5 @@ public interface JobSettingsAPI {
      *
      * @param jobName 作业名称
      */
-    void removeJobSettings(final String jobName);
+    void removeJobSettings(String jobName);
 }

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/reg/RegistryCenterFactory.java
Patch:
@@ -49,7 +49,7 @@ public final class RegistryCenterFactory {
      * @return 注册中心对象
      */
     public static CoordinatorRegistryCenter createCoordinatorRegistryCenter(final String connectString, final String namespace, final Optional<String> digest) {
-        Hasher hasher =  Hashing.md5().newHasher().putString(connectString, Charsets.UTF_8).putString(namespace, Charsets.UTF_8);
+        Hasher hasher = Hashing.md5().newHasher().putString(connectString, Charsets.UTF_8).putString(namespace, Charsets.UTF_8);
         if (digest.isPresent()) {
             hasher.putString(digest.get(), Charsets.UTF_8);
         }

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -155,7 +155,6 @@ private JobBriefInfo.JobStatus getJobStatusByJobNameAndIp(final String jobName,
         }
     }
     
-    
     private int getJobInstanceCountByJobNameAndIp(final String jobName, final String ip) {
         int instanceCount = 0;
         JobNodePath jobNodePath = new JobNodePath(jobName);

File: elastic-job-lite-lifecycle/src/main/java/io/elasticjob/lite/lifecycle/security/WwwAuthFilter.java
Patch:
@@ -58,7 +58,6 @@ public final class WwwAuthFilter implements Filter {
     
     private static final String GUEST_DEFAULT_PASSWORD = "guest";
     
-    
     private String rootUsername;
     
     private String rootPassword;

File: elastic-job-lite-lifecycle/src/test/java/io/elasticjob/lite/lifecycle/internal/operate/JobOperateAPIImplTest.java
Patch:
@@ -28,8 +28,8 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import static junit.framework.TestCase.assertTrue;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: elastic-job-lite-lifecycle/src/test/java/io/elasticjob/lite/lifecycle/internal/reg/RegistryCenterFactoryTest.java
Patch:
@@ -26,7 +26,7 @@
 
 import java.lang.reflect.Method;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 

File: elastic-job-lite-lifecycle/src/test/java/io/elasticjob/lite/lifecycle/internal/settings/JobSettingsAPIImplTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;

File: elastic-job-lite-lifecycle/src/test/java/io/elasticjob/lite/lifecycle/internal/statistics/ServerStatisticsAPIImplTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 
-import static org.hamcrest.core.Is.is;
+import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.when;

File: elastic-job-lite-lifecycle/src/test/java/io/elasticjob/lite/lifecycle/restful/RestfulExceptionTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-import static org.hamcrest.core.IsInstanceOf.instanceOf;
+import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.junit.Assert.assertThat;
 
 public final class RestfulExceptionTest {

File: elastic-job-lite-lifecycle/src/test/java/io/elasticjob/lite/lifecycle/restful/fixture/TestRestfulApi.java
Patch:
@@ -32,7 +32,9 @@ public final class TestRestfulApi {
     @Setter
     private static Caller caller;
     
+    //CHECKSTYLE:OFF
     @POST
+    //CHECKSTYLE:ON
     @Path("/call")
     @Consumes(MediaType.APPLICATION_JSON)
     public Map<String, String> call(final Map<String, String> map) {

File: elastic-job-lite-spring/src/test/java/io/elasticjob/lite/spring/fixture/aspect/SimpleAspect.java
Patch:
@@ -27,6 +27,9 @@
 @Aspect
 public class SimpleAspect {
     
+    /**
+     * Aspect.
+     */
     @Pointcut("execution(* io.elasticjob.lite.spring.fixture..*(..))")
     public void aspect() {
     }

File: elastic-job-lite-spring/src/test/java/io/elasticjob/lite/spring/fixture/job/DataflowElasticJob.java
Patch:
@@ -42,6 +42,9 @@ public void processData(final ShardingContext shardingContext, final List<String
         completed = true;
     }
     
+    /**
+     * Set completed to false.
+     */
     public static void reset() {
         completed = false;
     }

File: elastic-job-lite-spring/src/test/java/io/elasticjob/lite/spring/fixture/job/FooSimpleElasticJob.java
Patch:
@@ -31,6 +31,9 @@ public void execute(final ShardingContext shardingContext) {
         completed = true;
     }
     
+    /**
+     * Set completed to false.
+     */
     public static void reset() {
         completed = false;
     }

File: elastic-job-lite-spring/src/test/java/io/elasticjob/lite/spring/fixture/job/ref/RefFooDataflowElasticJob.java
Patch:
@@ -49,6 +49,9 @@ public void processData(final ShardingContext shardingContext, final List<String
         completed = true;
     }
     
+    /**
+     * Set completed to false.
+     */
     public static void reset() {
         completed = false;
     }

File: elastic-job-cloud/elastic-job-cloud-executor/src/main/java/com/dangdang/ddframe/job/cloud/executor/TaskExecutor.java
Patch:
@@ -117,6 +117,7 @@ class TaskThread implements Runnable {
         
         @Override
         public void run() {
+            Thread.currentThread().setContextClassLoader(TaskThread.class.getClassLoader());
             executorDriver.sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskInfo.getTaskId()).setState(Protos.TaskState.TASK_RUNNING).build());
             Map<String, Object> data = SerializationUtils.deserialize(taskInfo.getData().toByteArray());
             ShardingContexts shardingContexts = (ShardingContexts) data.get("shardingContext");

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/env/MesosConfiguration.java
Patch:
@@ -44,4 +44,6 @@ public final class MesosConfiguration {
     private final String url;
     
     private final String hostname;
+    
+    private final Boolean enablePartitionAware;
 }

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/event/type/JobStatusTraceEvent.java
Patch:
@@ -44,7 +44,7 @@ public final class JobStatusTraceEvent implements JobEvent {
     private Date creationTime = new Date();
     
     public enum State {
-        TASK_STAGING, TASK_RUNNING, TASK_FINISHED, TASK_KILLED, TASK_LOST, TASK_FAILED, TASK_ERROR
+        TASK_STAGING, TASK_RUNNING, TASK_FINISHED, TASK_KILLED, TASK_LOST, TASK_FAILED, TASK_ERROR, TASK_DROPPED, TASK_GONE, TASK_GONE_BY_OPERATOR, TASK_UNREACHABLE, TASK_UNKNOWN
     }
     
     public enum Source {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/config/job/CloudJobConfigurationListener.java
Patch:
@@ -70,7 +70,7 @@ public void childEvent(final CuratorFramework client, final TreeCacheEvent event
             if (!jobConfig.getTypeConfig().getCoreConfig().isMisfire()) {
                 readyService.setMisfireDisabled(jobConfig.getJobName());
             }
-            producerManager.reschedule(jobConfig);
+            producerManager.reschedule(jobConfig.getJobName());
         } else if (isJobConfigNode(event, path, Type.NODE_REMOVED)) {
             String jobName = path.substring(CloudJobConfigurationNode.ROOT.length() + 1, path.length());
             producerManager.unschedule(jobName);

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/producer/TransientProducerScheduler.java
Patch:
@@ -112,7 +112,7 @@ private Trigger buildTrigger(final String cron) {
         return TriggerBuilder.newTrigger().withIdentity(cron).withSchedule(CronScheduleBuilder.cronSchedule(cron).withMisfireHandlingInstructionDoNothing()).build();
     }
     
-    void deregister(final CloudJobConfiguration jobConfig) {
+    synchronized void deregister(final CloudJobConfiguration jobConfig) {
         repository.remove(jobConfig.getJobName());
         String cron = jobConfig.getTypeConfig().getCoreConfig().getCron();
         if (!repository.containsKey(buildJobKey(cron))) {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApi.java
Patch:
@@ -184,8 +184,10 @@ public boolean isDisabled(@PathParam("jobName") final String jobName) throws JSO
     @DELETE
     @Path("/{jobName}/disable")
     public void enable(@PathParam("jobName") final String jobName) throws JSONException {
-        if (configService.load(jobName).isPresent()) {
+        Optional<CloudJobConfiguration> configOptional = configService.load(jobName);
+        if (configOptional.isPresent()) {
             facadeService.enableJob(jobName);
+            producerManager.reschedule(jobName);
         }
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/FacadeServiceTest.java
Patch:
@@ -222,6 +222,7 @@ public void assertLoadJobConfigWhenAbsent() {
     
     @Test
     public void assertAddDaemonJobToReadyQueue() {
+        when(jobConfigService.load("test_job")).thenReturn(Optional.of(CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job")));
         facadeService.addDaemonJobToReadyQueue("test_job");
         verify(readyService).addDaemon("test_job");
     }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApiTest.java
Patch:
@@ -106,7 +106,7 @@ public void assertUpdate() throws Exception {
     public void assertDeregister() throws Exception {
         when(getRegCenter().isExisted("/config/job/test_job")).thenReturn(false);
         assertThat(sentRequest("http://127.0.0.1:19000/api/job/deregister", "DELETE", "test_job"), is(204));
-        verify(getRegCenter(), times(2)).get("/config/job/test_job");
+        verify(getRegCenter(), times(3)).get("/config/job/test_job");
     }
     
     @Test

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/config/job/CloudJobConfigurationListener.java
Patch:
@@ -70,7 +70,7 @@ public void childEvent(final CuratorFramework client, final TreeCacheEvent event
             if (!jobConfig.getTypeConfig().getCoreConfig().isMisfire()) {
                 readyService.setMisfireDisabled(jobConfig.getJobName());
             }
-            producerManager.reschedule(jobConfig);
+            producerManager.reschedule(jobConfig.getJobName());
         } else if (isJobConfigNode(event, path, Type.NODE_REMOVED)) {
             String jobName = path.substring(CloudJobConfigurationNode.ROOT.length() + 1, path.length());
             producerManager.unschedule(jobName);

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/producer/TransientProducerScheduler.java
Patch:
@@ -112,7 +112,7 @@ private Trigger buildTrigger(final String cron) {
         return TriggerBuilder.newTrigger().withIdentity(cron).withSchedule(CronScheduleBuilder.cronSchedule(cron).withMisfireHandlingInstructionDoNothing()).build();
     }
     
-    void deregister(final CloudJobConfiguration jobConfig) {
+    synchronized void deregister(final CloudJobConfiguration jobConfig) {
         repository.remove(jobConfig.getJobName());
         String cron = jobConfig.getTypeConfig().getCoreConfig().getCron();
         if (!repository.containsKey(buildJobKey(cron))) {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApi.java
Patch:
@@ -184,8 +184,10 @@ public boolean isDisabled(@PathParam("jobName") final String jobName) throws JSO
     @DELETE
     @Path("/{jobName}/disable")
     public void enable(@PathParam("jobName") final String jobName) throws JSONException {
-        if (configService.load(jobName).isPresent()) {
+        Optional<CloudJobConfiguration> configOptional = configService.load(jobName);
+        if (configOptional.isPresent()) {
             facadeService.enableJob(jobName);
+            producerManager.reschedule(jobName);
         }
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/FacadeServiceTest.java
Patch:
@@ -222,6 +222,7 @@ public void assertLoadJobConfigWhenAbsent() {
     
     @Test
     public void assertAddDaemonJobToReadyQueue() {
+        when(jobConfigService.load("test_job")).thenReturn(Optional.of(CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job")));
         facadeService.addDaemonJobToReadyQueue("test_job");
         verify(readyService).addDaemon("test_job");
     }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApiTest.java
Patch:
@@ -106,7 +106,7 @@ public void assertUpdate() throws Exception {
     public void assertDeregister() throws Exception {
         when(getRegCenter().isExisted("/config/job/test_job")).thenReturn(false);
         assertThat(sentRequest("http://127.0.0.1:19000/api/job/deregister", "DELETE", "test_job"), is(204));
-        verify(getRegCenter(), times(2)).get("/config/job/test_job");
+        verify(getRegCenter(), times(3)).get("/config/job/test_job");
     }
     
     @Test

File: elastic-job-cloud/elastic-job-cloud-executor/src/test/java/com/dangdang/ddframe/job/cloud/executor/AllCloudExecutorTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.executor;
 
+import com.dangdang.ddframe.job.cloud.executor.local.AllLocalExecutorTests;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.junit.runner.RunWith;
@@ -29,7 +30,8 @@
         DaemonTaskSchedulerTest.class, 
         JobConfigurationContextTest.class,
         TaskExecutorTest.class,
-        TaskExecutorThreadTest.class
+        TaskExecutorThreadTest.class,
+        AllLocalExecutorTests.class
     })
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class AllCloudExecutorTests {

File: elastic-job-cloud/elastic-job-cloud-executor/src/test/java/com/dangdang/ddframe/job/cloud/executor/AllCloudExecutorTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.executor;
 
+import com.dangdang.ddframe.job.cloud.executor.local.AllLocalExecutorTests;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.junit.runner.RunWith;
@@ -29,7 +30,8 @@
         DaemonTaskSchedulerTest.class, 
         JobConfigurationContextTest.class,
         TaskExecutorTest.class,
-        TaskExecutorThreadTest.class
+        TaskExecutorThreadTest.class,
+        AllLocalExecutorTests.class
     })
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class AllCloudExecutorTests {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/JobTaskRequest.java
Patch:
@@ -82,7 +82,7 @@ public Map<String, Double> getScalarRequests() {
     
     @Override
     public List<? extends ConstraintEvaluator> getHardConstraints() {
-        return null;
+        return Collections.singletonList(AppConstraintEvaluator.getInstance());
     }
     
     @Override

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/AllMesosTests.java
Patch:
@@ -34,7 +34,8 @@
         LaunchingTasksTest.class,
         FrameworkIDServiceTest.class,
         MesosStateServiceTest.class,
-        ReconcileServiceTest.class
+        ReconcileServiceTest.class,
+        AppConstraintEvaluatorTest.class
     })
 public final class AllMesosTests {
 }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/JobTaskRequest.java
Patch:
@@ -82,7 +82,7 @@ public Map<String, Double> getScalarRequests() {
     
     @Override
     public List<? extends ConstraintEvaluator> getHardConstraints() {
-        return null;
+        return Collections.singletonList(AppConstraintEvaluator.getInstance());
     }
     
     @Override

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/AllMesosTests.java
Patch:
@@ -34,7 +34,8 @@
         LaunchingTasksTest.class,
         FrameworkIDServiceTest.class,
         MesosStateServiceTest.class,
-        ReconcileServiceTest.class
+        ReconcileServiceTest.class,
+        AppConstraintEvaluatorTest.class
     })
 public final class AllMesosTests {
 }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/config/job/CloudJobConfigurationListener.java
Patch:
@@ -20,6 +20,7 @@
 import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager;
 import com.dangdang.ddframe.job.cloud.scheduler.state.ready.ReadyService;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.recipes.cache.TreeCache;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
@@ -35,6 +36,7 @@
  * @author zhangliang
  * @author caohao
  */
+@Slf4j
 public final class CloudJobConfigurationListener implements TreeCacheListener {
     
     private final CoordinatorRegistryCenter regCenter;
@@ -84,6 +86,7 @@ private CloudJobConfiguration getJobConfig(final TreeCacheEvent event) {
             return CloudJobConfigurationGsonFactory.fromJson(new String(event.getData().getData()));
             // CHECKSTYLE:OFF
         } catch (final Exception ex) {
+            log.warn("Wrong Cloud Job Configuration with:", ex.getMessage());
             // CHECKSTYLE:ON
             return null;
         }

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/event/rdb/JobEventRdbConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public final class JobEventRdbConfiguration extends JobEventRdbIdentity implemen
     
     private static final long serialVersionUID = 3344410699286435226L;
     
-    private final DataSource dataSource;
+    private final transient DataSource dataSource;
     
     @Override
     public JobEventListener createJobEventListener() throws JobEventListenerConfigurationException {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/listener/AbstractDistributeOnceElasticJobListener.java
Patch:
@@ -109,14 +109,14 @@ private void handleTimeout(final long timeoutMilliseconds) {
      *
      * @param shardingContexts 分片上下文
      */
-    public abstract void doBeforeJobExecutedAtLastStarted(final ShardingContexts shardingContexts);
+    public abstract void doBeforeJobExecutedAtLastStarted(ShardingContexts shardingContexts);
     
     /**
      * 分布式环境中最后一个作业执行后的执行的方法.
      *
      * @param shardingContexts 分片上下文
      */
-    public abstract void doAfterJobExecutedAtLastCompleted(final ShardingContexts shardingContexts);
+    public abstract void doAfterJobExecutedAtLastCompleted(ShardingContexts shardingContexts);
     
     /**
      * 通知任务开始.

File: elastic-job-cloud/elastic-job-cloud-executor/src/main/java/com/dangdang/ddframe/job/cloud/executor/TaskExecutor.java
Patch:
@@ -133,7 +133,6 @@ public void run() {
                 // CHECKSTYLE:OFF
             } catch (final Throwable ex) {
                 // CHECKSTYLE:ON
-                executorDriver.sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskInfo.getTaskId()).setState(Protos.TaskState.TASK_ERROR).build());
                 executorDriver.stop();
                 throw ex;
             }

File: elastic-job-cloud/elastic-job-cloud-executor/src/test/java/com/dangdang/ddframe/job/cloud/executor/AllCloudExecutorTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.executor;
 
+import com.dangdang.ddframe.job.cloud.executor.local.AllLocalExecutorTests;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.junit.runner.RunWith;
@@ -29,7 +30,8 @@
         DaemonTaskSchedulerTest.class, 
         JobConfigurationContextTest.class,
         TaskExecutorTest.class,
-        TaskExecutorThreadTest.class
+        TaskExecutorThreadTest.class,
+        AllLocalExecutorTests.class
     })
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class AllCloudExecutorTests {

File: elastic-job-cloud/elastic-job-cloud-executor/src/main/java/com/dangdang/ddframe/job/cloud/executor/TaskExecutor.java
Patch:
@@ -21,7 +21,6 @@
 import com.dangdang.ddframe.job.api.script.ScriptJob;
 import com.dangdang.ddframe.job.event.JobEventBus;
 import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration;
-import com.dangdang.ddframe.job.exception.ExceptionUtil;
 import com.dangdang.ddframe.job.exception.JobSystemException;
 import com.dangdang.ddframe.job.executor.JobExecutorFactory;
 import com.dangdang.ddframe.job.executor.ShardingContexts;
@@ -134,8 +133,6 @@ public void run() {
                 // CHECKSTYLE:OFF
             } catch (final Throwable ex) {
                 // CHECKSTYLE:ON
-                log.error("Elastic-Job-Cloud-Executor error", ex);
-                executorDriver.sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskInfo.getTaskId()).setState(Protos.TaskState.TASK_ERROR).setMessage(ExceptionUtil.transform(ex)).build());
                 executorDriver.stop();
                 throw ex;
             }

File: elastic-job-cloud/elastic-job-cloud-executor/src/main/java/com/dangdang/ddframe/job/cloud/executor/local/LocalTaskExecutor.java
Patch:
@@ -124,12 +124,12 @@ public boolean cancel(final boolean mayInterruptIfRunning) {
             }
             return true;
         }
-    
+        
         @Override
         public boolean isCancelled() {
             return DAEMON.equals(localCloudJobConfiguration.getExecutionType());
         }
-    
+        
         @Override
         public boolean isDone() {
             return latch.getCount() < 1;
@@ -140,7 +140,7 @@ public Integer get() throws InterruptedException, ExecutionException {
             latch.await();
             return Long.valueOf(shardingTotalCount - latch.getCount()).intValue();
         }
-    
+        
         @Override
         public Integer get(final long timeout, final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
             latch.await(timeout, unit);

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/script/ScriptJobBeanDefinitionParser.java
Patch:
@@ -21,6 +21,7 @@
 import com.dangdang.ddframe.job.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.xml.ParserContext;
 import org.w3c.dom.Element;
 
 /**
@@ -31,7 +32,7 @@
 public final class ScriptJobBeanDefinitionParser extends AbstractJobBeanDefinitionParser {
     
     @Override
-    protected BeanDefinition getJobTypeConfigurationBeanDefinition(final BeanDefinition jobCoreConfigurationBeanDefinition, final Element element) {
+    protected BeanDefinition getJobTypeConfigurationBeanDefinition(final ParserContext parserContext, final BeanDefinition jobCoreConfigurationBeanDefinition, final Element element) {
         BeanDefinitionBuilder result = BeanDefinitionBuilder.rootBeanDefinition(ScriptJobConfiguration.class);
         result.addConstructorArgValue(jobCoreConfigurationBeanDefinition);
         result.addConstructorArgValue(element.getAttribute(ScriptJobBeanDefinitionParserTag.SCRIPT_COMMAND_LINE_ATTRIBUTE));

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/AllSpringIntegrateTests.java
Patch:
@@ -25,6 +25,7 @@
 @SuiteClasses({
         JobSpringNamespaceWithoutListenerTest.class,
         JobSpringNamespaceWithJobPropertiesTest.class,
+        JobSpringNamespaceWithRefTest.class,
         JobSpringNamespaceWithListenerTest.class,
         JobSpringNamespaceWithListenerAndJdkDynamicProxyTest.class,
         JobSpringNamespaceWithListenerAndCglibTest.class,

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/RestfulService.java
Patch:
@@ -18,6 +18,7 @@
 package com.dangdang.ddframe.job.cloud.scheduler.restful;
 
 import com.dangdang.ddframe.job.cloud.scheduler.env.RestfulServerConfiguration;
+import com.dangdang.ddframe.job.cloud.scheduler.mesos.ReconcileService;
 import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
 import com.dangdang.ddframe.job.restful.RestfulServer;
@@ -35,11 +36,11 @@ public final class RestfulService {
     
     private final RestfulServer restfulServer;
     
-    public RestfulService(final CoordinatorRegistryCenter regCenter, final RestfulServerConfiguration config, final ProducerManager producerManager) {
+    public RestfulService(final CoordinatorRegistryCenter regCenter, final RestfulServerConfiguration config, final ProducerManager producerManager, final ReconcileService reconcileService) {
         restfulServer = new RestfulServer(config.getPort());
         CloudJobRestfulApi.init(regCenter, producerManager);
         CloudAppRestfulApi.init(regCenter, producerManager);
-        CloudOperationRestfulApi.init(regCenter, producerManager);
+        CloudOperationRestfulApi.init(regCenter, reconcileService);
     }
     
     /**

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/AllMesosTests.java
Patch:
@@ -33,7 +33,8 @@
         SchedulerServiceTest.class,
         LaunchingTasksTest.class,
         FrameworkIDServiceTest.class,
-        MesosStateServiceTest.class
+        MesosStateServiceTest.class,
+        ReconcileServiceTest.class
     })
 public final class AllMesosTests {
 }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/restful/AbstractCloudRestfulApiTest.java
Patch:
@@ -18,7 +18,9 @@
 package com.dangdang.ddframe.job.cloud.scheduler.restful;
 
 import com.dangdang.ddframe.job.cloud.scheduler.env.RestfulServerConfiguration;
+import com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService;
 import com.dangdang.ddframe.job.cloud.scheduler.mesos.MesosStateService;
+import com.dangdang.ddframe.job.cloud.scheduler.mesos.ReconcileService;
 import com.dangdang.ddframe.job.cloud.scheduler.mesos.fixture.master.MesosMasterServerMock;
 import com.dangdang.ddframe.job.cloud.scheduler.mesos.fixture.slave.MesosSlaveServerMock;
 import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager;
@@ -65,7 +67,7 @@ private static void initRestfulServer() {
         SchedulerDriver schedulerDriver = mock(SchedulerDriver.class);
         ProducerManager producerManager = new ProducerManager(schedulerDriver, regCenter);
         producerManager.startup();
-        restfulService = new RestfulService(regCenter, new RestfulServerConfiguration(19000), producerManager);
+        restfulService = new RestfulService(regCenter, new RestfulServerConfiguration(19000), producerManager, new ReconcileService(schedulerDriver, new FacadeService(regCenter)));
         restfulService.start();
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudOperationRestfulApiTest.java
Patch:
@@ -34,8 +34,6 @@ public void assertExplicitReconcile() throws Exception {
         ReflectionUtils.setFieldValue(new CloudOperationRestfulApi(), "lastReconcileTime", 0);
         assertThat(sentRequest("http://127.0.0.1:19000/api/operate/reconcile/explicit", "POST", ""), is(204));
         assertThat(sentRequest("http://127.0.0.1:19000/api/operate/reconcile/explicit", "POST", ""), is(500));
-        ReflectionUtils.setFieldValue(new CloudOperationRestfulApi(), "lastReconcileTime", 0);
-        assertThat(sentRequest("http://127.0.0.1:19000/api/operate/reconcile/explicit?taskId=unknown", "POST", ""), is(500));
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/strategy/JobInstance.java
Patch:
@@ -22,7 +22,7 @@
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 
-import java.util.UUID;
+import java.lang.management.ManagementFactory;
 
 /**
  * 作业运行实例.
@@ -42,7 +42,7 @@ public final class JobInstance {
     private final String jobInstanceId;
     
     public JobInstance() {
-        jobInstanceId = IpUtils.getIp() + DELIMITER + UUID.randomUUID().toString();
+        jobInstanceId = IpUtils.getIp() + DELIMITER + ManagementFactory.getRuntimeMXBean().getName().split("@")[0];
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-lifecycle/src/main/java/com/dangdang/ddframe/job/lite/lifecycle/domain/ShardingInfo.java
Patch:
@@ -36,7 +36,9 @@ public final class ShardingInfo implements Serializable, Comparable<ShardingInfo
     private int item;
     
     private String serverIp;
-    
+
+    private String instanceId;
+
     private ShardingStatus status;
     
     private boolean failover;

File: elastic-job-lite/elastic-job-lite-lifecycle/src/main/java/com/dangdang/ddframe/job/lite/lifecycle/internal/statistics/ShardingStatisticsAPIImpl.java
Patch:
@@ -62,7 +62,9 @@ private ShardingInfo getShardingInfo(final String jobName, final String item) {
         result.setStatus(ShardingStatus.getShardingStatus(disabled, running, shardingError));
         result.setFailover(regCenter.isExisted(jobNodePath.getShardingNodePath(item, "failover")));
         if (null != instanceId) {
-            result.setServerIp(instanceId.split("@-@")[0]);
+            String[] ipAndPid = instanceId.split("@-@");
+            result.setServerIp(ipAndPid[0]);
+            result.setInstanceId(ipAndPid[1]);
         }
         return result;
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/config/LiteJobConfiguration.java
Patch:
@@ -65,7 +65,7 @@ public String getJobName() {
      * @return 是否开启失效转移
      */
     public boolean isFailover() {
-        return monitorExecution && typeConfig.getCoreConfig().isFailover();
+        return typeConfig.getCoreConfig().isFailover();
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/AllInternalTests.java
Patch:
@@ -47,6 +47,7 @@
 import com.dangdang.ddframe.job.lite.internal.server.ServerServiceTest;
 import com.dangdang.ddframe.job.lite.internal.sharding.ExecutionContextServiceTest;
 import com.dangdang.ddframe.job.lite.internal.sharding.ExecutionServiceTest;
+import com.dangdang.ddframe.job.lite.internal.sharding.MonitorExecutionListenerManagerTest;
 import com.dangdang.ddframe.job.lite.internal.sharding.ShardingListenerManagerTest;
 import com.dangdang.ddframe.job.lite.internal.sharding.ShardingNodeTest;
 import com.dangdang.ddframe.job.lite.internal.sharding.ShardingServiceTest;
@@ -78,7 +79,8 @@
         ServerNodeTest.class,
         ShardingListenerManagerTest.class, 
         ExecutionContextServiceTest.class, 
-        ExecutionServiceTest.class, 
+        ExecutionServiceTest.class,
+        MonitorExecutionListenerManagerTest.class, 
         ShardingNodeTest.class,
         FailoverServiceTest.class, 
         FailoverNodeTest.class,

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/failover/FailoverListenerManagerTest.java
Patch:
@@ -134,13 +134,13 @@ public void assertJobCrashedJobListenerWhenIsOtherFailoverInstanceCrashed() {
     
     @Test
     public void assertFailoverSettingsChangedJobListenerWhenIsNotFailoverPath() {
-        failoverListenerManager.new FailoverSettingsChangedJobListener().dataChanged("/test_job/config/other", Type.NODE_ADDED, LiteJsonConstants.getJobJson());
+        failoverListenerManager.new FailoverSettingsChangedJobListener().dataChanged("/test_job/other", Type.NODE_ADDED, LiteJsonConstants.getJobJson());
         verify(failoverService, times(0)).removeFailoverInfo();
     }
     
     @Test
     public void assertFailoverSettingsChangedJobListenerWhenIsFailoverPathButNotUpdate() {
-        failoverListenerManager.new FailoverSettingsChangedJobListener().dataChanged("/test_job/config/failover", Type.NODE_ADDED, "");
+        failoverListenerManager.new FailoverSettingsChangedJobListener().dataChanged("/test_job/config", Type.NODE_ADDED, "");
         verify(failoverService, times(0)).removeFailoverInfo();
     }
     
@@ -152,7 +152,7 @@ public void assertFailoverSettingsChangedJobListenerWhenIsFailoverPathAndUpdateB
     
     @Test
     public void assertFailoverSettingsChangedJobListenerWhenIsFailoverPathAndUpdateButDisableFailover() {
-        failoverListenerManager.new FailoverSettingsChangedJobListener().dataChanged("/test_job/config", Type.NODE_UPDATED, LiteJsonConstants.getJobJson(false));
+        failoverListenerManager.new FailoverSettingsChangedJobListener().dataChanged("/test_job/config", Type.NODE_UPDATED, LiteJsonConstants.getJobJsonWithFailover(false));
         verify(failoverService).removeFailoverInfo();
     }
 }

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/executor/AbstractElasticJobExecutor.java
Patch:
@@ -112,7 +112,6 @@ public final void execute() {
             }
             return;
         }
-        jobFacade.cleanPreviousExecutionInfo();
         try {
             jobFacade.beforeJobExecuted(shardingContexts);
             //CHECKSTYLE:OFF

File: elastic-job-common/elastic-job-common-core/src/test/java/com/dangdang/ddframe/job/executor/type/ElasticJobVerify.java
Patch:
@@ -45,7 +45,6 @@ public static void verifyForIsNotMisfire(final JobFacade jobFacade, final Shardi
         verify(jobFacade).getShardingContexts();
         verify(jobFacade).postJobStatusTraceEvent(shardingContexts.getTaskId(), JobStatusTraceEvent.State.TASK_STAGING, "Job 'test_job' execute begin.");
         verify(jobFacade).misfireIfRunning(shardingContexts.getShardingItemParameters().keySet());
-        verify(jobFacade).cleanPreviousExecutionInfo();
         verify(jobFacade).beforeJobExecuted(shardingContexts);
         verify(jobFacade).registerJobBegin(shardingContexts);
         verify(jobFacade).registerJobCompleted(shardingContexts);

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApi.java
Patch:
@@ -165,6 +165,8 @@ public void deregister(final String jobName) {
      * 查询作业是否被禁用.
      *
      * @param jobName 作业名称
+     * @return 作业是否被禁用
+     * @throws JSONException JSON解析异常
      */
     @GET
     @Path("/{jobName}/disable")
@@ -177,6 +179,7 @@ public boolean isDisabled(@PathParam("jobName") final String jobName) throws JSO
      * 启用作业.
      *
      * @param jobName 作业名称
+     * @throws JSONException JSON解析异常
      */
     @DELETE
     @Path("/{jobName}/disable")

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudAppRestfulApi.java
Patch:
@@ -148,7 +148,7 @@ public Collection<CloudAppConfiguration> findAllApps() {
      * 
      * @param appName 应用名称
      * @return 应用是否被禁用
-     * @throws JSONException
+     * @throws JSONException JSON解析异常
      */
     @GET
     @Path("/{appName}/disable")
@@ -177,8 +177,9 @@ public void disable(@PathParam("appName") final String appName) {
     
     /**
      * 启用应用.
+     * 
      * @param appName 应用名称
-     * @throws JSONException
+     * @throws JSONException JSON解析异常
      */
     @DELETE
     @Path("/{appName}/disable")

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudOperationRestfulApi.java
Patch:
@@ -101,7 +101,7 @@ private void validReconcileInterval() {
      *
      * @param appName 云作业App配置名称
      * @return 沙箱信息
-     * @throws JSONException
+     * @throws JSONException JSON解析异常
      */
     @GET
     @Path("/sandbox")

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudOperationRestfulApi.java
Patch:
@@ -51,7 +51,8 @@ public final class CloudOperationRestfulApi {
     /**
      * 初始化.
      * 
-     * @param producerManager 生产管理器
+     * @param regCenter 注册中心
+     * @param producerManager 产管理器
      */
     public static void init(final CoordinatorRegistryCenter regCenter, final ProducerManager producerManager) {
         CloudOperationRestfulApi.producerManager = producerManager;
@@ -100,6 +101,7 @@ private void validReconcileInterval() {
      *
      * @param appName 云作业App配置名称
      * @return 沙箱信息
+     * @throws JSONException
      */
     @GET
     @Path("/sandbox")

File: elastic-job-lite/elastic-job-lite-console/src/main/java/com/dangdang/ddframe/job/lite/console/ConsoleBootstrap.java
Patch:
@@ -40,6 +40,7 @@ public final class ConsoleBootstrap {
     /**
      * 启动RESTful服务并加载页面.
      * 
+     * @param args 启动参数
      * @throws Exception 启动服务器异常
      */
     //CHECKSTYLE:OFF

File: elastic-job-lite/elastic-job-lite-console/src/main/java/com/dangdang/ddframe/job/lite/console/restful/ServerOperationRestfulApi.java
Patch:
@@ -109,9 +109,10 @@ public void removeServer(@PathParam("serverIp") final String serverIp) {
     }
     
     /**
-     * 获取该服务器上注册的作业.
+     * 获取该服务器上注册的作业的简明信息.
      *
      * @param serverIp 服务器IP地址
+     * @return 作业简明信息对象集合
      */
     @GET
     @Path("/{serverIp}/jobs")

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/producer/ProducerManager.java
Patch:
@@ -132,6 +132,7 @@ public void update(final CloudJobConfiguration jobConfig) {
     public void deregister(final String jobName) {
         Optional<CloudJobConfiguration> jobConfig = configService.load(jobName);
         if (jobConfig.isPresent()) {
+            disableJobService.remove(jobName);
             configService.remove(jobName);
             transientProducerScheduler.deregister(jobConfig.get());
         }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudAppRestfulApi.java
Patch:
@@ -207,6 +207,7 @@ private void removeAppAndJobConfigurations(final String appName) {
                 producerManager.deregister(each.getJobName());
             }
         }
+        disableAppService.remove(appName);
         appConfigService.remove(appName);
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/producer/ProducerManagerTest.java
Patch:
@@ -191,6 +191,7 @@ public void assertDeregisterExisted() {
         for (TaskContext each : taskContexts) {
             verify(schedulerDriver).killTask(Protos.TaskID.newBuilder().setValue(each.getId()).build());
         }
+        verify(disableJobService).remove("transient_test_job");
         verify(configService).remove("transient_test_job");
         verify(runningService).remove("transient_test_job");
         verify(readyService).remove(Lists.newArrayList("transient_test_job"));

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/JobScheduler.java
Patch:
@@ -102,10 +102,11 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
      * 初始化作业.
      */
     public void init() {
+        LiteJobConfiguration liteJobConfig = schedulerFacade.updateJobConfiguration(this.liteJobConfig);
         JobRegistry.getInstance().setCurrentShardingTotalCount(liteJobConfig.getJobName(), liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount());
         JobScheduleController jobScheduleController = new JobScheduleController(createScheduler(), createJobDetail(liteJobConfig.getTypeConfig().getJobClass()), liteJobConfig.getJobName());
         JobRegistry.getInstance().registerJob(liteJobConfig.getJobName(), jobScheduleController, regCenter);
-        schedulerFacade.registerStartUpInfo(liteJobConfig);
+        schedulerFacade.registerStartUpInfo(!this.liteJobConfig.isDisabled());
         jobScheduleController.scheduleJob(liteJobConfig.getTypeConfig().getCoreConfig().getCron());
     }
     

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/api/JobSchedulerTest.java
Patch:
@@ -37,6 +37,7 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public final class JobSchedulerTest {
     
@@ -66,8 +67,9 @@ public void initMocks() throws NoSuchFieldException {
     
     @Test
     public void assertInit() throws NoSuchFieldException, SchedulerException {
+        when(schedulerFacade.updateJobConfiguration(liteJobConfig)).thenReturn(liteJobConfig);
         jobScheduler.init();
-        verify(schedulerFacade).registerStartUpInfo(liteJobConfig);
+        verify(schedulerFacade).registerStartUpInfo(true);
         Scheduler scheduler = ReflectionUtils.getFieldValue(JobRegistry.getInstance().getJobScheduleController("test_job"), JobScheduleController.class.getDeclaredField("scheduler"));
         assertTrue(scheduler.isStarted());
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/listener/RegistryCenterConnectionStateListener.java
Patch:
@@ -42,7 +42,7 @@ public void stateChanged(final CuratorFramework client, final ConnectionState ne
             return;
         }
         JobScheduleController jobScheduleController = JobRegistry.getInstance().getJobScheduleController(jobName);
-        if (ConnectionState.LOST == newState) {
+        if (ConnectionState.SUSPENDED == newState || ConnectionState.LOST == newState) {
             jobScheduleController.pauseJob();
         } else if (ConnectionState.RECONNECTED == newState) {
             serverService.persistOnline(serverService.isEnableServer(JobRegistry.getInstance().getJobInstance(jobName).getIp()));

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -88,7 +88,6 @@ public void setUp() throws NoSuchFieldException {
         schedulerFacade = new SchedulerFacade(null, "test_job", Collections.<ElasticJobListener>emptyList());
         when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
                 TestDataflowJob.class.getCanonicalName(), false)).build());
-        ReflectionUtils.setFieldValue(schedulerFacade, "regCenter", regCenter);
         ReflectionUtils.setFieldValue(schedulerFacade, "configService", configService);
         ReflectionUtils.setFieldValue(schedulerFacade, "leaderService", leaderService);
         ReflectionUtils.setFieldValue(schedulerFacade, "serverService", serverService);

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApiTest.java
Patch:
@@ -130,7 +130,7 @@ public void assertDetail() throws Exception {
     
     @Test
     public void assertDetailWithNotExistedJob() throws Exception {
-        assertThat(sentRequest("http://127.0.0.1:19000/api/job/jobs/notExistedJobName", "GET", ""), is(500));
+        assertThat(sentRequest("http://127.0.0.1:19000/api/job/jobs/notExistedJobName", "GET", ""), is(404));
     }
     
     @Test

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudAppRestfulApiTest.java
Patch:
@@ -71,7 +71,7 @@ public void assertDetail() throws Exception {
     
     @Test
     public void assertDetailWithNotExistedJob() throws Exception {
-        assertThat(sentRequest("http://127.0.0.1:19000/api/app/notExistedJobName", "GET", ""), is(500));
+        assertThat(sentRequest("http://127.0.0.1:19000/api/app/notExistedJobName", "GET", ""), is(404));
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/schedule/SchedulerFacade.java
Patch:
@@ -89,7 +89,6 @@ public SchedulerFacade(final CoordinatorRegistryCenter regCenter, final String j
      * @param liteJobConfig 作业配置
      */
     public void registerStartUpInfo(final LiteJobConfiguration liteJobConfig) {
-        regCenter.addCacheData("/" + liteJobConfig.getJobName());
         listenerManager.startAllListeners();
         leaderService.electLeader();
         configService.persist(liteJobConfig);

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -104,7 +104,6 @@ public void assertRegisterStartUpInfo() {
         when(configService.load(false)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
                 TestDataflowJob.class.getCanonicalName(), false)).build());
         schedulerFacade.registerStartUpInfo(liteJobConfig);
-        verify(regCenter).addCacheData("/test_job");
         verify(listenerManager).startAllListeners();
         verify(leaderService).electLeader();
         verify(configService).persist(liteJobConfig);

File: elastic-job-common/elastic-job-common-core/src/test/java/com/dangdang/ddframe/job/event/rdb/JobEventRdbStorageTest.java
Patch:
@@ -102,6 +102,7 @@ public void assertUpdateJobExecutionEventWhenFailure() throws SQLException {
         JobExecutionEvent failureEvent = startEvent.executionFailure(new RuntimeException("failure"));
         assertTrue(storage.addJobExecutionEvent(failureEvent));
         assertThat(failureEvent.getFailureCause(), startsWith("java.lang.RuntimeException: failure"));
+        assertTrue(null != failureEvent.getCompleteTime());
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ExecutionService.java
Patch:
@@ -18,6 +18,7 @@
 package com.dangdang.ddframe.job.lite.internal.sharding;
 
 import com.dangdang.ddframe.job.executor.ShardingContexts;
+import com.dangdang.ddframe.job.lite.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.lite.internal.election.LeaderService;
 import com.dangdang.ddframe.job.lite.internal.schedule.JobRegistry;
@@ -126,7 +127,8 @@ public void clearRunningInfo(final List<Integer> items) {
      * @return 分片项中是否还有执行中的作业
      */
     public boolean hasRunningItems(final Collection<Integer> items) {
-        if (!configService.load(true).isMonitorExecution()) {
+        LiteJobConfiguration jobConfig = configService.load(true);
+        if (null == jobConfig || !jobConfig.isMonitorExecution()) {
             return false;
         }
         for (int each : items) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/JobScheduler.java
Patch:
@@ -104,9 +104,9 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
     public void init() {
         JobRegistry.getInstance().setCurrentShardingTotalCount(liteJobConfig.getJobName(), liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount());
         JobScheduleController jobScheduleController = new JobScheduleController(createScheduler(), createJobDetail(liteJobConfig.getTypeConfig().getJobClass()), liteJobConfig.getJobName());
-        jobScheduleController.scheduleJob(liteJobConfig.getTypeConfig().getCoreConfig().getCron());
         JobRegistry.getInstance().registerJob(liteJobConfig.getJobName(), jobScheduleController, regCenter);
         schedulerFacade.registerStartUpInfo(liteJobConfig);
+        jobScheduleController.scheduleJob(liteJobConfig.getTypeConfig().getCoreConfig().getCron());
     }
     
     private JobDetail createJobDetail(final String jobClass) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ExecutionContextService.java
Patch:
@@ -70,7 +70,8 @@ public ShardingContexts getJobShardingContext(final List<Integer> shardingItems)
     }
     
     private String buildTaskId(final LiteJobConfiguration liteJobConfig, final List<Integer> shardingItems) {
-        return Joiner.on("@-@").join(liteJobConfig.getJobName(), Joiner.on(",").join(shardingItems), "READY", JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId()); 
+        String jobInstanceId = JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId();
+        return Joiner.on("@-@").join(liteJobConfig.getJobName(), Joiner.on(",").join(shardingItems), "READY", null == jobInstanceId ? "127.0.0.1@-@1" : jobInstanceId); 
     }
     
     private void removeRunningIfMonitorExecution(final boolean monitorExecution, final List<Integer> shardingItems) {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -98,6 +98,7 @@ public void statusUpdate(final SchedulerDriver schedulerDriver, final Protos.Tas
                     facadeService.updateDaemonStatus(taskContext, false);
                 } else if ("COMPLETE".equals(taskStatus.getMessage())) {
                     facadeService.updateDaemonStatus(taskContext, true);
+                    statisticManager.taskRunSuccessfully();
                 }
                 break;
             case TASK_FINISHED:

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/JobScheduler.java
Patch:
@@ -102,11 +102,11 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
      * 初始化作业.
      */
     public void init() {
-        schedulerFacade.registerStartUpInfo(liteJobConfig);
         JobRegistry.getInstance().setCurrentShardingTotalCount(liteJobConfig.getJobName(), liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount());
         JobScheduleController jobScheduleController = new JobScheduleController(createScheduler(), createJobDetail(liteJobConfig.getTypeConfig().getJobClass()), liteJobConfig.getJobName());
         jobScheduleController.scheduleJob(liteJobConfig.getTypeConfig().getCoreConfig().getCron());
         JobRegistry.getInstance().registerJob(liteJobConfig.getJobName(), jobScheduleController, regCenter);
+        schedulerFacade.registerStartUpInfo(liteJobConfig);
     }
     
     private JobDetail createJobDetail(final String jobClass) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/config/RescheduleListenerManager.java
Patch:
@@ -50,7 +50,7 @@ class CronSettingAndJobEventChangedJobListener extends AbstractJobListener {
         
         @Override
         protected void dataChanged(final String path, final Type eventType, final String data) {
-            if (configNode.isConfigPath(path) && Type.NODE_UPDATED == eventType && null != JobRegistry.getInstance().getJobScheduleController(jobName)) {
+            if (configNode.isConfigPath(path) && Type.NODE_UPDATED == eventType && !JobRegistry.getInstance().isShutdown(jobName)) {
                 JobRegistry.getInstance().getJobScheduleController(jobName).rescheduleJob(LiteJobConfigurationGsonFactory.fromJson(data).getTypeConfig().getCoreConfig().getCron());
             }
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/election/LeaderService.java
Patch:
@@ -68,7 +68,7 @@ public boolean isLeaderUntilBlock() {
         while (!hasLeader() && serverService.hasAvailableServers()) {
             log.info("Leader is electing, waiting for {} ms", 100);
             BlockUtils.waitingShortTime();
-            if (serverService.isAvailableServer(JobRegistry.getInstance().getJobInstance(jobName).getIp())) {
+            if (!JobRegistry.getInstance().isShutdown(jobName) && serverService.isAvailableServer(JobRegistry.getInstance().getJobInstance(jobName).getIp())) {
                 electLeader();
             }
         }
@@ -81,7 +81,7 @@ public boolean isLeaderUntilBlock() {
      * @return 当前节点是否是主节点
      */
     public boolean isLeader() {
-        return JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId().equals(jobNodeStorage.getJobNodeData(LeaderNode.INSTANCE));
+        return !JobRegistry.getInstance().isShutdown(jobName) && JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId().equals(jobNodeStorage.getJobNodeData(LeaderNode.INSTANCE));
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/listener/RegistryCenterConnectionStateListener.java
Patch:
@@ -38,6 +38,9 @@ public RegistryCenterConnectionStateListener(final CoordinatorRegistryCenter reg
     
     @Override
     public void stateChanged(final CuratorFramework client, final ConnectionState newState) {
+        if (JobRegistry.getInstance().isShutdown(jobName)) {
+            return;
+        }
         JobScheduleController jobScheduleController = JobRegistry.getInstance().getJobScheduleController(jobName);
         if (ConnectionState.LOST == newState) {
             jobScheduleController.pauseJob();

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -107,7 +107,7 @@ public void registerJobCompleted(final ShardingContexts shardingContexts) {
     public ShardingContexts getShardingContexts() {
         boolean isFailover = configService.load(true).isFailover();
         if (isFailover) {
-            List<Integer> failoverShardingItems = failoverService.getLocalHostFailoverItems();
+            List<Integer> failoverShardingItems = failoverService.getLocalFailoverItems();
             if (!failoverShardingItems.isEmpty()) {
                 return executionContextService.getJobShardingContext(failoverShardingItems);
             }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/server/ServerNode.java
Patch:
@@ -37,12 +37,12 @@ public final class ServerNode {
     
     private static final String SERVERS = ROOT + "/%s";
     
-    private final String ip;
+    private final String jobName;
     
     private final JobNodePath jobNodePath;
     
     public ServerNode(final String jobName) {
-        ip = JobRegistry.getInstance().getJobInstance(jobName).getIp();
+        this.jobName = jobName;
         jobNodePath = new JobNodePath(jobName);
     }
     
@@ -63,7 +63,7 @@ public boolean isServerPath(final String path) {
      * @return 是否为本地作业服务器路径
      */
     public boolean isLocalServerPath(final String path) {
-        return path.equals(jobNodePath.getFullPath(String.format(SERVERS, ip)));
+        return path.equals(jobNodePath.getFullPath(String.format(SERVERS, JobRegistry.getInstance().getJobInstance(jobName).getIp())));
     }
     
     String getServerNode(final String ip) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/server/ServerService.java
Patch:
@@ -50,7 +50,9 @@ public ServerService(final CoordinatorRegistryCenter regCenter, final String job
      * @param enabled 作业是否启用
      */
     public void persistOnline(final boolean enabled) {
-        jobNodeStorage.fillJobNode(serverNode.getServerNode(JobRegistry.getInstance().getJobInstance(jobName).getIp()), enabled ? "" : ServerStatus.DISABLED.name());
+        if (!JobRegistry.getInstance().isShutdown(jobName)) {
+            jobNodeStorage.fillJobNode(serverNode.getServerNode(JobRegistry.getInstance().getJobInstance(jobName).getIp()), enabled ? "" : ServerStatus.DISABLED.name());
+        }
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingListenerManager.java
Patch:
@@ -77,7 +77,7 @@ class ListenServersChangedJobListener extends AbstractJobListener {
         
         @Override
         protected void dataChanged(final String path, final Type eventType, final String data) {
-            if (!JobRegistry.getInstance().getJobInstance(jobName).isDefaultJobInstance() && (isInstanceChange(eventType, path) || isServerChange(path))) {
+            if (!JobRegistry.getInstance().isShutdown(jobName) && (isInstanceChange(eventType, path) || isServerChange(path))) {
                 shardingService.setReshardingFlag();
             }
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingService.java
Patch:
@@ -152,7 +152,7 @@ private void resetShardingInfo(final int shardingTotalCount) {
      * @return 运行在本作业实例的分片项集合
      */
     public List<Integer> getLocalShardingItems() {
-        if (!serverService.isAvailableServer(JobRegistry.getInstance().getJobInstance(jobName).getIp())) {
+        if (JobRegistry.getInstance().isShutdown(jobName) || !serverService.isAvailableServer(JobRegistry.getInstance().getJobInstance(jobName).getIp())) {
             return Collections.emptyList();
         }
         List<Integer> result = new LinkedList<>();

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/config/RescheduleListenerManagerTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.dangdang.ddframe.job.lite.internal.config;
 
 import com.dangdang.ddframe.job.event.JobEventBus;
+import com.dangdang.ddframe.job.lite.api.strategy.JobInstance;
 import com.dangdang.ddframe.job.lite.fixture.LiteJsonConstants;
 import com.dangdang.ddframe.job.lite.internal.config.RescheduleListenerManager.CronSettingAndJobEventChangedJobListener;
 import com.dangdang.ddframe.job.lite.internal.schedule.JobRegistry;
@@ -83,8 +84,10 @@ public void assertCronSettingChangedJobListenerWhenIsCronPathAndUpdateButCannotF
     
     @Test
     public void assertCronSettingChangedJobListenerWhenIsCronPathAndUpdateAndFindJob() {
+        JobRegistry.getInstance().addJobInstance("test_job", new JobInstance("127.0.0.1@-@0"));
         JobRegistry.getInstance().registerJob("test_job", jobScheduleController, regCenter);
         rescheduleListenerManager.new CronSettingAndJobEventChangedJobListener().dataChanged("/test_job/config", Type.NODE_UPDATED, LiteJsonConstants.getJobJson());
         verify(jobScheduleController).rescheduleJob("0/1 * * * * ?");
+        JobRegistry.getInstance().shutdown("test_job");
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/instance/TriggerListenerManagerTest.java
Patch:
@@ -81,6 +81,7 @@ public void assertTriggerWhenJobIsRunning() {
         verify(instanceService).clearTriggerFlag();
         verify(jobScheduleController, times(0)).triggerJob();
         JobRegistry.getInstance().setJobRunning("test_job", false);
+        JobRegistry.getInstance().shutdown("test_job");
     }
     
     @Test
@@ -89,5 +90,6 @@ public void assertTriggerWhenJobIsNotRunning() {
         triggerListenerManager.new JobTriggerStatusJobListener().dataChanged("/test_job/instances/127.0.0.1@-@0", Type.NODE_UPDATED, InstanceOperation.TRIGGER.name());
         verify(instanceService).clearTriggerFlag();
         verify(jobScheduleController).triggerJob();
+        JobRegistry.getInstance().shutdown("test_job");
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/LiteJobFacadeTest.java
Patch:
@@ -147,7 +147,7 @@ public void assertGetShardingContextWhenIsFailoverEnableAndFailover() {
         ShardingContexts shardingContexts = new ShardingContexts("fake_task_id", "test_job", 10, "", Collections.<Integer, String>emptyMap());
         when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).failover(true).build(), 
                 TestSimpleJob.class.getCanonicalName())).monitorExecution(true).build());
-        when(failoverService.getLocalHostFailoverItems()).thenReturn(Collections.singletonList(1));
+        when(failoverService.getLocalFailoverItems()).thenReturn(Collections.singletonList(1));
         when(executionContextService.getJobShardingContext(Collections.singletonList(1))).thenReturn(shardingContexts);
         assertThat(liteJobFacade.getShardingContexts(), is(shardingContexts));
         verify(shardingService, times(0)).shardingIfNecessary();
@@ -158,7 +158,7 @@ public void assertGetShardingContextWhenIsFailoverEnableAndNotFailover() {
         ShardingContexts shardingContexts = new ShardingContexts("fake_task_id", "test_job", 10, "", Collections.<Integer, String>emptyMap());
         when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).failover(true).build(), 
                 TestSimpleJob.class.getCanonicalName())).monitorExecution(true).build());
-        when(failoverService.getLocalHostFailoverItems()).thenReturn(Collections.<Integer>emptyList());
+        when(failoverService.getLocalFailoverItems()).thenReturn(Collections.<Integer>emptyList());
         when(shardingService.getLocalShardingItems()).thenReturn(Lists.newArrayList(0, 1));
         when(failoverService.getLocalHostTakeOffItems()).thenReturn(Collections.singletonList(0));
         when(executionContextService.getJobShardingContext(Collections.singletonList(1))).thenReturn(shardingContexts);

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/election/ElectionListenerManager.java
Patch:
@@ -17,7 +17,6 @@
 
 package com.dangdang.ddframe.job.lite.internal.election;
 
-import com.dangdang.ddframe.job.lite.api.strategy.JobInstance;
 import com.dangdang.ddframe.job.lite.internal.listener.AbstractJobListener;
 import com.dangdang.ddframe.job.lite.internal.listener.AbstractListenerManager;
 import com.dangdang.ddframe.job.lite.internal.schedule.JobRegistry;
@@ -64,7 +63,7 @@ class LeaderElectionJobListener extends AbstractJobListener {
         protected void dataChanged(final String path, final Type eventType, final String data) {
             if (isLeaderCrashed(path, eventType) && serverService.isAvailableServer(JobRegistry.getInstance().getJobInstance(jobName).getIp())
                     || !leaderService.hasLeader() && isLocalServerEnabled(path, data)) {
-                if (!JobRegistry.getInstance().getJobInstance(jobName).getJobInstanceId().equals(JobInstance.DEFAULT_INSTANCE_ID)) {
+                if (!JobRegistry.getInstance().getJobInstance(jobName).isDefaultJobInstance()) {
                     leaderService.electLeader();
                 }
             } else if (leaderService.isLeader() && isLocalServerDisabled(path, data)) {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -98,6 +98,7 @@ public void statusUpdate(final SchedulerDriver schedulerDriver, final Protos.Tas
                     facadeService.updateDaemonStatus(taskContext, false);
                 } else if ("COMPLETE".equals(taskStatus.getMessage())) {
                     facadeService.updateDaemonStatus(taskContext, true);
+                    statisticManager.taskRunSuccessfully();
                 }
                 break;
             case TASK_FINISHED:

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/schedule/JobShutdownHookPlugin.java
Patch:
@@ -26,6 +26,9 @@ public void initialize(final String name, final Scheduler scheduler, final Class
     @Override
     public void shutdown() {
         CoordinatorRegistryCenter regCenter = JobRegistry.getInstance().getRegCenter(jobName);
+        if (null == regCenter) {
+            return;
+        }
         LeaderService leaderService = new LeaderService(regCenter, jobName);
         if (leaderService.isLeader()) {
             leaderService.removeLeader();

File: elastic-job-example/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/dataflow/JavaDataflowJob.java
Patch:
@@ -34,14 +34,14 @@ public class JavaDataflowJob implements DataflowJob<Foo> {
     @Override
     public List<Foo> fetchData(final ShardingContext shardingContext) {
         System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("hh:MM:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH"));
+                shardingContext.getShardingItem(), new SimpleDateFormat("hh:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH"));
         return fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
     }
     
     @Override
     public void processData(final ShardingContext shardingContext, final List<Foo> data) {
         System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("hh:MM:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS"));
+                shardingContext.getShardingItem(), new SimpleDateFormat("hh:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS"));
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());
         }

File: elastic-job-example/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/dataflow/SpringDataflowJob.java
Patch:
@@ -35,14 +35,14 @@ public class SpringDataflowJob implements DataflowJob<Foo> {
     @Override
     public List<Foo> fetchData(final ShardingContext shardingContext) {
         System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("hh:MM:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH"));
+                shardingContext.getShardingItem(), new SimpleDateFormat("hh:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH"));
         return fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
     }
     
     @Override
     public void processData(final ShardingContext shardingContext, final List<Foo> data) {
         System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("hh:MM:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS"));
+                shardingContext.getShardingItem(), new SimpleDateFormat("hh:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS"));
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());
         }

File: elastic-job-example/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/simple/JavaSimpleJob.java
Patch:
@@ -34,7 +34,7 @@ public class JavaSimpleJob implements SimpleJob {
     @Override
     public void execute(final ShardingContext shardingContext) {
         System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("hh:MM:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
+                shardingContext.getShardingItem(), new SimpleDateFormat("hh:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());

File: elastic-job-example/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/simple/SpringSimpleJob.java
Patch:
@@ -35,7 +35,7 @@ public class SpringSimpleJob implements SimpleJob {
     @Override
     public void execute(final ShardingContext shardingContext) {
         System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("hh:MM:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
+                shardingContext.getShardingItem(), new SimpleDateFormat("hh:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/config/LiteJobConfiguration.java
Patch:
@@ -150,7 +150,7 @@ public Builder monitorPort(final int monitorPort) {
          * 默认使用{@code com.dangdang.ddframe.job.plugin.sharding.strategy.AverageAllocationJobShardingStrategy}.
          * </p>
          *
-         * @param jobShardingStrategyClass 作业辅助监控端口
+         * @param jobShardingStrategyClass 作业分片策略实现类全路径
          *
          * @return 作业配置构建器
          */

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/failover/FailoverService.java
Patch:
@@ -76,7 +76,7 @@ public void failoverIfNecessary() {
     
     private boolean needFailover() {
         return jobNodeStorage.isJobNodeExisted(FailoverNode.ITEMS_ROOT) && !jobNodeStorage.getJobNodeChildrenKeys(FailoverNode.ITEMS_ROOT).isEmpty()
-                && JobRegistry.getInstance().isJobRunning(jobName);
+                && !JobRegistry.getInstance().isJobRunning(jobName);
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/AbstractJobSpringIntegrateTest.java
Patch:
@@ -65,15 +65,15 @@ private void assertSimpleElasticJobBean() {
             sleep(100L);
         }
         assertTrue(FooSimpleElasticJob.isCompleted());
-        assertTrue(regCenter.isExisted("/" + simpleJobName + "/execution"));
+        assertTrue(regCenter.isExisted("/" + simpleJobName + "/sharding"));
     }
     
     private void assertThroughputDataflowElasticJobBean() {
         while (!DataflowElasticJob.isCompleted()) {
             sleep(100L);
         }
         assertTrue(DataflowElasticJob.isCompleted());
-        assertTrue(regCenter.isExisted("/" + throughputDataflowJobName + "/execution"));
+        assertTrue(regCenter.isExisted("/" + throughputDataflowJobName + "/sharding"));
     }
     
     private static void sleep(final long millis) {

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/AllInternalTests.java
Patch:
@@ -37,6 +37,7 @@
 import com.dangdang.ddframe.job.lite.internal.instance.InstanceNodeTest;
 import com.dangdang.ddframe.job.lite.internal.instance.InstanceServiceTest;
 import com.dangdang.ddframe.job.lite.internal.instance.InstanceShutdownListenerManagerTest;
+import com.dangdang.ddframe.job.lite.internal.instance.InstanceTriggerListenerManagerTest;
 import com.dangdang.ddframe.job.lite.internal.listener.JobListenerTest;
 import com.dangdang.ddframe.job.lite.internal.listener.ListenerManagerTest;
 import com.dangdang.ddframe.job.lite.internal.listener.RegistryCenterConnectionStateListenerTest;
@@ -48,7 +49,6 @@
 import com.dangdang.ddframe.job.lite.internal.schedule.JobTriggerListenerTest;
 import com.dangdang.ddframe.job.lite.internal.schedule.LiteJobFacadeTest;
 import com.dangdang.ddframe.job.lite.internal.schedule.SchedulerFacadeTest;
-import com.dangdang.ddframe.job.lite.internal.server.JobOperationListenerManagerTest;
 import com.dangdang.ddframe.job.lite.internal.server.ServerNodeTest;
 import com.dangdang.ddframe.job.lite.internal.server.ServerServiceTest;
 import com.dangdang.ddframe.job.lite.internal.sharding.ShardingListenerManagerTest;
@@ -76,9 +76,9 @@
         InstanceNodeTest.class,
         InstanceServiceTest.class,
         InstanceShutdownListenerManagerTest.class,
+        InstanceTriggerListenerManagerTest.class,
         ShardingServiceTest.class, 
         ServerNodeTest.class,
-        JobOperationListenerManagerTest.class,
         ShardingListenerManagerTest.class, 
         ExecutionContextServiceTest.class, 
         ExecutionServiceTest.class, 

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionNode.java
Patch:
@@ -46,8 +46,6 @@ public final class ExecutionNode {
     
     static final String LEADER_ROOT = LeaderNode.ROOT + "/" + ROOT;
     
-    static final String NECESSARY = LEADER_ROOT + "/necessary";
-    
     static final String CLEANING = LEADER_ROOT + "/cleaning";
     
     private final JobNodePath jobNodePath;

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingListenerManager.java
Patch:
@@ -72,7 +72,6 @@ protected void dataChanged(final CuratorFramework client, final TreeCacheEvent e
                 int newShardingTotalCount = LiteJobConfigurationGsonFactory.fromJson(new String(event.getData().getData())).getTypeConfig().getCoreConfig().getShardingTotalCount();
                 if (newShardingTotalCount != currentShardingTotalCount) {
                     shardingService.setReshardingFlag();
-                    executionService.setNeedFixExecutionInfoFlag();
                     currentShardingTotalCount = newShardingTotalCount;
                 }
             }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingListenerManagerTest.java
Patch:
@@ -78,7 +78,6 @@ public void assertShardingTotalCountChangedJobListenerWhenIsConfigPathButCurrent
         shardingListenerManager.new ShardingTotalCountChangedJobListener().dataChanged(null, new TreeCacheEvent(
                 TreeCacheEvent.Type.NODE_ADDED, new ChildData("/test_job/config", null, LiteJsonConstants.getJobJson().getBytes())), "/test_job/config");
         verify(shardingService, times(0)).setReshardingFlag();
-        verify(executionService, times(0)).setNeedFixExecutionInfoFlag();
     }
     
     @Test
@@ -87,7 +86,6 @@ public void assertShardingTotalCountChangedJobListenerWhenIsConfigPathAndCurrent
         shardingListenerManager.new ShardingTotalCountChangedJobListener().dataChanged(null, new TreeCacheEvent(
                 TreeCacheEvent.Type.NODE_ADDED, new ChildData("/test_job/config", null, LiteJsonConstants.getJobJson().getBytes())), "/test_job/config");
         verify(shardingService, times(0)).setReshardingFlag();
-        verify(executionService, times(0)).setNeedFixExecutionInfoFlag();
     }
     
     @Test
@@ -97,7 +95,6 @@ shardingListenerManager.new ShardingTotalCountChangedJobListener().dataChanged(n
                 TreeCacheEvent.Type.NODE_ADDED, new ChildData("/test_job/config", null, LiteJsonConstants.getJobJson().getBytes())), "/test_job/config");
         assertThat((Integer) ReflectionUtils.getFieldValue(shardingListenerManager, ShardingListenerManager.class.getDeclaredField("currentShardingTotalCount")), is(3));
         verify(shardingService).setReshardingFlag();
-        verify(executionService).setNeedFixExecutionInfoFlag();
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -104,9 +104,9 @@ private BeanDefinition createLiteJobConfigurationBeanDefinition(final Element el
         result.addConstructorArgValue(element.getAttribute(MAX_TIME_DIFF_SECONDS_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(MONITOR_PORT_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(JOB_SHARDING_STRATEGY_CLASS_ATTRIBUTE));
+        result.addConstructorArgValue(element.getAttribute(RECONCILE_INTERVAL_MINUTES));
         result.addConstructorArgValue(element.getAttribute(DISABLED_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(OVERWRITE_ATTRIBUTE));
-        result.addConstructorArgValue(element.getAttribute(RECONCILE_INTERVAL_MINUTES));
         return result.getBeanDefinition();
     }
     

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/util/SensitiveInfoUtils.java
Patch:
@@ -40,7 +40,7 @@ public final class SensitiveInfoUtils {
     
     private static final String FAKE_IP_SAMPLE = "ip";
     
-    private static final String IP_REGEX = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}";
+    private static final String IP_REGEX = "((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3})";
     
     /**
      * 屏蔽替换IP地址敏感信息.

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/JobScheduler.java
Patch:
@@ -150,7 +150,8 @@ private Properties getBaseQuartzProperties(final boolean isMisfire) {
      * 停止作业调度.
      */
     public void shutdown() {
-        jobRegistry.getJobScheduleController(jobName).shutdown();
+        jobRegistry.removeJobScheduleController(jobName).shutdown();
+        jobExecutor.close();
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingService.java
Patch:
@@ -181,7 +181,8 @@ class PersistShardingInfoTransactionExecutionCallback implements TransactionExec
         public void execute(final CuratorTransactionFinal curatorTransactionFinal) throws Exception {
             for (JobShardingResult each : shardingResults) {
                 if (!each.getShardingItems().isEmpty()) {
-                    curatorTransactionFinal.create().forPath(jobNodePath.getFullPath(ShardingNode.getShardingNode(each.getJobShardingUnit().getServerIp(), each.getJobShardingUnit().getJobInstanceId())),
+                    curatorTransactionFinal.create().forPath(
+                            jobNodePath.getFullPath(ShardingNode.getShardingNode(each.getJobShardingUnit().getServerIp(), each.getJobShardingUnit().getJobInstanceId())), 
                             ShardingItems.toItemsString(each.getShardingItems()).getBytes()).and();
                 }
             }

File: elastic-job-lite/elastic-job-lite-lifecycle/src/main/java/com/dangdang/ddframe/job/lite/lifecycle/internal/operate/JobOperateAPIImpl.java
Patch:
@@ -119,8 +119,7 @@ public Collection<String> remove(final Optional<String> jobName, final Optional<
             @Override
             public boolean doOperate(final String jobName, final String serverIp) {
                 JobNodePath jobNodePath = new JobNodePath(jobName);
-                if (regCenter.isExisted(jobNodePath.getServerNodePath(serverIp, JobNodePath.STATUS_NODE)) 
-                        || regCenter.isExisted(jobNodePath.getLeaderHostNodePath())) {
+                if (regCenter.isExisted(jobNodePath.getServerNodePath(serverIp, JobNodePath.STATUS_NODE)) || regCenter.isExisted(jobNodePath.getLeaderHostNodePath())) {
                     return false;
                 }
                 regCenter.remove(jobNodePath.getServerNodePath(serverIp));

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/reconcile/ReconcileService.java
Patch:
@@ -57,8 +57,7 @@ protected void runOneIteration() throws Exception {
         int reconcileIntervalMinutes = null == config ? -1 : config.getReconcileIntervalMinutes();
         if (reconcileIntervalMinutes > 0 && (System.currentTimeMillis() - lastReconcileTime >= reconcileIntervalMinutes * 60 * 1000)) {
             lastReconcileTime = System.currentTimeMillis();
-            if (leaderElectionService.isLeader() && !shardingService.isNeedSharding()
-                    && shardingService.hasNotRunningShardingNode()) {
+            if (leaderElectionService.isLeader() && !shardingService.isNeedSharding() && shardingService.hasShardingInfoInOfflineServers()) {
                 log.warn("Elastic Job: job status node has inconsistent value,start reconciling...");
                 shardingService.setReshardingFlag();
             }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/reconcile/ReconcileServiceTest.java
Patch:
@@ -58,11 +58,11 @@ public void assertReconcile() throws Exception {
         Mockito.when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
                 TestSimpleJob.class.getCanonicalName())).reconcileIntervalMinutes(1).build());
         Mockito.when(shardingService.isNeedSharding()).thenReturn(false);
-        Mockito.when(shardingService.hasNotRunningShardingNode()).thenReturn(true);
+        Mockito.when(shardingService.hasShardingInfoInOfflineServers()).thenReturn(true);
         Mockito.when(leaderElectionService.isLeader()).thenReturn(true);
         reconcileService.runOneIteration();
         Mockito.verify(shardingService).isNeedSharding();
-        Mockito.verify(shardingService).hasNotRunningShardingNode();
+        Mockito.verify(shardingService).hasShardingInfoInOfflineServers();
         Mockito.verify(shardingService).setReshardingFlag();
         Mockito.verify(leaderElectionService).isLeader();
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/strategy/JobShardingStrategy.java
Patch:
@@ -28,7 +28,7 @@
 public interface JobShardingStrategy {
     
     /**
-     * 进行作业分片.
+     * 作业分片.
      * 
      * @param jobShardingUnits 所有参与分片的单元列表
      * @param jobShardingMetadata 作业分片策略选项

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/strategy/JobShardingStrategyFactory.java
Patch:
@@ -32,7 +32,7 @@
 public final class JobShardingStrategyFactory {
     
     /**
-     * 获取 作业分片策略实例.
+     * 获取作业分片策略实例.
      * 
      * @param jobShardingStrategyClassName 作业分片策略类名
      * @return 作业分片策略实例

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/config/LiteJobConfiguration.java
Patch:
@@ -34,6 +34,8 @@
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 public class LiteJobConfiguration implements JobRootConfiguration {
     
+    public static final String DEFAULT_JOB_INSTANCE_ID = "defaultInstance";
+    
     private final JobTypeConfiguration typeConfig;
     
     private final String jobInstanceId;
@@ -85,7 +87,7 @@ public static class Builder {
         
         private final JobTypeConfiguration jobConfig;
     
-        private String jobInstanceId = "defaultInstance";
+        private String jobInstanceId = DEFAULT_JOB_INSTANCE_ID;
         
         private boolean monitorExecution = true;
         

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/config/LiteJobConfigurationTest.java
Patch:
@@ -32,8 +32,9 @@ public final class LiteJobConfigurationTest {
     @Test
     public void assertBuildAllProperties() {
         LiteJobConfiguration actual = LiteJobConfiguration.newBuilder(
-                new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(), TestSimpleJob.class.getCanonicalName()))
+                new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(), TestSimpleJob.class.getCanonicalName())).jobInstanceId("test_job_instance_id")
                 .monitorExecution(false).maxTimeDiffSeconds(1000).monitorPort(8888).jobShardingStrategyClass("testClass").disabled(true).overwrite(true).reconcileIntervalMinutes(60).build();
+        assertThat(actual.getJobInstanceId(), is("test_job_instance_id"));
         assertFalse(actual.isMonitorExecution());
         assertThat(actual.getMaxTimeDiffSeconds(), is(1000));
         assertThat(actual.getMonitorPort(), is(8888));
@@ -47,6 +48,7 @@ public void assertBuildAllProperties() {
     public void assertBuildRequiredProperties() {
         LiteJobConfiguration actual = LiteJobConfiguration.newBuilder(
                 new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(), TestSimpleJob.class.getCanonicalName())).build();
+        assertThat(actual.getJobInstanceId(), is(LiteJobConfiguration.DEFAULT_JOB_INSTANCE_ID));
         assertTrue(actual.isMonitorExecution());
         assertThat(actual.getMaxTimeDiffSeconds(), is(-1));
         assertThat(actual.getMonitorPort(), is(-1));

File: elastic-job-lite/elastic-job-lite-lifecycle/src/main/java/com/dangdang/ddframe/job/lite/lifecycle/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -116,7 +116,7 @@ private ServerInfo getJobServer(final String jobName, final String serverIp) {
         JobNodePath jobNodePath = new JobNodePath(jobName);
         result.setJobName(jobName);
         result.setIp(serverIp);
-        result.setHostName(regCenter.get(jobNodePath.getServerNodePath(serverIp, "hostName")));
+        result.setHostName(regCenter.get(jobNodePath.getServerNodePath(serverIp)));
         result.setSharding(regCenter.get(jobNodePath.getServerNodePath(serverIp, "sharding")));
         result.setStatus(getServerStatus(jobName, serverIp));
         return result;

File: elastic-job-lite/elastic-job-lite-lifecycle/src/main/java/com/dangdang/ddframe/job/lite/lifecycle/internal/statistics/ServerStatisticsAPIImpl.java
Patch:
@@ -51,7 +51,7 @@ public Collection<ServerBriefInfo> getAllServersBriefInfo() {
             JobNodePath jobNodePath = new JobNodePath(jobName);
             List<String> servers = regCenter.getChildrenKeys(jobNodePath.getServerNodePath());
             for (String server : servers) {
-                serverHostMap.put(server, regCenter.get(jobNodePath.getServerNodePath(server, "hostName")));
+                serverHostMap.put(server, regCenter.get(jobNodePath.getServerNodePath(server)));
                 if (!regCenter.isExisted(jobNodePath.getServerNodePath(server, "shutdown")) && regCenter.isExisted(jobNodePath.getServerNodePath(server, "status"))) {
                     aliveServers.add(server);
                 } else {
@@ -93,7 +93,7 @@ private ServerInfo getJob(final String serverIp, final String jobName) {
         JobNodePath jobNodePath = new JobNodePath(jobName);
         result.setJobName(jobName);
         result.setIp(serverIp);
-        result.setHostName(regCenter.get(jobNodePath.getServerNodePath(serverIp, "hostName")));
+        result.setHostName(regCenter.get(jobNodePath.getServerNodePath(serverIp)));
         result.setSharding(regCenter.get(jobNodePath.getServerNodePath(serverIp, "sharding")));
         String status = regCenter.get(jobNodePath.getServerNodePath(serverIp, "status"));
         boolean disabled = regCenter.isExisted(jobNodePath.getServerNodePath(serverIp, "disabled"));

File: elastic-job-example/elastic-job-example-lite-java/src/main/java/com/dangdang/ddframe/job/example/JavaMain.java
Patch:
@@ -43,7 +43,7 @@
 
 public final class JavaMain {
     
-    private static final int EMBED_ZOOKEEPER_PORT = 3181;
+    private static final int EMBED_ZOOKEEPER_PORT = 4181;
     
     private static final String ZOOKEEPER_CONNECTION_STRING = "localhost:" + EMBED_ZOOKEEPER_PORT;
     

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -47,6 +47,7 @@
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.EVENT_TRACE_RDB_DATA_SOURCE_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.EXECUTOR_SERVICE_HANDLER_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.FAILOVER_ATTRIBUTE;
+import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.INSTANCE_ID;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.JOB_EXCEPTION_HANDLER_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.JOB_PARAMETER_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.JOB_SHARDING_STRATEGY_CLASS_ATTRIBUTE;
@@ -56,10 +57,10 @@
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.MONITOR_EXECUTION_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.MONITOR_PORT_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.OVERWRITE_ATTRIBUTE;
+import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.RECONCILE_INTERVAL_MINUTES;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.REGISTRY_CENTER_REF_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.SHARDING_ITEM_PARAMETERS_ATTRIBUTE;
 import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.SHARDING_TOTAL_COUNT_ATTRIBUTE;
-import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.RECONCILE_INTERVAL_MINUTES;
 
 /**
  * 基本作业的命名空间解析器.
@@ -98,6 +99,7 @@ private BeanDefinition createLiteJobConfiguration(final Element element) {
     private BeanDefinition createLiteJobConfigurationBeanDefinition(final Element element, final BeanDefinition jobCoreBeanDefinition) {
         BeanDefinitionBuilder result = BeanDefinitionBuilder.rootBeanDefinition(LiteJobConfiguration.class);
         result.addConstructorArgValue(getJobTypeConfigurationBeanDefinition(jobCoreBeanDefinition, element));
+        result.addConstructorArgValue(element.getAttribute(INSTANCE_ID));
         result.addConstructorArgValue(element.getAttribute(MONITOR_EXECUTION_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(MAX_TIME_DIFF_SECONDS_ATTRIBUTE));
         result.addConstructorArgValue(element.getAttribute(MONITOR_PORT_ATTRIBUTE));

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/common/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -36,6 +36,8 @@ public final class BaseJobBeanDefinitionParserTag {
     
     public static final String SHARDING_TOTAL_COUNT_ATTRIBUTE = "sharding-total-count";
     
+    public static final String INSTANCE_ID = "instance-id";
+    
     public static final String SHARDING_ITEM_PARAMETERS_ATTRIBUTE = "sharding-item-parameters";
     
     public static final String JOB_PARAMETER_ATTRIBUTE = "job-parameter";

File: elastic-job-common/elastic-job-common-restful/src/test/java/com/dangdang/ddframe/job/restful/RestfulServerTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.dangdang.ddframe.job.restful;
 
 import com.dangdang.ddframe.job.restful.fixture.Caller;
+import com.dangdang.ddframe.job.restful.fixture.TestFilter;
 import com.dangdang.ddframe.job.restful.fixture.TestRestfulApi;
 import com.google.common.base.Optional;
 import org.eclipse.jetty.client.ContentExchange;
@@ -39,7 +40,7 @@
 @RunWith(MockitoJUnitRunner.class)
 public final class RestfulServerTest {
     
-    private static final String URL = "http://127.0.0.1:17000/test/call";
+    private static final String URL = "http://127.0.0.1:17000/api/test/call";
     
     private static RestfulServer server;
     
@@ -48,6 +49,7 @@ public final class RestfulServerTest {
     @BeforeClass
     public static void setUpClass() throws Exception {
         server = new RestfulServer(17000);
+        server.addFilter(TestFilter.class, "/*");
         server.start(TestRestfulApi.class.getPackage().getName(), Optional.<String>absent());
     }
     

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/config/LiteJobConfiguration.java
Patch:
@@ -194,13 +194,13 @@ public Builder overwrite(final boolean overwrite) {
         }
         
         /**
-         * 设置监视作业服务器状态的reconcile线程执行间隔分钟数.
+         * 设置修复作业服务器不一致状态服务执行间隔分钟数.
          * 
          * <p>
          * 每隔一段时间监视作业服务器的状态，如果不正确则重新分片。
          * </p>
          * 
-         * @param reconcileIntervalMinutes reconcile线程执行间隔分钟数
+         * @param reconcileIntervalMinutes 修复作业服务器不一致状态服务执行间隔分钟数
          * 
          * @return 作业配置构建器
          */

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/event/rdb/JobEventRdbStorage.java
Patch:
@@ -114,7 +114,7 @@ private void createJobExecutionTable(final Connection conn) throws SQLException
                 + "`execution_source` VARCHAR(20) NOT NULL, "
                 + "`failure_cause` VARCHAR(4000) NULL, "
                 + "`is_success` INT NOT NULL, "
-                + "`start_time` TIMESTAMP NOT NULL, "
+                + "`start_time` TIMESTAMP NULL, "
                 + "`complete_time` TIMESTAMP NULL, "
                 + "PRIMARY KEY (`id`));";
         try (PreparedStatement preparedStatement = conn.prepareStatement(dbSchema)) {

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/event/rdb/JobEventRdbStorage.java
Patch:
@@ -114,7 +114,7 @@ private void createJobExecutionTable(final Connection conn) throws SQLException
                 + "`execution_source` VARCHAR(20) NOT NULL, "
                 + "`failure_cause` VARCHAR(4000) NULL, "
                 + "`is_success` INT NOT NULL, "
-                + "`start_time` TIMESTAMP NOT NULL, "
+                + "`start_time` TIMESTAMP NULL, "
                 + "`complete_time` TIMESTAMP NULL, "
                 + "PRIMARY KEY (`id`));";
         try (PreparedStatement preparedStatement = conn.prepareStatement(dbSchema)) {

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/reg/parser/ZookeeperBeanDefinitionParser.java
Patch:
@@ -47,6 +47,7 @@ private AbstractBeanDefinition buildZookeeperConfigurationBeanDefinition(final E
         configuration.addConstructorArgValue(element.getAttribute("namespace"));
         addPropertyValueIfNotEmpty("base-sleep-time-milliseconds", "baseSleepTimeMilliseconds", element, configuration);
         addPropertyValueIfNotEmpty("max-sleep-time-milliseconds", "maxSleepTimeMilliseconds", element, configuration);
+        addPropertyValueIfNotEmpty("max-retries", "maxRetries", element, configuration);
         addPropertyValueIfNotEmpty("session-timeout-milliseconds", "sessionTimeoutMilliseconds", element, configuration);
         addPropertyValueIfNotEmpty("connection-timeout-milliseconds", "connectionTimeoutMilliseconds", element, configuration);
         addPropertyValueIfNotEmpty("digest", "digest", element, configuration);

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -111,7 +111,6 @@ public void statusUpdate(final SchedulerDriver schedulerDriver, final Protos.Tas
                 log.warn("task id is: {}, status is: {}, message is: {}, source is: {}", taskId, taskStatus.getState(), taskStatus.getMessage(), taskStatus.getSource());
                 facadeService.removeRunning(taskContext);
                 facadeService.recordFailoverTask(taskContext);
-                facadeService.addDaemonJobToReadyQueue(taskContext.getMetaInfo().getJobName());
                 unAssignTask(taskId);
                 statisticManager.taskRunFailed();
                 break;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/TaskLaunchProcessor.java
Patch:
@@ -93,7 +93,8 @@ public static void shutdown() {
     public void run() {
         while (!shutdown) {
             LaunchingTasks launchingTasks = new LaunchingTasks(facadeService.getEligibleJobContext());
-            Collection<VMAssignmentResult> vmAssignmentResults = taskScheduler.scheduleOnce(launchingTasks.getPendingTasks(), leasesQueue.drainTo()).getResultMap().values();
+            List<VirtualMachineLease> virtualMachineLeases = leasesQueue.drainTo();
+            Collection<VMAssignmentResult> vmAssignmentResults = taskScheduler.scheduleOnce(launchingTasks.getPendingTasks(), virtualMachineLeases).getResultMap().values();
             List<TaskContext> taskContextsList = new LinkedList<>();
             Map<List<Protos.OfferID>, List<Protos.TaskInfo>> offerIdTaskInfoMap = new HashMap<>();
             for (VMAssignmentResult each: vmAssignmentResults) {
@@ -113,7 +114,7 @@ public void run() {
             for (Entry<List<OfferID>, List<TaskInfo>> each : offerIdTaskInfoMap.entrySet()) {
                 schedulerDriver.launchTasks(each.getKey(), each.getValue());
             }
-            BlockUtils.waitingShortTime();
+            BlockUtils.waitingSecondsTime();
         }
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngineTest.java
Patch:
@@ -175,7 +175,6 @@ public void assertFailedStatusUpdate() {
                 .setState(Protos.TaskState.TASK_FAILED).setSlaveId(Protos.SlaveID.newBuilder().setValue("slave-S0")).build());
         verify(facadeService).recordFailoverTask(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService).removeRunning(TaskContext.from(taskNode.getTaskNodeValue()));
-        verify(facadeService).addDaemonJobToReadyQueue("test_job");
         verify(taskUnAssigner).call(TaskContext.getIdForUnassignedSlave(taskNode.getTaskNodeValue()), "localhost");
         verify(statisticManager).taskRunFailed();
     }
@@ -191,7 +190,6 @@ public void assertErrorStatusUpdate() {
                 .setState(Protos.TaskState.TASK_ERROR).setSlaveId(Protos.SlaveID.newBuilder().setValue("slave-S0")).build());
         verify(facadeService).recordFailoverTask(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService).removeRunning(TaskContext.from(taskNode.getTaskNodeValue()));
-        verify(facadeService).addDaemonJobToReadyQueue("test_job");
         verify(taskUnAssigner).call(TaskContext.getIdForUnassignedSlave(taskNode.getTaskNodeValue()), "localhost");
         verify(statisticManager).taskRunFailed();
     }
@@ -207,7 +205,6 @@ public void assertLostStatusUpdate() {
                 .setTaskId(Protos.TaskID.newBuilder().setValue(taskNode.getTaskNodeValue())).setState(Protos.TaskState.TASK_LOST).setSlaveId(Protos.SlaveID.newBuilder().setValue("slave-S0")).build());
         verify(facadeService).recordFailoverTask(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService).removeRunning(TaskContext.from(taskNode.getTaskNodeValue()));
-        verify(facadeService).addDaemonJobToReadyQueue("test_job");
         verify(taskUnAssigner).call(TaskContext.getIdForUnassignedSlave(taskNode.getTaskNodeValue()), "localhost");
         verify(statisticManager).taskRunFailed();
     }

File: elastic-job-example/elastic-job-example-lite-springboot/src/main/java/com/dangdang/ddframe/job/example/config/DataflowJobConfig.java
Patch:
@@ -47,8 +47,8 @@ public DataflowJob dataflowJob() {
     }
     
     @Bean(initMethod = "init")
-    public JobScheduler dataflowJobScheduler(final DataflowJob dataflowJob, @Value("${simpleJob.cron}") final String cron, @Value("${simpleJob.shardingTotalCount}") final int shardingTotalCount,
-                                           @Value("${simpleJob.shardingItemParameters}") final String shardingItemParameters) {
+    public JobScheduler dataflowJobScheduler(final DataflowJob dataflowJob, @Value("${dataflowJob.cron}") final String cron, @Value("${dataflowJob.shardingTotalCount}") final int shardingTotalCount,
+                                           @Value("${dataflowJob.shardingItemParameters}") final String shardingItemParameters) {
         return new SpringJobScheduler(dataflowJob, regCenter, getLiteJobConfiguration(dataflowJob.getClass(), cron, shardingTotalCount, shardingItemParameters), jobEventConfiguration);
     }
     

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingService.java
Patch:
@@ -98,6 +98,7 @@ public boolean isNeedSharding() {
     public void shardingIfNecessary() {
         List<String> availableShardingServers = serverService.getAvailableShardingServers();
         if (availableShardingServers.isEmpty()) {
+            clearShardingInfo();
             return;
         }
         if (!isNeedSharding()) {

File: elastic-job-common/elastic-job-common-core/src/test/java/com/dangdang/ddframe/job/api/ShardingContextTest.java
Patch:
@@ -31,6 +31,7 @@ public void assertNew() {
         ShardingContexts shardingContexts = ShardingContextsBuilder.getMultipleShardingContexts();
         ShardingContext actual = new ShardingContext(shardingContexts, 1);
         assertThat(actual.getJobName(), is(shardingContexts.getJobName()));
+        assertThat(actual.getTaskId(), is(shardingContexts.getTaskId()));
         assertThat(actual.getShardingTotalCount(), is(shardingContexts.getShardingTotalCount()));
         assertThat(actual.getJobParameter(), is(shardingContexts.getJobParameter()));
         assertThat(actual.getShardingItem(), is(1));
@@ -40,6 +41,6 @@ public void assertNew() {
     @Test
     public void assertToString() {
         assertThat(new ShardingContext(ShardingContextsBuilder.getMultipleShardingContexts(), 1).toString(), 
-                is("ShardingContext(jobName=test_job, shardingTotalCount=2, jobParameter=, shardingItem=1, shardingParameter=B)"));
+                is("ShardingContext(jobName=test_job, taskId=fake_task_id, shardingTotalCount=2, jobParameter=, shardingItem=1, shardingParameter=B)"));
     }
 }

File: elastic-job-example/elastic-job-example-lite-springboot/src/main/java/com/dangdang/ddframe/job/example/config/DataflowJobConfig.java
Patch:
@@ -24,7 +24,7 @@
 import com.dangdang.ddframe.job.example.job.dataflow.SpringDataflowJob;
 import com.dangdang.ddframe.job.lite.api.JobScheduler;
 import com.dangdang.ddframe.job.lite.config.LiteJobConfiguration;
-import com.dangdang.ddframe.job.lite.spring.schedule.SpringJobScheduler;
+import com.dangdang.ddframe.job.lite.spring.api.SpringJobScheduler;
 import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;

File: elastic-job-example/elastic-job-example-lite-springboot/src/main/java/com/dangdang/ddframe/job/example/config/SimpleJobConfig.java
Patch:
@@ -24,7 +24,7 @@
 import com.dangdang.ddframe.job.example.job.simple.SpringSimpleJob;
 import com.dangdang.ddframe.job.lite.api.JobScheduler;
 import com.dangdang.ddframe.job.lite.config.LiteJobConfiguration;
-import com.dangdang.ddframe.job.lite.spring.schedule.SpringJobScheduler;
+import com.dangdang.ddframe.job.lite.spring.api.SpringJobScheduler;
 import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/api/SpringJobScheduler.java
Patch:
@@ -15,14 +15,14 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring.schedule;
+package com.dangdang.ddframe.job.lite.spring.api;
 
 import com.dangdang.ddframe.job.api.ElasticJob;
 import com.dangdang.ddframe.job.event.JobEventConfiguration;
 import com.dangdang.ddframe.job.lite.api.JobScheduler;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.lite.config.LiteJobConfiguration;
-import com.dangdang.ddframe.job.lite.spring.util.AopTargetUtils;
+import com.dangdang.ddframe.job.lite.spring.job.util.AopTargetUtils;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Optional;
 

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/common/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring.namespace.parser.common;
+package com.dangdang.ddframe.job.lite.spring.job.parser.common;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/dataflow/DataflowJobBeanDefinitionParserTag.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring.namespace.parser.dataflow;
+package com.dangdang.ddframe.job.lite.spring.job.parser.dataflow;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/script/ScriptJobBeanDefinitionParserTag.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring.namespace.parser.script;
+package com.dangdang.ddframe.job.lite.spring.job.parser.script;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/parser/simple/SimpleJobBeanDefinitionParser.java
Patch:
@@ -15,15 +15,15 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring.namespace.parser.simple;
+package com.dangdang.ddframe.job.lite.spring.job.parser.simple;
 
 import com.dangdang.ddframe.job.config.simple.SimpleJobConfiguration;
-import com.dangdang.ddframe.job.lite.spring.namespace.parser.common.AbstractJobBeanDefinitionParser;
+import com.dangdang.ddframe.job.lite.spring.job.parser.common.AbstractJobBeanDefinitionParser;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.w3c.dom.Element;
 
-import static com.dangdang.ddframe.job.lite.spring.namespace.parser.common.BaseJobBeanDefinitionParserTag.CLASS_ATTRIBUTE;
+import static com.dangdang.ddframe.job.lite.spring.job.parser.common.BaseJobBeanDefinitionParserTag.CLASS_ATTRIBUTE;
 
 /**
  * 简单作业的命名空间解析器.

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/job/util/AopTargetUtils.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring.util;
+package com.dangdang.ddframe.job.lite.spring.job.util;
 
 import com.dangdang.ddframe.job.exception.JobSystemException;
 import lombok.AccessLevel;

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/reg/handler/RegNamespaceHandler.java
Patch:
@@ -15,8 +15,9 @@
  * </p>
  */
 
-package com.dangdang.ddframe.reg.spring.namespace;
+package com.dangdang.ddframe.job.lite.spring.reg.handler;
 
+import com.dangdang.ddframe.job.lite.spring.reg.parser.ZookeeperBeanDefinitionParser;
 import org.springframework.beans.factory.xml.NamespaceHandlerSupport;
 
 /**

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/reg/parser/ZookeeperBeanDefinitionParser.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.reg.spring.namespace;
+package com.dangdang.ddframe.job.lite.spring.reg.parser;
 
 import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperConfiguration;
 import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;
@@ -31,7 +31,7 @@
  * 
  * @author caohao
  */
-class ZookeeperBeanDefinitionParser extends AbstractBeanDefinitionParser {
+public class ZookeeperBeanDefinitionParser extends AbstractBeanDefinitionParser {
     
     @Override
     protected AbstractBeanDefinition parseInternal(final Element element, final ParserContext parserContext) {

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/AllLiteSpringTests.java
Patch:
@@ -15,14 +15,14 @@
  * </p>
  */
 
-package com.dangdang.ddframe;
+package com.dangdang.ddframe.job.lite.spring;
 
-import com.dangdang.ddframe.job.lite.AllSpringJobTests;
+import com.dangdang.ddframe.job.lite.spring.job.AllSpringIntegrateTests;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 
 @RunWith(Suite.class)
-@SuiteClasses(AllSpringJobTests.class)
+@SuiteClasses(AllSpringIntegrateTests.class)
 public final class AllLiteSpringTests {
 }

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/DataflowElasticJob.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture;
+package com.dangdang.ddframe.job.lite.spring.fixture;
 
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.dataflow.DataflowJob;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/FooSimpleElasticJob.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture;
+package com.dangdang.ddframe.job.lite.spring.fixture;
 
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.simple.SimpleJob;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/aspect/SimpleAspect.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.aspect;
+package com.dangdang.ddframe.job.lite.spring.fixture.aspect;
 
 import org.aspectj.lang.JoinPoint;
 import org.springframework.stereotype.Component;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/handler/SimpleExecutorServiceHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.handler;
+package com.dangdang.ddframe.job.lite.spring.fixture.handler;
 
 import com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandler;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/handler/SimpleJobExceptionHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.handler;
+package com.dangdang.ddframe.job.lite.spring.fixture.handler;
 
 import com.dangdang.ddframe.job.executor.handler.JobExceptionHandler;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/listener/SimpleCglibListener.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.listener;
+package com.dangdang.ddframe.job.lite.spring.fixture.listener;
 
 import com.dangdang.ddframe.job.executor.ShardingContexts;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/listener/SimpleJdkDynamicProxyListener.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.listener;
+package com.dangdang.ddframe.job.lite.spring.fixture.listener;
 
 import com.dangdang.ddframe.job.executor.ShardingContexts;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/listener/SimpleListener.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.listener;
+package com.dangdang.ddframe.job.lite.spring.fixture.listener;
 
 import com.dangdang.ddframe.job.executor.ShardingContexts;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/listener/SimpleOnceListener.java
Patch:
@@ -15,11 +15,11 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.listener;
+package com.dangdang.ddframe.job.lite.spring.fixture.listener;
 
 import com.dangdang.ddframe.job.executor.ShardingContexts;
 import com.dangdang.ddframe.job.lite.api.listener.AbstractDistributeOnceElasticJobListener;
-import com.dangdang.ddframe.job.lite.fixture.service.FooService;
+import com.dangdang.ddframe.job.lite.spring.fixture.service.FooService;
 
 import javax.annotation.Resource;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/service/FooService.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.service;
+package com.dangdang.ddframe.job.lite.spring.fixture.service;
 
 public interface FooService {
     

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/fixture/service/FooServiceImpl.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.fixture.service;
+package com.dangdang.ddframe.job.lite.spring.fixture.service;
 
 public class FooServiceImpl implements FooService {
     

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/AllSpringIntegrateTests.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring;
+package com.dangdang.ddframe.job.lite.spring.job;
 
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/JobSpringNamespaceWithEventTraceRdbTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring;
+package com.dangdang.ddframe.job.lite.spring.job;
 
 import org.springframework.test.context.ContextConfiguration;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/JobSpringNamespaceWithJobPropertiesTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring;
+package com.dangdang.ddframe.job.lite.spring.job;
 
 import org.springframework.test.context.ContextConfiguration;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/JobSpringNamespaceWithListenerAndCglibTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring;
+package com.dangdang.ddframe.job.lite.spring.job;
 
 import org.springframework.test.context.ContextConfiguration;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/JobSpringNamespaceWithListenerAndJdkDynamicProxyTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring;
+package com.dangdang.ddframe.job.lite.spring.job;
 
 import org.springframework.test.context.ContextConfiguration;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/JobSpringNamespaceWithListenerTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring;
+package com.dangdang.ddframe.job.lite.spring.job;
 
 import org.springframework.test.context.ContextConfiguration;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/job/JobSpringNamespaceWithoutListenerTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.lite.spring;
+package com.dangdang.ddframe.job.lite.spring.job;
 
 import org.springframework.test.context.ContextConfiguration;
 

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/test/AbstractZookeeperJUnit4SpringContextTests.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.test;
+package com.dangdang.ddframe.job.lite.spring.test;
 
 import org.springframework.test.context.TestExecutionListeners;
 import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/test/EmbedZookeeperTestExecutionListener.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.test;
+package com.dangdang.ddframe.job.lite.spring.test;
 
 import com.dangdang.ddframe.job.reg.exception.RegExceptionHandler;
 import com.dangdang.ddframe.job.util.concurrent.BlockUtils;

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/executor/handler/ExecutorServiceHandler.java
Patch:
@@ -31,7 +31,9 @@ public interface ExecutorServiceHandler {
     /**
      * 创建线程池服务对象.
      * 
+     * @param jobName 作业名
+     * 
      * @return 线程池服务对象
      */
-    ExecutorService createExecutorService();
+    ExecutorService createExecutorService(final String jobName);
 }

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/executor/handler/ExecutorServiceHandlerRegistry.java
Patch:
@@ -43,7 +43,7 @@ public final class ExecutorServiceHandlerRegistry {
      */
     public static synchronized ExecutorService getExecutorServiceHandler(final String jobName, final ExecutorServiceHandler executorServiceHandler) {
         if (!REGISTRY.containsKey(jobName)) {
-            REGISTRY.put(jobName, executorServiceHandler.createExecutorService());
+            REGISTRY.put(jobName, executorServiceHandler.createExecutorService(jobName));
         }
         return REGISTRY.get(jobName);
     }

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/executor/handler/impl/DefaultExecutorServiceHandler.java
Patch:
@@ -30,7 +30,7 @@
 public final class DefaultExecutorServiceHandler implements ExecutorServiceHandler {
     
     @Override
-    public ExecutorService createExecutorService() {
-        return new ExecutorServiceObject("inner-job", Runtime.getRuntime().availableProcessors() * 2).createExecutorService();
+    public ExecutorService createExecutorService(final String jobName) {
+        return new ExecutorServiceObject("inner-job-" + jobName, Runtime.getRuntime().availableProcessors() * 2).createExecutorService();
     }
 }

File: elastic-job-common/elastic-job-common-core/src/test/java/com/dangdang/ddframe/job/executor/type/SimpleJobExecutorTest.java
Patch:
@@ -68,7 +68,7 @@ public void assertNewExecutorWithDefaultHandlers() throws NoSuchFieldException {
         when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestSimpleJobConfiguration("ErrorHandler", Object.class.getName()));
         SimpleJobExecutor simpleJobExecutor = new SimpleJobExecutor(new TestSimpleJob(jobCaller), jobFacade);
         assertThat(ReflectionUtils.getFieldValue(simpleJobExecutor, AbstractElasticJobExecutor.class.getDeclaredField("executorService")), 
-                instanceOf(new DefaultExecutorServiceHandler().createExecutorService().getClass()));
+                instanceOf(new DefaultExecutorServiceHandler().createExecutorService("test_job").getClass()));
         assertThat(ReflectionUtils.getFieldValue(simpleJobExecutor, AbstractElasticJobExecutor.class.getDeclaredField("jobExceptionHandler")),
                 instanceOf(DefaultJobExceptionHandler.class));
     }

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/fixture/handler/SimpleExecutorServiceHandler.java
Patch:
@@ -25,7 +25,7 @@
 public class SimpleExecutorServiceHandler implements ExecutorServiceHandler {
     
     @Override
-    public ExecutorService createExecutorService() {
+    public ExecutorService createExecutorService(final String jobName) {
         return Executors.newFixedThreadPool(1);
     }
 }

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -97,8 +97,7 @@ public List<ACL> getAclForPath(final String path) {
         client = builder.build();
         client.start();
         try {
-            client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds() * zkConfig.getMaxRetries(), TimeUnit.MILLISECONDS);
-            if (!client.getZookeeperClient().isConnected()) {
+            if (!client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds() * zkConfig.getMaxRetries(), TimeUnit.MILLISECONDS)) {
                 client.close();
                 throw new KeeperException.OperationTimeoutException();
             }

File: elastic-job-example/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/simple/SpringSimpleJob.java
Patch:
@@ -34,7 +34,6 @@ public class SpringSimpleJob implements SimpleJob {
     @Override
     public void execute(final ShardingContext shardingContext) {
         System.out.println(String.format("------Thread ID: %s, Date: %s, Sharding Context: %s, Action: %s", Thread.currentThread().getId(), new Date(), shardingContext, "simple job"));
-        System.out.println(shardingContext.getShardingParameter());
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());

File: elastic-job-example/elastic-job-example-lite-java/src/main/java/com/dangdang/ddframe/job/example/listener/JavaSimpleDistributeListener.java
Patch:
@@ -20,13 +20,13 @@
 import com.dangdang.ddframe.job.executor.ShardingContexts;
 import com.dangdang.ddframe.job.lite.api.listener.AbstractDistributeOnceElasticJobListener;
 
-public class SimpleDistributeListener extends AbstractDistributeOnceElasticJobListener {
+public class JavaSimpleDistributeListener extends AbstractDistributeOnceElasticJobListener {
 
     private final long startedTimeoutMilliseconds;
     
     private final long completedTimeoutMilliseconds;
     
-    public SimpleDistributeListener(final long startedTimeoutMilliseconds, final long completedTimeoutMilliseconds) {
+    public JavaSimpleDistributeListener(final long startedTimeoutMilliseconds, final long completedTimeoutMilliseconds) {
         super(startedTimeoutMilliseconds, completedTimeoutMilliseconds);
         this.startedTimeoutMilliseconds = startedTimeoutMilliseconds;
         this.completedTimeoutMilliseconds = completedTimeoutMilliseconds;

File: elastic-job-example/elastic-job-example-lite-java/src/main/java/com/dangdang/ddframe/job/example/listener/JavaSimpleListener.java
Patch:
@@ -20,7 +20,7 @@
 import com.dangdang.ddframe.job.executor.ShardingContexts;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;
 
-public class SimpleListener implements ElasticJobListener {
+public class JavaSimpleListener implements ElasticJobListener {
     
     @Override
     public void beforeJobExecuted(final ShardingContexts shardingContexts) {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/AllMesosTests.java
Patch:
@@ -22,6 +22,7 @@
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
+        SupportedExtractionTypeTest.class, 
         LeasesQueueTest.class, 
         JobTaskRequestTest.class, 
         TaskInfoDataTest.class, 

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/schedule/SpringJobScheduler.java
Patch:
@@ -57,6 +57,6 @@ private static ElasticJobListener[] getTargetElasticJobListeners(final ElasticJo
     
     @Override
     protected Optional<ElasticJob> createElasticJobInstance() {
-        return Optional.of(elasticJob);
+        return Optional.fromNullable(elasticJob);
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingService.java
Patch:
@@ -96,7 +96,8 @@ public boolean isNeedSharding() {
      * 如果当前无可用节点则不分片.
      */
     public void shardingIfNecessary() {
-        if (serverService.getAvailableServers().isEmpty()) {
+        List<String> availableShardingServers = serverService.getAvailableShardingServers();
+        if (availableShardingServers.isEmpty()) {
             return;
         }
         if (!isNeedSharding()) {
@@ -115,7 +116,7 @@ public void shardingIfNecessary() {
         clearShardingInfo();
         JobShardingStrategy jobShardingStrategy = JobShardingStrategyFactory.getStrategy(liteJobConfig.getJobShardingStrategyClass());
         JobShardingStrategyOption option = new JobShardingStrategyOption(jobName, liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount());
-        jobNodeStorage.executeInTransaction(new PersistShardingInfoTransactionExecutionCallback(jobShardingStrategy.sharding(serverService.getAvailableServers(), option)));
+        jobNodeStorage.executeInTransaction(new PersistShardingInfoTransactionExecutionCallback(jobShardingStrategy.sharding(availableShardingServers, option)));
         log.debug("Job '{}' sharding complete.", jobName);
     }
     

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/executor/JobExecutor.java
Patch:
@@ -37,7 +37,6 @@
 @Slf4j
 public class JobExecutor {
     
-    @Getter
     private final LiteJobConfiguration liteJobConfig;
     
     private final CoordinatorRegistryCenter regCenter;
@@ -50,7 +49,7 @@ public JobExecutor(final CoordinatorRegistryCenter regCenter, final LiteJobConfi
         this.regCenter = regCenter;
         List<ElasticJobListener> elasticJobListenerList = Arrays.asList(elasticJobListeners);
         setGuaranteeServiceForElasticJobListeners(regCenter, elasticJobListenerList);
-        schedulerFacade = new SchedulerFacade(regCenter, liteJobConfig, elasticJobListenerList);
+        schedulerFacade = new SchedulerFacade(regCenter, liteJobConfig.getJobName(), elasticJobListenerList);
     }
     
     private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistryCenter regCenter, final List<ElasticJobListener> elasticJobListeners) {

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/api/JobSchedulerTest.java
Patch:
@@ -67,7 +67,6 @@ public void initMocks() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
         ReflectionUtils.setFieldValue(jobScheduler, "jobExecutor", jobExecutor);
         when(jobExecutor.getSchedulerFacade()).thenReturn(schedulerFacade);
-        when(jobExecutor.getLiteJobConfig()).thenReturn(liteJobConfig);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/listener/ListenerManagerTest.java
Patch:
@@ -18,7 +18,6 @@
 package com.dangdang.ddframe.job.lite.internal.listener;
 
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;
-import com.dangdang.ddframe.job.lite.fixture.util.JobConfigurationUtil;
 import com.dangdang.ddframe.job.lite.internal.config.ConfigurationListenerManager;
 import com.dangdang.ddframe.job.lite.internal.election.ElectionListenerManager;
 import com.dangdang.ddframe.job.lite.internal.execution.ExecutionListenerManager;
@@ -59,7 +58,7 @@ public class ListenerManagerTest {
     @Mock
     private GuaranteeListenerManager guaranteeListenerManager;
     
-    private final ListenerManager listenerManager = new ListenerManager(null, JobConfigurationUtil.createSimpleLiteJobConfiguration(), Collections.<ElasticJobListener>emptyList());
+    private final ListenerManager listenerManager = new ListenerManager(null, "test_job", Collections.<ElasticJobListener>emptyList());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -74,7 +74,7 @@ public class SchedulerFacadeTest {
     @Before
     public void setUp() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
-        schedulerFacade = new SchedulerFacade(null, liteJobConfig, Collections.<ElasticJobListener>emptyList());
+        schedulerFacade = new SchedulerFacade(null, "test_job", Collections.<ElasticJobListener>emptyList());
         when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
                 TestDataflowJob.class.getCanonicalName(), false)).build());
         ReflectionUtils.setFieldValue(schedulerFacade, "configService", configService);
@@ -100,7 +100,7 @@ public void assertRegisterStartUpInfo() {
         verify(listenerManager).startAllListeners();
         verify(leaderElectionService).leaderForceElection();
         verify(configService).persist(liteJobConfig);
-        verify(serverService).persistServerOnline(liteJobConfig);
+        verify(serverService).persistServerOnline(true);
         verify(serverService).clearJobPausedStatus();
         verify(shardingService).setReshardingFlag();
         verify(monitorService).listen();

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/LaunchingTasks.java
Patch:
@@ -17,15 +17,16 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
-import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.context.TaskContext;
 import com.netflix.fenzo.TaskAssignmentResult;
 import com.netflix.fenzo.TaskRequest;
 import com.netflix.fenzo.VMAssignmentResult;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -60,7 +61,7 @@ List<TaskRequest> getPendingTasks() {
     private Collection<TaskRequest> createTaskRequests(final JobContext jobContext) {
         Collection<TaskRequest> result = new ArrayList<>(jobContext.getAssignedShardingItems().size());
         for (int each : jobContext.getAssignedShardingItems()) {
-            result.add(new JobTaskRequest(new TaskContext(jobContext.getJobConfig().getJobName(), each, jobContext.getType()), jobContext.getJobConfig()));
+            result.add(new JobTaskRequest(new TaskContext(jobContext.getJobConfig().getJobName(), Arrays.asList(each), jobContext.getType()), jobContext.getJobConfig()));
         }
         return result;
     }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -82,8 +82,8 @@ public void statusUpdate(final SchedulerDriver schedulerDriver, final Protos.Tas
         TaskContext taskContext = TaskContext.from(taskId);
         log.trace("call statusUpdate task state is: {}, task id is: {}", taskStatus.getState(), taskId);
         jobEventBus.post(new JobStatusTraceEvent(taskContext.getMetaInfo().getJobName(), taskContext.getId(), taskContext.getSlaveId(), 
-                taskContext.getType().name(), String.valueOf(taskContext.getMetaInfo().getShardingItem()),
-                Source.CLOUD_SCHEDULER, State.valueOf(taskStatus.getState().name()), String.format("source is: %s, message is: %s.", taskStatus.getSource(), taskStatus.getMessage())));
+                taskContext.getType(), String.valueOf(taskContext.getMetaInfo().getShardingItems()),
+                Source.CLOUD_SCHEDULER, State.valueOf(taskStatus.getState().name()), taskStatus.getMessage()));
         switch (taskStatus.getState()) {
             case TASK_RUNNING:
                 if ("BEGIN".equals(taskStatus.getMessage())) {
@@ -97,13 +97,13 @@ public void statusUpdate(final SchedulerDriver schedulerDriver, final Protos.Tas
                 unAssignTask(taskId);
                 break;
             case TASK_KILLED:
-            case TASK_FAILED:
                 log.warn("task id is: {}, status is: {}, message is: {}, source is: {}", taskId, taskStatus.getState(), taskStatus.getMessage(), taskStatus.getSource());
                 facadeService.removeRunning(taskContext);
                 facadeService.addDaemonJobToReadyQueue(taskContext.getMetaInfo().getJobName());
                 unAssignTask(taskId);
                 break;
             case TASK_LOST:
+            case TASK_FAILED:
             case TASK_ERROR:
                 log.warn("task id is: {}, status is: {}, message is: {}, source is: {}", taskId, taskStatus.getState(), taskStatus.getMessage(), taskStatus.getSource());
                 facadeService.removeRunning(taskContext);

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/TaskLaunchProcessor.java
Patch:
@@ -91,8 +91,8 @@ public void run() {
                     TaskContext taskContext = TaskContext.from(taskInfo.getTaskId().getValue());
                     facadeService.addRunning(taskContext);
                     jobEventBus.post(new JobStatusTraceEvent(taskContext.getMetaInfo().getJobName(), taskContext.getId(), taskContext.getSlaveId(),
-                            taskContext.getType().name(), String.valueOf(taskContext.getMetaInfo().getShardingItem()), Source.CLOUD_SCHEDULER, 
-                            State.TASK_STAGING, String.format("task info is: %s", taskInfo)));
+                            taskContext.getType(), String.valueOf(taskContext.getMetaInfo().getShardingItems()), Source.CLOUD_SCHEDULER, 
+                            State.TASK_STAGING, ""));
                 }
                 facadeService.removeLaunchTasksFromQueue(Lists.transform(taskInfoList, new Function<TaskInfo, TaskContext>() {
                     
@@ -133,7 +133,7 @@ private Protos.TaskInfo getTaskInfo(final Protos.SlaveID slaveID, final TaskAssi
         CloudJobConfiguration jobConfig = jobConfigOptional.get();
         Map<Integer, String> shardingItemParameters = new ShardingItemParameters(jobConfig.getTypeConfig().getCoreConfig().getShardingItemParameters()).getMap();
         Map<Integer, String> assignedShardingItemParameters = new HashMap<>(1, 1);
-        int shardingItem = taskContext.getMetaInfo().getShardingItem();
+        int shardingItem = taskContext.getMetaInfo().getShardingItems().get(0);
         assignedShardingItemParameters.put(shardingItem, shardingItemParameters.containsKey(shardingItem) ? shardingItemParameters.get(shardingItem) : "");
         ShardingContexts shardingContexts = new ShardingContexts(taskContext.getId(), jobConfig.getJobName(), jobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount(), 
                 jobConfig.getTypeConfig().getCoreConfig().getJobParameter(), assignedShardingItemParameters);

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/state/failover/FailoverService.java
Patch:
@@ -118,8 +118,8 @@ private List<Integer> getAssignedShardingItems(final String jobName, final List<
         List<Integer> result = new ArrayList<>(taskMetaInfoList.size());
         for (String each : taskMetaInfoList) {
             TaskContext.MetaInfo metaInfo = TaskContext.MetaInfo.from(each);
-            if (assignedTasks.add(Hashing.md5().newHasher().putString(jobName, Charsets.UTF_8).putInt(metaInfo.getShardingItem()).hash()) && !runningService.isTaskRunning(metaInfo)) {
-                result.add(metaInfo.getShardingItem());
+            if (assignedTasks.add(Hashing.md5().newHasher().putString(jobName, Charsets.UTF_8).putInt(metaInfo.getShardingItems().get(0)).hash()) && !runningService.isTaskRunning(metaInfo)) {
+                result.add(metaInfo.getShardingItems().get(0));
             }
         }
         return result;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/JobTaskRequestTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
+import com.google.common.collect.Lists;
 import com.netflix.fenzo.TaskRequest;
 import org.junit.Test;
 
@@ -33,7 +34,7 @@
 public final class JobTaskRequestTest {
     
     private JobTaskRequest jobTaskRequest = 
-            new JobTaskRequest(new TaskContext("test_job", 0, ExecutionType.READY, "unassigned-slave"), CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job"));
+            new JobTaskRequest(new TaskContext("test_job", Lists.newArrayList(0), ExecutionType.READY, "unassigned-slave"), CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job"));
     
     @Test
     public void assertGetId() {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngineTest.java
Patch:
@@ -168,6 +168,7 @@ public void assertFailedStatusUpdate() {
         when(facadeService.popMapping(taskNode.getTaskNodeValue())).thenReturn("localhost");
         schedulerEngine.statusUpdate(null, Protos.TaskStatus.newBuilder().setTaskId(Protos.TaskID.newBuilder().setValue(taskNode.getTaskNodeValue()))
                 .setState(Protos.TaskState.TASK_FAILED).setSlaveId(Protos.SlaveID.newBuilder().setValue("slave-S0")).build());
+        verify(facadeService).recordFailoverTask(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService).removeRunning(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService).addDaemonJobToReadyQueue("test_job");
         verify(taskUnAssigner).call(TaskContext.getIdForUnassignedSlave(taskNode.getTaskNodeValue()), "localhost");

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/event/type/JobStatusTraceEvent.java
Patch:
@@ -1,5 +1,6 @@
 package com.dangdang.ddframe.job.event.type;
 
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.event.JobEvent;
 import com.dangdang.ddframe.job.util.env.LocalHostService;
 import lombok.Getter;
@@ -31,9 +32,9 @@ public class JobStatusTraceEvent implements JobEvent {
     
     private final String slaveId;
     
-    private final String executionType;
+    private final ExecutionType executionType;
     
-    private final String shardingItem;
+    private final String shardingItems;
     
     private final Source source;
     

File: elastic-job-common/elastic-job-common-core/src/test/java/com/dangdang/ddframe/job/event/rdb/JobEventRdbListenerTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.event.rdb;
         
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.event.JobEventBus;
 import com.dangdang.ddframe.job.event.JobEventListenerConfigurationException;
 import com.dangdang.ddframe.job.event.type.JobExecutionEvent;
@@ -72,7 +73,7 @@ public void assertPostJobExecutionEvent() {
     
     @Test
     public void assertPostJobStatusTraceEvent() {
-        JobStatusTraceEvent jobStatusTraceEvent = new JobStatusTraceEvent(JOB_NAME, "fake_task_id", "fake_slave_id", "READY", "0", Source.LITE_EXECUTOR, State.TASK_RUNNING, "message is empty.");
+        JobStatusTraceEvent jobStatusTraceEvent = new JobStatusTraceEvent(JOB_NAME, "fake_task_id", "fake_slave_id", ExecutionType.READY, "0", Source.LITE_EXECUTOR, State.TASK_RUNNING, "message is empty.");
         jobEventBus.post(jobStatusTraceEvent);
         verify(repository, atMost(1)).addJobStatusTraceEvent(jobStatusTraceEvent);
     }

File: elastic-job-common/elastic-job-common-core/src/test/java/com/dangdang/ddframe/job/event/rdb/JobEventRdbStorageTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.event.rdb;
 
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.event.type.JobExecutionEvent;
 import com.dangdang.ddframe.job.event.type.JobExecutionEvent.ExecutionSource;
 import com.dangdang.ddframe.job.event.type.JobStatusTraceEvent;
@@ -54,7 +55,7 @@ public void assertAddJobExecutionEvent() throws SQLException {
     
     @Test
     public void assertAddJobStatusTraceEvent() throws SQLException {
-        assertTrue(storage.addJobStatusTraceEvent(new JobStatusTraceEvent("test_job", "fake_task_id", "fake_slave_id", "READY", "0", 
+        assertTrue(storage.addJobStatusTraceEvent(new JobStatusTraceEvent("test_job", "fake_task_id", "fake_slave_id", ExecutionType.READY, "0", 
                 Source.LITE_EXECUTOR, State.TASK_RUNNING, "message is empty.")));
     }
     

File: elastic-job-common/elastic-job-common-core/src/test/java/com/dangdang/ddframe/job/executor/AllExecutorTests.java
Patch:
@@ -23,6 +23,7 @@
 import com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest;
 import com.dangdang.ddframe.job.executor.type.ScriptJobExecutorTest;
 import com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest;
+import com.dangdang.ddframe.job.executor.type.WrongJobExecutorTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
@@ -33,7 +34,8 @@
         ExecutorServiceHandlerRegistryTest.class, 
         JobPropertiesTest.class,
         DefaultJobExceptionHandlerTest.class, 
-        SimpleJobExecutorTest.class, 
+        SimpleJobExecutorTest.class,
+        WrongJobExecutorTest.class,
         DataflowJobExecutorTest.class, 
         ScriptJobExecutorTest.class
     })

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/monitor/MonitorServiceDisableTest.java
Patch:
@@ -20,16 +20,18 @@
 import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobTest;
 import org.junit.Test;
-
+import org.junit.Ignore;
 import java.io.IOException;
 
+
 public final class MonitorServiceDisableTest extends AbstractBaseStdJobTest {
     
     public MonitorServiceDisableTest() {
         super(TestSimpleJob.class, -1);
     }
     
     @Test(expected = IOException.class)
+    @Ignore
     public void assertMonitorWithDumpCommand() throws IOException {
         SocketUtils.sendCommand(MonitorService.DUMP_COMMAND, 9000);
     }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/monitor/MonitorServiceEnableTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobTest;
 import org.junit.Test;
-
+import org.junit.Ignore;
 import java.io.IOException;
 
 import static org.junit.Assert.assertNotNull;
@@ -35,6 +35,7 @@ public MonitorServiceEnableTest() {
     }
     
     @Test
+    @Ignore
     public void assertMonitorWithCommand() throws IOException {
         initJob();
         assertNotNull(SocketUtils.sendCommand(MonitorService.DUMP_COMMAND, MONITOR_PORT));

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -99,6 +99,7 @@ public List<ACL> getAclForPath(final String path) {
         try {
             client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds() * zkConfig.getMaxRetries(), TimeUnit.MILLISECONDS);
             if (!client.getZookeeperClient().isConnected()) {
+                client.close();
                 throw new KeeperException.OperationTimeoutException();
             }
         //CHECKSTYLE:OFF

File: elastic-job-example/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/dataflow/SpringDataflowJob.java
Patch:
@@ -21,13 +21,11 @@
 import com.dangdang.ddframe.job.api.dataflow.DataflowJob;
 import com.dangdang.ddframe.job.example.fixture.entity.Foo;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepository;
-import org.springframework.stereotype.Component;
 
 import javax.annotation.Resource;
 import java.util.Date;
 import java.util.List;
 
-@Component
 public class SpringDataflowJob implements DataflowJob<Foo> {
     
     @Resource

File: elastic-job-example/elastic-job-example-jobs/src/main/java/com/dangdang/ddframe/job/example/job/simple/SpringSimpleJob.java
Patch:
@@ -21,13 +21,11 @@
 import com.dangdang.ddframe.job.api.simple.SimpleJob;
 import com.dangdang.ddframe.job.example.fixture.entity.Foo;
 import com.dangdang.ddframe.job.example.fixture.repository.FooRepository;
-import org.springframework.stereotype.Component;
 
 import javax.annotation.Resource;
 import java.util.Date;
 import java.util.List;
 
-@Component
 public class SpringSimpleJob implements SimpleJob {
     
     @Resource
@@ -36,6 +34,7 @@ public class SpringSimpleJob implements SimpleJob {
     @Override
     public void execute(final ShardingContext shardingContext) {
         System.out.println(String.format("------Thread ID: %s, Date: %s, Sharding Context: %s, Action: %s", Thread.currentThread().getId(), new Date(), shardingContext, "simple job"));
+        System.out.println(shardingContext.getShardingParameter());
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -67,6 +67,7 @@ protected AbstractBeanDefinition parseInternal(final Element element, final Pars
         BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringJobScheduler.class);
         factory.setInitMethodName("init");
         factory.setDestroyMethodName("shutdown");
+        factory.addConstructorArgValue(BeanDefinitionBuilder.rootBeanDefinition(element.getAttribute(CLASS_ATTRIBUTE)).getBeanDefinition());
         factory.addConstructorArgReference(element.getAttribute(REGISTRY_CENTER_REF_ATTRIBUTE));
         factory.addConstructorArgValue(createJobConfiguration(element));
         BeanDefinition jobEventConfig = createJobEventConfig(element);

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/AllLiteSpringTests.java
Patch:
@@ -24,5 +24,5 @@
 
 @RunWith(Suite.class)
 @SuiteClasses(AllSpringJobTests.class)
-public class AllLiteSpringTests {
+public final class AllLiteSpringTests {
 }

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/AllSpringJobTests.java
Patch:
@@ -29,5 +29,5 @@
         AllSpringIntegrateTests.class, 
         AllSpringNamespaceTests.class
     })
-public class AllSpringJobTests {
+public final class AllSpringJobTests {
 }

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/integrate/AbstractJobSpringIntegrateTest.java
Patch:
@@ -29,8 +29,6 @@
 
 import javax.annotation.Resource;
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
 @RequiredArgsConstructor
@@ -67,7 +65,6 @@ private void assertSimpleElasticJobBean() {
             sleep(100L);
         }
         assertTrue(FooSimpleElasticJob.isCompleted());
-        assertThat(FooSimpleElasticJob.getJobValue(), is("simple"));
         assertTrue(regCenter.isExisted("/" + simpleJobName + "/execution"));
     }
     

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/integrate/JobSpringNamespaceWithEventTraceRdbTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withEventTraceRdb.xml")
-public class JobSpringNamespaceWithEventTraceRdbTest extends AbstractJobSpringIntegrateTest {
+public final class JobSpringNamespaceWithEventTraceRdbTest extends AbstractJobSpringIntegrateTest {
     
     public JobSpringNamespaceWithEventTraceRdbTest() {
         super("simpleElasticJob_namespace_event_trace_rdb", "dataflowElasticJob_namespace_event_trace_rdb");

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/integrate/JobSpringNamespaceWithJobPropertiesTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withJobProperties.xml")
-public class JobSpringNamespaceWithJobPropertiesTest extends AbstractJobSpringIntegrateTest {
+public final class JobSpringNamespaceWithJobPropertiesTest extends AbstractJobSpringIntegrateTest {
     
     public JobSpringNamespaceWithJobPropertiesTest() {
         super("simpleElasticJob_namespace_job_properties", "dataflowElasticJob_namespace_job_properties");

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/integrate/JobSpringNamespaceWithListenerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withListener.xml")
-public class JobSpringNamespaceWithListenerTest extends AbstractJobSpringIntegrateTest {
+public final class JobSpringNamespaceWithListenerTest extends AbstractJobSpringIntegrateTest {
     
     public JobSpringNamespaceWithListenerTest() {
         super("simpleElasticJob_namespace_listener", "dataflowElasticJob_namespace_listener");

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/namespace/AllSpringNamespaceTests.java
Patch:
@@ -31,5 +31,5 @@
     DataflowJobConfigurationDtoTest.class,
     ScriptJobConfigurationDtoTest.class
     })
-public class AllSpringNamespaceTests {
+public final class AllSpringNamespaceTests {
 }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/MasterBootstrap.java
Patch:
@@ -33,7 +33,7 @@
 import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
 import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;
-import com.dangdang.ddframe.job.util.restful.RestfulServer;
+import com.dangdang.ddframe.job.restful.RestfulServer;
 import com.google.common.base.Optional;
 import com.netflix.fenzo.TaskScheduler;
 import com.netflix.fenzo.VirtualMachineLease;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApiTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.dangdang.ddframe.job.cloud.scheduler.lifecycle.LifecycleService;
 import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManagerFactory;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
-import com.dangdang.ddframe.job.util.restful.RestfulServer;
+import com.dangdang.ddframe.job.restful.RestfulServer;
 import org.apache.mesos.SchedulerDriver;
 import org.eclipse.jetty.client.ContentExchange;
 import org.eclipse.jetty.client.HttpClient;

File: elastic-job-common/elastic-job-common-restful/src/main/java/com/dangdang/ddframe/job/restful/GsonJsonProvider.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util.restful;
+package com.dangdang.ddframe.job.restful;
 
 import com.dangdang.ddframe.job.util.json.GsonFactory;
 

File: elastic-job-common/elastic-job-common-restful/src/main/java/com/dangdang/ddframe/job/restful/RestfulException.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util.restful;
+package com.dangdang.ddframe.job.restful;
 
 /**
  * REST API异常.

File: elastic-job-common/elastic-job-common-restful/src/main/java/com/dangdang/ddframe/job/restful/RestfulExceptionMapper.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util.restful;
+package com.dangdang.ddframe.job.restful;
 
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;

File: elastic-job-common/elastic-job-common-restful/src/main/java/com/dangdang/ddframe/job/restful/RestfulServer.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util.restful;
+package com.dangdang.ddframe.job.restful;
 
 import com.google.common.base.Joiner;
 import com.sun.jersey.api.core.PackagesResourceConfig;

File: elastic-job-common/elastic-job-common-restful/src/test/java/com/dangdang/ddframe/job/restful/RestfulExceptionTest.java
Patch:
@@ -15,11 +15,11 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util.restful;
+package com.dangdang.ddframe.job.restful;
 
 import org.junit.Test;
 
-import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.core.IsInstanceOf.instanceOf;
 import static org.junit.Assert.assertThat;
 
 public final class RestfulExceptionTest {

File: elastic-job-common/elastic-job-common-restful/src/test/java/com/dangdang/ddframe/job/restful/fixture/Caller.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util.restful.fixture;
+package com.dangdang.ddframe.job.restful.fixture;
 
 public interface Caller {
     

File: elastic-job-common/elastic-job-common-restful/src/test/java/com/dangdang/ddframe/job/restful/fixture/TestRestfulApi.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util.restful.fixture;
+package com.dangdang.ddframe.job.restful.fixture;
 
 import com.google.common.collect.Maps;
 import lombok.Setter;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/context/JobContext.java
Patch:
@@ -18,6 +18,7 @@
 package com.dangdang.ddframe.job.cloud.scheduler.context;
 
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/lifecycle/LifecycleService.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.lifecycle;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;
 import org.apache.mesos.Protos;
 import org.apache.mesos.SchedulerDriver;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/FacadeService.java
Patch:
@@ -19,9 +19,9 @@
 
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationService;
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.state.failover.FailoverService;
 import com.dangdang.ddframe.job.cloud.scheduler.state.ready.ReadyService;
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/JobTaskRequest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.netflix.fenzo.ConstraintEvaluator;
 import com.netflix.fenzo.TaskRequest;
 import com.netflix.fenzo.VMTaskFitnessCalculator;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/LaunchingTasks.java
Patch:
@@ -17,9 +17,9 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.netflix.fenzo.TaskAssignmentResult;
 import com.netflix.fenzo.TaskRequest;
 import com.netflix.fenzo.VMAssignmentResult;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.event.JobEventBus;
 import com.dangdang.ddframe.job.event.type.JobStatusTraceEvent;
 import com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.Source;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/TaskLaunchProcessor.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment;
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.event.JobEventBus;
 import com.dangdang.ddframe.job.event.type.JobStatusTraceEvent;
 import com.dangdang.ddframe.job.event.type.JobStatusTraceEvent.Source;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/state/failover/FailoverNode.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.state.failover;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.state.StateNode;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/state/failover/FailoverService.java
Patch:
@@ -21,9 +21,9 @@
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationService;
 import com.dangdang.ddframe.job.cloud.scheduler.config.JobExecutionType;
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Charsets;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/state/ready/ReadyService.java
Patch:
@@ -21,7 +21,7 @@
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationService;
 import com.dangdang.ddframe.job.cloud.scheduler.config.JobExecutionType;
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/state/running/RunningService.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.state.running;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import lombok.Getter;
 
 import java.util.Collection;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/context/AllContextTests.java
Patch:
@@ -22,8 +22,7 @@
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
-        JobContextTest.class, 
-        TaskContextTest.class
+        JobContextTest.class
     })
 public final class AllContextTests {
 }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/context/JobContextTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import org.junit.Test;
 
 import static org.hamcrest.core.Is.is;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/fixture/TaskNode.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.fixture;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.google.common.base.Joiner;
 import lombok.Builder;
 

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/lifecycle/LifecycleServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.lifecycle;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.TaskNode;
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;
 import org.apache.mesos.Protos;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/FacadeServiceTest.java
Patch:
@@ -19,9 +19,9 @@
 
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationService;
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.TaskNode;
 import com.dangdang.ddframe.job.cloud.scheduler.state.failover.FailoverService;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/JobTaskRequestTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.ExecutionType;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.netflix.fenzo.TaskRequest;
 import org.junit.Test;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/LaunchingTasksTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.netflix.fenzo.TaskRequest;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngineTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.TaskNode;
 import com.dangdang.ddframe.job.cloud.scheduler.mesos.fixture.OfferBuilder;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/producer/ProducerManagerTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationService;
 import com.dangdang.ddframe.job.cloud.scheduler.config.JobExecutionType;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.dangdang.ddframe.job.cloud.scheduler.lifecycle.LifecycleService;
 import com.dangdang.ddframe.job.cloud.scheduler.state.ready.ReadyService;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/state/failover/FailoverNodeTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.state.failover;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.TaskNode;
 import org.junit.Test;
 

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/state/failover/FailoverServiceTest.java
Patch:
@@ -21,9 +21,9 @@
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationService;
 import com.dangdang.ddframe.job.cloud.scheduler.config.JobExecutionType;
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.TaskNode;
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/state/ready/ReadyServiceTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationService;
 import com.dangdang.ddframe.job.cloud.scheduler.config.JobExecutionType;
-import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
+import com.dangdang.ddframe.job.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/state/running/RunningServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.scheduler.state.running;
 
-import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.context.TaskContext;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.TaskNode;
 import org.junit.After;
 import org.junit.Before;

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/context/ExecutionType.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.cloud.scheduler.context;
+package com.dangdang.ddframe.job.context;
 
 /**
  * 执行类型.

File: elastic-job-common/elastic-job-common-core/src/main/java/com/dangdang/ddframe/job/context/TaskContext.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.cloud.scheduler.context;
+package com.dangdang.ddframe.job.context;
 
 import com.dangdang.ddframe.job.util.digest.Encryption;
 import com.google.common.base.Joiner;

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/common/AbstractJobConfigurationDto.java
Patch:
@@ -98,10 +98,10 @@ private JobCoreConfiguration buildJobCoreConfiguration() {
             jobCoreConfigBuilder.misfire(misfire);
         }
         if (null != executorServiceHandler) {
-            jobCoreConfigBuilder.jobProperties(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER.name(), executorServiceHandler);
+            jobCoreConfigBuilder.jobProperties(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER.getKey(), executorServiceHandler);
         }
         if (null != jobExceptionHandler) {
-            jobCoreConfigBuilder.jobProperties(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.name(), jobExceptionHandler);
+            jobCoreConfigBuilder.jobProperties(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.getKey(), jobExceptionHandler);
         }
         buildEventConfiguration(jobCoreConfigBuilder);
         jobCoreConfigBuilder.description(description);

File: elastic-job-lite/elastic-job-lite-lifecycle/src/main/java/com/dangdang/ddframe/job/lite/lifecycle/internal/operate/JobOperateAPIImpl.java
Patch:
@@ -119,7 +119,8 @@ public Collection<String> remove(final Optional<String> jobName, final Optional<
             @Override
             public boolean doOperate(final String jobName, final String serverIp) {
                 JobNodePath jobNodePath = new JobNodePath(jobName);
-                if (regCenter.isExisted(jobNodePath.getServerNodePath(serverIp, JobNodePath.STATUS_NODE))) {
+                if (regCenter.isExisted(jobNodePath.getServerNodePath(serverIp, JobNodePath.STATUS_NODE)) 
+                        || regCenter.isExisted(jobNodePath.getLeaderHostNodePath())) {
                     return false;
                 }
                 regCenter.remove(jobNodePath.getServerNodePath(serverIp));

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/event/JobExecutionEvent.java
Patch:
@@ -72,6 +72,7 @@ public void executionSuccess() {
      */
     public void executionFailure(final Throwable failureCause) {
         completeTime = new Date();
+        success = false;
         this.failureCause = failureCause;
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/LaunchingTasksTest.java
Patch:
@@ -38,13 +38,12 @@ public final class LaunchingTasksTest {
     public void setUp() {
         launchingTasks = new LaunchingTasks(Arrays.asList(
                 JobContext.from(CloudJobConfigurationBuilder.createCloudJobConfiguration("ready_job"), ExecutionType.READY),
-                JobContext.from(CloudJobConfigurationBuilder.createCloudJobConfiguration("misfire_job"), ExecutionType.MISFIRED),
                 JobContext.from(CloudJobConfigurationBuilder.createCloudJobConfiguration("failover_job"), ExecutionType.FAILOVER)));
     }
     
     @Test
     public void assertGetPendingTasks() {
         List<TaskRequest> actual = launchingTasks.getPendingTasks();
-        assertThat(actual.size(), is(30));
+        assertThat(actual.size(), is(20));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/event/JobEventBusTest.java
Patch:
@@ -117,7 +117,7 @@ public void assertDeregisterWitAnotherJobName() throws InterruptedException, NoS
         verify(jobEventBusInstance, times(0)).clearListeners();
     }
     
-    private void setItemMap(JobEventBusInstance jobEventBusInstance) throws NoSuchFieldException {
+    private void setItemMap(final JobEventBusInstance jobEventBusInstance) throws NoSuchFieldException {
         ConcurrentHashMap<String, JobEventBusInstance> itemMap = new ConcurrentHashMap<>();
         itemMap.put(jobName, jobEventBusInstance);
         ReflectionUtils.setFieldValue(jobEventBus, "itemMap", itemMap);

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/AllLiteSpringTests.java
Patch:
@@ -23,8 +23,6 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 @RunWith(Suite.class)
-@SuiteClasses({
-        AllSpringJobTests.class,
-    })
+@SuiteClasses(AllSpringJobTests.class)
 public class AllLiteSpringTests {
 }

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/RegNamespaceHandler.java
Patch:
@@ -29,6 +29,5 @@ public class RegNamespaceHandler extends NamespaceHandlerSupport {
     @Override
     public void init() {
         registerBeanDefinitionParser("zookeeper", new ZookeeperBeanDefinitionParser());
-        registerBeanDefinitionParser("placeholder", new PlaceholderBeanDefinitionParser());
     }
 }

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/AllLiteSpringTests.java
Patch:
@@ -18,15 +18,13 @@
 package com.dangdang.ddframe;
 
 import com.dangdang.ddframe.job.lite.AllSpringJobTests;
-import com.dangdang.ddframe.reg.AllSpringRegTests;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 
 @RunWith(Suite.class)
 @SuiteClasses({
-        AllSpringRegTests.class, 
-        AllSpringJobTests.class
+        AllSpringJobTests.class,
     })
 public class AllLiteSpringTests {
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/event/rdb/JobEventRdbDataSourceFactoryTest.java
Patch:
@@ -32,5 +32,7 @@ public void assertGetDataSource() {
         DataSource actual = JobEventRdbDataSourceFactory.getDataSource("mockDriverClass", "mockUrl", "root", "root");
         assertThat(actual, is(JobEventRdbDataSourceFactory.getDataSource("mockDriverClass", "mockUrl", "root", "root")));
         assertThat(actual, not(JobEventRdbDataSourceFactory.getDataSource("mockDriverClass", "otherMockUrl", "root", "root")));
+        assertThat(actual, not(JobEventRdbDataSourceFactory.getDataSource("mockDriverClass", "mockUrl", "root", "test")));
+        assertThat(actual, not(JobEventRdbDataSourceFactory.getDataSource("mockDriverClass", "mockUrl", "test", "root")));
     }
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/event/JobEventBus.java
Patch:
@@ -145,7 +145,9 @@ private void register(final JobEventListener listener) {
         
         void post(final Object event) {
             if (!listeners.isEmpty()) {
-                eventBus.post(event);
+                if (!executorServiceObject.isShutdown()) {
+                    eventBus.post(event);    
+                }
             }
         }
         

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/StatisticsProcessor.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.cloud.scheduler.mesos;
 
 import com.dangdang.ddframe.job.cloud.scheduler.state.running.RunningService;
-import com.dangdang.ddframe.job.util.BlockUtils;
+import com.dangdang.ddframe.job.util.concurrent.BlockUtils;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/TaskLaunchProcessor.java
Patch:
@@ -21,7 +21,7 @@
 import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
 import com.dangdang.ddframe.job.executor.ShardingContexts;
-import com.dangdang.ddframe.job.util.BlockUtils;
+import com.dangdang.ddframe.job.util.concurrent.BlockUtils;
 import com.dangdang.ddframe.job.util.config.ShardingItemParameters;
 import com.google.common.base.Function;
 import com.google.common.base.Optional;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/state/running/RunningService.java
Patch:
@@ -116,6 +116,7 @@ public boolean isTaskRunning(final TaskContext.MetaInfo metaInfo) {
     public Collection<TaskContext> getRunningTasks(final String jobName) {
         Set<TaskContext> taskContexts = new CopyOnWriteArraySet<>();
         RUNNING_TASKS.putIfAbsent(jobName, taskContexts);
+        // TODO 即使前面putIfAbsent,但仍然有时get为null,待调研
         return null == RUNNING_TASKS.get(jobName) ? taskContexts : RUNNING_TASKS.get(jobName);
     }
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/util/concurrent/BlockUtils.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.util;
+package com.dangdang.ddframe.job.util.concurrent;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/executor/AllExecutorTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.executor;
 
+import com.dangdang.ddframe.job.executor.handler.ExecutorServiceHandlerRegistryTest;
 import com.dangdang.ddframe.job.executor.handler.JobPropertiesTest;
 import com.dangdang.ddframe.job.executor.handler.impl.DefaultJobExceptionHandlerTest;
 import com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest;
@@ -28,7 +29,8 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
-        JobExecutorFactoryTest.class, 
+        JobExecutorFactoryTest.class,
+        ExecutorServiceHandlerRegistryTest.class, 
         JobPropertiesTest.class,
         DefaultJobExceptionHandlerTest.class, 
         SimpleJobExecutorTest.class, 

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/util/AllUtilTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.util;
 
+import com.dangdang.ddframe.job.util.concurrent.ExecutorServiceObjectTest;
 import com.dangdang.ddframe.job.util.config.ShardingItemParametersTest;
 import com.dangdang.ddframe.job.util.config.ShardingItemsTest;
 import com.dangdang.ddframe.job.util.digest.EncryptionTest;
@@ -35,6 +36,7 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
+        ExecutorServiceObjectTest.class, 
         EncryptionTest.class, 
         TimeServiceTest.class, 
         LocalHostServiceTest.class, 

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/election/LeaderElectionService.java
Patch:
@@ -24,7 +24,7 @@
 import com.dangdang.ddframe.job.lite.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.lite.internal.storage.LeaderExecutionCallback;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
-import com.dangdang.ddframe.job.util.BlockUtils;
+import com.dangdang.ddframe.job.util.concurrent.BlockUtils;
 import com.dangdang.ddframe.job.util.env.LocalHostService;
 import lombok.RequiredArgsConstructor;
 

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionService.java
Patch:
@@ -26,7 +26,7 @@
 import com.dangdang.ddframe.job.lite.internal.server.ServerStatus;
 import com.dangdang.ddframe.job.lite.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
-import com.dangdang.ddframe.job.util.BlockUtils;
+import com.dangdang.ddframe.job.util.concurrent.BlockUtils;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
 

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingService.java
Patch:
@@ -32,7 +32,7 @@
 import com.dangdang.ddframe.job.lite.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.lite.internal.storage.TransactionExecutionCallback;
 import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;
-import com.dangdang.ddframe.job.util.BlockUtils;
+import com.dangdang.ddframe.job.util.concurrent.BlockUtils;
 import com.dangdang.ddframe.job.util.config.ShardingItems;
 import com.dangdang.ddframe.job.util.env.LocalHostService;
 import lombok.RequiredArgsConstructor;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -41,7 +41,7 @@
 import com.dangdang.ddframe.job.reg.exception.RegExceptionHandler;
 import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperConfiguration;
 import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;
-import com.dangdang.ddframe.job.util.BlockUtils;
+import com.dangdang.ddframe.job.util.concurrent.BlockUtils;
 import com.dangdang.ddframe.job.util.env.LocalHostService;
 import com.google.common.base.Joiner;
 import lombok.AccessLevel;

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/test/EmbedZookeeperTestExecutionListener.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.test;
 
 import com.dangdang.ddframe.job.reg.exception.RegExceptionHandler;
-import com.dangdang.ddframe.job.util.BlockUtils;
+import com.dangdang.ddframe.job.util.concurrent.BlockUtils;
 import org.apache.curator.test.TestingServer;
 import org.springframework.test.context.TestContext;
 import org.springframework.test.context.support.AbstractTestExecutionListener;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/LaunchingTasks.java
Patch:
@@ -60,7 +60,7 @@ List<TaskRequest> getPendingTasks() {
     private Collection<TaskRequest> createTaskRequests(final JobContext jobContext) {
         Collection<TaskRequest> result = new ArrayList<>(jobContext.getAssignedShardingItems().size());
         for (int each : jobContext.getAssignedShardingItems()) {
-            result.add(new JobTaskRequest(new TaskContext(jobContext.getJobConfig().getJobName(), each, jobContext.getType(), "fake-slave"), jobContext.getJobConfig()));
+            result.add(new JobTaskRequest(new TaskContext(jobContext.getJobConfig().getJobName(), each, jobContext.getType()), jobContext.getJobConfig()));
         }
         return result;
     }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -109,7 +109,7 @@ public void statusUpdate(final SchedulerDriver schedulerDriver, final Protos.Tas
     private void unAssignTask(final String taskId) {
         String hostname = facadeService.popMapping(taskId);
         if (null != hostname) {
-            taskScheduler.getTaskUnAssigner().call(taskId, hostname);
+            taskScheduler.getTaskUnAssigner().call(TaskContext.getIdForUnassignedSlave(taskId), hostname);
         }
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/JobTaskRequestTest.java
Patch:
@@ -33,11 +33,11 @@
 public final class JobTaskRequestTest {
     
     private JobTaskRequest jobTaskRequest = 
-            new JobTaskRequest(new TaskContext("test_job", 0, ExecutionType.READY, "fake-slave"), CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job"));
+            new JobTaskRequest(new TaskContext("test_job", 0, ExecutionType.READY, "unassigned-slave"), CloudJobConfigurationBuilder.createCloudJobConfiguration("test_job"));
     
     @Test
     public void assertGetId() {
-        assertThat(jobTaskRequest.getId(), startsWith("test_job@-@0@-@READY@-@fake-slave"));
+        assertThat(jobTaskRequest.getId(), startsWith("test_job@-@0@-@READY@-@unassigned-slave"));
     }
     
     @Test

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/env/BootstrapEnvironment.java
Patch:
@@ -130,7 +130,7 @@ public enum EnvironmentArgument {
         
         PORT("http_port", "8899", true),
         
-        APP_CACHE_ENABLE("app_cache_enable", "true", true),
+        APP_CACHE_ENABLE("app_cache_enable", "false", true),
         
         JOB_STATE_QUEUE_SIZE("job_state_queue_size", "10000", true);
         

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/context/TaskContext.java
Patch:
@@ -25,6 +25,7 @@
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
+import lombok.ToString;
 
 import java.util.UUID;
 
@@ -37,6 +38,7 @@
 @RequiredArgsConstructor(access = AccessLevel.PRIVATE)
 @Getter
 @EqualsAndHashCode(of = "id")
+@ToString(of = "id")
 public final class TaskContext {
     
     private static final String DELIMITER = "@-@";

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -77,6 +77,7 @@ public void statusUpdate(final SchedulerDriver schedulerDriver, final Protos.Tas
         log.trace("call statusUpdate task state is: {}, task id is: {}", taskStatus.getState(), taskId);
         switch (taskStatus.getState()) {
             case TASK_RUNNING:
+                facadeService.addRunning(taskContext);
                 if ("BEGIN".equals(taskStatus.getMessage())) {
                     facadeService.updateDaemonStatus(taskContext, false);
                 } else if ("COMPLETE".equals(taskStatus.getMessage())) {

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/TaskLaunchProcessor.java
Patch:
@@ -107,9 +107,6 @@ public TaskContext apply(final Protos.TaskInfo input) {
                         return TaskContext.from(input.getTaskId().getValue());
                     }
                 }));
-                for (Protos.TaskInfo taskInfo : taskInfoList) {
-                    facadeService.addRunning(TaskContext.from(taskInfo.getTaskId().getValue()));
-                }
             }
             BlockUtils.waitingShortTime();
         }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngineTest.java
Patch:
@@ -102,6 +102,7 @@ public void assertRunningStatusUpdateForDaemonJobBegin() {
         TaskNode taskNode = TaskNode.builder().build();
         schedulerEngine.statusUpdate(null, Protos.TaskStatus.newBuilder().setTaskId(Protos.TaskID.newBuilder().setValue(taskNode.getTaskNodeValue()))
                 .setState(Protos.TaskState.TASK_RUNNING).setMessage("BEGIN").setSlaveId(Protos.SlaveID.newBuilder().setValue("slave-S0")).build());
+        verify(facadeService).addRunning(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService).updateDaemonStatus(TaskContext.from(taskNode.getTaskNodeValue()), false);
     }
     
@@ -110,6 +111,7 @@ public void assertRunningStatusUpdateForDaemonJobComplete() {
         TaskNode taskNode = TaskNode.builder().build();
         schedulerEngine.statusUpdate(null, Protos.TaskStatus.newBuilder().setTaskId(Protos.TaskID.newBuilder().setValue(taskNode.getTaskNodeValue()))
                 .setState(Protos.TaskState.TASK_RUNNING).setMessage("COMPLETE").setSlaveId(Protos.SlaveID.newBuilder().setValue("slave-S0")).build());
+        verify(facadeService).addRunning(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService).updateDaemonStatus(TaskContext.from(taskNode.getTaskNodeValue()), true);
     }
     
@@ -118,6 +120,7 @@ public void assertRunningStatusUpdateForOther() {
         TaskNode taskNode = TaskNode.builder().build();
         schedulerEngine.statusUpdate(null, Protos.TaskStatus.newBuilder().setTaskId(Protos.TaskID.newBuilder().setValue(taskNode.getTaskNodeValue()))
                 .setState(Protos.TaskState.TASK_RUNNING).setSlaveId(Protos.SlaveID.newBuilder().setValue("slave-S0")).build());
+        verify(facadeService).addRunning(TaskContext.from(taskNode.getTaskNodeValue()));
         verify(facadeService, times(0)).updateDaemonStatus(TaskContext.from(taskNode.getTaskNodeValue()), eq(anyBoolean()));
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/restful/CloudJobRestfulApi.java
Patch:
@@ -53,7 +53,7 @@ public final class CloudJobRestfulApi {
     public CloudJobRestfulApi() {
         Preconditions.checkNotNull(schedulerDriver);
         Preconditions.checkNotNull(regCenter);
-        producerManager = ProducerManagerFactory.getInstance(regCenter);
+        producerManager = ProducerManagerFactory.getInstance(schedulerDriver, regCenter);
         lifecycleService = new LifecycleService(schedulerDriver, regCenter);
     }
     

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngineTest.java
Patch:
@@ -20,9 +20,9 @@
 import com.dangdang.ddframe.job.cloud.scheduler.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.scheduler.context.JobContext;
 import com.dangdang.ddframe.job.cloud.scheduler.context.TaskContext;
+import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.dangdang.ddframe.job.cloud.scheduler.fixture.TaskNode;
 import com.dangdang.ddframe.job.cloud.scheduler.mesos.fixture.OfferBuilder;
-import com.dangdang.ddframe.job.cloud.scheduler.fixture.CloudJobConfigurationBuilder;
 import com.netflix.fenzo.TaskScheduler;
 import org.apache.mesos.Protos;
 import org.apache.mesos.SchedulerDriver;

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/test/java/com/dangdang/ddframe/job/cloud/scheduler/producer/TaskProducerSchedulerTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.quartz.TriggerKey;
 import org.unitils.util.ReflectionUtils;
 
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -75,7 +76,7 @@ public void assertStartup() throws SchedulerException {
     public void assertRegister() throws SchedulerException {
         when(scheduler.checkExists(jobDetail.getKey())).thenReturn(false);
         taskProducerScheduler.register(jobConfig);
-        verify(scheduler).checkExists(jobDetail.getKey());
+        verify(scheduler, times(2)).checkExists(jobDetail.getKey());
         verify(scheduler).scheduleJob(jobDetail, trigger);
     }
     

File: elastic-job-cloud/elastic-job-cloud-executor/src/main/java/com/dangdang/ddframe/job/cloud/executor/TaskExecutor.java
Patch:
@@ -62,13 +62,15 @@ public void launchTask(final ExecutorDriver executorDriver, final Protos.TaskInf
             if (jobConfig.isTransient()) {
                 JobExecutorFactory.getJobExecutor(elasticJob, new CloudJobFacade(shardingContexts, jobConfig)).execute();
                 executorDriver.sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskInfo.getTaskId()).setState(Protos.TaskState.TASK_FINISHED).build());
+                executorDriver.stop();
             } else {
                 new DaemonTaskScheduler(elasticJob, jobConfig, new CloudJobFacade(shardingContexts, jobConfig), executorDriver, taskInfo.getTaskId()).init();
             }
             // CHECKSTYLE:OFF
         } catch (final Throwable ex) {
             // CHECKSTYLE:ON
             executorDriver.sendStatusUpdate(Protos.TaskStatus.newBuilder().setTaskId(taskInfo.getTaskId()).setState(Protos.TaskState.TASK_ERROR).build());
+            executorDriver.stop();
             throw ex;
         }
     }

File: elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/mesos/SchedulerEngine.java
Patch:
@@ -199,7 +199,7 @@ public void slaveLost(final SchedulerDriver schedulerDriver, final Protos.SlaveI
     
     @Override
     public void executorLost(final SchedulerDriver schedulerDriver, final Protos.ExecutorID executorID, final Protos.SlaveID slaveID, final int i) {
-        log.warn("call executorLost slaveID is: {}, executorID is: {}", slaveID, executorID);
+        log.debug("call executorLost slaveID is: {}, executorID is: {}", slaveID, executorID);
     }
     
     @Override

File: elastic-job-example/elastic-job-example-lite/src/main/java/com/dangdang/ddframe/job/example/EmbedZookeeperServer.java
Patch:
@@ -43,8 +43,9 @@ public static void start(final int port) {
                 @Override
                 public void run() {
                     try {
+                        Thread.sleep(1000L);
                         testingServer.close();
-                    } catch (final IOException ex) {
+                    } catch (final InterruptedException | IOException ex) {
                         RegExceptionHandler.handleException(ex);
                     }
                 }

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -71,6 +71,7 @@ public abstract class AbstractJobBeanDefinitionParser extends AbstractBeanDefini
     protected AbstractBeanDefinition parseInternal(final Element element, final ParserContext parserContext) {
         BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringJobScheduler.class);
         factory.setInitMethodName("init");
+        factory.setDestroyMethodName("shutdown");
         factory.addConstructorArgReference(element.getAttribute(REGISTRY_CENTER_REF_ATTRIBUTE));
         factory.addConstructorArgValue(createJobConfiguration(element));
         factory.addConstructorArgValue(createJobListeners(element));

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/AllSpringJobTests.java
Patch:
@@ -26,8 +26,8 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
-    AllSpringIntegrateTests.class, 
-    AllSpringNamespaceTests.class
+        AllSpringIntegrateTests.class, 
+        AllSpringNamespaceTests.class
     })
 public class AllSpringJobTests {
 }

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/test/EmbedZookeeperTestExecutionListener.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.test;
 
+import com.dangdang.ddframe.job.lite.internal.util.BlockUtils;
 import com.dangdang.ddframe.reg.exception.RegExceptionHandler;
 import org.apache.curator.test.TestingServer;
 import org.springframework.test.context.TestContext;
@@ -50,6 +51,7 @@ private static void startEmbedTestingServer() {
                 @Override
                 public void run() {
                     try {
+                        BlockUtils.waitingShortTime();
                         testingServer.close();
                     } catch (final IOException ex) {
                         RegExceptionHandler.handleException(ex);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/executor/type/StreamingDataflowJobTest.java
Patch:
@@ -27,9 +27,9 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-public final class StreamingSequenceDataflowJobTest extends AbstractDataflowJobExecutorTest {
+public final class StreamingDataflowJobTest extends AbstractDataflowJobExecutorTest {
     
-    public StreamingSequenceDataflowJobTest() {
+    public StreamingDataflowJobTest() {
         super(true);
     }
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/executor/type/UnstreamingDataflowJobTest.java
Patch:
@@ -25,9 +25,9 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-public final class UnstreamingSequenceDataflowJobTest extends AbstractDataflowJobExecutorTest {
+public final class UnstreamingDataflowJobTest extends AbstractDataflowJobExecutorTest {
     
-    public UnstreamingSequenceDataflowJobTest() {
+    public UnstreamingDataflowJobTest() {
         super(false);
     }
     

File: elastic-job-example/elastic-job-example-lite/src/main/java/com/dangdang/ddframe/job/example/JavaLiteJobMain.java
Patch:
@@ -63,7 +63,7 @@ private void init() {
                 JavaSimpleJob.class.getCanonicalName());
         
         final DataflowJobConfiguration dataflowJobConfig = new DataflowJobConfiguration(
-                JobCoreConfiguration.newBuilder("javaSequenceDataflowElasticJob", "0/5 * * * * ?", 10).shardingItemParameters("0=A,1=B,2=C,3=D,4=E,5=F,6=G,7=H,8=I,9=J").build(), 
+                JobCoreConfiguration.newBuilder("javaDataflowElasticJob", "0/5 * * * * ?", 10).shardingItemParameters("0=A,1=B,2=C,3=D,4=E,5=F,6=G,7=H,8=I,9=J").build(), 
                 JavaDataflowJob.class.getCanonicalName(), true);
         
         final ScriptJobConfiguration scriptJobConfig = new ScriptJobConfiguration(JobCoreConfiguration.newBuilder("scriptElasticJob", "0/5 * * * * ?", 10)

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/JobExecutorFactoryTest.java
Patch:
@@ -25,7 +25,6 @@
 import com.dangdang.ddframe.job.api.fixture.job.OtherJob;
 import com.dangdang.ddframe.job.api.fixture.job.TestDataflowJob;
 import com.dangdang.ddframe.job.api.fixture.job.TestSimpleJob;
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.executor.DataflowJobExecutor;
 import com.dangdang.ddframe.job.api.type.script.executor.ScriptJobExecutor;
 import com.dangdang.ddframe.job.api.type.simple.executor.SimpleJobExecutor;
@@ -58,7 +57,7 @@ public void assertGetJobExecutorForSimpleJob() {
     
     @Test
     public void assertGetJobExecutorForDataflowJob() {
-        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestDataflowJobConfiguration(DataflowJobConfiguration.DataflowType.SEQUENCE, false, 1));
+        when(jobFacade.loadJobRootConfiguration(true)).thenReturn(new TestDataflowJobConfiguration(false));
         assertThat(JobExecutorFactory.getJobExecutor(new TestDataflowJob(), jobFacade), instanceOf(DataflowJobExecutor.class));
     }
     

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/config/impl/JobConfigurationGsonTypeAdapterTest.java
Patch:
@@ -26,7 +26,6 @@
 import com.dangdang.ddframe.job.api.fixture.config.TestSimpleJobWithEventConfiguration;
 import com.dangdang.ddframe.job.api.fixture.handler.IgnoreJobExceptionHandler;
 import com.dangdang.ddframe.job.api.fixture.handler.ThrowJobExceptionHandler;
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.stream.JsonReader;
@@ -51,7 +50,7 @@ public void assertToSimpleJobJson() {
     
     @Test
     public void assertToDataflowJobJson() {
-        assertThat(GSON.toJson(new TestJobRootConfiguration(new TestDataflowJobConfiguration(DataflowJobConfiguration.DataflowType.SEQUENCE, true, 10).getTypeConfig())),
+        assertThat(GSON.toJson(new TestJobRootConfiguration(new TestDataflowJobConfiguration(true).getTypeConfig())),
                 is(APIJsonConstants.getDataflowJobJson(IgnoreJobExceptionHandler.class.getCanonicalName())));
     }
     
@@ -79,7 +78,7 @@ public void assertFromSimpleJobJson() {
     public void assertFromDataflowJobJson() {
         TestJobRootConfiguration actual = GSON.fromJson(
                 APIJsonConstants.getDataflowJobJson(IgnoreJobExceptionHandler.class.getCanonicalName()), TestJobRootConfiguration.class);
-        TestJobRootConfiguration expected = new TestJobRootConfiguration(new TestDataflowJobConfiguration(DataflowJobConfiguration.DataflowType.SEQUENCE, true, 10).getTypeConfig());
+        TestJobRootConfiguration expected = new TestJobRootConfiguration(new TestDataflowJobConfiguration(true).getTypeConfig());
         assertThat(GSON.toJson(actual), is(GSON.toJson(expected)));
     }
     

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/fixture/APIJsonConstants.java
Patch:
@@ -34,7 +34,7 @@ public final class APIJsonConstants {
     
     private static final String DATAFLOW_JOB_JSON = "{\"jobName\":\"test_job\",\"jobClass\":\"com.dangdang.ddframe.job.api.fixture.job.TestDataflowJob\",\"jobType\":\"DATAFLOW\","
             + "\"cron\":\"0/1 * * * * ?\",\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"\",\"failover\":false,\"misfire\":true,\"description\":\"\","
-            + "\"jobProperties\":%s,\"jobEventConfigs\":%s,\"dataflowType\":\"SEQUENCE\",\"streamingProcess\":true,\"concurrentDataProcessThreadCount\":10}";
+            + "\"jobProperties\":%s,\"jobEventConfigs\":%s,\"streamingProcess\":true}";
     
     private static final String SCRIPT_JOB_JSON = "{\"jobName\":\"test_job\",\"jobClass\":\"com.dangdang.ddframe.job.api.type.script.api.ScriptJob\",\"jobType\":\"SCRIPT\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":3,\"shardingItemParameters\":\"\",\"jobParameter\":\"\",\"failover\":false,\"misfire\":true,\"description\":\"\","

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/dataflow/executor/sequence/StreamingSequenceDataflowJobTest.java
Patch:
@@ -18,7 +18,6 @@
 package com.dangdang.ddframe.job.api.type.dataflow.executor.sequence;
 
 import com.dangdang.ddframe.job.api.type.dataflow.executor.AbstractDataflowJobExecutorTest;
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import org.junit.Test;
 
 import java.util.Arrays;
@@ -32,7 +31,7 @@
 public final class StreamingSequenceDataflowJobTest extends AbstractDataflowJobExecutorTest {
     
     public StreamingSequenceDataflowJobTest() {
-        super(DataflowJobConfiguration.DataflowType.SEQUENCE, true, 10);
+        super(true);
     }
     
     @SuppressWarnings("unchecked")

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/dataflow/executor/sequence/UnstreamingSequenceDataflowJobTest.java
Patch:
@@ -18,7 +18,6 @@
 package com.dangdang.ddframe.job.api.type.dataflow.executor.sequence;
 
 import com.dangdang.ddframe.job.api.type.dataflow.executor.AbstractDataflowJobExecutorTest;
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import org.junit.Test;
 
 import java.util.Arrays;
@@ -30,7 +29,7 @@
 public final class UnstreamingSequenceDataflowJobTest extends AbstractDataflowJobExecutorTest {
     
     public UnstreamingSequenceDataflowJobTest() {
-        super(DataflowJobConfiguration.DataflowType.SEQUENCE, false, 10);
+        super(false);
     }
     
     @Test

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/dataflow/executor/throughput/StreamingThroughputDataflowJobTest.java
Patch:
@@ -18,7 +18,6 @@
 package com.dangdang.ddframe.job.api.type.dataflow.executor.throughput;
 
 import com.dangdang.ddframe.job.api.type.dataflow.executor.AbstractDataflowJobExecutorTest;
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import org.junit.Test;
 
 import java.util.Arrays;
@@ -33,7 +32,7 @@
 public final class StreamingThroughputDataflowJobTest extends AbstractDataflowJobExecutorTest {
     
     public StreamingThroughputDataflowJobTest() {
-        super(DataflowJobConfiguration.DataflowType.THROUGHPUT, true, 10);
+        super(true);
     }
     
     @Test

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/dataflow/executor/throughput/UnstreamingAndOneThreadThroughputDataflowJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package com.dangdang.ddframe.job.api.type.dataflow.executor.throughput;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.executor.AbstractDataflowJobExecutorTest;
 import org.junit.Test;
 
@@ -32,7 +31,7 @@
 public final class UnstreamingAndOneThreadThroughputDataflowJobTest extends AbstractDataflowJobExecutorTest {
     
     public UnstreamingAndOneThreadThroughputDataflowJobTest() {
-        super(DataflowJobConfiguration.DataflowType.THROUGHPUT, false, 1);
+        super(false);
     }
     
     @Test

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/dataflow/executor/throughput/UnstreamingAndTwoThreadsThroughputDataflowJobTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package com.dangdang.ddframe.job.api.type.dataflow.executor.throughput;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.executor.AbstractDataflowJobExecutorTest;
 import org.junit.Test;
 
@@ -30,7 +29,7 @@
 public final class UnstreamingAndTwoThreadsThroughputDataflowJobTest extends AbstractDataflowJobExecutorTest {
     
     public UnstreamingAndTwoThreadsThroughputDataflowJobTest() {
-        super(DataflowJobConfiguration.DataflowType.THROUGHPUT, false, 2);
+        super(false);
     }
     
     @Test

File: elastic-job-cloud/elastic-job-cloud-agent/src/main/java/com/dangdang/ddframe/job/cloud/agent/internal/JobConfigurationContext.java
Patch:
@@ -23,7 +23,6 @@
 import com.dangdang.ddframe.job.api.config.impl.JobProperties.JobPropertiesEnum;
 import com.dangdang.ddframe.job.api.type.JobType;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration.DataflowType;
 import com.dangdang.ddframe.job.api.type.script.api.ScriptJobConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.event.JobEventConfiguration;
@@ -62,8 +61,7 @@ public JobConfigurationContext(final Map<String, String> jobConfigurationMap) {
         jobCoreConfig.getJobProperties().put(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER.name(), jobConfigurationMap.get("executorServiceHandler"));
         jobCoreConfig.getJobProperties().put(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.name(), jobConfigurationMap.get("jobExceptionHandler"));
         if (JobType.DATAFLOW.name().equals(jobType)) {
-            jobTypeConfig = new DataflowJobConfiguration(jobCoreConfig, jobClass, 
-                    DataflowType.valueOf(jobConfigurationMap.get("dataflowType")), Boolean.valueOf(jobConfigurationMap.get("streamingProcess")));
+            jobTypeConfig = new DataflowJobConfiguration(jobCoreConfig, jobClass, Boolean.valueOf(jobConfigurationMap.get("streamingProcess")));
         } else if (JobType.SIMPLE.name().equals(jobType)) {
             jobTypeConfig = new SimpleJobConfiguration(jobCoreConfig, jobClass);
         } else if (JobType.SCRIPT.name().equals(jobType)) {

File: elastic-job-cloud/elastic-job-cloud-agent/src/test/java/com/dangdang/ddframe/job/cloud/agent/internal/CloudJobFacadeTest.java
Patch:
@@ -18,12 +18,11 @@
 package com.dangdang.ddframe.job.cloud.agent.internal;
 
 import com.dangdang.ddframe.job.api.ElasticJob;
-import com.dangdang.ddframe.job.api.executor.ShardingContexts;
 import com.dangdang.ddframe.job.api.config.JobRootConfiguration;
 import com.dangdang.ddframe.job.api.exception.JobExecutionEnvironmentException;
 import com.dangdang.ddframe.job.api.executor.JobFacade;
+import com.dangdang.ddframe.job.api.executor.ShardingContexts;
 import com.dangdang.ddframe.job.api.type.JobType;
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import org.junit.Test;
 
 import java.util.HashMap;
@@ -59,7 +58,6 @@ private Map<String, String> getJobConfigurationMap(final JobType jobType, final
         result.put("jobName", "test_job");
         result.put("jobClass", ElasticJob.class.getCanonicalName());
         result.put("jobType", jobType.name());
-        result.put("dataflowType", DataflowJobConfiguration.DataflowType.SEQUENCE.name());
         result.put("streamingProcess", Boolean.toString(streamingProcess));
         return result;
     }

File: elastic-job-cloud/elastic-job-cloud-agent/src/test/java/com/dangdang/ddframe/job/cloud/agent/internal/JobConfigurationContextTest.java
Patch:
@@ -82,7 +82,6 @@ private Map<String, String> buildJobConfigurationContextMap(final JobType jobTyp
         result.put("jobClass", TestJob.class.getCanonicalName());
         result.put("jobType", jobType.name());
         if (jobType == JobType.DATAFLOW) {
-            result.put("dataflowType", DataflowJobConfiguration.DataflowType.SEQUENCE.name());
             result.put("streamingProcess", Boolean.TRUE.toString());
             result.put("concurrentDataProcessThreadCount", "8");
         } else if (jobType == JobType.SCRIPT) {

File: elastic-job-cloud/elastic-job-cloud-master/src/main/java/com/dangdang/ddframe/job/cloud/mesos/HardwareResource.java
Patch:
@@ -169,7 +169,6 @@ private Map<String, String> buildJobConfigurationContext(final CloudJobConfigura
         result.put("jobExceptionHandler", jobConfig.getTypeConfig().getCoreConfig().getJobProperties().get(JobPropertiesEnum.JOB_EXCEPTION_HANDLER));
         result.put("executorServiceHandler", jobConfig.getTypeConfig().getCoreConfig().getJobProperties().get(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER));
         if (jobConfig.getTypeConfig() instanceof DataflowJobConfiguration) {
-            result.put("dataflowType", ((DataflowJobConfiguration) jobConfig.getTypeConfig()).getDataflowType().name());
             result.put("streamingProcess", Boolean.toString(((DataflowJobConfiguration) jobConfig.getTypeConfig()).isStreamingProcess()));
         } else if (jobConfig.getTypeConfig() instanceof ScriptJobConfiguration) {
             result.put("scriptCommandLine", ((ScriptJobConfiguration) jobConfig.getTypeConfig()).getScriptCommandLine());

File: elastic-job-example/elastic-job-example-lite/src/main/java/com/dangdang/ddframe/job/example/JavaLiteJobMain.java
Patch:
@@ -64,7 +64,7 @@ private void init() {
         
         final DataflowJobConfiguration dataflowJobConfig = new DataflowJobConfiguration(
                 JobCoreConfiguration.newBuilder("javaSequenceDataflowElasticJob", "0/5 * * * * ?", 10).shardingItemParameters("0=A,1=B,2=C,3=D,4=E,5=F,6=G,7=H,8=I,9=J").build(), 
-                JavaDataflowJob.class.getCanonicalName(), DataflowJobConfiguration.DataflowType.SEQUENCE, true);
+                JavaDataflowJob.class.getCanonicalName(), true);
         
         final ScriptJobConfiguration scriptJobConfig = new ScriptJobConfiguration(JobCoreConfiguration.newBuilder("scriptElasticJob", "0/5 * * * * ?", 10)
                 .shardingItemParameters("0=A,1=B,2=C,3=D,4=E,5=F,6=G,7=H,8=I,9=J").jobEventConfiguration(jobLogEventConfig).build(), 
@@ -88,8 +88,8 @@ private static String buildScriptCommandLine() {
     private static void changeFilePermissions(final Path path) {
         try {
             Files.setPosixFilePermissions(path, PosixFilePermissions.fromString("rwxr-xr-x"));
-        } catch (final IOException e) {
-            e.printStackTrace();
+        } catch (final IOException ex) {
+            ex.printStackTrace();
         }
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/OneOffDataflowElasticJobTest.java
Patch:
@@ -17,13 +17,11 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.dataflow;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.dataflow.OneOffDataflowElasticJob;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,7 +31,7 @@
 public final class OneOffDataflowElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
     public OneOffDataflowElasticJobTest() {
-        super(OneOffDataflowElasticJob.class, Optional.of(DataflowJobConfiguration.DataflowType.THROUGHPUT));
+        super(OneOffDataflowElasticJob.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/StreamingDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -17,13 +17,11 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.dataflow;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.dataflow.StreamingDataflowElasticJobForExecuteFailure;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,7 +31,7 @@
 public final class StreamingDataflowElasticJobForExecuteFailureTest extends AbstractBaseStdJobAutoInitTest {
     
     public StreamingDataflowElasticJobForExecuteFailureTest() {
-        super(StreamingDataflowElasticJobForExecuteFailure.class, Optional.of(DataflowJobConfiguration.DataflowType.THROUGHPUT));
+        super(StreamingDataflowElasticJobForExecuteFailure.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/StreamingDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -17,13 +17,11 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.dataflow;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.dataflow.StreamingDataflowElasticJobForExecuteThrowsException;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,7 +31,7 @@
 public final class StreamingDataflowElasticJobForExecuteThrowsExceptionTest extends AbstractBaseStdJobAutoInitTest {
     
     public StreamingDataflowElasticJobForExecuteThrowsExceptionTest() {
-        super(StreamingDataflowElasticJobForExecuteThrowsException.class, Optional.of(DataflowJobConfiguration.DataflowType.THROUGHPUT));
+        super(StreamingDataflowElasticJobForExecuteThrowsException.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/StreamingDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -17,13 +17,11 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.dataflow;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,7 +31,7 @@
 public final class StreamingDataflowElasticJobForMultipleThreadsTest extends AbstractBaseStdJobAutoInitTest {
     
     public StreamingDataflowElasticJobForMultipleThreadsTest() {
-        super(StreamingDataflowElasticJob.class, Optional.of(DataflowJobConfiguration.DataflowType.THROUGHPUT));
+        super(StreamingDataflowElasticJob.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/StreamingDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -17,13 +17,11 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.dataflow;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,7 +31,7 @@
 public final class StreamingDataflowElasticJobForNotMonitorTest extends AbstractBaseStdJobAutoInitTest {
     
     public StreamingDataflowElasticJobForNotMonitorTest() {
-        super(StreamingDataflowElasticJob.class, Optional.of(DataflowJobConfiguration.DataflowType.THROUGHPUT));
+        super(StreamingDataflowElasticJob.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/StreamingDataflowElasticJobForPausedTest.java
Patch:
@@ -17,13 +17,11 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.dataflow;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,7 +31,7 @@
 public final class StreamingDataflowElasticJobForPausedTest extends AbstractBaseStdJobAutoInitTest {
     
     public StreamingDataflowElasticJobForPausedTest() {
-        super(StreamingDataflowElasticJob.class, Optional.of(DataflowJobConfiguration.DataflowType.THROUGHPUT));
+        super(StreamingDataflowElasticJob.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/StreamingDataflowElasticJobTest.java
Patch:
@@ -17,13 +17,11 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.dataflow;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.dataflow.StreamingDataflowElasticJob;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,7 +31,7 @@
 public final class StreamingDataflowElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
     public StreamingDataflowElasticJobTest() {
-        super(StreamingDataflowElasticJob.class, Optional.of(DataflowJobConfiguration.DataflowType.THROUGHPUT));
+        super(StreamingDataflowElasticJob.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/script/ScriptElasticJobTest.java
Patch:
@@ -17,15 +17,13 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.script;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.script.api.ScriptJob;
 import com.dangdang.ddframe.job.api.type.script.api.ScriptJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.internal.config.LiteJobConfigurationGsonFactory;
 import com.dangdang.ddframe.job.lite.util.ScriptElasticJobUtil;
-import com.google.common.base.Optional;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -36,7 +34,7 @@
 public final class ScriptElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
     public ScriptElasticJobTest() {
-        super(ScriptJob.class, Optional.<DataflowJobConfiguration.DataflowType>absent());
+        super(ScriptJob.class);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/simple/SimpleElasticJobTest.java
Patch:
@@ -17,11 +17,9 @@
 
 package com.dangdang.ddframe.job.lite.integrate.std.simple;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.lite.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.lite.integrate.fixture.simple.FooSimpleElasticJob;
-import com.google.common.base.Optional;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -31,7 +29,7 @@
 public final class SimpleElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
     public SimpleElasticJobTest() {
-        super(FooSimpleElasticJob.class, Optional.<DataflowJobConfiguration.DataflowType>absent());
+        super(FooSimpleElasticJob.class);
     }
     
     @Before

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionContextServiceTest.java
Patch:
@@ -68,7 +68,7 @@ public void setUp() throws NoSuchFieldException {
     @Test
     public void assertGetShardingContextWhenNotAssignShardingItem() {
         when(configService.load(false)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(), 
-                TestDataflowJob.class.getCanonicalName(), DataflowJobConfiguration.DataflowType.THROUGHPUT, true)).monitorExecution(false).build());
+                TestDataflowJob.class.getCanonicalName(), true)).monitorExecution(false).build());
         ShardingContexts expected = new ShardingContexts("test_job", 3, "", Collections.<Integer, String>emptyMap());
         assertThat(executionContextService.getJobShardingContext(Collections.<Integer>emptyList()), new ReflectionEquals(expected));
         verify(configService).load(false);
@@ -77,7 +77,7 @@ public void assertGetShardingContextWhenNotAssignShardingItem() {
     @Test
     public void assertGetShardingContextWhenAssignShardingItems() {
         when(configService.load(false)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3)
-                .shardingItemParameters("0=A,1=B,2=C").build(), TestDataflowJob.class.getCanonicalName(), DataflowJobConfiguration.DataflowType.THROUGHPUT, true)).monitorExecution(false).build());
+                .shardingItemParameters("0=A,1=B,2=C").build(), TestDataflowJob.class.getCanonicalName(), true)).monitorExecution(false).build());
         Map<Integer, String> map = new HashMap<>(3);
         map.put(0, "A");
         map.put(1, "B");
@@ -89,7 +89,7 @@ public void assertGetShardingContextWhenAssignShardingItems() {
     @Test
     public void assertGetShardingContextWhenHasRunningItems() {
         when(configService.load(false)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3)
-                .shardingItemParameters("0=A,1=B,2=C").build(), TestDataflowJob.class.getCanonicalName(), DataflowJobConfiguration.DataflowType.THROUGHPUT, true)).monitorExecution(true).build());
+                .shardingItemParameters("0=A,1=B,2=C").build(), TestDataflowJob.class.getCanonicalName(), true)).monitorExecution(true).build());
         when(jobNodeStorage.isJobNodeExisted("execution/0/running")).thenReturn(false);
         when(jobNodeStorage.isJobNodeExisted("execution/1/running")).thenReturn(true);
         Map<Integer, String> map = new HashMap<>(1, 1);

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/guarantee/GuaranteeServiceTest.java
Patch:
@@ -71,7 +71,7 @@ public void assertIsNotAllStartedWhenRootNodeIsNotExisted() {
     @Test
     public void assertIsNotAllStarted() {
         when(configService.load(false)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
-                TestDataflowJob.class.getCanonicalName(), DataflowJobConfiguration.DataflowType.SEQUENCE, true)).build());
+                TestDataflowJob.class.getCanonicalName(), true)).build());
         when(jobNodeStorage.isJobNodeExisted("guarantee/started")).thenReturn(true);
         when(jobNodeStorage.getJobNodeChildrenKeys("guarantee/started")).thenReturn(Arrays.asList("0", "1"));
         assertFalse(guaranteeService.isAllStarted());

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/monitor/MonitorServiceDisableTest.java
Patch:
@@ -17,18 +17,16 @@
 
 package com.dangdang.ddframe.job.lite.internal.monitor;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobTest;
-import com.google.common.base.Optional;
 import org.junit.Test;
 
 import java.io.IOException;
 
 public final class MonitorServiceDisableTest extends AbstractBaseStdJobTest {
     
     public MonitorServiceDisableTest() {
-        super(TestSimpleJob.class, -1, Optional.<DataflowJobConfiguration.DataflowType>absent());
+        super(TestSimpleJob.class, -1);
     }
     
     @Test(expected = IOException.class)

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/monitor/MonitorServiceEnableTest.java
Patch:
@@ -17,10 +17,8 @@
 
 package com.dangdang.ddframe.job.lite.internal.monitor;
 
-import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobTest;
-import com.google.common.base.Optional;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -33,7 +31,7 @@ public final class MonitorServiceEnableTest extends AbstractBaseStdJobTest {
     private static final int MONITOR_PORT = 9000;
     
     public MonitorServiceEnableTest() {
-        super(TestSimpleJob.class, MONITOR_PORT, Optional.<DataflowJobConfiguration.DataflowType>absent());
+        super(TestSimpleJob.class, MONITOR_PORT);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -67,7 +67,7 @@ public class SchedulerFacadeTest {
     @Mock
     private ListenerManager listenerManager;
     
-    private final LiteJobConfiguration liteJobConfig = JobConfigurationUtil.createDataflowLiteJobConfiguration(DataflowJobConfiguration.DataflowType.THROUGHPUT);
+    private final LiteJobConfiguration liteJobConfig = JobConfigurationUtil.createDataflowLiteJobConfiguration();
     
     private SchedulerFacade schedulerFacade;
     
@@ -76,7 +76,7 @@ public void setUp() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
         schedulerFacade = new SchedulerFacade(null, liteJobConfig, Collections.<ElasticJobListener>emptyList());
         when(configService.load(true)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
-                TestDataflowJob.class.getCanonicalName(), DataflowJobConfiguration.DataflowType.SEQUENCE, false)).build());
+                TestDataflowJob.class.getCanonicalName(), false)).build());
         ReflectionUtils.setFieldValue(schedulerFacade, "configService", configService);
         ReflectionUtils.setFieldValue(schedulerFacade, "leaderElectionService", leaderElectionService);
         ReflectionUtils.setFieldValue(schedulerFacade, "serverService", serverService);
@@ -95,7 +95,7 @@ public void assertClearPreviousServerStatus() {
     @Test
     public void assertRegisterStartUpInfo() {
         when(configService.load(false)).thenReturn(LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(),
-                TestDataflowJob.class.getCanonicalName(), DataflowJobConfiguration.DataflowType.SEQUENCE, false)).build());
+                TestDataflowJob.class.getCanonicalName(), false)).build());
         schedulerFacade.registerStartUpInfo(liteJobConfig);
         verify(listenerManager).startAllListeners();
         verify(leaderElectionService).leaderForceElection();

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/util/JobConfigurationUtil.java
Patch:
@@ -52,8 +52,8 @@ public static LiteJobConfiguration createSimpleLiteJobConfiguration(final boolea
                 .disabled(disabled).overwrite(overwrite).build();
     }
     
-    public static LiteJobConfiguration createDataflowLiteJobConfiguration(final DataflowJobConfiguration.DataflowType dataflowType) {
-        return LiteJobConfiguration.newBuilder(new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(), 
-                DataflowJob.class.getCanonicalName(), dataflowType, false)).build();
+    public static LiteJobConfiguration createDataflowLiteJobConfiguration() {
+        return LiteJobConfiguration.newBuilder(
+                new DataflowJobConfiguration(JobCoreConfiguration.newBuilder("test_job", "0/1 * * * * ?", 3).build(), DataflowJob.class.getCanonicalName(), false)).build();
     }
 }

File: elastic-job-lite/elastic-job-lite-lifecycle/elastic-job-lite-lifecycle-core/src/main/java/com/dangdang/ddframe/job/lite/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -76,9 +76,7 @@ private void buildSimpleJobSettings(final String jobName, final JobSettings resu
     } 
     
     private void buildDataflowJobSettings(final JobSettings result, final DataflowJobConfiguration config) {
-        result.setConcurrentDataProcessThreadCount(config.getConcurrentDataProcessThreadCount());
         result.setStreamingProcess(config.isStreamingProcess());
-        result.setDataflowType(config.getDataflowType().name());
     }
     
     private void buildScriptJobSettings(final JobSettings result, final ScriptJobConfiguration config) {

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/dataflow/DataflowJobBeanDefinitionParser.java
Patch:
@@ -39,8 +39,6 @@ protected Class<DataflowJobConfigurationDto> getJobConfigurationDTO() {
     @Override
     protected void setPropertiesValue(final Element element, final BeanDefinitionBuilder factory) {
         factory.addConstructorArgValue(element.getAttribute(CLASS_ATTRIBUTE));
-        factory.addConstructorArgValue(element.getAttribute(DataflowJobBeanDefinitionParserTag.DATAFLOW_TYPE_ATTRIBUTE));
         factory.addConstructorArgValue(element.getAttribute(DataflowJobBeanDefinitionParserTag.STREAMING_PROCESS_ATTRIBUTE));
-        factory.addConstructorArgValue(element.getAttribute(DataflowJobBeanDefinitionParserTag.CONCURRENT_DATA_PROCESS_THREAD_COUNT_ATTRIBUTE));
     }
 }

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/executor/AbstractElasticJobExecutor.java
Patch:
@@ -59,6 +59,7 @@ protected AbstractElasticJobExecutor(final JobFacade jobFacade) {
         jobName = jobRootConfig.getTypeConfig().getCoreConfig().getJobName();
         executorService = ((ExecutorServiceHandler) getHandler(JobProperties.JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER)).createExecutorService();
         jobExceptionHandler = (JobExceptionHandler) getHandler(JobProperties.JobPropertiesEnum.JOB_EXCEPTION_HANDLER);
+        jobEventBus.register(jobRootConfig.getTypeConfig().getCoreConfig().getJobEventConfigs());
     }
     
     private Object getHandler(final JobProperties.JobPropertiesEnum jobPropertiesEnum) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/election/LeaderElectionService.java
Patch:
@@ -77,6 +77,7 @@ public Boolean isLeader() {
         while (!hasLeader() && !serverService.getAvailableServers().isEmpty()) {
             JobEventBus.getInstance().post(new JobTraceEvent(jobName, LogLevel.INFO, "Leader node is electing, waiting for 100 ms"));
             BlockUtils.waitingShortTime();
+            leaderElection();
         }
         return localHostIp.equals(jobNodeStorage.getJobNodeData(ElectionNode.LEADER_HOST));
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/server/JobOperationListenerManager.java
Patch:
@@ -78,9 +78,6 @@ public void stateChanged(final CuratorFramework client, final ConnectionState ne
             if (ConnectionState.LOST == newState) {
                 jobScheduleController.pauseJob();
             } else if (ConnectionState.RECONNECTED == newState) {
-                if (!leaderElectionService.hasLeader()) {
-                    leaderElectionService.leaderElection();
-                }
                 serverService.persistServerOnline(liteJobConfig);
                 executionService.clearRunningInfo(shardingService.getLocalHostShardingItems());
                 if (!serverService.isJobPausedManually()) {

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/executor/AbstractElasticJobExecutor.java
Patch:
@@ -139,7 +139,6 @@ private void execute(final ShardingContext shardingContext, final JobExecutionEv
         } catch (final Throwable cause) {
         //CHECKSTYLE:ON
             jobExecutionEvent.executionFailure(cause);
-            JobEventBus.getInstance().post(jobExecutionEvent);
             jobExceptionHandler.handleException(jobName, cause);
         } finally {
             // TODO 考虑增加作业失败的状态，并且考虑如何处理作业失败的整体回路

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/integrate/AbstractJobSpringIntegrateTest.java
Patch:
@@ -63,7 +63,7 @@ public void assertSpringJobBean() {
     }
     
     private void assertSimpleElasticJobBean() {
-        while (!FooSimpleElasticJob.isCompleted() || null == FooSimpleElasticJob.getJobValue()) {
+        while (!FooSimpleElasticJob.isCompleted()) {
             sleep(100L);
         }
         assertTrue(FooSimpleElasticJob.isCompleted());

File: elastic-job-cloud/elastic-job-cloud-agent/src/main/java/com/dangdang/ddframe/job/cloud/api/internal/JobConfigurationContext.java
Patch:
@@ -48,8 +48,8 @@ class JobConfigurationContext implements JobRootConfiguration {
         jobCoreConfig.getJobProperties().put(JobPropertiesEnum.JOB_EXCEPTION_HANDLER.name(), jobConfigurationMap.get("jobExceptionHandler"));
         
         if (JobType.DATAFLOW.name().equals(jobType)) {
-            boolean isStreaming = Boolean.valueOf(jobConfigurationMap.get("streamingProcess"));
-            jobTypeConfig = new DataflowJobConfiguration(jobCoreConfig, jobClass, DataflowType.SEQUENCE, isStreaming);
+            jobTypeConfig = new DataflowJobConfiguration(jobCoreConfig, jobClass, 
+                    DataflowType.valueOf(jobConfigurationMap.get("dataflowType")), Boolean.valueOf(jobConfigurationMap.get("streamingProcess")));
         } else if (JobType.SIMPLE.name().equals(jobType)) {
             jobTypeConfig = new SimpleJobConfiguration(jobCoreConfig, jobClass);
         } else if (JobType.SCRIPT.name().equals(jobType)) {

File: elastic-job-cloud/elastic-job-cloud-master/src/main/java/com/dangdang/ddframe/job/cloud/mesos/HardwareResource.java
Patch:
@@ -157,6 +157,7 @@ private Map<String, String> buildJobConfigurationContext(final CloudJobConfigura
         result.put("jobExceptionHandler", jobConfig.getTypeConfig().getCoreConfig().getJobProperties().get(JobPropertiesEnum.JOB_EXCEPTION_HANDLER));
         result.put("executorServiceHandler", jobConfig.getTypeConfig().getCoreConfig().getJobProperties().get(JobPropertiesEnum.EXECUTOR_SERVICE_HANDLER));
         if (jobConfig.getTypeConfig() instanceof DataflowJobConfiguration) {
+            result.put("dataflowType", ((DataflowJobConfiguration) jobConfig.getTypeConfig()).getDataflowType().name());
             result.put("streamingProcess", ((DataflowJobConfiguration) jobConfig.getTypeConfig()).isStreamingProcess() + "");
         } else if (jobConfig.getTypeConfig() instanceof ScriptJobConfiguration) {
             result.put("scriptCommandLine", ((ScriptJobConfiguration) jobConfig.getTypeConfig()).getScriptCommandLine());

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/internal/config/JobProperties.java
Patch:
@@ -25,7 +25,6 @@
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -69,7 +68,7 @@ public String get(final JobPropertiesEnum jobPropertiesEnum) {
      * @return 键集合
      */
     public String json() {
-        Map<String, String> jsonMap = new HashMap<>(JobPropertiesEnum.values().length, 1);
+        Map<String, String> jsonMap = new LinkedHashMap<>(JobPropertiesEnum.values().length, 1);
         for (JobPropertiesEnum each : JobPropertiesEnum.values()) {
             jsonMap.put(each.getKey(), get(each));
         }

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/fixture/JsonConstants.java
Patch:
@@ -23,7 +23,7 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class JsonConstants {
     
-    private static final String JOB_PROPS_JSON = "{\"executor_service_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultExecutorServiceHandler\",\"job_exception_handler\":\"%s\"}";
+    private static final String JOB_PROPS_JSON = "{\"job_exception_handler\":\"%s\",\"executor_service_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultExecutorServiceHandler\"}";
     
     // CHECKSTYLE:OFF
     private static final String SIMPLE_JOB_JSON =  "{\"jobName\":\"test_job\",\"jobClass\":\"com.dangdang.ddframe.job.api.fixture.job.TestSimpleJob\",\"jobType\":\"SIMPLE\","

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/config/ConfigurationServiceTest.java
Patch:
@@ -47,8 +47,8 @@ public final class ConfigurationServiceTest {
     
     private String jobConfigJson = "{\"jobName\":\"%s\",\"jobClass\":\"com.dangdang.ddframe.job.cloud.state.fixture.TestSimpleJob\",\"jobType\":\"SIMPLE\",\"cron\":\"0/1 * * * * ?\","
             + "\"shardingTotalCount\":10,\"shardingItemParameters\":\"\",\"jobParameter\":\"\",\"failover\":true,\"misfire\":true,\"description\":\"\","
-            + "\"jobProperties\":{\"executor_service_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultExecutorServiceHandler\","
-            + "\"job_exception_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultJobExceptionHandler\"},\"cpuCount\":1.0,\"memoryMB\":128.0,"
+            + "\"jobProperties\":{\"job_exception_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultJobExceptionHandler\","
+            + "\"executor_service_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultExecutorServiceHandler\"},\"cpuCount\":1.0,\"memoryMB\":128.0,"
             + "\"dockerImageName\":\"dockerImage\",\"appURL\":\"http://localhost/app.jar\"}";
     
     @Test

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/rest/RestfulApiTest.java
Patch:
@@ -62,8 +62,8 @@ public static void tearDown() throws Exception {
     public void assertRegister() throws Exception {
         String jobConfigJson = "{\"jobName\":\"test_job\",\"jobClass\":\"com.dangdang.ddframe.job.cloud.state.fixture.TestSimpleJob\",\"jobType\":\"SIMPLE\",\"cron\":\"0/30 * * * * ?\","
                 + "\"shardingTotalCount\":10,\"shardingItemParameters\":\"\",\"jobParameter\":\"\",\"failover\":true,\"misfire\":true,\"description\":\"\","
-                + "\"jobProperties\":{\"executor_service_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultExecutorServiceHandler\","
-                + "\"job_exception_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultJobExceptionHandler\"},\"cpuCount\":1.0,\"memoryMB\":128.0,\"dockerImageName\":\"dockerImage\","
+                + "\"jobProperties\":{\"job_exception_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultJobExceptionHandler\","
+                + "\"executor_service_handler\":\"com.dangdang.ddframe.job.api.internal.executor.DefaultExecutorServiceHandler\"},\"cpuCount\":1.0,\"memoryMB\":128.0,\"dockerImageName\":\"dockerImage\","
                 + "\"appURL\":\"http://localhost/app.jar\"}";
         when(regCenter.isExisted("/config/test_job")).thenReturn(false);
         assertThat(sentRequest("http://127.0.0.1:19000/job/register", "POST", jobConfigJson), is(204));

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/script/executor/ScriptJobExecutor.java
Patch:
@@ -18,10 +18,10 @@
 package com.dangdang.ddframe.job.api.type.script.executor;
 
 import com.dangdang.ddframe.job.api.ShardingContext;
+import com.dangdang.ddframe.job.api.exception.JobConfigurationException;
 import com.dangdang.ddframe.job.api.internal.executor.AbstractElasticJobExecutor;
 import com.dangdang.ddframe.job.api.internal.executor.JobFacade;
 import com.dangdang.ddframe.job.api.type.script.api.ScriptJobConfiguration;
-import com.dangdang.ddframe.job.exception.JobException;
 import com.google.common.base.Strings;
 import org.apache.commons.exec.CommandLine;
 import org.apache.commons.exec.DefaultExecutor;
@@ -48,7 +48,7 @@ public ScriptJobExecutor(final JobFacade jobFacade) {
     protected void process(final ShardingContext shardingContext) {
         String scriptCommandLine = ((ScriptJobConfiguration) getJobConfig().getTypeConfig()).getScriptCommandLine();
         if (Strings.isNullOrEmpty(scriptCommandLine)) {
-            getJobExceptionHandler().handleException(new JobException("Cannot find script command line for job '{}', job is not executed.", shardingContext.getJobName()));
+            getJobExceptionHandler().handleException(new JobConfigurationException("Cannot find script command line for job '{}', job is not executed.", shardingContext.getJobName()));
             return;
         }
         CommandLine commandLine = CommandLine.parse(scriptCommandLine);

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/AllJobApiTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.api;
 
+import com.dangdang.ddframe.job.api.exception.AllExceptionTests;
 import com.dangdang.ddframe.job.api.type.AllTypeTests;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
@@ -26,7 +27,8 @@
 @SuiteClasses({
         JobCoreConfigurationTest.class, 
         ShardingContextTest.class,
-        AllTypeTests.class
+        AllTypeTests.class,
+        AllExceptionTests.class
     })
 public final class AllJobApiTests {
 }

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/fixture/handler/ThrowJobExceptionHandler.java
Patch:
@@ -18,12 +18,12 @@
 package com.dangdang.ddframe.job.api.fixture.handler;
 
 import com.dangdang.ddframe.job.api.internal.executor.JobExceptionHandler;
-import com.dangdang.ddframe.job.exception.JobException;
+import com.dangdang.ddframe.job.api.exception.JobSystemException;
 
 public final class ThrowJobExceptionHandler implements JobExceptionHandler {
     
     @Override
     public void handleException(final Throwable cause) {
-        throw new JobException(cause);
+        throw new JobSystemException(cause);
     }
 }

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/script/executor/ScriptJobExecutorTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.dangdang.ddframe.job.api.fixture.config.TestScriptJobConfiguration;
 import com.dangdang.ddframe.job.api.internal.executor.JobFacade;
 import com.dangdang.ddframe.job.api.type.ElasticJobAssert;
-import com.dangdang.ddframe.job.exception.JobException;
+import com.dangdang.ddframe.job.api.exception.JobSystemException;
 import org.apache.commons.exec.CommandLine;
 import org.apache.commons.exec.Executor;
 import org.junit.Before;
@@ -52,7 +52,7 @@ public void setUp() throws NoSuchFieldException {
         ElasticJobAssert.prepareForIsNotMisfire(jobFacade, ElasticJobAssert.getShardingContext());
     }
     
-    @Test(expected = JobException.class)
+    @Test(expected = JobSystemException.class)
     public void assertExecuteWhenScriptCommandLineIsEmpty() throws IOException, NoSuchFieldException {
         when(jobFacade.loadJobConfiguration(true)).thenReturn(new TestScriptJobConfiguration(""));
         scriptJobExecutor = new ScriptJobExecutor(jobFacade);
@@ -62,7 +62,7 @@ public void assertExecuteWhenScriptCommandLineIsEmpty() throws IOException, NoSu
     }
     
     @SuppressWarnings("unchecked")
-    @Test(expected = JobException.class)
+    @Test(expected = JobSystemException.class)
     public void assertExecuteWhenExecuteFailure() throws IOException, NoSuchFieldException {
         when(jobFacade.loadJobConfiguration(true)).thenReturn(new TestScriptJobConfiguration("not_exists_file"));
         scriptJobExecutor = new ScriptJobExecutor(jobFacade);

File: elastic-job-cloud/elastic-job-cloud-agent/src/main/java/com/dangdang/ddframe/job/cloud/api/CloudJobFacade.java
Patch:
@@ -20,6 +20,7 @@
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.internal.executor.JobFacade;
+import com.dangdang.ddframe.job.api.exception.JobExecutionEnvironmentException;
 import lombok.RequiredArgsConstructor;
 
 import java.util.Collection;
@@ -41,7 +42,7 @@ public JobConfiguration loadJobConfiguration(final boolean fromCache) {
     }
     
     @Override
-    public void checkMaxTimeDiffSecondsTolerable() {
+    public void checkJobExecutionEnvironment() throws JobExecutionEnvironmentException {
     }
     
     @Override

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/JobScheduler.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.lite.api;
 
 import com.dangdang.ddframe.job.api.internal.executor.JobFacade;
-import com.dangdang.ddframe.job.exception.JobException;
+import com.dangdang.ddframe.job.api.exception.JobSystemException;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.lite.internal.executor.JobExecutor;
@@ -71,7 +71,7 @@ public void init() {
                     initializeScheduler(jobDetail.getKey().toString()), jobDetail, jobExecutor.getSchedulerFacade(), Joiner.on("_").join(jobExecutor.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX));
             jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().loadJobConfiguration().getTypeConfig().getCoreConfig().getCron());
         } catch (final SchedulerException ex) {
-            throw new JobException(ex);
+            throw new JobSystemException(ex);
         }
         JobRegistry.getInstance().addJobScheduleController(jobExecutor.getJobName(), jobScheduleController);
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/LiteJob.java
Patch:
@@ -18,14 +18,14 @@
 package com.dangdang.ddframe.job.lite.api;
 
 import com.dangdang.ddframe.job.api.ElasticJob;
+import com.dangdang.ddframe.job.api.exception.JobConfigurationException;
 import com.dangdang.ddframe.job.api.internal.executor.AbstractElasticJobExecutor;
 import com.dangdang.ddframe.job.api.internal.executor.JobFacade;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJob;
 import com.dangdang.ddframe.job.api.type.dataflow.executor.DataflowJobExecutor;
 import com.dangdang.ddframe.job.api.type.script.executor.ScriptJobExecutor;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJob;
 import com.dangdang.ddframe.job.api.type.simple.executor.SimpleJobExecutor;
-import com.dangdang.ddframe.job.exception.JobException;
 import lombok.Setter;
 import org.quartz.Job;
 import org.quartz.JobExecutionContext;
@@ -56,7 +56,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept
         } else if (elasticJob instanceof DataflowJob) {
             elasticJobExecutor = new DataflowJobExecutor((DataflowJob<Object>) elasticJob, jobFacade);
         } else {
-            throw new JobException("Cannot support job type '%s'", elasticJob.getClass());
+            throw new JobConfigurationException("Cannot support job type '%s'", elasticJob.getClass());
         }
         elasticJobExecutor.execute();
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/executor/JobExecutor.java
Patch:
@@ -18,8 +18,8 @@
 package com.dangdang.ddframe.job.lite.internal.executor;
 
 import com.dangdang.ddframe.job.api.ElasticJob;
+import com.dangdang.ddframe.job.api.exception.JobConfigurationException;
 import com.dangdang.ddframe.job.api.type.script.api.ScriptJob;
-import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.listener.AbstractDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;
@@ -79,7 +79,7 @@ private ElasticJob createElasticJob(final LiteJobConfiguration liteJobConfig) {
         try {
             result = liteJobConfig.getTypeConfig().getJobClass().newInstance();
         } catch (final InstantiationException | IllegalAccessException ex) {
-            throw new JobException(ex);
+            throw new JobConfigurationException("Cannot create elastic job for class '%s', message details are: '%s'", ex.getMessage());
         }
         return result;
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -20,6 +20,7 @@
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.internal.executor.JobFacade;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
+import com.dangdang.ddframe.job.api.exception.JobExecutionEnvironmentException;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.lite.internal.config.ConfigurationService;
@@ -70,7 +71,7 @@ public LiteJobConfiguration loadJobConfiguration(final boolean fromCache) {
     }
     
     @Override
-    public void checkMaxTimeDiffSecondsTolerable() {
+    public void checkJobExecutionEnvironment() throws JobExecutionEnvironmentException {
         configService.checkMaxTimeDiffSecondsTolerable();
     }
     

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/storage/JobNodeStorage.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.storage;
 
-import com.dangdang.ddframe.job.exception.JobException;
+import com.dangdang.ddframe.job.api.exception.JobSystemException;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.dangdang.ddframe.reg.exception.RegExceptionHandler;
 import org.apache.curator.framework.CuratorFramework;
@@ -199,7 +199,7 @@ private void handleException(final Exception ex) {
         if (ex instanceof InterruptedException) {
             Thread.currentThread().interrupt();
         } else {
-            throw new JobException(ex);
+            throw new JobSystemException(ex);
         }
     }
     

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/api/listener/DistributeOnceElasticJobListenerTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.lite.api.listener;
 
 import com.dangdang.ddframe.job.api.ShardingContext;
-import com.dangdang.ddframe.job.exception.JobTimeoutException;
+import com.dangdang.ddframe.job.api.exception.JobSystemException;
 import com.dangdang.ddframe.job.lite.api.listener.fixture.ElasticJobListenerCaller;
 import com.dangdang.ddframe.job.lite.api.listener.fixture.TestDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.lite.internal.guarantee.GuaranteeService;
@@ -78,7 +78,7 @@ public void assertBeforeJobExecutedWhenIsNotAllStartedAndNotTimeout() {
         verify(guaranteeService, times(0)).clearAllStartedInfo();
     }
     
-    @Test(expected = JobTimeoutException.class)
+    @Test(expected = JobSystemException.class)
     public void assertBeforeJobExecutedWhenIsNotAllStartedAndTimeout() {
         when(guaranteeService.isAllStarted()).thenReturn(false);
         when(timeService.getCurrentMillis()).thenReturn(0L, 2L);
@@ -105,7 +105,7 @@ public void assertAfterJobExecutedWhenIsAllCompletedAndNotTimeout() {
         verify(guaranteeService, times(0)).clearAllCompletedInfo();
     }
     
-    @Test(expected = JobTimeoutException.class)
+    @Test(expected = JobSystemException.class)
     public void assertAfterJobExecutedWhenIsAllCompletedAndTimeout() {
         when(guaranteeService.isAllCompleted()).thenReturn(false);
         when(timeService.getCurrentMillis()).thenReturn(0L, 2L);

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/fixture/dataflow/throughput/StreamingThroughputDataflowElasticJobForExecuteThrowsException.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJob;
-import com.dangdang.ddframe.job.exception.JobException;
+import com.dangdang.ddframe.job.api.exception.JobSystemException;
 import lombok.Getter;
 
 import java.util.Collections;
@@ -41,7 +41,7 @@ public List<String> fetchData(final ShardingContext context) {
     @Override
     public void processData(final ShardingContext context, final List<String> data) {
         completed = true;
-        throw new JobException("");
+        throw new JobSystemException("I want an error.");
     }
     
     public static void reset() {

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/LiteJobFacadeTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.exception.JobExecutionEnvironmentException;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.lite.api.listener.fixture.ElasticJobListenerCaller;
@@ -94,8 +95,8 @@ public void assertLoad() {
     }
     
     @Test
-    public void assertCheckMaxTimeDiffSecondsTolerable() {
-        liteJobFacade.checkMaxTimeDiffSecondsTolerable();
+    public void assertCheckMaxTimeDiffSecondsTolerable() throws JobExecutionEnvironmentException {
+        liteJobFacade.checkJobExecutionEnvironment();
         verify(configService).checkMaxTimeDiffSecondsTolerable();
     }
     

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/config/JobConfiguration.java
Patch:
@@ -29,5 +29,5 @@ public interface JobConfiguration {
      * 
      * @return 作业类型配置
      */
-    JobTypeConfiguration getJobTypeConfig();
+    JobTypeConfiguration getTypeConfig();
 }

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/dataflow/executor/DataflowJobExecutor.java
Patch:
@@ -54,7 +54,7 @@ public DataflowJobExecutor(final DataflowJob<Object> dataflowJob, final JobFacad
     
     @Override
     protected void process(final ShardingContext shardingContext) {
-        DataflowJobConfiguration jobConfig = (DataflowJobConfiguration) getJobFacade().loadJobConfiguration().getJobTypeConfig();
+        DataflowJobConfiguration jobConfig = (DataflowJobConfiguration) getJobFacade().loadJobConfiguration().getTypeConfig();
         if (DataflowJobConfiguration.DataflowType.THROUGHPUT == jobConfig.getDataflowType()) {
             if (jobConfig.isStreamingProcess()) {
                 executeThroughputStreamingJob(jobConfig.getConcurrentDataProcessThreadCount(), shardingContext);

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/script/executor/ScriptJobExecutor.java
Patch:
@@ -48,7 +48,7 @@ public ScriptJobExecutor(final JobFacade jobFacade) {
     
     @Override
     protected void process(final ShardingContext shardingContext) {
-        String scriptCommandLine = ((ScriptJobConfiguration) getJobFacade().loadJobConfiguration().getJobTypeConfig()).getScriptCommandLine();
+        String scriptCommandLine = ((ScriptJobConfiguration) getJobFacade().loadJobConfiguration().getTypeConfig()).getScriptCommandLine();
         if (Strings.isNullOrEmpty(scriptCommandLine)) {
             handleException(new JobException("Cannot find script command line for job '{}', job is not executed.", shardingContext.getJobName()));
             return;

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/fixture/TestFinalDataflowJobConfiguration.java
Patch:
@@ -34,7 +34,7 @@ public final class TestFinalDataflowJobConfiguration implements JobConfiguration
     private final int concurrentDataProcessThreadCount;
     
     @Override
-    public JobTypeConfiguration getJobTypeConfig() {
+    public JobTypeConfiguration getTypeConfig() {
         return new DataflowJobConfiguration(
                 JobCoreConfiguration.newBuilder(ElasticJobAssert.JOB_NAME, "0/1 * * * * * ?", 10).build(), TestDataflowJob.class, dataflowType, streamingProcess, concurrentDataProcessThreadCount); 
     }

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/fixture/TestFinalScriptJobConfiguration.java
Patch:
@@ -30,7 +30,7 @@ public final class TestFinalScriptJobConfiguration implements JobConfiguration {
     private final String scriptCommandLine;
     
     @Override
-    public JobTypeConfiguration getJobTypeConfig() {
+    public JobTypeConfiguration getTypeConfig() {
         return new ScriptJobConfiguration(JobCoreConfiguration.newBuilder(ElasticJobAssert.JOB_NAME, "0/1 * * * * * ?", 10).build(), scriptCommandLine); 
     }
 }

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/fixture/TestFinalSimpleJobConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 public final class TestFinalSimpleJobConfiguration implements JobConfiguration {
     
     @Override
-    public JobTypeConfiguration getJobTypeConfig() {
+    public JobTypeConfiguration getTypeConfig() {
         return new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(ElasticJobAssert.JOB_NAME, "0/1 * * * * * ?", 10).build(), TestSimpleJob.class); 
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/JobScheduler.java
Patch:
@@ -69,7 +69,7 @@ public void init() {
         try {
             jobScheduleController = new JobScheduleController(
                     initializeScheduler(jobDetail.getKey().toString()), jobDetail, jobExecutor.getSchedulerFacade(), Joiner.on("_").join(jobExecutor.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX));
-            jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().loadJobConfiguration().getJobTypeConfig().getCoreConfig().getCron());
+            jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().loadJobConfiguration().getTypeConfig().getCoreConfig().getCron());
         } catch (final SchedulerException ex) {
             throw new JobException(ex);
         }
@@ -89,7 +89,7 @@ private Properties getBaseQuartzProperties(final String jobName) {
         result.put("org.quartz.threadPool.class", org.quartz.simpl.SimpleThreadPool.class.getName());
         result.put("org.quartz.threadPool.threadCount", "1");
         result.put("org.quartz.scheduler.instanceName", Joiner.on("_").join(jobName, SCHEDULER_INSTANCE_NAME_SUFFIX));
-        if (!jobExecutor.getSchedulerFacade().loadJobConfiguration().getJobTypeConfig().getCoreConfig().isMisfire()) {
+        if (!jobExecutor.getSchedulerFacade().loadJobConfiguration().getTypeConfig().getCoreConfig().isMisfire()) {
             result.put("org.quartz.jobStore.misfireThreshold", "1");
         }
         prepareEnvironments(result);

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/config/ConfigurationListenerManager.java
Patch:
@@ -57,7 +57,7 @@ protected void dataChanged(final CuratorFramework client, final TreeCacheEvent e
                 JobScheduleController jobScheduler = JobRegistry.getInstance().getJobScheduleController(jobName);
                 if (null != jobScheduler) {
                     jobScheduler.rescheduleJob(
-                            LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getJobTypeConfig().getCoreConfig().getCron());
+                            LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getTypeConfig().getCoreConfig().getCron());
                 }
             }
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionContextService.java
Patch:
@@ -57,16 +57,16 @@ public ShardingContext getJobShardingContext(final List<Integer> shardingItems)
         LiteJobConfiguration liteJobConfig = configService.load();
         removeRunningIfMonitorExecution(liteJobConfig.isMonitorExecution(), shardingItems);
         if (shardingItems.isEmpty()) {
-            return new ShardingContext(liteJobConfig.getJobName(), liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), 
-                    liteJobConfig.getJobTypeConfig().getCoreConfig().getJobParameter(), Collections.<ShardingContext.ShardingItem>emptyList());
+            return new ShardingContext(liteJobConfig.getJobName(), liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount(), 
+                    liteJobConfig.getTypeConfig().getCoreConfig().getJobParameter(), Collections.<ShardingContext.ShardingItem>emptyList());
         }
         Map<Integer, String> shardingItemParameterMap = configService.getShardingItemParameters();
         List<ShardingContext.ShardingItem> shardingItemList = new ArrayList<>(shardingItems.size());
         for (int each : shardingItems) {
             shardingItemList.add(new ShardingContext.ShardingItem(each, shardingItemParameterMap.get(each)));
         }
         return new ShardingContext(liteJobConfig.getJobName(), 
-                liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), liteJobConfig.getJobTypeConfig().getCoreConfig().getJobParameter(), shardingItemList);
+                liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount(), liteJobConfig.getTypeConfig().getCoreConfig().getJobParameter(), shardingItemList);
     }
     
     private void removeRunningIfMonitorExecution(final boolean monitorExecution, final List<Integer> shardingItems) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionService.java
Patch:
@@ -110,7 +110,7 @@ public void cleanPreviousExecutionInfo() {
     }
     
     private void fixExecutionInfo(final List<Integer> items) {
-        int newShardingTotalCount = configService.load().getJobTypeConfig().getCoreConfig().getShardingTotalCount();
+        int newShardingTotalCount = configService.load().getTypeConfig().getCoreConfig().getShardingTotalCount();
         int currentShardingTotalCount = items.size();
         if (newShardingTotalCount > currentShardingTotalCount) {
             for (int i = currentShardingTotalCount; i < newShardingTotalCount; i++) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/executor/JobExecutor.java
Patch:
@@ -69,12 +69,12 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
     
     private ElasticJob createElasticJob(final LiteJobConfiguration liteJobConfig) {
         // TODO 代码需要梳理
-        if (liteJobConfig.getJobTypeConfig().getJobClass() == ScriptJob.class) {
+        if (liteJobConfig.getTypeConfig().getJobClass() == ScriptJob.class) {
             return null;
         }
         ElasticJob result;
         try {
-            result = liteJobConfig.getJobTypeConfig().getJobClass().newInstance();
+            result = liteJobConfig.getTypeConfig().getJobClass().newInstance();
         } catch (final InstantiationException | IllegalAccessException ex) {
             throw new JobException(ex);
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/failover/FailoverListenerManager.java
Patch:
@@ -106,7 +106,7 @@ class FailoverSettingsChangedJobListener extends AbstractJobListener {
         @Override
         protected void dataChanged(final CuratorFramework client, final TreeCacheEvent event, final String path) {
             if (configNode.isConfigPath(path) && Type.NODE_UPDATED == event.getType()
-                    && !LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getJobTypeConfig().getCoreConfig().isFailover()) {
+                    && !LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getTypeConfig().getCoreConfig().isFailover()) {
                 failoverService.removeFailoverInfo();
             }
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/guarantee/GuaranteeService.java
Patch:
@@ -58,7 +58,7 @@ public void registerStart(final Collection<Integer> shardingItems) {
      */
     public boolean isAllStarted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.STARTED_ROOT)
-                && configService.load().getJobTypeConfig().getCoreConfig().getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
+                && configService.load().getTypeConfig().getCoreConfig().getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
     }
     
     /**
@@ -86,7 +86,7 @@ public void registerComplete(final Collection<Integer> shardingItems) {
      */
     public boolean isAllCompleted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT)
-                && configService.load().getJobTypeConfig().getCoreConfig().getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
+                && configService.load().getTypeConfig().getCoreConfig().getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/schedule/JobScheduleController.java
Patch:
@@ -81,7 +81,7 @@ public void rescheduleJob(final String cron) {
     
     private CronTrigger createTrigger(final String cronExpression) {
         CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpression);
-        if (schedulerFacade.loadJobConfiguration().getJobTypeConfig().getCoreConfig().isMisfire()) {
+        if (schedulerFacade.loadJobConfiguration().getTypeConfig().getCoreConfig().isMisfire()) {
             cronScheduleBuilder = cronScheduleBuilder.withMisfireHandlingInstructionFireAndProceed();
         } else {
             cronScheduleBuilder = cronScheduleBuilder.withMisfireHandlingInstructionDoNothing();

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/schedule/LiteJobFacade.java
Patch:
@@ -123,14 +123,14 @@ public void clearMisfire(final Collection<Integer> shardingItems) {
     
     @Override
     public boolean isExecuteMisfired(final Collection<Integer> shardingItems) {
-        return isEligibleForJobRunning() && configService.load().getJobTypeConfig().getCoreConfig().isMisfire() && !executionService.getMisfiredJobItems(shardingItems).isEmpty();
+        return isEligibleForJobRunning() && configService.load().getTypeConfig().getCoreConfig().isMisfire() && !executionService.getMisfiredJobItems(shardingItems).isEmpty();
     }
     
     @Override
     public boolean isEligibleForJobRunning() {
         LiteJobConfiguration liteJobConfig = configService.load();
-        if (liteJobConfig.getJobTypeConfig() instanceof DataflowJobConfiguration) {
-            return !serverService.isJobPausedManually() && !shardingService.isNeedSharding() && ((DataflowJobConfiguration) liteJobConfig.getJobTypeConfig()).isStreamingProcess();    
+        if (liteJobConfig.getTypeConfig() instanceof DataflowJobConfiguration) {
+            return !serverService.isJobPausedManually() && !shardingService.isNeedSharding() && ((DataflowJobConfiguration) liteJobConfig.getTypeConfig()).isStreamingProcess();    
         }
         return !serverService.isJobPausedManually() && !shardingService.isNeedSharding();
     }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingService.java
Patch:
@@ -109,7 +109,7 @@ public void shardingIfNecessary() {
         clearShardingInfo();
         LiteJobConfiguration liteJobConfig = configService.load();
         JobShardingStrategy jobShardingStrategy = JobShardingStrategyFactory.getStrategy(liteJobConfig.getJobShardingStrategyClass());
-        JobShardingStrategyOption option = new JobShardingStrategyOption(jobName, liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), configService.getShardingItemParameters());
+        JobShardingStrategyOption option = new JobShardingStrategyOption(jobName, liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount(), configService.getShardingItemParameters());
         jobNodeStorage.executeInTransaction(new PersistShardingInfoTransactionExecutionCallback(jobShardingStrategy.sharding(serverService.getAvailableServers(), option)));
         log.debug("Elastic job: sharding completed.");
     }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -179,9 +179,9 @@ protected void assertRegCenterCommonInfoWithDisabled() {
     
     private void assertRegCenterCommonInfo() {
         LiteJobConfiguration liteJobConfig = LiteJobConfigurationGsonFactory.getGson().fromJson(regCenter.get("/" + jobName + "/config"), LiteJobConfiguration.class);
-        assertThat(liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), is(3));
-        assertThat(liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingItemParameters(), is("0=A,1=B,2=C"));
-        assertThat(liteJobConfig.getJobTypeConfig().getCoreConfig().getCron(), is("0/1 * * * * ?"));
+        assertThat(liteJobConfig.getTypeConfig().getCoreConfig().getShardingTotalCount(), is(3));
+        assertThat(liteJobConfig.getTypeConfig().getCoreConfig().getShardingItemParameters(), is("0=A,1=B,2=C"));
+        assertThat(liteJobConfig.getTypeConfig().getCoreConfig().getCron(), is("0/1 * * * * ?"));
         assertThat(regCenter.get("/" + jobName + "/servers/" + localHostService.getIp() + "/hostName"), is(localHostService.getHostName()));
         if (disabled) {
             assertTrue(regCenter.isExisted("/" + jobName + "/servers/" + localHostService.getIp() + "/disabled"));

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/sequence/OneOffSequenceDataflowElasticJobTest.java
Patch:
@@ -44,8 +44,8 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig().getCoreConfig(), "misfire", false);
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig().getCoreConfig(), "misfire", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", false);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/sequence/StreamingSequenceDataflowElasticJobTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/OneOffThroughputDataflowElasticJobTest.java
Patch:
@@ -44,8 +44,8 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig().getCoreConfig(), "misfire", false);
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig().getCoreConfig(), "misfire", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", false);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -45,7 +45,7 @@ public void reset() {
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
         JobConfigurationUtil.setFieldValue(liteJobConfig, "monitorExecution", false);
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForPausedTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/script/ScriptElasticJobTest.java
Patch:
@@ -43,8 +43,8 @@ public ScriptElasticJobTest() {
     public void assertJobInit() throws IOException {
         ScriptElasticJobUtil.buildScriptCommandLine();
         WaitingUtils.waitingShortTime();
-        String scriptCommandLine = ((ScriptJobConfiguration) getLiteJobConfig().getJobTypeConfig()).getScriptCommandLine();
+        String scriptCommandLine = ((ScriptJobConfiguration) getLiteJobConfig().getTypeConfig()).getScriptCommandLine();
         LiteJobConfiguration liteJobConfig = LiteJobConfigurationGsonFactory.getGson().fromJson(getRegCenter().get("/" + getJobName() + "/config"), LiteJobConfiguration.class);
-        assertThat(((ScriptJobConfiguration) liteJobConfig.getJobTypeConfig()).getScriptCommandLine(), is(scriptCommandLine));
+        assertThat(((ScriptJobConfiguration) liteJobConfig.getTypeConfig()).getScriptCommandLine(), is(scriptCommandLine));
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/config/ConfigurationServiceTest.java
Patch:
@@ -63,8 +63,8 @@ public void assertLoad() {
                         + "\"shardingTotalCount\":3,\"scriptCommandLine\":\"test.sh\"}");
         LiteJobConfiguration actual = configService.load();
         assertThat(actual.getJobName(), is("test_job"));
-        assertThat(actual.getJobTypeConfig().getCoreConfig().getCron(), is("0/1 * * * * ?"));
-        assertThat(actual.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), is(3));
+        assertThat(actual.getTypeConfig().getCoreConfig().getCron(), is("0/1 * * * * ?"));
+        assertThat(actual.getTypeConfig().getCoreConfig().getShardingTotalCount(), is(3));
     }
     
     @Test(expected = JobConflictException.class)

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/executor/JobExecutorTest.java
Patch:
@@ -66,7 +66,7 @@ public void testNew() throws NoSuchFieldException {
         assertNull(ReflectionUtils.getFieldValue(testDistributeOnceElasticJobListener, ReflectionUtils.getFieldWithName(AbstractDistributeOnceElasticJobListener.class, "guaranteeService", false)));
         JobExecutor actualJobExecutor = new JobExecutor(null, liteJobConfig, new TestElasticJobListener(caller), testDistributeOnceElasticJobListener);
         assertNotNull(ReflectionUtils.getFieldValue(testDistributeOnceElasticJobListener, ReflectionUtils.getFieldWithName(AbstractDistributeOnceElasticJobListener.class, "guaranteeService", false)));
-        assertThat(ReflectionUtils.getFieldValue(actualJobExecutor, ReflectionUtils.getFieldWithName(JobExecutor.class, "elasticJob", false)), instanceOf(liteJobConfig.getJobTypeConfig().getJobClass()));
+        assertThat(ReflectionUtils.getFieldValue(actualJobExecutor, ReflectionUtils.getFieldWithName(JobExecutor.class, "elasticJob", false)), instanceOf(liteJobConfig.getTypeConfig().getJobClass()));
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-lifecycle/elastic-job-lite-lifecycle-core/src/main/java/com/dangdang/ddframe/job/lite/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -52,10 +52,10 @@ public Collection<JobBriefInfo> getAllJobsBriefInfo() {
             JobBriefInfo jobBriefInfo = new JobBriefInfo();
             jobBriefInfo.setJobName(each);
             LiteJobConfiguration liteJobConfig = LiteJobConfigurationGsonFactory.getGson().fromJson(registryCenter.get(jobNodePath.getConfigNodePath()), LiteJobConfiguration.class);
-            jobBriefInfo.setJobType(liteJobConfig.getJobTypeConfig().getJobType().name());
-            jobBriefInfo.setDescription(liteJobConfig.getJobTypeConfig().getCoreConfig().getDescription());
+            jobBriefInfo.setJobType(liteJobConfig.getTypeConfig().getJobType().name());
+            jobBriefInfo.setDescription(liteJobConfig.getTypeConfig().getCoreConfig().getDescription());
             jobBriefInfo.setStatus(getJobStatus(each));
-            jobBriefInfo.setCron(liteJobConfig.getJobTypeConfig().getCoreConfig().getCron());
+            jobBriefInfo.setCron(liteJobConfig.getTypeConfig().getCoreConfig().getCron());
             result.add(jobBriefInfo);
         }
         Collections.sort(result);

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/script/ScriptJobConfigurationDtoTest.java
Patch:
@@ -30,6 +30,6 @@ public final class ScriptJobConfigurationDtoTest {
     public void assertToLiteJobConfiguration() {
         LiteJobConfiguration actual = new ScriptJobConfigurationDto("scriptJob", "0/1 * * * * ?", 10, "test.sh").toLiteJobConfiguration();
         assertThat(actual.getJobName(), is("scriptJob"));
-        assertThat(((ScriptJobConfiguration) actual.getJobTypeConfig()).getScriptCommandLine(), is("test.sh"));
+        assertThat(((ScriptJobConfiguration) actual.getTypeConfig()).getScriptCommandLine(), is("test.sh"));
     }
 }

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/config/JobCoreConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.api;
+package com.dangdang.ddframe.job.api.config;
 
 import com.dangdang.ddframe.job.api.internal.config.JobProperties;
 import com.google.common.base.Preconditions;

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/internal/executor/JobFacade.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.api.internal.executor;
 
 import com.dangdang.ddframe.job.api.ShardingContext;
-import com.dangdang.ddframe.job.api.internal.config.FinalJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 
 import java.util.Collection;
 
@@ -34,7 +34,7 @@ public interface JobFacade {
      * 
      * @return 作业配置
      */
-    FinalJobConfiguration loadFinalJobConfiguration();
+    JobConfiguration loadJobConfiguration();
     
     /**
      * 检查本机与注册中心的时间误差秒数是否在允许范围.

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/dataflow/api/DataflowJobConfiguration.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.api.type.dataflow.api;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobTypeConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.JobType;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
@@ -33,7 +33,7 @@
 @AllArgsConstructor
 @RequiredArgsConstructor
 @Getter
-public final class DataflowJobConfiguration implements JobConfiguration {
+public final class DataflowJobConfiguration implements JobTypeConfiguration {
     
     private final JobCoreConfiguration coreConfig;
     

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/dataflow/executor/DataflowJobExecutor.java
Patch:
@@ -54,7 +54,7 @@ public DataflowJobExecutor(final DataflowJob<Object> dataflowJob, final JobFacad
     
     @Override
     protected void process(final ShardingContext shardingContext) {
-        DataflowJobConfiguration jobConfig = (DataflowJobConfiguration) getJobFacade().loadFinalJobConfiguration().getJobConfig();
+        DataflowJobConfiguration jobConfig = (DataflowJobConfiguration) getJobFacade().loadJobConfiguration().getJobTypeConfig();
         if (DataflowJobConfiguration.DataflowType.THROUGHPUT == jobConfig.getDataflowType()) {
             if (jobConfig.isStreamingProcess()) {
                 executeThroughputStreamingJob(jobConfig.getConcurrentDataProcessThreadCount(), shardingContext);

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/script/api/ScriptJobConfiguration.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.api.type.script.api;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobTypeConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.JobType;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
@@ -31,7 +31,7 @@
  */
 @RequiredArgsConstructor
 @Getter
-public final class ScriptJobConfiguration implements JobConfiguration {
+public final class ScriptJobConfiguration implements JobTypeConfiguration {
     
     private final JobCoreConfiguration coreConfig;
     

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/script/executor/ScriptJobExecutor.java
Patch:
@@ -48,7 +48,7 @@ public ScriptJobExecutor(final JobFacade jobFacade) {
     
     @Override
     protected void process(final ShardingContext shardingContext) {
-        String scriptCommandLine = ((ScriptJobConfiguration) getJobFacade().loadFinalJobConfiguration().getJobConfig()).getScriptCommandLine();
+        String scriptCommandLine = ((ScriptJobConfiguration) getJobFacade().loadJobConfiguration().getJobTypeConfig()).getScriptCommandLine();
         if (Strings.isNullOrEmpty(scriptCommandLine)) {
             handleException(new JobException("Cannot find script command line for job '{}', job is not executed.", shardingContext.getJobName()));
             return;

File: elastic-job-api/src/main/java/com/dangdang/ddframe/job/api/type/simple/api/SimpleJobConfiguration.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.api.type.simple.api;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobTypeConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.JobType;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
@@ -31,7 +31,7 @@
  */
 @AllArgsConstructor
 @Getter
-public final class SimpleJobConfiguration implements JobConfiguration {
+public final class SimpleJobConfiguration implements JobTypeConfiguration {
     
     private final JobCoreConfiguration coreConfig;
     

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/JobCoreConfigurationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.api;
 
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import org.junit.Test;
 
 import static org.hamcrest.core.Is.is;

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/dataflow/executor/AbstractDataflowJobExecutorTest.java
Patch:
@@ -71,7 +71,7 @@ public abstract class AbstractDataflowJobExecutorTest {
     @Before
     public void setUp() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
-        when(jobFacade.loadFinalJobConfiguration()).thenReturn(new TestFinalDataflowJobConfiguration(dataflowType, streamingProcess, concurrentDataProcessThreadCount));
+        when(jobFacade.loadJobConfiguration()).thenReturn(new TestFinalDataflowJobConfiguration(dataflowType, streamingProcess, concurrentDataProcessThreadCount));
         shardingContext = ElasticJobAssert.getShardingContext();
         when(jobFacade.getShardingContext()).thenReturn(shardingContext);
         dataflowJobExecutor = new DataflowJobExecutor(new TestDataflowJob(jobCaller), jobFacade);
@@ -88,7 +88,7 @@ public void handleException(final Throwable cause) {
     @After
     public void tearDown() throws NoSuchFieldException {
         assertThat((ExecutorService) ReflectionUtils.getFieldValue(dataflowJobExecutor, DataflowJobExecutor.class.getDeclaredField("executorService")), is(executorService));
-        verify(jobFacade).loadFinalJobConfiguration();
+        verify(jobFacade).loadJobConfiguration();
         ElasticJobAssert.verifyForIsNotMisfire(jobFacade, shardingContext);
     }
     

File: elastic-job-api/src/test/java/com/dangdang/ddframe/job/api/type/simple/executor/SimpleJobExecutorTest.java
Patch:
@@ -51,7 +51,7 @@ public final class SimpleJobExecutorTest {
     @Before
     public void setUp() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
-        when(jobFacade.loadFinalJobConfiguration()).thenReturn(new TestFinalSimpleJobConfiguration());
+        when(jobFacade.loadJobConfiguration()).thenReturn(new TestFinalSimpleJobConfiguration());
         simpleJobExecutor = new SimpleJobExecutor(new TestSimpleJob(jobCaller), jobFacade);
         simpleJobExecutor.setJobExceptionHandler(new JobExceptionHandler() {
             

File: elastic-job-cloud/elastic-job-cloud-agent/src/main/java/com/dangdang/ddframe/job/cloud/api/CloudJobFacade.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.cloud.api;
 
 import com.dangdang.ddframe.job.api.ShardingContext;
-import com.dangdang.ddframe.job.api.internal.config.FinalJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.internal.executor.JobFacade;
 import lombok.RequiredArgsConstructor;
 
@@ -35,7 +35,7 @@ public class CloudJobFacade implements JobFacade {
     private final ShardingContext shardingContext;
     
     @Override
-    public FinalJobConfiguration loadFinalJobConfiguration() {
+    public JobConfiguration loadJobConfiguration() {
         // TODO
         return null;
     }

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/main/JobMain.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.example.elasticjob.core.main;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.script.api.ScriptJobConfiguration;

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/api/JobScheduler.java
Patch:
@@ -69,7 +69,7 @@ public void init() {
         try {
             jobScheduleController = new JobScheduleController(
                     initializeScheduler(jobDetail.getKey().toString()), jobDetail, jobExecutor.getSchedulerFacade(), Joiner.on("_").join(jobExecutor.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX));
-            jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().loadJobConfiguration().getJobConfig().getCoreConfig().getCron());
+            jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().loadJobConfiguration().getJobTypeConfig().getCoreConfig().getCron());
         } catch (final SchedulerException ex) {
             throw new JobException(ex);
         }
@@ -89,7 +89,7 @@ private Properties getBaseQuartzProperties(final String jobName) {
         result.put("org.quartz.threadPool.class", org.quartz.simpl.SimpleThreadPool.class.getName());
         result.put("org.quartz.threadPool.threadCount", "1");
         result.put("org.quartz.scheduler.instanceName", Joiner.on("_").join(jobName, SCHEDULER_INSTANCE_NAME_SUFFIX));
-        if (!jobExecutor.getSchedulerFacade().loadJobConfiguration().getJobConfig().getCoreConfig().isMisfire()) {
+        if (!jobExecutor.getSchedulerFacade().loadJobConfiguration().getJobTypeConfig().getCoreConfig().isMisfire()) {
             result.put("org.quartz.jobStore.misfireThreshold", "1");
         }
         prepareEnvironments(result);

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/config/ConfigurationListenerManager.java
Patch:
@@ -57,7 +57,7 @@ protected void dataChanged(final CuratorFramework client, final TreeCacheEvent e
                 JobScheduleController jobScheduler = JobRegistry.getInstance().getJobScheduleController(jobName);
                 if (null != jobScheduler) {
                     jobScheduler.rescheduleJob(
-                            LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getJobConfig().getCoreConfig().getCron());
+                            LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getJobTypeConfig().getCoreConfig().getCron());
                 }
             }
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionContextService.java
Patch:
@@ -57,16 +57,16 @@ public ShardingContext getJobShardingContext(final List<Integer> shardingItems)
         LiteJobConfiguration liteJobConfig = configService.load();
         removeRunningIfMonitorExecution(liteJobConfig.isMonitorExecution(), shardingItems);
         if (shardingItems.isEmpty()) {
-            return new ShardingContext(liteJobConfig.getJobName(), liteJobConfig.getJobConfig().getCoreConfig().getShardingTotalCount(), 
-                    liteJobConfig.getJobConfig().getCoreConfig().getJobParameter(), Collections.<ShardingContext.ShardingItem>emptyList());
+            return new ShardingContext(liteJobConfig.getJobName(), liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), 
+                    liteJobConfig.getJobTypeConfig().getCoreConfig().getJobParameter(), Collections.<ShardingContext.ShardingItem>emptyList());
         }
         Map<Integer, String> shardingItemParameterMap = configService.getShardingItemParameters();
         List<ShardingContext.ShardingItem> shardingItemList = new ArrayList<>(shardingItems.size());
         for (int each : shardingItems) {
             shardingItemList.add(new ShardingContext.ShardingItem(each, shardingItemParameterMap.get(each)));
         }
         return new ShardingContext(liteJobConfig.getJobName(), 
-                liteJobConfig.getJobConfig().getCoreConfig().getShardingTotalCount(), liteJobConfig.getJobConfig().getCoreConfig().getJobParameter(), shardingItemList);
+                liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), liteJobConfig.getJobTypeConfig().getCoreConfig().getJobParameter(), shardingItemList);
     }
     
     private void removeRunningIfMonitorExecution(final boolean monitorExecution, final List<Integer> shardingItems) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionService.java
Patch:
@@ -110,7 +110,7 @@ public void cleanPreviousExecutionInfo() {
     }
     
     private void fixExecutionInfo(final List<Integer> items) {
-        int newShardingTotalCount = configService.load().getJobConfig().getCoreConfig().getShardingTotalCount();
+        int newShardingTotalCount = configService.load().getJobTypeConfig().getCoreConfig().getShardingTotalCount();
         int currentShardingTotalCount = items.size();
         if (newShardingTotalCount > currentShardingTotalCount) {
             for (int i = currentShardingTotalCount; i < newShardingTotalCount; i++) {

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/executor/JobExecutor.java
Patch:
@@ -69,12 +69,12 @@ private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistry
     
     private ElasticJob createElasticJob(final LiteJobConfiguration liteJobConfig) {
         // TODO 代码需要梳理
-        if (liteJobConfig.getJobConfig().getJobClass() == ScriptJob.class) {
+        if (liteJobConfig.getJobTypeConfig().getJobClass() == ScriptJob.class) {
             return null;
         }
         ElasticJob result;
         try {
-            result = liteJobConfig.getJobConfig().getJobClass().newInstance();
+            result = liteJobConfig.getJobTypeConfig().getJobClass().newInstance();
         } catch (final InstantiationException | IllegalAccessException ex) {
             throw new JobException(ex);
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/failover/FailoverListenerManager.java
Patch:
@@ -106,7 +106,7 @@ class FailoverSettingsChangedJobListener extends AbstractJobListener {
         @Override
         protected void dataChanged(final CuratorFramework client, final TreeCacheEvent event, final String path) {
             if (configNode.isConfigPath(path) && Type.NODE_UPDATED == event.getType()
-                    && !LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getJobConfig().getCoreConfig().isFailover()) {
+                    && !LiteJobConfigurationGsonFactory.getGson().fromJson(new String(event.getData().getData()), LiteJobConfiguration.class).getJobTypeConfig().getCoreConfig().isFailover()) {
                 failoverService.removeFailoverInfo();
             }
         }

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/guarantee/GuaranteeService.java
Patch:
@@ -58,7 +58,7 @@ public void registerStart(final Collection<Integer> shardingItems) {
      */
     public boolean isAllStarted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.STARTED_ROOT)
-                && configService.load().getJobConfig().getCoreConfig().getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
+                && configService.load().getJobTypeConfig().getCoreConfig().getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.STARTED_ROOT).size();
     }
     
     /**
@@ -86,7 +86,7 @@ public void registerComplete(final Collection<Integer> shardingItems) {
      */
     public boolean isAllCompleted() {
         return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT)
-                && configService.load().getJobConfig().getCoreConfig().getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
+                && configService.load().getJobTypeConfig().getCoreConfig().getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
     }
     
     /**

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/schedule/JobScheduleController.java
Patch:
@@ -81,7 +81,7 @@ public void rescheduleJob(final String cron) {
     
     private CronTrigger createTrigger(final String cronExpression) {
         CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(cronExpression);
-        if (schedulerFacade.loadJobConfiguration().getJobConfig().getCoreConfig().isMisfire()) {
+        if (schedulerFacade.loadJobConfiguration().getJobTypeConfig().getCoreConfig().isMisfire()) {
             cronScheduleBuilder = cronScheduleBuilder.withMisfireHandlingInstructionFireAndProceed();
         } else {
             cronScheduleBuilder = cronScheduleBuilder.withMisfireHandlingInstructionDoNothing();

File: elastic-job-lite/elastic-job-lite-core/src/main/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingService.java
Patch:
@@ -109,7 +109,7 @@ public void shardingIfNecessary() {
         clearShardingInfo();
         LiteJobConfiguration liteJobConfig = configService.load();
         JobShardingStrategy jobShardingStrategy = JobShardingStrategyFactory.getStrategy(liteJobConfig.getJobShardingStrategyClass());
-        JobShardingStrategyOption option = new JobShardingStrategyOption(jobName, liteJobConfig.getJobConfig().getCoreConfig().getShardingTotalCount(), configService.getShardingItemParameters());
+        JobShardingStrategyOption option = new JobShardingStrategyOption(jobName, liteJobConfig.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), configService.getShardingItemParameters());
         jobNodeStorage.executeInTransaction(new PersistShardingInfoTransactionExecutionCallback(jobShardingStrategy.sharding(serverService.getAvailableServers(), option)));
         log.debug("Elastic job: sharding completed.");
     }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/api/JobSchedulerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.api;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.listener.fixture.ElasticJobListenerCaller;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/api/config/LiteJobConfigurationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.api.config;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import org.junit.Test;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/sequence/OneOffSequenceDataflowElasticJobTest.java
Patch:
@@ -44,8 +44,8 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig().getCoreConfig(), "misfire", false);
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig().getCoreConfig(), "misfire", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", false);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/sequence/StreamingSequenceDataflowElasticJobTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/OneOffThroughputDataflowElasticJobTest.java
Patch:
@@ -44,8 +44,8 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig().getCoreConfig(), "misfire", false);
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig().getCoreConfig(), "misfire", false);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", false);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForExecuteFailureTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForMultipleThreadsTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForNotMonitorTest.java
Patch:
@@ -45,7 +45,7 @@ public void reset() {
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
         JobConfigurationUtil.setFieldValue(liteJobConfig, "monitorExecution", false);
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobForPausedTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/dataflow/throughput/StreamingThroughputDataflowElasticJobTest.java
Patch:
@@ -44,7 +44,7 @@ public void reset() {
     
     @Override
     protected void setLiteJobConfig(final LiteJobConfiguration liteJobConfig) {
-        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobConfig(), "streamingProcess", true);
+        JobConfigurationUtil.setFieldValue(liteJobConfig.getJobTypeConfig(), "streamingProcess", true);
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/integrate/std/script/ScriptElasticJobTest.java
Patch:
@@ -43,8 +43,8 @@ public ScriptElasticJobTest() {
     public void assertJobInit() throws IOException {
         ScriptElasticJobUtil.buildScriptCommandLine();
         WaitingUtils.waitingShortTime();
-        String scriptCommandLine = ((ScriptJobConfiguration) getLiteJobConfig().getJobConfig()).getScriptCommandLine();
+        String scriptCommandLine = ((ScriptJobConfiguration) getLiteJobConfig().getJobTypeConfig()).getScriptCommandLine();
         LiteJobConfiguration liteJobConfig = LiteJobConfigurationGsonFactory.getGson().fromJson(getRegCenter().get("/" + getJobName() + "/config"), LiteJobConfiguration.class);
-        assertThat(((ScriptJobConfiguration) liteJobConfig.getJobConfig()).getScriptCommandLine(), is(scriptCommandLine));
+        assertThat(((ScriptJobConfiguration) liteJobConfig.getJobTypeConfig()).getScriptCommandLine(), is(scriptCommandLine));
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/config/ConfigurationServiceTest.java
Patch:
@@ -63,8 +63,8 @@ public void assertLoad() {
                         + "\"shardingTotalCount\":3,\"scriptCommandLine\":\"test.sh\"}");
         LiteJobConfiguration actual = configService.load();
         assertThat(actual.getJobName(), is("test_job"));
-        assertThat(actual.getJobConfig().getCoreConfig().getCron(), is("0/1 * * * * ?"));
-        assertThat(actual.getJobConfig().getCoreConfig().getShardingTotalCount(), is(3));
+        assertThat(actual.getJobTypeConfig().getCoreConfig().getCron(), is("0/1 * * * * ?"));
+        assertThat(actual.getJobTypeConfig().getCoreConfig().getShardingTotalCount(), is(3));
     }
     
     @Test(expected = JobConflictException.class)

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionContextServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.execution;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/execution/ExecutionServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.execution;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/executor/JobExecutorTest.java
Patch:
@@ -66,7 +66,7 @@ public void testNew() throws NoSuchFieldException {
         assertNull(ReflectionUtils.getFieldValue(testDistributeOnceElasticJobListener, ReflectionUtils.getFieldWithName(AbstractDistributeOnceElasticJobListener.class, "guaranteeService", false)));
         JobExecutor actualJobExecutor = new JobExecutor(null, liteJobConfig, new TestElasticJobListener(caller), testDistributeOnceElasticJobListener);
         assertNotNull(ReflectionUtils.getFieldValue(testDistributeOnceElasticJobListener, ReflectionUtils.getFieldWithName(AbstractDistributeOnceElasticJobListener.class, "guaranteeService", false)));
-        assertThat(ReflectionUtils.getFieldValue(actualJobExecutor, ReflectionUtils.getFieldWithName(JobExecutor.class, "elasticJob", false)), instanceOf(liteJobConfig.getJobConfig().getJobClass()));
+        assertThat(ReflectionUtils.getFieldValue(actualJobExecutor, ReflectionUtils.getFieldWithName(JobExecutor.class, "elasticJob", false)), instanceOf(liteJobConfig.getJobTypeConfig().getJobClass()));
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/guarantee/GuaranteeServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.guarantee;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/JobScheduleControllerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.schedule;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/LiteJobFacadeTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.schedule;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.ShardingContext;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
@@ -91,7 +91,7 @@ public void setUp() throws NoSuchFieldException {
     public void assertLoad() {
         LiteJobConfiguration expected = LiteJobConfiguration.newBuilder(null).build();
         when(configService.load()).thenReturn(expected);
-        assertThat(liteJobFacade.loadFinalJobConfiguration(), is(expected));
+        assertThat(liteJobFacade.loadJobConfiguration(), is(expected));
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.schedule;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.listener.ElasticJobListener;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/sharding/ShardingServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.internal.sharding;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/util/JobConfigurationUtil.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.lite.util;
 
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJob;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;

File: elastic-job-lite/elastic-job-lite-lifecycle/elastic-job-lite-lifecycle-core/src/main/java/com/dangdang/ddframe/job/lite/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -52,10 +52,10 @@ public Collection<JobBriefInfo> getAllJobsBriefInfo() {
             JobBriefInfo jobBriefInfo = new JobBriefInfo();
             jobBriefInfo.setJobName(each);
             LiteJobConfiguration liteJobConfig = LiteJobConfigurationGsonFactory.getGson().fromJson(registryCenter.get(jobNodePath.getConfigNodePath()), LiteJobConfiguration.class);
-            jobBriefInfo.setJobType(liteJobConfig.getJobConfig().getJobType().name());
-            jobBriefInfo.setDescription(liteJobConfig.getJobConfig().getCoreConfig().getDescription());
+            jobBriefInfo.setJobType(liteJobConfig.getJobTypeConfig().getJobType().name());
+            jobBriefInfo.setDescription(liteJobConfig.getJobTypeConfig().getCoreConfig().getDescription());
             jobBriefInfo.setStatus(getJobStatus(each));
-            jobBriefInfo.setCron(liteJobConfig.getJobConfig().getCoreConfig().getCron());
+            jobBriefInfo.setCron(liteJobConfig.getJobTypeConfig().getCoreConfig().getCron());
             result.add(jobBriefInfo);
         }
         Collections.sort(result);

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/common/AbstractJobConfigurationDto.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.lite.spring.namespace.parser.common;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobTypeConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
@@ -92,5 +92,5 @@ public LiteJobConfiguration toLiteJobConfiguration() {
         return result.build();
     }
     
-    protected abstract JobConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig);
+    protected abstract JobTypeConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig);
 }

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/dataflow/DataflowJobConfigurationDto.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.lite.spring.namespace.parser.dataflow;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobTypeConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJob;
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.lite.spring.namespace.parser.common.AbstractJobConfigurationDto;
@@ -49,7 +49,7 @@ final class DataflowJobConfigurationDto extends AbstractJobConfigurationDto {
     }
     
     @Override
-    protected JobConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig) {
+    protected JobTypeConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig) {
         return null == concurrentDataProcessThreadCount
                 ? new DataflowJobConfiguration(jobCoreConfig, jobClass, dataflowType, null == streamingProcess ? false : streamingProcess)
                 : new DataflowJobConfiguration(jobCoreConfig, jobClass, dataflowType, null == streamingProcess ? false : streamingProcess, concurrentDataProcessThreadCount);

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/script/ScriptJobConfigurationDto.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.lite.spring.namespace.parser.script;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobTypeConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.script.api.ScriptJobConfiguration;
 import com.dangdang.ddframe.job.lite.spring.namespace.parser.common.AbstractJobConfigurationDto;
 import lombok.Setter;
@@ -41,7 +41,7 @@ final class ScriptJobConfigurationDto extends AbstractJobConfigurationDto {
     }
     
     @Override
-    protected JobConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig) {
+    protected JobTypeConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig) {
         return new ScriptJobConfiguration(jobCoreConfig, scriptCommandLine);
     }
 }

File: elastic-job-lite/elastic-job-lite-spring/src/main/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/simple/SimpleJobConfigurationDto.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.lite.spring.namespace.parser.simple;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.api.JobCoreConfiguration;
+import com.dangdang.ddframe.job.api.config.JobTypeConfiguration;
+import com.dangdang.ddframe.job.api.config.JobCoreConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJob;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.lite.spring.namespace.parser.common.AbstractJobConfigurationDto;
@@ -39,7 +39,7 @@ final class SimpleJobConfigurationDto extends AbstractJobConfigurationDto {
     }
     
     @Override
-    protected JobConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig) {
+    protected JobTypeConfiguration toJobConfiguration(final JobCoreConfiguration jobCoreConfig) {
         return new SimpleJobConfiguration(jobCoreConfig, jobClass);
     }
 }

File: elastic-job-lite/elastic-job-lite-spring/src/test/java/com/dangdang/ddframe/job/lite/spring/namespace/parser/script/ScriptJobConfigurationDtoTest.java
Patch:
@@ -30,6 +30,6 @@ public final class ScriptJobConfigurationDtoTest {
     public void assertToLiteJobConfiguration() {
         LiteJobConfiguration actual = new ScriptJobConfigurationDto("scriptJob", "0/1 * * * * ?", 10, "test.sh").toLiteJobConfiguration();
         assertThat(actual.getJobName(), is("scriptJob"));
-        assertThat(((ScriptJobConfiguration) actual.getJobConfig()).getScriptCommandLine(), is("test.sh"));
+        assertThat(((ScriptJobConfiguration) actual.getJobTypeConfig()).getScriptCommandLine(), is("test.sh"));
     }
 }

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/config/ConfigurationServiceTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.dangdang.ddframe.job.exception.ShardingItemParametersException;
 import com.dangdang.ddframe.job.exception.TimeDiffIntolerableException;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
-import com.dangdang.ddframe.job.lite.fixture.TestJob;
+import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import com.dangdang.ddframe.job.lite.internal.sharding.strategy.JobShardingStrategy;
 import com.dangdang.ddframe.job.lite.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.lite.util.JobConfigurationUtil;
@@ -86,14 +86,14 @@ public void assertPersistNewJobConfiguration() {
     @Test
     public void assertPersistExistedJobConfiguration() {
         when(jobNodeStorage.isJobNodeExisted(ConfigurationNode.JOB_CLASS)).thenReturn(true);
-        when(jobNodeStorage.getJobNodeData(ConfigurationNode.JOB_CLASS)).thenReturn(TestJob.class.getCanonicalName());
+        when(jobNodeStorage.getJobNodeData(ConfigurationNode.JOB_CLASS)).thenReturn(TestSimpleJob.class.getCanonicalName());
         when(jobNodeStorage.getLiteJobConfig()).thenReturn(liteJobConfig);
         configService.persistJobConfiguration();
         verifyPersistJobConfiguration();
     }
     
     private void verifyPersistJobConfiguration() {
-        verify(jobNodeStorage).fillJobNodeIfNullOrOverwrite(ConfigurationNode.JOB_CLASS, TestJob.class.getCanonicalName());
+        verify(jobNodeStorage).fillJobNodeIfNullOrOverwrite(ConfigurationNode.JOB_CLASS, TestSimpleJob.class.getCanonicalName());
         verify(jobNodeStorage).fillJobNodeIfNullOrOverwrite(ConfigurationNode.CRON, liteJobConfig.getJobConfig().getCoreConfig().getCron());
         verify(jobNodeStorage).fillJobNodeIfNullOrOverwrite(ConfigurationNode.SHARDING_TOTAL_COUNT, liteJobConfig.getJobConfig().getCoreConfig().getShardingTotalCount());
         verify(jobNodeStorage).fillJobNodeIfNullOrOverwrite(ConfigurationNode.SHARDING_ITEM_PARAMETERS, liteJobConfig.getJobConfig().getCoreConfig().getShardingItemParameters());

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/monitor/MonitorServiceDisableTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.lite.internal.monitor;
 
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
-import com.dangdang.ddframe.job.lite.fixture.TestJob;
+import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobTest;
 import com.google.common.base.Optional;
 import org.junit.Test;
@@ -28,7 +28,7 @@
 public final class MonitorServiceDisableTest extends AbstractBaseStdJobTest {
     
     public MonitorServiceDisableTest() {
-        super(TestJob.class, -1, Optional.<DataflowJobConfiguration.DataflowType>absent());
+        super(TestSimpleJob.class, -1, Optional.<DataflowJobConfiguration.DataflowType>absent());
     }
     
     @Test(expected = IOException.class)

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/internal/monitor/MonitorServiceEnableTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.lite.internal.monitor;
 
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
-import com.dangdang.ddframe.job.lite.fixture.TestJob;
+import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import com.dangdang.ddframe.job.lite.integrate.AbstractBaseStdJobTest;
 import com.google.common.base.Optional;
 import org.junit.Test;
@@ -33,7 +33,7 @@ public final class MonitorServiceEnableTest extends AbstractBaseStdJobTest {
     private static final int MONITOR_PORT = 9000;
     
     public MonitorServiceEnableTest() {
-        super(TestJob.class, MONITOR_PORT, Optional.<DataflowJobConfiguration.DataflowType>absent());
+        super(TestSimpleJob.class, MONITOR_PORT, Optional.<DataflowJobConfiguration.DataflowType>absent());
     }
     
     @Test

File: elastic-job-lite/elastic-job-lite-core/src/test/java/com/dangdang/ddframe/job/lite/util/JobConfigurationUtil.java
Patch:
@@ -22,7 +22,7 @@
 import com.dangdang.ddframe.job.api.type.dataflow.api.DataflowJobConfiguration;
 import com.dangdang.ddframe.job.api.type.simple.api.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.lite.api.config.LiteJobConfiguration;
-import com.dangdang.ddframe.job.lite.fixture.TestJob;
+import com.dangdang.ddframe.job.lite.fixture.TestSimpleJob;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import org.unitils.util.ReflectionUtils;
@@ -47,11 +47,11 @@ public static void setFieldValue(final Object config, final String fieldName, fi
     }
     
     public static LiteJobConfiguration createSimpleLiteJobConfiguration() {
-        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("testJob", "0/1 * * * * ?", 3).build(), TestJob.class)).build();
+        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("testJob", "0/1 * * * * ?", 3).build(), TestSimpleJob.class)).build();
     }
     
     public static LiteJobConfiguration createSimpleLiteJobConfiguration(final boolean overwrite) {
-        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("testJob", "0/1 * * * * ?", 3).build(), TestJob.class)).overwrite(overwrite).build();
+        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder("testJob", "0/1 * * * * ?", 3).build(), TestSimpleJob.class)).overwrite(overwrite).build();
     }
     
     public static LiteJobConfiguration createDataflowLiteJobConfiguration(final DataflowJobConfiguration.DataflowType dataflowType) {

File: elastic-job-cloud/elastic-job-cloud-master/src/main/java/com/dangdang/ddframe/job/cloud/mesos/HardwareResource.java
Patch:
@@ -18,6 +18,7 @@
 package com.dangdang.ddframe.job.cloud.mesos;
 
 import com.dangdang.ddframe.job.cloud.config.CloudJobConfiguration;
+import com.dangdang.ddframe.job.cloud.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.context.JobContext;
 import com.dangdang.ddframe.job.cloud.context.ShardingContext;
 import com.dangdang.ddframe.job.cloud.context.TaskContext;
@@ -122,7 +123,7 @@ public void commitReservedResources() {
      */
     public Protos.TaskInfo createTaskInfo(final JobContext jobContext, final int shardingItem) {
         CloudJobConfiguration jobConfig = jobContext.getJobConfig();
-        Protos.TaskID taskId = Protos.TaskID.newBuilder().setValue(new TaskContext(jobConfig.getJobName(), shardingItem).getId()).build();
+        Protos.TaskID taskId = Protos.TaskID.newBuilder().setValue(new TaskContext(jobConfig.getJobName(), shardingItem, jobContext.getType()).getId()).build();
         ShardingContext shardingContext = new ShardingContext(shardingItem);
         shardingContext.setStreamingProcess(jobConfig.isStreamingProcess());
         Protos.CommandInfo.URI uri = Protos.CommandInfo.URI.newBuilder().setValue(jobConfig.getAppURL()).setExtract(true).setCache(true).build();

File: elastic-job-cloud/elastic-job-cloud-master/src/main/java/com/dangdang/ddframe/job/cloud/state/misfired/MisfiredService.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.dangdang.ddframe.job.cloud.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.config.ConfigurationService;
+import com.dangdang.ddframe.job.cloud.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.context.JobContext;
 import com.dangdang.ddframe.job.cloud.state.running.RunningService;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
@@ -87,7 +88,7 @@ public String apply(final JobContext input) {
                 continue;
             }
             if (!ineligibleJobNames.contains(each) && !runningService.isJobRunning(each)) {
-                result.add(JobContext.from(jobConfig.get()));
+                result.add(JobContext.from(jobConfig.get(), ExecutionType.MISFIRED));
             }
         }
         return result;

File: elastic-job-cloud/elastic-job-cloud-master/src/main/java/com/dangdang/ddframe/job/cloud/state/ready/ReadyService.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.dangdang.ddframe.job.cloud.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.config.ConfigurationService;
+import com.dangdang.ddframe.job.cloud.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.context.JobContext;
 import com.dangdang.ddframe.job.cloud.state.UniqueJob;
 import com.dangdang.ddframe.job.cloud.state.misfired.MisfiredService;
@@ -101,7 +102,7 @@ public String apply(final JobContext input) {
                 misfiredService.add(jobName);
                 continue;
             }
-            result.add(JobContext.from(jobConfig.get()));
+            result.add(JobContext.from(jobConfig.get(), ExecutionType.READY));
             assignedJobNames.add(jobName);
         }
         return result;

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/context/JobContextTest.java
Patch:
@@ -28,7 +28,7 @@ public final class JobContextTest {
     @Test
     public void assertFrom() {
         CloudJobConfiguration jobConfig = new CloudJobConfiguration("test_job", "5/10 * * * * *", 10, 1.0d, 128.0d, "dockerImage", "http://localhost/app.jar", true, true, false);
-        JobContext actual = JobContext.from(jobConfig);
+        JobContext actual = JobContext.from(jobConfig, ExecutionType.READY);
         assertThat(actual.getAssignedShardingItems().size(), is(10));
         for (int i = 0; i < actual.getAssignedShardingItems().size(); i++) {
             assertThat(actual.getAssignedShardingItems().get(i), is(i));

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/state/failover/FailoverNodeTest.java
Patch:
@@ -31,6 +31,6 @@ public void assertGetFailoverJobNodePath() {
     
     @Test
     public void assertGetFailoverTaskNodePath() {
-        assertThat(FailoverNode.getFailoverTaskNodePath("test_job@-@0@-@00"), is("/state/failover/test_job/test_job@-@0@-@00"));
+        assertThat(FailoverNode.getFailoverTaskNodePath("test_job@-@0@-@FAILOVER@-@00"), is("/state/failover/test_job/test_job@-@0@-@FAILOVER@-@00"));
     }
 }

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/state/misfired/MisfiredServiceTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.cloud.state.misfired;
 
+import com.dangdang.ddframe.job.cloud.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.context.JobContext;
 import com.dangdang.ddframe.job.cloud.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.config.ConfigurationService;
@@ -96,7 +97,8 @@ public void assertGetAllEligibleJobContextsWithRootNode() {
         when(runningService.isJobRunning("running_job")).thenReturn(true);
         when(runningService.isJobRunning("ineligible_job")).thenReturn(false);
         when(runningService.isJobRunning("eligible_job")).thenReturn(false);
-        assertThat(misfiredService.getAllEligibleJobContexts(Collections.singletonList(JobContext.from(CloudJobConfigurationBuilder.createCloudJobConfiguration("eligible_job")))).size(), is(1));
+        assertThat(misfiredService.getAllEligibleJobContexts(Collections.singletonList(
+                JobContext.from(CloudJobConfigurationBuilder.createCloudJobConfiguration("eligible_job"), ExecutionType.MISFIRED))).size(), is(1));
         verify(regCenter).isExisted("/state/misfired");
         verify(regCenter).remove("/state/misfired/not_existed_job");
     }

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/state/ready/ReadyServiceTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.dangdang.ddframe.job.cloud.config.CloudJobConfiguration;
 import com.dangdang.ddframe.job.cloud.config.ConfigurationService;
+import com.dangdang.ddframe.job.cloud.context.ExecutionType;
 import com.dangdang.ddframe.job.cloud.context.JobContext;
 import com.dangdang.ddframe.job.cloud.state.fixture.CloudJobConfigurationBuilder;
 import com.dangdang.ddframe.job.cloud.state.misfired.MisfiredService;
@@ -93,7 +94,8 @@ public void assertGetAllEligibleJobContextsWithRootNode() {
         when(runningService.isJobRunning("running_job")).thenReturn(true);
         when(runningService.isJobRunning("ineligible_job")).thenReturn(false);
         when(runningService.isJobRunning("eligible_job")).thenReturn(false);
-        assertThat(readyService.getAllEligibleJobContexts(Collections.singletonList(JobContext.from(CloudJobConfigurationBuilder.createCloudJobConfiguration("ineligible_job")))).size(), is(1));
+        assertThat(readyService.getAllEligibleJobContexts(Collections.singletonList(
+                JobContext.from(CloudJobConfigurationBuilder.createCloudJobConfiguration("ineligible_job"), ExecutionType.READY))).size(), is(1));
         verify(regCenter).isExisted("/state/ready");
         verify(regCenter).getChildrenKeys("/state/ready");
         verify(configService).load("not_existed_job");

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/state/running/RunningNodeTest.java
Patch:
@@ -26,6 +26,6 @@ public final class RunningNodeTest {
     
     @Test
     public void assertGetRunningTaskNodePath() {
-        assertThat(RunningNode.getRunningTaskNodePath("testJob@-@0@-@00"), is("/state/running/testJob/testJob@-@0@-@00"));
+        assertThat(RunningNode.getRunningTaskNodePath("testJob@-@0@-@READY@-@00"), is("/state/running/testJob/testJob@-@0@-@READY@-@00"));
     }
 }

File: elastic-job-cloud/elastic-job-cloud-master/src/main/java/com/dangdang/ddframe/job/cloud/boot/MasterBootstrap.java
Patch:
@@ -59,7 +59,8 @@ private CoordinatorRegistryCenter getRegistryCenter() {
     
     private MesosSchedulerDriver getSchedulerDriver() {
         MesosConfiguration mesosConfig = env.getMesosConfiguration();
-        Protos.FrameworkInfo frameworkInfo = Protos.FrameworkInfo.newBuilder().setUser(mesosConfig.getUsername()).setName(MesosConfiguration.FRAMEWORK_NAME).setHostname(new LocalHostService().getIp()).build();
+        Protos.FrameworkInfo frameworkInfo = 
+                Protos.FrameworkInfo.newBuilder().setUser(mesosConfig.getUsername()).setName(MesosConfiguration.FRAMEWORK_NAME).setHostname(new LocalHostService().getIp()).build();
         return new MesosSchedulerDriver(new SchedulerEngine(regCenter), frameworkInfo, mesosConfig.getUrl());
     }
     

File: elastic-job-cloud/elastic-job-cloud-master/src/main/java/com/dangdang/ddframe/job/cloud/state/failover/FailoverService.java
Patch:
@@ -60,7 +60,7 @@ public FailoverService(final CoordinatorRegistryCenter registryCenter) {
      * @param taskContext 任务运行时上下文
      */
     public void add(final TaskContext taskContext) {
-        if (!registryCenter.isExisted(FailoverNode.getFailoverTaskNodePath(taskContext.getId()))) {
+        if (!registryCenter.isExisted(FailoverNode.getFailoverTaskNodePath(taskContext.getId())) && !runningService.isTaskRunning(taskContext)) {
             registryCenter.persist(FailoverNode.getFailoverTaskNodePath(taskContext.getId()), "");
         }
     }

File: elastic-job-cloud/elastic-job-cloud-master/src/test/java/com/dangdang/ddframe/job/cloud/mesos/SchedulerEngineTest.java
Patch:
@@ -85,7 +85,7 @@ public void assertResourceOffers() {
         schedulerEngine.resourceOffers(schedulerDriver, offers);
         verify(schedulerDriver, times(0)).declineOffer(Protos.OfferID.newBuilder().setValue("offer_0").build());
         verify(schedulerDriver).declineOffer(Protos.OfferID.newBuilder().setValue("offer_1").build());
-        verify(schedulerDriver).launchTasks(eq(Collections.singletonList(offers.get(0).getId())), (Collection) any());
+        verify(schedulerDriver).launchTasks(eq(offers.get(0).getId()), (Collection) any());
         verify(facadeService).removeLaunchTasksFromQueue((AssignedTaskContext) any());
     }
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
Patch:
@@ -96,7 +96,7 @@ public void assertPersistSequential() throws Exception {
         assertThat(actual.size(), is(2));
         for (String each : actual) {
             assertThat(each, startsWith("test_sequential"));
-            assertThat(zkRegCenter.get(each), startsWith("test_value"));
+            assertThat(zkRegCenter.get("/sequential/" + each), startsWith("test_value"));
         }
     }
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/AbstractDataFlowElasticJob.java
Patch:
@@ -20,12 +20,12 @@
 import com.dangdang.ddframe.job.api.DataFlowElasticJob;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.api.JobExecutionSingleShardingContext;
+import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.job.internal.job.AbstractElasticJob;
 import com.dangdang.ddframe.job.internal.job.AbstractJobExecutionShardingContext;
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections.CollectionUtils;
-import org.quartz.JobExecutionException;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -224,8 +224,8 @@ public ExecutorService getExecutorService() {
     }
     
     @Override
-    public void handleJobExecutionException(final JobExecutionException jobExecutionException) throws JobExecutionException {
-        log.error("Elastic job: exception occur in job processing...", jobExecutionException.getCause());
+    public void handleJobExecutionException(final JobException jobException) {
+        log.error("Elastic job: exception occur in job processing...", jobException.getCause());
     }
     
     private void latchAwait(final CountDownLatch latch) {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/integrated/ScriptElasticJob.java
Patch:
@@ -33,7 +33,7 @@
  * @author caohao
  */
 public final class ScriptElasticJob extends AbstractElasticJob {
-        
+    
     @Override
     protected void executeJob(final JobExecutionMultipleShardingContext shardingContext) {
         String scriptCommandLine = getJobFacade().getScriptCommandLine();

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteThrowsException.java
Patch:
@@ -21,7 +21,6 @@
 import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualThroughputDataFlowElasticJob;
 import lombok.Getter;
-import org.quartz.JobExecutionException;
 
 import java.util.Collections;
 import java.util.List;
@@ -46,7 +45,7 @@ public boolean processData(final JobExecutionMultipleShardingContext context, fi
     }
     
     @Override
-    public void handleJobExecutionException(final JobExecutionException jobExecutionException) throws JobExecutionException {
+    public void handleJobExecutionException(final JobException jobException) {
     }
     
     public static void reset() {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/statistics/ProcessCountJobTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.quartz.JobExecutionException;
 import org.unitils.util.ReflectionUtils;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -47,7 +46,7 @@ public void setUp() throws NoSuchFieldException {
     }
     
     @Test
-    public void assertRun() throws JobExecutionException {
+    public void assertRun() {
         ProcessCountStatistics.incrementProcessSuccessCount(ProcessCountJobTest.class.getName());
         ProcessCountStatistics.incrementProcessSuccessCount(ProcessCountJobTest.class.getName());
         ProcessCountStatistics.incrementProcessFailureCount(ProcessCountJobTest.class.getName());

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/AbstractSequenceDataFlowElasticJobTest.java
Patch:
@@ -22,7 +22,6 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import org.junit.Test;
-import org.quartz.JobExecutionException;
 
 import java.util.Collections;
 
@@ -35,10 +34,10 @@
 public abstract class AbstractSequenceDataFlowElasticJobTest extends AbstractDataFlowElasticJobTest {
     
     @Test
-    public void assertExecuteWhenFetchDataIsNullAndEmpty() throws JobExecutionException {
+    public void assertExecuteWhenFetchDataIsNullAndEmpty() {
         when(getJobCaller().fetchData(0)).thenReturn(null);
         when(getJobCaller().fetchData(1)).thenReturn(Collections.emptyList());
-        getDataFlowElasticJob().execute(null);
+        getDataFlowElasticJob().execute();
         verify(getJobCaller()).fetchData(0);
         verify(getJobCaller()).fetchData(1);
         verify(getJobCaller(), times(0)).processData(any());

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/streaming/StreamingIndividualThroughputDataFlowElasticJobTest.java
Patch:
@@ -22,7 +22,6 @@
 import com.dangdang.ddframe.job.plugin.job.type.fixture.FooStreamingIndividualThroughputDataFlowElasticJob;
 import com.dangdang.ddframe.job.plugin.job.type.fixture.JobCaller;
 import org.junit.Test;
-import org.quartz.JobExecutionException;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -45,12 +44,12 @@ protected AbstractDataFlowElasticJob createDataFlowElasticJob(final JobCaller jo
     
     @SuppressWarnings("unchecked")
     @Test
-    public void assertExecuteWhenFetchDataIsNotEmpty() throws JobExecutionException {
+    public void assertExecuteWhenFetchDataIsNotEmpty() {
         when(getJobCaller().fetchData()).thenReturn(Arrays.<Object>asList(1, 2), Collections.emptyList());
         when(getJobFacade().isEligibleForJobRunning()).thenReturn(true);
         when(getJobCaller().processData(1)).thenReturn(false);
         when(getJobCaller().processData(2)).thenReturn(true);
-        getDataFlowElasticJob().execute(null);
+        getDataFlowElasticJob().execute();
         verify(getJobCaller(), times(2)).fetchData();
         verify(getJobCaller()).processData(1);
         verify(getJobCaller()).processData(2);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingBatchSequenceDataFlowElasticJob.java
Patch:
@@ -41,7 +41,7 @@ public int processData(final JobExecutionSingleShardingContext shardingContext,
                 if (jobCaller.processData(each)) {
                     result++;
                 }
-            } catch (final NullPointerException ex) {
+            } catch (final IllegalStateException ex) {
             }
         }
         return result;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingBatchThroughputDataFlowElasticJob.java
Patch:
@@ -41,7 +41,7 @@ public int processData(final JobExecutionMultipleShardingContext shardingContext
                 if (jobCaller.processData(each)) {
                     result++;
                 }
-            } catch (final NullPointerException ex) {
+            } catch (final IllegalStateException ex) {
             }
         }
         return result;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingBatchSequenceDataFlowElasticJob.java
Patch:
@@ -41,7 +41,7 @@ public int processData(final JobExecutionSingleShardingContext shardingContext,
                 if (jobCaller.processData(each)) {
                     result++;
                 }
-            } catch (final NullPointerException ex) {
+            } catch (final IllegalStateException ex) {
             }
         }
         return result;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingBatchThroughputDataFlowElasticJob.java
Patch:
@@ -18,9 +18,9 @@
 package com.dangdang.ddframe.job.plugin.job.type.fixture;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
+import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractBatchThroughputDataFlowElasticJob;
 import lombok.RequiredArgsConstructor;
-import org.quartz.JobExecutionException;
 
 import java.util.List;
 
@@ -42,13 +42,13 @@ public int processData(final JobExecutionMultipleShardingContext shardingContext
                 if (jobCaller.processData(each)) {
                     result++;
                 }
-            } catch (final NullPointerException ex) {
+            } catch (final IllegalStateException ex) {
             }
         }
         return result;
     }
     
     @Override
-    public void handleJobExecutionException(final JobExecutionException jobExecutionException) throws JobExecutionException {
+    public void handleJobExecutionException(final JobException jobException) {
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingIndividualThroughputDataFlowElasticJob.java
Patch:
@@ -18,9 +18,9 @@
 package com.dangdang.ddframe.job.plugin.job.type.fixture;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
+import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualThroughputDataFlowElasticJob;
 import lombok.RequiredArgsConstructor;
-import org.quartz.JobExecutionException;
 
 import java.util.List;
 
@@ -40,6 +40,6 @@ public boolean processData(final JobExecutionMultipleShardingContext shardingCon
     }
     
     @Override
-    public void handleJobExecutionException(final JobExecutionException jobExecutionException) throws JobExecutionException {
+    public void handleJobExecutionException(final JobException jobException) {
     }
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationService.java
Patch:
@@ -68,8 +68,7 @@ private void registerJobInfo() {
         fillSimpleJobInfo();
         if (JobType.DATA_FLOW == jobNodeStorage.getJobConfiguration().getJobType()) {
             fillDataFlowJobInfo();
-        }
-        if (JobType.SCRIPT == jobNodeStorage.getJobConfiguration().getJobType()) {
+        } else if (JobType.SCRIPT == jobNodeStorage.getJobConfiguration().getJobType()) {
             fillScriptJobInfo();
         }
     }
@@ -117,7 +116,8 @@ public JobType getJobType() {
      * @return 作业分片总数
      */
     public int getShardingTotalCount() {
-        return Integer.parseInt(jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.SHARDING_TOTAL_COUNT));
+        String result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.SHARDING_TOTAL_COUNT);
+        return Strings.isNullOrEmpty(result) ? -1 : Integer.parseInt(result);
     }
     
     /**

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeService.java
Patch:
@@ -84,7 +84,7 @@ public void registerComplete(final Collection<Integer> shardingItems) {
      * @return 是否所有的任务均执行完毕
      */
     public boolean isAllCompleted() {
-        return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT) && configService.getShardingTotalCount() == jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
+        return jobNodeStorage.isJobNodeExisted(GuaranteeNode.COMPLETED_ROOT) && configService.getShardingTotalCount() <= jobNodeStorage.getJobNodeChildrenKeys(GuaranteeNode.COMPLETED_ROOT).size();
     }
     
     /**

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.dangdang.ddframe.job.api.JobSettingsAPI;
 import com.dangdang.ddframe.job.domain.JobSettings;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.internal.storage.JobNodePath;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Strings;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/config/JobConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 package com.dangdang.ddframe.job.api.config;
 
 import com.dangdang.ddframe.job.api.ElasticJob;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 
 /**
  * 作业基本配置信息.

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/config/impl/AbstractJobConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.dangdang.ddframe.job.api.ElasticJob;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.internal.job.JobType;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import lombok.AccessLevel;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/config/impl/DataFlowJobConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 package com.dangdang.ddframe.job.api.config.impl;
 
 import com.dangdang.ddframe.job.api.DataFlowElasticJob;
-import com.dangdang.ddframe.job.internal.job.JobType;
 import com.google.common.base.Preconditions;
 import lombok.Getter;
 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/config/impl/JobType.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.internal.job;
+package com.dangdang.ddframe.job.api.config.impl;
 
 /**
  * 作业类型.

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/config/impl/ScriptJobConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 
 package com.dangdang.ddframe.job.api.config.impl;
 
-import com.dangdang.ddframe.job.internal.job.JobType;
 import com.dangdang.ddframe.job.plugin.job.type.integrated.ScriptElasticJob;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/config/impl/SimpleJobConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 
 package com.dangdang.ddframe.job.api.config.impl;
 
-import com.dangdang.ddframe.job.internal.job.JobType;
 import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 
 /**

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationService.java
Patch:
@@ -23,7 +23,7 @@
 import com.dangdang.ddframe.job.exception.JobConflictException;
 import com.dangdang.ddframe.job.exception.ShardingItemParametersException;
 import com.dangdang.ddframe.job.exception.TimeDiffIntolerableException;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Strings;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionContextService.java
Patch:
@@ -20,7 +20,7 @@
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.internal.offset.OffsetService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacade.java
Patch:
@@ -22,7 +22,7 @@
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionService;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.internal.listener.ListenerManager;
 import com.dangdang.ddframe.job.internal.monitor.MonitorService;
 import com.dangdang.ddframe.job.internal.server.ServerService;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionContextServiceTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.internal.offset.OffsetService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.google.common.collect.Lists;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionService;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.internal.listener.ListenerManager;
 import com.dangdang.ddframe.job.internal.monitor.MonitorService;
 import com.dangdang.ddframe.job.internal.server.ServerService;

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/parser/common/AbstractJobConfigurationDto.java
Patch:
@@ -21,7 +21,7 @@
 import com.dangdang.ddframe.job.api.ElasticJob;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.config.impl.AbstractJobConfiguration.AbstractJobConfigurationBuilder;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/parser/dataflow/DataFlowJobConfigurationDto.java
Patch:
@@ -21,7 +21,7 @@
 import com.dangdang.ddframe.job.api.DataFlowElasticJob;
 import com.dangdang.ddframe.job.api.config.impl.DataFlowJobConfiguration;
 import com.dangdang.ddframe.job.api.config.impl.DataFlowJobConfiguration.DataFlowJobConfigurationBuilder;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.spring.namespace.parser.common.AbstractJobConfigurationDto;
 import lombok.Getter;
 import lombok.Setter;

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/parser/script/ScriptJobConfigurationDto.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.dangdang.ddframe.job.api.config.impl.ScriptJobConfiguration;
 import com.dangdang.ddframe.job.api.config.impl.ScriptJobConfiguration.ScriptJobConfigurationBuilder;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.plugin.job.type.integrated.ScriptElasticJob;
 import com.dangdang.ddframe.job.spring.namespace.parser.common.AbstractJobConfigurationDto;
 import lombok.Getter;

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/parser/simple/SimpleJobConfigurationDto.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.dangdang.ddframe.job.api.config.impl.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.api.config.impl.SimpleJobConfiguration.SimpleJobConfigurationBuilder;
-import com.dangdang.ddframe.job.internal.job.JobType;
+import com.dangdang.ddframe.job.api.config.impl.JobType;
 import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 import com.dangdang.ddframe.job.spring.namespace.parser.common.AbstractJobConfigurationDto;
 import lombok.Getter;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/config/impl/DataFlowJobConfiguration.java
Patch:
@@ -61,7 +61,7 @@ public static class DataFlowJobConfigurationBuilder extends AbstractJobConfigura
         
         private int fetchDataCount = 1;
         
-        private int concurrentDataProcessThreadCount = 1;
+        private int concurrentDataProcessThreadCount = Runtime.getRuntime().availableProcessors() * 2;
         
         private boolean streamingProcess;
         
@@ -89,7 +89,7 @@ public final DataFlowJobConfigurationBuilder processCountIntervalSeconds(final i
          * 设置每次抓取的数据量.
          *
          * <p>
-         * 不能小于1.
+         * 默认值: CPU核数 * 2. 不能小于1.
          * </p>
          *
          * @param fetchDataCount 每次抓取的数据量

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/JobFacade.java
Patch:
@@ -204,12 +204,12 @@ public boolean isExecuteMisfired(final List<Integer> shardingItems) {
     /**
      * 判断作业是否符合继续运行的条件.
      * 
-     * <p>如果作业停止或需要重分片则作业将不会继续运行.</p>
+     * <p>如果作业停止或需要重分片或非流式处理则作业将不会继续运行.</p>
      * 
      * @return 作业是否符合继续运行的条件
      */
     public boolean isEligibleForJobRunning() {
-        return !serverService.isJobPausedManually() && !shardingService.isNeedSharding();
+        return !serverService.isJobPausedManually() && !shardingService.isNeedSharding() && configService.isStreamingProcess();
     }
     
     /**判断是否需要重分片.

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationNode.java
Patch:
@@ -24,7 +24,7 @@
  * 
  * @author zhangliang
  */
-final class ConfigurationNode {
+public final class ConfigurationNode {
     
     private static final String ROOT = "config";
     
@@ -66,7 +66,7 @@ final class ConfigurationNode {
     
     private final JobNodePath jobNodePath;
     
-    ConfigurationNode(final String jobName) {
+    public ConfigurationNode(final String jobName) {
         jobNodePath = new JobNodePath(jobName);
     }
     
@@ -106,7 +106,7 @@ public boolean isFailoverPath(final String path) {
      * @param path 节点路径
      * @return 是否为作业调度配置路径
      */
-    boolean isCronPath(final String path) {
+    public boolean isCronPath(final String path) {
         return jobNodePath.getFullPath(CRON).equals(path);
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/monitor/MonitorServiceEnableTest.java
Patch:
@@ -31,7 +31,7 @@ public final class MonitorServiceEnableTest extends AbstractBaseStdJobTest {
     private static final int MONITOR_PORT = 9000;
     
     public MonitorServiceEnableTest() {
-        super(TestJob.class, -1);
+        super(TestJob.class, MONITOR_PORT);
     }
     
     @Test

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/constants/BaseJobBeanDefinitionParserTag.java
Patch:
@@ -29,6 +29,8 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public class BaseJobBeanDefinitionParserTag {
     
+    public static final String REGISTRY_CENTER_REF_ATTRIBUTE = "registry-center-ref";
+    
     public static final String CLASS_ATTRIBUTE = "class";
     
     public static final String CRON_ATTRIBUTE = "cron";

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/parser/common/AbstractJobBeanDefinitionParser.java
Patch:
@@ -47,6 +47,7 @@
 import static com.dangdang.ddframe.job.spring.namespace.constants.BaseJobBeanDefinitionParserTag.MONITOR_EXECUTION_ATTRIBUTE;
 import static com.dangdang.ddframe.job.spring.namespace.constants.BaseJobBeanDefinitionParserTag.MONITOR_PORT_ATTRIBUTE;
 import static com.dangdang.ddframe.job.spring.namespace.constants.BaseJobBeanDefinitionParserTag.OVERWRITE_ATTRIBUTE;
+import static com.dangdang.ddframe.job.spring.namespace.constants.BaseJobBeanDefinitionParserTag.REGISTRY_CENTER_REF_ATTRIBUTE;
 import static com.dangdang.ddframe.job.spring.namespace.constants.BaseJobBeanDefinitionParserTag.SHARDING_ITEM_PARAMETERS_ATTRIBUTE;
 import static com.dangdang.ddframe.job.spring.namespace.constants.BaseJobBeanDefinitionParserTag.SHARDING_TOTAL_COUNT_ATTRIBUTE;
 import static com.dangdang.ddframe.job.spring.namespace.constants.BaseJobBeanDefinitionParserTag.STARTED_TIMEOUT_MILLISECONDS_ATTRIBUTE;
@@ -64,7 +65,7 @@ public abstract class AbstractJobBeanDefinitionParser extends AbstractBeanDefini
     protected AbstractBeanDefinition parseInternal(final Element element, final ParserContext parserContext) {
         BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringJobScheduler.class);
         factory.setInitMethodName("init");
-        factory.addConstructorArgReference(element.getAttribute("reg-center"));
+        factory.addConstructorArgReference(element.getAttribute(REGISTRY_CENTER_REF_ATTRIBUTE));
         factory.addConstructorArgReference(createJobConfiguration(element, parserContext));
         factory.addConstructorArgValue(createJobListeners(element));
         return factory.getBeanDefinition();

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/PlaceholderBeanDefinitionParser.java
Patch:
@@ -40,7 +40,7 @@ protected AbstractBeanDefinition parseInternal(final Element element, final Pars
         BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(PropertySourcesPlaceholderConfigurer.class);
         factory.addPropertyValue("ignoreUnresolvablePlaceholders", true);
         BeanDefinitionBuilder definitionBuilder = BeanDefinitionBuilder.rootBeanDefinition(RegistryPropertySources.class);
-        definitionBuilder.addConstructorArgReference(element.getAttribute("registerRef"));
+        definitionBuilder.addConstructorArgReference(element.getAttribute("registry-center-ref"));
         factory.addPropertyValue("propertySources", definitionBuilder.getBeanDefinition());
         return factory.getBeanDefinition();
     }

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/domain/JobSettings.java
Patch:
@@ -55,6 +55,8 @@ public final class JobSettings implements Serializable {
     
     private int fetchDataCount;
     
+    private boolean streamingProcess;
+    
     private int maxTimeDiffSeconds;
     
     private int monitorPort = -1;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/AbstractDataFlowElasticJob.java
Patch:
@@ -82,14 +82,15 @@ private DataFlowType getDataFlowType() {
     
     @Override
     protected final void executeJob(final JobExecutionMultipleShardingContext shardingContext) {
+        boolean streamingProcess = getJobFacade().isStreamingProcess();
         if (DataFlowType.THROUGHPUT == dataFlowType) {
-            if (isStreamingProcess()) {
+            if (streamingProcess) {
                 executeThroughputStreamingJob(shardingContext);
             } else {
                 executeThroughputOneOffJob(shardingContext);
             }
         } else if (DataFlowType.SEQUENCE == dataFlowType) {
-            if (isStreamingProcess()) {
+            if (streamingProcess) {
                 executeSequenceStreamingJob(shardingContext);
             } else {
                 executeSequenceOneOffJob(shardingContext);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/OneOffSequenceDataFlowElasticJobTest.java
Patch:
@@ -45,7 +45,8 @@ public void reset() {
     
     @Override
     protected void setJobConfig(final JobConfiguration jobConfig) {
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "misfire", false);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "misfire", false);
+        JobConfigurationFieldUtil.setFieldValue(jobConfig, "streamingProcess", false);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/OneOffThroughputDataFlowElasticJobTest.java
Patch:
@@ -45,7 +45,8 @@ public void reset() {
     
     @Override
     protected void setJobConfig(final JobConfiguration jobConfig) {
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "misfire", false);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "misfire", false);
+        JobConfigurationFieldUtil.setFieldValue(jobConfig, "streamingProcess", false);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForNotMonitorTest.java
Patch:
@@ -46,7 +46,8 @@ public void reset() {
     
     @Override
     protected void setJobConfig(final JobConfiguration jobConfig) {
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "monitorExecution", false);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "monitorExecution", false);
+        JobConfigurationFieldUtil.setFieldValue(jobConfig, "streamingProcess", true);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/server/ServerServiceTest.java
Patch:
@@ -70,7 +70,7 @@ public void assertClearPreviousServerStatus() {
     
     @Test
     public void assertPersistServerOnlineWhenOverwriteDisabled() {
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "overwrite", false);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "overwrite", false);
         serverService.persistServerOnline();
         verify(jobNodeStorage).fillJobNodeIfNullOrOverwrite("servers/mockedIP/hostName", "mockedHostName");
         verify(localHostService, times(3)).getIp();
@@ -82,7 +82,7 @@ public void assertPersistServerOnlineWhenOverwriteDisabled() {
     
     @Test
     public void assertPersistServerOnlineForDisabledServerWithLeaderElecting() {
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "disabled", true);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "disabled", true);
         serverService.persistServerOnline();
         verify(jobNodeStorage).fillJobNodeIfNullOrOverwrite("servers/mockedIP/hostName", "mockedHostName");
         verify(localHostService, times(4)).getIp();

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/storage/JobNodeStorageTest.java
Patch:
@@ -66,7 +66,7 @@ public void initMocks() throws NoSuchFieldException {
     
     @Before
     public void reset() {
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "overwrite", false);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "overwrite", false);
     }
     
     @Test
@@ -141,7 +141,7 @@ public void assertFillJobNodeIfNotNullAndOverwriteDisabled() {
     public void assertFillJobNodeIfNotNullAndOverwriteEnabledButValueSame() throws NoSuchFieldException {
         when(coordinatorRegistryCenter.isExisted("/testJob/config/cron")).thenReturn(true);
         when(coordinatorRegistryCenter.getDirectly("/testJob/config/cron")).thenReturn("0/1 * * * * ?");
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "overwrite", true);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "overwrite", true);
         jobNodeStorage.fillJobNodeIfNullOrOverwrite("config/cron", "0/1 * * * * ?");
         verify(coordinatorRegistryCenter).isExisted("/testJob/config/cron");
         verify(coordinatorRegistryCenter).getDirectly("/testJob/config/cron");
@@ -152,7 +152,7 @@ public void assertFillJobNodeIfNotNullAndOverwriteEnabledButValueSame() throws N
     public void assertFillJobNodeIfNotNullAndOverwriteEnabledAndValueDifferent() throws NoSuchFieldException {
         when(coordinatorRegistryCenter.isExisted("/testJob/config/cron")).thenReturn(true);
         when(coordinatorRegistryCenter.getDirectly("/testJob/config/cron")).thenReturn("0/1 * * * * ?");
-        JobConfigurationFieldUtil.setFieldValue(jobConfig, "overwrite", true);
+        JobConfigurationFieldUtil.setSuperFieldValue(jobConfig, "overwrite", true);
         jobNodeStorage.fillJobNodeIfNullOrOverwrite("config/cron", "0/2 * * * * ?");
         verify(coordinatorRegistryCenter).isExisted("/testJob/config/cron");
         verify(coordinatorRegistryCenter).getDirectly("/testJob/config/cron");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/AbstractDataFlowElasticJobTest.java
Patch:
@@ -49,12 +49,15 @@ public abstract class AbstractDataFlowElasticJobTest {
     public void setUp() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
         when(jobFacade.getJobName()).thenReturn(ElasticJobAssert.JOB_NAME);
+        when(jobFacade.isStreamingProcess()).thenReturn(isStreamingProcess());
         dataFlowElasticJob = createDataFlowElasticJob(jobCaller);
         dataFlowElasticJob.setJobFacade(jobFacade);
         shardingContext = ElasticJobAssert.getShardingContext();
         ElasticJobAssert.prepareForIsNotMisfire(jobFacade, shardingContext);
     }
     
+    protected abstract boolean isStreamingProcess();
+    
     @After
     public void tearDown() throws NoSuchFieldException {
         ProcessCountStatistics.reset(ElasticJobAssert.JOB_NAME);

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/main/JobMain.java
Patch:
@@ -54,7 +54,7 @@ private void init() {
                 SimpleJobDemo.class, 10, "0/30 * * * * ?").build();
 
         final DataFlowJobConfiguration throughputJobConfig = JobConfigurationFactory.createDataFlowJobConfigurationBuilder("throughputDataFlowElasticDemoJob", 
-                ThroughputDataFlowJobDemo.class, 10, "0/5 * * * * ?").build();
+                ThroughputDataFlowJobDemo.class, 10, "0/5 * * * * ?").streamingProcess(true).build();
 
         final DataFlowJobConfiguration sequenceJobConfig = JobConfigurationFactory.createDataFlowJobConfigurationBuilder("sequenceDataFlowElasticDemoJob", 
                 SequenceDataFlowJobDemo.class, 10, "0/5 * * * * ?").build();

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/main/SpringJobMain.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
-public final class SpringJobMainWthNamespace {
+public final class SpringJobMain {
     
-    private SpringJobMainWthNamespace() {
+    private SpringJobMain() {
     }
     
     // CHECKSTYLE:OFF

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/main/SpringJobMainWthListener.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
-public final class SpringJobMainWthNamespaceAndListener {
+public final class SpringJobMainWthListener {
     
-    private SpringJobMainWthNamespaceAndListener() {
+    private SpringJobMainWthListener() {
     }
     
     // CHECKSTYLE:OFF

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/constants/DataFlowJobBeanDefinitionParserTag.java
Patch:
@@ -35,5 +35,5 @@ public class DataFlowJobBeanDefinitionParserTag {
     
     public static final String FETCH_DATA_COUNT_ATTRIBUTE = "fetch-data-count";
     
-    
+    public static final String STREAMING_PROCESS_ATTRIBUTE = "streaming-process";
 }

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/parser/dataflow/DataFlowJobBeanDefinitionParser.java
Patch:
@@ -25,6 +25,7 @@
 import static com.dangdang.ddframe.job.spring.namespace.constants.DataFlowJobBeanDefinitionParserTag.CONCURRENT_DATA_PROCESS_THREAD_COUNT_ATTRIBUTE;
 import static com.dangdang.ddframe.job.spring.namespace.constants.DataFlowJobBeanDefinitionParserTag.FETCH_DATA_COUNT_ATTRIBUTE;
 import static com.dangdang.ddframe.job.spring.namespace.constants.DataFlowJobBeanDefinitionParserTag.PROCESS_COUNT_INTERVAL_SECONDS_ATTRIBUTE;
+import static com.dangdang.ddframe.job.spring.namespace.constants.DataFlowJobBeanDefinitionParserTag.STREAMING_PROCESS_ATTRIBUTE;
 
 /**
  * 数据流作业的命名空间解析器.
@@ -43,5 +44,6 @@ protected void setPropertiesValue(final Element element, final BeanDefinitionBui
         addPropertyValueIfNotEmpty(PROCESS_COUNT_INTERVAL_SECONDS_ATTRIBUTE, "processCountIntervalSeconds", element, factory);
         addPropertyValueIfNotEmpty(CONCURRENT_DATA_PROCESS_THREAD_COUNT_ATTRIBUTE, "concurrentDataProcessThreadCount", element, factory);
         addPropertyValueIfNotEmpty(FETCH_DATA_COUNT_ATTRIBUTE, "fetchDataCount", element, factory);
+        addPropertyValueIfNotEmpty(STREAMING_PROCESS_ATTRIBUTE, "streamingProcess", element, factory);
     }
 }

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/namespace/parser/dataflow/DataFlowJobConfigurationDtoTest.java
Patch:
@@ -34,14 +34,14 @@ public void testBuildDataFlowJobConfigurationDtoWithCustomizedProperties() {
         int concurrentDataProcessThreadCount = 200;
         int processCountIntervalSeconds = 1000;
         int fetchDataCount = 100;
-        
         DataFlowJobConfigurationDto jobConfigurationDto = createDataFlowJobConfigurationDto();
         jobConfigurationDto.setConcurrentDataProcessThreadCount(concurrentDataProcessThreadCount);
         jobConfigurationDto.setProcessCountIntervalSeconds(processCountIntervalSeconds);
         jobConfigurationDto.setFetchDataCount(fetchDataCount);
+        jobConfigurationDto.setStreamingProcess(true);
         DataFlowJobConfigurationBuilder builder = (DataFlowJobConfigurationBuilder) buildJobConfigurationBuilder(createDataFlowJobConfigurationBuilder());
         assertThat(buildJobConfigurationDto(jobConfigurationDto), new ReflectionEquals(builder.concurrentDataProcessThreadCount(concurrentDataProcessThreadCount)
-                .processCountIntervalSeconds(processCountIntervalSeconds).fetchDataCount(fetchDataCount).build()));
+                .processCountIntervalSeconds(processCountIntervalSeconds).fetchDataCount(fetchDataCount).streamingProcess(true).build()));
     }
     
     @Test

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/parser/script/ScriptJobBeanDefinitionParser.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.w3c.dom.Element;
 
+import static com.dangdang.ddframe.job.spring.namespace.constants.ScriptJobBeanDefinitionParserTag.SCRIPT_COMMAND_LINE_ATTRIBUTE;
+
 /**
  * 脚本作业的命名空间解析器.
  * 
@@ -36,6 +38,6 @@ protected Class<ScriptJobConfigurationDto> getJobConfigurationDTO() {
     
     @Override
     protected void setPropertiesValue(final Element element, final BeanDefinitionBuilder factory) {
-        addPropertyValueIfNotEmpty("scriptCommandLine", element, factory);
+        addPropertyValueIfNotEmpty(SCRIPT_COMMAND_LINE_ATTRIBUTE, "scriptCommandLine", element, factory);
     }
 }

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobScheduler.java
Patch:
@@ -36,7 +36,7 @@ public class SpringJobScheduler extends JobScheduler implements ApplicationConte
     
     private ApplicationContext applicationContext;
     
-    SpringJobScheduler(final CoordinatorRegistryCenter coordinatorRegistryCenter, final AbstractJobConfigurationDto jobConfigurationDto) {
+    public SpringJobScheduler(final CoordinatorRegistryCenter coordinatorRegistryCenter, final AbstractJobConfigurationDto jobConfigurationDto) {
         super(coordinatorRegistryCenter, jobConfigurationDto.toJobConfiguration());
     }
     

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/AllTests.java
Patch:
@@ -17,13 +17,12 @@
 
 package com.dangdang.ddframe;
 
+import com.dangdang.ddframe.job.AllSpringJobTests;
+import com.dangdang.ddframe.reg.AllSpringRegTests;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 
-import com.dangdang.ddframe.job.AllSpringJobTests;
-import com.dangdang.ddframe.reg.AllSpringRegTests;
-
 
 @RunWith(Suite.class)
 @SuiteClasses({

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractElasticJob.java
Patch:
@@ -65,7 +65,7 @@ public final void execute(final JobExecutionContext context) throws JobExecution
         shardingService.shardingIfNecessary();
         JobExecutionMultipleShardingContext shardingContext = executionContextService.getJobExecutionShardingContext();
         if (executionService.misfireIfNecessary(shardingContext.getShardingItems())) {
-            log.info("Previous job is still running, new job will start after previous job completed. Misfired job had recorded.");
+            log.info("Elastic job: previous job is still running, new job will start after previous job completed. Misfired job had recorded.");
             return;
         }
         executionService.cleanPreviousExecutionInfo();

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import lombok.extern.slf4j.Slf4j;
+
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.env.RealLocalHostService;
@@ -32,8 +34,6 @@
 import com.dangdang.ddframe.job.schedule.JobRegistry;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 
-import lombok.extern.slf4j.Slf4j;
-
 /**
  * 作业失效转移服务.
  * 

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobFactory.java
Patch:
@@ -62,7 +62,7 @@ public Job newJob(final TriggerFiredBundle bundle, final Scheduler scheduler) th
                 throw new NoSuchBeanDefinitionException("");
             }
         } catch (final BeansException ex) {
-            log.info("Cannot found bean for class: '{}'. This job is not managed for spring.", bundle.getJobDetail().getJobClass().getCanonicalName());
+            log.info("Elastic job: cannot found bean for class: '{}'. This job is not managed for spring.", bundle.getJobDetail().getJobClass().getCanonicalName());
             return super.newJob(bundle, scheduler);
         }
         JobDataMap jobDataMap = new JobDataMap();

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import lombok.extern.slf4j.Slf4j;
+
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.env.RealLocalHostService;
@@ -32,8 +34,6 @@
 import com.dangdang.ddframe.job.schedule.JobRegistry;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 
-import lombok.extern.slf4j.Slf4j;
-
 /**
  * 作业失效转移服务.
  * 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingService.java
Patch:
@@ -117,14 +117,14 @@ private void persistShardingInfo(final Map<String, List<Integer>> shardingItems)
     
     private void blockUntilShardingCompleted() {
         while (jobNodeStorage.isJobNodeExisted(ShardingNode.NECESSARY) || jobNodeStorage.isJobNodeExisted(ShardingNode.PROCESSING)) {
-            log.debug("Sleep short time until sharding completed.");
+            log.debug("Elastic job: sleep short time until sharding completed.");
             BlockUtils.waitingShortTime();
         }
     }
     
     private void waitingOtherJobCompleted() {
         while (executionService.hasRunningItems()) {
-            log.debug("Sleep short time until other job completed.");
+            log.debug("Elastic job: sleep short time until other job completed.");
             BlockUtils.waitingShortTime();
         }
     }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractPerpetualElasticJob.java
Patch:
@@ -43,13 +43,15 @@ public abstract class AbstractPerpetualElasticJob<T> extends AbstractElasticJob
     protected final void executeJob(final JobExecutionMultipleShardingContext shardingContext) {
         int threadCount = getConfigService().getConcurrentDataProcessThreadCount();
         List<T> data = fetchData(shardingContext);
+        log.debug("Elastic job: perpetual elastic job fetch data size: {}.", data != null ? data.size() : 0);
         while (null != data && !data.isEmpty() && !isStoped() && !getShardingService().isNeedSharding()) {
             if (threadCount <= 1 || data.size() <= threadCount) {
                 processDataList(shardingContext, data);
             } else {
                 processDataInMultipleThreads(shardingContext, threadCount, data);
             }
             data = fetchData(shardingContext);
+            log.debug("Elastic job: perpetual elasticJob fetch data size: {}.", data != null ? data.size() : 0);
         }
     }
     
@@ -85,7 +87,7 @@ private void processDataList(final JobExecutionMultipleShardingContext shardingC
             } catch (final Exception ex) {
             // CHECKSTYLE:ON
                 ProcessCountStatistics.incrementProcessFailureCount(shardingContext.getJobName());
-                log.error("Exception occur in job processing...", ex);
+                log.error("Elastic job: exception occur in job processing...", ex);
                 continue;
             }
             if (isSuccess) {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractSequencePerpetualElasticJob.java
Patch:
@@ -48,9 +48,11 @@ public abstract class AbstractSequencePerpetualElasticJob<T> extends AbstractEla
     @Override
     protected final void executeJob(final JobExecutionMultipleShardingContext shardingContext) {
         Map<Integer, List<T>> data = takeData(shardingContext);
+        log.debug("Elastic job: sequence perpetual elastic job fetch data size: {}.", data != null ? data.size() : 0);
         while (!data.isEmpty() && !isStoped() && !getShardingService().isNeedSharding()) {
             processDataInMultipleThreads(shardingContext, data);
             data = takeData(shardingContext);
+            log.debug("Elastic job: sequence perpetual elastic job fetch data size: {}.", data != null ? data.size() : 0);
         }
     }
     
@@ -97,7 +99,7 @@ private void processDataList(final JobExecutionSingleShardingContext singleConte
             } catch (final Exception ex) {
             // CHECKSTYLE:ON
                 ProcessCountStatistics.incrementProcessFailureCount(singleContext.getJobName());
-                log.error("Exception occur in job processing...", ex);
+                log.error("Elastic job: exception occur in job processing...", ex);
                 continue;
             }
             if (isSuccess) {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/ElectionListenerManager.java
Patch:
@@ -61,10 +61,10 @@ void listenLeaderElection() {
             @Override
             protected void dataChanged(final CuratorFramework client, final TreeCacheEvent event, final String path) {
                 if (Type.NODE_REMOVED == event.getType() && electionNode.isLeaderHostPath(path) && !leaderElectionService.hasLeader()) {
-                    log.info("Leader crashed, elect a new leader now.");
+                    log.info("Elastic job: leader crashed, elect a new leader now.");
                     leaderElectionService.leaderElection();
                     shardingService.setReshardingFlag();
-                    log.info("Leader election cmplelted.");
+                    log.info("Elastic job: leader election completed.");
                 }
             }
         });

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/LeaderElectionService.java
Patch:
@@ -70,7 +70,7 @@ public void execute() {
     public Boolean isLeader() {
         String locaLhostIp = localHostService.getIp();
         while (!hasLeader()) {
-            log.info("Leader node is electing, waiting for 100 ms at server '{}'", locaLhostIp);
+            log.info("Elastic job: leader node is electing, waiting for 100 ms at server '{}'", locaLhostIp);
             BlockUtils.waitingShortTime();
         }
         return locaLhostIp.equals(jobNodeStorage.getJobNodeData(ElectionNode.LEADER_HOST));

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/exception/RegExceptionHandler.java
Patch:
@@ -41,7 +41,7 @@ private RegExceptionHandler() {
      */
     public static void handleException(final Exception cause) {
         if (isIgnoredException(cause) || isIgnoredException(cause.getCause())) {
-            log.debug("Ignored exception for: {}", cause.getMessage());
+            log.debug("Elastic job: ignored exception for: {}", cause.getMessage());
         } else if (cause instanceof InterruptedException) {
             Thread.currentThread().interrupt();
         } else {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -27,6 +27,7 @@
 
 import lombok.AccessLevel;
 import lombok.Getter;
+import lombok.extern.slf4j.Slf4j;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
@@ -50,6 +51,7 @@
  * 
  * @author zhangliang
  */
+@Slf4j
 public class ZookeeperRegistryCenter implements CoordinatorRegistryCenter {
     
     @Getter(AccessLevel.PROTECTED)
@@ -64,6 +66,7 @@ public ZookeeperRegistryCenter(final ZookeeperConfiguration zookeeperConfigurati
     }
     
     public void init() {
+        log.debug("Elastic job: zookeeper registry center init, server lists is: {}.", zkConfig.getServerLists());
         Builder builder = CuratorFrameworkFactory.builder()
                 .connectString(zkConfig.getServerLists())
                 .retryPolicy(new ExponentialBackoffRetry(zkConfig.getBaseSleepTimeMilliseconds(), zkConfig.getMaxRetries(), zkConfig.getMaxSleepTimeMilliseconds()))

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationService.java
Patch:
@@ -17,9 +17,9 @@
 
 package com.dangdang.ddframe.job.internal.config;
 
-import com.dangdang.ddframe.job.api.config.DataFlowJobConfiguration;
+import com.dangdang.ddframe.job.api.config.impl.DataFlowJobConfiguration;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.ScriptJobConfiguration;
+import com.dangdang.ddframe.job.api.config.impl.ScriptJobConfiguration;
 import com.dangdang.ddframe.job.exception.JobConflictException;
 import com.dangdang.ddframe.job.exception.ShardingItemParametersException;
 import com.dangdang.ddframe.job.exception.TimeDiffIntolerableException;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/JobSchedulerTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.api;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.api.listener.AbstractDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.fixture.ElasticJobListenerCaller;
@@ -69,7 +69,7 @@ public final class JobSchedulerTest {
     @Mock
     private ElasticJobListenerCaller caller;
     
-    private JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build();
     
     private JobScheduler jobScheduler = new JobScheduler(regCenter, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/OneOffSequenceDataFlowElasticJobTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.dangdang.ddframe.job.integrate.std.dataflow.sequence;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.util.JobConfigurationFieldUtil;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.sequence.OneOffSequenceDataFlowElasticJob;
@@ -44,7 +45,7 @@ public void reset() {
     
     @Override
     protected void setJobConfig(final JobConfiguration jobConfig) {
-        jobConfig.setMisfire(false);
+        JobConfigurationFieldUtil.setFieldValue(jobConfig, "misfire", false);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/integrated/ScriptElasticJobTest.java
Patch:
@@ -19,8 +19,8 @@
 
 package com.dangdang.ddframe.job.integrate.std.integrated;
 
-import com.dangdang.ddframe.job.api.config.ScriptJobConfiguration;
-import com.dangdang.ddframe.job.fixture.ScriptElasticJobHelper;
+import com.dangdang.ddframe.job.api.config.impl.ScriptJobConfiguration;
+import com.dangdang.ddframe.job.util.ScriptElasticJobUtil;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.plugin.job.type.integrated.ScriptElasticJob;
@@ -38,7 +38,7 @@ public ScriptElasticJobTest() {
     
     @Test
     public void assertJobInit() {
-        ScriptElasticJobHelper.buildScriptCommandLine();
+        ScriptElasticJobUtil.buildScriptCommandLine();
         WaitingUtils.waitingShortTime();
         String scriptCommandLine = ((ScriptJobConfiguration) getJobConfig()).getScriptCommandLine();
         assertThat(getRegCenter().get("/" + getJobName() + "/config/scriptCommandLine"), is(scriptCommandLine));

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/simple/DisabledJobTest.java
Patch:
@@ -17,13 +17,12 @@
 
 package com.dangdang.ddframe.job.integrate.std.simple;
 
+import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobTest;
+import com.dangdang.ddframe.job.integrate.fixture.simple.SimpleElasticJob;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobTest;
-import com.dangdang.ddframe.job.integrate.fixture.simple.SimpleElasticJob;
-
 public final class DisabledJobTest extends AbstractBaseStdJobTest {
     
     public DisabledJobTest() {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/config/ConfigurationListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.config;
 
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationListenerManager.CronSettingChangedJobListener;
 import com.dangdang.ddframe.job.internal.schedule.JobRegistry;
@@ -43,7 +43,8 @@ public final class ConfigurationListenerManagerTest {
     @Mock
     private JobScheduleController jobScheduleController;
     
-    private final ConfigurationListenerManager configurationListenerManager = new ConfigurationListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
+    private final ConfigurationListenerManager configurationListenerManager = new ConfigurationListenerManager(null, 
+            JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/election/ElectionListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.election;
 
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.election.ElectionListenerManager.LeaderElectionJobListener;
 import com.dangdang.ddframe.job.internal.server.ServerNode;
@@ -52,7 +52,8 @@ public final class ElectionListenerManagerTest {
     @Mock
     private ServerService serverService;
     
-    private final ElectionListenerManager electionListenerManager = new ElectionListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
+    private final ElectionListenerManager electionListenerManager = new ElectionListenerManager(null, 
+            JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/election/LeaderElectionServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.internal.election;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService.LeaderElectionExecutionCallback;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
@@ -51,7 +51,7 @@ public final class LeaderElectionServiceTest {
     @Mock
     private ServerService serverService;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").overwrite(true).build();
     
     private final LeaderElectionService leaderElectionService = new LeaderElectionService(null, jobConfig);
     
@@ -64,7 +64,6 @@ public void setUp() throws NoSuchFieldException {
         when(localHostService.getIp()).thenReturn("mockedIP");
         when(localHostService.getHostName()).thenReturn("mockedHostName");
         when(jobNodeStorage.getJobConfiguration()).thenReturn(jobConfig);
-        jobConfig.setOverwrite(true);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionContextServiceTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
@@ -57,7 +57,7 @@ public final class ExecutionContextServiceTest {
     @Mock
     private OffsetService offsetService;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build();
     
     private final ExecutionContextService executionContextService = new ExecutionContextService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.execution;
 
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.execution.ExecutionListenerManager.MonitorExecutionChangedJobListener;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
@@ -41,7 +41,8 @@ public final class ExecutionListenerManagerTest {
     @Mock
     private ExecutionService executionService;
     
-    private final ExecutionListenerManager executionListenerManager = new ExecutionListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
+    private final ExecutionListenerManager executionListenerManager = new ExecutionListenerManager(null, 
+            JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionServiceTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
@@ -68,7 +68,7 @@ public final class ExecutionServiceTest {
     @Mock
     private JobScheduleController jobScheduleController;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").overwrite(true).build();
     
     private final ExecutionService executionService = new ExecutionService(null, jobConfig);
     
@@ -82,7 +82,6 @@ public void setUp() throws NoSuchFieldException {
         when(localHostService.getIp()).thenReturn("mockedIP");
         when(localHostService.getHostName()).thenReturn("mockedHostName");
         when(jobNodeStorage.getJobConfiguration()).thenReturn(jobConfig);
-        jobConfig.setOverwrite(true);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/failover/FailoverListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.failover;
 
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionService;
@@ -56,7 +56,8 @@ public final class FailoverListenerManagerTest {
     @Mock
     private FailoverService failoverService;
     
-    private final FailoverListenerManager failoverListenerManager = new FailoverListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
+    private final FailoverListenerManager failoverListenerManager = new FailoverListenerManager(null, 
+            JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/failover/FailoverServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.internal.failover;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.failover.FailoverService.FailoverLeaderExecutionCallback;
@@ -61,7 +61,7 @@ public final class FailoverServiceTest {
     @Mock
     private JobScheduleController jobScheduleController;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").overwrite(true).build();
     
     private final FailoverService failoverService = new FailoverService(null, jobConfig);
     
@@ -75,7 +75,6 @@ public void setUp() throws NoSuchFieldException {
         when(localHostService.getIp()).thenReturn("mockedIP");
         when(localHostService.getHostName()).thenReturn("mockedHostName");
         when(jobNodeStorage.getJobConfiguration()).thenReturn(jobConfig);
-        jobConfig.setOverwrite(true);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.guarantee;
 
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.api.listener.AbstractDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.fixture.TestJob;
@@ -53,7 +53,7 @@ public final class GuaranteeListenerManagerTest {
     @Before
     public void setUp() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
-        guaranteeListenerManager = new GuaranteeListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"),
+        guaranteeListenerManager = new GuaranteeListenerManager(null, JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build(),
                 Arrays.asList(elasticJobListener, distributeOnceElasticJobListener));
         ReflectionUtils.setFieldValue(guaranteeListenerManager, guaranteeListenerManager.getClass().getSuperclass().getDeclaredField("jobNodeStorage"), jobNodeStorage);
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.internal.guarantee;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
@@ -43,7 +43,7 @@ public final class GuaranteeServiceTest {
     @Mock
     private ConfigurationService configService;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").overwrite(true).build();
     
     private final GuaranteeService guaranteeService = new GuaranteeService(null, jobConfig);
     
@@ -53,7 +53,6 @@ public void setUp() throws NoSuchFieldException {
         ReflectionUtils.setFieldValue(guaranteeService, "jobNodeStorage", jobNodeStorage);
         ReflectionUtils.setFieldValue(guaranteeService, "configService", configService);
         when(jobNodeStorage.getJobConfiguration()).thenReturn(jobConfig);
-        jobConfig.setOverwrite(true);
     }
     
     @Test

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/offset/OffsetServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.internal.offset;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import org.junit.Before;
@@ -42,7 +42,7 @@ public final class OffsetServiceTest {
     @Mock
     private JobNodeStorage jobNodeStorage;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build();
     
     private OffsetService offsetService = new OffsetService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/JobFacadeTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.fixture.ElasticJobListenerCaller;
 import com.dangdang.ddframe.job.api.listener.fixture.TestElasticJobListener;
@@ -73,7 +73,7 @@ public class JobFacadeTest {
     @Mock
     private ElasticJobListenerCaller caller;
     
-    private JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build();
     
     private JobFacade jobFacade;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.internal.schedule;
 
-import com.dangdang.ddframe.job.api.config.DataFlowJobConfiguration;
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.fixture.TestDataFlowJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
@@ -71,7 +71,7 @@ public class SchedulerFacadeTest {
     @Mock
     private ListenerManager listenerManager;
     
-    private JobConfiguration jobConfig = new DataFlowJobConfiguration("testJob", TestDataFlowJob.class, 3, "0/1 * * * * ?");
+    private JobConfiguration jobConfig = JobConfigurationFactory.createDataFlowJobConfigurationBuilder("testJob", TestDataFlowJob.class, 3, "0/1 * * * * ?").build();
     
     private SchedulerFacade schedulerFacade;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/server/JobOperationListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.server;
 
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
@@ -66,7 +66,8 @@ public final class JobOperationListenerManagerTest {
     
     private String ip = new LocalHostService().getIp();
     
-    private final JobOperationListenerManager jobOperationListenerManager = new JobOperationListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
+    private final JobOperationListenerManager jobOperationListenerManager = new JobOperationListenerManager(null, 
+            JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/sharding/ShardingListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.sharding;
 
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionService;
@@ -48,7 +48,8 @@ public final class ShardingListenerManagerTest {
     
     private String ip = new LocalHostService().getIp();
     
-    private final ShardingListenerManager shardingListenerManager = new ShardingListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
+    private final ShardingListenerManager shardingListenerManager = new ShardingListenerManager(null, 
+            JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/sharding/ShardingServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.internal.sharding;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
@@ -73,7 +73,7 @@ public final class ShardingServiceTest {
     @Mock
     private ServerService serverService;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build();
     
     private final ShardingService shardingService = new ShardingService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/statistics/StatisticsServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.internal.statistics;
 
 import com.dangdang.ddframe.job.api.config.JobConfiguration;
-import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfigurationFactory;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import org.junit.Before;
@@ -44,7 +44,7 @@ public final class StatisticsServiceTest {
     @Mock
     private ScheduledExecutorService scheduledExecutorService;
     
-    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = JobConfigurationFactory.createSimpleJobConfigurationBuilder("testJob", TestJob.class, 3, "0/1 * * * * ?").build();
     
     private final StatisticsService statisticsService = new StatisticsService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/integrated/ScriptElasticJobTest.java
Patch:
@@ -20,7 +20,7 @@
 package com.dangdang.ddframe.job.plugin.job.type.integrated;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.fixture.ScriptElasticJobHelper;
+import com.dangdang.ddframe.job.util.ScriptElasticJobUtil;
 import com.dangdang.ddframe.job.internal.schedule.JobFacade;
 import com.dangdang.ddframe.job.plugin.job.type.ElasticJobAssert;
 import org.junit.Before;
@@ -55,7 +55,7 @@ public void setUp() throws NoSuchFieldException, IOException {
         ElasticJobAssert.prepareForIsNotMisfire(jobFacade, shardingContext);
         scriptElasticJob = new ScriptElasticJob();
         scriptElasticJob.setJobFacade(jobFacade);
-        scriptCommandLine = ScriptElasticJobHelper.buildScriptCommandLine();
+        scriptCommandLine = ScriptElasticJobUtil.buildScriptCommandLine();
     }
     
     @Test(expected = JobExecutionException.class)

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobController.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.spring.schedule;
 
-import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.spring.namespace.parser.common.AbstractJobConfigurationDto;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 
 
@@ -35,7 +35,7 @@
 @Deprecated
 public class SpringJobController extends SpringJobScheduler {
     
-    public SpringJobController(final CoordinatorRegistryCenter coordinatorRegistryCenter, final JobConfiguration jobConfiguration) {
-        super(coordinatorRegistryCenter, jobConfiguration);
+    public SpringJobController(final CoordinatorRegistryCenter coordinatorRegistryCenter, final AbstractJobConfigurationDto jobConfigurationDto) {
+        super(coordinatorRegistryCenter, jobConfigurationDto);
     }
 }

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/domain/JobBriefInfo.java
Patch:
@@ -35,7 +35,7 @@ public final class JobBriefInfo implements Serializable, Comparable<JobBriefInfo
     
     private String jobName;
     
-    private String jobClass;
+    private String jobType;
     
     private JobStatus status;
     

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/domain/JobSettings.java
Patch:
@@ -35,6 +35,8 @@ public final class JobSettings implements Serializable {
     
     private String jobName;
     
+    private String jobType;
+    
     private String jobClass;
     
     private int shardingTotalCount;

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -49,7 +49,7 @@ public Collection<JobBriefInfo> getAllJobsBriefInfo() {
             JobNodePath jobNodePath = new JobNodePath(each);
             JobBriefInfo jobBriefInfo = new JobBriefInfo();
             jobBriefInfo.setJobName(each);
-            jobBriefInfo.setJobClass(registryCenter.get(jobNodePath.getConfigNodePath("jobClass")));
+            jobBriefInfo.setJobType(registryCenter.get(jobNodePath.getConfigNodePath("jobType")));
             jobBriefInfo.setDescription(registryCenter.get(jobNodePath.getConfigNodePath("description")));
             jobBriefInfo.setStatus(getJobStatus(each));
             jobBriefInfo.setCron(registryCenter.get(jobNodePath.getConfigNodePath("cron")));

File: elastic-job-api/elastic-job-api-core/src/test/java/com/dangdang/ddframe/job/internal/settings/JobSettingsAPIImplTest.java
Patch:
@@ -64,6 +64,7 @@ public void assertGetJobSettingsWithoutMonitorPort() {
     
     private void createExpected() {
         when(registryCenter.get("/testJob/config/jobClass")).thenReturn("TestJob");
+        when(registryCenter.get("/testJob/config/jobType")).thenReturn("DATA_FLOW");
         when(registryCenter.get("/testJob/config/shardingTotalCount")).thenReturn("1");
         when(registryCenter.get("/testJob/config/cron")).thenReturn("0/30 * * * * *");
         when(registryCenter.get("/testJob/config/shardingItemParameters")).thenReturn("0=A");
@@ -81,15 +82,13 @@ private void createExpected() {
     
     private void assertJobSettings(JobSettings jobSettings) {
         assertThat(jobSettings.getJobName(), is("testJob"));
+        assertThat(jobSettings.getJobType(), is("DATA_FLOW"));
         assertThat(jobSettings.getJobClass(), is("TestJob"));
         assertThat(jobSettings.getShardingTotalCount(), is(1));
         assertThat(jobSettings.getCron(), is("0/30 * * * * *"));
         assertThat(jobSettings.getShardingItemParameters(), is("0=A"));
         assertThat(jobSettings.getJobParameter(), is("param"));
         assertThat(jobSettings.isMonitorExecution(), is(true));
-        assertThat(jobSettings.getProcessCountIntervalSeconds(), is(300));
-        assertThat(jobSettings.getConcurrentDataProcessThreadCount(), is(10));
-        assertThat(jobSettings.getFetchDataCount(), is(100));
         assertThat(jobSettings.getMaxTimeDiffSeconds(), is(60000));
         assertThat(jobSettings.isFailover(), is(true));
         assertThat(jobSettings.isMisfire(), is(true));

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/DashboardController.java
Patch:
@@ -54,9 +54,9 @@ public String registryCenterPage(final ModelMap model) {
     }
     
     @RequestMapping(value = "job_detail", method = RequestMethod.GET)
-    public String jobDetail(@RequestParam final String jobName, @RequestParam final String jobClass, final ModelMap model) {
+    public String jobDetail(@RequestParam final String jobName, @RequestParam final String jobType, final ModelMap model) {
         model.put("jobName", jobName);
-        model.put("jobClass", jobClass);
+        model.put("jobType", jobType);
         return "job_detail";
     }
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/DataFlowElasticJob.java
Patch:
@@ -17,11 +17,11 @@
 
 package com.dangdang.ddframe.job.api;
 
+import com.dangdang.ddframe.job.internal.job.AbstractJobExecutionShardingContext;
+
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 
-import com.dangdang.ddframe.job.internal.job.AbstractJobExecutionShardingContext;
-
 /**
  * 保用于处理数据流程的作业接口.
  * 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobScheduler.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.api;
 
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.listener.AbstractDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.exception.JobException;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationListenerManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.config;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.listener.AbstractJobListener;
 import com.dangdang.ddframe.job.internal.listener.AbstractListenerManager;
 import com.dangdang.ddframe.job.internal.schedule.JobRegistry;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationNode.java
Patch:
@@ -28,6 +28,8 @@ public final class ConfigurationNode {
     
     static final String ROOT = "config";
     
+    static final String JOB_TYPE = ROOT + "/jobType";
+    
     static final String JOB_CLASS = ROOT + "/jobClass";
     
     static final String SHARDING_TOTAL_COUNT = ROOT + "/shardingTotalCount";

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/ElectionListenerManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.election;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.listener.AbstractJobListener;
 import com.dangdang.ddframe.job.internal.listener.AbstractListenerManager;
 import com.dangdang.ddframe.job.internal.server.ServerNode;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/LeaderElectionService.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.election;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.server.ServerService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionListenerManager.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationNode;
 import com.dangdang.ddframe.job.internal.listener.AbstractJobListener;
 import com.dangdang.ddframe.job.internal.listener.AbstractListenerManager;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionService.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.execution;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverListenerManager.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationNode;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionNode;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionNode;
 import com.dangdang.ddframe.job.internal.schedule.JobRegistry;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeListenerManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.guarantee;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.listener.AbstractDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.internal.listener.AbstractJobListener;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeService.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.guarantee;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/listener/AbstractListenerManager.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.curator.framework.recipes.cache.TreeCacheListener;
 import org.apache.curator.framework.state.ConnectionStateListener;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/listener/ListenerManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.listener;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.internal.config.ConfigurationListenerManager;
 import com.dangdang.ddframe.job.internal.election.ElectionListenerManager;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/monitor/MonitorService.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.curator.framework.recipes.cache.ChildData;
 import org.apache.curator.framework.recipes.cache.TreeCache;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.reg.SensitiveInfoUtils;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/offset/OffsetService.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.Map;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Strings;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/JobFacade.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.dangdang.ddframe.job.internal.schedule;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionContextService;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/server/JobOperationListenerManager.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.curator.framework.state.ConnectionState;
 import org.apache.curator.framework.state.ConnectionStateListener;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.listener.AbstractJobListener;
 import com.dangdang.ddframe.job.internal.listener.AbstractListenerManager;
 import com.dangdang.ddframe.job.internal.schedule.JobRegistry;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/server/ServerService.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.server;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingListenerManager.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent.Type;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationNode;
 import com.dangdang.ddframe.job.internal.execution.ExecutionService;
 import com.dangdang.ddframe.job.internal.listener.AbstractJobListener;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingService.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.sharding;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/statistics/ProcessCountJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.statistics;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.internal.server.ServerService;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/storage/JobNodeStorage.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.storage;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.dangdang.ddframe.reg.exception.RegExceptionHandler;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/schedule/JobController.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.schedule;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 
 /**

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/JobSchedulerTest.java
Patch:
@@ -17,6 +17,8 @@
 
 package com.dangdang.ddframe.job.api;
 
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.api.listener.AbstractDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.fixture.ElasticJobListenerCaller;
@@ -67,7 +69,7 @@ public final class JobSchedulerTest {
     @Mock
     private ElasticJobListenerCaller caller;
     
-    private JobConfiguration jobConfig = new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
     
     private JobScheduler jobScheduler = new JobScheduler(regCenter, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobAutoInitTest.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.ddframe.job.integrate;
 
 import com.dangdang.ddframe.job.api.ElasticJob;
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import org.junit.After;
 import org.junit.Before;
 

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/OneOffThroughputDataFlowElasticJobTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.OneOffThroughputDataFlowElasticJob;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForNotMonitorTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
 import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.StreamingThroughputDataFlowElasticJob;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/election/ElectionListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.election;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.election.ElectionListenerManager.LeaderElectionJobListener;
 import com.dangdang.ddframe.job.internal.server.ServerNode;
@@ -52,7 +52,7 @@ public final class ElectionListenerManagerTest {
     @Mock
     private ServerService serverService;
     
-    private final ElectionListenerManager electionListenerManager = new ElectionListenerManager(null, new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
+    private final ElectionListenerManager electionListenerManager = new ElectionListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"));
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/election/LeaderElectionServiceTest.java
Patch:
@@ -17,7 +17,8 @@
 
 package com.dangdang.ddframe.job.internal.election;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService.LeaderElectionExecutionCallback;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
@@ -50,7 +51,7 @@ public final class LeaderElectionServiceTest {
     @Mock
     private ServerService serverService;
     
-    private final JobConfiguration jobConfig = new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
     
     private final LeaderElectionService leaderElectionService = new LeaderElectionService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.guarantee;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.api.listener.AbstractDistributeOnceElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.fixture.TestJob;
@@ -53,7 +53,7 @@ public final class GuaranteeListenerManagerTest {
     @Before
     public void setUp() throws NoSuchFieldException {
         MockitoAnnotations.initMocks(this);
-        guaranteeListenerManager = new GuaranteeListenerManager(null, new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"),
+        guaranteeListenerManager = new GuaranteeListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"),
                 Arrays.asList(elasticJobListener, distributeOnceElasticJobListener));
         ReflectionUtils.setFieldValue(guaranteeListenerManager, guaranteeListenerManager.getClass().getSuperclass().getDeclaredField("jobNodeStorage"), jobNodeStorage);
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeServiceTest.java
Patch:
@@ -17,7 +17,8 @@
 
 package com.dangdang.ddframe.job.internal.guarantee;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
@@ -42,7 +43,7 @@ public final class GuaranteeServiceTest {
     @Mock
     private ConfigurationService configService;
     
-    private final JobConfiguration jobConfig = new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
     
     private final GuaranteeService guaranteeService = new GuaranteeService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/listener/ListenerManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.internal.listener;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationListenerManager;
@@ -60,7 +60,7 @@ public class ListenerManagerTest {
     @Mock
     private GuaranteeListenerManager guaranteeListenerManager;
     
-    private final ListenerManager listenerManager = new ListenerManager(null, new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"), Collections.<ElasticJobListener>emptyList());
+    private final ListenerManager listenerManager = new ListenerManager(null, new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?"), Collections.<ElasticJobListener>emptyList());
     
     @Before
     public void setUp() throws NoSuchFieldException {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/JobFacadeTest.java
Patch:
@@ -17,8 +17,9 @@
 
 package com.dangdang.ddframe.job.internal.schedule;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.api.listener.ElasticJobListener;
 import com.dangdang.ddframe.job.api.listener.fixture.ElasticJobListenerCaller;
 import com.dangdang.ddframe.job.api.listener.fixture.TestElasticJobListener;
@@ -72,7 +73,7 @@ public class JobFacadeTest {
     @Mock
     private ElasticJobListenerCaller caller;
     
-    private JobConfiguration jobConfig = new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
     
     private JobFacade jobFacade;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/server/ServerServiceTest.java
Patch:
@@ -17,7 +17,8 @@
 
 package com.dangdang.ddframe.job.internal.server;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
@@ -45,7 +46,7 @@ public final class ServerServiceTest {
     @Mock
     private LocalHostService localHostService;
     
-    private final JobConfiguration jobConfig = new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
     
     private final ServerService serverService = new ServerService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/sharding/ShardingServiceTest.java
Patch:
@@ -17,7 +17,8 @@
 
 package com.dangdang.ddframe.job.internal.sharding;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
@@ -72,7 +73,7 @@ public final class ShardingServiceTest {
     @Mock
     private ServerService serverService;
     
-    private final JobConfiguration jobConfig = new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private final JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
     
     private final ShardingService shardingService = new ShardingService(null, jobConfig);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/storage/JobNodeStorageTest.java
Patch:
@@ -17,7 +17,8 @@
 
 package com.dangdang.ddframe.job.internal.storage;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.SimpleJobConfiguration;
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import org.apache.curator.framework.CuratorFramework;
@@ -51,7 +52,7 @@ public final class JobNodeStorageTest {
     @Mock
     private CoordinatorRegistryCenter coordinatorRegistryCenter;
     
-    private JobConfiguration jobConfig = new JobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
+    private JobConfiguration jobConfig = new SimpleJobConfiguration("testJob", TestJob.class, 3, "0/1 * * * * ?");
     
     private JobNodeStorage jobNodeStorage = new JobNodeStorage(coordinatorRegistryCenter, jobConfig);
     

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobController.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.spring.schedule;
 
-import com.dangdang.ddframe.job.api.JobConfiguration;
+import com.dangdang.ddframe.job.api.config.JobConfiguration;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 
 

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/domain/JobBriefInfo.java
Patch:
@@ -35,6 +35,8 @@ public final class JobBriefInfo implements Serializable, Comparable<JobBriefInfo
     
     private String jobName;
     
+    private String jobClass;
+    
     private JobStatus status;
     
     private String description;

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/domain/JobSettings.java
Patch:
@@ -64,4 +64,6 @@ public final class JobSettings implements Serializable {
     private String jobShardingStrategyClass;
     
     private String description;
+    
+    private String scriptCommandLine;
 }

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/internal/settings/JobSettingsAPIImpl.java
Patch:
@@ -57,6 +57,7 @@ public JobSettings getJobSettings(final String jobName) {
         result.setMisfire(Boolean.valueOf(registryCenter.get(jobNodePath.getConfigNodePath("misfire"))));
         result.setJobShardingStrategyClass(registryCenter.get(jobNodePath.getConfigNodePath("jobShardingStrategyClass")));
         result.setDescription(registryCenter.get(jobNodePath.getConfigNodePath("description")));
+        result.setScriptCommandLine(registryCenter.get(jobNodePath.getConfigNodePath("scriptCommandLine")));
         return result;
     }
     
@@ -77,6 +78,7 @@ public void updateJobSettings(final JobSettings jobSettings) {
         updateIfChanged(jobNodePath.getConfigNodePath("misfire"), jobSettings.isMisfire());
         updateIfChanged(jobNodePath.getConfigNodePath("jobShardingStrategyClass"), jobSettings.getJobShardingStrategyClass());
         updateIfChanged(jobNodePath.getConfigNodePath("description"), jobSettings.getDescription());
+        updateIfChanged(jobNodePath.getConfigNodePath("scriptCommandLine"), jobSettings.getScriptCommandLine());
     }
     
     private void updateIfChanged(final String nodePath, final Object value) {

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/internal/statistics/JobStatisticsAPIImpl.java
Patch:
@@ -49,6 +49,7 @@ public Collection<JobBriefInfo> getAllJobsBriefInfo() {
             JobNodePath jobNodePath = new JobNodePath(each);
             JobBriefInfo jobBriefInfo = new JobBriefInfo();
             jobBriefInfo.setJobName(each);
+            jobBriefInfo.setJobClass(registryCenter.get(jobNodePath.getConfigNodePath("jobClass")));
             jobBriefInfo.setDescription(registryCenter.get(jobNodePath.getConfigNodePath("description")));
             jobBriefInfo.setStatus(getJobStatus(each));
             jobBriefInfo.setCron(registryCenter.get(jobNodePath.getConfigNodePath("cron")));

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/DashboardController.java
Patch:
@@ -54,8 +54,9 @@ public String registryCenterPage(final ModelMap model) {
     }
     
     @RequestMapping(value = "job_detail", method = RequestMethod.GET)
-    public String jobDetail(@RequestParam final String jobName, final ModelMap model) {
+    public String jobDetail(@RequestParam final String jobName, @RequestParam final String jobClass, final ModelMap model) {
         model.put("jobName", jobName);
+        model.put("jobClass", jobClass);
         return "job_detail";
     }
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationNode.java
Patch:
@@ -57,6 +57,8 @@ public final class ConfigurationNode {
     static final String DESCRIPTION = ROOT + "/description";
     
     static final String MONITOR_PORT = ROOT + "/monitorPort";
+
+    static final String SCRIPT_COMMAND_LINE = ROOT + "/scriptCommandLine";
     
     private final JobNodePath jobNodePath;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobAutoInitTest.java
Patch:
@@ -17,11 +17,10 @@
 
 package com.dangdang.ddframe.job.integrate;
 
-import org.junit.After;
-import org.junit.Before;
-
 import com.dangdang.ddframe.job.api.ElasticJob;
 import com.dangdang.ddframe.job.api.JobConfiguration;
+import org.junit.After;
+import org.junit.Before;
 
 public abstract class AbstractBaseStdJobAutoInitTest extends AbstractBaseStdJobTest {
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AllIntegrateTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job.integrate;
 
+import com.dangdang.ddframe.job.integrate.std.integrated.ScriptElasticJobTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
@@ -45,7 +46,8 @@
     StreamingThroughputDataFlowElasticJobForMultipleThreadsTest.class, 
     StreamingThroughputDataFlowElasticJobForExecuteFailureTest.class, 
     StreamingThroughputDataFlowElasticJobForExecuteThrowsExceptionTest.class, 
-    StreamingThroughputDataFlowElasticJobForPausedTest.class
+    StreamingThroughputDataFlowElasticJobForPausedTest.class,
+    ScriptElasticJobTest.class
     })
 public final class AllIntegrateTests {
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/AllPluginTests.java
Patch:
@@ -25,6 +25,7 @@
 import com.dangdang.ddframe.job.plugin.job.type.dataflow.throughput.streaming.StreamingIndividualThroughputDataFlowElasticJobTest;
 import com.dangdang.ddframe.job.plugin.job.type.dataflow.throughput.unstreaming.UnstreamingBatchThroughputDataFlowElasticJobTest;
 import com.dangdang.ddframe.job.plugin.job.type.dataflow.throughput.unstreaming.UnstreamingIndividualThroughputDataFlowElasticJobTest;
+import com.dangdang.ddframe.job.plugin.job.type.integrated.ScriptElasticJobTest;
 import com.dangdang.ddframe.job.plugin.job.type.simple.SimpleElasticJobTest;
 import com.dangdang.ddframe.job.plugin.sharding.strategy.AverageAllocationJobShardingStrategyTest;
 import com.dangdang.ddframe.job.plugin.sharding.strategy.OdevitySortByNameJobShardingStrategyTest;
@@ -46,7 +47,8 @@
     UnstreamingBatchSequenceDataFlowElasticJobTest.class, 
     AverageAllocationJobShardingStrategyTest.class, 
     OdevitySortByNameJobShardingStrategyTest.class, 
-    RotateServerByNameJobShardingStrategyTest.class
+    RotateServerByNameJobShardingStrategyTest.class,
+    ScriptElasticJobTest.class
     })
 public final class AllPluginTests {
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/exception/JobTimeoutException.java
Patch:
@@ -23,7 +23,9 @@
  * @author zhangliang
  */
 public final class JobTimeoutException extends JobException {
-
+    
+    private static final long serialVersionUID = 315323919916960589L;
+    
     /**
      * 作业超时抛出的异常.
      * 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingService.java
Patch:
@@ -22,15 +22,15 @@
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionService;
+import com.dangdang.ddframe.job.internal.reg.BlockUtils;
+import com.dangdang.ddframe.job.internal.reg.ItemUtils;
 import com.dangdang.ddframe.job.internal.server.ServerService;
 import com.dangdang.ddframe.job.internal.sharding.strategy.JobShardingStrategy;
 import com.dangdang.ddframe.job.internal.sharding.strategy.JobShardingStrategyFactory;
 import com.dangdang.ddframe.job.internal.sharding.strategy.JobShardingStrategyOption;
 import com.dangdang.ddframe.job.internal.storage.JobNodePath;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.internal.storage.TransactionExecutionCallback;
-import com.dangdang.ddframe.job.internal.reg.BlockUtils;
-import com.dangdang.ddframe.job.internal.reg.ItemUtils;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -103,7 +103,7 @@ public List<ACL> getAclForPath(final String path) {
         client = builder.build();
         client.start();
         try {
-            client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds(), TimeUnit.MILLISECONDS);
+            client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds() * zkConfig.getMaxRetries(), TimeUnit.MILLISECONDS);
             if (!client.getZookeeperClient().isConnected()) {
                 throw new KeeperException.OperationTimeoutException();
             }

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/fixture/repository/FooRepository.java
Patch:
@@ -53,7 +53,7 @@ public List<Foo> findActive(final List<Integer> shardingItems) {
     private List<Foo> findActive(final int shardingItem) {
         List<Foo> result = new ArrayList<>(10);
         for (int i = 0; i < 10; i++) {
-            Foo foo = map.get((long) (shardingItem * 10 + i));
+            Foo foo = map.get((shardingItem * 10 + i) % 100L);
             if (FooStatus.ACTIVE == foo.getStatus()) {
                 result.add(foo);
             }

File: elastic-job-api/elastic-job-api-core/src/main/java/com/dangdang/ddframe/job/internal/reg/RegistryCenterFactory.java
Patch:
@@ -57,7 +57,7 @@ public static CoordinatorRegistryCenter createCoordinatorRegistryCenter(final St
         if (registryCenterMap.containsKey(hashCode)) {
             return registryCenterMap.get(hashCode);
         }
-        ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(connectString, namespace, 1000, 3000, 3);
+        ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(connectString, namespace);
         if (digest.isPresent()) {
             zkConfig.setDigest(digest.get());
         }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -49,7 +49,7 @@
 
 public abstract class AbstractBaseStdJobTest extends AbstractNestedZookeeperBaseTest {
     
-    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, "zkRegTestCenter", 1000, 3000, 3);
+    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, "zkRegTestCenter");
     
     @Getter(value = AccessLevel.PROTECTED)
     private static CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(zkConfig);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/AllRegTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.reg;
 
+import com.dangdang.ddframe.reg.zookeeper.ZookeeperRegistryCenterInitFailureTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
@@ -45,7 +46,8 @@
     ZookeeperRegistryCenterMiscellaneousTest.class, 
     ZookeeperRegistryCenterNestedTest.class, 
     RegExceptionHandlerTest.class, 
-    LocalPropertiesFileNotFoundExceptionTest.class
+    LocalPropertiesFileNotFoundExceptionTest.class,
+    ZookeeperRegistryCenterInitFailureTest.class
     })
 public final class AllRegTests {
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterForAuthTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public final class ZookeeperRegistryCenterForAuthTest extends AbstractNestedZookeeperBaseTest {
     
-    private ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterForAuthTest.class.getName(), 1000, 3000, 3);
+    private ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterForAuthTest.class.getName());
     
     private ZookeeperRegistryCenter zkRegCenter;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterMiscellaneousTest.java
Patch:
@@ -31,7 +31,7 @@
 
 public final class ZookeeperRegistryCenterMiscellaneousTest extends AbstractNestedZookeeperBaseTest {
     
-    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterMiscellaneousTest.class.getName(), 1000, 3000, 3);
+    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterMiscellaneousTest.class.getName());
     
     private static ZookeeperRegistryCenter zkRegCenter;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
Patch:
@@ -37,7 +37,7 @@
 
 public final class ZookeeperRegistryCenterModifyTest extends AbstractNestedZookeeperBaseTest {
     
-    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterModifyTest.class.getName(), 1000, 3000, 3);
+    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterModifyTest.class.getName());
     
     private static ZookeeperRegistryCenter zkRegCenter;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterNestedTest.java
Patch:
@@ -28,7 +28,7 @@
 
 public final class ZookeeperRegistryCenterNestedTest extends AbstractNestedZookeeperBaseTest {
     
-    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterNestedTest.class.getName(), 1000, 3000, 3);
+    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterNestedTest.class.getName());
     
     private static ZookeeperRegistryCenter zkRegCenter;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterQueryWithCacheTest.java
Patch:
@@ -29,7 +29,7 @@
 
 public final class ZookeeperRegistryCenterQueryWithCacheTest extends AbstractNestedZookeeperBaseTest {
     
-    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterQueryWithCacheTest.class.getName(), 1000, 3000, 3);
+    private static ZookeeperConfiguration zkConfig = new ZookeeperConfiguration(ZK_CONNECTION_STRING, ZookeeperRegistryCenterQueryWithCacheTest.class.getName());
     
     private static ZookeeperRegistryCenter zkRegCenter;
     

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/main/JobMain.java
Patch:
@@ -30,7 +30,7 @@
 
 public final class JobMain {
     
-    private final ZookeeperConfiguration zkConfig = new ZookeeperConfiguration("localhost:4181", "elasticjob-example", 1000, 3000, 3);
+    private final ZookeeperConfiguration zkConfig = new ZookeeperConfiguration("localhost:4181", "elasticjob-example");
     
     private final CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(zkConfig);
     

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/RegistryCenterConfigurationsXmlRepository.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.console.repository.xml;
+package com.dangdang.ddframe.job.console.repository;
 
 import com.dangdang.ddframe.job.console.domain.RegistryCenterConfigurations;
 

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/XmlRepository.java
Patch:
@@ -4,9 +4,9 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.console.repository.xml;
+package com.dangdang.ddframe.job.console.repository;
 
 public interface XmlRepository<E> {
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/LeaderElectionService.java
Patch:
@@ -22,7 +22,7 @@
 import com.dangdang.ddframe.job.internal.server.ServerService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.internal.storage.LeaderExecutionCallback;
-import com.dangdang.ddframe.job.internal.util.BlockUtils;
+import com.dangdang.ddframe.job.internal.reg.BlockUtils;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -154,7 +154,7 @@ public void execute() {
             log.debug("Elastic job: failover job begin, crashed item:{}.", crashedItem);
             jobNodeStorage.fillEphemeralJobNode(FailoverNode.getExecutionFailoverNode(crashedItem), localHostService.getIp());
             jobNodeStorage.removeJobNodeIfExisted(FailoverNode.getItemsNode(crashedItem));
-            JobRegistry.getInstance().getJobScheduler(jobConfiguration.getJobName()).triggerJob();
+            JobRegistry.getInstance().getJobScheduleController(jobConfiguration.getJobName()).triggerJob();
         }
     }
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/monitor/MonitorService.java
Patch:
@@ -32,7 +32,7 @@
 
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
-import com.dangdang.ddframe.job.internal.util.SensitiveInfoUtils;
+import com.dangdang.ddframe.job.internal.reg.SensitiveInfoUtils;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Joiner;
 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/reg/BlockUtils.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.internal.util;
+package com.dangdang.ddframe.job.internal.reg;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/reg/ItemUtils.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.internal.util;
+package com.dangdang.ddframe.job.internal.reg;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/reg/SensitiveInfoUtils.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.internal.util;
+package com.dangdang.ddframe.job.internal.reg;
 
 import java.util.HashMap;
 import java.util.List;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacade.java
Patch:
@@ -92,6 +92,7 @@ public void registerStartUpInfo() {
     public void releaseJobResource() {
         monitorService.close();
         statisticsService.stopProcessCountJob();
+        serverService.removeServerStatus();
     }
     
     /**

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingService.java
Patch:
@@ -29,8 +29,8 @@
 import com.dangdang.ddframe.job.internal.storage.JobNodePath;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.internal.storage.TransactionExecutionCallback;
-import com.dangdang.ddframe.job.internal.util.BlockUtils;
-import com.dangdang.ddframe.job.internal.util.ItemUtils;
+import com.dangdang.ddframe.job.internal.reg.BlockUtils;
+import com.dangdang.ddframe.job.internal.reg.ItemUtils;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Properties;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
@@ -103,7 +104,7 @@ public List<ACL> getAclForPath(final String path) {
         client = builder.build();
         client.start();
         try {
-            client.blockUntilConnected();
+            client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds(), TimeUnit.MILLISECONDS);
             if (!Strings.isNullOrEmpty(zkConfig.getLocalPropertiesPath())) {
                 fillData();
             }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/reg/ItemUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.internal.util;
+package com.dangdang.ddframe.job.internal.reg;
 
 import static org.junit.Assert.assertThat;
 import static org.hamcrest.CoreMatchers.is;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/reg/SensitiveInfoUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.internal.util;
+package com.dangdang.ddframe.job.internal.reg;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -111,6 +111,7 @@ public void testReleaseJobResource() {
         schedulerFacade.releaseJobResource();
         verify(monitorService).close();
         verify(statisticsService).stopProcessCountJob();
+        verify(serverService).removeServerStatus();
     }
     
     @Test

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/job/SequenceDataFlowJobDemo.java
Patch:
@@ -48,6 +48,6 @@ public boolean processData(final JobExecutionSingleShardingContext context, fina
     
     @Override
     public boolean isStreamingProcess() {
-        return true;
+        return false;
     }
 }

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/JobBeanDefinitionParser.java
Patch:
@@ -45,7 +45,6 @@ protected AbstractBeanDefinition parseInternal(final Element element, final Pars
     //CHECKSTYLE:ON
         BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringJobScheduler.class);
         factory.setInitMethodName("init");
-        factory.setDestroyMethodName("shutdown");
         factory.addConstructorArgReference(element.getAttribute("regCenter"));
         factory.addConstructorArgReference(createJobConfiguration(element, parserContext));
         factory.addConstructorArgValue(createJobListeners(element));

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/AbstractJobSpringIntegrateTest.java
Patch:
@@ -56,8 +56,8 @@ public void reset() {
     
     @After
     public void tearDown() {
-        JobRegistry.getInstance().getJobScheduler(simpleJobName).shutdown();
-        JobRegistry.getInstance().getJobScheduler(throughputDataFlowJobName).shutdown();
+        JobRegistry.getInstance().getJobScheduleController(simpleJobName).shutdown();
+        JobRegistry.getInstance().getJobScheduleController(throughputDataFlowJobName).shutdown();
     }
     
     @Test

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/AbstractElasticJob.java
Patch:
@@ -20,7 +20,6 @@
 import com.dangdang.ddframe.job.api.ElasticJob;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.internal.schedule.JobFacade;
-import com.dangdang.ddframe.job.internal.schedule.JobRegistry;
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
@@ -102,6 +101,5 @@ public void handleJobExecutionException(final JobExecutionException jobExecution
     
     public final void setJobFacade(final JobFacade jobFacade) {
         this.jobFacade = jobFacade;
-        JobRegistry.getInstance().addJobInstance(jobFacade.getJobName(), this);
     }
 }

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/DashboardController.java
Patch:
@@ -49,7 +49,7 @@ public String homepage(final ModelMap model) {
     
     @RequestMapping(value = "registry_center_page", method = RequestMethod.GET)
     public String registryCenterPage(final ModelMap model) {
-        model.put("activedTab", 1);
+        model.put("activeTab", 1);
         return "registry_center";
     }
     
@@ -67,13 +67,13 @@ public String serverDetail(@RequestParam final String serverIp, final ModelMap m
     
     @RequestMapping(value = "overview", method = RequestMethod.GET)
     public String overview(final ModelMap model) {
-        model.put("activedTab", 0);
+        model.put("activeTab", 0);
         return "overview";
     }
     
     @RequestMapping(value = "help", method = RequestMethod.GET)
     public String help(final ModelMap model) {
-        model.put("activedTab", 2);
+        model.put("activeTab", 2);
         return "help";
     }
 }

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/JobOperationService.java
Patch:
@@ -19,15 +19,15 @@
 
 public interface JobOperationService {
     
-    void stopJob(String jobName, String serverIp);
+    void pauseJob(String jobName, String serverIp);
     
     void resumeJob(String jobName, String serverIp);
     
-    void stopAllJobsByJobName(String jobName);
+    void pauseAllJobsByJobName(String jobName);
     
     void resumeAllJobsByJobName(String jobName);
     
-    void stopAllJobsByServer(String serverIp);
+    void pauseAllJobsByServer(String serverIp);
     
     void resumeAllJobsByServer(String serverIp);
     

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/JobDimensionServiceImpl.java
Patch:
@@ -73,7 +73,7 @@ private JobStatus getJobStatus(final String jobName) {
                     okCount++;
                     break;
                 case DISABLED:
-                case STOPED:
+                case PAUSED:
                     manuallyDisabledCount++;
                     break;
                 case CRASHED:
@@ -166,9 +166,9 @@ private JobServer getJobServer(final String jobName, final String leaderIp, fina
     private ServerStatus getServerStatus(final String jobName, final String serverIp) {
         String status = curatorRepository.getData(JobNodePath.getServerNodePath(jobName, serverIp, "status"));
         boolean disabled = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "disabled"));
-        boolean stopped = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "stoped"));
+        boolean paused = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "paused"));
         boolean shutdown = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "shutdown"));
-        return ServerStatus.getServerStatus(status, disabled, stopped, shutdown);
+        return ServerStatus.getServerStatus(status, disabled, paused, shutdown);
     }
     
     @Override

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/ServerDimensionServiceImpl.java
Patch:
@@ -105,12 +105,12 @@ private JobServer getJob(final String serverIp, final String jobName) {
         result.setSharding(curatorRepository.getData(JobNodePath.getServerNodePath(jobName, serverIp, "sharding")));
         String status = curatorRepository.getData(JobNodePath.getServerNodePath(jobName, serverIp, "status"));
         boolean disabled = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "disabled"));
-        boolean stopped = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "stoped"));
+        boolean paused = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "paused"));
         boolean shutdown = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "shutdown"));
-        result.setStatus(ServerStatus.getServerStatus(status, disabled, stopped, shutdown));
+        result.setStatus(ServerStatus.getServerStatus(status, disabled, paused, shutdown));
         String leaderIp = curatorRepository.getData(JobNodePath.getLeaderNodePath(jobName, "election/host"));
         result.setLeader(serverIp.equals(leaderIp));
-        result.setLeaderStopped(curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, leaderIp, "stoped")));
+        result.setLeaderPaused(curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, leaderIp, "paused")));
         return result;
     }
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobScheduler.java
Patch:
@@ -175,9 +175,9 @@ public Date getNextFireTime() {
     }
     
     /**
-     * 停止作业.
+     * 暂停作业.
      */
-    public void stopJob() {
+    public void pauseJob() {
         try {
             if (!scheduler.isShutdown()) {
                 scheduler.pauseAll();

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/JobFacade.java
Patch:
@@ -99,7 +99,7 @@ public void checkMaxTimeDiffSecondsTolerable() {
      * 如果需要失效转移, 则设置作业失效转移.
      */
     public void failoverIfNecessary() {
-        if (configService.isFailover() && !serverService.isJobStoppedManually()) {
+        if (configService.isFailover() && !serverService.isJobPausedManually()) {
             failoverService.failoverIfNecessary();
         }
     }
@@ -183,7 +183,7 @@ public boolean isExecuteMisfired(final List<Integer> shardingItems) {
      * @return 作业是否符合继续运行的条件
      */
     public boolean isEligibleForJobRunning() {
-        return !serverService.isJobStoppedManually() && !shardingService.isNeedSharding();
+        return !serverService.isJobPausedManually() && !shardingService.isNeedSharding();
     }
     
     /**判断是否需要重分片.

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacade.java
Patch:
@@ -80,7 +80,7 @@ public void registerStartUpInfo() {
         leaderElectionService.leaderForceElection();
         configService.persistJobConfiguration();
         serverService.persistServerOnline();
-        serverService.clearJobStoppedStatus();
+        serverService.clearJobPausedStatus();
         statisticsService.startProcessCountJob();
         shardingService.setReshardingFlag();
         monitorService.listen();

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -159,7 +159,7 @@ private void assertRegCenterCommonInfo() {
             assertFalse(regCenter.isExisted("/" + jobName + "/servers/" + localHostService.getIp() + "/disabled"));
             assertThat(regCenter.get("/" + jobName + "/leader/election/host"), is(localHostService.getIp()));
         }
-        assertFalse(regCenter.isExisted("/" + jobName + "/servers/" + localHostService.getIp() + "/stoped"));
+        assertFalse(regCenter.isExisted("/" + jobName + "/servers/" + localHostService.getIp() + "/paused"));
         assertThat(regCenter.get("/" + jobName + "/servers/" + localHostService.getIp() + "/status"), is(ServerStatus.READY.name()));
         regCenter.remove("/" + jobName + "/leader/election");
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AllIntegrateTests.java
Patch:
@@ -28,7 +28,7 @@
 import com.dangdang.ddframe.job.integrate.std.dataflow.throughput.StreamingThroughputDataFlowElasticJobForExecuteThrowsExceptionTest;
 import com.dangdang.ddframe.job.integrate.std.dataflow.throughput.StreamingThroughputDataFlowElasticJobForMultipleThreadsTest;
 import com.dangdang.ddframe.job.integrate.std.dataflow.throughput.StreamingThroughputDataFlowElasticJobForNotMonitorTest;
-import com.dangdang.ddframe.job.integrate.std.dataflow.throughput.StreamingThroughputDataFlowElasticJobForStoppedTest;
+import com.dangdang.ddframe.job.integrate.std.dataflow.throughput.StreamingThroughputDataFlowElasticJobForPausedTest;
 import com.dangdang.ddframe.job.integrate.std.dataflow.throughput.StreamingThroughputDataFlowElasticJobTest;
 import com.dangdang.ddframe.job.integrate.std.simple.DisabledJobTest;
 import com.dangdang.ddframe.job.integrate.std.simple.SimpleElasticJobTest;
@@ -45,7 +45,7 @@
     StreamingThroughputDataFlowElasticJobForMultipleThreadsTest.class, 
     StreamingThroughputDataFlowElasticJobForExecuteFailureTest.class, 
     StreamingThroughputDataFlowElasticJobForExecuteThrowsExceptionTest.class, 
-    StreamingThroughputDataFlowElasticJobForStoppedTest.class
+    StreamingThroughputDataFlowElasticJobForPausedTest.class
     })
 public final class AllIntegrateTests {
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/JobFacadeTest.java
Patch:
@@ -109,17 +109,17 @@ public void testFailoverIfUnnecessary() {
     }
     
     @Test
-    public void testFailoverIfNecessaryButIsStopped() {
+    public void testFailoverIfNecessaryButIsPaused() {
         when(configService.isFailover()).thenReturn(true);
-        when(serverService.isJobStoppedManually()).thenReturn(true);
+        when(serverService.isJobPausedManually()).thenReturn(true);
         jobFacade.failoverIfNecessary();
         verify(failoverService, times(0)).failoverIfNecessary();
     }
     
     @Test
     public void testFailoverIfNecessary() {
         when(configService.isFailover()).thenReturn(true);
-        when(serverService.isJobStoppedManually()).thenReturn(false);
+        when(serverService.isJobPausedManually()).thenReturn(false);
         jobFacade.failoverIfNecessary();
         verify(failoverService).failoverIfNecessary();
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -100,7 +100,7 @@ public void testRegisterStartUpInfo() {
         verify(leaderElectionService).leaderForceElection();
         verify(configService).persistJobConfiguration();
         verify(serverService).persistServerOnline();
-        verify(serverService).clearJobStoppedStatus();
+        verify(serverService).clearJobPausedStatus();
         verify(statisticsService).startProcessCountJob();
         verify(shardingService).setReshardingFlag();
         verify(monitorService).listen();

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/server/ServerNodeTest.java
Patch:
@@ -58,8 +58,8 @@ public void assertProcessFailureCountNode() {
     }
     
     @Test
-    public void assertStoppedNode() {
-        assertThat(ServerNode.getStoppedNode("host0"), is("servers/host0/stoped"));
+    public void assertPausedNode() {
+        assertThat(ServerNode.getPausedNode("host0"), is("servers/host0/paused"));
     }
     
     @Test
@@ -69,7 +69,7 @@ public void assertShutdownNode() {
     
     @Test
     public void assertIsLocalJobPausedPath() {
-        assertTrue(serverNode.isLocalJobPausedPath("/testJob/servers/" + localHostService.getIp() + "/stoped"));
+        assertTrue(serverNode.isLocalJobPausedPath("/testJob/servers/" + localHostService.getIp() + "/paused"));
     }
     
     @Test

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/LeaderElectionService.java
Patch:
@@ -106,7 +106,7 @@ class LeaderElectionExecutionCallback implements LeaderExecutionCallback {
     
         @Override
         public void execute() {
-            if (!jobNodeStorage.isJobNodeExisted(ElectionNode.LEADER_HOST) && (isForceElect || serverService.isServerReady())) {
+            if (!jobNodeStorage.isJobNodeExisted(ElectionNode.LEADER_HOST) && (isForceElect || serverService.isAvailableServer(localHostService.getIp()))) {
                 jobNodeStorage.fillEphemeralJobNode(ElectionNode.LEADER_HOST, localHostService.getIp());
             }
         }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -84,7 +84,7 @@ public void failoverIfNecessary() {
     }
     
     private boolean needFailover() {
-        return jobNodeStorage.isJobNodeExisted(FailoverNode.ITEMS_ROOT) && !jobNodeStorage.getJobNodeChildrenKeys(FailoverNode.ITEMS_ROOT).isEmpty() && serverService.isServerReady();
+        return jobNodeStorage.isJobNodeExisted(FailoverNode.ITEMS_ROOT) && !jobNodeStorage.getJobNodeChildrenKeys(FailoverNode.ITEMS_ROOT).isEmpty() && serverService.isLocalhostServerReady();
     }
     
     /**

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingListenerManager.java
Patch:
@@ -73,7 +73,7 @@ class ListenServersChangedJobListener extends AbstractJobListener {
         
         @Override
         protected void dataChanged(final CuratorFramework client, final TreeCacheEvent event, final String path) {
-            if (isServersCrashed(event, path) || serverNode.isServerDisabledPath(path)) {
+            if (isServersCrashed(event, path) || serverNode.isServerDisabledPath(path) || serverNode.isServerShutdownPath(path)) {
                 shardingService.setReshardingFlag();
             }
         }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacade.java
Patch:
@@ -77,7 +77,7 @@ public void clearPreviousServerStatus() {
      */
     public void registerStartUpInfo() {
         listenerManager.startAllListeners();
-        leaderElectionService.leaderElection();
+        leaderElectionService.leaderForceElection();
         configService.persistJobConfiguration();
         serverService.persistServerOnline();
         serverService.clearJobStoppedStatus();

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobAutoInitTest.java
Patch:
@@ -36,7 +36,7 @@ protected void setJobConfig(final JobConfiguration jobConfig) {
     public void autoJobInit() {
         setJobConfig(getJobConfig());
         initJob();
-        assertRegCenterCommonInfo();
+        assertRegCenterCommonInfoWithEnabled();
     }
     
     @After

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/simple/DisabledJobTest.java
Patch:
@@ -39,6 +39,6 @@ public void reset() {
     @Test
     public void assertJobInit() {
         initJob();
-        assertRegCenterCommonInfo();
+        assertRegCenterCommonInfoWithDisabled();
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -97,7 +97,7 @@ public void testClearPreviousServerStatus() {
     public void testRegisterStartUpInfo() {
         schedulerFacade.registerStartUpInfo();
         verify(listenerManager).startAllListeners();
-        verify(leaderElectionService).leaderElection();
+        verify(leaderElectionService).leaderForceElection();
         verify(configService).persistJobConfiguration();
         verify(serverService).persistServerOnline();
         verify(serverService).clearJobStoppedStatus();

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/AbstractElasticJob.java
Patch:
@@ -48,6 +48,7 @@ public final void execute(final JobExecutionContext context) throws JobExecution
             log.debug("Elastic job: previous job is still running, new job will start after previous job completed. Misfired job had recorded.");
             return;
         }
+        jobFacade.cleanPreviousExecutionInfo();
         try {
             jobFacade.beforeJobExecuted(shardingContext);
             //CHECKSTYLE:OFF

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/ElasticJobAssert.java
Patch:
@@ -52,6 +52,7 @@ public static void verifyForIsNotMisfire(final JobFacade jobFacade, final JobExe
         verify(jobFacade).checkMaxTimeDiffSecondsTolerable();
         verify(jobFacade).getShardingContext();
         verify(jobFacade).misfireIfNecessary(shardingContext.getShardingItems());
+        verify(jobFacade).cleanPreviousExecutionInfo();
         verify(jobFacade).beforeJobExecuted(shardingContext);
         verify(jobFacade).registerJobBegin(shardingContext);
         verify(jobFacade).registerJobCompleted(shardingContext);

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobScheduler.java
Patch:
@@ -45,7 +45,7 @@ public SpringJobScheduler(final CoordinatorRegistryCenter coordinatorRegistryCen
         super(coordinatorRegistryCenter, jobConfiguration, getTargetElasticJobListeners(elasticJobListeners));
     }
     
-    private static ElasticJobListener[] getTargetElasticJobListeners(ElasticJobListener[] elasticJobListeners) {
+    private static ElasticJobListener[] getTargetElasticJobListeners(final ElasticJobListener[] elasticJobListeners) {
         final ElasticJobListener[] result = new ElasticJobListener[elasticJobListeners.length];
         for (int i = 0; i < elasticJobListeners.length; i++) {
             result[i] = (ElasticJobListener) AopTargetUtils.getTarget(elasticJobListeners[i]);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/streaming/AbstractStreamingThroughputDataFlowElasticJobTest.java
Patch:
@@ -60,8 +60,8 @@ public void assertExecuteWhenFetchDataIsNotEmptyAndIsNotEligibleForJobRunning()
         when(getJobFacade().isEligibleForJobRunning()).thenReturn(false);
         getDataFlowElasticJob().execute(null);
         verify(getJobCaller()).fetchData();
-        verify(getJobCaller(), times(0)).processData(any());
+        verify(getJobCaller()).processData(any());
         ElasticJobAssert.verifyForIsNotMisfire(getJobFacade(), getShardingContext());
-        ElasticJobAssert.assertProcessCountStatistics(0, 0);
+        ElasticJobAssert.assertProcessCountStatistics(0, 1);
     }
 }

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/WithNamespaceAndListenerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.test.context.ContextConfiguration;
 
 @ContextConfiguration(locations = "classpath:META-INF/job/withNamespaceAndListener.xml")
-public final class WithNamespaceAndListenerTest extends AbstractJobSpringIntegrateTest {
+public class WithNamespaceAndListenerTest extends AbstractJobSpringIntegrateTest {
     
     public WithNamespaceAndListenerTest() {
         super("simpleElasticJob_namespace_listener", "throughputDataFlowElasticJob_namespace_listener");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -154,7 +154,6 @@ public void execute() {
             log.debug("Elastic job: failover job begin, crashed item:{}.", crashedItem);
             jobNodeStorage.fillEphemeralJobNode(FailoverNode.getExecutionFailoverNode(crashedItem), localHostService.getIp());
             jobNodeStorage.removeJobNodeIfExisted(FailoverNode.getItemsNode(crashedItem));
-            // TODO bug, failover时,重新触发作业,会导致重新分片. 需要考虑不重新触发作业,或者不重新分片
             JobRegistry.getInstance().getJobScheduler(jobConfiguration.getJobName()).triggerJob();
         }
     }

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/zookeeper/impl/CuratorRepositoryImpl.java
Patch:
@@ -142,7 +142,7 @@ public void update(final String znode, final Object value) {
     public void delete(final String znode) {
         try {
             if (null != SessionCuratorClient.getCuratorClient().checkExists().forPath(znode)) {
-                SessionCuratorClient.getCuratorClient().delete().forPath(znode);
+                SessionCuratorClient.getCuratorClient().delete().deletingChildrenIfNeeded().forPath(znode);
             }
         } catch (final NoNodeException ex) {
         //CHECKSTYLE:OFF

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/JobOperationService.java
Patch:
@@ -32,4 +32,6 @@ public interface JobOperationService {
     void resumeAllJobsByServer(String serverIp);
     
     void shutdownJob(String jobName, String serverIp);
+    
+    boolean removeJob(String jobName, String serverIp);
 }

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/ServerDimensionServiceImpl.java
Patch:
@@ -86,7 +86,9 @@ public Collection<JobServer> getJobs(final String serverIp) {
         List<String> jobs = curatorRepository.getChildren("/");
         Collection<JobServer> result = new ArrayList<>(jobs.size());
         for (String each : jobs) {
-            result.add(getJob(serverIp, each));
+            if (curatorRepository.checkExists(JobNodePath.getServerNodePath(each, serverIp))) {
+                result.add(getJob(serverIp, each));
+            }
         }
         return result;
     }

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/JobOperationService.java
Patch:
@@ -30,4 +30,6 @@ public interface JobOperationService {
     void stopAllJobsByServer(String serverIp);
     
     void resumeAllJobsByServer(String serverIp);
+    
+    void shutdownJob(String jobName, String serverIp);
 }

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/JobDimensionServiceImpl.java
Patch:
@@ -77,6 +77,7 @@ private JobStatus getJobStatus(final String jobName) {
                     manuallyDisabledCount++;
                     break;
                 case CRASHED:
+                case SHUTDOWN:
                     crashedCount++;
                     break;
                 default:
@@ -166,7 +167,8 @@ private ServerStatus getServerStatus(final String jobName, final String serverIp
         String status = curatorRepository.getData(JobNodePath.getServerNodePath(jobName, serverIp, "status"));
         boolean disabled = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "disabled"));
         boolean stopped = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "stoped"));
-        return ServerStatus.getServerStatus(status, disabled, stopped);
+        boolean shutdown = curatorRepository.checkExists(JobNodePath.getServerNodePath(jobName, serverIp, "shutdown"));
+        return ServerStatus.getServerStatus(status, disabled, stopped, shutdown);
     }
     
     @Override

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/env/TimeService.java
Patch:
@@ -23,7 +23,7 @@
  * @author zhangliang
  */
 public class TimeService {
-
+    
     /**
      * 获取当前时间的毫秒数.
      * 

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/main/JobMain.java
Patch:
@@ -30,7 +30,7 @@
 
 public final class JobMain {
     
-    private final ZookeeperConfiguration zkConfig = new ZookeeperConfiguration("localhost:4181", "elasticjob-example", 1000, 3000, 3);
+    private final ZookeeperConfiguration zkConfig = new ZookeeperConfiguration("localhost:2181", "elasticjob-example", 1000, 3000, 3);
     
     private final CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(zkConfig);
     
@@ -47,8 +47,8 @@ public static void main(final String[] args) {
     }
     
     public void init() {
-        zkConfig.setNestedPort(4181);
-        zkConfig.setNestedDataDir(String.format("target/test_zk_data/%s/", System.nanoTime()));
+//        zkConfig.setNestedPort(4181);
+//        zkConfig.setNestedDataDir(String.format("target/test_zk_data/%s/", System.nanoTime()));
         regCenter.init();
         new JobScheduler(regCenter, jobConfig1, new SimpleDistributeOnceElasticJobListener()).init();
         new JobScheduler(regCenter, jobConfig2).init();

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/DashboardController.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/JobController.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/JobOperationController.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/RegistryCenterController.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/controller/ServerController.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/ExecutionInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/JobBriefInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/JobServer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/JobSettings.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/RegistryCenterClient.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/RegistryCenterConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/RegistryCenterConfigurations.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/ServerBriefInfo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/exception/JobConsoleException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/exception/NoRegistryCenterException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/interceptor/CuratorSessionClientInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/xml/RegistryCenterConfigurationsXmlRepository.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/xml/XmlRepository.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/xml/impl/AbstractXmlRepositoryImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/xml/impl/RegistryCenterConfigurationsXmlRepositoryImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/zookeeper/CuratorRepository.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/repository/zookeeper/impl/CuratorRepositoryImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/security/WwwAuthFilter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/JobDimensionService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/JobOperationService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/RegistryCenterService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/ServerDimensionService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/JobDimensionServiceImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/JobOperationServiceImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/RegistryCenterServiceImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/service/impl/ServerDimensionServiceImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/util/HomeFolder.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/util/JobNodePath.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/util/SessionCuratorClient.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/test/java/com/dangdang/ddframe/job/console/AllJobConsoleTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/test/java/com/dangdang/ddframe/job/console/util/HomeFolderTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-console/src/test/java/com/dangdang/ddframe/job/console/util/JobNodePathTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractOneOffElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractPerpetualElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractSequencePerpetualElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/DataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/ElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobExecutionMultipleShardingContext.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobExecutionSingleShardingContext.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobScheduler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -58,7 +58,7 @@ public class JobScheduler {
     private final CoordinatorRegistryCenter coordinatorRegistryCenter;
     
     private final SchedulerFacade schedulerFacade;
-
+    
     private final JobDetail jobDetail;
     
     private Scheduler scheduler;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/Stoppable.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/listener/AbstractDistributeOnceElasticJobListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/listener/ElasticJobListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/exception/JobConflictException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/exception/JobException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/exception/JobShardingStrategyClassConfigurationException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/exception/JobTimeoutException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/exception/ShardingItemParametersException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/exception/TimeDiffIntolerableException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/ElectionListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/ElectionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/LeaderElectionService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/env/LocalHostService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/env/TimeService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionContextService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/AbstractElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/AbstractJobExecutionShardingContext.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/AbstractBatchDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/AbstractDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/AbstractIndividualDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/BatchProcessable.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/IndividualProcessable.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/listener/AbstractJobListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/listener/AbstractListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/listener/ListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/monitor/MonitorService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/offset/OffsetNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/offset/OffsetService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/JobRegistry.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/JobTriggerListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacade.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/server/JobOperationListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/server/ServerNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/server/ServerService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/server/ServerStatus.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingListenerManager.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingNode.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/strategy/JobShardingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/statistics/ProcessCountJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/statistics/ProcessCountStatistics.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/statistics/StatisticsService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/storage/JobNodePath.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/storage/JobNodeStorage.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/storage/LeaderExecutionCallback.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/storage/TransactionExecutionCallback.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/util/BlockUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/util/ItemUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/util/SensitiveInfoUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/AbstractBatchSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/AbstractBatchThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/AbstractIndividualSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/AbstractIndividualThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/simple/AbstractSimpleElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/sharding/strategy/AverageAllocationJobShardingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/sharding/strategy/OdevitySortByNameJobShardingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/schedule/JobController.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/base/AbstractRegistryCenterConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/base/CoordinatorRegistryCenter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/base/RegistryCenter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/exception/LocalPropertiesFileNotFoundException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/exception/RegException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/exception/RegExceptionHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/NestedZookeeperServers.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/AllTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/AllJobTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/AllApiTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/JobExecutionMultipleShardingContextTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/JobSchedulerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/listener/DistributeOnceElasticJobListenerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/listener/fixture/ElasticJobListenerCaller.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/listener/fixture/TestDistributeOnceElasticJobListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/listener/fixture/TestElasticJobListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/exception/AllExceptionTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/exception/JobConflictExceptionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/exception/JobTimeoutExceptionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/exception/TimeDiffIntolerableExceptionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/fixture/TestJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobAutoInitTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AllIntegrateTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/WaitingUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/sequence/OneOffSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/sequence/StreamingSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/throughput/OneOffThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/throughput/StreamingThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteFailure.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteThrowsException.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/simple/SimpleElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/OneOffSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/StreamingSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/OneOffThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteFailureTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForMultipleThreadsTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForNotMonitorTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForStopedTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/simple/DisabledJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/simple/SimpleElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/AllInternalTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/config/ConfigurationListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/config/ConfigurationNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/config/ConfigurationServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/election/ElectionListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/election/ElectionNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/election/LeaderElectionServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/env/LocalHostServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/env/TimeServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionContextServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/failover/FailoverListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/failover/FailoverNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/failover/FailoverServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/guarantee/GuaranteeServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/listener/JobListenerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/listener/ListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/listener/fixture/FooJobListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/monitor/MonitorServiceDisableTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/monitor/MonitorServiceEnableTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/offset/OffsetNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/offset/OffsetServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/JobRegistryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/JobTriggerListenerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/schedule/SchedulerFacadeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/server/JobOperationListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/server/ServerNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/server/ServerServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/sharding/ShardingListenerManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/sharding/ShardingNodeTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/sharding/ShardingServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/statistics/ProcessCountJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/statistics/ProcessCountStatisticsTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/statistics/StatisticsServiceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/storage/JobNodePathTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/storage/JobNodeStorageTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/util/ItemUtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/util/SensitiveInfoUtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/AllPluginTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/ElasticJobAssert.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/AbstractDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/AbstractSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/streaming/AbstractStreamingSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/streaming/StreamingBatchSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/streaming/StreamingIndividualSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/unstreaming/AbstractUnstreamingSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/unstreaming/UnstreamingBatchSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/sequence/unstreaming/UnstreamingIndividualSequenceDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/streaming/AbstractStreamingThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/streaming/StreamingBatchThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/streaming/StreamingIndividualThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/unstreaming/AbstractUnstreamingThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/unstreaming/UnstreamingBatchThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/throughput/unstreaming/UnstreamingIndividualThroughputDataFlowElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooSimpleElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingBatchSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingBatchThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingIndividualSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingIndividualThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingBatchSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingBatchThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingIndividualSequenceDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingIndividualThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/JobCaller.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/simple/SimpleElasticJobTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/sharding/strategy/AverageAllocationJobShardingStrategyTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/sharding/strategy/OdevitySortByNameJobShardingStrategyTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/sharding/strategy/RotateServerByNameJobShardingStrategyTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/AbstractNestedZookeeperBaseTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/AllRegTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/exception/LocalPropertiesFileNotFoundExceptionTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/exception/RegExceptionHandlerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/NestedZookeeperServersTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperConfigurationTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterForAuthTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterForLocalPropertiesTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterMiscellaneousTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterNestedTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterQueryWithCacheTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterQueryWithoutCacheTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/job/SequenceDataFlowJobDemo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/job/SimpleJobDemo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/job/ThroughputDataFlowJobDemo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/main/JobMain.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/fixture/entity/Foo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/fixture/entity/FooStatus.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/fixture/repository/FooRepository.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/job/SequenceDataFlowJobDemo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/job/SimpleJobDemo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/job/ThroughputDataFlowJobDemo.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/main/SpringJobMainWithoutNamespace.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/main/SpringJobMainWthNamespace.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/main/SpringJobMainWthNamespaceAndListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-example/src/test/java/com/dangdang/example/elasticjob/fixture/repository/FooRepositoryTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/JobBeanDefinitionParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/JobNamespaceHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobController.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobFactory.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/schedule/SpringJobScheduler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/util/AopTargetUtils.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/PlaceholderBeanDefinitionParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/RegNamespaceHandler.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/SpringZookeeperConfigurationDto.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/SpringZookeeperRegistryCenter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/ZookeeperBeanDefinitionParser.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/placeholder/PlaceholderResolved.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/placeholder/RegistryPropertySource.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/placeholder/RegistryPropertySources.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/AllTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/AllSpringJobTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/FooService.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/FooServiceImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/SimpleElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/SimpleListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/SimpleOnceListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/ThroughputDataFlowElasticJob.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/AbstractJobSpringIntegrateTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/WithNamespaceAndListenerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/WithNamespaceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/WithoutNamespaceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/AllSpringRegTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/fixture/PlaceholderAnnotationBean.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/fixture/PlaceholderXmlBean.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/spring/AbstractRegSpringIntegrateTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/spring/WithNamespaceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/spring/WithoutNamespaceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/spring/placeholder/PlaceholderResolvedForNoPlaceholderConfigurerTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/spring/placeholder/PlaceholderResolvedTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/reg/spring/placeholder/RegPlaceholderSpringIntegrateTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/test/AbstractZookeeperJUnit4SpringContextTests.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/test/NestedZookeeperTestExecutionListener.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 1999-2015 dangdang.com.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobScheduler.java
Patch:
@@ -64,7 +64,7 @@ public class JobScheduler {
     
     private static final String SCHEDULER_INSTANCE_NAME_SUFFIX = "Scheduler";
     
-    private static final String CRON_TRIGGER_INDENTITY_SUFFIX = "Trigger";
+    private static final String CRON_TRIGGER_IDENTITY_SUFFIX = "Trigger";
     
     private final JobConfiguration jobConfiguration;
     
@@ -195,7 +195,7 @@ private CronTrigger createTrigger(final String cronExpression) {
             cronScheduleBuilder = cronScheduleBuilder.withMisfireHandlingInstructionDoNothing();
         }
         return TriggerBuilder.newTrigger()
-                .withIdentity(Joiner.on("_").join(jobConfiguration.getJobName(), CRON_TRIGGER_INDENTITY_SUFFIX))
+                .withIdentity(Joiner.on("_").join(jobConfiguration.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX))
                 .withSchedule(cronScheduleBuilder).build();
     }
     
@@ -311,7 +311,7 @@ public void shutdown() {
      */
     public void rescheduleJob(final String cronExpression) {
         try {
-            scheduler.rescheduleJob(TriggerKey.triggerKey(Joiner.on("_").join(jobConfiguration.getJobName(), CRON_TRIGGER_INDENTITY_SUFFIX)), createTrigger(cronExpression));
+            scheduler.rescheduleJob(TriggerKey.triggerKey(Joiner.on("_").join(jobConfiguration.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX)), createTrigger(cronExpression));
         } catch (final SchedulerException ex) {
             throw new JobException(ex);
         } 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/LeaderElectionService.java
Patch:
@@ -59,12 +59,12 @@ public void leaderElection() {
      * @return 当前节点是否是主节点
      */
     public Boolean isLeader() {
-        String locaLhostIp = localHostService.getIp();
+        String localHostIp = localHostService.getIp();
         while (!hasLeader()) {
-            log.info("Elastic job: leader node is electing, waiting for 100 ms at server '{}'", locaLhostIp);
+            log.info("Elastic job: leader node is electing, waiting for 100 ms at server '{}'", localHostIp);
             BlockUtils.waitingShortTime();
         }
-        return locaLhostIp.equals(jobNodeStorage.getJobNodeData(ElectionNode.LEADER_HOST));
+        return localHostIp.equals(jobNodeStorage.getJobNodeData(ElectionNode.LEADER_HOST));
     }
     
     /**

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/dataflow/DataFlowType.java
Patch:
@@ -6,7 +6,7 @@
  * @author zhangliang
  */
 public enum DataFlowType {
-    
-    THROUGHTPUT, 
+
+    THROUGHPUT, 
     SEQUENCE
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/monitor/MonitorService.java
Patch:
@@ -106,7 +106,7 @@ private void process(final Socket socket) {
             if (null != cmdLine && DUMP_COMMAND.equalsIgnoreCase(cmdLine)) {
                 List<String> result = new ArrayList<>();
                 dumpDirectly("/" + jobName, result);
-                outputMessage(writer, Joiner.on("\n").join(SensitiveInfoUtils.filterSenstiveIps(result)) + "\n");
+                outputMessage(writer, Joiner.on("\n").join(SensitiveInfoUtils.filterSensitiveIps(result)) + "\n");
             }
         } catch (final IOException ex) {
             log.warn(ex.getMessage());

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/util/SensitiveInfoUtils.java
Patch:
@@ -39,7 +39,7 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class SensitiveInfoUtils {
     
-    public static List<String> filterSenstiveIps(final List<String> result) {
+    public static List<String> filterSensitiveIps(final List<String> result) {
         final Map<String, String> fakeIpMap = new HashMap<>();
         final String fakeIpSample = "ip";
         final AtomicInteger step = new AtomicInteger();

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -170,9 +170,9 @@ public String get(final String key) {
         if (null == cache) {
             return getDirectly(key);
         }
-        ChildData resultIncache = cache.getCurrentData(key);
-        if (null != resultIncache) {
-            return null == resultIncache.getData() ? null : new String(resultIncache.getData(), Charset.forName("UTF-8"));
+        ChildData resultInCache = cache.getCurrentData(key);
+        if (null != resultInCache) {
+            return null == resultInCache.getData() ? null : new String(resultInCache.getData(), Charset.forName("UTF-8"));
         }
         return getDirectly(key);
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/UnstreamingBatchThroughputDataFlowElasticJobTest.java
Patch:
@@ -164,7 +164,7 @@ public void assertExecuteWhenFetchDataIsNotEmptyAndConcurrentDataProcessThreadCo
     }
     
     @Test
-    public void assertExecuteWhenFetchDataIsNotEmptyForMultipleTherad() throws JobExecutionException {
+    public void assertExecuteWhenFetchDataIsNotEmptyForMultipleThread() throws JobExecutionException {
         when(jobCaller.fetchData()).thenReturn(Arrays.<Object>asList(1, 2, 3, 4));
         when(jobCaller.processData(1)).thenReturn(true);
         when(jobCaller.processData(2)).thenReturn(true);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/dataflow/UnstreamingIndividualThroughputDataFlowElasticJobTest.java
Patch:
@@ -164,7 +164,7 @@ public void assertExecuteWhenFetchDataIsNotEmptyAndConcurrentDataProcessThreadCo
     }
     
     @Test
-    public void assertExecuteWhenFetchDataIsNotEmptyForMultipleTherad() throws JobExecutionException {
+    public void assertExecuteWhenFetchDataIsNotEmptyForMultipleThread() throws JobExecutionException {
         when(jobCaller.fetchData()).thenReturn(Arrays.<Object>asList(1, 2, 3, 4));
         when(jobCaller.processData(1)).thenReturn(true);
         when(jobCaller.processData(2)).thenReturn(true);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/simple/SimpleElasticJobTest.java
Patch:
@@ -85,7 +85,7 @@ public void setUp() throws NoSuchFieldException {
     }
     
     @Test(expected = TimeDiffIntolerableException.class)
-    public void assertExecuteWhenCheckMaxTimeDiffSecondsUntolerable() throws JobExecutionException {
+    public void assertExecuteWhenCheckMaxTimeDiffSecondsIntolerable() throws JobExecutionException {
         doThrow(TimeDiffIntolerableException.class).when(configService).checkMaxTimeDiffSecondsTolerable();
         try {
             simpleElasticJob.execute(null);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/sharding/strategy/OdevitySortByNameJobShardingStrategyTest.java
Patch:
@@ -35,7 +35,7 @@ public final class OdevitySortByNameJobShardingStrategyTest {
     private OdevitySortByNameJobShardingStrategy odevitySortByNameJobShardingStrategy = new OdevitySortByNameJobShardingStrategy();
     
     @Test
-    public void assertshardingByAsc() {
+    public void assertShardingByAsc() {
         Map<String, List<Integer>> expected = new LinkedHashMap<>(3);
         expected.put("host0", Collections.singletonList(0));
         expected.put("host1", Collections.singletonList(1));
@@ -45,7 +45,7 @@ public void assertshardingByAsc() {
     }
     
     @Test
-    public void assertshardingByDesc() {
+    public void assertShardingByDesc() {
         Map<String, List<Integer>> expected = new LinkedHashMap<>(3);
         expected.put("host2", Collections.singletonList(0));
         expected.put("host1", Collections.singletonList(1));

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/JobBeanDefinitionParser.java
Patch:
@@ -87,8 +87,8 @@ private List<BeanDefinition> createJobListeners(final Element element) {
             try {
                 Class listenerClass = Class.forName(className);
                 if (AbstractDistributeOnceElasticJobListener.class.isAssignableFrom(listenerClass)) {
-                    factory.addConstructorArgValue(each.getAttribute("startedTimeoutMillseconds"));
-                    factory.addConstructorArgValue(each.getAttribute("completedTimeoutMillseconds"));
+                    factory.addConstructorArgValue(each.getAttribute("startedTimeoutMilliseconds"));
+                    factory.addConstructorArgValue(each.getAttribute("completedTimeoutMilliseconds"));
                 }
             } catch (final ClassNotFoundException ex) {
                 throw new RuntimeException(ex);

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/FooServiceImpl.java
Patch:
@@ -19,7 +19,8 @@
 
 public class FooServiceImpl implements FooService {
     
+    @Override
     public String foo() {
-        return "this is foo."; 
+        return "this is fooService."; 
     }
 }

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/AllSpringJobTests.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.dangdang.ddframe.job;
 
+import com.dangdang.ddframe.job.spring.WithNamespaceAndListenerTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
@@ -26,7 +27,8 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
-    WithNamespaceTest.class, 
+    WithNamespaceTest.class,
+    WithNamespaceAndListenerTest.class,
     WithoutNamespaceTest.class
     })
 public class AllSpringJobTests {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -321,11 +321,11 @@ public void addCacheData(final String cachePath) {
         //CHECKSTYLE:ON
             RegExceptionHandler.handleException(ex);
         }
-        caches.put(cachePath, cache);
+        caches.put(cachePath + "/", cache);
     }
     
     @Override
     public Object getRawCache(final String cachePath) {
-        return caches.get(cachePath);
+        return caches.get(cachePath + "/");
     }
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/env/LocalHostService.java
Patch:
@@ -26,7 +26,7 @@
 import com.dangdang.ddframe.job.exception.JobException;
 
 /**
- * 获取真实本机网络的实现类.
+ * 获取真实本机网络的服务.
  * 
  * @author zhangliang
  */

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/api/AllApiTests.java
Patch:
@@ -17,14 +17,16 @@
 
 package com.dangdang.ddframe.job.api;
 
+import com.dangdang.ddframe.job.api.listener.DistributeOnceElasticJobListenerTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 
 @RunWith(Suite.class)
 @SuiteClasses({
     JobExecutionMultipleShardingContextTest.class, 
-    JobSchedulerTest.class
+    JobSchedulerTest.class,
+    DistributeOnceElasticJobListenerTest.class
     })
 public final class AllApiTests {
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/exception/AllExceptionTests.java
Patch:
@@ -24,7 +24,8 @@
 @RunWith(Suite.class)
 @SuiteClasses({
     JobConflictExceptionTest.class, 
-    TimeDiffIntolerableExceptionTest.class
+    TimeDiffIntolerableExceptionTest.class, 
+    JobTimeoutExceptionTest.class
     })
 public final class AllExceptionTests {
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobTest.java
Patch:
@@ -48,7 +48,7 @@ public void assertJobInit() {
             WaitingUtils.waitingShortTime();
         }
         assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
+        assertTrue(ProcessCountStatistics.getProcessSuccessCount(getJobName()) >= 10);
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/sharding/ShardingService.java
Patch:
@@ -110,7 +110,7 @@ public void shardingIfNecessary() {
     }
     
     private void blockUntilShardingCompleted() {
-        while (jobNodeStorage.isJobNodeExisted(ShardingNode.NECESSARY) || jobNodeStorage.isJobNodeExisted(ShardingNode.PROCESSING)) {
+        while (!leaderElectionService.isLeader() && (jobNodeStorage.isJobNodeExisted(ShardingNode.NECESSARY) || jobNodeStorage.isJobNodeExisted(ShardingNode.PROCESSING))) {
             log.debug("Elastic job: sleep short time until sharding completed.");
             BlockUtils.waitingShortTime();
         }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractOneOffElasticJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.api;
 
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 
 /**
  * 简单的分布式作业.
@@ -29,7 +29,7 @@
  * <p>
  * <strong>包结构调整, 作业类型全部迁移至plugin包. 未来版本将删除, 请从旧版本升级的程序升级.</strong>
  * </p>
- * @see com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob
+ * @see com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob
  * 
  * @author zhangliang
  * @author caohao

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractPerpetualElasticJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.api;
 
-import com.dangdang.ddframe.job.plugin.job.type.AbstractThroughputDataFlowElasticJob;
+import com.dangdang.ddframe.job.internal.job.dataflow.AbstractIndividualDataFlowElasticJob;
 
 /**
  * 不断获取最新数据的高吞吐量处理数据流程作业.
@@ -31,14 +31,14 @@
  * <p>
  * <strong>包结构调整, 作业类型全部迁移至plugin包. 未来版本将删除, 请从旧版本升级的程序升级.</strong>
  * </p>
- * @see com.dangdang.ddframe.job.plugin.job.type.AbstractThroughputDataFlowElasticJob
+ * @see com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractThroughputIndividualDataFlowElasticJob
  * 
  * @author zhangliang
  * 
  * @param <T> 数据流作业处理的数据实体类型
  */
 @Deprecated
-public abstract class AbstractPerpetualElasticJob<T> extends AbstractThroughputDataFlowElasticJob<T> {
+public abstract class AbstractPerpetualElasticJob<T> extends AbstractIndividualDataFlowElasticJob<T, JobExecutionMultipleShardingContext> {
     
     @Override
     public boolean isStreamingProcess() {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/AbstractSequencePerpetualElasticJob.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.dangdang.ddframe.job.api;
 
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSequenceDataFlowElasticJob;
+import com.dangdang.ddframe.job.internal.job.dataflow.AbstractIndividualDataFlowElasticJob;
 
 /**
  * 不断获取最新数据并保证同一分片顺序性的处理数据流程作业.
@@ -32,14 +32,14 @@
  * <p>
  * <strong>包结构调整, 作业类型全部迁移至plugin包. 未来版本将删除, 请从旧版本升级的程序升级.</strong>
  * </p>
- * @see com.dangdang.ddframe.job.plugin.job.type.AbstractSequenceDataFlowElasticJob
+ * @see com.dangdang.ddframe.job.internal.job.dataflow.AbstractIndividualDataFlowElasticJob
  * 
  * @author zhangliang
  * 
  * @param <T> 数据流作业处理的数据实体类型
  */
 @Deprecated
-public abstract class AbstractSequencePerpetualElasticJob<T> extends AbstractSequenceDataFlowElasticJob<T> {
+public abstract class AbstractSequencePerpetualElasticJob<T> extends AbstractIndividualDataFlowElasticJob<T, JobExecutionSingleShardingContext> {
     
     @Override
     public boolean isStreamingProcess() {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/simple/AbstractSimpleElasticJob.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.plugin.job.type;
+package com.dangdang.ddframe.job.plugin.job.type.simple;
 
 import lombok.extern.slf4j.Slf4j;
 

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/sequence/OneOffSequenceDataFlowElasticJob.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.concurrent.CopyOnWriteArraySet;
 
 import com.dangdang.ddframe.job.api.JobExecutionSingleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSequenceDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualSequenceDataFlowElasticJob;
 
-public final class OneOffSequenceDataFlowElasticJob extends AbstractSequenceDataFlowElasticJob<String> {
+public final class OneOffSequenceDataFlowElasticJob extends AbstractIndividualSequenceDataFlowElasticJob<String> {
     
     private static volatile Set<String> processedData = new CopyOnWriteArraySet<>();
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/sequence/StreamingSequenceDataFlowElasticJob.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.concurrent.CopyOnWriteArraySet;
 
 import com.dangdang.ddframe.job.api.JobExecutionSingleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSequenceDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualSequenceDataFlowElasticJob;
 
-public final class StreamingSequenceDataFlowElasticJob extends AbstractSequenceDataFlowElasticJob<String> {
+public final class StreamingSequenceDataFlowElasticJob extends AbstractIndividualSequenceDataFlowElasticJob<String> {
     
     private static volatile Set<String> processedData = new CopyOnWriteArraySet<>();
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/throughput/OneOffThroughputDataFlowElasticJob.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.concurrent.CopyOnWriteArraySet;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractThroughputDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualThroughputDataFlowElasticJob;
 
-public final class OneOffThroughputDataFlowElasticJob extends AbstractThroughputDataFlowElasticJob<String> {
+public final class OneOffThroughputDataFlowElasticJob extends AbstractIndividualThroughputDataFlowElasticJob<String> {
     
     private static volatile Set<String> processedData = new CopyOnWriteArraySet<>();
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/dataflow/throughput/StreamingThroughputDataFlowElasticJob.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.concurrent.CopyOnWriteArraySet;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractThroughputDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualThroughputDataFlowElasticJob;
 
-public final class StreamingThroughputDataFlowElasticJob extends AbstractThroughputDataFlowElasticJob<String> {
+public final class StreamingThroughputDataFlowElasticJob extends AbstractIndividualThroughputDataFlowElasticJob<String> {
     
     private static volatile Set<String> processedData = new CopyOnWriteArraySet<>();
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/fixture/simple/SimpleElasticJob.java
Patch:
@@ -20,7 +20,7 @@
 import lombok.Getter;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 
 public final class SimpleElasticJob extends AbstractSimpleElasticJob {
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/OneOffSequenceDataFlowElasticJobTest.java
Patch:
@@ -54,7 +54,7 @@ public void assertJobInit() {
             WaitingUtils.waitingShortTime();
         }
         assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(30));
+        assertTrue(ProcessCountStatistics.getProcessSuccessCount(getJobName()) >= 30);
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForMultipleThreadsTest.java
Patch:
@@ -54,7 +54,7 @@ public void assertJobInit() {
             WaitingUtils.waitingShortTime();
         }
         assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
+        assertTrue(ProcessCountStatistics.getProcessSuccessCount(getJobName()) >= 10);
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForNotMonitorTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertThat;
 
 import org.junit.After;
@@ -54,7 +55,7 @@ public void assertJobInit() {
             WaitingUtils.waitingShortTime();
         }
         assertFalse(getRegCenter().isExisted("/" + getJobName() + "/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
+        assertTrue(ProcessCountStatistics.getProcessSuccessCount(getJobName()) >= 10);
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooSimpleElasticJob.java
Patch:
@@ -20,7 +20,7 @@
 import org.quartz.JobExecutionException;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 
 import lombok.RequiredArgsConstructor;
 

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingIndividualSequenceDataFlowElasticJob.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.List;
 
 import com.dangdang.ddframe.job.api.JobExecutionSingleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSequenceDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualSequenceDataFlowElasticJob;
 
 import lombok.RequiredArgsConstructor;
 
 @RequiredArgsConstructor
-public final class FooStreamingSequenceDataFlowElasticJob extends AbstractSequenceDataFlowElasticJob<Object> {
+public final class FooStreamingIndividualSequenceDataFlowElasticJob extends AbstractIndividualSequenceDataFlowElasticJob<Object> {
     
     private final JobCaller jobCaller;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooStreamingIndividualThroughputDataFlowElasticJob.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.List;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractThroughputDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualThroughputDataFlowElasticJob;
 
 import lombok.RequiredArgsConstructor;
 
 @RequiredArgsConstructor
-public final class FooStreamingThroughputDataFlowElasticJob extends AbstractThroughputDataFlowElasticJob<Object> {
+public final class FooStreamingIndividualThroughputDataFlowElasticJob extends AbstractIndividualThroughputDataFlowElasticJob<Object> {
     
     private final JobCaller jobCaller;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingIndividualSequenceDataFlowElasticJob.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.List;
 
 import com.dangdang.ddframe.job.api.JobExecutionSingleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSequenceDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualSequenceDataFlowElasticJob;
 
 import lombok.RequiredArgsConstructor;
 
 @RequiredArgsConstructor
-public final class FooUnstreamingSequenceDataFlowElasticJob extends AbstractSequenceDataFlowElasticJob<Object> {
+public final class FooUnstreamingIndividualSequenceDataFlowElasticJob extends AbstractIndividualSequenceDataFlowElasticJob<Object> {
     
     private final JobCaller jobCaller;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/fixture/FooUnstreamingIndividualThroughputDataFlowElasticJob.java
Patch:
@@ -22,12 +22,12 @@
 import org.quartz.JobExecutionException;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractThroughputDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualThroughputDataFlowElasticJob;
 
 import lombok.RequiredArgsConstructor;
 
 @RequiredArgsConstructor
-public final class FooUnstreamingThroughputDataFlowElasticJob extends AbstractThroughputDataFlowElasticJob<Object> {
+public final class FooUnstreamingIndividualThroughputDataFlowElasticJob extends AbstractIndividualThroughputDataFlowElasticJob<Object> {
     
     private final JobCaller jobCaller;
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/simple/SimpleElasticJobTest.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.plugin.job.type;
+package com.dangdang.ddframe.job.plugin.job.type.simple;
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -44,6 +44,7 @@
 import com.dangdang.ddframe.job.internal.job.AbstractElasticJob;
 import com.dangdang.ddframe.job.internal.offset.OffsetService;
 import com.dangdang.ddframe.job.internal.sharding.ShardingService;
+import com.dangdang.ddframe.job.plugin.job.type.ElasticJobAssert;
 import com.dangdang.ddframe.job.plugin.job.type.fixture.FooSimpleElasticJob;
 import com.dangdang.ddframe.job.plugin.job.type.fixture.JobCaller;
 

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/job/SequenceDataFlowJobDemo.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.List;
 
 import com.dangdang.ddframe.job.api.JobExecutionSingleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSequenceDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualSequenceDataFlowElasticJob;
 import com.dangdang.example.elasticjob.fixture.entity.Foo;
 import com.dangdang.example.elasticjob.fixture.repository.FooRepository;
 import com.dangdang.example.elasticjob.utils.PrintContext;
 
-public class SequenceDataFlowJobDemo extends AbstractSequenceDataFlowElasticJob<Foo> {
+public class SequenceDataFlowJobDemo extends AbstractIndividualSequenceDataFlowElasticJob<Foo> {
     
     private PrintContext printContext = new PrintContext(SequenceDataFlowJobDemo.class);
     

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/job/SimpleJobDemo.java
Patch:
@@ -18,7 +18,7 @@
 package com.dangdang.example.elasticjob.core.job;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 import com.dangdang.example.elasticjob.fixture.repository.FooRepository;
 import com.dangdang.example.elasticjob.utils.PrintContext;
 

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/job/SimpleJobDemo.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.stereotype.Component;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 import com.dangdang.example.elasticjob.fixture.repository.FooRepository;
 import com.dangdang.example.elasticjob.utils.PrintContext;
 

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/job/ThroughputDataFlowJobDemo.java
Patch:
@@ -24,13 +24,13 @@
 import org.springframework.stereotype.Component;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractThroughputDataFlowElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.dataflow.AbstractIndividualThroughputDataFlowElasticJob;
 import com.dangdang.example.elasticjob.fixture.entity.Foo;
 import com.dangdang.example.elasticjob.fixture.repository.FooRepository;
 import com.dangdang.example.elasticjob.utils.PrintContext;
 
 @Component
-public class ThroughputDataFlowJobDemo extends AbstractThroughputDataFlowElasticJob<Foo> {
+public class ThroughputDataFlowJobDemo extends AbstractIndividualThroughputDataFlowElasticJob<Foo> {
     
     private PrintContext printContext = new PrintContext(ThroughputDataFlowJobDemo.class);
     
@@ -52,7 +52,7 @@ public boolean processData(final JobExecutionMultipleShardingContext context, fi
         fooRepository.setInactive(data.getId());
         return true;
     }
-
+    
     @Override
     public boolean isStreamingProcess() {
         return true;

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/SimpleElasticJob.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.Setter;
 
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
-import com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob;
+import com.dangdang.ddframe.job.plugin.job.type.simple.AbstractSimpleElasticJob;
 
 public final class SimpleElasticJob extends AbstractSimpleElasticJob {
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/AllTests.java
Patch:
@@ -23,8 +23,9 @@
 import org.junit.runners.Suite.SuiteClasses;
 
 import com.dangdang.ddframe.job.AllJobTests;
+import com.dangdang.ddframe.reg.AbstractNestedZookeeperBaseTest;
 import com.dangdang.ddframe.reg.AllRegTests;
-import com.dangdang.ddframe.test.NestedZookeeperServers;
+import com.dangdang.ddframe.reg.zookeeper.NestedZookeeperServers;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
@@ -39,6 +40,6 @@ public final class AllTests {
     
     @AfterClass
     public static void clear() {
-        NestedZookeeperServers.getInstance().closeServer();
+        NestedZookeeperServers.getInstance().closeServer(AbstractNestedZookeeperBaseTest.PORT);
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/OneOffSequenceDataFlowElasticJobTest.java
Patch:
@@ -27,9 +27,9 @@
 
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.sequence.OneOffSequenceDataFlowElasticJob;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class OneOffSequenceDataFlowElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -53,7 +53,7 @@ public void assertJobInit() {
         while (!OneOffSequenceDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(30));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/StreamingSequenceDataFlowElasticJobTest.java
Patch:
@@ -26,9 +26,9 @@
 import org.junit.Test;
 
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.sequence.StreamingSequenceDataFlowElasticJob;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class StreamingSequenceDataFlowElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -47,7 +47,7 @@ public void assertJobInit() {
         while (!StreamingSequenceDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(30));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/OneOffThroughputDataFlowElasticJobTest.java
Patch:
@@ -27,9 +27,9 @@
 
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.OneOffThroughputDataFlowElasticJob;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class OneOffThroughputDataFlowElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -53,7 +53,7 @@ public void assertJobInit() {
         while (!OneOffThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteFailureTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.junit.Test;
 
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.StreamingThroughputDataFlowElasticJobForExecuteFailure;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class StreamingThroughputDataFlowElasticJobForExecuteFailureTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -48,7 +48,7 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJobForExecuteFailure.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(0));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), not(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.junit.Test;
 
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.StreamingThroughputDataFlowElasticJobForExecuteThrowsException;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class StreamingThroughputDataFlowElasticJobForExecuteThrowsExceptionTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -48,7 +48,7 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJobForExecuteThrowsException.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(0));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), not(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForMultipleThreadsTest.java
Patch:
@@ -27,9 +27,9 @@
 
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.StreamingThroughputDataFlowElasticJob;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class StreamingThroughputDataFlowElasticJobForMultipleThreadsTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -53,7 +53,7 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForNotMonitorTest.java
Patch:
@@ -27,9 +27,9 @@
 
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.StreamingThroughputDataFlowElasticJob;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class StreamingThroughputDataFlowElasticJobForNotMonitorTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -53,7 +53,7 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertFalse(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertFalse(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForStopedTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.junit.Test;
 
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.StreamingThroughputDataFlowElasticJob;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class StreamingThroughputDataFlowElasticJobForStopedTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -44,8 +44,8 @@ public void assertClearStopJobStatusWhenRestartingJob() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        REG_CENTER.persist("/" + getJobName() + "/servers/" + getLocalHostService().getIp() + "/stoped", "");
+        getRegCenter().persist("/" + getJobName() + "/servers/" + getLocalHostService().getIp() + "/stoped", "");
         initJob();
-        assertFalse(REG_CENTER.isExisted("/" + getJobName() + "/servers/" + getLocalHostService().getIp() + "/stoped"));
+        assertFalse(getRegCenter().isExisted("/" + getJobName() + "/servers/" + getLocalHostService().getIp() + "/stoped"));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobTest.java
Patch:
@@ -26,9 +26,9 @@
 import org.junit.Test;
 
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.dataflow.throughput.StreamingThroughputDataFlowElasticJob;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class StreamingThroughputDataFlowElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -47,7 +47,7 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
         assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
         assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/simple/SimpleElasticJobTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.junit.Test;
 
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobAutoInitTest;
+import com.dangdang.ddframe.job.integrate.WaitingUtils;
 import com.dangdang.ddframe.job.integrate.fixture.simple.SimpleElasticJob;
-import com.dangdang.ddframe.test.WaitingUtils;
 
 public final class SimpleElasticJobTest extends AbstractBaseStdJobAutoInitTest {
     
@@ -44,6 +44,6 @@ public void assertJobInit() {
         while (!SimpleElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertTrue(getRegCenter().isExisted("/" + getJobName() + "/execution"));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/monitor/MonitorServiceDisableTest.java
Patch:
@@ -23,7 +23,6 @@
 
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobTest;
-import com.dangdang.ddframe.job.internal.monitor.MonitorService;
 
 public final class MonitorServiceDisableTest extends AbstractBaseStdJobTest {
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/monitor/MonitorServiceEnableTest.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.dangdang.ddframe.job.fixture.TestJob;
 import com.dangdang.ddframe.job.integrate.AbstractBaseStdJobTest;
-import com.dangdang.ddframe.job.internal.monitor.MonitorService;
 
 public final class MonitorServiceEnableTest extends AbstractBaseStdJobTest {
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/plugin/job/type/SimpleElasticJobTest.java
Patch:
@@ -140,7 +140,9 @@ public void assertExecuteWhenRunOnceAndThrowException() throws JobExecutionExcep
             verify(executionService).cleanPreviousExecutionInfo();
             verify(executionService).registerJobBegin(shardingContext);
             verify(jobCaller).process();
-            verify(executionService, times(0)).registerJobCompleted(shardingContext);
+            verify(executionService).registerJobCompleted(shardingContext);
+            verify(configService, times(1)).isFailover();
+            verify(failoverService, times(0)).updateFailoverComplete(shardingContext.getShardingItems());
         }
     }
     

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/core/main/JobMain.java
Patch:
@@ -28,7 +28,7 @@
 
 public final class JobMain {
     
-    private final ZookeeperConfiguration zkConfig = new ZookeeperConfiguration("localhost:2181", "elasticjob-example", 1000, 3000, 3);
+    private final ZookeeperConfiguration zkConfig = new ZookeeperConfiguration("localhost:4181", "elasticjob-example", 1000, 3000, 3);
     
     private final CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(zkConfig);
     
@@ -45,6 +45,8 @@ public static void main(final String[] args) {
     }
     
     public void init() {
+        zkConfig.setNestedPort(4181);
+        zkConfig.setNestedDataDir(String.format("target/test_zk_data/%s/", System.nanoTime()));
         regCenter.init();
         new JobScheduler(regCenter, jobConfig1).init();
         new JobScheduler(regCenter, jobConfig2).init();

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/reg/spring/namespace/ZookeeperBeanDefinitionParser.java
Patch:
@@ -49,6 +49,8 @@ private SpringZookeeperConfigurationDto createZookeeperConfiguration(final Eleme
         result.setSessionTimeoutMilliseconds(element.getAttribute("sessionTimeoutMilliseconds"));
         result.setConnectionTimeoutMilliseconds(element.getAttribute("connectionTimeoutMilliseconds"));
         result.setDigest(element.getAttribute("digest"));
+        result.setNestedPort(element.getAttribute("nestedPort"));
+        result.setNestedDataDir(element.getAttribute("nestedDataDir"));
         result.setLocalPropertiesPath(element.getAttribute("localPropertiesPath"));
         result.setOverwrite(element.getAttribute("overwrite"));
         return result;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/AbstractSequenceDataFlowElasticJob.java
Patch:
@@ -88,7 +88,7 @@ public void run() {
             });
         }
         latchAwait(latch);
-        log.debug("Elastic job: fetch data size: {}.", result != null ? result.size() : 0);
+        log.trace("Elastic job: fetch data size: {}.", result != null ? result.size() : 0);
         return result;
     }
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/job/type/AbstractThroughputDataFlowElasticJob.java
Patch:
@@ -66,7 +66,7 @@ private void executeOneOffJob(final JobExecutionMultipleShardingContext sharding
     
     private List<T> fetchDataWithLog(final JobExecutionMultipleShardingContext shardingContext) {
         List<T> result = fetchData(shardingContext);
-        log.debug("Elastic job: fetch data size: {}.", result != null ? result.size() : 0);
+        log.trace("Elastic job: fetch data size: {}.", result != null ? result.size() : 0);
         return result;
     }
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/ElasticJob.java
Patch:
@@ -24,4 +24,5 @@
  * 
  * @author zhangliang
  */
-public interface ElasticJob extends Job { }
+public interface ElasticJob extends Job, Stopable {
+}

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationListenerManager.java
Patch:
@@ -56,7 +56,7 @@ class CronSettingChangedJobListener extends AbstractJobListener {
         protected void dataChanged(final CuratorFramework client, final TreeCacheEvent event, final String path) {
             if (configNode.isCronPath(path) && Type.NODE_UPDATED == event.getType()) {
                 String cronExpression = new String(event.getData().getData());
-                JobScheduler jobScheduler = JobRegistry.getInstance().getJob(jobName);
+                JobScheduler jobScheduler = JobRegistry.getInstance().getJobScheduler(jobName);
                 if (null != jobScheduler) {
                     jobScheduler.rescheduleJob(cronExpression);
                 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionService.java
Patch:
@@ -38,7 +38,8 @@
 /**
  * 执行作业的服务.
  * 
- * @author zhangliang, caohao
+ * @author zhangliang
+ * @author caohao
  */
 public class ExecutionService {
     
@@ -71,7 +72,7 @@ public void registerJobBegin(final JobExecutionMultipleShardingContext jobExecut
             for (int each : jobExecutionShardingContext.getShardingItems()) {
                 jobNodeStorage.fillEphemeralJobNode(ExecutionNode.getRunningNode(each), "");
                 jobNodeStorage.replaceJobNode(ExecutionNode.getLastBeginTimeNode(each), System.currentTimeMillis());
-                JobScheduler jobScheduler = JobRegistry.getInstance().getJob(jobConfiguration.getJobName());
+                JobScheduler jobScheduler = JobRegistry.getInstance().getJobScheduler(jobConfiguration.getJobName());
                 if (null == jobScheduler) {
                     continue;
                 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -154,7 +154,7 @@ public void execute() {
             log.debug("Elastic job: failover job begin, crashed item:{}.", crashedItem);
             jobNodeStorage.fillEphemeralJobNode(FailoverNode.getExecutionFailoverNode(crashedItem), localHostService.getIp());
             jobNodeStorage.removeJobNodeIfExisted(FailoverNode.getItemsNode(crashedItem));
-            JobRegistry.getInstance().getJob(jobConfiguration.getJobName()).triggerJob();
+            JobRegistry.getInstance().getJobScheduler(jobConfiguration.getJobName()).triggerJob();
         }
     }
 }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/server/JobOperationListenerManager.java
Patch:
@@ -58,9 +58,9 @@ class ConnectionLostListener implements ConnectionStateListener {
         @Override
         public void stateChanged(final CuratorFramework client, final ConnectionState newState) {
             if (ConnectionState.LOST == newState) {
-                JobRegistry.getInstance().getJob(jobName).stopJob();
+                JobRegistry.getInstance().getJobScheduler(jobName).stopJob();
             } else if (ConnectionState.RECONNECTED == newState) {
-                JobRegistry.getInstance().getJob(jobName).resumeCrashedJob();
+                JobRegistry.getInstance().getJobScheduler(jobName).resumeCrashedJob();
             }
         }
     }
@@ -72,7 +72,7 @@ protected void dataChanged(final CuratorFramework client, final TreeCacheEvent e
             if (!serverNode.isJobStopedPath(path)) {
                 return;
             }
-            JobScheduler jobScheduler = JobRegistry.getInstance().getJob(jobName);
+            JobScheduler jobScheduler = JobRegistry.getInstance().getJobScheduler(jobName);
             if (null == jobScheduler) {
                 return;
             }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/base/CoordinatorRegistryCenter.java
Patch:
@@ -60,7 +60,7 @@ public interface CoordinatorRegistryCenter extends RegistryCenter {
     /**
      * 添加本地缓存.
      * 
-     * @param watcherPath 需加入缓存的路径
+     * @param cachePath 需加入缓存的路径
      */
     void addCacheData(String cachePath);
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -109,9 +109,9 @@ public void setUp() {
     @After
     public void tearDown() throws SchedulerException, NoSuchFieldException {
         ProcessCountStatistics.reset(jobName);
-        JobScheduler jobScheduler = JobRegistry.getInstance().getJob(jobName);
+        JobScheduler jobScheduler = JobRegistry.getInstance().getJobScheduler(jobName);
         if (null != jobScheduler) {
-            JobRegistry.getInstance().getJob(jobName).shutdown();
+            JobRegistry.getInstance().getJobScheduler(jobName).shutdown();
         }
         ReflectionUtils.setFieldValue(JobRegistry.getInstance(), "instance", null);
     }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/config/ConfigurationListenerManagerTest.java
Patch:
@@ -81,7 +81,7 @@ configurationListenerManager.new CronSettingChangedJobListener().dataChanged(nul
     
     @Test
     public void assertCronSettingChangedJobListenerWhenIsCronPathAndUpdateAndFindJob() {
-        JobRegistry.getInstance().addJob("testJob", jobScheduler);
+        JobRegistry.getInstance().addJobScheduler("testJob", jobScheduler);
         configurationListenerManager.new CronSettingChangedJobListener().dataChanged(null, new TreeCacheEvent(
                 TreeCacheEvent.Type.NODE_UPDATED, new ChildData("/testJob/config/cron", null, "*/10 * * * * *".getBytes())), "/testJob/config/cron");
         verify(jobScheduler).rescheduleJob("*/10 * * * * *");

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/execution/ExecutionServiceTest.java
Patch:
@@ -104,7 +104,7 @@ public void assertRegisterJobBeginWhenNotMonitorExecution() {
     public void assertRegisterJobBeginWithoutNextFireTime() {
         when(configService.isMonitorExecution()).thenReturn(true);
         when(jobScheduler.getNextFireTime()).thenReturn(null);
-        JobRegistry.getInstance().addJob("testJob", jobScheduler);
+        JobRegistry.getInstance().addJobScheduler("testJob", jobScheduler);
         JobExecutionMultipleShardingContext jobExecutionShardingContext = new JobExecutionMultipleShardingContext();
         jobExecutionShardingContext.setShardingItems(Arrays.asList(0, 1, 2));
         executionService.registerJobBegin(jobExecutionShardingContext);
@@ -122,7 +122,7 @@ public void assertRegisterJobBeginWithoutNextFireTime() {
     public void assertRegisterJobBeginWithNextFireTime() {
         when(configService.isMonitorExecution()).thenReturn(true);
         when(jobScheduler.getNextFireTime()).thenReturn(new Date(0L));
-        JobRegistry.getInstance().addJob("testJob", jobScheduler);
+        JobRegistry.getInstance().addJobScheduler("testJob", jobScheduler);
         JobExecutionMultipleShardingContext jobExecutionShardingContext = new JobExecutionMultipleShardingContext();
         jobExecutionShardingContext.setShardingItems(Arrays.asList(0, 1, 2));
         executionService.registerJobBegin(jobExecutionShardingContext);

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/failover/FailoverServiceTest.java
Patch:
@@ -149,7 +149,7 @@ public void assertFailoverLeaderExecutionCallbackIfNecessary() {
         when(jobNodeStorage.isJobNodeExisted("leader/failover/items")).thenReturn(true);
         when(jobNodeStorage.getJobNodeChildrenKeys("leader/failover/items")).thenReturn(Arrays.asList("0", "1", "2"));
         when(serverService.isServerReady()).thenReturn(true);
-        JobRegistry.getInstance().addJob("testJob", jobScheduler);
+        JobRegistry.getInstance().addJobScheduler("testJob", jobScheduler);
         failoverService.new FailoverLeaderExecutionCallback().execute();
         verify(jobNodeStorage).isJobNodeExisted("leader/failover/items");
         verify(jobNodeStorage, times(2)).getJobNodeChildrenKeys("leader/failover/items");

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/AbstractJobSpringIntegrateTest.java
Patch:
@@ -50,8 +50,8 @@ public void reset() {
     
     @After
     public void tearDown() {
-        JobRegistry.getInstance().getJob("simpleElasticJob").shutdown();
-        JobRegistry.getInstance().getJob("throughputDataFlowElasticJob").shutdown();
+        JobRegistry.getInstance().getJobScheduler("simpleElasticJob").shutdown();
+        JobRegistry.getInstance().getJobScheduler("throughputDataFlowElasticJob").shutdown();
         WaitingUtils.waitingLongTime();
     }
     

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/monitor/MonitorService.java
Patch:
@@ -120,7 +120,7 @@ private void dumpDirectly(final String path, final List<String> result) {
         for (String each : coordinatorRegistryCenter.getChildrenKeys(path)) {
             String zkPath = path + "/" + each;
             String zkValue = coordinatorRegistryCenter.get(zkPath);
-            TreeCache treeCache = (TreeCache) coordinatorRegistryCenter.getRawCache();
+            TreeCache treeCache = (TreeCache) coordinatorRegistryCenter.getRawCache("/" + jobName);
             ChildData treeCacheData = treeCache.getCurrentData(zkPath);
             String treeCachePath =  null == treeCacheData ? "" : treeCacheData.getPath();
             String treeCacheValue = null == treeCacheData ? "" : new String(treeCacheData.getData());

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/storage/JobNodeStorage.java
Patch:
@@ -196,7 +196,7 @@ private CuratorFramework getClient() {
      * 注册数据监听器.
      */
     public void addDataListener(final TreeCacheListener listener) {
-        TreeCache cache = (TreeCache) coordinatorRegistryCenter.getRawCache();
+        TreeCache cache = (TreeCache) coordinatorRegistryCenter.getRawCache("/" + jobConfiguration.getJobName());
         cache.getListenable().addListener(listener);
     }
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/AbstractBaseStdJobTest.java
Patch:
@@ -66,7 +66,7 @@ public abstract class AbstractBaseStdJobTest {
     
     private final LeaderElectionService leaderElectionService;
     
-    @Getter
+    @Getter(AccessLevel.PROTECTED)
     private final String jobName = System.nanoTime() + "_testJob";
     
     protected AbstractBaseStdJobTest(final Class<? extends ElasticJob> elasticJobClass, final boolean disabled) {

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/storage/JobNodeStorage.java
Patch:
@@ -19,8 +19,6 @@
 
 import java.util.List;
 
-import lombok.Getter;
-
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.recipes.cache.TreeCache;
 import org.apache.curator.framework.recipes.cache.TreeCacheListener;
@@ -31,6 +29,8 @@
 import com.dangdang.ddframe.job.exception.JobException;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 
+import lombok.Getter;
+
 /**
  * 作业节点数据访问类.
  * 

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/OneOffSequenceDataFlowElasticJobTest.java
Patch:
@@ -50,8 +50,8 @@ public void assertJobInit() {
         while (!OneOffSequenceDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(30));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(0));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(30));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/sequence/StreamingSequenceDataFlowElasticJobTest.java
Patch:
@@ -49,8 +49,8 @@ public void assertJobInit() {
         while (!StreamingSequenceDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(30));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(0));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(30));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/OneOffThroughputDataFlowElasticJobTest.java
Patch:
@@ -50,8 +50,8 @@ public void assertJobInit() {
         while (!OneOffThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(10));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(0));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteFailureTest.java
Patch:
@@ -49,8 +49,8 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJobForExecuteFailure.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(0));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(1));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(0));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(1));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForExecuteThrowsExceptionTest.java
Patch:
@@ -49,8 +49,8 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJobForExecuteThrowsException.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(0));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(1));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(0));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(1));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForMultipleThreadsTest.java
Patch:
@@ -50,8 +50,8 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(10));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(0));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForNotMonitorTest.java
Patch:
@@ -50,8 +50,8 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertFalse(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(10));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(0));
+        assertFalse(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobForStopedTest.java
Patch:
@@ -45,8 +45,8 @@ public void assertClearStopJobStatusWhenRestartingJob() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        REG_CENTER.persist("/testJob/servers/" + getLocalHostService().getIp() + "/stoped", "");
+        REG_CENTER.persist("/" + getJobName() + "/servers/" + getLocalHostService().getIp() + "/stoped", "");
         initJob();
-        assertFalse(REG_CENTER.isExisted("/testJob/servers/" + getLocalHostService().getIp() + "/stoped"));
+        assertFalse(REG_CENTER.isExisted("/" + getJobName() + "/servers/" + getLocalHostService().getIp() + "/stoped"));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/dataflow/throughput/StreamingThroughputDataFlowElasticJobTest.java
Patch:
@@ -49,8 +49,8 @@ public void assertJobInit() {
         while (!StreamingThroughputDataFlowElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
-        assertThat(ProcessCountStatistics.getProcessSuccessCount("testJob"), is(10));
-        assertThat(ProcessCountStatistics.getProcessFailureCount("testJob"), is(0));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
+        assertThat(ProcessCountStatistics.getProcessSuccessCount(getJobName()), is(10));
+        assertThat(ProcessCountStatistics.getProcessFailureCount(getJobName()), is(0));
     }
 }

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/integrate/std/simple/SimpleElasticJobTest.java
Patch:
@@ -46,6 +46,6 @@ public void assertJobInit() {
         while (!SimpleElasticJob.isCompleted()) {
             WaitingUtils.waitingShortTime();
         }
-        assertTrue(REG_CENTER.isExisted("/testJob/execution"));
+        assertTrue(REG_CENTER.isExisted("/" + getJobName() + "/execution"));
     }
 }

File: elastic-job-console/src/main/java/com/dangdang/ddframe/job/console/domain/JobSettings.java
Patch:
@@ -50,6 +50,8 @@ public final class JobSettings implements Serializable {
     
     private int maxTimeDiffSeconds;
     
+    private int monitorPort = -1;
+    
     private boolean failover;
     
     private boolean misfire;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/config/ConfigurationNode.java
Patch:
@@ -56,6 +56,8 @@ public final class ConfigurationNode {
     
     static final String DESCRIPTION = ROOT + "/description";
     
+    static final String MONITOR_PORT = ROOT + "/monitorPort";
+    
     private final JobNodePath jobNodePath;
     
     public ConfigurationNode(final String jobName) {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/config/ConfigurationServiceTest.java
Patch:
@@ -111,6 +111,7 @@ private void assertJobConfiguration(final JobConfiguration jobConfiguration) {
         assertThat(Integer.parseInt(getRegistryCenter().getDirectly("/testJob/config/fetchDataCount")), is(jobConfiguration.getFetchDataCount()));
         assertThat(Boolean.valueOf(getRegistryCenter().getDirectly("/testJob/config/failover")), is(jobConfiguration.isFailover()));
         assertThat(Boolean.valueOf(getRegistryCenter().getDirectly("/testJob/config/misfire")), is(jobConfiguration.isMisfire()));
+        assertThat(Integer.parseInt(getRegistryCenter().getDirectly("/testJob/config/monitorPort")), is(jobConfiguration.getMonitorPort()));
         assertThat(getRegistryCenter().getDirectly("/testJob/config/jobShardingStrategyClass"), is(jobConfiguration.getJobShardingStrategyClass()));
         assertThat(getRegistryCenter().getDirectly("/testJob/config/description"), is(jobConfiguration.getDescription()));
     }

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/JobBeanDefinitionParser.java
Patch:
@@ -55,6 +55,7 @@ private String createJobConfiguration(final Element element, final ParserContext
         addPropertyValueIfNotEmpty("shardingItemParameters", element, factory);
         addPropertyValueIfNotEmpty("jobParameter", element, factory);
         addPropertyValueIfNotEmpty("monitorExecution", element, factory);
+        addPropertyValueIfNotEmpty("monitorPort", element, factory);
         addPropertyValueIfNotEmpty("processCountIntervalSeconds", element, factory);
         addPropertyValueIfNotEmpty("concurrentDataProcessThreadCount", element, factory);
         addPropertyValueIfNotEmpty("fetchDataCount", element, factory);

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/sharding/strategy/RotateServerByNameJobShardingStrategy.java
Patch:
@@ -23,7 +23,7 @@ public Map<String, List<Integer>> sharding(final List<String> serversList, final
     
     private List<String> rotateServerList(final List<String> serversList, final String jobName) {
         int serverSize = serversList.size();
-        int offset = jobName.hashCode() % serverSize;
+        int offset = Math.abs(jobName.hashCode()) % serverSize;
         if (0 == offset) {
             return serversList;
         }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/plugin/sharding/strategy/RotateServerByNameJobShardingStrategy.java
Patch:
@@ -23,7 +23,7 @@ public Map<String, List<Integer>> sharding(final List<String> serversList, final
     
     private List<String> rotateServerList(final List<String> serversList, final String jobName) {
         int serverSize = serversList.size();
-        int offset = jobName.hashCode() % serverSize;
+        int offset = Math.abs(jobName.hashCode()) % serverSize;
         if (0 == offset) {
             return serversList;
         }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/execution/ExecutionService.java
Patch:
@@ -25,11 +25,11 @@
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.election.LeaderElectionService;
+import com.dangdang.ddframe.job.internal.schedule.JobRegistry;
 import com.dangdang.ddframe.job.internal.server.ServerService;
 import com.dangdang.ddframe.job.internal.server.ServerStatus;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.internal.util.BlockUtils;
-import com.dangdang.ddframe.job.schedule.JobRegistry;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverService.java
Patch:
@@ -27,11 +27,11 @@
 import com.dangdang.ddframe.job.internal.env.LocalHostService;
 import com.dangdang.ddframe.job.internal.env.RealLocalHostService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionNode;
+import com.dangdang.ddframe.job.internal.schedule.JobRegistry;
 import com.dangdang.ddframe.job.internal.server.ServerService;
 import com.dangdang.ddframe.job.internal.sharding.ShardingService;
 import com.dangdang.ddframe.job.internal.storage.JobNodeStorage;
 import com.dangdang.ddframe.job.internal.storage.LeaderExecutionCallback;
-import com.dangdang.ddframe.job.schedule.JobRegistry;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 
 /**

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/schedule/JobTriggerListener.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.schedule;
+package com.dangdang.ddframe.job.internal.schedule;
 
 import org.quartz.Trigger;
 import org.quartz.listeners.TriggerListenerSupport;

File: elastic-job-example/src/main/java/com/dangdang/example/elasticjob/spring/job/SimpleJobDemo.java
Patch:
@@ -37,6 +37,7 @@ public class SimpleJobDemo extends AbstractSimpleElasticJob {
     @Override
     public void process(final JobExecutionMultipleShardingContext context) {
         printContext.printProcessJobMessage(context.getShardingItems());
+        System.out.println("-----------------------------" + fooRepository);
         fooRepository.findActive(context.getShardingItems());
         // do something
     }

File: elastic-job-spring/src/main/java/com/dangdang/ddframe/job/spring/namespace/JobBeanDefinitionParser.java
Patch:
@@ -24,7 +24,7 @@
 import org.w3c.dom.Element;
 
 import com.dangdang.ddframe.job.api.JobConfiguration;
-import com.dangdang.ddframe.job.spring.schedule.SpringJobController;
+import com.dangdang.ddframe.job.spring.schedule.SpringJobScheduler;
 import com.google.common.base.Strings;
 
 /**
@@ -38,7 +38,7 @@ public class JobBeanDefinitionParser extends AbstractBeanDefinitionParser {
     //CHECKSTYLE:OFF
     protected AbstractBeanDefinition parseInternal(final Element element, final ParserContext parserContext) {
     //CHECKSTYLE:ON
-        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringJobController.class);
+        BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(SpringJobScheduler.class);
         factory.setInitMethodName("init");
         factory.setDestroyMethodName("shutdown");
         factory.addConstructorArgReference(element.getAttribute("regCenter"));

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/spring/AbstractJobSpringIntegrateTest.java
Patch:
@@ -29,8 +29,8 @@
 
 import com.dangdang.ddframe.job.fixture.SimpleElasticJob;
 import com.dangdang.ddframe.job.fixture.ThroughputDataFlowElasticJob;
+import com.dangdang.ddframe.job.internal.schedule.JobRegistry;
 import com.dangdang.ddframe.job.internal.statistics.ProcessCountStatistics;
-import com.dangdang.ddframe.job.schedule.JobRegistry;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.dangdang.ddframe.test.AbstractZookeeperJUnit4SpringContextTests;
 import com.dangdang.ddframe.test.WaitingUtils;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobConfiguration.java
Patch:
@@ -87,7 +87,7 @@ public class JobConfiguration {
      * 
      * <p>
      * 单位: 秒.
-     * 只对PerpetualElasticJob类型作业起作用.
+     * 只对处理数据流类型作业起作用.
      * </p>
      */
     private int processCountIntervalSeconds = 300;
@@ -96,7 +96,7 @@ public class JobConfiguration {
      * 处理数据的并发线程数.
      * 
      * <p>
-     * 只对PerpetualElasticJob类型作业起作用.
+     * 只对高吞吐量处理数据流类型作业起作用.
      * </p>
      */
     private int concurrentDataProcessThreadCount = 1;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobExecutionMultipleShardingContext.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.beanutils.BeanUtils;
 
 import com.dangdang.ddframe.job.exception.JobException;
+import com.dangdang.ddframe.job.internal.job.AbstractJobExecutionShardingContext;
 
 import lombok.Getter;
 import lombok.Setter;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobExecutionSingleShardingContext.java
Patch:
@@ -17,6 +17,8 @@
 
 package com.dangdang.ddframe.job.api;
 
+import com.dangdang.ddframe.job.internal.job.AbstractJobExecutionShardingContext;
+
 import lombok.Getter;
 import lombok.Setter;
 

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/AbstractElasticJob.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.api;
+package com.dangdang.ddframe.job.internal.job;
 
 import lombok.AccessLevel;
 import lombok.Getter;
@@ -25,6 +25,8 @@
 import org.quartz.JobExecutionContext;
 import org.quartz.JobExecutionException;
 
+import com.dangdang.ddframe.job.api.ElasticJob;
+import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.internal.config.ConfigurationService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionContextService;
 import com.dangdang.ddframe.job.internal.execution.ExecutionService;

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/job/AbstractJobExecutionShardingContext.java
Patch:
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package com.dangdang.ddframe.job.api;
+package com.dangdang.ddframe.job.internal.job;
 
 import lombok.Getter;
 import lombok.Setter;
@@ -27,7 +27,7 @@
  */
 @Getter
 @Setter
-abstract class AbstractJobExecutionShardingContext {
+public abstract class AbstractJobExecutionShardingContext {
     
     /**
      * 作业名称.

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -280,7 +280,7 @@ public long getRegistryCenterTime(final String key) {
         //CHECKSTYLE:ON
             RegExceptionHandler.handleException(ex);
         }
-        Preconditions.checkArgument(0L != result, "Cannot get registry center time.");
+        Preconditions.checkState(0L != result, "Cannot get registry center time.");
         return result;
     }
     

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/AbstractBaseJobTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.junit.After;
 import org.junit.Before;
 
-import com.dangdang.ddframe.job.api.AbstractElasticJob;
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
+import com.dangdang.ddframe.job.internal.job.AbstractElasticJob;
 import com.dangdang.ddframe.reg.base.CoordinatorRegistryCenter;
 import com.dangdang.ddframe.reg.zookeeper.ZookeeperConfiguration;
 import com.dangdang.ddframe.reg.zookeeper.ZookeeperRegistryCenter;

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/config/ConfigurationServiceTest.java
Patch:
@@ -33,13 +33,13 @@
 import org.apache.zookeeper.data.Stat;
 import org.junit.Test;
 
-import com.dangdang.ddframe.job.api.AbstractElasticJob;
 import com.dangdang.ddframe.job.api.JobConfiguration;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
 import com.dangdang.ddframe.job.exception.JobConflictException;
 import com.dangdang.ddframe.job.exception.ShardingItemParametersException;
 import com.dangdang.ddframe.job.exception.TimeDiffIntolerableException;
 import com.dangdang.ddframe.job.internal.AbstractBaseJobTest;
+import com.dangdang.ddframe.job.internal.job.AbstractElasticJob;
 import com.dangdang.ddframe.job.internal.sharding.strategy.JobShardingStrategy;
 
 public final class ConfigurationServiceTest extends AbstractBaseJobTest {

File: elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterForAuthTest.java
Patch:
@@ -41,6 +41,8 @@ public final class ZookeeperRegistryCenterForAuthTest {
     @Before
     public void setUp() {
         NestedZookeeperServers.getInstance().startServerIfNotStarted();
+        zkConfig.setSessionTimeoutMilliseconds(5000);
+        zkConfig.setConnectionTimeoutMilliseconds(5000);
         zkRegCenter = new ZookeeperRegistryCenter(zkConfig);
     }
     

File: elastic-job-spring/src/test/java/com/dangdang/ddframe/job/fixture/SimpleElasticJob.java
Patch:
@@ -20,10 +20,10 @@
 import lombok.Getter;
 import lombok.Setter;
 
-import com.dangdang.ddframe.job.api.AbstractOneOffElasticJob;
 import com.dangdang.ddframe.job.api.JobExecutionMultipleShardingContext;
+import com.dangdang.ddframe.job.plugin.job.type.AbstractSimpleElasticJob;
 
-public final class OneOffElasticJob extends AbstractOneOffElasticJob {
+public final class SimpleElasticJob extends AbstractSimpleElasticJob {
     
     @Getter
     private static volatile boolean completed;
@@ -35,7 +35,7 @@ public final class OneOffElasticJob extends AbstractOneOffElasticJob {
     private static String jobValue;
     
     @Override
-    protected void process(final JobExecutionMultipleShardingContext context) {
+    public void process(final JobExecutionMultipleShardingContext context) {
         completed = true;
         jobValue = springValue;
     }

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/election/ElectionListenerManager.java
Patch:
@@ -61,10 +61,10 @@ void listenLeaderElection() {
             @Override
             protected void dataChanged(final CuratorFramework client, final TreeCacheEvent event, final String path) {
                 if (Type.NODE_REMOVED == event.getType() && electionNode.isLeaderHostPath(path) && !leaderElectionService.hasLeader()) {
-                    log.info("Elastic job: leader crashed, elect a new leader now.");
+                    log.debug("Elastic job: leader crashed, elect a new leader now.");
                     leaderElectionService.leaderElection();
                     shardingService.setReshardingFlag();
-                    log.info("Elastic job: leader election completed.");
+                    log.debug("Elastic job: leader election completed.");
                 }
             }
         });

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/internal/failover/FailoverListenerManager.java
Patch:
@@ -67,7 +67,7 @@ public FailoverListenerManager(final CoordinatorRegistryCenter coordinatorRegist
     public void start() {
         listenJobCrashed();
         listenFailoverJobCrashed();
-        listenFailoverSerttingsChanged();
+        listenFailoverSettingsChanged();
     }
     
     void listenJobCrashed() {
@@ -104,7 +104,7 @@ private boolean isJobCrashAndNeedFailover(final Integer item, final TreeCacheEve
         return null != item && Type.NODE_REMOVED == event.getType() && !executionService.isCompleted(item) && configService.isFailover();
     }
     
-    void listenFailoverSerttingsChanged() {
+    void listenFailoverSettingsChanged() {
         addDataListener(new AbstractJobListener() {
             
             @Override

File: elastic-job-core/src/test/java/com/dangdang/ddframe/job/internal/failover/FailoverListenerManagerTest.java
Patch:
@@ -38,7 +38,7 @@ public final class FailoverListenerManagerTest extends AbstractBaseJobTest {
     public void setUp() {
         failoverListenerManager.listenJobCrashed();
         failoverListenerManager.listenFailoverJobCrashed();
-        failoverListenerManager.listenFailoverSerttingsChanged();
+        failoverListenerManager.listenFailoverSettingsChanged();
     }
     
     @Test

File: elastic-job-core/src/main/java/com/dangdang/ddframe/job/api/JobConfiguration.java
Patch:
@@ -128,7 +128,7 @@ public class JobConfiguration {
      * 作业分片策略实现类全路径.
      * 
      * <p>
-     * 默认使用{@code com.dangdang.ddframe.job.internal.sharding.strategy.AverageAllocationJobShardingStrategy}.
+     * 默认使用{@code com.dangdang.ddframe.job.plugin.sharding.strategy.AverageAllocationJobShardingStrategy}.
      * </p>
      */
     private String jobShardingStrategyClass = "";

File: elastic-job-core/src/main/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenter.java
Patch:
@@ -74,7 +74,7 @@ public void init() {
         if (0 != zkConfig.getSessionTimeoutMilliseconds()) {
             builder.sessionTimeoutMs(zkConfig.getSessionTimeoutMilliseconds());
         }
-        if (0 == zkConfig.getConnectionTimeoutMilliseconds()) {
+        if (0 != zkConfig.getConnectionTimeoutMilliseconds()) {
             builder.connectionTimeoutMs(zkConfig.getConnectionTimeoutMilliseconds());
         }
         if (!Strings.isNullOrEmpty(zkConfig.getDigest())) {

