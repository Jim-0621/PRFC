File: dropwizard-e2e/src/main/java/com/example/app1/CustomClassBodyWriter.java
Patch:
@@ -1,5 +1,7 @@
 package com.example.app1;
 
+import jakarta.annotation.Priority;
+import jakarta.ws.rs.Priorities;
 import jakarta.ws.rs.Produces;
 import jakarta.ws.rs.WebApplicationException;
 import jakarta.ws.rs.core.MediaType;
@@ -14,6 +16,7 @@
 
 /** Demonstration that one can provider their own message body writers (see issue #1005) */
 @Produces(MediaType.APPLICATION_JSON)
+@Priority(Priorities.ENTITY_CODER)
 public class CustomClassBodyWriter implements MessageBodyWriter<CustomClass> {
     private static final byte[] RESPONSE = "I'm a custom class".getBytes(StandardCharsets.UTF_8);
 

File: dropwizard-e2e/src/main/java/com/example/app1/CustomJsonProvider.java
Patch:
@@ -2,7 +2,9 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.jakarta.rs.json.JacksonXmlBindJsonProvider;
+import jakarta.annotation.Priority;
 import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.Priorities;
 import jakarta.ws.rs.Produces;
 import jakarta.ws.rs.WebApplicationException;
 import jakarta.ws.rs.core.MediaType;
@@ -19,6 +21,7 @@
 /** Custom JSON reader and writer that will write a leading HEADER to the JSON output */
 @Consumes(MediaType.APPLICATION_JSON)
 @Produces(MediaType.APPLICATION_JSON)
+@Priority(Priorities.ENTITY_CODER)
 public class CustomJsonProvider extends JacksonXmlBindJsonProvider {
     private static final String HEADER = "/** A Dropwizard specialty */\n";
     private static final byte[] HEADER_BYTES = HEADER.getBytes(StandardCharsets.UTF_8);

File: dropwizard-e2e/src/main/java/com/example/app1/CustomJsonProvider.java
Patch:
@@ -2,7 +2,9 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.jakarta.rs.json.JacksonXmlBindJsonProvider;
+import jakarta.annotation.Priority;
 import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.Priorities;
 import jakarta.ws.rs.Produces;
 import jakarta.ws.rs.WebApplicationException;
 import jakarta.ws.rs.core.MediaType;
@@ -19,6 +21,7 @@
 /** Custom JSON reader and writer that will write a leading HEADER to the JSON output */
 @Consumes(MediaType.APPLICATION_JSON)
 @Produces(MediaType.APPLICATION_JSON)
+@Priority(Priorities.ENTITY_CODER)
 public class CustomJsonProvider extends JacksonXmlBindJsonProvider {
     private static final String HEADER = "/** A Dropwizard specialty */\n";
     private static final byte[] HEADER_BYTES = HEADER.getBytes(StandardCharsets.UTF_8);

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -294,6 +294,7 @@ void usesKeepAliveForPersistentConnections() {
         final HttpClientContext context = mock(HttpClientContext.class);
         final HttpResponse response = mock(HttpResponse.class);
         when(context.getRequestConfig()).thenReturn(client.getDefaultRequestConfig());
+        when(context.getRequestConfigOrDefault()).thenCallRealMethod();
         when(response.headerIterator()).thenReturn(Collections.emptyIterator());
         when(response.headerIterator(any())).thenReturn(Collections.emptyIterator());
 

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationParsingException.java
Patch:
@@ -246,8 +246,8 @@ ConfigurationParsingException build(String path) {
             if (hasFieldPath()) {
                 sb.append(" at: ").append(buildPath(getFieldPath()));
             } else if (hasLocation()) {
-                sb.append(" at line: ").append(getLine() + 1)
-                        .append(", column: ").append(getColumn() + 1);
+                sb.append(" at line: ").append(getLine())
+                        .append(", column: ").append(getColumn());
             }
 
             if (hasDetail()) {

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/JsonConfigurationFactoryTest.java
Patch:
@@ -29,15 +29,15 @@ void setUp() {
         this.wrongTypeFile = "factory-test-wrong-type.json";
         this.malformedAdvancedFile = "factory-test-malformed-advanced.json";
         this.malformedAdvancedFileError = String.format("%s has an error:%n" +
-                "  * Malformed JSON at line: 7, column: 3; Unexpected close marker '}': expected ']'", malformedAdvancedFile);
+                "  * Malformed JSON at line: 6, column: 1; Unexpected close marker '}': expected ']'", malformedAdvancedFile);
     }
 
     @Test
     void defaultJsonFactoryFailsOnComment() {
         assertThatThrownBy(() -> factory.build(configurationSourceProvider, commentFile))
                 .hasMessageContaining(String.format(
                         "%s has an error:%n" +
-                        "  * Malformed JSON at line: 4, column: 4; Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)",
+                        "  * Malformed JSON at line: 3, column: 2; Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)",
                     commentFile));
     }
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/YamlConfigurationFactoryTest.java
Patch:
@@ -19,7 +19,7 @@ public void setUp() throws Exception {
         this.wrongTypeFile = "factory-test-wrong-type.yml";
         this.malformedAdvancedFile = "factory-test-malformed-advanced.txt";
         this.malformedAdvancedFileError = String.format("%s has an error:%n" +
-            "  * Malformed YAML at line: 4, column: 22; while parsing a flow sequence\n" +
+            "  * Malformed YAML at line: 3, column: 21; while parsing a flow sequence\n" +
             " in 'reader'", malformedAdvancedFile);
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/YearParamTest.java
Patch:
@@ -11,7 +11,8 @@ class YearParamTest {
     void parsesDateTimes() throws Exception {
         final YearParam param = new YearParam("2012");
 
-        assertThat(param.get())
-                .isEqualTo(Year.of(2012));
+        assertThat(param)
+            .extracting(YearParam::get)
+            .isEqualTo(Year.of(2012));
     }
 }

File: dropwizard-core/src/main/java/io/dropwizard/core/server/DefaultServerFactory.java
Patch:
@@ -240,6 +240,9 @@ private List<Connector> buildAdminConnectors(MetricRegistry metricRegistry, Serv
             60000, // overload default
             null, // overload default
             threadFactory);
+        if (enableAdminVirtualThreads) {
+            threadPool.setVirtualThreadsExecutor(getVirtualThreadsExecutorService());
+        }
         threadPool.setName("dw-admin");
         server.addBean(threadPool);
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/AppenderFactory.java
Patch:
@@ -16,7 +16,7 @@
  * <ol>
  * <li>Create a class which implements {@link AppenderFactory}.</li>
  * <li>Annotate it with {@code @JsonTypeName} and give it a unique type name.</li>
- * <li>add a {@code META-INF/services/io.dropwizard.logging.AppenderFactory} file with your
+ * <li>add a {@code META-INF/services/io.dropwizard.logging.common.AppenderFactory} file with your
  * implementation's full class name to the class path.</li>
  * </ol>
  *

File: dropwizard-health/src/test/java/io/dropwizard/health/response/JsonHealthResponseProviderTest.java
Patch:
@@ -62,7 +62,7 @@ void shouldHandleSingleHealthStateViewCorrectly() throws IOException {
         // then
         assertThat(response.isHealthy()).isTrue();
         assertThat(response.getContentType()).isEqualTo(MediaType.APPLICATION_JSON);
-        assertThat(response.getMessage()).isEqualToIgnoringWhitespace(fixture("/json/single-healthy-response.json"));
+        assertThat(mapper.readTree(response.getMessage())).isEqualTo(mapper.readTree(fixture("/json/single-healthy-response.json")));
     }
 
     @Test
@@ -88,7 +88,7 @@ void shouldHandleMultipleHealthStateViewsCorrectly() throws IOException {
         // then
         assertThat(response.isHealthy()).isTrue();
         assertThat(response.getContentType()).isEqualTo(MediaType.APPLICATION_JSON);
-        assertThat(response.getMessage()).isEqualToIgnoringWhitespace(fixture("/json/multiple-healthy-responses.json"));
+        assertThat(mapper.readTree(response.getMessage())).isEqualTo(mapper.readTree(fixture("/json/multiple-healthy-responses.json")));
     }
 
     @Test

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TlsSocketAppenderFactoryTest.java
Patch:
@@ -72,6 +72,7 @@ void testTlsLogging() throws Exception {
             Logger logger = LoggerFactory.getLogger("com.example.app");
             List<String> loggedMessages = generateLogs(logger);
 
+            loggingFactory.stop();
             loggingFactory.reset();
 
             assertThat(receivedMessages.get(1, TimeUnit.MINUTES))

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -124,6 +124,9 @@ public Optional<P> authenticate(C credentials) throws AuthenticationException {
             if (cause instanceof AuthenticationException) {
                 throw (AuthenticationException) cause;
             }
+            if (cause == null) {
+                throw new AuthenticationException(e);
+            }
             throw new AuthenticationException(cause);
         }
     }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/DataExceptionMapper.java
Patch:
@@ -13,7 +13,9 @@ public class DataExceptionMapper implements ExceptionMapper<DataException> {
 
     @Override
     public Response toResponse(DataException e) {
-        final String causeMessage = Optional.ofNullable(e.getCause().getMessage()).orElse("");
+        final String causeMessage = Optional.ofNullable(e.getCause())
+            .map(Throwable::getMessage)
+            .orElse("");
         final String message = causeMessage.contains("EMAIL") ? "Wrong email" : "Wrong input";
 
         return Response.status(Response.Status.BAD_REQUEST)

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -124,6 +124,9 @@ public Optional<P> authenticate(C credentials) throws AuthenticationException {
             if (cause instanceof AuthenticationException) {
                 throw (AuthenticationException) cause;
             }
+            if (cause == null) {
+                throw new AuthenticationException(e);
+            }
             throw new AuthenticationException(cause);
         }
     }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/DataExceptionMapper.java
Patch:
@@ -13,7 +13,9 @@ public class DataExceptionMapper implements ExceptionMapper<DataException> {
 
     @Override
     public Response toResponse(DataException e) {
-        final String causeMessage = Optional.ofNullable(e.getCause().getMessage()).orElse("");
+        final String causeMessage = Optional.ofNullable(e.getCause())
+            .map(Throwable::getMessage)
+            .orElse("");
         final String message = causeMessage.contains("EMAIL") ? "Wrong email" : "Wrong input";
 
         return Response.status(Response.Status.BAD_REQUEST)

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -124,6 +124,9 @@ public Optional<P> authenticate(C credentials) throws AuthenticationException {
             if (cause instanceof AuthenticationException) {
                 throw (AuthenticationException) cause;
             }
+            if (cause == null) {
+                throw new AuthenticationException(e);
+            }
             throw new AuthenticationException(cause);
         }
     }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/DataExceptionMapper.java
Patch:
@@ -13,7 +13,9 @@ public class DataExceptionMapper implements ExceptionMapper<DataException> {
 
     @Override
     public Response toResponse(DataException e) {
-        final String causeMessage = Optional.ofNullable(e.getCause().getMessage()).orElse("");
+        final String causeMessage = Optional.ofNullable(e.getCause())
+            .map(Throwable::getMessage)
+            .orElse("");
         final String message = causeMessage.contains("EMAIL") ? "Wrong email" : "Wrong input";
 
         return Response.status(Response.Status.BAD_REQUEST)

File: dropwizard-util/src/main/java/io/dropwizard/util/Throwables.java
Patch:
@@ -43,7 +43,7 @@ public static Throwable getRootCause(Throwable throwable) {
                 throw new IllegalArgumentException("Loop in causal chain detected.", throwable);
             }
             if (advanceSlowPointer) {
-                slowPointer = slowPointer.getCause();
+                slowPointer = slowPointer == null ? null : slowPointer.getCause();
             }
             advanceSlowPointer = !advanceSlowPointer; // only advance every other iteration
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalCookieParamResourceTest.java
Patch:
@@ -34,9 +34,10 @@ void shouldReturnDefaultMessageWhenMessageIsNotPresent() {
     }
 
     @Test
-    void shouldReturnMessageWhenMessageIsBlank() {
+    void shouldReturnDefaultMessageWhenMessageIsBlank() {
+        String defaultMessage = "Default Message";
         String response = target("/optional/message").request().cookie("message", "").get(String.class);
-        assertThat(response).isEmpty();
+        assertThat(response).isEqualTo(defaultMessage);
     }
 
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalFormParamResourceTest.java
Patch:
@@ -37,11 +37,12 @@ void shouldReturnDefaultMessageWhenMessageIsNotPresent() {
     }
 
     @Test
-    void shouldReturnMessageWhenMessageBlank() {
+    void shouldReturnDefaultMessageWhenMessageBlank() {
+        String defaultMessage = "Default Message";
         final Form form = new Form("message", "");
         final Response response = target("/optional/message").request().post(Entity.form(form));
 
-        assertThat(response.readEntity(String.class)).isEmpty();
+        assertThat(response.readEntity(String.class)).isEqualTo(defaultMessage);
     }
 
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalHeaderParamResourceTest.java
Patch:
@@ -34,9 +34,10 @@ void shouldReturnDefaultMessageWhenMessageIsNotPresent() {
     }
 
     @Test
-    void shouldReturnMessageWhenMessageIsBlank() {
+    void shouldReturnDefaultMessageWhenMessageIsBlank() {
+        String defaultMessage = "Default Message";
         String response = target("/optional/message").request().header("message", "").get(String.class);
-        assertThat(response).isEmpty();
+        assertThat(response).isEqualTo(defaultMessage);
     }
 
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalQueryParamResourceTest.java
Patch:
@@ -41,9 +41,10 @@ void shouldReturnMessageWhenMessageIsPresent() {
     }
 
     @Test
-    void shouldReturnMessageWhenMessageIsBlank() {
+    void shouldReturnDefaultMessageWhenMessageIsBlank() {
+        String defaultMessage = "Default Message";
         String response = target("/optional/message").queryParam("message", "").request().get(String.class);
-        assertThat(response).isEmpty();
+        assertThat(response).isEqualTo(defaultMessage);
     }
 
     @Test

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/AbstractDAOTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.ArgumentMatchers.same;
+import static org.mockito.Mockito.doCallRealMethod;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -207,6 +208,7 @@ void initializesProxies() throws Exception {
         final LazyInitializer initializer = mock(LazyInitializer.class);
         when(initializer.isUninitialized()).thenReturn(true);
         final HibernateProxy proxy = mock(HibernateProxy.class);
+        doCallRealMethod().when(proxy).asHibernateProxy();
         when(proxy.getHibernateLazyInitializer()).thenReturn(initializer);
 
         dao.initialize(proxy);

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryFactoryTest.java
Patch:
@@ -7,12 +7,12 @@
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.logging.common.BootstrapLogging;
 import org.checkerframework.checker.nullness.qual.Nullable;
-import org.hibernate.EmptyInterceptor;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.Transaction;
 import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;
 import org.hibernate.cfg.Configuration;
+import org.hibernate.internal.EmptyInterceptor;
 import org.hibernate.service.ServiceRegistry;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;

File: dropwizard-health/src/test/java/io/dropwizard/health/response/JsonHealthResponseProviderTest.java
Patch:
@@ -61,7 +61,7 @@ void shouldHandleSingleHealthStateViewCorrectly() throws IOException {
         // then
         assertThat(response.isHealthy()).isTrue();
         assertThat(response.getContentType()).isEqualTo(MediaType.APPLICATION_JSON);
-        assertThat(response.getMessage()).isEqualToIgnoringWhitespace(fixture("/json/single-healthy-response.json"));
+        assertThat(mapper.readTree(response.getMessage())).isEqualTo(mapper.readTree(fixture("/json/single-healthy-response.json")));
     }
 
     @Test
@@ -87,7 +87,7 @@ void shouldHandleMultipleHealthStateViewsCorrectly() throws IOException {
         // then
         assertThat(response.isHealthy()).isTrue();
         assertThat(response.getContentType()).isEqualTo(MediaType.APPLICATION_JSON);
-        assertThat(response.getMessage()).isEqualToIgnoringWhitespace(fixture("/json/multiple-healthy-responses.json"));
+        assertThat(mapper.readTree(response.getMessage())).isEqualTo(mapper.readTree(fixture("/json/multiple-healthy-responses.json")));
     }
 
     @Test

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableSubstitutorTest.java
Patch:
@@ -68,10 +68,10 @@ void substitutorReplacesRecursively() {
         assertThat(substitutor.replace("${TEST${TEST_SUFFIX}3:-abc}")).isEqualTo("abc");
         assertThat(substitutor.replace("${TEST${TEST_SUFFIX133:-2}:-abc}")).isEqualTo(System.getenv("TEST2"));
     }
-    
+
     @Test
     void shouldNotBeVulnerableToCVE_2022_42889() {
         EnvironmentVariableSubstitutor substitutor = new EnvironmentVariableSubstitutor(false, false);
-        assertThat(substitutor.replace("${script:javascript:3 + 4}")).isEqualTo(System.getenv("${script:javascript:3 + 4}"));
+        assertThat(substitutor.replace("${script:javascript:3 + 4}")).isEqualTo("${script:javascript:3 + 4}");
     }
 }

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableSubstitutorTest.java
Patch:
@@ -68,10 +68,10 @@ void substitutorReplacesRecursively() {
         assertThat(substitutor.replace("${TEST${TEST_SUFFIX}3:-abc}")).isEqualTo("abc");
         assertThat(substitutor.replace("${TEST${TEST_SUFFIX133:-2}:-abc}")).isEqualTo(System.getenv("TEST2"));
     }
-    
+
     @Test
     void shouldNotBeVulnerableToCVE_2022_42889() {
         EnvironmentVariableSubstitutor substitutor = new EnvironmentVariableSubstitutor(false, false);
-        assertThat(substitutor.replace("${script:javascript:3 + 4}")).isEqualTo(System.getenv("${script:javascript:3 + 4}"));
+        assertThat(substitutor.replace("${script:javascript:3 + 4}")).isEqualTo("${script:javascript:3 + 4}");
     }
 }

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableSubstitutorTest.java
Patch:
@@ -71,10 +71,10 @@ void substitutorReplacesRecursively() {
         assertThat(substitutor.replace("${TEST${TEST_SUFFIX}3:-abc}")).isEqualTo("abc");
         assertThat(substitutor.replace("${TEST${TEST_SUFFIX133:-2}:-abc}")).isEqualTo(System.getenv("TEST2"));
     }
-    
+
     @Test
     void shouldNotBeVulnerableToCVE_2022_42889() {
         EnvironmentVariableSubstitutor substitutor = new EnvironmentVariableSubstitutor(false, false);
-        assertThat(substitutor.replace("${script:javascript:3 + 4}")).isEqualTo(System.getenv("${script:javascript:3 + 4}"));
+        assertThat(substitutor.replace("${script:javascript:3 + 4}")).isEqualTo("${script:javascript:3 + 4}");
     }
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -85,7 +85,7 @@ private SessionFactory buildSessionFactory(HibernateBundle<?> bundle,
         configuration.setProperty(AvailableSettings.USE_REFLECTION_OPTIMIZER, "true");
         configuration.setProperty(AvailableSettings.ORDER_UPDATES, "true");
         configuration.setProperty(AvailableSettings.ORDER_INSERTS, "true");
-        configuration.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
+
         for (Map.Entry<String, String> property : properties.entrySet()) {
             configuration.setProperty(property.getKey(), property.getValue());
         }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -19,6 +19,7 @@
 import jakarta.ws.rs.client.Entity;
 import jakarta.ws.rs.client.Invocation;
 import jakarta.ws.rs.core.Application;
+import jakarta.ws.rs.core.GenericType;
 import jakarta.ws.rs.core.HttpHeaders;
 import jakarta.ws.rs.core.MediaType;
 import jakarta.ws.rs.core.Response;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java
Patch:
@@ -116,7 +116,6 @@ protected DAOTest buildDAOTest() {
             config.setProperty(AvailableSettings.USE_REFLECTION_OPTIMIZER, "true");
             config.setProperty(AvailableSettings.ORDER_UPDATES, "true");
             config.setProperty(AvailableSettings.ORDER_INSERTS, "true");
-            config.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
 
             entityClasses.forEach(config::addAnnotatedClass);
             properties.forEach(config::setProperty);

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationMetadata.java
Patch:
@@ -26,7 +26,7 @@
  *     &#064;NotNull
  *     private String name;
  *
- *     private List&lt;String&gt names = Collections.emptyList();
+ *     private List&lt;String&gt; names = Collections.emptyList();
  *
  *     &#064;JsonProperty
  *     public String getName() {

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -85,6 +85,7 @@ private SessionFactory buildSessionFactory(HibernateBundle<?> bundle,
         configuration.setProperty(AvailableSettings.USE_REFLECTION_OPTIMIZER, "true");
         configuration.setProperty(AvailableSettings.ORDER_UPDATES, "true");
         configuration.setProperty(AvailableSettings.ORDER_INSERTS, "true");
+        configuration.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
         for (Map.Entry<String, String> property : properties.entrySet()) {
             configuration.setProperty(property.getKey(), property.getValue());
         }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryManager.java
Patch:
@@ -13,7 +13,7 @@ public SessionFactoryManager(SessionFactory factory, ManagedDataSource dataSourc
         this.dataSource = dataSource;
     }
 
-    ManagedDataSource getDataSource() {
+    public ManagedDataSource getDataSource() {
         return dataSource;
     }
 

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategy.java
Patch:
@@ -16,6 +16,9 @@
 public class AnnotationSensitivePropertyNamingStrategy extends PropertyNamingStrategy {
     private static final long serialVersionUID = -1372862028366311230L;
 
+    /**
+     * The snake case naming strategy to use, if a class is annotated with {@link JsonSnakeCase}.
+     */
     private final PropertyNamingStrategy snakeCase = new PropertyNamingStrategies.SnakeCaseStrategy();
 
     @Override

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/CaffeineModule.java
Patch:
@@ -20,6 +20,8 @@
 import java.io.IOException;
 
 /**
+ * A Jackson module that can (de)serialize {@link CaffeineSpec CaffeineSpecs}.
+ *
  * @since 2.0
  */
 public class CaffeineModule extends Module {

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/FuzzyEnumModule.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * A module for deserializing enums that is more permissive than the default.
- * <p/>
+ * <br/>
  * This deserializer is more permissive in the following ways:
  * <ul>
  * <li>Whitespace is permitted but stripped from the input.</li>

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/GuavaExtrasModule.java
Patch:
@@ -19,6 +19,9 @@
 
 import java.io.IOException;
 
+/**
+ * A Jackson module that can (de)serialize {@link CacheBuilderSpec CacheBuilderSpecs}.
+ */
 public class GuavaExtrasModule extends Module {
     private static class CacheBuilderSpecDeserializer extends JsonDeserializer<CacheBuilderSpec> {
         @Override

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java
Patch:
@@ -116,6 +116,7 @@ protected DAOTest buildDAOTest() {
             config.setProperty(AvailableSettings.USE_REFLECTION_OPTIMIZER, "true");
             config.setProperty(AvailableSettings.ORDER_UPDATES, "true");
             config.setProperty(AvailableSettings.ORDER_INSERTS, "true");
+            config.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
 
             entityClasses.forEach(config::addAnnotatedClass);
             properties.forEach(config::setProperty);

File: dropwizard-util/src/main/java/io/dropwizard/util/DirectExecutorService.java
Patch:
@@ -7,6 +7,8 @@
 import java.util.concurrent.TimeUnit;
 
 /**
+ * An implementation of an {@link java.util.concurrent.ExecutorService} which directly executes a task, if the service has not shut down already.
+ *
  * @since 2.0
  */
 public class DirectExecutorService extends AbstractExecutorService {

File: dropwizard-util/src/main/java/io/dropwizard/util/Enums.java
Patch:
@@ -9,7 +9,7 @@ public class Enums {
 
     /**
      * Convert a string to an enum with more permissive rules than {@link Enum} valueOf().
-     * <p/>
+     * <br/>
      * This method is more permissive in the following ways:
      * <ul>
      * <li>Whitespace is permitted but stripped from the input.</li>

File: dropwizard-util/src/main/java/io/dropwizard/util/Throwables.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.function.Predicate;
 
 /**
+ * Provides helper methods to work with {@link Throwable} objects.
+ *
  * @since 2.0
  */
 public final class Throwables {

File: dropwizard-validation/src/main/java/io/dropwizard/validation/OneOfValidator.java
Patch:
@@ -3,6 +3,9 @@
 import jakarta.validation.ConstraintValidator;
 import jakarta.validation.ConstraintValidatorContext;
 
+/**
+ * Check that the string representation of an object is in a given set of valid values.
+ */
 public class OneOfValidator implements ConstraintValidator<OneOf, Object> {
     private String[] values = new String[]{};
     private boolean caseInsensitive;

File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java
Patch:
@@ -26,6 +26,9 @@
 public class SelfValidatingValidator implements ConstraintValidator<SelfValidating, Object> {
     private final Logger log;
 
+    /**
+     * Constructs a new {@link SelfValidatingValidator} instance with a new logger of this class.
+     */
     public SelfValidatingValidator() {
         this(LoggerFactory.getLogger(SelfValidatingValidator.class));
     }

File: dropwizard-validation/src/main/java/io/dropwizard/validation/valuehandling/GuavaOptionalValueExtractor.java
Patch:
@@ -13,6 +13,9 @@
  * @since 2.0
  */
 public class GuavaOptionalValueExtractor implements ValueExtractor<Optional<@ExtractedValue ?>> {
+    /**
+     * A singleton {@link ValueExtractorDescriptor} for the {@link GuavaOptionalValueExtractor}.
+     */
     public static final ValueExtractorDescriptor DESCRIPTOR = new ValueExtractorDescriptor(new GuavaOptionalValueExtractor());
 
     private GuavaOptionalValueExtractor() {

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -84,7 +84,6 @@ private SessionFactory buildSessionFactory(HibernateBundle<?> bundle,
         configuration.setProperty(AvailableSettings.ORDER_UPDATES, "true");
         configuration.setProperty(AvailableSettings.ORDER_INSERTS, "true");
         configuration.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
-        configuration.setProperty("jadira.usertype.autoRegisterUserTypes", "true");
         for (Map.Entry<String, String> property : properties.entrySet()) {
             configuration.setProperty(property.getKey(), property.getValue());
         }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java
Patch:
@@ -117,7 +117,6 @@ protected DAOTest buildDAOTest() {
             config.setProperty(AvailableSettings.ORDER_UPDATES, "true");
             config.setProperty(AvailableSettings.ORDER_INSERTS, "true");
             config.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
-            config.setProperty("jadira.usertype.autoRegisterUserTypes", "true");
 
             entityClasses.forEach(config::addAnnotatedClass);
             properties.forEach(config::setProperty);

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationMetadata.java
Patch:
@@ -26,7 +26,7 @@
  *     &#064;NotNull
  *     private String name;
  *
- *     private List&lt;String&gt names = Collections.emptyList();
+ *     private List&lt;String&gt; names = Collections.emptyList();
  *
  *     &#064;JsonProperty
  *     public String getName() {

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategy.java
Patch:
@@ -16,6 +16,9 @@
 public class AnnotationSensitivePropertyNamingStrategy extends PropertyNamingStrategy {
     private static final long serialVersionUID = -1372862028366311230L;
 
+    /**
+     * The snake case naming strategy to use, if a class is annotated with {@link JsonSnakeCase}.
+     */
     private final PropertyNamingStrategy snakeCase = new PropertyNamingStrategies.SnakeCaseStrategy();
 
     @Override

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/CaffeineModule.java
Patch:
@@ -20,6 +20,8 @@
 import java.io.IOException;
 
 /**
+ * A Jackson module that can (de)serialize {@link CaffeineSpec CaffeineSpecs}.
+ *
  * @since 2.0
  */
 public class CaffeineModule extends Module {

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/FuzzyEnumModule.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * A module for deserializing enums that is more permissive than the default.
- * <p/>
+ * <br/>
  * This deserializer is more permissive in the following ways:
  * <ul>
  * <li>Whitespace is permitted but stripped from the input.</li>

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/GuavaExtrasModule.java
Patch:
@@ -19,6 +19,9 @@
 
 import java.io.IOException;
 
+/**
+ * A Jackson module that can (de)serialize {@link CacheBuilderSpec CacheBuilderSpecs}.
+ */
 public class GuavaExtrasModule extends Module {
     private static class CacheBuilderSpecDeserializer extends JsonDeserializer<CacheBuilderSpec> {
         @Override

File: dropwizard-util/src/main/java/io/dropwizard/util/DirectExecutorService.java
Patch:
@@ -7,6 +7,8 @@
 import java.util.concurrent.TimeUnit;
 
 /**
+ * An implementation of an {@link java.util.concurrent.ExecutorService} which directly executes a task, if the service has not shut down already.
+ *
  * @since 2.0
  */
 public class DirectExecutorService extends AbstractExecutorService {

File: dropwizard-util/src/main/java/io/dropwizard/util/Enums.java
Patch:
@@ -9,7 +9,7 @@ public class Enums {
 
     /**
      * Convert a string to an enum with more permissive rules than {@link Enum} valueOf().
-     * <p/>
+     * <br/>
      * This method is more permissive in the following ways:
      * <ul>
      * <li>Whitespace is permitted but stripped from the input.</li>

File: dropwizard-util/src/main/java/io/dropwizard/util/Strings.java
Patch:
@@ -5,9 +5,11 @@
 import static java.util.Objects.requireNonNull;
 
 /**
+ * Provides helper methods to work with {@link String} objects.
+ *
  * @since 2.0
  *
- * @deprecated 
+ * @deprecated The class was intended for internal use only. If you need those methods, simply copy them into your project.
  */
 @Deprecated
 public final class Strings {

File: dropwizard-validation/src/main/java/io/dropwizard/validation/OneOfValidator.java
Patch:
@@ -3,6 +3,9 @@
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
 
+/**
+ * Check that the string representation of an object is in a given set of valid values.
+ */
 public class OneOfValidator implements ConstraintValidator<OneOf, Object> {
     private String[] values = new String[]{};
     private boolean caseInsensitive;

File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java
Patch:
@@ -26,6 +26,9 @@
 public class SelfValidatingValidator implements ConstraintValidator<SelfValidating, Object> {
     private final Logger log;
 
+    /**
+     * Constructs a new {@link SelfValidatingValidator} instance with a new logger of this class.
+     */
     public SelfValidatingValidator() {
         this(LoggerFactory.getLogger(SelfValidatingValidator.class));
     }

File: dropwizard-validation/src/main/java/io/dropwizard/validation/valuehandling/GuavaOptionalValueExtractor.java
Patch:
@@ -14,6 +14,9 @@
  * @since 2.0
  */
 public class GuavaOptionalValueExtractor implements ValueExtractor<Optional<@ExtractedValue ?>> {
+    /**
+     * A singleton {@link ValueExtractorDescriptor} for the {@link GuavaOptionalValueExtractor}.
+     */
     public static final ValueExtractorDescriptor DESCRIPTOR = new ValueExtractorDescriptor(new GuavaOptionalValueExtractor());
 
     private GuavaOptionalValueExtractor() {

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.stream.Collectors;
 
 public class SessionFactoryFactory {
     private static final Logger LOGGER = LoggerFactory.getLogger(SessionFactoryFactory.class);
@@ -62,7 +63,8 @@ private ConnectionProvider buildConnectionProvider(DataSource dataSource,
                                                        Map<String, String> properties) {
         final DatasourceConnectionProviderImpl connectionProvider = new DatasourceConnectionProviderImpl();
         connectionProvider.setDataSource(dataSource);
-        connectionProvider.configure(properties);
+        Map<String, Object> newProperties = properties.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+        connectionProvider.configure(newProperties);
         return connectionProvider;
     }
 
@@ -83,8 +85,6 @@ private SessionFactory buildSessionFactory(HibernateBundle<?> bundle,
         configuration.setProperty(AvailableSettings.USE_REFLECTION_OPTIMIZER, "true");
         configuration.setProperty(AvailableSettings.ORDER_UPDATES, "true");
         configuration.setProperty(AvailableSettings.ORDER_INSERTS, "true");
-        configuration.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
-        configuration.setProperty("jadira.usertype.autoRegisterUserTypes", "true");
         for (Map.Entry<String, String> property : properties.entrySet()) {
             configuration.setProperty(property.getKey(), property.getValue());
         }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java
Patch:
@@ -116,8 +116,6 @@ protected DAOTest buildDAOTest() {
             config.setProperty(AvailableSettings.USE_REFLECTION_OPTIMIZER, "true");
             config.setProperty(AvailableSettings.ORDER_UPDATES, "true");
             config.setProperty(AvailableSettings.ORDER_INSERTS, "true");
-            config.setProperty(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true");
-            config.setProperty("jadira.usertype.autoRegisterUserTypes", "true");
 
             entityClasses.forEach(config::addAnnotatedClass);
             properties.forEach(config::setProperty);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/DefaultLoggingFactory.java
Patch:
@@ -113,8 +113,8 @@ public void setAppenders(List<AppenderFactory<ILoggingEvent>> appenders) {
     public void configure(MetricRegistry metricRegistry, String name) {
         LoggingUtil.hijackJDKLogging();
 
-        CHANGE_LOGGER_CONTEXT_LOCK.lock();
         final Logger root;
+        CHANGE_LOGGER_CONTEXT_LOCK.lock();
         try {
             root = configureLoggers(name);
         } finally {

File: dropwizard-logging/src/main/java/io/dropwizard/logging/DefaultLoggingFactory.java
Patch:
@@ -122,8 +122,8 @@ public void setAppenders(List<AppenderFactory<ILoggingEvent>> appenders) {
     public void configure(MetricRegistry metricRegistry, String name) {
         LoggingUtil.hijackJDKLogging();
 
-        CHANGE_LOGGER_CONTEXT_LOCK.lock();
         final Logger root;
+        CHANGE_LOGGER_CONTEXT_LOCK.lock();
         try {
             root = configureLoggers(name);
         } finally {

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbStatusCommandTest.java
Patch:
@@ -45,14 +45,14 @@ void testRunOnMigratedDb() throws Exception {
     void testRun() throws Exception {
         statusCommand.run(null, new Namespace(Collections.emptyMap()), MigrationTestSupport.createConfiguration());
         assertThat(baos.toString(UTF_8.name())).matches(
-                "3 change sets have not been applied to \\S+\\R");
+                "3 changesets have not been applied to \\S+\\R");
     }
 
     @Test
     void testVerbose() throws Exception {
         statusCommand.run(null, new Namespace(Collections.singletonMap("verbose", true)), MigrationTestSupport.createConfiguration());
         assertThat(baos.toString(UTF_8.name())).matches(
-                "3 change sets have not been applied to \\S+\\R" +
+                "3 changesets have not been applied to \\S+\\R" +
                         "\\s*migrations\\.xml::1::db_dev\\R" +
                         "\\s*migrations\\.xml::2::db_dev\\R" +
                         "\\s*migrations\\.xml::3::db_dev\\R");

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit5/DropwizardAppExtension.java
Patch:
@@ -15,6 +15,7 @@
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.client.ClientProperties;
 import org.glassfish.jersey.client.JerseyClientBuilder;
+import org.glassfish.jersey.client.RequestEntityProcessing;
 import org.glassfish.jersey.grizzly.connector.GrizzlyConnectorProvider;
 
 import javax.ws.rs.client.Client;
@@ -258,7 +259,8 @@ protected JerseyClientBuilder clientBuilder() {
         clientConfig.connectorProvider(new GrizzlyConnectorProvider())
             .register(new JacksonFeature(getObjectMapper()))
             .property(ClientProperties.CONNECT_TIMEOUT, DEFAULT_CONNECT_TIMEOUT_MS)
-            .property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT_MS);
+            .property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT_MS)
+            .property(ClientProperties.REQUEST_ENTITY_PROCESSING, RequestEntityProcessing.BUFFERED);
         return new JerseyClientBuilder().withConfig(clientConfig);
     }
 }

File: dropwizard-validation/src/main/java/io/dropwizard/validation/PortRangeValidator.java
Patch:
@@ -19,6 +19,6 @@ public void initialize(PortRange constraintAnnotation) {
 
     @Override
     public boolean isValid(Integer value, ConstraintValidatorContext context) {
-        return value == 0 || (value >= min && value <= max);
+        return value == null || value == 0 || (value >= min && value <= max);
     }
 }

File: dropwizard-validation/src/main/java/io/dropwizard/validation/PortRangeValidator.java
Patch:
@@ -19,6 +19,6 @@ public void initialize(PortRange constraintAnnotation) {
 
     @Override
     public boolean isValid(Integer value, ConstraintValidatorContext context) {
-        return value == 0 || (value >= min && value <= max);
+        return value == null || value == 0 || (value >= min && value <= max);
     }
 }

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbStatusCommandTest.java
Patch:
@@ -45,14 +45,14 @@ void testRunOnMigratedDb() throws Exception {
     void testRun() throws Exception {
         statusCommand.run(null, new Namespace(Collections.emptyMap()), MigrationTestSupport.createConfiguration());
         assertThat(baos.toString(UTF_8.name())).matches(
-                "3 change sets have not been applied to \\S+\\R");
+                "3 changesets have not been applied to \\S+\\R");
     }
 
     @Test
     void testVerbose() throws Exception {
         statusCommand.run(null, new Namespace(Collections.singletonMap("verbose", true)), MigrationTestSupport.createConfiguration());
         assertThat(baos.toString(UTF_8.name())).matches(
-                "3 change sets have not been applied to \\S+\\R" +
+                "3 changesets have not been applied to \\S+\\R" +
                         "\\s*migrations\\.xml::1::db_dev\\R" +
                         "\\s*migrations\\.xml::2::db_dev\\R" +
                         "\\s*migrations\\.xml::3::db_dev\\R");

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit5/DropwizardAppExtension.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Function;
 
+import org.glassfish.jersey.client.RequestEntityProcessing;
 import org.glassfish.jersey.grizzly.connector.GrizzlyConnectorProvider;
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
@@ -281,7 +282,8 @@ protected JerseyClientBuilder clientBuilder() {
         clientConfig.connectorProvider(new GrizzlyConnectorProvider())
             .register(new JacksonFeature(getObjectMapper()))
             .property(ClientProperties.CONNECT_TIMEOUT, DEFAULT_CONNECT_TIMEOUT_MS)
-            .property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT_MS);
+            .property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT_MS)
+            .property(ClientProperties.REQUEST_ENTITY_PROCESSING, RequestEntityProcessing.BUFFERED);
         return new JerseyClientBuilder().withConfig(clientConfig);
     }
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitsOfWork.java
Patch:
@@ -13,6 +13,6 @@
 @Target(METHOD)
 @Retention(RUNTIME)
 @Documented
-@interface UnitsOfWork {
+public @interface UnitsOfWork {
     UnitOfWork[] value();
 }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/LazyLoadingTest.java
Patch:
@@ -59,7 +59,7 @@ void returnsErrorsWhenEnabled() {
 
         // Raf already exists so this should cause a primary key constraint violation
         final Response response = appExtension.client().target("http://localhost:" + appExtension.getLocalPort()).path("/dogs/Raf").request().put(Entity.entity(raf, MediaType.APPLICATION_JSON));
-        assertThat(response.getStatusInfo()).isEqualTo(Response.Status.BAD_REQUEST);
+        assertThat(response.getStatusInfo().toEnum()).isEqualTo(Response.Status.BAD_REQUEST);
         assertThat(response.getHeaderString(HttpHeaders.CONTENT_TYPE)).isEqualTo(MediaType.APPLICATION_JSON);
         assertThat(response.readEntity(ErrorMessage.class).getMessage()).contains("Unique index or primary key violation", "PUBLIC.DOGS(NAME)");
     }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/LazyLoadingTest.java
Patch:
@@ -59,7 +59,7 @@ void returnsErrorsWhenEnabled() {
 
         // Raf already exists so this should cause a primary key constraint violation
         final Response response = appExtension.client().target("http://localhost:" + appExtension.getLocalPort()).path("/dogs/Raf").request().put(Entity.entity(raf, MediaType.APPLICATION_JSON));
-        assertThat(response.getStatusInfo()).isEqualTo(Response.Status.BAD_REQUEST);
+        assertThat(response.getStatusInfo().toEnum()).isEqualTo(Response.Status.BAD_REQUEST);
         assertThat(response.getHeaderString(HttpHeaders.CONTENT_TYPE)).isEqualTo(MediaType.APPLICATION_JSON);
         assertThat(response.readEntity(ErrorMessage.class).getMessage()).contains("Unique index or primary key violation", "PUBLIC.DOGS(NAME)");
     }

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbFastForwardCommandTest.java
Patch:
@@ -19,7 +19,6 @@
 
 @Execution(SAME_THREAD)
 class DbFastForwardCommandTest {
-
     private final DbFastForwardCommand<TestMigrationConfiguration> fastForwardCommand = new DbFastForwardCommand<>(
         TestMigrationConfiguration::getDataSource, TestMigrationConfiguration.class, "migrations.xml");
     private TestMigrationConfiguration conf;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/AuthDynamicFeatureInjectionTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.auth;
 
+import org.checkerframework.checker.nullness.qual.Nullable;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
@@ -10,7 +11,6 @@
 import java.io.IOException;
 import java.security.Principal;
 
-import javax.annotation.Nullable;
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
 import javax.ws.rs.client.WebTarget;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbMigrateDifferentFileCommandTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.jdbi.v3.core.Handle;
 import org.jdbi.v3.core.Jdbi;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.parallel.Execution;
 
@@ -37,7 +36,6 @@ void testRun() throws Exception {
     }
 
     @Test
-    @Disabled("Ignored until https://liquibase.jira.com/browse/CORE-3262 has been solved")
     void testRunForFileFromFilesystem() throws Exception {
         final String migrationsPath = getClass().getResource("/migrations.xml").getPath();
         migrateCommand.run(null, new Namespace(Collections.singletonMap("migrations-file", migrationsPath)), conf);

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/dual/HibernateBundle.java
Patch:
@@ -1,5 +1,7 @@
 package io.dropwizard.hibernate.dual;
 
+import static java.util.Objects.requireNonNull;
+
 import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.PooledDataSourceFactory;
 import io.dropwizard.hibernate.SessionFactoryFactory;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2CIntegrationTest.java
Patch:
@@ -7,7 +7,6 @@
 import org.eclipse.jetty.client.HttpClient;
 import org.eclipse.jetty.http.HttpVersion;
 import org.eclipse.jetty.http2.client.HTTP2Client;
-import org.eclipse.jetty.http2.client.HTTP2ClientConnectionFactory;
 import org.eclipse.jetty.http2.client.http.HttpClientTransportOverHTTP2;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java
Patch:
@@ -40,6 +40,9 @@
 import org.eclipse.jetty.util.thread.ThreadPool;
 
 import javax.annotation.Nullable;
+import jakarta.validation.constraints.Min;
+import jakarta.validation.constraints.NotNull;
+import jakarta.validation.valueextraction.Unwrapping;
 import java.io.IOException;
 import java.util.Objects;
 import java.util.Optional;

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/ServerCommand.java
Patch:
@@ -47,7 +47,7 @@ protected Class<T> getConfigurationClass() {
     protected void run(Environment environment, Namespace namespace, T configuration) throws Exception {
         final Server server = configuration.getServerFactory().build(environment);
         try {
-            server.addLifeCycleListener(new LifeCycleListener());
+            server.addEventListener(new LifeCycleListener());
             cleanupAsynchronously();
             server.start();
         } catch (Exception e) {

File: dropwizard-core/src/main/java/io/dropwizard/core/server/AbstractServerFactory.java
Patch:
@@ -2,8 +2,6 @@
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
-import com.codahale.metrics.jetty9.InstrumentedHandler;
-import com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool;
 import com.codahale.metrics.servlets.AdminServlet;
 import com.codahale.metrics.servlets.HealthCheckServlet;
 import com.codahale.metrics.servlets.MetricsServlet;
@@ -20,6 +18,8 @@
 import io.dropwizard.jetty.MutableServletContextHandler;
 import io.dropwizard.jetty.ServerPushFilterFactory;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
+import io.dropwizard.metrics.jetty10.InstrumentedHandler;
+import io.dropwizard.metrics.jetty10.InstrumentedQueuedThreadPool;
 import io.dropwizard.request.logging.LogbackAccessRequestLogFactory;
 import io.dropwizard.request.logging.RequestLogFactory;
 import io.dropwizard.servlets.ThreadNameFilter;
@@ -620,7 +620,7 @@ protected ThreadPool createThreadPool(MetricRegistry metricRegistry) {
     protected Server buildServer(LifecycleEnvironment lifecycle,
                                  ThreadPool threadPool) {
         final Server server = new Server(threadPool);
-        server.addLifeCycleListener(buildSetUIDListener());
+        server.addEventListener(buildSetUIDListener());
         lifecycle.attach(server);
         final ErrorHandler errorHandler = new ErrorHandler();
         errorHandler.setServer(server);

File: dropwizard-core/src/main/java/io/dropwizard/core/server/DefaultServerFactory.java
Patch:
@@ -1,13 +1,13 @@
 package io.dropwizard.core.server;
 
 import com.codahale.metrics.MetricRegistry;
-import com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.ConnectorFactory;
 import io.dropwizard.jetty.HttpConnectorFactory;
 import io.dropwizard.jetty.RoutingHandler;
+import io.dropwizard.metrics.jetty10.InstrumentedQueuedThreadPool;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Server;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/AdminEnvironment.java
Patch:
@@ -43,7 +43,7 @@ public AdminEnvironment(MutableServletContextHandler handler,
         tasks.add(new GarbageCollectionTask());
         tasks.add(new LogConfigurationTask());
         addServlet("tasks", tasks).addMapping("/tasks/*");
-        handler.addLifeCycleListener(new LifeCycle.Listener() {
+        handler.addEventListener(new LifeCycle.Listener() {
             @Override
             public void lifeCycleStarting(LifeCycle event) {
                 logTasks();

File: dropwizard-core/src/main/java/io/dropwizard/core/sslreload/SslReloadBundle.java
Patch:
@@ -24,7 +24,7 @@ public class SslReloadBundle implements ConfiguredBundle<Configuration> {
 
     @Override
     public void run(Configuration configuration, Environment environment) {
-        environment.getApplicationContext().addLifeCycleListener(new LifeCycle.Listener() {
+        environment.getApplicationContext().addEventListener(new LifeCycle.Listener() {
             @Override
             public void lifeCycleStarted(LifeCycle event) {
                 final Set<SslReload> reloaders = new HashSet<>();

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2CConnectorFactory.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.http2;
 
 import com.codahale.metrics.MetricRegistry;
-import com.codahale.metrics.jetty9.InstrumentedConnectionFactory;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.dropwizard.jetty.HttpConnectorFactory;
 import io.dropwizard.jetty.HttpsConnectorFactory;
+import io.dropwizard.metrics.jetty10.InstrumentedConnectionFactory;
 import org.eclipse.jetty.http2.server.HTTP2CServerConnectionFactory;
 import org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory;
 import org.eclipse.jetty.server.Connector;

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2ConnectorFactory.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.http2;
 
 import com.codahale.metrics.MetricRegistry;
-import com.codahale.metrics.jetty9.InstrumentedConnectionFactory;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.dropwizard.jetty.HttpsConnectorFactory;
 import io.dropwizard.jetty.SslReload;
+import io.dropwizard.metrics.jetty10.InstrumentedConnectionFactory;
 import org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory;
 import org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory;
 import org.eclipse.jetty.server.Connector;
@@ -105,8 +105,8 @@ public Connector build(Server server, MetricRegistry metrics, String name, @Null
         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory();
         alpn.setDefaultProtocol("http/1.1"); // Speak HTTP 1.1 over TLS if negotiation fails
 
-        final SslContextFactory sslContextFactory = configureSslContextFactory(new SslContextFactory.Server());
-        sslContextFactory.addLifeCycleListener(logSslParameters(sslContextFactory));
+        final SslContextFactory.Server sslContextFactory = configureSslContextFactory(new SslContextFactory.Server());
+        sslContextFactory.addEventListener(logSslParameters(sslContextFactory));
         server.addBean(sslContextFactory);
         server.addBean(new SslReload(sslContextFactory, this::configureSslContextFactory));
 

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2CIntegrationTest.java
Patch:
@@ -7,7 +7,6 @@
 import org.eclipse.jetty.client.HttpClient;
 import org.eclipse.jetty.http.HttpVersion;
 import org.eclipse.jetty.http2.client.HTTP2Client;
-import org.eclipse.jetty.http2.client.HTTP2ClientConnectionFactory;
 import org.eclipse.jetty.http2.client.http.HttpClientTransportOverHTTP2;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -26,8 +25,9 @@ class Http2CIntegrationTest extends Http2TestCommon {
     @Override
     void setUp() throws Exception {
         final HTTP2Client http2Client = new HTTP2Client();
-        http2Client.setClientConnectionFactory(new HTTP2ClientConnectionFactory()); // No need for ALPN
-        this.http2Client = new HttpClient(new HttpClientTransportOverHTTP2(http2Client), null);
+        HttpClientTransportOverHTTP2 httpClientTransportOverHTTP2 = new HttpClientTransportOverHTTP2(http2Client);
+        httpClientTransportOverHTTP2.setUseALPN(false);
+        this.http2Client = new HttpClient(httpClientTransportOverHTTP2);
         this.http2Client.start();
 
         this.http1Client = new HttpClient();

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/GzipHandlerTest.java
Patch:
@@ -42,7 +42,6 @@ void setUp() throws Exception {
         request.setHeader("Connection", "close");
         request.setURI("/banner");
 
-        gzipHandler.setExcludedAgentPatterns();
         gzipHandler.addIncludedMethods("POST");
         servletTester.addServlet(BannerServlet.class, "/banner");
         servletTester.getContext().setGzipHandler(gzipHandler);

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.jetty;
 
 import com.codahale.metrics.MetricRegistry;
-import com.codahale.metrics.jetty9.InstrumentedConnectionFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
@@ -10,6 +9,7 @@
 import io.dropwizard.logging.common.ConsoleAppenderFactory;
 import io.dropwizard.logging.common.FileAppenderFactory;
 import io.dropwizard.logging.common.SyslogAppenderFactory;
+import io.dropwizard.metrics.jetty10.InstrumentedConnectionFactory;
 import io.dropwizard.util.DataSize;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.BaseValidator;
@@ -162,7 +162,7 @@ void testBuildConnector() throws Exception {
                     .asInstanceOf(InstanceOfAssertFactories.type(HttpConnectionFactory.class))
                     .satisfies(factory -> {
                         assertThat(factory.getInputBufferSize()).isEqualTo(8192);
-                        assertThat(factory.getHttpCompliance()).isEqualByComparingTo(HttpCompliance.RFC7230);
+                        assertThat(factory.getHttpConfiguration().getHttpCompliance()).isEqualTo(HttpCompliance.RFC7230);
                     })
                     .extracting(HttpConnectionFactory::getHttpConfiguration)
                     .satisfies(config -> {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpsConnectorFactoryTest.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.jetty;
 
 import com.codahale.metrics.MetricRegistry;
-import com.codahale.metrics.jetty9.InstrumentedConnectionFactory;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.metrics.jetty10.InstrumentedConnectionFactory;
 import io.dropwizard.validation.BaseValidator;
 import org.assertj.core.api.InstanceOfAssertFactories;
 import org.eclipse.jetty.server.ConnectionFactory;

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/LifecycleEnvironment.java
Patch:
@@ -77,22 +77,22 @@ public void addServerLifecycleListener(ServerLifecycleListener listener) {
         lifecycleListeners.add(new ServerListener(listener));
     }
 
-    public void addLifeCycleListener(LifeCycle.Listener listener) {
+    public void addEventListener(LifeCycle.Listener listener) {
         lifecycleListeners.add(listener);
     }
 
     public void attach(ContainerLifeCycle container) {
         for (LifeCycle object : managedObjects) {
             container.addBean(object);
         }
-        container.addLifeCycleListener(new LifeCycle.Listener() {
+        container.addEventListener(new LifeCycle.Listener() {
             @Override
             public void lifeCycleStarting(LifeCycle event) {
                 LOGGER.debug("managed objects = {}", managedObjects);
             }
         });
         for (LifeCycle.Listener listener : lifecycleListeners) {
-            container.addLifeCycleListener(listener);
+            container.addEventListener(listener);
         }
     }
 

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/LifecycleEnvironmentTest.java
Patch:
@@ -45,6 +45,7 @@ void managesManagedObjects() {
         environment.attach(container);
 
         assertThat(container.getBeans())
+            .filteredOn(bean -> bean instanceof JettyManaged)
             .singleElement()
             .isInstanceOfSatisfying(JettyManaged.class, jettyManaged ->
                 assertThat(jettyManaged.getManaged()).isSameAs(managed));

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/old/DropwizardSlf4jRequestLogWriterTest.java
Patch:
@@ -44,7 +44,7 @@ void setUp() throws Exception {
         when(request.getRemoteHost()).thenReturn("10.0.0.1");
         when(request.getTimeStamp()).thenReturn(TimeUnit.SECONDS.toMillis(1353042047));
         when(request.getMethod()).thenReturn("GET");
-        when(request.getHttpURI()).thenReturn(new HttpURI("/test/things?yay"));
+        when(request.getHttpURI()).thenReturn(HttpURI.from("/test/things?yay"));
         when(request.getProtocol()).thenReturn("HTTP/1.1");
         when(request.getHttpChannelState()).thenReturn(channelState);
         when(request.getTimeStamp()).thenReturn(TimeUnit.SECONDS.toMillis(1353042048));

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/assets/AssetServletTest.java
Patch:
@@ -152,7 +152,7 @@ void servesFilesFromRootsWithSameName() throws Exception {
 
     @Test
     void cacheIfModifiedSinceOverwrittenByIfNoneMatch() throws Exception{
-        request.setHeader(HttpHeader.IF_MODIFIED_SINCE.toString(), "Sat, 05 Nov 1955 22:57:05 GMT"); 
+        request.setHeader(HttpHeader.IF_MODIFIED_SINCE.toString(), "Sat, 05 Nov 1955 22:57:05 GMT");
         request.setURI(DUMMY_SERVLET + "index.htm");
         response = HttpTester.parseResponse(SERVLET_TESTER.getResponses(request.generate()));
 
@@ -497,7 +497,7 @@ void throwsA404IfNoIndexFileIsDefined() throws Exception {
         request.setURI(NOINDEX_SERVLET + '/');
         response = HttpTester.parseResponse(SERVLET_TESTER.getResponses(request.generate()));
         assertThat(response.getStatus())
-                .isEqualTo(404);
+                .isEqualTo(400);
 
         // Subdirectory listing:
         request.setURI(NOINDEX_SERVLET + "some_directory");
@@ -525,7 +525,7 @@ void doesNotAllowOverridingPaths() throws Exception {
         request.setURI(DUMMY_SERVLET + "/etc/passwd");
         response = HttpTester.parseResponse(SERVLET_TESTER.getResponses(request.generate()));
         assertThat(response.getStatus())
-                .isEqualTo(404);
+                .isEqualTo(400);
     }
 
     @Test

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CustomAuthExceptionTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.auth.basic.BasicCredentialAuthFilter;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthorizer.java
Patch:
@@ -9,7 +9,6 @@
 import com.github.benmanes.caffeine.cache.LoadingCache;
 import com.github.benmanes.caffeine.cache.stats.CacheStats;
 import com.github.benmanes.caffeine.cache.stats.StatsCounter;
-import com.google.common.annotations.VisibleForTesting;
 
 import javax.annotation.Nullable;
 import javax.ws.rs.container.ContainerRequestContext;
@@ -48,7 +47,6 @@ public class CachingAuthorizer<P extends Principal> implements Authorizer<P> {
     // thus result in read through to the underlying `Authorizer`.
     //
     // Field is package-private to be visible for unit tests
-    @VisibleForTesting
     final LoadingCache<AuthorizationContext<P>, Boolean> cache;
 
     /**

File: dropwizard-auth/src/main/java/io/dropwizard/auth/basic/BasicCredentialAuthFilter.java
Patch:
@@ -6,7 +6,6 @@
 import javax.annotation.Nullable;
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
-import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.SecurityContext;
@@ -26,7 +25,7 @@ public void filter(ContainerRequestContext requestContext) throws IOException {
         final BasicCredentials credentials =
                 getCredentials(requestContext.getHeaders().getFirst(HttpHeaders.AUTHORIZATION));
         if (!authenticate(requestContext, credentials, SecurityContext.BASIC_AUTH)) {
-            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));
+            throw unauthorizedHandler.buildException(prefix, realm);
         }
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java
Patch:
@@ -54,7 +54,7 @@ public void filter(ContainerRequestContext containerRequestContext) throws IOExc
         }
 
         if (firstException == null) {
-            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));
+            throw unauthorizedHandler.buildException(prefix, realm);
         }
         throw firstException;
     }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/oauth/OAuthCredentialAuthFilter.java
Patch:
@@ -6,7 +6,6 @@
 import javax.annotation.Nullable;
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
-import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.SecurityContext;
@@ -36,7 +35,7 @@ public void filter(final ContainerRequestContext requestContext) throws IOExcept
         }
 
         if (!authenticate(requestContext, credentials, SecurityContext.BASIC_AUTH)) {
-            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));
+            throw unauthorizedHandler.buildException(prefix, realm);
         }
     }
 

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.validation.Validator;
 import javax.ws.rs.client.Client;
-import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.client.RxInvokerProvider;
 import javax.ws.rs.core.Configuration;
 import java.util.ArrayList;
@@ -355,7 +354,7 @@ private Client build(String name, ExecutorService threadPool,
             apacheHttpClientBuilder.disableContentCompression(true);
         }
 
-        final Client client = ClientBuilder.newClient(buildConfig(name, threadPool, objectMapper, validator));
+        final Client client = org.glassfish.jersey.client.JerseyClientBuilder.createClient(buildConfig(name, threadPool, objectMapper, validator));
         client.register(new JerseyIgnoreRequestUserAgentHeaderFilter());
 
         // Tie the client to server lifecycle

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/ConfiguredCommand.java
Patch:
@@ -99,6 +99,8 @@ public void run(Bootstrap<?> wildcardBootstrap, Namespace namespace) throws Exce
         } finally {
             if (!asynchronous) {
                 cleanup();
+            } else if (configuration != null) {
+                configuration.getLoggingFactory().stop();
             }
         }
     }

File: dropwizard-health/src/main/java/io/dropwizard/health/check/http/HttpHealthCheck.java
Patch:
@@ -2,12 +2,12 @@
 
 import com.codahale.metrics.health.HealthCheck;
 import org.glassfish.jersey.client.ClientProperties;
+import org.glassfish.jersey.client.JerseyClientBuilder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.annotation.Nonnull;
 import javax.ws.rs.client.Client;
-import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.core.Response;
 import java.time.Duration;
 import java.util.Objects;
@@ -32,7 +32,7 @@ public HttpHealthCheck(@Nonnull final String url,
         if (readTimeout.toMillis() <= 0L || connectionTimeout.toMillis() <= 0L) {
             throw new IllegalStateException();
         }
-        this.client = ClientBuilder.newClient()
+        this.client = JerseyClientBuilder.createClient()
             .property(ClientProperties.CONNECT_TIMEOUT, (int) connectionTimeout.toMillis())
             .property(ClientProperties.READ_TIMEOUT, (int) readTimeout.toMillis());
     }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWork.java
Patch:
@@ -4,6 +4,7 @@
 import org.hibernate.FlushMode;
 
 import java.lang.annotation.Documented;
+import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -21,6 +22,7 @@
 @Target(METHOD)
 @Retention(RUNTIME)
 @Documented
+@Repeatable(UnitsOfWork.class)
 public @interface UnitOfWork {
     /**
      * If {@code true}, the Hibernate session will default to loading read-only entities.

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleTest.java
Patch:
@@ -7,7 +7,6 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.MediaType;
 
@@ -21,7 +20,7 @@ public class DropwizardAppRuleTest {
 
     @Test
     public void canGetExpectedResourceOverHttp() {
-        final String content = ClientBuilder.newClient().target(
+        final String content = RULE.client().target(
             "http://localhost:" + RULE.getLocalPort() + "/test").request().get(String.class);
 
         assertThat(content).isEqualTo("Yes, it's here");

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/AbstractDropwizardAppExtensionTest.java
Patch:
@@ -3,10 +3,10 @@
 import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.app.DropwizardTestApplication;
 import io.dropwizard.testing.app.TestConfiguration;
+import org.glassfish.jersey.client.JerseyClientBuilder;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.MediaType;
 import java.util.Optional;
@@ -17,7 +17,7 @@ abstract class AbstractDropwizardAppExtensionTest {
 
     @Test
     void canGetExpectedResourceOverHttp() {
-        final String content = ClientBuilder.newClient().target(
+        final String content = JerseyClientBuilder.createClient().target(
                 "http://localhost:" + getExtension().getLocalPort() + "/test").request().get(String.class);
 
         assertThat(content).isEqualTo("Yes, it's here");

File: dropwizard-auth/src/main/java/io/dropwizard/auth/basic/BasicCredentialAuthFilter.java
Patch:
@@ -6,7 +6,6 @@
 import javax.annotation.Nullable;
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
-import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.SecurityContext;
@@ -26,7 +25,7 @@ public void filter(ContainerRequestContext requestContext) throws IOException {
         final BasicCredentials credentials =
                 getCredentials(requestContext.getHeaders().getFirst(HttpHeaders.AUTHORIZATION));
         if (!authenticate(requestContext, credentials, SecurityContext.BASIC_AUTH)) {
-            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));
+            throw unauthorizedHandler.buildException(prefix, realm);
         }
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java
Patch:
@@ -54,7 +54,7 @@ public void filter(ContainerRequestContext containerRequestContext) throws IOExc
         }
 
         if (firstException == null) {
-            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));
+            throw unauthorizedHandler.buildException(prefix, realm);
         }
         throw firstException;
     }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/oauth/OAuthCredentialAuthFilter.java
Patch:
@@ -6,7 +6,6 @@
 import javax.annotation.Nullable;
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
-import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.SecurityContext;
@@ -36,7 +35,7 @@ public void filter(final ContainerRequestContext requestContext) throws IOExcept
         }
 
         if (!authenticate(requestContext, credentials, SecurityContext.BASIC_AUTH)) {
-            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));
+            throw unauthorizedHandler.buildException(prefix, realm);
         }
     }
 

File: dropwizard-archetypes/java-simple/src/main/resources/archetype-resources/src/main/java/__name__Application.java
Patch:
@@ -1,8 +1,8 @@
 package ${package};
 
-import io.dropwizard.Application;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 
 public class ${name}Application extends Application<${name}Configuration> {
 

File: dropwizard-archetypes/java-simple/src/main/resources/archetype-resources/src/main/java/__name__Configuration.java
Patch:
@@ -1,6 +1,6 @@
 package ${package};
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import org.hibernate.validator.constraints.*;
 import jakarta.validation.constraints.*;

File: dropwizard-assets/src/main/java/io/dropwizard/assets/AssetsBundle.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.assets;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.servlets.assets.AssetServlet;
-import io.dropwizard.setup.Environment;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dropwizard-assets/src/test/java/io/dropwizard/assets/AssetsBundleTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.assets;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.setup.ServletEnvironment;
 import io.dropwizard.servlets.assets.AssetServlet;
 import io.dropwizard.servlets.assets.ResourceURL;
-import io.dropwizard.setup.Environment;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java
Patch:
@@ -136,7 +136,7 @@ protected boolean authenticate(ContainerRequestContext requestContext, @Nullable
             }
 
             final Optional<P> principal = authenticator.authenticate(credentials);
-            if (!principal.isPresent()) {
+            if (principal.isEmpty()) {
                 return false;
             }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthorizationContext.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.auth;
 
-import java.security.Principal;
-import java.util.Objects;
+import jakarta.ws.rs.container.ContainerRequestContext;
 
 import javax.annotation.Nullable;
-import jakarta.ws.rs.container.ContainerRequestContext;
+import java.security.Principal;
+import java.util.Objects;
 
 public abstract class AuthorizationContext<P extends Principal> {
     private final P principal;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -100,7 +100,7 @@ public CachingAuthenticator(final MetricRegistry metricRegistry,
             loader = key -> {
                 cacheMisses.mark();
                 final Optional<P> optPrincipal = authenticator.authenticate(key);
-                if (!optPrincipal.isPresent()) {
+                if (optPrincipal.isEmpty()) {
                     // Prevent caching of unknown credentials
                     throw new InvalidCredentialsException();
                 }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/DefaultAuthorizationContext.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.auth;
 
-import java.security.Principal;
+import jakarta.ws.rs.container.ContainerRequestContext;
 
 import javax.annotation.Nullable;
-import jakarta.ws.rs.container.ContainerRequestContext;
+import java.security.Principal;
 
 /**
  * The default implementation of {@link AuthorizationContext},

File: dropwizard-auth/src/test/java/io/dropwizard/auth/AuthBaseTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.auth;
 
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthCustomProviderTest.java
Patch:
@@ -5,11 +5,10 @@
 import io.dropwizard.auth.AuthResource;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import jakarta.ws.rs.container.ContainerRequestFilter;
 
 import java.util.Arrays;
 
-import jakarta.ws.rs.container.ContainerRequestFilter;
-
 public class OAuthCustomProviderTest extends AuthBaseTest<OAuthCustomProviderTest.OAuthTestResourceConfig> {
     public static class OAuthTestResourceConfig extends AbstractAuthResourceConfig {
         public OAuthTestResourceConfig() {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -5,12 +5,11 @@
 import io.dropwizard.auth.AuthResource;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import jakarta.ws.rs.container.ContainerRequestFilter;
 import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
 
-import jakarta.ws.rs.container.ContainerRequestFilter;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 class OAuthProviderTest extends AuthBaseTest<OAuthProviderTest.OAuthTestResourceConfig> {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/principal/NoAuthPolymorphicPrincipalEntityTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.auth.AbstractAuthResourceConfig;
 import io.dropwizard.auth.PolymorphicAuthDynamicFeature;
 import io.dropwizard.auth.PolymorphicAuthValueFactoryProvider;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/principal/NoAuthPrincipalEntityTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.auth.AbstractAuthResourceConfig;
 import io.dropwizard.auth.AuthDynamicFeature;
 import io.dropwizard.auth.AuthValueFactoryProvider;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/principal/PolymorphicPrincipalEntityTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.auth.PolymorphicAuthValueFactoryProvider;
 import io.dropwizard.auth.basic.BasicCredentialAuthFilter;
 import io.dropwizard.auth.basic.BasicCredentials;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/util/AuthUtil.java
Patch:
@@ -51,7 +51,7 @@ public static Authenticator<String, Principal> getMultiplyUsersOAuthAuthenticato
 
     public static Authorizer<Principal> getTestAuthorizer(final String validUser,
                                                           final String validRole) {
-        return (principal, role) -> principal != null
+        return (principal, role, context) -> principal != null
             && validUser.equals(principal.getName())
             && validRole.equals(role);
     }

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/SelfValidatingBenchmark.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.benchmarks.jersey;
 
 import io.dropwizard.jersey.validation.Validators;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.validation.ValidationMethod;
 import io.dropwizard.validation.selfvalidating.SelfValidating;
 import io.dropwizard.validation.selfvalidating.SelfValidation;

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -9,8 +9,8 @@
 import io.dropwizard.client.proxy.NonProxyListProxyRoutePlanner;
 import io.dropwizard.client.proxy.ProxyConfiguration;
 import io.dropwizard.client.ssl.TlsConfiguration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.lifecycle.Managed;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Duration;
 import org.apache.hc.client5.http.DnsResolver;
 import org.apache.hc.client5.http.HttpRequestRetryStrategy;

File: dropwizard-client/src/main/java/io/dropwizard/client/proxy/AuthConfiguration.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import jakarta.validation.constraints.NotEmpty;
+import jakarta.validation.constraints.Pattern;
 
 import javax.annotation.Nullable;
-import jakarta.validation.constraints.Pattern;
 
 /**
  * Represents a configuration of credentials for either Username Password or NT credentials

File: dropwizard-client/src/main/java/io/dropwizard/client/proxy/ProxyConfiguration.java
Patch:
@@ -3,11 +3,11 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.dropwizard.validation.OneOf;
 import io.dropwizard.validation.PortRange;
+import jakarta.validation.Valid;
 import jakarta.validation.constraints.NotEmpty;
+import jakarta.validation.constraints.NotNull;
 
 import javax.annotation.Nullable;
-import jakarta.validation.Valid;
-import jakarta.validation.constraints.NotNull;
 import java.util.List;
 
 /**

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardApacheConnectorTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.client;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import io.dropwizard.util.Duration;

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardSSLConnectionSocketFactoryTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.client;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.client.ssl.TlsConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import io.dropwizard.util.Duration;

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -4,12 +4,12 @@
 import com.codahale.metrics.httpclient5.HttpClientMetricNameStrategies;
 import com.codahale.metrics.httpclient5.HttpClientMetricNameStrategy;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jersey.gzip.ConfiguredGZipEncoder;
 import io.dropwizard.jersey.gzip.GZipDecoder;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.setup.ExecutorServiceBuilder;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.setup.Environment;
 import org.apache.hc.client5.http.DnsResolver;
 import org.apache.hc.client5.http.HttpRequestRetryStrategy;
 import org.apache.hc.client5.http.SystemDefaultDnsResolver;

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilterTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.client;
 
 import com.codahale.metrics.MetricRegistry;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import io.dropwizard.util.Duration;

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationMetadata.java
Patch:
@@ -94,7 +94,7 @@ private Optional<JavaType> getTypeOfField(String fieldName) {
     public boolean isCollectionOfStrings(String fieldName) {
         Optional<JavaType> propertyType = getTypeOfField(fieldName);
 
-        if (!propertyType.isPresent()) {
+        if (propertyType.isEmpty()) {
             return false;
         }
 

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/SubstitutingSourceProvider.java
Patch:
@@ -1,13 +1,12 @@
 package io.dropwizard.configuration;
 
+import org.apache.commons.text.StringSubstitutor;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-import org.apache.commons.text.StringSubstitutor;
-
 import static java.util.Objects.requireNonNull;
 
 /**

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/YamlConfigurationFactory.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.configuration;
 
-import javax.annotation.Nullable;
-import jakarta.validation.Validator;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
+import jakarta.validation.Validator;
+
+import javax.annotation.Nullable;
 
 /**
  * A factory class for loading YAML configuration files, binding them to configuration objects, and

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryFactoryTest.java
Patch:
@@ -5,7 +5,6 @@
 import io.dropwizard.configuration.BaseConfigurationFactoryTest.Example;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.validation.BaseValidator;
-
 import org.junit.jupiter.api.Test;
 
 import jakarta.validation.Validator;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableSubstitutorTest.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.configuration;
 
+import org.junit.jupiter.api.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assumptions.assumeThat;
 
-import org.junit.jupiter.api.Test;
-
 class EnvironmentVariableSubstitutorTest {
 
     @Test

File: dropwizard-core/src/main/java/io/dropwizard/core/ConfiguredBundle.java
Patch:
@@ -1,7 +1,7 @@
-package io.dropwizard;
+package io.dropwizard.core;
 
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 
 /**
  * A reusable bundle of functionality, used to define blocks of application behavior that are

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/Cli.java
Patch:
@@ -1,6 +1,6 @@
-package io.dropwizard.cli;
+package io.dropwizard.core.cli;
 
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.ArgumentParsers;
 import net.sourceforge.argparse4j.helper.HelpScreenException;

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/Command.java
Patch:
@@ -1,6 +1,6 @@
-package io.dropwizard.cli;
+package io.dropwizard.core.cli;
 
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.setup.Bootstrap;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;
 

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/ConfiguredCommand.java
Patch:
@@ -1,12 +1,12 @@
-package io.dropwizard.cli;
+package io.dropwizard.core.cli;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ConfigurationException;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.configuration.ConfigurationFactoryFactory;
 import io.dropwizard.configuration.ConfigurationSourceProvider;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.util.Generics;
 import net.sourceforge.argparse4j.inf.Argument;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-core/src/main/java/io/dropwizard/core/server/AbstractServerFactory.java
Patch:
@@ -1,10 +1,12 @@
-package io.dropwizard.server;
+package io.dropwizard.core.server;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import io.dropwizard.core.setup.AdminEnvironment;
+import io.dropwizard.core.setup.ExceptionMapperBinder;
 import io.dropwizard.jersey.filter.AllowedMethodsFilter;
 import io.dropwizard.jersey.jackson.JacksonFeature;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
@@ -21,8 +23,6 @@
 import io.dropwizard.request.logging.LogbackAccessRequestLogFactory;
 import io.dropwizard.request.logging.RequestLogFactory;
 import io.dropwizard.servlets.ThreadNameFilter;
-import io.dropwizard.setup.AdminEnvironment;
-import io.dropwizard.setup.ExceptionMapperBinder;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.MinDuration;
 import io.dropwizard.validation.ValidationMethod;

File: dropwizard-core/src/main/java/io/dropwizard/core/server/ServerFactory.java
Patch:
@@ -1,8 +1,8 @@
-package io.dropwizard.server;
+package io.dropwizard.core.server;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jackson.Discoverable;
-import io.dropwizard.setup.Environment;
 import org.eclipse.jetty.server.Server;
 
 /**

File: dropwizard-core/src/main/java/io/dropwizard/core/server/SimpleServerFactory.java
Patch:
@@ -1,11 +1,12 @@
-package io.dropwizard.server;
+package io.dropwizard.core.server;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.ConnectorFactory;
 import io.dropwizard.jetty.ContextRoutingHandler;
 import io.dropwizard.jetty.HttpConnectorFactory;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Environment;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Server;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/AdminEnvironment.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
@@ -12,6 +12,7 @@
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import static java.util.Objects.requireNonNull;
 
 /**

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/AdminFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.dropwizard.servlets.tasks.TaskConfiguration;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/Environment.java
Patch:
@@ -1,11 +1,12 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.codahale.metrics.health.SharedHealthCheckRegistries;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.validation.InjectValidatorFeature;
 import io.dropwizard.health.HealthEnvironment;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -16,7 +17,6 @@
 import io.dropwizard.jetty.MutableServletContextHandler;
 import io.dropwizard.jetty.setup.ServletEnvironment;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.validation.InjectValidatorFeature;
 
 import javax.annotation.Nullable;
 import jakarta.servlet.Servlet;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/ExceptionMapperBinder.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import io.dropwizard.jersey.errors.EarlyEofExceptionMapper;
 import io.dropwizard.jersey.errors.EofExceptionWriterInterceptor;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/HealthCheckConfiguration.java
Patch:
@@ -1,6 +1,7 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+
 import java.util.StringJoiner;
 
 /**

File: dropwizard-core/src/main/java/io/dropwizard/core/sslreload/SslReloadTask.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.sslreload;
+package io.dropwizard.core.sslreload;
 
 import io.dropwizard.jetty.SslReload;
 import io.dropwizard.servlets.tasks.Task;

File: dropwizard-core/src/main/java/io/dropwizard/core/validation/InjectValidatorFeature.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.validation;
+package io.dropwizard.core.validation;
 
 import io.dropwizard.jersey.validation.MutableValidatorFactory;
 import org.glassfish.jersey.server.validation.internal.InjectingConstraintValidatorFactory;

File: dropwizard-core/src/test/java/io/dropwizard/core/ConfigurationTest.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard;
+package io.dropwizard.core;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jetty.ConnectorFactory;
-import io.dropwizard.logging.AppenderFactory;
+import io.dropwizard.logging.common.AppenderFactory;
 import org.junit.jupiter.api.Test;
 
 import java.util.ServiceLoader;

File: dropwizard-core/src/test/java/io/dropwizard/core/setup/AdminEnvironmentTest.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import io.dropwizard.jetty.MutableServletContextHandler;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.servlets.tasks.Task;
 import org.eclipse.jetty.server.Server;
 import org.junit.jupiter.api.Test;

File: dropwizard-core/src/test/java/io/dropwizard/core/setup/BootstrapTest.java
Patch:
@@ -1,14 +1,14 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.Histogram;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.UniformReservoir;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.DefaultConfigurationFactoryFactory;
 import io.dropwizard.configuration.FileConfigurationSourceProvider;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jackson.Jackson;
 import org.hibernate.validator.HibernateValidator;
 import org.junit.jupiter.api.BeforeEach;

File: dropwizard-core/src/test/java/io/dropwizard/core/sslreload/SslReloadTaskTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.sslreload;
+package io.dropwizard.core.sslreload;
 
 import io.dropwizard.jetty.SslReload;
 import org.junit.jupiter.api.Test;

File: dropwizard-e2e/src/main/java/com/example/app1/App1Resource.java
Patch:
@@ -1,6 +1,6 @@
 package com.example.app1;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 import jakarta.ws.rs.Consumes;
 import jakarta.ws.rs.GET;

File: dropwizard-e2e/src/main/java/com/example/badlog/BadLogApp.java
Patch:
@@ -1,8 +1,8 @@
 package com.example.badlog;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dropwizard-e2e/src/main/java/com/example/health/HealthApp.java
Patch:
@@ -1,10 +1,10 @@
 package com.example.health;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.health.HealthStateListener;
-import io.dropwizard.setup.Environment;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;

File: dropwizard-e2e/src/main/java/com/example/httpsessions/HttpSessionsApp.java
Patch:
@@ -1,8 +1,8 @@
 package com.example.httpsessions;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import org.eclipse.jetty.server.session.SessionHandler;
 
 public class HttpSessionsApp extends Application<Configuration> {

File: dropwizard-e2e/src/main/java/com/example/validation/DefaultValidatorApp.java
Patch:
@@ -1,8 +1,8 @@
 package com.example.validation;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 
 public class DefaultValidatorApp extends Application<Configuration> {
 

File: dropwizard-e2e/src/test/java/com/example/app1/App1Test.java
Patch:
@@ -1,9 +1,9 @@
 package com.example.app1;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.client.JerseyClientBuilder;
 import io.dropwizard.client.JerseyClientConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/forms/FormsAppTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.example.forms;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.client.JerseyClientBuilder;
 import io.dropwizard.client.JerseyClientConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jersey.errors.ErrorMessage;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/health/HealthIntegrationTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.health;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/httpsessions/HttpSessionsTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.httpsessions;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.junit.jupiter.api.Test;

File: dropwizard-e2e/src/test/java/com/example/request_log/AbstractRequestLogPatternIntegrationTest.java
Patch:
@@ -1,12 +1,12 @@
 package com.example.request_log;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.client.JerseyClientBuilder;
 import io.dropwizard.client.JerseyClientConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/validation/BeanValidatorTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/validation/InjectValidatorTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.validation;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.junit.jupiter.api.Test;

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldConfiguration.java
Patch:
@@ -2,12 +2,12 @@
 
 import com.example.helloworld.core.Template;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DataSourceFactory;
-import jakarta.validation.constraints.NotEmpty;
-
 import jakarta.validation.Valid;
+import jakarta.validation.constraints.NotEmpty;
 import jakarta.validation.constraints.NotNull;
+
 import java.util.Collections;
 import java.util.Map;
 

File: dropwizard-example/src/main/java/com/example/helloworld/cli/RenderCommand.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.example.helloworld.HelloWorldConfiguration;
 import com.example.helloworld.core.Template;
-import io.dropwizard.cli.ConfiguredCommand;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.cli.ConfiguredCommand;
+import io.dropwizard.core.setup.Bootstrap;
 import net.sourceforge.argparse4j.impl.Arguments;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;

File: dropwizard-example/src/main/java/com/example/helloworld/db/PersonDAO.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.example.helloworld.core.Person;
 import io.dropwizard.hibernate.AbstractDAO;
-
 import org.hibernate.SessionFactory;
 
 import java.util.List;

File: dropwizard-example/src/main/java/com/example/helloworld/resources/ViewResource.java
Patch:
@@ -1,6 +1,6 @@
 package com.example.helloworld.resources;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 import jakarta.ws.rs.GET;
 import jakarta.ws.rs.Path;

File: dropwizard-example/src/main/java/com/example/helloworld/views/PersonView.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.helloworld.views;
 
 import com.example.helloworld.core.Person;
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 public class PersonView extends View {
     private final Person person;

File: dropwizard-forms/src/main/java/io/dropwizard/forms/MultiPartBundle.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.forms;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Environment;
 import org.glassfish.jersey.media.multipart.MultiPartFeature;
 
 /**

File: dropwizard-forms/src/test/java/io/dropwizard/forms/MultiPartBundleTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.forms;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.media.multipart.MultiPartFeature;
 import org.junit.jupiter.api.Test;
 

File: dropwizard-health/src/main/java/io/dropwizard/health/HealthStateView.java
Patch:
@@ -1,10 +1,11 @@
 package io.dropwizard.health;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import java.util.Objects;
-import javax.annotation.Nonnull;
 import jakarta.validation.constraints.NotNull;
 
+import javax.annotation.Nonnull;
+import java.util.Objects;
+
 public final class HealthStateView implements Comparable<HealthStateView> {
     @NotNull
     @JsonProperty

File: dropwizard-health/src/test/java/io/dropwizard/health/DefaultHealthFactoryTest.java
Patch:
@@ -46,8 +46,6 @@ void shouldBuildHealthFactoryFromYaml() throws Exception {
         assertThat(healthFactory.getShutdownWaitPeriod().toMilliseconds()).isEqualTo(1L);
         assertThat(healthFactory.getHealthCheckUrlPaths()).isEqualTo(singletonList("/health-check"));
 
-        assertThat(healthFactory.getHealthChecks()).isEqualTo(healthFactory.getHealthCheckConfigurations());
-
         assertThat(healthFactory.getHealthCheckConfigurations()
             .stream()
             .map(HealthCheckConfiguration::getName)

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.hibernate;
 
 import io.dropwizard.util.Generics;
+import jakarta.persistence.criteria.CriteriaQuery;
 import org.hibernate.Criteria;
 import org.hibernate.Hibernate;
 import org.hibernate.HibernateException;
@@ -12,8 +13,6 @@
 import java.io.Serializable;
 import java.util.List;
 
-import jakarta.persistence.criteria.CriteriaQuery;
-
 import static java.util.Objects.requireNonNull;
 
 /**

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -2,11 +2,11 @@
 
 import com.fasterxml.jackson.datatype.hibernate5.jakarta.Hibernate5JakartaModule;
 import com.fasterxml.jackson.datatype.hibernate5.jakarta.Hibernate5JakartaModule.Feature;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DatabaseConfiguration;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Duration;
 import org.hibernate.SessionFactory;
 

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.hibernate;
 
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.ManagedDataSource;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Environment;
 import org.hibernate.SessionFactory;
 import org.hibernate.boot.registry.BootstrapServiceRegistry;
 import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/HibernateBundleTest.java
Patch:
@@ -4,12 +4,12 @@
 import com.fasterxml.jackson.databind.Module;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.hibernate5.jakarta.Hibernate5JakartaModule;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
 import org.hibernate.SessionFactory;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkAwareProxyFactoryTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.hibernate;
 
 import com.codahale.metrics.MetricRegistry;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.hibernate.CacheMode;
 import org.hibernate.HibernateException;
 import org.hibernate.Session;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/FakeApplication.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.http2;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 
 import jakarta.ws.rs.GET;
 import jakarta.ws.rs.Path;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2CIntegrationTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.eclipse.jetty.client.HttpClient;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2IntegrationTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2TestCommon.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.eclipse.jetty.client.HttpClient;
 import org.eclipse.jetty.client.api.ContentResponse;
 import org.eclipse.jetty.client.api.Result;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2WithConscryptTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.conscrypt.OpenSSLProvider;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2WithCustomCipherTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.eclipse.jetty.http.HttpVersion;

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java
Patch:
@@ -1,7 +1,5 @@
 package io.dropwizard.jackson;
 
-import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
-
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.guava.GuavaModule;
@@ -13,6 +11,8 @@
 
 import javax.annotation.Nullable;
 
+import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
+
 /**
  * A utility class for Jackson.
  */

File: dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/JdbiFactory.java
Patch:
@@ -4,9 +4,9 @@
 import com.codahale.metrics.jdbi3.InstrumentedSqlLogger;
 import com.codahale.metrics.jdbi3.strategies.SmartNameStrategy;
 import com.codahale.metrics.jdbi3.strategies.StatementNameStrategy;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.ManagedDataSource;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Duration;
 import org.jdbi.v3.core.Jdbi;
 import org.jdbi.v3.core.statement.SqlStatements;

File: dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/bundles/JdbiExceptionsBundle.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.jdbi3.bundles;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jdbi3.jersey.LoggingJdbiExceptionMapper;
 import io.dropwizard.jdbi3.jersey.LoggingSQLExceptionMapper;
-import io.dropwizard.setup.Environment;
 
 /**
  * A bundle for logging {@link java.sql.SQLException}s and {@link org.jdbi.v3.core.JdbiException}s

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/JdbiTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.jdbi3.strategies.TimedAnnotationNameStrategy;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.jdbi.v3.core.Jdbi;
 import org.joda.time.DateTime;

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/bundles/JdbiExceptionsBundleTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.jdbi3.bundles;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jdbi3.jersey.LoggingJdbiExceptionMapper;
 import io.dropwizard.jdbi3.jersey.LoggingSQLExceptionMapper;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
-import io.dropwizard.setup.Environment;
 import org.junit.jupiter.api.Test;
 
 import static org.mockito.Mockito.isA;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/AbstractJerseyTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey;
 
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.client.ClientProperties;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/InstantParamTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.jersey.jsr310;
 
 import org.junit.jupiter.api.Test;
+
 import java.time.Instant;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/InstantSecondParamTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.jersey.jsr310;
 
 import org.junit.jupiter.api.Test;
+
 import java.time.Instant;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/InstantParamTest.java
Patch:
@@ -1,12 +1,12 @@
 package io.dropwizard.jersey.params;
 
 import io.dropwizard.jersey.errors.ErrorMessage;
+import jakarta.ws.rs.WebApplicationException;
 import org.junit.jupiter.api.Test;
 
 import java.time.Instant;
-import java.time.ZoneOffset;
 import java.time.LocalDateTime;
-import jakarta.ws.rs.WebApplicationException;
+import java.time.ZoneOffset;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/SubBeanParameter.java
Patch:
@@ -3,8 +3,8 @@
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProviderTest;
 import io.dropwizard.validation.ValidationMethod;
 import jakarta.validation.constraints.NotEmpty;
-
 import jakarta.ws.rs.QueryParam;
+
 import java.util.Locale;
 
 public class SubBeanParameter extends BeanParameter {

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/AbstractJsonLayoutBaseFactory.java
Patch:
@@ -3,9 +3,9 @@
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 import io.dropwizard.logging.json.layout.JsonFormatter;
 import io.dropwizard.logging.json.layout.TimestampFormatter;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
 
 import javax.annotation.Nullable;
 import jakarta.validation.constraints.NotNull;

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/EventJsonLayoutBaseFactory.java
Patch:
@@ -9,15 +9,15 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.dropwizard.logging.json.layout.EventJsonLayout;
-
 import io.dropwizard.logging.json.layout.ExceptionFormat;
+
+import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Set;
 import java.util.TimeZone;
-import javax.annotation.Nullable;
 
 /**
  * <table>

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/LayoutIntegrationTests.java
Patch:
@@ -10,9 +10,9 @@
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.logging.ConsoleAppenderFactory;
-import io.dropwizard.logging.DefaultLoggingFactory;
+import io.dropwizard.logging.common.BootstrapLogging;
+import io.dropwizard.logging.common.ConsoleAppenderFactory;
+import io.dropwizard.logging.common.DefaultLoggingFactory;
 import io.dropwizard.request.logging.LogbackAccessRequestLogFactory;
 import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.http.HttpFields;

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/AutoCloseableManagerTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.lifecycle;
 
+import org.junit.jupiter.api.Test;
+
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.junit.jupiter.api.Test;
-
 class AutoCloseableManagerTest {
 
     private final AutoCloseable managed = mock(AutoCloseable.class);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/BootstrapLogging.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
@@ -7,7 +7,7 @@
 import ch.qos.logback.core.ConsoleAppender;
 import ch.qos.logback.core.Layout;
 import ch.qos.logback.core.encoder.LayoutWrappingEncoder;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 
 import javax.annotation.concurrent.GuardedBy;
 import java.util.TimeZone;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ConsoleAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.ConsoleAppender;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/DropwizardLayout.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.PatternLayout;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ExternalLoggingFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeName;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/FileAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.FileAppender;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/LoggerConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.Logger;
 import ch.qos.logback.classic.spi.ILoggingEvent;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/LoggingFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/LoggingUtil.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import io.dropwizard.util.Duration;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/PrefixedExtendedThrowableProxyConverter.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter;
 import ch.qos.logback.classic.spi.StackTraceElementProxy;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/PrefixedRootCauseFirstThrowableProxyConverter.java
Patch:
@@ -1,12 +1,12 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.pattern.RootCauseFirstThrowableProxyConverter;
 import ch.qos.logback.classic.spi.IThrowableProxy;
 
 import java.util.regex.Pattern;
 
-import static io.dropwizard.logging.PrefixedThrowableProxyConverter.PATTERN;
-import static io.dropwizard.logging.PrefixedThrowableProxyConverter.PREFIX;
+import static io.dropwizard.logging.common.PrefixedThrowableProxyConverter.PATTERN;
+import static io.dropwizard.logging.common.PrefixedThrowableProxyConverter.PREFIX;
 
 /**
  * A {@link RootCauseFirstThrowableProxyConverter} that prefixes stack traces with {@code !}.

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/PrefixedThrowableProxyConverter.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.pattern.ThrowableProxyConverter;
 import ch.qos.logback.classic.spi.IThrowableProxy;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ResilientOutputStreamBase.java
Patch:
@@ -11,7 +11,7 @@
  * under the terms of the GNU Lesser General Public License version 2.1
  * as published by the Free Software Foundation.
  */
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.core.Context;
 import ch.qos.logback.core.recovery.RecoveryCoordinator;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ResilientSocketOutputStream.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import javax.annotation.Nullable;
 import javax.net.SocketFactory;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/TlsSocketAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/UdpSocketAppenderFactory.java
Patch:
@@ -1,11 +1,11 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.OutputStreamAppender;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.socket.DropwizardUdpSocketAppender;
+import io.dropwizard.logging.common.socket.DropwizardUdpSocketAppender;
 import io.dropwizard.validation.PortRange;
 import jakarta.validation.constraints.NotEmpty;
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/async/AsyncAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.async;
+package io.dropwizard.logging.common.async;
 
 import ch.qos.logback.core.AsyncAppenderBase;
 import ch.qos.logback.core.spi.DeferredProcessingAware;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/async/AsyncLoggingEventAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.async;
+package io.dropwizard.logging.common.async;
 
 import ch.qos.logback.classic.AsyncAppender;
 import ch.qos.logback.classic.spi.ILoggingEvent;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/FilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
@@ -12,7 +12,7 @@
  * <ol>
  * <li>Create a class which implements {@link FilterFactory}.</li>
  * <li>Annotate it with {@code @JsonTypeName} and give it a unique type name.</li>
- * <li>add a {@code META-INF/services/io.dropwizard.logging.filter.FilterFactory} file with your
+ * <li>add a {@code META-INF/services/FilterFactory} file with your
  * implementation's full class name to the class path.</li>
  * </ol>
  */

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/LevelFilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.core.filter.Filter;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/NullLevelFilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.core.filter.Filter;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/ThresholdLevelFilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.filter.ThresholdFilter;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/layout/DiscoverableLayoutFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.layout;
+package io.dropwizard.logging.common.layout;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.LayoutBase;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/layout/DropwizardLayoutFactory.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard.logging.layout;
+package io.dropwizard.logging.common.layout;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
-import io.dropwizard.logging.DropwizardLayout;
+import io.dropwizard.logging.common.DropwizardLayout;
 
 import java.util.TimeZone;
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/layout/LayoutFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.layout;
+package io.dropwizard.logging.common.layout;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.pattern.PatternLayoutBase;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/socket/DropwizardSocketAppender.java
Patch:
@@ -1,8 +1,8 @@
-package io.dropwizard.logging.socket;
+package io.dropwizard.logging.common.socket;
 
 import ch.qos.logback.core.OutputStreamAppender;
-import io.dropwizard.logging.ResilientSocketOutputStream;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
+import io.dropwizard.logging.common.ResilientSocketOutputStream;
 
 import javax.net.SocketFactory;
 import java.io.OutputStream;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/socket/DropwizardUdpSocketAppender.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.socket;
+package io.dropwizard.logging.common.socket;
 
 import ch.qos.logback.core.OutputStreamAppender;
 import ch.qos.logback.core.spi.DeferredProcessingAware;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/DefaultLoggingFactoryPrintErrorMessagesTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/DefaultLoggingFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/DropwizardLayoutTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import org.junit.jupiter.api.Test;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/ExternalLoggingFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/PrefixedExtendedThrowableProxyConverterTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
 import org.junit.jupiter.api.BeforeEach;
@@ -23,6 +23,6 @@ void setup() {
     void prefixesExceptionsWithExclamationMarks() throws Exception {
         assertThat(converter.throwableProxyToString(proxy))
                 .startsWith(String.format("! java.io.IOException: noo%n" +
-                                                  "! at io.dropwizard.logging.PrefixedExtendedThrowableProxyConverterTest.<init>(PrefixedExtendedThrowableProxyConverterTest.java:14)%n"));
+                                                  "! at io.dropwizard.logging.common.PrefixedExtendedThrowableProxyConverterTest.<init>(PrefixedExtendedThrowableProxyConverterTest.java:14)%n"));
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/PrefixedThrowableProxyConverterTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
 import org.junit.jupiter.api.BeforeEach;
@@ -23,6 +23,6 @@ void setup() {
     void prefixesExceptionsWithExclamationMarks() throws Exception {
         assertThat(converter.throwableProxyToString(proxy))
                 .startsWith(String.format("! java.io.IOException: noo%n" +
-                                                  "! at io.dropwizard.logging.PrefixedThrowableProxyConverterTest.<init>(PrefixedThrowableProxyConverterTest.java:14)%n"));
+                                                  "! at io.dropwizard.logging.common.PrefixedThrowableProxyConverterTest.<init>(PrefixedThrowableProxyConverterTest.java:14)%n"));
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/ResilientSocketOutputStreamTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import org.junit.jupiter.api.Test;
 
@@ -49,8 +49,8 @@ void testWriteMessage() throws Exception {
     void testGetDescription() throws IOException {
         try (ServerSocket ss = new ServerSocket(0); ResilientSocketOutputStream resilientSocketOutputStream = new ResilientSocketOutputStream("localhost", ss.getLocalPort(),
             1024, 500, SocketFactory.getDefault())) {
-            assertThat(resilientSocketOutputStream.getDescription()).isEqualTo(String.format("tcp [localhost:%d]",
-                ss.getLocalPort()));
+            assertThat(resilientSocketOutputStream.getDescription())
+                .isEqualTo("tcp [localhost:%d]", ss.getLocalPort());
         }
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/SecondTestFilterFactory.java
Patch:
@@ -1,10 +1,10 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.filter.FilterFactory;
+import io.dropwizard.logging.common.filter.FilterFactory;
 
 @JsonTypeName("second-test-filter-factory")
 public class SecondTestFilterFactory implements FilterFactory<ILoggingEvent> {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TcpServer.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -33,6 +33,7 @@ Future<List<String>> receive() {
         });
     }
 
+    @Override
     public void close() {
         es.shutdownNow();
         try {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TcpSocketAppenderFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TestFilterFactory.java
Patch:
@@ -1,10 +1,10 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.filter.FilterFactory;
+import io.dropwizard.logging.common.filter.FilterFactory;
 
 @JsonTypeName("test-filter-factory")
 public class TestFilterFactory implements FilterFactory<ILoggingEvent> {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TestLayoutFactory.java
Patch:
@@ -1,11 +1,11 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.LayoutBase;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 
 import java.util.TimeZone;
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TestPatternLayoutFactory.java
Patch:
@@ -1,11 +1,11 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.LayoutBase;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 
 import java.util.Collections;
 import java.util.Map;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TlsSocketAppenderFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/UdpServer.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import java.io.IOException;
 import java.net.DatagramPacket;
@@ -41,6 +41,7 @@ public Future<List<String>> receive() {
         });
     }
 
+    @Override
     public void close() {
         es.shutdownNow();
         try {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/UdpSocketAppenderFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/socket/DropwizardUdpSocketAppenderTest.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard.logging.socket;
+package io.dropwizard.logging.common.socket;
 
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Context;
 import ch.qos.logback.core.OutputStreamAppender;
-import io.dropwizard.logging.UdpServer;
+import io.dropwizard.logging.common.UdpServer;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: dropwizard-metrics-graphite/src/main/java/io/dropwizard/metrics/graphite/GraphiteReporterFactory.java
Patch:
@@ -7,11 +7,10 @@
 import com.codahale.metrics.graphite.GraphiteUDP;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.metrics.BaseReporterFactory;
+import io.dropwizard.metrics.common.BaseReporterFactory;
 import io.dropwizard.validation.OneOf;
 import io.dropwizard.validation.PortRange;
 import jakarta.validation.constraints.NotEmpty;
-
 import jakarta.validation.constraints.NotNull;
 
 /**

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/BaseFormattedReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/BaseReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricAttribute;
 import com.codahale.metrics.MetricFilter;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/ConsoleReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.ConsoleReporter;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/CsvReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.CsvReporter;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/DefaultStringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import java.util.Set;
 

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/MetricsFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/RegexStringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/ReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.ScheduledReporter;
@@ -15,7 +15,7 @@
  * <ol>
  *     <li>Create a class which implements {@link ReporterFactory}.</li>
  *     <li>Annotate it with {@code @JsonTypeName} and give it a unique type name.</li>
- *     <li>Add a {@code META-INF/services/io.dropwizard.metrics.ReporterFactory}
+ *     <li>Add a {@code META-INF/services/io.dropwizard.metrics.common.ReporterFactory}
  *     file with your implementation's full class name to the class path.</li>
  * </ol>
  *

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/ScheduledReporterManager.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.ScheduledReporter;
 import io.dropwizard.lifecycle.Managed;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/Slf4jReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.ScheduledReporter;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/StringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import java.util.Set;
 

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/SubstringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import java.util.Set;
 

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/BaseReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.Metric;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/ConsoleReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.jupiter.api.Test;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/CsvReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/MetricAttributesTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricAttribute;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/MetricsFactoryTest.java
Patch:
@@ -1,11 +1,11 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricAttribute;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.BaseValidator;
 import org.junit.jupiter.api.BeforeEach;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/ScheduledReporterManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.ScheduledReporter;
 import io.dropwizard.util.Duration;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/Slf4jReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.jupiter.api.Test;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -1,12 +1,12 @@
 package io.dropwizard.migrations;
 
 import com.codahale.metrics.MetricRegistry;
-import io.dropwizard.Configuration;
-import io.dropwizard.cli.ConfiguredCommand;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.cli.ConfiguredCommand;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.db.DatabaseConfiguration;
 import io.dropwizard.db.ManagedDataSource;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Bootstrap;
 import liquibase.Liquibase;
 import liquibase.database.Database;
 import liquibase.database.DatabaseConnection;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbCalculateChecksumCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import liquibase.change.CheckSum;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbClearChecksumsCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import liquibase.Scope;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbDropAllCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbDumpCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.CatalogAndSchema;
 import liquibase.Liquibase;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbFastForwardCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbGenerateDocsCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbLocksCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbMigrateCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbPrepareRollbackCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbRollbackCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbStatusCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbTagCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbTestCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.db.DatabaseConfiguration;
-import io.dropwizard.setup.Bootstrap;
 
 import javax.annotation.Nullable;
 import java.util.Map;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/MigrationsBundleTest.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Application;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/TestMigrationConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DataSourceFactory;
 
 public class TestMigrationConfiguration extends Configuration {

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/async/AsyncAccessEventAppenderFactory.java
Patch:
@@ -2,7 +2,7 @@
 
 import ch.qos.logback.access.spi.IAccessEvent;
 import ch.qos.logback.core.AsyncAppenderBase;
-import io.dropwizard.logging.async.AsyncAppenderFactory;
+import io.dropwizard.logging.common.async.AsyncAppenderFactory;
 
 /**
  * An implementation of {@link AsyncAppenderFactory} for {@link IAccessEvent}.

File: dropwizard-archetypes/java-simple/src/main/resources/archetype-resources/src/main/java/__name__Application.java
Patch:
@@ -1,8 +1,8 @@
 package ${package};
 
-import io.dropwizard.Application;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 
 public class ${name}Application extends Application<${name}Configuration> {
 

File: dropwizard-archetypes/java-simple/src/main/resources/archetype-resources/src/main/java/__name__Configuration.java
Patch:
@@ -1,6 +1,6 @@
 package ${package};
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import org.hibernate.validator.constraints.*;
 import javax.validation.constraints.*;

File: dropwizard-assets/src/main/java/io/dropwizard/assets/AssetsBundle.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.assets;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.servlets.assets.AssetServlet;
-import io.dropwizard.setup.Environment;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dropwizard-assets/src/test/java/io/dropwizard/assets/AssetsBundleTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.assets;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.setup.ServletEnvironment;
 import io.dropwizard.servlets.assets.AssetServlet;
 import io.dropwizard.servlets.assets.ResourceURL;
-import io.dropwizard.setup.Environment;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthorizationContext.java
Patch:
@@ -1,10 +1,9 @@
 package io.dropwizard.auth;
 
-import java.security.Principal;
-import java.util.Objects;
-
 import javax.annotation.Nullable;
 import javax.ws.rs.container.ContainerRequestContext;
+import java.security.Principal;
+import java.util.Objects;
 
 public abstract class AuthorizationContext<P extends Principal> {
     private final P principal;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/DefaultAuthorizationContext.java
Patch:
@@ -1,9 +1,8 @@
 package io.dropwizard.auth;
 
-import java.security.Principal;
-
 import javax.annotation.Nullable;
 import javax.ws.rs.container.ContainerRequestContext;
+import java.security.Principal;
 
 /**
  * The default implementation of {@link AuthorizationContext},

File: dropwizard-auth/src/test/java/io/dropwizard/auth/AuthBaseTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.auth;
 
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthCustomProviderTest.java
Patch:
@@ -6,9 +6,8 @@
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 
-import java.util.Arrays;
-
 import javax.ws.rs.container.ContainerRequestFilter;
+import java.util.Arrays;
 
 public class OAuthCustomProviderTest extends AuthBaseTest<OAuthCustomProviderTest.OAuthTestResourceConfig> {
     public static class OAuthTestResourceConfig extends AbstractAuthResourceConfig {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -7,9 +7,8 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.junit.jupiter.api.Test;
 
-import java.util.Arrays;
-
 import javax.ws.rs.container.ContainerRequestFilter;
+import java.util.Arrays;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-auth/src/test/java/io/dropwizard/auth/principal/NoAuthPolymorphicPrincipalEntityTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.auth.AbstractAuthResourceConfig;
 import io.dropwizard.auth.PolymorphicAuthDynamicFeature;
 import io.dropwizard.auth.PolymorphicAuthValueFactoryProvider;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/principal/NoAuthPrincipalEntityTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.auth.AbstractAuthResourceConfig;
 import io.dropwizard.auth.AuthDynamicFeature;
 import io.dropwizard.auth.AuthValueFactoryProvider;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/principal/PolymorphicPrincipalEntityTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.auth.PolymorphicAuthValueFactoryProvider;
 import io.dropwizard.auth.basic.BasicCredentialAuthFilter;
 import io.dropwizard.auth.basic.BasicCredentials;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/ConstraintViolationBenchmark.java
Patch:
@@ -2,9 +2,8 @@
 
 import io.dropwizard.jersey.validation.ConstraintMessage;
 import io.dropwizard.jersey.validation.Validators;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.server.model.Invocable;
-import javax.validation.constraints.NotEmpty;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Mode;
@@ -18,6 +17,7 @@
 import javax.validation.ConstraintViolation;
 import javax.validation.Valid;
 import javax.validation.Validator;
+import javax.validation.constraints.NotEmpty;
 import javax.validation.executable.ExecutableValidator;
 import javax.ws.rs.HeaderParam;
 import java.util.Set;

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/SelfValidatingBenchmark.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.benchmarks.jersey;
 
 import io.dropwizard.jersey.validation.Validators;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.validation.ValidationMethod;
 import io.dropwizard.validation.selfvalidating.SelfValidating;
 import io.dropwizard.validation.selfvalidating.SelfValidation;

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -9,8 +9,8 @@
 import io.dropwizard.client.proxy.NonProxyListProxyRoutePlanner;
 import io.dropwizard.client.proxy.ProxyConfiguration;
 import io.dropwizard.client.ssl.TlsConfiguration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.lifecycle.Managed;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Duration;
 import org.apache.hc.client5.http.DnsResolver;
 import org.apache.hc.client5.http.HttpRequestRetryStrategy;

File: dropwizard-client/src/main/java/io/dropwizard/client/proxy/AuthConfiguration.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.client.proxy;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import javax.validation.constraints.NotEmpty;
 
 import javax.annotation.Nullable;
+import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.Pattern;
 
 /**

File: dropwizard-client/src/main/java/io/dropwizard/client/proxy/ProxyConfiguration.java
Patch:
@@ -3,10 +3,10 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.dropwizard.validation.OneOf;
 import io.dropwizard.validation.PortRange;
-import javax.validation.constraints.NotEmpty;
 
 import javax.annotation.Nullable;
 import javax.validation.Valid;
+import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
 import java.util.List;
 

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardApacheConnectorTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.client;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import io.dropwizard.util.Duration;

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardSSLConnectionSocketFactoryTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.client;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.client.ssl.TlsConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import io.dropwizard.util.Duration;

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -4,12 +4,12 @@
 import com.codahale.metrics.httpclient5.HttpClientMetricNameStrategies;
 import com.codahale.metrics.httpclient5.HttpClientMetricNameStrategy;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jersey.gzip.ConfiguredGZipEncoder;
 import io.dropwizard.jersey.gzip.GZipDecoder;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.setup.ExecutorServiceBuilder;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.setup.Environment;
 import org.apache.hc.client5.http.DnsResolver;
 import org.apache.hc.client5.http.HttpRequestRetryStrategy;
 import org.apache.hc.client5.http.SystemDefaultDnsResolver;

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilterTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.client;
 
 import com.codahale.metrics.MetricRegistry;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import io.dropwizard.util.Duration;

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/SubstitutingSourceProvider.java
Patch:
@@ -1,13 +1,12 @@
 package io.dropwizard.configuration;
 
+import org.apache.commons.text.StringSubstitutor;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-import org.apache.commons.text.StringSubstitutor;
-
 import static java.util.Objects.requireNonNull;
 
 /**

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/YamlConfigurationFactory.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.configuration;
 
-import javax.annotation.Nullable;
-import javax.validation.Validator;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 
+import javax.annotation.Nullable;
+import javax.validation.Validator;
+
 /**
  * A factory class for loading YAML configuration files, binding them to configuration objects, and
  * validating their constraints. Allows for overriding configuration parameters from system properties.

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryFactoryTest.java
Patch:
@@ -5,7 +5,6 @@
 import io.dropwizard.configuration.BaseConfigurationFactoryTest.Example;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.validation.BaseValidator;
-
 import org.junit.jupiter.api.Test;
 
 import javax.validation.Validator;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableSubstitutorTest.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.configuration;
 
+import org.junit.jupiter.api.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assumptions.assumeThat;
 
-import org.junit.jupiter.api.Test;
-
 class EnvironmentVariableSubstitutorTest {
 
     @Test

File: dropwizard-core/src/main/java/io/dropwizard/core/ConfiguredBundle.java
Patch:
@@ -1,7 +1,7 @@
-package io.dropwizard;
+package io.dropwizard.core;
 
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 
 /**
  * A reusable bundle of functionality, used to define blocks of application behavior that are

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/Cli.java
Patch:
@@ -1,6 +1,6 @@
-package io.dropwizard.cli;
+package io.dropwizard.core.cli;
 
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.ArgumentParsers;
 import net.sourceforge.argparse4j.helper.HelpScreenException;

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/Command.java
Patch:
@@ -1,6 +1,6 @@
-package io.dropwizard.cli;
+package io.dropwizard.core.cli;
 
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.setup.Bootstrap;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;
 

File: dropwizard-core/src/main/java/io/dropwizard/core/cli/ConfiguredCommand.java
Patch:
@@ -1,12 +1,12 @@
-package io.dropwizard.cli;
+package io.dropwizard.core.cli;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ConfigurationException;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.configuration.ConfigurationFactoryFactory;
 import io.dropwizard.configuration.ConfigurationSourceProvider;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.util.Generics;
 import net.sourceforge.argparse4j.inf.Argument;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-core/src/main/java/io/dropwizard/core/server/AbstractServerFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.server;
+package io.dropwizard.core.server;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
@@ -10,6 +10,8 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import io.dropwizard.core.setup.AdminEnvironment;
+import io.dropwizard.core.setup.ExceptionMapperBinder;
 import io.dropwizard.jersey.filter.AllowedMethodsFilter;
 import io.dropwizard.jersey.jackson.JacksonFeature;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
@@ -21,8 +23,6 @@
 import io.dropwizard.request.logging.LogbackAccessRequestLogFactory;
 import io.dropwizard.request.logging.RequestLogFactory;
 import io.dropwizard.servlets.ThreadNameFilter;
-import io.dropwizard.setup.AdminEnvironment;
-import io.dropwizard.setup.ExceptionMapperBinder;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.MinDuration;
 import io.dropwizard.validation.ValidationMethod;

File: dropwizard-core/src/main/java/io/dropwizard/core/server/DefaultServerFactory.java
Patch:
@@ -1,13 +1,13 @@
-package io.dropwizard.server;
+package io.dropwizard.core.server;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.ConnectorFactory;
 import io.dropwizard.jetty.HttpConnectorFactory;
 import io.dropwizard.jetty.RoutingHandler;
-import io.dropwizard.setup.Environment;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Server;

File: dropwizard-core/src/main/java/io/dropwizard/core/server/ServerFactory.java
Patch:
@@ -1,8 +1,8 @@
-package io.dropwizard.server;
+package io.dropwizard.core.server;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jackson.Discoverable;
-import io.dropwizard.setup.Environment;
 import org.eclipse.jetty.server.Server;
 
 /**

File: dropwizard-core/src/main/java/io/dropwizard/core/server/SimpleServerFactory.java
Patch:
@@ -1,11 +1,12 @@
-package io.dropwizard.server;
+package io.dropwizard.core.server;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.ConnectorFactory;
 import io.dropwizard.jetty.ContextRoutingHandler;
 import io.dropwizard.jetty.HttpConnectorFactory;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Environment;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Server;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/AdminEnvironment.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
@@ -12,6 +12,7 @@
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import static java.util.Objects.requireNonNull;
 
 /**

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/AdminFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.dropwizard.servlets.tasks.TaskConfiguration;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/Environment.java
Patch:
@@ -1,11 +1,12 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.codahale.metrics.health.SharedHealthCheckRegistries;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.validation.InjectValidatorFeature;
 import io.dropwizard.health.HealthEnvironment;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -16,7 +17,6 @@
 import io.dropwizard.jetty.MutableServletContextHandler;
 import io.dropwizard.jetty.setup.ServletEnvironment;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.validation.InjectValidatorFeature;
 
 import javax.annotation.Nullable;
 import javax.servlet.Servlet;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/ExceptionMapperBinder.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import io.dropwizard.jersey.errors.EarlyEofExceptionMapper;
 import io.dropwizard.jersey.errors.EofExceptionWriterInterceptor;

File: dropwizard-core/src/main/java/io/dropwizard/core/setup/HealthCheckConfiguration.java
Patch:
@@ -1,6 +1,7 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+
 import java.util.StringJoiner;
 
 /**

File: dropwizard-core/src/main/java/io/dropwizard/core/sslreload/SslReloadTask.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.sslreload;
+package io.dropwizard.core.sslreload;
 
 import io.dropwizard.jetty.SslReload;
 import io.dropwizard.servlets.tasks.Task;

File: dropwizard-core/src/main/java/io/dropwizard/core/validation/InjectValidatorFeature.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.validation;
+package io.dropwizard.core.validation;
 
 import io.dropwizard.jersey.validation.MutableValidatorFactory;
 import org.glassfish.jersey.server.validation.internal.InjectingConstraintValidatorFactory;

File: dropwizard-core/src/test/java/io/dropwizard/core/ApplicationTest.java
Patch:
@@ -1,7 +1,7 @@
-package io.dropwizard;
+package io.dropwizard.core;
 
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import org.junit.jupiter.api.Test;
 
 import java.io.File;

File: dropwizard-core/src/test/java/io/dropwizard/core/ConfigurationTest.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard;
+package io.dropwizard.core;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jetty.ConnectorFactory;
-import io.dropwizard.logging.AppenderFactory;
+import io.dropwizard.logging.common.AppenderFactory;
 import org.junit.jupiter.api.Test;
 
 import java.util.ServiceLoader;

File: dropwizard-core/src/test/java/io/dropwizard/core/setup/AdminEnvironmentTest.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import io.dropwizard.jetty.MutableServletContextHandler;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.servlets.tasks.Task;
 import org.eclipse.jetty.server.Server;
 import org.junit.jupiter.api.Test;

File: dropwizard-core/src/test/java/io/dropwizard/core/setup/BootstrapTest.java
Patch:
@@ -1,14 +1,14 @@
-package io.dropwizard.setup;
+package io.dropwizard.core.setup;
 
 import com.codahale.metrics.Histogram;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.UniformReservoir;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.DefaultConfigurationFactoryFactory;
 import io.dropwizard.configuration.FileConfigurationSourceProvider;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jackson.Jackson;
 import org.hibernate.validator.HibernateValidator;
 import org.junit.jupiter.api.BeforeEach;

File: dropwizard-core/src/test/java/io/dropwizard/core/sslreload/SslReloadTaskTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.sslreload;
+package io.dropwizard.core.sslreload;
 
 import io.dropwizard.jetty.SslReload;
 import org.junit.jupiter.api.Test;

File: dropwizard-e2e/src/main/java/com/example/app1/App1Resource.java
Patch:
@@ -1,6 +1,6 @@
 package com.example.app1;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: dropwizard-e2e/src/main/java/com/example/badlog/BadLogApp.java
Patch:
@@ -1,8 +1,8 @@
 package com.example.badlog;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dropwizard-e2e/src/main/java/com/example/health/HealthApp.java
Patch:
@@ -1,10 +1,10 @@
 package com.example.health;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.health.HealthStateListener;
-import io.dropwizard.setup.Environment;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;

File: dropwizard-e2e/src/main/java/com/example/httpsessions/HttpSessionsApp.java
Patch:
@@ -1,8 +1,8 @@
 package com.example.httpsessions;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import org.eclipse.jetty.server.session.SessionHandler;
 
 public class HttpSessionsApp extends Application<Configuration> {

File: dropwizard-e2e/src/main/java/com/example/validation/DefaultValidatorApp.java
Patch:
@@ -1,8 +1,8 @@
 package com.example.validation;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 
 public class DefaultValidatorApp extends Application<Configuration> {
 

File: dropwizard-e2e/src/test/java/com/example/app1/App1Test.java
Patch:
@@ -1,9 +1,9 @@
 package com.example.app1;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.client.JerseyClientBuilder;
 import io.dropwizard.client.JerseyClientConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/badlog/BadLogTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.badlog;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.DropwizardTestSupport;
 import org.junit.jupiter.api.AfterAll;

File: dropwizard-e2e/src/test/java/com/example/forms/FormsAppTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.example.forms;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.client.JerseyClientBuilder;
 import io.dropwizard.client.JerseyClientConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jersey.errors.ErrorMessage;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/health/HealthIntegrationTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.health;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/httpsessions/HttpSessionsTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.httpsessions;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.junit.jupiter.api.Test;

File: dropwizard-e2e/src/test/java/com/example/request_log/AbstractRequestLogPatternIntegrationTest.java
Patch:
@@ -1,12 +1,12 @@
 package com.example.request_log;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
 import io.dropwizard.client.JerseyClientBuilder;
 import io.dropwizard.client.JerseyClientConfiguration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/sslreload/SslReloadAppTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.sslreload;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/validation/BeanValidatorTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-e2e/src/test/java/com/example/validation/InjectValidatorTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.validation;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.junit.jupiter.api.Test;

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldConfiguration.java
Patch:
@@ -2,11 +2,11 @@
 
 import com.example.helloworld.core.Template;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DataSourceFactory;
-import javax.validation.constraints.NotEmpty;
 
 import javax.validation.Valid;
+import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
 import java.util.Collections;
 import java.util.Map;

File: dropwizard-example/src/main/java/com/example/helloworld/cli/RenderCommand.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.example.helloworld.HelloWorldConfiguration;
 import com.example.helloworld.core.Template;
-import io.dropwizard.cli.ConfiguredCommand;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.cli.ConfiguredCommand;
+import io.dropwizard.core.setup.Bootstrap;
 import net.sourceforge.argparse4j.impl.Arguments;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;

File: dropwizard-example/src/main/java/com/example/helloworld/db/PersonDAO.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.example.helloworld.core.Person;
 import io.dropwizard.hibernate.AbstractDAO;
-
 import org.hibernate.SessionFactory;
 
 import java.util.List;

File: dropwizard-example/src/main/java/com/example/helloworld/resources/ViewResource.java
Patch:
@@ -1,6 +1,6 @@
 package com.example.helloworld.resources;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: dropwizard-example/src/main/java/com/example/helloworld/views/PersonView.java
Patch:
@@ -1,7 +1,7 @@
 package com.example.helloworld.views;
 
 import com.example.helloworld.core.Person;
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 public class PersonView extends View {
     private final Person person;

File: dropwizard-forms/src/main/java/io/dropwizard/forms/MultiPartBundle.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.forms;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Environment;
 import org.glassfish.jersey.media.multipart.MultiPartFeature;
 
 /**

File: dropwizard-forms/src/test/java/io/dropwizard/forms/MultiPartBundleTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.forms;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.media.multipart.MultiPartFeature;
 import org.junit.jupiter.api.Test;
 

File: dropwizard-health/src/main/java/io/dropwizard/health/HealthStateView.java
Patch:
@@ -1,9 +1,10 @@
 package io.dropwizard.health;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import java.util.Objects;
+
 import javax.annotation.Nonnull;
 import javax.validation.constraints.NotNull;
+import java.util.Objects;
 
 public final class HealthStateView implements Comparable<HealthStateView> {
     @NotNull

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java
Patch:
@@ -9,11 +9,10 @@
 import org.hibernate.query.Query;
 import org.hibernate.query.internal.AbstractProducedQuery;
 
+import javax.persistence.criteria.CriteriaQuery;
 import java.io.Serializable;
 import java.util.List;
 
-import javax.persistence.criteria.CriteriaQuery;
-
 import static java.util.Objects.requireNonNull;
 
 /**

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -2,11 +2,11 @@
 
 import com.fasterxml.jackson.datatype.hibernate5.Hibernate5Module;
 import com.fasterxml.jackson.datatype.hibernate5.Hibernate5Module.Feature;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DatabaseConfiguration;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Duration;
 import org.hibernate.SessionFactory;
 

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.hibernate;
 
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.ManagedDataSource;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Environment;
 import org.hibernate.SessionFactory;
 import org.hibernate.boot.registry.BootstrapServiceRegistry;
 import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/HibernateBundleTest.java
Patch:
@@ -4,12 +4,12 @@
 import com.fasterxml.jackson.databind.Module;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.hibernate5.Hibernate5Module;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
 import org.hibernate.SessionFactory;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -1,15 +1,15 @@
 package io.dropwizard.hibernate;
 
 import com.codahale.metrics.MetricRegistry;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.errors.ErrorMessage;
 import io.dropwizard.jersey.jackson.JacksonFeature;
 import io.dropwizard.jersey.optional.EmptyOptionalExceptionMapper;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.test.JerseyTest;
 import org.hibernate.Session;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryFactoryTest.java
Patch:
@@ -1,11 +1,12 @@
 package io.dropwizard.hibernate;
 
 import com.codahale.metrics.MetricRegistry;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.db.ManagedPooledDataSource;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
+import io.dropwizard.core.setup.Environment;
 import org.hibernate.EmptyInterceptor;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkAwareProxyFactoryTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.hibernate;
 
 import com.codahale.metrics.MetricRegistry;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.hibernate.CacheMode;
 import org.hibernate.HibernateException;
 import org.hibernate.Session;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/FakeApplication.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.http2;
 
 import com.codahale.metrics.health.HealthCheck;
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2CIntegrationTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.eclipse.jetty.client.HttpClient;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2IntegrationTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.ConfigOverride;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2TestCommon.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.eclipse.jetty.client.HttpClient;
 import org.eclipse.jetty.client.api.ContentResponse;
 import org.eclipse.jetty.client.api.Result;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2WithConscryptTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.conscrypt.OpenSSLProvider;

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2WithCustomCipherTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.http2;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.eclipse.jetty.http.HttpVersion;

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java
Patch:
@@ -1,7 +1,5 @@
 package io.dropwizard.jackson;
 
-import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
-
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.guava.GuavaModule;
@@ -13,6 +11,8 @@
 
 import javax.annotation.Nullable;
 
+import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
+
 /**
  * A utility class for Jackson.
  */

File: dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/JdbiFactory.java
Patch:
@@ -4,9 +4,9 @@
 import com.codahale.metrics.jdbi3.InstrumentedSqlLogger;
 import com.codahale.metrics.jdbi3.strategies.SmartNameStrategy;
 import com.codahale.metrics.jdbi3.strategies.StatementNameStrategy;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.ManagedDataSource;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Duration;
 import org.jdbi.v3.core.Jdbi;
 import org.jdbi.v3.core.statement.SqlStatements;

File: dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/bundles/JdbiExceptionsBundle.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.jdbi3.bundles;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jdbi3.jersey.LoggingJdbiExceptionMapper;
 import io.dropwizard.jdbi3.jersey.LoggingSQLExceptionMapper;
-import io.dropwizard.setup.Environment;
 
 /**
  * A bundle for logging {@link java.sql.SQLException}s and {@link org.jdbi.v3.core.JdbiException}s

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/JdbiTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.jdbi3.strategies.TimedAnnotationNameStrategy;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.DataSourceFactory;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.jdbi.v3.core.Jdbi;
 import org.joda.time.DateTime;

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/bundles/JdbiExceptionsBundleTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.jdbi3.bundles;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jdbi3.jersey.LoggingJdbiExceptionMapper;
 import io.dropwizard.jdbi3.jersey.LoggingSQLExceptionMapper;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
-import io.dropwizard.setup.Environment;
 import org.junit.jupiter.api.Test;
 
 import static org.mockito.Mockito.isA;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/CharsetUtf8Filter.java
Patch:
@@ -1,8 +1,5 @@
 package io.dropwizard.jersey.filter;
 
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.Locale;
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
 import javax.ws.rs.container.ContainerRequestContext;
@@ -11,6 +8,9 @@
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.ext.Provider;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.Locale;
 
 /**
  * This class ensures that any HTTP response that includes a Content-Type

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/JerseyParameterNameProvider.java
Patch:
@@ -2,12 +2,12 @@
 
 import org.hibernate.validator.parameternameprovider.ReflectionParameterNameProvider;
 
-import javax.ws.rs.QueryParam;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.HeaderParam;
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.FormParam;
+import javax.ws.rs.HeaderParam;
 import javax.ws.rs.MatrixParam;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.QueryParam;
 import javax.ws.rs.core.Context;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/AbstractJerseyTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey;
 
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.client.ClientProperties;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/InstantParamTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.jersey.jsr310;
 
 import org.junit.jupiter.api.Test;
+
 import java.time.Instant;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/InstantSecondParamTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.jersey.jsr310;
 
 import org.junit.jupiter.api.Test;
+
 import java.time.Instant;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/InstantParamTest.java
Patch:
@@ -3,10 +3,10 @@
 import io.dropwizard.jersey.errors.ErrorMessage;
 import org.junit.jupiter.api.Test;
 
+import javax.ws.rs.WebApplicationException;
 import java.time.Instant;
-import java.time.ZoneOffset;
 import java.time.LocalDateTime;
-import javax.ws.rs.WebApplicationException;
+import java.time.ZoneOffset;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/SubBeanParameter.java
Patch:
@@ -2,8 +2,8 @@
 
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProviderTest;
 import io.dropwizard.validation.ValidationMethod;
-import javax.validation.constraints.NotEmpty;
 
+import javax.validation.constraints.NotEmpty;
 import javax.ws.rs.QueryParam;
 import java.util.Locale;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ValidRepresentation.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.jersey.validation;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+
 import javax.validation.constraints.NotEmpty;
 
 public class ValidRepresentation {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -7,9 +7,9 @@
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.ConsoleAppenderFactory;
-import io.dropwizard.logging.FileAppenderFactory;
-import io.dropwizard.logging.SyslogAppenderFactory;
+import io.dropwizard.logging.common.ConsoleAppenderFactory;
+import io.dropwizard.logging.common.FileAppenderFactory;
+import io.dropwizard.logging.common.SyslogAppenderFactory;
 import io.dropwizard.util.DataSize;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.BaseValidator;

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/AbstractJsonLayoutBaseFactory.java
Patch:
@@ -3,9 +3,9 @@
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 import io.dropwizard.logging.json.layout.JsonFormatter;
 import io.dropwizard.logging.json.layout.TimestampFormatter;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
 
 import javax.annotation.Nullable;
 import javax.validation.constraints.NotNull;

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/EventJsonLayoutBaseFactory.java
Patch:
@@ -9,15 +9,15 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.dropwizard.logging.json.layout.EventJsonLayout;
-
 import io.dropwizard.logging.json.layout.ExceptionFormat;
+
+import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Set;
 import java.util.TimeZone;
-import javax.annotation.Nullable;
 
 /**
  * <table>

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/LayoutIntegrationTests.java
Patch:
@@ -10,9 +10,9 @@
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.logging.ConsoleAppenderFactory;
-import io.dropwizard.logging.DefaultLoggingFactory;
+import io.dropwizard.logging.common.BootstrapLogging;
+import io.dropwizard.logging.common.ConsoleAppenderFactory;
+import io.dropwizard.logging.common.DefaultLoggingFactory;
 import io.dropwizard.request.logging.LogbackAccessRequestLogFactory;
 import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.http.HttpFields;

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/AutoCloseableManagerTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.lifecycle;
 
+import org.junit.jupiter.api.Test;
+
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.junit.jupiter.api.Test;
-
 class AutoCloseableManagerTest {
 
     private final AutoCloseable managed = mock(AutoCloseable.class);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/BootstrapLogging.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
@@ -7,7 +7,7 @@
 import ch.qos.logback.core.ConsoleAppender;
 import ch.qos.logback.core.Layout;
 import ch.qos.logback.core.encoder.LayoutWrappingEncoder;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 
 import javax.annotation.concurrent.GuardedBy;
 import java.util.TimeZone;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ConsoleAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.ConsoleAppender;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/DropwizardLayout.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.PatternLayout;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ExternalLoggingFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeName;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/FileAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.FileAppender;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/LoggerConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.Logger;
 import ch.qos.logback.classic.spi.ILoggingEvent;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/LoggingFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/LoggingUtil.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import io.dropwizard.util.Duration;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/PrefixedExtendedThrowableProxyConverter.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter;
 import ch.qos.logback.classic.spi.StackTraceElementProxy;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/PrefixedRootCauseFirstThrowableProxyConverter.java
Patch:
@@ -1,12 +1,12 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.pattern.RootCauseFirstThrowableProxyConverter;
 import ch.qos.logback.classic.spi.IThrowableProxy;
 
 import java.util.regex.Pattern;
 
-import static io.dropwizard.logging.PrefixedThrowableProxyConverter.PATTERN;
-import static io.dropwizard.logging.PrefixedThrowableProxyConverter.PREFIX;
+import static io.dropwizard.logging.common.PrefixedThrowableProxyConverter.PATTERN;
+import static io.dropwizard.logging.common.PrefixedThrowableProxyConverter.PREFIX;
 
 /**
  * A {@link RootCauseFirstThrowableProxyConverter} that prefixes stack traces with {@code !}.

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/PrefixedThrowableProxyConverter.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.pattern.ThrowableProxyConverter;
 import ch.qos.logback.classic.spi.IThrowableProxy;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ResilientOutputStreamBase.java
Patch:
@@ -11,7 +11,7 @@
  * under the terms of the GNU Lesser General Public License version 2.1
  * as published by the Free Software Foundation.
  */
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.core.Context;
 import ch.qos.logback.core.recovery.RecoveryCoordinator;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/ResilientSocketOutputStream.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import javax.annotation.Nullable;
 import javax.net.SocketFactory;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/TlsSocketAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/UdpSocketAppenderFactory.java
Patch:
@@ -1,12 +1,13 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.OutputStreamAppender;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.socket.DropwizardUdpSocketAppender;
+import io.dropwizard.logging.common.socket.DropwizardUdpSocketAppender;
 import io.dropwizard.validation.PortRange;
+
 import javax.validation.constraints.NotEmpty;
 
 /**

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/async/AsyncAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.async;
+package io.dropwizard.logging.common.async;
 
 import ch.qos.logback.core.AsyncAppenderBase;
 import ch.qos.logback.core.spi.DeferredProcessingAware;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/async/AsyncLoggingEventAppenderFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.async;
+package io.dropwizard.logging.common.async;
 
 import ch.qos.logback.classic.AsyncAppender;
 import ch.qos.logback.classic.spi.ILoggingEvent;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/FilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
@@ -12,7 +12,7 @@
  * <ol>
  * <li>Create a class which implements {@link FilterFactory}.</li>
  * <li>Annotate it with {@code @JsonTypeName} and give it a unique type name.</li>
- * <li>add a {@code META-INF/services/io.dropwizard.logging.filter.FilterFactory} file with your
+ * <li>add a {@code META-INF/services/FilterFactory} file with your
  * implementation's full class name to the class path.</li>
  * </ol>
  */

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/LevelFilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.core.filter.Filter;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/NullLevelFilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.core.filter.Filter;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/filter/ThresholdLevelFilterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.filter;
+package io.dropwizard.logging.common.filter;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.filter.ThresholdFilter;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/layout/DiscoverableLayoutFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.layout;
+package io.dropwizard.logging.common.layout;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.LayoutBase;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/layout/DropwizardLayoutFactory.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard.logging.layout;
+package io.dropwizard.logging.common.layout;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
-import io.dropwizard.logging.DropwizardLayout;
+import io.dropwizard.logging.common.DropwizardLayout;
 
 import java.util.TimeZone;
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/layout/LayoutFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.layout;
+package io.dropwizard.logging.common.layout;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.pattern.PatternLayoutBase;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/socket/DropwizardSocketAppender.java
Patch:
@@ -1,8 +1,8 @@
-package io.dropwizard.logging.socket;
+package io.dropwizard.logging.common.socket;
 
 import ch.qos.logback.core.OutputStreamAppender;
-import io.dropwizard.logging.ResilientSocketOutputStream;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
+import io.dropwizard.logging.common.ResilientSocketOutputStream;
 
 import javax.net.SocketFactory;
 import java.io.OutputStream;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/common/socket/DropwizardUdpSocketAppender.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging.socket;
+package io.dropwizard.logging.common.socket;
 
 import ch.qos.logback.core.OutputStreamAppender;
 import ch.qos.logback.core.spi.DeferredProcessingAware;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/DefaultLoggingFactoryPrintErrorMessagesTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/DefaultLoggingFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/DropwizardLayoutTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import org.junit.jupiter.api.Test;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/ExternalLoggingFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/PrefixedExtendedThrowableProxyConverterTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
 import org.junit.jupiter.api.BeforeEach;
@@ -23,6 +23,6 @@ void setup() {
     void prefixesExceptionsWithExclamationMarks() throws Exception {
         assertThat(converter.throwableProxyToString(proxy))
                 .startsWith(String.format("! java.io.IOException: noo%n" +
-                                                  "! at io.dropwizard.logging.PrefixedExtendedThrowableProxyConverterTest.<init>(PrefixedExtendedThrowableProxyConverterTest.java:14)%n"));
+                                                  "! at io.dropwizard.logging.common.PrefixedExtendedThrowableProxyConverterTest.<init>(PrefixedExtendedThrowableProxyConverterTest.java:14)%n"));
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/PrefixedRootCauseFirstThrowableProxyConverterTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
 import org.junit.jupiter.api.BeforeEach;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/PrefixedThrowableProxyConverterTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
 import org.junit.jupiter.api.BeforeEach;
@@ -23,6 +23,6 @@ void setup() {
     void prefixesExceptionsWithExclamationMarks() throws Exception {
         assertThat(converter.throwableProxyToString(proxy))
                 .startsWith(String.format("! java.io.IOException: noo%n" +
-                                                  "! at io.dropwizard.logging.PrefixedThrowableProxyConverterTest.<init>(PrefixedThrowableProxyConverterTest.java:14)%n"));
+                                                  "! at io.dropwizard.logging.common.PrefixedThrowableProxyConverterTest.<init>(PrefixedThrowableProxyConverterTest.java:14)%n"));
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/ResilientSocketOutputStreamTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import org.junit.jupiter.api.Test;
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/SecondTestFilterFactory.java
Patch:
@@ -1,10 +1,10 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.filter.FilterFactory;
+import io.dropwizard.logging.common.filter.FilterFactory;
 
 @JsonTypeName("second-test-filter-factory")
 public class SecondTestFilterFactory implements FilterFactory<ILoggingEvent> {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TcpServer.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TcpSocketAppenderFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TestFilterFactory.java
Patch:
@@ -1,10 +1,10 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.filter.FilterFactory;
+import io.dropwizard.logging.common.filter.FilterFactory;
 
 @JsonTypeName("test-filter-factory")
 public class TestFilterFactory implements FilterFactory<ILoggingEvent> {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TestLayoutFactory.java
Patch:
@@ -1,11 +1,11 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.LayoutBase;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 
 import java.util.TimeZone;
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TestPatternLayoutFactory.java
Patch:
@@ -1,11 +1,11 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.LayoutBase;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.layout.DiscoverableLayoutFactory;
+import io.dropwizard.logging.common.layout.DiscoverableLayoutFactory;
 
 import java.util.Collections;
 import java.util.Map;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/TlsSocketAppenderFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/UdpServer.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import java.io.IOException;
 import java.net.DatagramPacket;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/UdpSocketAppenderFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.logging;
+package io.dropwizard.logging.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/common/socket/DropwizardUdpSocketAppenderTest.java
Patch:
@@ -1,9 +1,9 @@
-package io.dropwizard.logging.socket;
+package io.dropwizard.logging.common.socket;
 
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Context;
 import ch.qos.logback.core.OutputStreamAppender;
-import io.dropwizard.logging.UdpServer;
+import io.dropwizard.logging.common.UdpServer;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 

File: dropwizard-metrics-graphite/src/main/java/io/dropwizard/metrics/graphite/GraphiteReporterFactory.java
Patch:
@@ -7,11 +7,11 @@
 import com.codahale.metrics.graphite.GraphiteUDP;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.metrics.BaseReporterFactory;
+import io.dropwizard.metrics.common.BaseReporterFactory;
 import io.dropwizard.validation.OneOf;
 import io.dropwizard.validation.PortRange;
-import javax.validation.constraints.NotEmpty;
 
+import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
 
 /**

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/BaseFormattedReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/BaseReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricAttribute;
 import com.codahale.metrics.MetricFilter;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/ConsoleReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.ConsoleReporter;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/CsvReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.CsvReporter;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/DefaultStringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import java.util.Set;
 

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/MetricsFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/RegexStringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/ReporterFactory.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.ScheduledReporter;
@@ -15,7 +15,7 @@
  * <ol>
  *     <li>Create a class which implements {@link ReporterFactory}.</li>
  *     <li>Annotate it with {@code @JsonTypeName} and give it a unique type name.</li>
- *     <li>Add a {@code META-INF/services/io.dropwizard.metrics.ReporterFactory}
+ *     <li>Add a {@code META-INF/services/io.dropwizard.metrics.common.ReporterFactory}
  *     file with your implementation's full class name to the class path.</li>
  * </ol>
  *

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/ScheduledReporterManager.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.ScheduledReporter;
 import io.dropwizard.lifecycle.Managed;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/Slf4jReporterFactory.java
Patch:
@@ -1,16 +1,16 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.ScheduledReporter;
 import com.codahale.metrics.Slf4jReporter;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import javax.validation.constraints.NotEmpty;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.MarkerFactory;
 
 import javax.annotation.Nullable;
+import javax.validation.constraints.NotEmpty;
 
 /**
  * A {@link ReporterFactory} for {@link Slf4jReporter} instances.

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/StringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import java.util.Set;
 

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/common/SubstringMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import java.util.Set;
 

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/BaseReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.Metric;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/ConsoleReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.jupiter.api.Test;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/CsvReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/MetricAttributesTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricAttribute;
 import com.codahale.metrics.MetricRegistry;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/MetricsFactoryTest.java
Patch:
@@ -1,11 +1,11 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.MetricAttribute;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.BaseValidator;
 import org.junit.jupiter.api.BeforeEach;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/ScheduledReporterManagerTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import com.codahale.metrics.ScheduledReporter;
 import io.dropwizard.util.Duration;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/common/Slf4jReporterFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.metrics;
+package io.dropwizard.metrics.common;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.jupiter.api.Test;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -1,12 +1,12 @@
 package io.dropwizard.migrations;
 
 import com.codahale.metrics.MetricRegistry;
-import io.dropwizard.Configuration;
-import io.dropwizard.cli.ConfiguredCommand;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.cli.ConfiguredCommand;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.db.DatabaseConfiguration;
 import io.dropwizard.db.ManagedDataSource;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Bootstrap;
 import liquibase.Liquibase;
 import liquibase.database.Database;
 import liquibase.database.DatabaseConnection;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbCalculateChecksumCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import liquibase.change.CheckSum;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbClearChecksumsCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import liquibase.Scope;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbDropAllCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbDumpCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.CatalogAndSchema;
 import liquibase.Liquibase;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbFastForwardCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbGenerateDocsCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbLocksCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbMigrateCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbPrepareRollbackCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbRollbackCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbStatusCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbTagCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbTestCommand.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DatabaseConfiguration;
 import liquibase.Liquibase;
 import net.sourceforge.argparse4j.impl.Arguments;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
-import io.dropwizard.ConfiguredBundle;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.db.DatabaseConfiguration;
-import io.dropwizard.setup.Bootstrap;
 
 import javax.annotation.Nullable;
 import java.util.Map;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbLocksCommandTest.java
Patch:
@@ -13,7 +13,8 @@
 import java.util.Map;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
 
 @NotThreadSafe
 class DbLocksCommandTest {

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/MigrationsBundleTest.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Application;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.db.PooledDataSourceFactory;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
 import org.junit.jupiter.api.Test;
 
 import java.util.HashMap;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/TestMigrationConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.migrations;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.db.DataSourceFactory;
 
 public class TestMigrationConfiguration extends Configuration {

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/async/AsyncAccessEventAppenderFactory.java
Patch:
@@ -2,7 +2,7 @@
 
 import ch.qos.logback.access.spi.IAccessEvent;
 import ch.qos.logback.core.AsyncAppenderBase;
-import io.dropwizard.logging.async.AsyncAppenderFactory;
+import io.dropwizard.logging.common.async.AsyncAppenderFactory;
 
 /**
  * An implementation of {@link AsyncAppenderFactory} for {@link IAccessEvent}.

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/filter/UriFilterFactory.java
Patch:
@@ -5,13 +5,12 @@
 import ch.qos.logback.core.spi.FilterReply;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.dropwizard.logging.filter.FilterFactory;
+import io.dropwizard.logging.common.filter.FilterFactory;
 
+import javax.validation.constraints.NotNull;
 import java.util.Collections;
 import java.util.Set;
 
-import javax.validation.constraints.NotNull;
-
 /**
  * @since 2.0
  */

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/layout/LogbackAccessRequestLayoutFactory.java
Patch:
@@ -3,7 +3,7 @@
 import ch.qos.logback.access.spi.IAccessEvent;
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
-import io.dropwizard.logging.layout.LayoutFactory;
+import io.dropwizard.logging.common.layout.LayoutFactory;
 
 import java.util.TimeZone;
 

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/ExternalRequestLogFactoryTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.validation.BaseValidator;
 import org.junit.jupiter.api.Test;
 

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/RequestLogFactoryTest.java
Patch:
@@ -5,9 +5,9 @@
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.ConsoleAppenderFactory;
-import io.dropwizard.logging.FileAppenderFactory;
-import io.dropwizard.logging.SyslogAppenderFactory;
+import io.dropwizard.logging.common.ConsoleAppenderFactory;
+import io.dropwizard.logging.common.FileAppenderFactory;
+import io.dropwizard.logging.common.SyslogAppenderFactory;
 import io.dropwizard.validation.BaseValidator;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/old/DropwizardSlf4jRequestLogWriterTest.java
Patch:
@@ -4,7 +4,7 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.spi.AppenderAttachableImpl;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.eclipse.jetty.http.HttpURI;
 import org.eclipse.jetty.server.HttpChannelState;
 import org.eclipse.jetty.server.Request;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/assets/ByteRangeTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.junit.jupiter.api.Test;
 
-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
 class ByteRangeTest {
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/POJOConfigurationFactory.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.testing;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.jackson.Jackson;
 
 import java.io.File;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.testing.common;
 
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.Transaction;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DropwizardTestResourceConfig.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.testing.common;
 
+import io.dropwizard.core.setup.ExceptionMapperBinder;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.jackson.JacksonFeature;
 import io.dropwizard.jersey.validation.HibernateValidationBinder;
-import io.dropwizard.setup.ExceptionMapperBinder;
 import org.glassfish.jersey.server.ServerProperties;
 
 import javax.servlet.ServletConfig;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/Resource.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
-import io.dropwizard.logging.BootstrapLogging;
+import io.dropwizard.logging.common.BootstrapLogging;
 import io.dropwizard.testing.junit5.ResourceExtension;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.client.HttpUrlConnectorProvider;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardClientRule.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.testing.junit;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.common.DropwizardClient;
 import org.junit.rules.ExternalResource;
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit5/DropwizardClientExtension.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.testing.junit5;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.common.DropwizardClient;
 
 import java.net.URI;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/DropwizardTestSupportWithResourceConfigProviderTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.testing;
 
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.app.TestConfiguration;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/DropwizardTestSupportWithUrlConfigProviderTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.testing;
 
 import io.dropwizard.configuration.UrlConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.app.TestApplication;
 import io.dropwizard.testing.app.TestConfiguration;
 import org.junit.jupiter.api.AfterAll;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/DropwizardTestApplication.java
Patch:
@@ -2,11 +2,11 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import io.dropwizard.Application;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jersey.PATCH;
 import io.dropwizard.servlets.tasks.PostBodyTask;
 import io.dropwizard.servlets.tasks.Task;
-import io.dropwizard.setup.Environment;
 
 import javax.annotation.Nullable;
 import javax.ws.rs.GET;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/GzipDefaultVaryBehaviourTest.java
Patch:
@@ -6,7 +6,6 @@
 import org.junit.Test;
 
 import javax.ws.rs.core.Response;
-
 import java.util.Collections;
 
 import static javax.ws.rs.core.HttpHeaders.ACCEPT_ENCODING;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/TestApplication.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.testing.app;
 
-import io.dropwizard.Application;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.setup.Environment;
 
 public class TestApplication extends Application<TestConfiguration> {
     @Override

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/TestConfiguration.java
Patch:
@@ -1,7 +1,8 @@
 package io.dropwizard.testing.app;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
+
 import javax.validation.constraints.NotEmpty;
 
 public class TestConfiguration extends Configuration {

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.testing.junit;
 
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.app.DropwizardTestApplication;
 import io.dropwizard.testing.app.TestConfiguration;
 import org.junit.ClassRule;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleWithExplicitTest.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.testing.junit;
 
-import io.dropwizard.Application;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.server.DefaultServerFactory;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.HttpConnectorFactory;
-import io.dropwizard.server.DefaultServerFactory;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.testing.app.TestConfiguration;
 import org.junit.ClassRule;
 import org.junit.Test;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleWithoutConfigTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.testing.junit;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.ConfigOverride;
 import org.junit.ClassRule;
 import org.junit.Test;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/DropwizardAppExtensionWithCheckCommandTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.testing.junit5;
 
-import io.dropwizard.cli.CheckCommand;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.core.cli.CheckCommand;
 import io.dropwizard.testing.app.DropwizardTestApplication;
 import io.dropwizard.testing.app.TestConfiguration;
 import org.junit.jupiter.api.Test;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/DropwizardAppExtensionWithConfiguredCommandTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.testing.junit5;
 
-import io.dropwizard.cli.ConfiguredCommand;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.cli.ConfiguredCommand;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.testing.app.DropwizardTestApplication;
 import io.dropwizard.testing.app.TestConfiguration;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/DropwizardAppExtensionWithCustomCommandTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.testing.junit5;
 
-import io.dropwizard.cli.Command;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.cli.Command;
+import io.dropwizard.core.setup.Bootstrap;
 import io.dropwizard.testing.app.DropwizardTestApplication;
 import io.dropwizard.testing.app.TestConfiguration;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/DropwizardAppExtensionWithExplicitTest.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.testing.junit5;
 
-import io.dropwizard.Application;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.server.DefaultServerFactory;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.jetty.HttpConnectorFactory;
-import io.dropwizard.server.DefaultServerFactory;
-import io.dropwizard.setup.Environment;
 import io.dropwizard.testing.app.TestConfiguration;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/DropwizardAppExtensionWithoutConfigTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.testing.junit5;
 
-import io.dropwizard.Application;
-import io.dropwizard.Configuration;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.Configuration;
+import io.dropwizard.core.setup.Environment;
 import io.dropwizard.testing.ConfigOverride;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;

File: dropwizard-validation/src/test/java/io/dropwizard/validation/ConstraintPerson.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.validation;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+
 import javax.validation.constraints.NotEmpty;
 
 public class ConstraintPerson {

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -8,9 +8,9 @@
 import freemarker.template.DefaultObjectWrapperBuilder;
 import freemarker.template.Template;
 import freemarker.template.Version;
-import io.dropwizard.views.View;
-import io.dropwizard.views.ViewRenderException;
-import io.dropwizard.views.ViewRenderer;
+import io.dropwizard.views.common.View;
+import io.dropwizard.views.common.ViewRenderException;
+import io.dropwizard.views.common.ViewRenderer;
 
 import javax.annotation.Nonnull;
 import java.io.IOException;

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/AbsoluteView.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.views.freemarker;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 public class AbsoluteView extends View {
     private final String name;

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/AutoEscapingView.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.views.freemarker;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 public class AutoEscapingView extends View {
     private final String content;

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/BadView.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.views.freemarker;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 public class BadView extends View {
     public BadView() {

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/ErrorView.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.views.freemarker;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 public class ErrorView extends View {
     protected ErrorView() {

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/RelativeView.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.views.freemarker;
 
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 public class RelativeView extends View {
     public RelativeView() {

File: dropwizard-views-mustache/src/main/java/io/dropwizard/views/mustache/MustacheViewRenderer.java
Patch:
@@ -7,9 +7,9 @@
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheFactory;
 import com.github.mustachejava.resolver.FileSystemResolver;
-import io.dropwizard.views.View;
-import io.dropwizard.views.ViewRenderException;
-import io.dropwizard.views.ViewRenderer;
+import io.dropwizard.views.common.View;
+import io.dropwizard.views.common.ViewRenderException;
+import io.dropwizard.views.common.ViewRenderer;
 
 import java.io.File;
 import java.io.IOException;

File: dropwizard-views-mustache/src/main/java/io/dropwizard/views/mustache/PerClassMustacheResolver.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.views.mustache;
 
 import com.github.mustachejava.MustacheResolver;
-import io.dropwizard.views.View;
+import io.dropwizard.views.common.View;
 
 import javax.annotation.Nullable;
 import java.io.BufferedReader;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PermitAllAuthorizer.java
Patch:
@@ -1,5 +1,7 @@
 package io.dropwizard.auth;
 
+import javax.annotation.Nullable;
+import javax.ws.rs.container.ContainerRequestContext;
 import java.security.Principal;
 
 /**
@@ -10,7 +12,7 @@
 public class PermitAllAuthorizer<P extends Principal> implements Authorizer<P> {
 
     @Override
-    public boolean authorize(P principal, String role) {
+    public boolean authorize(P principal, String role, @Nullable ContainerRequestContext ctx) {
         return true;
     }
 }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/util/AuthUtil.java
Patch:
@@ -51,7 +51,7 @@ public static Authenticator<String, Principal> getMultiplyUsersOAuthAuthenticato
 
     public static Authorizer<Principal> getTestAuthorizer(final String validUser,
                                                           final String validRole) {
-        return (principal, role) -> principal != null
+        return (principal, role, context) -> principal != null
             && validUser.equals(principal.getName())
             && validRole.equals(role);
     }

File: dropwizard-health/src/test/java/io/dropwizard/health/DefaultHealthFactoryTest.java
Patch:
@@ -46,8 +46,6 @@ void shouldBuildHealthFactoryFromYaml() throws Exception {
         assertThat(healthFactory.getShutdownWaitPeriod().toMilliseconds()).isEqualTo(1L);
         assertThat(healthFactory.getHealthCheckUrlPaths()).isEqualTo(singletonList("/health-check"));
 
-        assertThat(healthFactory.getHealthChecks()).isEqualTo(healthFactory.getHealthCheckConfigurations());
-
         assertThat(healthFactory.getHealthCheckConfigurations()
             .stream()
             .map(HealthCheckConfiguration::getName)

File: dropwizard-health/src/test/java/io/dropwizard/health/DefaultHealthFactoryTest.java
Patch:
@@ -46,8 +46,6 @@ void shouldBuildHealthFactoryFromYaml() throws Exception {
         assertThat(healthFactory.getShutdownWaitPeriod().toMilliseconds()).isEqualTo(1L);
         assertThat(healthFactory.getHealthCheckUrlPaths()).isEqualTo(singletonList("/health-check"));
 
-        assertThat(healthFactory.getHealthChecks()).isEqualTo(healthFactory.getHealthCheckConfigurations());
-
         assertThat(healthFactory.getHealthCheckConfigurations()
             .stream()
             .map(HealthCheckConfiguration::getName)

File: dropwizard-core/src/test/java/io/dropwizard/ApplicationTest.java
Patch:
@@ -19,7 +19,7 @@ private static class FakeApplication extends Application<FakeConfiguration> {
         public void run(FakeConfiguration configuration, Environment environment) {}
 
         @Override
-        protected void onFatalError() {
+        protected void onFatalError(Throwable throwable) {
             fatalError = true;
         }
     }

File: dropwizard-health/src/test/java/io/dropwizard/health/DefaultHealthFactoryTest.java
Patch:
@@ -46,8 +46,6 @@ void shouldBuildHealthFactoryFromYaml() throws Exception {
         assertThat(healthFactory.getShutdownWaitPeriod().toMilliseconds()).isEqualTo(1L);
         assertThat(healthFactory.getHealthCheckUrlPaths()).isEqualTo(singletonList("/health-check"));
 
-        assertThat(healthFactory.getHealthChecks()).isEqualTo(healthFactory.getHealthCheckConfigurations());
-
         assertThat(healthFactory.getHealthCheckConfigurations()
             .stream()
             .map(HealthCheckConfiguration::getName)

File: dropwizard-example/src/test/java/com/example/helloworld/resources/PeopleResourceTest.java
Patch:
@@ -33,7 +33,7 @@ class PeopleResourceTest {
     public static final ResourceExtension RESOURCES = ResourceExtension.builder()
             .addResource(new PeopleResource(PERSON_DAO))
             .build();
-    private ArgumentCaptor<Person> personCaptor = ArgumentCaptor.forClass(Person.class);
+    private final ArgumentCaptor<Person> personCaptor = ArgumentCaptor.forClass(Person.class);
     private Person person;
 
     @BeforeEach
@@ -86,7 +86,7 @@ void createPersonFailureMaxYearBorn() {
     }
 
     @Test
-    void listPeople() throws Exception {
+    void listPeople() {
         final List<Person> people = Collections.singletonList(person);
         when(PERSON_DAO.findAll()).thenReturn(people);
 

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2ConnectorFactory.java
Patch:
@@ -106,7 +106,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, @Null
         alpn.setDefaultProtocol("http/1.1"); // Speak HTTP 1.1 over TLS if negotiation fails
 
         final SslContextFactory sslContextFactory = configureSslContextFactory(new SslContextFactory.Server());
-        sslContextFactory.addLifeCycleListener(logSslInfoOnStart(sslContextFactory));
+        sslContextFactory.addLifeCycleListener(logSslParameters(sslContextFactory));
         server.addBean(sslContextFactory);
         server.addBean(new SslReload(sslContextFactory, this::configureSslContextFactory));
 

File: dropwizard-core/src/main/java/io/dropwizard/cli/ServerCommand.java
Patch:
@@ -5,7 +5,6 @@
 import io.dropwizard.setup.Environment;
 import net.sourceforge.argparse4j.inf.Namespace;
 import org.eclipse.jetty.server.Server;
-import org.eclipse.jetty.util.component.AbstractLifeCycle;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -67,7 +66,7 @@ protected void run(Environment environment, Namespace namespace, T configuration
         }
     }
 
-    private class LifeCycleListener extends AbstractLifeCycle.AbstractLifeCycleListener {
+    private class LifeCycleListener implements LifeCycle.Listener {
         @Override
         public void lifeCycleStopped(LifeCycle event) {
             cleanup();

File: dropwizard-core/src/main/java/io/dropwizard/setup/AdminEnvironment.java
Patch:
@@ -9,7 +9,6 @@
 import io.dropwizard.servlets.tasks.LogConfigurationTask;
 import io.dropwizard.servlets.tasks.Task;
 import io.dropwizard.servlets.tasks.TaskServlet;
-import org.eclipse.jetty.util.component.AbstractLifeCycle;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -43,7 +42,7 @@ public AdminEnvironment(MutableServletContextHandler handler,
         tasks.add(new GarbageCollectionTask());
         tasks.add(new LogConfigurationTask());
         addServlet("tasks", tasks).addMapping("/tasks/*");
-        handler.addLifeCycleListener(new AbstractLifeCycle.AbstractLifeCycleListener() {
+        handler.addLifeCycleListener(new LifeCycle.Listener() {
             @Override
             public void lifeCycleStarting(LifeCycle event) {
                 logTasks();

File: dropwizard-core/src/main/java/io/dropwizard/sslreload/SslReloadBundle.java
Patch:
@@ -5,7 +5,6 @@
 import io.dropwizard.jetty.MutableServletContextHandler;
 import io.dropwizard.jetty.SslReload;
 import io.dropwizard.setup.Environment;
-import org.eclipse.jetty.util.component.AbstractLifeCycle;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -25,7 +24,7 @@ public class SslReloadBundle implements ConfiguredBundle<Configuration> {
 
     @Override
     public void run(Configuration configuration, Environment environment) {
-        environment.getApplicationContext().addLifeCycleListener(new AbstractLifeCycle.AbstractLifeCycleListener() {
+        environment.getApplicationContext().addLifeCycleListener(new LifeCycle.Listener() {
             @Override
             public void lifeCycleStarted(LifeCycle event) {
                 final Set<SslReload> reloaders = new HashSet<>();

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/LifecycleEnvironment.java
Patch:
@@ -5,7 +5,6 @@
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.lifecycle.ServerLifecycleListener;
 import org.eclipse.jetty.server.Server;
-import org.eclipse.jetty.util.component.AbstractLifeCycle;
 import org.eclipse.jetty.util.component.ContainerLifeCycle;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.slf4j.Logger;
@@ -86,7 +85,7 @@ public void attach(ContainerLifeCycle container) {
         for (LifeCycle object : managedObjects) {
             container.addBean(object);
         }
-        container.addLifeCycleListener(new AbstractLifeCycle.AbstractLifeCycleListener() {
+        container.addLifeCycleListener(new LifeCycle.Listener() {
             @Override
             public void lifeCycleStarting(LifeCycle event) {
                 LOGGER.debug("managed objects = {}", managedObjects);
@@ -104,7 +103,7 @@ public MetricRegistry getMetricRegistry() {
         return metricRegistry;
     }
 
-    private static class ServerListener extends AbstractLifeCycle.AbstractLifeCycleListener {
+    private static class ServerListener implements LifeCycle.Listener {
         private final ServerLifecycleListener listener;
 
         private ServerListener(ServerLifecycleListener listener) {

File: dropwizard-core/src/main/java/io/dropwizard/Bundle.java
Patch:
@@ -18,7 +18,7 @@ default void run(Configuration configuration, Environment environment) throws Ex
      * Initializes the application environment.
      *
      * @param environment the application environment
-     * @deprecated Use {@link ConfiguredBundle#run(Configuration, Environment)}
+     * @deprecated Use {@link ConfiguredBundle<Configuration>#run(Configuration, Environment)}
      */
     @Deprecated
     default void run(Environment environment) {

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -221,7 +221,7 @@ private List<Connector> buildAdminConnectors(MetricRegistry metricRegistry, Serv
         for (ConnectorFactory factory : adminConnectors) {
             final Connector connector = factory.build(server, metricRegistry, "admin", threadPool);
             if (connector instanceof ContainerLifeCycle) {
-                ((ContainerLifeCycle) connector).unmanage(threadPool);
+                connector.unmanage(threadPool);
             }
             connectors.add(connector);
         }

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.db;
 
-import com.codahale.metrics.Gauge;
 import com.codahale.metrics.MetricFilter;
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
@@ -19,7 +18,6 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.util.Map;
 import java.util.Optional;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/LazyLoadingTest.java
Patch:
@@ -68,7 +68,7 @@ void returnsErrorsWhenEnabled() {
     @Nested
     @SuppressWarnings("ClassCanBeStatic")
     @ExtendWith(DropwizardExtensionsSupport.class)
-    class LazyLoadingDisabled {
+    class LazyLoadingDisabledTest {
         private final DropwizardAppExtension<TestConfiguration> appExtension = new DropwizardAppExtension<>(
             TestApplicationWithDisabledLazyLoading.class,
             ResourceHelpers.resourceFilePath("hibernate-integration-test.yaml"),
@@ -107,7 +107,7 @@ public void initialize(Bootstrap<TestConfiguration> bootstrap) {
         }
 
         @Override
-        public void run(TestConfiguration configuration, Environment environment) throws Exception {
+        public void run(TestConfiguration configuration, Environment environment) {
             final SessionFactory sessionFactory = hibernate.getSessionFactory();
             initDatabase(sessionFactory);
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/CustomDeserialization.java
Patch:
@@ -39,7 +39,7 @@ public CustomRepresentation deserialize(
      */
     public static class MyNastyException extends JsonMappingException {
         public MyNastyException(JsonParser jp) {
-            super(jp::close, null);
+            super(jp, null);
         }
 
         @Override

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/Person.java
Patch:
@@ -48,6 +48,6 @@ public boolean equals(Object obj) {
 
     @Override
     public String toString() {
-        return "Person{" + "name='" + name + "\'" + ", email='" + email + "'}";
+        return "Person{" + "name='" + name + "'" + ", email='" + email + "'}";
     }
 }

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -63,6 +63,7 @@ void setBaseConfig(Map<String, String> baseConfig) {
     /**
      * @deprecated Use {@link #FreemarkerViewRenderer(Version)} instead.
      */
+    @Deprecated
     public FreemarkerViewRenderer() {
         this(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);
     }

File: dropwizard-core/src/main/java/io/dropwizard/Bundle.java
Patch:
@@ -18,7 +18,7 @@ default void run(Configuration configuration, Environment environment) throws Ex
      * Initializes the application environment.
      *
      * @param environment the application environment
-     * @deprecated Use {@link ConfiguredBundle#run(Configuration, Environment)}
+     * @deprecated Use {@link ConfiguredBundle<Configuration>#run(Configuration, Environment)}
      */
     @Deprecated
     default void run(Environment environment) {

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -221,7 +221,7 @@ private List<Connector> buildAdminConnectors(MetricRegistry metricRegistry, Serv
         for (ConnectorFactory factory : adminConnectors) {
             final Connector connector = factory.build(server, metricRegistry, "admin", threadPool);
             if (connector instanceof ContainerLifeCycle) {
-                ((ContainerLifeCycle) connector).unmanage(threadPool);
+                connector.unmanage(threadPool);
             }
             connectors.add(connector);
         }

File: dropwizard-db/src/main/java/io/dropwizard/db/TimeBoundHealthCheck.java
Patch:
@@ -3,7 +3,6 @@
 import com.codahale.metrics.health.HealthCheck;
 import io.dropwizard.util.Duration;
 
-import java.lang.InterruptedException;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 

File: dropwizard-e2e/src/main/java/com/example/badlog/BadLogApp.java
Patch:
@@ -10,7 +10,7 @@ public class BadLogApp extends Application<Configuration> {
     private static final Logger LOGGER = LoggerFactory.getLogger(BadLogApp.class);
 
     @Override
-    protected void onFatalError() {
+    protected void onFatalError(Throwable t) {
         LOGGER.warn("Mayday we're going down");
     }
 

File: dropwizard-example/src/test/java/com/example/helloworld/DockerIntegrationTest.java
Patch:
@@ -88,7 +88,7 @@ void noDateParameter() {
             final String date = APP.client().target("http://localhost:" + APP.getLocalPort() + "/hello-world/date")
                 .request()
                 .get(String.class);
-            assertThat(date).isEqualTo("");
+            assertThat(date).isEmpty();
         }
     }
 

File: dropwizard-example/src/test/java/com/example/helloworld/IntegrationTest.java
Patch:
@@ -84,7 +84,7 @@ void noDateParameter() {
             final String date = APP.client().target("http://localhost:" + APP.getLocalPort() + "/hello-world/date")
                 .request()
                 .get(String.class);
-            assertThat(date).isEqualTo("");
+            assertThat(date).isEmpty();
         }
     }
 

File: dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckManager.java
Patch:
@@ -65,8 +65,8 @@ public HealthCheckManager(final List<HealthCheckConfiguration> configs,
 
         this.aggregateHealthyName = MetricRegistry.name("health", "aggregate", "healthy");
         this.aggregateUnhealthyName = MetricRegistry.name("health", "aggregate", "unhealthy");
-        metrics.register(aggregateHealthyName, (Gauge) this::calculateNumberOfHealthyChecks);
-        metrics.register(aggregateUnhealthyName, (Gauge) this::calculateNumberOfUnhealthyChecks);
+        metrics.register(aggregateHealthyName, (Gauge<Long>) this::calculateNumberOfHealthyChecks);
+        metrics.register(aggregateUnhealthyName, (Gauge<Long>) this::calculateNumberOfUnhealthyChecks);
     }
 
     // visible for testing

File: dropwizard-health/src/main/java/io/dropwizard/health/response/JsonHealthResponseProvider.java
Patch:
@@ -86,7 +86,6 @@ private Set<String> getNamesFromQueryParams(final Map<String, Collection<String>
     private Collection<HealthStateView> getViews(final Map<String, Collection<String>> queryParams) {
         final Set<String> names = getNamesFromQueryParams(queryParams);
 
-        final Collection<HealthStateView> views;
         if (shouldReturnAllViews(names)) {
             return unmodifiableList(new ArrayList<>(healthStateAggregator.healthStateViews()));
         } else {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkApplicationListenerTest.java
Patch:
@@ -17,7 +17,6 @@
 import java.lang.reflect.Method;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
 import static org.hibernate.resource.transaction.spi.TransactionStatus.ACTIVE;
 import static org.hibernate.resource.transaction.spi.TransactionStatus.NOT_ACTIVE;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalDoubleMessageBodyWriterTest.java
Patch:
@@ -16,7 +16,6 @@
 import javax.ws.rs.client.Invocation;
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Request;
 import javax.ws.rs.core.Response;
 import java.util.OptionalDouble;
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -254,7 +254,7 @@ private void stopIfRequired() {
             try {
                 jettyServer.stop();
             } catch (RuntimeException e) {
-                throw (RuntimeException) e;
+                throw e;
             } catch (Exception e) {
                 throw new RuntimeException(e);
             } finally {

File: dropwizard-testing/src/main/java/io/dropwizard/testing/ResourceHelpers.java
Patch:
@@ -20,7 +20,7 @@ public static String resourceFilePath(final String resourceClassPathLocation) {
         try {
             return new File(Resources.getResource(resourceClassPathLocation).toURI()).getAbsolutePath();
         } catch (RuntimeException e) {
-            throw (RuntimeException) e;
+            throw e;
         } catch (Exception e) {
             throw new RuntimeException(e);
         }

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/GzipDefaultVaryBehaviourTest.java
Patch:
@@ -26,7 +26,8 @@ public void testDefaultVaryHeader() {
         final Response clientResponse = RULE.client().target(
             "http://localhost:" + RULE.getLocalPort() + "/test").request().header(ACCEPT_ENCODING, "gzip").get();
 
-        assertThat(clientResponse.getHeaders().get(VARY)).isEqualTo(Collections.singletonList((Object) ACCEPT_ENCODING));
-        assertThat(clientResponse.getHeaders().get(CONTENT_ENCODING)).isEqualTo(Collections.singletonList((Object) "gzip"));
+        assertThat(clientResponse.getHeaders())
+            .containsEntry(VARY, Collections.singletonList(ACCEPT_ENCODING))
+            .containsEntry(CONTENT_ENCODING, Collections.singletonList("gzip"));
     }
 }

File: dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckManager.java
Patch:
@@ -65,8 +65,8 @@ public HealthCheckManager(final List<HealthCheckConfiguration> configs,
 
         this.aggregateHealthyName = MetricRegistry.name("health", "aggregate", "healthy");
         this.aggregateUnhealthyName = MetricRegistry.name("health", "aggregate", "unhealthy");
-        metrics.register(aggregateHealthyName, (Gauge) this::calculateNumberOfHealthyChecks);
-        metrics.register(aggregateUnhealthyName, (Gauge) this::calculateNumberOfUnhealthyChecks);
+        metrics.register(aggregateHealthyName, (Gauge<Long>) this::calculateNumberOfHealthyChecks);
+        metrics.register(aggregateUnhealthyName, (Gauge<Long>) this::calculateNumberOfUnhealthyChecks);
     }
 
     // visible for testing

File: dropwizard-e2e/src/test/java/com/example/badlog/BadLogTest.java
Patch:
@@ -7,8 +7,6 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledOnOs;
-import org.junit.jupiter.api.condition.OS;
 import org.junit.jupiter.api.io.TempDir;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -24,7 +22,6 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.awaitility.Awaitility.await;
 
-@DisabledOnOs(OS.WINDOWS)
 class BadLogTest {
     private static final Logger LOGGER = LoggerFactory.getLogger(BadLogTest.class);
     private static final PrintStream oldOut = System.out;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit5/DropwizardExtensionsSupport.java
Patch:
@@ -65,14 +65,14 @@ public void afterEach(ExtensionContext extensionContext) throws Exception {
     }
 
     private void afterEach(Object testInstance, Class<?> cls) throws Throwable {
-        final Class<?> enclosingClass = testInstance.getClass().getEnclosingClass();
+        final Class<?> enclosingClass = cls.getEnclosingClass();
         if (enclosingClass != null) {
             final Object enclosing = getEnclosingInstance(testInstance);
             if (enclosing != null) {
-                afterEach(enclosing, enclosingClass);
+                afterEach(enclosing, cls);
             }
         }
-        for (Field member : findAnnotatedFields(cls, false)) {
+        for (Field member : findAnnotatedFields(testInstance.getClass(), false)) {
             getDropwizardExtension(member, testInstance).after();
         }
     }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/OptionalAuthFilterOrderingTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-import java.io.IOException;
 import java.security.Principal;
 
 import javax.annotation.Priority;
@@ -94,7 +93,7 @@ void authenticationFilterShouldExecuteInAuthenticationPhaseForOptionalPrincipal(
     private static class DummyAuthenticationFilter extends AuthFilter<Object, Principal> {
 
         @Override
-        public void filter(ContainerRequestContext requestContext) throws IOException {
+        public void filter(ContainerRequestContext requestContext) {
             requestContext.setSecurityContext(new SecurityContext() {
                 @Override
                 public Principal getUserPrincipal() {
@@ -123,7 +122,7 @@ public String getAuthenticationScheme() {
     private static class DummyAuthorizationFilter implements ContainerRequestFilter {
 
         @Override
-        public void filter(ContainerRequestContext request) throws IOException {
+        public void filter(ContainerRequestContext request) {
             if (request.getSecurityContext().getUserPrincipal() != null) {
                 request.abortWith(Response.ok("authorization ok").build());
             } else {

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardSSLConnectionSocketFactory.java
Patch:
@@ -51,7 +51,7 @@ private String[] getSupportedCiphers() {
         if (supportedCiphers == null) {
             return null;
         }
-        return supportedCiphers.toArray(new String[supportedCiphers.size()]);
+        return supportedCiphers.toArray(new String[0]);
     }
 
     @Nullable
@@ -60,7 +60,7 @@ private String[] getSupportedProtocols() {
         if (supportedProtocols == null) {
             return null;
         }
-        return supportedProtocols.toArray(new String[supportedProtocols.size()]);
+        return supportedProtocols.toArray(new String[0]);
     }
 
     private HostnameVerifier chooseHostnameVerifier() {

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/HttpClientConfigurationTest.java
Patch:
@@ -5,7 +5,6 @@
 import io.dropwizard.configuration.ConfigurationParsingException;
 import io.dropwizard.configuration.ConfigurationValidationException;
 import io.dropwizard.configuration.DefaultConfigurationFactoryFactory;
-import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.util.Resources;

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/SubstitutingSourceProvider.java
Patch:
@@ -36,7 +36,7 @@ public SubstitutingSourceProvider(ConfigurationSourceProvider delegate, StringSu
      */
     @Override
     public InputStream open(String path) throws IOException {
-        try (InputStream in = delegate.open(path);) {
+        try (InputStream in = delegate.open(path)) {
             final String config = new String(ByteStreams.toByteArray(in), StandardCharsets.UTF_8);
             final String substituted = substitutor.replace(config);
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableLookupTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assumptions.assumeThat;
 
 class EnvironmentVariableLookupTest {

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/SubstitutingSourceProviderTest.java
Patch:
@@ -48,7 +48,7 @@ private static class DummySourceProvider implements ConfigurationSourceProvider
         InputStream lastStream = new ByteArrayInputStream(new byte[0]);
 
         @Override
-        public InputStream open(String s) throws IOException {
+        public InputStream open(String s) {
             // used to test that the stream is properly closed
             lastStream = new BufferedInputStream(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));
             return lastStream;

File: dropwizard-e2e/src/test/java/com/example/app1/App1Test.java
Patch:
@@ -64,7 +64,7 @@ void custom404OnViewRenderMissingMustacheTemplate() {
     }
 
     @Test
-    void earlyEofTest() throws IOException, InterruptedException {
+    void earlyEofTest() throws IOException {
         // Only eof test so we ensure it's false before test
         ((App1)RULE.getApplication()).wasEofExceptionHit = false;
 

File: dropwizard-health/src/test/java/io/dropwizard/health/HealthCheckSchedulerTest.java
Patch:
@@ -173,6 +173,6 @@ void unscheduleShouldDoNothingIfNoCheckScheduled() {
         final String name = "test";
 
         assertThatCode(() -> scheduler.unschedule(name))
-            .doesNotThrowAnyException();;
+            .doesNotThrowAnyException();
     }
 }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkAwareProxyFactoryTest.java
Patch:
@@ -38,7 +38,7 @@ void setUp() throws Exception {
         when(environment.metrics()).thenReturn(new MetricRegistry());
 
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
-        dataSourceFactory.setUrl("jdbc:hsqldb:mem:unit-of-work-" + UUID.randomUUID().toString());
+        dataSourceFactory.setUrl("jdbc:hsqldb:mem:unit-of-work-" + UUID.randomUUID());
         dataSourceFactory.setUser("sa");
         dataSourceFactory.setDriverClass("org.hsqldb.jdbcDriver");
         dataSourceFactory.setValidationQuery("SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS");

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/JdbiFactoryTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.UUID;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.*;
 
 class JdbiFactoryTest {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoderTest.java
Patch:
@@ -76,7 +76,7 @@ private static class WriterInterceptorContextMock implements WriterInterceptorCo
         private final MultivaluedMap<String, Object> headers;
         private OutputStream os = new OutputStream() {
             @Override
-            public void write(int i) throws IOException {
+            public void write(int i) {
                 //void
             }
         };
@@ -87,7 +87,7 @@ public WriterInterceptorContextMock(MultivaluedMap<String, Object> headers) {
         }
 
         @Override
-        public void proceed() throws IOException, WebApplicationException {
+        public void proceed() throws WebApplicationException {
             proceedCalled = true;
         }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/FuzzyEnumParamConverterProviderTest.java
Patch:
@@ -18,7 +18,7 @@ class FuzzyEnumParamConverterProviderTest {
 
     private enum Fuzzy {
         A_1,
-        A_2;
+        A_2
     }
 
     private enum WithToString {

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java
Patch:
@@ -37,7 +37,7 @@ public RoutingHandler(Map<Connector, Handler> handlers) {
             this.entries[i++] = new Entry(entry.getKey(), entry.getValue());
             addBean(entry.getValue());
         }
-        setHandlers(handlers.values().toArray(new Handler[handlers.size()]));
+        setHandlers(handlers.values().toArray(new Handler[0]));
     }
 
     @Override

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NetUtilTest.java
Patch:
@@ -6,7 +6,6 @@
 import java.net.InetAddress;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.util.Collection;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assumptions.assumeThat;

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/AccessAttribute.java
Patch:
@@ -24,5 +24,5 @@ public enum AccessAttribute {
     @JsonProperty("localPort") LOCAL_PORT,
     @JsonProperty("requestContent") REQUEST_CONTENT,
     @JsonProperty("responseContent") RESPONSE_CONTENT,
-    @JsonProperty("timestamp") TIMESTAMP;
+    @JsonProperty("timestamp") TIMESTAMP
 }

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/EventJsonLayoutTest.java
Patch:
@@ -5,7 +5,6 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.classic.spi.LoggerContextVO;
 import ch.qos.logback.classic.spi.ThrowableProxyVO;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.logging.json.EventAttribute;
 import io.dropwizard.util.Maps;

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilderTest.java
Patch:
@@ -52,7 +52,7 @@ void testGiveAWarningAboutMaximumPoolSizeAndUnboundedQueue() {
 
     @Test
     @SuppressWarnings("Slf4jFormatShouldBeConst")
-    void testGiveNoWarningAboutMaximumPoolSizeAndBoundedQueue() throws InterruptedException {
+    void testGiveNoWarningAboutMaximumPoolSizeAndBoundedQueue() {
         ExecutorService exe = executorServiceBuilder
             .minThreads(4)
             .maxThreads(8)
@@ -86,7 +86,7 @@ void shouldNotWarnWhenSettingUpSingleThreadedPool() {
      */
     @Test
     @SuppressWarnings("Slf4jFormatShouldBeConst")
-    void shouldNotWarnWhenSettingUpCachedThreadPool() throws InterruptedException {
+    void shouldNotWarnWhenSettingUpCachedThreadPool() {
         ExecutorService exe = executorServiceBuilder
             .minThreads(0)
             .maxThreads(Integer.MAX_VALUE)

File: dropwizard-logging/src/main/java/io/dropwizard/logging/socket/DropwizardUdpSocketAppender.java
Patch:
@@ -38,7 +38,7 @@ protected OutputStream datagramSocketOutputStream(String host, int port) {
         }
         return new OutputStream() {
             @Override
-            public void write(int b) throws IOException {
+            public void write(int b) {
                 throw new UnsupportedOperationException("Datagram doesn't work at byte level");
             }
 
@@ -49,7 +49,7 @@ public void write(byte[] b, int off, int len) throws IOException {
             }
 
             @Override
-            public void close() throws IOException {
+            public void close() {
                 datagramSocket.close();
             }
         };

File: dropwizard-metrics-graphite/src/test/java/io/dropwizard/metrics/graphite/GraphiteReporterFactoryTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockito.ArgumentCaptor;
 
 import java.lang.reflect.Field;
-import java.util.Optional;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/BaseReporterFactoryTest.java
Patch:
@@ -4,7 +4,6 @@
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.ScheduledReporter;
 import io.dropwizard.util.Sets;
-import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/CloseableLiquibase.java
Patch:
@@ -17,7 +17,7 @@ public abstract class CloseableLiquibase extends Liquibase implements AutoClosea
         ResourceAccessor resourceAccessor,
         Database database,
         ManagedDataSource dataSource
-    ) throws LiquibaseException, SQLException {
+    ) {
         super(changeLogFile, resourceAccessor, database);
         this.dataSource = dataSource;
     }

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbDumpCommand.java
Patch:
@@ -207,7 +207,7 @@ private void generateChangeLog(final Database database, final CatalogAndSchema c
             throws DatabaseException, IOException, ParserConfigurationException {
         @SuppressWarnings("unchecked")
         final SnapshotControl snapshotControl = new SnapshotControl(database,
-                compareTypes.toArray(new Class[compareTypes.size()]));
+                compareTypes.toArray(new Class[0]));
         final CompareControl compareControl = new CompareControl(new CompareControl.SchemaComparison[]{
             new CompareControl.SchemaComparison(catalogAndSchema, catalogAndSchema)}, compareTypes);
         final CatalogAndSchema[] compareControlSchemas = compareControl

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDropAllCommandTest.java
Patch:
@@ -9,7 +9,6 @@
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
-import java.sql.SQLException;
 import java.util.Collections;
 
 import static java.nio.charset.StandardCharsets.UTF_8;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/LiquibaseScopingTest.java
Patch:
@@ -6,7 +6,6 @@
 import liquibase.database.jvm.JdbcConnection;
 import liquibase.exception.CustomChangeException;
 import liquibase.exception.LiquibaseException;
-import liquibase.exception.SetupException;
 import liquibase.exception.ValidationErrors;
 import liquibase.resource.ResourceAccessor;
 import net.sourceforge.argparse4j.inf.Namespace;
@@ -112,7 +111,7 @@ public String getConfirmationMessage() {
         return "";
     }
     @Override
-    public void setUp() throws SetupException {
+    public void setUp() {
     }
     @Override
     public void setFileOpener(ResourceAccessor resourceAccessor) {

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/DropwizardClientExtensionTest.java
Patch:
@@ -20,7 +20,7 @@ class DropwizardClientExtensionTest {
     @Test
     void shouldGetStringBodyFromDropWizard() throws IOException {
         final URL url = new URL(EXTENSION_WITH_INSTANCE.baseUri() + "/test");
-        assertThat(Resources.toString(url, StandardCharsets.UTF_8)).isEqualTo("foo");;
+        assertThat(Resources.toString(url, StandardCharsets.UTF_8)).isEqualTo("foo");
     }
 
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/LogbackExcludedTest.java
Patch:
@@ -92,7 +92,7 @@ public void close() {
         return byteStream;
     }
 
-    private static interface CheckedConsumer<T> {
+    private interface CheckedConsumer<T> {
 
         void accept(T t) throws ClassNotFoundException;
     }
@@ -136,7 +136,7 @@ private static Class<?> getClassSystemLoader(String name) throws ClassNotFoundEx
             return ClassLoader.getSystemClassLoader().loadClass(name);
         }
 
-        private static Optional<URL> getUrl(Class<?> clazz) throws ClassNotFoundException {
+        private static Optional<URL> getUrl(Class<?> clazz) {
             return Optional.ofNullable(clazz.getProtectionDomain().getCodeSource()).map(CodeSource::getLocation);
         }
     }

File: dropwizard-util/src/test/java/io/dropwizard/util/JarLocationTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import java.util.Optional;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 class JarLocationTest {

File: dropwizard-views/src/test/java/io/dropwizard/views/ViewBundleTest.java
Patch:
@@ -10,7 +10,6 @@
 
 import javax.validation.constraints.NotNull;
 import javax.ws.rs.WebApplicationException;
-import java.io.IOException;
 import java.io.OutputStream;
 import java.util.Collections;
 import java.util.Locale;
@@ -70,7 +69,7 @@ public boolean isRenderable(View view) {
             }
 
             @Override
-            public void render(View view, Locale locale, OutputStream output) throws IOException, WebApplicationException {
+            public void render(View view, Locale locale, OutputStream output) throws WebApplicationException {
                 //nothing to do
             }
 

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardSSLConnectionSocketFactoryTest.java
Patch:
@@ -15,6 +15,8 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import javax.net.ssl.HostnameVerifier;
@@ -40,6 +42,7 @@
 import static org.bouncycastle.jce.provider.BouncyCastleProvider.PROVIDER_NAME;
 
 @ExtendWith(DropwizardExtensionsSupport.class)
+@DisabledForJreRange(min = JRE.JAVA_17)
 class DropwizardSSLConnectionSocketFactoryTest {
     private TlsConfiguration tlsConfiguration;
     private JerseyClientConfiguration jerseyClientConfiguration;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingUtil.java
Patch:
@@ -48,6 +48,7 @@ public static LoggerContext getLoggerContext() {
             try {
                 Thread.sleep(LOGGER_CONTEXT_AWAITING_SLEEP_TIME.toMilliseconds());
             } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
                 throw new IllegalStateException(e);
             }
         }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthorizer.java
Patch:
@@ -113,8 +113,7 @@ public boolean authorize(P principal, String role) {
     public boolean authorize(P principal, String role, @Nullable ContainerRequestContext requestContext) {
         try (Timer.Context context = getsTimer.time()) {
             final AuthorizationContext<P> cacheKey = getAuthorizationContext(principal, role, requestContext);
-            final Boolean result = cache.get(cacheKey);
-            return result == null ? false : result;
+            return Boolean.TRUE.equals(cache.get(cacheKey));
         } catch (CompletionException e) {
             Throwable cause = e.getCause();
             if (cause instanceof RuntimeException) {

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/JdbiHealthCheckTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import io.dropwizard.util.Duration;
 
-public class JdbiHealthCheckTest {
+class JdbiHealthCheckTest {
     private static final String VALIDATION_QUERY = "select 1";
 
     private Jdbi jdbi;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/RuntimeFilterTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-public class RuntimeFilterTest {
+class RuntimeFilterTest {
 
     private ContainerRequestContext request = mock(ContainerRequestContext.class);
     private ContainerResponseContext response = mock(ContainerResponseContext.class);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalQueryParamResourceTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
-public class OptionalQueryParamResourceTest extends AbstractJerseyTest {
+class OptionalQueryParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/AccessJsonLayoutTest.java
Patch:
@@ -216,7 +216,7 @@ void testRequestAttributes() {
     }
 
     @Test
-    public void testStartAndStop() {
+    void testStartAndStop() {
         accessJsonLayout.start();
         assertThat(accessJsonLayout.isStarted()).isTrue();
         accessJsonLayout.stop();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/AppenderFactoryCustomLayoutTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings("unchecked")
-public class AppenderFactoryCustomLayoutTest {
+class AppenderFactoryCustomLayoutTest {
 
     static {
         BootstrapLogging.bootstrap();

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -252,10 +252,9 @@ private void stopIfRequired() {
             }
             try {
                 jettyServer.stop();
+            } catch (RuntimeException e) {
+                throw (RuntimeException) e;
             } catch (Exception e) {
-                if (e instanceof RuntimeException) {
-                  throw (RuntimeException) e;
-                }
                 throw new RuntimeException(e);
             } finally {
                 jettyServer = null;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/ResourceHelpers.java
Patch:
@@ -19,10 +19,9 @@ private ResourceHelpers() { /* singleton */ }
     public static String resourceFilePath(final String resourceClassPathLocation) {
         try {
             return new File(Resources.getResource(resourceClassPathLocation).toURI()).getAbsolutePath();
+        } catch (RuntimeException e) {
+            throw (RuntimeException) e;
         } catch (Exception e) {
-            if (e instanceof RuntimeException) {
-                throw (RuntimeException) e;
-            }
             throw new RuntimeException(e);
         }
     }

File: dropwizard-util/src/test/java/io/dropwizard/util/EnumsTest.java
Patch:
@@ -45,7 +45,7 @@ public static Stream<Arguments> data() {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void canGuess(String text, VideoFormat result) {
+    void canGuess(String text, VideoFormat result) {
         assertThat(Enums.fromStringFuzzy(text, VideoFormat.values())).isEqualTo(result);
     }
 }

File: dropwizard-util/src/test/java/io/dropwizard/util/GenericsTest.java
Patch:
@@ -30,7 +30,7 @@ public static Stream<Arguments> data() {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testTypeParameter(Class<?> klass, Class<?> typeParameter, Class<? super T> bound, Class<?> boundTypeParameter,
+    void testTypeParameter(Class<?> klass, Class<?> typeParameter, Class<? super T> bound, Class<?> boundTypeParameter,
                                   Class<? extends Exception> expectedException, String expectedMessage) {
         if (expectedException == null) {
             assertThat(Generics.getTypeParameter(klass)).isEqualTo(typeParameter);
@@ -42,7 +42,7 @@ public void testTypeParameter(Class<?> klass, Class<?> typeParameter, Class<? su
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testBoundTypeParameter(Class<?> klass, Class<?> typeParameter, Class<? super T> bound, Class<?> boundTypeParameter,
+    void testBoundTypeParameter(Class<?> klass, Class<?> typeParameter, Class<? super T> bound, Class<?> boundTypeParameter,
                                        Class<? extends Exception> expectedException, String expectedMessage) {
         if (expectedException == null) {
             assertThat(Generics.getTypeParameter(klass, bound)).isEqualTo(boundTypeParameter);

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -252,10 +252,9 @@ private void stopIfRequired() {
             }
             try {
                 jettyServer.stop();
+            } catch (RuntimeException e) {
+                throw (RuntimeException) e;
             } catch (Exception e) {
-                if (e instanceof RuntimeException) {
-                  throw (RuntimeException) e;
-                }
                 throw new RuntimeException(e);
             } finally {
                 jettyServer = null;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/ResourceHelpers.java
Patch:
@@ -19,10 +19,9 @@ private ResourceHelpers() { /* singleton */ }
     public static String resourceFilePath(final String resourceClassPathLocation) {
         try {
             return new File(Resources.getResource(resourceClassPathLocation).toURI()).getAbsolutePath();
+        } catch (RuntimeException e) {
+            throw (RuntimeException) e;
         } catch (Exception e) {
-            if (e instanceof RuntimeException) {
-                throw (RuntimeException) e;
-            }
             throw new RuntimeException(e);
         }
     }

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardClientRuleTest.java
Patch:
@@ -23,7 +23,7 @@ public class DropwizardClientRuleTest {
     @Test
     public void shouldGetStringBodyFromDropWizard() throws IOException {
         final URL url = new URL(RULE_WITH_INSTANCE.baseUri() + "/test");
-        assertThat("foo").isEqualTo(Resources.toString(url, StandardCharsets.UTF_8));
+        assertThat(Resources.toString(url, StandardCharsets.UTF_8)).isEqualTo("foo");
     }
 
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit5/DropwizardClientExtensionTest.java
Patch:
@@ -20,7 +20,7 @@ class DropwizardClientExtensionTest {
     @Test
     void shouldGetStringBodyFromDropWizard() throws IOException {
         final URL url = new URL(EXTENSION_WITH_INSTANCE.baseUri() + "/test");
-        assertThat("foo").isEqualTo(Resources.toString(url, StandardCharsets.UTF_8));
+        assertThat(Resources.toString(url, StandardCharsets.UTF_8)).isEqualTo("foo");;
     }
 
     @Test

File: dropwizard-core/src/main/java/io/dropwizard/Configuration.java
Patch:
@@ -8,10 +8,11 @@
 import io.dropwizard.server.DefaultServerFactory;
 import io.dropwizard.server.ServerFactory;
 import io.dropwizard.setup.AdminFactory;
-import java.util.Optional;
+
 import javax.annotation.Nullable;
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
+import java.util.Optional;
 
 /**
  * An object representation of the YAML configuration file. Extend this with your own configuration

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -14,12 +14,12 @@
 import org.eclipse.jetty.util.component.ContainerLifeCycle;
 import org.eclipse.jetty.util.thread.QueuedThreadPool;
 import org.eclipse.jetty.util.thread.ThreadPool;
-import javax.validation.constraints.NotEmpty;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.validation.Valid;
 import javax.validation.constraints.Min;
+import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -167,7 +167,8 @@ public Server build(Environment environment) {
         final Handler adminHandler = createAdminServlet(server,
                                                         environment.getAdminContext(),
                                                         environment.metrics(),
-                                                        environment.healthChecks());
+                                                        environment.healthChecks(),
+                                                        environment.admin());
         final RoutingHandler routingHandler = buildRoutingHandler(environment.metrics(),
                                                                   server,
                                                                   applicationHandler,

File: dropwizard-core/src/main/java/io/dropwizard/server/SimpleServerFactory.java
Patch:
@@ -11,11 +11,11 @@
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.thread.ThreadPool;
-import javax.validation.constraints.NotEmpty;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.validation.Valid;
+import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
 import java.util.Map;
 
@@ -118,7 +118,8 @@ public Server build(Environment environment) {
         final Handler adminHandler = createAdminServlet(server,
                                                         environment.getAdminContext(),
                                                         environment.metrics(),
-                                                        environment.healthChecks());
+                                                        environment.healthChecks(),
+                                                        environment.admin());
 
         final Connector conn = connector.build(server,
                                                environment.metrics(),

File: dropwizard-core/src/test/java/io/dropwizard/validation/InjectValidatorFeatureTest.java
Patch:
@@ -6,7 +6,6 @@
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForInteger;
-import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForNumber;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorFactoryImpl;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dropwizard-e2e/src/main/java/com/example/app1/App1Resource.java
Patch:
@@ -9,7 +9,6 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 import java.util.LinkedHashMap;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.OptionalInt;
 

File: dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckConfiguration.java
Patch:
@@ -1,6 +1,7 @@
-package io.dropwizard.health.conf;
+package io.dropwizard.health;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 import javax.validation.constraints.Size;

File: dropwizard-health/src/main/java/io/dropwizard/health/HealthCheckType.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.health.conf;
+package io.dropwizard.health;
 
 public enum HealthCheckType {
     ALIVE,

File: dropwizard-health/src/main/java/io/dropwizard/health/ShutdownNotifier.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.health.shutdown;
+package io.dropwizard.health;
 
 public interface ShutdownNotifier {
     void notifyShutdownStarted() throws Exception;

File: dropwizard-health/src/main/java/io/dropwizard/health/check/http/HttpHealthResponse.java
Patch:
@@ -1,7 +1,7 @@
-package io.dropwizard.health.http;
+package io.dropwizard.health.check.http;
 
-import java.util.Objects;
 import javax.annotation.Nonnull;
+import java.util.Objects;
 
 public class HttpHealthResponse {
     private final int status;
@@ -32,7 +32,7 @@ public boolean equals(final Object other) {
         }
         final HttpHealthResponse that = (HttpHealthResponse) other;
         return status == that.status
-                && Objects.equals(body, that.body);
+            && Objects.equals(body, that.body);
     }
 
     @Override

File: dropwizard-example/src/main/java/com/example/helloworld/db/PersonDAO.java
Patch:
@@ -4,7 +4,6 @@
 import io.dropwizard.hibernate.AbstractDAO;
 
 import org.hibernate.SessionFactory;
-import org.hibernate.query.Query;
 
 import java.util.List;
 import java.util.Optional;
@@ -22,8 +21,7 @@ public Person create(Person person) {
         return persist(person);
     }
 
-    @SuppressWarnings("unchecked")
     public List<Person> findAll() {
-        return list((Query<Person>) namedQuery("com.example.helloworld.core.Person.findAll"));
+        return list(namedTypedQuery("com.example.helloworld.core.Person.findAll"));
     }
 }

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/assets/AssetServlet.java
Patch:
@@ -237,7 +237,9 @@ protected void doGet(HttpServletRequest req,
             resp.setDateHeader(LAST_MODIFIED, cachedAsset.getLastModifiedTime());
             resp.setHeader(ETAG, cachedAsset.getETag());
 
-            final String mediaType = Optional.ofNullable(req.getServletContext().getMimeType(req.getRequestURI()))
+            final String requestUri = req.getRequestURI();
+            final String mediaType = Optional.ofNullable(req.getServletContext().getMimeType(
+                    indexFile != null && requestUri.endsWith("/") ? requestUri + indexFile : requestUri))
                     .orElse(defaultMediaType);
             if (mediaType.startsWith("video") || mediaType.startsWith("audio") || usingRanges) {
                 resp.addHeader(ACCEPT_RANGES, "bytes");

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpsConnectorFactoryTest.java
Patch:
@@ -152,7 +152,7 @@ void testExcludedProtocols() throws Exception {
         sslContextFactory.start();
         try {
             assertThat(sslContextFactory.newSSLEngine().getEnabledProtocols())
-                    .contains("TLSv1.1", "TLSv1.2")
+                    .contains("TLSv1.2")
                     .doesNotContain("SSLv3", "TLSv1");
         } finally {
             sslContextFactory.stop();

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/BaseConfigurationFactory.java
Patch:
@@ -125,7 +125,7 @@ protected T build(JsonNode node, String path) throws IOException, ConfigurationE
         }
 
         try {
-            final T config = mapper.readValue(new TreeTraversingParser(node), klass);
+            final T config = mapper.readValue(new TreeTraversingParser(node, mapper), klass);
             validate(path, config);
             return config;
         } catch (UnrecognizedPropertyException e) {

File: dropwizard-assets/src/main/java/io/dropwizard/assets/AssetsBundle.java
Patch:
@@ -127,8 +127,9 @@ public AssetsBundle(String resourcePath, String uriPath, String indexFile, Strin
 
     @Override
     public void run(Configuration configuration, Environment environment) {
-        LOGGER.info("Registering AssetBundle with name: {} for path {}", assetsName, uriPath + '*');
-        environment.servlets().addServlet(assetsName, createServlet()).addMapping(uriPath + '*');
+        final String pathPattern = uriPath + '*';
+        LOGGER.info("Registering AssetBundle with name: {} for path {}", assetsName, pathPattern);
+        environment.servlets().addServlet(assetsName, createServlet()).addMapping(pathPattern);
     }
 
     public String getResourcePath() {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/SessionFactoryProvider.java
Patch:
@@ -15,14 +15,16 @@
 import javax.servlet.http.HttpSession;
 import java.util.function.Function;
 
+import static org.glassfish.jersey.model.Parameter.Source.UNKNOWN;
+
 @Singleton
 public class SessionFactoryProvider extends AbstractValueParamProvider {
 
     private final InjectionManager im;
 
     @Inject
     public SessionFactoryProvider(final Provider<MultivaluedParameterExtractorProvider> extractorProvider, InjectionManager im) {
-        super(extractorProvider, Parameter.Source.UNKNOWN);
+        super(extractorProvider, UNKNOWN);
         this.im = im;
     }
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -206,8 +206,8 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         appender.setContext(context);
         if (logFormat != null && !logFormat.isEmpty()) {
             appender.setSuffixPattern(logFormat
-                    .replaceAll(LOG_TOKEN_PID, pid)
-                    .replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
+                    .replace(LOG_TOKEN_PID, pid)
+                    .replace(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
         }
         appender.setSyslogHost(host);
         appender.setPort(port);

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2ConnectorFactoryTest.java
Patch:
@@ -8,9 +8,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
 
-public class Http2ConnectorFactoryTest {
+class Http2ConnectorFactoryTest {
 
-    private Http2ConnectorFactory http2ConnectorFactory = new Http2ConnectorFactory();
+    private final Http2ConnectorFactory http2ConnectorFactory = new Http2ConnectorFactory();
 
     @Test
     void testSetDefaultHttp2Cipher() {
@@ -35,7 +35,7 @@ void testCustomCiphersAreSupported() {
     void testThrowExceptionIfDefaultCipherIsNotSet() {
         http2ConnectorFactory.setSupportedCipherSuites(Collections.singletonList("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"));
 
-        assertThatIllegalArgumentException().isThrownBy(() -> http2ConnectorFactory.checkSupportedCipherSuites())
+        assertThatIllegalArgumentException().isThrownBy(http2ConnectorFactory::checkSupportedCipherSuites)
             .withMessage("HTTP/2 server configuration must include cipher: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
     }
 }

File: dropwizard-example/src/test/java/com/example/helloworld/DockerIntegrationTest.java
Patch:
@@ -9,6 +9,8 @@
 import org.eclipse.jetty.http.HttpStatus;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.testcontainers.containers.MySQLContainer;
 import org.testcontainers.junit.jupiter.Container;
@@ -28,6 +30,7 @@
 
 @Testcontainers(disabledWithoutDocker = true)
 @ExtendWith(DropwizardExtensionsSupport.class)
+@DisabledForJreRange(min = JRE.JAVA_16)
 public class DockerIntegrationTest {
     @Container
     private static final MySQLContainer<?> MY_SQL_CONTAINER = new MySQLContainer<>();

File: dropwizard-example/src/test/java/com/example/helloworld/db/PersonDAOIntegrationTest.java
Patch:
@@ -8,6 +8,8 @@
 import org.hibernate.exception.ConstraintViolationException;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.DisabledForJreRange;
+import org.junit.jupiter.api.condition.JRE;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.testcontainers.containers.MySQLContainer;
 import org.testcontainers.junit.jupiter.Container;
@@ -21,6 +23,7 @@
 
 @Testcontainers(disabledWithoutDocker = true)
 @ExtendWith(DropwizardExtensionsSupport.class)
+@DisabledForJreRange(min = JRE.JAVA_16)
 public class PersonDAOIntegrationTest {
     @Container
     private static final MySQLContainer<?> MY_SQL_CONTAINER = new MySQLContainer<>();

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/SelfValidatingBenchmark.java
Patch:
@@ -55,10 +55,12 @@ public boolean isInvalid2(String param1, int param2) {
     public static class SelfValidatingMethodUser {
         @SelfValidation
         public void validateValid1(ViolationCollector collector) {
+            // stub implementation
         }
 
         @SelfValidation
         public void validateValid2(ViolationCollector collector) {
+            // stub implementation
         }
 
         @SelfValidation

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthValueFactoryProvider.java
Patch:
@@ -38,7 +38,7 @@ public class AuthValueFactoryProvider<T extends Principal> extends AbstractValue
     @Inject
     public AuthValueFactoryProvider(MultivaluedParameterExtractorProvider mpep,
                                     PrincipalClassProvider<T> principalClassProvider) {
-        super(() -> mpep, Parameter.Source.UNKNOWN);
+        super(() -> mpep, org.glassfish.jersey.model.Parameter.Source.UNKNOWN);
         this.principalClass = principalClassProvider.clazz;
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PolymorphicAuthValueFactoryProvider.java
Patch:
@@ -42,7 +42,7 @@ public PolymorphicAuthValueFactoryProvider(
         MultivaluedParameterExtractorProvider mpep,
         PrincipalClassSetProvider<T> principalClassSetProvider
     ) {
-        super(() -> mpep, Parameter.Source.UNKNOWN);
+        super(() -> mpep, org.glassfish.jersey.model.Parameter.Source.UNKNOWN);
         this.principalClassSet = principalClassSetProvider.clazzSet;
     }
 

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CachingAuthenticatorTest.java
Patch:
@@ -95,9 +95,9 @@ void calculatesCacheStats() throws Exception {
     @Test
     void shouldNotCacheAbsentPrincipals() throws Exception {
         when(underlying.authenticate(anyString())).thenReturn(Optional.empty());
-        assertThat(cached.authenticate("credentials")).isEqualTo(Optional.empty());
+        assertThat(cached.authenticate("credentials")).isEmpty();
         verify(underlying).authenticate("credentials");
-        assertThat(cached.size()).isEqualTo(0);
+        assertThat(cached.size()).isZero();
     }
 
     @Test
@@ -125,7 +125,7 @@ void cachesTheNegativeResultIfSpecified() throws Exception {
         when(underlying.authenticate(anyString())).thenReturn(Optional.empty());
         Caffeine<Object, Object> caffeine = Caffeine.newBuilder().maximumSize(1L).executor(Runnable::run);
         cached = new CachingAuthenticator<>(new MetricRegistry(), underlying, caffeine, true);
-        assertThat(cached.authenticate("credentials")).isEqualTo(Optional.empty());
+        assertThat(cached.authenticate("credentials")).isEmpty();
         verify(underlying).authenticate("credentials");
         assertThat(cached.size()).isEqualTo(1);
     }

File: dropwizard-example/src/test/java/com/example/helloworld/IntegrationTest.java
Patch:
@@ -61,7 +61,6 @@ public void testHelloWorld() throws Exception {
     public void testPostPerson() throws Exception {
         final Person person = new Person("Dr. IntegrationTest", "Chief Wizard", 1525);
         final Person newPerson = postPerson(person);
-        assertThat(newPerson.getId()).isNotNull();
         assertThat(newPerson.getFullName()).isEqualTo(person.getFullName());
         assertThat(newPerson.getJobTitle()).isEqualTo(person.getJobTitle());
     }

File: dropwizard-util/src/test/java/io/dropwizard/util/DataSizeTest.java
Patch:
@@ -710,6 +710,7 @@ void testSerialization() throws IOException, ClassNotFoundException {
 
         try (final ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
              final ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) {
+            @SuppressWarnings("BanSerializableRead")
             final Object o = objectInputStream.readObject();
             assertThat(o)
                     .isInstanceOf(DataSize.class)

File: dropwizard-util/src/test/java/io/dropwizard/util/DurationTest.java
Patch:
@@ -881,6 +881,7 @@ void testSerialization() throws IOException, ClassNotFoundException {
 
         try (final ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
              final ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) {
+            @SuppressWarnings("BanSerializableRead")
             final Object o = objectInputStream.readObject();
             assertThat(o)
                     .isInstanceOf(Duration.class)

File: dropwizard-util/src/test/java/io/dropwizard/util/SizeTest.java
Patch:
@@ -602,6 +602,7 @@ void testSerialization() throws IOException, ClassNotFoundException {
 
         try (final ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);
              final ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) {
+            @SuppressWarnings("BanSerializableRead")
             final Object o = objectInputStream.readObject();
             assertThat(o)
                     .isInstanceOf(Size.class)

File: dropwizard-logging/src/test/java/io/dropwizard/logging/TcpSocketAppenderFactoryTest.java
Patch:
@@ -29,9 +29,9 @@
 
 class TcpSocketAppenderFactoryTest {
 
-    private TcpServer tcpServer = new TcpServer(createServerSocket());
-    private ObjectMapper objectMapper = Jackson.newObjectMapper();
-    private YamlConfigurationFactory<DefaultLoggingFactory> yamlConfigurationFactory = new YamlConfigurationFactory<>(
+    private final TcpServer tcpServer = new TcpServer(createServerSocket());
+    private final ObjectMapper objectMapper = Jackson.newObjectMapper();
+    private final YamlConfigurationFactory<DefaultLoggingFactory> yamlConfigurationFactory = new YamlConfigurationFactory<>(
         DefaultLoggingFactory.class, BaseValidator.newValidator(), objectMapper, "dw-tcp");
 
     @BeforeEach

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -149,7 +149,7 @@ public HttpClientBuilder using(DnsResolver resolver) {
     }
 
     /**
-     * Use the give (@link HostnameVerifier} instance.
+     * Use the given {@link HostnameVerifier} instance.
      *
      * @param verifier a {@link HostnameVerifier} instance
      * @return {@code this}

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -699,6 +699,7 @@ protected Handler buildGzipHandler(Handler handler) {
         return gzip.isEnabled() ? gzip.build(handler) : handler;
     }
 
+    @SuppressWarnings("Slf4jFormatShouldBeConst")
     protected void printBanner(String name) {
         String msg = "Starting " + name;
         final URL resource = Thread.currentThread().getContextClassLoader().getResource("banner.txt");

File: dropwizard-core/src/main/java/io/dropwizard/setup/AdminEnvironment.java
Patch:
@@ -71,13 +71,14 @@ private void logTasks() {
                                                taskClassName));
         }
 
-        LOGGER.info("tasks = {}", stringBuilder.toString());
+        LOGGER.info("tasks = {}", stringBuilder);
     }
 
     private static <T> T firstNonNull(T first, T second) {
         return first == null ? second : first;
     }
 
+    @SuppressWarnings("Slf4jFormatShouldBeConst")
     private void logHealthChecks() {
         if (healthChecks.getNames().size() <= 1) {
             LOGGER.warn(String.format(

File: dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/jersey/LoggingJdbiExceptionMapper.java
Patch:
@@ -28,6 +28,7 @@ public LoggingJdbiExceptionMapper() {
     }
 
     @Override
+    @SuppressWarnings("Slf4jFormatShouldBeConst")
     protected void logException(long id, JdbiException exception) {
         final Throwable cause = exception.getCause();
         if (cause instanceof SQLException) {

File: dropwizard-jdbi3/src/main/java/io/dropwizard/jdbi3/jersey/LoggingSQLExceptionMapper.java
Patch:
@@ -27,6 +27,7 @@ public LoggingSQLExceptionMapper() {
     }
 
     @Override
+    @SuppressWarnings("Slf4jFormatShouldBeConst")
     protected void logException(long id, SQLException exception) {
         final String message = formatLogMessage(id, exception);
         for (Throwable throwable : exception) {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -268,6 +268,7 @@ private static class ComponentLoggingListener implements ApplicationEventListene
         }
 
         @Override
+        @SuppressWarnings("Slf4jFormatShouldBeConst")
         public void onEvent(ApplicationEvent event) {
             if (event.getType() == ApplicationEvent.Type.INITIALIZATION_APP_FINISHED) {
                 resources = event.getResourceModel().getResources();

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/ExecutorServiceManager.java
Patch:
@@ -36,7 +36,7 @@ public void stop() throws InterruptedException, Exception {
         executor.shutdown();
         final boolean success = executor.awaitTermination(shutdownPeriod.getQuantity(), shutdownPeriod.getUnit());
         if (!success && LOG.isDebugEnabled()) {
-            LOG.debug("Timeout has elapsed before termination completed for executor " + executor.toString());
+            LOG.debug("Timeout has elapsed before termination completed for executor {}", executor);
         }
     }
 

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpsConnectorFactory.java
Patch:
@@ -182,7 +182,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code excludedProtocols}</td>
- *         <td>["SSLv3", "TLSv1", "TLSv1.1"]</td>
+ *         <td>["SSL.*", "TLSv1", "TLSv1\.1"]</td>
  *         <td>
  *             A list of protocols (e.g., {@code SSLv3}, {@code TLSv1}) which are excluded. These
  *             protocols will be refused.
@@ -287,7 +287,7 @@ public class HttpsConnectorFactory extends HttpConnectorFactory {
     private List<String> supportedProtocols;
 
     @Nullable
-    private List<String> excludedProtocols = Arrays.asList("SSLv2Hello", "SSLv3", "TLSv1", "TLSv1.1");
+    private List<String> excludedProtocols = Arrays.asList("SSL.*", "TLSv1", "TLSv1\\.1");
 
     @Nullable
     private List<String> supportedCipherSuites;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NonblockingServletHolderTest.java
Patch:
@@ -21,6 +21,7 @@
 
 public class NonblockingServletHolderTest {
     private final Servlet servlet = mock(Servlet.class);
+    @SuppressWarnings("deprecation")
     private final NonblockingServletHolder holder = new NonblockingServletHolder(servlet);
     private final Request baseRequest = mock(Request.class);
     private final ServletRequest request = mock(ServletRequest.class);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalDoubleParamConverterProvider.java
Patch:
@@ -49,7 +49,7 @@ public OptionalDouble fromString(final String value) {
             try {
                 final double d = Double.parseDouble(value);
                 return OptionalDouble.of(d);
-            } catch (NumberFormatException e) {
+            } catch (NullPointerException | NumberFormatException e) {
                 if (defaultValue != null) {
                     // If an invalid default value is specified, we want to fail fast.
                     // This is the same behavior as DropWizard 1.3.x and matches Jersey's handling of @DefaultValue for Double.
@@ -58,7 +58,7 @@ public OptionalDouble fromString(final String value) {
                     }
                     // In order to fall back to use a default value for an empty query param, we must return null here.
                     // This preserves backwards compatibility with DropWizard 1.3.x handling of empty query params.
-                    if (value.isEmpty()) {
+                    if (value == null || value.isEmpty()) {
                         return null;
                     }
                 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalIntParamConverterProvider.java
Patch:
@@ -49,7 +49,7 @@ public OptionalInt fromString(final String value) {
             try {
                 final int i = Integer.parseInt(value);
                 return OptionalInt.of(i);
-            } catch (NumberFormatException e) {
+            } catch (NullPointerException | NumberFormatException e) {
                 if (defaultValue != null) {
                     // If an invalid default value is specified, we want to fail fast.
                     // This is the same behavior as DropWizard 1.3.x and matches Jersey's handling of @DefaultValue for Integer.
@@ -58,7 +58,7 @@ public OptionalInt fromString(final String value) {
                     }
                     // In order to fall back to use a default value for an empty query param, we must return null here.
                     // This preserves backwards compatibility with DropWizard 1.3.x handling of empty query params.
-                    if (value.isEmpty()) {
+                    if (value == null || value.isEmpty()) {
                         return null;
                     }
                 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalLongParamConverterProvider.java
Patch:
@@ -49,7 +49,7 @@ public OptionalLong fromString(final String value) {
             try {
                 final long l = Long.parseLong(value);
                 return OptionalLong.of(l);
-            } catch (NumberFormatException e) {
+            } catch (NullPointerException | NumberFormatException e) {
                 if (defaultValue != null) {
                     // If an invalid default value is specified, we want to fail fast.
                     // This is the same behavior as DropWizard 1.3.x and matches Jersey's handling of @DefaultValue for Long.
@@ -58,7 +58,7 @@ public OptionalLong fromString(final String value) {
                     }
                     // In order to fall back to use a default value for an empty query param, we must return null here.
                     // This preserves backwards compatibility with DropWizard 1.3.x handling of empty query params.
-                    if (value.isEmpty()) {
+                    if (value == null || value.isEmpty()) {
                         return null;
                     }
                 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DropwizardTestResourceConfig.java
Patch:
@@ -29,7 +29,7 @@ class DropwizardTestResourceConfig extends DropwizardResourceConfig {
     static final String CONFIGURATION_ID = "io.dropwizard.testing.junit.resourceTestJerseyConfigurationId";
 
     DropwizardTestResourceConfig(ResourceTestJerseyConfiguration configuration) {
-        super();
+        super(configuration.metricRegistry);
 
         if (configuration.registerDefaultExceptionMappers) {
             register(new ExceptionMapperBinder(false));

File: dropwizard-validation/src/test/java/io/dropwizard/validation/OneOfValidatorTest.java
Patch:
@@ -38,7 +38,8 @@ public void allowsExactElements() throws Exception {
 
     @Test
     public void doesNotAllowOtherElements() throws Exception {
-        assumeTrue("en".equals(Locale.getDefault().getLanguage()));
+        assumeTrue("en".equals(Locale.getDefault().getLanguage()),
+                "This test executes when the defined language is English ('en'). If not, it is skipped.");
 
         final Example example = new Example();
         example.basic = "four";

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -52,9 +52,10 @@ public ExecutorServiceBuilder(LifecycleEnvironment environment, String nameForma
 
     @SuppressWarnings("ResultOfMethodCallIgnored")
     private static ThreadFactory buildThreadFactory(String nameFormat) {
+        ThreadFactory defaultThreadFactory = Executors.defaultThreadFactory();
         String.format(Locale.ROOT, nameFormat, 0); // Fail fast on invalid name format
         return r -> {
-            final Thread thread = Executors.defaultThreadFactory().newThread(r);
+            final Thread thread = defaultThreadFactory.newThread(r);
             thread.setName(String.format(Locale.ROOT, nameFormat, COUNT.incrementAndGet()));
             return thread;
         };

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ScheduledExecutorServiceBuilder.java
Patch:
@@ -39,8 +39,9 @@ public ScheduledExecutorServiceBuilder(LifecycleEnvironment environment, String
     }
 
     private static ThreadFactory buildThreadFactory(String nameFormat, boolean daemon) {
+        ThreadFactory defaultThreadFactory = Executors.defaultThreadFactory();
         return r -> {
-            final Thread thread = Executors.defaultThreadFactory().newThread(r);
+            final Thread thread = defaultThreadFactory.newThread(r);
             if (nameFormat != null) {
                 thread.setName(String.format(Locale.ROOT, nameFormat, COUNT.incrementAndGet()));
             }

File: dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java
Patch:
@@ -324,7 +324,7 @@ public void violationMessagesAreEscapedByDefault() {
     @Test
     public void violationMessagesAreInterpolatedIfEscapingDisabled() {
         assertThat(ConstraintViolations.format(validator.validate(new EscapingDisabledExample()))).containsExactly(
-                " A2",
+                " $\\A{1+1}",
                 " TEST",
                 " value",
                 "${'property'} value",

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DropwizardTestResourceConfig.java
Patch:
@@ -5,7 +5,6 @@
 import io.dropwizard.jersey.validation.HibernateValidationBinder;
 import io.dropwizard.setup.ExceptionMapperBinder;
 import org.glassfish.jersey.server.ServerProperties;
-import org.glassfish.jersey.test.TestProperties;
 
 import javax.servlet.ServletConfig;
 import javax.ws.rs.core.Context;
@@ -32,7 +31,6 @@ class DropwizardTestResourceConfig extends DropwizardResourceConfig {
     DropwizardTestResourceConfig(ResourceTestJerseyConfiguration configuration) {
         super();
 
-        property(TestProperties.CONTAINER_PORT, "0");
         if (configuration.registerDefaultExceptionMappers) {
             register(new ExceptionMapperBinder(false));
         }

File: dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java
Patch:
@@ -31,15 +31,17 @@ public class SelfValidatingValidator implements ConstraintValidator<SelfValidati
     private final AnnotationConfiguration annotationConfiguration = new AnnotationConfiguration.StdConfiguration(AnnotationInclusion.INCLUDE_AND_INHERIT_IF_INHERITED);
     private final TypeResolver typeResolver = new TypeResolver();
     private final MemberResolver memberResolver = new MemberResolver(typeResolver);
+    private boolean escapeExpressions = true;
 
     @Override
     public void initialize(SelfValidating constraintAnnotation) {
+        escapeExpressions = constraintAnnotation.escapeExpressions();
     }
 
     @SuppressWarnings({"unchecked", "rawtypes"})
     @Override
     public boolean isValid(Object value, ConstraintValidatorContext context) {
-        final ViolationCollector collector = new ViolationCollector(context);
+        final ViolationCollector collector = new ViolationCollector(context, escapeExpressions);
         context.disableDefaultConstraintViolation();
         for (ValidationCaller caller : methodMap.computeIfAbsent(value.getClass(), this::findMethods)) {
             caller.setValidationObject(value);

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/FreemarkerViewRendererTest.java
Patch:
@@ -1,6 +1,8 @@
 package io.dropwizard.views.freemarker;
 
 import com.codahale.metrics.MetricRegistry;
+
+import freemarker.template.Configuration;
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderExceptionMapper;
@@ -82,7 +84,7 @@ public void tearDown() throws Exception {
     @Override
     protected Application configure() {
         ResourceConfig config = new ResourceConfig();
-        final ViewRenderer renderer = new FreemarkerViewRenderer();
+        final ViewRenderer renderer = new FreemarkerViewRenderer(Configuration.VERSION_2_3_30);
         config.register(new ViewMessageBodyWriter(new MetricRegistry(), Collections.singletonList(renderer)));
         config.register(new ExampleResource());
         config.register(new ViewRenderExceptionMapper());

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalDoubleParamConverterProvider.java
Patch:
@@ -1,5 +1,7 @@
 package io.dropwizard.jersey.optional;
 
+import io.dropwizard.jersey.DefaultValueUtils;
+
 import javax.annotation.Nullable;
 import javax.inject.Singleton;
 import javax.ws.rs.ext.ParamConverter;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalIntParamConverterProvider.java
Patch:
@@ -1,5 +1,7 @@
 package io.dropwizard.jersey.optional;
 
+import io.dropwizard.jersey.DefaultValueUtils;
+
 import javax.annotation.Nullable;
 import javax.inject.Singleton;
 import javax.ws.rs.ext.ParamConverter;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalLongParamConverterProvider.java
Patch:
@@ -1,5 +1,7 @@
 package io.dropwizard.jersey.optional;
 
+import io.dropwizard.jersey.DefaultValueUtils;
+
 import javax.annotation.Nullable;
 import javax.inject.Singleton;
 import javax.ws.rs.ext.ParamConverter;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/params/AbstractParamConverterProvider.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey.params;
 
+import io.dropwizard.jersey.DefaultValueUtils;
 import io.dropwizard.jersey.validation.JerseyParameterNameProvider;
 
 import javax.annotation.Nullable;
@@ -31,7 +32,8 @@ public <T> ParamConverter<T> getConverter(Class<T> rawType, Type genericType, An
                 // leaving Jersey to handle these parameters as it normally would.
                 return null;
             }
-            return new AbstractParamConverter<>(constructor, parameterName);
+            final String defaultValue = DefaultValueUtils.getDefaultValue(annotations);
+            return new AbstractParamConverter<>(constructor, parameterName, defaultValue);
         }
         return null;
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -1030,7 +1030,7 @@ public void optionalIntWithDefault_succeeds_with_empty_string() {
                 .get();
 
         assertThat(response.getStatus()).isEqualTo(200);
-        assertThat(response.readEntity(Integer.class)).isEqualTo(42);
+        assertThat(response.readEntity(Integer.class)).isEqualTo(23);
     }
 
     @Test

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -62,6 +62,7 @@
  * </p>
  */
 public class HttpClientBuilder {
+    @SuppressWarnings("UnnecessaryLambda")
     private static final HttpRequestRetryHandler NO_RETRIES = (exception, executionCount, context) -> false;
 
     private final MetricRegistry metricRegistry;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java
Patch:
@@ -17,18 +17,18 @@
 import javax.validation.Path;
 import javax.validation.metadata.ConstraintDescriptor;
 import java.lang.reflect.Field;
+import java.time.Duration;
 import java.util.Collection;
 import java.util.List;
 import java.util.Optional;
 import java.util.Set;
-import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
 public class ConstraintMessage {
 
     private static final Cache<Pair<Path, ? extends ConstraintDescriptor<?>>, String> PREFIX_CACHE =
             Caffeine.newBuilder()
-            .expireAfterWrite(1, TimeUnit.HOURS)
+            .expireAfterWrite(Duration.ofHours(1))
             .build();
 
     private ConstraintMessage() {

File: dropwizard-logging/src/main/java/io/dropwizard/logging/ResilientOutputStreamBase.java
Patch:
@@ -49,6 +49,7 @@ private boolean isPresumedInError() {
         return (recoveryCoordinator != null && !presumedClean);
     }
 
+    @Override
     public void write(byte[] b, int off, int len) {
         if (isPresumedInError()) {
             if (!recoveryCoordinator.isTooSoon()) {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
Patch:
@@ -190,7 +190,7 @@ void testCurrentLogFileNameIsEmptyAndAppenderUsesArchivedNameInstead(@TempDir Pa
 
         final String file = rollingAppender.getFile();
         assertThat(file).contains("test-archived-name-")
-                        .endsWith(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) + ".log");
+                        .endsWith(LocalDateTime.now(appenderFactory.getTimeZone().toZoneId()).format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) + ".log");
     }
 
     @Test

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/RegexStringMatchingStrategy.java
Patch:
@@ -3,16 +3,16 @@
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
 
+import java.time.Duration;
 import java.util.Set;
-import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
 
 class RegexStringMatchingStrategy implements StringMatchingStrategy {
     private final LoadingCache<String, Pattern> patternCache;
 
     RegexStringMatchingStrategy() {
         patternCache = Caffeine.newBuilder()
-            .expireAfterWrite(1, TimeUnit.HOURS)
+            .expireAfterWrite(Duration.ofHours(1))
             .build(Pattern::compile);
     }
 

File: dropwizard-core/src/main/java/io/dropwizard/cli/EnvironmentCommand.java
Patch:
@@ -34,7 +34,8 @@ protected void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration)
                                                         bootstrap.getValidatorFactory(),
                                                         bootstrap.getMetricRegistry(),
                                                         bootstrap.getClassLoader(),
-                                                        bootstrap.getHealthCheckRegistry());
+                                                        bootstrap.getHealthCheckRegistry(),
+                                                        configuration);
         configuration.getMetricsFactory().configure(environment.lifecycle(),
                                                     bootstrap.getMetricRegistry());
         configuration.getServerFactory().configure(environment);

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -69,13 +69,13 @@ public void canReadDefaultExcludedAndIncludedAttributes() {
 
     @Test
     public void reportOnStopFalseByDefault() {
-        assertThat(config.reportOnStop).isFalse();
+        assertThat(config.isReportOnStop()).isFalse();
     }
 
     @Test
     public void reportOnStopCanBeTrue() throws Exception {
         config = factory.build(new File(Resources.getResource("yaml/metrics-report-on-stop.yml").toURI()));
-        assertThat(config.reportOnStop).isTrue();
+        assertThat(config.isReportOnStop()).isTrue();
     }
 
 }

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/ConsoleReporterFactory.java
Patch:
@@ -88,6 +88,7 @@ public ScheduledReporter build(MetricRegistry registry) {
                               .formattedFor(getLocale())
                               .formattedFor(getTimeZone())
                               .outputTo(getOutput().get())
+                              .disabledMetricAttributes(getDisabledAttributes())
                               .build();
     }
 }

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/setup/ServletEnvironmentTest.java
Patch:
@@ -76,7 +76,7 @@ public void addsServletClasses() throws Exception {
 
     @Test
     public void addsFilterInstances() throws Exception {
-        final Filter filter = mock(Filter.class);
+        final Filter filter = new WelcomeFilter();
 
         final FilterRegistration.Dynamic builder = environment.addFilter("filter", filter);
         assertThat(builder)
@@ -88,8 +88,7 @@ public void addsFilterInstances() throws Exception {
         assertThat(holder.getValue().getName())
                 .isEqualTo("filter");
 
-        assertThat(holder.getValue().getFilter())
-                .isEqualTo(filter);
+        assertThat(holder.getValue()).hasFieldOrPropertyWithValue("_instance", filter);
     }
 
     @Test

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -238,7 +238,7 @@ public abstract class AbstractServerFactory implements ServerFactory {
     @NotNull
     private ServerPushFilterFactory serverPush = new ServerPushFilterFactory();
 
-    @Min(2)
+    @Min(4)
     private int maxThreads = 1024;
 
     @Min(1)

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -78,7 +78,7 @@ public class DefaultServerFactory extends AbstractServerFactory {
     @NotNull
     private List<ConnectorFactory> adminConnectors = Collections.singletonList(HttpConnectorFactory.admin());
 
-    @Min(2)
+    @Min(4)
     private int adminMaxThreads = 64;
 
     @Min(1)

File: dropwizard-logging/src/main/java/io/dropwizard/logging/DefaultLoggingFactory.java
Patch:
@@ -291,9 +291,9 @@ private Logger configureLoggers(String name) {
         for (Map.Entry<String, JsonNode> entry : loggers.entrySet()) {
             final Logger logger = loggerContext.getLogger(entry.getKey());
             final JsonNode jsonNode = entry.getValue();
-            if (jsonNode.isTextual()) {
+            if (jsonNode.isTextual() || jsonNode.isBoolean()) {
                 // Just a level as a string
-                logger.setLevel(Level.valueOf(jsonNode.asText()));
+                logger.setLevel(toLevel(jsonNode.asText()));
             } else if (jsonNode.isObject()) {
                 // A level and an appender
                 final LoggerConfiguration configuration;
@@ -317,7 +317,6 @@ private Logger configureLoggers(String name) {
     }
 
     static Level toLevel(@Nullable String text) {
-        // required because YAML maps "off" to a boolean false
         if ("false".equalsIgnoreCase(text)) {
             // required because YAML maps "off" to a boolean false
             return Level.OFF;

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -333,6 +333,7 @@ protected ConfiguredCloseableHttpClient createClient(
         final Integer timeout = (int) configuration.getTimeout().toMilliseconds();
         final Integer connectionTimeout = (int) configuration.getConnectionTimeout().toMilliseconds();
         final Integer connectionRequestTimeout = (int) configuration.getConnectionRequestTimeout().toMilliseconds();
+        final boolean normalizeUri = configuration.isNormalizeUriEnabled();
         final long keepAlive = configuration.getKeepAlive().toMilliseconds();
         final ConnectionReuseStrategy reuseStrategy = keepAlive == 0
                 ? new NoConnectionReuseStrategy()
@@ -347,6 +348,7 @@ protected ConfiguredCloseableHttpClient createClient(
                 .setSocketTimeout(timeout)
                 .setConnectTimeout(connectionTimeout)
                 .setConnectionRequestTimeout(connectionRequestTimeout)
+                .setNormalizeUri(normalizeUri)
                 .build();
         final SocketConfig socketConfig = SocketConfig.custom()
                 .setTcpNoDelay(true)

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -19,8 +19,8 @@
 import static com.codahale.metrics.MetricRegistry.name;
 
 /**
- * An {@link Authenticator} decorator which uses a Guava cache to temporarily cache credentials and
- * their corresponding principals.
+ * An {@link Authenticator} decorator which uses a Caffeine cache to temporarily
+ * cache credentials and their corresponding principals.
  *
  * @param <C> the type of credentials the authenticator can authenticate
  * @param <P> the type of principals the authenticator returns

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -13,6 +13,7 @@
 import io.dropwizard.util.Strings;
 import javassist.ClassPool;
 import javassist.CtClass;
+import javassist.LoaderClassPath;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.internal.inject.Binder;
 import org.glassfish.jersey.internal.inject.Providers;
@@ -148,6 +149,7 @@ public ResourceConfig register(final Object component) {
                 // Need to create a new subclass dynamically here because Jersey
                 // doesn't add new bindings for the same class
                 ClassPool pool = ClassPool.getDefault();
+                pool.insertClassPath(new LoaderClassPath(this.getClass().getClassLoader()));
                 CtClass cc = pool.makeClass(SpecificBinder.class.getName() + UUID.randomUUID());
                 cc.setSuperclass(pool.get(SpecificBinder.class.getName()));
                 Object binderProxy = cc.toClass().getConstructor(Object.class, Class.class).newInstance(object, clazz);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/socket/DropwizardSocketAppender.java
Patch:
@@ -1,14 +1,14 @@
 package io.dropwizard.logging.socket;
 
 import ch.qos.logback.core.OutputStreamAppender;
-import ch.qos.logback.core.recovery.ResilentSocketOutputStream;
+import ch.qos.logback.core.recovery.ResilientSocketOutputStream;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 
 import javax.net.SocketFactory;
 import java.io.OutputStream;
 
 /**
- * Sends log events to a TCP server, a connection to which is represented as {@link ResilentSocketOutputStream}.
+ * Sends log events to a TCP server, a connection to which is represented as {@link ResilientSocketOutputStream}.
  */
 public class DropwizardSocketAppender<E extends DeferredProcessingAware> extends OutputStreamAppender<E> {
 
@@ -34,7 +34,7 @@ public void start() {
     }
 
     protected OutputStream socketOutputStream() {
-        final ResilentSocketOutputStream outputStream = new ResilentSocketOutputStream(host, port,
+        final ResilientSocketOutputStream outputStream = new ResilientSocketOutputStream(host, port,
             connectionTimeoutMs, sendBufferSize, socketFactory);
         outputStream.setContext(context);
         return outputStream;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/socket/DropwizardSocketAppender.java
Patch:
@@ -1,14 +1,14 @@
 package io.dropwizard.logging.socket;
 
 import ch.qos.logback.core.OutputStreamAppender;
-import ch.qos.logback.core.recovery.ResilentSocketOutputStream;
+import ch.qos.logback.core.recovery.ResilientSocketOutputStream;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 
 import javax.net.SocketFactory;
 import java.io.OutputStream;
 
 /**
- * Sends log events to a TCP server, a connection to which is represented as {@link ResilentSocketOutputStream}.
+ * Sends log events to a TCP server, a connection to which is represented as {@link ResilientSocketOutputStream}.
  */
 public class DropwizardSocketAppender<E extends DeferredProcessingAware> extends OutputStreamAppender<E> {
 
@@ -34,7 +34,7 @@ public void start() {
     }
 
     protected OutputStream socketOutputStream() {
-        final ResilentSocketOutputStream outputStream = new ResilentSocketOutputStream(host, port,
+        final ResilientSocketOutputStream outputStream = new ResilientSocketOutputStream(host, port,
             connectionTimeoutMs, sendBufferSize, socketFactory);
         outputStream.setContext(context);
         return outputStream;

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T extends Configuration> {
+public interface ConfiguredBundle<T> {
     /**
      * Initializes the environment.
      *

File: dropwizard-db/src/main/java/io/dropwizard/db/DatabaseConfiguration.java
Patch:
@@ -1,7 +1,5 @@
 package io.dropwizard.db;
 
-import io.dropwizard.Configuration;
-
-public interface DatabaseConfiguration<T extends Configuration> {
+public interface DatabaseConfiguration<T> {
     PooledDataSourceFactory getDataSourceFactory(T configuration);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -19,7 +19,7 @@
 
 import static java.util.Objects.requireNonNull;
 
-public abstract class HibernateBundle<T extends Configuration> implements ConfiguredBundle<T>, DatabaseConfiguration<T> {
+public abstract class HibernateBundle<T> implements ConfiguredBundle<T>, DatabaseConfiguration<T> {
     public static final String DEFAULT_NAME = "hibernate";
 
     @Nullable

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/ScanningHibernateBundle.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.hibernate;
 
-import io.dropwizard.Configuration;
 import org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener;
 import org.glassfish.jersey.server.internal.scanning.PackageNamesScanner;
 
@@ -13,7 +12,7 @@
 /**
  * Extension of HibernateBundle that scans given package for entities instead of giving them by hand.
  */
-public abstract class ScanningHibernateBundle<T extends Configuration> extends HibernateBundle<T> {
+public abstract class ScanningHibernateBundle<T> extends HibernateBundle<T> {
     /**
      * @param pckg string with package containing Hibernate entities (classes annotated with Hibernate {@code @Entity}
      *             annotation) e. g. {@code com.codahale.fake.db.directory.entities}

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.views;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.ConfiguredBundle;
 import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Sets;
@@ -37,7 +36,7 @@
  * }
  * </code></pre>
  *
- *<p>The {@code "profile.ftl[hx]"} or {@code "profile.mustache"} is the path of the template relative to the class name. If
+ * <p>The {@code "profile.ftl[hx]"} or {@code "profile.mustache"} is the path of the template relative to the class name. If
  * this class was {@code com.example.application.PersonView}, Freemarker or Mustache would then look for the file
  * {@code src/main/resources/com/example/application/profile.ftl} or {@code
  * src/main/resources/com/example/application/profile.mustache} respectively. If the template path
@@ -85,7 +84,7 @@
  *
  * See Also: <a href="http://mustache.github.io/mustache.5.html">Mustache Manual</a>
  */
-public class ViewBundle<T extends Configuration> implements ConfiguredBundle<T>, ViewConfigurable<T> {
+public class ViewBundle<T> implements ConfiguredBundle<T>, ViewConfigurable<T> {
     private final Iterable<ViewRenderer> viewRenderers;
 
     public ViewBundle() {

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewConfigurable.java
Patch:
@@ -1,9 +1,7 @@
 package io.dropwizard.views;
 
-import io.dropwizard.Configuration;
-
 import java.util.Map;
 
-public interface ViewConfigurable<T extends Configuration> {
+public interface ViewConfigurable<T> {
     Map<String, Map<String, String>> getViewConfiguration(T configuration);
 }

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T extends Configuration> {
+public interface ConfiguredBundle<T> {
     /**
      * Initializes the environment.
      *

File: dropwizard-db/src/main/java/io/dropwizard/db/DatabaseConfiguration.java
Patch:
@@ -1,7 +1,5 @@
 package io.dropwizard.db;
 
-import io.dropwizard.Configuration;
-
-public interface DatabaseConfiguration<T extends Configuration> {
+public interface DatabaseConfiguration<T> {
     PooledDataSourceFactory getDataSourceFactory(T configuration);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -19,7 +19,7 @@
 
 import static java.util.Objects.requireNonNull;
 
-public abstract class HibernateBundle<T extends Configuration> implements ConfiguredBundle<T>, DatabaseConfiguration<T> {
+public abstract class HibernateBundle<T> implements ConfiguredBundle<T>, DatabaseConfiguration<T> {
     public static final String DEFAULT_NAME = "hibernate";
 
     @Nullable

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/ScanningHibernateBundle.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.hibernate;
 
-import io.dropwizard.Configuration;
 import org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener;
 import org.glassfish.jersey.server.internal.scanning.PackageNamesScanner;
 
@@ -13,7 +12,7 @@
 /**
  * Extension of HibernateBundle that scans given package for entities instead of giving them by hand.
  */
-public abstract class ScanningHibernateBundle<T extends Configuration> extends HibernateBundle<T> {
+public abstract class ScanningHibernateBundle<T> extends HibernateBundle<T> {
     /**
      * @param pckg string with package containing Hibernate entities (classes annotated with Hibernate {@code @Entity}
      *             annotation) e. g. {@code com.codahale.fake.db.directory.entities}

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.views;
 
-import io.dropwizard.Configuration;
 import io.dropwizard.ConfiguredBundle;
 import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Sets;
@@ -37,7 +36,7 @@
  * }
  * </code></pre>
  *
- *<p>The {@code "profile.ftl[hx]"} or {@code "profile.mustache"} is the path of the template relative to the class name. If
+ * <p>The {@code "profile.ftl[hx]"} or {@code "profile.mustache"} is the path of the template relative to the class name. If
  * this class was {@code com.example.application.PersonView}, Freemarker or Mustache would then look for the file
  * {@code src/main/resources/com/example/application/profile.ftl} or {@code
  * src/main/resources/com/example/application/profile.mustache} respectively. If the template path
@@ -85,7 +84,7 @@
  *
  * See Also: <a href="http://mustache.github.io/mustache.5.html">Mustache Manual</a>
  */
-public class ViewBundle<T extends Configuration> implements ConfiguredBundle<T>, ViewConfigurable<T> {
+public class ViewBundle<T> implements ConfiguredBundle<T>, ViewConfigurable<T> {
     private final Iterable<ViewRenderer> viewRenderers;
 
     public ViewBundle() {

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewConfigurable.java
Patch:
@@ -1,9 +1,7 @@
 package io.dropwizard.views;
 
-import io.dropwizard.Configuration;
-
 import java.util.Map;
 
-public interface ViewConfigurable<T extends Configuration> {
+public interface ViewConfigurable<T> {
     Map<String, Map<String, String>> getViewConfiguration(T configuration);
 }

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java
Patch:
@@ -184,7 +184,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code useForwardedHeaders}</td>
- *         <td>true</td>
+ *         <td>false</td>
  *         <td>
  *             Whether or not to look at {@code X-Forwarded-*} headers added by proxies. See
  *             {@link ForwardedRequestCustomizer} for details.
@@ -294,7 +294,7 @@ public static ConnectorFactory admin() {
 
     private boolean useServerHeader = false;
     private boolean useDateHeader = true;
-    private boolean useForwardedHeaders = true;
+    private boolean useForwardedHeaders = false;
     private boolean useProxyProtocol = false;
     private HttpCompliance httpCompliance = HttpCompliance.RFC7230;
 

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/TaskServlet.java
Patch:
@@ -42,7 +42,7 @@
 public class TaskServlet extends HttpServlet {
     private static final long serialVersionUID = 7404713218661358124L;
     private static final Logger LOGGER = LoggerFactory.getLogger(TaskServlet.class);
-    private static final String CONTENT_TYPE = "text/plain;charset=UTF-8";
+    private static final String DEFAULT_CONTENT_TYPE = "text/plain;charset=UTF-8";
     private final ConcurrentMap<String, Task> tasks;
     private final ConcurrentMap<Task, TaskExecutor> taskExecutors;
 
@@ -100,7 +100,7 @@ protected void doGet(HttpServletRequest req,
                          HttpServletResponse resp) throws ServletException, IOException {
         if (Strings.isNullOrEmpty(req.getPathInfo())) {
             try (final PrintWriter output = resp.getWriter()) {
-                resp.setContentType(CONTENT_TYPE);
+                resp.setContentType(DEFAULT_CONTENT_TYPE);
                 getTasks().stream()
                     .map(Task::getName)
                     .sorted()
@@ -119,7 +119,7 @@ protected void doPost(HttpServletRequest req,
         final String pathInfo = req.getPathInfo();
         final Task task = pathInfo != null ? tasks.get(pathInfo) : null;
         if (task != null) {
-            resp.setContentType(CONTENT_TYPE);
+            resp.setContentType(task.getResponseContentType().orElse(DEFAULT_CONTENT_TYPE));
             final PrintWriter output = resp.getWriter();
             try {
                 final TaskExecutor taskExecutor = taskExecutors.get(task);

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/TaskServlet.java
Patch:
@@ -42,7 +42,7 @@
 public class TaskServlet extends HttpServlet {
     private static final long serialVersionUID = 7404713218661358124L;
     private static final Logger LOGGER = LoggerFactory.getLogger(TaskServlet.class);
-    private static final String CONTENT_TYPE = "text/plain;charset=UTF-8";
+    private static final String DEFAULT_CONTENT_TYPE = "text/plain;charset=UTF-8";
     private final ConcurrentMap<String, Task> tasks;
     private final ConcurrentMap<Task, TaskExecutor> taskExecutors;
 
@@ -100,7 +100,7 @@ protected void doGet(HttpServletRequest req,
                          HttpServletResponse resp) throws ServletException, IOException {
         if (Strings.isNullOrEmpty(req.getPathInfo())) {
             try (final PrintWriter output = resp.getWriter()) {
-                resp.setContentType(CONTENT_TYPE);
+                resp.setContentType(DEFAULT_CONTENT_TYPE);
                 getTasks().stream()
                     .map(Task::getName)
                     .sorted()
@@ -119,7 +119,7 @@ protected void doPost(HttpServletRequest req,
         final String pathInfo = req.getPathInfo();
         final Task task = pathInfo != null ? tasks.get(pathInfo) : null;
         if (task != null) {
-            resp.setContentType(CONTENT_TYPE);
+            resp.setContentType(task.getResponseContentType().orElse(DEFAULT_CONTENT_TYPE));
             final PrintWriter output = resp.getWriter();
             try {
                 final TaskExecutor taskExecutor = taskExecutors.get(task);

File: dropwizard-core/src/main/java/io/dropwizard/sslreload/SslReloadTask.java
Patch:
@@ -22,7 +22,7 @@ protected SslReloadTask() {
     public void execute(Map<String, List<String>> parameters, PrintWriter output) throws Exception {
         // Iterate through all the reloaders first to ensure valid configuration
         for (SslReload reloader : getReloaders()) {
-            reloader.reload(new SslContextFactory());
+            reloader.reload(new SslContextFactory.Server());
         }
 
         // Now we know that configuration is valid, reload for real

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2ConnectorFactory.java
Patch:
@@ -111,7 +111,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, @Null
         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory(H2, H2_17);
         alpn.setDefaultProtocol(HTTP_1_1); // Speak HTTP 1.1 over TLS if negotiation fails
 
-        final SslContextFactory sslContextFactory = configureSslContextFactory(new SslContextFactory());
+        final SslContextFactory sslContextFactory = configureSslContextFactory(new SslContextFactory.Server());
         sslContextFactory.addLifeCycleListener(logSslInfoOnStart(sslContextFactory));
         server.addBean(sslContextFactory);
         server.addBean(new SslReload(sslContextFactory, this::configureSslContextFactory));

File: dropwizard-http2/src/test/java/io/dropwizard/http2/AbstractHttp2Test.java
Patch:
@@ -28,7 +28,7 @@ public class AbstractHttp2Test {
         BootstrapLogging.bootstrap();
     }
 
-    final SslContextFactory sslContextFactory = new SslContextFactory();
+    final SslContextFactory.Server sslContextFactory = new SslContextFactory.Server();
     HttpClient client;
 
     @BeforeEach

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpsConnectorFactory.java
Patch:
@@ -19,12 +19,12 @@
 import org.eclipse.jetty.util.thread.ScheduledExecutorScheduler;
 import org.eclipse.jetty.util.thread.Scheduler;
 import org.eclipse.jetty.util.thread.ThreadPool;
-import javax.validation.constraints.NotEmpty;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.annotation.Nullable;
 import javax.net.ssl.SSLEngine;
+import javax.validation.constraints.NotEmpty;
 import java.io.File;
 import java.net.URI;
 import java.security.KeyStore;
@@ -598,7 +598,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, @Null
 
         final HttpConnectionFactory httpConnectionFactory = buildHttpConnectionFactory(httpConfig);
 
-        final SslContextFactory sslContextFactory = configureSslContextFactory(new SslContextFactory());
+        final SslContextFactory sslContextFactory = configureSslContextFactory(new SslContextFactory.Server());
         sslContextFactory.addLifeCycleListener(logSslInfoOnStart(sslContextFactory));
 
         server.addBean(sslContextFactory);

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -141,8 +141,8 @@ void testBuildConnector() throws Exception {
         // That's gross, but unfortunately ArrayByteBufferPool doesn't have API for configuration
         ByteBufferPool byteBufferPool = connector.getByteBufferPool();
         assertThat(byteBufferPool).isInstanceOf(ArrayByteBufferPool.class);
-        assertThat(getField(ArrayByteBufferPool.class, "_min", true).get(byteBufferPool)).isEqualTo(64);
-        assertThat(getField(ArrayByteBufferPool.class, "_inc", true).get(byteBufferPool)).isEqualTo(1024);
+        assertThat(getField(ArrayByteBufferPool.class, "_minCapacity", true).get(byteBufferPool)).isEqualTo(64);
+        assertThat(getField(ArrayByteBufferPool.class, "_factor", true).get(byteBufferPool)).isEqualTo(1024);
         assertThat(((Object[]) getField(ArrayByteBufferPool.class, "_direct", true)
                 .get(byteBufferPool)).length).isEqualTo(64);
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/TlsSocketAppenderFactory.java
Patch:
@@ -4,10 +4,10 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
-import javax.validation.constraints.NotEmpty;
 
 import javax.annotation.Nullable;
 import javax.net.SocketFactory;
+import javax.validation.constraints.NotEmpty;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.Socket;
@@ -341,7 +341,7 @@ public void setJceProvider(String jceProvider) {
     }
 
     private SslContextFactory createSslContextFactory() {
-        SslContextFactory factory = new SslContextFactory();
+        SslContextFactory factory = new SslContextFactory.Server();
         if (keyStorePath != null) {
             factory.setKeyStorePath(keyStorePath);
         }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/TlsSocketAppenderFactoryTest.java
Patch:
@@ -53,7 +53,7 @@ private ServerSocket createServerSocket() {
     }
 
     private SslContextFactory createSslContextFactory() throws Exception {
-        SslContextFactory sslContextFactory = new SslContextFactory();
+        SslContextFactory sslContextFactory = new SslContextFactory.Server();
         sslContextFactory.setKeyStorePath(resourcePath("stores/tls_server.jks").getAbsolutePath());
         sslContextFactory.setKeyStorePassword("server_pass");
         sslContextFactory.start();

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/ResourceTestRuleWithoutLoggingBootstrapTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ResourceTestRuleWithoutLoggingBootstrap {
+public class ResourceTestRuleWithoutLoggingBootstrapTest {
     @SuppressWarnings("deprecation")
     @Rule
     public final ResourceTestRule resourceTestRule = ResourceTestRule.builder()

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/ResourceTestRuleWithoutLoggingBootstrapTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ResourceTestRuleWithoutLoggingBootstrap {
+public class ResourceTestRuleWithoutLoggingBootstrapTest {
     @SuppressWarnings("deprecation")
     @Rule
     public final ResourceTestRule resourceTestRule = ResourceTestRule.builder()

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DefaultLoggingFactoryTest.java
Patch:
@@ -74,7 +74,7 @@ public void canParseNewLoggerFormat() throws Exception {
         assertThat(fileAppenderFactory.getCurrentLogFilename()).isEqualTo("${new_app}.log");
         assertThat(fileAppenderFactory.getArchivedLogFilenamePattern()).isEqualTo("${new_app}-%d.log.gz");
         assertThat(fileAppenderFactory.getArchivedFileCount()).isEqualTo(5);
-        assertThat(fileAppenderFactory.getBufferSize().toKilobytes()).isEqualTo(256);
+        assertThat(fileAppenderFactory.getBufferSize().toKibibytes()).isEqualTo(256);
         final List<FilterFactory<ILoggingEvent>> filterFactories = fileAppenderFactory.getFilterFactories();
         assertThat(filterFactories).hasSize(2);
         assertThat(filterFactories.get(0)).isExactlyInstanceOf(TestFilterFactory.class);

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CachingAuthorizerTest.java
Patch:
@@ -48,11 +48,11 @@ public void cachesTheFirstReturnedPrincipal() throws Exception {
     @Test
     public void respectsTheCacheConfiguration() throws Exception {
         cached.authorize(principal, role);
-        Thread.sleep(10L);
+        // We need to make sure that background cache invalidation is done before other requests
+        cached.cache.cleanUp();
         cached.authorize(principal2, role);
-        Thread.sleep(10L);
+        cached.cache.cleanUp();
         cached.authorize(principal, role);
-        Thread.sleep(10L);
 
         final InOrder inOrder = inOrder(underlying);
         inOrder.verify(underlying, times(1)).authorize(principal, role);

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.fasterxml.jackson.annotation.PropertyAccessor;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.io.CharStreams;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
@@ -16,6 +15,7 @@
 import io.dropwizard.logging.SyslogAppenderFactory;
 import io.dropwizard.setup.Environment;
 import io.dropwizard.setup.ExceptionMapperBinder;
+import io.dropwizard.util.CharStreams;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.server.AbstractNetworkConnector;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/DatabaseInTimeZone.java
Patch:
@@ -29,7 +29,7 @@ protected void before(Path tempDir) throws Exception {
         String vmArguments = "-Duser.timezone=" + timeZone.getID();
 
         ProcessBuilder pb = new ProcessBuilder(java, vmArguments, "-cp", h2jar.getAbsolutePath(), Server.class.getName(),
-                                               "-tcp", "-baseDir", tempDir.resolve("database-in-time-zone").toString());
+                                               "-tcp", "-ifNotExists", "-baseDir", tempDir.resolve("database-in-time-zone").toString());
         process = pb.start();
     }
 

File: dropwizard-assets/src/test/java/io/dropwizard/assets/AssetsBundleTest.java
Patch:
@@ -6,8 +6,8 @@
 import io.dropwizard.servlets.assets.ResourceURL;
 import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Resources;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 
 import javax.servlet.ServletRegistration;
@@ -28,7 +28,7 @@ public class AssetsBundleTest {
     private AssetServlet servlet = new AssetServlet("/", "/", null, null);
     private String servletPath = "";
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         when(environment.servlets()).thenReturn(servletEnvironment);
     }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/AuthFilterTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.auth;
 
 import io.dropwizard.auth.principal.NullPrincipal;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.core.Cookie;
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.Optional;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CachingAuthorizerTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.codahale.metrics.MetricRegistry;
 import com.github.benmanes.caffeine.cache.CaffeineSpec;
 import io.dropwizard.util.Sets;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.InOrder;
 
 import java.security.Principal;
@@ -32,7 +32,7 @@ public class CachingAuthorizerTest {
     private final Principal principal2 = new PrincipalImpl("principal2");
     private final String role = "popular_kids";
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         when(underlying.authorize(any(), anyString())).thenReturn(true);
     }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicCredentialsTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.auth.basic;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-auth/src/test/java/io/dropwizard/auth/chained/ChainedAuthProviderTest.java
Patch:
@@ -13,7 +13,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.test.TestProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.core.HttpHeaders;
 import java.security.Principal;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.auth.AuthResource;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
 

File: dropwizard-client/src/test/java/io/dropwizard/client/ConfiguredCloseableHttpClientTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.impl.client.CloseableHttpClient;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -14,7 +14,7 @@ public class ConfiguredCloseableHttpClientTest {
     private CloseableHttpClient closeableHttpClientMock = Mockito.mock(CloseableHttpClient.class);
     private RequestConfig defaultRequestConfigMock = Mockito.mock(RequestConfig.class);
 
-    @Before
+    @BeforeEach
     public void setUp() {
         configuredClient = new ConfiguredCloseableHttpClient(closeableHttpClientMock, defaultRequestConfigMock);
     }

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientConfigurationTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.util.Resources;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/HttpClientConfigurationTest.java
Patch:
@@ -9,7 +9,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.util.Resources;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.util.List;

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/NonProxyListProxyRoutePlannerTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.apache.http.HttpHost;
 import org.apache.http.HttpRequest;
 import org.apache.http.protocol.HttpContext;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryFactoryTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.validation.Validator;
 import java.io.File;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationValidationExceptionTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.configuration;
 
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Nullable;
 import javax.validation.ConstraintViolation;
@@ -23,7 +23,7 @@ private static class Example {
 
     private ConfigurationValidationException e;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         assumeThat(Locale.getDefault().getLanguage()).isEqualTo("en");
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableLookupTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.configuration;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/EnvironmentVariableSubstitutorTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assumptions.assumeThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class EnvironmentVariableSubstitutorTest {
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/FileConfigurationSourceProviderTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.configuration;
 
 import io.dropwizard.util.Resources;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/JsonConfigurationFactoryTest.java
Patch:
@@ -3,7 +3,8 @@
 import com.fasterxml.jackson.core.JsonParser.Feature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.jackson.Jackson;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.io.IOException;
@@ -14,7 +15,7 @@ public class JsonConfigurationFactoryTest extends BaseConfigurationFactoryTest {
 
     private File commentFile;
 
-    @Override
+    @BeforeEach
     public void setUp() throws Exception {
         this.factory = new JsonConfigurationFactory<>(Example.class, validator, Jackson.newObjectMapper(), "dw");
         this.malformedFile = resourceFileName("factory-test-malformed.json");

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/LevenshteinComparatorTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.configuration;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ResourceConfigurationSourceProviderTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.configuration;
 
 import io.dropwizard.util.CharStreams;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.InputStream;
 import java.io.InputStreamReader;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/SubstitutingSourceProviderTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.apache.commons.text.StringSubstitutor;
 import org.apache.commons.text.lookup.StringLookup;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SubstitutingSourceProviderTest {
     @Test

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/UrlConfigurationSourceProviderTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.util.ByteStreams;
 import io.dropwizard.util.Resources;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/YamlConfigurationFactoryTest.java
Patch:
@@ -1,12 +1,13 @@
 package io.dropwizard.configuration;
 
 import io.dropwizard.jackson.Jackson;
+import org.junit.jupiter.api.BeforeEach;
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 public class YamlConfigurationFactoryTest extends BaseConfigurationFactoryTest {
 
-    @Override
+    @BeforeEach
     public void setUp() throws Exception {
         this.factory = new YamlConfigurationFactory<>(Example.class, validator, Jackson.newObjectMapper(), "dw");
         this.malformedFile = resourceFileName("factory-test-malformed.yml");

File: dropwizard-core/src/test/java/io/dropwizard/ApplicationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 

File: dropwizard-core/src/test/java/io/dropwizard/BundleTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.nio.file.Files;

File: dropwizard-core/src/test/java/io/dropwizard/ConfigurationTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jetty.ConnectorFactory;
 import io.dropwizard.logging.AppenderFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ServiceLoader;
 import java.util.stream.Collectors;

File: dropwizard-core/src/test/java/io/dropwizard/cli/CheckCommandTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;

File: dropwizard-core/src/test/java/io/dropwizard/cli/CommandTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.util.Optional;
@@ -44,7 +44,7 @@ public void run(Configuration configuration, Environment environment) throws Exc
     private final Command command = new TestCommand();
     private Cli cli;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         final JarLocation location = mock(JarLocation.class);
         final Bootstrap<Configuration> bootstrap = new Bootstrap<>(app);

File: dropwizard-core/src/test/java/io/dropwizard/cli/ConfiguredCommandTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import static org.mockito.Mockito.mock;

File: dropwizard-core/src/test/java/io/dropwizard/server/AbstractServerFactoryTest.java
Patch:
@@ -8,8 +8,8 @@
 import io.dropwizard.setup.Environment;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.thread.ThreadPool;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
@@ -36,7 +36,7 @@ public class AbstractServerFactoryTest {
     private static final String RUN_SET_PATTERN = "/set/from/run/*";
     private static final String YAML_SET_PATTERN = "/set/from/yaml/*";
 
-    @Before
+    @BeforeEach
     public void before() {
         when(environment.jersey()).thenReturn(jerseyEnvironment);
         when(environment.getApplicationContext()).thenReturn(new MutableServletContextHandler());

File: dropwizard-core/src/test/java/io/dropwizard/setup/AdminEnvironmentTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.servlets.tasks.Task;
 import org.eclipse.jetty.server.Server;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.ServletRegistration;
 import java.io.PrintWriter;

File: dropwizard-core/src/test/java/io/dropwizard/setup/BootstrapTest.java
Patch:
@@ -11,8 +11,8 @@
 import io.dropwizard.configuration.FileConfigurationSourceProvider;
 import io.dropwizard.jackson.Jackson;
 import org.hibernate.validator.HibernateValidator;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.validation.Validation;
 import javax.validation.ValidatorFactory;
@@ -27,7 +27,7 @@ public void run(Configuration configuration, Environment environment) throws Exc
     };
     private Bootstrap<Configuration> bootstrap;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         bootstrap = new Bootstrap<>(application);
     }

File: dropwizard-core/src/test/java/io/dropwizard/validation/InjectValidatorFeatureTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.setup.Environment;
 import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForNumber;
 import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorFactoryImpl;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.validation.ConstraintValidatorFactory;
 import javax.validation.ConstraintViolation;
@@ -36,7 +36,7 @@ public void run(Configuration configuration, Environment environment) { }
 
     private ValidatorFactory validatorFactory;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         Bootstrap<Configuration> bootstrap = new Bootstrap<>(application);
         application.initialize(bootstrap);

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.util.Duration;
 import io.dropwizard.util.Resources;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.util.Optional;

File: dropwizard-db/src/test/java/io/dropwizard/db/ManagedPooledDataSourceTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import org.apache.tomcat.jdbc.pool.PoolProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.sql.SQLFeatureNotSupportedException;
 

File: dropwizard-db/src/test/java/io/dropwizard/db/TimeBoundHealthCheckTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.health.HealthCheck;
 import io.dropwizard.util.Duration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;

File: dropwizard-forms/src/test/java/io/dropwizard/forms/MultiPartBundleTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.setup.Environment;
 import io.dropwizard.validation.BaseValidator;
 import org.glassfish.jersey.media.multipart.MultiPartFeature;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/AbstractDAOTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.hibernate.proxy.HibernateProxy;
 import org.hibernate.proxy.LazyInitializer;
 import org.hibernate.query.Query;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.persistence.criteria.CriteriaBuilder;
 import javax.persistence.criteria.CriteriaQuery;
@@ -99,7 +99,7 @@ public <T> T initialize(T proxy) {
     private final Session session = mock(Session.class);
     private final MockDAO dao = new MockDAO(factory);
 
-    @Before
+    @BeforeEach
     public void setup() throws Exception {
         when(criteriaBuilder.createQuery(same(String.class))).thenReturn(criteriaQuery);
         when(factory.getCurrentSession()).thenReturn(session);

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/HibernateBundleTest.java
Patch:
@@ -11,8 +11,8 @@
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
 import org.hibernate.SessionFactory;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 
 import java.util.Collections;
@@ -42,7 +42,7 @@ public DataSourceFactory getDataSourceFactory(Configuration configuration) {
         }
     };
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         when(environment.healthChecks()).thenReturn(healthChecks);
         when(environment.jersey()).thenReturn(jerseyEnvironment);

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/LazyLoadingTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.hibernate.SessionFactory;
 import org.hibernate.Transaction;
 import org.hibernate.exception.ConstraintViolationException;
-import org.junit.After;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.PUT;
@@ -161,7 +161,7 @@ public void setup(Class<? extends Application<TestConfiguration>> applicationCla
         dropwizardTestSupport.before();
     }
 
-    @After
+    @AfterEach
     public void tearDown() {
         dropwizardTestSupport.after();
         client.close();

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/ScanningHibernateBundleTest.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.hibernate;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.List;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 
 public class ScanningHibernateBundleTest {
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryHealthCheckTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.hibernate.SessionFactory;
 import org.hibernate.Transaction;
 import org.hibernate.query.NativeQuery;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.InOrder;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryManagerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.db.ManagedDataSource;
 import org.hibernate.SessionFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkApplicationListenerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.hibernate.SessionFactory;
 import org.hibernate.Transaction;
 import org.hibernate.context.internal.ManagedSessionContext;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.InOrder;
 
 import java.lang.reflect.Method;
@@ -45,7 +45,7 @@ public class UnitOfWorkApplicationListenerTest {
     private final Transaction transaction = mock(Transaction.class);
     private final Transaction analyticsTransaction = mock(Transaction.class);
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         listener.registerSessionFactory(HibernateBundle.DEFAULT_NAME, sessionFactory);
         listener.registerSessionFactory("analytics", analyticsSessionFactory);

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkAwareProxyFactoryTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.Transaction;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.util.Collections;
 import java.util.Map;
@@ -28,7 +28,7 @@ public class UnitOfWorkAwareProxyFactoryTest {
 
     private SessionFactory sessionFactory;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         final HibernateBundle<?> bundle = mock(HibernateBundle.class);
         final Environment environment = mock(Environment.class);

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.hibernate.CacheMode;
 import org.hibernate.FlushMode;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -17,7 +17,7 @@ public void example() {
 
     private UnitOfWork unitOfWork;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         this.unitOfWork = Example.class.getDeclaredMethod("example")
                                        .getAnnotation(UnitOfWork.class);

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2ConnectorFactoryTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.http2;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
 import java.util.Collections;

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategyTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.PropertyNamingStrategy;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Nullable;
 
@@ -41,7 +41,7 @@ public SnakeCaseExample(String firstName) {
     private final PropertyNamingStrategy strategy = new AnnotationSensitivePropertyNamingStrategy();
     private final ObjectMapper mapper = new ObjectMapper();
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         mapper.setPropertyNamingStrategy(strategy);
     }

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/CaffeineModuleTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.github.benmanes.caffeine.cache.CaffeineSpec;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/DiscoverableSubtypeResolverTest.java
Patch:
@@ -1,16 +1,16 @@
 package io.dropwizard.jackson;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class DiscoverableSubtypeResolverTest {
     private final ObjectMapper mapper = new ObjectMapper();
     private final DiscoverableSubtypeResolver resolver = new DiscoverableSubtypeResolver(ExampleTag.class);
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         mapper.setSubtypeResolver(resolver);
     }

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/FuzzyEnumModuleTest.java
Patch:
@@ -6,8 +6,8 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.sql.ClientInfoStatus;
 import java.util.concurrent.TimeUnit;
@@ -72,7 +72,7 @@ public String toString() {
         DEFAULT
     }
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         mapper.registerModule(new FuzzyEnumModule());
     }

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/GuavaExtrasModuleTest.java
Patch:
@@ -5,15 +5,15 @@
 import com.google.common.base.Optional;
 import com.google.common.cache.CacheBuilderSpec;
 import com.google.common.net.HostAndPort;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class GuavaExtrasModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         mapper.registerModule(new GuavaModule());
         mapper.registerModule(new GuavaExtrasModule());

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/JacksonTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import javax.annotation.Nullable;

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/ParanamerModuleTest.java
Patch:
@@ -4,8 +4,8 @@
 import com.fasterxml.jackson.databind.ObjectReader;
 import com.fasterxml.jackson.databind.ObjectWriter;
 import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 
@@ -14,7 +14,7 @@
 public class ParanamerModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         mapper.registerModule(new ParameterNamesModule());
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/DBIHealthCheckTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.health.HealthCheck;
 import io.dropwizard.util.Duration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/InstantArgumentTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.StatementContext;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/InstantMapperTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.StatementContext;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/JodaDateTimeArgumentTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jdbi.args;
 
 import org.joda.time.DateTime;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.StatementContext;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/JodaDateTimeMapperTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jdbi.args;
 
 import org.joda.time.DateTime;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.StatementContext;
 
 import java.sql.ResultSet;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/LocalDateArgumentTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.StatementContext;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/LocalDateMapperTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.StatementContext;
 
 import java.sql.ResultSet;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/LocalDateTimeArgumentTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.StatementContext;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/LocalDateTimeMapperTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.StatementContext;
 
 import java.sql.ResultSet;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/OffsetDateTimeArgumentTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.StatementContext;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/OffsetDateTimeMapperTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.StatementContext;
 
 import java.sql.ResultSet;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/ZonedDateTimeArgumentTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.skife.jdbi.v2.StatementContext;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/args/ZonedDateTimeMapperTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.args;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.StatementContext;
 
 import java.sql.ResultSet;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/bundles/DBIExceptionsBundleTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.jdbi.jersey.LoggingSQLExceptionMapper;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
 import io.dropwizard.setup.Environment;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.mockito.Mockito.isA;
 import static org.mockito.Mockito.mock;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/jersey/LoggingDBIExceptionMapperTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jdbi.jersey;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.StatementContext;
 import org.skife.jdbi.v2.exceptions.DBIException;
 import org.skife.jdbi.v2.exceptions.NoResultsException;
@@ -18,7 +18,7 @@ public class LoggingDBIExceptionMapperTest {
     private LoggingDBIExceptionMapper dbiExceptionMapper;
     private Logger logger;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         logger = mock(Logger.class);
         dbiExceptionMapper = new LoggingDBIExceptionMapper(logger);

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/jersey/LoggingSQLExceptionMapperTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi.jersey;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 
 import java.sql.SQLException;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalDateTimeTest.java
Patch:
@@ -8,8 +8,8 @@
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
 import org.joda.time.DateTime;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -28,7 +28,7 @@ public class GuavaOptionalDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalInstantTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -28,7 +28,7 @@ public class GuavaOptionalInstantTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalLocalDateTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -27,7 +27,7 @@ public class GuavaOptionalLocalDateTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalLocalDateTimeTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -27,7 +27,7 @@ public class GuavaOptionalLocalDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalOffsetDateTimeTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -28,7 +28,7 @@ public class GuavaOptionalOffsetDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalZonedDateTimeTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -28,7 +28,7 @@ public class GuavaOptionalZonedDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalDateTimeTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
 import org.joda.time.DateTime;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -29,7 +29,7 @@ public class OptionalDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalInstantTest.java
Patch:
@@ -6,8 +6,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -28,7 +28,7 @@ public class OptionalInstantTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalLocalDateTest.java
Patch:
@@ -6,8 +6,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -27,7 +27,7 @@ public class OptionalLocalDateTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalLocalDateTimeTest.java
Patch:
@@ -6,8 +6,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -27,7 +27,7 @@ public class OptionalLocalDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalOffsetDateTimeTest.java
Patch:
@@ -6,8 +6,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -28,7 +28,7 @@ public class OptionalOffsetDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalZonedDateTimeTest.java
Patch:
@@ -6,8 +6,8 @@
 import io.dropwizard.jdbi.DBIFactory;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 import org.skife.jdbi.v2.sqlobject.Bind;
@@ -28,7 +28,7 @@ public class OptionalZonedDateTimeTest {
 
     private TaskDao dao;
 
-    @Before
+    @BeforeEach
     public void setupTests() throws IOException {
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();
         dataSourceFactory.setDriverClass("org.h2.Driver");

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/JdbiFactoryTest.java
Patch:
@@ -9,7 +9,7 @@
 import io.dropwizard.setup.Environment;
 import org.jdbi.v3.core.Jdbi;
 import org.jdbi.v3.core.statement.SqlStatements;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.UUID;
 

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/NamePrependingTemplateEngineTest.java
Patch:
@@ -3,8 +3,8 @@
 import org.jdbi.v3.core.extension.ExtensionMethod;
 import org.jdbi.v3.core.statement.StatementContext;
 import org.jdbi.v3.core.statement.TemplateEngine;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.util.UUID;
 
@@ -24,7 +24,7 @@ public interface MyDao {
     private StatementContext ctx;
     private NamePrependingTemplateEngine sut;
 
-    @Before
+    @BeforeEach
     public void setup() {
         original = mock(TemplateEngine.class);
         ctx = mock(StatementContext.class);

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/bundles/JdbiExceptionsBundleTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.jdbi3.jersey.LoggingSQLExceptionMapper;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
 import io.dropwizard.setup.Environment;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.mockito.Mockito.isA;
 import static org.mockito.Mockito.mock;

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/jersey/LoggingJdbiExceptionMapperTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.jdbi.v3.core.result.NoResultsException;
 import org.jdbi.v3.core.statement.StatementContext;
 import org.jdbi.v3.core.transaction.TransactionException;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 
 import java.sql.SQLException;
@@ -18,7 +18,7 @@ public class LoggingJdbiExceptionMapperTest {
     private LoggingJdbiExceptionMapper jdbiExceptionMapper;
     private Logger logger;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         logger = mock(Logger.class);
         jdbiExceptionMapper = new LoggingJdbiExceptionMapper(logger);

File: dropwizard-jdbi3/src/test/java/io/dropwizard/jdbi3/jersey/LoggingSQLExceptionMapperTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jdbi3.jersey;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 
 import java.sql.SQLException;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/AsyncServletTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey;
 
 import io.dropwizard.jersey.dummy.DummyResource;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/DropwizardResourceConfigTest.java
Patch:
@@ -5,8 +5,8 @@
 import io.dropwizard.jersey.dummy.DummyResource;
 import org.glassfish.jersey.internal.inject.AbstractBinder;
 import org.glassfish.jersey.server.model.Resource;
-import org.junit.After;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.DELETE;
 import javax.ws.rs.GET;
@@ -26,7 +26,7 @@ protected Application configure() {
         }
     };
 
-    @After
+    @AfterEach
     public void teardown() throws Exception {
         jerseyTest.tearDown();
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/JerseyContentTypeTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey;
 
 import io.dropwizard.jersey.dummy.DummyResource;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/caching/CacheControlledResponseFeatureTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.ResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.HttpHeaders;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/EarlyEofExceptionMapperTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.jersey.errors;
 
 import org.eclipse.jetty.io.EofException;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.core.Response;
 
@@ -13,6 +13,6 @@ public class EarlyEofExceptionMapperTest {
     @Test
     public void testToReponse() {
         final Response reponse = mapper.toResponse(new EofException());
-        Assert.assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), reponse.getStatus());
+        Assertions.assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), reponse.getStatus());
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/ErrorEntityWriterTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/IllegalStateExceptionMapperTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.errors;
 
 import org.glassfish.jersey.server.internal.LocalizationMessages;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.NotSupportedException;
 import javax.ws.rs.core.Response;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.client.Entity;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/CharsetUtf8FilterTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.filter;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.container.ContainerResponseContext;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/RequestIdFilterTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.filter;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.slf4j.Logger;
 
@@ -26,7 +26,7 @@ public class RequestIdFilterTest {
     private RequestIdFilter requestIdFilter = new RequestIdFilter();
     private MultivaluedMap<String, Object> headers = new MultivaluedHashMap<>();
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         requestIdFilter.setLogger(logger);
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/RuntimeFilterTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.filter;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import javax.ws.rs.container.ContainerRequestContext;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalCookieParamResourceTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.jersey.MyMessage;
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.CookieParam;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalFormParamResourceTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
 import org.glassfish.jersey.internal.util.collection.MultivaluedStringMap;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.FormParam;
 import javax.ws.rs.POST;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalHeaderParamResourceTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.jersey.MyMessage;
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalMessageBodyWriterTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.optional.EmptyOptionalExceptionMapper;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamResourceTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.jersey.MyMessage;
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoderTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.gzip;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Nullable;
 import javax.ws.rs.WebApplicationException;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.errors.LoggingExceptionMapper;
 import org.glassfish.jersey.client.ClientConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/InstantParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import java.time.Instant;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/InstantSecondParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import java.time.Instant;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/LocalDateParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.LocalDate;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/LocalDateTimeParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.LocalDateTime;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/LocalTimeParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.LocalTime;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/OffsetDateTimeParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.OffsetDateTime;
 import java.time.ZoneOffset;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/YearMonthParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.Month;
 import java.time.YearMonth;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/YearParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.Year;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/ZoneIdParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.ZoneId;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jsr310/ZonedDateTimeParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.jsr310;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.ZoneId;
 import java.time.ZonedDateTime;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalCookieParamResourceTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.jersey.MyMessage;
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.CookieParam;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalDoubleMessageBodyWriterTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalFormParamResourceTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
 import org.glassfish.jersey.internal.util.collection.MultivaluedStringMap;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.FormParam;
 import javax.ws.rs.POST;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalHeaderParamResourceTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.jersey.MyMessage;
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalIntMessageBodyWriterTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalLongMessageBodyWriterTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalMessageBodyWriterTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalQueryParamResourceTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.jersey.MyMessage;
 import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.GET;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/BooleanParamTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.params;
 
 import io.dropwizard.jersey.errors.ErrorMessage;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Nullable;
 import javax.ws.rs.WebApplicationException;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/DateTimeParamTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/DurationParamTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.jersey.errors.ErrorMessage;
 import io.dropwizard.util.Duration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.WebApplicationException;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/InstantParamTest.java
Patch:
@@ -4,7 +4,7 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import io.dropwizard.jersey.errors.ErrorMessage;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.Instant;
 import java.time.ZoneOffset;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/IntParamTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.params;
 
 import io.dropwizard.jersey.errors.ErrorMessage;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.WebApplicationException;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LocalDateParamTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.params;
 
 import org.joda.time.LocalDate;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LongParamTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.params;
 
 import io.dropwizard.jersey.errors.ErrorMessage;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.WebApplicationException;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/NonEmptyStringParamProviderTest.java
Patch:
@@ -3,7 +3,7 @@
 
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/NonEmptyStringParamTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jersey.params;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.Optional;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/SizeParamTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.jersey.errors.ErrorMessage;
 import io.dropwizard.util.Size;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.WebApplicationException;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/UUIDParamTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.params;
 
 import io.dropwizard.jersey.errors.ErrorMessage;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.WebApplicationException;
 import java.util.UUID;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/FlashFactoryTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.client.Invocation;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/HttpSessionFactoryTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.client.Invocation;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/setup/JerseyEnvironmentTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.setup;
 
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/FuzzyEnumParamConverterProviderTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.validation;
 
 import io.dropwizard.jersey.errors.ErrorMessage;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Nullable;
 import javax.ws.rs.WebApplicationException;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/JerseyViolationExceptionTest.java
Patch:
@@ -2,14 +2,14 @@
 
 import org.glassfish.jersey.process.Inflector;
 import org.glassfish.jersey.server.model.Invocable;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.validation.ConstraintViolation;
 import javax.ws.rs.core.Request;
 import java.util.Collections;
 import java.util.Set;
 
-import static org.junit.Assert.assertSame;
+import static org.junit.jupiter.api.Assertions.assertSame;
 import static org.mockito.Mockito.mock;
 
 public class JerseyViolationExceptionTest {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ParamValidatorUnwrapperTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jersey.params.IntParam;
 import io.dropwizard.jersey.params.NonEmptyStringParam;
 import org.hibernate.validator.constraints.Length;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.validation.ConstraintViolation;
 import javax.validation.Validator;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/ContextRoutingHandlerTest.java
Patch:
@@ -3,8 +3,8 @@
 import io.dropwizard.util.Maps;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Request;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.InOrder;
 
 import javax.servlet.http.HttpServletRequest;
@@ -26,7 +26,7 @@ public class ContextRoutingHandlerTest {
 
     private ContextRoutingHandler handler;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         this.handler = new ContextRoutingHandler(Maps.of(
                 "/", handler1,

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/GzipHandlerFactoryTest.java
Patch:
@@ -8,8 +8,8 @@
 import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.handler.gzip.GzipHandler;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.util.Collections;
@@ -21,7 +21,7 @@
 public class GzipHandlerFactoryTest {
     private GzipHandlerFactory gzip;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         this.gzip = new YamlConfigurationFactory<>(GzipHandlerFactory.class,
                 BaseValidator.newValidator(), Jackson.newObjectMapper(), "dw")

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.eclipse.jetty.util.thread.QueuedThreadPool;
 import org.eclipse.jetty.util.thread.ScheduledExecutorScheduler;
 import org.eclipse.jetty.util.thread.ThreadPool;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.validation.Validator;
 import java.io.File;
@@ -38,7 +38,7 @@ public class HttpConnectorFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();
     private final Validator validator = BaseValidator.newValidator();
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class,
                 FileAppenderFactory.class, SyslogAppenderFactory.class, HttpConnectorFactory.class);

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/MutableServletContextHandlerTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jetty;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NetUtilTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.jetty;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.net.InetAddress;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NonblockingServletHolderTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.IOException;
 import org.eclipse.jetty.io.EofException;
 import org.eclipse.jetty.server.Request;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.InOrder;
 
 import javax.servlet.Servlet;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/RoutingHandlerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.eclipse.jetty.server.handler.ContextHandler;
 import org.eclipse.jetty.server.session.SessionHandler;
 import org.eclipse.jetty.servlet.ServletContextHandler;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/ServerPushFilterFactoryTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlets.PushCacheFilter;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.DispatcherType;
 import java.io.File;

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/LayoutIntegrationTests.java
Patch:
@@ -21,8 +21,8 @@
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.RequestLog;
 import org.eclipse.jetty.server.Response;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.slf4j.LoggerFactory;
 
 import java.io.ByteArrayOutputStream;
@@ -50,7 +50,7 @@ public class LayoutIntegrationTests {
     private final YamlConfigurationFactory<ConsoleAppenderFactory> yamlFactory = new YamlConfigurationFactory<>(
         ConsoleAppenderFactory.class, BaseValidator.newValidator(), objectMapper, "dw-json-log");
 
-    @Before
+    @BeforeEach
     public void setUp() {
         objectMapper.getSubtypeResolver().registerSubtypes(AccessJsonLayoutBaseFactory.class, EventJsonLayoutBaseFactory.class);
     }

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/AccessJsonLayoutTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.logging.json.AccessAttribute;
 import io.dropwizard.util.Maps;
 import io.dropwizard.util.Sets;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.time.ZoneId;
@@ -47,7 +47,7 @@ public class AccessJsonLayoutTest {
     private AccessJsonLayout accessJsonLayout = new AccessJsonLayout(jsonFormatter, timestampFormatter,
         includes, Collections.emptyMap(), Collections.emptyMap());
 
-    @Before
+    @BeforeEach
     public void setUp() {
         requestHeaders = Maps.of(
                 "Host", "api.example.io",

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/EventJsonLayoutTest.java
Patch:
@@ -10,8 +10,8 @@
 import io.dropwizard.logging.json.EventAttribute;
 import io.dropwizard.util.Maps;
 import io.dropwizard.util.Sets;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.time.ZoneId;
@@ -52,7 +52,7 @@ public class EventJsonLayoutTest {
 
     private EventJsonLayout eventJsonLayout;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         when(event.getTimeStamp()).thenReturn(1514906361000L);
         when(event.getLevel()).thenReturn(Level.INFO);

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/ExceptionFormatTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.logging.json.layout;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class ExceptionFormatTest {

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/JsonFormatterTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Maps;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.util.Arrays;

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/MapBuilderTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.logging.json.layout;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.ZoneId;
 import java.util.Collections;

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/layout/TimestampFormatterTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.logging.json.layout;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.ZoneId;
 

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/AutoCloseableManagerTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class AutoCloseableManagerTest {
 

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/ExecutorServiceManagerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.util.concurrent.ExecutorService;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import io.dropwizard.util.Duration;
 
@@ -20,7 +20,7 @@ public class ExecutorServiceManagerTest {
     private final ExecutorService exec;
 
     public ExecutorServiceManagerTest() {
-        // This is called before every test
+        // This is called setUp every test
         this.exec = mock(ExecutorService.class);
     }
 

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/JettyManagedTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.lifecycle;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.InOrder;
 
 import static org.mockito.Mockito.inOrder;

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilderTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.codahale.metrics.InstrumentedThreadFactory;
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.util.Duration;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.slf4j.Logger;
 
@@ -30,7 +30,7 @@ public class ExecutorServiceBuilderTest {
     private ExecutorServiceBuilder executorServiceBuilder;
     private Logger log;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         executorServiceBuilder = new ExecutorServiceBuilder(new LifecycleEnvironment(new MetricRegistry()), "test");
         log = mock(Logger.class);

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/LifecycleEnvironmentTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.lifecycle.Managed;
 import org.eclipse.jetty.util.component.ContainerLifeCycle;
 import org.eclipse.jetty.util.component.LifeCycle;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.concurrent.ExecutionException;

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/ScheduledExecutorServiceBuilderTest.java
Patch:
@@ -4,8 +4,8 @@
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.lifecycle.ExecutorServiceManager;
 import io.dropwizard.util.Duration;
-import org.junit.After;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 
 import javax.annotation.Nullable;
@@ -34,7 +34,7 @@ public ScheduledExecutorServiceBuilderTest() {
         when(le.getMetricRegistry()).thenReturn(new MetricRegistry());
     }
 
-    @After
+    @AfterEach
     public void tearDown() {
         if (this.execTracker != null) {
             this.execTracker.shutdownNow();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/AppenderFactoryCustomLayoutTest.java
Patch:
@@ -13,8 +13,8 @@
 import io.dropwizard.logging.layout.DropwizardLayoutFactory;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.net.URISyntaxException;
@@ -37,7 +37,7 @@ private static File loadResource() throws URISyntaxException {
         return new File(Resources.getResource("yaml/appender_with_custom_layout.yml").toURI());
     }
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         objectMapper.registerSubtypes(TestLayoutFactory.class);
     }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/AppenderFactoryCustomTimeZone.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.net.URISyntaxException;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/ConsoleAppenderFactoryTest.java
Patch:
@@ -9,7 +9,7 @@
 import io.dropwizard.logging.async.AsyncLoggingEventAppenderFactory;
 import io.dropwizard.logging.filter.NullLevelFilterFactory;
 import io.dropwizard.logging.layout.DropwizardLayoutFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.LoggerFactory;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DropwizardLayoutTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.logging;
 
 import ch.qos.logback.classic.LoggerContext;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.TimeZone;
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/ExternalLoggingFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedExtendedThrowableProxyConverterTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.logging;
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -13,7 +13,7 @@ public class PrefixedExtendedThrowableProxyConverterTest {
     private final PrefixedExtendedThrowableProxyConverter converter = new PrefixedExtendedThrowableProxyConverter();
     private final ThrowableProxy proxy = new ThrowableProxy(new IOException("noo"));
 
-    @Before
+    @BeforeEach
     public void setup() {
         converter.setOptionList(Collections.singletonList("full"));
         converter.start();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedRootCauseFirstThrowableProxyConverterTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
 import io.dropwizard.util.Strings;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.annotation.Nullable;
 import java.io.IOException;
@@ -57,7 +57,7 @@ private void throwOuterWrapper() {
         }
     }
 
-    @Before
+    @BeforeEach
     public void setup() {
         converter.setOptionList(Collections.singletonList("full"));
         converter.start();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedThrowableProxyConverterTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.dropwizard.logging;
 
 import ch.qos.logback.classic.spi.ThrowableProxy;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -13,7 +13,7 @@ public class PrefixedThrowableProxyConverterTest {
     private final PrefixedThrowableProxyConverter converter = new PrefixedThrowableProxyConverter();
     private final ThrowableProxy proxy = new ThrowableProxy(new IOException("noo"));
 
-    @Before
+    @BeforeEach
     public void setup() {
         converter.setOptionList(Collections.singletonList("full"));
         converter.start();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/SyslogAppenderFactoryTest.java
Patch:
@@ -10,7 +10,7 @@
 import io.dropwizard.logging.async.AsyncLoggingEventAppenderFactory;
 import io.dropwizard.logging.filter.NullLevelFilterFactory;
 import io.dropwizard.logging.layout.DropwizardLayoutFactory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.LoggerFactory;
 
 import java.util.Locale;

File: dropwizard-metrics-graphite/src/test/java/io/dropwizard/metrics/graphite/GraphiteReporterFactoryTest.java
Patch:
@@ -9,7 +9,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.validation.BaseValidator;
 import org.apache.commons.lang3.reflect.FieldUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 
 import java.util.Optional;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/ConsoleReporterFactoryTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.metrics;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/CsvReporterFactoryTest.java
Patch:
@@ -8,8 +8,8 @@
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 
@@ -22,7 +22,7 @@ public class CsvReporterFactoryTest {
                                            BaseValidator.newValidator(),
                                            objectMapper, "dw");
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleReporterFactory.class,
                                                            CsvReporterFactory.class,

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -8,8 +8,8 @@
 import io.dropwizard.util.Duration;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.util.EnumSet;
@@ -26,7 +26,7 @@ public class MetricsFactoryTest {
         MetricsFactory.class, BaseValidator.newValidator(), objectMapper, "dw");
     private MetricsFactory config;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleReporterFactory.class, CsvReporterFactory.class,
             Slf4jReporterFactory.class);

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/ScheduledReporterManagerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.ScheduledReporter;
 import io.dropwizard.util.Duration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.util.concurrent.TimeUnit;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/Slf4jReporterFactoryTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.metrics;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/CloseableLiquibaseTest.java
Patch:
@@ -5,8 +5,8 @@
 import io.dropwizard.db.ManagedPooledDataSource;
 import net.jcip.annotations.NotThreadSafe;
 import org.apache.tomcat.jdbc.pool.ConnectionPool;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -16,7 +16,7 @@ public class CloseableLiquibaseTest {
     CloseableLiquibase liquibase;
     ManagedPooledDataSource dataSource;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         DataSourceFactory factory = new DataSourceFactory();
 

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbCalculateChecksumCommandTest.java
Patch:
@@ -4,7 +4,7 @@
 import liquibase.change.CheckSum;
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStreamWriter;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbClearChecksumsCommandTest.java
Patch:
@@ -3,7 +3,7 @@
 import liquibase.Liquibase;
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.io.ByteArrayOutputStream;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbCommandTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDropAllCommandTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbFastForwardCommandTest.java
Patch:
@@ -3,8 +3,8 @@
 import io.dropwizard.util.Maps;
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 
@@ -27,7 +27,7 @@ public class DbFastForwardCommandTest extends AbstractMigrationTest {
 
     private DBI dbi;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         final String databaseUrl = getDatabaseUrl();
         conf = createConfiguration(databaseUrl);

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbGenerateDocsCommandTest.java
Patch:
@@ -3,7 +3,7 @@
 import liquibase.Liquibase;
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.io.ByteArrayOutputStream;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbLocksCommandTest.java
Patch:
@@ -4,7 +4,7 @@
 import liquibase.Liquibase;
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
 import java.io.ByteArrayOutputStream;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbMigrateCommandTest.java
Patch:
@@ -5,8 +5,8 @@
 import net.sourceforge.argparse4j.ArgumentParsers;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 
@@ -28,7 +28,7 @@ public class DbMigrateCommandTest extends AbstractMigrationTest {
     private TestMigrationConfiguration conf;
     private String databaseUrl;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         databaseUrl = getDatabaseUrl();
         conf = createConfiguration(databaseUrl);

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbMigrateCustomSchemaTest.java
Patch:
@@ -4,8 +4,8 @@
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
 import org.assertj.core.data.Index;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.skife.jdbi.v2.DBI;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -18,7 +18,7 @@ public class DbMigrateCustomSchemaTest extends AbstractMigrationTest {
     private TestMigrationConfiguration conf;
     private String databaseUrl;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         databaseUrl = getDatabaseUrl();
         conf = createConfiguration(databaseUrl);

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbPrepareRollbackCommandTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStreamWriter;
@@ -21,7 +21,7 @@ public class DbPrepareRollbackCommandTest extends AbstractMigrationTest {
             "migrations-ddl.xml");
     private TestMigrationConfiguration conf;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         final String databaseUrl = getDatabaseUrl();
         conf = createConfiguration(databaseUrl);

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbStatusCommandTest.java
Patch:
@@ -4,8 +4,8 @@
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
 import org.apache.commons.lang3.StringUtils;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -24,7 +24,7 @@ public class DbStatusCommandTest extends AbstractMigrationTest {
     private final ByteArrayOutputStream baos = new ByteArrayOutputStream();
     private TestMigrationConfiguration conf;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         conf = createConfiguration(getDatabaseUrl());
 

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbTagCommandTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStreamWriter;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbTestCommandTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.jcip.annotations.NotThreadSafe;
 import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStreamWriter;

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/ExternalRequestLogFactoryTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/RequestLogFactoryTest.java
Patch:
@@ -9,8 +9,8 @@
 import io.dropwizard.logging.SyslogAppenderFactory;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 
@@ -19,7 +19,7 @@
 public class RequestLogFactoryTest {
     private LogbackAccessRequestLogFactory logbackAccessRequestLogFactory;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         final ObjectMapper objectMapper = Jackson.newObjectMapper();
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class,

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/layout/LogbackAccessRequestLayoutTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.Context;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.TimeZone;
 

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/old/LogbackClassicRequestLogFactoryTest.java
Patch:
@@ -17,8 +17,8 @@
 import org.eclipse.jetty.server.HttpChannelState;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.Response;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
 
 import java.io.File;
@@ -41,7 +41,7 @@ public class LogbackClassicRequestLogFactoryTest {
 
     private RequestLogFactory<?> requestLog;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         final ObjectMapper objectMapper = Jackson.newObjectMapper();
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class, FileAppenderFactory.class,

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/CacheBustingFilterTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.servlets;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.mockito.InOrder;
 
 import javax.servlet.FilterChain;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/ServletsTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.servlets;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.http.HttpServletRequest;
 
@@ -13,7 +13,7 @@ public class ServletsTest {
     private final HttpServletRequest request = mock(HttpServletRequest.class);
     private final HttpServletRequest fullRequest = mock(HttpServletRequest.class);
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         when(request.getRequestURI()).thenReturn("/one/two");
         when(fullRequest.getRequestURI()).thenReturn("/one/two");

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/assets/ByteRangeTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.servlets.assets;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/GarbageCollectionTaskTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.servlets.tasks;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.PrintWriter;
 import java.util.Arrays;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/LogConfigurationTaskTest.java
Patch:
@@ -4,7 +4,7 @@
 import ch.qos.logback.classic.Logger;
 import ch.qos.logback.classic.LoggerContext;
 import io.dropwizard.util.Maps;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/PostBodyTaskTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.servlets.tasks;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/TaskServletTest.java
Patch:
@@ -4,8 +4,8 @@
 import com.codahale.metrics.annotation.ExceptionMetered;
 import com.codahale.metrics.annotation.Metered;
 import com.codahale.metrics.annotation.Timed;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import javax.servlet.ReadListener;
 import javax.servlet.ServletException;
@@ -40,7 +40,7 @@ public class TaskServletTest {
     private final HttpServletRequest request = mock(HttpServletRequest.class);
     private final HttpServletResponse response = mock(HttpServletResponse.class);
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         when(gc.getName()).thenReturn("gc");
         when(printJSON.getName()).thenReturn("print-json");

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/TaskTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.servlets.tasks;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.PrintWriter;
 import java.util.List;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/ConfigOverride.java
Patch:
@@ -1,11 +1,10 @@
 package io.dropwizard.testing;
 
 import java.util.function.Supplier;
-import io.dropwizard.testing.junit.DropwizardAppRule;
 
 /**
  * An override for a field in dropwizard configuration intended for use with
- * {@link DropwizardAppRule}.
+ * {@link io.dropwizard.testing.junit5.DropwizardAppExtension}.
  * <p>
  * Given a configuration file containing
  * <pre>

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DAOTest.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.testing.common;
 
 import io.dropwizard.logging.BootstrapLogging;
-import io.dropwizard.testing.junit.DAOTestRule;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.Transaction;
@@ -113,7 +112,7 @@ protected DAOTest buildDAOTest() {
     private final SessionFactory sessionFactory;
 
     /**
-     * Use {@link DAOTestRule#newBuilder()}
+     * Use {@link io.dropwizard.testing.junit5.DAOTestExtension#newBuilder()}
      */
     private DAOTest(SessionFactory sessionFactory) {
         this.sessionFactory = sessionFactory;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DAOTestRule.java
Patch:
@@ -34,8 +34,11 @@ public void createPerson() {
     }
  * </code></pre>
  * </p>
+ *
+ * @deprecated Deprecated since Dropwizard 2.0.0. Please migrate to JUnit 5 and {@link io.dropwizard.testing.junit5.DAOTestExtension}.
  */
 //@formatter:on
+@Deprecated
 public class DAOTestRule extends ExternalResource {
     private final DAOTest daoTest;
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardClientRule.java
Patch:
@@ -47,8 +47,11 @@ public void shouldPing() throws IOException {
  * <li>Stopping the application.</li>
  * </ul>
  * </p>
+ *
+ * @deprecated Deprecated since Dropwizard 2.0.0. Please migrate to JUnit 5 and {@link io.dropwizard.testing.junit5.DropwizardClientExtension}.
  */
 //@formatter:off
+@Deprecated
 public class DropwizardClientRule extends ExternalResource {
     private final DropwizardClient client;
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/MockitoTestRule.java
Patch:
@@ -30,7 +30,10 @@
  * @see org.junit.rules.RuleChain
  * @see <a href="https://github.com/junit-team/junit4/issues/351">#351: missing current instance in TestRule apply()</a>
  * @see <a href="https://github.com/mockito/mockito/issues/997">#997: ClassRule/TestRule version of Mockito's JUnitRule</a>
+ *
+ * @deprecated Deprecated since Dropwizard 2.0.0. Please migrate to JUnit 5.
  */
+@Deprecated
 public class MockitoTestRule implements TestRule {
     private final Object testInstance;
     private final MockitoRule delegate;

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java
Patch:
@@ -17,7 +17,10 @@
 
 /**
  * A JUnit {@link TestRule} for testing Jersey resources.
+ *
+ * @deprecated Deprecated since Dropwizard 2.0.0. Please migrate to JUnit 5 and {@link io.dropwizard.testing.junit5.ResourceExtension}.
  */
+@Deprecated
 public class ResourceTestRule implements TestRule {
     /**
      * A {@link ResourceTestRule} builder which enables configuration of a Jersey testing environment.

File: dropwizard-testing/src/test/java/io/dropwizard/testing/FixtureHelpersTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.testing;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static io.dropwizard.testing.FixtureHelpers.fixture;
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/old/LogbackClassicRequestLogFactory.java
Patch:
@@ -18,6 +18,7 @@
 import io.dropwizard.logging.filter.NullLevelFilterFactory;
 import io.dropwizard.logging.layout.LayoutFactory;
 import io.dropwizard.request.logging.RequestLogFactory;
+import org.eclipse.jetty.server.CustomRequestLog;
 import org.eclipse.jetty.server.RequestLog;
 import org.slf4j.LoggerFactory;
 
@@ -121,6 +122,6 @@ public RequestLog build(String name) {
             attachable.addAppender(appender.build(context, name, layoutFactory, levelFilterFactory, asyncAppenderFactory));
         }
 
-        return new DropwizardSlf4jRequestLog(attachable, timeZone);
+        return new CustomRequestLog(new DropwizardSlf4jRequestLogWriter(attachable), ClassicLogFormat.pattern(timeZone));
     }
 }

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/old/LogbackClassicRequestLogFactory.java
Patch:
@@ -18,6 +18,7 @@
 import io.dropwizard.logging.filter.NullLevelFilterFactory;
 import io.dropwizard.logging.layout.LayoutFactory;
 import io.dropwizard.request.logging.RequestLogFactory;
+import org.eclipse.jetty.server.CustomRequestLog;
 import org.eclipse.jetty.server.RequestLog;
 import org.slf4j.LoggerFactory;
 
@@ -121,6 +122,6 @@ public RequestLog build(String name) {
             attachable.addAppender(appender.build(context, name, layoutFactory, levelFilterFactory, asyncAppenderFactory));
         }
 
-        return new DropwizardSlf4jRequestLog(attachable, timeZone);
+        return new CustomRequestLog(new DropwizardSlf4jRequestLogWriter(attachable), ClassicLogFormat.pattern(timeZone));
     }
 }

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/TaskServlet.java
Patch:
@@ -116,7 +116,8 @@ protected void doGet(HttpServletRequest req,
     @Override
     protected void doPost(HttpServletRequest req,
                           HttpServletResponse resp) throws ServletException, IOException {
-        final Task task = tasks.get(req.getPathInfo());
+        final String pathInfo = req.getPathInfo();
+        final Task task = pathInfo != null ? tasks.get(pathInfo) : null;
         if (task != null) {
             resp.setContentType(CONTENT_TYPE);
             final PrintWriter output = resp.getWriter();

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/EventAttribute.java
Patch:
@@ -6,13 +6,13 @@
  * Represents event logging attributes.
  */
 public enum EventAttribute {
-
     @JsonProperty("level") LEVEL,
     @JsonProperty("threadName") THREAD_NAME,
     @JsonProperty("mdc") MDC,
     @JsonProperty("loggerName") LOGGER_NAME,
     @JsonProperty("message") MESSAGE,
     @JsonProperty("exception") EXCEPTION,
     @JsonProperty("contextName") CONTEXT_NAME,
-    @JsonProperty("timestamp") TIMESTAMP;
+    @JsonProperty("timestamp") TIMESTAMP,
+    @JsonProperty("callerData") CALLER_DATA
 }

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/EventJsonLayoutBaseFactory.java
Patch:
@@ -28,7 +28,7 @@
  * </tr>
  * <tr>
  * <td>{@code includes}</td>
- * <td>(level, threadName, mdc, loggerName, message, exception, timestamp)</td>
+ * <td>(level, threadName, mdc, loggerName, message, exception, timestamp, callerData)</td>
  * <td>Set of logging event attributes to include in the JSON map.</td>
  * </tr>
  * <tr>

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/LayoutIntegrationTests.java
Patch:
@@ -76,7 +76,8 @@ public void testDeserializeJson() throws Exception {
             EventAttribute.MESSAGE,
             EventAttribute.LOGGER_NAME,
             EventAttribute.EXCEPTION,
-            EventAttribute.TIMESTAMP);
+            EventAttribute.TIMESTAMP,
+            EventAttribute.CALLER_DATA);
         assertThat(factory.isFlattenMdc()).isTrue();
         assertThat(factory.getCustomFieldNames()).containsOnly(entry("timestamp", "@timestamp"));
         assertThat(factory.getAdditionalFields()).containsOnly(entry("service-name", "user-service"),

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/YamlConfigurationFactoryTest.java
Patch:
@@ -30,6 +30,6 @@ public void printsDetailedInformationOnMalformedContent() throws Exception {
             .hasMessageContaining(String.format(
                 "%s has an error:%n" +
                 "  * Malformed YAML at line: 3, column: 22; while parsing a flow sequence\n" +
-                " in 'reader', line 2, column 7:\n", malformedAdvancedFile.getName()));
+                " in 'reader'", malformedAdvancedFile.getName()));
     }
 }

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java
Patch:
@@ -69,7 +69,6 @@ private static ObjectMapper configure(ObjectMapper mapper) {
         mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());
         mapper.disable(FAIL_ON_UNKNOWN_PROPERTIES);
 
-        mapper.registerModule(new SafeJavaTimeModule());
         return mapper;
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
Patch:
@@ -175,7 +175,7 @@ public void testCurrentLogFileNameIsEmptyAndAppenderUsesArchivedNameInstead() th
 
         final String file = rollingAppender.getFile();
         assertThat(new File(file)).hasName("test-archived-name-" +
-            LocalDateTime.now().format(DateTimeFormatter.ofPattern("YYYY-MM-dd")) + ".log");
+            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")) + ".log");
     }
 
     @Test

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -18,6 +18,7 @@
 public class ExecutorServiceBuilder {
     private static Logger log = LoggerFactory.getLogger(ExecutorServiceBuilder.class);
 
+    private static final AtomicLong COUNT = new AtomicLong(0);
     private final LifecycleEnvironment environment;
     private final String nameFormat;
     private int corePoolSize;
@@ -47,11 +48,10 @@ public ExecutorServiceBuilder(LifecycleEnvironment environment, String nameForma
     }
 
     private static ThreadFactory buildThreadFactory(String nameFormat) {
-        final AtomicLong count = (nameFormat != null) ? new AtomicLong(0) : null;
         return r -> {
             final Thread thread = Executors.defaultThreadFactory().newThread(r);
             if (nameFormat != null) {
-                thread.setName(String.format(Locale.ROOT, nameFormat, count.incrementAndGet()));
+                thread.setName(String.format(Locale.ROOT, nameFormat, COUNT.incrementAndGet()));
             }
             return thread;
         };

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ScheduledExecutorServiceBuilder.java
Patch:
@@ -14,6 +14,7 @@
 
 public class ScheduledExecutorServiceBuilder {
 
+    private static final AtomicLong COUNT = new AtomicLong(0);
     private final LifecycleEnvironment environment;
     private final String nameFormat;
     private int poolSize;
@@ -37,11 +38,10 @@ public ScheduledExecutorServiceBuilder(LifecycleEnvironment environment, String
     }
 
     private static ThreadFactory buildThreadFactory(String nameFormat, boolean daemon) {
-        final AtomicLong count = (nameFormat != null) ? new AtomicLong(0) : null;
         return r -> {
             final Thread thread = Executors.defaultThreadFactory().newThread(r);
             if (nameFormat != null) {
-                thread.setName(String.format(Locale.ROOT, nameFormat, count.incrementAndGet()));
+                thread.setName(String.format(Locale.ROOT, nameFormat, COUNT.incrementAndGet()));
             }
             thread.setDaemon(daemon);
             return thread;

File: dropwizard-core/src/main/java/io/dropwizard/cli/EnvironmentCommand.java
Patch:
@@ -31,7 +31,7 @@ protected EnvironmentCommand(Application<T> application, String name, String des
     protected void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration) throws Exception {
         final Environment environment = new Environment(bootstrap.getApplication().getName(),
                                                         bootstrap.getObjectMapper(),
-                                                        bootstrap.getValidatorFactory().getValidator(),
+                                                        bootstrap.getValidatorFactory(),
                                                         bootstrap.getMetricRegistry(),
                                                         bootstrap.getClassLoader(),
                                                         bootstrap.getHealthCheckRegistry());

File: dropwizard-e2e/src/test/java/com/example/validation/InjectValidatorTest.java
Patch:
@@ -12,11 +12,11 @@
 import static io.dropwizard.testing.ResourceHelpers.resourceFilePath;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class InjectValidatorBundleTest {
+public class InjectValidatorTest {
 
     @ClassRule
     public static final DropwizardAppRule<Configuration> RULE = new DropwizardAppRule<>(
-        InjectValidatorApp.class,
+        DefaultValidatorApp.class,
         resourceFilePath("app1/config.yml")
     );
 

File: dropwizard-core/src/main/java/io/dropwizard/cli/EnvironmentCommand.java
Patch:
@@ -31,7 +31,7 @@ protected EnvironmentCommand(Application<T> application, String name, String des
     protected void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration) throws Exception {
         final Environment environment = new Environment(bootstrap.getApplication().getName(),
                                                         bootstrap.getObjectMapper(),
-                                                        bootstrap.getValidatorFactory().getValidator(),
+                                                        bootstrap.getValidatorFactory(),
                                                         bootstrap.getMetricRegistry(),
                                                         bootstrap.getClassLoader(),
                                                         bootstrap.getHealthCheckRegistry());

File: dropwizard-e2e/src/test/java/com/example/validation/InjectValidatorTest.java
Patch:
@@ -12,11 +12,11 @@
 import static io.dropwizard.testing.ResourceHelpers.resourceFilePath;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class InjectValidatorBundleTest {
+public class InjectValidatorTest {
 
     @ClassRule
     public static final DropwizardAppRule<Configuration> RULE = new DropwizardAppRule<>(
-        InjectValidatorApp.class,
+        DefaultValidatorApp.class,
         resourceFilePath("app1/config.yml")
     );
 

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java
Patch:
@@ -65,6 +65,7 @@ private static ObjectMapper configure(ObjectMapper mapper) {
         mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());
         mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());
 
+        mapper.registerModule(new SafeJavaTimeModule());
         return mapper;
     }
 }

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/EnvironmentVariableLookup.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.configuration;
 
-import org.apache.commons.text.StrLookup;
+import org.apache.commons.text.lookup.StringLookup;
 
 /**
  * A custom {@link org.apache.commons.text.StrLookup} implementation using environment variables as lookup source.
  */
-public class EnvironmentVariableLookup extends StrLookup<Object> {
+public class EnvironmentVariableLookup implements StringLookup {
     private final boolean strict;
 
     /**

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/EnvironmentVariableSubstitutor.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.configuration;
 
-import org.apache.commons.text.StrSubstitutor;
+import org.apache.commons.text.StringSubstitutor;
 
 /**
  * A custom {@link StrSubstitutor} using environment variables as lookup source.
  */
-public class EnvironmentVariableSubstitutor extends StrSubstitutor {
+public class EnvironmentVariableSubstitutor extends StringSubstitutor {
     public EnvironmentVariableSubstitutor() {
         this(true, false);
     }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DefaultLoggingFactoryTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.text.StrSubstitutor;
+import org.apache.commons.text.StringSubstitutor;
 import org.assertj.core.data.MapEntry;
 import org.junit.Before;
 import org.junit.Rule;
@@ -96,7 +96,7 @@ public void testConfigure() throws Exception {
         final File newAppLog = folder.newFile("example-new-app.log");
         final File newAppNotAdditiveLog = folder.newFile("example-new-app-not-additive.log");
         final File defaultLog = folder.newFile("example.log");
-        final StrSubstitutor substitutor = new StrSubstitutor(Maps.of(
+        final StringSubstitutor substitutor = new StringSubstitutor(Maps.of(
                 "new_app", StringUtils.removeEnd(newAppLog.getAbsolutePath(), ".log"),
                 "new_app_not_additive", StringUtils.removeEnd(newAppNotAdditiveLog.getAbsolutePath(), ".log"),
                 "default", StringUtils.removeEnd(defaultLog.getAbsolutePath(), ".log")

File: dropwizard-logging/src/test/java/io/dropwizard/logging/TcpSocketAppenderFactoryTest.java
Patch:
@@ -11,7 +11,7 @@
 import io.dropwizard.util.Resources;
 import io.dropwizard.util.Size;
 import io.dropwizard.validation.BaseValidator;
-import org.apache.commons.text.StrSubstitutor;
+import org.apache.commons.text.StringSubstitutor;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -70,7 +70,7 @@ public void testParseConfig() throws Exception {
     public void testTestTcpLogging() throws Exception {
         DefaultLoggingFactory loggingFactory = yamlConfigurationFactory.build(new SubstitutingSourceProvider(
                 new ResourceConfigurationSourceProvider(),
-                new StrSubstitutor(Collections.singletonMap("tcp.server.port", tcpServer.getPort()))),
+                new StringSubstitutor(Collections.singletonMap("tcp.server.port", tcpServer.getPort()))),
             "yaml/logging-tcp.yml");
         loggingFactory.configure(new MetricRegistry(), "tcp-test");
 
@@ -88,7 +88,7 @@ public void testTestTcpLogging() throws Exception {
     public void testBufferingTcpLogging() throws Exception {
         DefaultLoggingFactory loggingFactory = yamlConfigurationFactory.build(new SubstitutingSourceProvider(
             new ResourceConfigurationSourceProvider(),
-                new StrSubstitutor(Collections.singletonMap("tcp.server.port", tcpServer.getPort()))),
+                new StringSubstitutor(Collections.singletonMap("tcp.server.port", tcpServer.getPort()))),
             "yaml/logging-tcp-buffered.yml");
         loggingFactory.configure(new MetricRegistry(), "tcp-test");
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/ThrottlingAppenderWrapperTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import javax.annotation.Nullable;
 
-import org.apache.commons.text.StrSubstitutor;
+import org.apache.commons.text.StringSubstitutor;
 import org.assertj.core.api.Condition;
 import org.junit.After;
 import org.junit.Before;
@@ -127,7 +127,7 @@ private void runLineTest(final Duration messageRate, final int lineCount, final
 
         @SuppressWarnings("unchecked")
         final ConsoleAppenderFactory<ILoggingEvent> config = this.factory.build(
-            new SubstitutingSourceProvider(new FileConfigurationSourceProvider(), new StrSubstitutor(variables)),
+            new SubstitutingSourceProvider(new FileConfigurationSourceProvider(), new StringSubstitutor(variables)),
             this.findResource("/yaml/logging-message-rate.yml").getPath());
 
         final DefaultLoggingFactory defaultLoggingFactory = new DefaultLoggingFactory();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/TlsSocketAppenderFactoryTest.java
Patch:
@@ -10,7 +10,7 @@
 import io.dropwizard.util.Maps;
 import io.dropwizard.util.Resources;
 import io.dropwizard.validation.BaseValidator;
-import org.apache.commons.text.StrSubstitutor;
+import org.apache.commons.text.StringSubstitutor;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
 import org.junit.Before;
 import org.junit.Rule;
@@ -62,7 +62,7 @@ private static File resourcePath(String path) throws URISyntaxException {
     @Test
     public void testTlsLogging() throws Exception {
         DefaultLoggingFactory loggingFactory = yamlConfigurationFactory.build(new SubstitutingSourceProvider(
-            new ResourceConfigurationSourceProvider(), new StrSubstitutor(Maps.of(
+            new ResourceConfigurationSourceProvider(), new StringSubstitutor(Maps.of(
             "tls.trust_store.path", resourcePath("stores/tls_client.jks").getAbsolutePath(),
             "tls.trust_store.pass", "client_pass",
             "tls.server_port", tcpServer.getPort()

File: dropwizard-logging/src/test/java/io/dropwizard/logging/ThrottlingAppenderTest.java
Patch:
@@ -115,7 +115,7 @@ public void overThrottlingLimit() throws Exception {
         assertThat(throttledLines(Duration.milliseconds(100)))
             .doesNotHaveDuplicates()
             .haveAtLeast(9, containsApplicationLog)
-            .haveAtMost(12, containsApplicationLog);
+            .haveAtMost(13, containsApplicationLog);
     }
 
     @Test

File: dropwizard-auth/src/test/java/io/dropwizard/auth/AbstractAuthResourceConfig.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.auth;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.hk2.utilities.binding.AbstractBinder;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
+import org.glassfish.jersey.test.TestProperties;
 
 import javax.ws.rs.container.ContainerRequestFilter;
 import javax.ws.rs.container.DynamicFeature;
@@ -12,7 +12,8 @@
 public abstract class AbstractAuthResourceConfig extends DropwizardResourceConfig {
 
     public AbstractAuthResourceConfig() {
-        super(true, new MetricRegistry());
+        super();
+        property(TestProperties.CONTAINER_PORT, "0");
         register(getAuthDynamicFeature(getAuthFilter()));
         register(getAuthBinder());
         register(RolesAllowedDynamicFeature.class);

File: dropwizard-auth/src/test/java/io/dropwizard/auth/chained/ChainedAuthProviderTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.auth.chained;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.auth.AuthBaseTest;
 import io.dropwizard.auth.AuthDynamicFeature;
 import io.dropwizard.auth.AuthFilter;
@@ -13,6 +12,7 @@
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.core.HttpHeaders;
@@ -27,7 +27,7 @@ public class ChainedAuthProviderTest extends AuthBaseTest<ChainedAuthProviderTes
     public static class ChainedAuthTestResourceConfig extends DropwizardResourceConfig {
         @SuppressWarnings("unchecked")
         public ChainedAuthTestResourceConfig() {
-            super(true, new MetricRegistry());
+            super();
 
             final Authorizer<Principal> authorizer = AuthUtil.getTestAuthorizer(ADMIN_USER, ADMIN_ROLE);
             final AuthFilter<BasicCredentials, Principal> basicAuthFilter = new BasicCredentialAuthFilter.Builder<>()
@@ -41,6 +41,7 @@ public ChainedAuthTestResourceConfig() {
                 .setAuthorizer(authorizer)
                 .buildAuthFilter();
 
+            property(TestProperties.CONTAINER_PORT, "0");
             register(new AuthValueFactoryProvider.Binder(Principal.class));
             register(new AuthDynamicFeature(new ChainedAuthFilter<>(buildHandlerList(basicAuthFilter, oAuthFilter))));
             register(RolesAllowedDynamicFeature.class);

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/DropwizardResourceConfigBenchmark.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.benchmarks.jersey;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
 import org.openjdk.jmh.annotations.Benchmark;
@@ -29,8 +28,7 @@
 @State(Scope.Benchmark)
 public class DropwizardResourceConfigBenchmark {
 
-    private DropwizardResourceConfig dropwizardResourceConfig =
-            new DropwizardResourceConfig(true, new MetricRegistry());
+    private DropwizardResourceConfig dropwizardResourceConfig = DropwizardResourceConfig.forTesting();
 
     @Setup
     public void setUp() throws Exception {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/AsyncServletTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.dummy.DummyResource;
 import org.junit.Test;
 
@@ -14,7 +13,7 @@ public class AsyncServletTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(DummyResource.class);
     }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/DropwizardResourceConfigTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.dummy.DummyResource;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.hk2.utilities.binding.AbstractBinder;
@@ -29,7 +28,7 @@ public class DropwizardResourceConfigTest {
 
     @Before
     public void setUp() {
-        rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
+        rc = DropwizardResourceConfig.forTesting();
     }
 
     // Start and stop a jersey test instance so that our resource config

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/JerseyContentTypeTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.dummy.DummyResource;
 import org.junit.Test;
 
@@ -14,7 +13,7 @@ public class JerseyContentTypeTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(DummyResource.class);
     }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/caching/CacheControlledResponseFeatureTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.caching;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -16,7 +15,7 @@ public class CacheControlledResponseFeatureTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
+        ResourceConfig rc = DropwizardResourceConfig.forTesting();
         rc = rc.register(CachingResource.class);
         return rc;
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/ErrorEntityWriterTest.java
Patch:
@@ -1,12 +1,12 @@
 package io.dropwizard.jersey.errors;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -23,8 +23,9 @@ public class ErrorEntityWriterTest extends AbstractJerseyTest {
 
     public static class ErrorEntityWriterTestResourceConfig extends DropwizardResourceConfig {
         public ErrorEntityWriterTestResourceConfig() {
-            super(true, new MetricRegistry());
+            super();
 
+            property(TestProperties.CONTAINER_PORT, "0");
             register(DefaultLoggingExceptionMapper.class);
             register(DefaultJacksonMessageBodyProvider.class);
             register(ExceptionResource.class);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.errors;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.junit.Test;
@@ -21,7 +20,7 @@ public class LoggingExceptionMapperTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(DefaultLoggingExceptionMapper.class)
                 .register(DefaultJacksonMessageBodyProvider.class)
                 .register(ExceptionResource.class);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/AllowedMethodsFilterTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.filter;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -58,7 +57,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
-        final ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
+        final ResourceConfig rc = DropwizardResourceConfig.forTesting();
 
         final Map<String, String> filterParams = Collections.singletonMap(AllowedMethodsFilter.ALLOWED_METHODS_PARAM, "GET,POST");
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalCookieParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.guava;
 
-import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -22,7 +21,7 @@ public class OptionalCookieParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalCookieParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalFormParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.guava;
 
-import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -25,7 +24,7 @@ public class OptionalFormParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalFormParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalHeaderParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.guava;
 
-import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -22,7 +21,7 @@ public class OptionalHeaderParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalHeaderParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalMessageBodyWriterTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.guava;
 
-import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -24,7 +23,7 @@ public class OptionalMessageBodyWriterTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(new EmptyOptionalExceptionMapper())
                 .register(OptionalReturnResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.guava;
 
-import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -22,7 +21,7 @@ public class OptionalQueryParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalQueryParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.jackson;
 
-import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.dropwizard.jersey.AbstractJerseyTest;
@@ -23,7 +22,7 @@ public class JsonProcessingExceptionMapperTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .packages("io.dropwizard.jersey.jackson")
                 .register(new LoggingExceptionMapper<Throwable>() { });
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalCookieParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.MyMessage;
@@ -22,7 +21,7 @@ public class OptionalCookieParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalCookieParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalDoubleMessageBodyWriterTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.junit.Test;
@@ -24,7 +23,7 @@ public class OptionalDoubleMessageBodyWriterTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                     .register(new EmptyOptionalExceptionMapper())
                     .register(OptionalDoubleReturnResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalFormParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.MyMessage;
@@ -25,7 +24,7 @@ public class OptionalFormParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalFormParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalHeaderParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.MyMessage;
@@ -22,7 +21,7 @@ public class OptionalHeaderParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalHeaderParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalIntMessageBodyWriterTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.junit.Test;
@@ -24,7 +23,7 @@ public class OptionalIntMessageBodyWriterTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(new EmptyOptionalExceptionMapper())
                 .register(OptionalIntReturnResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalLongMessageBodyWriterTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.junit.Test;
@@ -24,7 +23,7 @@ public class OptionalLongMessageBodyWriterTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(new EmptyOptionalExceptionMapper())
                 .register(OptionalLongReturnResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalMessageBodyWriterTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.junit.Test;
@@ -24,7 +23,7 @@ public class OptionalMessageBodyWriterTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(new EmptyOptionalExceptionMapper())
                 .register(OptionalReturnResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalQueryParamResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.optional;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.MyMessage;
@@ -22,7 +21,7 @@ public class OptionalQueryParamResourceTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(OptionalQueryParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/NonEmptyStringParamProviderTest.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.jersey.params;
 
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.junit.Test;
@@ -17,7 +16,7 @@ public class NonEmptyStringParamProviderTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(NonEmptyStringParamResource.class);
     }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/FlashFactoryTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.sessions;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -32,7 +31,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
-        final ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
+        final ResourceConfig rc = DropwizardResourceConfig.forTesting();
 
         return ServletDeploymentContext.builder(rc)
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, DropwizardResourceConfig.class.getName())

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/HttpSessionFactoryTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.sessions;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -33,7 +32,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
-        final ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
+        final ResourceConfig rc = DropwizardResourceConfig.forTesting();
         return ServletDeploymentContext.builder(rc)
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, DropwizardResourceConfig.class.getName())
                 .initParam(ServerProperties.PROVIDER_CLASSNAMES, SessionResource.class.getName())

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.validation;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.AbstractJerseyTest;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProviderTest.Example;
@@ -31,7 +30,7 @@ public class ConstraintViolationExceptionMapperTest extends AbstractJerseyTest {
 
     @Override
     protected Application configure() {
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .packages("io.dropwizard.jersey.validation")
                 .register(new ValidatingResource2())
                 .register(new HibernateValidationBinder(Validators.newValidator()));

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DropwizardTestResourceConfig.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.testing.common;
 
-import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.jackson.JacksonFeature;
 import io.dropwizard.jersey.validation.HibernateValidationBinder;
 import io.dropwizard.setup.ExceptionMapperBinder;
 import org.glassfish.jersey.server.ServerProperties;
+import org.glassfish.jersey.test.TestProperties;
 
 import javax.servlet.ServletConfig;
 import javax.ws.rs.core.Context;
@@ -30,8 +30,9 @@ class DropwizardTestResourceConfig extends DropwizardResourceConfig {
     static final String CONFIGURATION_ID = "io.dropwizard.testing.junit.resourceTestJerseyConfigurationId";
 
     DropwizardTestResourceConfig(ResourceTestJerseyConfiguration configuration) {
-        super(true, new MetricRegistry());
+        super();
 
+        property(TestProperties.CONTAINER_PORT, "0");
         if (configuration.registerDefaultExceptionMappers) {
             register(new ExceptionMapperBinder(false));
         }

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/MultipleContentTypeTest.java
Patch:
@@ -8,7 +8,6 @@
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderer;
 import org.glassfish.jersey.test.JerseyTest;
-import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.GET;
@@ -36,9 +35,8 @@ public class MultipleContentTypeTest extends JerseyTest {
 
     @Override
     protected Application configure() {
-        forceSet(TestProperties.CONTAINER_PORT, "0");
         final ViewRenderer renderer = new FreemarkerViewRenderer();
-        return DropwizardResourceConfig.forTesting(new MetricRegistry())
+        return DropwizardResourceConfig.forTesting()
                 .register(new ViewMessageBodyWriter(new MetricRegistry(), Collections.singletonList(renderer)))
                 .register(new InfoMessageBodyWriter())
                 .register(new ExampleResource());

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererFileSystemTest.java
Patch:
@@ -1,13 +1,13 @@
 package io.dropwizard.views.mustache;
 
 import com.codahale.metrics.MetricRegistry;
+import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderExceptionMapper;
 import io.dropwizard.views.ViewRenderer;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
-import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.GET;
@@ -62,8 +62,7 @@ public ErrorView showError() {
 
     @Override
     protected Application configure() {
-        forceSet(TestProperties.CONTAINER_PORT, "0");
-        ResourceConfig config = new ResourceConfig();
+        ResourceConfig config = DropwizardResourceConfig.forTesting();
         final ViewRenderer renderer = new MustacheViewRenderer();
         renderer.configure(Collections.singletonMap("fileRoot", "src/test/resources"));
         config.register(new ViewMessageBodyWriter(new MetricRegistry(), Collections.singletonList(renderer)));

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -1,13 +1,13 @@
 package io.dropwizard.views.mustache;
 
 import com.codahale.metrics.MetricRegistry;
+import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderExceptionMapper;
 import io.dropwizard.views.ViewRenderer;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
-import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.GET;
@@ -56,8 +56,7 @@ public ErrorView showError() {
 
     @Override
     protected Application configure() {
-        forceSet(TestProperties.CONTAINER_PORT, "0");
-        ResourceConfig config = new ResourceConfig();
+        ResourceConfig config = DropwizardResourceConfig.forTesting();
         final ViewRenderer renderer = new MustacheViewRenderer();
         config.register(new ViewMessageBodyWriter(new MetricRegistry(), Collections.singletonList(renderer)));
         config.register(new ViewRenderExceptionMapper());

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NetUtilTest.java
Patch:
@@ -55,6 +55,9 @@ public void testOsSetting() {
         assumeThat(System.getProperty(OS_NAME_PROPERTY), containsString("Linux"));
         assumeThat(isTcpBacklogSettingReadable(), is(true));
         assertNotEquals(-1, NetUtil.getTcpBacklog(-1));
+        assertThat(NetUtil.getTcpBacklog())
+            .as("NetUtil should read more than the first character of somaxconn")
+            .isGreaterThan(2);
     }
 
     @Test

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpsConnectorFactory.java
Patch:
@@ -182,7 +182,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code excludedProtocols}</td>
- *         <td>Jetty's default</td>
+ *         <td>["SSL.*", "TLSv1", "TLSv1\.1"]</td>
  *         <td>
  *             A list of protocols (e.g., {@code SSLv3}, {@code TLSv1}) which are excluded. These
  *             protocols will be refused.
@@ -287,7 +287,7 @@ public class HttpsConnectorFactory extends HttpConnectorFactory {
     private List<String> supportedProtocols;
 
     @Nullable
-    private List<String> excludedProtocols;
+    private List<String> excludedProtocols = Arrays.asList("SSL.*", "TLSv1", "TLSv1\\.1");
 
     @Nullable
     private List<String> supportedCipherSuites;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/setup/JerseyEnvironment.java
Patch:
@@ -93,7 +93,7 @@ public void property(String name, @Nullable Object value) {
      * @param name the name of the Jersey property
      * @see org.glassfish.jersey.server.ResourceConfig
      */
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "TypeParameterUnusedInFormals"})
     @Nullable
     public <T> T getProperty(String name) {
         return (T) config.getProperties().get(name);

File: dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/layout/TimestampFormatter.java
Patch:
@@ -6,7 +6,6 @@
 import java.time.Instant;
 import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
-import java.util.Map;
 import java.util.Optional;
 
 /**
@@ -15,7 +14,7 @@
  */
 public class TimestampFormatter {
 
-    private static final Map<String, DateTimeFormatter> FORMATTERS = ImmutableMap.<String, DateTimeFormatter>builder()
+    private static final ImmutableMap<String, DateTimeFormatter> FORMATTERS = ImmutableMap.<String, DateTimeFormatter>builder()
         .put("ISO_LOCAL_DATE", DateTimeFormatter.ISO_LOCAL_DATE)
         .put("ISO_OFFSET_DATE", DateTimeFormatter.ISO_OFFSET_DATE)
         .put("ISO_DATE", DateTimeFormatter.ISO_DATE)

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/AbstractMigrationTest.java
Patch:
@@ -11,14 +11,15 @@
 public class AbstractMigrationTest {
 
     static {
-        ArgumentParsers.setTerminalWidthDetection(false);
         SqlGeneratorFactory.getInstance().unregister(AddColumnGeneratorSQLite.class);
     }
 
     protected static final String UTF_8 = "UTF-8";
 
     protected static Subparser createSubparser(AbstractLiquibaseCommand<?> command) {
-        final Subparser subparser = ArgumentParsers.newArgumentParser("db")
+        final Subparser subparser = ArgumentParsers.newFor("db")
+            .terminalWidthDetection(false)
+            .build()
             .addSubparsers()
             .addParser(command.getName())
             .description(command.getDescription());

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java
Patch:
@@ -35,7 +35,7 @@
 @NotThreadSafe
 public class DbDumpCommandTest extends AbstractMigrationTest {
 
-    private static final List<String> ATTRIBUTE_NAMES = ImmutableList.of("columns", "foreign-keys", "indexes",
+    private static final ImmutableList<String> ATTRIBUTE_NAMES = ImmutableList.of("columns", "foreign-keys", "indexes",
         "primary-keys", "sequences", "tables", "unique-constraints", "views");
     private static DocumentBuilder xmlParser;
 

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbMigrateCommandTest.java
Patch:
@@ -65,7 +65,9 @@ public void testDryRun() throws Exception {
 
     @Test
     public void testPrintHelp() throws Exception {
-        final Subparser subparser = ArgumentParsers.newArgumentParser("db")
+        final Subparser subparser = ArgumentParsers.newFor("db")
+                .terminalWidthDetection(false)
+                .build()
                 .addSubparsers()
                 .addParser(migrateCommand.getName())
                 .description(migrateCommand.getDescription());

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/assets/AssetServlet.java
Patch:
@@ -251,9 +251,9 @@ private ImmutableList<ByteRange> parseRangeHeader(final String rangeHeader,
             final int resourceLength) {
         final ImmutableList.Builder<ByteRange> builder = ImmutableList.builder();
         if (rangeHeader.contains("=")) {
-            final String[] parts = rangeHeader.split("=");
-            if (parts.length > 1) {
-                final List<String> ranges = Splitter.on(",").trimResults().splitToList(parts[1]);
+            final List<String> parts = Splitter.on("=").splitToList(rangeHeader);
+            if (parts.size() > 1) {
+                final List<String> ranges = Splitter.on(",").trimResults().splitToList(parts.get(1));
                 for (final String range : ranges) {
                     builder.add(ByteRange.parse(range, resourceLength));
                 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -266,7 +266,7 @@ public Application<C> newApplication() {
         }
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "TypeParameterUnusedInFormals"})
     public <A extends Application<C>> A getApplication() {
         return (A) requireNonNull(application);
     }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardAppRule.java
Patch:
@@ -192,7 +192,7 @@ public Application<C> newApplication() {
         return testSupport.newApplication();
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "TypeParameterUnusedInFormals"})
     public <A extends Application<C>> A getApplication() {
         return testSupport.getApplication();
     }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit5/DropwizardAppExtension.java
Patch:
@@ -190,7 +190,7 @@ public Application<C> newApplication() {
         return testSupport.newApplication();
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "TypeParameterUnusedInFormals"})
     public <A extends Application<C>> A getApplication() {
         return testSupport.getApplication();
     }

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/MultipleContentTypeTest.java
Patch:
@@ -129,7 +129,7 @@ public String getContent() {
 
     @Provider
     @Produces(MediaType.APPLICATION_JSON)
-    public class InfoMessageBodyWriter implements MessageBodyWriter<Info> {
+    public static class InfoMessageBodyWriter implements MessageBodyWriter<Info> {
         @Override
         public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {
             return Info.class.isAssignableFrom(type);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/RequestIdFilter.java
Patch:
@@ -55,7 +55,7 @@ public void filter(final ContainerRequestContext request,
      * Generate a random UUID v4 that will perform reasonably when used by
      * multiple threads under load.
      *
-     * @see https://github.com/Netflix/netflix-commons/blob/v0.3.0/netflix-commons-util/src/main/java/com/netflix/util/concurrent/ConcurrentUUIDFactory.java
+     * @see <a href="https://github.com/Netflix/netflix-commons/blob/v0.3.0/netflix-commons-util/src/main/java/com/netflix/util/concurrent/ConcurrentUUIDFactory.java">ConcurrentUUIDFactory</a>
      * @return random UUID
      */
     private static UUID generateRandomUuid() {

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -50,12 +50,12 @@
  *
  * <p>A resource method with a view would looks something like this:</p>
  *
- * <pre><code>
- * @GET
+ * <pre>
+ * &#64;GET
  * public PersonView getPerson(@PathParam("id") String id) {
  *     return new PersonView(dao.find(id));
  * }
- * </code></pre>
+ * </pre>
  *
  * <p>Freemarker templates look something like this:</p>
  *

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/RequestIdFilter.java
Patch:
@@ -55,7 +55,7 @@ public void filter(final ContainerRequestContext request,
      * Generate a random UUID v4 that will perform reasonably when used by
      * multiple threads under load.
      *
-     * @see https://github.com/Netflix/netflix-commons/blob/v0.3.0/netflix-commons-util/src/main/java/com/netflix/util/concurrent/ConcurrentUUIDFactory.java
+     * @see <a href="https://github.com/Netflix/netflix-commons/blob/v0.3.0/netflix-commons-util/src/main/java/com/netflix/util/concurrent/ConcurrentUUIDFactory.java">ConcurrentUUIDFactory</a>
      * @return random UUID
      */
     private static UUID generateRandomUuid() {

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -50,12 +50,12 @@
  *
  * <p>A resource method with a view would looks something like this:</p>
  *
- * <pre><code>
- * @GET
+ * <pre>
+ * &#64;GET
  * public PersonView getPerson(@PathParam("id") String id) {
  *     return new PersonView(dao.find(id));
  * }
- * </code></pre>
+ * </pre>
  *
  * <p>Freemarker templates look something like this:</p>
  *

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -106,7 +106,7 @@ private static boolean isFlag(String[][] flags, String[] arguments) {
 
     private ArgumentParser buildParser(JarLocation location) {
         final String usage = "java -jar " + location;
-        final ArgumentParser p = ArgumentParsers.newArgumentParser(usage, false);
+        final ArgumentParser p = ArgumentParsers.newFor(usage).addHelp(false).build();
         p.version(location.getVersion().orElse(
                 "No application version detected. Add a Implementation-Version " +
                         "entry to your JAR's manifest to enable this."));

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -106,7 +106,7 @@ private static boolean isFlag(String[][] flags, String[] arguments) {
 
     private ArgumentParser buildParser(JarLocation location) {
         final String usage = "java -jar " + location;
-        final ArgumentParser p = ArgumentParsers.newArgumentParser(usage, false);
+        final ArgumentParser p = ArgumentParsers.newFor(usage).addHelp(false).build();
         p.version(location.getVersion().orElse(
                 "No application version detected. Add a Implementation-Version " +
                         "entry to your JAR's manifest to enable this."));

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/SelfValidatingClass.java
Patch:
@@ -5,12 +5,14 @@
 import io.dropwizard.validation.selfvalidating.SelfValidation;
 import io.dropwizard.validation.selfvalidating.ViolationCollector;
 
+import javax.annotation.Nullable;
 import javax.validation.constraints.NotNull;
 import javax.ws.rs.QueryParam;
 
 @SelfValidating
 public class SelfValidatingClass {
 
+    @Nullable
     @JsonProperty
     private Integer answer;
 
@@ -23,7 +25,7 @@ public SelfValidatingClass(@NotNull @QueryParam("answer") Integer answer) {
 
     @SelfValidation
     public void validate(ViolationCollector collector) {
-        if (!answer.equals(42)) {
+        if (answer == null || !answer.equals(42)) {
             collector.addViolation("The answer is 42");
         }
     }

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/BaseConfigurationFactoryTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Map;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
@@ -318,12 +319,11 @@ public void throwsAnExceptionOnUnexpectedArrayOverride() throws Exception {
         }
     }
 
-    @Test(expected = ConfigurationParsingException.class)
+    @Test
     public void throwsAnExceptionOnArrayOverrideWithInvalidType() throws Exception {
         System.setProperty("dw.servers", "one,two");
 
-        factory.build(validFile);
-        failBecauseExceptionWasNotThrown(ConfigurationParsingException.class);
+        assertThatExceptionOfType(ConfigurationParsingException.class).isThrownBy(() -> factory.build(validFile));
     }
 
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/FixtureHelpersTest.java
Patch:
@@ -4,15 +4,16 @@
 
 import static io.dropwizard.testing.FixtureHelpers.fixture;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
 
 public class FixtureHelpersTest {
     @Test
     public void readsTheFileAsAString() {
         assertThat(fixture("fixtures/fixture.txt")).isEqualTo("YAY FOR ME");
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void throwsIllegalStateExceptionWhenFileDoesNotExist() {
-        fixture("this-does-not-exist.foo");
+        assertThatIllegalArgumentException().isThrownBy(() -> fixture("this-does-not-exist.foo"));
     }
 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/DropwizardTestResourceConfig.java
Patch:
@@ -11,6 +11,7 @@
 import javax.ws.rs.core.Context;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.function.Supplier;
 
 import static java.util.Objects.requireNonNull;
 
@@ -43,8 +44,8 @@ class DropwizardTestResourceConfig extends DropwizardResourceConfig {
         }
         register(new JacksonBinder(configuration.mapper));
         register(new HibernateValidationFeature(configuration.validator));
-        for (Object singleton : configuration.singletons) {
-            register(singleton);
+        for (Supplier<?> singleton : configuration.singletons) {
+            register(singleton.get());
         }
     }
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/common/ResourceTestJerseyConfiguration.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Consumer;
+import java.util.function.Supplier;
 
 /**
  * A configuration of a Jersey testing environment.
@@ -17,7 +18,7 @@
  */
 class ResourceTestJerseyConfiguration {
 
-    final Set<Object> singletons;
+    final Set<Supplier<?>> singletons;
     final Set<Class<?>> providers;
     final Map<String, Object> properties;
     final ObjectMapper mapper;
@@ -26,7 +27,7 @@ class ResourceTestJerseyConfiguration {
     final TestContainerFactory testContainerFactory;
     final boolean registerDefaultExceptionMappers;
 
-    ResourceTestJerseyConfiguration(Set<Object> singletons, Set<Class<?>> providers, Map<String, Object> properties,
+    ResourceTestJerseyConfiguration(Set<Supplier<?>> singletons, Set<Class<?>> providers, Map<String, Object> properties,
                                     ObjectMapper mapper, Validator validator, Consumer<ClientConfig> clientConfigurator,
                                     TestContainerFactory testContainerFactory, boolean registerDefaultExceptionMappers) {
         this.singletons = singletons;

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/SubstitutingSourceProvider.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * A delegating {@link ConfigurationSourceProvider} which replaces variables in the underlying configuration
- * source according to the rules of a custom {@link org.apache.commons.lang3.text.StrSubstitutor}.
+ * source according to the rules of a custom {@link org.apache.commons.text.StrSubstitutor}.
  */
 public class SubstitutingSourceProvider implements ConfigurationSourceProvider {
     private final ConfigurationSourceProvider delegate;

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWork.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * When annotating a Jersey resource method, wraps the method in a Hibernate session.
  * <p>To be used outside Jersey, one need to create a proxy of the component with the
- * annotated method.</p.
+ * annotated method.</p>
  *
  * @see UnitOfWorkApplicationListener
  * @see UnitOfWorkAwareProxyFactory

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2ConnectorFactory.java
Patch:
@@ -36,7 +36,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code maxConcurrentStreams}</td>
- *         <td><1024</td>
+ *         <td>1024</td>
  *         <td>
  *             The maximum number of concurrently open streams allowed on a single HTTP/2 connection.
  *             Larger values increase parallelism, but cost a memory commitment.

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/RequestIdFilter.java
Patch:
@@ -21,7 +21,7 @@
  * information: request method, request path, request ID, response status,
  * response length (or -1 if not known).
  *
- * @see https://devcenter.heroku.com/articles/http-request-id
+ * @see <a href="https://devcenter.heroku.com/articles/http-request-id">Heroku - HTTP Request IDs</a>
  */
 @Provider
 @Priority(Priorities.USER)

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/RuntimeFilter.java
Patch:
@@ -17,7 +17,7 @@
  * taken to execute the request, in seconds (based on the implementation from
  * Ruby on Rails).
  *
- * @see https://github.com/rack/rack/blob/master/lib/rack/runtime.rb
+ * @see <a href="https://github.com/rack/rack/blob/2.0.0/lib/rack/runtime.rb">Rack::Runtime</a>
  */
 @Provider
 @PreMatching

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoderTest.java
Patch:
@@ -76,7 +76,7 @@ public void noEncodingwillNotAroundWrite() throws IOException, WebApplicationExc
         assertThat(context.isProceedCalled(), is(true));
     }
 
-    private class WriterInterceptorContextMock implements WriterInterceptorContext {
+    private static class WriterInterceptorContextMock implements WriterInterceptorContext {
         private final MultivaluedMap<String, Object> headers;
         private OutputStream os = new OutputStream() {
             @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/FuzzyEnumParamConverterProviderTest.java
Patch:
@@ -25,6 +25,7 @@ private enum WithToString {
         A_1,
         A_2;
 
+        @Override
         public String toString() {
             return "<" + this.name() + ">";
         }

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/AutoCloseableManager.java
Patch:
@@ -35,7 +35,8 @@ public void start() throws Exception {
     }
 
     /**
-     * Calls {@link AutoCloseable#close()} given in the {@link AutoCloseableManager(AutoCloseable)}
+     * Calls {@link AutoCloseable#close()} on the closable provided in
+     * {@link AutoCloseableManager#AutoCloseableManager(AutoCloseable)}.
      *
      * @throws Exception propagates {@link AutoCloseable#close()} exception
      */

File: dropwizard-logging/src/main/java/io/dropwizard/logging/AbstractAppenderFactory.java
Patch:
@@ -154,7 +154,7 @@ public String getLogFormat() {
     }
 
     @JsonProperty
-    public void setLogFormat(String logFormat) {
+    public void setLogFormat(@Nullable String logFormat) {
         this.logFormat = logFormat;
     }
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/UdpSocketAppenderFactoryTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
 import java.net.SocketException;
+import java.nio.charset.StandardCharsets;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
@@ -41,7 +42,7 @@ public void setUp() throws Exception {
                 try {
                     DatagramPacket datagramPacket = new DatagramPacket(buffer, buffer.length);
                     datagramSocket.receive(datagramPacket);
-                    assertThat(new String(buffer, 0, datagramPacket.getLength()))
+                    assertThat(new String(buffer, 0, datagramPacket.getLength(), StandardCharsets.UTF_8))
                         .startsWith("INFO").contains("com.example.app: Application log " + i);
                     countDownLatch.countDown();
                 } catch (SocketException e) {

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/LogConfigurationTask.java
Patch:
@@ -53,6 +53,7 @@ public LogConfigurationTask(ILoggerFactory loggerContext) {
         this.loggerContext = loggerContext;
     }
 
+    @Override
     public void execute(ImmutableMultimap<String, String> parameters, PrintWriter output) throws Exception {
         final List<String> loggerNames = getLoggerNames(parameters);
         final Level loggerLevel = getLoggerLevel(parameters);

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/PostBodyTaskTest.java
Patch:
@@ -13,6 +13,7 @@ public void execute(ImmutableMultimap<String, String> parameters, String body, P
         }
     };
 
+    @SuppressWarnings("deprecation")
     @Test(expected = UnsupportedOperationException.class)
     public void throwsExceptionWhenCallingExecuteWithoutThePostBody() throws Exception {
         task.execute(new ImmutableMultimap.Builder<String, String>().build(), new PrintWriter(System.out));

File: dropwizard-util/src/main/java/io/dropwizard/util/Duration.java
Patch:
@@ -16,7 +16,7 @@
 public class Duration implements Comparable<Duration> {
     private static final Pattern DURATION_PATTERN = Pattern.compile("(\\d+)\\s*(\\S+)");
 
-    private static final Map<String, TimeUnit> SUFFIXES = new ImmutableMap.Builder<String, TimeUnit>()
+    private static final ImmutableMap<String, TimeUnit> SUFFIXES = new ImmutableMap.Builder<String, TimeUnit>()
             .put("ns", TimeUnit.NANOSECONDS)
             .put("nanosecond", TimeUnit.NANOSECONDS)
             .put("nanoseconds", TimeUnit.NANOSECONDS)

File: dropwizard-util/src/main/java/io/dropwizard/util/Size.java
Patch:
@@ -15,7 +15,7 @@
 public class Size implements Comparable<Size> {
     private static final Pattern SIZE_PATTERN = Pattern.compile("(\\d+)\\s*(\\S+)");
 
-    private static final Map<String, SizeUnit> SUFFIXES = ImmutableSortedMap.<String, SizeUnit>orderedBy(String.CASE_INSENSITIVE_ORDER)
+    private static final ImmutableSortedMap<String, SizeUnit> SUFFIXES = ImmutableSortedMap.<String, SizeUnit>orderedBy(String.CASE_INSENSITIVE_ORDER)
             .put("B", SizeUnit.BYTES)
             .put("byte", SizeUnit.BYTES)
             .put("bytes", SizeUnit.BYTES)

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -41,7 +41,7 @@ public class DropwizardResourceConfig extends ResourceConfig {
     private static final Pattern PATH_DIRTY_SLASHES = Pattern.compile("\\s*/\\s*/+\\s*");
 
     private String urlPattern = "/*";
-    private String contextPath = "";
+    private String contextPath = "/";
 
     public DropwizardResourceConfig(MetricRegistry metricRegistry) {
         this(false, metricRegistry);
@@ -184,7 +184,8 @@ private static class EndpointLogger {
 
         EndpointLogger(String contextPath, String urlPattern, Class<?> klass) {
             final String rootPattern = urlPattern.endsWith("/*") ? urlPattern.substring(0, urlPattern.length() - 1) : urlPattern;
-            final String normalizedContextPath = contextPath == null || contextPath.trim().isEmpty() ? "" : contextPath.startsWith("/") ? contextPath : "/" + contextPath;
+            final String normalizedContextPath = contextPath.isEmpty() || contextPath.equals("/") ? "" :
+                contextPath.startsWith("/") ? contextPath : "/" + contextPath;
             this.rootPath = normalizedContextPath + rootPattern;
             this.klass = klass;
         }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -41,7 +41,7 @@ public class DropwizardResourceConfig extends ResourceConfig {
     private static final Pattern PATH_DIRTY_SLASHES = Pattern.compile("\\s*/\\s*/+\\s*");
 
     private String urlPattern = "/*";
-    private String contextPath = "";
+    private String contextPath = "/";
 
     public DropwizardResourceConfig(MetricRegistry metricRegistry) {
         this(false, metricRegistry);
@@ -184,7 +184,8 @@ private static class EndpointLogger {
 
         EndpointLogger(String contextPath, String urlPattern, Class<?> klass) {
             final String rootPattern = urlPattern.endsWith("/*") ? urlPattern.substring(0, urlPattern.length() - 1) : urlPattern;
-            final String normalizedContextPath = contextPath == null || contextPath.trim().isEmpty() ? "" : contextPath.startsWith("/") ? contextPath : "/" + contextPath;
+            final String normalizedContextPath = contextPath.isEmpty() || contextPath.equals("/") ? "" :
+                contextPath.startsWith("/") ? contextPath : "/" + contextPath;
             this.rootPath = normalizedContextPath + rootPattern;
             this.klass = klass;
         }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardAppRule.java
Patch:
@@ -5,6 +5,7 @@
 import io.dropwizard.Configuration;
 import io.dropwizard.cli.Command;
 import io.dropwizard.cli.ServerCommand;
+import io.dropwizard.jersey.jackson.JacksonBinder;
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.setup.Environment;
 import io.dropwizard.testing.ConfigOverride;
@@ -237,6 +238,7 @@ public Client client() {
 
     protected JerseyClientBuilder clientBuilder() {
         return new JerseyClientBuilder()
+            .register(new JacksonBinder(getObjectMapper()))
             .property(ClientProperties.CONNECT_TIMEOUT, DEFAULT_CONNECT_TIMEOUT_MS)
             .property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT_MS);
     }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit5/DropwizardAppExtension.java
Patch:
@@ -5,6 +5,7 @@
 import io.dropwizard.Configuration;
 import io.dropwizard.cli.Command;
 import io.dropwizard.cli.ServerCommand;
+import io.dropwizard.jersey.jackson.JacksonBinder;
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.setup.Environment;
 import io.dropwizard.testing.ConfigOverride;
@@ -235,6 +236,7 @@ public Client client() {
 
     protected JerseyClientBuilder clientBuilder() {
         return new JerseyClientBuilder()
+            .register(new JacksonBinder(getObjectMapper()))
             .property(ClientProperties.CONNECT_TIMEOUT, DEFAULT_CONNECT_TIMEOUT_MS)
             .property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT_MS);
     }

File: dropwizard-json-logging/src/test/java/io/dropwizard/logging/json/LayoutIntegrationTests.java
Patch:
@@ -40,7 +40,7 @@
 public class LayoutIntegrationTests {
 
     static {
-        BootstrapLogging.bootstrap(Level.INFO);
+        BootstrapLogging.bootstrap(Level.INFO, new EventJsonLayoutBaseFactory());
     }
 
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import com.google.common.collect.ImmutableMap;
+import freemarker.core.HTMLOutputFormat;
 import freemarker.template.Configuration;
 import freemarker.template.DefaultObjectWrapperBuilder;
 import freemarker.template.Template;
@@ -38,6 +39,8 @@ public Configuration load(Class<?> key) throws Exception {
             configuration.loadBuiltInEncodingMap();
             configuration.setDefaultEncoding(StandardCharsets.UTF_8.name());
             configuration.setClassForTemplateLoading(key, "/");
+            // setting the outputformat implicitly enables auto escaping
+            configuration.setOutputFormat(HTMLOutputFormat.INSTANCE);
             for (Map.Entry<String, String> entry : baseConfig.entrySet()) {
                 configuration.setSetting(entry.getKey(), entry.getValue());
             }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/caching/CacheControl.java
Patch:
@@ -12,7 +12,7 @@
  * the annotated method.
  */
 @Documented
-@Target({ElementType.TYPE, ElementType.METHOD})
+@Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface CacheControl {
     /**

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -66,7 +66,7 @@ public final void run(T configuration, Environment environment) throws Exception
         final PooledDataSourceFactory dbConfig = getDataSourceFactory(configuration);
         this.sessionFactory = requireNonNull(sessionFactoryFactory.build(this, environment, dbConfig,
             entities, name()));
-        registerUnitOfWorkListerIfAbsent(environment).registerSessionFactory(name(), sessionFactory);
+        registerUnitOfWorkListenerIfAbsent(environment).registerSessionFactory(name(), sessionFactory);
         environment.healthChecks().register(name(),
                                             new SessionFactoryHealthCheck(
                                                     environment.getHealthCheckExecutorService(),
@@ -75,7 +75,7 @@ public final void run(T configuration, Environment environment) throws Exception
                                                     dbConfig.getValidationQuery()));
     }
 
-    private UnitOfWorkApplicationListener registerUnitOfWorkListerIfAbsent(Environment environment) {
+    private UnitOfWorkApplicationListener registerUnitOfWorkListenerIfAbsent(Environment environment) {
         for (Object singleton : environment.jersey().getResourceConfig().getSingletons()) {
             if (singleton instanceof UnitOfWorkApplicationListener) {
                 return (UnitOfWorkApplicationListener) singleton;

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/AbsoluteView.java
Patch:
@@ -6,7 +6,7 @@ public class AbsoluteView extends View {
     private final String name;
 
     public AbsoluteView(String name) {
-        super("/example.ftl");
+        super("/example.ftlh");
         this.name = name;
     }
 

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/ErrorView.java
Patch:
@@ -4,6 +4,6 @@
 
 public class ErrorView extends View {
     protected ErrorView() {
-        super("/example-error.ftl");
+        super("/example-error.ftlx");
     }
 }

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -41,7 +41,7 @@
  * }
  * </code></pre>
  *
- *<p>The {@code "profile.ftl"} or {@code "profile.mustache"} is the path of the template relative to the class name. If
+ *<p>The {@code "profile.ftl[hx]"} or {@code "profile.mustache"} is the path of the template relative to the class name. If
  * this class was {@code com.example.application.PersonView}, Freemarker or Mustache would then look for the file
  * {@code src/main/resources/com/example/application/profile.ftl} or {@code
  * src/main/resources/com/example/application/profile.mustache} respectively. If the template path
@@ -109,7 +109,7 @@ public Map<String, Map<String, String>> getViewConfiguration(T configuration) {
     public void run(T configuration, Environment environment) throws Exception {
         final Map<String, Map<String, String>> options = getViewConfiguration(configuration);
         for (ViewRenderer viewRenderer : viewRenderers) {
-            final Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
+            final Map<String, String> viewOptions = options.get(viewRenderer.getConfigurationKey());
             viewRenderer.configure(firstNonNull(viewOptions, Collections.emptyMap()));
         }
         environment.jersey().register(new ViewMessageBodyWriter(environment.metrics(), viewRenderers));

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewRenderer.java
Patch:
@@ -39,7 +39,7 @@ void render(View view,
     void configure(Map<String, String> options);
 
     /**
-     * @return the suffix of the template type, e.g '.ftl', '.mustache'
+     * @return the key to use in the view configurations, i.e. 'freemarker' or 'mustache'.
      */
-    String getSuffix();
+    String getConfigurationKey();
 }

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2CConnectorFactory.java
Patch:
@@ -31,7 +31,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code maxConcurrentStreams}</td>
- *         <td><1024</td>
+ *         <td>1024</td>
  *         <td>
  *             The maximum number of concurrently open streams allowed on a single HTTP/2 connection.
  *             Larger values increase parallelism, but cost a memory commitment.

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2CConnectorFactory.java
Patch:
@@ -31,7 +31,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code maxConcurrentStreams}</td>
- *         <td><1024</td>
+ *         <td>1024</td>
  *         <td>
  *             The maximum number of concurrently open streams allowed on a single HTTP/2 connection.
  *             Larger values increase parallelism, but cost a memory commitment.

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java
Patch:
@@ -555,7 +555,7 @@ protected ServerConnector buildConnector(Server server,
 
         connector.setReuseAddress(reuseAddress);
         if (soLingerTime != null) {
-            connector.setSoLingerTime((int) soLingerTime.toSeconds());
+            connector.setSoLingerTime((int) soLingerTime.toMilliseconds());
         }
         connector.setIdleTimeout(idleTimeout.toMilliseconds());
         connector.setName(name);

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -130,7 +130,7 @@ public void testBuildConnector() throws Exception {
         assertThat(connector.getHost()).isEqualTo("127.0.0.1");
         assertThat(connector.getAcceptQueueSize()).isEqualTo(1024);
         assertThat(connector.getReuseAddress()).isTrue();
-        assertThat(connector.getSoLingerTime()).isEqualTo(30);
+        assertThat(connector.getSoLingerTime()).isEqualTo(30000);
         assertThat(connector.getIdleTimeout()).isEqualTo(30000);
         assertThat(connector.getName()).isEqualTo("test-http-connector");
 

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -241,7 +241,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code checkConnectionOnConnect}</td>
- *         <td>{@code false}</td>
+ *         <td>{@code true}</td>
  *         <td>
  *             Whether or not connections will be validated before being added to the pool. If the
  *             connection fails to validate, it won't be added to the pool.

File: dropwizard-util/src/main/java/io/dropwizard/util/Size.java
Patch:
@@ -120,7 +120,7 @@ public boolean equals(Object obj) {
             return false;
         }
         final Size size = (Size) obj;
-        return (count == size.count) && (unit == size.unit);
+        return this.compareTo(size) == 0;
     }
 
     @Override

File: dropwizard-core/src/main/java/io/dropwizard/Application.java
Patch:
@@ -86,7 +86,7 @@ public void run(String... arguments) throws Exception {
         final Bootstrap<T> bootstrap = new Bootstrap<>(this);
         addDefaultCommands(bootstrap);
         initialize(bootstrap);
-        // Should by called after initialize to give an opportunity to set a custom metric registry
+        // Should be called after initialize to give an opportunity to set a custom metric registry
         bootstrap.registerMetrics();
 
         final Cli cli = new Cli(new JarLocation(getClass()), bootstrap, System.out, System.err);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapper.java
Patch:
@@ -38,12 +38,12 @@ public Response toResponse(JsonProcessingException exception) {
             return super.toResponse(exception); // LoggingExceptionMapper will log exception
         }
 
-        final String message = exception.getOriginalMessage();
-
         /*
          * Otherwise, it's those pesky users.
          */
         LOGGER.debug("Unable to process JSON", exception);
+
+        final String message = exception.getOriginalMessage();
         final ErrorMessage errorMessage = new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),
                 "Unable to process JSON", showDetails ? message : null);
         return Response.status(Response.Status.BAD_REQUEST)

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/JerseyViolationException.java
Patch:
@@ -11,6 +11,7 @@
  * validating constraints on a resource endpoint.
  */
 public class JerseyViolationException extends ConstraintViolationException {
+    private static final long serialVersionUID = -2084629736062306666L;
     private final Invocable invocable;
 
     public JerseyViolationException(Set<? extends ConstraintViolation<?>> constraintViolations, Invocable invocable) {

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/YamlConfigurationFactoryTest.java
Patch:
@@ -17,17 +17,17 @@ public void setUp() throws Exception {
         this.wrongTypeFile = resourceFileName("factory-test-wrong-type.yml");
         this.malformedAdvancedFile = resourceFileName("factory-test-malformed-advanced.yml");
     }
-    
+
     @Override
     public void throwsAnExceptionOnMalformedFiles() throws Exception {
         try {
             super.throwsAnExceptionOnMalformedFiles();
         } catch (ConfigurationParsingException e) {
             assertThat(e)
-                .hasMessageContaining(" * Failed to parse configuration; Can not construct instance of io.dropwizard.configuration.BaseConfigurationFactoryTest$Example");
+                .hasMessageContaining(" * Failed to parse configuration; Cannot construct instance of `io.dropwizard.configuration.BaseConfigurationFactoryTest$Example`");
         }
     }
-    
+
     @Override
     public void printsDetailedInformationOnMalformedContent() throws Exception {
         try {

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java
Patch:
@@ -47,13 +47,11 @@ public static ObjectMapper newObjectMapper(JsonFactory jsonFactory) {
     public static ObjectMapper newMinimalObjectMapper() {
         return new ObjectMapper()
                 .registerModule(new GuavaModule())
-                .registerModule(new LogbackModule())
                 .setSubtypeResolver(new DiscoverableSubtypeResolver());
     }
 
     private static ObjectMapper configure(ObjectMapper mapper) {
         mapper.registerModule(new GuavaModule());
-        mapper.registerModule(new LogbackModule());
         mapper.registerModule(new GuavaExtrasModule());
         mapper.registerModule(new JodaModule());
         mapper.registerModule(new AfterburnerModule());

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/JsonConfigurationFactory.java
Patch:
@@ -25,6 +25,6 @@ public JsonConfigurationFactory(Class<T> klass,
                                     Validator validator,
                                     ObjectMapper objectMapper,
                                     String propertyPrefix) {
-        super(new JsonFactory(), JsonFactory.FORMAT_NAME_JSON, klass, validator, objectMapper, propertyPrefix);
+        super(objectMapper.getFactory(), JsonFactory.FORMAT_NAME_JSON, klass, validator, objectMapper, propertyPrefix);
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
Patch:
@@ -6,7 +6,6 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.FileAppender;
-import ch.qos.logback.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy;
 import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;
 import ch.qos.logback.core.rolling.RollingFileAppender;
 import ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy;
@@ -180,7 +179,7 @@ public void hasMaxFileSize() throws Exception {
         fileAppenderFactory.setArchivedLogFilenamePattern(folder.newFile("example-%d-%i.log.gz").toString());
         RollingFileAppender<ILoggingEvent> appender = (RollingFileAppender<ILoggingEvent>) fileAppenderFactory.buildAppender(new LoggerContext());
 
-        assertThat(appender.getTriggeringPolicy()).isInstanceOf(DefaultTimeBasedFileNamingAndTriggeringPolicy.class);
+        assertThat(appender.getTriggeringPolicy()).isInstanceOf(SizeAndTimeBasedRollingPolicy.class);
         final Field maxFileSizeField = SizeAndTimeBasedRollingPolicy.class.getDeclaredField("maxFileSize");
         maxFileSizeField.setAccessible(true);
         final FileSize maxFileSize = (FileSize) maxFileSizeField.get(appender.getRollingPolicy());

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JacksonMessageBodyProviderTest.java
Patch:
@@ -14,6 +14,7 @@
 import javax.validation.Valid;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
+import javax.validation.groups.Default;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedHashMap;
@@ -76,7 +77,7 @@ public static class ListExample {
     public interface Partial1 {
     }
 
-    public interface Partial2 {
+    public interface Partial2 extends Default {
     }
 
     public static class PartialExample {

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -397,7 +397,7 @@ public int get() {
     private Duration evictionInterval = Duration.seconds(5);
 
     @NotNull
-    @MinDuration(1)
+    @MinDuration(value = 50, unit = TimeUnit.MILLISECONDS)
     private Duration validationInterval = Duration.seconds(30);
 
     private Optional<String> validatorClassName = Optional.empty();

File: dropwizard-client/src/test/java/io/dropwizard/client/ConfiguredCloseableHttpClientTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -32,4 +32,4 @@ public void getDefaultRequestConfig_returns_config_provided_at_construction() {
     public void getClient_returns_config_provided_at_construction() {
         assertThat(configuredClient.getClient()).isEqualTo(closeableHttpClientMock);
     }
-}
\ No newline at end of file
+}

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardExecutorProviderTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.glassfish.jersey.spi.ExecutorServiceProvider;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;

File: dropwizard-example/src/test/java/com/example/helloworld/resources/PeopleResourceTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.GenericType;

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java
Patch:
@@ -3,15 +3,15 @@
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Request;
-import org.eclipse.jetty.server.handler.AbstractHandler;
+import org.eclipse.jetty.server.handler.HandlerCollection;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.util.Map;
 
-public class RoutingHandler extends AbstractHandler {
+public class RoutingHandler extends HandlerCollection {
     /**
      * We use an array of entries instead of a map here for performance reasons. We're only ever
      * comparing connectors by reference, not by equality, so avoiding the overhead of a map is
@@ -37,6 +37,7 @@ public RoutingHandler(Map<Connector, Handler> handlers) {
             this.entries[i++] = new Entry(entry.getKey(), entry.getValue());
             addBean(entry.getValue());
         }
+        setHandlers(handlers.values().toArray(new Handler[handlers.size()]));
     }
 
     @Override

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/RoutingHandlerTest.java
Patch:
@@ -77,14 +77,14 @@ public void routesRequestsToTheConnectorSpecificHandler() throws Exception {
     public void withSessionHandler() throws Exception {
         final ContextHandler handler1 = new ContextHandler();
         final ServletContextHandler handler2 = new ServletContextHandler();
-        final SessionHandler handler2_1 = new SessionHandler();
-        handler2.setSessionHandler(handler2_1);
+        final SessionHandler childHandler1 = new SessionHandler();
+        handler2.setSessionHandler(childHandler1);
         final RoutingHandler handler = new RoutingHandler(ImmutableMap.of(connector1, handler1, connector2, handler2));
         new Server().setHandler(handler);
 
         handler.start();
         try {
-            assertThat(getSessionHandlers(handler)).containsOnly(handler2_1);
+            assertThat(getSessionHandlers(handler)).containsOnly(childHandler1);
         } finally {
             handler.stop();
         }

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java
Patch:
@@ -3,15 +3,15 @@
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.Request;
-import org.eclipse.jetty.server.handler.AbstractHandler;
+import org.eclipse.jetty.server.handler.HandlerCollection;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.util.Map;
 
-public class RoutingHandler extends AbstractHandler {
+public class RoutingHandler extends HandlerCollection {
     /**
      * We use an array of entries instead of a map here for performance reasons. We're only ever
      * comparing connectors by reference, not by equality, so avoiding the overhead of a map is
@@ -37,6 +37,7 @@ public RoutingHandler(Map<Connector, Handler> handlers) {
             this.entries[i++] = new Entry(entry.getKey(), entry.getValue());
             addBean(entry.getValue());
         }
+        setHandlers(handlers.values().toArray(new Handler[handlers.size()]));
     }
 
     @Override

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -84,7 +84,7 @@ public boolean run(String... arguments) throws Exception {
             return false;
         } catch (Throwable t) {
             // Unexpected exceptions should result in non-zero exit status of the process
-            stdErr.println(t.getMessage());
+            t.printStackTrace(stdErr);
             return false;
         }
     }

File: dropwizard-db/src/main/java/io/dropwizard/db/ManagedPooledDataSource.java
Patch:
@@ -27,8 +27,7 @@ public ManagedPooledDataSource(PoolConfiguration config, MetricRegistry metricRe
         this.metricRegistry = metricRegistry;
     }
 
-    // JDK6 has JDBC 4.0 which doesn't have this -- don't add @Override
-    @SuppressWarnings("override")
+    @Override
     public Logger getParentLogger() throws SQLFeatureNotSupportedException {
         throw new SQLFeatureNotSupportedException("Doesn't use java.util.logging");
     }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java
Patch:
@@ -129,6 +129,8 @@ private static Optional<String> getMemberName(ConstraintViolation<?> violation,
                 break;
             case METHOD:
                 return Optional.of(member.getName());
+            default:
+                break;
         }
         return Optional.empty();
     }

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/old/LogbackClassicRequestLogFactory.java
Patch:
@@ -95,10 +95,12 @@ public void setTimeZone(TimeZone timeZone) {
     }
 
     @JsonIgnore
+    @Override
     public boolean isEnabled() {
         return !appenders.isEmpty();
     }
 
+    @Override
     public RequestLog build(String name) {
         final Logger logger = (Logger) LoggerFactory.getLogger("http.request");
         logger.setAdditive(false);

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardAppRule.java
Patch:
@@ -187,6 +187,7 @@ public Application<C> newApplication() {
         return testSupport.newApplication();
     }
 
+    @SuppressWarnings("unchecked")
     public <A extends Application<C>> A getApplication() {
         return testSupport.getApplication();
     }

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/ServerLifecycleListener.java
Patch:
@@ -30,6 +30,6 @@ default int getLocalPort(Server server) {
      */
     default int getAdminPort(Server server) {
         final Connector[] connectors = server.getConnectors();
-        return ((ServerConnector) connectors[connectors.length -1]).getLocalPort();
+        return ((ServerConnector) connectors[connectors.length - 1]).getLocalPort();
     }
 }

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/TaskServletTest.java
Patch:
@@ -79,7 +79,7 @@ public void passesQueryStringParamsAlong() throws Exception {
         when(request.getMethod()).thenReturn("POST");
         when(request.getPathInfo()).thenReturn("/gc");
         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));
-        when(request.getParameterValues("runs")).thenReturn(new String[]{ "1" });
+        when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});
         when(request.getInputStream()).thenReturn(bodyStream);
         when(response.getWriter()).thenReturn(output);
 

File: dropwizard-core/src/main/java/io/dropwizard/setup/ExceptionMapperBinder.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.setup;
 
 import io.dropwizard.jersey.errors.EarlyEofExceptionMapper;
+import io.dropwizard.jersey.errors.IllegalStateExceptionMapper;
 import io.dropwizard.jersey.errors.LoggingExceptionMapper;
 import io.dropwizard.jersey.jackson.JsonProcessingExceptionMapper;
 import io.dropwizard.jersey.optional.EmptyOptionalExceptionMapper;
@@ -28,6 +29,7 @@ protected void configure() {
         bind(new JsonProcessingExceptionMapper(isShowDetails())).to(ExceptionMapper.class);
         bind(new EarlyEofExceptionMapper()).to(ExceptionMapper.class);
         bind(new EmptyOptionalExceptionMapper()).to(ExceptionMapper.class);
+        bind(new IllegalStateExceptionMapper()).to(ExceptionMapper.class);
     }
 
     public boolean isShowDetails() {

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -152,9 +152,6 @@ public void setAdminContextPath(final String adminContextPath) {
 
     @Override
     public Server build(Environment environment) {
-        // ensures that the environment is configured before the server is built
-        configure(environment);
-
         printBanner(environment.getName());
         final ThreadPool threadPool = createThreadPool(environment.metrics());
         final Server server = buildServer(environment.lifecycle(), threadPool);

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -153,6 +153,7 @@ public void testGracefulShutdown() throws Exception {
         environment.jersey().register(new TestResource(requestReceived, shutdownInvoked));
 
         final ScheduledExecutorService executor = Executors.newScheduledThreadPool(3);
+        http.configure(environment);
         final Server server = http.build(environment);
 
         ((AbstractNetworkConnector) server.getConnectors()[0]).setPort(0);

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryHealthCheck.java
Patch:
@@ -44,7 +44,7 @@ protected Result check() throws Exception {
             try (Session session = sessionFactory.openSession()) {
                 final Transaction txn = session.beginTransaction();
                 try {
-                    session.createSQLQuery(validationQuery).list();
+                    session.createNativeQuery(validationQuery).list();
                     txn.commit();
                 } catch (Exception e) {
                     if (txn.getStatus().canRollback()) {

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkAspect.java
Patch:
@@ -114,7 +114,7 @@ public void onFinish() {
     protected void configureSession() {
         session.setDefaultReadOnly(unitOfWork.readOnly());
         session.setCacheMode(unitOfWork.cacheMode());
-        session.setFlushMode(unitOfWork.flushMode());
+        session.setHibernateFlushMode(unitOfWork.flushMode());
     }
 
     private void beginTransaction() {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkApplicationListenerTest.java
Patch:
@@ -125,7 +125,7 @@ public void configuresTheSessionsFlushMode() throws Exception {
 
         execute();
 
-        verify(session).setFlushMode(FlushMode.ALWAYS);
+        verify(session).setHibernateFlushMode(FlushMode.ALWAYS);
     }
 
     @Test

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -71,7 +71,7 @@ protected void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration)
         }
     }
 
-    private CloseableLiquibase openLiquibase(final PooledDataSourceFactory dataSourceFactory, final Namespace namespace)
+    CloseableLiquibase openLiquibase(final PooledDataSourceFactory dataSourceFactory, final Namespace namespace)
             throws SQLException, LiquibaseException {
         final CloseableLiquibase liquibase;
         final ManagedDataSource dataSource = dataSourceFactory.build(new MetricRegistry(), "liquibase");

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
+import java.io.OutputStreamWriter;
 import java.io.PrintStream;
 import java.io.PrintWriter;
 import java.nio.charset.StandardCharsets;
@@ -101,8 +102,8 @@ public void testWriteToFile() throws Exception {
 
     @Test
     public void testHelpPage() throws Exception {
-        createSubparser(dumpCommand).printHelp(new PrintWriter(baos, true));
-        assertThat(baos.toString("UTF-8")).isEqualTo(String.format(
+        createSubparser(dumpCommand).printHelp(new PrintWriter(new OutputStreamWriter(baos, UTF_8), true));
+        assertThat(baos.toString(UTF_8)).isEqualTo(String.format(
                 "usage: db dump [-h] [--migrations MIGRATIONS-FILE] [--catalog CATALOG]%n" +
                         "          [--schema SCHEMA] [-o OUTPUT] [--tables] [--ignore-tables]%n" +
                         "          [--columns] [--ignore-columns] [--views] [--ignore-views]%n" +

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbMigrateCustomSchemaTest.java
Patch:
@@ -20,7 +20,7 @@ public class DbMigrateCustomSchemaTest extends AbstractMigrationTest {
 
     @Before
     public void setUp() throws Exception {
-        databaseUrl = "jdbc:h2:" + createTempFile();
+        databaseUrl = getDatabaseUrl();
         conf = createConfiguration(databaseUrl);
     }
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/GzipDefaultVaryBehaviourTest.java
Patch:
@@ -6,7 +6,6 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.core.Response;
 
 import java.util.Collections;
@@ -25,7 +24,7 @@ public class GzipDefaultVaryBehaviourTest {
 
     @Test
     public void testDefaultVaryHeader() {
-        final Response clientResponse = ClientBuilder.newClient().target(
+        final Response clientResponse = RULE.client().target(
             "http://localhost:" + RULE.getLocalPort() + "/test").request().header(ACCEPT_ENCODING, "gzip").get();
 
         assertThat(clientResponse.getHeaders().get(VARY)).isEqualTo(Collections.singletonList((Object) ACCEPT_ENCODING));

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleConfigOverrideTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import javax.ws.rs.client.ClientBuilder;
 import java.util.Optional;
 
 import static io.dropwizard.testing.ConfigOverride.config;
@@ -23,7 +22,7 @@ public class DropwizardAppRuleConfigOverrideTest {
 
     @Test
     public void supportsConfigAttributeOverrides() {
-        final String content = ClientBuilder.newClient().target("http://localhost:" + RULE.getLocalPort() + "/test")
+        final String content = RULE.client().target("http://localhost:" + RULE.getLocalPort() + "/test")
                 .request().get(String.class);
 
         assertThat(content, is("A new way to say Hooray!"));

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleTest.java
Patch:
@@ -56,7 +56,7 @@ public void returnsEnvironment() {
     @Test
     public void canPerformAdminTask() {
         final String response
-                = ClientBuilder.newClient().target("http://localhost:"
+                = RULE.client().target("http://localhost:"
                         + RULE.getAdminPort() + "/tasks/hello?name=test_user")
                 .request()
                 .post(Entity.entity("", MediaType.TEXT_PLAIN), String.class);
@@ -67,7 +67,7 @@ public void canPerformAdminTask() {
     @Test
     public void canPerformAdminTaskWithPostBody() {
         final String response
-            = ClientBuilder.newClient().target("http://localhost:"
+            = RULE.client().target("http://localhost:"
             + RULE.getAdminPort() + "/tasks/echo")
             .request()
             .post(Entity.entity("Custom message", MediaType.TEXT_PLAIN), String.class);

File: dropwizard-http2/src/test/java/io/dropwizard/http2/AbstractHttp2Test.java
Patch:
@@ -44,6 +44,6 @@ public void onComplete(Result result) {
                     });
         }
 
-        assertThat(latch.await(5, TimeUnit.SECONDS)).isTrue();
+        assertThat(latch.await(30, TimeUnit.SECONDS)).isTrue();
     }
 }

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientIntegrationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testBufferedGzipPost() {
                 assertThat(requestHeaders.get(HttpHeaders.CONTENT_LENGTH)).containsExactly("58");
                 assertThat(requestHeaders.get(TRANSFER_ENCODING)).isNull();
                 assertThat(requestHeaders.get(HttpHeaders.CONTENT_ENCODING)).containsExactly(GZIP);
-                assertThat(requestHeaders.get(HttpHeaders.ACCEPT_ENCODING));
+                assertThat(requestHeaders.get(HttpHeaders.ACCEPT_ENCODING)).containsExactly(GZIP_DEFLATE);
 
                 checkBody(httpExchange, true);
                 postResponse(httpExchange);

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilterTest.java
Patch:
@@ -62,7 +62,6 @@ public void clientIsNotSetRequestIsSet() {
 
     @Test
     public void clientIsNotSetRequestIsNotSet() {
-        assertThat(false);
         assertThat(
                 clientBuilder.build("ClientName").target(testUri + "/user_agent")
                         .request()

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -100,7 +100,7 @@ public void testCustomValidator() throws Exception {
         try (Connection connection = dataSource().getConnection()) {
             try (PreparedStatement statement = connection.prepareStatement("select 1")) {
                 try (ResultSet rs = statement.executeQuery()) {
-                    assertThat(rs.next());
+                    assertThat(rs.next()).isTrue();
                     assertThat(rs.getInt(1)).isEqualTo(1);
                 }
             }

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientIntegrationTest.java
Patch:
@@ -90,7 +90,7 @@ public void testBufferedGzipPost() {
                 assertThat(requestHeaders.get(HttpHeaders.CONTENT_LENGTH)).containsExactly("58");
                 assertThat(requestHeaders.get(TRANSFER_ENCODING)).isNull();
                 assertThat(requestHeaders.get(HttpHeaders.CONTENT_ENCODING)).containsExactly(GZIP);
-                assertThat(requestHeaders.get(HttpHeaders.ACCEPT_ENCODING));
+                assertThat(requestHeaders.get(HttpHeaders.ACCEPT_ENCODING)).containsExactly(GZIP_DEFLATE);
 
                 checkBody(httpExchange, true);
                 postResponse(httpExchange);

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilterTest.java
Patch:
@@ -62,7 +62,6 @@ public void clientIsNotSetRequestIsSet() {
 
     @Test
     public void clientIsNotSetRequestIsNotSet() {
-        assertThat(false);
         assertThat(
                 clientBuilder.build("ClientName").target(testUri + "/user_agent")
                         .request()

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -100,7 +100,7 @@ public void testCustomValidator() throws Exception {
         try (Connection connection = dataSource().getConnection()) {
             try (PreparedStatement statement = connection.prepareStatement("select 1")) {
                 try (ResultSet rs = statement.executeQuery()) {
-                    assertThat(rs.next());
+                    assertThat(rs.next()).isTrue();
                     assertThat(rs.getInt(1)).isEqualTo(1);
                 }
             }

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/CloseableLiquibaseTest.java
Patch:
@@ -30,7 +30,10 @@ public void setUp() throws Exception {
 
     @Test
     public void testWhenClosingAllConnectionsInPoolIsReleased() throws Exception {
+
         ConnectionPool pool = dataSource.getPool();
+        assertThat(pool.getActive()).isEqualTo(1);
+
         liquibase.close();
 
         assertThat(pool.getActive()).isZero();

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/CloseableLiquibase.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.dropwizard.db.ManagedDataSource;
 import liquibase.Liquibase;
-import liquibase.database.DatabaseConnection;
+import liquibase.database.Database;
 import liquibase.exception.LiquibaseException;
 import liquibase.resource.ResourceAccessor;
 
@@ -11,8 +11,8 @@
 public abstract class CloseableLiquibase extends Liquibase implements AutoCloseable {
     private final ManagedDataSource dataSource;
 
-    public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, DatabaseConnection conn, ManagedDataSource dataSource) throws LiquibaseException, SQLException {
-        super(changeLogFile, resourceAccessor, conn);
+    public CloseableLiquibase(String changeLogFile, ResourceAccessor resourceAccessor, Database database, ManagedDataSource dataSource) throws LiquibaseException, SQLException {
+        super(changeLogFile, resourceAccessor, database);
         this.dataSource = dataSource;
     }
 

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/CloseableLiquibaseWithClassPathMigrationsFile.java
Patch:
@@ -1,18 +1,18 @@
 package io.dropwizard.migrations;
 
 import io.dropwizard.db.ManagedDataSource;
-import liquibase.database.jvm.JdbcConnection;
+import liquibase.database.Database;
 import liquibase.exception.LiquibaseException;
 import liquibase.resource.ClassLoaderResourceAccessor;
 
 import java.sql.SQLException;
 
 public class CloseableLiquibaseWithClassPathMigrationsFile extends CloseableLiquibase implements AutoCloseable {
 
-    public CloseableLiquibaseWithClassPathMigrationsFile(ManagedDataSource dataSource, String file) throws LiquibaseException, SQLException {
+    public CloseableLiquibaseWithClassPathMigrationsFile(ManagedDataSource dataSource, Database database, String file) throws LiquibaseException, SQLException {
         super(file,
               new ClassLoaderResourceAccessor(),
-              new JdbcConnection(dataSource.getConnection()),
+              database,
               dataSource);
     }
 

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/CloseableLiquibaseWithFileSystemMigrationsFile.java
Patch:
@@ -1,18 +1,18 @@
 package io.dropwizard.migrations;
 
 import io.dropwizard.db.ManagedDataSource;
-import liquibase.database.jvm.JdbcConnection;
+import liquibase.database.Database;
 import liquibase.exception.LiquibaseException;
 import liquibase.resource.FileSystemResourceAccessor;
 
 import java.sql.SQLException;
 
 public class CloseableLiquibaseWithFileSystemMigrationsFile extends CloseableLiquibase implements AutoCloseable {
 
-    public CloseableLiquibaseWithFileSystemMigrationsFile(ManagedDataSource dataSource, String file) throws LiquibaseException, SQLException {
+    public CloseableLiquibaseWithFileSystemMigrationsFile(ManagedDataSource dataSource, Database database, String file) throws LiquibaseException, SQLException {
         super(file,
               new FileSystemResourceAccessor(),
-              new JdbcConnection(dataSource.getConnection()),
+              database,
               dataSource);
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -84,7 +84,8 @@ public Optional<P> authenticate(C credentials) throws AuthenticationException {
             Throwables.propagateIfPossible(cause, AuthenticationException.class);
             throw new AuthenticationException(cause);
         } catch (UncheckedExecutionException e) {
-            throw Throwables.propagate(e.getCause());
+            Throwables.throwIfUnchecked(e.getCause());
+            throw e;
         } finally {
             context.stop();
         }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CachingAuthorizerTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.security.Principal;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.anyObject;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
@@ -34,7 +34,7 @@ public class CachingAuthorizerTest {
 
     @Before
     public void setUp() throws Exception {
-        when(underlying.authorize(anyObject(), anyString())).thenReturn(true);
+        when(underlying.authorize(any(), anyString())).thenReturn(true);
     }
 
     @Test

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardApacheConnectorTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import org.mockito.Matchers;
+import org.mockito.Mockito;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
@@ -188,7 +188,7 @@ public void multiple_headers_with_the_same_name_are_processed_successfully() thr
         final CloseableHttpResponse apacheResponse = mock(CloseableHttpResponse.class);
         when(apacheResponse.getStatusLine()).thenReturn(new BasicStatusLine(new ProtocolVersion("HTTP", 1, 1), 200, "OK"));
         when(apacheResponse.getAllHeaders()).thenReturn(apacheHeaders);
-        when(client.execute(Matchers.any())).thenReturn(apacheResponse);
+        when(client.execute(Mockito.any())).thenReturn(apacheResponse);
 
         final ClientRequest jerseyRequest = mock(ClientRequest.class);
         when(jerseyRequest.getUri()).thenReturn(URI.create("http://localhost"));

File: dropwizard-client/src/test/java/io/dropwizard/client/ssl/DropwizardSSLConnectionSocketFactoryTest.java
Patch:
@@ -28,12 +28,12 @@
 import java.io.File;
 import java.lang.reflect.Field;
 import java.net.SocketException;
+import java.util.Collections;
 import java.util.Optional;
 
 import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.http.conn.ssl.NoopHostnameVerifier;
 
-import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.assertj.core.api.Assertions.catchThrowable;
@@ -192,7 +192,7 @@ public void shouldBeOkIfHostnameVerificationOffAndServerHostnameMatchesAndFailVe
 
     @Test
     public void shouldRejectNonSupportedProtocols() throws Exception {
-        tlsConfiguration.setSupportedProtocols(asList("TLSv1.2"));
+        tlsConfiguration.setSupportedProtocols(Collections.singletonList("TLSv1.2"));
         final Client client = new JerseyClientBuilder(TLS_APP_RULE.getEnvironment()).using(jerseyClientConfiguration).build("reject_non_supported");
         assertThatThrownBy(() -> client.target(String.format("https://localhost:%d", TLS_APP_RULE.getPort(4))).request().get())
             .isInstanceOf(ProcessingException.class)

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationParsingException.java
Patch:
@@ -134,7 +134,7 @@ public List<String> getSuggestions() {
                 return suggestions;
             }
 
-            Collections.sort(suggestions, new LevenshteinComparator(getSuggestionBase()));
+            suggestions.sort(new LevenshteinComparator(getSuggestionBase()));
             suggestionsSorted = true;
 
             return suggestions;

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -495,9 +495,7 @@ protected Handler createAppServlet(Server server,
         handler.addFilter(ThreadNameFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));
         serverPush.addFilter(handler);
         if (jerseyContainer != null) {
-            if (jerseyRootPath.isPresent()) {
-                jersey.setUrlPattern(jerseyRootPath.get());
-            }
+            jerseyRootPath.ifPresent(jersey::setUrlPattern);
             jersey.register(new JacksonBinder(objectMapper));
             jersey.register(new HibernateValidationFeature(validator));
             if (registerDefaultExceptionMappers == null || registerDefaultExceptionMappers) {

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -858,9 +858,7 @@ public ManagedDataSource build(MetricRegistry metricRegistry, String name) {
         if (getValidationQueryTimeout().isPresent()) {
             poolConfig.setValidationQueryTimeout((int) validationQueryTimeout.toSeconds());
         }
-        if (validatorClassName.isPresent()) {
-            poolConfig.setValidatorClassName(validatorClassName.get());
-        }
+        validatorClassName.ifPresent(poolConfig::setValidatorClassName);
 
         return new ManagedPooledDataSource(poolConfig, metricRegistry);
     }

File: dropwizard-e2e/src/main/java/com/example/app1/App1.java
Patch:
@@ -23,7 +23,8 @@ public void initialize(Bootstrap<Configuration> bootstrap) {
     @Override
     public void run(Configuration config, Environment env) throws Exception {
         // Ensure that we can override the default 404 response on an
-        // empty optional and return a 204 instead
+        // empty optional and return a 204 instead. Anonymous class can't
+        // be converted to a lambda as Mappers need to be concrete classes.
         env.jersey().register(new ExceptionMapper<EmptyOptionalException>() {
             @Override
             public Response toResponse(EmptyOptionalException exception) {

File: dropwizard-example/src/test/java/com/example/helloworld/resources/PeopleResourceTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/AbstractDAOTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryHealthCheckTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hibernate.resource.transaction.spi.TransactionStatus.ACTIVE;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/GuavaExtrasModule.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.databind.BeanDescription;
 import com.fasterxml.jackson.databind.DeserializationConfig;
@@ -35,7 +34,7 @@ public CacheBuilderSpec deserialize(JsonParser jp,
 
     private static class CacheBuilderSpecSerializer extends JsonSerializer<CacheBuilderSpec> {
         @Override
-        public void serialize(CacheBuilderSpec value, JsonGenerator gen, SerializerProvider serializers) throws IOException, JsonProcessingException {
+        public void serialize(CacheBuilderSpec value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
             gen.writeString(value.toParsableString());
         }
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/GuavaJDBITest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.Executors;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/JDBITest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.Executors;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/AllowedMethodsFilterTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/ServerPushFilterFactoryTest.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.EnumSet;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java
Patch:
@@ -103,7 +103,7 @@ public Appender<E> build(LoggerContext context, String applicationName, LayoutFa
         appender.setEncoder(layoutEncoder);
 
         appender.addFilter(levelFilterFactory.build(threshold));
-        getFilterFactories().stream().forEach(f -> appender.addFilter(f.build()));
+        getFilterFactories().forEach(f -> appender.addFilter(f.build()));
         appender.start();
 
         return wrapAsync(appender, asyncAppenderFactory);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
Patch:
@@ -207,7 +207,7 @@ public Appender<E> build(LoggerContext context, String applicationName, LayoutFa
 
         appender.setPrudent(false);
         appender.addFilter(levelFilterFactory.build(threshold));
-        getFilterFactories().stream().forEach(f -> appender.addFilter(f.build()));
+        getFilterFactories().forEach(f -> appender.addFilter(f.build()));
         appender.start();
 
         return wrapAsync(appender, asyncAppenderFactory);
@@ -226,13 +226,13 @@ protected FileAppender<E> buildAppender(LoggerContext context) {
                 rollingPolicy.setParent(appender);
                 rollingPolicy.start();
                 appender.setRollingPolicy(rollingPolicy);
-                
+
                 final SizeBasedTriggeringPolicy<E> triggeringPolicy = new SizeBasedTriggeringPolicy<>();
                 triggeringPolicy.setMaxFileSize(String.valueOf(maxFileSize.toBytes()));
                 triggeringPolicy.setContext(context);
                 triggeringPolicy.start();
                 appender.setTriggeringPolicy(triggeringPolicy);
-                
+
                 return appender;
             } else {
                 final TimeBasedFileNamingAndTriggeringPolicy<E> triggeringPolicy;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -216,7 +216,7 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         appender.setThrowableExcluded(!includeStackTrace);
         appender.setStackTracePattern(stackTracePrefix);
         appender.addFilter(levelFilterFactory.build(threshold));
-        getFilterFactories().stream().forEach(f -> appender.addFilter(f.build()));
+        getFilterFactories().forEach(f -> appender.addFilter(f.build()));
         appender.start();
         return wrapAsync(appender, asyncAppenderFactory);
     }

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/assets/AssetServlet.java
Patch:
@@ -243,7 +243,7 @@ private boolean isCachedClientSide(HttpServletRequest req, CachedAsset cachedAss
     private ImmutableList<ByteRange> parseRangeHeader(final String rangeHeader,
             final int resourceLength) {
         final ImmutableList.Builder<ByteRange> builder = ImmutableList.builder();
-        if (rangeHeader.indexOf("=") != -1) {
+        if (rangeHeader.contains("=")) {
             final String[] parts = rangeHeader.split("=");
             if (parts.length > 1) {
                 final List<String> ranges = Splitter.on(",").trimResults().splitToList(parts[1]);

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/assets/ByteRange.java
Patch:
@@ -25,7 +25,7 @@ public int getEnd() {
     public static ByteRange parse(final String byteRange,
                                   final int resourceLength) {
         // missing separator
-        if (byteRange.indexOf("-") == -1) {
+        if (!byteRange.contains("-")) {
             final int start = Integer.parseInt(byteRange);
             return new ByteRange(start, resourceLength - 1);
         }

File: dropwizard-views/src/test/java/io/dropwizard/views/ViewBundleTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -31,7 +31,7 @@ public class MustacheViewRendererTest extends JerseyTest {
 
     private ViewRenderer renderer;
 
-    protected static final Map<String,String> DEFAULT_RENDERER_CFG = ImmutableMap.of();
+    protected static final Map<String, String> DEFAULT_RENDERER_CFG = ImmutableMap.of();
 
     @Path("/test/")
     @Produces(MediaType.TEXT_HTML)

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilderTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.lifecycle.setup;
 
-import com.google.common.base.Throwables;
 import io.dropwizard.util.Duration;
 import org.junit.Before;
 import org.junit.Test;
@@ -126,7 +125,7 @@ private void assertCanExecuteAtLeast2ConcurrentTasks(Executor exe) {
             try {
                 latch.await();
             } catch (InterruptedException ex) {
-                Throwables.propagate(ex);
+                throw new RuntimeException(ex);
             }
         };
 
@@ -139,7 +138,7 @@ private void assertCanExecuteAtLeast2ConcurrentTasks(Executor exe) {
                 .as("2 tasks executed concurrently on " + exe)
                 .isTrue();
         } catch (InterruptedException ex) {
-            Throwables.propagate(ex);
+            throw new RuntimeException(ex);
         }
     }
 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DAOTestRule.java
Patch:
@@ -197,7 +197,8 @@ public <T> T inTransaction(Callable<T> call) {
             return result;
         } catch (final Exception e) {
             transaction.rollback();
-            throw Throwables.propagate(e);
+            Throwables.throwIfUnchecked(e);
+            throw new RuntimeException(e);
         }
     }
 

File: dropwizard-util/src/main/java/io/dropwizard/util/Enums.java
Patch:
@@ -21,7 +21,7 @@ public class Enums {
      * @return The enum or null, if no enum constant matched the input value.
      */
     public static Enum<?> fromStringFuzzy(String value, Enum<?>[] constants) {
-        final String text = CharMatcher.WHITESPACE
+        final String text = CharMatcher.whitespace()
             .removeFrom(value)
             .replace('-', '_')
             .replace('.', '_');

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilderTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.lifecycle.setup;
 
-import com.google.common.base.Throwables;
 import io.dropwizard.util.Duration;
 import org.junit.Before;
 import org.junit.Test;
@@ -126,7 +125,7 @@ private void assertCanExecuteAtLeast2ConcurrentTasks(Executor exe) {
             try {
                 latch.await();
             } catch (InterruptedException ex) {
-                Throwables.propagate(ex);
+                throw new RuntimeException(ex);
             }
         };
 
@@ -139,7 +138,7 @@ private void assertCanExecuteAtLeast2ConcurrentTasks(Executor exe) {
                 .as("2 tasks executed concurrently on " + exe)
                 .isTrue();
         } catch (InterruptedException ex) {
-            Throwables.propagate(ex);
+            throw new RuntimeException(ex);
         }
     }
 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DAOTestRule.java
Patch:
@@ -197,7 +197,8 @@ public <T> T inTransaction(Callable<T> call) {
             return result;
         } catch (final Exception e) {
             transaction.rollback();
-            throw Throwables.propagate(e);
+            Throwables.throwIfUnchecked(e);
+            throw new RuntimeException(e);
         }
     }
 

File: dropwizard-util/src/main/java/io/dropwizard/util/Enums.java
Patch:
@@ -21,7 +21,7 @@ public class Enums {
      * @return The enum or null, if no enum constant matched the input value.
      */
     public static Enum<?> fromStringFuzzy(String value, Enum<?>[] constants) {
-        final String text = CharMatcher.WHITESPACE
+        final String text = CharMatcher.whitespace()
             .removeFrom(value)
             .replace('-', '_')
             .replace('.', '_');

File: dropwizard-example/src/test/java/com/example/helloworld/resources/PeopleResourceTest.java
Patch:
@@ -56,7 +56,7 @@ public void tearDown() {
     @Test
     public void createPerson() throws JsonProcessingException {
         when(PERSON_DAO.create(any(Person.class))).thenReturn(person);
-        final Response response = RESOURCES.client().target("/people")
+        final Response response = RESOURCES.target("/people")
                 .request(MediaType.APPLICATION_JSON_TYPE)
                 .post(Entity.entity(person, MediaType.APPLICATION_JSON_TYPE));
 
@@ -70,7 +70,7 @@ public void listPeople() throws Exception {
         final ImmutableList<Person> people = ImmutableList.of(person);
         when(PERSON_DAO.findAll()).thenReturn(people);
 
-        final List<Person> response = RESOURCES.client().target("/people")
+        final List<Person> response = RESOURCES.target("/people")
             .request().get(new GenericType<List<Person>>() {
             });
 

File: dropwizard-example/src/test/java/com/example/helloworld/resources/PersonResourceTest.java
Patch:
@@ -45,7 +45,7 @@ public void tearDown() {
     public void getPersonSuccess() {
         when(DAO.findById(1L)).thenReturn(Optional.of(person));
 
-        Person found = RULE.getJerseyTest().target("/people/1").request().get(Person.class);
+        Person found = RULE.target("/people/1").request().get(Person.class);
 
         assertThat(found.getId()).isEqualTo(person.getId());
         verify(DAO).findById(1L);
@@ -54,7 +54,7 @@ public void getPersonSuccess() {
     @Test
     public void getPersonNotFound() {
         when(DAO.findById(2L)).thenReturn(Optional.empty());
-        final Response response = RULE.getJerseyTest().target("/people/2").request().get();
+        final Response response = RULE.target("/people/2").request().get();
 
         assertThat(response.getStatusInfo().getStatusCode()).isEqualTo(Response.Status.NOT_FOUND.getStatusCode());
         verify(DAO).findById(2L);

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/ResourceTestWithGrizzly.java
Patch:
@@ -26,14 +26,14 @@ public class ResourceTestWithGrizzly {
 
     @Test
     public void testResource() {
-        assertThat(RESOURCES.getJerseyTest().target("test").request()
+        assertThat(RESOURCES.target("test").request()
                 .get(String.class))
                 .isEqualTo("test");
     }
 
     @Test
     public void testExceptionMapper() {
-        final Response resp = RESOURCES.getJerseyTest().target("test").request()
+        final Response resp = RESOURCES.target("test").request()
                 .post(Entity.json(""));
         assertThat(resp.getStatus()).isEqualTo(500);
         assertThat(resp.readEntity(String.class)).isEqualTo("Can't touch this");

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/YamlConfigurationFactory.java
Patch:
@@ -9,9 +9,9 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.node.TextNode;
 import com.fasterxml.jackson.databind.node.TreeTraversingParser;
+import com.fasterxml.jackson.dataformat.yaml.JacksonYAMLParseException;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import com.fasterxml.jackson.dataformat.yaml.snakeyaml.error.MarkedYAMLException;
-import com.fasterxml.jackson.dataformat.yaml.snakeyaml.error.YAMLException;
 import com.google.common.base.Joiner;
 import com.google.common.base.Splitter;
 
@@ -84,7 +84,7 @@ public T build(ConfigurationSourceProvider provider, String path) throws IOExcep
             }
 
             return build(node, path);
-        } catch (YAMLException e) {
+        } catch (JacksonYAMLParseException e) {
             final ConfigurationParsingException.Builder builder = ConfigurationParsingException
                     .builder("Malformed YAML")
                     .setCause(e)

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/FuzzyEnumModule.java
Patch:
@@ -76,7 +76,7 @@ public JsonDeserializer<?> findEnumDeserializer(Class<?> type,
                 for (AnnotatedMethod am : factoryMethods) {
                     final JsonCreator creator = am.getAnnotation(JsonCreator.class);
                     if (creator != null) {
-                        return EnumDeserializer.deserializerForCreator(config, type, am);
+                        return EnumDeserializer.deserializerForCreator(config, type, am, null, null);
                     }
                 }
             }

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -97,7 +97,7 @@ public void testConfiguredEnvironment() {
         assertEquals(http.getApplicationContextPath(), environment.getApplicationContext().getContextPath());
     }
 
-    private static String httpRequest(String requestMethod, String url) throws Exception {
+    public static String httpRequest(String requestMethod, String url) throws Exception {
         final HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
         connection.setRequestMethod(requestMethod);
         connection.connect();

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/Validators.java
Patch:
@@ -32,6 +32,7 @@ public static ValidatorFactory newValidatorFactory() {
      */
     public static HibernateValidatorConfiguration newConfiguration() {
         return BaseValidator.newConfiguration()
+                .parameterNameProvider(new JerseyParameterNameProvider())
                 .addValidatedValueHandler(new NonEmptyStringParamUnwrapper())
                 .addValidatedValueHandler(new ParamValidatorUnwrapper());
     }

File: dropwizard-core/src/main/java/io/dropwizard/setup/Environment.java
Patch:
@@ -3,6 +3,7 @@
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
 import com.codahale.metrics.health.HealthCheckRegistry;
+import com.codahale.metrics.health.SharedHealthCheckRegistries;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -88,6 +89,7 @@ public Environment(String name,
                 .build();
 
         SharedMetricRegistries.add("default", metricRegistry);
+        SharedHealthCheckRegistries.add("default", healthCheckRegistry);
     }
 
     /**

File: dropwizard-core/src/main/java/io/dropwizard/setup/Environment.java
Patch:
@@ -3,6 +3,7 @@
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
 import com.codahale.metrics.health.HealthCheckRegistry;
+import com.codahale.metrics.health.SharedHealthCheckRegistries;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.dropwizard.jersey.DropwizardResourceConfig;
@@ -88,6 +89,7 @@ public Environment(String name,
                 .build();
 
         SharedMetricRegistries.add("default", metricRegistry);
+        SharedHealthCheckRegistries.add("default", healthCheckRegistry);
     }
 
     /**

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -6,6 +6,7 @@
 import com.fasterxml.classmate.TypeResolver;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ComparisonChain;
+import com.google.common.collect.Ordering;
 import io.dropwizard.jersey.caching.CacheControlledResponseFeature;
 import io.dropwizard.jersey.params.NonEmptyStringParamFeature;
 import io.dropwizard.jersey.sessions.SessionFactoryProvider;
@@ -232,7 +233,7 @@ private static class EndpointComparator implements Comparator<EndpointLogLine>,
         public int compare(EndpointLogLine endpointA, EndpointLogLine endpointB) {
             return ComparisonChain.start()
                 .compare(endpointA.basePath, endpointB.basePath)
-                .compare(endpointA.httpMethod, endpointB.httpMethod)
+                .compare(endpointA.httpMethod, endpointB.httpMethod, Comparator.nullsLast(Ordering.natural()))
                 .result();
         }
     }

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2ConnectorFactory.java
Patch:
@@ -98,8 +98,6 @@ public Connector build(Server server, MetricRegistry metrics, String name, Threa
         setSupportedProtocols(ImmutableList.of("TLSv1.2"));
         setSupportedCipherSuites(ImmutableList.of("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"));
 
-        logSupportedParameters();
-
         // Setup connection factories
         final HttpConfiguration httpConfig = buildHttpConfiguration();
         final HttpConnectionFactory http1 = buildHttpConnectionFactory(httpConfig);
@@ -111,6 +109,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, Threa
         alpn.setDefaultProtocol(HTTP_1_1); // Speak HTTP 1.1 over TLS if negotiation fails
 
         final SslContextFactory sslContextFactory = buildSslContextFactory();
+        sslContextFactory.addLifeCycleListener(logSslInfoOnStart(sslContextFactory));
         server.addBean(sslContextFactory);
 
         // We should use ALPN as a negotiation protocol. Old clients that don't support it will be served

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.cli;
 
-import io.dropwizard.configuration.ConfigurationException;
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.ArgumentParsers;
@@ -83,8 +82,9 @@ public boolean run(String... arguments) throws Exception {
             stdErr.println(e.getMessage());
             e.getParser().printHelp(stdErr);
             return false;
-        } catch (ConfigurationException e) {
-            stdErr.println(e.getMessage());
+        } catch (Throwable t) {
+            // Unexpected exceptions should result in non-zero exit status of the process
+            stdErr.println(t.getMessage());
             return false;
         }
     }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/async/AsyncLoggingEventAppenderFactory.java
Patch:
@@ -10,8 +10,8 @@
 public class AsyncLoggingEventAppenderFactory implements AsyncAppenderFactory<ILoggingEvent> {
 
     /**
-     * Creates an {@link AsyncAppenderFactory} of type {@link ILoggingEvent}
-     * @return the {@link AsyncAppenderFactory}
+     * Creates an {@link AsyncAppenderBase} of type {@link ILoggingEvent}
+     * @return the {@link AsyncAppenderBase}
      */
     @Override
     public AsyncAppenderBase<ILoggingEvent> build() {

File: dropwizard-logging/src/main/java/io/dropwizard/logging/async/AsyncLoggingEventAppenderFactory.java
Patch:
@@ -10,8 +10,8 @@
 public class AsyncLoggingEventAppenderFactory implements AsyncAppenderFactory<ILoggingEvent> {
 
     /**
-     * Creates an {@link AsyncAppenderFactory} of type {@link ILoggingEvent}
-     * @return the {@link AsyncAppenderFactory}
+     * Creates an {@link AsyncAppenderBase} of type {@link ILoggingEvent}
+     * @return the {@link AsyncAppenderBase}
      */
     @Override
     public AsyncAppenderBase<ILoggingEvent> build() {

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PrincipalContainerRequestValueFactory.java
Patch:
@@ -14,6 +14,7 @@ class PrincipalContainerRequestValueFactory extends AbstractContainerRequestValu
      * @return {@link Principal} stored on the request, or {@code null}
      *         if no object was found.
      */
+    @Override
     public Principal provide() {
         final Principal principal = getContainerRequest().getSecurityContext().getUserPrincipal();
         if (principal == null) {

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/YamlConfigurationFactory.java
Patch:
@@ -21,6 +21,7 @@
 import javax.validation.Validator;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -106,7 +107,7 @@ public T build() throws IOException, ConfigurationException {
         try {
             final JsonNode node = mapper.valueToTree(klass.newInstance());
             return build(node, "default configuration");
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | SecurityException e) {
             throw new IllegalArgumentException("Unable create an instance " +
                     "of the configuration class: '" + klass.getCanonicalName() + "'", e);
         }

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -34,6 +34,7 @@
 import java.io.InputStreamReader;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.StandardCharsets;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executors;
@@ -163,7 +164,7 @@ public void testGracefulShutdown() throws Exception {
             URL url = new URL("http://localhost:" + port + "/app/test");
             URLConnection connection = url.openConnection();
             connection.connect();
-            return CharStreams.toString(new InputStreamReader(connection.getInputStream()));
+            return CharStreams.toString(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));
         });
 
         requestReceived.await(10, TimeUnit.SECONDS);

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.io.PrintWriter;
 import java.net.HttpURLConnection;
 import java.net.URL;
-
+import java.nio.charset.StandardCharsets;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
@@ -102,7 +102,7 @@ private static String httpRequest(String requestMethod, String url) throws Excep
         connection.setRequestMethod(requestMethod);
         connection.connect();
         try (InputStream inputStream = connection.getInputStream()) {
-            return CharStreams.toString(new InputStreamReader(inputStream));
+            return CharStreams.toString(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
         }
     }
 

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkAwareProxyFactory.java
Patch:
@@ -71,7 +71,7 @@ public <T> T create(Class<T> clazz, Class<?>[] constructorParamTypes, Object[] c
 
         try {
             final Proxy proxy = (Proxy) (constructorParamTypes.length == 0 ?
-                    factory.createClass().newInstance() :
+                    factory.createClass().getConstructor().newInstance() :
                     factory.create(constructorParamTypes, constructorArguments));
             proxy.setHandler((self, overridden, proceed, args) -> {
                 final UnitOfWork unitOfWork = overridden.getAnnotation(UnitOfWork.class);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/FlashFactory.java
Patch:
@@ -15,6 +15,7 @@ public FlashFactory(boolean doNotCreate) {
         this.doNotCreate = doNotCreate;
     }
 
+    @Override
     @SuppressWarnings("rawtypes")
     public Flash<?> provide() {
         if (request == null) {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/HttpSessionFactory.java
Patch:
@@ -15,6 +15,7 @@ public HttpSessionFactory(boolean doNotCreate) {
         this.doNotCreate = doNotCreate;
     }
 
+    @Override
     public HttpSession provide() {
         if (request == null) {
             return null;

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/NonblockingServletHolder.java
Patch:
@@ -33,7 +33,7 @@ public int hashCode() {
     }
 
     @Override
-    public Servlet getServlet() throws ServletException {
+    public synchronized Servlet getServlet() throws ServletException {
         return servlet;
     }
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/DefaultLoggingFactory.java
Patch:
@@ -115,6 +115,7 @@ public void setAppenders(List<AppenderFactory<ILoggingEvent>> appenders) {
         this.appenders = ImmutableList.copyOf(appenders);
     }
 
+    @Override
     public void configure(MetricRegistry metricRegistry, String name) {
         LoggingUtil.hijackJDKLogging();
 
@@ -161,6 +162,7 @@ public void configure(MetricRegistry metricRegistry, String name) {
         configureInstrumentation(root, metricRegistry);
     }
 
+    @Override
     public void stop() {
         // Should acquire the lock to avoid concurrent listener changes
         CHANGE_LOGGER_CONTEXT_LOCK.lock();

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/BaseReporterFactory.java
Patch:
@@ -133,6 +133,7 @@ public void setExcludes(ImmutableSet<String> excludes) {
         this.excludes = excludes;
     }
 
+    @Override
     @JsonProperty
     public Optional<Duration> getFrequency() {
         return frequency;

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/ConsoleReporterFactory.java
Patch:
@@ -40,7 +40,6 @@
  */
 @JsonTypeName("console")
 public class ConsoleReporterFactory extends BaseFormattedReporterFactory {
-    @SuppressWarnings("UnusedDeclaration")
     public enum ConsoleStream {
         STDOUT(System.out),
         STDERR(System.err);
@@ -82,6 +81,7 @@ public void setOutput(ConsoleStream stream) {
         this.output = stream;
     }
 
+    @Override
     public ScheduledReporter build(MetricRegistry registry) {
         return ConsoleReporter.forRegistry(registry)
                               .convertDurationsTo(getDurationUnit())

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/Slf4jReporterFactory.java
Patch:
@@ -66,6 +66,7 @@ public void setMarkerName(String markerName) {
         this.markerName = markerName;
     }
 
+    @Override
     public ScheduledReporter build(MetricRegistry registry) {
         final Slf4jReporter.Builder builder = Slf4jReporter.forRegistry(registry)
                                                            .convertDurationsTo(getDurationUnit())

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/LogbackAccessRequestLogFactory.java
Patch:
@@ -57,6 +57,7 @@ public void setAppenders(ImmutableList<AppenderFactory<IAccessEvent>> appenders)
     }
 
     @JsonIgnore
+    @Override
     public boolean isEnabled() {
         return !appenders.isEmpty();
     }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -216,7 +216,7 @@ public int getPort(int connectorIndex) {
 
     public Application<C> newApplication() {
         try {
-            return applicationClass.newInstance();
+            return applicationClass.getConstructor().newInstance();
         } catch (Exception e) {
             throw propagate(e);
         }

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardClientRuleTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.URL;
-
+import java.nio.charset.StandardCharsets;
 import static org.junit.Assert.assertEquals;
 
 public class DropwizardClientRuleTest {
@@ -20,14 +20,14 @@ public class DropwizardClientRuleTest {
     @Test(timeout = 5000)
     public void shouldGetStringBodyFromDropWizard() throws IOException {
         final URL url = new URL(RULE_WITH_INSTANCE.baseUri() + "/test");
-        final String response = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
+        final String response = new BufferedReader(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8)).readLine();
         assertEquals("foo", response);
     }
 
     @Test(timeout = 5000)
     public void shouldGetDefaultStringBodyFromDropWizard() throws IOException {
         final URL url = new URL(RULE_WITH_CLASS.baseUri() + "/test");
-        final String response = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
+        final String response = new BufferedReader(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8)).readLine();
         assertEquals(TestResource.DEFAULT_MESSAGE, response);
     }
 }

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -76,6 +76,7 @@ public void render(View view,
         }
     }
 
+    @Override
     public void configure(Map<String, String> baseConfig) {
         this.loader.setBaseConfig(baseConfig);
     }

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -100,6 +100,7 @@ public ViewBundle(Iterable<ViewRenderer> viewRenderers) {
         this.viewRenderers = ImmutableSet.copyOf(viewRenderers);
     }
 
+    @Override
     public Map<String, Map<String, String>> getViewConfiguration(T configuration) {
         return ImmutableMap.of();
     }

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -265,6 +265,9 @@ public void disablesNaglesAlgorithm() throws Exception {
     public void disablesStaleConnectionCheck() throws Exception {
         assertThat(builder.using(configuration).createClient(apacheBuilder, connectionManager, "test")).isNotNull();
 
+        // It is fine to use the isStaleConnectionCheckEnabled deprecated API, as we are ensuring
+        // that the builder creates a client that does not check for stale connections on each
+        // request, which adds significant overhead.
         assertThat(((RequestConfig) spyHttpClientBuilderField("defaultRequestConfig", apacheBuilder))
                 .isStaleConnectionCheckEnabled()).isFalse();
     }

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpServer;
 import io.dropwizard.jackson.Jackson;
-import org.glassfish.jersey.filter.LoggingFilter;
+import org.glassfish.jersey.logging.LoggingFeature;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -296,7 +296,7 @@ public void testFilterOnAWebTarget() {
         String uri = "http://127.0.0.1:" + httpServer.getAddress().getPort() + "/test";
 
         WebTarget target = jersey.target(uri);
-        target.register(new LoggingFilter());
+        target.register(new LoggingFeature());
         String firstResponse = target.request()
                 .buildGet()
                 .invoke()

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategy.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * A {@link PropertyNamingStrategy} implementation which, if the declaring class of a property is
  * annotated with {@link JsonSnakeCase}, uses a
- * {@link com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy}, and uses
+ * {@link com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy}, and uses
  * the default {@link PropertyNamingStrategy} otherwise.
  */
 public class AnnotationSensitivePropertyNamingStrategy extends PropertyNamingStrategy {

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -265,6 +265,9 @@ public void disablesNaglesAlgorithm() throws Exception {
     public void disablesStaleConnectionCheck() throws Exception {
         assertThat(builder.using(configuration).createClient(apacheBuilder, connectionManager, "test")).isNotNull();
 
+        // It is fine to use the isStaleConnectionCheckEnabled deprecated API, as we are ensuring
+        // that the builder creates a client that does not check for stale connections on each
+        // request, which adds significant overhead.
         assertThat(((RequestConfig) spyHttpClientBuilderField("defaultRequestConfig", apacheBuilder))
                 .isStaleConnectionCheckEnabled()).isFalse();
     }

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpServer;
 import io.dropwizard.jackson.Jackson;
-import org.glassfish.jersey.filter.LoggingFilter;
+import org.glassfish.jersey.logging.LoggingFeature;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -296,7 +296,7 @@ public void testFilterOnAWebTarget() {
         String uri = "http://127.0.0.1:" + httpServer.getAddress().getPort() + "/test";
 
         WebTarget target = jersey.target(uri);
-        target.register(new LoggingFilter());
+        target.register(new LoggingFeature());
         String firstResponse = target.request()
                 .buildGet()
                 .invoke()

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategy.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * A {@link PropertyNamingStrategy} implementation which, if the declaring class of a property is
  * annotated with {@link JsonSnakeCase}, uses a
- * {@link com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy}, and uses
+ * {@link com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy}, and uses
  * the default {@link PropertyNamingStrategy} otherwise.
  */
 public class AnnotationSensitivePropertyNamingStrategy extends PropertyNamingStrategy {

File: dropwizard-validation/src/main/java/io/dropwizard/validation/DurationRange.java
Patch:
@@ -14,6 +14,7 @@
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -22,7 +23,7 @@
  */
 @Documented
 @Constraint(validatedBy = { })
-@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
 @Retention(RUNTIME)
 @MinDuration(0)
 @MaxDuration(value = Long.MAX_VALUE, unit = TimeUnit.DAYS)

File: dropwizard-validation/src/main/java/io/dropwizard/validation/MaxDuration.java
Patch:
@@ -12,6 +12,7 @@
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -20,7 +21,7 @@
  * <p/>
  * <code>null</code> elements are considered valid
  */
-@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
 @Retention(RUNTIME)
 @Documented
 @Constraint(validatedBy = MaxDurationValidator.class)

File: dropwizard-validation/src/main/java/io/dropwizard/validation/MaxSize.java
Patch:
@@ -13,6 +13,7 @@
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -21,7 +22,7 @@
  * <p/>
  * <code>null</code> elements are considered valid
  */
-@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
 @Retention(RUNTIME)
 @Documented
 @Constraint(validatedBy = MaxSizeValidator.class)

File: dropwizard-validation/src/main/java/io/dropwizard/validation/MinDuration.java
Patch:
@@ -12,6 +12,7 @@
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -20,7 +21,7 @@
  * <p/>
  * <code>null</code> elements are considered valid
  */
-@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
 @Retention(RUNTIME)
 @Documented
 @Constraint(validatedBy = MinDurationValidator.class)

File: dropwizard-validation/src/main/java/io/dropwizard/validation/MinSize.java
Patch:
@@ -13,6 +13,7 @@
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -21,7 +22,7 @@
  * <p/>
  * <code>null</code> elements are considered valid
  */
-@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
 @Retention(RUNTIME)
 @Documented
 @Constraint(validatedBy = MinSizeValidator.class)

File: dropwizard-validation/src/main/java/io/dropwizard/validation/OneOf.java
Patch:
@@ -11,12 +11,13 @@
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * Checks to see that the value is one of a set of elements.
  */
-@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER})
+@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE})
 @Retention(RUNTIME)
 @Documented
 @Constraint(validatedBy = OneOfValidator.class)

File: dropwizard-validation/src/main/java/io/dropwizard/validation/PortRange.java
Patch:
@@ -9,14 +9,15 @@
 import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
  * A constraint that allows one to specify a port range, but still allow 0 as the port value to
  * indicate dynamically allocated ports.
  *
  */
-@Target({ METHOD, FIELD, ANNOTATION_TYPE })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, TYPE_USE })
 @Retention(RUNTIME)
 @Constraint(validatedBy = PortRangeValidator.class)
 @Documented

File: dropwizard-validation/src/main/java/io/dropwizard/validation/SizeRange.java
Patch:
@@ -15,6 +15,7 @@
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.TYPE_USE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -23,7 +24,7 @@
  */
 @Documented
 @Constraint(validatedBy = { })
-@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
+@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
 @Retention(RUNTIME)
 @MinSize(0)
 @MaxSize(value = Long.MAX_VALUE, unit = SizeUnit.TERABYTES)
@@ -50,7 +51,7 @@
     /**
      * Defines several {@code @SizeRange} annotations on the same element.
      */
-    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
+    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
     @Retention(RUNTIME)
     @Documented
     public @interface List {

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -46,7 +46,7 @@ public class SimpleServerFactoryTest {
     public void setUp() throws Exception {
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class,
                 FileAppenderFactory.class, SyslogAppenderFactory.class, HttpConnectorFactory.class);
-        http = new YamlConfigurationFactory<>(SimpleServerFactory.class, validator, objectMapper, "dw")
+        http = (SimpleServerFactory) new YamlConfigurationFactory<>(ServerFactory.class, validator, objectMapper, "dw")
                 .build(new File(Resources.getResource("yaml/simple_server.yml").toURI()));
     }
 

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkAwareProxyFactory.java
Patch:
@@ -87,6 +87,8 @@ public <T> T create(Class<T> clazz, Class<?>[] constructorParamTypes, Object[] c
                 } catch (Exception e) {
                     unitOfWorkAspect.onError();
                     throw e;
+                } finally {
+                    unitOfWorkAspect.onFinish();
                 }
             });
             return (T) proxy;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java
Patch:
@@ -106,6 +106,8 @@ public static Optional<String> isRequestEntity(ConstraintViolation<?> violation,
                 if (param.getSource().equals(Parameter.Source.UNKNOWN)) {
                     return Optional.of(Joiner.on('.').join(Iterables.skip(violation.getPropertyPath(), 2)));
                 }
+            default:
+                break;
         }
 
         return Optional.empty();

File: dropwizard-logging/src/main/java/io/dropwizard/logging/BootstrapLogging.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class BootstrapLogging {
 
-    @GuardedBy("bootsrappingLock")
+    @GuardedBy("bootstrappingLock")
     private static boolean bootstrapped = false;
     private static final Lock bootstrappingLock = new ReentrantLock();
 

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2CIntegrationTest.java
Patch:
@@ -62,9 +62,6 @@ public void testHttp2c() throws Exception {
 
     @Test
     public void testHttp2cManyRequests() throws Exception {
-        // For some reason the library requires to perform the first request synchronously with HTTP/2
-        testHttp2c();
-
         performManyAsyncRequests(client, "http://localhost:" + appRule.getLocalPort() + "/api/test");
     }
 }

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2IntegrationTest.java
Patch:
@@ -74,9 +74,6 @@ public void testHttp2() throws Exception {
 
     @Test
     public void testHttp2ManyRequests() throws Exception {
-        // For some reason the library requires to perform the first request synchronously with HTTP/2
-        testHttp2();
-
         performManyAsyncRequests(client, "https://localhost:" + appRule.getLocalPort() + "/api/test");
     }
 }

File: dropwizard-client/src/test/java/io/dropwizard/client/DropwizardApacheConnectorTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.ClassRule;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -50,7 +49,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-@Ignore //These tests are consistently failing on travis CI because of network timeouts
 public class DropwizardApacheConnectorTest {
 
     private static final int SLEEP_TIME_IN_MILLIS = 1000;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java
Patch:
@@ -1,13 +1,11 @@
 package io.dropwizard.auth;
 
+import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.server.model.AnnotatedMethod;
 
 import javax.annotation.security.DenyAll;
 import javax.annotation.security.PermitAll;
 import javax.annotation.security.RolesAllowed;
-
-import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
-
 import javax.ws.rs.container.ContainerRequestFilter;
 import javax.ws.rs.container.DynamicFeature;
 import javax.ws.rs.container.ResourceInfo;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -9,6 +9,7 @@
 import com.google.common.cache.CacheBuilderSpec;
 import com.google.common.cache.CacheStats;
 import com.google.common.collect.Sets;
+
 import java.security.Principal;
 import java.util.Optional;
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PolymorphicAuthDynamicFeature.java
Patch:
@@ -3,12 +3,12 @@
 import com.google.common.collect.ImmutableMap;
 import org.glassfish.jersey.server.model.AnnotatedMethod;
 
-import java.lang.annotation.Annotation;
-import java.security.Principal;
 import javax.ws.rs.container.ContainerRequestFilter;
 import javax.ws.rs.container.DynamicFeature;
 import javax.ws.rs.container.ResourceInfo;
 import javax.ws.rs.core.FeatureContext;
+import java.lang.annotation.Annotation;
+import java.security.Principal;
 
 /**
  * A {@link DynamicFeature} that registers the provided auth filters

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PolymorphicAuthValueFactoryProvider.java
Patch:
@@ -11,10 +11,10 @@
 import org.glassfish.jersey.server.model.Parameter;
 import org.glassfish.jersey.server.spi.internal.ValueFactoryProvider;
 
-import java.util.Set;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import java.security.Principal;
+import java.util.Set;
 
 /**
  * Value factory provider supporting injection of a hierarchy of

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PrincipalImpl.java
Patch:
@@ -1,8 +1,9 @@
 package io.dropwizard.auth;
 
+import com.google.common.base.MoreObjects;
+
 import java.security.Principal;
 import java.util.Objects;
-import com.google.common.base.MoreObjects;
 
 public class PrincipalImpl implements Principal {
     private final String name;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/AuthBaseTest.java
Patch:
@@ -11,8 +11,10 @@
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
 import org.junit.Test;
+
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.HttpHeaders;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CachingAuthenticatorTest.java
Patch:
@@ -26,7 +26,7 @@ public class CachingAuthenticatorTest {
 
     @Before
     public void setUp() throws Exception {
-        when(underlying.authenticate(anyString())).thenReturn(Optional.<Principal>of(new PrincipalImpl("principal")));
+        when(underlying.authenticate(anyString())).thenReturn(Optional.of(new PrincipalImpl("principal")));
     }
 
     @Test
@@ -100,7 +100,7 @@ public void calculatesCacheStats() throws Exception {
 
     @Test
     public void shouldNotCacheAbsentPrincipals() throws Exception {
-        when(underlying.authenticate(anyString())).thenReturn(Optional.<Principal>empty());
+        when(underlying.authenticate(anyString())).thenReturn(Optional.empty());
         assertThat(cached.authenticate("credentials")).isEqualTo(Optional.empty());
         verify(underlying).authenticate("credentials");
         assertThat(cached.size()).isEqualTo(0);

File: dropwizard-auth/src/test/java/io/dropwizard/auth/principal/NoAuthPrincipalEntityTest.java
Patch:
@@ -14,12 +14,10 @@
 import org.junit.Test;
 
 import javax.ws.rs.client.Entity;
-import javax.ws.rs.container.ContainerRequestContext;
 import javax.ws.rs.container.ContainerRequestFilter;
 import javax.ws.rs.container.DynamicFeature;
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.MediaType;
-import java.io.IOException;
 import java.security.Principal;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-auth/src/test/java/io/dropwizard/auth/util/AuthUtil.java
Patch:
@@ -15,7 +15,7 @@ public class AuthUtil {
     public static Authenticator<BasicCredentials, Principal> getBasicAuthenticator(final List<String> validUsers) {
         return credentials -> {
             if (validUsers.contains(credentials.getUsername()) && "secret".equals(credentials.getPassword())) {
-                return Optional.<Principal>of(new PrincipalImpl(credentials.getUsername()));
+                return Optional.of(new PrincipalImpl(credentials.getUsername()));
             }
             if ("bad-guy".equals(credentials.getUsername())) {
                 throw new AuthenticationException("CRAP");
@@ -28,7 +28,7 @@ public static Authenticator<String, Principal> getSingleUserOAuthAuthenticator(f
                                                                                    final String returned) {
         return user -> {
             if (presented.equals(user)) {
-                return Optional.<Principal>of(new PrincipalImpl(returned));
+                return Optional.of(new PrincipalImpl(returned));
             }
             if ("bad-guy".equals(user)) {
                 throw new AuthenticationException("CRAP");
@@ -40,7 +40,7 @@ public static Authenticator<String, Principal> getSingleUserOAuthAuthenticator(f
     public static Authenticator<String, Principal> getMultiplyUsersOAuthAuthenticator(final List<String> validUsers) {
         return credentials -> {
             if (validUsers.contains(credentials)) {
-                return Optional.<Principal>of(new PrincipalImpl(credentials));
+                return Optional.of(new PrincipalImpl(credentials));
             }
             if ("bad-guy".equals(credentials)) {
                 throw new AuthenticationException("CRAP");

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/ConstraintViolationBenchmark.java
Patch:
@@ -3,7 +3,6 @@
 import io.dropwizard.jersey.validation.ConstraintMessage;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.logging.BootstrapLogging;
-import org.glassfish.jersey.process.Inflector;
 import org.glassfish.jersey.server.model.Invocable;
 import org.hibernate.validator.constraints.NotEmpty;
 import org.openjdk.jmh.annotations.Benchmark;
@@ -21,7 +20,6 @@
 import javax.validation.Validator;
 import javax.validation.executable.ExecutableValidator;
 import javax.ws.rs.HeaderParam;
-import javax.ws.rs.core.Request;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/DropwizardResourceConfigBenchmark.java
Patch:
@@ -13,12 +13,12 @@
 import org.openjdk.jmh.runner.Runner;
 import org.openjdk.jmh.runner.options.OptionsBuilder;
 
-import javax.ws.rs.GET;
 import javax.ws.rs.DELETE;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
+import javax.ws.rs.GET;
 import javax.ws.rs.POST;
 import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardApacheConnector.java
Patch:
@@ -187,7 +187,7 @@ private HttpEntity getHttpEntity(ClientRequest jerseyRequest) {
     @Override
     public Future<?> apply(final ClientRequest request, final AsyncConnectorCallback callback) {
         // Simulate an asynchronous execution
-        return MoreExecutors.newDirectExecutorService().submit((Runnable) () -> {
+        return MoreExecutors.newDirectExecutorService().submit(() -> {
             try {
                 callback.response(apply(request));
             } catch (Exception e) {

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -18,7 +18,6 @@
 import org.apache.http.conn.routing.HttpRoutePlanner;
 import org.apache.http.conn.socket.ConnectionSocketFactory;
 import org.glassfish.jersey.client.ClientConfig;
-import org.glassfish.jersey.client.spi.Connector;
 import org.glassfish.jersey.client.spi.ConnectorProvider;
 
 import javax.validation.Validator;

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilter.java
Patch:
@@ -1,12 +1,11 @@
 package io.dropwizard.client;
 
-import java.io.IOException;
+import org.glassfish.jersey.client.ClientRequest;
 
 import javax.ws.rs.client.ClientRequestContext;
 import javax.ws.rs.client.ClientRequestFilter;
 import javax.ws.rs.ext.Provider;
-
-import org.glassfish.jersey.client.ClientRequest;
+import java.io.IOException;
 
 /**
  * Prevents Jersey from modification Request's User-Agent header with default value,

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -61,10 +61,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.never;
 
 public class JerseyClientBuilderTest {
     private final JerseyClientBuilder builder = new JerseyClientBuilder(new MetricRegistry());

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientConfigurationTest.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.client;
 
 import com.google.common.io.Resources;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/HttpClientConfigurationTest.java
Patch:
@@ -8,7 +8,6 @@
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
-
 import org.junit.Test;
 
 import java.io.File;

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/NonProxyListProxyRoutePlannerTest.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.client.proxy;
 
 import com.google.common.collect.ImmutableList;
-import io.dropwizard.client.proxy.NonProxyListProxyRoutePlanner;
 import org.apache.http.HttpHost;
 import org.apache.http.HttpRequest;
 import org.apache.http.protocol.HttpContext;

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationFactoryFactory.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.configuration;
 
-import javax.validation.Validator;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import javax.validation.Validator;
+
 public interface ConfigurationFactoryFactory<T> {
     ConfigurationFactory<T> create(Class<T> klass,
             Validator validator,

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/DefaultConfigurationFactoryFactory.java
Patch:
@@ -1,14 +1,14 @@
 package io.dropwizard.configuration;
 
-import javax.validation.Validator;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import javax.validation.Validator;
+
 public class DefaultConfigurationFactoryFactory<T> implements ConfigurationFactoryFactory<T> {
     @Override
     public ConfigurationFactory<T> create(
             Class<T>     klass,
-            Validator    validator, 
+            Validator    validator,
             ObjectMapper objectMapper,
             String       propertyPrefix) {
         return new YamlConfigurationFactory<>(klass, validator, objectMapper, propertyPrefix);

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/FileConfigurationSourceProvider.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.configuration;
 
-import java.io.InputStream;
-import java.io.IOException;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
 
 /**
  * An implementation of {@link ConfigurationSourceProvider} that reads the configuration from the

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/SubstitutingSourceProviderTest.java
Patch:
@@ -7,8 +7,8 @@
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -5,8 +5,8 @@
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.ArgumentParsers;
 import net.sourceforge.argparse4j.impl.Arguments;
-import net.sourceforge.argparse4j.inf.ArgumentAction;
 import net.sourceforge.argparse4j.inf.Argument;
+import net.sourceforge.argparse4j.inf.ArgumentAction;
 import net.sourceforge.argparse4j.inf.ArgumentParser;
 import net.sourceforge.argparse4j.inf.ArgumentParserException;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -152,8 +152,8 @@ public void setAdminContextPath(final String adminContextPath) {
 
     @Override
     public Server build(Environment environment) {
-    	// ensures that the environment is configured before the server is built
-    	configure(environment);
+        // ensures that the environment is configured before the server is built
+        configure(environment);
 
         printBanner(environment.getName());
         final ThreadPool threadPool = createThreadPool(environment.metrics());

File: dropwizard-core/src/main/java/io/dropwizard/server/SimpleServerFactory.java
Patch:
@@ -99,8 +99,8 @@ public void setAdminContextPath(String contextPath) {
 
     @Override
     public Server build(Environment environment) {
-    	// ensures that the environment is configured before the server is built
-    	configure(environment);
+        // ensures that the environment is configured before the server is built
+        configure(environment);
 
         printBanner(environment.getName());
         final ThreadPool threadPool = createThreadPool(environment.metrics());

File: dropwizard-core/src/test/java/io/dropwizard/cli/InheritedServerCommandTest.java
Patch:
@@ -11,11 +11,8 @@
 import io.dropwizard.setup.Environment;
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.inf.Argument;
-import net.sourceforge.argparse4j.inf.ArgumentParser;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;
-import net.sourceforge.argparse4j.internal.ArgumentParserImpl;
-import net.sourceforge.argparse4j.internal.SubparserImpl;
 import org.eclipse.jetty.server.Server;
 import org.junit.After;
 import org.junit.Before;

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -5,7 +5,6 @@
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.io.CharStreams;
 import com.google.common.io.Resources;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
@@ -31,6 +30,7 @@
 import java.io.PrintWriter;
 import java.net.HttpURLConnection;
 import java.net.URL;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
@@ -93,8 +93,8 @@ public void testBuild() throws Exception {
     public void testConfiguredEnvironment() {
         http.configure(environment);
 
-    	assertEquals(http.getAdminContextPath(), environment.getAdminContext().getContextPath());
-    	assertEquals(http.getApplicationContextPath(), environment.getApplicationContext().getContextPath());
+        assertEquals(http.getAdminContextPath(), environment.getAdminContext().getContextPath());
+        assertEquals(http.getApplicationContextPath(), environment.getApplicationContext().getContextPath());
     }
 
     private static String httpRequest(String requestMethod, String url) throws Exception {

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -16,8 +16,8 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Properties;
 import java.util.Optional;
+import java.util.Properties;
 import java.util.concurrent.TimeUnit;
 
 /**

File: dropwizard-db/src/main/java/io/dropwizard/db/PooledDataSourceFactory.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.db;
 
 import com.codahale.metrics.MetricRegistry;
-import java.util.Optional;
 import io.dropwizard.util.Duration;
 
 import java.util.Map;
+import java.util.Optional;
 
 /**
  * Interface of a factory that produces JDBC data sources

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceConfigurationTest.java
Patch:
@@ -1,8 +1,6 @@
 package io.dropwizard.db;
 
 import com.google.common.io.Resources;
-
-import io.dropwizard.configuration.ConfigurationValidationException;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
@@ -13,7 +11,6 @@
 import java.util.Optional;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
 
 public class DataSourceConfigurationTest {
 

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -6,7 +6,6 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.BaseValidator;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -18,7 +17,6 @@
 import java.util.Optional;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
 
 public class DataSourceFactoryTest {
     private final MetricRegistry metricRegistry = new MetricRegistry();

File: dropwizard-db/src/test/java/io/dropwizard/db/TimeBoundHealthCheckTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.codahale.metrics.health.HealthCheck;
 import io.dropwizard.util.Duration;
 import org.junit.Test;
+
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
@@ -16,15 +17,15 @@
 import static org.mockito.Mockito.when;
 
 public class TimeBoundHealthCheckTest {
-    
+
     @Test
     @SuppressWarnings("unchecked")
     public void testCheck() throws InterruptedException, ExecutionException, TimeoutException {
         final ExecutorService executorService = mock(ExecutorService.class);
         final Duration duration = mock(Duration.class);
         when(duration.getQuantity()).thenReturn(5L);
         when(duration.getUnit()).thenReturn(TimeUnit.SECONDS);
-        
+
         final Callable<HealthCheck.Result> callable = mock(Callable.class);
         final Future<HealthCheck.Result> future = mock(Future.class);
         when(executorService.submit(callable)).thenReturn(future);

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java
Patch:
@@ -1,8 +1,7 @@
 package com.example.helloworld;
 
-import com.example.helloworld.auth.ExampleAuthorizer;
-import io.dropwizard.auth.AuthValueFactoryProvider;
 import com.example.helloworld.auth.ExampleAuthenticator;
+import com.example.helloworld.auth.ExampleAuthorizer;
 import com.example.helloworld.cli.RenderCommand;
 import com.example.helloworld.core.Person;
 import com.example.helloworld.core.Template;
@@ -19,6 +18,7 @@
 import io.dropwizard.Application;
 import io.dropwizard.assets.AssetsBundle;
 import io.dropwizard.auth.AuthDynamicFeature;
+import io.dropwizard.auth.AuthValueFactoryProvider;
 import io.dropwizard.auth.basic.BasicCredentialAuthFilter;
 import io.dropwizard.configuration.EnvironmentVariableSubstitutor;
 import io.dropwizard.configuration.SubstitutingSourceProvider;
@@ -29,6 +29,7 @@
 import io.dropwizard.setup.Environment;
 import io.dropwizard.views.ViewBundle;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
+
 import java.util.Map;
 
 public class HelloWorldApplication extends Application<HelloWorldConfiguration> {

File: dropwizard-example/src/main/java/com/example/helloworld/resources/ProtectedClassResource.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.example.helloworld.core.User;
 import io.dropwizard.auth.Auth;
+
 import javax.annotation.security.PermitAll;
 import javax.annotation.security.RolesAllowed;
 import javax.ws.rs.GET;

File: dropwizard-example/src/main/java/com/example/helloworld/views/PersonView.java
Patch:
@@ -1,7 +1,6 @@
 package com.example.helloworld.views;
 
 import com.example.helloworld.core.Person;
-
 import io.dropwizard.views.View;
 
 public class PersonView extends View {

File: dropwizard-example/src/test/java/com/example/helloworld/resources/ProtectedClassResourceTest.java
Patch:
@@ -7,13 +7,14 @@
 import io.dropwizard.auth.AuthValueFactoryProvider;
 import io.dropwizard.auth.basic.BasicCredentialAuthFilter;
 import io.dropwizard.testing.junit.ResourceTestRule;
-import javax.ws.rs.ForbiddenException;
-import javax.ws.rs.core.HttpHeaders;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.junit.ClassRule;
 import org.junit.Test;
 
+import javax.ws.rs.ForbiddenException;
+import javax.ws.rs.core.HttpHeaders;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/Dog.java
Patch:
@@ -1,14 +1,14 @@
 package io.dropwizard.hibernate;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
+
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.Table;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
-
 @Entity
 @Table(name = "dogs")
 public class Dog {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkApplicationListenerTest.java
Patch:
@@ -20,9 +20,9 @@
 
 import java.lang.reflect.Method;
 
-import static org.hibernate.resource.transaction.spi.TransactionStatus.*;
-
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hibernate.resource.transaction.spi.TransactionStatus.ACTIVE;
+import static org.hibernate.resource.transaction.spi.TransactionStatus.NOT_ACTIVE;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/GuavaExtrasModule.java
Patch:
@@ -5,8 +5,8 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.databind.BeanDescription;
-import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.DeserializationConfig;
+import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonMappingException;

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/DBIHealthCheck.java
Patch:
@@ -7,7 +7,6 @@
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 
-import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 
 public class DBIHealthCheck extends HealthCheck {

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/DBIHealthCheckTest.java
Patch:
@@ -4,8 +4,6 @@
 import io.dropwizard.util.Duration;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalDateTimeTest.java
Patch:
@@ -51,14 +51,14 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final DateTime startDate = DateTime.now();
         final DateTime endDate = startDate.plusDays(1);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>absent());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.absent());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
-        dao.insert(2, Optional.of("Kate Johansen"), DateTime.now(), Optional.<DateTime>absent(), Optional.of("To be done"));
+        dao.insert(2, Optional.of("Kate Johansen"), DateTime.now(), Optional.absent(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalInstantTest.java
Patch:
@@ -51,15 +51,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final Instant startDate = Instant.now();
         final Instant endDate = startDate.plus(1L, ChronoUnit.DAYS);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>absent());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.absent());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), Instant.now(),
-                Optional.<Instant>absent(), Optional.of("To be done"));
+                Optional.absent(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalLocalDateTest.java
Patch:
@@ -50,15 +50,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final LocalDate startDate = LocalDate.now();
         final LocalDate endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>absent());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.absent());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), LocalDate.now(),
-                Optional.<LocalDate>absent(), Optional.of("To be done"));
+                Optional.absent(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalLocalDateTimeTest.java
Patch:
@@ -50,15 +50,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final LocalDateTime startDate = LocalDateTime.now();
         final LocalDateTime endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>absent());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.absent());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), LocalDateTime.now(),
-                Optional.<LocalDateTime>absent(), Optional.of("To be done"));
+                Optional.absent(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalOffsetDateTimeTest.java
Patch:
@@ -51,15 +51,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final OffsetDateTime startDate = OffsetDateTime.now();
         final OffsetDateTime endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>absent());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.absent());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), OffsetDateTime.now(),
-                Optional.<OffsetDateTime>absent(), Optional.of("To be done"));
+                Optional.absent(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/GuavaOptionalZonedDateTimeTest.java
Patch:
@@ -51,15 +51,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final ZonedDateTime startDate = ZonedDateTime.now();
         final ZonedDateTime endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>absent());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.absent());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), ZonedDateTime.now(),
-                Optional.<ZonedDateTime>absent(), Optional.of("To be done"));
+                Optional.absent(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalDateTimeTest.java
Patch:
@@ -52,15 +52,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final DateTime startDate = DateTime.now();
         final DateTime endDate = startDate.plusDays(1);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>empty());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.empty());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), DateTime.now(),
-                Optional.<DateTime>empty(), Optional.of("To be done"));
+                Optional.empty(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalInstantTest.java
Patch:
@@ -51,15 +51,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final Instant startDate = Instant.now();
         final Instant endDate = startDate.plus(1L, ChronoUnit.DAYS);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>empty());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.empty());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), Instant.now(),
-                Optional.<Instant>empty(), Optional.of("To be done"));
+                Optional.empty(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalLocalDateTest.java
Patch:
@@ -50,15 +50,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final LocalDate startDate = LocalDate.now();
         final LocalDate endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>empty());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.empty());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), LocalDate.now(),
-                Optional.<LocalDate>empty(), Optional.of("To be done"));
+                Optional.empty(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalLocalDateTimeTest.java
Patch:
@@ -50,15 +50,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final LocalDateTime startDate = LocalDateTime.now();
         final LocalDateTime endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>empty());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.empty());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), LocalDateTime.now(),
-                Optional.<LocalDateTime>empty(), Optional.of("To be done"));
+                Optional.empty(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalOffsetDateTimeTest.java
Patch:
@@ -51,15 +51,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final OffsetDateTime startDate = OffsetDateTime.now();
         final OffsetDateTime endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>empty());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.empty());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), OffsetDateTime.now(),
-                Optional.<OffsetDateTime>empty(), Optional.of("To be done"));
+                Optional.empty(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/OptionalZonedDateTimeTest.java
Patch:
@@ -51,15 +51,15 @@ public void setupTests() throws IOException {
     public void testPresent() {
         final ZonedDateTime startDate = ZonedDateTime.now();
         final ZonedDateTime endDate = startDate.plusDays(1L);
-        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.<String>empty());
+        dao.insert(1, Optional.of("John Hughes"), startDate, Optional.of(endDate), Optional.empty());
 
         assertThat(dao.findEndDateById(1).get()).isEqualTo(endDate);
     }
 
     @Test
     public void testAbsent() {
         dao.insert(2, Optional.of("Kate Johansen"), ZonedDateTime.now(),
-                Optional.<ZonedDateTime>empty(), Optional.of("To be done"));
+                Optional.empty(), Optional.of("To be done"));
 
         assertThat(dao.findEndDateById(2).isPresent()).isFalse();
     }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/ErrorMessage.java
Patch:
@@ -1,11 +1,12 @@
 package io.dropwizard.jersey.errors;
 
-import java.util.Objects;
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.common.base.MoreObjects;
 
+import java.util.Objects;
+
 @JsonInclude(JsonInclude.Include.NON_NULL)
 public class ErrorMessage {
     private final int code;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/filter/AllowedMethodsFilter.java
Patch:
@@ -5,8 +5,8 @@
 import org.slf4j.LoggerFactory;
 
 import javax.servlet.Filter;
-import javax.servlet.FilterConfig;
 import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamConverterProvider.java
Patch:
@@ -13,7 +13,6 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.List;
-import java.util.Set;
 
 @Singleton
 public class OptionalParamConverterProvider implements ParamConverterProvider {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoder.java
Patch:
@@ -1,8 +1,5 @@
 package io.dropwizard.jersey.gzip;
 
-import java.io.IOException;
-import java.util.zip.GZIPOutputStream;
-
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
 import javax.ws.rs.client.ClientRequestContext;
@@ -11,6 +8,8 @@
 import javax.ws.rs.ext.Provider;
 import javax.ws.rs.ext.WriterInterceptor;
 import javax.ws.rs.ext.WriterInterceptorContext;
+import java.io.IOException;
+import java.util.zip.GZIPOutputStream;
 
 /**
  * GZIP encoding support. Writer interceptor that encodes the output  if

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/GZipDecoder.java
Patch:
@@ -1,14 +1,13 @@
 package io.dropwizard.jersey.gzip;
 
-import java.io.IOException;
-import java.util.zip.GZIPInputStream;
-
 import javax.annotation.Priority;
 import javax.ws.rs.Priorities;
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.ext.Provider;
 import javax.ws.rs.ext.ReaderInterceptor;
 import javax.ws.rs.ext.ReaderInterceptorContext;
+import java.io.IOException;
+import java.util.zip.GZIPInputStream;
 
 /**
  * GZIP encoding support. Reader interceptor that decodes the input  if

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalParamConverterProvider.java
Patch:
@@ -13,7 +13,6 @@
 import java.lang.reflect.Type;
 import java.util.List;
 import java.util.Optional;
-import java.util.Set;
 
 @Singleton
 public class OptionalParamConverterProvider implements ParamConverterProvider {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/FlashFactory.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.jersey.sessions;
 
+import org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 import javax.ws.rs.core.Context;
 
-import org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory;
-
 public final class FlashFactory extends AbstractContainerRequestValueFactory<Flash<?>> {
     @Context
     private HttpServletRequest request;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/HttpSessionFactory.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.jersey.sessions;
 
+import org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 import javax.ws.rs.core.Context;
 
-import org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory;
-
 public final class HttpSessionFactory extends AbstractContainerRequestValueFactory<HttpSession> {
     @Context
     private HttpServletRequest request;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/setup/JerseyServletContainer.java
Patch:
@@ -1,8 +1,7 @@
 package io.dropwizard.jersey.setup;
 
-import org.glassfish.jersey.servlet.ServletContainer;
-
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import org.glassfish.jersey.servlet.ServletContainer;
 
 /**
  * Extends {@link ServletContainer} to provide consumers of dropwizard-jersey

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/JerseyViolationExceptionMapper.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jersey.validation;
 
-import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import org.glassfish.jersey.server.model.Invocable;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ParamValidatorUnwrapper.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.jersey.validation;
 
 
-import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
 import io.dropwizard.jersey.params.AbstractParam;
 import org.hibernate.validator.spi.valuehandling.ValidatedValueUnwrapper;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/DropwizardResourceConfigTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey;
 
+import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.dummy.DummyResource;
 import io.dropwizard.logging.BootstrapLogging;
 import org.junit.Before;
@@ -13,7 +14,6 @@
 import javax.ws.rs.core.MediaType;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import com.codahale.metrics.MetricRegistry;
 
 public class DropwizardResourceConfigTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/DefaultJacksonMessageBodyProvider.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.jersey.jackson;
 
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.jersey.validation.Validators;
 
 import javax.ws.rs.ext.Provider;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
-import javax.validation.Validator;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/SessionResource.java
Patch:
@@ -1,14 +1,13 @@
 package io.dropwizard.jersey.sessions;
 
-import java.util.Objects;
-
 import javax.servlet.http.HttpSession;
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
+import java.util.Objects;
 
 @Path("/session/")
 @Consumes(MediaType.TEXT_PLAIN)

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/BiDiGzipHandler.java
Patch:
@@ -18,9 +18,9 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Enumeration;
+import java.util.zip.GZIPInputStream;
 import java.util.zip.Inflater;
 import java.util.zip.InflaterInputStream;
-import java.util.zip.GZIPInputStream;
 
 /**
  * An extension of {@link GzipHandler} which decompresses gzip- and deflate-encoded request
@@ -34,7 +34,7 @@ public class BiDiGzipHandler extends GzipHandler {
      * Size of the buffer for decompressing requests
      */
     private int inputBufferSize = 8192;
-   
+
     /**
      * Whether inflating (decompressing) of deflate-encoded requests
      * should be performed in the GZIP-compatible mode

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java
Patch:
@@ -11,8 +11,8 @@
 import io.dropwizard.validation.PortRange;
 import org.eclipse.jetty.io.ArrayByteBufferPool;
 import org.eclipse.jetty.io.ByteBufferPool;
-import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.ConnectionFactory;
+import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.ForwardedRequestCustomizer;
 import org.eclipse.jetty.server.HttpConfiguration;
 import org.eclipse.jetty.server.HttpConnectionFactory;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/GzipHandlerFactoryTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.Resources;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Size;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NonblockingServletHolderTest.java
Patch:
@@ -9,7 +9,9 @@
 import javax.servlet.ServletResponse;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
 
 public class NonblockingServletHolderTest {
     private final Servlet servlet = mock(Servlet.class);

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/ServerPushFilterFactoryTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.io.Resources;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Duration;
@@ -18,7 +17,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
 
 public class ServerPushFilterFactoryTest {
 

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/LifecycleEnvironmentTest.java
Patch:
@@ -7,7 +7,6 @@
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.junit.Test;
 
-import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/DefaultLoggingFactory.java
Patch:
@@ -27,9 +27,9 @@
 import io.dropwizard.logging.layout.LayoutFactory;
 
 import javax.management.InstanceAlreadyExistsException;
-import javax.management.MalformedObjectNameException;
 import javax.management.MBeanRegistrationException;
 import javax.management.MBeanServer;
+import javax.management.MalformedObjectNameException;
 import javax.management.NotCompliantMBeanException;
 import javax.management.ObjectName;
 import javax.validation.Valid;
@@ -55,7 +55,7 @@ public class DefaultLoggingFactory implements LoggingFactory {
 
     @Valid
     @NotNull
-    private ImmutableList<AppenderFactory<ILoggingEvent>> appenders = ImmutableList.<AppenderFactory<ILoggingEvent>>of(
+    private ImmutableList<AppenderFactory<ILoggingEvent>> appenders = ImmutableList.of(
             new ConsoleAppenderFactory<>()
     );
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/PrefixedRootCauseFirstThrowableProxyConverter.java
Patch:
@@ -5,8 +5,8 @@
 
 import java.util.regex.Pattern;
 
-import static io.dropwizard.logging.PrefixedThrowableProxyConverter.PREFIX;
 import static io.dropwizard.logging.PrefixedThrowableProxyConverter.PATTERN;
+import static io.dropwizard.logging.PrefixedThrowableProxyConverter.PREFIX;
 
 /**
  * A {@link RootCauseFirstThrowableProxyConverter} that prefixes stack traces with {@code !}.

File: dropwizard-logging/src/main/java/io/dropwizard/logging/layout/DropwizardLayoutFactory.java
Patch:
@@ -1,12 +1,12 @@
 package io.dropwizard.logging.layout;
 
-import java.util.TimeZone;
-
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
 import io.dropwizard.logging.DropwizardLayout;
 
+import java.util.TimeZone;
+
 /**
  * Factory that creates a {@link DropwizardLayout}
  */

File: dropwizard-logging/src/main/java/io/dropwizard/logging/layout/LayoutFactory.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.logging.layout;
 
-import java.util.TimeZone;
-
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 
+import java.util.TimeZone;
+
 /**
  * An interface for building Logback {@link PatternLayoutBase} layouts
  * @param <E> The type of log event

File: dropwizard-logging/src/test/java/io/dropwizard/logging/SecondTestFilterFactory.java
Patch:
@@ -3,7 +3,6 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
-
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.dropwizard.logging.filter.FilterFactory;
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/SyslogAppenderFactoryTest.java
Patch:
@@ -1,11 +1,11 @@
 package io.dropwizard.logging;
 
+import ch.qos.logback.classic.AsyncAppender;
 import ch.qos.logback.classic.Logger;
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.net.SyslogAppender;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
-import ch.qos.logback.classic.AsyncAppender;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.logging.async.AsyncLoggingEventAppenderFactory;
 import io.dropwizard.logging.filter.NullLevelFilterFactory;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/TestFilterFactory.java
Patch:
@@ -3,7 +3,6 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
-
 import com.fasterxml.jackson.annotation.JsonTypeName;
 import io.dropwizard.logging.filter.FilterFactory;
 

File: dropwizard-metrics-graphite/src/test/java/io/dropwizard/metrics/graphite/GraphiteReporterFactoryTest.java
Patch:
@@ -4,7 +4,6 @@
 import com.codahale.metrics.graphite.Graphite;
 import com.codahale.metrics.graphite.GraphiteReporter;
 import com.codahale.metrics.graphite.GraphiteUDP;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/CsvReporterFactoryTest.java
Patch:
@@ -3,10 +3,9 @@
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.io.Resources;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
-import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
+import io.dropwizard.jackson.Jackson;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.validation.BaseValidator;
 import org.junit.Before;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.io.Resources;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.logging.BootstrapLogging;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -3,9 +3,9 @@
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.Configuration;
 import io.dropwizard.cli.ConfiguredCommand;
-import io.dropwizard.db.PooledDataSourceFactory;
 import io.dropwizard.db.DatabaseConfiguration;
 import io.dropwizard.db.ManagedDataSource;
+import io.dropwizard.db.PooledDataSourceFactory;
 import io.dropwizard.setup.Bootstrap;
 import liquibase.Liquibase;
 import liquibase.database.Database;

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java
Patch:
@@ -93,7 +93,7 @@ public void testDumpOnlyData() throws Exception {
     @Test
     public void testWriteToFile() throws Exception {
         final File file = File.createTempFile("migration", ".xml");
-        final Map<String, Object> attributes = ImmutableMap.of("output", (Object) file.getAbsolutePath());
+        final Map<String, Object> attributes = ImmutableMap.of("output", file.getAbsolutePath());
         dumpCommand.run(null, new Namespace(attributes), existedDbConf);
         // Check that file is exist, and has some XML content (no reason to make a full-blown XML assertion)
         assertThat(Files.toString(file, StandardCharsets.UTF_8)).startsWith("<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>");

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbMigrateDifferentFileCommandTest.java
Patch:
@@ -29,7 +29,7 @@ public void setUp() throws Exception {
 
     @Test
     public void testRun() throws Exception {
-        migrateCommand.run(null, new Namespace(ImmutableMap.<String, Object>of()), conf);
+        migrateCommand.run(null, new Namespace(ImmutableMap.of()), conf);
         try (Handle handle = new DBI(databaseUrl, "sa", "").open()) {
             final List<Map<String, Object>> rows = handle.select("select * from persons");
             assertThat(rows).hasSize(0);

File: dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbStatusCommandTest.java
Patch:
@@ -38,13 +38,13 @@ public void testRunOnMigratedDb() throws Exception {
         final String existedDbUrl = "jdbc:h2:" + StringUtils.removeEnd(existedDbPath, ".mv.db");
         final TestMigrationConfiguration existedDbConf = createConfiguration(existedDbUrl);
 
-        statusCommand.run(null, new Namespace(ImmutableMap.<String, Object>of()), existedDbConf);
+        statusCommand.run(null, new Namespace(ImmutableMap.of()), existedDbConf);
         assertThat(baos.toString("UTF-8")).matches("\\S+ is up to date" + System.lineSeparator());
     }
 
     @Test
     public void testRun() throws Exception {
-        statusCommand.run(null, new Namespace(ImmutableMap.<String, Object>of()), conf);
+        statusCommand.run(null, new Namespace(ImmutableMap.of()), conf);
         assertThat(baos.toString("UTF-8")).matches(
                 "3 change sets have not been applied to \\S+" + System.lineSeparator());
     }

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/RequestLogFactory.java
Patch:
@@ -1,9 +1,8 @@
 package io.dropwizard.request.logging;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import org.eclipse.jetty.server.RequestLog;
-
 import io.dropwizard.jackson.Discoverable;
+import org.eclipse.jetty.server.RequestLog;
 
 /**
  * A service provider interface for creating a Jetty {@link RequestLog}

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/layout/LogbackAccessRequestLayout.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.request.logging.layout;
 
-import java.util.TimeZone;
-
 import ch.qos.logback.access.PatternLayout;
 import ch.qos.logback.core.Context;
 
+import java.util.TimeZone;
+
 /**
  * A base layout for Logback Access request logs.
  * <ul>

File: dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/layout/LogbackAccessRequestLayoutFactory.java
Patch:
@@ -1,12 +1,12 @@
 package io.dropwizard.request.logging.layout;
 
-import java.util.TimeZone;
-
 import ch.qos.logback.access.spi.IAccessEvent;
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.pattern.PatternLayoutBase;
 import io.dropwizard.logging.layout.LayoutFactory;
 
+import java.util.TimeZone;
+
 /**
  * Factory that creates a {@link LogbackAccessRequestLayout}
  */

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/RequestLogFactoryTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.io.Resources;
-
 import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.logging.ConsoleAppenderFactory;

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/assets/AssetServlet.java
Patch:
@@ -8,6 +8,7 @@
 import com.google.common.io.Resources;
 import com.google.common.net.HttpHeaders;
 import com.google.common.net.MediaType;
+
 import javax.servlet.ServletException;
 import javax.servlet.ServletOutputStream;
 import javax.servlet.http.HttpServlet;
@@ -18,6 +19,7 @@
 import java.net.URL;
 import java.nio.charset.Charset;
 import java.util.List;
+
 import static com.google.common.base.Preconditions.checkArgument;
 
 public class AssetServlet extends HttpServlet {

File: dropwizard-testing/src/main/java/io/dropwizard/testing/POJOConfigurationFactory.java
Patch:
@@ -1,13 +1,12 @@
 package io.dropwizard.testing;
 
-import java.io.File;
-
 import com.fasterxml.jackson.databind.JsonNode;
-
 import io.dropwizard.Configuration;
 import io.dropwizard.configuration.ConfigurationSourceProvider;
 import io.dropwizard.configuration.YamlConfigurationFactory;
 
+import java.io.File;
+
 public class POJOConfigurationFactory<C extends Configuration>
     extends YamlConfigurationFactory<C> {
     protected final C configuration;

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleReentrantTest.java
Patch:
@@ -1,8 +1,5 @@
 package io.dropwizard.testing.junit;
 
-import static org.mockito.Mockito.inOrder;
-import static org.mockito.Mockito.times;
-
 import io.dropwizard.testing.DropwizardTestSupport;
 import org.junit.Rule;
 import org.junit.Test;
@@ -14,6 +11,9 @@
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.times;
+
 public class DropwizardAppRuleReentrantTest {
 
     @Rule

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleTest.java
Patch:
@@ -2,11 +2,9 @@
 
 import com.google.common.collect.ImmutableCollection;
 import com.google.common.collect.ImmutableMultimap;
-
 import io.dropwizard.Application;
 import io.dropwizard.servlets.tasks.Task;
 import io.dropwizard.setup.Environment;
-
 import org.junit.ClassRule;
 import org.junit.Test;
 
@@ -15,7 +13,6 @@
 import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.MediaType;
-
 import java.io.PrintWriter;
 
 import static io.dropwizard.testing.ResourceHelpers.resourceFilePath;

File: dropwizard-validation/src/test/java/io/dropwizard/validation/valuehandling/OptionalDoubleValidatedValueUnwrapperTest.java
Patch:
@@ -10,7 +10,6 @@
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
 import java.util.OptionalDouble;
-import java.util.OptionalInt;
 import java.util.Set;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: dropwizard-views/src/main/java/io/dropwizard/views/View.java
Patch:
@@ -1,9 +1,9 @@
 package io.dropwizard.views;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
-import java.util.Optional;
 
 import java.nio.charset.Charset;
+import java.util.Optional;
 
 /**
  * A Dropwizard view class.

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.views;
 
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import io.dropwizard.Bundle;
 import io.dropwizard.Configuration;
 import io.dropwizard.ConfiguredBundle;
@@ -109,7 +109,7 @@ public void run(T configuration, Environment environment) throws Exception {
         final Map<String, Map<String, String>> options = getViewConfiguration(configuration);
         for (ViewRenderer viewRenderer : viewRenderers) {
             final Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
-            viewRenderer.configure(firstNonNull(viewOptions, Collections.<String, String>emptyMap()));
+            viewRenderer.configure(firstNonNull(viewOptions, Collections.emptyMap()));
         }
         environment.jersey().register(new ViewMessageBodyWriter(environment.metrics(), viewRenderers));
     }

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2CConnectorFactory.java
Patch:
@@ -88,7 +88,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, Threa
         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);
         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);
         http2c.setMaxConcurrentStreams(maxConcurrentStreams);
-        http2c.setInitialStreamSendWindow(initialStreamSendWindow);
+        http2c.setInitialStreamRecvWindow(initialStreamSendWindow);
 
         // The server connector should use HTTP/1.1 by default. It affords to the server to stay compatible
         // with old clients. New clients which want to use HTTP/2, however, will make an HTTP/1.1 OPTIONS

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2ConnectorFactory.java
Patch:
@@ -100,7 +100,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, Threa
         final HttpConnectionFactory http1 = buildHttpConnectionFactory(httpConfig);
         final HTTP2ServerConnectionFactory http2 = new HTTP2ServerConnectionFactory(httpConfig);
         http2.setMaxConcurrentStreams(maxConcurrentStreams);
-        http2.setInitialStreamSendWindow(initialStreamSendWindow);
+        http2.setInitialStreamRecvWindow(initialStreamSendWindow);
 
         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory(H2, H2_17);
         alpn.setDefaultProtocol(HTTP_1_1); // Speak HTTP 1.1 over TLS if negotiation fails

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2CConnectorFactory.java
Patch:
@@ -88,7 +88,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, Threa
         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);
         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);
         http2c.setMaxConcurrentStreams(maxConcurrentStreams);
-        http2c.setInitialStreamSendWindow(initialStreamSendWindow);
+        http2c.setInitialStreamRecvWindow(initialStreamSendWindow);
 
         // The server connector should use HTTP/1.1 by default. It affords to the server to stay compatible
         // with old clients. New clients which want to use HTTP/2, however, will make an HTTP/1.1 OPTIONS

File: dropwizard-http2/src/main/java/io/dropwizard/http2/Http2ConnectorFactory.java
Patch:
@@ -100,7 +100,7 @@ public Connector build(Server server, MetricRegistry metrics, String name, Threa
         final HttpConnectionFactory http1 = buildHttpConnectionFactory(httpConfig);
         final HTTP2ServerConnectionFactory http2 = new HTTP2ServerConnectionFactory(httpConfig);
         http2.setMaxConcurrentStreams(maxConcurrentStreams);
-        http2.setInitialStreamSendWindow(initialStreamSendWindow);
+        http2.setInitialStreamRecvWindow(initialStreamSendWindow);
 
         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory(H2, H2_17);
         alpn.setDefaultProtocol(HTTP_1_1); // Speak HTTP 1.1 over TLS if negotiation fails

File: dropwizard-metrics-graphite/src/test/java/io/dropwizard/metrics/graphite/GraphiteReporterFactoryTest.java
Patch:
@@ -53,7 +53,7 @@ public void testNoAddressResolutionForGraphite() throws Exception {
 
         final Graphite graphite = argument.getValue();
         assertThat(getField(graphite, "hostname")).isEqualTo("localhost");
-        assertThat(getField(graphite, "port")).isEqualTo(8080);
+        assertThat(getField(graphite, "port")).isEqualTo(2003);
         assertThat(getField(graphite, "address")).isNull();
     }
 
@@ -67,7 +67,7 @@ public void testCorrectTransportForGraphiteUDP() throws Exception {
 
         final GraphiteUDP graphite = argument.getValue();
         assertThat(getField(graphite, "hostname")).isEqualTo("localhost");
-        assertThat(getField(graphite, "port")).isEqualTo(8080);
+        assertThat(getField(graphite, "port")).isEqualTo(2003);
         assertThat(getField(graphite, "address")).isNull();
     }
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -433,7 +433,7 @@ public void printsDetailedInformationOnMalformedYaml() throws Exception {
                     "expected ',' or ']', but got StreamEnd\n" +
                     " in 'reader', line 2, column 21:\n" +
                     "    wizard\n" +
-                    "          ^" + NEWLINE);
+                    "          ^\n");
         }
     }
 }

File: dropwizard-core/src/main/java/io/dropwizard/setup/Environment.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.setup;
 
 import com.codahale.metrics.MetricRegistry;
+import com.codahale.metrics.SharedMetricRegistries;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
@@ -84,6 +85,8 @@ public Environment(String name,
                 .threadFactory(new ThreadFactoryBuilder().setDaemon(true).build())
                 .rejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy())
                 .build();
+
+        SharedMetricRegistries.add("default", metricRegistry);
     }
 
     /**

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -433,7 +433,7 @@ public void printsDetailedInformationOnMalformedYaml() throws Exception {
                     "expected ',' or ']', but got StreamEnd\n" +
                     " in 'reader', line 2, column 21:\n" +
                     "    wizard\n" +
-                    "          ^" + NEWLINE);
+                    "          ^\n");
         }
     }
 }

File: dropwizard-core/src/main/java/io/dropwizard/cli/EnvironmentCommand.java
Patch:
@@ -28,7 +28,7 @@ protected EnvironmentCommand(Application<T> application, String name, String des
     }
 
     @Override
-    protected final void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration) throws Exception {
+    protected void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration) throws Exception {
         final Environment environment = new Environment(bootstrap.getApplication().getName(),
                                                         bootstrap.getObjectMapper(),
                                                         bootstrap.getValidatorFactory().getValidator(),

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientConfigurationTest.java
Patch:
@@ -1,7 +1,8 @@
 package io.dropwizard.client;
 
 import com.google.common.io.Resources;
-import io.dropwizard.configuration.ConfigurationFactory;
+
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
 import org.junit.Test;
@@ -14,7 +15,7 @@ public class JerseyClientConfigurationTest {
 
     @Test
     public void testBasicJerseyClient() throws Exception {
-        final JerseyClientConfiguration configuration = new ConfigurationFactory<>(JerseyClientConfiguration.class,
+        final JerseyClientConfiguration configuration = new YamlConfigurationFactory<>(JerseyClientConfiguration.class,
                 Validators.newValidator(), Jackson.newObjectMapper(), "dw")
                 .build(new File(Resources.getResource("yaml/jersey-client.yml").toURI()));
         assertThat(configuration.getMinThreads()).isEqualTo(8);

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/HttpClientConfigurationTest.java
Patch:
@@ -1,14 +1,14 @@
 package io.dropwizard.client.proxy;
 
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.io.Resources;
 import io.dropwizard.client.HttpClientConfiguration;
-import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.configuration.ConfigurationParsingException;
 import io.dropwizard.configuration.ConfigurationValidationException;
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
+
 import org.junit.Test;
 
 import java.io.File;
@@ -23,7 +23,7 @@ public class HttpClientConfigurationTest {
     private HttpClientConfiguration configuration;
 
     private void load(String configLocation) throws Exception {
-        configuration = new ConfigurationFactory<>(HttpClientConfiguration.class,
+        configuration = new YamlConfigurationFactory<>(HttpClientConfiguration.class,
                 Validators.newValidator(),
                 objectMapper, "dw")
                 .build(new File(Resources.getResource(configLocation).toURI()));

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/DefaultConfigurationFactoryFactory.java
Patch:
@@ -11,6 +11,6 @@ public ConfigurationFactory<T> create(
             Validator    validator, 
             ObjectMapper objectMapper,
             String       propertyPrefix) {
-        return new ConfigurationFactory<>(klass, validator, objectMapper, propertyPrefix);
+        return new YamlConfigurationFactory<>(klass, validator, objectMapper, propertyPrefix);
     }
 }

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -5,7 +5,8 @@
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.io.CharStreams;
 import com.google.common.io.Resources;
-import io.dropwizard.configuration.ConfigurationFactory;
+
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jetty.HttpConnectorFactory;
@@ -45,7 +46,7 @@ public class SimpleServerFactoryTest {
     public void setUp() throws Exception {
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class,
                 FileAppenderFactory.class, SyslogAppenderFactory.class, HttpConnectorFactory.class);
-        http = new ConfigurationFactory<>(SimpleServerFactory.class, validator, objectMapper, "dw")
+        http = new YamlConfigurationFactory<>(SimpleServerFactory.class, validator, objectMapper, "dw")
                 .build(new File(Resources.getResource("yaml/simple_server.yml").toURI()));
     }
 

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceConfigurationTest.java
Patch:
@@ -1,7 +1,8 @@
 package io.dropwizard.db;
 
 import com.google.common.io.Resources;
-import io.dropwizard.configuration.ConfigurationFactory;
+
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.util.Duration;
@@ -108,7 +109,7 @@ public void testInlineUserPasswordConfiguration() throws Exception {
     }
 
     private DataSourceFactory getDataSourceFactory(String resourceName) throws Exception {
-        return new ConfigurationFactory<>(DataSourceFactory.class,
+        return new YamlConfigurationFactory<>(DataSourceFactory.class,
                 Validators.newValidator(), Jackson.newObjectMapper(), "dw")
                 .build(new File(Resources.getResource(resourceName).toURI()));
     }

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -1,11 +1,12 @@
 package io.dropwizard.db;
 
 import com.codahale.metrics.MetricRegistry;
-import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.BaseValidator;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -102,7 +103,7 @@ public void testCustomValidator() throws Exception {
 
     @Test
     public void createDefaultFactory() throws Exception {
-        final DataSourceFactory factory = new ConfigurationFactory<>(DataSourceFactory.class,
+        final DataSourceFactory factory = new YamlConfigurationFactory<>(DataSourceFactory.class,
             BaseValidator.newValidator(), Jackson.newObjectMapper(), "dw")
             .build(new ResourceConfigurationSourceProvider(), "yaml/minimal_db_pool.yml");
 

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/ServerPushFilterFactoryTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.io.Resources;
-import io.dropwizard.configuration.ConfigurationFactory;
+
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.util.Duration;
 import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.servlet.ServletContextHandler;
@@ -24,7 +24,7 @@ public class ServerPushFilterFactoryTest {
 
     @Test
     public void testLoadConfiguration() throws Exception {
-        final ServerPushFilterFactory serverPush = new ConfigurationFactory<>(
+        final ServerPushFilterFactory serverPush = new YamlConfigurationFactory<>(
                 ServerPushFilterFactory.class, BaseValidator.newValidator(),
                 Jackson.newObjectMapper(), "dw-server-push")
                 .build(new File(Resources.getResource("yaml/server-push.yml").toURI()));

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DefaultLoggingFactoryTest.java
Patch:
@@ -12,9 +12,10 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.io.Files;
 import com.google.common.io.Resources;
-import io.dropwizard.configuration.ConfigurationFactory;
+
 import io.dropwizard.configuration.FileConfigurationSourceProvider;
 import io.dropwizard.configuration.SubstitutingSourceProvider;
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.logging.filter.FilterFactory;
 import io.dropwizard.validation.BaseValidator;
@@ -31,7 +32,7 @@
 
 public class DefaultLoggingFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();
-    private final ConfigurationFactory<DefaultLoggingFactory> factory = new ConfigurationFactory<>(
+    private final YamlConfigurationFactory<DefaultLoggingFactory> factory = new YamlConfigurationFactory<>(
             DefaultLoggingFactory.class,
             BaseValidator.newValidator(),
             objectMapper, "dw");

File: dropwizard-metrics-ganglia/src/test/java/io/dropwizard/metrics/ganglia/GangliaReporterFactoryTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.metrics.ganglia;
 
-import io.dropwizard.configuration.ConfigurationFactory;
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.validation.BaseValidator;
@@ -20,7 +20,7 @@ public void isDiscoverable() throws Exception {
 
     @Test
     public void createDefaultFactory() throws Exception {
-        final GangliaReporterFactory factory = new ConfigurationFactory<>(GangliaReporterFactory.class,
+        final GangliaReporterFactory factory = new YamlConfigurationFactory<>(GangliaReporterFactory.class,
             BaseValidator.newValidator(), Jackson.newObjectMapper(), "dw")
             .build();
         assertThat(factory.getFrequency()).isEqualTo(Optional.empty());

File: dropwizard-request-logging/src/test/java/io/dropwizard/request/logging/RequestLogFactoryTest.java
Patch:
@@ -2,7 +2,8 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.io.Resources;
-import io.dropwizard.configuration.ConfigurationFactory;
+
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.logging.ConsoleAppenderFactory;
 import io.dropwizard.logging.FileAppenderFactory;
@@ -24,7 +25,7 @@ public void setUp() throws Exception {
         objectMapper.getSubtypeResolver().registerSubtypes(ConsoleAppenderFactory.class,
                                                            FileAppenderFactory.class,
                                                            SyslogAppenderFactory.class);
-        this.logbackAccessRequestLogFactory = new ConfigurationFactory<>(LogbackAccessRequestLogFactory.class,
+        this.logbackAccessRequestLogFactory = new YamlConfigurationFactory<>(LogbackAccessRequestLogFactory.class,
                                                      BaseValidator.newValidator(),
                                                      objectMapper, "dw")
                 .build(new File(Resources.getResource("yaml/requestLog.yml").toURI()));

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.Application;
 import io.dropwizard.Configuration;
 import io.dropwizard.cli.ServerCommand;
-import io.dropwizard.configuration.ConfigurationFactory;
+import io.dropwizard.configuration.YamlConfigurationFactory;
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
@@ -179,7 +179,7 @@ public void run(C configuration, Environment environment) throws Exception {
                     new POJOConfigurationFactory<>(configuration));
             } else if (customPropertyPrefix.isPresent()) {
                 bootstrap.setConfigurationFactoryFactory((klass, validator, objectMapper, propertyPrefix) ->
-                    new ConfigurationFactory<>(klass, validator, objectMapper, customPropertyPrefix.get()));
+                    new YamlConfigurationFactory<>(klass, validator, objectMapper, customPropertyPrefix.get()));
             }
 
             application.initialize(bootstrap);

File: dropwizard-testing/src/main/java/io/dropwizard/testing/POJOConfigurationFactory.java
Patch:
@@ -5,11 +5,11 @@
 import com.fasterxml.jackson.databind.JsonNode;
 
 import io.dropwizard.Configuration;
-import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.configuration.ConfigurationSourceProvider;
+import io.dropwizard.configuration.YamlConfigurationFactory;
 
 public class POJOConfigurationFactory<C extends Configuration>
-    extends ConfigurationFactory<C> {
+    extends YamlConfigurationFactory<C> {
     protected final C configuration;
 
     @SuppressWarnings("unchecked")

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewMessageBodyWriter.java
Patch:
@@ -27,15 +27,14 @@
 @Provider
 @Produces({ MediaType.TEXT_HTML, MediaType.APPLICATION_XHTML_XML })
 public class ViewMessageBodyWriter implements MessageBodyWriter<View> {
-    private static final Logger logger = LoggerFactory.getLogger(MessageBodyWriter.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(MessageBodyWriter.class);
     public static final String TEMPLATE_ERROR_MSG =
             "<html>" +
                 "<head><title>Template Error</title></head>" +
                 "<body><h1>Template Error</h1><p>Something went wrong rendering the page</p></body>" +
             "</html>";
 
     @Context
-    @SuppressWarnings("UnusedDeclaration")
     private HttpHeaders headers;
 
     private final Iterable<ViewRenderer> renderers;
@@ -83,7 +82,7 @@ public void writeTo(View t,
             }
             throw new ViewRenderException("Unable to find a renderer for " + t.getTemplateName());
         } catch (Exception e) {
-            logger.debug("Template Error", e);
+            LOGGER.error("Template Error", e);
             throw new WebApplicationException(Response.serverError()
                                                       .type(MediaType.TEXT_HTML_TYPE)
                                                       .entity(TEMPLATE_ERROR_MSG)

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -171,7 +171,7 @@ public void testGracefulShutdown() throws Exception {
             return CharStreams.toString(new InputStreamReader(connection.getInputStream()));
         });
 
-        requestReceived.await();
+        requestReceived.await(10, TimeUnit.SECONDS);
 
         Future<Void> serverStopped = executor.submit((Callable<Void>) () -> {
             server.stop();

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardApacheConnector.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.client;
 
+import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.MoreExecutors;
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -26,7 +27,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.Future;
@@ -94,7 +94,7 @@ public ClientResponse apply(ClientRequest jerseyRequest) {
             for (Header header : apacheResponse.getAllHeaders()) {
                 final List<String> headerValues = jerseyResponse.getHeaders().get(header.getName());
                 if (headerValues == null) {
-                    jerseyResponse.getHeaders().put(header.getName(), Collections.singletonList(header.getValue()));
+                    jerseyResponse.getHeaders().put(header.getName(), Lists.newArrayList(header.getValue()));
                 } else {
                     headerValues.add(header.getValue());
                 }

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardApacheConnector.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.client;
 
+import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.MoreExecutors;
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -26,7 +27,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.Future;
@@ -94,7 +94,7 @@ public ClientResponse apply(ClientRequest jerseyRequest) {
             for (Header header : apacheResponse.getAllHeaders()) {
                 final List<String> headerValues = jerseyResponse.getHeaders().get(header.getName());
                 if (headerValues == null) {
-                    jerseyResponse.getHeaders().put(header.getName(), Collections.singletonList(header.getValue()));
+                    jerseyResponse.getHeaders().put(header.getName(), Lists.newArrayList(header.getValue()));
                 } else {
                     headerValues.add(header.getValue());
                 }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
Patch:
@@ -199,7 +199,6 @@ public Appender<E> build(LoggerContext context, String applicationName, LayoutFa
         appender.setPrudent(false);
         appender.addFilter(levelFilterFactory.build(threshold));
         getFilterFactories().stream().forEach(f -> appender.addFilter(f.build()));
-        appender.stop();
         appender.start();
 
         return wrapAsync(appender, asyncAppenderFactory);

File: dropwizard-core/src/test/java/io/dropwizard/server/AbstractServerFactoryTest.java
Patch:
@@ -4,6 +4,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.setup.JerseyContainerHolder;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
+import io.dropwizard.jetty.MutableServletContextHandler;
 import io.dropwizard.setup.Environment;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.thread.ThreadPool;
@@ -36,6 +37,7 @@ public class AbstractServerFactoryTest {
     @Before
     public void before() {
         when(environment.jersey()).thenReturn(jerseyEnvironment);
+        when(environment.getApplicationContext()).thenReturn(new MutableServletContextHandler());
     }
 
     @Test

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/NonblockingServletHolder.java
Patch:
@@ -43,12 +43,12 @@ public void handle(Request baseRequest,
                        ServletResponse response) throws ServletException, IOException {
         final boolean asyncSupported = baseRequest.isAsyncSupported();
         if (!isAsyncSupported()) {
-            baseRequest.setAsyncSupported(false);
+            baseRequest.setAsyncSupported(false, null);
         }
         try {
             servlet.service(request, response);
         } finally {
-            baseRequest.setAsyncSupported(asyncSupported);
+            baseRequest.setAsyncSupported(asyncSupported, null);
         }
     }
 }

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NonblockingServletHolderTest.java
Patch:
@@ -39,7 +39,7 @@ public void temporarilyDisablesAsyncRequestsIfDisabled() throws Exception {
 
         final InOrder inOrder = inOrder(baseRequest, servlet);
 
-        inOrder.verify(baseRequest).setAsyncSupported(false);
+        inOrder.verify(baseRequest).setAsyncSupported(false, null);
         inOrder.verify(servlet).service(request, response);
     }
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -425,8 +425,8 @@ public void printsDetailedInformationOnMalformedYaml() throws Exception {
             factory.build(resourceFileName);
             fail("Should print a detailed error on a malformed YAML file");
         } catch (Exception e) {
-            assertThat(e.getMessage()).isEqualTo(resourceFileName + " has an error:" + NEWLINE +
-                    "  * Malformed YAML at line: 2, column: 21; while parsing a flow sequence\n" +
+            assertThat(e.getMessage()).isEqualTo(
+                    "YAML decoding problem: while parsing a flow sequence\n" +
                     " in 'reader', line 2, column 7:\n" +
                     "    type: [ coder,wizard\n" +
                     "          ^\n" +

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategy.java
Patch:
@@ -15,11 +15,11 @@
 public class AnnotationSensitivePropertyNamingStrategy extends PropertyNamingStrategy {
     private static final long serialVersionUID = -1372862028366311230L;
 
-    private final LowerCaseWithUnderscoresStrategy snakeCase;
+    private final SnakeCaseStrategy snakeCase;
 
     public AnnotationSensitivePropertyNamingStrategy() {
         super();
-        this.snakeCase = new LowerCaseWithUnderscoresStrategy();
+        this.snakeCase = new SnakeCaseStrategy();
     }
 
     @Override

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.guava.GuavaModule;
-import com.fasterxml.jackson.datatype.jdk7.Jdk7Module;
 import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
 import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
@@ -58,7 +57,6 @@ private static ObjectMapper configure(ObjectMapper mapper) {
         mapper.registerModule(new JodaModule());
         mapper.registerModule(new AfterburnerModule());
         mapper.registerModule(new FuzzyEnumModule());
-        mapper.registerModule(new Jdk7Module());
         mapper.registerModules(new Jdk8Module());
         mapper.registerModules(new JavaTimeModule());
         mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/ExceptionResource.java
Patch:
@@ -10,6 +10,7 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.UriBuilder;
 import java.io.IOException;
+import java.io.StringReader;
 import java.net.URI;
 
 @Path("/exception/")
@@ -23,7 +24,7 @@ public String show() throws IOException {
     @GET
     @Path("json-mapping-exception")
     public void jsonMappingException() throws JsonMappingException {
-        throw new JsonMappingException("BOOM");
+        throw new JsonMappingException(new StringReader(""), "BOOM");
     }
 
     @GET

File: dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
Patch:
@@ -199,7 +199,6 @@ public Appender<E> build(LoggerContext context, String applicationName, LayoutFa
         appender.setPrudent(false);
         appender.addFilter(levelFilterFactory.build(threshold));
         getFilterFactories().stream().forEach(f -> appender.addFilter(f.build()));
-        appender.stop();
         appender.start();
 
         return wrapAsync(appender, asyncAppenderFactory);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -62,6 +62,9 @@ public DropwizardResourceConfig(boolean testOnly, MetricRegistry metricRegistry)
         register(io.dropwizard.jersey.guava.OptionalMessageBodyWriter.class);
         register(io.dropwizard.jersey.guava.OptionalParamFeature.class);
         register(io.dropwizard.jersey.optional.OptionalMessageBodyWriter.class);
+        register(io.dropwizard.jersey.optional.OptionalDoubleMessageBodyWriter.class);
+        register(io.dropwizard.jersey.optional.OptionalIntMessageBodyWriter.class);
+        register(io.dropwizard.jersey.optional.OptionalLongMessageBodyWriter.class);
         register(io.dropwizard.jersey.optional.OptionalParamFeature.class);
         register(NonEmptyStringParamFeature.class);
         register(new SessionFactoryProvider.Binder());

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalParamBinder.java
Patch:
@@ -10,5 +10,8 @@ final class OptionalParamBinder extends AbstractBinder {
     protected void configure() {
         // Param converter providers
         bind(OptionalParamConverterProvider.class).to(ParamConverterProvider.class).in(Singleton.class);
+        bind(OptionalDoubleParamConverterProvider.class).to(ParamConverterProvider.class).in(Singleton.class);
+        bind(OptionalIntParamConverterProvider.class).to(ParamConverterProvider.class).in(Singleton.class);
+        bind(OptionalLongParamConverterProvider.class).to(ParamConverterProvider.class).in(Singleton.class);
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalCookieParamResourceTest.java
Patch:
@@ -28,7 +28,6 @@ public class OptionalCookieParamResourceTest extends JerseyTest {
     protected Application configure() {
         forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
-                .register(OptionalParamFeature.class)
                 .register(OptionalCookieParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalFormParamResourceTest.java
Patch:
@@ -32,7 +32,6 @@ public class OptionalFormParamResourceTest extends JerseyTest {
     protected Application configure() {
         forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
-                .register(OptionalParamFeature.class)
                 .register(OptionalFormParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalHeaderParamResourceTest.java
Patch:
@@ -28,7 +28,6 @@ public class OptionalHeaderParamResourceTest extends JerseyTest {
     protected Application configure() {
         forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
-                .register(OptionalParamFeature.class)
                 .register(OptionalHeaderParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalMessageBodyWriterTest.java
Patch:
@@ -31,7 +31,6 @@ public class OptionalMessageBodyWriterTest extends JerseyTest {
     protected Application configure() {
         forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
-                .register(OptionalMessageBodyWriter.class)
                 .register(OptionalReturnResource.class);
     }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/optional/OptionalQueryParamResourceTest.java
Patch:
@@ -28,7 +28,6 @@ public class OptionalQueryParamResourceTest extends JerseyTest {
     protected Application configure() {
         forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
-                .register(OptionalParamFeature.class)
                 .register(OptionalQueryParamResource.class)
                 .register(MyMessageParamConverterProvider.class);
     }

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -31,7 +31,7 @@ public ExecutorServiceBuilder(LifecycleEnvironment environment, String nameForma
         this.environment = environment;
         this.nameFormat = nameFormat;
         this.corePoolSize = 0;
-        this.maximumPoolSize = Integer.MAX_VALUE;
+        this.maximumPoolSize = 1;
         this.keepAliveTime = Duration.seconds(60);
         this.shutdownTime = Duration.seconds(5);
         this.workQueue = new LinkedBlockingQueue<>();
@@ -75,7 +75,7 @@ public ExecutorServiceBuilder threadFactory(ThreadFactory threadFactory) {
     }
 
     public ExecutorService build() {
-        if (maximumPoolSize != Integer.MAX_VALUE && !isBoundedQueue()) {
+        if (corePoolSize != maximumPoolSize && maximumPoolSize > 1 && !isBoundedQueue()) {
             log.warn("Parameter 'maximumPoolSize' is conflicting with unbounded work queues");
         }
         final ThreadPoolExecutor executor = new ThreadPoolExecutor(corePoolSize,

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -31,7 +31,7 @@ public ExecutorServiceBuilder(LifecycleEnvironment environment, String nameForma
         this.environment = environment;
         this.nameFormat = nameFormat;
         this.corePoolSize = 0;
-        this.maximumPoolSize = Integer.MAX_VALUE;
+        this.maximumPoolSize = 1;
         this.keepAliveTime = Duration.seconds(60);
         this.shutdownTime = Duration.seconds(5);
         this.workQueue = new LinkedBlockingQueue<>();
@@ -75,7 +75,7 @@ public ExecutorServiceBuilder threadFactory(ThreadFactory threadFactory) {
     }
 
     public ExecutorService build() {
-        if (maximumPoolSize != Integer.MAX_VALUE && !isBoundedQueue()) {
+        if (corePoolSize != maximumPoolSize && maximumPoolSize > 1 && !isBoundedQueue()) {
             log.warn("Parameter 'maximumPoolSize' is conflicting with unbounded work queues");
         }
         final ThreadPoolExecutor executor = new ThreadPoolExecutor(corePoolSize,

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -36,7 +36,7 @@ public final void initialize(Bootstrap<?> bootstrap) {
     }
 
     /**
-     * Override to configure the {@link Hibernate4Module}.
+     * Override to configure the {@link Hibernate5Module}.
      */
     protected Hibernate5Module createHibernate5Module() {
         return new Hibernate5Module();

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryHealthCheck.java
Patch:
@@ -1,7 +1,5 @@
 package io.dropwizard.hibernate;
 
-import static org.hibernate.resource.transaction.spi.TransactionStatus.*;
-
 import com.codahale.metrics.health.HealthCheck;
 import com.google.common.util.concurrent.MoreExecutors;
 import io.dropwizard.db.TimeBoundHealthCheck;
@@ -50,7 +48,7 @@ protected Result check() throws Exception {
                     session.createSQLQuery(validationQuery).list();
                     txn.commit();
                 } catch (Exception e) {
-                    if (txn.getStatus() == ACTIVE || txn.getStatus() == MARKED_ROLLBACK) {
+                    if (txn.getStatus().canRollback()) {
                         txn.rollback();
                     }
                     throw e;

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.setup.Environment;
 
 public abstract class MigrationsBundle<T extends Configuration> implements Bundle, DatabaseConfiguration<T> {
-    public static final String DEFAULT_NAME = "db";
+    private static final String DEFAULT_NAME = "db";
 
     @Override
     @SuppressWarnings("unchecked")
@@ -16,7 +16,7 @@ public final void initialize(Bootstrap<?> bootstrap) {
         bootstrap.addCommand(new DbCommand<>(name(), this, klass));
     }
 
-    protected String name() {
+    public String name() {
         return DEFAULT_NAME;
     }
 

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java
Patch:
@@ -6,7 +6,6 @@
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.collect.Iterables;
-import io.dropwizard.validation.ConstraintViolations;
 import io.dropwizard.validation.ValidationMethod;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.reflect.FieldUtils;
@@ -68,7 +67,7 @@ private static String calculateMessage(ConstraintViolation<?> v, Invocable invoc
         // Take the message specified in a ValidationMethod annotation if it
         // is what caused the violation
         if (isValidationMethod(v)) {
-            return ConstraintViolations.validationMethodFormatted(v);
+            return v.getMessage();
         }
 
         final Optional<String> entity = isRequestEntity(v, invocable);

File: dropwizard-validation/src/test/java/io/dropwizard/validation/MethodValidatorTest.java
Patch:
@@ -41,6 +41,6 @@ public void complainsAboutMethodsWhichReturnFalse() throws Exception {
 
         assertThat(errors)
                 .containsOnly("must have a false thing",
-                              "subExample also needs something special");
+                              "also needs something special");
     }
 }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java
Patch:
@@ -3,7 +3,6 @@
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.ConsoleAppender;
-import ch.qos.logback.core.Layout;
 import ch.qos.logback.core.encoder.LayoutWrappingEncoder;
 import ch.qos.logback.core.spi.DeferredProcessingAware;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -90,15 +89,15 @@ public void setTarget(ConsoleStream target) {
     }
 
     @Override
-    public Appender<E> build(LoggerContext context, String applicationName, Layout<E> layout,
+    public Appender<E> build(LoggerContext context, String applicationName, LayoutFactory<E> layoutFactory,
                              FilterFactory<E> thresholdFilterFactory, AsyncAppenderFactory<E> asyncAppenderFactory) {
         final ConsoleAppender<E> appender = new ConsoleAppender<>();
         appender.setName("console-appender");
         appender.setContext(context);
         appender.setTarget(target.get());
 
         final LayoutWrappingEncoder<E> layoutEncoder = new LayoutWrappingEncoder<>();
-        layoutEncoder.setLayout(layout);
+        layoutEncoder.setLayout(buildLayout(context, layoutFactory));
         appender.setEncoder(layoutEncoder);
 
         appender.addFilter(thresholdFilterFactory.build(threshold));

File: dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
Patch:
@@ -3,7 +3,6 @@
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.FileAppender;
-import ch.qos.logback.core.Layout;
 import ch.qos.logback.core.encoder.LayoutWrappingEncoder;
 import ch.qos.logback.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy;
 import ch.qos.logback.core.rolling.RollingFileAppender;
@@ -183,7 +182,7 @@ public boolean isMaxFileSizeSettingSpecified() {
     }
 
     @Override
-    public Appender<E> build(LoggerContext context, String applicationName, Layout<E> layout,
+    public Appender<E> build(LoggerContext context, String applicationName, LayoutFactory<E> layoutFactory,
                              FilterFactory<E> thresholdFilterFactory, AsyncAppenderFactory<E> asyncAppenderFactory) {
         final FileAppender<E> appender = buildAppender(context);
         appender.setName("file-appender");
@@ -192,7 +191,7 @@ public Appender<E> build(LoggerContext context, String applicationName, Layout<E
         appender.setContext(context);
 
         final LayoutWrappingEncoder<E> layoutEncoder = new LayoutWrappingEncoder<>();
-        layoutEncoder.setLayout(layout);
+        layoutEncoder.setLayout(buildLayout(context, layoutFactory));
         appender.setEncoder(layoutEncoder);
 
         appender.setPrudent(false);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -4,7 +4,6 @@
 import ch.qos.logback.classic.net.SyslogAppender;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
-import ch.qos.logback.core.Layout;
 import ch.qos.logback.core.net.SyslogConstants;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeName;
@@ -201,7 +200,7 @@ public void setStackTracePrefix(String stackTracePrefix) {
     }
 
     @Override
-    public Appender<ILoggingEvent> build(LoggerContext context, String applicationName, Layout<ILoggingEvent> layout,
+    public Appender<ILoggingEvent> build(LoggerContext context, String applicationName, LayoutFactory<ILoggingEvent> layoutFactory,
                                          FilterFactory<ILoggingEvent> thresholdFilterFactory, AsyncAppenderFactory<ILoggingEvent> asyncAppenderFactory) {
         final SyslogAppender appender = new SyslogAppender();
         appender.setName("syslog-appender");

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleWithoutConfigTest.java
Patch:
@@ -23,7 +23,7 @@ public class DropwizardAppRuleWithoutConfigTest {
 
     Client client = ClientBuilder.newClient();
 
-    @Test
+    //@Test
     public void runWithoutConfigFile() {
         Map<?,?> response = client.target("http://localhost:" + RULE.getLocalPort() + "/test")
                 .request()

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java
Patch:
@@ -138,6 +138,7 @@ protected boolean authenticate(ContainerRequestContext requestContext, C credent
                 return false;
             }
 
+            boolean secure = requestContext.getSecurityContext().isSecure();
             requestContext.setSecurityContext(new SecurityContext() {
                 @Override
                 public Principal getUserPrincipal() {
@@ -151,7 +152,7 @@ public boolean isUserInRole(String role) {
 
                 @Override
                 public boolean isSecure() {
-                    return requestContext.getSecurityContext().isSecure();
+                    return secure;
                 }
 
                 @Override

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -431,6 +431,7 @@ public void setPassword(String password) {
     }
 
     @JsonProperty
+    @Override
     public String getUrl() {
         return url;
     }

File: dropwizard-client/src/test/java/io/dropwizard/client/ssl/DropwizardSSLConnectionSocketFactoryTest.java
Patch:
@@ -53,7 +53,7 @@ public void run(Configuration configuration, Environment environment) throws Exc
     }
 
     @ClassRule
-    public static DropwizardAppRule<Configuration> TLS_APP_RULE = new DropwizardAppRule<Configuration>(TlsTestApplication.class,
+    public static DropwizardAppRule<Configuration> TLS_APP_RULE = new DropwizardAppRule<>(TlsTestApplication.class,
             ResourceHelpers.resourceFilePath("yaml/ssl_connection_socket_factory_test.yml"),
             Optional.of("tls"),
             ConfigOverride.config("tls", "server.applicationConnectors[0].keyStorePath", ResourceHelpers.resourceFilePath("stores/server/keycert.p12")),
@@ -172,4 +172,4 @@ public void shouldRejectNonSupportedProtocols() throws Exception {
             assertThat(e.getCause()).isInstanceOfAny(SocketException.class, SSLHandshakeException.class);
         }
     }
-}
\ No newline at end of file
+}

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
 
 public class ConfigurationFactoryFactoryTest {
 
-    private final ConfigurationFactoryFactory<Example> factoryFactory = new DefaultConfigurationFactoryFactory<Example>();
+    private final ConfigurationFactoryFactory<Example> factoryFactory = new DefaultConfigurationFactoryFactory<>();
     private final Validator validator = BaseValidator.newValidator();
     private File validFile;
 

File: dropwizard-core/src/main/java/io/dropwizard/setup/Bootstrap.java
Patch:
@@ -67,7 +67,7 @@ public Bootstrap(Application<T> application) {
         this.metricRegistry = new MetricRegistry();
         this.configurationSourceProvider = new FileConfigurationSourceProvider();
         this.classLoader = Thread.currentThread().getContextClassLoader();
-        this.configurationFactoryFactory = new DefaultConfigurationFactoryFactory<T>();
+        this.configurationFactoryFactory = new DefaultConfigurationFactoryFactory<>();
     }
 
     /**

File: dropwizard-core/src/main/java/io/dropwizard/setup/Environment.java
Patch:
@@ -78,7 +78,7 @@ public Environment(String name,
 
 
         this.healthCheckExecutorService = this.lifecycle().executorService("TimeBoundHealthCheck-pool-%d")
-                .workQueue(new ArrayBlockingQueue<Runnable>(1))
+                .workQueue(new ArrayBlockingQueue<>(1))
                 .minThreads(1)
                 .maxThreads(4)
                 .threadFactory(new ThreadFactoryBuilder().setDaemon(true).build())

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -518,7 +518,7 @@ public boolean isDefaultReadOnly() {
     @Deprecated
     @JsonProperty
     public void setDefaultReadOnly(boolean defaultReadOnly) {
-        readOnlyByDefault = Boolean.valueOf(defaultReadOnly);
+        readOnlyByDefault = defaultReadOnly;
     }
 
     @JsonIgnore

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoderTest.java
Patch:
@@ -29,7 +29,7 @@ public class ConfiguredGZipEncoderTest {
     @Test
     public void gzipParametersSpec() throws IOException {
         ClientRequestContext context = mock(ClientRequestContext.class);
-        MultivaluedMap<String, Object> headers = new MultivaluedHashMap<String, Object>();
+        MultivaluedMap<String, Object> headers = new MultivaluedHashMap<>();
         when(context.getHeaders()).thenReturn(headers);
         headers.put(HttpHeaders.CONTENT_ENCODING, null);
         when(context.hasEntity()).thenReturn(true);
@@ -192,4 +192,4 @@ public boolean isProceedCalled() {
             return proceedCalled;
         }
     }
-}
\ No newline at end of file
+}

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilderTest.java
Patch:
@@ -36,7 +36,7 @@ public void testGiveAWarningAboutMaximumPoolSizeAndUnboundedQueue() {
 
     @Test
     public void testGiveNoWarningAboutMaximumPoolSizeAndBoundedQueue() {
-        executorServiceBuilder.workQueue(new ArrayBlockingQueue<Runnable>(16));
+        executorServiceBuilder.workQueue(new ArrayBlockingQueue<>(16));
 
         executorServiceBuilder.build();
 

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbRollbackCommand.java
Patch:
@@ -50,7 +50,7 @@ public void configure(Subparser subparser) {
     public void run(Namespace namespace, Liquibase liquibase) throws Exception {
         final String tag = namespace.getString("tag");
         final Integer count = namespace.getInt("count");
-        final Date date = (Date) namespace.get("date");
+        final Date date = namespace.get("date");
         final Boolean dryRun = namespace.getBoolean("dry-run");
         final String context = getContext(namespace);
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleWithExplicitTest.java
Patch:
@@ -36,7 +36,7 @@ public void bogusTest() { }
         DefaultServerFactory sf = (DefaultServerFactory) config.getServerFactory();
         ((HttpConnectorFactory) sf.getApplicationConnectors().get(0)).setPort(0);
         ((HttpConnectorFactory) sf.getAdminConnectors().get(0)).setPort(0);
-        RULE = new DropwizardAppRule<TestConfiguration>(TestApplication.class, config);
+        RULE = new DropwizardAppRule<>(TestApplication.class, config);
     }
 
     Client client = ClientBuilder.newClient();

File: dropwizard-views/src/test/java/io/dropwizard/views/ViewBundleTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
 
     @Test
     public void addsTheViewMessageBodyWriterToTheEnvironment() throws Exception {
-        new ViewBundle<Configuration>().run(null, environment);
+        new ViewBundle<>().run(null, environment);
 
         verify(jerseyEnvironment).register(any(ViewMessageBodyWriter.class));
     }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ParamValidatorUnwrapper.java
Patch:
@@ -17,7 +17,7 @@ public class ParamValidatorUnwrapper extends ValidatedValueUnwrapper<AbstractPar
 
     @Override
     public Object handleValidatedValue(final AbstractParam<?> abstractParam) {
-        return abstractParam.get();
+        return abstractParam == null ? null : abstractParam.get();
     }
 
     @Override

File: dropwizard-client/src/test/java/io/dropwizard/client/ssl/DropwizardSSLConnectionSocketFactoryTest.java
Patch:
@@ -53,7 +53,7 @@ public void run(Configuration configuration, Environment environment) throws Exc
     }
 
     @ClassRule
-    public static DropwizardAppRule<Configuration> TLS_APP_RULE = new DropwizardAppRule<Configuration>(TlsTestApplication.class,
+    public static DropwizardAppRule<Configuration> TLS_APP_RULE = new DropwizardAppRule<>(TlsTestApplication.class,
             ResourceHelpers.resourceFilePath("yaml/ssl_connection_socket_factory_test.yml"),
             Optional.of("tls"),
             ConfigOverride.config("tls", "server.applicationConnectors[0].keyStorePath", ResourceHelpers.resourceFilePath("stores/server/keycert.p12")),
@@ -172,4 +172,4 @@ public void shouldRejectNonSupportedProtocols() throws Exception {
             assertThat(e.getCause()).isInstanceOfAny(SocketException.class, SSLHandshakeException.class);
         }
     }
-}
\ No newline at end of file
+}

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
 
 public class ConfigurationFactoryFactoryTest {
 
-    private final ConfigurationFactoryFactory<Example> factoryFactory = new DefaultConfigurationFactoryFactory<Example>();
+    private final ConfigurationFactoryFactory<Example> factoryFactory = new DefaultConfigurationFactoryFactory<>();
     private final Validator validator = BaseValidator.newValidator();
     private File validFile;
 

File: dropwizard-core/src/main/java/io/dropwizard/setup/Bootstrap.java
Patch:
@@ -67,7 +67,7 @@ public Bootstrap(Application<T> application) {
         this.metricRegistry = new MetricRegistry();
         this.configurationSourceProvider = new FileConfigurationSourceProvider();
         this.classLoader = Thread.currentThread().getContextClassLoader();
-        this.configurationFactoryFactory = new DefaultConfigurationFactoryFactory<T>();
+        this.configurationFactoryFactory = new DefaultConfigurationFactoryFactory<>();
     }
 
     /**

File: dropwizard-core/src/main/java/io/dropwizard/setup/Environment.java
Patch:
@@ -78,7 +78,7 @@ public Environment(String name,
 
 
         this.healthCheckExecutorService = this.lifecycle().executorService("TimeBoundHealthCheck-pool-%d")
-                .workQueue(new ArrayBlockingQueue<Runnable>(1))
+                .workQueue(new ArrayBlockingQueue<>(1))
                 .minThreads(1)
                 .maxThreads(4)
                 .threadFactory(new ThreadFactoryBuilder().setDaemon(true).build())

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -518,7 +518,7 @@ public boolean isDefaultReadOnly() {
     @Deprecated
     @JsonProperty
     public void setDefaultReadOnly(boolean defaultReadOnly) {
-        readOnlyByDefault = Boolean.valueOf(defaultReadOnly);
+        readOnlyByDefault = defaultReadOnly;
     }
 
     @JsonIgnore

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoderTest.java
Patch:
@@ -29,7 +29,7 @@ public class ConfiguredGZipEncoderTest {
     @Test
     public void gzipParametersSpec() throws IOException {
         ClientRequestContext context = mock(ClientRequestContext.class);
-        MultivaluedMap<String, Object> headers = new MultivaluedHashMap<String, Object>();
+        MultivaluedMap<String, Object> headers = new MultivaluedHashMap<>();
         when(context.getHeaders()).thenReturn(headers);
         headers.put(HttpHeaders.CONTENT_ENCODING, null);
         when(context.hasEntity()).thenReturn(true);
@@ -192,4 +192,4 @@ public boolean isProceedCalled() {
             return proceedCalled;
         }
     }
-}
\ No newline at end of file
+}

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilderTest.java
Patch:
@@ -36,7 +36,7 @@ public void testGiveAWarningAboutMaximumPoolSizeAndUnboundedQueue() {
 
     @Test
     public void testGiveNoWarningAboutMaximumPoolSizeAndBoundedQueue() {
-        executorServiceBuilder.workQueue(new ArrayBlockingQueue<Runnable>(16));
+        executorServiceBuilder.workQueue(new ArrayBlockingQueue<>(16));
 
         executorServiceBuilder.build();
 

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbRollbackCommand.java
Patch:
@@ -50,7 +50,7 @@ public void configure(Subparser subparser) {
     public void run(Namespace namespace, Liquibase liquibase) throws Exception {
         final String tag = namespace.getString("tag");
         final Integer count = namespace.getInt("count");
-        final Date date = (Date) namespace.get("date");
+        final Date date = namespace.get("date");
         final Boolean dryRun = namespace.getBoolean("dry-run");
         final String context = getContext(namespace);
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleWithExplicitTest.java
Patch:
@@ -36,7 +36,7 @@ public void bogusTest() { }
         DefaultServerFactory sf = (DefaultServerFactory) config.getServerFactory();
         ((HttpConnectorFactory) sf.getApplicationConnectors().get(0)).setPort(0);
         ((HttpConnectorFactory) sf.getAdminConnectors().get(0)).setPort(0);
-        RULE = new DropwizardAppRule<TestConfiguration>(TestApplication.class, config);
+        RULE = new DropwizardAppRule<>(TestApplication.class, config);
     }
 
     Client client = ClientBuilder.newClient();

File: dropwizard-views/src/test/java/io/dropwizard/views/ViewBundleTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
 
     @Test
     public void addsTheViewMessageBodyWriterToTheEnvironment() throws Exception {
-        new ViewBundle<Configuration>().run(null, environment);
+        new ViewBundle<>().run(null, environment);
 
         verify(jerseyEnvironment).register(any(ViewMessageBodyWriter.class));
     }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ParamValidatorUnwrapper.java
Patch:
@@ -17,7 +17,7 @@ public class ParamValidatorUnwrapper extends ValidatedValueUnwrapper<AbstractPar
 
     @Override
     public Object handleValidatedValue(final AbstractParam<?> abstractParam) {
-        return abstractParam.get();
+        return abstractParam == null ? null : abstractParam.get();
     }
 
     @Override

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2IntegrationTest.java
Patch:
@@ -29,7 +29,9 @@ public class Http2IntegrationTest extends AbstractHttp2Test {
             FakeApplication.class, ResourceHelpers.resourceFilePath("test-http2.yml"),
             Optional.of("tls_http2"),
             ConfigOverride.config("tls_http2", "server.connector.keyStorePath",
-                    ResourceHelpers.resourceFilePath("stores/http2_server.jks"))
+                    ResourceHelpers.resourceFilePath("stores/http2_server.jks")),
+            ConfigOverride.config("tls_http2", "server.connector.trustStorePath",
+                    ResourceHelpers.resourceFilePath("stores/http2_client.jts"))
     );
 
     private final SslContextFactory sslContextFactory = new SslContextFactory();

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardSSLConnectionSocketFactory.java
Patch:
@@ -90,7 +90,7 @@ private void loadTrustMaterial(SSLContextBuilder sslContextBuilder) throws Excep
         sslContextBuilder.loadTrustMaterial(trustStore, trustStrategy);
     }
 
-    private KeyStore loadKeyStore(String type, File path, String password) throws Exception {
+    private static KeyStore loadKeyStore(String type, File path, String password) throws Exception {
         final KeyStore keyStore = KeyStore.getInstance(type);
         try (InputStream inputStream = new FileInputStream(path)) {
             keyStore.load(inputStream, password.toCharArray());

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -89,7 +89,7 @@ public boolean run(String... arguments) throws Exception {
         }
     }
 
-    private boolean isFlag(String[][] flags, String[] arguments) {
+    private static boolean isFlag(String[][] flags, String[] arguments) {
         for (String[] cmd : flags) {
             if (Arrays.equals(arguments, cmd)) {
                 return true;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkApplicationListenerTest.java
Patch:
@@ -271,7 +271,7 @@ private void prepareAppEvent(String resourceMethodName) throws NoSuchMethodExcep
         when(uriInfo.getMatchedResourceMethod()).thenReturn(resourceMethod);
     }
 
-    private boolean methodDefinedOnInterface(String methodName, Method[] methods) {
+    private static boolean methodDefinedOnInterface(String methodName, Method[] methods) {
         for (Method method : methods) {
             if (method.getName().equals(methodName)) {
                 return true;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -189,7 +189,7 @@ private void populate(String basePath, Class<?> klass, boolean isLocator, Resour
             }
         }
 
-        private String normalizePath(String basePath, String path) {
+        private static String normalizePath(String basePath, String path) {
             if (path == null) {
                 return basePath;
             }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedRootCauseFirstThrowableProxyConverterTest.java
Patch:
@@ -33,7 +33,7 @@ private Exception getException() {
         return null; // unpossible, tell the type-system
     }
 
-    private void throwRoot() throws SocketTimeoutException {
+    private static void throwRoot() throws SocketTimeoutException {
         throw new SocketTimeoutException("Timed-out reading from socket");
     }
 

File: dropwizard-http2/src/test/java/io/dropwizard/http2/Http2IntegrationTest.java
Patch:
@@ -39,7 +39,6 @@ public class Http2IntegrationTest extends AbstractHttp2Test {
     public void setUp() throws Exception {
         sslContextFactory.setTrustStorePath(ResourceHelpers.resourceFilePath("stores/http2_client.jts"));
         sslContextFactory.setTrustStorePassword("http2_client");
-        sslContextFactory.setIncludeCipherSuites("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
         sslContextFactory.start();
 
         client = new HttpClient(new HttpClientTransportOverHTTP2(new HTTP2Client()), sslContextFactory);

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/jersey/LoggingDBIExceptionMapper.java
Patch:
@@ -29,7 +29,7 @@ protected void logException(long id, DBIException exception) {
     }
 
     @VisibleForTesting
-    static void setLogger(Logger newLogger) {
+    static synchronized void setLogger(Logger newLogger) {
         logger = newLogger;
     }
 }

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/jersey/LoggingSQLExceptionMapper.java
Patch:
@@ -24,7 +24,7 @@ protected void logException(long id, SQLException exception) {
     }
 
     @VisibleForTesting
-    static void setLogger(Logger newLogger) {
+    static synchronized void setLogger(Logger newLogger) {
         logger = newLogger;
     }
 }

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -94,7 +94,7 @@ private boolean isBoundedQueue() {
     }
 
     @VisibleForTesting
-    static void setLog(Logger newLog) {
+    static synchronized void setLog(Logger newLog) {
        log = newLog;
     }
 }

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/jersey/LoggingDBIExceptionMapper.java
Patch:
@@ -29,7 +29,7 @@ protected void logException(long id, DBIException exception) {
     }
 
     @VisibleForTesting
-    static void setLogger(Logger newLogger) {
+    static synchronized void setLogger(Logger newLogger) {
         logger = newLogger;
     }
 }

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/jersey/LoggingSQLExceptionMapper.java
Patch:
@@ -24,7 +24,7 @@ protected void logException(long id, SQLException exception) {
     }
 
     @VisibleForTesting
-    static void setLogger(Logger newLogger) {
+    static synchronized void setLogger(Logger newLogger) {
         logger = newLogger;
     }
 }

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -94,7 +94,7 @@ private boolean isBoundedQueue() {
     }
 
     @VisibleForTesting
-    static void setLog(Logger newLog) {
+    static synchronized void setLog(Logger newLog) {
        log = newLog;
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -34,7 +34,6 @@ protected Application configure() {
 
     @Override
     protected void configureClient(ClientConfig config) {
-        final Validator validator = Validators.newValidator();
         final ObjectMapper mapper = new ObjectMapper();
         final JacksonMessageBodyProvider provider = new JacksonMessageBodyProvider(mapper);
         config.register(provider);

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -291,7 +291,7 @@ public Client build(String name) {
                     "an executor service and an object mapper");
         }
 
-        if (executorService == null && environment != null) {
+        if (executorService == null) {
             executorService = environment.lifecycle()
                     .executorService("jersey-client-" + name + "-%d")
                     .minThreads(configuration.getMinThreads())
@@ -300,7 +300,7 @@ public Client build(String name) {
                     .build();
         }
 
-        if (objectMapper == null && environment != null) {
+        if (objectMapper == null) {
             objectMapper = environment.getObjectMapper();
         }
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java
Patch:
@@ -223,9 +223,7 @@ protected void configureClient(final ClientConfig config) {
                     base.evaluate();
                 } finally {
                     ResourceTestResourceConfig.RULE_ID_TO_RULE.remove(ruleId);
-                    if (test != null) {
-                        test.tearDown();
-                    }
+                    test.tearDown();
                 }
             }
         };

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardSSLConnectionSocketFactory.java
Patch:
@@ -90,7 +90,7 @@ private void loadTrustMaterial(SSLContextBuilder sslContextBuilder) throws Excep
         sslContextBuilder.loadTrustMaterial(trustStore, trustStrategy);
     }
 
-    private KeyStore loadKeyStore(String type, File path, String password) throws Exception {
+    private static KeyStore loadKeyStore(String type, File path, String password) throws Exception {
         final KeyStore keyStore = KeyStore.getInstance(type);
         try (InputStream inputStream = new FileInputStream(path)) {
             keyStore.load(inputStream, password.toCharArray());

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -89,7 +89,7 @@ public boolean run(String... arguments) throws Exception {
         }
     }
 
-    private boolean isFlag(String[][] flags, String[] arguments) {
+    private static boolean isFlag(String[][] flags, String[] arguments) {
         for (String[] cmd : flags) {
             if (Arrays.equals(arguments, cmd)) {
                 return true;

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkApplicationListenerTest.java
Patch:
@@ -271,7 +271,7 @@ private void prepareAppEvent(String resourceMethodName) throws NoSuchMethodExcep
         when(uriInfo.getMatchedResourceMethod()).thenReturn(resourceMethod);
     }
 
-    private boolean methodDefinedOnInterface(String methodName, Method[] methods) {
+    private static boolean methodDefinedOnInterface(String methodName, Method[] methods) {
         for (Method method : methods) {
             if (method.getName().equals(methodName)) {
                 return true;

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -189,7 +189,7 @@ private void populate(String basePath, Class<?> klass, boolean isLocator, Resour
             }
         }
 
-        private String normalizePath(String basePath, String path) {
+        private static String normalizePath(String basePath, String path) {
             if (path == null) {
                 return basePath;
             }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedRootCauseFirstThrowableProxyConverterTest.java
Patch:
@@ -33,7 +33,7 @@ private Exception getException() {
         return null; // unpossible, tell the type-system
     }
 
-    private void throwRoot() throws SocketTimeoutException {
+    private static void throwRoot() throws SocketTimeoutException {
         throw new SocketTimeoutException("Timed-out reading from socket");
     }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -34,7 +34,6 @@ protected Application configure() {
 
     @Override
     protected void configureClient(ClientConfig config) {
-        final Validator validator = Validators.newValidator();
         final ObjectMapper mapper = new ObjectMapper();
         final JacksonMessageBodyProvider provider = new JacksonMessageBodyProvider(mapper);
         config.register(provider);

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -291,7 +291,7 @@ public Client build(String name) {
                     "an executor service and an object mapper");
         }
 
-        if (executorService == null && environment != null) {
+        if (executorService == null) {
             executorService = environment.lifecycle()
                     .executorService("jersey-client-" + name + "-%d")
                     .minThreads(configuration.getMinThreads())
@@ -300,7 +300,7 @@ public Client build(String name) {
                     .build();
         }
 
-        if (objectMapper == null && environment != null) {
+        if (objectMapper == null) {
             objectMapper = environment.getObjectMapper();
         }
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java
Patch:
@@ -223,9 +223,7 @@ protected void configureClient(final ClientConfig config) {
                     base.evaluate();
                 } finally {
                     ResourceTestResourceConfig.RULE_ID_TO_RULE.remove(ruleId);
-                    if (test != null) {
-                        test.tearDown();
-                    }
+                    test.tearDown();
                 }
             }
         };

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java
Patch:
@@ -98,7 +98,7 @@ public T buildAuthFilter() {
             Preconditions.checkArgument(authorizer != null, "Authorizer is not set");
             Preconditions.checkArgument(unauthorizedHandler != null, "Unauthorized handler is not set");
 
-            T authFilter = newInstance();
+            final T authFilter = newInstance();
             authFilter.authorizer = authorizer;
             authFilter.authenticator = authenticator;
             authFilter.prefix = prefix;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PrincipalImpl.java
Patch:
@@ -25,8 +25,7 @@ public boolean equals(Object o) {
             return false;
         }
 
-        PrincipalImpl principal = (PrincipalImpl) o;
-
+        final PrincipalImpl principal = (PrincipalImpl) o;
         return Objects.equals(this.name, principal.name);
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java
Patch:
@@ -39,7 +39,7 @@ public ChainedAuthFilter(List<AuthFilter> handlers) {
     public void filter(ContainerRequestContext containerRequestContext) throws IOException {
         WebApplicationException firstException = null;
         for (AuthFilter authFilter : handlers) {
-            SecurityContext securityContext = containerRequestContext.getSecurityContext();
+            final SecurityContext securityContext = containerRequestContext.getSecurityContext();
             try {
                 authFilter.filter(containerRequestContext);
                 if (securityContext != containerRequestContext.getSecurityContext()) {

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/ConstraintViolationBenchmark.java
Patch:
@@ -66,15 +66,15 @@ public void prepare() {
         final Validator validator = Validators.newValidator();
         final ExecutableValidator execValidator = validator.forExecutables();
 
-        Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> paramViolations =
+        final Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> paramViolations =
             execValidator.validateParameters(
                 new Resource(),
                 getAccessibleMethod(ConstraintViolationBenchmark.Resource.class, "paramFunc", String.class),
                 new Object[]{""} // the parameter value
             );
         paramViolation = paramViolations.iterator().next();
 
-        Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> objViolations =
+        final Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> objViolations =
             execValidator.validateParameters(
                 new Resource(),
                 getAccessibleMethod(ConstraintViolationBenchmark.Resource.class, "objectFunc", Foo.class),

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardExecutorProvider.java
Patch:
@@ -8,7 +8,7 @@ class DropwizardExecutorProvider implements ExecutorServiceProvider {
 
     private final ExecutorService threadPool;
 
-    public DropwizardExecutorProvider(ExecutorService threadPool) {
+    DropwizardExecutorProvider(ExecutorService threadPool) {
         this.threadPool = threadPool;
     }
 

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilter.java
Patch:
@@ -9,7 +9,8 @@
 import org.glassfish.jersey.client.ClientRequest;
 
 /**
- * Prevents Jersey from modification Request's User-Agent header with default value, to escape the value conflict with Dropwizard
+ * Prevents Jersey from modification Request's User-Agent header with default value,
+ * to escape the value conflict with Dropwizard
  */
 @Provider
 public class JerseyIgnoreRequestUserAgentHeaderFilter implements ClientRequestFilter {

File: dropwizard-client/src/main/java/io/dropwizard/client/proxy/NonProxyListProxyRoutePlanner.java
Patch:
@@ -40,7 +40,7 @@ private List<Pattern> getNonProxyHostPatterns(@Nullable List<String> nonProxyHos
             return ImmutableList.of();
         }
 
-        ImmutableList.Builder<Pattern> patterns = ImmutableList.builder();
+        final ImmutableList.Builder<Pattern> patterns = ImmutableList.builder();
         for (String nonProxyHost : nonProxyHosts) {
             // Replaces a wildcard to a regular expression
             patterns.add(Pattern.compile(WILDCARD.matcher(nonProxyHost).replaceAll(REGEX_WILDCARD)));

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/EnvironmentVariableLookup.java
Patch:
@@ -35,7 +35,7 @@ public EnvironmentVariableLookup(boolean strict) {
      */
     @Override
     public String lookup(String key) {
-        String value = System.getenv(key);
+        final String value = System.getenv(key);
 
         if (value == null && strict) {
             throw new UndefinedEnvironmentVariableException("The environment variable '" + key

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/SubstitutingSourceProvider.java
Patch:
@@ -34,8 +34,8 @@ public SubstitutingSourceProvider(ConfigurationSourceProvider delegate, StrSubst
      */
     @Override
     public InputStream open(String path) throws IOException {
-        String config = new String(ByteStreams.toByteArray(delegate.open(path)), StandardCharsets.UTF_8);
-        String substituted = substitutor.replace(config);
+        final String config = new String(ByteStreams.toByteArray(delegate.open(path)), StandardCharsets.UTF_8);
+        final String substituted = substitutor.replace(config);
 
         return new ByteArrayInputStream(substituted.getBytes(StandardCharsets.UTF_8));
     }

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -5,8 +5,8 @@
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.ArgumentParsers;
 import net.sourceforge.argparse4j.impl.Arguments;
-import net.sourceforge.argparse4j.inf.Argument;
 import net.sourceforge.argparse4j.inf.ArgumentAction;
+import net.sourceforge.argparse4j.inf.Argument;
 import net.sourceforge.argparse4j.inf.ArgumentParser;
 import net.sourceforge.argparse4j.inf.ArgumentParserException;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-core/src/main/java/io/dropwizard/cli/ConfiguredCommand.java
Patch:
@@ -109,7 +109,8 @@ private T parseConfiguration(ConfigurationFactoryFactory<T> configurationFactory
                                  String path,
                                  Class<T> klass,
                                  ObjectMapper objectMapper) throws IOException, ConfigurationException {
-        final ConfigurationFactory<T> configurationFactory = configurationFactoryFactory.create(klass, validator, objectMapper, "dw");
+        final ConfigurationFactory<T> configurationFactory = configurationFactoryFactory
+                .create(klass, validator, objectMapper, "dw");
         if (path != null) {
             return configurationFactory.build(provider, path);
         }

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -576,7 +576,7 @@ protected Handler addRequestLog(Server server, Handler handler, String name) {
     protected Handler addStatsHandler(Handler handler) {
         // Graceful shutdown is implemented via the statistics handler,
         // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=420142
-        StatisticsHandler statisticsHandler = new StatisticsHandler();
+        final StatisticsHandler statisticsHandler = new StatisticsHandler();
         statisticsHandler.setHandler(handler);
         return statisticsHandler;
     }

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -213,7 +213,7 @@ private List<Connector> buildAdminConnectors(MetricRegistry metricRegistry, Serv
 
         final List<Connector> connectors = new ArrayList<>();
         for (ConnectorFactory factory : adminConnectors) {
-            Connector connector = factory.build(server, metricRegistry, "admin", threadPool);
+            final Connector connector = factory.build(server, metricRegistry, "admin", threadPool);
             if (connector instanceof ContainerLifeCycle) {
                 ((ContainerLifeCycle) connector).unmanage(threadPool);
             }

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -289,7 +289,7 @@ public enum TransactionIsolation {
 
         private final int value;
 
-        private TransactionIsolation(int value) {
+        TransactionIsolation(int value) {
             this.value = value;
         }
 

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public Map<String, Map<String, String>> getViewRendererConfiguration() {
 
     @JsonProperty("viewRendererConfiguration")
     public void setViewRendererConfiguration(Map<String, Map<String, String>> viewRendererConfiguration) {
-        ImmutableMap.Builder<String, Map<String, String>> builder = ImmutableMap.builder();
+        final ImmutableMap.Builder<String, Map<String, String>> builder = ImmutableMap.builder();
         for (Map.Entry<String, Map<String, String>> entry : viewRendererConfiguration.entrySet()) {
             builder.put(entry.getKey(), ImmutableMap.copyOf(entry.getValue()));
         }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -96,7 +96,7 @@ private SessionFactory buildSessionFactory(HibernateBundle<?> bundle,
         return configuration.buildSessionFactory(registry);
     }
 
-    protected void configure(Configuration configuration, ServiceRegistry registry){
+    protected void configure(Configuration configuration, ServiceRegistry registry) {
     }
 
     private void addAnnotatedClasses(Configuration configuration,

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkApplicationListener.java
Patch:
@@ -70,7 +70,7 @@ private static class UnitOfWorkEventListener implements RequestEventListener {
         private Session session;
         private SessionFactory sessionFactory;
 
-        public UnitOfWorkEventListener(Map<Method, UnitOfWork> methodMap,
+        UnitOfWorkEventListener(Map<Method, UnitOfWork> methodMap,
                                        Map<String, SessionFactory> sessionFactories) {
             this.methodMap = methodMap;
             this.sessionFactories = sessionFactories;

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/OptionalContainerFactory.java
Patch:
@@ -19,7 +19,7 @@ public ContainerBuilder<Optional<?>> newContainerBuilderFor(Class<?> type) {
 
     private static class OptionalContainerBuilder implements ContainerBuilder<Optional<?>> {
 
-        Optional<?> optional = Optional.empty();
+        private Optional<?> optional = Optional.empty();
 
         @Override
         public ContainerBuilder<Optional<?>> add(Object it) {

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/JodaDateTimeArgument.java
Patch:
@@ -32,7 +32,7 @@ public void apply(final int position,
             if (calendar.isPresent()) {
                 // We need to make a clone, because Calendar is not thread-safe
                 // and some JDBC drivers mutate it during time calculations
-                Calendar calendarClone = (Calendar) calendar.get().clone();
+                final Calendar calendarClone = (Calendar) calendar.get().clone();
                 statement.setTimestamp(position, new Timestamp(value.getMillis()), calendarClone);
             } else {
                 statement.setTimestamp(position, new Timestamp(value.getMillis()));

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/LocalDateMapper.java
Patch:
@@ -14,7 +14,7 @@
 public class LocalDateMapper implements ResultColumnMapper<LocalDate> {
     @Override
     public LocalDate mapColumn(ResultSet r, String columnLabel, StatementContext ctx) throws SQLException {
-        Timestamp timestamp = r.getTimestamp(columnLabel);
+        final Timestamp timestamp = r.getTimestamp(columnLabel);
         if (timestamp == null) {
             return null;
         }
@@ -23,7 +23,7 @@ public LocalDate mapColumn(ResultSet r, String columnLabel, StatementContext ctx
 
     @Override
     public LocalDate mapColumn(ResultSet r, int columnNumber, StatementContext ctx) throws SQLException {
-        Timestamp timestamp = r.getTimestamp(columnNumber);
+        final Timestamp timestamp = r.getTimestamp(columnNumber);
         if (timestamp == null) {
             return null;
         }

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/OffsetDateTimeArgument.java
Patch:
@@ -32,7 +32,7 @@ public void apply(final int position,
             if (calendar.isPresent()) {
                 // We need to make a clone, because Calendar is not thread-safe
                 // and some JDBC drivers mutate it during time calculations
-                Calendar calendarClone = (Calendar) calendar.get().clone();
+                final Calendar calendarClone = (Calendar) calendar.get().clone();
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()), calendarClone);
             } else {
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()));

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/ZonedDateTimeArgument.java
Patch:
@@ -32,7 +32,7 @@ public void apply(final int position,
             if (calendar.isPresent()) {
                 // We need to make a clone, because Calendar is not thread-safe
                 // and some JDBC drivers mutate it during time calculations
-                Calendar calendarClone = (Calendar) calendar.get().clone();
+                final Calendar calendarClone = (Calendar) calendar.get().clone();
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()), calendarClone);
             } else {
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/caching/CacheControlledResponseFeature.java
Patch:
@@ -32,7 +32,7 @@ private static class CacheControlledResponseFilter implements ContainerResponseF
         private static final int ONE_YEAR_IN_SECONDS = (int) TimeUnit.DAYS.toSeconds(365);
         private String cacheResponseHeader;
 
-        public CacheControlledResponseFilter(CacheControl control) {
+        CacheControlledResponseFilter(CacheControl control) {
             final javax.ws.rs.core.CacheControl cacheControl = new javax.ws.rs.core.CacheControl();
             cacheControl.setPrivate(control.isPrivate());
             cacheControl.setNoCache(control.noCache());

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/LoggingExceptionMapper.java
Patch:
@@ -44,7 +44,7 @@ protected String formatErrorMessage(long id, E exception) {
     }
 
     protected long logException(E exception) {
-        long id = ThreadLocalRandom.current().nextLong();
+        final long id = ThreadLocalRandom.current().nextLong();
         logException(id, exception);
         return id;
     }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamConverterProvider.java
Patch:
@@ -47,8 +47,7 @@ public String toString(final T value) {
                 };
             }
 
-            final Set<ParamConverterProvider> converterProviders = Providers.getProviders(locator, ParamConverterProvider.class);
-            for (ParamConverterProvider provider : converterProviders) {
+            for (ParamConverterProvider provider : Providers.getProviders(locator, ParamConverterProvider.class)) {
                 final ParamConverter<?> converter = provider.getConverter(ctp.rawClass(), ctp.type(), annotations);
                 if (converter != null) {
                     return new ParamConverter<T>() {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoder.java
Patch:
@@ -40,7 +40,7 @@ public void filter(ClientRequestContext context) throws IOException {
 
     @Override
     public final void aroundWriteTo(WriterInterceptorContext context) throws IOException {
-        String contentEncoding = (String) context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
+        final String contentEncoding = (String) context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
         if ((contentEncoding != null) &&
                 (contentEncoding.equals("gzip") || contentEncoding.equals("x-gzip"))) {
             context.setOutputStream(new GZIPOutputStream(context.getOutputStream()));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/GZipDecoder.java
Patch:
@@ -30,7 +30,7 @@ public Object aroundReadFrom(ReaderInterceptorContext context) throws IOExceptio
             context.getHeaders().add(HttpHeaders.ACCEPT_ENCODING, "gzip");
         }
 
-        String contentEncoding = context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
+        final String contentEncoding = context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
         if (contentEncoding != null &&
                 (contentEncoding.equals("gzip") || contentEncoding.equals("x-gzip"))) {
             context.setInputStream(new GZIPInputStream(context.getInputStream()));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalMessageBodyWriter.java
Patch:
@@ -53,7 +53,7 @@ public void writeTo(Optional<?> entity,
         final Type innerGenericType = (genericType instanceof ParameterizedType) ?
             ((ParameterizedType) genericType).getActualTypeArguments()[0] : entity.get().getClass();
 
-        MessageBodyWriter writer = mbw.get().getMessageBodyWriter(entity.get().getClass(),
+        final MessageBodyWriter writer = mbw.get().getMessageBodyWriter(entity.get().getClass(),
             innerGenericType, annotations, mediaType);
         writer.writeTo(entity.get(), entity.get().getClass(),
             innerGenericType, annotations, mediaType, httpHeaders, entityStream);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalParamConverterProvider.java
Patch:
@@ -28,7 +28,8 @@ public OptionalParamConverterProvider(final ServiceLocator locator) {
      * {@inheritDoc}
      */
     @Override
-    public <T> ParamConverter<T> getConverter(final Class<T> rawType, final Type genericType, final Annotation[] annotations) {
+    public <T> ParamConverter<T> getConverter(final Class<T> rawType, final Type genericType,
+                                              final Annotation[] annotations) {
         if (Optional.class.equals(rawType)) {
             final List<ClassTypePair> ctps = ReflectionHelper.getTypeArgumentAndClass(genericType);
             final ClassTypePair ctp = (ctps.size() == 1) ? ctps.get(0) : null;
@@ -47,8 +48,7 @@ public String toString(final T value) {
                 };
             }
 
-            final Set<ParamConverterProvider> converterProviders = Providers.getProviders(locator, ParamConverterProvider.class);
-            for (ParamConverterProvider provider : converterProviders) {
+            for (ParamConverterProvider provider : Providers.getProviders(locator, ParamConverterProvider.class)) {
                 final ParamConverter<?> converter = provider.getConverter(ctp.rawClass(), ctp.type(), annotations);
                 if (converter != null) {
                     return new ParamConverter<T>() {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/FlashFactory.java
Patch:
@@ -21,8 +21,7 @@ public Flash<?> provide() {
             return null;
         }
 
-        HttpSession session = request.getSession(!this.doNotCreate);
-
+        final HttpSession session = request.getSession(!this.doNotCreate);
         if (session != null) {
             return new Flash(session);
         }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/SessionFactoryProvider.java
Patch:
@@ -28,7 +28,7 @@ public SessionFactoryProvider(final MultivaluedParameterExtractorProvider extrac
     protected Factory<?> createValueFactory(final Parameter parameter) {
         final Class<?> classType = parameter.getRawType();
 
-        Session sessionAnnotation = parameter.getAnnotation(Session.class);
+        final Session sessionAnnotation = parameter.getAnnotation(Session.class);
         if (sessionAnnotation == null) {
             return null;
         }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/JerseyViolationExceptionMapper.java
Patch:
@@ -25,7 +25,7 @@ public String apply(ConstraintViolation<?> constraintViolation) {
                     }
                 }).toList();
 
-        int status = ConstraintMessage.determineStatus(violations, invocable);
+        final int status = ConstraintMessage.determineStatus(violations, invocable);
         return Response.status(status)
                 .entity(new ValidationErrorMessage(errors))
                 .build();

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ParamValidatorUnwrapper.java
Patch:
@@ -22,7 +22,8 @@ public Object handleValidatedValue(final AbstractParam<?> abstractParam) {
 
     @Override
     public Type getValidatedValueType(final Type type) {
-        ResolvedType resolvedType = resolver.resolve(type);
-        return resolvedType.typeParametersFor(AbstractParam.class).get(0).getErasedType();
+        return resolver.resolve(type)
+                .typeParametersFor(AbstractParam.class).get(0)
+                .getErasedType();
     }
 }

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/Jetty93InstrumentedConnectionFactory.java
Patch:
@@ -18,7 +18,7 @@ class Jetty93InstrumentedConnectionFactory extends ContainerLifeCycle implements
     private final ConnectionFactory connectionFactory;
     private final Timer timer;
 
-    public Jetty93InstrumentedConnectionFactory(ConnectionFactory connectionFactory, Timer timer) {
+    Jetty93InstrumentedConnectionFactory(ConnectionFactory connectionFactory, Timer timer) {
         this.connectionFactory = connectionFactory;
         this.timer = timer;
         addBean(connectionFactory);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/BootstrapLogging.java
Patch:
@@ -56,7 +56,7 @@ public static void bootstrap(Level level) {
             appender.addFilter(filter);
             appender.setContext(root.getLoggerContext());
 
-            LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
+            final LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
             layoutEncoder.setLayout(formatter);
             appender.setEncoder(layoutEncoder);
             appender.start();

File: dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java
Patch:
@@ -109,7 +109,7 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         appender.setContext(context);
         appender.setTarget(target.get());
 
-        LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
+        final LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
         layoutEncoder.setLayout(layout == null ? buildLayout(context, timeZone) : layout);
         appender.setEncoder(layoutEncoder);
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/DefaultLoggingFactory.java
Patch:
@@ -20,9 +20,9 @@
 import io.dropwizard.jackson.Jackson;
 
 import javax.management.InstanceAlreadyExistsException;
+import javax.management.MalformedObjectNameException;
 import javax.management.MBeanRegistrationException;
 import javax.management.MBeanServer;
-import javax.management.MalformedObjectNameException;
 import javax.management.NotCompliantMBeanException;
 import javax.management.ObjectName;
 import javax.validation.Valid;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingUtil.java
Patch:
@@ -38,7 +38,7 @@ private LoggingUtil() {
     public static LoggerContext getLoggerContext() {
         final long startTime = System.nanoTime();
         while (true) {
-            ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory();
+            final ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory();
             if (iLoggerFactory instanceof LoggerContext) {
                 return (LoggerContext) iLoggerFactory;
             }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -204,7 +204,9 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         final SyslogAppender appender = new SyslogAppender();
         appender.setName("syslog-appender");
         appender.setContext(context);
-        appender.setSuffixPattern(logFormat.replaceAll(LOG_TOKEN_PID, pid).replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
+        appender.setSuffixPattern(logFormat
+                .replaceAll(LOG_TOKEN_PID, pid)
+                .replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
         appender.setSyslogHost(host);
         appender.setPort(port);
         appender.setFacility(facility.toString().toLowerCase(Locale.ENGLISH));

File: dropwizard-metrics-ganglia/src/main/java/io/dropwizard/metrics/ganglia/GangliaReporterFactory.java
Patch:
@@ -188,7 +188,7 @@ public void setSpoof(String spoof) {
     @Override
     public ScheduledReporter build(MetricRegistry registry) {
         try {
-            GMetric ganglia = new GMetric(host,
+            final GMetric ganglia = new GMetric(host,
                                           port,
                                           mode,
                                           ttl,

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/CsvReporterFactory.java
Patch:
@@ -54,10 +54,9 @@ public void setFile(File file) {
 
     @Override
     public ScheduledReporter build(MetricRegistry registry) {
-        boolean creation = file.mkdirs();
+        final boolean creation = file.mkdirs();
         if (!creation && !file.exists()) {
-            String msg = "Failed to create" + file.getAbsolutePath();
-            throw new RuntimeException(msg);
+            throw new RuntimeException("Failed to create" + file.getAbsolutePath());
         }
 
         return CsvReporter.forRegistry(registry)

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -8,8 +8,9 @@
 
 public abstract class MigrationsBundle<T extends Configuration> implements Bundle, DatabaseConfiguration<T> {
     @Override
+    @SuppressWarnings("unchecked")
     public final void initialize(Bootstrap<?> bootstrap) {
-        final Class<T> klass = (Class<T>)bootstrap.getApplication().getConfigurationClass();
+        final Class<T> klass = (Class<T>) bootstrap.getApplication().getConfigurationClass();
         bootstrap.addCommand(new DbCommand<>(this, klass));
     }
 

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/LogConfigurationTask.java
Patch:
@@ -53,8 +53,8 @@ public LogConfigurationTask(LoggerContext loggerContext) {
 
     @Override
     public void execute(ImmutableMultimap<String, String> parameters, PrintWriter output) throws Exception {
-        List<String> loggerNames = getLoggerNames(parameters);
-        Level loggerLevel = getLoggerLevel(parameters);
+        final List<String> loggerNames = getLoggerNames(parameters);
+        final Level loggerLevel = getLoggerLevel(parameters);
 
         for (String loggerName : loggerNames) {
             loggerContext.getLogger(loggerName).setLevel(loggerLevel);
@@ -68,7 +68,7 @@ private List<String> getLoggerNames(ImmutableMultimap<String, String> parameters
     }
 
     private Level getLoggerLevel(ImmutableMultimap<String, String> parameters) {
-        List<String> loggerLevels = parameters.get("level").asList();
+        final List<String> loggerLevels = parameters.get("level").asList();
         return loggerLevels.isEmpty() ? null : Level.valueOf(loggerLevels.get(0));
     }
 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -203,7 +203,7 @@ public ConfigurationFactory<C> create(Class<C> klass, Validator validator,
             application.initialize(bootstrap);
             final ServerCommand<C> command = new ServerCommand<>(application);
 
-            ImmutableMap.Builder<String, Object> file = ImmutableMap.builder();
+            final ImmutableMap.Builder<String, Object> file = ImmutableMap.builder();
             if (!Strings.isNullOrEmpty(configPath)) {
                 file.put("file", configPath);
             }

File: dropwizard-util/src/test/java/io/dropwizard/util/DurationTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.util;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 

File: dropwizard-validation/src/main/java/io/dropwizard/validation/ConstraintViolations.java
Patch:
@@ -37,8 +37,8 @@ public static <T> String validationMethodFormatted(ConstraintViolation<T> v) {
             }
         }
 
-        String usefulNodes = DOT_JOINER.join(nodes.subList(paramIndex + 1, nodes.size() - 1));
-        String msg = usefulNodes + (v.getMessage().startsWith(".") ? "" : " ") + v.getMessage();
+        final String usefulNodes = DOT_JOINER.join(nodes.subList(paramIndex + 1, nodes.size() - 1));
+        final String msg = usefulNodes + (v.getMessage().startsWith(".") ? "" : " ") + v.getMessage();
         return msg.trim();
     }
 

File: dropwizard-validation/src/main/java/io/dropwizard/validation/PortRange.java
Patch:
@@ -6,7 +6,9 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.ElementType.*;
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**

File: dropwizard-validation/src/main/java/io/dropwizard/validation/ValidationMethod.java
Patch:
@@ -6,7 +6,9 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.ElementType.*;
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**

File: dropwizard-validation/src/main/java/io/dropwizard/validation/valuehandling/GuavaOptionalValidatedValueUnwrapper.java
Patch:
@@ -23,7 +23,7 @@ public Object handleValidatedValue(final Optional<?> optional) {
 
     @Override
     public Type getValidatedValueType(final Type type) {
-        ResolvedType resolvedType = resolver.resolve(type);
+        final ResolvedType resolvedType = resolver.resolve(type);
         return resolvedType.typeParametersFor(Optional.class).get(0).getErasedType();
     }
 }

File: dropwizard-validation/src/main/java/io/dropwizard/validation/valuehandling/OptionalValidatedValueUnwrapper.java
Patch:
@@ -23,7 +23,7 @@ public Object handleValidatedValue(final Optional<?> optional) {
 
     @Override
     public Type getValidatedValueType(final Type type) {
-        ResolvedType resolvedType = resolver.resolve(type);
+        final ResolvedType resolvedType = resolver.resolve(type);
         return resolvedType.typeParametersFor(Optional.class).get(0).getErasedType();
     }
 }

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -106,9 +106,9 @@ public Map<String, Map<String, String>> getViewConfiguration(T configuration) {
 
     @Override
     public void run(T configuration, Environment environment) throws Exception {
-        Map<String, Map<String, String>> options = getViewConfiguration(configuration);
+        final Map<String, Map<String, String>> options = getViewConfiguration(configuration);
         for (ViewRenderer viewRenderer : viewRenderers) {
-            Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
+            final Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
             viewRenderer.configure(firstNonNull(viewOptions, Collections.<String, String>emptyMap()));
         }
         environment.jersey().register(new ViewMessageBodyWriter(environment.metrics(), viewRenderers));

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java
Patch:
@@ -98,7 +98,7 @@ public T buildAuthFilter() {
             Preconditions.checkArgument(authorizer != null, "Authorizer is not set");
             Preconditions.checkArgument(unauthorizedHandler != null, "Unauthorized handler is not set");
 
-            T authFilter = newInstance();
+            final T authFilter = newInstance();
             authFilter.authorizer = authorizer;
             authFilter.authenticator = authenticator;
             authFilter.prefix = prefix;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/PrincipalImpl.java
Patch:
@@ -25,8 +25,7 @@ public boolean equals(Object o) {
             return false;
         }
 
-        PrincipalImpl principal = (PrincipalImpl) o;
-
+        final PrincipalImpl principal = (PrincipalImpl) o;
         return Objects.equals(this.name, principal.name);
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java
Patch:
@@ -39,7 +39,7 @@ public ChainedAuthFilter(List<AuthFilter> handlers) {
     public void filter(ContainerRequestContext containerRequestContext) throws IOException {
         WebApplicationException firstException = null;
         for (AuthFilter authFilter : handlers) {
-            SecurityContext securityContext = containerRequestContext.getSecurityContext();
+            final SecurityContext securityContext = containerRequestContext.getSecurityContext();
             try {
                 authFilter.filter(containerRequestContext);
                 if (securityContext != containerRequestContext.getSecurityContext()) {

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/ConstraintViolationBenchmark.java
Patch:
@@ -66,15 +66,15 @@ public void prepare() {
         final Validator validator = Validators.newValidator();
         final ExecutableValidator execValidator = validator.forExecutables();
 
-        Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> paramViolations =
+        final Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> paramViolations =
             execValidator.validateParameters(
                 new Resource(),
                 getAccessibleMethod(ConstraintViolationBenchmark.Resource.class, "paramFunc", String.class),
                 new Object[]{""} // the parameter value
             );
         paramViolation = paramViolations.iterator().next();
 
-        Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> objViolations =
+        final Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> objViolations =
             execValidator.validateParameters(
                 new Resource(),
                 getAccessibleMethod(ConstraintViolationBenchmark.Resource.class, "objectFunc", Foo.class),

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardExecutorProvider.java
Patch:
@@ -8,7 +8,7 @@ class DropwizardExecutorProvider implements ExecutorServiceProvider {
 
     private final ExecutorService threadPool;
 
-    public DropwizardExecutorProvider(ExecutorService threadPool) {
+    DropwizardExecutorProvider(ExecutorService threadPool) {
         this.threadPool = threadPool;
     }
 

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilter.java
Patch:
@@ -9,7 +9,8 @@
 import org.glassfish.jersey.client.ClientRequest;
 
 /**
- * Prevents Jersey from modification Request's User-Agent header with default value, to escape the value conflict with Dropwizard
+ * Prevents Jersey from modification Request's User-Agent header with default value,
+ * to escape the value conflict with Dropwizard
  */
 @Provider
 public class JerseyIgnoreRequestUserAgentHeaderFilter implements ClientRequestFilter {

File: dropwizard-client/src/main/java/io/dropwizard/client/proxy/NonProxyListProxyRoutePlanner.java
Patch:
@@ -40,7 +40,7 @@ private List<Pattern> getNonProxyHostPatterns(@Nullable List<String> nonProxyHos
             return ImmutableList.of();
         }
 
-        ImmutableList.Builder<Pattern> patterns = ImmutableList.builder();
+        final ImmutableList.Builder<Pattern> patterns = ImmutableList.builder();
         for (String nonProxyHost : nonProxyHosts) {
             // Replaces a wildcard to a regular expression
             patterns.add(Pattern.compile(WILDCARD.matcher(nonProxyHost).replaceAll(REGEX_WILDCARD)));

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/EnvironmentVariableLookup.java
Patch:
@@ -35,7 +35,7 @@ public EnvironmentVariableLookup(boolean strict) {
      */
     @Override
     public String lookup(String key) {
-        String value = System.getenv(key);
+        final String value = System.getenv(key);
 
         if (value == null && strict) {
             throw new UndefinedEnvironmentVariableException("The environment variable '" + key

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/SubstitutingSourceProvider.java
Patch:
@@ -34,8 +34,8 @@ public SubstitutingSourceProvider(ConfigurationSourceProvider delegate, StrSubst
      */
     @Override
     public InputStream open(String path) throws IOException {
-        String config = new String(ByteStreams.toByteArray(delegate.open(path)), StandardCharsets.UTF_8);
-        String substituted = substitutor.replace(config);
+        final String config = new String(ByteStreams.toByteArray(delegate.open(path)), StandardCharsets.UTF_8);
+        final String substituted = substitutor.replace(config);
 
         return new ByteArrayInputStream(substituted.getBytes(StandardCharsets.UTF_8));
     }

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -5,8 +5,8 @@
 import io.dropwizard.util.JarLocation;
 import net.sourceforge.argparse4j.ArgumentParsers;
 import net.sourceforge.argparse4j.impl.Arguments;
-import net.sourceforge.argparse4j.inf.Argument;
 import net.sourceforge.argparse4j.inf.ArgumentAction;
+import net.sourceforge.argparse4j.inf.Argument;
 import net.sourceforge.argparse4j.inf.ArgumentParser;
 import net.sourceforge.argparse4j.inf.ArgumentParserException;
 import net.sourceforge.argparse4j.inf.Namespace;

File: dropwizard-core/src/main/java/io/dropwizard/cli/ConfiguredCommand.java
Patch:
@@ -109,7 +109,8 @@ private T parseConfiguration(ConfigurationFactoryFactory<T> configurationFactory
                                  String path,
                                  Class<T> klass,
                                  ObjectMapper objectMapper) throws IOException, ConfigurationException {
-        final ConfigurationFactory<T> configurationFactory = configurationFactoryFactory.create(klass, validator, objectMapper, "dw");
+        final ConfigurationFactory<T> configurationFactory = configurationFactoryFactory
+                .create(klass, validator, objectMapper, "dw");
         if (path != null) {
             return configurationFactory.build(provider, path);
         }

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -576,7 +576,7 @@ protected Handler addRequestLog(Server server, Handler handler, String name) {
     protected Handler addStatsHandler(Handler handler) {
         // Graceful shutdown is implemented via the statistics handler,
         // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=420142
-        StatisticsHandler statisticsHandler = new StatisticsHandler();
+        final StatisticsHandler statisticsHandler = new StatisticsHandler();
         statisticsHandler.setHandler(handler);
         return statisticsHandler;
     }

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -213,7 +213,7 @@ private List<Connector> buildAdminConnectors(MetricRegistry metricRegistry, Serv
 
         final List<Connector> connectors = new ArrayList<>();
         for (ConnectorFactory factory : adminConnectors) {
-            Connector connector = factory.build(server, metricRegistry, "admin", threadPool);
+            final Connector connector = factory.build(server, metricRegistry, "admin", threadPool);
             if (connector instanceof ContainerLifeCycle) {
                 ((ContainerLifeCycle) connector).unmanage(threadPool);
             }

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -289,7 +289,7 @@ public enum TransactionIsolation {
 
         private final int value;
 
-        private TransactionIsolation(int value) {
+        TransactionIsolation(int value) {
             this.value = value;
         }
 

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public Map<String, Map<String, String>> getViewRendererConfiguration() {
 
     @JsonProperty("viewRendererConfiguration")
     public void setViewRendererConfiguration(Map<String, Map<String, String>> viewRendererConfiguration) {
-        ImmutableMap.Builder<String, Map<String, String>> builder = ImmutableMap.builder();
+        final ImmutableMap.Builder<String, Map<String, String>> builder = ImmutableMap.builder();
         for (Map.Entry<String, Map<String, String>> entry : viewRendererConfiguration.entrySet()) {
             builder.put(entry.getKey(), ImmutableMap.copyOf(entry.getValue()));
         }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java
Patch:
@@ -96,7 +96,7 @@ private SessionFactory buildSessionFactory(HibernateBundle<?> bundle,
         return configuration.buildSessionFactory(registry);
     }
 
-    protected void configure(Configuration configuration, ServiceRegistry registry){
+    protected void configure(Configuration configuration, ServiceRegistry registry) {
     }
 
     private void addAnnotatedClasses(Configuration configuration,

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkApplicationListener.java
Patch:
@@ -70,7 +70,7 @@ private static class UnitOfWorkEventListener implements RequestEventListener {
         private Session session;
         private SessionFactory sessionFactory;
 
-        public UnitOfWorkEventListener(Map<Method, UnitOfWork> methodMap,
+        UnitOfWorkEventListener(Map<Method, UnitOfWork> methodMap,
                                        Map<String, SessionFactory> sessionFactories) {
             this.methodMap = methodMap;
             this.sessionFactories = sessionFactories;

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/OptionalContainerFactory.java
Patch:
@@ -19,7 +19,7 @@ public ContainerBuilder<Optional<?>> newContainerBuilderFor(Class<?> type) {
 
     private static class OptionalContainerBuilder implements ContainerBuilder<Optional<?>> {
 
-        Optional<?> optional = Optional.empty();
+        private Optional<?> optional = Optional.empty();
 
         @Override
         public ContainerBuilder<Optional<?>> add(Object it) {

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/JodaDateTimeArgument.java
Patch:
@@ -32,7 +32,7 @@ public void apply(final int position,
             if (calendar.isPresent()) {
                 // We need to make a clone, because Calendar is not thread-safe
                 // and some JDBC drivers mutate it during time calculations
-                Calendar calendarClone = (Calendar) calendar.get().clone();
+                final Calendar calendarClone = (Calendar) calendar.get().clone();
                 statement.setTimestamp(position, new Timestamp(value.getMillis()), calendarClone);
             } else {
                 statement.setTimestamp(position, new Timestamp(value.getMillis()));

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/LocalDateMapper.java
Patch:
@@ -14,7 +14,7 @@
 public class LocalDateMapper implements ResultColumnMapper<LocalDate> {
     @Override
     public LocalDate mapColumn(ResultSet r, String columnLabel, StatementContext ctx) throws SQLException {
-        Timestamp timestamp = r.getTimestamp(columnLabel);
+        final Timestamp timestamp = r.getTimestamp(columnLabel);
         if (timestamp == null) {
             return null;
         }
@@ -23,7 +23,7 @@ public LocalDate mapColumn(ResultSet r, String columnLabel, StatementContext ctx
 
     @Override
     public LocalDate mapColumn(ResultSet r, int columnNumber, StatementContext ctx) throws SQLException {
-        Timestamp timestamp = r.getTimestamp(columnNumber);
+        final Timestamp timestamp = r.getTimestamp(columnNumber);
         if (timestamp == null) {
             return null;
         }

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/OffsetDateTimeArgument.java
Patch:
@@ -32,7 +32,7 @@ public void apply(final int position,
             if (calendar.isPresent()) {
                 // We need to make a clone, because Calendar is not thread-safe
                 // and some JDBC drivers mutate it during time calculations
-                Calendar calendarClone = (Calendar) calendar.get().clone();
+                final Calendar calendarClone = (Calendar) calendar.get().clone();
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()), calendarClone);
             } else {
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()));

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/ZonedDateTimeArgument.java
Patch:
@@ -32,7 +32,7 @@ public void apply(final int position,
             if (calendar.isPresent()) {
                 // We need to make a clone, because Calendar is not thread-safe
                 // and some JDBC drivers mutate it during time calculations
-                Calendar calendarClone = (Calendar) calendar.get().clone();
+                final Calendar calendarClone = (Calendar) calendar.get().clone();
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()), calendarClone);
             } else {
                 statement.setTimestamp(position, new Timestamp(value.toInstant().toEpochMilli()));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/caching/CacheControlledResponseFeature.java
Patch:
@@ -32,7 +32,7 @@ private static class CacheControlledResponseFilter implements ContainerResponseF
         private static final int ONE_YEAR_IN_SECONDS = (int) TimeUnit.DAYS.toSeconds(365);
         private String cacheResponseHeader;
 
-        public CacheControlledResponseFilter(CacheControl control) {
+        CacheControlledResponseFilter(CacheControl control) {
             final javax.ws.rs.core.CacheControl cacheControl = new javax.ws.rs.core.CacheControl();
             cacheControl.setPrivate(control.isPrivate());
             cacheControl.setNoCache(control.noCache());

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/LoggingExceptionMapper.java
Patch:
@@ -44,7 +44,7 @@ protected String formatErrorMessage(long id, E exception) {
     }
 
     protected long logException(E exception) {
-        long id = ThreadLocalRandom.current().nextLong();
+        final long id = ThreadLocalRandom.current().nextLong();
         logException(id, exception);
         return id;
     }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamConverterProvider.java
Patch:
@@ -47,8 +47,7 @@ public String toString(final T value) {
                 };
             }
 
-            final Set<ParamConverterProvider> converterProviders = Providers.getProviders(locator, ParamConverterProvider.class);
-            for (ParamConverterProvider provider : converterProviders) {
+            for (ParamConverterProvider provider : Providers.getProviders(locator, ParamConverterProvider.class)) {
                 final ParamConverter<?> converter = provider.getConverter(ctp.rawClass(), ctp.type(), annotations);
                 if (converter != null) {
                     return new ParamConverter<T>() {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoder.java
Patch:
@@ -40,7 +40,7 @@ public void filter(ClientRequestContext context) throws IOException {
 
     @Override
     public final void aroundWriteTo(WriterInterceptorContext context) throws IOException {
-        String contentEncoding = (String) context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
+        final String contentEncoding = (String) context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
         if ((contentEncoding != null) &&
                 (contentEncoding.equals("gzip") || contentEncoding.equals("x-gzip"))) {
             context.setOutputStream(new GZIPOutputStream(context.getOutputStream()));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/GZipDecoder.java
Patch:
@@ -30,7 +30,7 @@ public Object aroundReadFrom(ReaderInterceptorContext context) throws IOExceptio
             context.getHeaders().add(HttpHeaders.ACCEPT_ENCODING, "gzip");
         }
 
-        String contentEncoding = context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
+        final String contentEncoding = context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
         if (contentEncoding != null &&
                 (contentEncoding.equals("gzip") || contentEncoding.equals("x-gzip"))) {
             context.setInputStream(new GZIPInputStream(context.getInputStream()));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalMessageBodyWriter.java
Patch:
@@ -53,7 +53,7 @@ public void writeTo(Optional<?> entity,
         final Type innerGenericType = (genericType instanceof ParameterizedType) ?
             ((ParameterizedType) genericType).getActualTypeArguments()[0] : entity.get().getClass();
 
-        MessageBodyWriter writer = mbw.get().getMessageBodyWriter(entity.get().getClass(),
+        final MessageBodyWriter writer = mbw.get().getMessageBodyWriter(entity.get().getClass(),
             innerGenericType, annotations, mediaType);
         writer.writeTo(entity.get(), entity.get().getClass(),
             innerGenericType, annotations, mediaType, httpHeaders, entityStream);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/optional/OptionalParamConverterProvider.java
Patch:
@@ -28,7 +28,8 @@ public OptionalParamConverterProvider(final ServiceLocator locator) {
      * {@inheritDoc}
      */
     @Override
-    public <T> ParamConverter<T> getConverter(final Class<T> rawType, final Type genericType, final Annotation[] annotations) {
+    public <T> ParamConverter<T> getConverter(final Class<T> rawType, final Type genericType,
+                                              final Annotation[] annotations) {
         if (Optional.class.equals(rawType)) {
             final List<ClassTypePair> ctps = ReflectionHelper.getTypeArgumentAndClass(genericType);
             final ClassTypePair ctp = (ctps.size() == 1) ? ctps.get(0) : null;
@@ -47,8 +48,7 @@ public String toString(final T value) {
                 };
             }
 
-            final Set<ParamConverterProvider> converterProviders = Providers.getProviders(locator, ParamConverterProvider.class);
-            for (ParamConverterProvider provider : converterProviders) {
+            for (ParamConverterProvider provider : Providers.getProviders(locator, ParamConverterProvider.class)) {
                 final ParamConverter<?> converter = provider.getConverter(ctp.rawClass(), ctp.type(), annotations);
                 if (converter != null) {
                     return new ParamConverter<T>() {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/FlashFactory.java
Patch:
@@ -21,8 +21,7 @@ public Flash<?> provide() {
             return null;
         }
 
-        HttpSession session = request.getSession(!this.doNotCreate);
-
+        final HttpSession session = request.getSession(!this.doNotCreate);
         if (session != null) {
             return new Flash(session);
         }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/SessionFactoryProvider.java
Patch:
@@ -28,7 +28,7 @@ public SessionFactoryProvider(final MultivaluedParameterExtractorProvider extrac
     protected Factory<?> createValueFactory(final Parameter parameter) {
         final Class<?> classType = parameter.getRawType();
 
-        Session sessionAnnotation = parameter.getAnnotation(Session.class);
+        final Session sessionAnnotation = parameter.getAnnotation(Session.class);
         if (sessionAnnotation == null) {
             return null;
         }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/JerseyViolationExceptionMapper.java
Patch:
@@ -25,7 +25,7 @@ public String apply(ConstraintViolation<?> constraintViolation) {
                     }
                 }).toList();
 
-        int status = ConstraintMessage.determineStatus(violations, invocable);
+        final int status = ConstraintMessage.determineStatus(violations, invocable);
         return Response.status(status)
                 .entity(new ValidationErrorMessage(errors))
                 .build();

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ParamValidatorUnwrapper.java
Patch:
@@ -22,7 +22,8 @@ public Object handleValidatedValue(final AbstractParam<?> abstractParam) {
 
     @Override
     public Type getValidatedValueType(final Type type) {
-        ResolvedType resolvedType = resolver.resolve(type);
-        return resolvedType.typeParametersFor(AbstractParam.class).get(0).getErasedType();
+        return resolver.resolve(type)
+                .typeParametersFor(AbstractParam.class).get(0)
+                .getErasedType();
     }
 }

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/Jetty93InstrumentedConnectionFactory.java
Patch:
@@ -18,7 +18,7 @@ class Jetty93InstrumentedConnectionFactory extends ContainerLifeCycle implements
     private final ConnectionFactory connectionFactory;
     private final Timer timer;
 
-    public Jetty93InstrumentedConnectionFactory(ConnectionFactory connectionFactory, Timer timer) {
+    Jetty93InstrumentedConnectionFactory(ConnectionFactory connectionFactory, Timer timer) {
         this.connectionFactory = connectionFactory;
         this.timer = timer;
         addBean(connectionFactory);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/BootstrapLogging.java
Patch:
@@ -56,7 +56,7 @@ public static void bootstrap(Level level) {
             appender.addFilter(filter);
             appender.setContext(root.getLoggerContext());
 
-            LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
+            final LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
             layoutEncoder.setLayout(formatter);
             appender.setEncoder(layoutEncoder);
             appender.start();

File: dropwizard-logging/src/main/java/io/dropwizard/logging/ConsoleAppenderFactory.java
Patch:
@@ -109,7 +109,7 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         appender.setContext(context);
         appender.setTarget(target.get());
 
-        LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
+        final LayoutWrappingEncoder<ILoggingEvent> layoutEncoder = new LayoutWrappingEncoder<>();
         layoutEncoder.setLayout(layout == null ? buildLayout(context, timeZone) : layout);
         appender.setEncoder(layoutEncoder);
 

File: dropwizard-logging/src/main/java/io/dropwizard/logging/DefaultLoggingFactory.java
Patch:
@@ -20,9 +20,9 @@
 import io.dropwizard.jackson.Jackson;
 
 import javax.management.InstanceAlreadyExistsException;
+import javax.management.MalformedObjectNameException;
 import javax.management.MBeanRegistrationException;
 import javax.management.MBeanServer;
-import javax.management.MalformedObjectNameException;
 import javax.management.NotCompliantMBeanException;
 import javax.management.ObjectName;
 import javax.validation.Valid;

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingUtil.java
Patch:
@@ -38,7 +38,7 @@ private LoggingUtil() {
     public static LoggerContext getLoggerContext() {
         final long startTime = System.nanoTime();
         while (true) {
-            ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory();
+            final ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory();
             if (iLoggerFactory instanceof LoggerContext) {
                 return (LoggerContext) iLoggerFactory;
             }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -204,7 +204,9 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         final SyslogAppender appender = new SyslogAppender();
         appender.setName("syslog-appender");
         appender.setContext(context);
-        appender.setSuffixPattern(logFormat.replaceAll(LOG_TOKEN_PID, pid).replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
+        appender.setSuffixPattern(logFormat
+                .replaceAll(LOG_TOKEN_PID, pid)
+                .replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
         appender.setSyslogHost(host);
         appender.setPort(port);
         appender.setFacility(facility.toString().toLowerCase(Locale.ENGLISH));

File: dropwizard-metrics-ganglia/src/main/java/io/dropwizard/metrics/ganglia/GangliaReporterFactory.java
Patch:
@@ -188,7 +188,7 @@ public void setSpoof(String spoof) {
     @Override
     public ScheduledReporter build(MetricRegistry registry) {
         try {
-            GMetric ganglia = new GMetric(host,
+            final GMetric ganglia = new GMetric(host,
                                           port,
                                           mode,
                                           ttl,

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/CsvReporterFactory.java
Patch:
@@ -54,10 +54,9 @@ public void setFile(File file) {
 
     @Override
     public ScheduledReporter build(MetricRegistry registry) {
-        boolean creation = file.mkdirs();
+        final boolean creation = file.mkdirs();
         if (!creation && !file.exists()) {
-            String msg = "Failed to create" + file.getAbsolutePath();
-            throw new RuntimeException(msg);
+            throw new RuntimeException("Failed to create" + file.getAbsolutePath());
         }
 
         return CsvReporter.forRegistry(registry)

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -8,8 +8,9 @@
 
 public abstract class MigrationsBundle<T extends Configuration> implements Bundle, DatabaseConfiguration<T> {
     @Override
+    @SuppressWarnings("unchecked")
     public final void initialize(Bootstrap<?> bootstrap) {
-        final Class<T> klass = (Class<T>)bootstrap.getApplication().getConfigurationClass();
+        final Class<T> klass = (Class<T>) bootstrap.getApplication().getConfigurationClass();
         bootstrap.addCommand(new DbCommand<>(this, klass));
     }
 

File: dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/LogConfigurationTask.java
Patch:
@@ -53,8 +53,8 @@ public LogConfigurationTask(LoggerContext loggerContext) {
 
     @Override
     public void execute(ImmutableMultimap<String, String> parameters, PrintWriter output) throws Exception {
-        List<String> loggerNames = getLoggerNames(parameters);
-        Level loggerLevel = getLoggerLevel(parameters);
+        final List<String> loggerNames = getLoggerNames(parameters);
+        final Level loggerLevel = getLoggerLevel(parameters);
 
         for (String loggerName : loggerNames) {
             loggerContext.getLogger(loggerName).setLevel(loggerLevel);
@@ -68,7 +68,7 @@ private List<String> getLoggerNames(ImmutableMultimap<String, String> parameters
     }
 
     private Level getLoggerLevel(ImmutableMultimap<String, String> parameters) {
-        List<String> loggerLevels = parameters.get("level").asList();
+        final List<String> loggerLevels = parameters.get("level").asList();
         return loggerLevels.isEmpty() ? null : Level.valueOf(loggerLevels.get(0));
     }
 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -203,7 +203,7 @@ public ConfigurationFactory<C> create(Class<C> klass, Validator validator,
             application.initialize(bootstrap);
             final ServerCommand<C> command = new ServerCommand<>(application);
 
-            ImmutableMap.Builder<String, Object> file = ImmutableMap.builder();
+            final ImmutableMap.Builder<String, Object> file = ImmutableMap.builder();
             if (!Strings.isNullOrEmpty(configPath)) {
                 file.put("file", configPath);
             }

File: dropwizard-util/src/test/java/io/dropwizard/util/DurationTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.util;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 

File: dropwizard-validation/src/main/java/io/dropwizard/validation/ConstraintViolations.java
Patch:
@@ -37,8 +37,8 @@ public static <T> String validationMethodFormatted(ConstraintViolation<T> v) {
             }
         }
 
-        String usefulNodes = DOT_JOINER.join(nodes.subList(paramIndex + 1, nodes.size() - 1));
-        String msg = usefulNodes + (v.getMessage().startsWith(".") ? "" : " ") + v.getMessage();
+        final String usefulNodes = DOT_JOINER.join(nodes.subList(paramIndex + 1, nodes.size() - 1));
+        final String msg = usefulNodes + (v.getMessage().startsWith(".") ? "" : " ") + v.getMessage();
         return msg.trim();
     }
 

File: dropwizard-validation/src/main/java/io/dropwizard/validation/PortRange.java
Patch:
@@ -6,7 +6,9 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.ElementType.*;
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**

File: dropwizard-validation/src/main/java/io/dropwizard/validation/ValidationMethod.java
Patch:
@@ -6,7 +6,9 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.ElementType.*;
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**

File: dropwizard-validation/src/main/java/io/dropwizard/validation/valuehandling/GuavaOptionalValidatedValueUnwrapper.java
Patch:
@@ -23,7 +23,7 @@ public Object handleValidatedValue(final Optional<?> optional) {
 
     @Override
     public Type getValidatedValueType(final Type type) {
-        ResolvedType resolvedType = resolver.resolve(type);
+        final ResolvedType resolvedType = resolver.resolve(type);
         return resolvedType.typeParametersFor(Optional.class).get(0).getErasedType();
     }
 }

File: dropwizard-validation/src/main/java/io/dropwizard/validation/valuehandling/OptionalValidatedValueUnwrapper.java
Patch:
@@ -23,7 +23,7 @@ public Object handleValidatedValue(final Optional<?> optional) {
 
     @Override
     public Type getValidatedValueType(final Type type) {
-        ResolvedType resolvedType = resolver.resolve(type);
+        final ResolvedType resolvedType = resolver.resolve(type);
         return resolvedType.typeParametersFor(Optional.class).get(0).getErasedType();
     }
 }

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -106,9 +106,9 @@ public Map<String, Map<String, String>> getViewConfiguration(T configuration) {
 
     @Override
     public void run(T configuration, Environment environment) throws Exception {
-        Map<String, Map<String, String>> options = getViewConfiguration(configuration);
+        final Map<String, Map<String, String>> options = getViewConfiguration(configuration);
         for (ViewRenderer viewRenderer : viewRenderers) {
-            Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
+            final Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
             viewRenderer.configure(firstNonNull(viewOptions, Collections.<String, String>emptyMap()));
         }
         environment.jersey().register(new ViewMessageBodyWriter(environment.metrics(), viewRenderers));

File: dropwizard-views-mustache/src/main/java/io/dropwizard/views/mustache/PerClassMustacheResolver.java
Patch:
@@ -10,7 +10,7 @@
 import java.nio.charset.StandardCharsets;
 
 /**
- * @{link MustacheResolver} implementation that resolves mustache
+ * {@link MustacheResolver} implementation that resolves mustache
  * files from the classpath relatively from a provided class.
  */
 class PerClassMustacheResolver implements MustacheResolver {

File: dropwizard-auth/src/main/java/io/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -3,14 +3,15 @@
 import com.codahale.metrics.Meter;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.Timer;
-import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheBuilderSpec;
 import com.google.common.cache.CacheStats;
 import com.google.common.collect.Sets;
 import java.security.Principal;
+import java.util.Optional;
+
 import static com.codahale.metrics.MetricRegistry.name;
 
 /**

File: dropwizard-auth/src/main/java/io/dropwizard/auth/basic/BasicCredentialAuthFilter.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.auth.basic;
 
-import com.google.common.base.Optional;
 import com.google.common.io.BaseEncoding;
 import io.dropwizard.auth.AuthenticationException;
 import io.dropwizard.auth.AuthFilter;
@@ -17,6 +16,7 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.security.Principal;
+import java.util.Optional;
 
 @Priority(Priorities.AUTHENTICATION)
 public class BasicCredentialAuthFilter<P extends Principal> extends AuthFilter<BasicCredentials, P> {

File: dropwizard-auth/src/main/java/io/dropwizard/auth/oauth/OAuthCredentialAuthFilter.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.auth.oauth;
 
-import com.google.common.base.Optional;
 import io.dropwizard.auth.AuthenticationException;
 import io.dropwizard.auth.AuthFilter;
 import io.dropwizard.auth.Authenticator;
@@ -16,6 +15,7 @@
 import javax.ws.rs.core.SecurityContext;
 import java.io.IOException;
 import java.security.Principal;
+import java.util.Optional;
 
 @Priority(Priorities.AUTHENTICATION)
 public class OAuthCredentialAuthFilter<P extends Principal> extends AuthFilter<String, P> {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/chained/ChainedAuthProviderTest.java
Patch:
@@ -21,6 +21,7 @@
 public class ChainedAuthProviderTest extends AuthBaseTest<ChainedAuthProviderTest.ChainedAuthTestResourceConfig>{
     private static final String BEARER_USER = "A12B3C4D";
     public static class ChainedAuthTestResourceConfig extends DropwizardResourceConfig {
+        @SuppressWarnings("unchecked")
         public ChainedAuthTestResourceConfig() {
             super(true, new MetricRegistry());
 

File: dropwizard-core/src/test/java/io/dropwizard/setup/BootstrapTest.java
Patch:
@@ -8,10 +8,10 @@
 import io.dropwizard.Configuration;
 import io.dropwizard.configuration.DefaultConfigurationFactoryFactory;
 import io.dropwizard.configuration.FileConfigurationSourceProvider;
-
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.validation.NonEmptyStringParamUnwrapper;
 import io.dropwizard.jersey.validation.ParamValidatorUnwrapper;
+import io.dropwizard.validation.valuehandling.GuavaOptionalValidatedValueUnwrapper;
 import io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper;
 import org.hibernate.validator.HibernateValidator;
 import org.hibernate.validator.internal.engine.ValidatorFactoryImpl;
@@ -103,7 +103,8 @@ public void defaultsToDefaultValidatorFactory() throws Exception {
         // https://hibernate.atlassian.net/browse/HV-904
         assertThat(validatorFactory.getValidatedValueHandlers())
                 .extractingResultOf("getClass")
-                .containsSubsequence(OptionalValidatedValueUnwrapper.class,
+                .containsSubsequence(GuavaOptionalValidatedValueUnwrapper.class,
+                                     OptionalValidatedValueUnwrapper.class,
                                      NonEmptyStringParamUnwrapper.class,
                                      ParamValidatorUnwrapper.class);
     }

File: dropwizard-example/src/main/java/com/example/helloworld/auth/ExampleAuthenticator.java
Patch:
@@ -1,17 +1,18 @@
 package com.example.helloworld.auth;
 
 import com.example.helloworld.core.User;
-import com.google.common.base.Optional;
 import io.dropwizard.auth.AuthenticationException;
 import io.dropwizard.auth.Authenticator;
 import io.dropwizard.auth.basic.BasicCredentials;
 
+import java.util.Optional;
+
 public class ExampleAuthenticator implements Authenticator<BasicCredentials, User> {
     @Override
     public Optional<User> authenticate(BasicCredentials credentials) throws AuthenticationException {
         if ("secret".equals(credentials.getPassword())) {
             return Optional.of(new User(credentials.getUsername()));
         }
-        return Optional.absent();
+        return Optional.empty();
     }
 }

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/DBIHealthCheck.java
Patch:
@@ -6,20 +6,21 @@
 import io.dropwizard.util.Duration;
 import org.skife.jdbi.v2.DBI;
 import org.skife.jdbi.v2.Handle;
+
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 
 public class DBIHealthCheck extends HealthCheck {
     private final DBI dbi;
     private final String validationQuery;
     private final TimeBoundHealthCheck timeBoundHealthCheck;
-    
+
     public DBIHealthCheck(ExecutorService executorService, Duration duration, DBI dbi, String validationQuery) {
         this.dbi = dbi;
         this.validationQuery = validationQuery;
         this.timeBoundHealthCheck = new TimeBoundHealthCheck(executorService, duration);
     }
-    
+
     public DBIHealthCheck(DBI dbi, String validationQuery) {
         this(MoreExecutors.newDirectExecutorService(), Duration.seconds(0), dbi, validationQuery);
     }

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/args/JodaDateTimeArgument.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jdbi.args;
 
-import com.google.common.base.Optional;
 import org.joda.time.DateTime;
 import org.skife.jdbi.v2.StatementContext;
 import org.skife.jdbi.v2.tweak.Argument;
@@ -10,6 +9,7 @@
 import java.sql.Timestamp;
 import java.sql.Types;
 import java.util.Calendar;
+import java.util.Optional;
 
 /**
  * An {@link Argument} for Joda {@link DateTime} objects.

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/jersey/LoggingDBIExceptionMapperTest.java
Patch:
@@ -10,7 +10,9 @@
 
 import java.sql.SQLException;
 
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
 
 public class LoggingDBIExceptionMapperTest {
 

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/DBIClient.java
Patch:
@@ -1,7 +1,6 @@
 package io.dropwizard.jdbi.timestamps;
 
 import com.codahale.metrics.MetricRegistry;
-import com.google.common.base.Optional;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jdbi.DBIFactory;
@@ -12,6 +11,7 @@
 import org.skife.jdbi.v2.DBI;
 
 import java.util.List;
+import java.util.Optional;
 import java.util.TimeZone;
 
 /**

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/JodaDateTimeSqlTimestampTest.java
Patch:
@@ -25,11 +25,10 @@
  * Test for handling translation between DateTime to SQL TIMESTAMP
  * in a different time zone
  */
-public class DateTimeSqlTimestampTest {
+public class JodaDateTimeSqlTimestampTest {
 
     private static final DateTimeFormatter ISO_FMT = ISODateTimeFormat.dateTimeNoMillis();
 
-    private static TimeZone timeZone;
     private static TemporaryFolder temporaryFolder;
     private static DatabaseInTimeZone databaseInTimeZone;
     private static DateTimeZone dbTimeZone;
@@ -41,7 +40,7 @@ public class DateTimeSqlTimestampTest {
         boolean done = false;
         while (!done) {
             try {
-                timeZone = getRandomTimeZone();
+                final TimeZone timeZone = getRandomTimeZone();
                 dbTimeZone = DateTimeZone.forTimeZone(timeZone);
                 temporaryFolder = new TemporaryFolder();
                 databaseInTimeZone = new DatabaseInTimeZone(temporaryFolder, timeZone);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/MyMessage.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.jersey.guava;
+package io.dropwizard.jersey;
 
 public class MyMessage {
     private final String message;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/MyMessageParamConverterProvider.java
Patch:
@@ -1,4 +1,4 @@
-package io.dropwizard.jersey.guava;
+package io.dropwizard.jersey;
 
 import javax.ws.rs.ext.ParamConverter;
 import javax.ws.rs.ext.ParamConverterProvider;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalCookieParamResourceTest.java
Patch:
@@ -3,6 +3,8 @@
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import io.dropwizard.jersey.MyMessage;
+import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalFormParamResourceTest.java
Patch:
@@ -3,6 +3,8 @@
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import io.dropwizard.jersey.MyMessage;
+import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.internal.util.collection.MultivaluedStringMap;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalHeaderParamResourceTest.java
Patch:
@@ -3,6 +3,8 @@
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import io.dropwizard.jersey.MyMessage;
+import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamResourceTest.java
Patch:
@@ -3,6 +3,8 @@
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import io.dropwizard.jersey.MyMessage;
+import io.dropwizard.jersey.MyMessageParamConverterProvider;
 import io.dropwizard.jersey.params.UUIDParam;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;

File: dropwizard-validation/src/main/java/io/dropwizard/validation/BaseValidator.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.validation;
 
+import io.dropwizard.validation.valuehandling.GuavaOptionalValidatedValueUnwrapper;
 import io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper;
 import org.hibernate.validator.HibernateValidator;
 import org.hibernate.validator.HibernateValidatorConfiguration;
@@ -26,6 +27,7 @@ public static HibernateValidatorConfiguration newConfiguration() {
         return Validation
             .byProvider(HibernateValidator.class)
             .configure()
+            .addValidatedValueHandler(new GuavaOptionalValidatedValueUnwrapper())
             .addValidatedValueHandler(new OptionalValidatedValueUnwrapper());
     }
 }

File: dropwizard-core/src/main/java/io/dropwizard/Application.java
Patch:
@@ -87,11 +87,9 @@ public void run(String... arguments) throws Exception {
      *
      * @param bootstrap the bootstrap instance
      */
-    protected void addDefaultCommands(Bootstrap<T> bootstrap)
-    {
+    protected void addDefaultCommands(Bootstrap<T> bootstrap) {
         bootstrap.addCommand(new ServerCommand<>(this));
         bootstrap.addCommand(new CheckCommand<>(this));
     }
 
-
 }

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * The configuration class used by {@link HttpClientBuilder}.
  *
- * @see <a href="http://dropwizard.io/manual/configuration.html#httpclient">Http Client Configuration</a>
+ * @see <a href="http://dropwizard.io/0.9.1/docs/manual/configuration.html#httpclient">Http Client Configuration</a>
  */
 public class HttpClientConfiguration {
     @NotNull

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientConfiguration.java
Patch:
@@ -12,7 +12,7 @@
  * {@link HttpClientConfiguration}.
  *
  * @see HttpClientConfiguration
- * @see <a href="http://dropwizard.io/manual/configuration.html#jerseyclient">Jersey Client Configuration</a>
+ * @see <a href="http://dropwizard.io/0.9.1/docs/manual/configuration.html#jerseyclient">Jersey Client Configuration</a>
  */
 public class JerseyClientConfiguration extends HttpClientConfiguration {
     @Min(1)

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * The configuration class used by {@link HttpClientBuilder}.
  *
- * @see <a href="http://dropwizard.io/manual/configuration.html#httpclient">Http Client Configuration</a>
+ * @see <a href="http://dropwizard.io/0.9.1/docs/manual/configuration.html#httpclient">Http Client Configuration</a>
  */
 public class HttpClientConfiguration {
     @NotNull

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientConfiguration.java
Patch:
@@ -12,7 +12,7 @@
  * {@link HttpClientConfiguration}.
  *
  * @see HttpClientConfiguration
- * @see <a href="http://dropwizard.io/manual/configuration.html#jerseyclient">Jersey Client Configuration</a>
+ * @see <a href="http://dropwizard.io/0.9.1/docs/manual/configuration.html#jerseyclient">Jersey Client Configuration</a>
  */
 public class JerseyClientConfiguration extends HttpClientConfiguration {
     @Min(1)

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingUtil.java
Patch:
@@ -55,7 +55,7 @@ public static LoggerContext getLoggerContext() {
 
     /**
      * Gets the root j.u.l.Logger and removes all registered handlers
-     * then redirects all active j.u.l. to SL4J
+     * then redirects all active j.u.l. to SLF4J
      * <p/>
      * N.B. This should only happen once, hence the flag and locking
      */

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingUtil.java
Patch:
@@ -55,7 +55,7 @@ public static LoggerContext getLoggerContext() {
 
     /**
      * Gets the root j.u.l.Logger and removes all registered handlers
-     * then redirects all active j.u.l. to SL4J
+     * then redirects all active j.u.l. to SLF4J
      * <p/>
      * N.B. This should only happen once, hence the flag and locking
      */

File: dropwizard-core/src/main/java/io/dropwizard/cli/Cli.java
Patch:
@@ -72,12 +72,10 @@ public boolean run(String... arguments) throws Exception {
             }
             return true;
         } catch (ArgumentParserException e) {
-            // TODO: 5/25/13 <coda> -- make ArgumentParser#handleError not depend on System.err
             stdErr.println(e.getMessage());
             e.getParser().printHelp(stdErr);
             return false;
         } catch (ConfigurationException e) {
-            // TODO: 7/26/13 <ntelford> -- as above, this probably shouldn't depend on System.err
             stdErr.println(e.getMessage());
             return false;
         }

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -56,8 +56,6 @@
 import java.util.concurrent.BlockingQueue;
 import java.util.regex.Pattern;
 
-// TODO: 5/15/13 <coda> -- add tests for AbstractServerFactory
-
 /**
  * A base class for {@link ServerFactory} implementations.
  * <p/>

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.List;
 import java.util.Map;
 
-// TODO: 5/15/13 <coda> -- add tests for DefaultServerFactory
-
 /**
  * The default implementation of {@link ServerFactory}, which allows for multiple sets of
  * application and admin connectors, all running on separate ports. Admin connectors use a separate

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -58,9 +58,9 @@ public final void run(T configuration, Environment environment) throws Exception
         environment.healthChecks().register(name(),
                                             new SessionFactoryHealthCheck(
                                                     environment.getHealthCheckExecutorService(),
-                                                    dbConfig.getHealthCheckValidationTimeout().or(Duration.seconds(5)),
+                                                    dbConfig.getValidationQueryTimeout().or(Duration.seconds(5)),
                                                     sessionFactory,
-                                                    dbConfig.getHealthCheckValidationQuery()));
+                                                    dbConfig.getValidationQuery()));
     }
 
     private UnitOfWorkApplicationListener registerUnitOfWorkListerIfAbsent(Environment environment) {

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/DBIFactory.java
Patch:
@@ -73,12 +73,12 @@ public DBI build(Environment environment,
                      PooledDataSourceFactory configuration,
                      ManagedDataSource dataSource,
                      String name) {
-        final String validationQuery = configuration.getHealthCheckValidationQuery();
+        final String validationQuery = configuration.getValidationQuery();
         final DBI dbi = new DBI(dataSource);
         environment.lifecycle().manage(dataSource);
         environment.healthChecks().register(name, new DBIHealthCheck(
                 environment.getHealthCheckExecutorService(),
-                configuration.getHealthCheckValidationTimeout().or(Duration.seconds(5)),
+                configuration.getValidationQueryTimeout().or(Duration.seconds(5)),
                 dbi,
                 validationQuery));
         dbi.setSQLLog(new LogbackLog(LOGGER, Level.TRACE));

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -7,13 +7,13 @@
 import com.google.common.collect.Maps;
 import com.google.common.io.Resources;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.validation.BaseValidator;
 import org.assertj.core.data.MapEntry;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.validation.constraints.NotNull;
 import javax.validation.constraints.Pattern;
@@ -110,7 +110,7 @@ static class NonInsatiableExample {
         }
     }
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
     private final ConfigurationFactory<Example> factory =
             new ConfigurationFactory<>(Example.class, validator, Jackson.newObjectMapper(), "dw");
     private File malformedFile;

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationValidationExceptionTest.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.configuration;
 
+import io.dropwizard.validation.BaseValidator;
 import org.junit.Before;
 import org.junit.Test;
 
 import javax.validation.ConstraintViolation;
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.validation.constraints.NotNull;
 import java.util.Locale;
@@ -26,7 +26,7 @@ private static class Example {
     public void setUp() throws Exception {
         assumeThat(Locale.getDefault().getLanguage(), is("en"));
 
-        final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+        final Validator validator = BaseValidator.newValidator();
         final Set<ConstraintViolation<Example>> violations = validator.validate(new Example());
         this.e = new ConfigurationValidationException("config.yml", violations);
     }

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -17,14 +17,14 @@
 import io.dropwizard.logging.SyslogAppenderFactory;
 import io.dropwizard.servlets.tasks.Task;
 import io.dropwizard.setup.Environment;
+import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.server.AbstractNetworkConnector;
 import org.eclipse.jetty.server.Server;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
@@ -44,7 +44,7 @@ public class SimpleServerFactoryTest {
 
     private SimpleServerFactory http;
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();
-    private Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private Validator validator = BaseValidator.newValidator();
 
     @Before
     public void setUp() throws Exception {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/GzipFilterFactoryTest.java
Patch:
@@ -5,10 +5,10 @@
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.util.Size;
+import io.dropwizard.validation.BaseValidator;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 import java.util.regex.Pattern;
 import java.util.zip.Deflater;
@@ -21,8 +21,7 @@ public class GzipFilterFactoryTest {
     @Before
     public void setUp() throws Exception {
         this.gzip = new ConfigurationFactory<>(GzipFilterFactory.class,
-                Validation.buildDefaultValidatorFactory()
-                        .getValidator(),
+                BaseValidator.newValidator(),
                 Jackson.newObjectMapper(), "dw")
                 .build(new File(Resources.getResource("yaml/gzip.yml").toURI()));
     }

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -12,6 +12,7 @@
 import io.dropwizard.logging.SyslogAppenderFactory;
 import io.dropwizard.util.Duration;
 import io.dropwizard.util.Size;
+import io.dropwizard.validation.BaseValidator;
 import org.eclipse.jetty.io.ArrayByteBufferPool;
 import org.eclipse.jetty.io.ByteBufferPool;
 import org.eclipse.jetty.server.*;
@@ -21,7 +22,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import java.io.File;
 
@@ -31,7 +31,7 @@
 public class HttpConnectorFactoryTest {
 
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
 
     @Before
     public void setUp() throws Exception {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpsConnectorFactoryTest.java
Patch:
@@ -9,9 +9,9 @@
 import java.util.Set;
 
 import javax.validation.ConstraintViolation;
-import javax.validation.Validation;
 import javax.validation.Validator;
 
+import io.dropwizard.validation.BaseValidator;
 import org.apache.commons.lang3.SystemUtils;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
 import org.junit.Test;
@@ -27,7 +27,7 @@
 
 public class HttpsConnectorFactoryTest {
     private static final String WINDOWS_MY_KEYSTORE_NAME = "Windows-MY";
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
 
     @Test
     public void isDiscoverable() throws Exception {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/RequestLogFactoryTest.java
Patch:
@@ -7,10 +7,10 @@
 import io.dropwizard.logging.ConsoleAppenderFactory;
 import io.dropwizard.logging.FileAppenderFactory;
 import io.dropwizard.logging.SyslogAppenderFactory;
+import io.dropwizard.validation.BaseValidator;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 import java.util.TimeZone;
 
@@ -26,8 +26,7 @@ public void setUp() throws Exception {
                                                            FileAppenderFactory.class,
                                                            SyslogAppenderFactory.class);
         this.requestLog = new ConfigurationFactory<>(RequestLogFactory.class,
-                                                     Validation.buildDefaultValidatorFactory()
-                                                                       .getValidator(),
+                                                     BaseValidator.newValidator(),
                                                      objectMapper, "dw")
                 .build(new File(Resources.getResource("yaml/requestLog.yml").toURI()));
     }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DefaultLoggingFactoryTest.java
Patch:
@@ -13,6 +13,7 @@
 import io.dropwizard.configuration.FileConfigurationSourceProvider;
 import io.dropwizard.configuration.SubstitutingSourceProvider;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.validation.BaseValidator;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.text.StrSubstitutor;
 import org.assertj.core.data.MapEntry;
@@ -22,7 +23,6 @@
 import org.junit.rules.TemporaryFolder;
 import org.slf4j.LoggerFactory;
 
-import javax.validation.Validation;
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -31,7 +31,7 @@ public class DefaultLoggingFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();
     private final ConfigurationFactory<DefaultLoggingFactory> factory = new ConfigurationFactory<>(
             DefaultLoggingFactory.class,
-            Validation.buildDefaultValidatorFactory().getValidator(),
+            BaseValidator.newValidator(),
             objectMapper, "dw");
 
     private DefaultLoggingFactory config;

File: dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
Patch:
@@ -12,13 +12,13 @@
 import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.util.Size;
+import io.dropwizard.validation.BaseValidator;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 import org.slf4j.LoggerFactory;
 import com.google.common.collect.ImmutableList;
 import io.dropwizard.validation.ConstraintViolations;
-import javax.validation.Validation;
 import javax.validation.Validator;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -29,7 +29,7 @@ public class FileAppenderFactoryTest {
         BootstrapLogging.bootstrap();
     }
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
 
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/CsvReporterFactoryTest.java
Patch:
@@ -7,10 +7,10 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
+import io.dropwizard.validation.BaseValidator;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -19,7 +19,7 @@ public class CsvReporterFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();
     private final ConfigurationFactory<MetricsFactory> factory =
             new ConfigurationFactory<>(MetricsFactory.class,
-                                       Validation.buildDefaultValidatorFactory().getValidator(),
+                                       BaseValidator.newValidator(),
                                        objectMapper, "dw");
 
     @Before

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -6,6 +6,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.util.Duration;
+import io.dropwizard.validation.BaseValidator;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -22,7 +23,7 @@ public class MetricsFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();
     private final ConfigurationFactory<MetricsFactory> factory =
             new ConfigurationFactory<>(MetricsFactory.class,
-                                       Validation.buildDefaultValidatorFactory().getValidator(),
+                                       BaseValidator.newValidator(),
                                        objectMapper, "dw");
     private MetricsFactory config;
 

File: dropwizard-validation/src/test/java/io/dropwizard/validation/ConstraintViolationsTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import javax.validation.ConstraintViolation;
 import javax.validation.Valid;
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.validation.constraints.Max;
 import javax.validation.constraints.Min;
@@ -17,7 +16,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 public class ConstraintViolationsTest {
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
     private final ExecutableValidator execValidator = validator.forExecutables();
 
     @Max(3)

File: dropwizard-validation/src/test/java/io/dropwizard/validation/DurationValidatorTest.java
Patch:
@@ -4,7 +4,6 @@
 import io.dropwizard.util.Duration;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
@@ -34,7 +33,7 @@ public void setOutOfRange(Duration outOfRange) {
         }
     }
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
 
     @Test
     public void returnsASetOfErrorsForAnObject() throws Exception {

File: dropwizard-validation/src/test/java/io/dropwizard/validation/MethodValidatorTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.Test;
 
 import javax.validation.Valid;
-import javax.validation.Validation;
 import javax.validation.Validator;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -33,7 +32,7 @@ public boolean isTrue() {
         }
     }
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
 
     @Test
     public void complainsAboutMethodsWhichReturnFalse() throws Exception {

File: dropwizard-validation/src/test/java/io/dropwizard/validation/OneOfValidatorTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import java.util.Locale;
 
@@ -23,7 +22,7 @@ public static class Example {
         private String whitespaceInsensitive = "one";
     }
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
 
     @Test
     public void allowsExactElements() throws Exception {

File: dropwizard-validation/src/test/java/io/dropwizard/validation/PortRangeValidatorTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import java.util.Locale;
 
@@ -22,7 +21,7 @@ public static class Example {
     }
 
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
     private final Example example = new Example();
 
     @Before

File: dropwizard-validation/src/test/java/io/dropwizard/validation/SizeValidatorTest.java
Patch:
@@ -4,7 +4,6 @@
 import io.dropwizard.util.SizeUnit;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import java.util.Locale;
 
@@ -33,7 +32,7 @@ public void setOutOfRange(Size outOfRange) {
         }
     }
 
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = BaseValidator.newValidator();
 
     @Test
     public void returnsASetOfErrorsForAnObject() throws Exception {

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationFactory.java
Patch:
@@ -128,7 +128,8 @@ public T build(File file) throws IOException, ConfigurationException {
      */
     public T build() throws IOException, ConfigurationException {
         try {
-            return build(mapper.valueToTree(klass.newInstance()), "default configuration");
+            final JsonNode node = mapper.valueToTree(klass.newInstance());
+            return build(node, "default configuration");
         } catch (InstantiationException | IllegalAccessException e) {
             throw new IllegalArgumentException("Unable create an instance " +
                     "of the configuration class: '" + klass.getCanonicalName() + "'", e);

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/GuavaExtrasModuleTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.dropwizard.jackson;
 
-import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.guava.GuavaModule;
 import com.google.common.base.Optional;
@@ -34,13 +33,13 @@ public void canDeserializeCacheBuilderSpecs() throws Exception {
 
     @Test
     public void canDeserializeAbsentOptions() throws Exception {
-        assertThat(mapper.readValue("null", new TypeReference<Optional<String>>() {}))
+        assertThat(mapper.readValue("null", Optional.class))
                 .isEqualTo(Optional.absent());
     }
 
     @Test
     public void canDeserializePresentOptions() throws Exception {
-        assertThat(mapper.readValue("\"woo\"", new TypeReference<Optional<String>>() {}))
+        assertThat(mapper.readValue("\"woo\"", Optional.class))
                 .isEqualTo(Optional.of("woo"));
     }
 }

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -9,6 +9,7 @@
 import io.dropwizard.jersey.gzip.ConfiguredGZipEncoder;
 import io.dropwizard.jersey.gzip.GZipDecoder;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.setup.Environment;
 import org.apache.http.client.CredentialsProvider;
@@ -21,7 +22,6 @@
 import org.glassfish.jersey.client.spi.Connector;
 import org.glassfish.jersey.client.spi.ConnectorProvider;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.ws.rs.client.Client;
 import javax.ws.rs.client.ClientBuilder;
@@ -58,7 +58,7 @@ public class JerseyClientBuilder {
     private JerseyClientConfiguration configuration = new JerseyClientConfiguration();
 
     private HttpClientBuilder apacheHttpClientBuilder;
-    private Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private Validator validator = Validators.newValidator();
     private Environment environment;
     private ObjectMapper objectMapper;
     private ExecutorService executorService;

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -9,6 +9,7 @@
 import io.dropwizard.jersey.gzip.ConfiguredGZipEncoder;
 import io.dropwizard.jersey.gzip.GZipDecoder;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.setup.ExecutorServiceBuilder;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.setup.Environment;
@@ -72,7 +73,7 @@ public class JerseyClientBuilderTest {
     private final Environment environment = mock(Environment.class);
     private final ExecutorService executorService = Executors.newSingleThreadExecutor();
     private final ObjectMapper objectMapper = mock(ObjectMapper.class);
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = Validators.newValidator();
     private final HttpClientBuilder apacheHttpClientBuilder = mock(HttpClientBuilder.class);
 
     @Before

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientConfigurationTest.java
Patch:
@@ -3,9 +3,9 @@
 import com.google.common.io.Resources;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -15,9 +15,8 @@ public class JerseyClientConfigurationTest {
     @Test
     public void testBasicJerseyClient() throws Exception {
         final JerseyClientConfiguration configuration = new ConfigurationFactory<>(JerseyClientConfiguration.class,
-                Validation.buildDefaultValidatorFactory().getValidator(), Jackson.newObjectMapper(), "dw")
+                Validators.newValidator(), Jackson.newObjectMapper(), "dw")
                 .build(new File(Resources.getResource("yaml/jersey-client.yml").toURI()));
-
         assertThat(configuration.getMinThreads()).isEqualTo(8);
         assertThat(configuration.getMaxThreads()).isEqualTo(64);
         assertThat(configuration.getWorkQueueSize()).isEqualTo(16);

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/HttpClientConfigurationTest.java
Patch:
@@ -8,9 +8,9 @@
 import io.dropwizard.configuration.ConfigurationParsingException;
 import io.dropwizard.configuration.ConfigurationValidationException;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 import java.util.List;
 
@@ -24,7 +24,7 @@ public class HttpClientConfigurationTest {
 
     private void load(String configLocation) throws Exception {
         configuration = new ConfigurationFactory<>(HttpClientConfiguration.class,
-                Validation.buildDefaultValidatorFactory().getValidator(),
+                Validators.newValidator(),
                 objectMapper, "dw")
                 .build(new File(Resources.getResource(configLocation).toURI()));
     }

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceConfigurationTest.java
Patch:
@@ -4,10 +4,10 @@
 import com.google.common.io.Resources;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.util.Duration;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -107,7 +107,7 @@ public void testInlineUserPasswordConfiguration() throws Exception {
 
     private DataSourceFactory getDataSourceFactory(String resourceName) throws Exception {
         return new ConfigurationFactory<>(DataSourceFactory.class,
-                Validation.buildDefaultValidatorFactory().getValidator(), Jackson.newObjectMapper(), "dw")
+                Validators.newValidator(), Jackson.newObjectMapper(), "dw")
                 .build(new File(Resources.getResource(resourceName).toURI()));
     }
 }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.errors.ErrorMessage;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.setup.Environment;
@@ -21,7 +22,6 @@
 import org.junit.After;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.ws.rs.*;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;
@@ -128,7 +128,7 @@ protected Application configure() {
         config.register(new UnitOfWorkApplicationListener("hr-db", sessionFactory));
         config.register(new PersonResource(new PersonDAO(sessionFactory)));
         config.register(new JacksonMessageBodyProvider(Jackson.newObjectMapper(),
-                                                       Validation.buildDefaultValidatorFactory().getValidator()));
+                                                       Validators.newValidator()));
         config.register(new DataExceptionMapper());
 
         return config;
@@ -137,7 +137,7 @@ protected Application configure() {
     @Override
     protected void configureClient(ClientConfig config) {
         config.register(new JacksonMessageBodyProvider(Jackson.newObjectMapper(),
-                Validation.buildDefaultValidatorFactory().getValidator()));
+                Validators.newValidator()));
     }
 
     @Test

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/DBIClient.java
Patch:
@@ -5,12 +5,12 @@
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jdbi.DBIFactory;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.junit.rules.ExternalResource;
 import org.skife.jdbi.v2.DBI;
 
-import javax.validation.Validation;
 import java.util.List;
 import java.util.TimeZone;
 
@@ -35,7 +35,7 @@ public DBI getDbi() {
     @Override
     protected void before() throws Throwable {
         final Environment environment = new Environment("test", Jackson.newObjectMapper(),
-                Validation.buildDefaultValidatorFactory().getValidator(), new MetricRegistry(),
+                Validators.newValidator(), new MetricRegistry(),
                 getClass().getClassLoader());
 
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/DefaultJacksonMessageBodyProvider.java
Patch:
@@ -2,13 +2,13 @@
 
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 
-import javax.validation.Validation;
 import javax.ws.rs.ext.Provider;
 
 @Provider
 public class DefaultJacksonMessageBodyProvider extends JacksonMessageBodyProvider {
     public DefaultJacksonMessageBodyProvider() {
-        super(Jackson.newObjectMapper(), Validation.buildDefaultValidatorFactory().getValidator());
+        super(Jackson.newObjectMapper(), Validators.newValidator());
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/DefaultJacksonMessageBodyProvider.java
Patch:
@@ -1,13 +1,13 @@
 package io.dropwizard.jersey.jackson;
 
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 
-import javax.validation.Validation;
 import javax.ws.rs.ext.Provider;
 
 @Provider
 public class DefaultJacksonMessageBodyProvider extends JacksonMessageBodyProvider {
     public DefaultJacksonMessageBodyProvider() {
-        super(Jackson.newObjectMapper(), Validation.buildDefaultValidatorFactory().getValidator());
+        super(Jackson.newObjectMapper(), Validators.newValidator());
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JacksonMessageBodyProviderTest.java
Patch:
@@ -6,6 +6,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.reflect.TypeToken;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.validation.ConstraintViolations;
 import io.dropwizard.validation.Validated;
 import org.hibernate.validator.constraints.NotEmpty;
@@ -14,7 +15,6 @@
 
 import javax.validation.ConstraintViolationException;
 import javax.validation.Valid;
-import javax.validation.Validation;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
 import javax.ws.rs.WebApplicationException;
@@ -102,7 +102,7 @@ public static interface NonIgnorable extends Ignorable {
     private final ObjectMapper mapper = spy(Jackson.newObjectMapper());
     private final JacksonMessageBodyProvider provider =
             new JacksonMessageBodyProvider(mapper,
-                                           Validation.buildDefaultValidatorFactory().getValidator());
+                                           Validators.newValidator());
 
     @Before
     public void setUp() throws Exception {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -5,13 +5,13 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;
@@ -34,7 +34,7 @@ protected Application configure() {
 
     @Override
     protected void configureClient(ClientConfig config) {
-        final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+        final Validator validator = Validators.newValidator();
         final ObjectMapper mapper = new ObjectMapper();
         final JacksonMessageBodyProvider provider = new JacksonMessageBodyProvider(mapper, validator);
         config.register(provider);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/DefaultJacksonMessageBodyProvider.java
Patch:
@@ -3,13 +3,12 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
 
-import javax.validation.Validation;
 import javax.ws.rs.ext.Provider;
 
 @Provider
 public class DefaultJacksonMessageBodyProvider extends JacksonMessageBodyProvider {
     public DefaultJacksonMessageBodyProvider() {
-        super(Jackson.newObjectMapper(), Validation.buildDefaultValidatorFactory().getValidator());
+        super(Jackson.newObjectMapper(), Validators.newValidator());
     }
 }
 

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -9,6 +9,7 @@
 import io.dropwizard.jersey.gzip.ConfiguredGZipEncoder;
 import io.dropwizard.jersey.gzip.GZipDecoder;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.setup.Environment;
 import org.apache.http.client.CredentialsProvider;
@@ -21,7 +22,6 @@
 import org.glassfish.jersey.client.spi.Connector;
 import org.glassfish.jersey.client.spi.ConnectorProvider;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.ws.rs.client.Client;
 import javax.ws.rs.client.ClientBuilder;
@@ -58,7 +58,7 @@ public class JerseyClientBuilder {
     private JerseyClientConfiguration configuration = new JerseyClientConfiguration();
 
     private HttpClientBuilder apacheHttpClientBuilder;
-    private Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private Validator validator = Validators.newValidator();
     private Environment environment;
     private ObjectMapper objectMapper;
     private ExecutorService executorService;

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -9,6 +9,7 @@
 import io.dropwizard.jersey.gzip.ConfiguredGZipEncoder;
 import io.dropwizard.jersey.gzip.GZipDecoder;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.setup.ExecutorServiceBuilder;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.setup.Environment;
@@ -72,7 +73,7 @@ public class JerseyClientBuilderTest {
     private final Environment environment = mock(Environment.class);
     private final ExecutorService executorService = Executors.newSingleThreadExecutor();
     private final ObjectMapper objectMapper = mock(ObjectMapper.class);
-    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+    private final Validator validator = Validators.newValidator();
     private final HttpClientBuilder apacheHttpClientBuilder = mock(HttpClientBuilder.class);
 
     @Before

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientConfigurationTest.java
Patch:
@@ -3,9 +3,9 @@
 import com.google.common.io.Resources;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -15,9 +15,8 @@ public class JerseyClientConfigurationTest {
     @Test
     public void testBasicJerseyClient() throws Exception {
         final JerseyClientConfiguration configuration = new ConfigurationFactory<>(JerseyClientConfiguration.class,
-                Validation.buildDefaultValidatorFactory().getValidator(), Jackson.newObjectMapper(), "dw")
+                Validators.newValidator(), Jackson.newObjectMapper(), "dw")
                 .build(new File(Resources.getResource("yaml/jersey-client.yml").toURI()));
-
         assertThat(configuration.getMinThreads()).isEqualTo(8);
         assertThat(configuration.getMaxThreads()).isEqualTo(64);
         assertThat(configuration.getWorkQueueSize()).isEqualTo(16);

File: dropwizard-client/src/test/java/io/dropwizard/client/proxy/HttpClientConfigurationTest.java
Patch:
@@ -8,9 +8,9 @@
 import io.dropwizard.configuration.ConfigurationParsingException;
 import io.dropwizard.configuration.ConfigurationValidationException;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 import java.util.List;
 
@@ -24,7 +24,7 @@ public class HttpClientConfigurationTest {
 
     private void load(String configLocation) throws Exception {
         configuration = new ConfigurationFactory<>(HttpClientConfiguration.class,
-                Validation.buildDefaultValidatorFactory().getValidator(),
+                Validators.newValidator(),
                 objectMapper, "dw")
                 .build(new File(Resources.getResource(configLocation).toURI()));
     }

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceConfigurationTest.java
Patch:
@@ -4,10 +4,10 @@
 import com.google.common.io.Resources;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.util.Duration;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import java.io.File;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -107,7 +107,7 @@ public void testInlineUserPasswordConfiguration() throws Exception {
 
     private DataSourceFactory getDataSourceFactory(String resourceName) throws Exception {
         return new ConfigurationFactory<>(DataSourceFactory.class,
-                Validation.buildDefaultValidatorFactory().getValidator(), Jackson.newObjectMapper(), "dw")
+                Validators.newValidator(), Jackson.newObjectMapper(), "dw")
                 .build(new File(Resources.getResource(resourceName).toURI()));
     }
 }

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.errors.ErrorMessage;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.setup.Environment;
@@ -21,7 +22,6 @@
 import org.junit.After;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.ws.rs.*;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;
@@ -128,7 +128,7 @@ protected Application configure() {
         config.register(new UnitOfWorkApplicationListener("hr-db", sessionFactory));
         config.register(new PersonResource(new PersonDAO(sessionFactory)));
         config.register(new JacksonMessageBodyProvider(Jackson.newObjectMapper(),
-                                                       Validation.buildDefaultValidatorFactory().getValidator()));
+                                                       Validators.newValidator()));
         config.register(new DataExceptionMapper());
 
         return config;
@@ -137,7 +137,7 @@ protected Application configure() {
     @Override
     protected void configureClient(ClientConfig config) {
         config.register(new JacksonMessageBodyProvider(Jackson.newObjectMapper(),
-                Validation.buildDefaultValidatorFactory().getValidator()));
+                Validators.newValidator()));
     }
 
     @Test

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/timestamps/DBIClient.java
Patch:
@@ -5,12 +5,12 @@
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jdbi.DBIFactory;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.setup.Environment;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.junit.rules.ExternalResource;
 import org.skife.jdbi.v2.DBI;
 
-import javax.validation.Validation;
 import java.util.List;
 import java.util.TimeZone;
 
@@ -35,7 +35,7 @@ public DBI getDbi() {
     @Override
     protected void before() throws Throwable {
         final Environment environment = new Environment("test", Jackson.newObjectMapper(),
-                Validation.buildDefaultValidatorFactory().getValidator(), new MetricRegistry(),
+                Validators.newValidator(), new MetricRegistry(),
                 getClass().getClassLoader());
 
         final DataSourceFactory dataSourceFactory = new DataSourceFactory();

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/DefaultJacksonMessageBodyProvider.java
Patch:
@@ -2,13 +2,13 @@
 
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 
-import javax.validation.Validation;
 import javax.ws.rs.ext.Provider;
 
 @Provider
 public class DefaultJacksonMessageBodyProvider extends JacksonMessageBodyProvider {
     public DefaultJacksonMessageBodyProvider() {
-        super(Jackson.newObjectMapper(), Validation.buildDefaultValidatorFactory().getValidator());
+        super(Jackson.newObjectMapper(), Validators.newValidator());
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/DefaultJacksonMessageBodyProvider.java
Patch:
@@ -1,13 +1,13 @@
 package io.dropwizard.jersey.jackson;
 
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 
-import javax.validation.Validation;
 import javax.ws.rs.ext.Provider;
 
 @Provider
 public class DefaultJacksonMessageBodyProvider extends JacksonMessageBodyProvider {
     public DefaultJacksonMessageBodyProvider() {
-        super(Jackson.newObjectMapper(), Validation.buildDefaultValidatorFactory().getValidator());
+        super(Jackson.newObjectMapper(), Validators.newValidator());
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JacksonMessageBodyProviderTest.java
Patch:
@@ -6,6 +6,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.reflect.TypeToken;
 import io.dropwizard.jackson.Jackson;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.validation.ConstraintViolations;
 import io.dropwizard.validation.Validated;
 import org.hibernate.validator.constraints.NotEmpty;
@@ -14,7 +15,6 @@
 
 import javax.validation.ConstraintViolationException;
 import javax.validation.Valid;
-import javax.validation.Validation;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
 import javax.ws.rs.WebApplicationException;
@@ -102,7 +102,7 @@ public static interface NonIgnorable extends Ignorable {
     private final ObjectMapper mapper = spy(Jackson.newObjectMapper());
     private final JacksonMessageBodyProvider provider =
             new JacksonMessageBodyProvider(mapper,
-                                           Validation.buildDefaultValidatorFactory().getValidator());
+                                           Validators.newValidator());
 
     @Before
     public void setUp() throws Exception {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -5,13 +5,13 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import io.dropwizard.jersey.DropwizardResourceConfig;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Application;
@@ -34,7 +34,7 @@ protected Application configure() {
 
     @Override
     protected void configureClient(ClientConfig config) {
-        final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+        final Validator validator = Validators.newValidator();
         final ObjectMapper mapper = new ObjectMapper();
         final JacksonMessageBodyProvider provider = new JacksonMessageBodyProvider(mapper, validator);
         config.register(provider);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/DefaultJacksonMessageBodyProvider.java
Patch:
@@ -3,13 +3,12 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
 
-import javax.validation.Validation;
 import javax.ws.rs.ext.Provider;
 
 @Provider
 public class DefaultJacksonMessageBodyProvider extends JacksonMessageBodyProvider {
     public DefaultJacksonMessageBodyProvider() {
-        super(Jackson.newObjectMapper(), Validation.buildDefaultValidatorFactory().getValidator());
+        super(Jackson.newObjectMapper(), Validators.newValidator());
     }
 }
 

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientConfiguration.java
Patch:
@@ -5,6 +5,7 @@
 import io.dropwizard.client.proxy.ProxyConfiguration;
 import io.dropwizard.client.ssl.TlsConfiguration;
 import io.dropwizard.util.Duration;
+import org.hibernate.validator.valuehandling.UnwrapValidatedValue;
 
 import javax.annotation.Nullable;
 import javax.validation.Valid;
@@ -48,6 +49,7 @@ public class HttpClientConfiguration {
     private int retries = 0;
 
     @NotNull
+    @UnwrapValidatedValue(false)
     private Optional<String> userAgent = Optional.absent();
 
     @Valid

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/HibernateBundleTest.java
Patch:
@@ -7,6 +7,7 @@
 import com.google.common.collect.ImmutableList;
 import io.dropwizard.Configuration;
 import io.dropwizard.db.DataSourceFactory;
+import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
@@ -39,6 +40,8 @@ public DataSourceFactory getDataSourceFactory(Configuration configuration) {
     public void setUp() throws Exception {
         when(environment.healthChecks()).thenReturn(healthChecks);
         when(environment.jersey()).thenReturn(jerseyEnvironment);
+        when(jerseyEnvironment.getResourceConfig()).thenReturn(new DropwizardResourceConfig());
+
 
         when(factory.build(eq(bundle),
                            any(Environment.class),

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -125,7 +125,7 @@ protected Application configure() {
         }
 
         final DropwizardResourceConfig config = DropwizardResourceConfig.forTesting(new MetricRegistry());
-        config.register(new UnitOfWorkApplicationListener(sessionFactory));
+        config.register(new UnitOfWorkApplicationListener("hr-db", sessionFactory));
         config.register(new PersonResource(new PersonDAO(sessionFactory)));
         config.register(new JacksonMessageBodyProvider(Jackson.newObjectMapper(),
                                                        Validation.buildDefaultValidatorFactory().getValidator()));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/LoggingExceptionMapper.java
Patch:
@@ -27,7 +27,7 @@ public Response toResponse(E exception) {
             status = response.getStatus();
             errorMessage = new ErrorMessage(status, exception.getLocalizedMessage());
         } else {
-            final long id = logException(id, exception);
+            final long id = logException(exception);
             status = Response.Status.INTERNAL_SERVER_ERROR.getStatusCode();
             errorMessage = new ErrorMessage(formatErrorMessage(id, exception));
         }

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -64,6 +64,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.never;
 
 public class JerseyClientBuilderTest {
     private final JerseyClientBuilder builder = new JerseyClientBuilder(new MetricRegistry());
@@ -190,6 +191,7 @@ public void addBidirectionalGzipSupportIfEnabled() throws Exception {
                 .iterator().hasNext()).isTrue();
         assertThat(Iterables.filter(client.getConfiguration().getInstances(), ConfiguredGZipEncoder.class)
                 .iterator().hasNext()).isTrue();
+        verify(apacheHttpClientBuilder, never()).disableContentCompression(true);
     }
 
     @Test
@@ -204,6 +206,7 @@ public void disablesGzipSupportIfDisabled() throws Exception {
                 .iterator().hasNext()).isFalse();
         assertThat(Iterables.filter(client.getConfiguration().getInstances(), ConfiguredGZipEncoder.class)
                 .iterator().hasNext()).isFalse();
+        verify(apacheHttpClientBuilder).disableContentCompression(true);
     }
 
     @Test

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -24,8 +24,7 @@ public class DataSourceFactoryTest {
     @Before
     public void setUp() {
         factory = new DataSourceFactory();
-        factory.setUrl("jdbc:h2:mem:DbTest-" + System.currentTimeMillis());
-        factory.setUser("sa");
+        factory.setUrl("jdbc:h2:mem:DbTest-" + System.currentTimeMillis() + ";user=sa");
         factory.setDriverClass("org.h2.Driver");
         factory.setValidationQuery("SELECT 1");
     }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthValueFactoryProvider.java
Patch:
@@ -48,13 +48,14 @@ public AuthValueFactoryProvider(MultivaluedParameterExtractorProvider mpep,
      * the type {@link T} being annotated with {@link Auth} annotation.
      *
      * @param parameter parameter that was annotated for being injected
-     * @return the factory if parameter matched type
+     * @return the factory if annotated parameter matched type
      */
     @Override
     public AbstractContainerRequestValueFactory<?> createValueFactory(Parameter parameter) {
-        if (!principalClass.equals(parameter.getRawType())) {
+        if (!parameter.isAnnotationPresent(Auth.class) || !principalClass.equals(parameter.getRawType())) {
             return null;
         }
+
         return new AbstractContainerRequestValueFactory<Principal>() {
 
             /**

File: dropwizard-auth/src/main/java/io/dropwizard/auth/Auth.java
Patch:
@@ -7,6 +7,6 @@
 import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })
+@Target({ ElementType.FIELD, ElementType.PARAMETER })
 public @interface Auth {
 }

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -13,7 +13,6 @@
 import io.dropwizard.views.View;
 import io.dropwizard.views.ViewRenderer;
 
-import javax.ws.rs.WebApplicationException;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
@@ -73,7 +72,7 @@ public void render(View view,
             final Template template = configuration.getTemplate(view.getTemplateName(), locale, charset.name());
             template.process(view, new OutputStreamWriter(output, template.getEncoding()));
         } catch (TemplateException e) {
-            throw new WebApplicationException(e);
+            throw new RuntimeException(e);
         }
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/Auth.java
Patch:
@@ -7,6 +7,6 @@
 import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })
+@Target({ ElementType.FIELD, ElementType.PARAMETER })
 public @interface Auth {
 }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthValueFactoryProvider.java
Patch:
@@ -48,13 +48,14 @@ public AuthValueFactoryProvider(MultivaluedParameterExtractorProvider mpep,
      * the type {@link T} being annotated with {@link Auth} annotation.
      *
      * @param parameter parameter that was annotated for being injected
-     * @return the factory if parameter matched type
+     * @return the factory if annotated parameter matched type
      */
     @Override
     public AbstractContainerRequestValueFactory<?> createValueFactory(Parameter parameter) {
-        if (!principalClass.equals(parameter.getRawType())) {
+        if (!parameter.isAnnotationPresent(Auth.class) || !principalClass.equals(parameter.getRawType())) {
             return null;
         }
+
         return new AbstractContainerRequestValueFactory<Principal>() {
 
             /**

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilterTest.java
Patch:
@@ -44,7 +44,8 @@ public void setup() {
         clientConfiguration.setConnectionTimeout(Duration.milliseconds(SLEEP_TIME_IN_MILLIS / 2));
         clientConfiguration.setTimeout(Duration.milliseconds(DEFAULT_CONNECT_TIMEOUT_IN_MILLIS));
         clientBuilder = new JerseyClientBuilder(new MetricRegistry())
-                .using(Executors.newSingleThreadExecutor(), Jackson.newObjectMapper());
+            .using(clientConfiguration)
+            .using(Executors.newSingleThreadExecutor(), Jackson.newObjectMapper());
     }
     
     @Test

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyIgnoreRequestUserAgentHeaderFilterTest.java
Patch:
@@ -44,7 +44,8 @@ public void setup() {
         clientConfiguration.setConnectionTimeout(Duration.milliseconds(SLEEP_TIME_IN_MILLIS / 2));
         clientConfiguration.setTimeout(Duration.milliseconds(DEFAULT_CONNECT_TIMEOUT_IN_MILLIS));
         clientBuilder = new JerseyClientBuilder(new MetricRegistry())
-                .using(Executors.newSingleThreadExecutor(), Jackson.newObjectMapper());
+            .using(clientConfiguration)
+            .using(Executors.newSingleThreadExecutor(), Jackson.newObjectMapper());
     }
     
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardClientRuleTest.java
Patch:
@@ -17,14 +17,14 @@ public class DropwizardClientRuleTest {
     @ClassRule
     public static final DropwizardClientRule RULE_WITH_CLASS = new DropwizardClientRule(TestResource.class);
 
-    @Test(timeout = 10000L)
+    @Test(timeout = 5000)
     public void shouldGetStringBodyFromDropWizard() throws IOException {
         final URL url = new URL(RULE_WITH_INSTANCE.baseUri() + "/test");
         final String response = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
         assertEquals("foo", response);
     }
 
-    @Test(timeout = 10000L)
+    @Test(timeout = 5000)
     public void shouldGetDefaultStringBodyFromDropWizard() throws IOException {
         final URL url = new URL(RULE_WITH_CLASS.baseUri() + "/test");
         final String response = new BufferedReader(new InputStreamReader(url.openStream())).readLine();

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java
Patch:
@@ -70,7 +70,7 @@ private static Optional<String> getMemberName(ConstraintViolation<?> violation)
         final Class<?> resourceClass = violation.getLeafBean().getClass();
         switch (parent.getKind()) {
             case PARAMETER:
-                Field field = FieldUtils.getDeclaredField(resourceClass, member.getName(), true);
+                Field field = FieldUtils.getField(resourceClass, member.getName(), true);
                 return getMemberName(field.getDeclaredAnnotations());
             case METHOD:
                 List<Class<?>> params = parent.as(Path.MethodNode.class).getParameterTypes();

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -314,6 +314,8 @@ private Client build(String name, ExecutorService threadPool,
                          ObjectMapper objectMapper,
                          Validator validator) {
         final Client client = ClientBuilder.newClient(buildConfig(name, threadPool, objectMapper, validator));
+        client.register(new JerseyIgnoreRequestUserAgentHeaderFilter());
+
         // Tie the client to server lifecycle
         if (environment != null) {
             environment.lifecycle().manage(new Managed() {

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -13,7 +13,6 @@
 import io.dropwizard.views.View;
 import io.dropwizard.views.ViewRenderer;
 
-import javax.ws.rs.WebApplicationException;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
@@ -73,7 +72,7 @@ public void render(View view,
             final Template template = configuration.getTemplate(view.getTemplateName(), locale, charset.name());
             template.process(view, new OutputStreamWriter(output, template.getEncoding()));
         } catch (TemplateException e) {
-            throw new WebApplicationException(e);
+            throw new RuntimeException(e);
         }
     }
 

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -46,7 +46,7 @@
  * <p>
  * Among other things,
  * <ul>
- * <li>Disables stale connection checks</li>
+ * <li>Disables stale connection checks by default</li>
  * <li>Disables Nagle's algorithm</li>
  * <li>Disables cookie management by default</li>
  * </ul>
@@ -333,7 +333,7 @@ protected InstrumentedHttpClientConnectionManager configureConnectionManager(
             InstrumentedHttpClientConnectionManager connectionManager) {
         connectionManager.setDefaultMaxPerRoute(configuration.getMaxConnectionsPerRoute());
         connectionManager.setMaxTotal(configuration.getMaxConnections());
-        connectionManager.setValidateAfterInactivity(0);
+        connectionManager.setValidateAfterInactivity((int) configuration.getValidateAfterInactivityPeriod().toMilliseconds());
         return connectionManager;
     }
 }

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -251,8 +251,7 @@ protected ConfiguredCloseableHttpClient createClient(
                 .setDefaultSocketConfig(socketConfig)
                 .setConnectionReuseStrategy(reuseStrategy)
                 .setRetryHandler(retryHandler)
-                .setUserAgent(createUserAgent(name))
-                .setConnectionManagerShared(configuration.isShareConnectionManagerEnabled());
+                .setUserAgent(createUserAgent(name));
 
         if (keepAlive != 0) {
             // either keep alive based on response header Keep-Alive,

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -251,8 +251,7 @@ protected ConfiguredCloseableHttpClient createClient(
                 .setDefaultSocketConfig(socketConfig)
                 .setConnectionReuseStrategy(reuseStrategy)
                 .setRetryHandler(retryHandler)
-                .setUserAgent(createUserAgent(name))
-                .setConnectionManagerShared(configuration.isShareConnectionManagerEnabled());
+                .setUserAgent(createUserAgent(name));
 
         if (keepAlive != 0) {
             // either keep alive based on response header Keep-Alive,

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -251,7 +251,8 @@ protected ConfiguredCloseableHttpClient createClient(
                 .setDefaultSocketConfig(socketConfig)
                 .setConnectionReuseStrategy(reuseStrategy)
                 .setRetryHandler(retryHandler)
-                .setUserAgent(createUserAgent(name));
+                .setUserAgent(createUserAgent(name))
+                .setConnectionManagerShared(configuration.isShareConnectionManagerEnabled());
 
         if (keepAlive != 0) {
             // either keep alive based on response header Keep-Alive,

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -251,7 +251,8 @@ protected ConfiguredCloseableHttpClient createClient(
                 .setDefaultSocketConfig(socketConfig)
                 .setConnectionReuseStrategy(reuseStrategy)
                 .setRetryHandler(retryHandler)
-                .setUserAgent(createUserAgent(name));
+                .setUserAgent(createUserAgent(name))
+                .setConnectionManagerShared(configuration.isShareConnectionManagerEnabled());
 
         if (keepAlive != 0) {
             // either keep alive based on response header Keep-Alive,

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java
Patch:
@@ -87,7 +87,7 @@ public void run(HelloWorldConfiguration configuration, Environment environment)
                 .setAuthorizer(new ExampleAuthorizer())
                 .setRealm("SUPER SECRET STUFF")
                 .buildAuthFilter()));
-        environment.jersey().register(new AuthValueFactoryProvider.Binder(User.class));
+        environment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));
         environment.jersey().register(RolesAllowedDynamicFeature.class);
         environment.jersey().register(new HelloWorldResource(template));
         environment.jersey().register(new ViewResource());

File: dropwizard-example/src/test/java/com/example/helloworld/resources/ProtectedResourceTest.java
Patch:
@@ -56,7 +56,7 @@ public boolean authorize(User user, String role) {
     public static final ResourceTestRule resources = ResourceTestRule.builder()
             .addProvider(RolesAllowedDynamicFeature.class)
             .addProvider(new AuthDynamicFeature(BASIC_AUTH_HANDLER))
-            .addProvider(new AuthValueFactoryProvider.Binder(User.class))
+            .addProvider(new AuthValueFactoryProvider.Binder<>(User.class))
             .setTestContainerFactory(new GrizzlyWebTestContainerFactory())
             .addProvider(ProtectedResource.class)
             .build();

File: dropwizard-util/src/main/java/io/dropwizard/util/SizeUnit.java
Patch:
@@ -25,7 +25,7 @@ public enum SizeUnit {
     GIGABYTES(8L * 1024 * 1024 * 1024),
 
     /**
-     * Megabytes.
+     * Terabytes.
      */
     TERABYTES(8L * 1024 * 1024 * 1024 * 1024);
 

File: dropwizard-util/src/main/java/io/dropwizard/util/SizeUnit.java
Patch:
@@ -25,7 +25,7 @@ public enum SizeUnit {
     GIGABYTES(8L * 1024 * 1024 * 1024),
 
     /**
-     * Megabytes.
+     * Terabytes.
      */
     TERABYTES(8L * 1024 * 1024 * 1024 * 1024);
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java
Patch:
@@ -27,7 +27,7 @@ public abstract static class AuthFilterBuilder<C, P extends Principal, T extends
         private String realm = "realm";
         private String prefix = "Basic";
         private Authenticator<C, P> authenticator;
-        private Authorizer<P> authorizer;
+        private Authorizer<P> authorizer = new PermitAllAuthorizer<>();
 
         /**
          * Sets the given realm
@@ -74,10 +74,10 @@ public AuthFilterBuilder<C, P, T> setAuthenticator(Authenticator<C, P> authentic
         }
 
         /**
-         * Builds an instance of the filter with provided an authenticator,
+         * Builds an instance of the filter with a provided authenticator,
          * an authorizer, a prefix, and a realm.
          *
-         * @return a new instance of a filter
+         * @return a new instance of the filter
          */
         public T buildAuthFilter() {
             Preconditions.checkArgument(realm != null, "Realm is not set");

File: dropwizard-auth/src/main/java/io/dropwizard/auth/basic/BasicCredentialAuthFilter.java
Patch:
@@ -87,7 +87,7 @@ public String getAuthenticationScheme() {
 
     /**
      * Builder for {@link BasicCredentialAuthFilter}.
-     * <p>An {@link Authenticator} and an {@link Authorizer} must be provided during the building process.</p>
+     * <p>An {@link Authenticator} must be provided during the building process.</p>
      *
      * @param <P> the principal
      */

File: dropwizard-auth/src/main/java/io/dropwizard/auth/oauth/OAuthCredentialAuthFilter.java
Patch:
@@ -72,7 +72,7 @@ public String getAuthenticationScheme() {
 
     /**
      * Builder for {@link OAuthCredentialAuthFilter}.
-     * <p>An {@link Authenticator} and an {@link Authorizer} must be provided during the building process.</p>
+     * <p>An {@link Authenticator} must be provided during the building process.</p>
      *
      * @param <P> the type of the principal
      */

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicAuthProviderTest.java
Patch:
@@ -3,7 +3,6 @@
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.auth.AuthDynamicFeature;
 import io.dropwizard.auth.AuthResource;
-import io.dropwizard.auth.Authenticator;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.logging.BootstrapLogging;
@@ -155,8 +154,7 @@ public BasicAuthTestResourceConfig() {
         private ContainerRequestFilter getAuthFilter() {
             final String validUser = "good-guy";
 
-            BasicCredentialAuthFilter.Builder<Principal, Authenticator<BasicCredentials, Principal>> builder
-                    = new BasicCredentialAuthFilter.Builder<>();
+            BasicCredentialAuthFilter.Builder<Principal> builder  = new BasicCredentialAuthFilter.Builder<>();
             builder.setAuthorizer(AuthUtil.getTestAuthorizer(validUser, VALID_ROLE));
             builder.setAuthenticator(AuthUtil.<BasicCredentials, Principal>getTestAuthenticatorBasicCredential(validUser));
             return builder.buildAuthFilter();

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicCustomAuthProviderTest.java
Patch:
@@ -147,8 +147,7 @@ public BasicAuthTestResourceConfig() {
         private ContainerRequestFilter getAuthFilter() {
             final String validUser = "good-guy";
 
-            BasicCredentialAuthFilter.Builder<Principal, Authenticator<BasicCredentials, Principal>> builder
-                    = new BasicCredentialAuthFilter.Builder<>();
+            BasicCredentialAuthFilter.Builder<Principal> builder  = new BasicCredentialAuthFilter.Builder<>();
             builder.setAuthorizer(AuthUtil.getTestAuthorizer(validUser, VALID_ROLE));
             builder.setAuthenticator(AuthUtil.getTestAuthenticatorBasicCredential(validUser));
             builder.setPrefix("Custom");

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthCustomProviderTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.Test;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.HttpHeaders;
-import javax.ws.rs.core.SecurityContext;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java
Patch:
@@ -82,7 +82,7 @@ public void run(HelloWorldConfiguration configuration, Environment environment)
 
         environment.healthChecks().register("template", new TemplateHealthCheck(template));
         environment.jersey().register(DateRequiredFeature.class);
-        environment.jersey().register(new AuthDynamicFeature(new BasicCredentialAuthFilter.Builder<User, ExampleAuthenticator>()
+        environment.jersey().register(new AuthDynamicFeature(new BasicCredentialAuthFilter.Builder<User>()
                 .setAuthenticator(new ExampleAuthenticator())
                 .setAuthorizer(new ExampleAuthorizer())
                 .setRealm("SUPER SECRET STUFF")

File: dropwizard-example/src/test/java/com/example/helloworld/resources/ProtectedResourceTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.example.helloworld.resources;
 
 import com.example.helloworld.core.User;
-import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import io.dropwizard.auth.*;
 import io.dropwizard.auth.basic.BasicCredentialAuthFilter;
@@ -46,7 +45,7 @@ public boolean authorize(User user, String role) {
             }
         };
 
-        BASIC_AUTH_HANDLER = new BasicCredentialAuthFilter.Builder<User, Authenticator<BasicCredentials, User>>()
+        BASIC_AUTH_HANDLER = new BasicCredentialAuthFilter.Builder<User>()
                 .setAuthenticator(AUTHENTICATOR)
                 .setAuthorizer(AUTHORIZER)
                 .setPrefix("Basic")

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -175,7 +175,7 @@ private void populate(String basePath, Class<?> klass, boolean isLocator, Resour
             }
 
             for (Resource childResource : resource.getChildResources()) {
-                for (ResourceMethod method : childResource.getResourceMethods()) {
+                for (ResourceMethod method : childResource.getAllMethods()) {
                     if (method.getType() == ResourceMethod.JaxrsType.RESOURCE_METHOD) {
                         final String path = normalizePath(basePath, childResource.getPath());
                         endpointLogLines.add(new EndpointLogLine(method.getHttpMethod(), path, klass));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -175,7 +175,7 @@ private void populate(String basePath, Class<?> klass, boolean isLocator, Resour
             }
 
             for (Resource childResource : resource.getChildResources()) {
-                for (ResourceMethod method : childResource.getResourceMethods()) {
+                for (ResourceMethod method : childResource.getAllMethods()) {
                     if (method.getType() == ResourceMethod.JaxrsType.RESOURCE_METHOD) {
                         final String path = normalizePath(basePath, childResource.getPath());
                         endpointLogLines.add(new EndpointLogLine(method.getHttpMethod(), path, klass));

File: dropwizard-testing/src/test/java/io/dropwizard/testing/Person.java
Patch:
@@ -1,12 +1,10 @@
 package io.dropwizard.testing;
 
 import com.google.common.base.MoreObjects;
-import org.hibernate.validator.constraints.NotEmpty;
 
 import java.util.Objects;
 
 public class Person {
-    @NotEmpty
     private String name;
     private String email;
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/Person.java
Patch:
@@ -1,12 +1,10 @@
 package io.dropwizard.testing;
 
 import com.google.common.base.MoreObjects;
-import org.hibernate.validator.constraints.NotEmpty;
 
 import java.util.Objects;
 
 public class Person {
-    @NotEmpty
     private String name;
     private String email;
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/Person.java
Patch:
@@ -1,10 +1,12 @@
 package io.dropwizard.testing;
 
 import com.google.common.base.MoreObjects;
+import org.hibernate.validator.constraints.NotEmpty;
 
 import java.util.Objects;
 
 public class Person {
+    @NotEmpty
     private String name;
     private String email;
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/Person.java
Patch:
@@ -1,10 +1,12 @@
 package io.dropwizard.testing;
 
 import com.google.common.base.MoreObjects;
+import org.hibernate.validator.constraints.NotEmpty;
 
 import java.util.Objects;
 
 public class Person {
+    @NotEmpty
     private String name;
     private String email;
 

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T extends Configuration> {
+public interface ConfiguredBundle<T> {
     /**
      * Initializes the environment.
      *
@@ -24,5 +24,5 @@ public interface ConfiguredBundle<T extends Configuration> {
      *
      * @param bootstrap the application bootstrap
      */
-    void initialize(Bootstrap<? extends T> bootstrap);
+    void initialize(Bootstrap<?> bootstrap);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -31,7 +31,7 @@ protected HibernateBundle(ImmutableList<Class<?>> entities,
     }
 
     @Override
-    public final void initialize(Bootstrap<? extends T> bootstrap) {
+    public final void initialize(Bootstrap<?> bootstrap) {
         bootstrap.getObjectMapper().registerModule(createHibernate4Module());
     }
 

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -115,7 +115,7 @@ public void run(T configuration, Environment environment) throws Exception {
     }
 
     @Override
-    public void initialize(Bootstrap<? extends T> bootstrap) {
+    public void initialize(Bootstrap<?> bootstrap) {
         // nothing doing
     }
 }

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbDumpCommand.java
Patch:
@@ -68,7 +68,7 @@ public void configure(Subparser subparser) {
         columns.addArgument("--columns")
                .action(Arguments.storeTrue())
                .dest("columns")
-               .help("Check for added, removed, or modified tables (default)");
+               .help("Check for added, removed, or modified columns (default)");
         columns.addArgument("--ignore-columns")
                .action(Arguments.storeFalse())
                .dest("columns")
@@ -132,7 +132,7 @@ public void configure(Subparser subparser) {
         sequences.addArgument("--ignore-sequences")
                  .action(Arguments.storeFalse())
                  .dest("sequences")
-                 .help("Ignore foreign keys");
+                 .help("Ignore sequences");
 
         final ArgumentGroup data = subparser.addArgumentGroup("Data");
         data.addArgument("--data")

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ValidationErrorMessage.java
Patch:
@@ -1,12 +1,14 @@
 package io.dropwizard.jersey.validation;
 
+import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.common.collect.ImmutableList;
 
 public class ValidationErrorMessage {
     private final ImmutableList<String> errors;
 
-    public ValidationErrorMessage(ImmutableList<String> errors) {
+    @JsonCreator
+    public ValidationErrorMessage(@JsonProperty("errors") ImmutableList<String> errors) {
         this.errors = errors;
     }
 

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicAuthProviderTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.auth.AuthDynamicFeature;
-import io.dropwizard.auth.AuthFilter;
 import io.dropwizard.auth.AuthResource;
 import io.dropwizard.auth.Authenticator;
 import io.dropwizard.auth.util.AuthUtil;
@@ -158,7 +157,7 @@ private ContainerRequestFilter getAuthFilter() {
 
             BasicCredentialAuthFilter.Builder<Principal, Authenticator<BasicCredentials, Principal>> builder
                     = new BasicCredentialAuthFilter.Builder<>();
-            builder.setSecurityContextFunction(AuthUtil.<AuthFilter.Tuple, SecurityContext>getSecurityContextProviderFunction(validUser, VALID_ROLE));
+            builder.setAuthorizer(AuthUtil.getTestAuthorizer(validUser, VALID_ROLE));
             builder.setAuthenticator(AuthUtil.<BasicCredentials, Principal>getTestAuthenticatorBasicCredential(validUser));
             return builder.buildAuthFilter();
         }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicCustomAuthProviderTest.java
Patch:
@@ -149,7 +149,7 @@ private ContainerRequestFilter getAuthFilter() {
 
             BasicCredentialAuthFilter.Builder<Principal, Authenticator<BasicCredentials, Principal>> builder
                     = new BasicCredentialAuthFilter.Builder<>();
-            builder.setSecurityContextFunction(AuthUtil.getSecurityContextProviderFunction(validUser, VALID_ROLE));
+            builder.setAuthorizer(AuthUtil.getTestAuthorizer(validUser, VALID_ROLE));
             builder.setAuthenticator(AuthUtil.getTestAuthenticatorBasicCredential(validUser));
             builder.setPrefix("Custom");
             return builder.buildAuthFilter();

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthCustomProviderTest.java
Patch:
@@ -129,8 +129,8 @@ private AuthFilter getAuthFilter() {
             final String validUser = "good-guy";
 
             return new OAuthCredentialAuthFilter.Builder<>()
-                    .setAuthenticator(AuthUtil.<String, SecurityContext>getTestAuthenticator(validUser))
-                    .setSecurityContextFunction(AuthUtil.getSecurityContextProviderFunction(validUser, "ADMIN"))
+                    .setAuthenticator(AuthUtil.getTestAuthenticator(validUser))
+                    .setAuthorizer(AuthUtil.getTestAuthorizer(validUser, "ADMIN"))
                     .setPrefix("Custom")
                     .buildAuthFilter();
         }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -123,9 +123,9 @@ private AuthFilter getAuthFilter() {
             final String validUser = "good-guy";
 
             return new OAuthCredentialAuthFilter.Builder<>()
-                    .setAuthenticator(AuthUtil.<String, Principal>getTestAuthenticator(validUser))
+                    .setAuthenticator(AuthUtil.getTestAuthenticator(validUser))
+                    .setAuthorizer(AuthUtil.getTestAuthorizer(validUser, "ADMIN"))
                     .setPrefix("Bearer")
-                    .setSecurityContextFunction(AuthUtil.getSecurityContextProviderFunction(validUser, "ADMIN"))
                     .buildAuthFilter();
         }
     }

File: dropwizard-benchmarks/src/main/java/io/dropwizard/benchmarks/jersey/ConstraintViolationBenchmark.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.benchmarks.jersey;
 
 import io.dropwizard.jersey.validation.ConstraintMessage;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.logging.BootstrapLogging;
 import org.hibernate.validator.constraints.NotEmpty;
 import org.openjdk.jmh.annotations.*;
@@ -9,7 +10,6 @@
 
 import javax.validation.ConstraintViolation;
 import javax.validation.Valid;
-import javax.validation.Validation;
 import javax.validation.Validator;
 import javax.validation.executable.ExecutableValidator;
 import javax.ws.rs.HeaderParam;
@@ -47,7 +47,7 @@ public static class Foo {
 
     @Setup
     public void prepare() {
-        final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+        final Validator validator = Validators.newValidator();
         final ExecutableValidator execValidator = validator.forExecutables();
 
         Set<ConstraintViolation<ConstraintViolationBenchmark.Resource>> paramViolations =

File: dropwizard-core/src/main/java/io/dropwizard/cli/EnvironmentCommand.java
Patch:
@@ -6,8 +6,6 @@
 import io.dropwizard.setup.Environment;
 import net.sourceforge.argparse4j.inf.Namespace;
 
-import javax.validation.Validation;
-
 /**
  * A command which executes with a configured {@link Environment}.
  *

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/params/NonEmptyStringParam.java
Patch:
@@ -10,7 +10,7 @@
  * {@code Optional.of("")}.
  */
 public class NonEmptyStringParam extends AbstractParam<Optional<String>> {
-    protected NonEmptyStringParam(String input) {
+    public NonEmptyStringParam(String input) {
         super(input);
     }
 

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java
Patch:
@@ -9,6 +9,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
+import io.dropwizard.jersey.validation.Validators;
 import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.servlet.ServletProperties;
@@ -44,7 +45,7 @@ public static class Builder {
         private final Set<Class<?>> providers = Sets.newHashSet();
         private final Map<String, Object> properties = Maps.newHashMap();
         private ObjectMapper mapper = Jackson.newObjectMapper();
-        private Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
+        private Validator validator = Validators.newValidator();
         private TestContainerFactory testContainerFactory = new InMemoryTestContainerFactory();
 
         public Builder setMapper(ObjectMapper mapper) {

File: dropwizard-db/src/main/java/io/dropwizard/db/DatabaseConfiguration.java
Patch:
@@ -3,5 +3,5 @@
 import io.dropwizard.Configuration;
 
 public interface DatabaseConfiguration<T extends Configuration> {
-    DataSourceFactory getDataSourceFactory(T configuration);
+    PooledDataSourceFactory getDataSourceFactory(T configuration);
 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -45,7 +45,6 @@ public DropwizardResourceConfig() {
         this(true, null);
     }
 
-    @SuppressWarnings("unchecked")
     public DropwizardResourceConfig(boolean testOnly, MetricRegistry metricRegistry) {
         super();
 
@@ -184,6 +183,9 @@ private void populate(String basePath, Class<?> klass, boolean isLocator, Resour
         }
 
         private String normalizePath(String basePath, String path) {
+            if (path == null) {
+                return basePath;
+            }
             if (basePath.endsWith("/")) {
                 return path.startsWith("/") ? basePath + path.substring(1) : basePath + path;
             }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -45,7 +45,6 @@ public DropwizardResourceConfig() {
         this(true, null);
     }
 
-    @SuppressWarnings("unchecked")
     public DropwizardResourceConfig(boolean testOnly, MetricRegistry metricRegistry) {
         super();
 
@@ -184,6 +183,9 @@ private void populate(String basePath, Class<?> klass, boolean isLocator, Resour
         }
 
         private String normalizePath(String basePath, String path) {
+            if (path == null) {
+                return basePath;
+            }
             if (basePath.endsWith("/")) {
                 return path.startsWith("/") ? basePath + path.substring(1) : basePath + path;
             }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java
Patch:
@@ -17,7 +17,7 @@ public AuthDynamicFeature(ContainerRequestFilter authFilter) {
     @Override
     public void configure(ResourceInfo resourceInfo, FeatureContext context) {
         AnnotatedMethod am = new AnnotatedMethod(resourceInfo.getResourceMethod());
-        if(am.isAnnotationPresent(RolesAllowed.class) || am.isAnnotationPresent(DenyAll.class)) {
+        if (am.isAnnotationPresent(RolesAllowed.class) || am.isAnnotationPresent(DenyAll.class)) {
             context.register(authFilter);
         }
     }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java
Patch:
@@ -10,7 +10,7 @@
 import java.security.Principal;
 
 @Priority(Priorities.AUTHENTICATION)
-public abstract class AuthFilter<C, P extends Principal> implements ContainerRequestFilter{
+public abstract class AuthFilter<C, P extends Principal> implements ContainerRequestFilter {
     protected String prefix;
     protected String realm;
     protected Authenticator<C, P> authenticator;
@@ -55,7 +55,7 @@ public Principal getPrincipal() {
         }
     }
 
-    public static abstract class AuthFilterBuilder<C, P extends Principal, T extends AuthFilter<C, P>, A extends Authenticator<C, P>> {
+    public abstract static class AuthFilterBuilder<C, P extends Principal, T extends AuthFilter<C, P>, A extends Authenticator<C, P>> {
         protected String realm = "realm";
         protected String prefix = "Basic";
         protected Authenticator<C, P> authenticator;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java
Patch:
@@ -46,7 +46,7 @@ public void filter(ContainerRequestContext containerRequestContext) throws IOExc
                     return;
                 }
             } catch (WebApplicationException e) {
-                if(firstException == null) {
+                if (firstException == null) {
                     firstException = e;
                 }
             }

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationFactoryFactory.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 public interface ConfigurationFactoryFactory<T> {
-    public ConfigurationFactory<T> create(Class<T> klass,
+    ConfigurationFactory<T> create(Class<T> klass,
             Validator validator,
             ObjectMapper objectMapper,
             String propertyPrefix);

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationSourceProvider.java
Patch:
@@ -16,6 +16,6 @@ public interface ConfigurationSourceProvider {
      * @return an {@link InputStream}
      * @throws IOException if there is an error reading the data at {@code path}
      */
-    public InputStream open(String path) throws IOException;
+    InputStream open(String path) throws IOException;
 
 }

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/EnvironmentVariableLookup.java
Patch:
@@ -45,4 +45,4 @@ public String lookup(String key) {
 
         return value;
     }
-}
\ No newline at end of file
+}

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/OptionalContainerFactory.java
Patch:
@@ -18,7 +18,7 @@ public ContainerBuilder<Optional<?>> newContainerBuilderFor(Class<?> type) {
 
     private static class OptionalContainerBuilder implements ContainerBuilder<Optional<?>> {
 
-        Optional<?> optional = Optional.absent();
+        private Optional<?> optional = Optional.absent();
 
         @Override
         public ContainerBuilder<Optional<?>> add(Object it) {

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/jersey/LoggingSQLExceptionMapper.java
Patch:
@@ -24,7 +24,7 @@ protected void logException(long id, SQLException exception) {
     }
 
     @VisibleForTesting
-    static void setLogger(Logger newLogger){
-       logger = newLogger;
+    static void setLogger(Logger newLogger) {
+        logger = newLogger;
     }
 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -221,7 +221,7 @@ public int compare(EndpointLogLine endpointA, EndpointLogLine endpointB) {
     }
 
     private static class ComponentLoggingListener implements ApplicationEventListener {
-        final DropwizardResourceConfig config;
+        private final DropwizardResourceConfig config;
 
         public ComponentLoggingListener(DropwizardResourceConfig config) {
             this.config = config;
@@ -230,7 +230,7 @@ public ComponentLoggingListener(DropwizardResourceConfig config) {
         @Override
         public void onEvent(ApplicationEvent event) {
             if (event.getType() == ApplicationEvent.Type.INITIALIZATION_APP_FINISHED) {
-                this.config.logComponents();
+                config.logComponents();
             }
         }
 

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/caching/CacheControlledResponseFeature.java
Patch:
@@ -32,7 +32,7 @@ private static class CacheControlledResponseFilter implements ContainerResponseF
         private static final int ONE_YEAR_IN_SECONDS = (int) TimeUnit.DAYS.toSeconds(365);
         private String cacheResponseHeader;
 
-        public CacheControlledResponseFilter (CacheControl control) {
+        public CacheControlledResponseFilter(CacheControl control) {
             final javax.ws.rs.core.CacheControl cacheControl = new javax.ws.rs.core.CacheControl();
             cacheControl.setPrivate(control.isPrivate());
             cacheControl.setNoCache(control.noCache());

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/EarlyEofExceptionMapper.java
Patch:
@@ -26,4 +26,4 @@ public Response toResponse(EofException e) {
 
         return Response.status(Response.Status.BAD_REQUEST).build();
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamBinder.java
Patch:
@@ -11,4 +11,4 @@ protected void configure() {
         // Param converter providers
         bind(OptionalParamConverterProvider.class).to(ParamConverterProvider.class).in(Singleton.class);
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamConverterProvider.java
Patch:
@@ -42,7 +42,7 @@ public T fromString(final String value) {
                     }
 
                     @Override
-                    public String toString(final T value) throws IllegalArgumentException {
+                    public String toString(final T value) {
                         return value.toString();
                     }
                 };
@@ -65,7 +65,7 @@ public Object apply(final String s) {
                         }
 
                         @Override
-                        public String toString(final T value) throws IllegalArgumentException {
+                        public String toString(final T value) {
                             return value.toString();
                         }
                     };
@@ -75,4 +75,4 @@ public String toString(final T value) throws IllegalArgumentException {
 
         return null;
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamFeature.java
Patch:
@@ -9,4 +9,4 @@ public boolean configure(final FeatureContext context) {
         context.register(new OptionalParamBinder());
         return true;
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoder.java
Patch:
@@ -40,7 +40,7 @@ public void filter(ClientRequestContext context) throws IOException {
     }
 
     @Override
-    public final void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {
+    public final void aroundWriteTo(WriterInterceptorContext context) throws IOException {
         String contentEncoding = (String) context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
         if ((contentEncoding != null) &&
                 (contentEncoding.equals("gzip") || contentEncoding.equals("x-gzip"))) {

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpsConnectorFactory.java
Patch:
@@ -516,12 +516,12 @@ public void setValidateCerts(boolean validateCerts) {
         this.validateCerts = validateCerts;
     }
 
-    @ValidationMethod(message="keyStorePath should not be null")
+    @ValidationMethod(message = "keyStorePath should not be null")
     public boolean isValidKeyStorePath() {
         return keyStoreType.startsWith("Windows-") || keyStorePath != null;
     }
 
-    @ValidationMethod(message="keyStorePassword should not be null or empty")
+    @ValidationMethod(message = "keyStorePassword should not be null or empty")
     public boolean isValidKeyStorePassword() {
         return keyStoreType.startsWith("Windows-") ||
                 !Strings.isNullOrEmpty(keyStorePassword);

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java
Patch:
@@ -19,8 +19,8 @@ public class RoutingHandler extends AbstractHandler {
      * ImmutableMap-backed implementation it was ~54us vs. ~4500us for 1,000,000 iterations.
      */
     private static class Entry {
-        final Connector connector;
-        final Handler handler;
+        private final Connector connector;
+        private final Handler handler;
 
         private Entry(Connector connector, Handler handler) {
             this.connector = connector;

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/setup/ServletEnvironment.java
Patch:
@@ -144,7 +144,7 @@ public void setBaseResource(Resource baseResource) {
      * @param resourceBase A string representing the base resource for the
      *                     context. Any string accepted by Resource.newResource(String)
      *                     may be passed and the call is equivalent to
-     *                     {@link setBaseResource(newResource(resourceBase))}
+     *                     {@link #setBaseResource(Resource)}}
      */
     public void setResourceBase(String resourceBase) {
         handler.setResourceBase(resourceBase);

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/Managed.java
Patch:
@@ -10,12 +10,12 @@ public interface Managed {
      *
      * @throws Exception if something goes wrong; this will halt the application startup.
      */
-    public void start() throws Exception;
+    void start() throws Exception;
 
     /**
      * Stops the object. Called <i>after</i> the application is no longer accepting requests.
      *
      * @throws Exception if something goes wrong.
      */
-    public void stop() throws Exception;
+    void stop() throws Exception;
 }

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -89,7 +89,7 @@ private boolean isBoundedQueue() {
     }
 
     @VisibleForTesting
-    static void setLog(Logger newLog){
+    static void setLog(Logger newLog) {
        log = newLog;
     }
 }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/BootstrapLogging.java
Patch:
@@ -26,6 +26,9 @@ public class BootstrapLogging {
     private static boolean bootstrapped = false;
     private static final Lock bootstrappingLock = new ReentrantLock();
 
+    private BootstrapLogging() {
+    }
+
     // initially configure for WARN+ console logging
     public static void bootstrap() {
         bootstrap(Level.WARN);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingUtil.java
Patch:
@@ -18,6 +18,9 @@ public class LoggingUtil {
     private static boolean julHijacked = false;
     private static final Lock julHijackingLock = new ReentrantLock();
 
+    private LoggingUtil() {
+    }
+
     /**
      * Acquires the logger context.
      * <p/>

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -96,14 +96,14 @@ public enum Facility {
     private static final String LOG_TOKEN_PID = "%pid";
 
     private static final Pattern PID_PATTERN = Pattern.compile("(\\d+)@");
-    private static String PID = "";
+    private static String pid = "";
 
     // make an attempt to get the PID of the process
     // this will only work on UNIX platforms; for others, the PID will be "unknown"
     static {
         final Matcher matcher = PID_PATTERN.matcher(ManagementFactory.getRuntimeMXBean().getName());
         if (matcher.find()) {
-            PID = "[" + matcher.group(1) + "]";
+            pid = "[" + matcher.group(1) + "]";
         }
     }
 
@@ -204,7 +204,7 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         final SyslogAppender appender = new SyslogAppender();
         appender.setName("syslog-appender");
         appender.setContext(context);
-        appender.setSuffixPattern(logFormat.replaceAll(LOG_TOKEN_PID, PID).replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
+        appender.setSuffixPattern(logFormat.replaceAll(LOG_TOKEN_PID, pid).replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
         appender.setSyslogHost(host);
         appender.setPort(port);
         appender.setFacility(facility.toString().toLowerCase(Locale.ENGLISH));

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DefaultLoggingFactoryPrintErrorMessagesTest.java
Patch:
@@ -61,14 +61,14 @@ private String configureAndGetOutputWrittenToErrorStream() throws UnsupportedEnc
 
     @Test
     public void testWhenUsingDefaultConstructor_SystemErrIsSet() throws Exception {
-        PrintStream configurationErrorsStream = new DefaultLoggingFactory().configurationErrorsStream;
+        PrintStream configurationErrorsStream = new DefaultLoggingFactory().getConfigurationErrorsStream();
 
         assertThat(configurationErrorsStream).isSameAs(System.err);
     }
 
     @Test
     public void testWhenUsingDefaultConstructor_StaticILoggerFactoryIsSet() throws Exception {
-        LoggerContext loggerContext = new DefaultLoggingFactory().loggerContext;
+        LoggerContext loggerContext = new DefaultLoggingFactory().getLoggerContext();
 
         assertThat(loggerContext).isSameAs(LoggerFactory.getILoggerFactory());
     }

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -83,11 +83,11 @@ private CloseableLiquibase openLiquibase(final DataSourceFactory dataSourceFacto
         final String catalogName = namespace.getString("catalog");
         final String schemaName = namespace.getString("schema");
 
-        if(database.supportsCatalogs() && catalogName != null) {
+        if (database.supportsCatalogs() && catalogName != null) {
             database.setDefaultCatalogName(catalogName);
             database.setOutputDefaultCatalog(true);
         }
-        if(database.supportsSchemas() && schemaName != null) {
+        if (database.supportsSchemas() && schemaName != null) {
             database.setDefaultSchemaName(schemaName);
             database.setOutputDefaultSchema(true);
         }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardAppRule.java
Patch:
@@ -44,7 +44,7 @@ public DropwizardAppRule(DropwizardTestSupport<C> testSupport) {
     }
 
     public DropwizardAppRule<C> addListener(final ServiceListener<C> listener) {
-        this.testSupport.addListener(new DropwizardTestSupport.ServiceListener<C>(){
+        this.testSupport.addListener(new DropwizardTestSupport.ServiceListener<C>() {
 
             public void onRun(C configuration, Environment environment, DropwizardTestSupport<C> rule) throws Exception {
                 listener.onRun(configuration, environment, DropwizardAppRule.this);
@@ -117,7 +117,7 @@ public void onStop(DropwizardAppRule<T> rule) throws Exception {
         }
     }
 
-    public DropwizardTestSupport<C> getTestSupport(){
+    public DropwizardTestSupport<C> getTestSupport() {
         return testSupport;
     }
 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java
Patch:
@@ -174,18 +174,17 @@ public void evaluate() throws Throwable {
                 try {
                     test = new JerseyTest() {
                         @Override
-                        protected TestContainerFactory getTestContainerFactory() throws TestContainerException {
+                        protected TestContainerFactory getTestContainerFactory() {
                             return testContainerFactory;
                         }
 
                         @Override
                         protected DeploymentContext configureDeployment() {
                             final ResourceTestResourceConfig resourceConfig = new ResourceTestResourceConfig(ruleId, rule);
-                            ServletDeploymentContext deploymentContext = ServletDeploymentContext.builder(resourceConfig)
+                            return ServletDeploymentContext.builder(resourceConfig)
                                     .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, ResourceTestResourceConfig.class.getName())
                                     .initParam(ResourceTestResourceConfig.RULE_ID, ruleId)
                                     .build();
-                            return deploymentContext;
                         }
 
                         @Override

File: dropwizard-validation/src/main/java/io/dropwizard/validation/ConstraintViolations.java
Patch:
@@ -63,6 +63,8 @@ public static <T extends ConstraintViolation<?>> int determineStatus(Set<T> viol
                         return 500;
                     case PARAMETER:
                         return 400;
+                    default:
+                        continue;
                 }
             }
         }

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -38,7 +38,7 @@ public Configuration load(Class<?> key) throws Exception {
             configuration.loadBuiltInEncodingMap();
             configuration.setDefaultEncoding(Charsets.UTF_8.name());
             configuration.setClassForTemplateLoading(key, "/");
-            for(Map.Entry<String, String> entry : baseConfig.entrySet()) {
+            for (Map.Entry<String, String> entry : baseConfig.entrySet()) {
                 configuration.setSetting(entry.getKey(), entry.getValue());
             }
             return configuration;
@@ -66,7 +66,7 @@ public boolean isRenderable(View view) {
     @Override
     public void render(View view,
                        Locale locale,
-                       OutputStream output) throws IOException, WebApplicationException {
+                       OutputStream output) throws IOException {
         try {
             final Configuration configuration = configurationCache.getUnchecked(view.getClass());
             final Charset charset = view.getCharset().or(Charset.forName(configuration.getEncoding(locale)));

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -107,7 +107,7 @@ public Map<String, Map<String, String>> getViewConfiguration(T configuration) {
     @Override
     public void run(T configuration, Environment environment) throws Exception {
         Map<String, Map<String, String>> options = getViewConfiguration(configuration);
-        for(ViewRenderer viewRenderer : viewRenderers) {
+        for (ViewRenderer viewRenderer : viewRenderers) {
             Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
             viewRenderer.configure(firstNonNull(viewOptions, Collections.<String, String>emptyMap()));
         }

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewMessageBodyWriter.java
Patch:
@@ -67,7 +67,7 @@ public void writeTo(View t,
                         Annotation[] annotations,
                         MediaType mediaType,
                         MultivaluedMap<String, Object> httpHeaders,
-                        OutputStream entityStream) throws IOException, WebApplicationException {
+                        OutputStream entityStream) throws IOException {
         final Timer.Context context = metricRegistry.timer(name(t.getClass(), "rendering")).time();
         try {
             for (ViewRenderer renderer : renderers) {

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewRenderer.java
Patch:
@@ -30,7 +30,7 @@ public interface ViewRenderer {
      */
     void render(View view,
                 Locale locale,
-                OutputStream output) throws IOException, WebApplicationException;
+                OutputStream output) throws IOException;
 
     /**
       * options for configuring the view renderer

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java
Patch:
@@ -17,7 +17,7 @@ public AuthDynamicFeature(ContainerRequestFilter authFilter) {
     @Override
     public void configure(ResourceInfo resourceInfo, FeatureContext context) {
         AnnotatedMethod am = new AnnotatedMethod(resourceInfo.getResourceMethod());
-        if(am.isAnnotationPresent(RolesAllowed.class) || am.isAnnotationPresent(DenyAll.class)) {
+        if (am.isAnnotationPresent(RolesAllowed.class) || am.isAnnotationPresent(DenyAll.class)) {
             context.register(authFilter);
         }
     }

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFilter.java
Patch:
@@ -10,7 +10,7 @@
 import java.security.Principal;
 
 @Priority(Priorities.AUTHENTICATION)
-public abstract class AuthFilter<C, P extends Principal> implements ContainerRequestFilter{
+public abstract class AuthFilter<C, P extends Principal> implements ContainerRequestFilter {
     protected String prefix;
     protected String realm;
     protected Authenticator<C, P> authenticator;
@@ -55,7 +55,7 @@ public Principal getPrincipal() {
         }
     }
 
-    public static abstract class AuthFilterBuilder<C, P extends Principal, T extends AuthFilter<C, P>, A extends Authenticator<C, P>> {
+    public abstract static class AuthFilterBuilder<C, P extends Principal, T extends AuthFilter<C, P>, A extends Authenticator<C, P>> {
         protected String realm = "realm";
         protected String prefix = "Basic";
         protected Authenticator<C, P> authenticator;

File: dropwizard-auth/src/main/java/io/dropwizard/auth/chained/ChainedAuthFilter.java
Patch:
@@ -46,7 +46,7 @@ public void filter(ContainerRequestContext containerRequestContext) throws IOExc
                     return;
                 }
             } catch (WebApplicationException e) {
-                if(firstException == null) {
+                if (firstException == null) {
                     firstException = e;
                 }
             }

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationFactoryFactory.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 public interface ConfigurationFactoryFactory<T> {
-    public ConfigurationFactory<T> create(Class<T> klass,
+    ConfigurationFactory<T> create(Class<T> klass,
             Validator validator,
             ObjectMapper objectMapper,
             String propertyPrefix);

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationSourceProvider.java
Patch:
@@ -16,6 +16,6 @@ public interface ConfigurationSourceProvider {
      * @return an {@link InputStream}
      * @throws IOException if there is an error reading the data at {@code path}
      */
-    public InputStream open(String path) throws IOException;
+    InputStream open(String path) throws IOException;
 
 }

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/EnvironmentVariableLookup.java
Patch:
@@ -45,4 +45,4 @@ public String lookup(String key) {
 
         return value;
     }
-}
\ No newline at end of file
+}

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/OptionalContainerFactory.java
Patch:
@@ -18,7 +18,7 @@ public ContainerBuilder<Optional<?>> newContainerBuilderFor(Class<?> type) {
 
     private static class OptionalContainerBuilder implements ContainerBuilder<Optional<?>> {
 
-        Optional<?> optional = Optional.absent();
+        private Optional<?> optional = Optional.absent();
 
         @Override
         public ContainerBuilder<Optional<?>> add(Object it) {

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/jersey/LoggingSQLExceptionMapper.java
Patch:
@@ -24,7 +24,7 @@ protected void logException(long id, SQLException exception) {
     }
 
     @VisibleForTesting
-    static void setLogger(Logger newLogger){
-       logger = newLogger;
+    static void setLogger(Logger newLogger) {
+        logger = newLogger;
     }
 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -221,7 +221,7 @@ public int compare(EndpointLogLine endpointA, EndpointLogLine endpointB) {
     }
 
     private static class ComponentLoggingListener implements ApplicationEventListener {
-        final DropwizardResourceConfig config;
+        private final DropwizardResourceConfig config;
 
         public ComponentLoggingListener(DropwizardResourceConfig config) {
             this.config = config;
@@ -230,7 +230,7 @@ public ComponentLoggingListener(DropwizardResourceConfig config) {
         @Override
         public void onEvent(ApplicationEvent event) {
             if (event.getType() == ApplicationEvent.Type.INITIALIZATION_APP_FINISHED) {
-                this.config.logComponents();
+                config.logComponents();
             }
         }
 

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/caching/CacheControlledResponseFeature.java
Patch:
@@ -32,7 +32,7 @@ private static class CacheControlledResponseFilter implements ContainerResponseF
         private static final int ONE_YEAR_IN_SECONDS = (int) TimeUnit.DAYS.toSeconds(365);
         private String cacheResponseHeader;
 
-        public CacheControlledResponseFilter (CacheControl control) {
+        public CacheControlledResponseFilter(CacheControl control) {
             final javax.ws.rs.core.CacheControl cacheControl = new javax.ws.rs.core.CacheControl();
             cacheControl.setPrivate(control.isPrivate());
             cacheControl.setNoCache(control.noCache());

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/EarlyEofExceptionMapper.java
Patch:
@@ -26,4 +26,4 @@ public Response toResponse(EofException e) {
 
         return Response.status(Response.Status.BAD_REQUEST).build();
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamBinder.java
Patch:
@@ -11,4 +11,4 @@ protected void configure() {
         // Param converter providers
         bind(OptionalParamConverterProvider.class).to(ParamConverterProvider.class).in(Singleton.class);
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamConverterProvider.java
Patch:
@@ -42,7 +42,7 @@ public T fromString(final String value) {
                     }
 
                     @Override
-                    public String toString(final T value) throws IllegalArgumentException {
+                    public String toString(final T value) {
                         return value.toString();
                     }
                 };
@@ -65,7 +65,7 @@ public Object apply(final String s) {
                         }
 
                         @Override
-                        public String toString(final T value) throws IllegalArgumentException {
+                        public String toString(final T value) {
                             return value.toString();
                         }
                     };
@@ -75,4 +75,4 @@ public String toString(final T value) throws IllegalArgumentException {
 
         return null;
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/guava/OptionalParamFeature.java
Patch:
@@ -9,4 +9,4 @@ public boolean configure(final FeatureContext context) {
         context.register(new OptionalParamBinder());
         return true;
     }
-}
\ No newline at end of file
+}

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/gzip/ConfiguredGZipEncoder.java
Patch:
@@ -40,7 +40,7 @@ public void filter(ClientRequestContext context) throws IOException {
     }
 
     @Override
-    public final void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException {
+    public final void aroundWriteTo(WriterInterceptorContext context) throws IOException {
         String contentEncoding = (String) context.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING);
         if ((contentEncoding != null) &&
                 (contentEncoding.equals("gzip") || contentEncoding.equals("x-gzip"))) {

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpsConnectorFactory.java
Patch:
@@ -516,12 +516,12 @@ public void setValidateCerts(boolean validateCerts) {
         this.validateCerts = validateCerts;
     }
 
-    @ValidationMethod(message="keyStorePath should not be null")
+    @ValidationMethod(message = "keyStorePath should not be null")
     public boolean isValidKeyStorePath() {
         return keyStoreType.startsWith("Windows-") || keyStorePath != null;
     }
 
-    @ValidationMethod(message="keyStorePassword should not be null or empty")
+    @ValidationMethod(message = "keyStorePassword should not be null or empty")
     public boolean isValidKeyStorePassword() {
         return keyStoreType.startsWith("Windows-") ||
                 !Strings.isNullOrEmpty(keyStorePassword);

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/RoutingHandler.java
Patch:
@@ -19,8 +19,8 @@ public class RoutingHandler extends AbstractHandler {
      * ImmutableMap-backed implementation it was ~54us vs. ~4500us for 1,000,000 iterations.
      */
     private static class Entry {
-        final Connector connector;
-        final Handler handler;
+        private final Connector connector;
+        private final Handler handler;
 
         private Entry(Connector connector, Handler handler) {
             this.connector = connector;

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/setup/ServletEnvironment.java
Patch:
@@ -144,7 +144,7 @@ public void setBaseResource(Resource baseResource) {
      * @param resourceBase A string representing the base resource for the
      *                     context. Any string accepted by Resource.newResource(String)
      *                     may be passed and the call is equivalent to
-     *                     {@link setBaseResource(newResource(resourceBase))}
+     *                     {@link #setBaseResource(Resource)}}
      */
     public void setResourceBase(String resourceBase) {
         handler.setResourceBase(resourceBase);

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/Managed.java
Patch:
@@ -10,12 +10,12 @@ public interface Managed {
      *
      * @throws Exception if something goes wrong; this will halt the application startup.
      */
-    public void start() throws Exception;
+    void start() throws Exception;
 
     /**
      * Stops the object. Called <i>after</i> the application is no longer accepting requests.
      *
      * @throws Exception if something goes wrong.
      */
-    public void stop() throws Exception;
+    void stop() throws Exception;
 }

File: dropwizard-lifecycle/src/main/java/io/dropwizard/lifecycle/setup/ExecutorServiceBuilder.java
Patch:
@@ -89,7 +89,7 @@ private boolean isBoundedQueue() {
     }
 
     @VisibleForTesting
-    static void setLog(Logger newLog){
+    static void setLog(Logger newLog) {
        log = newLog;
     }
 }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/BootstrapLogging.java
Patch:
@@ -26,6 +26,9 @@ public class BootstrapLogging {
     private static boolean bootstrapped = false;
     private static final Lock bootstrappingLock = new ReentrantLock();
 
+    private BootstrapLogging() {
+    }
+
     // initially configure for WARN+ console logging
     public static void bootstrap() {
         bootstrap(Level.WARN);

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingUtil.java
Patch:
@@ -18,6 +18,9 @@ public class LoggingUtil {
     private static boolean julHijacked = false;
     private static final Lock julHijackingLock = new ReentrantLock();
 
+    private LoggingUtil() {
+    }
+
     /**
      * Acquires the logger context.
      * <p/>

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -96,14 +96,14 @@ public enum Facility {
     private static final String LOG_TOKEN_PID = "%pid";
 
     private static final Pattern PID_PATTERN = Pattern.compile("(\\d+)@");
-    private static String PID = "";
+    private static String pid = "";
 
     // make an attempt to get the PID of the process
     // this will only work on UNIX platforms; for others, the PID will be "unknown"
     static {
         final Matcher matcher = PID_PATTERN.matcher(ManagementFactory.getRuntimeMXBean().getName());
         if (matcher.find()) {
-            PID = "[" + matcher.group(1) + "]";
+            pid = "[" + matcher.group(1) + "]";
         }
     }
 
@@ -204,7 +204,7 @@ public Appender<ILoggingEvent> build(LoggerContext context, String applicationNa
         final SyslogAppender appender = new SyslogAppender();
         appender.setName("syslog-appender");
         appender.setContext(context);
-        appender.setSuffixPattern(logFormat.replaceAll(LOG_TOKEN_PID, PID).replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
+        appender.setSuffixPattern(logFormat.replaceAll(LOG_TOKEN_PID, pid).replaceAll(LOG_TOKEN_NAME, Matcher.quoteReplacement(applicationName)));
         appender.setSyslogHost(host);
         appender.setPort(port);
         appender.setFacility(facility.toString().toLowerCase(Locale.ENGLISH));

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DefaultLoggingFactoryPrintErrorMessagesTest.java
Patch:
@@ -61,14 +61,14 @@ private String configureAndGetOutputWrittenToErrorStream() throws UnsupportedEnc
 
     @Test
     public void testWhenUsingDefaultConstructor_SystemErrIsSet() throws Exception {
-        PrintStream configurationErrorsStream = new DefaultLoggingFactory().configurationErrorsStream;
+        PrintStream configurationErrorsStream = new DefaultLoggingFactory().getConfigurationErrorsStream();
 
         assertThat(configurationErrorsStream).isSameAs(System.err);
     }
 
     @Test
     public void testWhenUsingDefaultConstructor_StaticILoggerFactoryIsSet() throws Exception {
-        LoggerContext loggerContext = new DefaultLoggingFactory().loggerContext;
+        LoggerContext loggerContext = new DefaultLoggingFactory().getLoggerContext();
 
         assertThat(loggerContext).isSameAs(LoggerFactory.getILoggerFactory());
     }

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -83,11 +83,11 @@ private CloseableLiquibase openLiquibase(final DataSourceFactory dataSourceFacto
         final String catalogName = namespace.getString("catalog");
         final String schemaName = namespace.getString("schema");
 
-        if(database.supportsCatalogs() && catalogName != null) {
+        if (database.supportsCatalogs() && catalogName != null) {
             database.setDefaultCatalogName(catalogName);
             database.setOutputDefaultCatalog(true);
         }
-        if(database.supportsSchemas() && schemaName != null) {
+        if (database.supportsSchemas() && schemaName != null) {
             database.setDefaultSchemaName(schemaName);
             database.setOutputDefaultSchema(true);
         }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardAppRule.java
Patch:
@@ -44,7 +44,7 @@ public DropwizardAppRule(DropwizardTestSupport<C> testSupport) {
     }
 
     public DropwizardAppRule<C> addListener(final ServiceListener<C> listener) {
-        this.testSupport.addListener(new DropwizardTestSupport.ServiceListener<C>(){
+        this.testSupport.addListener(new DropwizardTestSupport.ServiceListener<C>() {
 
             public void onRun(C configuration, Environment environment, DropwizardTestSupport<C> rule) throws Exception {
                 listener.onRun(configuration, environment, DropwizardAppRule.this);
@@ -117,7 +117,7 @@ public void onStop(DropwizardAppRule<T> rule) throws Exception {
         }
     }
 
-    public DropwizardTestSupport<C> getTestSupport(){
+    public DropwizardTestSupport<C> getTestSupport() {
         return testSupport;
     }
 }

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java
Patch:
@@ -174,18 +174,17 @@ public void evaluate() throws Throwable {
                 try {
                     test = new JerseyTest() {
                         @Override
-                        protected TestContainerFactory getTestContainerFactory() throws TestContainerException {
+                        protected TestContainerFactory getTestContainerFactory() {
                             return testContainerFactory;
                         }
 
                         @Override
                         protected DeploymentContext configureDeployment() {
                             final ResourceTestResourceConfig resourceConfig = new ResourceTestResourceConfig(ruleId, rule);
-                            ServletDeploymentContext deploymentContext = ServletDeploymentContext.builder(resourceConfig)
+                            return ServletDeploymentContext.builder(resourceConfig)
                                     .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, ResourceTestResourceConfig.class.getName())
                                     .initParam(ResourceTestResourceConfig.RULE_ID, ruleId)
                                     .build();
-                            return deploymentContext;
                         }
 
                         @Override

File: dropwizard-validation/src/main/java/io/dropwizard/validation/ConstraintViolations.java
Patch:
@@ -63,6 +63,8 @@ public static <T extends ConstraintViolation<?>> int determineStatus(Set<T> viol
                         return 500;
                     case PARAMETER:
                         return 400;
+                    default:
+                        continue;
                 }
             }
         }

File: dropwizard-views-freemarker/src/main/java/io/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -38,7 +38,7 @@ public Configuration load(Class<?> key) throws Exception {
             configuration.loadBuiltInEncodingMap();
             configuration.setDefaultEncoding(Charsets.UTF_8.name());
             configuration.setClassForTemplateLoading(key, "/");
-            for(Map.Entry<String, String> entry : baseConfig.entrySet()) {
+            for (Map.Entry<String, String> entry : baseConfig.entrySet()) {
                 configuration.setSetting(entry.getKey(), entry.getValue());
             }
             return configuration;
@@ -66,7 +66,7 @@ public boolean isRenderable(View view) {
     @Override
     public void render(View view,
                        Locale locale,
-                       OutputStream output) throws IOException, WebApplicationException {
+                       OutputStream output) throws IOException {
         try {
             final Configuration configuration = configurationCache.getUnchecked(view.getClass());
             final Charset charset = view.getCharset().or(Charset.forName(configuration.getEncoding(locale)));

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -107,7 +107,7 @@ public Map<String, Map<String, String>> getViewConfiguration(T configuration) {
     @Override
     public void run(T configuration, Environment environment) throws Exception {
         Map<String, Map<String, String>> options = getViewConfiguration(configuration);
-        for(ViewRenderer viewRenderer : viewRenderers) {
+        for (ViewRenderer viewRenderer : viewRenderers) {
             Map<String, String> viewOptions = options.get(viewRenderer.getSuffix());
             viewRenderer.configure(firstNonNull(viewOptions, Collections.<String, String>emptyMap()));
         }

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewMessageBodyWriter.java
Patch:
@@ -67,7 +67,7 @@ public void writeTo(View t,
                         Annotation[] annotations,
                         MediaType mediaType,
                         MultivaluedMap<String, Object> httpHeaders,
-                        OutputStream entityStream) throws IOException, WebApplicationException {
+                        OutputStream entityStream) throws IOException {
         final Timer.Context context = metricRegistry.timer(name(t.getClass(), "rendering")).time();
         try {
             for (ViewRenderer renderer : renderers) {

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewRenderer.java
Patch:
@@ -30,7 +30,7 @@ public interface ViewRenderer {
      */
     void render(View view,
                 Locale locale,
-                OutputStream output) throws IOException, WebApplicationException;
+                OutputStream output) throws IOException;
 
     /**
       * options for configuring the view renderer

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -204,7 +204,7 @@ protected ConfiguredCloseableHttpClient createClient(
             final org.apache.http.impl.client.HttpClientBuilder builder,
             final InstrumentedHttpClientConnectionManager manager,
             final String name) {
-        final String cookiePolicy = configuration.isCookiesEnabled() ? CookieSpecs.BEST_MATCH : CookieSpecs.IGNORE_COOKIES;
+        final String cookiePolicy = configuration.isCookiesEnabled() ? CookieSpecs.DEFAULT : CookieSpecs.IGNORE_COOKIES;
         final Integer timeout = (int) configuration.getTimeout().toMilliseconds();
         final Integer connectionTimeout = (int) configuration.getConnectionTimeout().toMilliseconds();
         final Integer connectionRequestTimeout = (int) configuration.getConnectionRequestTimeout().toMilliseconds();
@@ -222,7 +222,6 @@ protected ConfiguredCloseableHttpClient createClient(
                 .setSocketTimeout(timeout)
                 .setConnectTimeout(connectionTimeout)
                 .setConnectionRequestTimeout(connectionRequestTimeout)
-                .setStaleConnectionCheckEnabled(false)
                 .build();
         final SocketConfig socketConfig = SocketConfig.custom()
                 .setTcpNoDelay(true)
@@ -317,6 +316,7 @@ protected InstrumentedHttpClientConnectionManager configureConnectionManager(
             InstrumentedHttpClientConnectionManager connectionManager) {
         connectionManager.setDefaultMaxPerRoute(configuration.getMaxConnectionsPerRoute());
         connectionManager.setMaxTotal(configuration.getMaxConnections());
+        connectionManager.setValidateAfterInactivity(0);
         return connectionManager;
     }
 }

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -209,7 +209,7 @@ public void usesBestMatchCookiePolicyIfCookiesAreEnabled() throws Exception {
         assertThat(builder.using(configuration).createClient(apacheBuilder, connectionManager, "test")).isNotNull();
 
         assertThat(((RequestConfig) spyHttpClientBuilderField("defaultRequestConfig", apacheBuilder)).getCookieSpec())
-                .isEqualTo(CookieSpecs.BEST_MATCH);
+                .isEqualTo(CookieSpecs.DEFAULT);
     }
 
     @Test

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.http.conn.routing.HttpRoutePlanner;
 import org.apache.http.conn.socket.ConnectionSocketFactory;
 import org.apache.http.conn.socket.PlainConnectionSocketFactory;
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
 import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
 import org.apache.http.impl.client.SystemDefaultCredentialsProvider;
@@ -278,8 +279,7 @@ public X509Certificate[] getAcceptedIssuers() {
         }}, null);
         final Registry<ConnectionSocketFactory> customRegistry = RegistryBuilder.<ConnectionSocketFactory>create()
                 .register("http", PlainConnectionSocketFactory.getSocketFactory())
-                .register("https", new SSLConnectionSocketFactory(ctx,
-                        SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER))
+                .register("https", new SSLConnectionSocketFactory(ctx, new NoopHostnameVerifier()))
                 .build();
         builder.using(customRegistry);
         verify(apacheHttpClientBuilder).using(customRegistry);

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapper.java
Patch:
@@ -48,7 +48,7 @@ public Response toResponse(JsonProcessingException exception) {
         /*
          * Otherwise, it's those pesky users.
          */
-        LOGGER.debug("Unable to process JSON", exception);
+        LOGGER.warn("Unable to process JSON", exception);
         final ErrorMessage errorMessage = new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),
                 "Unable to process JSON", showDetails ? message : null);
         return Response.status(Response.Status.BAD_REQUEST)

File: dropwizard-views-mustache/src/main/java/io/dropwizard/views/mustache/MustacheViewRenderer.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.views.mustache;
 
+import com.github.mustachejava.DefaultMustacheFactory;
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheException;
 import com.github.mustachejava.MustacheFactory;
@@ -32,7 +33,7 @@ public MustacheViewRenderer() {
                                      .build(new CacheLoader<Class<? extends View>, MustacheFactory>() {
                                          @Override
                                          public MustacheFactory load(Class<? extends View> key) throws Exception {
-                                             return new PerClassMustacheFactory(key);
+                                             return new DefaultMustacheFactory(new PerClassMustacheResolver(key));
                                          }
                                      });
     }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWork.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * When annotating a Jersey resource method, wraps the method in a Hibernate session.
  *
- * @see UnitOfWorkRequestDispatcher
+ * @see UnitOfWorkApplicationListener
  */
 @Target(METHOD)
 @Retention(RUNTIME)

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWork.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * When annotating a Jersey resource method, wraps the method in a Hibernate session.
  *
- * @see UnitOfWorkRequestDispatcher
+ * @see UnitOfWorkApplicationListener
  */
 @Target(METHOD)
 @Retention(RUNTIME)

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicAuthProviderTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.auth.Authenticator;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
@@ -36,7 +36,7 @@
 public class BasicAuthProviderTest extends JerseyTest {
     final private static String VALID_ROLE = "ADMIN";
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicCustomAuthProviderTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.auth.*;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
@@ -34,7 +34,7 @@
 public class BasicCustomAuthProviderTest extends JerseyTest {
     final private static String VALID_ROLE = "ADMIN";
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-auth/src/test/java/io/dropwizard/auth/chained/ChainedAuthProviderTest.java
Patch:
@@ -12,7 +12,7 @@
 import io.dropwizard.auth.oauth.OAuthCredentialAuthFilter;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
@@ -40,7 +40,7 @@
 public class ChainedAuthProviderTest extends JerseyTest {
     private static final String ADMIN_ROLE = "ADMIN";
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthCustomProviderTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.auth.AuthResource;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
@@ -25,7 +25,7 @@
 
 public class OAuthCustomProviderTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.auth.AuthResource;
 import io.dropwizard.auth.util.AuthUtil;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
@@ -26,7 +26,7 @@
 
 public class OAuthProviderTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-core/src/main/java/io/dropwizard/Configuration.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.common.base.MoreObjects;
+import io.dropwizard.logging.DefaultLoggingFactory;
 import io.dropwizard.logging.LoggingFactory;
 import io.dropwizard.metrics.MetricsFactory;
 import io.dropwizard.server.DefaultServerFactory;
@@ -65,7 +66,7 @@ public class Configuration {
 
     @Valid
     @NotNull
-    private LoggingFactory logging = new LoggingFactory();
+    private LoggingFactory logging = new DefaultLoggingFactory();
 
     @Valid
     @NotNull

File: dropwizard-core/src/test/java/io/dropwizard/setup/AdminEnvironmentTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.google.common.collect.ImmutableMultimap;
 import io.dropwizard.jetty.MutableServletContextHandler;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.servlets.tasks.Task;
 import org.eclipse.jetty.server.Server;
 import org.junit.Test;
@@ -16,7 +16,7 @@
 
 public class AdminEnvironmentTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     private final MutableServletContextHandler handler = new MutableServletContextHandler();

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.db.ManagedPooledDataSource;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.setup.Environment;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
@@ -22,7 +22,7 @@
 
 public class SessionFactoryFactoryTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     private final SessionFactoryFactory factory = new SessionFactoryFactory();

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/JDBITest.java
Patch:
@@ -9,7 +9,7 @@
 import io.dropwizard.db.ManagedDataSource;
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.setup.Environment;
 import org.joda.time.DateTime;
 import org.junit.After;
@@ -34,7 +34,7 @@ public class JDBITest {
     private final DataSourceFactory hsqlConfig = new DataSourceFactory();
 
     {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
         hsqlConfig.setUrl("jdbc:h2:mem:DbTest-" + System.currentTimeMillis());
         hsqlConfig.setUser("sa");
         hsqlConfig.setDriverClass("org.h2.Driver");

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/AsyncServletTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.dummy.DummyResource;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -15,7 +15,7 @@
 
 public class AsyncServletTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/DropwizardResourceConfigTest.java
Patch:
@@ -2,7 +2,8 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.dummy.DummyResource;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
+
 import java.util.regex.Pattern;
 import javax.ws.rs.DELETE;
 import javax.ws.rs.POST;
@@ -16,7 +17,7 @@
 
 public class DropwizardResourceConfigTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     private DropwizardResourceConfig rc;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/JerseyContentTypeTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.dummy.DummyResource;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -15,7 +15,7 @@
 
 public class JerseyContentTypeTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/caching/CacheControlledResponseFeatureTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.jersey.caching;
 
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 
 import javax.ws.rs.core.Application;
 import javax.ws.rs.core.HttpHeaders;
@@ -18,7 +18,7 @@
 
 public class CacheControlledResponseFeatureTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -17,7 +17,7 @@
 
 public class LoggingExceptionMapperTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/AllowedMethodsFilterTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.collect.ImmutableMap;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.server.ServerProperties;
 import org.glassfish.jersey.servlet.ServletProperties;
@@ -23,7 +23,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.ws.rs.client.Entity;
-import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import java.io.IOException;
@@ -38,7 +37,7 @@
 
 public class AllowedMethodsFilterTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     private static final int DISALLOWED_STATUS_CODE = Response.Status.METHOD_NOT_ALLOWED.getStatusCode();

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalCookieParamResourceTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.params.UUIDParam;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -19,7 +19,7 @@
 
 public class OptionalCookieParamResourceTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalFormParamResourceTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.params.UUIDParam;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.internal.util.collection.MultivaluedStringMap;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
@@ -23,7 +23,7 @@
 
 public class OptionalFormParamResourceTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalHeaderParamResourceTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.params.UUIDParam;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -19,7 +19,7 @@
 
 public class OptionalHeaderParamResourceTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalMessageBodyWriterTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -23,7 +23,7 @@
 
 public class OptionalMessageBodyWriterTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamResourceTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.base.Optional;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.params.UUIDParam;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -19,7 +19,7 @@
 
 public class OptionalQueryParamResourceTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.ImmutableList;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
@@ -22,7 +22,7 @@
 
 public class JsonProcessingExceptionMapperTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/FlashFactoryTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.server.ServerProperties;
 import org.glassfish.jersey.servlet.ServletProperties;
@@ -17,7 +17,6 @@
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.client.Invocation;
-import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.NewCookie;
 import javax.ws.rs.core.Response;
@@ -27,7 +26,7 @@
 
 public class FlashFactoryTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/HttpSessionFactoryTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.server.ServerProperties;
 import org.glassfish.jersey.servlet.ServletProperties;
@@ -26,7 +26,7 @@
 
 public class HttpSessionFactoryTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
@@ -19,7 +19,7 @@
 
 public class ConstraintViolationExceptionMapperTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-logging/src/test/java/io/dropwizard/logging/ConsoleAppenderFactoryTest.java
Patch:
@@ -13,7 +13,7 @@
 
 public class ConsoleAppenderFactoryTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Test

File: dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
Patch:
@@ -10,7 +10,6 @@
 import ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.util.Size;
-import io.dropwizard.util.SizeUnit;
 import org.junit.Test;
 import org.slf4j.LoggerFactory;
 
@@ -19,7 +18,7 @@
 public class FileAppenderFactoryTest {
 
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Test

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.io.Resources;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.Jackson;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.util.Duration;
 import org.junit.Before;
 import org.junit.Test;
@@ -16,7 +16,7 @@
 
 public class MetricsFactoryTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/ResourceTestRule.java
Patch:
@@ -9,7 +9,7 @@
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.servlet.ServletProperties;
 import org.glassfish.jersey.test.DeploymentContext;
@@ -35,7 +35,7 @@
 public class ResourceTestRule implements TestRule {
 
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     public static class Builder {

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/FreemarkerViewRendererTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.collect.ImmutableList;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderer;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -21,7 +21,7 @@
 
 public class FreemarkerViewRendererTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Path("/test/")

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/MultipleContentTypeTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.collect.ImmutableList;
 import io.dropwizard.jackson.Jackson;
 import io.dropwizard.jersey.DropwizardResourceConfig;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.views.View;
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderer;
@@ -31,7 +31,7 @@
 
 public class MultipleContentTypeTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Override

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.collect.ImmutableList;
-import io.dropwizard.logging.LoggingFactory;
+import io.dropwizard.logging.BootstrapLogging;
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderer;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -22,7 +22,7 @@
 
 public class MustacheViewRendererTest extends JerseyTest {
     static {
-        LoggingFactory.bootstrap();
+        BootstrapLogging.bootstrap();
     }
 
     @Path("/test/")

File: dropwizard-auth/src/test/java/io/dropwizard/auth/ChainedAuthProviderTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -45,6 +46,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return ServletDeploymentContext.builder(new ChainedAuthTestResourceConfig())
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, ChainedAuthTestResourceConfig.class.getName())
                 .build();

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicAuthProviderTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -46,6 +47,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return ServletDeploymentContext.builder(new BasicAuthTestResourceConfig())
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, BasicAuthTestResourceConfig.class.getName())
                 .build();

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicCustomAuthProviderTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -44,6 +45,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return ServletDeploymentContext.builder(new BasicAuthTestResourceConfig())
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, BasicAuthTestResourceConfig.class.getName())
                 .build();

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthCustomProviderTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -35,6 +36,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return ServletDeploymentContext.builder(new BasicAuthTestResourceConfig())
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, BasicAuthTestResourceConfig.class.getName())
                 .build();

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -36,6 +37,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return ServletDeploymentContext.builder(new BasicAuthTestResourceConfig())
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, BasicAuthTestResourceConfig.class.getName())
                 .build();

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -14,6 +14,7 @@
 import io.dropwizard.setup.Environment;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.joda.time.DateTime;
@@ -101,6 +102,8 @@ public void setUp() throws Exception {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
+
         final MetricRegistry metricRegistry = new MetricRegistry();
         final SessionFactoryFactory factory = new SessionFactoryFactory();
         final DataSourceFactory dbConfig = new DataSourceFactory();

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/AsyncServletTest.java
Patch:
@@ -4,6 +4,7 @@
 import io.dropwizard.jersey.dummy.DummyResource;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.core.Application;
@@ -19,6 +20,7 @@ public class AsyncServletTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(DummyResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/JerseyContentTypeTest.java
Patch:
@@ -4,6 +4,7 @@
 import io.dropwizard.jersey.dummy.DummyResource;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.core.Application;
@@ -19,6 +20,7 @@ public class JerseyContentTypeTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(DummyResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/caching/CacheControlledResponseFeatureTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import com.codahale.metrics.MetricRegistry;
@@ -22,6 +23,7 @@ public class CacheControlledResponseFeatureTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
         rc = rc.register(CachingResource.class);
         return rc;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -4,6 +4,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.WebApplicationException;
@@ -21,6 +22,7 @@ public class LoggingExceptionMapperTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(DefaultLoggingExceptionMapper.class)
                 .register(DefaultJacksonMessageBodyProvider.class)

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/filter/AllowedMethodsFilterTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -22,6 +23,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.ws.rs.client.Entity;
+import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import java.io.IOException;
@@ -62,6 +64,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         final ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
 
         final Map<String, String> filterParams = ImmutableMap.of(

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalCookieParamResourceTest.java
Patch:
@@ -6,6 +6,7 @@
 import io.dropwizard.jersey.params.UUIDParam;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.BadRequestException;
@@ -23,6 +24,7 @@ public class OptionalCookieParamResourceTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(OptionalCookieParamResource.class)
                 .register(MyMessageParamConverterProvider.class);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalFormParamResourceTest.java
Patch:
@@ -7,6 +7,7 @@
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.internal.util.collection.MultivaluedStringMap;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.FormParam;
@@ -27,6 +28,7 @@ public class OptionalFormParamResourceTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(OptionalFormParamResource.class)
                 .register(MyMessageParamConverterProvider.class);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalHeaderParamResourceTest.java
Patch:
@@ -6,6 +6,7 @@
 import io.dropwizard.jersey.params.UUIDParam;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.BadRequestException;
@@ -23,6 +24,7 @@ public class OptionalHeaderParamResourceTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(OptionalHeaderParamResource.class)
                 .register(MyMessageParamConverterProvider.class);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalMessageBodyWriterTest.java
Patch:
@@ -5,6 +5,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.FormParam;
@@ -27,6 +28,7 @@ public class OptionalMessageBodyWriterTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(OptionalReturnResource.class);
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamResourceTest.java
Patch:
@@ -6,6 +6,7 @@
 import io.dropwizard.jersey.params.UUIDParam;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.BadRequestException;
@@ -23,6 +24,7 @@ public class OptionalQueryParamResourceTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(OptionalQueryParamResource.class)
                 .register(MyMessageParamConverterProvider.class);

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -8,6 +8,7 @@
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.validation.Validation;
@@ -26,6 +27,7 @@ public class JsonProcessingExceptionMapperTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .packages("io.dropwizard.jersey.jackson");
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/FlashFactoryTest.java
Patch:
@@ -9,13 +9,15 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
 import org.junit.Test;
 
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.client.Invocation;
+import javax.ws.rs.core.Application;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.NewCookie;
 import javax.ws.rs.core.Response;
@@ -34,9 +36,9 @@ protected TestContainerFactory getTestContainerFactory()
         return new GrizzlyWebTestContainerFactory();
     }
 
-
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         final ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
 
         return ServletDeploymentContext.builder(rc)

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/HttpSessionFactoryTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.glassfish.jersey.test.DeploymentContext;
 import org.glassfish.jersey.test.JerseyTest;
 import org.glassfish.jersey.test.ServletDeploymentContext;
+import org.glassfish.jersey.test.TestProperties;
 import org.glassfish.jersey.test.grizzly.GrizzlyWebTestContainerFactory;
 import org.glassfish.jersey.test.spi.TestContainerException;
 import org.glassfish.jersey.test.spi.TestContainerFactory;
@@ -37,6 +38,7 @@ protected TestContainerFactory getTestContainerFactory()
 
     @Override
     protected DeploymentContext configureDeployment() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         final ResourceConfig rc = DropwizardResourceConfig.forTesting(new MetricRegistry());
         return ServletDeploymentContext.builder(rc)
                 .initParam(ServletProperties.JAXRS_APPLICATION_CLASS, DropwizardResourceConfig.class.getName())

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -4,6 +4,7 @@
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.logging.LoggingFactory;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.client.Entity;
@@ -23,6 +24,7 @@ public class ConstraintViolationExceptionMapperTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .packages("io.dropwizard.jersey.validation");
     }

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleConfigOverrideTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.testing.junit;
 
+import com.google.common.base.Optional;
 import org.junit.ClassRule;
 import org.junit.Test;
 
@@ -15,7 +16,7 @@ public class DropwizardAppRuleConfigOverrideTest {
     @ClassRule
     public static final DropwizardAppRule<TestConfiguration> RULE =
             new DropwizardAppRule<>(TestApplication.class, resourceFilePath("test-config.yaml"),
-                    config("message", "A new way to say Hooray!"));
+                    Optional.of("app-rule"), config("app-rule", "message", "A new way to say Hooray!"));
 
     @Test
     public void supportsConfigAttributeOverrides() {

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/MultipleContentTypeTest.java
Patch:
@@ -9,6 +9,7 @@
 import io.dropwizard.views.ViewMessageBodyWriter;
 import io.dropwizard.views.ViewRenderer;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.GET;
@@ -35,6 +36,7 @@ public class MultipleContentTypeTest extends JerseyTest {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         final ViewRenderer renderer = new FreemarkerViewRenderer();
         return DropwizardResourceConfig.forTesting(new MetricRegistry())
                 .register(new ViewMessageBodyWriter(new MetricRegistry(), ImmutableList.of(renderer)))

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -7,6 +7,7 @@
 import io.dropwizard.views.ViewRenderer;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.test.JerseyTest;
+import org.glassfish.jersey.test.TestProperties;
 import org.junit.Test;
 
 import javax.ws.rs.GET;
@@ -48,6 +49,7 @@ public BadView showBad() {
 
     @Override
     protected Application configure() {
+        forceSet(TestProperties.CONTAINER_PORT, "0");
         ResourceConfig config = new ResourceConfig();
         final ViewRenderer renderer = new MustacheViewRenderer();
         config.register(new ViewMessageBodyWriter(new MetricRegistry(), ImmutableList.of(renderer)));

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/ErrorMessage.java
Patch:
@@ -26,14 +26,17 @@ public ErrorMessage(@JsonProperty("code") int code, @JsonProperty("message") Str
         this.details = details;
     }
 
+    @JsonProperty("code")
     public Integer getCode() {
         return code;
     }
 
+    @JsonProperty("message")
     public String getMessage() {
         return message;
     }
 
+    @JsonProperty("details")
     public String getDetails() {
         return details;
     }

File: dropwizard-testing/src/test/java/io/dropwizard/testing/junit/DropwizardAppRuleConfigOverrideTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.testing.junit;
 
+import com.google.common.base.Optional;
 import org.junit.ClassRule;
 import org.junit.Test;
 
@@ -15,7 +16,7 @@ public class DropwizardAppRuleConfigOverrideTest {
     @ClassRule
     public static final DropwizardAppRule<TestConfiguration> RULE =
             new DropwizardAppRule<>(TestApplication.class, resourceFilePath("test-config.yaml"),
-                    config("message", "A new way to say Hooray!"));
+                    Optional.of("app-rule"), config("app-rule", "message", "A new way to say Hooray!"));
 
     @Test
     public void supportsConfigAttributeOverrides() {

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -318,7 +318,7 @@ public void throwsAnExceptionOnInvalidFiles() throws Exception {
                 assertThat(e.getMessage())
                         .endsWith(String.format(
                                 "factory-test-invalid.yml has an error:%n" +
-                                        "  * name must match \"[\\w]+[\\s]+[\\w]+([\\s][\\w]+)?\" (was Boop)%n"));
+                                        "  * name must match \"[\\w]+[\\s]+[\\w]+([\\s][\\w]+)?\"%n"));
             }
         }
     }

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationValidationExceptionTest.java
Patch:
@@ -36,7 +36,7 @@ public void formatsTheViolationsIntoAHumanReadableMessage() throws Exception {
         assertThat(e.getMessage())
                 .isEqualTo(String.format(
                         "config.yml has an error:%n" +
-                                "  * woo may not be null (was null)%n"
+                                "  * woo may not be null%n"
                 ));
     }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -34,6 +34,6 @@ public void returnsAnErrorMessage() throws Exception {
         final Response response = target("/valid/").request(MediaType.APPLICATION_JSON)
                 .post(Entity.entity("{}", MediaType.APPLICATION_JSON));
         assertThat(response.getStatus()).isEqualTo(422);
-        assertThat(response.readEntity(String.class)).isEqualTo("{\"errors\":[\"name may not be empty (was null)\"]}");
+        assertThat(response.readEntity(String.class)).isEqualTo("{\"errors\":[\"name may not be empty\"]}");
     }
 }

File: dropwizard-validation/src/test/java/io/dropwizard/validation/OneOfValidatorTest.java
Patch:
@@ -39,7 +39,7 @@ public void doesNotAllowOtherElements() throws Exception {
         example.basic = "four";
 
         assertThat(format(validator.validate(example)))
-                .containsOnly("basic must be one of [one, two, three] (was four)");
+                .containsOnly("basic must be one of [one, two, three]");
     }
 
     @Test

File: dropwizard-validation/src/test/java/io/dropwizard/validation/PortRangeValidatorTest.java
Patch:
@@ -51,22 +51,22 @@ public void rejectsNegativePorts() throws Exception {
         example.port = -1;
 
         assertThat(ConstraintViolations.format(validator.validate(example)))
-                .containsOnly("port must be between 1 and 65535 (was -1)");
+                .containsOnly("port must be between 1 and 65535");
     }
 
     @Test
     public void allowsForCustomMinimumPorts() throws Exception {
         example.otherPort = 8080;
 
         assertThat(ConstraintViolations.format(validator.validate(example)))
-                .containsOnly("otherPort must be between 10000 and 15000 (was 8080)");
+                .containsOnly("otherPort must be between 10000 and 15000");
     }
 
     @Test
     public void allowsForCustomMaximumPorts() throws Exception {
         example.otherPort = 16000;
 
         assertThat(ConstraintViolations.format(validator.validate(example)))
-                .containsOnly("otherPort must be between 10000 and 15000 (was 16000)");
+                .containsOnly("otherPort must be between 10000 and 15000");
     }
 }

File: dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
Patch:
@@ -73,7 +73,7 @@
  *         <td>(unlimited)</td>
  *         <td>
  *             The maximum size of the currently active file before a rollover is triggered. The value can be expressed
- *             in bytes, kilobytes, megabytes, gigabytes, and terabytesyp by appending B, K, MB, GB, or TB to the
+ *             in bytes, kilobytes, megabytes, gigabytes, and terabytes by appending B, K, MB, GB, or TB to the
  *             numeric value.  Examples include 100MB, 1GB, 1TB.  Sizes can also be spelled out, such as 100 megabytes,
  *             1 gigabyte, 1 terabyte.
  *         </td>

File: dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
Patch:
@@ -73,7 +73,7 @@
  *         <td>(unlimited)</td>
  *         <td>
  *             The maximum size of the currently active file before a rollover is triggered. The value can be expressed
- *             in bytes, kilobytes, megabytes, gigabytes, and terabytes using the by appending B, K, MB, GB, or TB to the
+ *             in bytes, kilobytes, megabytes, gigabytes, and terabytesyp by appending B, K, MB, GB, or TB to the
  *             numeric value.  Examples include 100MB, 1GB, 1TB.  Sizes can also be spelled out, such as 100 megabytes,
  *             1 gigabyte, 1 terabyte.
  *         </td>

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -318,7 +318,7 @@ public void throwsAnExceptionOnInvalidFiles() throws Exception {
                 assertThat(e.getMessage())
                         .endsWith(String.format(
                                 "factory-test-invalid.yml has an error:%n" +
-                                        "  * name must match \"[\\w]+[\\s]+[\\w]+([\\s][\\w]+)?\" (was Boop)%n"));
+                                        "  * name must match \"[\\w]+[\\s]+[\\w]+([\\s][\\w]+)?\"%n"));
             }
         }
     }

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationValidationExceptionTest.java
Patch:
@@ -36,7 +36,7 @@ public void formatsTheViolationsIntoAHumanReadableMessage() throws Exception {
         assertThat(e.getMessage())
                 .isEqualTo(String.format(
                         "config.yml has an error:%n" +
-                                "  * woo may not be null (was null)%n"
+                                "  * woo may not be null%n"
                 ));
     }
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -34,6 +34,6 @@ public void returnsAnErrorMessage() throws Exception {
         final Response response = target("/valid/").request(MediaType.APPLICATION_JSON)
                 .post(Entity.entity("{}", MediaType.APPLICATION_JSON));
         assertThat(response.getStatus()).isEqualTo(422);
-        assertThat(response.readEntity(String.class)).isEqualTo("{\"errors\":[\"name may not be empty (was null)\"]}");
+        assertThat(response.readEntity(String.class)).isEqualTo("{\"errors\":[\"name may not be empty\"]}");
     }
 }

File: dropwizard-validation/src/test/java/io/dropwizard/validation/OneOfValidatorTest.java
Patch:
@@ -39,7 +39,7 @@ public void doesNotAllowOtherElements() throws Exception {
         example.basic = "four";
 
         assertThat(format(validator.validate(example)))
-                .containsOnly("basic must be one of [one, two, three] (was four)");
+                .containsOnly("basic must be one of [one, two, three]");
     }
 
     @Test

File: dropwizard-validation/src/test/java/io/dropwizard/validation/PortRangeValidatorTest.java
Patch:
@@ -51,22 +51,22 @@ public void rejectsNegativePorts() throws Exception {
         example.port = -1;
 
         assertThat(ConstraintViolations.format(validator.validate(example)))
-                .containsOnly("port must be between 1 and 65535 (was -1)");
+                .containsOnly("port must be between 1 and 65535");
     }
 
     @Test
     public void allowsForCustomMinimumPorts() throws Exception {
         example.otherPort = 8080;
 
         assertThat(ConstraintViolations.format(validator.validate(example)))
-                .containsOnly("otherPort must be between 10000 and 15000 (was 8080)");
+                .containsOnly("otherPort must be between 10000 and 15000");
     }
 
     @Test
     public void allowsForCustomMaximumPorts() throws Exception {
         example.otherPort = 16000;
 
         assertThat(ConstraintViolations.format(validator.validate(example)))
-                .containsOnly("otherPort must be between 10000 and 15000 (was 16000)");
+                .containsOnly("otherPort must be between 10000 and 15000");
     }
 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JacksonMessageBodyProvider.java
Patch:
@@ -31,7 +31,7 @@
  * {@link JsonIgnoreType}.)
  */
 public class JacksonMessageBodyProvider extends JacksonJaxbJsonProvider {
-    private static final Logger LOGGER = LoggerFactory.getLogger(JsonProcessingExceptionMapper.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(JacksonMessageBodyProvider.class);
     /**
      * The default group array used in case any of the validate methods is called without a group.
      */

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -252,7 +252,7 @@ public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
         // create a tunnel through a proxy host if it's specified in the config
         ProxyConfiguration proxy = configuration.getProxyConfiguration();
         if (proxy != null) {
-            HttpHost httpHost = new HttpHost(proxy.getHost(), proxy.getPresentPort(), proxy.getPresentScheme());
+            HttpHost httpHost = new HttpHost(proxy.getHost(), proxy.getPort(), proxy.getScheme());
             builder.setRoutePlanner(new DefaultProxyRoutePlanner(httpHost));
             // if the proxy host requires authentication then add the host credentials to the credentials provider
             AuthConfiguration auth = proxy.getAuth();

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T> {
+public interface ConfiguredBundle<T extends Configuration> {
     /**
      * Initializes the environment.
      *
@@ -24,5 +24,5 @@ public interface ConfiguredBundle<T> {
      *
      * @param bootstrap the application bootstrap
      */
-    void initialize(Bootstrap<?> bootstrap);
+    void initialize(Bootstrap<? extends T> bootstrap);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -31,7 +31,7 @@ protected HibernateBundle(ImmutableList<Class<?>> entities,
     }
 
     @Override
-    public final void initialize(Bootstrap<?> bootstrap) {
+    public final void initialize(Bootstrap<? extends T> bootstrap) {
         bootstrap.getObjectMapper().registerModule(createHibernate4Module());
     }
 

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -115,7 +115,7 @@ public void run(T configuration, Environment environment) throws Exception {
     }
 
     @Override
-    public void initialize(Bootstrap<?> bootstrap) {
+    public void initialize(Bootstrap<? extends T> bootstrap) {
         // nothing doing
     }
 }

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T> {
+public interface ConfiguredBundle<T extends Configuration> {
     /**
      * Initializes the environment.
      *
@@ -24,5 +24,5 @@ public interface ConfiguredBundle<T> {
      *
      * @param bootstrap the application bootstrap
      */
-    void initialize(Bootstrap<?> bootstrap);
+    void initialize(Bootstrap<? extends T> bootstrap);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -31,7 +31,7 @@ protected HibernateBundle(ImmutableList<Class<?>> entities,
     }
 
     @Override
-    public final void initialize(Bootstrap<?> bootstrap) {
+    public final void initialize(Bootstrap<? extends T> bootstrap) {
         bootstrap.getObjectMapper().registerModule(createHibernate4Module());
     }
 

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -115,7 +115,7 @@ public void run(T configuration, Environment environment) throws Exception {
     }
 
     @Override
-    public void initialize(Bootstrap<?> bootstrap) {
+    public void initialize(Bootstrap<? extends T> bootstrap) {
         // nothing doing
     }
 }

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T extends Configuration> {
+public interface ConfiguredBundle<T> {
     /**
      * Initializes the environment.
      *
@@ -24,5 +24,5 @@ public interface ConfiguredBundle<T extends Configuration> {
      *
      * @param bootstrap the application bootstrap
      */
-    void initialize(Bootstrap<? extends T> bootstrap);
+    void initialize(Bootstrap<?> bootstrap);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -31,7 +31,7 @@ protected HibernateBundle(ImmutableList<Class<?>> entities,
     }
 
     @Override
-    public final void initialize(Bootstrap<? extends T> bootstrap) {
+    public final void initialize(Bootstrap<?> bootstrap) {
         bootstrap.getObjectMapper().registerModule(createHibernate4Module());
     }
 

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T extends Configuration> {
+public interface ConfiguredBundle<T> {
     /**
      * Initializes the environment.
      *
@@ -24,5 +24,5 @@ public interface ConfiguredBundle<T extends Configuration> {
      *
      * @param bootstrap the application bootstrap
      */
-    void initialize(Bootstrap<? extends T> bootstrap);
+    void initialize(Bootstrap<?> bootstrap);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -31,7 +31,7 @@ protected HibernateBundle(ImmutableList<Class<?>> entities,
     }
 
     @Override
-    public final void initialize(Bootstrap<? extends T> bootstrap) {
+    public final void initialize(Bootstrap<?> bootstrap) {
         bootstrap.getObjectMapper().registerModule(createHibernate4Module());
     }
 

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @param <T>    the required configuration interface
  */
-public interface ConfiguredBundle<T> {
+public interface ConfiguredBundle<T extends Configuration> {
     /**
      * Initializes the environment.
      *
@@ -24,5 +24,5 @@ public interface ConfiguredBundle<T> {
      *
      * @param bootstrap the application bootstrap
      */
-    void initialize(Bootstrap<?> bootstrap);
+    void initialize(Bootstrap<? extends T> bootstrap);
 }

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -31,7 +31,7 @@ protected HibernateBundle(ImmutableList<Class<?>> entities,
     }
 
     @Override
-    public final void initialize(Bootstrap<?> bootstrap) {
+    public final void initialize(Bootstrap<? extends T> bootstrap) {
         bootstrap.getObjectMapper().registerModule(createHibernate4Module());
     }
 

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/errors/ErrorMessage.java
Patch:
@@ -1,8 +1,10 @@
 package io.dropwizard.jersey.errors;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+@JsonInclude(JsonInclude.Include.NON_NULL)
 public class ErrorMessage {
     private final int code;
     private final String message;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/LogConfigurationTaskTest.java
Patch:
@@ -45,7 +45,7 @@ public void configuresSpecificLevelForALogger() throws Exception {
         assertThat(logger1.getLevel()).isEqualTo(Level.DEBUG);
         assertThat(logger2.getLevel()).isEqualTo(DEFAULT_LEVEL);
 
-        assertThat(stringWriter.toString()).isEqualTo("Configured logging level for logger.one to DEBUG\n");
+        assertThat(stringWriter.toString()).isEqualTo(String.format("Configured logging level for logger.one to DEBUG%n"));
     }
 
     @Test
@@ -61,7 +61,7 @@ public void configuresDefaultLevelForALogger() throws Exception {
         assertThat(logger1.getLevel()).isNull();
         assertThat(logger2.getLevel()).isEqualTo(DEFAULT_LEVEL);
 
-        assertThat(stringWriter.toString()).isEqualTo("Configured logging level for logger.one to null\n");
+        assertThat(stringWriter.toString()).isEqualTo(String.format("Configured logging level for logger.one to null%n"));
     }
 
     @Test
@@ -80,6 +80,6 @@ public void configuresLevelForMultipleLoggers() throws Exception {
         assertThat(logger2.getLevel()).isEqualTo(Level.INFO);
 
         assertThat(stringWriter.toString())
-                .isEqualTo("Configured logging level for logger.one to INFO\nConfigured logging level for logger.two to INFO\n");
+                .isEqualTo(String.format("Configured logging level for logger.one to INFO%nConfigured logging level for logger.two to INFO%n"));
     }
 }

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/LogConfigurationTaskTest.java
Patch:
@@ -45,7 +45,7 @@ public void configuresSpecificLevelForALogger() throws Exception {
         assertThat(logger1.getLevel()).isEqualTo(Level.DEBUG);
         assertThat(logger2.getLevel()).isEqualTo(DEFAULT_LEVEL);
 
-        assertThat(stringWriter.toString()).isEqualTo("Configured logging level for logger.one to DEBUG\n");
+        assertThat(stringWriter.toString()).isEqualTo(String.format("Configured logging level for logger.one to DEBUG%n"));
     }
 
     @Test
@@ -61,7 +61,7 @@ public void configuresDefaultLevelForALogger() throws Exception {
         assertThat(logger1.getLevel()).isNull();
         assertThat(logger2.getLevel()).isEqualTo(DEFAULT_LEVEL);
 
-        assertThat(stringWriter.toString()).isEqualTo("Configured logging level for logger.one to null\n");
+        assertThat(stringWriter.toString()).isEqualTo(String.format("Configured logging level for logger.one to null%n"));
     }
 
     @Test
@@ -80,6 +80,6 @@ public void configuresLevelForMultipleLoggers() throws Exception {
         assertThat(logger2.getLevel()).isEqualTo(Level.INFO);
 
         assertThat(stringWriter.toString())
-                .isEqualTo("Configured logging level for logger.one to INFO\nConfigured logging level for logger.two to INFO\n");
+                .isEqualTo(String.format("Configured logging level for logger.one to INFO%nConfigured logging level for logger.two to INFO%n"));
     }
 }

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.apache.http.protocol.HttpContext;
 import org.junit.Before;
 import org.junit.Test;
-import sun.net.spi.DefaultProxySelector;
+import java.net.ProxySelector;
 
 import java.io.IOException;
 import java.lang.reflect.Field;
@@ -261,7 +261,8 @@ public void usesTheDefaultRoutePlanner() throws Exception {
 
     @Test
     public void usesACustomRoutePlanner() throws Exception {
-        final HttpRoutePlanner routePlanner = new SystemDefaultRoutePlanner(new DefaultProxySelector());
+        ProxySelector proxySelector = (ProxySelector) Class.forName("sun.net.spi.DefaultProxySelector").newInstance();
+        final HttpRoutePlanner routePlanner = new SystemDefaultRoutePlanner(proxySelector);
         final CloseableHttpClient httpClient = builder.using(configuration).using(routePlanner)
                 .createClient(apacheBuilder, connectionManager, "test");
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/ChainedAuthFactory.java
Patch:
@@ -20,6 +20,7 @@ public ChainedAuthFactory() {
         this(new ArrayList<AuthFactory<?, T>>());
     }
 
+    @SuppressWarnings("unchecked")
     public ChainedAuthFactory(AuthFactory<?, T>... providers) {
         this(Arrays.asList(providers));
     }

File: dropwizard-auth/src/test/java/io/dropwizard/auth/ChainedAuthProviderTest.java
Patch:
@@ -113,6 +113,7 @@ public String show(@Auth String principal) {
         }
     }
 
+    @SuppressWarnings("unchecked")
     public static class ChainedAuthTestResourceConfig extends DropwizardResourceConfig {
         public ChainedAuthTestResourceConfig() {
             super(true, new MetricRegistry());

File: dropwizard-db/src/test/java/io/dropwizard/db/TimeBoundHealthCheckTest.java
Patch:
@@ -18,6 +18,7 @@
 public class TimeBoundHealthCheckTest {
     
     @Test
+    @SuppressWarnings("unchecked")
     public void testCheck() throws InterruptedException, ExecutionException, TimeoutException {
         final ExecutorService executorService = mock(ExecutorService.class);
         final Duration duration = mock(Duration.class);

File: dropwizard-views/src/test/java/io/dropwizard/views/ViewBundleTest.java
Patch:
@@ -70,6 +70,7 @@ public Map<String, Map<String, String>> getViewConfiguration(Configuration confi
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void addsTheViewMessageBodyWriterWithSingleViewRendererToTheEnvironment() throws Exception {
         final String viewSuffix = ".ftl";
         final String testKey = "testKey";

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -173,7 +173,7 @@ public void usesAnObjectMapperFromTheEnvironment() throws Exception {
     }
 
     @Test
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public void usesAnExecutorServiceFromTheEnvironment() throws Exception {
         final JerseyClientConfiguration configuration = new JerseyClientConfiguration();
         configuration.setMinThreads(7);

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/EnvironmentVariableLookup.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * A custom {@link org.apache.commons.lang3.text.StrLookup} implementation using environment variables as lookup source.
  */
-public class EnvironmentVariableLookup extends StrLookup {
+public class EnvironmentVariableLookup extends StrLookup<Object> {
     private final boolean strict;
 
     /**

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/SubstitutingSourceProviderTest.java
Patch:
@@ -15,7 +15,7 @@
 public class SubstitutingSourceProviderTest {
     @Test
     public void shouldSubstituteCorrectly() throws IOException {
-        StrLookup dummyLookup = new StrLookup() {
+        StrLookup<?> dummyLookup = new StrLookup<Object>() {
             @Override
             public String lookup(String key) {
                 return "baz";
@@ -29,7 +29,7 @@ public String lookup(String key) {
 
     @Test
     public void shouldSubstituteOnlyExistingVariables() throws IOException {
-        StrLookup dummyLookup = new StrLookup() {
+        StrLookup<?> dummyLookup = new StrLookup<Object>() {
             @Override
             public String lookup(String key) {
                 return null;
@@ -43,7 +43,7 @@ public String lookup(String key) {
 
     @Test
     public void shouldSubstituteWithDefaultValue() throws IOException {
-        StrLookup dummyLookup = new StrLookup() {
+        StrLookup<?> dummyLookup = new StrLookup<Object>() {
             @Override
             public String lookup(String key) {
                 return null;

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/DBIHealthCheckTest.java
Patch:
@@ -26,7 +26,7 @@ public void testItTimesOutProperly() throws Exception {
         DBI dbi = mock(DBI.class);
         Handle handle = mock(Handle.class);
         when(dbi.open()).thenReturn(handle);
-        Mockito.doAnswer(new Answer() {
+        Mockito.doAnswer(new Answer<Object>() {
             @Override
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 try {

File: dropwizard-migrations/src/main/java/io/dropwizard/migrations/DbDumpCommand.java
Patch:
@@ -196,7 +196,7 @@ public void run(Namespace namespace, Liquibase liquibase) throws Exception {
     private void generateChangeLog(final Database database, final CatalogAndSchema catalogAndSchema,
                                    final DiffToChangeLog changeLogWriter, PrintStream outputStream,
                                    final Set<Class<? extends DatabaseObject>> compareTypes) throws DatabaseException, IOException, ParserConfigurationException {
-        @SuppressWarnings("unchecked")
+        @SuppressWarnings({"unchecked", "rawtypes"})
         final SnapshotControl snapshotControl = new SnapshotControl(database, compareTypes.toArray(new Class[compareTypes.size()]));
         final CompareControl compareControl = new CompareControl(new CompareControl.SchemaComparison[]{new CompareControl.SchemaComparison(catalogAndSchema, catalogAndSchema)}, compareTypes);
         final CatalogAndSchema[] compareControlSchemas = compareControl.getSchemas(CompareControl.DatabaseRole.REFERENCE);

File: dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java
Patch:
@@ -42,7 +42,7 @@ public class DropwizardTestSupport<C extends Configuration> {
     private Application<C> application;
     private Environment environment;
     private Server jettyServer;
-    private List<ServiceListener> listeners = Lists.newArrayList();
+    private List<ServiceListener<C>> listeners = Lists.newArrayList();
 
     public DropwizardTestSupport(Class<? extends Application<C>> applicationClass,
                              @Nullable String configPath,
@@ -71,9 +71,8 @@ public void before() {
         startIfRequired();
     }
 
-    @SuppressWarnings("unchecked")
     public void after() {
-        for (ServiceListener listener : listeners) {
+        for (ServiceListener<C> listener : listeners) {
             try {
                 listener.onStop(this);
             } catch (Exception ignored) {

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkApplicationListener.java
Patch:
@@ -78,7 +78,7 @@ public void onEvent(RequestEvent event) {
                     }
                 }
             }
-            else if (event.getType() == RequestEvent.Type.RESOURCE_METHOD_FINISHED) {
+            else if (event.getType() == RequestEvent.Type.RESP_FILTERS_START) {
                 if (this.session != null) {
                     try {
                         commitTransaction();

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkApplicationListener.java
Patch:
@@ -78,7 +78,7 @@ public void onEvent(RequestEvent event) {
                     }
                 }
             }
-            else if (event.getType() == RequestEvent.Type.RESOURCE_METHOD_FINISHED) {
+            else if (event.getType() == RequestEvent.Type.RESP_FILTERS_START) {
                 if (this.session != null) {
                     try {
                         commitTransaction();

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/BaseReporterFactory.java
Patch:
@@ -59,7 +59,7 @@
  *     </tr>
  *     <tr>
  *         <td>frequency</td>
- *         <td>1 second</td>
+ *         <td>none</td>
  *         <td>The frequency to report metrics. Overrides the {@link
  *         MetricsFactory#getFrequency() default}.</td>
  *     </tr>

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/MetricsFactory.java
Patch:
@@ -26,7 +26,7 @@
  *     </tr>
  *     <tr>
  *         <td>frequency</td>
- *         <td>1 second</td>
+ *         <td>1 minute</td>
  *         <td>The frequency to report metrics. Overridable per-reporter.</td>
  *     </tr>
  *     <tr>

File: dropwizard-logging/src/main/java/io/dropwizard/logging/LoggingFactory.java
Patch:
@@ -77,10 +77,10 @@ private static void hijackJDKLogging() {
     );
 
     @JsonIgnore
-    private final LoggerContext loggerContext;
+    final LoggerContext loggerContext;
 
     @JsonIgnore
-    private final PrintStream configurationErrorsStream;
+    final PrintStream configurationErrorsStream;
 
     public LoggingFactory() {
         this((LoggerContext) LoggerFactory.getILoggerFactory(), System.err);

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -88,7 +88,7 @@ protected CloseableHttpClient createClient(
                 .setSoTimeout(timeout)
                 .build();
 
-        builder.setRequestExecutor(new InstrumentedHttpRequestExecutor(metricRegistry, metricNameStrategy))
+        builder.setRequestExecutor(new InstrumentedHttpRequestExecutor(metricRegistry, metricNameStrategy, name))
                 .setConnectionManager(manager)
                 .setDefaultRequestConfig(requestConfig)
                 .setDefaultSocketConfig(socketConfig)

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -88,7 +88,7 @@ protected CloseableHttpClient createClient(
                 .setSoTimeout(timeout)
                 .build();
 
-        builder.setRequestExecutor(new InstrumentedHttpRequestExecutor(metricRegistry, metricNameStrategy))
+        builder.setRequestExecutor(new InstrumentedHttpRequestExecutor(metricRegistry, metricNameStrategy, name))
                 .setConnectionManager(manager)
                 .setDefaultRequestConfig(requestConfig)
                 .setDefaultSocketConfig(socketConfig)

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -64,7 +64,6 @@ public DropwizardResourceConfig(boolean testOnly, MetricRegistry metricRegistry)
         register(OptionalMessageBodyWriter.class);
         register(OptionalParamFeature.class);
         register(new SessionFactoryProvider.Binder());
-        EncodingFilter.enableFor(this, GZipEncoder.class);
     }
 
     public static DropwizardResourceConfig forTesting(MetricRegistry metricRegistry) {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -9,7 +9,7 @@
 import com.google.common.collect.Sets;
 import io.dropwizard.jersey.caching.CacheControlledResponseFeature;
 import io.dropwizard.jersey.guava.OptionalMessageBodyWriter;
-import io.dropwizard.jersey.guava.OptionalParameterInjectionBinder;
+import io.dropwizard.jersey.guava.OptionalParamFeature;
 import io.dropwizard.jersey.sessions.SessionFactoryProvider;
 import org.glassfish.jersey.message.GZipEncoder;
 import org.glassfish.jersey.server.ResourceConfig;
@@ -62,7 +62,7 @@ public DropwizardResourceConfig(boolean testOnly, MetricRegistry metricRegistry)
         register(new InstrumentedResourceMethodApplicationListener(metricRegistry));
         register(CacheControlledResponseFeature.class);
         register(OptionalMessageBodyWriter.class);
-        register(new OptionalParameterInjectionBinder());
+        register(OptionalParamFeature.class);
         register(new SessionFactoryProvider.Binder());
         EncodingFilter.enableFor(this, GZipEncoder.class);
     }

File: dropwizard-core/src/main/java/io/dropwizard/setup/AdminEnvironment.java
Patch:
@@ -13,6 +13,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
@@ -60,10 +61,11 @@ private void logTasks() {
         final StringBuilder stringBuilder = new StringBuilder(1024).append(String.format("%n%n"));
 
         for (Task task : tasks.getTasks()) {
+            final String taskClassName = firstNonNull(task.getClass().getCanonicalName(), task.getClass().getName());
             stringBuilder.append(String.format("    %-7s /tasks/%s (%s)%n",
                                                "POST",
                                                task.getName(),
-                                               task.getClass().getCanonicalName()));
+                                               taskClassName));
         }
 
         LOGGER.info("tasks = {}", stringBuilder.toString());

File: dropwizard-jdbi/src/main/java/io/dropwizard/jdbi/NamePrependingStatementRewriter.java
Patch:
@@ -8,7 +8,7 @@
 public class NamePrependingStatementRewriter implements StatementRewriter {
     private final StatementRewriter rewriter;
 
-    NamePrependingStatementRewriter(StatementRewriter rewriter) {
+    public NamePrependingStatementRewriter(StatementRewriter rewriter) {
         this.rewriter = rewriter;
     }
 

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationFactory.java
Patch:
@@ -77,7 +77,7 @@ public T build(ConfigurationSourceProvider provider, String path) throws IOExcep
 
             if (node == null){
                 throw ConfigurationParsingException
-                        .builder("Configuration file must not be empty")
+                        .builder("Configuration at " + path + " must not be empty")
                         .build(path);
             }
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -264,7 +264,7 @@ public void throwsAnExceptionOnEmptyFiles() throws Exception {
             failBecauseExceptionWasNotThrown(ConfigurationParsingException.class);
         } catch (ConfigurationParsingException e) {
             assertThat(e.getMessage())
-                    .containsOnlyOnce(" * Configuration file must not be empty");
+                    .containsOnlyOnce(" * Configuration at " + emptyFile.toString() + " must not be empty");
         }
     }
 

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewMessageBodyWriter.java
Patch:
@@ -21,7 +21,7 @@
 import static com.codahale.metrics.MetricRegistry.name;
 
 @Provider
-@Produces(MediaType.WILDCARD)
+@Produces({ MediaType.TEXT_HTML, MediaType.APPLICATION_XHTML_XML })
 public class ViewMessageBodyWriter implements MessageBodyWriter<View> {
     private static final String MISSING_TEMPLATE_MSG =
             "<html>" +

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewMessageBodyWriter.java
Patch:
@@ -21,7 +21,7 @@
 import static com.codahale.metrics.MetricRegistry.name;
 
 @Provider
-@Produces(MediaType.WILDCARD)
+@Produces({ MediaType.TEXT_HTML, MediaType.APPLICATION_XHTML_XML })
 public class ViewMessageBodyWriter implements MessageBodyWriter<View> {
     private static final String MISSING_TEMPLATE_MSG =
             "<html>" +

File: dropwizard-core/src/main/java/io/dropwizard/ConfiguredBundle.java
Patch:
@@ -24,5 +24,5 @@ public interface ConfiguredBundle<T> {
      *
      * @param bootstrap the application bootstrap
      */
-    void initialize(Bootstrap<?> bootstrap);
+    void initialize(Bootstrap<T> bootstrap);
 }

File: dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java
Patch:
@@ -128,7 +128,7 @@
  *     </tr>
  *     <tr>
  *         <td>{@code maxSize}</td>
- *         <td>10</td>
+ *         <td>100</td>
  *         <td>
  *             The maximum size of the connection pool.
  *         </td>

File: dropwizard-core/src/main/java/io/dropwizard/Application.java
Patch:
@@ -64,7 +64,7 @@ public void initialize(Bootstrap<T> bootstrap) {
      * @param arguments the command-line arguments
      * @throws Exception if something goes wrong
      */
-    public final void run(String... arguments) throws Exception {
+    public void run(String... arguments) throws Exception {
         final Bootstrap<T> bootstrap = new Bootstrap<>(this);
         bootstrap.addCommand(new ServerCommand<>(this));
         bootstrap.addCommand(new CheckCommand<>(this));

File: dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryManager.java
Patch:
@@ -15,6 +15,7 @@ public SessionFactoryManager(SessionFactory factory, ManagedDataSource dataSourc
 
     @Override
     public void start() throws Exception {
+        dataSource.start();
     }
 
     @Override

File: dropwizard-configuration/src/main/java/io/dropwizard/configuration/ConfigurationParsingException.java
Patch:
@@ -327,9 +327,7 @@ public int compare(String a, String b) {
                 }
 
                 // determine which of the two is closer to the base and order it first
-                return StringUtils.getLevenshteinDistance(a, base) < StringUtils.getLevenshteinDistance(b, base)
-                        ? -1
-                        : 1;
+                return Integer.compare(StringUtils.getLevenshteinDistance(a, base), StringUtils.getLevenshteinDistance(b, base));
             }
 
             private void writeObject(ObjectOutputStream stream) throws IOException {

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -83,7 +83,6 @@ public void isDiscoverable() throws Exception {
                 .contains(DefaultServerFactory.class);
     }
 
-    @Ignore("Issue #648: Test is flaky and should be re-activated after upgrade to Jetty 9.1 or higher.")
     @Test
     public void testGracefulShutdown() throws Exception {
         ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceConfigurationTest.java
Patch:
@@ -49,6 +49,7 @@ public void testFullConfiguration() throws Exception {
         assertThat(ds.getCheckConnectionOnBorrow()).isEqualTo(true);
         assertThat(ds.getCheckConnectionOnConnect()).isEqualTo(false);
         assertThat(ds.getCheckConnectionOnReturn()).isEqualTo(true);
+        assertThat(ds.getValidationQueryTimeout()).isEqualTo(Optional.of(Duration.seconds(3)));
     }
 
     @Test
@@ -86,6 +87,7 @@ public void testMinimalConfiguration() throws Exception {
         assertThat(ds.getCheckConnectionOnBorrow()).isEqualTo(false);
         assertThat(ds.getCheckConnectionOnConnect()).isEqualTo(true);
         assertThat(ds.getCheckConnectionOnReturn()).isEqualTo(false);
+        assertThat(ds.getValidationQueryTimeout()).isEqualTo(Optional.absent());
     }
 
     private DataSourceFactory getDataSourceFactory(String resourceName) throws Exception {

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -83,7 +83,6 @@ public void isDiscoverable() throws Exception {
                 .contains(DefaultServerFactory.class);
     }
 
-    @Ignore("Issue #648: Test is flaky and should be re-activated after upgrade to Jetty 9.1 or higher.")
     @Test
     public void testGracefulShutdown() throws Exception {
         ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-core/src/main/java/io/dropwizard/Application.java
Patch:
@@ -44,7 +44,8 @@ public String getName() {
      *
      * @param bootstrap the application bootstrap
      */
-    public abstract void initialize(Bootstrap<T> bootstrap);
+    public void initialize(Bootstrap<T> bootstrap) {
+    }
 
     /**
      * When the application runs, this is called after the {@link Bundle}s are run. Override it to add

File: dropwizard-core/src/test/java/io/dropwizard/ApplicationTest.java
Patch:
@@ -10,9 +10,6 @@ public class ApplicationTest {
     private static class FakeConfiguration extends Configuration {}
 
     private static class FakeApplication extends Application<FakeConfiguration> {
-        @Override
-        public void initialize(Bootstrap<FakeConfiguration> bootstrap) {}
-
         @Override
         public void run(FakeConfiguration configuration, Environment environment) {}
     }

File: dropwizard-client/src/main/java/io/dropwizard/client/DropwizardExecutorProvider.java
Patch:
@@ -7,7 +7,7 @@
 class DropwizardExecutorProvider implements RequestExecutorProvider {
     private ExecutorService threadPool;
 
-    public DropwizardExecutorProvider (ExecutorService threadPool) {
+    public DropwizardExecutorProvider(ExecutorService threadPool) {
         this.threadPool = threadPool;
     }
 

File: dropwizard-auth/src/main/java/io/dropwizard/auth/AuthFactory.java
Patch:
@@ -19,8 +19,7 @@ public Authenticator<C, P> authenticator() {
         return authenticator;
     }
 
-    public static <T,U> Binder binder (AuthFactory<T,U> factory)
-    {
+    public static <T,U> Binder binder (AuthFactory<T,U> factory) {
         return new AuthFactoryProvider.Binder<>(factory);
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/UnknownRepresentation.java
Patch:
@@ -5,8 +5,7 @@
 public class UnknownRepresentation {
     private int bork;
 
-    public UnknownRepresentation(int bork)
-    {
+    public UnknownRepresentation(int bork) {
         this.bork = bork;
     }
 

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldApplication.java
Patch:
@@ -12,6 +12,7 @@
 
 import io.dropwizard.Application;
 import io.dropwizard.assets.AssetsBundle;
+import io.dropwizard.auth.AuthFactory;
 import io.dropwizard.auth.basic.BasicAuthFactory;
 import io.dropwizard.db.DataSourceFactory;
 import io.dropwizard.hibernate.HibernateBundle;
@@ -61,9 +62,9 @@ public void run(HelloWorldConfiguration configuration,
         environment.healthChecks().register("template", new TemplateHealthCheck(template));
         environment.jersey().getResourceConfig().getResourceFilterFactories().add(new DateNotSpecifiedFilterFactory());
 
-        environment.jersey().register(new BasicAuthFactory<User>(new ExampleAuthenticator(),
+        environment.jersey().register(AuthFactory.binder(new BasicAuthFactory<>(new ExampleAuthenticator(),
                                                                  "SUPER SECRET STUFF",
-                                                                 User.class));
+                                                                 User.class)));
         environment.jersey().register(new HelloWorldResource(template));
         environment.jersey().register(new ViewResource());
         environment.jersey().register(new ProtectedResource());

File: dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DropwizardClientRule.java
Patch:
@@ -26,7 +26,7 @@ public String ping() {
     }
 
     {@literal @}ClassRule
-    public static DropwizardRule dropwizard = new DropwizardRule(new PingResource());
+    public static DropwizardClientRule dropwizard = new DropwizardClientRule(new PingResource());
 
     {@literal @}Test
     public void shouldPing() throws IOException {

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapper.java
Patch:
@@ -41,7 +41,7 @@ public Response toResponse(JsonProcessingException exception) {
         LOGGER.debug("Unable to process JSON", exception);
         return Response.status(Response.Status.BAD_REQUEST)
                        .entity(new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),
-                               message))
+                               "Unable to process JSON"))
                        .build();
     }
 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapper.java
Patch:
@@ -41,7 +41,7 @@ public Response toResponse(JsonProcessingException exception) {
         LOGGER.debug("Unable to process JSON", exception);
         return Response.status(Response.Status.BAD_REQUEST)
                        .entity(new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),
-                               message))
+                               "Unable to process JSON"))
                        .build();
     }
 }

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/Jackson.java
Patch:
@@ -25,12 +25,11 @@ public static ObjectMapper newObjectMapper() {
 
     /**
      * Creates a new {@link ObjectMapper} with a custom {@link com.fasterxml.jackson.core.JsonFactory}
-     * and with support for Guava, Logback, and Joda Time support, as well as
-     * support for {@link JsonSnakeCase}. Also includes all {@link Discoverable} interface implementations.
+     * with Guava, Logback, and Joda Time support, as well as support for {@link JsonSnakeCase}.
+     * Also includes all {@link Discoverable} interface implementations.
      *
      * @param jsonFactory instance of {@link com.fasterxml.jackson.core.JsonFactory} to use
      *                    for the created {@link com.fasterxml.jackson.databind.ObjectMapper} instance.
-     *                    Must not be {@code null}
      */
     public static ObjectMapper newObjectMapper(JsonFactory jsonFactory) {
         final ObjectMapper mapper = new ObjectMapper(jsonFactory);

File: dropwizard-util/src/main/java/io/dropwizard/util/Duration.java
Patch:
@@ -73,7 +73,7 @@ public static Duration parse(String duration) {
         final Matcher matcher = DURATION_PATTERN.matcher(duration);
         checkArgument(matcher.matches(), "Invalid duration: " + duration);
 
-        final long count = Long.valueOf(matcher.group(1));
+        final long count = Long.parseLong(matcher.group(1));
         final TimeUnit unit = SUFFIXES.get(matcher.group(2));
         if (unit == null) {
             throw new IllegalArgumentException("Invalid duration: " + duration + ". Wrong time unit");

File: dropwizard-util/src/main/java/io/dropwizard/util/Size.java
Patch:
@@ -62,7 +62,7 @@ public static Size parse(String size) {
         final Matcher matcher = SIZE_PATTERN.matcher(size);
         checkArgument(matcher.matches(), "Invalid size: " + size);
 
-        final long count = Long.valueOf(matcher.group(1));
+        final long count = Long.parseLong(matcher.group(1));
         final SizeUnit unit = SUFFIXES.get(matcher.group(2));
         if (unit == null) {
             throw new IllegalArgumentException("Invalid size: " + size + ". Wrong size unit");

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -198,7 +198,7 @@ public JerseyClientBuilder using(ExecutorService executorService, ObjectMapper o
      * @return a fully-configured {@link Client}
      */
     public Client build(String name) {
-        if ((environment == null) && (executorService == null) && (objectMapper == null)) {
+        if ((environment == null) && ((executorService == null) || (objectMapper == null))) {
             throw new IllegalStateException("Must have either an environment or both " +
                                                     "an executor service and an object mapper");
         }

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -198,7 +198,7 @@ public JerseyClientBuilder using(ExecutorService executorService, ObjectMapper o
      * @return a fully-configured {@link Client}
      */
     public Client build(String name) {
-        if ((environment == null) && (executorService == null) && (objectMapper == null)) {
+        if ((environment == null) && ((executorService == null) || (objectMapper == null))) {
             throw new IllegalStateException("Must have either an environment or both " +
                                                     "an executor service and an object mapper");
         }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapper.java
Patch:
@@ -40,7 +40,8 @@ public Response toResponse(JsonProcessingException exception) {
          */
         LOGGER.debug("Unable to process JSON", exception);
         return Response.status(Response.Status.BAD_REQUEST)
-                       .entity(new ErrorMessage(message))
+                       .entity(new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),
+                               message))
                        .build();
     }
 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/params/AbstractParam.java
Patch:
@@ -42,7 +42,8 @@ protected AbstractParam(String input) {
      */
     protected Response error(String input, Exception e) {
         return Response.status(getErrorStatus())
-                       .entity(new ErrorMessage(errorMessage(input, e)))
+                       .entity(new ErrorMessage(getErrorStatus().getStatusCode(),
+                               errorMessage(input, e)))
                        .type(mediaType())
                        .build();
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -32,7 +32,7 @@ public void returnsAnErrorMessage() throws Exception {
                     .isEqualTo(500);
 
             assertThat(e.getResponse().getEntity(String.class))
-                    .startsWith("{\"message\":\"There was an error processing your request. It has been logged (ID ");
+                    .startsWith("{\"code\":500,\"message\":\"There was an error processing your request. It has been logged (ID ");
         }
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/BooleanParamTest.java
Patch:
@@ -55,6 +55,7 @@ public void nullThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"null\" must be \"true\" or \"false\".");
         }
@@ -73,6 +74,7 @@ public void nonBooleanValuesThrowAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" must be \"true\" or \"false\".");
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/IntParamTest.java
Patch:
@@ -31,6 +31,7 @@ public void aNonIntegerThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LongParamTest.java
Patch:
@@ -31,6 +31,7 @@ public void aNonIntegerThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/UUIDParamTest.java
Patch:
@@ -35,6 +35,7 @@ public void aNonUUIDThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a UUID.");
         }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapper.java
Patch:
@@ -40,7 +40,8 @@ public Response toResponse(JsonProcessingException exception) {
          */
         LOGGER.debug("Unable to process JSON", exception);
         return Response.status(Response.Status.BAD_REQUEST)
-                       .entity(new ErrorMessage(message))
+                       .entity(new ErrorMessage(Response.Status.BAD_REQUEST.getStatusCode(),
+                               message))
                        .build();
     }
 }

File: dropwizard-jersey/src/main/java/io/dropwizard/jersey/params/AbstractParam.java
Patch:
@@ -42,7 +42,8 @@ protected AbstractParam(String input) {
      */
     protected Response error(String input, Exception e) {
         return Response.status(getErrorStatus())
-                       .entity(new ErrorMessage(errorMessage(input, e)))
+                       .entity(new ErrorMessage(getErrorStatus().getStatusCode(),
+                               errorMessage(input, e)))
                        .type(mediaType())
                        .build();
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -32,7 +32,7 @@ public void returnsAnErrorMessage() throws Exception {
                     .isEqualTo(500);
 
             assertThat(e.getResponse().getEntity(String.class))
-                    .startsWith("{\"message\":\"There was an error processing your request. It has been logged (ID ");
+                    .startsWith("{\"code\":500,\"message\":\"There was an error processing your request. It has been logged (ID ");
         }
     }
 }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/BooleanParamTest.java
Patch:
@@ -55,6 +55,7 @@ public void nullThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"null\" must be \"true\" or \"false\".");
         }
@@ -73,6 +74,7 @@ public void nonBooleanValuesThrowAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" must be \"true\" or \"false\".");
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/IntParamTest.java
Patch:
@@ -31,6 +31,7 @@ public void aNonIntegerThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LongParamTest.java
Patch:
@@ -31,6 +31,7 @@ public void aNonIntegerThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/UUIDParamTest.java
Patch:
@@ -35,6 +35,7 @@ public void aNonUUIDThrowsAnException() throws Exception {
                     .isEqualTo(400);
 
             ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getCode()).isEqualTo(400);
             assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a UUID.");
         }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/IntParamTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey.params;
 
+import io.dropwizard.jersey.errors.ErrorMessage;
 import org.junit.Test;
 
 import javax.ws.rs.WebApplicationException;
@@ -29,7 +30,8 @@ public void aNonIntegerThrowsAnException() throws Exception {
             assertThat(response.getStatus())
                     .isEqualTo(400);
 
-            assertThat(response.getEntity())
+            ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LongParamTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey.params;
 
+import io.dropwizard.jersey.errors.ErrorMessage;
 import org.junit.Test;
 
 import javax.ws.rs.WebApplicationException;
@@ -29,7 +30,8 @@ public void aNonIntegerThrowsAnException() throws Exception {
             assertThat(response.getStatus())
                     .isEqualTo(400);
 
-            assertThat((String) response.getEntity())
+            ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/UUIDParamTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey.params;
 
+import io.dropwizard.jersey.errors.ErrorMessage;
 import org.junit.Test;
 
 import javax.ws.rs.WebApplicationException;
@@ -33,7 +34,8 @@ public void aNonUUIDThrowsAnException() throws Exception {
             assertThat(response.getStatus())
                     .isEqualTo(400);
 
-            assertThat((String) response.getEntity())
+            ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a UUID.");
         }
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/IntParamTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey.params;
 
+import io.dropwizard.jersey.errors.ErrorMessage;
 import org.junit.Test;
 
 import javax.ws.rs.WebApplicationException;
@@ -29,7 +30,8 @@ public void aNonIntegerThrowsAnException() throws Exception {
             assertThat(response.getStatus())
                     .isEqualTo(400);
 
-            assertThat(response.getEntity())
+            ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LongParamTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey.params;
 
+import io.dropwizard.jersey.errors.ErrorMessage;
 import org.junit.Test;
 
 import javax.ws.rs.WebApplicationException;
@@ -29,7 +30,8 @@ public void aNonIntegerThrowsAnException() throws Exception {
             assertThat(response.getStatus())
                     .isEqualTo(400);
 
-            assertThat((String) response.getEntity())
+            ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a number.");
         }
     }

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/UUIDParamTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.jersey.params;
 
+import io.dropwizard.jersey.errors.ErrorMessage;
 import org.junit.Test;
 
 import javax.ws.rs.WebApplicationException;
@@ -33,7 +34,8 @@ public void aNonUUIDThrowsAnException() throws Exception {
             assertThat(response.getStatus())
                     .isEqualTo(400);
 
-            assertThat((String) response.getEntity())
+            ErrorMessage entity = (ErrorMessage) response.getEntity();
+            assertThat(entity.getMessage())
                     .isEqualTo("\"foo\" is not a UUID.");
         }
     }

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.eclipse.jetty.server.NetworkConnector;
 import org.eclipse.jetty.server.Server;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.codahale.metrics.MetricRegistry;
@@ -82,6 +83,7 @@ public void isDiscoverable() throws Exception {
                 .contains(DefaultServerFactory.class);
     }
 
+    @Ignore("Issue #648: Test is flaky and should be re-activated after upgrade to Jetty 9.1 or higher.")
     @Test
     public void testGracefulShutdown() throws Exception {
         ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-assets/src/test/java/io/dropwizard/assets/AssetsBundleTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.servlet.ServletRegistration;
 import java.net.URL;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class AssetsBundleTest {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CachingAuthenticatorTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class CachingAuthenticatorTest {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicAuthProviderTest.java
Patch:
@@ -19,8 +19,8 @@
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 
 public class BasicAuthProviderTest extends JerseyTest {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicCredentialsTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class BasicCredentialsTest {
     private final BasicCredentials credentials = new BasicCredentials("u", "p");

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -19,8 +19,8 @@
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class OAuthProviderTest extends JerseyTest {
     static {

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -32,7 +32,7 @@
 import java.io.IOException;
 import java.lang.reflect.Field;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -25,8 +25,8 @@
 import java.lang.reflect.Type;
 import java.util.concurrent.ExecutorService;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.*;
 
 public class JerseyClientBuilderTest {

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryFactoryTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.configuration;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import io.dropwizard.configuration.ConfigurationFactoryTest.Example;
 import io.dropwizard.jackson.Jackson;
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.io.Resources;
 import io.dropwizard.jackson.Jackson;
-import org.fest.assertions.data.MapEntry;
+import org.assertj.core.data.MapEntry;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -17,8 +17,8 @@
 import java.io.File;
 import java.util.*;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class ConfigurationFactoryTest {
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationValidationExceptionTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.Locale;
 import java.util.Set;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/FileConfigurationSourceProviderTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.InputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FileConfigurationSourceProviderTest {
     private final ConfigurationSourceProvider provider = new FileConfigurationSourceProvider();

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/UrlConfigurationSourceProviderTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.InputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class UrlConfigurationSourceProviderTest {
     private final ConfigurationSourceProvider provider = new UrlConfigurationSourceProvider();

File: dropwizard-core/src/test/java/io/dropwizard/ApplicationTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.setup.Environment;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ApplicationTest {
     private static class FakeConfiguration extends Configuration {}

File: dropwizard-core/src/test/java/io/dropwizard/ConfigurationTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.logging.AppenderFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConfigurationTest {
     private final Configuration configuration = new Configuration();

File: dropwizard-core/src/test/java/io/dropwizard/cli/CheckCommandTest.java
Patch:
@@ -7,7 +7,7 @@
 import net.sourceforge.argparse4j.inf.Namespace;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verifyZeroInteractions;
 

File: dropwizard-core/src/test/java/io/dropwizard/cli/CliTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.io.ByteArrayOutputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class CliTest {

File: dropwizard-core/src/test/java/io/dropwizard/cli/ServerCommandTest.java
Patch:
@@ -14,8 +14,8 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.server;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SimpleServerFactoryTest {
     @Test

File: dropwizard-core/src/test/java/io/dropwizard/setup/AdminEnvironmentTest.java
Patch:
@@ -10,7 +10,7 @@
 import javax.servlet.ServletRegistration;
 import java.io.PrintWriter;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AdminEnvironmentTest {
     private final MutableServletContextHandler handler = new MutableServletContextHandler();

File: dropwizard-core/src/test/java/io/dropwizard/setup/BootstrapTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class BootstrapTest {
     private final Application<Configuration> application = new Application<Configuration>() {

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DataSourceFactoryTest {
     private final MetricRegistry metricRegistry = new MetricRegistry();

File: dropwizard-db/src/test/java/io/dropwizard/db/ManagedPooledDataSourceTest.java
Patch:
@@ -6,8 +6,8 @@
 
 import java.sql.SQLFeatureNotSupportedException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class ManagedPooledDataSourceTest {
     private final PoolProperties config = new PoolProperties();

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/AbstractDAOTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.Serializable;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/HibernateBundleTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class HibernateBundleTest {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -26,8 +26,8 @@
 import javax.ws.rs.core.MediaType;
 import java.util.TimeZone;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class SessionFactoryFactoryTest {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryHealthCheckTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkRequestDispatcherTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("HibernateResourceOpenedButNotSafelyClosed")

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkResourceMethodDispatchAdapterTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.hibernate.SessionFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class UnitOfWorkResourceMethodDispatchAdapterTest {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkResourceMethodDispatchProviderTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.lang.reflect.Method;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class UnitOfWorkTest {
     private static class Example {

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategyTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AnnotationSensitivePropertyNamingStrategyTest {
     public static class RegularExample {

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/DiscoverableSubtypeResolverTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DiscoverableSubtypeResolverTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/FuzzyEnumModuleTest.java
Patch:
@@ -9,8 +9,8 @@
 import java.sql.ClientInfoStatus;
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class FuzzyEnumModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/GuavaExtrasModuleTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GuavaExtrasModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/LogbackModuleTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class LogbackModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/JDBITest.java
Patch:
@@ -25,7 +25,7 @@
 import java.sql.Types;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.*;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/DropwizardResourceConfigTest.java
Patch:
@@ -9,7 +9,7 @@
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings("unchecked")
 public class DropwizardResourceConfigTest {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/caching/CacheControlledResourceMethodDispatchAdapterTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import javax.ws.rs.core.HttpHeaders;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class CacheControlledResourceMethodDispatchAdapterTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -9,8 +9,8 @@
 
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class LoggingExceptionMapperTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamInjectableProviderTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.logging.LoggingFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class OptionalQueryParamInjectableProviderTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalResourceMethodDispatchAdapterTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.logging.LoggingFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class OptionalResourceMethodDispatchAdapterTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JacksonMessageBodyProviderTest.java
Patch:
@@ -29,8 +29,8 @@
 import java.lang.reflect.Type;
 import java.util.*;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 import static org.mockito.Mockito.doReturn;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Fail.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
 
 public class JsonProcessingExceptionMapperTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/BooleanParamTest.java
Patch:
@@ -5,8 +5,8 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class BooleanParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/DateTimeParamTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DateTimeParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/IntParamTest.java
Patch:
@@ -5,8 +5,8 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class IntParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LongParamTest.java
Patch:
@@ -5,8 +5,8 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class LongParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/UUIDParamTest.java
Patch:
@@ -6,8 +6,8 @@
 import javax.ws.rs.core.Response;
 import java.util.UUID;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class UUIDParamTest {
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/FlashProviderTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.ws.rs.core.NewCookie;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FlashProviderTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/HttpSessionProviderTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.ws.rs.core.NewCookie;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class HttpSessionProviderTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -10,8 +10,8 @@
 import javax.ws.rs.core.MediaType;
 import java.util.Locale;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/GzipFilterFactoryTest.java
Patch:
@@ -11,7 +11,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GzipFilterFactoryTest {
     private GzipFilterFactory gzip;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class HttpConnectorFactoryTest {
     @Test

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpsConnectorFactoryTest.java
Patch:
@@ -17,7 +17,7 @@
 import com.google.common.base.Function;
 import com.google.common.collect.Collections2;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
 public class HttpsConnectorFactoryTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/MutableServletContextHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class MutableServletContextHandlerTest {
     private final MutableServletContextHandler handler = new MutableServletContextHandler();

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NonblockingServletHolderTest.java
Patch:
@@ -8,7 +8,7 @@
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class NonblockingServletHolderTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/RequestLogFactoryTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.File;
 import java.util.TimeZone;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class RequestLogFactoryTest {
     private RequestLogFactory requestLog;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/RoutingHandlerTest.java
Patch:
@@ -11,7 +11,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class RoutingHandlerTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/Slf4jRequestLogTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.TimeZone;
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class Slf4jRequestLogTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/setup/ServletEnvironmentTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import javax.servlet.*;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class ServletEnvironmentTest {

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/LifecycleEnvironmentTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class LifecycleEnvironmentTest {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/ConsoleAppenderFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConsoleAppenderFactoryTest {
     @Test

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DropwizardLayoutTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.TimeZone;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class DropwizardLayoutTest {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FileAppenderFactoryTest {
     @Test

File: dropwizard-logging/src/test/java/io/dropwizard/logging/LoggingFactoryTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class LoggingFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedExtendedThrowableProxyConverterTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class PrefixedExtendedThrowableProxyConverterTest {
     private final PrefixedExtendedThrowableProxyConverter converter = new PrefixedExtendedThrowableProxyConverter();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedRootCauseFirstThrowableProxyConverterTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.IOException;
 import java.net.SocketTimeoutException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Tests {@link PrefixedRootCauseFirstThrowableProxyConverter}.

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedThrowableProxyConverterTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class PrefixedThrowableProxyConverterTest {
     private final PrefixedThrowableProxyConverter converter = new PrefixedThrowableProxyConverter();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/SyslogAppenderFactoryTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SyslogAppenderFactoryTest {
     @Test

File: dropwizard-metrics-ganglia/src/test/java/io/dropwizard/metrics/ganglia/GangliaReporterFactoryTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.metrics.ganglia;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
-import org.fest.assertions.api.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 
 public class GangliaReporterFactoryTest {

File: dropwizard-metrics-graphite/src/test/java/io/dropwizard/metrics/graphite/GraphiteReporterFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GraphiteReporterFactoryTest {
     @Test

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/ConsoleReporterFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConsoleReporterFactoryTest {
     @Test

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/CsvReporterFactoryTest.java
Patch:
@@ -13,7 +13,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class CsvReporterFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class MetricsFactoryTest {
     static {

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/Slf4jReporterFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class Slf4jReporterFactoryTest {
     @Test

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/ServletsTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/assets/AssetServletTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AssetServletTest {
     private static final String DUMMY_SERVLET = "/dummy_servlet/";

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/assets/ResourceURLTest.java
Patch:
@@ -10,8 +10,8 @@
 import java.net.URL;
 import java.util.jar.JarEntry;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 
 public class ResourceURLTest {
     private File directory;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/TaskTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.io.PrintWriter;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class TaskTest {
     private final Task task = new Task("test") {

File: dropwizard-spdy/src/test/java/io/dropwizard/spdy/NonePushStrategyFactoryTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.eclipse.jetty.spdy.server.http.PushStrategy;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class NonePushStrategyFactoryTest {
     private final NonePushStrategyFactory factory = new NonePushStrategyFactory();

File: dropwizard-spdy/src/test/java/io/dropwizard/spdy/ReferrerPushStrategyFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ReferrerPushStrategyFactoryTest {
     @Test

File: dropwizard-spdy/src/test/java/io/dropwizard/spdy/Spdy3ConnectorFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class Spdy3ConnectorFactoryTest {
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/FixtureHelpersTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Test;
 
 import static io.dropwizard.testing.FixtureHelpers.fixture;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FixtureHelpersTest {
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/GzipDefaultVaryBehaviourTest.java
Patch:
@@ -13,7 +13,7 @@
 import static javax.ws.rs.core.HttpHeaders.ACCEPT_ENCODING;
 import static javax.ws.rs.core.HttpHeaders.CONTENT_ENCODING;
 import static javax.ws.rs.core.HttpHeaders.VARY;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GzipDefaultVaryBehaviourTest {
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/PersonResourceTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.logging.Logger;
 
 import static org.mockito.Mockito.*;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Tests {@link ResourceTestRule}.

File: dropwizard-util/src/test/java/io/dropwizard/util/DurationTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DurationTest {
     @Test

File: dropwizard-util/src/test/java/io/dropwizard/util/JarLocationTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.common.base.Optional;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class JarLocationTest {
     @Test

File: dropwizard-util/src/test/java/io/dropwizard/util/SizeTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SizeTest {
     @Test

File: dropwizard-util/src/test/java/io/dropwizard/util/SizeUnitTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SizeUnitTest {
     // BYTES

File: dropwizard-validation/src/test/java/io/dropwizard/validation/DurationValidatorTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DurationValidatorTest {
     @SuppressWarnings("unused")

File: dropwizard-validation/src/test/java/io/dropwizard/validation/MethodValidatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import javax.validation.Validation;
 import javax.validation.Validator;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings({"FieldMayBeFinal","MethodMayBeStatic","UnusedDeclaration"})
 public class MethodValidatorTest {

File: dropwizard-validation/src/test/java/io/dropwizard/validation/OneOfValidatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Locale;
 
 import static io.dropwizard.validation.ConstraintViolations.format;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assume.assumeTrue;
 
 public class OneOfValidatorTest {

File: dropwizard-validation/src/test/java/io/dropwizard/validation/PortRangeValidatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import javax.validation.Validator;
 import java.util.Locale;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 

File: dropwizard-validation/src/test/java/io/dropwizard/validation/SizeValidatorTest.java
Patch:
@@ -8,7 +8,7 @@
 import javax.validation.Validator;
 import java.util.Locale;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SizeValidatorTest {
     @SuppressWarnings("unused")

File: dropwizard-validation/src/test/java/io/dropwizard/validation/valuehandling/OptionalValidatedValueUnwrapperTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.util.Set;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class OptionalValidatedValueUnwrapperTest {
 

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/FreemarkerViewRendererTest.java
Patch:
@@ -17,7 +17,7 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FreemarkerViewRendererTest extends JerseyTest {
     static {

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -17,7 +17,7 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class MustacheViewRendererTest extends JerseyTest {
     static {

File: dropwizard-views/src/test/java/io/dropwizard/views/ViewTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ViewTest {
     private final View view = new View("/blah.tmp") {};

File: dropwizard-assets/src/test/java/io/dropwizard/assets/AssetsBundleTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.servlet.ServletRegistration;
 import java.net.URL;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class AssetsBundleTest {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/CachingAuthenticatorTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class CachingAuthenticatorTest {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicAuthProviderTest.java
Patch:
@@ -19,8 +19,8 @@
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 
 public class BasicAuthProviderTest extends JerseyTest {

File: dropwizard-auth/src/test/java/io/dropwizard/auth/basic/BasicCredentialsTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class BasicCredentialsTest {
     private final BasicCredentials credentials = new BasicCredentials("u", "p");

File: dropwizard-auth/src/test/java/io/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -19,8 +19,8 @@
 import javax.ws.rs.core.HttpHeaders;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class OAuthProviderTest extends JerseyTest {
     static {

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -32,7 +32,7 @@
 import java.io.IOException;
 import java.lang.reflect.Field;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -25,8 +25,8 @@
 import java.lang.reflect.Type;
 import java.util.concurrent.ExecutorService;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.*;
 
 public class JerseyClientBuilderTest {

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryFactoryTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.configuration;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import io.dropwizard.configuration.ConfigurationFactoryTest.Example;
 import io.dropwizard.jackson.Jackson;
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.io.Resources;
 import io.dropwizard.jackson.Jackson;
-import org.fest.assertions.data.MapEntry;
+import org.assertj.core.data.MapEntry;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -17,8 +17,8 @@
 import java.io.File;
 import java.util.*;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class ConfigurationFactoryTest {
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationValidationExceptionTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.Locale;
 import java.util.Set;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/FileConfigurationSourceProviderTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.InputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FileConfigurationSourceProviderTest {
     private final ConfigurationSourceProvider provider = new FileConfigurationSourceProvider();

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/UrlConfigurationSourceProviderTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.InputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class UrlConfigurationSourceProviderTest {
     private final ConfigurationSourceProvider provider = new UrlConfigurationSourceProvider();

File: dropwizard-core/src/test/java/io/dropwizard/ApplicationTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.dropwizard.setup.Environment;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ApplicationTest {
     private static class FakeConfiguration extends Configuration {}

File: dropwizard-core/src/test/java/io/dropwizard/ConfigurationTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.logging.AppenderFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConfigurationTest {
     private final Configuration configuration = new Configuration();

File: dropwizard-core/src/test/java/io/dropwizard/cli/CheckCommandTest.java
Patch:
@@ -7,7 +7,7 @@
 import net.sourceforge.argparse4j.inf.Namespace;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verifyZeroInteractions;
 

File: dropwizard-core/src/test/java/io/dropwizard/cli/CliTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.io.ByteArrayOutputStream;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class CliTest {

File: dropwizard-core/src/test/java/io/dropwizard/cli/ServerCommandTest.java
Patch:
@@ -14,8 +14,8 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-core/src/test/java/io/dropwizard/server/DefaultServerFactoryTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.dropwizard.server;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import io.dropwizard.configuration.ConfigurationFactory;
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import io.dropwizard.jackson.Jackson;

File: dropwizard-core/src/test/java/io/dropwizard/server/SimpleServerFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SimpleServerFactoryTest {
     @Test

File: dropwizard-core/src/test/java/io/dropwizard/setup/AdminEnvironmentTest.java
Patch:
@@ -10,7 +10,7 @@
 import javax.servlet.ServletRegistration;
 import java.io.PrintWriter;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AdminEnvironmentTest {
     private final MutableServletContextHandler handler = new MutableServletContextHandler();

File: dropwizard-core/src/test/java/io/dropwizard/setup/BootstrapTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class BootstrapTest {
     private final Application<Configuration> application = new Application<Configuration>() {

File: dropwizard-db/src/test/java/io/dropwizard/db/DataSourceFactoryTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DataSourceFactoryTest {
     private final MetricRegistry metricRegistry = new MetricRegistry();

File: dropwizard-db/src/test/java/io/dropwizard/db/ManagedPooledDataSourceTest.java
Patch:
@@ -6,8 +6,8 @@
 
 import java.sql.SQLFeatureNotSupportedException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class ManagedPooledDataSourceTest {
     private final PoolProperties config = new PoolProperties();

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/AbstractDAOTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.Serializable;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/HibernateBundleTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class HibernateBundleTest {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -26,8 +26,8 @@
 import javax.ws.rs.core.MediaType;
 import java.util.TimeZone;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class SessionFactoryFactoryTest {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/SessionFactoryHealthCheckTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkRequestDispatcherTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("HibernateResourceOpenedButNotSafelyClosed")

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkResourceMethodDispatchAdapterTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.hibernate.SessionFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class UnitOfWorkResourceMethodDispatchAdapterTest {

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkResourceMethodDispatchProviderTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.lang.reflect.Method;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/UnitOfWorkTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class UnitOfWorkTest {
     private static class Example {

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategyTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AnnotationSensitivePropertyNamingStrategyTest {
     public static class RegularExample {

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/DiscoverableSubtypeResolverTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DiscoverableSubtypeResolverTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/FuzzyEnumModuleTest.java
Patch:
@@ -9,8 +9,8 @@
 import java.sql.ClientInfoStatus;
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class FuzzyEnumModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/GuavaExtrasModuleTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GuavaExtrasModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jackson/src/test/java/io/dropwizard/jackson/LogbackModuleTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class LogbackModuleTest {
     private final ObjectMapper mapper = new ObjectMapper();

File: dropwizard-jdbi/src/test/java/io/dropwizard/jdbi/JDBITest.java
Patch:
@@ -25,7 +25,7 @@
 import java.sql.Types;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.*;
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/DropwizardResourceConfigTest.java
Patch:
@@ -9,7 +9,7 @@
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings("unchecked")
 public class DropwizardResourceConfigTest {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/caching/CacheControlledResourceMethodDispatchAdapterTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import javax.ws.rs.core.HttpHeaders;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class CacheControlledResourceMethodDispatchAdapterTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/errors/LoggingExceptionMapperTest.java
Patch:
@@ -9,8 +9,8 @@
 
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class LoggingExceptionMapperTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalQueryParamInjectableProviderTest.java
Patch:
@@ -6,7 +6,7 @@
 import io.dropwizard.logging.LoggingFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class OptionalQueryParamInjectableProviderTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/guava/OptionalResourceMethodDispatchAdapterTest.java
Patch:
@@ -7,8 +7,8 @@
 import io.dropwizard.logging.LoggingFactory;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class OptionalResourceMethodDispatchAdapterTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JacksonMessageBodyProviderTest.java
Patch:
@@ -29,8 +29,8 @@
 import java.lang.reflect.Type;
 import java.util.*;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 import static org.mockito.Mockito.doReturn;

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapperTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Fail.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
 
 public class JsonProcessingExceptionMapperTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/BooleanParamTest.java
Patch:
@@ -5,8 +5,8 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class BooleanParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/DateTimeParamTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.joda.time.DateTimeZone;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DateTimeParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/IntParamTest.java
Patch:
@@ -5,8 +5,8 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class IntParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/LongParamTest.java
Patch:
@@ -5,8 +5,8 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class LongParamTest {
     @Test

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/params/UUIDParamTest.java
Patch:
@@ -6,8 +6,8 @@
 import javax.ws.rs.core.Response;
 import java.util.UUID;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 
 public class UUIDParamTest {
 

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/FlashProviderTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.ws.rs.core.NewCookie;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FlashProviderTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/sessions/HttpSessionProviderTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.ws.rs.core.NewCookie;
 import java.util.List;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class HttpSessionProviderTest extends JerseyTest {
     static {

File: dropwizard-jersey/src/test/java/io/dropwizard/jersey/validation/ConstraintViolationExceptionMapperTest.java
Patch:
@@ -10,8 +10,8 @@
 import javax.ws.rs.core.MediaType;
 import java.util.Locale;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/GzipFilterFactoryTest.java
Patch:
@@ -11,7 +11,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GzipFilterFactoryTest {
     private GzipFilterFactory gzip;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpConnectorFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class HttpConnectorFactoryTest {
     @Test

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/HttpsConnectorFactoryTest.java
Patch:
@@ -17,7 +17,7 @@
 import com.google.common.base.Function;
 import com.google.common.collect.Collections2;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
 public class HttpsConnectorFactoryTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/MutableServletContextHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class MutableServletContextHandlerTest {
     private final MutableServletContextHandler handler = new MutableServletContextHandler();

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/NonblockingServletHolderTest.java
Patch:
@@ -8,7 +8,7 @@
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class NonblockingServletHolderTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/RequestLogFactoryTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.File;
 import java.util.TimeZone;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class RequestLogFactoryTest {
     private RequestLogFactory requestLog;

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/RoutingHandlerTest.java
Patch:
@@ -11,7 +11,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class RoutingHandlerTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/Slf4jRequestLogTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.TimeZone;
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class Slf4jRequestLogTest {

File: dropwizard-jetty/src/test/java/io/dropwizard/jetty/setup/ServletEnvironmentTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import javax.servlet.*;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class ServletEnvironmentTest {

File: dropwizard-lifecycle/src/test/java/io/dropwizard/lifecycle/setup/LifecycleEnvironmentTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class LifecycleEnvironmentTest {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/ConsoleAppenderFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConsoleAppenderFactoryTest {
     @Test

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DropwizardLayoutTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.TimeZone;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class DropwizardLayoutTest {

File: dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
Patch:
@@ -7,7 +7,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FileAppenderFactoryTest {
     @Test

File: dropwizard-logging/src/test/java/io/dropwizard/logging/LoggingFactoryTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class LoggingFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedExtendedThrowableProxyConverterTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class PrefixedExtendedThrowableProxyConverterTest {
     private final PrefixedExtendedThrowableProxyConverter converter = new PrefixedExtendedThrowableProxyConverter();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedRootCauseFirstThrowableProxyConverterTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.IOException;
 import java.net.SocketTimeoutException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Tests {@link PrefixedRootCauseFirstThrowableProxyConverter}.

File: dropwizard-logging/src/test/java/io/dropwizard/logging/PrefixedThrowableProxyConverterTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.io.IOException;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class PrefixedThrowableProxyConverterTest {
     private final PrefixedThrowableProxyConverter converter = new PrefixedThrowableProxyConverter();

File: dropwizard-logging/src/test/java/io/dropwizard/logging/SyslogAppenderFactoryTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SyslogAppenderFactoryTest {
     @Test

File: dropwizard-metrics-ganglia/src/test/java/io/dropwizard/metrics/ganglia/GangliaReporterFactoryTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.dropwizard.metrics.ganglia;
 
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
-import org.fest.assertions.api.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 
 public class GangliaReporterFactoryTest {

File: dropwizard-metrics-graphite/src/test/java/io/dropwizard/metrics/graphite/GraphiteReporterFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GraphiteReporterFactoryTest {
     @Test

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/ConsoleReporterFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConsoleReporterFactoryTest {
     @Test

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/CsvReporterFactoryTest.java
Patch:
@@ -13,7 +13,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class CsvReporterFactoryTest {
     private final ObjectMapper objectMapper = Jackson.newObjectMapper();

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -12,7 +12,7 @@
 import javax.validation.Validation;
 import java.io.File;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class MetricsFactoryTest {
     static {

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/Slf4jReporterFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class Slf4jReporterFactoryTest {
     @Test

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/ServletsTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/assets/AssetServletTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AssetServletTest {
     private static final String DUMMY_SERVLET = "/dummy_servlet/";

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/assets/ResourceURLTest.java
Patch:
@@ -10,8 +10,8 @@
 import java.net.URL;
 import java.util.jar.JarEntry;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 
 public class ResourceURLTest {
     private File directory;

File: dropwizard-servlets/src/test/java/io/dropwizard/servlets/tasks/TaskTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.io.PrintWriter;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class TaskTest {
     private final Task task = new Task("test") {

File: dropwizard-spdy/src/test/java/io/dropwizard/spdy/NonePushStrategyFactoryTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.eclipse.jetty.spdy.server.http.PushStrategy;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class NonePushStrategyFactoryTest {
     private final NonePushStrategyFactory factory = new NonePushStrategyFactory();

File: dropwizard-spdy/src/test/java/io/dropwizard/spdy/ReferrerPushStrategyFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ReferrerPushStrategyFactoryTest {
     @Test

File: dropwizard-spdy/src/test/java/io/dropwizard/spdy/Spdy3ConnectorFactoryTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.dropwizard.jackson.DiscoverableSubtypeResolver;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class Spdy3ConnectorFactoryTest {
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/FixtureHelpersTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Test;
 
 import static io.dropwizard.testing.FixtureHelpers.fixture;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FixtureHelpersTest {
     @Test

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/GzipDefaultVaryBehaviourTest.java
Patch:
@@ -13,7 +13,7 @@
 import static javax.ws.rs.core.HttpHeaders.ACCEPT_ENCODING;
 import static javax.ws.rs.core.HttpHeaders.CONTENT_ENCODING;
 import static javax.ws.rs.core.HttpHeaders.VARY;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class GzipDefaultVaryBehaviourTest {
 

File: dropwizard-testing/src/test/java/io/dropwizard/testing/app/PersonResourceTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.logging.Logger;
 
 import static org.mockito.Mockito.*;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * Tests {@link ResourceTestRule}.

File: dropwizard-util/src/test/java/io/dropwizard/util/DurationTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DurationTest {
     @Test

File: dropwizard-util/src/test/java/io/dropwizard/util/JarLocationTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.common.base.Optional;
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class JarLocationTest {
     @Test

File: dropwizard-util/src/test/java/io/dropwizard/util/SizeTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SizeTest {
     @Test

File: dropwizard-util/src/test/java/io/dropwizard/util/SizeUnitTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SizeUnitTest {
     // BYTES

File: dropwizard-validation/src/test/java/io/dropwizard/validation/DurationValidatorTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DurationValidatorTest {
     @SuppressWarnings("unused")

File: dropwizard-validation/src/test/java/io/dropwizard/validation/MethodValidatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import javax.validation.Validation;
 import javax.validation.Validator;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings({"FieldMayBeFinal","MethodMayBeStatic","UnusedDeclaration"})
 public class MethodValidatorTest {

File: dropwizard-validation/src/test/java/io/dropwizard/validation/OneOfValidatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Locale;
 
 import static io.dropwizard.validation.ConstraintViolations.format;
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assume.assumeTrue;
 
 public class OneOfValidatorTest {

File: dropwizard-validation/src/test/java/io/dropwizard/validation/PortRangeValidatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import javax.validation.Validator;
 import java.util.Locale;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assume.assumeThat;
 

File: dropwizard-validation/src/test/java/io/dropwizard/validation/SizeValidatorTest.java
Patch:
@@ -8,7 +8,7 @@
 import javax.validation.Validator;
 import java.util.Locale;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class SizeValidatorTest {
     @SuppressWarnings("unused")

File: dropwizard-validation/src/test/java/io/dropwizard/validation/valuehandling/OptionalValidatedValueUnwrapperTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.util.Set;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class OptionalValidatedValueUnwrapperTest {
 

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/FreemarkerViewRendererTest.java
Patch:
@@ -17,7 +17,7 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class FreemarkerViewRendererTest extends JerseyTest {
     static {

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -17,7 +17,7 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class MustacheViewRendererTest extends JerseyTest {
     static {

File: dropwizard-views/src/test/java/io/dropwizard/views/ViewTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class ViewTest {
     private final View view = new View("/blah.tmp") {};

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -1,5 +1,6 @@
 package io.dropwizard.views;
 
+import com.google.common.collect.ImmutableSet;
 import com.sun.jersey.spi.service.ServiceFinder;
 import io.dropwizard.Bundle;
 import io.dropwizard.setup.Bootstrap;
@@ -88,7 +89,7 @@ public ViewBundle() {
     }
 
     public ViewBundle(Iterable<ViewRenderer> viewRenderers) {
-        this.viewRenderers = viewRenderers;
+        this.viewRenderers = ImmutableSet.copyOf(viewRenderers);
     }
 
     @Override

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -111,9 +111,9 @@ public JerseyClientBuilder withProperty(String propertyName, Object propertyValu
     }
     
     /**
-     * Uses the {@link httpRequestRetryHandler} for handling request retries.
+     * Uses the {@link org.apache.http.client.HttpRequestRetryHandler} for handling request retries.
      *
-     * @param httpRequestRetryHandler an httpRequestRetryHandler
+     * @param httpRequestRetryHandler a HttpRequestRetryHandler
      * @return {@code this}
      */
     public JerseyClientBuilder using(HttpRequestRetryHandler httpRequestRetryHandler) {

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategy.java
Patch:
@@ -8,7 +8,8 @@
 
 /**
  * A {@link PropertyNamingStrategy} implementation which, if the declaring class of a property is
- * annotated with {@link JsonSnakeCase}, uses a {@link LowerCaseWithUnderscoresStrategy}, and uses
+ * annotated with {@link JsonSnakeCase}, uses a
+ * {@link com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy}, and uses
  * the default {@link PropertyNamingStrategy} otherwise.
  */
 public class AnnotationSensitivePropertyNamingStrategy extends PropertyNamingStrategy {

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/setup/ServletEnvironment.java
Patch:
@@ -71,7 +71,7 @@ public ServletRegistration.Dynamic addServlet(String name, Class<? extends Servl
      *
      * @param name   the filter's name
      * @param filter the filter instance
-     * @return a {@link FilterRegistration.Dynamic} instance allowing for further
+     * @return a {@link javax.servlet.FilterRegistration.Dynamic} instance allowing for further
      *         configuration
      */
     public FilterRegistration.Dynamic addFilter(String name, Filter filter) {
@@ -90,7 +90,7 @@ public FilterRegistration.Dynamic addFilter(String name, Filter filter) {
      *
      * @param name  the filter's name
      * @param klass the filter class
-     * @return a {@link FilterRegistration.Dynamic} instance allowing for further configuration
+     * @return a {@link javax.servlet.FilterRegistration.Dynamic} instance allowing for further configuration
      */
     public FilterRegistration.Dynamic addFilter(String name, Class<? extends Filter> klass) {
         final FilterHolder holder = new FilterHolder(checkNotNull(klass));

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -8,8 +8,8 @@
 /**
  * A {@link Bundle}, which by default, enables the rendering of FreeMarker & Mustache views by your application.
  *
- * <p>Other instances of {@Link ViewRenderer} can be used by initializing your {@Link ViewBundle} with a
- * {@Link Iterable} of the {@Link ViewRenderer} instances to be used when configuring your {@link Bundle}:</p>
+ * <p>Other instances of {@link ViewRenderer} can be used by initializing your {@link ViewBundle} with a
+ * {@link Iterable} of the {@link ViewRenderer} instances to be used when configuring your {@link Bundle}:</p>
  *
  * <pre><code>
  * new ViewBundle(ImmutableList.of(myViewRenderer))

File: dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -111,9 +111,9 @@ public JerseyClientBuilder withProperty(String propertyName, Object propertyValu
     }
     
     /**
-     * Uses the {@link httpRequestRetryHandler} for handling request retries.
+     * Uses the {@link org.apache.http.client.HttpRequestRetryHandler} for handling request retries.
      *
-     * @param httpRequestRetryHandler an httpRequestRetryHandler
+     * @param httpRequestRetryHandler a HttpRequestRetryHandler
      * @return {@code this}
      */
     public JerseyClientBuilder using(HttpRequestRetryHandler httpRequestRetryHandler) {

File: dropwizard-jackson/src/main/java/io/dropwizard/jackson/AnnotationSensitivePropertyNamingStrategy.java
Patch:
@@ -8,7 +8,8 @@
 
 /**
  * A {@link PropertyNamingStrategy} implementation which, if the declaring class of a property is
- * annotated with {@link JsonSnakeCase}, uses a {@link LowerCaseWithUnderscoresStrategy}, and uses
+ * annotated with {@link JsonSnakeCase}, uses a
+ * {@link com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy}, and uses
  * the default {@link PropertyNamingStrategy} otherwise.
  */
 public class AnnotationSensitivePropertyNamingStrategy extends PropertyNamingStrategy {

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/setup/ServletEnvironment.java
Patch:
@@ -71,7 +71,7 @@ public ServletRegistration.Dynamic addServlet(String name, Class<? extends Servl
      *
      * @param name   the filter's name
      * @param filter the filter instance
-     * @return a {@link FilterRegistration.Dynamic} instance allowing for further
+     * @return a {@link javax.servlet.FilterRegistration.Dynamic} instance allowing for further
      *         configuration
      */
     public FilterRegistration.Dynamic addFilter(String name, Filter filter) {
@@ -90,7 +90,7 @@ public FilterRegistration.Dynamic addFilter(String name, Filter filter) {
      *
      * @param name  the filter's name
      * @param klass the filter class
-     * @return a {@link FilterRegistration.Dynamic} instance allowing for further configuration
+     * @return a {@link javax.servlet.FilterRegistration.Dynamic} instance allowing for further configuration
      */
     public FilterRegistration.Dynamic addFilter(String name, Class<? extends Filter> klass) {
         final FilterHolder holder = new FilterHolder(checkNotNull(klass));

File: dropwizard-views/src/main/java/io/dropwizard/views/ViewBundle.java
Patch:
@@ -8,8 +8,8 @@
 /**
  * A {@link Bundle}, which by default, enables the rendering of FreeMarker & Mustache views by your application.
  *
- * <p>Other instances of {@Link ViewRenderer} can be used by initializing your {@Link ViewBundle} with a
- * {@Link Iterable} of the {@Link ViewRenderer} instances to be used when configuring your {@link Bundle}:</p>
+ * <p>Other instances of {@link ViewRenderer} can be used by initializing your {@link ViewBundle} with a
+ * {@link Iterable} of the {@link ViewRenderer} instances to be used when configuring your {@link Bundle}:</p>
  *
  * <pre><code>
  * new ViewBundle(ImmutableList.of(myViewRenderer))

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/FreemarkerViewRendererTest.java
Patch:
@@ -59,14 +59,14 @@ protected AppDescriptor configure() {
     public void rendersViewsWithAbsoluteTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/absolute").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase("Woop woop. yay\n");
+                .isEqualToIgnoringCase("Woop woop. yay" + System.lineSeparator());
     }
 
     @Test
     public void rendersViewsWithRelativeTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/relative").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase("Ok.\n");
+                .isEqualToIgnoringCase("Ok." + System.lineSeparator());
     }
 
     @Test

File: dropwizard-views-mustache/src/test/java/io/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -59,14 +59,14 @@ protected AppDescriptor configure() {
     public void rendersViewsWithAbsoluteTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/absolute").get(String.class);
         assertThat(response)
-                .isEqualTo("Woop woop. yay\n");
+                .isEqualTo("Woop woop. yay" + System.lineSeparator());
     }
 
     @Test
     public void rendersViewsWithRelativeTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/relative").get(String.class);
         assertThat(response)
-                .isEqualTo("Ok.\n");
+                .isEqualTo("Ok." + System.lineSeparator());
     }
 
     @Test

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/BaseReporterFactory.java
Patch:
@@ -69,7 +69,7 @@ public abstract class BaseReporterFactory implements ReporterFactory {
 
     @NotNull
     @Valid
-    private Optional<Duration> frequency = Optional.of(Duration.seconds(1));
+    private Optional<Duration> frequency = Optional.absent();
 
     public TimeUnit getDurationUnit() {
         return durationUnit;

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -44,7 +44,7 @@ public void hasADefaultFrequency() throws Exception {
     @Test
     public void hasReporters() throws Exception {
         CsvReporterFactory csvReporter = new CsvReporterFactory();
-        csvReporter.setFile(new File("metrics.csv"));
+        csvReporter.setFile(new File("metrics"));
         assertThat(config.getReporters()).hasSize(3);
     }
 }

File: dropwizard-client/src/main/java/io/dropwizard/client/HttpClientConfiguration.java
Patch:
@@ -131,7 +131,7 @@ public Optional<String> getUserAgent() {
     }
 
     @JsonProperty
-    public void setUserAgent(String userAgent) {
-        this.userAgent = Optional.fromNullable(userAgent);
+    public void setUserAgent(Optional<String> userAgent) {
+        this.userAgent = userAgent;
     }
 }

File: dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.dropwizard.client;
 
 import com.codahale.metrics.MetricRegistry;
+import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableList;
 import io.dropwizard.util.Duration;
 import org.apache.http.Header;
@@ -63,7 +64,7 @@ public void setsTheMaximumRoutePoolSize() throws Exception {
 
     @Test
     public void setsTheUserAgent() {
-        configuration.setUserAgent("qwerty");
+        configuration.setUserAgent(Optional.of("qwerty"));
 
         final AbstractHttpClient client = (AbstractHttpClient) builder.using(configuration).build("test");
         assertThat(client.getParams().getParameter(AllClientPNames.USER_AGENT))

File: dropwizard-logging/src/main/java/io/dropwizard/logging/SyslogAppenderFactory.java
Patch:
@@ -117,6 +117,8 @@ public enum Facility {
     @NotNull
     private Facility facility = Facility.LOCAL0;
 
+    // PrefixedThrowableProxyConverter does not apply to syslog appenders, as stack traces are sent separately from
+    // the main message. This means that the standard prefix of `!` is not used for syslog
     @NotNull
     private String stackTracePrefix = SyslogAppender.DEFAULT_STACKTRACE_PATTERN;
 

File: dropwizard-logging/src/test/java/io/dropwizard/logging/SyslogAppenderFactoryTest.java
Patch:
@@ -50,7 +50,7 @@ public void patternIncludesAppNameAndPid() throws Exception {
     @Test
     public void stackTracePatternCanBeSet() throws Exception {
         SyslogAppenderFactory syslogAppenderFactory = new SyslogAppenderFactory();
-        syslogAppenderFactory.setStackTracePattern("--->");
+        syslogAppenderFactory.setStackTracePrefix("--->");
         Appender<ILoggingEvent> wrapper = syslogAppenderFactory.build(new LoggerContext(), "MyApplication", null);
 
         // hack to get at the SyslogAppender beneath the AsyncAppender

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -131,7 +131,7 @@ public Server build(Environment environment) {
                                                             environment.getObjectMapper(),
                                                             environment.getValidator(),
                                                             environment.getApplicationContext(),
-                                                            environment.getJerseyServletContainer(),
+                                                            environment.getJerseyServlet(),
                                                             environment.metrics());
         final Handler adminHandler = createAdminServlet(server,
                                                         environment.getAdminContext(),

File: dropwizard-core/src/main/java/io/dropwizard/server/SimpleServerFactory.java
Patch:
@@ -106,7 +106,7 @@ public Server build(Environment environment) {
                                                             environment.getObjectMapper(),
                                                             environment.getValidator(),
                                                             environment.getApplicationContext(),
-                                                            environment.getJerseyServletContainer(),
+                                                            environment.getJerseyServlet(),
                                                             environment.metrics());
 
         environment.getAdminContext().setContextPath(adminContextPath);

File: dropwizard-metrics/src/test/java/io/dropwizard/metrics/MetricsFactoryTest.java
Patch:
@@ -44,7 +44,7 @@ public void hasADefaultFrequency() throws Exception {
     @Test
     public void hasReporters() throws Exception {
         CsvReporterFactory csvReporter = new CsvReporterFactory();
-        csvReporter.setFile(new File("metrics.csv"));
+        csvReporter.setFile(new File("metrics"));
         assertThat(config.getReporters()).hasSize(3);
     }
 }

File: dropwizard-core/src/main/java/io/dropwizard/setup/Environment.java
Patch:
@@ -1,10 +1,10 @@
 package io.dropwizard.setup;
 
-import com.codahale.dropwizard.server.errors.EarlyEOFExceptionMapper;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.sun.jersey.spi.container.servlet.ServletContainer;
+import io.dropwizard.errors.EarlyEofExceptionMapper;
 import io.dropwizard.jersey.DropwizardResourceConfig;
 import io.dropwizard.jersey.setup.JerseyContainerHolder;
 import io.dropwizard.jersey.setup.JerseyEnvironment;
@@ -68,8 +68,9 @@ public Environment(String name,
         this.lifecycleEnvironment = new LifecycleEnvironment();
 
         final DropwizardResourceConfig jerseyConfig = new DropwizardResourceConfig(metricRegistry);
+
         //Add the Early EOF Exception Mapper for when the client disconnects whilst reading the input stream.
-        jerseyConfig.getSingletons().add(new EarlyEOFExceptionMapper());
+        jerseyConfig.getSingletons().add(new EarlyEofExceptionMapper());
 
         this.jerseyServletContainer = new JerseyContainerHolder(new ServletContainer(jerseyConfig));
         this.jerseyEnvironment = new JerseyEnvironment(jerseyServletContainer, jerseyConfig);

File: dropwizard-hibernate/src/test/java/com/codahale/dropwizard/hibernate/fake/entities/pckg/deep/dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/fake/entities/pckg/deep/FakeEntity1.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.hibernate.fake.entities.pckg.deep;
+package io.dropwizard.hibernate.fake.entities.pckg.deep;
 
 import javax.persistence.Entity;
 

File: dropwizard-hibernate/src/test/java/com/codahale/dropwizard/hibernate/fake/entities/pckg/dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/fake/entities/ pckgFakeEntity2.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.hibernate.fake.entities.pckg;
+package io.dropwizard.hibernate.fake.entities.pckg;
 
 import javax.persistence.Entity;
 

File: dropwizard-hibernate/src/test/java/com/codahale/dropwizard/hibernate/fake/entities/pckg/dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/fake/entities/ pckgFakeEntity1.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.hibernate.fake.entities.pckg;
+package io.dropwizard.hibernate.fake.entities.pckg;
 
 import javax.persistence.Entity;
 

File: dropwizard-hibernate/src/test/java/com/codahale/dropwizard/hibernate/dropwizard/dropwizard-hibernate/src/test/java/io/dropwizard/hibernate/ScanningHibernateBundleTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.hibernate;
+package io.dropwizard.hibernate;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/GzipFilterFactory.java
Patch:
@@ -27,7 +27,7 @@ public class GzipFilterFactory {
     private Set<String> compressedMimeTypes = Sets.newHashSet();
     private Set<String> includedMethods = Sets.newHashSet();
     private boolean gzipCompatibleDeflation = true;
-    private String vary;
+    private String vary = "Accept-Encoding";
 
     @Min(Deflater.DEFAULT_COMPRESSION)
     @Max(Deflater.BEST_COMPRESSION)

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/GzipFilterFactory.java
Patch:
@@ -27,7 +27,7 @@ public class GzipFilterFactory {
     private Set<String> compressedMimeTypes = Sets.newHashSet();
     private Set<String> includedMethods = Sets.newHashSet();
     private boolean gzipCompatibleDeflation = true;
-    private String vary;
+    private String vary = "Accept-Encoding";
 
     @Min(Deflater.DEFAULT_COMPRESSION)
     @Max(Deflater.BEST_COMPRESSION)

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -371,6 +371,7 @@ protected Handler createAdminServlet(Server server,
                                          MetricRegistry metrics,
                                          HealthCheckRegistry healthChecks) {
         configureSessionsAndSecurity(handler, server);
+        handler.setServer(server);  
         handler.getServletContext().setAttribute(MetricsServlet.METRICS_REGISTRY, metrics);
         handler.getServletContext().setAttribute(HealthCheckServlet.HEALTH_CHECK_REGISTRY, healthChecks);
         handler.addServlet(new NonblockingServletHolder(new AdminServlet()), "/*");
@@ -404,6 +405,7 @@ protected Handler createAppServlet(Server server,
             handler.addServlet(new NonblockingServletHolder(jerseyContainer), jersey.getUrlPattern());
         }
         final InstrumentedHandler instrumented = new InstrumentedHandler(metricRegistry);
+        instrumented.setServer(server);
         instrumented.setHandler(handler);
         return instrumented;
     }
@@ -423,6 +425,7 @@ protected Server buildServer(LifecycleEnvironment lifecycle,
         server.addLifeCycleListener(buildSetUIDListener());
         lifecycle.attach(server);
         final ErrorHandler errorHandler = new ErrorHandler();
+        errorHandler.setServer(server);
         errorHandler.setShowStacks(false);
         server.addBean(errorHandler);
         server.setStopAtShutdown(true);

File: dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java
Patch:
@@ -371,6 +371,7 @@ protected Handler createAdminServlet(Server server,
                                          MetricRegistry metrics,
                                          HealthCheckRegistry healthChecks) {
         configureSessionsAndSecurity(handler, server);
+        handler.setServer(server);  
         handler.getServletContext().setAttribute(MetricsServlet.METRICS_REGISTRY, metrics);
         handler.getServletContext().setAttribute(HealthCheckServlet.HEALTH_CHECK_REGISTRY, healthChecks);
         handler.addServlet(new NonblockingServletHolder(new AdminServlet()), "/*");
@@ -404,6 +405,7 @@ protected Handler createAppServlet(Server server,
             handler.addServlet(new NonblockingServletHolder(jerseyContainer), jersey.getUrlPattern());
         }
         final InstrumentedHandler instrumented = new InstrumentedHandler(metricRegistry);
+        instrumented.setServer(server);
         instrumented.setHandler(handler);
         return instrumented;
     }
@@ -423,6 +425,7 @@ protected Server buildServer(LifecycleEnvironment lifecycle,
         server.addLifeCycleListener(buildSetUIDListener());
         lifecycle.attach(server);
         final ErrorHandler errorHandler = new ErrorHandler();
+        errorHandler.setServer(server);
         errorHandler.setShowStacks(false);
         server.addBean(errorHandler);
         server.setStopAtShutdown(true);

File: dropwizard-jetty/src/main/java/io/dropwizard/jetty/Slf4jRequestLog.java
Patch:
@@ -49,6 +49,7 @@ public void write(String entry) throws IOException {
         event.setLevel(Level.INFO);
         event.setLoggerName("http.request");
         event.setMessage(entry);
+        event.setTimeStamp(System.currentTimeMillis());
 
         appenders.appendLoopOnAppenders(event);
     }

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -141,7 +141,7 @@ public Server build(Environment environment) {
                                                                   server,
                                                                   applicationHandler,
                                                                   adminHandler);
-        server.setHandler(addRequestLog(server, routingHandler, environment.getName()));
+        server.setHandler(addStatsHandler(addRequestLog(server, routingHandler, environment.getName())));
         return server;
     }
 

File: dropwizard-core/src/main/java/io/dropwizard/server/SimpleServerFactory.java
Patch:
@@ -126,7 +126,7 @@ public Server build(Environment environment) {
                 applicationContextPath, applicationHandler,
                 adminContextPath, adminHandler
         ));
-        server.setHandler(addRequestLog(server, routingHandler, environment.getName()));
+        server.setHandler(addStatsHandler(addRequestLog(server, routingHandler, environment.getName())));
 
         return server;
     }

File: dropwizard-core/src/main/java/io/dropwizard/server/DefaultServerFactory.java
Patch:
@@ -141,7 +141,7 @@ public Server build(Environment environment) {
                                                                   server,
                                                                   applicationHandler,
                                                                   adminHandler);
-        server.setHandler(addRequestLog(server, routingHandler, environment.getName()));
+        server.setHandler(addStatsHandler(addRequestLog(server, routingHandler, environment.getName())));
         return server;
     }
 

File: dropwizard-core/src/main/java/io/dropwizard/server/SimpleServerFactory.java
Patch:
@@ -126,7 +126,7 @@ public Server build(Environment environment) {
                 applicationContextPath, applicationHandler,
                 adminContextPath, adminHandler
         ));
-        server.setHandler(addRequestLog(server, routingHandler, environment.getName()));
+        server.setHandler(addStatsHandler(addRequestLog(server, routingHandler, environment.getName())));
 
         return server;
     }

File: dropwizard-configuration/src/test/java/io/dropwizard/configuration/ConfigurationFactoryTest.java
Patch:
@@ -91,6 +91,7 @@ public void handlesArrayOverride() throws Exception {
             System.clearProperty("dw.type");
         }
     }
+    
     @Test
     public void handlesSingleElementArrayOverride() throws Exception {
         try

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/CsvReporterFactory.java
Patch:
@@ -51,7 +51,7 @@ public void setFile(File file) {
     public ScheduledReporter build(MetricRegistry registry) {
         return CsvReporter.forRegistry(registry)
                           .convertDurationsTo(getDurationUnit())
-                          .convertDurationsTo(getRateUnit())
+                          .convertRatesTo(getRateUnit())
                           .filter(getFilter())
                           .formatFor(getLocale())
                           .build(getFile());

File: dropwizard-metrics/src/main/java/io/dropwizard/metrics/CsvReporterFactory.java
Patch:
@@ -51,7 +51,7 @@ public void setFile(File file) {
     public ScheduledReporter build(MetricRegistry registry) {
         return CsvReporter.forRegistry(registry)
                           .convertDurationsTo(getDurationUnit())
-                          .convertDurationsTo(getRateUnit())
+                          .convertRatesTo(getRateUnit())
                           .filter(getFilter())
                           .formatFor(getLocale())
                           .build(getFile());

File: dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
Patch:
@@ -192,6 +192,7 @@ private FileAppender<ILoggingEvent> buildAppender(LoggerContext context) {
 
             rollingPolicy.setParent(appender);
             rollingPolicy.start();
+            return appender;
         }
         return new FileAppender<>();
     }

File: dropwizard-example/src/main/java/com/example/helloworld/resources/PersonResource.java
Patch:
@@ -41,13 +41,15 @@ private Person findSafely(long personId) {
     @GET
     @Path("/view_freemarker")
     @UnitOfWork
+    @Produces(MediaType.TEXT_HTML)
     public PersonView getPersonViewFreemarker(@PathParam("personId") LongParam personId) {
         return new PersonView(PersonView.Template.FREEMARKER, findSafely(personId.get()));
     }
     
     @GET
     @Path("/view_mustache")
     @UnitOfWork
+    @Produces(MediaType.TEXT_HTML)
     public PersonView getPersonViewMustache(@PathParam("personId") LongParam personId) {
     	return new PersonView(PersonView.Template.MUSTACHE, findSafely(personId.get()));    
     }

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/FreemarkerViewRendererTest.java
Patch:
@@ -56,14 +56,14 @@ protected AppDescriptor configure() {
     public void rendersViewsWithAbsoluteTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/absolute").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase(String.format("Woop woop. yay%n"));
+                .isEqualToIgnoringCase("Woop woop. yay\n");
     }
 
     @Test
     public void rendersViewsWithRelativeTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/relative").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase(String.format("Ok.%n"));
+                .isEqualToIgnoringCase("Ok.\n");
     }
 
     @Test

File: dropwizard-views-freemarker/src/test/java/io/dropwizard/views/freemarker/FreemarkerViewRendererTest.java
Patch:
@@ -56,14 +56,14 @@ protected AppDescriptor configure() {
     public void rendersViewsWithAbsoluteTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/absolute").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase(String.format("Woop woop. yay%n"));
+                .isEqualToIgnoringCase("Woop woop. yay\n");
     }
 
     @Test
     public void rendersViewsWithRelativeTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/relative").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase(String.format("Ok.%n"));
+                .isEqualToIgnoringCase("Ok.\n");
     }
 
     @Test

File: dropwizard-logging/src/main/java/io/dropwizard/logging/PrefixedExtendedThrowableProxyConverter.java
Patch:
@@ -1,10 +1,11 @@
 package io.dropwizard.logging;
 
+import ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter;
 import ch.qos.logback.classic.spi.StackTraceElementProxy;
 import ch.qos.logback.classic.spi.ThrowableProxyUtil;
 
 /**
- * A {@link PrefixedThrowableProxyConverter} which prefixes stack traces with {@code !}.
+ * An {@link ExtendedThrowableProxyConverter} which prefixes stack traces with {@code !}.
  */
 public class PrefixedExtendedThrowableProxyConverter extends PrefixedThrowableProxyConverter {
     @Override

File: dropwizard-logging/src/main/java/io/dropwizard/logging/PrefixedExtendedThrowableProxyConverter.java
Patch:
@@ -1,10 +1,11 @@
 package io.dropwizard.logging;
 
+import ch.qos.logback.classic.pattern.ExtendedThrowableProxyConverter;
 import ch.qos.logback.classic.spi.StackTraceElementProxy;
 import ch.qos.logback.classic.spi.ThrowableProxyUtil;
 
 /**
- * A {@link PrefixedThrowableProxyConverter} which prefixes stack traces with {@code !}.
+ * An {@link ExtendedThrowableProxyConverter} which prefixes stack traces with {@code !}.
  */
 public class PrefixedExtendedThrowableProxyConverter extends PrefixedThrowableProxyConverter {
     @Override

File: dropwizard-logging/src/main/java/io/dropwizard/logging/DropwizardLayout.java
Patch:
@@ -19,7 +19,8 @@ public DropwizardLayout(LoggerContext context, TimeZone timeZone) {
         setOutputPatternAsHeader(false);
         getDefaultConverterMap().put("ex", PrefixedThrowableProxyConverter.class.getName());
         getDefaultConverterMap().put("xEx", PrefixedExtendedThrowableProxyConverter.class.getName());
-        setPattern("%-5p [%d{ISO8601," + timeZone.getID() + "}] %c: %m%n%xEx");
+        getDefaultConverterMap().put("rEx", PrefixedRootCauseFirstThrowableProxyConverter.class.getName());
+        setPattern("%-5p [%d{ISO8601," + timeZone.getID() + "}] %c: %m%n%rEx");
         setContext(context);
     }
 }

File: dropwizard-logging/src/test/java/io/dropwizard/logging/DropwizardLayoutTest.java
Patch:
@@ -34,6 +34,6 @@ public void hasAContext() throws Exception {
     @Test
     public void hasAPatternWithATimeZoneAndExtendedThrowables() throws Exception {
         assertThat(layout.getPattern())
-                .isEqualTo("%-5p [%d{ISO8601,UTC}] %c: %m%n%xEx");
+                .isEqualTo("%-5p [%d{ISO8601,UTC}] %c: %m%n%rEx");
     }
 }

File: dropwizard-assets/src/main/java/io/dropwizard/assets/AssetsBundle.java
Patch:
@@ -84,9 +84,10 @@ public AssetsBundle(String resourcePath, String uriPath, String indexFile) {
      * @param resourcePath        the resource path (in the classpath) of the static asset files
      * @param uriPath             the uri path for the static asset files
      * @param indexFile           the name of the index file to use
+     * @param assetsName          the name of servlet mapping used for this assets bundle
      */
     public AssetsBundle(String resourcePath, String uriPath, String indexFile, String assetsName) {
-		checkArgument(resourcePath.startsWith("/"), "%s is not an absolute path", resourcePath);
+        checkArgument(resourcePath.startsWith("/"), "%s is not an absolute path", resourcePath);
         checkArgument(!"/".equals(resourcePath), "%s is the classpath root", resourcePath);
         this.resourcePath = resourcePath.endsWith("/") ? resourcePath : (resourcePath + '/');
         this.uriPath = uriPath.endsWith("/") ? uriPath : (uriPath + '/');

File: dropwizard-jdbi/src/test/java/com/codahale/dropwizard/jdbi/JDBITest.java
Patch:
@@ -156,9 +156,9 @@ public void sqlObjectsCanReturnOptional() throws Exception {
     public void sqlObjectsCanReturnJodaDateTime() throws Exception {
         final PersonDAO dao = dbi.open(PersonDAO.class);
 
-        final DateTime found = dao.getLatestCreatedAt(new DateTime(1365465078000L));
+        final DateTime found = dao.getLatestCreatedAt(new DateTime(1365465077000L));
         assertThat(found).isNotNull();
-        assertThat(found.getMillis()).isEqualTo(1365467078000L);
-        assertThat(found).isEqualTo(new DateTime(1365467078000L));
+        assertThat(found.getMillis()).isEqualTo(1365465078000L);
+        assertThat(found).isEqualTo(new DateTime(1365465078000L));
     }
 }

File: dropwizard-jdbi/src/test/java/com/codahale/dropwizard/jdbi/JDBITest.java
Patch:
@@ -5,9 +5,9 @@
 import com.codahale.dropwizard.lifecycle.Managed;
 import com.codahale.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import com.codahale.dropwizard.logging.LoggingFactory;
-import com.codahale.dropwizard.setup.AdminEnvironment;
 import com.codahale.dropwizard.setup.Environment;
 import com.codahale.metrics.MetricRegistry;
+import com.codahale.metrics.health.HealthCheckRegistry;
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
@@ -38,7 +38,7 @@ public class JDBITest {
         hsqlConfig.setValidationQuery("SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS");
     }
 
-    private final AdminEnvironment adminEnvironment = mock(AdminEnvironment.class);
+    private final HealthCheckRegistry healthChecks = mock(HealthCheckRegistry.class);
     private final LifecycleEnvironment lifecycleEnvironment = mock(LifecycleEnvironment.class);
     private final Environment environment = mock(Environment.class);
     private final DBIFactory factory = new DBIFactory();
@@ -48,7 +48,7 @@ public class JDBITest {
 
     @Before
     public void setUp() throws Exception {
-        when(environment.admin()).thenReturn(adminEnvironment);
+        when(environment.healthChecks()).thenReturn(healthChecks);
         when(environment.lifecycle()).thenReturn(lifecycleEnvironment);
         when(environment.metrics()).thenReturn(metricRegistry);
 

File: dropwizard-metrics-ganglia/src/test/java/com/codahale/dropwizard/metrics/ganglia/GangliaReporterFactoryTest.java
Patch:
@@ -1,7 +1,6 @@
-package com.codahale.dropwizard.metrics.reporters.ganglia;
+package com.codahale.dropwizard.metrics.ganglia;
 
 import com.codahale.dropwizard.jackson.DiscoverableSubtypeResolver;
-import com.codahale.dropwizard.metrics.ganglia.GangliaReporterFactory;
 import org.fest.assertions.api.Assertions;
 import org.junit.Test;
 

File: dropwizard-metrics-ganglia/src/test/java/com/codahale/dropwizard/metrics/ganglia/GangliaReporterFactoryTest.java
Patch:
@@ -1,7 +1,6 @@
-package com.codahale.dropwizard.metrics.reporters.ganglia;
+package com.codahale.dropwizard.metrics.ganglia;
 
 import com.codahale.dropwizard.jackson.DiscoverableSubtypeResolver;
-import com.codahale.dropwizard.metrics.ganglia.GangliaReporterFactory;
 import org.fest.assertions.api.Assertions;
 import org.junit.Test;
 

File: dropwizard-logging/src/test/java/com/codahale/dropwizard/logging/AsyncAppenderTest.java
Patch:
@@ -14,7 +14,7 @@
 public class AsyncAppenderTest {
     @SuppressWarnings("unchecked")
     private final Appender<ILoggingEvent> delegate = mock(Appender.class);
-    private final AsyncAppender appender = new AsyncAppender(delegate, 100, Duration.milliseconds(100));
+    private final AsyncAppender appender = new AsyncAppender(delegate, 100, Duration.milliseconds(100), true);
 
     @Before
     public void setUp() throws Exception {

File: dropwizard-core/src/main/java/com/codahale/dropwizard/cli/ServerCommand.java
Patch:
@@ -40,6 +40,7 @@ protected void run(Environment environment, Namespace namespace, T configuration
         } catch (Exception e) {
             LOGGER.error("Unable to start server, shutting down", e);
             server.stop();
+            throw e;
         }
     }
 }

File: dropwizard-metrics/src/main/java/com/codahale/dropwizard/metrics/reporters/ConsoleReporterFactory.java
Patch:
@@ -90,7 +90,6 @@ public ScheduledReporter build(MetricRegistry registry) {
                 .formattedFor(getLocale())
                 .formattedFor(getTimeZone())
                 .outputTo(getOutput().get())
-                .withClock(getClock().get())
                 .build();
     }
 }

File: dropwizard-metrics/src/main/java/com/codahale/dropwizard/metrics/reporters/CsvReporterFactory.java
Patch:
@@ -56,7 +56,6 @@ public ScheduledReporter build(MetricRegistry registry) {
                 .convertDurationsTo(getRateUnit())
                 .filter(getFilter())
                 .formatFor(getLocale())
-                .withClock(getClock().get())
                 .build(getFile());
     }
 }

File: dropwizard-jackson/src/main/java/com/codahale/dropwizard/jackson/Jackson.java
Patch:
@@ -22,6 +22,7 @@ public static ObjectMapper newObjectMapper() {
         mapper.registerModule(new GuavaExtrasModule());
         mapper.registerModule(new JodaModule());
         mapper.registerModule(new AfterburnerModule());
+        mapper.registerModule(new PermissiveEnumDeserializingModule());
         mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());
         mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());
         return mapper;

File: dropwizard-servlets/src/main/java/com/codahale/dropwizard/servlets/assets/AssetServlet.java
Patch:
@@ -29,7 +29,7 @@ private static class CachedAsset {
 
         private CachedAsset(byte[] resource, long lastModifiedTime) {
             this.resource = resource;
-            this.eTag = Hashing.murmur3_128().hashBytes(resource).toString();
+            this.eTag = '"' + Hashing.murmur3_128().hashBytes(resource).toString() + '"';
             this.lastModifiedTime = lastModifiedTime;
         }
 

File: dropwizard-lifecycle/src/main/java/com/codahale/dropwizard/lifecycle/setup/ScheduledExecutorServiceBuilder.java
Patch:
@@ -20,6 +20,8 @@ public ScheduledExecutorServiceBuilder(LifecycleEnvironment environment, String
         this.nameFormat = nameFormat;
         this.poolSize = 1;
         this.threadFactory = new ThreadFactoryBuilder().setNameFormat(nameFormat).build();
+        this.shutdownTime = 5;
+        this.shutdownUnit = TimeUnit.SECONDS;
         this.handler = new ThreadPoolExecutor.AbortPolicy();
     }
 

File: dropwizard-lifecycle/src/main/java/com/codahale/dropwizard/lifecycle/setup/ScheduledExecutorServiceBuilder.java
Patch:
@@ -19,6 +19,8 @@ public ScheduledExecutorServiceBuilder(LifecycleEnvironment environment, String
         this.nameFormat = nameFormat;
         this.poolSize = 1;
         this.threadFactory = new ThreadFactoryBuilder().setNameFormat(nameFormat).build();
+        this.shutdownTime = 5;
+        this.shutdownUnit = TimeUnit.SECONDS;
         this.handler = new ThreadPoolExecutor.AbortPolicy();
     }
 

File: dropwizard-jackson/src/main/java/com/codahale/dropwizard/jackson/Jackson.java
Patch:
@@ -23,7 +23,7 @@ public static ObjectMapper newObjectMapper() {
         mapper.registerModule(new JodaModule());
         mapper.registerModule(new AfterburnerModule());
         mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());
-        mapper.setSubtypeResolver(new DiscoverableSubtypeResolver(Discoverable.class));
+        mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());
         return mapper;
     }
 }

File: dropwizard-jackson/src/test/java/com/codahale/dropwizard/jackson/ExampleSPI.java
Patch:
@@ -2,6 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface ExampleSPI extends ExampleTag {
 }

File: dropwizard-jetty/src/main/java/com/codahale/dropwizard/jetty/ConnectorFactory.java
Patch:
@@ -7,7 +7,7 @@
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.thread.ThreadPool;
 
-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface ConnectorFactory extends Discoverable {
     Connector build(Server server,
                     MetricRegistry metrics,

File: dropwizard-logging/src/main/java/com/codahale/dropwizard/logging/AppenderFactory.java
Patch:
@@ -22,7 +22,7 @@
  * @see FileAppenderFactory
  * @see SyslogAppenderFactory
  */
-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface AppenderFactory extends Discoverable {
     /**
      * Given a Logback context, an application name, and a layout, build a new appender.

File: dropwizard-spdy/src/main/java/com/codahale/dropwizard/spdy/PushStrategyFactory.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.eclipse.jetty.spdy.server.http.PushStrategy;
 
-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 public interface PushStrategyFactory extends Discoverable {
     PushStrategy build();
 }

File: dropwizard-core/src/main/java/com/codahale/dropwizard/server/ServerFactory.java
Patch:
@@ -1,8 +1,8 @@
 package com.codahale.dropwizard.server;
 
+import com.codahale.dropwizard.jackson.Discoverable;
 import com.codahale.dropwizard.jersey.setup.JerseyEnvironment;
 import com.codahale.dropwizard.lifecycle.setup.LifecycleEnvironment;
-import com.codahale.dropwizard.util.Subtyped;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
@@ -23,7 +23,7 @@
               include = JsonTypeInfo.As.PROPERTY,
               property = "type",
               defaultImpl = DefaultServerFactory.class)
-public interface ServerFactory extends Subtyped {
+public interface ServerFactory extends Discoverable {
     /**
      * Build a server for the given Dropwizard application.
      *

File: dropwizard-jackson/src/main/java/com/codahale/dropwizard/jackson/Discoverable.java
Patch:
@@ -1,8 +1,8 @@
-package com.codahale.dropwizard.util;
+package com.codahale.dropwizard.jackson;
 
 /**
  * A tag interface which allows Dropwizard to load Jackson subtypes at runtime, which enables polymorphic
  * configurations.
  */
-public interface Subtyped {
+public interface Discoverable {
 }

File: dropwizard-jackson/src/main/java/com/codahale/dropwizard/jackson/Jackson.java
Patch:
@@ -1,6 +1,5 @@
 package com.codahale.dropwizard.jackson;
 
-import com.codahale.dropwizard.util.Subtyped;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.datatype.guava.GuavaModule;
 import com.fasterxml.jackson.datatype.joda.JodaModule;
@@ -14,7 +13,7 @@ private Jackson() { /* singleton */ }
 
     /**
      * Creates a new {@link ObjectMapper} with Guava, Logback, and Joda Time support, as well as
-     * support for {@link JsonSnakeCase}. Also includes all {@link Subtyped} interface implementations.
+     * support for {@link JsonSnakeCase}. Also includes all {@link Discoverable} interface implementations.
      */
     public static ObjectMapper newObjectMapper() {
         final ObjectMapper mapper = new ObjectMapper();
@@ -24,7 +23,7 @@ public static ObjectMapper newObjectMapper() {
         mapper.registerModule(new JodaModule());
         mapper.registerModule(new AfterburnerModule());
         mapper.setPropertyNamingStrategy(new AnnotationSensitivePropertyNamingStrategy());
-        mapper.setSubtypeResolver(new ServiceSubtypeResolver(Subtyped.class));
+        mapper.setSubtypeResolver(new DiscoverableSubtypeResolver(Discoverable.class));
         return mapper;
     }
 }

File: dropwizard-jackson/src/test/java/com/codahale/dropwizard/jackson/DiscoverableSubtypeResolverTest.java
Patch:
@@ -6,9 +6,9 @@
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
-public class ServiceSubtypeResolverTest {
+public class DiscoverableSubtypeResolverTest {
     private final ObjectMapper mapper = new ObjectMapper();
-    private final ServiceSubtypeResolver resolver = new ServiceSubtypeResolver(ExampleTag.class);
+    private final DiscoverableSubtypeResolver resolver = new DiscoverableSubtypeResolver(ExampleTag.class);
 
     @Before
     public void setUp() throws Exception {

File: dropwizard-jetty/src/main/java/com/codahale/dropwizard/jetty/ConnectorFactory.java
Patch:
@@ -1,14 +1,14 @@
 package com.codahale.dropwizard.jetty;
 
-import com.codahale.dropwizard.util.Subtyped;
+import com.codahale.dropwizard.jackson.Discoverable;
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.thread.ThreadPool;
 
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
-public interface ConnectorFactory extends Subtyped {
+public interface ConnectorFactory extends Discoverable {
     Connector build(Server server,
                     MetricRegistry metrics,
                     String name,

File: dropwizard-logging/src/main/java/com/codahale/dropwizard/logging/AppenderFactory.java
Patch:
@@ -4,7 +4,7 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.Layout;
-import com.codahale.dropwizard.util.Subtyped;
+import com.codahale.dropwizard.jackson.Discoverable;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 /**
@@ -23,7 +23,7 @@
  * @see SyslogAppenderFactory
  */
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
-public interface AppenderFactory extends Subtyped {
+public interface AppenderFactory extends Discoverable {
     /**
      * Given a Logback context, an application name, and a layout, build a new appender.
      *

File: dropwizard-spdy/src/main/java/com/codahale/dropwizard/spdy/PushStrategyFactory.java
Patch:
@@ -1,10 +1,10 @@
 package com.codahale.dropwizard.spdy;
 
-import com.codahale.dropwizard.util.Subtyped;
+import com.codahale.dropwizard.jackson.Discoverable;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.eclipse.jetty.spdy.server.http.PushStrategy;
 
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
-public interface PushStrategyFactory extends Subtyped {
+public interface PushStrategyFactory extends Discoverable {
     PushStrategy build();
 }

File: dropwizard-core/src/main/java/com/codahale/dropwizard/setup/Bootstrap.java
Patch:
@@ -9,7 +9,6 @@
 import com.codahale.dropwizard.configuration.ConfigurationSourceProvider;
 import com.codahale.dropwizard.configuration.FileConfigurationSourceProvider;
 import com.codahale.dropwizard.jackson.Jackson;
-import com.codahale.dropwizard.jackson.ServiceSubtypeResolver;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.jvm.BufferPoolMetricSet;
 import com.codahale.metrics.jvm.GarbageCollectorMetricSet;
@@ -36,7 +35,6 @@ public class Bootstrap<T extends Configuration> {
     public Bootstrap(Application<T> application) {
         this.application = application;
         this.objectMapper = Jackson.newObjectMapper();
-        objectMapper.setSubtypeResolver(new ServiceSubtypeResolver());
         this.bundles = Lists.newArrayList();
         this.configuredBundles = Lists.newArrayList();
         this.commands = Lists.newArrayList();

File: dropwizard-jackson/src/main/java/com/codahale/dropwizard/jackson/ServiceSubtypeResolver.java
Patch:
@@ -1,6 +1,5 @@
 package com.codahale.dropwizard.jackson;
 
-import com.codahale.dropwizard.util.Subtyped;
 import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
@@ -21,8 +20,8 @@
 public class ServiceSubtypeResolver extends StdSubtypeResolver {
     private static final Logger LOGGER = LoggerFactory.getLogger(ServiceSubtypeResolver.class);
 
-    public ServiceSubtypeResolver() {
-        for (Class<?> klass : discoverServices(Subtyped.class)) {
+    public ServiceSubtypeResolver(Class<?> rootKlass) {
+        for (Class<?> klass : discoverServices(rootKlass)) {
             for (Class<?> subtype : discoverServices(klass)) {
                 registerSubtypes(subtype);
             }

File: dropwizard-core/src/main/java/com/codahale/dropwizard/server/ServerFactory.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.codahale.dropwizard.jersey.setup.JerseyEnvironment;
 import com.codahale.dropwizard.lifecycle.setup.LifecycleEnvironment;
+import com.codahale.dropwizard.util.Subtyped;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.health.HealthCheckRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
@@ -22,7 +23,7 @@
               include = JsonTypeInfo.As.PROPERTY,
               property = "type",
               defaultImpl = DefaultServerFactory.class)
-public interface ServerFactory {
+public interface ServerFactory extends Subtyped {
     /**
      * Build a server for the given Dropwizard application.
      *

File: dropwizard-jetty/src/main/java/com/codahale/dropwizard/jetty/ConnectorFactory.java
Patch:
@@ -1,13 +1,14 @@
 package com.codahale.dropwizard.jetty;
 
+import com.codahale.dropwizard.util.Subtyped;
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.thread.ThreadPool;
 
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
-public interface ConnectorFactory {
+public interface ConnectorFactory extends Subtyped {
     Connector build(Server server,
                     MetricRegistry metrics,
                     String name,

File: dropwizard-logging/src/main/java/com/codahale/dropwizard/logging/AppenderFactory.java
Patch:
@@ -4,10 +4,11 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.Layout;
+import com.codahale.dropwizard.util.Subtyped;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
-public interface AppenderFactory {
+public interface AppenderFactory extends Subtyped {
     Appender<ILoggingEvent> build(LoggerContext context,
                                   String applicationName,
                                   Layout<ILoggingEvent> layout);

File: dropwizard-spdy/src/main/java/com/codahale/dropwizard/spdy/PushStrategyFactory.java
Patch:
@@ -1,9 +1,10 @@
 package com.codahale.dropwizard.spdy;
 
+import com.codahale.dropwizard.util.Subtyped;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.eclipse.jetty.spdy.server.http.PushStrategy;
 
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
-public interface PushStrategyFactory {
+public interface PushStrategyFactory extends Subtyped {
     PushStrategy build();
 }

File: dropwizard-configuration/src/main/java/com/codahale/dropwizard/configuration/ConfigurationFactory.java
Patch:
@@ -65,7 +65,7 @@ public ConfigurationFactory(Class<T> klass,
      */
     public T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {
         try (InputStream input = provider.open(checkNotNull(path))) {
-            final JsonNode node = mapper.readTree(yamlFactory.createJsonParser(input));
+            final JsonNode node = mapper.readTree(yamlFactory.createParser(input));
             return build(node, path);
         }
     }

File: dropwizard-hibernate/src/main/java/com/codahale/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -37,9 +37,8 @@ public final void run(T configuration, Environment environment) throws Exception
         final DatabaseConfiguration dbConfig = getDatabaseConfiguration(configuration);
         this.sessionFactory = sessionFactoryFactory.build(this, environment, dbConfig, entities);
         environment.jersey().addProvider(new UnitOfWorkResourceMethodDispatchAdapter(sessionFactory));
-        environment.admin()
-                   .addHealthCheck("hibernate", new SessionFactoryHealthCheck(sessionFactory,
-                                                                              dbConfig.getValidationQuery()));
+        environment.admin().addHealthCheck("hibernate", new SessionFactoryHealthCheck(sessionFactory,
+                                                                                      dbConfig.getValidationQuery()));
     }
 
     public SessionFactory getSessionFactory() {

File: dropwizard-hibernate/src/main/java/com/codahale/dropwizard/hibernate/HibernateBundle.java
Patch:
@@ -46,6 +46,6 @@ public SessionFactory getSessionFactory() {
         return sessionFactory;
     }
 
-    public void configure(org.hibernate.cfg.Configuration configuration) {
+    protected void configure(org.hibernate.cfg.Configuration configuration) {
     }
 }

File: dropwizard-jdbi/src/main/java/com/codahale/dropwizard/jdbi/logging/LogbackLog.java
Patch:
@@ -50,6 +50,6 @@ protected final boolean isEnabled()
     @Override
     protected final void log(String msg)
     {
-        log.log(null, fqcn, level.toLocationAwareLoggerInteger(level), msg, null, null);
+        log.log(null, fqcn, Level.toLocationAwareLoggerInteger(level), msg, null, null);
     }
 }

File: dropwizard-jetty/src/main/java/com/codahale/dropwizard/jetty/RequestLogFactory.java
Patch:
@@ -65,17 +65,17 @@ public RequestLogHandler build(String name) {
         logger.setAdditive(false);
         final LoggerContext context = logger.getLoggerContext();
 
-        final AppenderAttachableImpl<ILoggingEvent> appenders = new AppenderAttachableImpl<>();
+        final AppenderAttachableImpl<ILoggingEvent> attachable = new AppenderAttachableImpl<>();
 
         final RequestLogLayout layout = new RequestLogLayout();
         layout.start();
 
         for (AppenderFactory output : this.appenders) {
-            appenders.addAppender(output.build(context, name, layout));
+            attachable.addAppender(output.build(context, name, layout));
         }
 
         final RequestLogHandler handler = new RequestLogHandler();
-        handler.setRequestLog(new AsyncRequestLog(appenders, timeZone));
+        handler.setRequestLog(new AsyncRequestLog(attachable, timeZone));
 
         return handler;
     }

File: dropwizard-migrations/src/main/java/com/codahale/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -33,6 +33,7 @@ protected void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration)
         final DatabaseConfiguration dbConfig = strategy.getDatabaseConfiguration(configuration);
         dbConfig.setMaxSize(1);
         dbConfig.setMinSize(1);
+        dbConfig.setInitialSize(1);
 
         ManagedLiquibase managedLiquibase = null;
         try {

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public DatabaseConfiguration getDatabaseConfiguration() {
         return database;
     }
 
-    @JsonProperty
+    @JsonProperty("database")
     public void setDatabaseConfiguration(DatabaseConfiguration databaseConfiguration) {
         this.database = databaseConfiguration;
     }

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public DatabaseConfiguration getDatabaseConfiguration() {
         return database;
     }
 
-    @JsonProperty
+    @JsonProperty("database")
     public void setDatabaseConfiguration(DatabaseConfiguration databaseConfiguration) {
         this.database = databaseConfiguration;
     }

File: dropwizard-views-mustache/src/test/java/com/codahale/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -56,14 +56,14 @@ protected AppDescriptor configure() {
     public void rendersViewsWithAbsoluteTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/absolute").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase("Woop woop. yay\n");
+                .isEqualTo("Woop woop. yay\n");
     }
 
     @Test
     public void rendersViewsWithRelativeTemplatePaths() throws Exception {
         final String response = client().resource(getBaseURI() + "test/relative").get(String.class);
         assertThat(response)
-                .isEqualToIgnoringCase("Ok.\n");
+                .isEqualTo("Ok.\n");
     }
 
     @Test

File: dropwizard-core/src/test/java/com/codahale/dropwizard/ConfigurationTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.codahale.dropwizard;
 
 import com.codahale.dropwizard.jackson.Jackson;
+import com.codahale.dropwizard.jetty.ConnectorFactory;
 import com.codahale.dropwizard.logging.AppenderFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.sun.jersey.spi.service.ServiceFinder;
@@ -28,6 +29,8 @@ public void ensureConfigSerializable() throws Exception {
         final ObjectMapper mapper = Jackson.newObjectMapper();
         mapper.getSubtypeResolver()
               .registerSubtypes(ServiceFinder.find(AppenderFactory.class).toClassArray());
+        mapper.getSubtypeResolver()
+              .registerSubtypes(ServiceFinder.find(ConnectorFactory.class).toClassArray());
 
         // Issue-96: some types were not serializable
         final String json = mapper.writeValueAsString(configuration);

File: dropwizard-example/src/main/java/com/example/helloworld/core/Person.java
Patch:
@@ -16,7 +16,7 @@
 })
 public class Person {
     @Id
-    @GeneratedValue(strategy = GenerationType.AUTO)
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private long id;
 
     @Column(name = "fullName", nullable = false)

File: dropwizard-assets/src/main/java/com/codahale/dropwizard/assets/AssetsBundle.java
Patch:
@@ -4,6 +4,7 @@
 import com.codahale.dropwizard.servlets.assets.AssetServlet;
 import com.codahale.dropwizard.setup.Bootstrap;
 import com.codahale.dropwizard.setup.Environment;
+import com.google.common.base.Charsets;
 
 import static com.google.common.base.Preconditions.checkArgument;
 
@@ -85,6 +86,6 @@ public void run(Environment environment) {
     }
 
     private AssetServlet createServlet() {
-        return new AssetServlet(resourcePath, uriPath, indexFile);
+        return new AssetServlet(resourcePath, uriPath, indexFile, Charsets.UTF_8);
     }
 }

File: dropwizard-lifecycle/src/test/java/com/codahale/dropwizard/lifecycle/setup/LifecycleEnvironmentTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.setup;
+package com.codahale.dropwizard.lifecycle.setup;
 
 import com.codahale.dropwizard.lifecycle.JettyManaged;
 import com.codahale.dropwizard.lifecycle.Managed;

File: dropwizard-views-mustache/src/test/java/com/codahale/dropwizard/views/mustache/MustacheViewRendererTest.java
Patch:
@@ -75,7 +75,7 @@ public void returnsA500ForViewsWithBadTemplatePaths() throws Exception {
                     .isEqualTo(500);
 
             assertThat(e.getResponse().getEntity(String.class))
-                    .isEqualTo("<html><head><title>Missing Template</title></head><body><h1>Missing Template</h1><p>Template /woo-oo-ahh.txt.ftl not found.</p></body></html>");
+                    .isEqualTo("<html><head><title>Missing Template</title></head><body><h1>Missing Template</h1><p>Template /woo-oo-ahh.txt.mustache not found.</p></body></html>");
         }
     }
 }

File: dropwizard-client/src/main/java/com/codahale/dropwizard/client/JerseyClientBuilder.java
Patch:
@@ -1,7 +1,7 @@
 package com.codahale.dropwizard.client;
 
 import com.codahale.dropwizard.config.Environment;
-import com.codahale.dropwizard.jersey.JacksonMessageBodyProvider;
+import com.codahale.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.Lists;

File: dropwizard-client/src/test/java/com/codahale/dropwizard/client/JerseyClientBuilderTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.codahale.dropwizard.client;
 
 import com.codahale.dropwizard.config.Environment;
-import com.codahale.dropwizard.jersey.JacksonMessageBodyProvider;
+import com.codahale.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
 import com.codahale.dropwizard.setup.LifecycleEnvironment;
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: dropwizard-core/src/main/java/com/codahale/dropwizard/config/ServerFactory.java
Patch:
@@ -1,7 +1,7 @@
 package com.codahale.dropwizard.config;
 
 import com.codahale.dropwizard.configuration.ConfigurationException;
-import com.codahale.dropwizard.jersey.JacksonMessageBodyProvider;
+import com.codahale.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
 import com.codahale.dropwizard.jetty.*;
 import com.codahale.dropwizard.servlets.ThreadNameFilter;
 import com.codahale.dropwizard.util.Duration;

File: dropwizard-hibernate/src/test/java/com/codahale/dropwizard/hibernate/JerseyIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.codahale.dropwizard.db.DatabaseConfiguration;
 import com.codahale.dropwizard.jackson.Jackson;
 import com.codahale.dropwizard.jersey.DropwizardResourceConfig;
-import com.codahale.dropwizard.jersey.JacksonMessageBodyProvider;
+import com.codahale.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
 import com.codahale.dropwizard.setup.LifecycleEnvironment;
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.base.Optional;

File: dropwizard-jdbi/src/main/java/com/codahale/dropwizard/jdbi/jersey/LoggingDBIExceptionMapper.java
Patch:
@@ -1,6 +1,6 @@
 package com.codahale.dropwizard.jdbi.jersey;
 
-import com.codahale.dropwizard.jersey.LoggingExceptionMapper;
+import com.codahale.dropwizard.jersey.errors.LoggingExceptionMapper;
 import org.skife.jdbi.v2.exceptions.DBIException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dropwizard-jdbi/src/main/java/com/codahale/dropwizard/jdbi/jersey/LoggingSQLExceptionMapper.java
Patch:
@@ -1,6 +1,6 @@
 package com.codahale.dropwizard.jdbi.jersey;
 
-import com.codahale.dropwizard.jersey.LoggingExceptionMapper;
+import com.codahale.dropwizard.jersey.errors.LoggingExceptionMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dropwizard-jersey/src/main/java/com/codahale/dropwizard/jersey/guava/OptionalQueryParamInjectableProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.jersey;
+package com.codahale.dropwizard.jersey.guava;
 
 import com.google.common.base.Optional;
 import com.sun.jersey.api.ParamException;

File: dropwizard-jersey/src/main/java/com/codahale/dropwizard/jersey/guava/OptionalResourceMethodDispatchAdapter.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.jersey;
+package com.codahale.dropwizard.jersey.guava;
 
 import com.google.common.base.Optional;
 import com.sun.jersey.api.NotFoundException;

File: dropwizard-jersey/src/main/java/com/codahale/dropwizard/jersey/jackson/JacksonMessageBodyProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.codahale.dropwizard.jersey;
+package com.codahale.dropwizard.jersey.jackson;
 
 import com.codahale.dropwizard.validation.ConstraintViolations;
 import com.codahale.dropwizard.validation.Validated;

File: dropwizard-jersey/src/test/java/com/codahale/dropwizard/jersey/jackson/JacksonMessageBodyProviderTest.java
Patch:
@@ -1,7 +1,6 @@
-package com.codahale.dropwizard.jersey;
+package com.codahale.dropwizard.jersey.jackson;
 
 import com.codahale.dropwizard.jackson.Jackson;
-import com.codahale.dropwizard.jersey.JacksonMessageBodyProvider;
 import com.codahale.dropwizard.validation.ConstraintViolations;
 import com.codahale.dropwizard.validation.Validated;
 import com.fasterxml.jackson.annotation.JsonIgnoreType;
@@ -27,6 +26,8 @@
 import static org.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown;
 import static org.mockito.Mockito.*;
 
+// TODO: 4/24/13 <coda> -- move JacksonMessageBodyProviderTest to JerseyTest
+
 @SuppressWarnings("unchecked")
 public class JacksonMessageBodyProviderTest {
     private static final Annotation[] NONE = new Annotation[0];

File: dropwizard-testing/src/main/java/com/codahale/dropwizard/testing/ResourceTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.codahale.dropwizard.jackson.Jackson;
 import com.codahale.dropwizard.jersey.DropwizardResourceConfig;
-import com.codahale.dropwizard.jersey.JacksonMessageBodyProvider;
+import com.codahale.dropwizard.jersey.jackson.JacksonMessageBodyProvider;
 import com.codahale.metrics.MetricRegistry;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.collect.Maps;

File: dropwizard-logging/src/main/java/com/codahale/dropwizard/logging/PrefixedExtendedThrowableProxyConverter.java
Patch:
@@ -3,7 +3,7 @@
 import ch.qos.logback.classic.spi.StackTraceElementProxy;
 import ch.qos.logback.classic.spi.ThrowableProxyUtil;
 
-class PrefixedExtendedThrowableProxyConverter extends PrefixedThrowableProxyConverter {
+public class PrefixedExtendedThrowableProxyConverter extends PrefixedThrowableProxyConverter {
     @Override
     protected void extraData(StringBuilder builder, StackTraceElementProxy step) {
         if (step != null) {

File: dropwizard-logging/src/main/java/com/codahale/dropwizard/logging/PrefixedThrowableProxyConverter.java
Patch:
@@ -5,7 +5,7 @@
 import ch.qos.logback.classic.spi.StackTraceElementProxy;
 import ch.qos.logback.core.CoreConstants;
 
-class PrefixedThrowableProxyConverter extends ThrowableProxyConverter {
+public class PrefixedThrowableProxyConverter extends ThrowableProxyConverter {
     private static final String PREFIX = "! ";
 
     @Override

File: dropwizard-core/src/main/java/com/codahale/dropwizard/jersey/LoggingExceptionMapper.java
Patch:
@@ -59,7 +59,7 @@ protected void logException(long id, E exception) {
 
     @SuppressWarnings("UnusedParameters")
     protected String formatResponseEntity(long id, Throwable exception) {
-        return String.format("There was an error processing your request. It has been logged (ID %016x).\n", id);
+        return String.format("There was an error processing your request. It has been logged (ID %016x).%n", id);
     }
 
     @SuppressWarnings("UnusedParameters")

File: dropwizard-views/src/test/java/com/yammer/dropwizard/views/tests/ViewMessageBodyWriterTest.java
Patch:
@@ -54,7 +54,7 @@ public void writesFreemarkerViews() throws Exception {
                        output);
 
         assertThat(output.toString())
-                .isEqualTo("Woop woop. HONK\n");
+                .isEqualTo(String.format("Woop woop. HONK%n"));
     }
 
     @Test
@@ -90,7 +90,7 @@ public void handlesRelativeFreemarkerTemplatePaths() throws Exception {
                        output);
 
         assertThat(output.toString())
-                .isEqualTo("Ok.\n");
+                .isEqualTo(String.format("Ok.%n"));
     }
 
     @Test

File: dropwizard-client/src/main/java/com/yammer/dropwizard/client/HttpClientConfiguration.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * The configuration class used by {@link HttpClientBuilder}.
  *
-  * @see <a href="http://dropwizard.codahale.com/manual/client.html#configuration-defaults">Http Client Configuration</a>
+ * @see <a href="http://dropwizard.codahale.com/manual/client/#configuration-defaults">Http Client Configuration</a>
  */
 public class HttpClientConfiguration {
     @NotNull

File: dropwizard-client/src/main/java/com/yammer/dropwizard/client/JerseyClientConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * {@link HttpClientConfiguration}.
  *
  * @see HttpClientConfiguration
- * @see <a href="http://dropwizard.codahale.com/manual/client.html#man-client-jersey-config">Jersey Client Configuration</a>
+ * @see <a href="http://dropwizard.codahale.com/manual/client/#man-client-jersey-config">Jersey Client Configuration</a>
  */
 public class JerseyClientConfiguration extends HttpClientConfiguration {
     @Min(1)

File: dropwizard-client/src/main/java/com/yammer/dropwizard/client/HttpClientConfiguration.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * The configuration class used by {@link HttpClientBuilder}.
  *
-  * @see <a href="http://dropwizard.codahale.com/manual/client.html#configuration-defaults">Http Client Configuration</a>
+ * @see <a href="http://dropwizard.codahale.com/manual/client/#configuration-defaults">Http Client Configuration</a>
  */
 public class HttpClientConfiguration {
     @NotNull

File: dropwizard-client/src/main/java/com/yammer/dropwizard/client/JerseyClientConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * {@link HttpClientConfiguration}.
  *
  * @see HttpClientConfiguration
- * @see <a href="http://dropwizard.codahale.com/manual/client.html#man-client-jersey-config">Jersey Client Configuration</a>
+ * @see <a href="http://dropwizard.codahale.com/manual/client/#man-client-jersey-config">Jersey Client Configuration</a>
  */
 public class JerseyClientConfiguration extends HttpClientConfiguration {
     @Min(1)

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/LoggingFactory.java
Patch:
@@ -58,7 +58,7 @@ public void configure() {
         final Logger root = configureLevels();
 
         for (LoggingOutput output : config.getOutputs()) {
-            root.addAppender(output.build(root.getLoggerContext(), name));
+            root.addAppender(output.build(root.getLoggerContext(), name, null));
         }
 
         final MBeanServer server = ManagementFactory.getPlatformMBeanServer();

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/RequestLogHandlerFactory.java
Patch:
@@ -46,7 +46,7 @@ public RequestLogHandler build() {
         layout.start();
 
         for (LoggingOutput output : config.getOutputs()) {
-            appenders.addAppender(output.build(context, name));
+            appenders.addAppender(output.build(context, name, layout));
         }
 
         final RequestLogHandler handler = new RequestLogHandler();

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/LoggingOutput.java
Patch:
@@ -3,9 +3,10 @@
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
+import ch.qos.logback.core.Layout;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
 public interface LoggingOutput {
-    Appender<ILoggingEvent> build(LoggerContext context, String serviceName);
+    Appender<ILoggingEvent> build(LoggerContext context, String serviceName, Layout<ILoggingEvent> layout);
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/SyslogLoggingOutput.java
Patch:
@@ -6,6 +6,7 @@
 import ch.qos.logback.classic.net.SyslogAppender;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
+import ch.qos.logback.core.Layout;
 import ch.qos.logback.core.spi.FilterAttachable;
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -94,7 +95,7 @@ public void setLogFormat(String logFormat) {
     }
 
     @Override
-    public Appender<ILoggingEvent> build(LoggerContext context, String serviceName) {
+    public Appender<ILoggingEvent> build(LoggerContext context, String serviceName, Layout<ILoggingEvent> layout) {
         final SyslogAppender appender = new SyslogAppender();
         appender.setContext(context);
         appender.setSuffixPattern(logFormat);

File: dropwizard-client/src/main/java/com/yammer/dropwizard/client/HttpClientBuilder.java
Patch:
@@ -42,7 +42,7 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
 
     private HttpClientConfiguration configuration = new HttpClientConfiguration();
     private DnsResolver resolver = new SystemDefaultDnsResolver();
-    private SchemeRegistry registry = SchemeRegistryFactory.createDefault();
+    private SchemeRegistry registry = SchemeRegistryFactory.createSystemDefault();
 
     /**
      * Use the given {@link HttpClientConfiguration} instance.

File: dropwizard-client/src/test/java/com/yammer/dropwizard/client/tests/HttpClientBuilderTest.java
Patch:
@@ -202,7 +202,7 @@ public void usesTheDefaultSchemeRegistry() throws Exception {
         final AbstractHttpClient client = (AbstractHttpClient) builder.using(configuration).build();
 
         assertThat(client.getConnectionManager().getSchemeRegistry().getSchemeNames())
-                .isEqualTo(SchemeRegistryFactory.createDefault().getSchemeNames());
+                .isEqualTo(SchemeRegistryFactory.createSystemDefault().getSchemeNames());
     }
 
     @Test

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/SyslogFormatter.java
Patch:
@@ -9,6 +9,7 @@ public class SyslogFormatter extends PatternLayout {
     public SyslogFormatter(LoggerContext context, TimeZone timeZone, String name) {
         super();
         getDefaultConverterMap().put("ex", PrefixedThrowableProxyConverter.class.getName());
+        getDefaultConverterMap().put("xEx", PrefixedExtendedThrowableProxyConverter.class.getName());
         setPattern(name + ": %d{ISO8601," + timeZone.getID() + "}] %-5p [%t] %c{2} %X - %m\n");
         setContext(context);
     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/LogFormatter.java
Patch:
@@ -13,7 +13,8 @@ public LogFormatter(LoggerContext context, TimeZone timeZone) {
         super();
         setOutputPatternAsHeader(false);
         getDefaultConverterMap().put("ex", PrefixedThrowableProxyConverter.class.getName());
-        setPattern("%-5p [%d{ISO8601," + timeZone.getID() + "}] %c: %m%n%ex");
+        getDefaultConverterMap().put("xEx", PrefixedExtendedThrowableProxyConverter.class.getName());
+        setPattern("%-5p [%d{ISO8601," + timeZone.getID() + "}] %c: %m%n%xEx");
         setContext(context);
     }
 }

File: dropwizard-example/src/main/java/com/example/helloworld/resources/ViewResource.java
Patch:
@@ -29,15 +29,15 @@ public View freemarkerISO88591() {
     @Produces("text/html;charset=UTF-8")
     @Path("/utf8.mustache")
     public View mustacheUTF8() {
-        return new View("/views/ftl/utf8.ftl", Charsets.UTF_8) {
+        return new View("/views/mustache/utf8.mustache", Charsets.UTF_8) {
         };
     }
 
     @GET
     @Produces("text/html;charset=ISO-8859-1")
     @Path("/iso88591.mustache")
     public View mustacheISO88591() {
-        return new View("/views/ftl/iso88591.ftl", Charsets.ISO_8859_1) {
+        return new View("/views/mustache/iso88591.mustache", Charsets.ISO_8859_1) {
         };
     }
 }

File: dropwizard-example/src/main/java/com/example/helloworld/resources/ViewResource.java
Patch:
@@ -29,15 +29,15 @@ public View freemarkerISO88591() {
     @Produces("text/html;charset=UTF-8")
     @Path("/utf8.mustache")
     public View mustacheUTF8() {
-        return new View("/views/ftl/utf8.ftl", Charsets.UTF_8) {
+        return new View("/views/mustache/utf8.mustache", Charsets.UTF_8) {
         };
     }
 
     @GET
     @Produces("text/html;charset=ISO-8859-1")
     @Path("/iso88591.mustache")
     public View mustacheISO88591() {
-        return new View("/views/ftl/iso88591.ftl", Charsets.ISO_8859_1) {
+        return new View("/views/mustache/iso88591.mustache", Charsets.ISO_8859_1) {
         };
     }
 }

File: dropwizard-core/src/test/java/com/yammer/dropwizard/tasks/tests/TaskServletTest.java
Patch:
@@ -81,6 +81,6 @@ public void returnsA500OnExceptions() throws Exception {
         
         servlet.service(request, response);
 
-        verify(response).sendError(500);
+        verify(response).setStatus(500);
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Bootstrap.java
Patch:
@@ -40,6 +40,7 @@ public void addBundle(Bundle bundle) {
     }
 
     public void addBundle(ConfiguredBundle<? super T> bundle) {
+        bundle.initialize(this);
         configuredBundles.add(bundle);
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/assets/AssetServlet.java
Patch:
@@ -156,7 +156,8 @@ protected void doGet(HttpServletRequest req,
     private CachedAsset loadAsset(String key) throws URISyntaxException, IOException {
         Preconditions.checkArgument(key.startsWith(uriPath));
         final String requestedResourcePath = CharMatcher.is('/').trimFrom(key.substring(uriPath.length()));
-        final String absoluteRequestedResourcePath = this.resourcePath + requestedResourcePath;
+        final String absoluteRequestedResourcePath = CharMatcher.is('/').trimFrom(
+        		this.resourcePath + requestedResourcePath);
         
         URL requestedResourceURL = Resources.getResource(absoluteRequestedResourcePath);
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/RequestLogHandlerFactory.java
Patch:
@@ -6,13 +6,13 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.ConsoleAppender;
 import ch.qos.logback.core.CoreConstants;
-import ch.qos.logback.core.LayoutBase;
 import ch.qos.logback.core.FileAppender;
+import ch.qos.logback.core.LayoutBase;
 import ch.qos.logback.core.spi.AppenderAttachableImpl;
 import com.google.common.base.Optional;
-import com.google.common.base.Ticker;
 import com.yammer.dropwizard.jetty.AsyncRequestLog;
 import com.yammer.dropwizard.logging.LogbackFactory;
+import com.yammer.metrics.core.Clock;
 import org.eclipse.jetty.server.handler.RequestLogHandler;
 import org.slf4j.LoggerFactory;
 
@@ -91,7 +91,7 @@ public RequestLogHandler build() {
         }
 
         final RequestLogHandler handler = new RequestLogHandler();
-        handler.setRequestLog(new AsyncRequestLog(Ticker.systemTicker(),
+        handler.setRequestLog(new AsyncRequestLog(Clock.defaultClock(),
                                                   appenders,
                                                   config.getTimeZone()));
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ConfiguredCommand.java
Patch:
@@ -29,9 +29,8 @@ protected ConfiguredCommand(String name, String description) {
      *
      * @return the {@link Class} of the configuration type
      */
-    @SuppressWarnings("unchecked")
     protected Class<T> getConfigurationClass() {
-        return (Class<T>) Generics.getTypeParameter(getClass(), Configuration.class);
+        return Generics.getTypeParameter(getClass(), Configuration.class);
     }
 
     /**

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -10,8 +10,7 @@
 public abstract class MigrationsBundle<T extends Configuration> implements Bundle, ConfigurationStrategy<T> {
     @Override
     public final void initialize(Bootstrap<?> bootstrap) {
-        @SuppressWarnings("unchecked")
-        final Class<T> klass = (Class<T>) Generics.getTypeParameter(getClass(), Configuration.class);
+        final Class<T> klass = Generics.getTypeParameter(getClass(), Configuration.class);
         bootstrap.addCommand(new DbCommand<T>(this, klass));
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ConfiguredCommand.java
Patch:
@@ -29,9 +29,8 @@ protected ConfiguredCommand(String name, String description) {
      *
      * @return the {@link Class} of the configuration type
      */
-    @SuppressWarnings("unchecked")
     protected Class<T> getConfigurationClass() {
-        return (Class<T>) Generics.getTypeParameter(getClass(), Configuration.class);
+        return Generics.getTypeParameter(getClass(), Configuration.class);
     }
 
     /**

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -10,8 +10,7 @@
 public abstract class MigrationsBundle<T extends Configuration> implements Bundle, ConfigurationStrategy<T> {
     @Override
     public final void initialize(Bootstrap<?> bootstrap) {
-        @SuppressWarnings("unchecked")
-        final Class<T> klass = (Class<T>) Generics.getTypeParameter(getClass(), Configuration.class);
+        final Class<T> klass = Generics.getTypeParameter(getClass(), Configuration.class);
         bootstrap.addCommand(new DbCommand<T>(this, klass));
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/Generics.java
Patch:
@@ -32,7 +32,7 @@ public static <T> Class<? extends T> getTypeParameter(Class<?> klass, Class<T> p
                 }
             }
         }
-        throw new IllegalStateException("Cannot figure out Configuration type parameterization for " +
+        throw new IllegalStateException("Cannot figure out type parameterization for " +
                                                 klass.getName());
     }
 

File: dropwizard-core/src/test/java/com/yammer/dropwizard/assets/tests/AssetServletTest.java
Patch:
@@ -44,7 +44,7 @@ public RootAssetServlet() {
     
     public static class NoCharsetAssetServlet extends AssetServlet {
         public NoCharsetAssetServlet() {
-            super(RESOURCE_PATH,DUMMY_SERVLET, NOCHARSET_SERVLET);
+            super(RESOURCE_PATH, NOCHARSET_SERVLET, null);
             setDefaultCharset(null);
         }
     }

File: dropwizard-core/src/test/java/com/yammer/dropwizard/json/tests/GuavaExtrasModuleTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.datatype.guava.GuavaModule;
 import com.google.common.base.Optional;
 import com.google.common.cache.CacheBuilderSpec;
 import com.google.common.net.HostAndPort;
@@ -16,6 +17,7 @@ public class GuavaExtrasModuleTest {
 
     @Before
     public void setUp() throws Exception {
+        mapper.registerModule(new GuavaModule());
         mapper.registerModule(new GuavaExtrasModule());
     }
 

File: dropwizard-hibernate/src/main/java/com/yammer/dropwizard/hibernate/AbstractDAO.java
Patch:
@@ -9,7 +9,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
- * An abstract base class for Guice-injected Hibernate DAO classes.
+ * An abstract base class for Hibernate DAO classes.
  *
  * @param <E> the class which this DAO manages
  * @author coda

File: dropwizard-core/src/main/java/com/yammer/dropwizard/bundles/AssetsBundle.java
Patch:
@@ -120,7 +120,6 @@ public void run(Environment environment) {
     }
 
     private AssetServlet createServlet() {
-        final URL resourceURL = Resources.getResource(resourcePath.substring(1));
-        return new AssetServlet(resourceURL, cacheBuilderSpec, uriPath, indexFile);
+        return new AssetServlet(resourcePath, cacheBuilderSpec, uriPath, indexFile);
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Environment.java
Patch:
@@ -309,8 +309,7 @@ public void disableJerseyFeature(String name) {
      * @param value    the value of the Jersey property
      * @see ResourceConfig
      */
-    public void setJerseyProperty(String name,
-                                  @Nullable Object value) {
+    public void setJerseyProperty(String name, @Nullable Object value) {
         config.getProperties().put(checkNotNull(name), value);
     }
 
@@ -535,7 +534,7 @@ public ServletContainer getJerseyServletContainer() {
     }
 
     public void setJerseyServletContainer(ServletContainer jerseyServletContainer) {
-        this.jerseyServletContainer = jerseyServletContainer;
+        this.jerseyServletContainer = checkNotNull(jerseyServletContainer);
     }
 
     public String getName() {

File: dropwizard-core/src/main/java/com/yammer/dropwizard/bundles/AssetsBundle.java
Patch:
@@ -120,7 +120,6 @@ public void run(Environment environment) {
     }
 
     private AssetServlet createServlet() {
-        final URL resourceURL = Resources.getResource(resourcePath.substring(1));
-        return new AssetServlet(resourceURL, cacheBuilderSpec, uriPath, indexFile);
+        return new AssetServlet(resourcePath, cacheBuilderSpec, uriPath, indexFile);
     }
 }

File: dropwizard-core/src/test/java/com/yammer/dropwizard/servlets/tests/AssetServletTest.java
Patch:
@@ -18,7 +18,7 @@ public class AssetServletTest {
     private static ServletTester servletTester;
     private static final String DUMMY_SERVLET = "/dummy_servlet/";
     private static final String NOINDEX_SERVLET = "/noindex_servlet/";
-    private static final String RESOURCE_PATH = "assets";
+    private static final String RESOURCE_PATH = "/assets";
     private static final CacheBuilderSpec CACHE_BUILDER_SPEC = CacheBuilderSpec.parse("maximumSize=100");
 
     private HttpTester request;
@@ -28,13 +28,13 @@ public class AssetServletTest {
 
     public static class DummyAssetServlet extends AssetServlet {
         public DummyAssetServlet() {
-            super(Resources.getResource(RESOURCE_PATH), CACHE_BUILDER_SPEC, DUMMY_SERVLET, "index.htm");
+            super(RESOURCE_PATH, CACHE_BUILDER_SPEC, DUMMY_SERVLET, "index.htm");
         }
     }
 
     public static class NoIndexAssetServlet extends AssetServlet {
         public NoIndexAssetServlet() {
-            super(Resources.getResource(RESOURCE_PATH), CACHE_BUILDER_SPEC, DUMMY_SERVLET, null);
+            super(RESOURCE_PATH, CACHE_BUILDER_SPEC, DUMMY_SERVLET, null);
         }
     }
 

File: dropwizard-client/src/main/java/com/yammer/dropwizard/client/JerseyClientConfiguration.java
Patch:
@@ -111,7 +111,7 @@ public boolean isThreadPoolSizedCorrectly() {
         return minThreads <= maxThreads;
     }
 
-    @ValidationMethod(message = ".compressRequestEntity requires gzipEnabled set to true")
+    @ValidationMethod(message = ".gzipEnabledForRequests requires gzipEnabled set to true")
     public boolean isCompressionConfigurationValid() {
         return !gzipEnabledForRequests || gzipEnabled;
     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/JarLocation.java
Patch:
@@ -18,7 +18,7 @@ public JarLocation(Class<?> klass) {
     public String toString() {
         final URL location = klass.getProtectionDomain().getCodeSource().getLocation();
         try {
-            final String jar = new File(location.getFile()).getName();
+            final String jar = new File(location.toURI()).getName();
             if (jar.endsWith(".jar")) {
                 return jar;
             }

File: dropwizard-core/src/test/java/com/yammer/dropwizard/config/tests/GzipConfigurationTest.java
Patch:
@@ -21,8 +21,7 @@ public class GzipConfigurationTest {
     public void setUp() throws Exception {
         this.gzip = ConfigurationFactory.forClass(GzipConfiguration.class,
                                                   new Validator())
-                                        .build(new File(Resources.getResource("yaml/gzip.yml")
-                                                                 .getFile()));
+                                        .build(new File(Resources.getResource("yaml/gzip.yml").toURI()));
     }
 
     @Test

File: dropwizard-core/src/test/java/com/yammer/dropwizard/config/tests/HttpConfigurationTest.java
Patch:
@@ -22,8 +22,7 @@ public class HttpConfigurationTest {
     public void setUp() throws Exception {
         this.http = ConfigurationFactory.forClass(HttpConfiguration.class,
                                                   new Validator())
-                                        .build(new File(Resources.getResource("yaml/http.yml")
-                                                                 .getFile()));
+                                        .build(new File(Resources.getResource("yaml/http.yml").toURI()));
     }
 
     @Test

File: dropwizard-core/src/test/java/com/yammer/dropwizard/config/tests/LoggingConfigurationTest.java
Patch:
@@ -22,8 +22,7 @@ public class LoggingConfigurationTest {
 
     @Before
     public void setUp() throws Exception {
-        this.config = factory.build(new File(Resources.getResource("logging.yml")
-                                                      .getFile()));
+        this.config = factory.build(new File(Resources.getResource("logging.yml").toURI()));
     }
 
     @Test

File: dropwizard-core/src/test/java/com/yammer/dropwizard/config/tests/RequestLogConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@ public class RequestLogConfigurationTest {
     public void setUp() throws Exception {
         this.requestLog = ConfigurationFactory
                 .forClass(RequestLogConfiguration.class, new Validator())
-                .build(new File(Resources.getResource("yaml/requestLog.yml").getFile()));
+                .build(new File(Resources.getResource("yaml/requestLog.yml").toURI()));
     }
 
     @Test

File: dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/DropwizardResourceConfig.java
Patch:
@@ -17,5 +17,6 @@ public DropwizardResourceConfig(boolean testOnly) {
         }
         getClasses().add(InstrumentedResourceMethodDispatchAdapter.class);
         getClasses().add(CacheControlledResourceMethodDispatchAdapter.class);
+        getClasses().add(OptionalResourceMethodDispatchAdapter.class);
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ServerCommand.java
Patch:
@@ -49,12 +49,11 @@ protected void run(AbstractService<T> service,
         service.initializeWithBundles(configuration, environment);
         final Server server = new ServerFactory(configuration.getHttpConfiguration(),
                                                 service.getName()).buildServer(environment);
-        environment.setServer(server);
         final Log log = Log.forClass(ServerCommand.class);
         logBanner(service, log);
         try {
             server.start();
-            service.serverStarted();
+            environment.serverStarted(server);
             server.join();
         } catch (Exception e) {
             log.error(e, "Unable to start server, shutting down");

File: dropwizard-scala_2.9.1/src/main/java/com/yammer/dropwizard/bundles/ScalaBundle.java
Patch:
@@ -10,7 +10,6 @@ public class ScalaBundle extends Bundle {
 
     @Override
     public void initialize(final Bootstrap<?> bootstrap) {
-        bootstrap.addBundle(new ScalaBundle());
         bootstrap.getObjectMapperFactory().registerModule(new DefaultScalaModule());
     }
 

File: dropwizard-auth/src/main/java/com/yammer/dropwizard/auth/basic/BasicAuthInjectable.java
Patch:
@@ -67,11 +67,11 @@ public T getValue(HttpContext c) {
                 }
             }
         } catch (UnsupportedEncodingException e) {
-            BasicAuthProvider.LOG.debug(e, "Error decoding credentials");
+            BasicAuthProvider.LOGGER.debug("Error decoding credentials", e);
         } catch (IllegalArgumentException e) {
-            BasicAuthProvider.LOG.debug(e, "Error decoding credentials");
+            BasicAuthProvider.LOGGER.debug("Error decoding credentials", e);
         } catch (AuthenticationException e) {
-            BasicAuthProvider.LOG.warn(e, "Error authenticating credentials");
+            BasicAuthProvider.LOGGER.warn("Error authenticating credentials", e);
             throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);
         }
 

File: dropwizard-auth/src/main/java/com/yammer/dropwizard/auth/basic/BasicAuthProvider.java
Patch:
@@ -7,15 +7,16 @@
 import com.sun.jersey.spi.inject.InjectableProvider;
 import com.yammer.dropwizard.auth.Auth;
 import com.yammer.dropwizard.auth.Authenticator;
-import com.yammer.dropwizard.logging.Log;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A Jersey provider for Basic HTTP authentication.
  *
  * @param <T>    the principal type.
  */
 public class BasicAuthProvider<T> implements InjectableProvider<Auth, Parameter> {
-    static final Log LOG = Log.forClass(BasicAuthProvider.class);
+    static final Logger LOGGER = LoggerFactory.getLogger(BasicAuthProvider.class);
 
     private final Authenticator<BasicCredentials, T> authenticator;
     private final String realm;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/jetty/AsyncRequestLog.java
Patch:
@@ -7,7 +7,6 @@
 import ch.qos.logback.classic.spi.LoggingEvent;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.spi.AppenderAttachableImpl;
-import com.yammer.dropwizard.logging.Log;
 import org.eclipse.jetty.http.HttpHeaders;
 import org.eclipse.jetty.server.Authentication;
 import org.eclipse.jetty.server.Request;
@@ -29,7 +28,6 @@
  */
 public class AsyncRequestLog extends AbstractLifeCycle implements RequestLog {
     private static final AtomicInteger THREAD_COUNTER = new AtomicInteger();
-    private static final Log LOG = Log.forClass(AsyncRequestLog.class);
     private static final int BATCH_SIZE = 10000;
 
     private class Dispatcher implements Runnable {

File: dropwizard-jdbi/src/main/java/com/yammer/dropwizard/jdbi/DBIFactory.java
Patch:
@@ -55,12 +55,13 @@ public DBI build(DatabaseConfiguration configuration, ManagedDataSource dataSour
         environment.addHealthCheck(new DBIHealthCheck(dbi, name, validationQuery));
         dbi.setSQLLog(new LogbackLog(LOGGER, Level.TRACE));
         dbi.setTimingCollector(new InstrumentedTimingCollector(Metrics.defaultRegistry(),
-                                                                new SanerNamingStrategy()));
+                                                               new SanerNamingStrategy()));
         dbi.setStatementRewriter(new NamePrependingStatementRewriter(new ColonPrefixNamedParamStatementRewriter()));
-        dbi.registerArgumentFactory(new OptionalArgumentFactory());
+        dbi.registerArgumentFactory(new OptionalArgumentFactory(configuration.getDriverClass()));
         dbi.registerContainerFactory(new ImmutableListContainerFactory());
         dbi.registerContainerFactory(new ImmutableSetContainerFactory());
         dbi.registerContainerFactory(new OptionalContainerFactory());
+
         return dbi;
     }
 }

File: dropwizard-jdbi/src/main/java/com/yammer/dropwizard/jdbi/args/OptionalArgument.java
Patch:
@@ -9,7 +9,7 @@
 import java.sql.Types;
 
 public class OptionalArgument implements Argument {
-    private final Optional<?> value;
+    protected final Optional<?> value;
 
     public OptionalArgument(Optional<?> value) {
         this.value = value;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/json/ObjectMapperFactory.java
Patch:
@@ -506,15 +506,15 @@ public ObjectMapper build(JsonFactory factory) {
         }
 
         for (Map.Entry<JsonGenerator.Feature, Boolean> entry : generatorFeatures.entrySet()) {
-            mapper.getJsonFactory().configure(entry.getKey(), entry.getValue());
+            mapper.getFactory().configure(entry.getKey(), entry.getValue());
         }
 
         for (Map.Entry<JsonParser.Feature, Boolean> entry : parserFeatures.entrySet()) {
-            mapper.getJsonFactory().configure(entry.getKey(), entry.getValue());
+            mapper.getFactory().configure(entry.getKey(), entry.getValue());
         }
 
         for (Map.Entry<JsonFactory.Feature, Boolean> entry : factoryFeatures.entrySet()) {
-            mapper.getJsonFactory().configure(entry.getKey(), entry.getValue());
+            mapper.getFactory().configure(entry.getKey(), entry.getValue());
         }
 
         if (annotationIntrospector != null) {

File: dropwizard-core/src/test/java/com/yammer/dropwizard/json/tests/ObjectMapperFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public void buildsObjectMappersWithSpecificJsonFactories() throws Exception {
         final JsonFactory jsonFactory = new YAMLFactory();
         final ObjectMapper mapper = factory.build(jsonFactory);
 
-        assertThat(mapper.getJsonFactory())
+        assertThat(mapper.getFactory())
                 .isSameAs(jsonFactory);
     }
 
@@ -50,7 +50,7 @@ public void defaultsToAnnotationSensitivePropertyNames() throws Exception {
     public void defaultsToAllowingComments() throws Exception {
         final ObjectMapper mapper = factory.build();
 
-        assertThat(mapper.getJsonFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))
+        assertThat(mapper.getFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))
                 .isTrue();
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ConfiguredCommand.java
Patch:
@@ -31,7 +31,7 @@ protected ConfiguredCommand(String name, String description) {
      */
     @SuppressWarnings("unchecked")
     protected Class<T> getConfigurationClass() {
-        return (Class<T>) Generics.getTypeParameter(getClass());
+        return (Class<T>) Generics.getTypeParameter(getClass(), Configuration.class);
     }
 
     /**

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -29,7 +29,7 @@ public abstract class MigrationsBundle<T extends Configuration> extends Bundle i
     @Override
     @SuppressWarnings("unchecked")
     public void initialize(Bootstrap<?> bootstrap) {
-        final Class<T> configClass = (Class<T>) Generics.getTypeParameter(getClass());
+        final Class<T> configClass = (Class<T>) Generics.getTypeParameter(getClass(), Configuration.class);
         bootstrap.addCommand(new DbCommand<T>(this, configClass));
     }
 }

File: dropwizard-db/src/main/java/com/yammer/dropwizard/db/ManagedPooledDataSource.java
Patch:
@@ -14,7 +14,8 @@ public ManagedPooledDataSource(ObjectPool pool) {
         this.pool = pool;
     }
 
-    @Override
+    // JDK6 has JDBC 4.0 which doesn't have this -- don't add @Override
+    @SuppressWarnings("override")
     public Logger getParentLogger() throws SQLFeatureNotSupportedException {
         throw new SQLFeatureNotSupportedException("Doesn't use java.util.logging");
     }

File: dropwizard-example/src/main/java/com/example/helloworld/HelloWorldService.java
Patch:
@@ -18,7 +18,7 @@
 import com.yammer.dropwizard.jdbi.JDBI;
 import com.yammer.dropwizard.db.DatabaseConfiguration;
 import com.yammer.dropwizard.jdbi.JDBIFactory;
-import com.yammer.dropwizard.db.migrations.MigrationsBundle;
+import com.yammer.dropwizard.migrations.MigrationsBundle;
 
 public class HelloWorldService extends Service<HelloWorldConfiguration> {
     public static void main(String[] args) throws Exception {

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/AbstractLiquibaseCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.yammer.dropwizard.cli.ConfiguredCommand;
 import com.yammer.dropwizard.config.Bootstrap;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/ConfigurationStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.yammer.dropwizard.config.Configuration;
 import com.yammer.dropwizard.db.DatabaseConfiguration;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.google.common.collect.Maps;
 import com.yammer.dropwizard.config.Configuration;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbDropAllCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.yammer.dropwizard.config.Configuration;
 import liquibase.Liquibase;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbDumpCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.google.common.base.Charsets;
 import com.yammer.dropwizard.config.Configuration;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbGenerateDocsCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.yammer.dropwizard.config.Configuration;
 import liquibase.Liquibase;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbMigrateCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.google.common.base.Charsets;
 import com.yammer.dropwizard.config.Configuration;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbPrepareRollbackCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.google.common.base.Charsets;
 import com.yammer.dropwizard.config.Configuration;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbRollbackCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.google.common.base.Charsets;
 import com.yammer.dropwizard.config.Configuration;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbStatusCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.google.common.base.Charsets;
 import com.yammer.dropwizard.config.Configuration;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbTagCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.yammer.dropwizard.config.Configuration;
 import liquibase.Liquibase;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/DbTestCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.yammer.dropwizard.config.Configuration;
 import liquibase.Liquibase;

File: dropwizard-migrations/src/main/java/com/yammer/dropwizard/migrations/MigrationsBundle.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.dropwizard.db.migrations;
+package com.yammer.dropwizard.migrations;
 
 import com.yammer.dropwizard.Bundle;
 import com.yammer.dropwizard.config.Bootstrap;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/ResourceURL.java
Patch:
@@ -47,7 +47,7 @@ public static boolean isDirectory(final URL resourceURL) {
 
                 return (inputStream == null);
             } catch (IOException e) {
-                throw new AssertionError(e);
+                throw new ResourceNotFoundException(e);
             }
         } else if ("file".equals(protocol)) {
             return new File(resourceURL.getFile()).isDirectory();

File: dropwizard-views/src/test/java/com/yammer/dropwizard/views/tests/ViewMessageBodyWriterTest.java
Patch:
@@ -55,7 +55,7 @@ public void writesFreemarkerViews() throws Exception {
                        output);
         
         assertThat(output.toString(),
-                   is(String.format("Woop woop. HONK%n")));
+                   is(String.format("Woop woop. HONK\n")));
     }
 
     @Test
@@ -91,7 +91,7 @@ public void handlesRelativeFreemarkerTemplatePaths() throws Exception {
                        output);
 
         assertThat(output.toString(),
-                is(String.format("Ok.%n")));
+                is(String.format("Ok.\n")));
     }
 
     @Test

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/ResourceURL.java
Patch:
@@ -47,7 +47,7 @@ public static boolean isDirectory(final URL resourceURL) {
 
                 return (inputStream == null);
             } catch (IOException e) {
-                throw new AssertionError(e);
+                throw new ResourceNotFoundException(e);
             }
         } else if ("file".equals(protocol)) {
             return new File(resourceURL.getFile()).isDirectory();

File: dropwizard-views/src/test/java/com/yammer/dropwizard/views/tests/ViewMessageBodyWriterTest.java
Patch:
@@ -55,7 +55,7 @@ public void writesFreemarkerViews() throws Exception {
                        output);
         
         assertThat(output.toString(),
-                   is(String.format("Woop woop. HONK%n")));
+                   is(String.format("Woop woop. HONK\n")));
     }
 
     @Test
@@ -91,7 +91,7 @@ public void handlesRelativeFreemarkerTemplatePaths() throws Exception {
                        output);
 
         assertThat(output.toString(),
-                is(String.format("Ok.%n")));
+                is(String.format("Ok.\n")));
     }
 
     @Test

File: dropwizard-views/src/main/java/com/yammer/dropwizard/views/freemarker/FreemarkerViewRenderer.java
Patch:
@@ -24,6 +24,7 @@ private static class TemplateLoader extends CacheLoader<Class<?>, Configuration>
         public Configuration load(Class<?> key) throws Exception {
             final Configuration configuration = new Configuration();
             configuration.setObjectWrapper(new DefaultObjectWrapper());
+            configuration.loadBuiltInEncodingMap();
             configuration.setDefaultEncoding(Charsets.UTF_8.name());
             configuration.setClassForTemplateLoading(key, "/");
             return configuration;

File: dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/ResourceTest.java
Patch:
@@ -72,8 +72,8 @@ public void setUpJersey() throws Exception {
             @Override
             protected AppDescriptor configure() {
                 final DropwizardResourceConfig config = new DropwizardResourceConfig(true);
-                for (Object provider : JavaBundle.DEFAULT_PROVIDERS) { // sorry, Scala folks
-                    config.getSingletons().add(provider);
+                for (Class<?> provider : JavaBundle.DEFAULT_PROVIDERS) { // sorry, Scala folks
+                    config.getClasses().add(provider);
                 }
                 for (Class<?> provider : providers) {
                     config.getClasses().add(provider);

File: dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/ResourceTest.java
Patch:
@@ -72,8 +72,8 @@ public void setUpJersey() throws Exception {
             @Override
             protected AppDescriptor configure() {
                 final DropwizardResourceConfig config = new DropwizardResourceConfig(true);
-                for (Object provider : JavaBundle.DEFAULT_PROVIDERS) { // sorry, Scala folks
-                    config.getSingletons().add(provider);
+                for (Class<?> provider : JavaBundle.DEFAULT_PROVIDERS) { // sorry, Scala folks
+                    config.getClasses().add(provider);
                 }
                 for (Class<?> provider : providers) {
                     config.getClasses().add(provider);

File: dropwizard-core/src/test/java/com/yammer/dropwizard/tasks/tests/TaskServletTest.java
Patch:
@@ -78,6 +78,9 @@ public void returnsA500OnExceptions() throws Exception {
         when(request.getPathInfo()).thenReturn("/gc");
         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));
 
+        final PrintWriter output = mock(PrintWriter.class);
+        when(response.getWriter()).thenReturn(output);
+
         final RuntimeException ex = new RuntimeException("whoops");
         
         doThrow(ex).when(gc).execute(any(ImmutableMultimap.class), any(PrintWriter.class));

File: dropwizard-core/src/main/java/com/yammer/dropwizard/tasks/TaskServlet.java
Patch:
@@ -33,15 +33,15 @@ public class TaskServlet extends HttpServlet {
     public TaskServlet(Iterable<Task> tasks) {
         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();
         for (Task task : tasks) {
-            builder.put("/tasks/" + task.getName(), task);
+            builder.put("/" + task.getName(), task);
         }
         this.tasks = builder.build();
     }
 
     @Override
     protected void doPost(HttpServletRequest req,
                           HttpServletResponse resp) throws ServletException, IOException {
-        final Task task = tasks.get(req.getServletPath());
+        final Task task = tasks.get(req.getPathInfo());
         if (task != null) {
             try {
                 resp.setContentType(MediaType.TEXT_PLAIN);

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Environment.java
Patch:
@@ -474,7 +474,7 @@ private void logTasks() {
                                                "POST", task.getName(), task.getClass().getCanonicalName()));
         }
         
-        LOG.info(stringBuilder.toString());
+        LOG.info("tasks = {}", stringBuilder.toString());
     }
 
     private MethodList annotatedMethods(Class<?> resource) {

File: dropwizard-core/src/main/java/com/yammer/dropwizard/tasks/TaskServlet.java
Patch:
@@ -33,15 +33,15 @@ public class TaskServlet extends HttpServlet {
     public TaskServlet(Iterable<Task> tasks) {
         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();
         for (Task task : tasks) {
-            builder.put("/tasks/" + task.getName(), task);
+            builder.put("/" + task.getName(), task);
         }
         this.tasks = builder.build();
     }
 
     @Override
     protected void doPost(HttpServletRequest req,
                           HttpServletResponse resp) throws ServletException, IOException {
-        final Task task = tasks.get(req.getServletPath());
+        final Task task = tasks.get(req.getPathInfo());
         if (task != null) {
             try {
                 resp.setContentType(MediaType.TEXT_PLAIN);

File: dropwizard-views/src/test/java/com/yammer/dropwizard/views/tests/ViewMessageBodyWriterTest.java
Patch:
@@ -73,7 +73,7 @@ public void writesMustacheViews() throws Exception {
                        output);
 
         assertThat(output.toString(),
-                   is(String.format("Hello Stranger!%nWoo!%n%n")));
+                   is("Hello Stranger!\nWoo!\n\n"));
     }
 
     @Test

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/LoggingConfiguration.java
Patch:
@@ -93,7 +93,7 @@ public static class FileConfiguration {
 
         @ValidationMethod(message = "must have logging.file.archivedLogFilenamePattern if logging.file.archive is true")
         public boolean isValidArchiveConfiguration() {
-            return !archive || archivedLogFilenamePattern != null;
+            return !enabled || !archive || archivedLogFilenamePattern != null;
         }
 
         @ValidationMethod(message = "must have logging.file.currentLogFilename if logging.file.enabled is true")

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/LoggingConfiguration.java
Patch:
@@ -93,7 +93,7 @@ public static class FileConfiguration {
 
         @ValidationMethod(message = "must have logging.file.archivedLogFilenamePattern if logging.file.archive is true")
         public boolean isValidArchiveConfiguration() {
-            return !archive || archivedLogFilenamePattern != null;
+            return !enabled || !archive || archivedLogFilenamePattern != null;
         }
 
         @ValidationMethod(message = "must have logging.file.currentLogFilename if logging.file.enabled is true")

File: dropwizard-core/src/test/java/com/yammer/dropwizard/bundles/tests/JavaBundleTest.java
Patch:
@@ -6,6 +6,7 @@
 import com.yammer.dropwizard.config.Environment;
 import com.yammer.dropwizard.jersey.JacksonMessageBodyProvider;
 import com.yammer.dropwizard.jersey.OptionalQueryParamInjectableProvider;
+import com.yammer.dropwizard.json.Json;
 import org.codehaus.jackson.map.Module;
 import org.junit.Before;
 import org.junit.Test;
@@ -16,10 +17,12 @@
 public class JavaBundleTest {
     private final Environment environment = mock(Environment.class);
     private final Service<?> service = mock(Service.class);
+    private final Json json = mock(Json.class);
     private final JavaBundle bundle = new JavaBundle(service);
 
     @Before
     public void setUp() throws Exception {
+        when(service.getJson()).thenReturn(json);
         when(service.getJacksonModules()).thenReturn(ImmutableList.<Module>of());
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/LogbackFactory.java
Patch:
@@ -7,7 +7,6 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.ConsoleAppender;
 import ch.qos.logback.core.FileAppender;
-import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.rolling.DefaultTimeBasedFileNamingAndTriggeringPolicy;
 import ch.qos.logback.core.rolling.RollingFileAppender;
 import ch.qos.logback.core.rolling.TimeBasedRollingPolicy;
@@ -80,8 +79,8 @@ public static FileAppender<ILoggingEvent> buildFileAppender(FileConfiguration fi
             triggeringPolicy.setTimeBasedRollingPolicy(rollingPolicy);
             rollingPolicy.setMaxHistory(file.getArchivedFileCount());
 
-            ((RollingFileAppender) appender).setRollingPolicy(rollingPolicy);
-            ((RollingFileAppender) appender).setTriggeringPolicy(triggeringPolicy);
+            ((RollingFileAppender<ILoggingEvent>) appender).setRollingPolicy(rollingPolicy);
+            ((RollingFileAppender<ILoggingEvent>) appender).setTriggeringPolicy(triggeringPolicy);
 
             rollingPolicy.setParent(appender);
             rollingPolicy.start();

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/LoggingConfiguration.java
Patch:
@@ -91,7 +91,7 @@ public static class FileConfiguration {
         @JsonProperty
         protected String logFormat;
 
-        @ValidationMethod(message = "must have logging.file.archivedLogFilenamePatter if logging.file.archive is true")
+        @ValidationMethod(message = "must have logging.file.archivedLogFilenamePattern if logging.file.archive is true")
         public boolean isValidArchiveConfiguration() {
             return !archive || archivedLogFilenamePattern != null;
         }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/AbstractService.java
Patch:
@@ -43,12 +43,13 @@ public abstract class AbstractService<T extends Configuration> {
     private final SortedMap<String, Command> commands;
 
     /**
-     * Creates a new service with the given name.
+     * Creates a new service with the given name. If name is {@code null} the service is named as
+     * the subclass by using {@link Class#getSimpleName()}.
      *
      * @param name    the service's name
      */
     protected AbstractService(String name) {
-        this.name = name;
+        this.name = (name == null) ? getClass().getSimpleName() : name;
         this.bundles = Lists.newArrayList();
         this.configuredBundles = Lists.newArrayList();
         this.modules = Lists.newArrayList();

File: dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProvider.java
Patch:
@@ -5,6 +5,7 @@
 import com.yammer.dropwizard.logging.Log;
 import com.yammer.dropwizard.validation.InvalidEntityException;
 import com.yammer.dropwizard.validation.Validator;
+import org.codehaus.jackson.annotate.JsonIgnoreType;
 import org.eclipse.jetty.io.EofException;
 
 import javax.validation.Valid;
@@ -82,7 +83,8 @@ public boolean isWriteable(Class<?> type,
                                Type genericType,
                                Annotation[] annotations,
                                MediaType mediaType) {
-        return json.canSerialize(type);
+        final JsonIgnoreType ignore = type.getAnnotation(JsonIgnoreType.class);
+        return !((ignore != null) && ignore.value()) && json.canSerialize(type);
     }
 
     @Override

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java
Patch:
@@ -202,7 +202,7 @@ private void configureSslContext(SslContextFactory factory) {
         for (String password : config.getSslConfiguration().getKeyManagerPassword().asSet()) {
             factory.setKeyManagerPassword(password);
         }
-        
+
         factory.setIncludeProtocols(config.getSslConfiguration().getSupportedProtocols());
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/SslConfiguration.java
Patch:
@@ -35,6 +35,6 @@ public Optional<String> getKeyManagerPassword() {
     }
 
     public String[] getSupportedProtocols() {
-        return (String[]) supportedProtocols.toArray();
+        return supportedProtocols.toArray(new String[supportedProtocols.size()]);
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java
Patch:
@@ -44,7 +44,6 @@
 
 import javax.servlet.DispatcherType;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.EnumSet;
 import java.util.EventListener;
 import java.util.Map;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/tasks/TaskServlet.java
Patch:
@@ -41,7 +41,7 @@ public TaskServlet(Iterable<Task> tasks) {
     @Override
     protected void doPost(HttpServletRequest req,
                           HttpServletResponse resp) throws ServletException, IOException {
-        final Task task = tasks.get(req.getRequestURI());
+        final Task task = tasks.get(req.getServletPath());
         if (task != null) {
             try {
                 resp.setContentType(MediaType.TEXT_PLAIN);

File: dropwizard-core/src/main/java/com/yammer/dropwizard/tasks/TaskServlet.java
Patch:
@@ -41,7 +41,7 @@ public TaskServlet(Iterable<Task> tasks) {
     @Override
     protected void doPost(HttpServletRequest req,
                           HttpServletResponse resp) throws ServletException, IOException {
-        final Task task = tasks.get(req.getRequestURI());
+        final Task task = tasks.get(req.getServletPath());
         if (task != null) {
             try {
                 resp.setContentType(MediaType.TEXT_PLAIN);

File: dropwizard-core/src/test/java/com/yammer/dropwizard/tasks/tests/TaskServletTest.java
Patch:
@@ -43,7 +43,7 @@ public void returnsA404WhenNotFound() throws Exception {
     }
 
     @Test
-    public void runsATestWhenFound() throws Exception {
+    public void runsATaskWhenFound() throws Exception {
         final PrintWriter output = mock(PrintWriter.class);
 
         when(request.getMethod()).thenReturn("POST");

File: dropwizard-core/src/main/java/com/yammer/dropwizard/servlets/AssetServlet.java
Patch:
@@ -37,7 +37,7 @@ private AssetLoader(URL resourceURL, String uriPath, String indexFilename) {
         @Override
         public CachedAsset load(String key) throws Exception {
             Preconditions.checkArgument(key.startsWith(uriPath));
-            String requestedResourcePath = key.substring(uriPath.length() + 1);
+            final String requestedResourcePath = key.substring(uriPath.length() + 1);
             URL requestedResourceURL = ResourceURL.resolveRelativeURL(this.resourceURL, requestedResourcePath);
 
             if (ResourceURL.isDirectory(requestedResourceURL)) {

File: dropwizard-core/src/main/java/com/yammer/dropwizard/bundles/AssetsBundle.java
Patch:
@@ -80,7 +80,7 @@ public AssetsBundle(String resourcePath, CacheBuilderSpec cacheBuilderSpec) {
      */
     public AssetsBundle(String resourcePath, CacheBuilderSpec cacheBuilderSpec, String uriPath) {
         checkArgument(resourcePath.startsWith("/"), "%s is not an absolute path", resourcePath);
-        checkArgument(!"/".equals(resourcePath), "%s is the classpath root");
+        checkArgument(!"/".equals(resourcePath), "%s is the classpath root", resourcePath);
         this.resourcePath = resourcePath.endsWith("/") ? resourcePath : (resourcePath + '/');
         this.uriPath = uriPath.endsWith("/") ? uriPath : (uriPath + '/');
         this.cacheBuilderSpec = cacheBuilderSpec;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/bundles/AssetsBundle.java
Patch:
@@ -80,7 +80,7 @@ public AssetsBundle(String resourcePath, CacheBuilderSpec cacheBuilderSpec) {
      */
     public AssetsBundle(String resourcePath, CacheBuilderSpec cacheBuilderSpec, String uriPath) {
         checkArgument(resourcePath.startsWith("/"), "%s is not an absolute path", resourcePath);
-        checkArgument(!"/".equals(resourcePath), "%s is the classpath root");
+        checkArgument(!"/".equals(resourcePath), "%s is the classpath root", resourcePath);
         this.resourcePath = resourcePath.endsWith("/") ? resourcePath : (resourcePath + '/');
         this.uriPath = uriPath.endsWith("/") ? uriPath : (uriPath + '/');
         this.cacheBuilderSpec = cacheBuilderSpec;

File: dropwizard-example/src/main/java/com/example/helloworld/core/Saying.java
Patch:
@@ -1,12 +1,14 @@
 package com.example.helloworld.core;
 
 import org.codehaus.jackson.annotate.JsonProperty;
+import org.hibernate.validator.constraints.Length;
 
 public class Saying {
     @JsonProperty
     private long id;
 
     @JsonProperty
+    @Length(max = 3)
     private String content;
 
     private Saying() {

File: dropwizard-example/src/main/java/com/example/helloworld/resources/HelloWorldResource.java
Patch:
@@ -7,6 +7,7 @@
 import com.yammer.dropwizard.logging.Log;
 import com.yammer.metrics.annotation.Timed;
 
+import javax.validation.Valid;
 import javax.ws.rs.*;
 import javax.ws.rs.core.MediaType;
 import java.util.concurrent.TimeUnit;
@@ -33,7 +34,7 @@ public Saying sayHello(@QueryParam("name") Optional<String> name) {
     }
 
     @POST
-    public void receiveHello(Saying saying) {
+    public void receiveHello(@Valid Saying saying) {
         LOG.info("Received a saying: {}", saying);
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Environment.java
Patch:
@@ -64,7 +64,7 @@ public class Environment extends AbstractLifeCycle {
      */
     public Environment(Configuration configuration, AbstractService<?> service) {
         this.service = service;
-        this.config = new DropwizardResourceConfig() {
+        this.config = new DropwizardResourceConfig(false) {
             @Override
             public void validate() {
                 super.validate();

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java
Patch:
@@ -7,7 +7,7 @@
 import com.yammer.dropwizard.jetty.BiDiGzipHandler;
 import com.yammer.dropwizard.jetty.InstrumentedSslSelectChannelConnector;
 import com.yammer.dropwizard.jetty.InstrumentedSslSocketConnector;
-import com.yammer.dropwizard.jetty.QuietErrorHandler;
+import com.yammer.dropwizard.jetty.UnbrandedErrorHandler;
 import com.yammer.dropwizard.logging.Log;
 import com.yammer.dropwizard.servlets.ThreadNameFilter;
 import com.yammer.dropwizard.tasks.TaskServlet;
@@ -97,7 +97,7 @@ private Server createServer() {
             server.addConnector(createInternalConnector());
         }
 
-        server.addBean(new QuietErrorHandler());
+        server.addBean(new UnbrandedErrorHandler());
 
         server.setSendDateHeader(config.isDateHeaderEnabled());
         server.setSendServerVersion(config.isServerHeaderEnabled());

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/Command.java
Patch:
@@ -59,11 +59,9 @@ public Options getOptions() {
     @SuppressWarnings("unchecked")
     final Options getOptionsWithHelp() {
         final Options options = new Options();
-        final OptionGroup group = new OptionGroup();
         for (Option option : (Collection<Option>) getOptions().getOptions()) {
-            group.addOption(option);
+            options.addOption(option);
         }
-        options.addOptionGroup(group);
         options.addOption("h", "help", false, "display usage information");
         return options;
     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/Command.java
Patch:
@@ -59,11 +59,9 @@ public Options getOptions() {
     @SuppressWarnings("unchecked")
     final Options getOptionsWithHelp() {
         final Options options = new Options();
-        final OptionGroup group = new OptionGroup();
         for (Option option : (Collection<Option>) getOptions().getOptions()) {
-            group.addOption(option);
+            options.addOption(option);
         }
-        options.addOptionGroup(group);
         options.addOption("h", "help", false, "display usage information");
         return options;
     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Configuration.java
Patch:
@@ -45,12 +45,12 @@ public class Configuration {
     @Valid
     @NotNull
     @JsonProperty
-    private HttpConfiguration http = new HttpConfiguration();
+    protected HttpConfiguration http = new HttpConfiguration();
 
     @Valid
     @NotNull
     @JsonProperty
-    private LoggingConfiguration logging = new LoggingConfiguration();
+    protected LoggingConfiguration logging = new LoggingConfiguration();
 
     /**
      * Returns the HTTP-specific section of the configuration file.

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/SslConfiguration.java
Patch:
@@ -5,13 +5,13 @@
 
 public class SslConfiguration {
     @JsonProperty
-    private String keyStorePath = null;
+    protected String keyStorePath = null;
 
     @JsonProperty
-    private String keyStorePassword = null;
+    protected String keyStorePassword = null;
 
     @JsonProperty
-    private String keyManagerPassword = null;
+    protected String keyManagerPassword = null;
 
     public Optional<String> getKeyStorePath() {
         return Optional.fromNullable(keyStorePath);

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/Duration.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.base.CharMatcher;
 import com.google.common.collect.ImmutableMap;
 import org.codehaus.jackson.annotate.JsonCreator;
+import org.codehaus.jackson.annotate.JsonValue;
 
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
@@ -152,6 +153,7 @@ public int hashCode() {
     }
 
     @Override
+    @JsonValue
     public String toString() {
         String units = unit.toString().toLowerCase();
         if (count == 1) {

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/Size.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.base.CharMatcher;
 import com.google.common.collect.ImmutableMap;
 import org.codehaus.jackson.annotate.JsonCreator;
+import org.codehaus.jackson.annotate.JsonValue;
 
 import java.util.regex.Pattern;
 
@@ -126,6 +127,7 @@ public int hashCode() {
     }
 
     @Override
+    @JsonValue
     public String toString() {
         String units = unit.toString().toLowerCase();
         if (count == 1) {

File: dropwizard-core/src/test/java/com/yammer/dropwizard/validation/tests/ValidatorTest.java
Patch:
@@ -13,6 +13,7 @@
 import static org.junit.Assert.assertThat;
 
 public class ValidatorTest {
+    @SuppressWarnings("unused")
     public static class Example {
         @NotNull
         private String notNull = null;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Configuration.java
Patch:
@@ -45,12 +45,12 @@ public class Configuration {
     @Valid
     @NotNull
     @JsonProperty
-    private HttpConfiguration http = new HttpConfiguration();
+    protected HttpConfiguration http = new HttpConfiguration();
 
     @Valid
     @NotNull
     @JsonProperty
-    private LoggingConfiguration logging = new LoggingConfiguration();
+    protected LoggingConfiguration logging = new LoggingConfiguration();
 
     /**
      * Returns the HTTP-specific section of the configuration file.

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/SslConfiguration.java
Patch:
@@ -5,13 +5,13 @@
 
 public class SslConfiguration {
     @JsonProperty
-    private String keyStorePath = null;
+    protected String keyStorePath = null;
 
     @JsonProperty
-    private String keyStorePassword = null;
+    protected String keyStorePassword = null;
 
     @JsonProperty
-    private String keyManagerPassword = null;
+    protected String keyManagerPassword = null;
 
     public Optional<String> getKeyStorePath() {
         return Optional.fromNullable(keyStorePath);

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/Duration.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.base.CharMatcher;
 import com.google.common.collect.ImmutableMap;
 import org.codehaus.jackson.annotate.JsonCreator;
+import org.codehaus.jackson.annotate.JsonValue;
 
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
@@ -152,6 +153,7 @@ public int hashCode() {
     }
 
     @Override
+    @JsonValue
     public String toString() {
         String units = unit.toString().toLowerCase();
         if (count == 1) {

File: dropwizard-core/src/main/java/com/yammer/dropwizard/util/Size.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.base.CharMatcher;
 import com.google.common.collect.ImmutableMap;
 import org.codehaus.jackson.annotate.JsonCreator;
+import org.codehaus.jackson.annotate.JsonValue;
 
 import java.util.regex.Pattern;
 
@@ -126,6 +127,7 @@ public int hashCode() {
     }
 
     @Override
+    @JsonValue
     public String toString() {
         String units = unit.toString().toLowerCase();
         if (count == 1) {

File: dropwizard-core/src/test/java/com/yammer/dropwizard/validation/tests/ValidatorTest.java
Patch:
@@ -13,6 +13,7 @@
 import static org.junit.Assert.assertThat;
 
 public class ValidatorTest {
+    @SuppressWarnings("unused")
     public static class Example {
         @NotNull
         private String notNull = null;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/LogFormatter.java
Patch:
@@ -11,6 +11,7 @@
 public class LogFormatter extends PatternLayout {
     public LogFormatter(LoggerContext context, TimeZone timeZone) {
         super();
+        setOutputPatternAsHeader(false);
         getDefaultConverterMap().put("ex", PrefixedThrowableProxyConverter.class.getName());
         setPattern("%-5p [%d{ISO8601," + timeZone.getID() + "}] %c: %m\n%ex");
         setContext(context);

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/LogbackFactory.java
Patch:
@@ -23,6 +23,7 @@ public static SyslogAppender buildSyslogAppender(SyslogConfiguration syslog,
                                                      LoggerContext context,
                                                      String name) {
         final SyslogFormatter layout = new SyslogFormatter(context, syslog.getTimeZone(), name);
+        layout.setOutputPatternAsHeader(false);
         layout.setContext(context);
         layout.start();
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/jetty/QuietErrorHandler.java
Patch:
@@ -74,15 +74,15 @@ public void handle(String target,
 
     private static String errorMessage(HttpServletRequest request, int status) {
         try {
-            final ResourceBundle bundle = ResourceBundle.getBundle("HttpErrorMessages",
+            final ResourceBundle bundle = ResourceBundle.getBundle("com.yammer.dropwizard.jetty.HttpErrorMessages",
                                                                    request.getLocale());
             final String message = bundle.getString(Integer.toString(status));
             if (message != null) {
                 final MessageFormat format = new MessageFormat(message, request.getLocale());
                 return format.format(new Object[]{request.getMethod()});
             }
         } catch (MissingResourceException e) {
-            LOG.error(e, "Unable to load HttpErrorMessages.properties");
+            LOG.error(e, "Unable to load HttpErrorMessages.properties to find a message for status {}", status);
         }
         return "Your request could not be processed: " + HttpGenerator.getReasonBuffer(status);
     }

File: dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/ResourceTest.java
Patch:
@@ -77,6 +77,8 @@ protected AppDescriptor configure() {
 
     @After
     public void tearDownJersey() throws Exception {
-        test.tearDown();
+        if (test != null) {
+            test.tearDown();
+        }
     }
 }

File: dropwizard-auth/src/main/java/com/yammer/dropwizard/auth/CachingAuthenticator.java
Patch:
@@ -49,7 +49,7 @@ private CachingAuthenticator(Authenticator<C, P> authenticator,
                                      "gets",
                                      TimeUnit.MILLISECONDS,
                                      TimeUnit.SECONDS);
-        this.cache = builder.build(new CacheLoader<C, Optional<P>> () {
+        this.cache = builder.recordStats().build(new CacheLoader<C, Optional<P>> () {
             @Override
             public Optional<P> load(C key) throws Exception {
                 cacheMisses.mark();

File: dropwizard-views/src/main/java/com/yammer/dropwizard/views/ViewBundle.java
Patch:
@@ -25,7 +25,7 @@
  *
  *<p>The {@code "profile.ftl"} is the path of the template relative to the class name. If this
  * class was {@code com.example.service.PersonView}, Freemarker would then look for the file
- * {@code src/main/resources/com/example/service/PersonView/profile.ftl}. If the template path
+ * {@code src/main/resources/com/example/service/profile.ftl}. If the template path
  * starts with a slash (e.g., {@code "/hello.ftl"}), Freemarker will look for the file {@code
  * src/main/resources/hello.ftl}.
  *

File: dropwizard-views/src/test/java/com/yammer/dropwizard/views/example/TemplateService.java
Patch:
@@ -19,5 +19,6 @@ private TemplateService() {
     protected void initialize(Configuration configuration, Environment environment) {
         environment.addResource(new HelloWorldResource());
         environment.addResource(new BadResource());
+        environment.addResource(new AnotherResource());
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/json/LogbackModule.java
Patch:
@@ -17,7 +17,7 @@ public Level deserialize(JsonParser jp,
         }
     }
 
-    private static class Log4jDeserializers extends Deserializers.Base {
+    private static class LogbackDeserializers extends Deserializers.Base {
         @Override
         public JsonDeserializer<?> findBeanDeserializer(JavaType type,
                                                         DeserializationConfig config,
@@ -44,6 +44,6 @@ public Version version() {
 
     @Override
     public void setupModule(SetupContext context) {
-        context.addDeserializers(new Log4jDeserializers());
+        context.addDeserializers(new LogbackDeserializers());
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/jetty/AsyncRequestLog.java
Patch:
@@ -46,10 +46,9 @@ public void run() {
                     statements.add(queue.take());
                     queue.drainTo(statements, BATCH_SIZE);
 
-                    final LoggingEvent event = new LoggingEvent();
-                    event.setLevel(Level.INFO);
-
                     for (String statement : statements) {
+                        final LoggingEvent event = new LoggingEvent();
+                        event.setLevel(Level.INFO);
                         event.setMessage(statement);
                         appender.doAppend(event);
                     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/LoggingConfiguration.java
Patch:
@@ -98,7 +98,7 @@ public TimeZone getTimeZone() {
 
     public static class SyslogConfiguration {
         @JsonProperty
-        private boolean enabled = true;
+        private boolean enabled = false;
 
         @NotNull
         @JsonProperty

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/Command.java
Patch:
@@ -90,6 +90,7 @@ protected String getSyntax() {
     /**
      * Returns the usage string for the command, including the JAR file location, if possible.
      *
+     * @param klass    the service class
      * @return the usage string for the command
      */
     protected String getUsage(Class<?> klass) {

File: dropwizard-auth/src/test/java/com/yammer/dropwizard/auth/oauth/OAuthBundleTest.java
Patch:
@@ -21,7 +21,6 @@ public void registersAnOAuthProvider() throws Exception {
 
         bundle.initialize(env);
 
-
         final ArgumentCaptor<OAuthProvider> captor = ArgumentCaptor.forClass(OAuthProvider.class);
 
         verify(env).addProvider(captor.capture());

File: dropwizard-auth/src/test/java/com/yammer/dropwizard/auth/oauth/OAuthProviderTest.java
Patch:
@@ -10,10 +10,9 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@SuppressWarnings("unchecked")
 public class OAuthProviderTest {
-    @SuppressWarnings("unchecked")
     private final Authenticator<String, String> authenticator = mock(Authenticator.class);
-
     private final OAuthProvider<String> provider = new OAuthProvider<String>(authenticator,
                                                                              "realm");
 

File: dropwizard-core/src/test/java/com/yammer/dropwizard/config/tests/ConfigurationExceptionTest.java
Patch:
@@ -17,6 +17,6 @@ public void formatsTheViolationsIntoAHumanReadableMessage() throws Exception {
 
         assertThat(e.getMessage(),
                    is("config.yml has the following errors:\n" +
-                      "  * woo may not be null"));
+                      "  * woo may not be null\n"));
     }
 }

File: dropwizard-core/src/test/java/com/yammer/dropwizard/config/tests/ConfigurationFactoryTest.java
Patch:
@@ -59,7 +59,7 @@ public void throwsAnExceptionOnInvalidFiles() throws Exception {
             if ("en".equals(Locale.getDefault().getLanguage())) {
                 assertThat(e.getMessage(),
                            endsWith("factory-test-invalid.yml has the following errors:\n" +
-                                    "  * name must match \"[\\w]+[\\s]+[\\w]+\" (was Boop)"));
+                                    "  * name must match \"[\\w]+[\\s]+[\\w]+\" (was Boop)\n"));
             }
         }
     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/ConfigurationException.java
Patch:
@@ -22,7 +22,7 @@ private static String formatMessage(File file, Iterable<String> errors) {
         final StringBuilder msg = new StringBuilder(file.toString())
                 .append(" has the following errors:\n");
         for (String error : errors) {
-            msg.append("  * ").append(error);
+            msg.append("  * ").append(error).append('\n');
         }
         return msg.toString();
     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/logging/LoggingBean.java
Patch:
@@ -17,7 +17,7 @@
 public class LoggingBean implements LoggingMXBean {
     @Override
     public String getLoggerLevel(String loggerName) {
-        return Logger.getLogger(loggerName).getLevel().toString();
+        return Logger.getLogger(loggerName).getEffectiveLevel().toString();
     }
 
     @Override

File: dropwizard-core/src/main/java/com/yammer/dropwizard/AbstractService.java
Patch:
@@ -14,13 +14,12 @@
 import com.yammer.dropwizard.config.LoggingFactory;
 import org.codehaus.jackson.map.Module;
 
+import javax.annotation.CheckForNull;
 import java.lang.reflect.ParameterizedType;
 import java.util.Arrays;
 import java.util.List;
 import java.util.SortedMap;
 
-import javax.annotation.CheckForNull;
-
 /**
  * The base class for both Java and Scala services. Do not extend this directly. Use {@link Service}
  * instead.
@@ -208,7 +207,8 @@ public ImmutableList<Module> getJacksonModules() {
      * @return a Jersey servlet container, or {@code null} if the Jersey container
      *         will be created by other means 
      */
-    public @CheckForNull ServletContainer getJerseyContainer(DropwizardResourceConfig config) {
+    @CheckForNull
+    public ServletContainer getJerseyContainer(DropwizardResourceConfig config) {
         return new ServletContainer(config);
     }
     

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Environment.java
Patch:
@@ -5,7 +5,6 @@
 import com.sun.jersey.api.core.ResourceConfig;
 import com.sun.jersey.core.reflection.AnnotatedMethod;
 import com.sun.jersey.core.reflection.MethodList;
-import com.sun.jersey.spi.container.servlet.ServletContainer;
 import com.yammer.dropwizard.AbstractService;
 import com.yammer.dropwizard.jetty.JettyManaged;
 import com.yammer.dropwizard.jetty.NonblockingServletHolder;
@@ -28,7 +27,6 @@
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.Path;
 import javax.ws.rs.ext.Provider;
-
 import java.util.EventListener;
 import java.util.concurrent.*;
 
@@ -83,7 +81,7 @@ public void validate() {
         this.tasks = ImmutableSet.builder();
         this.lifeCycle = new AggregateLifeCycle();
         
-        HttpServlet jerseyContainer = service.getJerseyContainer(config);
+        final HttpServlet jerseyContainer = service.getJerseyContainer(config);
         if (jerseyContainer != null) {
             addServlet(jerseyContainer, configuration.getHttpConfiguration().getRootPath()).setInitOrder(Integer.MAX_VALUE);
         }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/FilterConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 package com.yammer.dropwizard.config;
 
-import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableMultimap;
 import org.eclipse.jetty.servlet.FilterHolder;
 
 import java.util.Map;
@@ -12,7 +12,7 @@
  */
 public class FilterConfiguration {
     private final FilterHolder holder;
-    private final ImmutableMap.Builder<String, FilterHolder> mappings;
+    private final ImmutableMultimap.Builder<String, FilterHolder> mappings;
 
     /**
      * Creates a new {@link FilterConfiguration}.
@@ -21,7 +21,7 @@ public class FilterConfiguration {
      * @param mappings    the mappings of URL patterns to {@link javax.servlet.Filter}s
      */
     public FilterConfiguration(FilterHolder holder,
-                               ImmutableMap.Builder<String, FilterHolder> mappings) {
+                               ImmutableMultimap.Builder<String, FilterHolder> mappings) {
         this.holder = holder;
         this.mappings = mappings;
     }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.ImmutableSet;
 import com.yammer.dropwizard.jetty.BiDiGzipHandler;
 import com.yammer.dropwizard.jetty.QuietErrorHandler;
@@ -178,7 +179,7 @@ private static Handler createInternalServlet(Environment env) {
     }
 
     private Handler createExternalServlet(ImmutableMap<String, ServletHolder> servlets,
-                                          ImmutableMap<String, FilterHolder> filters,
+                                          ImmutableMultimap<String, FilterHolder> filters,
                                           ImmutableSet<EventListener> listeners) {
         final ServletContextHandler handler = new ServletContextHandler();
         handler.setBaseResource(Resource.newClassPathResource("."));
@@ -187,7 +188,7 @@ private Handler createExternalServlet(ImmutableMap<String, ServletHolder> servle
             handler.addServlet(entry.getValue(), entry.getKey());
         }
 
-        for (ImmutableMap.Entry<String, FilterHolder> entry : filters.entrySet()) {
+        for (ImmutableMap.Entry<String, FilterHolder> entry : filters.entries()) {
             handler.addFilter(entry.getValue(), entry.getKey(), EnumSet.of(DispatcherType.REQUEST));
         }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ConfiguredCommand.java
Patch:
@@ -7,7 +7,6 @@
 import com.yammer.dropwizard.config.LoggingFactory;
 import com.yammer.dropwizard.validation.Validator;
 import org.apache.commons.cli.CommandLine;
-import org.codehaus.jackson.map.Module;
 
 import java.io.File;
 import java.lang.reflect.ParameterizedType;
@@ -71,10 +70,10 @@ protected final void run(AbstractService<?> service,
                 new LoggingFactory(configuration.getLoggingConfiguration()).configure();
                 run((AbstractService<T>) service, configuration, params);
             } catch (ConfigurationException e) {
-                printHelp(e.getMessage());
+                printHelp(e.getMessage(), service.getClass());
             }
         } else {
-            printHelp();
+            printHelp(service.getClass());
             System.exit(-1);
         }
     }

File: dropwizard-core/src/test/java/com/yammer/dropwizard/util/tests/JarLocationTest.java
Patch:
@@ -9,7 +9,7 @@
 public class JarLocationTest {
     @Test
     public void isHumanReadable() throws Exception {
-        assertThat(new JarLocation().toString(),
+        assertThat(new JarLocation(JarLocationTest.class).toString(),
                    is("project.jar"));
     }
 }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/HttpConfiguration.java
Patch:
@@ -106,13 +106,12 @@ public enum ConnectorType {
     @JsonProperty
     private Duration soLingerTime = null;
 
-    @Min(1)
     @JsonProperty
-    private int lowResourcesConnectionThreshold = 25000;
+    private int lowResourcesConnectionThreshold = 0;
 
     @NotNull
     @JsonProperty
-    private Duration lowResourcesMaxIdleTime = Duration.seconds(5);
+    private Duration lowResourcesMaxIdleTime = Duration.seconds(0);
 
     @NotNull
     @JsonProperty

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/HttpConfiguration.java
Patch:
@@ -86,11 +86,11 @@ public enum ConnectorType {
 
     @NotNull
     @JsonProperty
-    private Size requestBufferSize = Size.kilobytes(32);
+    private Size requestBufferSize = Size.kilobytes(16);
 
     @NotNull
     @JsonProperty
-    private Size requestHeaderBufferSize = Size.kilobytes(3);
+    private Size requestHeaderBufferSize = Size.kilobytes(6);
 
     @NotNull
     @JsonProperty

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/HttpConfiguration.java
Patch:
@@ -69,7 +69,7 @@ public enum ConnectorType {
     @Min(1)
     @Max(128)
     @JsonProperty
-    private int acceptorThreadCount = Runtime.getRuntime().availableProcessors();
+    private int acceptorThreadCount = 1;
 
     @Min(-Thread.NORM_PRIORITY)
     @Max(Thread.NORM_PRIORITY)

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/HttpConfiguration.java
Patch:
@@ -64,7 +64,7 @@ public enum ConnectorType {
 
     @NotNull
     @JsonProperty
-    private Duration maxIdleTime = Duration.seconds(1);
+    private Duration maxIdleTime = Duration.seconds(200);
 
     @Min(1)
     @Max(128)

File: dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/JsonHelpers.java
Patch:
@@ -32,9 +32,9 @@ private JsonHelpers() { /* singleton */ }
      *
      * @param object    an object
      * @return {@code object} as a JSON string
-     * @throws IOException if there is an error writing {@code object} as JSON
+     * @throws IllegalArgumentException if there is an error encoding {@code object}
      */
-    public static String asJson(Object object) throws IOException {
+    public static String asJson(Object object) throws IllegalArgumentException {
         return JSON.writeValueAsString(object);
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/json/Json.java
Patch:
@@ -1,6 +1,6 @@
 package com.yammer.dropwizard.json;
 
-import com.fasterxml.jackson.module.guava.GuavaModule;
+import com.fasterxml.jackson.datatype.guava.GuavaModule;
 import org.codehaus.jackson.JsonFactory;
 import org.codehaus.jackson.JsonGenerator;
 import org.codehaus.jackson.JsonNode;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Environment.java
Patch:
@@ -56,6 +56,8 @@ public class Environment extends AbstractLifeCycle {
 
     /**
      * Creates a new environment.
+     * 
+     * @param configuration    the service's {@link Configuration}
      */
     public Environment(Configuration configuration) {
         this.config = new DropwizardResourceConfig() {

File: dropwizard-core/src/main/java/com/yammer/dropwizard/bundles/AssetsBundle.java
Patch:
@@ -62,7 +62,6 @@ public AssetsBundle(String resourcePath, String uriPath) {
      *
      * @param resourcePath    the resource path (in the classpath) of the static asset files
      * @param maxCacheSize    the maximum number of resources to cache
-     * @param uriPath    the uri path for the static asset files
      */
     public AssetsBundle(String resourcePath, int maxCacheSize) {
         this(resourcePath, maxCacheSize, resourcePath);

File: dropwizard-core/src/main/java/com/yammer/dropwizard/jetty/NonblockingServletHolder.java
Patch:
@@ -26,7 +26,7 @@ public boolean equals(Object o) {
     @Override
     public int hashCode() {
         int result = super.hashCode();
-        result = (31 * result) + servlet.hashCode();
+        result = (31 * result) + ((servlet != null) ? servlet.hashCode() : 0);
         return result;
     }
 

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ServerCommand.java
Patch:
@@ -52,7 +52,7 @@ protected void run(AbstractService<T> service,
         log.info("Starting {}", service.getName());
 
         try {
-            log.info("{}\n", Resources.toString(Resources.getResource("banner.txt"), Charsets.UTF_8));
+            log.info("\n{}", Resources.toString(Resources.getResource("banner.txt"), Charsets.UTF_8));
         } catch (IllegalArgumentException ignored) {
             // don't display the banner if there isn't one
         }

File: dropwizard-core/src/main/java/com/yammer/dropwizard/config/Environment.java
Patch:
@@ -19,6 +19,7 @@
 import com.yammer.dropwizard.tasks.GarbageCollectionTask;
 import com.yammer.dropwizard.tasks.Task;
 import com.yammer.metrics.core.HealthCheck;
+import com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider;
 import org.eclipse.jetty.servlet.FilterHolder;
 import org.eclipse.jetty.servlet.ServletHolder;
 import org.eclipse.jetty.util.component.AbstractLifeCycle;
@@ -70,6 +71,7 @@ public Environment() {
 
         enableJerseyFeature(ResourceConfig.FEATURE_DISABLE_WADL);
         addProvider(new LoggingExceptionMapper<Throwable>() {}); // create a subclass to pin it to Throwable
+        addProvider(InstrumentedResourceMethodDispatchProvider.class);
         addServlet(new ServletContainer(config), ROOT_PATH).setInitOrder(Integer.MAX_VALUE);
         addTask(new GarbageCollectionTask());
     }

File: dropwizard-example/src/main/java/com/example/helloworld/resources/HelloWorldResource.java
Patch:
@@ -3,7 +3,7 @@
 import com.example.helloworld.core.Saying;
 import com.example.helloworld.core.Template;
 import com.google.common.base.Optional;
-import com.yammer.metrics.aop.annotation.Timed;
+import com.yammer.metrics.annotation.Timed;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ManagedCommand.java
Patch:
@@ -30,12 +30,13 @@ protected final void run(AbstractService<T> service,
         LOGGER.info("Starting " + service.getName());
         environment.start();
         try {
-            run(configuration, params);
+            run(configuration, environment, params);
         } finally {
             environment.stop();
         }
     }
 
-    protected abstract void run(Configuration configuration,
+    protected abstract void run(T configuration,
+                                Environment environment,
                                 CommandLine params) throws Exception;
 }

File: dropwizard-db/src/main/java/com/yammer/dropwizard/db/DatabaseConfiguration.java
Patch:
@@ -31,7 +31,7 @@ public static class DatabaseConnectionConfiguration {
 
         @NotNull
         @Pattern(regexp = Duration.VALID_DURATION)
-        private String maxWaitForConnection = "8ms";
+        private String maxWaitForConnection = "1s";
         
         @NotNull
         private String validationQuery = "/* Health Check */ SELECT 1";

File: dropwizard-db/src/main/java/com/yammer/dropwizard/db/Database.java
Patch:
@@ -30,7 +30,7 @@ public Database(DataSource dataSource, ObjectPool pool) {
         this.pool = pool;
         this.ping = onDemand(Ping.class);
         setSQLLog(new Log4JLog(LOGGER, Level.TRACE));
-        setTimingCollector(new InstrumentedTimingCollector(Metrics.defaultRegistry(), Database.class));
+        setTimingCollector(new InstrumentedTimingCollector(Metrics.defaultRegistry()));
         setStatementRewriter(new NamePrependingStatementRewriter());
         setStatementLocator(new ScopedStatementLocator());
         registerArgumentFactory(new OptionalArgumentFactory());

File: dropwizard-core/src/main/java/com/yammer/dropwizard/tasks/TaskServlet.java
Patch:
@@ -34,7 +34,7 @@ public class TaskServlet extends HttpServlet {
     public TaskServlet(Iterable<Task> tasks) {
         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();
         for (Task task : tasks) {
-            builder.put('/' + task.getName(), task);
+            builder.put("/tasks/" + task.getName(), task);
         }
         this.tasks = builder.build();
     }

File: dropwizard/src/main/java/com/yammer/dropwizard/jersey/OptionalQueryParamInjectableProvider.java
Patch:
@@ -29,7 +29,7 @@ public Injectable<?> getInjectable(ComponentContext ic,
                 c.getParameterClass().isAssignableFrom(Optional.class)) {
             return new MultivaluedParameterExtractorQueryParamInjectable(
                     new OptionalExtractor(parameterName, c.getDefaultValue()),
-                    c.isEncoded()
+                    !c.isEncoded()
             );
         }
         return null;

File: dropwizard/src/main/java/com/yammer/dropwizard/jetty/QuietErrorHandler.java
Patch:
@@ -6,7 +6,7 @@
 import org.eclipse.jetty.http.HttpHeaders;
 import org.eclipse.jetty.http.HttpMethods;
 import org.eclipse.jetty.http.MimeTypes;
-import org.eclipse.jetty.server.HttpConnection;
+import org.eclipse.jetty.server.AbstractHttpConnection;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.Response;
 import org.eclipse.jetty.server.handler.ErrorHandler;
@@ -39,7 +39,7 @@ public void handle(String target,
                        Request baseRequest,
                        HttpServletRequest request,
                        HttpServletResponse response) throws IOException {
-        final HttpConnection connection = HttpConnection.getCurrentConnection();
+        final AbstractHttpConnection connection = AbstractHttpConnection.getCurrentConnection();
         final Response jettyResponse = connection.getResponse();
         jettyResponse.setStatus(jettyResponse.getStatus());
 

File: dropwizard/src/main/java/com/yammer/dropwizard/AbstractService.java
Patch:
@@ -121,6 +121,7 @@ protected final void addCommand(ConfiguredCommand<T> command) {
      *
      * @param configuration    the parsed {@link Configuration} object
      * @param environment      the service's {@link Environment}
+     * @throws Exception if something goes wrong
      */
     protected abstract void initialize(T configuration, Environment environment) throws Exception;
 
@@ -131,6 +132,7 @@ protected final void addCommand(ConfiguredCommand<T> command) {
      *
      * @param configuration    the parsed {@link Configuration} object
      * @param environment      the service's {@link Environment}
+     * @throws Exception if something goes wrong
      */
     public final void initializeWithModules(T configuration, Environment environment) throws Exception {
         for (Module module : modules) {

File: dropwizard-db/src/main/java/com/yammer/dropwizard/db/DatabaseConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public static class DatabaseConnectionConfiguration {
 
         @Max(1024)
         @Min(1)
-        private int maxSize = 1;
+        private int maxSize = 8;
 
         private boolean checkConnectionWhileIdle;
 

File: dropwizard/src/test/java/com/yammer/dropwizard/jersey/params/tests/BooleanParamTest.java
Patch:
@@ -56,7 +56,7 @@ public void nullThrowsAnException() throws Exception {
                        is(400));
             
             assertThat((String) response.getEntity(),
-                       is("\"null\" must be \"true\" or \"false\""));
+                       is("\"null\" must be \"true\" or \"false\"."));
         }
     }
 

File: dropwizard/src/main/java/com/fasterxml/jackson/module/guava/deser/OptionalDeserializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.base.Optional;
 import org.codehaus.jackson.JsonParser;
-import org.codehaus.jackson.JsonProcessingException;
 import org.codehaus.jackson.JsonToken;
 import org.codehaus.jackson.map.DeserializationContext;
 import org.codehaus.jackson.map.JsonDeserializer;
@@ -20,7 +19,7 @@ public OptionalDeserializer(JsonDeserializer<T> elementDeserializer) {
 
     @Override
     public Optional<T> deserialize(JsonParser jp,
-                                   DeserializationContext ctxt) throws IOException, JsonProcessingException {
+                                   DeserializationContext ctxt) throws IOException {
         if (jp.getCurrentToken() == JsonToken.VALUE_NULL) {
             return Optional.absent();
         }

File: dropwizard/src/main/java/com/fasterxml/jackson/module/guava/ser/OptionalSerializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.base.Optional;
 import org.codehaus.jackson.JsonGenerator;
-import org.codehaus.jackson.JsonProcessingException;
 import org.codehaus.jackson.map.JsonSerializer;
 import org.codehaus.jackson.map.SerializerProvider;
 import org.codehaus.jackson.map.annotate.JsonCachable;
@@ -14,7 +13,7 @@ public class OptionalSerializer<T> extends JsonSerializer<Optional<T>> {
     @Override
     public void serialize(Optional<T> value,
                           JsonGenerator jgen,
-                          SerializerProvider provider) throws IOException, JsonProcessingException {
+                          SerializerProvider provider) throws IOException {
         if (value.isPresent()) {
             jgen.writeObject(value.get());
         } else {

File: dropwizard/src/main/java/com/yammer/dropwizard/AbstractService.java
Patch:
@@ -22,6 +22,7 @@
  *
  * @param <T>    the type of configuration class for this service
  */
+@SuppressWarnings("EmptyMethod")
 public abstract class AbstractService<T extends Configuration> {
     static {
         // make sure spinning up Hibernate Validator doesn't yell at us
@@ -48,7 +49,6 @@ protected AbstractService(String name) {
     /**
      * A simple reminder that this particular class isn't meant to be extended by non-DW classes.
      */
-    @SuppressWarnings("UnusedDeclaration")
     protected abstract void subclassServiceInsteadOfThis();
 
     public final String getName() {

File: dropwizard/src/main/java/com/yammer/dropwizard/config/Environment.java
Patch:
@@ -11,6 +11,7 @@
 import com.sun.jersey.spi.container.servlet.ServletContainer;
 import com.yammer.dropwizard.jersey.LoggingExceptionMapper;
 import com.yammer.dropwizard.jetty.JettyManaged;
+import com.yammer.dropwizard.jetty.NonblockingServletHolder;
 import com.yammer.dropwizard.lifecycle.Managed;
 import com.yammer.dropwizard.tasks.GarbageCollectionTask;
 import com.yammer.dropwizard.tasks.Task;
@@ -159,7 +160,7 @@ public void manage(LifeCycle managed) {
      */
     public ServletConfiguration addServlet(Servlet servlet,
                                            String urlPattern) {
-        final ServletHolder holder = new ServletHolder(checkNotNull(servlet));
+        final ServletHolder holder = new NonblockingServletHolder(checkNotNull(servlet));
         final ServletConfiguration configuration = new ServletConfiguration(holder, servlets);
         configuration.addUrlPattern(checkNotNull(urlPattern));
         return configuration;

File: dropwizard/src/main/java/com/yammer/dropwizard/servlets/CacheBustingFilter.java
Patch:
@@ -9,7 +9,6 @@
 /**
  * Adds a no-cache header to all responses.
  */
-@SuppressWarnings("UnusedDeclaration")
 public class CacheBustingFilter implements Filter {
     private static final String CACHE_SETTINGS = "must-revalidate,no-cache,no-store";
 

File: dropwizard/src/test/java/com/yammer/dropwizard/config/tests/LoggingConfigurationTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.junit.Assert.assertThat;
 
 public class LoggingConfigurationTest {
-    private ConfigurationFactory<LoggingConfiguration> factory =
+    private final ConfigurationFactory<LoggingConfiguration> factory =
             ConfigurationFactory.forClass(LoggingConfiguration.class, new Validator());
     private LoggingConfiguration config;
 

File: dropwizard/src/test/java/com/yammer/dropwizard/util/tests/ValidatorTest.java
Patch:
@@ -11,7 +11,6 @@
 import static org.junit.Assert.assertThat;
 
 public class ValidatorTest {
-    @SuppressWarnings("UnusedDeclaration")
     public static class Example {
         @NotNull
         private String notNull = null;

File: dropwizard/src/main/java/com/yammer/dropwizard/cli/Command.java
Patch:
@@ -1,6 +1,5 @@
 package com.yammer.dropwizard.cli;
 
-import com.google.common.base.Optional;
 import com.yammer.dropwizard.AbstractService;
 import com.yammer.dropwizard.util.JarLocation;
 import org.apache.commons.cli.*;
@@ -119,6 +118,6 @@ protected final void printHelp() {
     }
 
     protected final void printHelp(String message) {
-        UsagePrinter.printCommandHelp(this, Optional.fromNullable(message));
+        UsagePrinter.printCommandHelp(this, message);
     }
 }

File: dropwizard/src/main/java/com/yammer/dropwizard/config/LoggingConfiguration.java
Patch:
@@ -10,7 +10,7 @@
 import javax.validation.constraints.Pattern;
 import java.util.Map;
 
-@SuppressWarnings("FieldCanBeLocal")
+@SuppressWarnings({"FieldCanBeLocal", "FieldMayBeFinal"})
 public class LoggingConfiguration {
     private static final String VALID_LEVEL = "(OFF|FATAL|ERROR|WARN|INFO|DEBUG|TRACE|ALL)";
 
@@ -28,7 +28,6 @@ public boolean isEnabled() {
         public Level getThreshold() {
             return Level.toLevel(threshold);
         }
-
     }
 
     public static class FileConfiguration {

File: dropwizard/src/main/java/com/yammer/dropwizard/BearerToken.java
Patch:
@@ -6,7 +6,7 @@
  * A method parameter of type {@code Option[String]} will be populated with the
  * OAuth2 Bearer Token, if one is provided by the client.
  */
-@Target({ElementType.PARAMETER})
+@Target(ElementType.PARAMETER)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 public @interface BearerToken {

File: dropwizard/src/main/java/com/yammer/dropwizard/jersey/MultivaluedParameterExtractorQueryParamInjectable.java
Patch:
@@ -6,6 +6,9 @@
 import com.sun.jersey.server.impl.model.parameter.multivalued.ExtractorContainerException;
 import com.sun.jersey.server.impl.model.parameter.multivalued.MultivaluedParameterExtractor;
 
+// TODO: 11/14/11 <coda> -- test MultivaluedParameterExtractorQueryParamInjectable
+// TODO: 11/14/11 <coda> -- document MultivaluedParameterExtractorQueryParamInjectable
+
 public class MultivaluedParameterExtractorQueryParamInjectable extends AbstractHttpContextInjectable<Object> {
     private final MultivaluedParameterExtractor extractor;
     private final boolean isEncoded;

File: dropwizard/src/main/java/com/yammer/dropwizard/jersey/OauthTokenInjectable.java
Patch:
@@ -6,6 +6,9 @@
 
 import javax.ws.rs.core.HttpHeaders;
 
+// TODO: 11/14/11 <coda> -- test OauthTokenInjectable
+// TODO: 11/14/11 <coda> -- document OauthTokenInjectable
+
 public class OauthTokenInjectable extends AbstractHttpContextInjectable<Optional<String>> {
     private final String prefix;
 

File: dropwizard/src/main/java/com/yammer/dropwizard/jersey/OauthTokenProvider.java
Patch:
@@ -10,6 +10,9 @@
 
 import javax.ws.rs.ext.Provider;
 
+// TODO: 11/14/11 <coda> -- test OauthTokenProvider
+// TODO: 11/14/11 <coda> -- document OauthTokenProvider
+
 @Provider
 public class OauthTokenProvider implements InjectableProvider<BearerToken, Parameter> {
     @Override

File: dropwizard/src/main/java/com/yammer/dropwizard/jersey/OptionalExtractor.java
Patch:
@@ -5,6 +5,9 @@
 
 import javax.ws.rs.core.MultivaluedMap;
 
+// TODO: 11/14/11 <coda> -- test OptionalExtractor
+// TODO: 11/14/11 <coda> -- document OptionalExtractor
+
 public class OptionalExtractor implements MultivaluedParameterExtractor {
     private final String parameterName;
     private final Optional<String> defaultValue;

File: dropwizard/src/main/java/com/yammer/dropwizard/jersey/OptionalQueryParamInjectableProvider.java
Patch:
@@ -10,6 +10,9 @@
 import javax.ws.rs.QueryParam;
 import javax.ws.rs.ext.Provider;
 
+// TODO: 11/14/11 <coda> -- test OptionalQueryParamInjectableProvider
+// TODO: 11/14/11 <coda> -- document OptionalQueryParamInjectableProvider
+
 @Provider
 public class OptionalQueryParamInjectableProvider implements InjectableProvider<QueryParam, Parameter> {
     @Override

File: dropwizard/src/main/java/com/yammer/dropwizard/util/Validator.java
Patch:
@@ -15,7 +15,7 @@
  * A simple façade for Hibernate Validator.
  */
 public class Validator {
-    private static final ValidatorFactory FACTORY = Validation.buildDefaultValidatorFactory();
+    private final ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
 
     /**
      * Validates the given object, and returns a list of error messages, if any. If the returned
@@ -27,7 +27,7 @@ public class Validator {
      */
     public <T> ImmutableList<String> validate(T o) {
         final Set<String> errors = Sets.newHashSet();
-        final Set<ConstraintViolation<T>> violations = FACTORY.getValidator().validate(o);
+        final Set<ConstraintViolation<T>> violations = factory.getValidator().validate(o);
         for (ConstraintViolation<T> v : violations) {
             errors.add(format("%s %s (was %s)", v.getPropertyPath(),
                                                 v.getMessage(),

File: dropwizard/src/main/java/com/yammer/dropwizard/config/FilterConfiguration.java
Patch:
@@ -18,7 +18,7 @@ public class FilterConfiguration {
      * Creates a new {@link FilterConfiguration}.
      *
      * @param holder      the {@link FilterHolder} containing the {@link javax.servlet.Filter}
-     * @param mappings    the mappings of URL patterns to {@link javax.servlet.Filter}
+     * @param mappings    the mappings of URL patterns to {@link javax.servlet.Filter}s
      */
     public FilterConfiguration(FilterHolder holder,
                                ImmutableMap.Builder<String, FilterHolder> mappings) {

File: dropwizard/src/main/java/com/yammer/dropwizard/cli/ConfiguredCommand.java
Patch:
@@ -39,7 +39,7 @@ protected final String getSyntax() {
         final StringBuilder syntax = new StringBuilder("<config file>");
         final Optional<String> configured = getConfiguredSyntax();
         if (configured.isPresent() && !configured.get().isEmpty()) {
-            syntax.append(' ').append(configured);
+            syntax.append(' ').append(configured.get());
         }
         return syntax.toString();
     }

File: dropwizard/src/test/java/com/yammer/dropwizard/example/SayCommand.java
Patch:
@@ -8,7 +8,7 @@
 @SuppressWarnings("NullableProblems")
 public class SayCommand extends ConfiguredCommand<ExampleConfiguration> {
     public SayCommand() {
-        super(ExampleConfiguration.class, "say", "Prints out the saying to console");
+        super("say", "Prints out the saying to console");
     }
 
     @Override

File: dropwizard/src/test/java/com/yammer/dropwizard/example/DumbHealthCheck.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import com.yammer.metrics.core.HealthCheck;
 

File: dropwizard/src/test/java/com/yammer/dropwizard/example/Example.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import com.google.common.base.Optional;
 import com.yammer.dropwizard.Service;

File: dropwizard/src/test/java/com/yammer/dropwizard/example/ExampleConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import com.yammer.dropwizard.config.Configuration;
 

File: dropwizard/src/test/java/com/yammer/dropwizard/example/SayCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import com.yammer.dropwizard.Service;
 import com.yammer.dropwizard.cli.ConfiguredCommand;

File: dropwizard/src/test/java/com/yammer/dropwizard/example/Saying.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import com.yammer.dropwizard.json.JsonSnakeCase;
 

File: dropwizard/src/test/java/com/yammer/dropwizard/example/SplodyCommand.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import com.yammer.dropwizard.Service;
 import com.yammer.dropwizard.cli.Command;

File: dropwizard/src/test/java/com/yammer/dropwizard/example/StartableObject.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import com.yammer.dropwizard.lifecycle.Managed;
 import org.slf4j.Logger;

File: dropwizard/src/test/java/com/yammer/dropwizard/example/UploadResource.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.flopwizard.example;
+package com.yammer.dropwizard.example;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dropwizard-core/src/test/java/com/yammer/dropwizard/config/tests/ConfigurationFactoryTest.java
Patch:
@@ -57,7 +57,7 @@ public void throwsAnExceptionOnInvalidFiles() throws Exception {
         } catch (ConfigurationException e) {
             assertThat(e.getMessage(),
                        endsWith("factory-test-invalid.yml has the following errors:\n" +
-                                "  * name must match \"[\\w]+[\\s]+[\\w]+\""));
+                                "  * name must match \"[\\w]+[\\s]+[\\w]+\" (was Boop)"));
         }
     }
 }

