File: src/com/blankj/easy/_013/Solution.java
Patch:
@@ -36,6 +36,6 @@ public int romanToInt(String s) {
     public static void main(String[] args) {
         Solution solution = new Solution();
         System.out.println(solution.romanToInt("DCXXI"));// 621
-        System.out.println(solution.romanToInt("CCCXLVIII"));// 384
+        System.out.println(solution.romanToInt("CCCXLVIII"));// 348
     }
 }

File: src/com/blankj/easy/_101/Solution.java
Patch:
@@ -15,13 +15,13 @@
  */
 public class Solution {
 //    public boolean isSymmetric(TreeNode root) {
-//        return root == null || isSymmetricHelper(root.left, root.right);
+//        return root == null || helper(root.left, root.right);
 //    }
 //
 //    private boolean helper(TreeNode left, TreeNode right) {
 //        if (left == null || right == null) return left == right;
 //        if (left.val != right.val) return false;
-//        return isSymmetricHelper(left.left, right.right) && isSymmetricHelper(left.right, right.left);
+//        return helper(left.left, right.right) && helper(left.right, right.left);
 //    }
 
     public boolean isSymmetric(TreeNode root) {

File: project/leetcode/src/com/blankj/easy/_001/Solution.java
Patch:
@@ -11,7 +11,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
 //    public int[] twoSum(int[] nums, int target) {
 //        int st = 0, end = nums.length;

File: project/leetcode/src/com/blankj/easy/_007/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int reverse(int x) {
         long res = 0;

File: project/leetcode/src/com/blankj/easy/_014/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public String longestCommonPrefix(String[] strs) {
         int len = strs.length;

File: project/leetcode/src/com/blankj/easy/_020/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public boolean isValid(String s) {
         int len = s.length();

File: project/leetcode/src/com/blankj/easy/_021/Solution.java
Patch:
@@ -10,7 +10,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
         ListNode head = new ListNode(0);

File: project/leetcode/src/com/blankj/easy/_026/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int removeDuplicates(int[] nums) {
         int len = nums.length;

File: project/leetcode/src/com/blankj/easy/_027/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int removeElement(int[] nums, int val) {
         int tail = 0;

File: project/leetcode/src/com/blankj/easy/_028/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int strStr(String haystack, String needle) {
         int l1 = haystack.length(), l2 = needle.length(), l3 = l1 - l2;

File: project/leetcode/src/com/blankj/easy/_035/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int searchInsert(int[] nums, int target) {
         int left = 0, right = nums.length - 1, mid = (right + left) >> 1;

File: project/leetcode/src/com/blankj/easy/_038/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public String countAndSay(int n) {
         String str = "1";

File: project/leetcode/src/com/blankj/easy/_053/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     //    public int maxSubArray(int[] nums) {
 //        int len = nums.length, dp = nums[0], max = dp;

File: project/leetcode/src/com/blankj/easy/_058/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int lengthOfLastWord(String s) {
         int p = s.length() - 1;

File: project/leetcode/src/com/blankj/easy/_066/Solution.java
Patch:
@@ -10,7 +10,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int[] plusOne(int[] digits) {
         int p = digits.length - 1;

File: project/leetcode/src/com/blankj/easy/_067/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public String addBinary(String a, String b) {
         StringBuilder sb = new StringBuilder();

File: project/leetcode/src/com/blankj/easy/_069/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int mySqrt(int x) {
         long n = x;

File: project/leetcode/src/com/blankj/easy/_070/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int climbStairs(int n) {
         int a = 1, b = 1;

File: project/leetcode/src/com/blankj/easy/_083/Solution.java
Patch:
@@ -10,7 +10,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public ListNode deleteDuplicates(ListNode head) {
         if (head == null || head.next == null) return head;

File: project/leetcode/src/com/blankj/easy/_088/Solution.java
Patch:
@@ -10,7 +10,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public void merge(int[] nums1, int m, int[] nums2, int n) {
         int p = m-- + n-- - 1;

File: project/leetcode/src/com/blankj/medium/_008/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
     public int myAtoi(String str) {
         int i = 0, ans = 0, sign = 1, len = str.length();

File: project/leetcode/src/com/blankj/medium/_019/Solution.java
Patch:
@@ -8,7 +8,6 @@
  *     desc  :
  * </pre>
  */
-
 public class Solution {
 
     static class ListNode {

