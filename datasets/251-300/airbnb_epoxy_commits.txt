File: epoxy-processortest/src/test/resources/ViewProcessorTest/inheritingAttributesWorksCorrectlyJavaSources/ksp/SourceViewModelBuilder.java
Patch:
@@ -1,7 +1,6 @@
 package com.airbnb.epoxy;
 
 import androidx.annotation.Nullable;
-import error.NonExistentClass;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.String;
@@ -22,7 +21,8 @@ SourceViewModelBuilder onVisibilityChanged(
 
   SourceViewModelBuilder baseViewProp(int baseViewProp);
 
-  SourceViewModelBuilder numCarouselItemsShown(@Nullable NonExistentClass numCarouselItemsShown);
+  SourceViewModelBuilder numCarouselItemsShown(
+      @Nullable AirEpoxyModel.SomeType numCarouselItemsShown);
 
   SourceViewModelBuilder id(long p0);
 

File: epoxy-processortest/src/test/resources/ViewProcessorTest/inheritingAttributesWorksCorrectlyJavaSources/ksp/SourceViewModel_.java
Patch:
@@ -3,7 +3,6 @@
 import android.view.ViewGroup;
 import androidx.annotation.LayoutRes;
 import androidx.annotation.Nullable;
-import error.NonExistentClass;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -205,10 +204,10 @@ public int baseViewProp() {
    *  <p>
    *  We don't generate a getter since this class defines one, so it is accessible with just a `AirEpoxyModel` reference.
    */
-  public SourceViewModel_ numCarouselItemsShown(@Nullable NonExistentClass numCarouselItemsShown) {
+  public SourceViewModel_ numCarouselItemsShown(
+      @Nullable AirEpoxyModel.SomeType numCarouselItemsShown) {
     onMutation();
     super.numCarouselItemsShown = numCarouselItemsShown;
-    super.numCarouselItemsShown(numCarouselItemsShown);
     return this;
   }
 

File: epoxy-processortest/src/test/resources/ViewProcessorTest/annotationsAreCopied/ksp/SourceViewModel_.java
Patch:
@@ -18,7 +18,7 @@
  */
 @Deprecated(
     message = "some message",
-    replaceWith = @ReplaceWith(imports = {}, expression = ""),
+    replaceWith = @ReplaceWith(expression = "", imports = {}),
     level = DeprecationLevel.WARNING
 )
 public class SourceViewModel_ extends EpoxyModel<SourceView> implements GeneratedModel<SourceView>, SourceViewModelBuilder {

File: epoxy-processortest/src/test/resources/ViewProcessorTest/inheritingAttributesWorksCorrectly/SourceViewModelBuilder.java
Patch:
@@ -22,6 +22,8 @@ SourceViewModelBuilder onVisibilityChanged(
 
   SourceViewModelBuilder baseViewProp(int baseViewProp);
 
+  SourceViewModelBuilder baseViewPropWithDefaultParamValue(int baseViewPropWithDefaultParamValue);
+
   SourceViewModelBuilder showDividerWithSetter(Boolean showDividerWithSetter);
 
   SourceViewModelBuilder showDividerWithOverriddenMethod(boolean showDivider);

File: epoxy-processortest/src/test/resources/ViewProcessorTest/inheritingAttributesWorksCorrectly/ksp/SourceViewModelBuilder.java
Patch:
@@ -22,6 +22,8 @@ SourceViewModelBuilder onVisibilityChanged(
 
   SourceViewModelBuilder baseViewProp(int baseViewProp);
 
+  SourceViewModelBuilder baseViewPropWithDefaultParamValue(int baseViewPropWithDefaultParamValue);
+
   SourceViewModelBuilder showDividerWithSetter(@Nullable Boolean showDividerWithSetter);
 
   SourceViewModelBuilder showDividerWithOverriddenMethod(boolean showDivider);

File: epoxy-modelfactorytest/src/test/resources/AllTypesModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -886,4 +885,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/BasicModelWithFinalAttribute_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -255,4 +254,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/CallbackPropModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -326,4 +325,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/GroupPropMultipleSupportedAttributeDifferentNameModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -383,4 +382,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/GroupPropMultipleSupportedAttributeSameNameModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -381,4 +380,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/GroupPropSingleSupportedAttributeModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -377,4 +376,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/ListSubtypeModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -317,4 +316,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/ModelFactoryBaseModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -326,4 +325,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/ModelFactoryBasicModelWithAttribute_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -271,4 +270,3 @@ public static ModelFactoryBasicModelWithAttribute_ from(ModelProperties properti
     return model;
   }
 }
-

File: epoxy-modelfactorytest/src/test/resources/TextPropModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -369,4 +368,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/main/java/com/airbnb/integrationtest/processortest/ProcessorTestModel.java
Patch:
@@ -1,9 +1,11 @@
 package com.airbnb.integrationtest.processortest;
 
+import android.view.View;
+
 import com.airbnb.epoxy.EpoxyAttribute;
 import com.airbnb.epoxy.processortest2.ProcessorTest2Model;
 
-public class ProcessorTestModel extends ProcessorTest2Model {
+public class ProcessorTestModel extends ProcessorTest2Model<View> {
   @EpoxyAttribute public int publicValue;
   @EpoxyAttribute protected int protectedValue;
   @EpoxyAttribute int packagePrivateValue;

File: epoxy-processortest/src/test/resources/AbstractEpoxyModelWithView_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -247,4 +246,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/AbstractModelWithHolder_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.ViewParent;
@@ -270,4 +269,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/AutoLayoutModelViewMatchParentModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.ViewGroup;
@@ -311,4 +310,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/AutoLayoutModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.ViewGroup;
@@ -310,4 +309,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/BaseModelViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -319,4 +318,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/BasicModelWithAttribute_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -262,4 +261,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ControllerWithAutoModelWithSuperClass$SubControllerWithAutoModelWithSuperClass_EpoxyHelper.java
Patch:
@@ -8,7 +8,8 @@
 import java.lang.String;
 
 /**
- * Generated file. Do not modify! */
+ * Generated file. Do not modify!
+ */
 public class ControllerWithAutoModelWithSuperClass$SubControllerWithAutoModelWithSuperClass_EpoxyHelper extends ControllerHelper<ControllerWithAutoModelWithSuperClass.SubControllerWithAutoModelWithSuperClass> {
   private final ControllerWithAutoModelWithSuperClass.SubControllerWithAutoModelWithSuperClass controller;
 
@@ -57,4 +58,4 @@ private void saveModelsForNextValidation() {
     modelWithAttribute2 = controller.modelWithAttribute2;
     modelWithAttribute1 = controller.modelWithAttribute1;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ControllerWithAutoModelWithSuperClass_EpoxyHelper.java
Patch:
@@ -8,7 +8,8 @@
 import java.lang.String;
 
 /**
- * Generated file. Do not modify! */
+ * Generated file. Do not modify!
+ */
 public class ControllerWithAutoModelWithSuperClass_EpoxyHelper extends ControllerHelper<ControllerWithAutoModelWithSuperClass> {
   private final ControllerWithAutoModelWithSuperClass controller;
 
@@ -51,4 +52,4 @@ private void saveModelsForNextValidation() {
     modelWithAttribute2 = controller.modelWithAttribute2;
     modelWithAttribute1 = controller.modelWithAttribute1;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ControllerWithAutoModel_EpoxyHelper.java
Patch:
@@ -8,7 +8,8 @@
 import java.lang.String;
 
 /**
- * Generated file. Do not modify! */
+ * Generated file. Do not modify!
+ */
 public class ControllerWithAutoModel_EpoxyHelper extends ControllerHelper<ControllerWithAutoModel> {
   private final ControllerWithAutoModel controller;
 
@@ -50,4 +51,4 @@ private void saveModelsForNextValidation() {
     modelWithAttribute2 = controller.modelWithAttribute2;
     modelWithAttribute1 = controller.modelWithAttribute1;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/CustomPackageLayoutPatternViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -270,4 +269,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/DataBindingModelWithAllFieldTypes_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -737,4 +736,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/DefaultPackageLayoutPatternViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -270,4 +269,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/DoNotHashViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -412,4 +411,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/EpoxyModelGroupWithAnnotations_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -271,4 +270,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$NoLayout_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -268,4 +267,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$StillNoLayout_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -254,4 +253,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$WithLayout_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -253,4 +252,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodParentLayout$NoLayout_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodParentLayout$WithLayout_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -253,4 +252,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethod_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -268,4 +267,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/GeneratedModelSuffixViewSuffix_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -269,4 +268,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/GridSpanCountViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -311,4 +310,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/IgnoreRequireHashCodeViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -335,4 +334,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/LayoutOverloadsViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -279,4 +278,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelDoNotHash_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -287,4 +286,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelDoNotUseInToString_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -292,4 +291,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelForRProcessingTest_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -268,4 +267,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelForTestingDuplicateRValues_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;

File: epoxy-processortest/src/test/resources/ModelReturningClassTypeWithVarargs_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -274,4 +273,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelReturningClassType_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -281,4 +280,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelViewExtendingSuperClassModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.ViewGroup;
@@ -343,4 +342,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelViewSuperClassModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.ViewGroup;
@@ -312,4 +311,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelViewWithParisModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.os.AsyncTask;
@@ -408,4 +407,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithAbstractClassAndAnnotation_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -246,4 +245,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithAllFieldTypesBuilder.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -90,4 +89,3 @@ ModelWithAllFieldTypesBuilder onVisibilityChanged(
   ModelWithAllFieldTypesBuilder spanSizeOverride(
       @Nullable EpoxyModel.SpanSizeOverrideCallback spanSizeCallback);
 }
-

File: epoxy-processortest/src/test/resources/ModelWithAllFieldTypes_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -594,4 +593,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithAllPrivateFieldTypes_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -600,4 +599,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClassAndSuperAttributes$SubModelWithAnnotatedClassAndSuperAttributes_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -273,4 +272,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClassAndSuperAttributes_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClass_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -246,4 +245,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithCheckedChangeListener_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.widget.CompoundButton;
@@ -279,4 +278,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithConstructors_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -270,4 +269,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithFieldAnnotation_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -263,4 +262,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithFinalField.java
Patch:
@@ -1,11 +1,12 @@
 package com.airbnb.epoxy;
 
 public class ModelWithFinalField extends EpoxyModel<Object> {
-  @EpoxyAttribute final int valueInt;
+  @EpoxyAttribute final int finalValueInt;
+  @EpoxyAttribute int nonFinalValueInt;
 
   public ModelWithFinalField(long id, int valueInt) {
     super(id);
-    this.valueInt = valueInt;
+    this.finalValueInt = valueInt;
   }
 
   @Override

File: epoxy-processortest/src/test/resources/ModelWithPrivateFieldWithSameAsFieldGetterAndSetterName_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -263,4 +262,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithPrivateViewClickListener_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -278,4 +277,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithSuperAttributes$SubModelWithSuperAttributes_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -279,4 +278,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithSuperAttributes_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;

File: epoxy-processortest/src/test/resources/ModelWithSuper_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -260,4 +259,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithType_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -259,4 +258,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithViewClickListener_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -278,4 +277,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithViewLongClickListener_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;

File: epoxy-processortest/src/test/resources/ModelWithoutHash_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -287,4 +286,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/ModelWithoutSetter_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -254,4 +253,3 @@ public String toString() {
         "}" + super.toString();
   }
 }
-

File: epoxy-processortest/src/test/resources/NullOnRecycleViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -300,4 +299,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/OnViewRecycledViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -318,4 +317,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/OnVisibilityChangedViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -318,4 +317,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/OnVisibilityStateChangedViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -319,4 +318,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/PropDefaultsViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -468,4 +467,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/PropGroupsViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -874,4 +873,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/RLayoutInViewModelAnnotationWorksViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -270,4 +269,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/SavedStateViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -320,4 +319,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestAfterBindPropsViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import androidx.annotation.LayoutRes;
@@ -327,4 +326,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestCallbackPropViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -316,4 +315,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropCallbackPropViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -331,4 +330,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropChildViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -421,4 +420,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropDoNotHashOptionViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -348,4 +347,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropGenerateStringOverloadsOptionViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -380,4 +379,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropIgnoreRequireHashCodeOptionViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -353,4 +352,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropModelPropViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.ViewGroup;
@@ -312,4 +311,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropNullOnRecycleOptionViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.view.View;
@@ -335,4 +334,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropTextPropViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -375,4 +374,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestFieldPropThrowsIfStaticView.java
Patch:
@@ -11,7 +11,7 @@
 @ModelView(autoLayout = ModelView.Size.WRAP_WIDTH_WRAP_HEIGHT)
 
 public class TestFieldPropThrowsIfStaticView extends View {
-  @ModelProp private String value;
+  @ModelProp public static String value;
 
   public TestFieldPropThrowsIfStaticView(Context context) {
     super(context);

File: epoxy-processortest/src/test/resources/TestNullStringOverloadsViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -342,4 +341,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestStringOverloadsViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -491,4 +490,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TestTextPropViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -360,4 +359,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-processortest/src/test/resources/TextPropDefaultViewModel_.java
Patch:
@@ -1,4 +1,3 @@
-
 package com.airbnb.epoxy;
 
 import android.content.Context;
@@ -431,4 +430,3 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
 }
-

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModel.java
Patch:
@@ -93,7 +93,7 @@ protected int getViewType() {
    * Create and return a new instance of a view for this model. By default a view is created by
    * inflating the layout resource.
    */
-  protected View buildView(@NonNull ViewGroup parent) {
+  public View buildView(@NonNull ViewGroup parent) {
     return LayoutInflater.from(parent.getContext()).inflate(getLayout(), parent, false);
   }
 

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModelWithView.java
Patch:
@@ -42,7 +42,7 @@ protected int getViewType() {
    * @param parent The parent ViewGroup that the returned view will be added to.
    */
   @Override
-  protected abstract T buildView(@NonNull ViewGroup parent);
+  public abstract T buildView(@NonNull ViewGroup parent);
 
   @Override
   protected final int getDefaultLayout() {

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/ViewTypeManagerIntegrationTest.java
Patch:
@@ -28,7 +28,7 @@ public void resetViewTypeMap() {
 
   static class TestModel extends EpoxyModelWithView<View> {
     @Override
-    protected View buildView(@NonNull ViewGroup parent) {
+    public View buildView(@NonNull ViewGroup parent) {
       return new FrameLayout(ApplicationProvider.getApplicationContext());
     }
   }

File: epoxy-databinding/src/main/java/com/airbnb/epoxy/DataBindingEpoxyModel.java
Patch:
@@ -37,7 +37,7 @@
 public abstract class DataBindingEpoxyModel extends EpoxyModelWithHolder<DataBindingHolder> {
 
   @Override
-  protected View buildView(@NonNull ViewGroup parent) {
+  public View buildView(@NonNull ViewGroup parent) {
     LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
     ViewDataBinding binding = DataBindingUtil.inflate(layoutInflater, getViewType(), parent, false);
     View view = binding.getRoot();

File: epoxy-modelfactorytest/src/test/resources/StyleableModelViewModel_.java
Patch:
@@ -63,7 +63,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected StyleableModelView buildView(ViewGroup parent) {
+  public StyleableModelView buildView(ViewGroup parent) {
     StyleableModelView v = new StyleableModelView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/AbstractEpoxyModelWithView.java
Patch:
@@ -11,7 +11,7 @@
 @EpoxyModelClass
 public abstract class AbstractEpoxyModelWithView extends EpoxyModelWithView<View> {
   @Override
-  protected View buildView(@NonNull ViewGroup parent) {
+  public View buildView(@NonNull ViewGroup parent) {
     return new View(parent.getContext());
   }
 }

File: epoxy-processortest/src/test/resources/AutoLayoutModelViewMatchParentModel_.java
Patch:
@@ -37,7 +37,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected AutoLayoutModelViewMatchParent buildView(ViewGroup parent) {
+  public AutoLayoutModelViewMatchParent buildView(ViewGroup parent) {
     AutoLayoutModelViewMatchParent v = new AutoLayoutModelViewMatchParent(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.MATCH_PARENT, ViewGroup.MarginLayoutParams.MATCH_PARENT));
     return v;

File: epoxy-processortest/src/test/resources/AutoLayoutModelViewModel_.java
Patch:
@@ -37,7 +37,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected AutoLayoutModelView buildView(ViewGroup parent) {
+  public AutoLayoutModelView buildView(ViewGroup parent) {
     AutoLayoutModelView v = new AutoLayoutModelView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/ModelViewExtendingSuperClassModel_.java
Patch:
@@ -39,7 +39,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected ModelViewExtendingSuperClass buildView(ViewGroup parent) {
+  public ModelViewExtendingSuperClass buildView(ViewGroup parent) {
     ModelViewExtendingSuperClass v = new ModelViewExtendingSuperClass(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.MATCH_PARENT, ViewGroup.MarginLayoutParams.MATCH_PARENT));
     return v;

File: epoxy-processortest/src/test/resources/ModelViewSuperClassModel_.java
Patch:
@@ -37,7 +37,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected ModelViewSuperClass buildView(ViewGroup parent) {
+  public ModelViewSuperClass buildView(ViewGroup parent) {
     ModelViewSuperClass v = new ModelViewSuperClass(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.MATCH_PARENT, ViewGroup.MarginLayoutParams.MATCH_PARENT));
     return v;

File: epoxy-processortest/src/test/resources/ModelViewWithParisModel_.java
Patch:
@@ -56,7 +56,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected ModelViewWithParis buildView(ViewGroup parent) {
+  public ModelViewWithParis buildView(ViewGroup parent) {
     ModelViewWithParis v = new ModelViewWithParis(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropCallbackPropViewModel_.java
Patch:
@@ -39,7 +39,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropCallbackPropView buildView(ViewGroup parent) {
+  public TestFieldPropCallbackPropView buildView(ViewGroup parent) {
     TestFieldPropCallbackPropView v = new TestFieldPropCallbackPropView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropChildViewModel_.java
Patch:
@@ -56,7 +56,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropChildView buildView(ViewGroup parent) {
+  public TestFieldPropChildView buildView(ViewGroup parent) {
     TestFieldPropChildView v = new TestFieldPropChildView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropDoNotHashOptionViewModel_.java
Patch:
@@ -51,7 +51,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropDoNotHashOptionView buildView(ViewGroup parent) {
+  public TestFieldPropDoNotHashOptionView buildView(ViewGroup parent) {
     TestFieldPropDoNotHashOptionView v = new TestFieldPropDoNotHashOptionView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropGenerateStringOverloadsOptionViewModel_.java
Patch:
@@ -52,7 +52,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropGenerateStringOverloadsOptionView buildView(ViewGroup parent) {
+  public TestFieldPropGenerateStringOverloadsOptionView buildView(ViewGroup parent) {
     TestFieldPropGenerateStringOverloadsOptionView v = new TestFieldPropGenerateStringOverloadsOptionView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropIgnoreRequireHashCodeOptionViewModel_.java
Patch:
@@ -51,7 +51,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropIgnoreRequireHashCodeOptionView buildView(ViewGroup parent) {
+  public TestFieldPropIgnoreRequireHashCodeOptionView buildView(ViewGroup parent) {
     TestFieldPropIgnoreRequireHashCodeOptionView v = new TestFieldPropIgnoreRequireHashCodeOptionView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropModelPropViewModel_.java
Patch:
@@ -37,7 +37,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropModelPropView buildView(ViewGroup parent) {
+  public TestFieldPropModelPropView buildView(ViewGroup parent) {
     TestFieldPropModelPropView v = new TestFieldPropModelPropView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropNullOnRecycleOptionViewModel_.java
Patch:
@@ -39,7 +39,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropNullOnRecycleOptionView buildView(ViewGroup parent) {
+  public TestFieldPropNullOnRecycleOptionView buildView(ViewGroup parent) {
     TestFieldPropNullOnRecycleOptionView v = new TestFieldPropNullOnRecycleOptionView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/TestFieldPropTextPropViewModel_.java
Patch:
@@ -52,7 +52,7 @@ protected int getViewType() {
   }
 
   @Override
-  protected TestFieldPropTextPropView buildView(ViewGroup parent) {
+  public TestFieldPropTextPropView buildView(ViewGroup parent) {
     TestFieldPropTextPropView v = new TestFieldPropTextPropView(parent.getContext());
     v.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT));
     return v;

File: epoxy-processortest/src/test/resources/ModelWithAllFieldTypesBuilder.java
Patch:
@@ -16,6 +16,7 @@
 import java.lang.String;
 import java.util.List;
 
+@EpoxyBuildScope
 public interface ModelWithAllFieldTypesBuilder {
   ModelWithAllFieldTypesBuilder onBind(
       OnModelBoundListener<ModelWithAllFieldTypes_, Object> listener);

File: epoxy-processortest/src/test/resources/TestManyTypesViewModelBuilder.java
Patch:
@@ -16,6 +16,7 @@
 import java.lang.String;
 import java.util.List;
 
+@EpoxyBuildScope
 public interface TestManyTypesViewModelBuilder {
   TestManyTypesViewModelBuilder onBind(
       OnModelBoundListener<TestManyTypesViewModel_, TestManyTypesView> listener);

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/BaseEpoxyAdapter.java
Patch:
@@ -98,7 +98,7 @@ public int getItemViewType(int position) {
   public EpoxyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
     EpoxyModel<?> model = viewTypeManager.getModelForViewType(this, viewType);
     View view = model.buildView(parent);
-    return new EpoxyViewHolder(view, model.shouldSaveViewState());
+    return new EpoxyViewHolder(parent, view, model.shouldSaveViewState());
   }
 
   @Override

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModelGroup.java
Patch:
@@ -1,6 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.view.View;
+import android.view.ViewParent;
 import android.view.ViewStub;
 
 import java.util.ArrayList;
@@ -275,8 +276,8 @@ protected boolean useViewStubLayoutParams(EpoxyModel<?> model, int modelPosition
   }
 
   @Override
-  protected final ModelGroupHolder createNewHolder() {
-    return new ModelGroupHolder();
+  protected final ModelGroupHolder createNewHolder(@NonNull ViewParent parent) {
+    return new ModelGroupHolder(parent);
   }
 
   @Override

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModelWithHolder.java
Patch:
@@ -1,5 +1,7 @@
 package com.airbnb.epoxy;
 
+import android.view.ViewParent;
+
 import com.airbnb.epoxy.VisibilityState.Visibility;
 
 import java.util.List;
@@ -22,7 +24,7 @@ public EpoxyModelWithHolder(long id) {
   }
 
   /** This should return a new instance of your {@link com.airbnb.epoxy.EpoxyHolder} class. */
-  protected abstract T createNewHolder();
+  protected abstract T createNewHolder(@NonNull ViewParent parent);
 
   @Override
   public void bind(@NonNull T holder) {

File: epoxy-databinding/src/main/java/com/airbnb/epoxy/DataBindingEpoxyModel.java
Patch:
@@ -3,6 +3,7 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.ViewParent;
 
 import com.airbnb.epoxy.DataBindingEpoxyModel.DataBindingHolder;
 
@@ -95,7 +96,7 @@ public void unbind(@NonNull DataBindingHolder holder) {
   }
 
   @Override
-  protected final DataBindingHolder createNewHolder() {
+  protected final DataBindingHolder createNewHolder(@NonNull ViewParent parent) {
     return new DataBindingHolder();
   }
 

File: epoxy-processortest/src/test/resources/AbstractModelWithHolder_.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.epoxy;
 
+import android.view.ViewParent;
 import androidx.annotation.LayoutRes;
 import androidx.annotation.Nullable;
 import java.lang.CharSequence;
@@ -201,7 +202,7 @@ public AbstractModelWithHolder_ hide() {
   }
 
   @Override
-  protected AbstractModelWithHolder.Holder createNewHolder() {
+  protected AbstractModelWithHolder.Holder createNewHolder(ViewParent parent) {
     return new AbstractModelWithHolder.Holder();
   }
 

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/OnVisibilityStateChanged.java
Patch:
@@ -10,10 +10,10 @@
  * with this annotation will be called when the visibility state is changed.
  * <p>
  * Annotated methods should follow this signature :
- * `@OnVisibilityStateChange
- * public void method(@VisibilityState int state)`
+ * `@OnVisibilityStateChanged
+ * public void method(@Visibility int state)`
  * <p>
- * Possible States are declared in {@link com.airbnb.epoxy.OnModelVisibilityStateChangedListener}.
+ * Possible States are declared in {@link com.airbnb.epoxy.VisibilityState}.
  * <p>
  * The equivalent methods on the model is
  * {@link com.airbnb.epoxy.EpoxyModel#onVisibilityStateChanged}

File: epoxy-processor/src/main/java/com/airbnb/epoxy/processor/HashCodeValidator.java
Patch:
@@ -17,6 +17,7 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
+import static com.airbnb.epoxy.processor.KotlinUtilsKt.typeNameSynchronized;
 import static com.airbnb.epoxy.processor.SynchronizationKt.ensureLoaded;
 import static com.airbnb.epoxy.processor.Utils.getMethodOnClass;
 import static com.airbnb.epoxy.processor.Utils.isIterableType;
@@ -82,7 +83,7 @@ private void validateImplementsHashCode(TypeMirror mirror) throws EpoxyProcessor
       return;
     }
 
-    if (TypeName.get(mirror).isPrimitive()) {
+    if (typeNameSynchronized(mirror).isPrimitive()) {
       return;
     }
 
@@ -198,7 +199,7 @@ private boolean isWhiteListedType(Element element) {
    * discarded after compilation.
    */
   private boolean isAutoValueType(Element element) {
-    for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
+    for (AnnotationMirror annotationMirror : SynchronizationKt.getAnnotationMirrorsThreadSafe(element)) {
       DeclaredType annotationType = annotationMirror.getAnnotationType();
       boolean isAutoValue = isSubtypeOfType(annotationType, "com.google.auto.value.AutoValue");
       if (isAutoValue) {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyControllerAdapter.java
Patch:
@@ -112,11 +112,13 @@ boolean diffPayloadsEnabled() {
 
   @Override
   public void onAttachedToRecyclerView(@NonNull RecyclerView recyclerView) {
+    super.onAttachedToRecyclerView(recyclerView);
     epoxyController.onAttachedToRecyclerViewInternal(recyclerView);
   }
 
   @Override
   public void onDetachedFromRecyclerView(@NonNull RecyclerView recyclerView) {
+    super.onDetachedFromRecyclerView(recyclerView);
     epoxyController.onDetachedFromRecyclerViewInternal(recyclerView);
   }
 

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/ViewTypeManager.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
 class ViewTypeManager {
@@ -11,7 +12,8 @@ class ViewTypeManager {
    * The last model that had its view type looked up. This is stored so in most cases we can quickly
    * look up what view type belongs to which model.
    */
-  private EpoxyModel<?> lastModelForViewTypeLookup;
+  @Nullable
+  EpoxyModel<?> lastModelForViewTypeLookup;
 
   /**
    * The type map is static so that models of the same class share the same views across different

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/TypedEpoxyControllerTest.java
Patch:
@@ -4,10 +4,13 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
+import org.robolectric.annotation.LooperMode.Mode;
 
 import static junit.framework.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(Mode.LEGACY)
 public class TypedEpoxyControllerTest {
 
   static class TestTypedController extends TypedEpoxyController<String> {

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/PackageEpoxyConfig.java
Patch:
@@ -6,15 +6,15 @@
 import java.lang.annotation.Target;
 
 /**
- * Use this annotation on any class in your package to specify default behavior for the Epoxy
+ * Use this annotation on any class or interface in your package to specify default behavior for the Epoxy
  * annotation processor for that package. You can only have one instance of this annotation per
  * package.
  * <p>
  * If an instance of this annotation is not found in a package then the default values are used.
  * <p>
  * See https://github.com/airbnb/epoxy/wiki/Configuration for more details on these options.
  */
-@Target(ElementType.PACKAGE)
+@Target(ElementType.TYPE)
 @Retention(RetentionPolicy.CLASS)
 public @interface PackageEpoxyConfig {
   boolean REQUIRE_HASHCODE_DEFAULT = false;

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/PackageModelViewConfig.java
Patch:
@@ -10,7 +10,7 @@
  * package. Also applies to subpackages, unless other package config values are set in those sub
  * packages.
  */
-@Target({ElementType.PACKAGE, ElementType.TYPE})
+@Target(ElementType.TYPE)
 @Retention(RetentionPolicy.CLASS)
 public @interface PackageModelViewConfig {
   /**

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/BindModelIntegrationTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -20,6 +21,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(LooperMode.Mode.LEGACY)
 public class BindModelIntegrationTest {
 
   private Model_ model;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/DataBindingModelIntegrationTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
 import java.util.Collections;
 import java.util.List;
@@ -28,6 +29,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(LooperMode.Mode.LEGACY)
 public class DataBindingModelIntegrationTest {
 
   @Test

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/EpoxyModelValidationTest.java
Patch:
@@ -14,10 +14,12 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
 import java.util.List;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(LooperMode.Mode.LEGACY)
 public class EpoxyModelValidationTest {
   @Rule
   public ExpectedException thrown = ExpectedException.none();

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/ModelClickListenerTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
 import androidx.recyclerview.widget.RecyclerView;
 import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
@@ -33,6 +34,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(LooperMode.Mode.LEGACY)
 public class ModelClickListenerTest {
 
   private ControllerLifecycleHelper lifecycleHelper = new ControllerLifecycleHelper();

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/OnModelBindListenerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 
 import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
 
@@ -22,6 +23,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(LooperMode.Mode.LEGACY)
 public class OnModelBindListenerTest {
 
   private ControllerLifecycleHelper lifecycleHelper = new ControllerLifecycleHelper();

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/ViewAnnotationsStringOverloadsIntegrationTest.java
Patch:
@@ -9,13 +9,15 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.LooperMode;
 
 import androidx.test.core.app.ApplicationProvider;
 
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNull;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(LooperMode.Mode.LEGACY)
 public class ViewAnnotationsStringOverloadsIntegrationTest {
 
   private ControllerLifecycleHelper lifecycleHelper;

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/EpoxyConfig.java
Patch:
@@ -1,7 +1,9 @@
 package com.airbnb.epoxy.sample;
 
 import com.airbnb.epoxy.EpoxyDataBindingLayouts;
+import com.airbnb.epoxy.PackageModelViewConfig;
 
+@PackageModelViewConfig(rClass = R.class)
 @EpoxyDataBindingLayouts(R.layout.button)
-interface EpoxyDataBindingConfig {}
+interface EpoxyConfig {}
 

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/PackageModelViewConfig.java
Patch:
@@ -10,7 +10,7 @@
  * package. Also applies to subpackages, unless other package config values are set in those sub
  * packages.
  */
-@Target(ElementType.PACKAGE)
+@Target({ElementType.PACKAGE, ElementType.TYPE})
 @Retention(RetentionPolicy.CLASS)
 public @interface PackageModelViewConfig {
   /**

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/EpoxyDataBindingLayouts.java
Patch:
@@ -18,7 +18,7 @@
  * Alternatively you can use {@link EpoxyDataBindingPattern} to avoid explicitly declaring each
  * layout.
  */
-@Target(ElementType.PACKAGE)
+@Target(ElementType.TYPE)
 @Retention(RetentionPolicy.CLASS)
 public @interface EpoxyDataBindingLayouts {
   /** A list of databinding layout resources that should have EpoxyModel's generated for them. */

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/EpoxyDataBindingPattern.java
Patch:
@@ -13,7 +13,7 @@
  * The layouts must not specify a custom databinding class name or package via the
  * class="com.example.CustomClassName" override in the layout xml.
  */
-@Target(ElementType.PACKAGE)
+@Target(ElementType.TYPE)
 @Retention(RetentionPolicy.CLASS)
 public @interface EpoxyDataBindingPattern {
   /**

File: epoxy-processortest/src/test/resources/DataBindingConfig.java
Patch:
@@ -1,2 +1,4 @@
-@EpoxyDataBindingLayouts({R.layout.model_with_data_binding})
 package com.airbnb.epoxy;
+
+@EpoxyDataBindingLayouts({R.layout.model_with_data_binding})
+interface EpoxyDataBindingConfig {}

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/package-info.java
Patch:
@@ -1,6 +1,4 @@
-@EpoxyDataBindingLayouts(R.layout.button)
 @PackageModelViewConfig(rClass = R.class)
 package com.airbnb.epoxy.sample;
 
-import com.airbnb.epoxy.EpoxyDataBindingLayouts;
 import com.airbnb.epoxy.PackageModelViewConfig;

File: epoxy-processortest/src/test/resources/BaseModelWithAttributeViewModel_.java
Patch:
@@ -177,7 +177,6 @@ public String clickListener() {
   }
 
   public BaseModelViewModel_ baseModelString(String baseModelString) {
-    assignedAttributes_epoxyGeneratedModel.set(1);
     onMutation();
     super.baseModelString = baseModelString;
     return this;

File: epoxy-processortest/src/test/java/com/airbnb/epoxy/EpoxyResourceProcessorTest.java
Patch:
@@ -8,6 +8,7 @@
 
 import javax.tools.JavaFileObject;
 
+import static com.airbnb.epoxy.ProcessorTestUtils.processors;
 import static com.google.common.truth.Truth.assert_;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
@@ -58,7 +59,7 @@ public void testGenerateDefaultLayoutMethod() {
 
     assert_().about(javaSources())
         .that(Arrays.asList(model, R))
-        .processedWith(new EpoxyProcessor())
+        .processedWith(processors())
         .compilesWithoutError()
         .and()
         .generatesSources(generatedModel);
@@ -85,7 +86,7 @@ public void testRFilesWithSameValue() {
     assert_().about(javaSources())
         .that(Arrays
             .asList(model, modelWithDifferentRClass, R, R_FROM_DIFFERENT_PACKAGE_WITH_SAME_VALUE))
-        .processedWith(new EpoxyProcessor())
+        .processedWith(processors())
         .compilesWithoutError()
         .and()
         .generatesSources(generatedModel, generatedModelWithDifferentRClass);

File: epoxy-processortest/src/test/resources/ModelWithAllFieldTypesBuilder.java
Patch:
@@ -87,4 +87,4 @@ ModelWithAllFieldTypesBuilder onVisibilityChanged(
 
   ModelWithAllFieldTypesBuilder spanSizeOverride(
       @Nullable EpoxyModel.SpanSizeOverrideCallback arg0);
-}
+}
\ No newline at end of file

File: epoxy-processortest/src/test/resources/TestAfterBindPropsViewModel_.java
Patch:
@@ -175,7 +175,7 @@ public boolean flag() {
   /**
    * <i>Optional</i>: Default value is false
    *
-   * @see TestAfterBindPropsView#setFlagSuper(boolean)
+   * @see TestAfterBindPropsSuperView#setFlagSuper(boolean)
    */
   public TestAfterBindPropsViewModel_ flagSuper(boolean flagSuper) {
     assignedAttributes_epoxyGeneratedModel.set(1);

File: epoxy-processortest/src/test/resources/TestManyTypesViewModelBuilder.java
Patch:
@@ -86,4 +86,4 @@ TestManyTypesViewModelBuilder titleQuantityRes(@PluralsRes int pluralRes, int qu
 
   TestManyTypesViewModelBuilder spanSizeOverride(
       @Nullable EpoxyModel.SpanSizeOverrideCallback arg0);
-}
+}
\ No newline at end of file

File: epoxy-processor/src/main/java/com/airbnb/epoxy/BaseModelAttributeInfo.java
Patch:
@@ -57,6 +57,7 @@ class BaseModelAttributeInfo extends AttributeInfo {
     setIgnoreRequireHashCode(options.contains(Option.IgnoreRequireHashCode));
     setDoNotUseInToString(options.contains(Option.DoNotUseInToString));
 
+    //noinspection deprecation
     setGenerateSetter(annotation.setter() && !options.contains(Option.NoSetter));
     setGenerateGetter(!options.contains(Option.NoGetter));
 

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/StringAttributeData.java
Patch:
@@ -62,7 +62,7 @@ public void setValue(@StringRes int stringRes, @Nullable Object[] formatArgs) {
 
   private void handleInvalidStringRes() {
     if (hasDefault) {
-      if (defaultStringRes > 0) {
+      if (defaultStringRes != 0) {
         setValue(defaultStringRes);
       } else {
         setValue(defaultString);
@@ -85,13 +85,13 @@ public void setValue(@PluralsRes int pluralRes, int quantity, @Nullable Object[]
   }
 
   public CharSequence toString(Context context) {
-    if (pluralRes > 0) {
+    if (pluralRes != 0) {
       if (formatArgs != null) {
         return context.getResources().getQuantityString(pluralRes, quantity, formatArgs);
       } else {
         return context.getResources().getQuantityString(pluralRes, quantity);
       }
-    } else if (stringRes > 0) {
+    } else if (stringRes != 0) {
       if (formatArgs != null) {
         return context.getResources().getString(stringRes, formatArgs);
       } else {

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/DiffPayloadTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentMatcher;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
@@ -21,8 +22,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class DiffPayloadTest {
 
   private final List<EpoxyModel<?>> models = new ArrayList<>();

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/DifferCorrectnessTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
+import org.robolectric.RobolectricTestRunner;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -23,8 +23,7 @@
 import static com.airbnb.epoxy.ModelTestUtils.removeModelsAfterPosition;
 import static junit.framework.Assert.assertEquals;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class DifferCorrectnessTest {
   private static final boolean SHOW_LOGS = false;
   /**

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/DifferNotifyTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.List;
@@ -16,8 +17,7 @@
  * {@link EpoxyAdapter#notifyModelsChanged()}
  * will properly update the model state maintained by the differ.
  */
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class DifferNotifyTest {
   private static final int INITIAL_MODEL_COUNT = 20;
 

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/EpoxyAdapterTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
@@ -22,8 +23,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class EpoxyAdapterTest {
 
   @Rule public ExpectedException thrown = ExpectedException.none();

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/EpoxyControllerTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
@@ -20,8 +21,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class EpoxyControllerTest {
 
   List<EpoxyModel<?>> savedModels;

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/ModelListTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
@@ -17,8 +18,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class ModelListTest {
 
   private final ModelList.ModelListObserver observer = mock(ModelList.ModelListObserver.class);

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/TypedEpoxyControllerTest.java
Patch:
@@ -2,12 +2,12 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import static junit.framework.Assert.assertEquals;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class TypedEpoxyControllerTest {
 
   static class TestTypedController extends TypedEpoxyController<String> {

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/UpdateOpHelperTest.java
Patch:
@@ -2,14 +2,14 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class UpdateOpHelperTest {
 
   private final UpdateOpHelper helper = new UpdateOpHelper();

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/test/CarouselTest.java
Patch:
@@ -4,18 +4,17 @@
 
 import com.airbnb.epoxy.Carousel;
 import com.airbnb.epoxy.Carousel.SnapHelperFactory;
-import com.airbnb.epoxy.TestRunner;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.LinearSnapHelper;
 import androidx.recyclerview.widget.SnapHelper;
 
-@Config(sdk = 21, manifest = TestRunner.MANIFEST_PATH)
-@RunWith(TestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class CarouselTest {
 
   @Test

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/AutoModelIntegrationTest.java
Patch:
@@ -3,7 +3,6 @@
 import com.airbnb.epoxy.integrationtest.AdapterWithFieldAssigned;
 import com.airbnb.epoxy.integrationtest.AdapterWithIdChanged;
 import com.airbnb.epoxy.integrationtest.BasicAutoModelsAdapter;
-import com.airbnb.epoxy.integrationtest.BuildConfig;
 import com.airbnb.epoxy.integrationtest.ControllerWithoutImplicityAdding;
 import com.airbnb.epoxy.integrationtest.Model_;
 import com.airbnb.epoxy.integrationtest.autoaddautomodels.ControllerWithImplicitlyAddedModels;
@@ -13,15 +12,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class AutoModelIntegrationTest {
 
   @Test

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/BindModelIntegrationTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class BindModelIntegrationTest {
 
   private Model_ model;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/ControllerLifecycleHelper.java
Patch:
@@ -3,11 +3,11 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
-import org.robolectric.RuntimeEnvironment;
-
 import java.util.Collections;
 import java.util.List;
 
+import androidx.test.core.app.ApplicationProvider;
+
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.spy;
 
@@ -41,7 +41,7 @@ public View bindModel(EpoxyModel<?> model) {
   static EpoxyViewHolder createViewHolder(BaseEpoxyAdapter adapter, int position) {
     final EpoxyViewHolder viewHolder = spy(
         adapter.onCreateViewHolder(
-            new FrameLayout(RuntimeEnvironment.application),
+            new FrameLayout(ApplicationProvider.getApplicationContext()),
             adapter.getItemViewType(position)
         )
     );

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/DataBindingModelIntegrationTest.java
Patch:
@@ -28,7 +28,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class DataBindingModelIntegrationTest {
 
   @Test

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/EpoxyAdapterIntegrationTest.java
Patch:
@@ -12,7 +12,6 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class EpoxyAdapterIntegrationTest {
 
   private ControllerLifecycleHelper lifecycleHelper = new ControllerLifecycleHelper();

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/EpoxyModelIntegrationTest.java
Patch:
@@ -13,7 +13,6 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class EpoxyModelIntegrationTest {
 
   static class ModelWithSpanCount extends EpoxyModel<View> {

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/EpoxyModelValidationTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class EpoxyModelValidationTest {
   @Rule
   public ExpectedException thrown = ExpectedException.none();

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/ModelClickListenerTest.java
Patch:
@@ -33,7 +33,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class ModelClickListenerTest {
 
   private ControllerLifecycleHelper lifecycleHelper = new ControllerLifecycleHelper();

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/OnModelBindListenerTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class OnModelBindListenerTest {
 
   private ControllerLifecycleHelper lifecycleHelper = new ControllerLifecycleHelper();

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/PagingIntegrationTest_List.java
Patch:
@@ -18,7 +18,6 @@
 import static junit.framework.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class PagingIntegrationTest_List {
 
   private Controller controller;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/PagingIntegrationTest_PagedList.java
Patch:
@@ -20,7 +20,6 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
 public class PagingIntegrationTest_PagedList {
   private Controller controller;
 

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/models/CarouselModelGroup.java
Patch:
@@ -28,7 +28,8 @@ private static List<EpoxyModel<?>> buildModels(CarouselData carousel,
     models.add(new ImageButtonModel_()
         .id("add")
         .imageRes(R.drawable.ic_add_circle)
-        .clickListener(v -> callbacks.onAddColorToCarouselClicked(carousel)));
+        .clickListener((model, parentView, clickedView, position) -> callbacks
+            .onAddColorToCarouselClicked(carousel)));
 
     models.add(new ImageButtonModel_()
         .id("delete")

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModelGroup.java
Patch:
@@ -208,7 +208,7 @@ private interface IterateModelsCallback {
   @Override
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     // Defaults to using the span size of the first model. Override this if you need to customize it
-    return models.get(0).getSpanSizeInternal(totalSpanCount, position, itemCount);
+    return models.get(0).spanSize(totalSpanCount, position, itemCount);
   }
 
   @Override

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyViewHolder.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.List;
 
 import androidx.annotation.FloatRange;
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.Px;
 import androidx.recyclerview.widget.RecyclerView;
@@ -72,6 +73,7 @@ public void bind(@SuppressWarnings("rawtypes") EpoxyModel model,
     epoxyModel = model;
   }
 
+  @NonNull
   Object objectToBind() {
     return epoxyHolder != null ? epoxyHolder : itemView;
   }
@@ -103,7 +105,6 @@ public void visibilityChanged(
         visibleWidth, objectToBind());
   }
 
-
   public List<Object> getPayloads() {
     assertBound();
     return payloads;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/EpoxyModelIntegrationTest.java
Patch:
@@ -31,7 +31,7 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
   @Test
   public void modelReturnsSpanCount() {
     ModelWithSpanCount model = new ModelWithSpanCount();
-    assertEquals(6, model.getSpanSizeInternal(0, 0, 0));
+    assertEquals(6, model.spanSize(0, 0, 0));
   }
 
   static class ModelWithSpanCountCallback extends EpoxyModel<View> {
@@ -51,6 +51,6 @@ public int getSpanSize(int totalSpanCount, int position, int itemCount) {
       }
     });
 
-    assertEquals(7, model.getSpanSizeInternal(0, 0, 0));
+    assertEquals(7, model.spanSize(0, 0, 0));
   }
 }

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/Carousel.java
Patch:
@@ -102,6 +102,9 @@ && getPaddingBottom() == 0) {
     if (snapHelperFactory != null) {
       snapHelperFactory.buildSnapHelper(getContext()).attachToRecyclerView(this);
     }
+
+    // Carousels will be detached when their parent recyclerview is
+    setRemoveAdapterWhenDetachedFromWindow(false);
   }
 
   /**

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/BaseEpoxyAdapter.java
Patch:
@@ -149,7 +149,7 @@ protected BoundViewHolders getBoundViewHolders() {
 
   @Override
   public int getItemViewType(int position) {
-    return viewTypeManager.getViewType(getModelForPosition(position));
+    return viewTypeManager.getViewTypeAndRememberModel(getModelForPosition(position));
   }
 
   @Override

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelGroupWithAnnotation.java
Patch:
@@ -4,6 +4,7 @@
 import com.airbnb.epoxy.EpoxyModel;
 import com.airbnb.epoxy.EpoxyModelClass;
 import com.airbnb.epoxy.EpoxyModelGroup;
+import com.airbnb.epoxy.ModelGroupHolder;
 
 import java.util.List;
 
@@ -18,7 +19,7 @@ public ModelGroupWithAnnotation(List<? extends EpoxyModel<?>> models) {
   }
 
   @Override
-  public void bind(@NonNull Holder holder) {
+  public void bind(@NonNull ModelGroupHolder holder) {
     super.bind(holder);
     holder.getRootView().setBackgroundColor(backgroundColor);
   }

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/BaseEpoxyTouchCallback.java
Patch:
@@ -12,7 +12,7 @@ interface BaseEpoxyTouchCallback<T extends EpoxyModel> {
    *
    * @param model           The model being targeted for movement.
    * @param adapterPosition The current adapter position of the targeted model
-   * @see android.support.v7.widget.helper.ItemTouchHelper.Callback#getMovementFlags
+   * @see androidx.recyclerview.widget.ItemTouchHelper.Callback#getMovementFlags
    */
   int getMovementFlagsForModel(T model, int adapterPosition);
 

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/BoundViewHolders.java
Patch:
@@ -1,12 +1,12 @@
 
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-import android.support.v4.util.LongSparseArray;
-
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 
+import androidx.annotation.Nullable;
+import androidx.collection.LongSparseArray;
+
 /** Helper class for keeping track of {@link EpoxyViewHolder}s that are currently bound. */
 @SuppressWarnings("WeakerAccess")
 public class BoundViewHolders implements Iterable<EpoxyViewHolder> {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/ControllerHelperLookup.java
Patch:
@@ -1,12 +1,12 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
+import androidx.annotation.Nullable;
+
 /**
  * Looks up a generated {@link ControllerHelper} implementation for a given adapter.
  * If the adapter has no {@link com.airbnb.epoxy.AutoModel} models then a No-Op implementation will

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/DiffHelper.java
Patch:
@@ -1,15 +1,15 @@
 
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-import android.support.v7.widget.RecyclerView;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
+import androidx.annotation.Nullable;
+import androidx.recyclerview.widget.RecyclerView;
+
 /**
  * Helper to track changes in the models list.
  */

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyAsyncUtil.java
Patch:
@@ -6,7 +6,8 @@
 import android.os.HandlerThread;
 import android.os.Looper;
 import android.os.Message;
-import android.support.annotation.MainThread;
+
+import androidx.annotation.MainThread;
 
 /**
  * Various helpers for running Epoxy operations off the main thread.

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyDiffLogger.java
Patch:
@@ -1,9 +1,10 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-import android.support.v7.widget.RecyclerView.AdapterDataObserver;
 import android.util.Log;
 
+import androidx.annotation.Nullable;
+import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
+
 /**
  * This data observer can be registered with an Epoxy adapter or controller to log all item change
  * events. This may be useful to use in debug builds in order to observe model updates and monitor

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyHolder.java
Patch:
@@ -1,8 +1,9 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.NonNull;
 import android.view.View;
 
+import androidx.annotation.NonNull;
+
 /**
  * Used in conjunction with {@link com.airbnb.epoxy.EpoxyModelWithHolder} to provide a view holder
  * pattern when binding to a model.

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxySwipeCallback.java
Patch:
@@ -1,9 +1,10 @@
 package com.airbnb.epoxy;
 
 import android.graphics.Canvas;
-import android.support.v7.widget.helper.ItemTouchHelper;
 import android.view.View;
 
+import androidx.recyclerview.widget.ItemTouchHelper;
+
 /**
  * For use with {@link EpoxyModelTouchCallback}
  */

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/HandlerExecutor.java
Patch:
@@ -2,10 +2,11 @@
 
 import android.os.Handler;
 import android.os.Looper;
-import android.support.annotation.NonNull;
 
 import java.util.concurrent.Executor;
 
+import androidx.annotation.NonNull;
+
 /**
  * An executor that does it's work via posting to a Handler.
  * <p>

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/HiddenEpoxyModel.java
Patch:
@@ -1,7 +1,7 @@
 
 package com.airbnb.epoxy;
 
-import android.support.v4.widget.Space;
+import android.widget.Space;
 
 import com.airbnb.viewmodeladapter.R;
 

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/ImmutableModelException.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Thrown if a model is changed after it is added to an {@link com.airbnb.epoxy.EpoxyController}.

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/ModelList.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.NonNull;
-
 import java.util.AbstractList;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -11,6 +9,8 @@
 import java.util.ListIterator;
 import java.util.NoSuchElementException;
 
+import androidx.annotation.NonNull;
+
 /**
  * Used by our {@link EpoxyAdapter} to track models. It simply wraps ArrayList and notifies an
  * observer when remove or insertion operations are done on the list. This allows us to optimize

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/NotifyBlocker.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.epoxy;
 
-import android.support.v7.widget.RecyclerView.AdapterDataObserver;
+import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
 
 /**
  * We don't allow any data change notifications except the ones done though diffing. Forcing

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/OnModelBuildFinishedListener.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 /**
  * Used with {@link EpoxyController#addModelBuildListener(OnModelBuildFinishedListener)} to be

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/OnModelVisibilityChangedListener.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.FloatRange;
-import android.support.annotation.Px;
+import androidx.annotation.FloatRange;
+import androidx.annotation.Px;
 
 /** Used to register an onVisibilityChanged callback with a generated model. */
 public interface OnModelVisibilityChangedListener<T extends EpoxyModel<V>, V> {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/QuantityStringResAttribute.java
Patch:
@@ -1,11 +1,12 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
-import android.support.annotation.PluralsRes;
 
 import java.util.Arrays;
 
+import androidx.annotation.Nullable;
+import androidx.annotation.PluralsRes;
+
 public class QuantityStringResAttribute {
   @PluralsRes private final int id;
   private final int quantity;

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/TypedEpoxyController.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.os.Handler;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 /**
  * This is a wrapper around {@link com.airbnb.epoxy.EpoxyController} to simplify how data is

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/UpdateOp.java
Patch:
@@ -1,13 +1,13 @@
 
 package com.airbnb.epoxy;
 
-import android.support.annotation.IntDef;
-import android.support.annotation.Nullable;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 
+import androidx.annotation.IntDef;
+import androidx.annotation.Nullable;
+
 /** Defines an operation that makes a change to the epoxy model list. */
 class UpdateOp {
 

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/UpdateOpHelper.java
Patch:
@@ -1,12 +1,12 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-
 import com.airbnb.epoxy.UpdateOp.Type;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.annotation.Nullable;
+
 import static com.airbnb.epoxy.UpdateOp.ADD;
 import static com.airbnb.epoxy.UpdateOp.MOVE;
 import static com.airbnb.epoxy.UpdateOp.REMOVE;

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/ViewTypeManager.java
Patch:
@@ -1,10 +1,10 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.VisibleForTesting;
-
 import java.util.HashMap;
 import java.util.Map;
 
+import androidx.annotation.VisibleForTesting;
+
 class ViewTypeManager {
   private static final Map<Class, Integer> VIEW_TYPE_MAP = new HashMap<>();
   /**

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/VisibilityState.java
Patch:
@@ -1,10 +1,10 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.IntDef;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
+import androidx.annotation.IntDef;
+
 public final class VisibilityState {
 
   @Retention(RetentionPolicy.SOURCE)

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/DiffPayloadTest.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.v7.widget.RecyclerView.AdapterDataObserver;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -12,6 +10,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
+
 import static com.airbnb.epoxy.DiffPayload.getModelFromPayload;
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNull;

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/EpoxyControllerTest.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.v7.widget.RecyclerView.AdapterDataObserver;
-
 import com.airbnb.epoxy.EpoxyController.Interceptor;
 
 import org.junit.Test;
@@ -11,6 +9,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
+
 import static junit.framework.Assert.assertFalse;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -502,4 +502,4 @@ protected void buildModels() {
     // Model build should happen synchronously in tests
     assertFalse(controller.hasPendingModelBuild());
   }
-}
\ No newline at end of file
+}

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/ViewTypeManagerIntegrationTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
@@ -11,6 +10,8 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
+import androidx.annotation.NonNull;
+
 import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.never;
@@ -132,4 +133,4 @@ public void viewTypesSharedAcrossAdapters() {
     assertEquals(adapter1.getItemViewType(0), adapter2.getItemViewType(0));
     assertEquals(adapter1.getItemViewType(1), adapter2.getItemViewType(1));
   }
-}
\ No newline at end of file
+}

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/EpoxyDataBindingLayouts.java
Patch:
@@ -1,12 +1,12 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import androidx.annotation.LayoutRes;
+
 /**
  * Used to specify a list of databinding layout resources that you want EpoxyModels generated for.
  * The models will be generated in the same package as this annotation. Every layout must be a valid

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/EpoxyModelClass.java
Patch:
@@ -1,13 +1,13 @@
 
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import androidx.annotation.LayoutRes;
+
 /**
  * Used to annotate EpoxyModel classes in order to generate a subclass of that model with getters,
  * setters, equals, and hashcode for the annotated fields, as well as other helper methods and

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/ModelProp.java
Patch:
@@ -59,7 +59,7 @@ enum Option {
     IgnoreRequireHashCode,
     /**
      * Setters with a type of {@link CharSequence} can add this option to have {@link
-     * android.support.annotation.StringRes} and {@link android.support.annotation.PluralsRes}
+     * androidx.annotation.StringRes} and {@link androidx.annotation.PluralsRes}
      * overload methods generated on the model, so users can set the string via a resource.
      */
     GenerateStringOverloads,

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/ModelView.java
Patch:
@@ -1,12 +1,12 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import androidx.annotation.LayoutRes;
+
 /**
  * An annotation on custom view classes to automatically generate an EpoxyModel for that view. Used
  * in conjunction with {@link ModelProp}

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/TextProp.java
Patch:
@@ -1,12 +1,12 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.StringRes;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import androidx.annotation.StringRes;
+
 /**
  * A convenient replacement for {@link ModelProp} when the prop represents text.
  * <p>

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelChangesDuringBind.java
Patch:
@@ -1,11 +1,12 @@
 package com.airbnb.epoxy.integrationtest;
 
-import android.support.annotation.NonNull;
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyAttribute;
 import com.airbnb.epoxy.EpoxyModel;
 
+import androidx.annotation.NonNull;
+
 public class ModelChangesDuringBind extends EpoxyModel<View> {
   @EpoxyAttribute public int value;
 

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelGroupWithAnnotation.java
Patch:
@@ -1,14 +1,14 @@
 package com.airbnb.epoxy.integrationtest;
 
-import android.support.annotation.NonNull;
-
 import com.airbnb.epoxy.EpoxyAttribute;
 import com.airbnb.epoxy.EpoxyModel;
 import com.airbnb.epoxy.EpoxyModelClass;
 import com.airbnb.epoxy.EpoxyModelGroup;
 
 import java.util.List;
 
+import androidx.annotation.NonNull;
+
 @EpoxyModelClass
 public abstract class ModelGroupWithAnnotation extends EpoxyModelGroup {
   @EpoxyAttribute int backgroundColor;

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelWithClickListener.java
Patch:
@@ -1,11 +1,12 @@
 package com.airbnb.epoxy.integrationtest;
 
-import android.support.annotation.NonNull;
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyAttribute;
 import com.airbnb.epoxy.EpoxyModel;
 
+import androidx.annotation.NonNull;
+
 public class ModelWithClickListener extends EpoxyModel<View> {
 
   @EpoxyAttribute public View.OnClickListener clickListener;

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelWithLongClickListener.java
Patch:
@@ -1,11 +1,12 @@
 package com.airbnb.epoxy.integrationtest;
 
-import android.support.annotation.NonNull;
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyAttribute;
 import com.airbnb.epoxy.EpoxyModel;
 
+import androidx.annotation.NonNull;
+
 public class ModelWithLongClickListener extends EpoxyModel<View> {
 
   @EpoxyAttribute View.OnLongClickListener clickListener;

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ViewWithAnnotationsForIntegrationTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.airbnb.epoxy.integrationtest;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
 import android.util.AttributeSet;
 import android.view.View;
 
@@ -10,6 +9,8 @@
 import com.airbnb.epoxy.ModelProp.Option;
 import com.airbnb.epoxy.ModelView;
 
+import androidx.annotation.Nullable;
+
 @ModelView(defaultLayout = R.layout.view_with_annotations_for_integration_test)
 public class ViewWithAnnotationsForIntegrationTest extends View {
   public static final String DEFAULT_STRING = "hello world";

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/ControllerLifecycleHelper.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
 
 class ControllerLifecycleHelper {
   private EpoxyViewHolder viewHolder;
@@ -47,7 +47,7 @@ static EpoxyViewHolder createViewHolder(BaseEpoxyAdapter adapter, int position)
     );
 
     // The simplest way to inject the position for testing.
-    when(viewHolder.getAdapterPosition()).thenReturn(position);
+    doReturn(position).when(viewHolder).getAdapterPosition();
     return viewHolder;
   }
 

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/DataBindingModelIntegrationTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.v7.widget.RecyclerView.AdapterDataObserver;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.widget.Button;
@@ -18,8 +17,10 @@
 import java.util.Collections;
 import java.util.List;
 
-import static junit.framework.Assert.assertEquals;
+import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
+
 import static junit.framework.Assert.assertNotNull;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/EpoxyModelIntegrationTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 21)

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/OnModelBindListenerTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.v7.widget.RecyclerView.AdapterDataObserver;
 import android.view.View;
 
 import com.airbnb.epoxy.integrationtest.BuildConfig;
@@ -11,6 +10,8 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
+import androidx.recyclerview.widget.RecyclerView.AdapterDataObserver;
+
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/PagingIntegrationTest_List.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.arch.paging.PagedList;
-
 import com.airbnb.epoxy.integrationtest.BuildConfig;
 import com.airbnb.epoxy.integrationtest.Model_;
 import com.airbnb.epoxy.paging.PagingEpoxyController;
@@ -15,6 +13,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.paging.PagedList;
+
 import static junit.framework.Assert.assertEquals;
 
 @RunWith(RobolectricTestRunner.class)

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/PagingIntegrationTest_PagedList.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.arch.paging.PagedList;
-
 import com.airbnb.epoxy.integrationtest.BuildConfig;
 import com.airbnb.epoxy.integrationtest.Model_;
 import com.airbnb.epoxy.paging.PagingEpoxyController;
@@ -15,6 +13,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.paging.PagedList;
+
 import static junit.framework.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: epoxy-litho/src/main/java/com/airbnb/epoxy/EpoxyLithoModel.java
Patch:
@@ -1,7 +1,6 @@
 package com.airbnb.epoxy;
 
 import android.os.Looper;
-import android.support.annotation.NonNull;
 import android.view.ViewGroup;
 
 import com.facebook.litho.Component;
@@ -12,6 +11,8 @@
 
 import java.util.List;
 
+import androidx.annotation.NonNull;
+
 /**
  * Experiment support for Facebook's Litho library. Any litho component specs will automatically
  * have a model generated for them that extends this class.

File: epoxy-modelfactory/src/test/resources/AllTypesModelView.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.RawRes;
 import android.widget.FrameLayout;
+import androidx.annotation.DrawableRes;
+import androidx.annotation.RawRes;
 
 import com.airbnb.epoxy.ModelProp.Option;
 

File: epoxy-modelfactory/src/test/resources/BasicModelWithFinalAttribute_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -252,4 +252,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-modelfactory/src/test/resources/CallbackPropModelView.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
 import android.widget.FrameLayout;
+import androidx.annotation.Nullable;
 
 @ModelView(defaultLayout = 1)
 public class CallbackPropModelView extends FrameLayout {
@@ -15,4 +15,4 @@ public CallbackPropModelView(Context context) {
   public void setOnClickListener(@Nullable OnClickListener listener) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-modelfactory/src/test/resources/CallbackPropModelViewModel_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.View;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -330,4 +330,4 @@ public static CallbackPropModelViewModel_ from(ModelProperties properties) {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-modelfactory/src/test/resources/ListSubtypeModelView.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
 import android.widget.FrameLayout;
+import androidx.annotation.Nullable;
 import java.util.ArrayList;
 
 @ModelView(defaultLayout = 1)

File: epoxy-processor/src/main/java/com/airbnb/epoxy/ConfigManager.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-
 import com.squareup.javapoet.ClassName;
 
 import java.util.ArrayList;
@@ -18,6 +16,8 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
+import androidx.annotation.Nullable;
+
 import static com.airbnb.epoxy.Utils.buildEpoxyException;
 import static com.airbnb.epoxy.Utils.getClassParamFromAnnotation;
 

File: epoxy-processor/src/main/java/com/airbnb/epoxy/GeneratedModelInfo.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-
 import com.airbnb.epoxy.ModelView.Size;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
@@ -33,6 +31,8 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Types;
 
+import androidx.annotation.Nullable;
+
 import static com.airbnb.epoxy.Utils.buildEpoxyException;
 import static com.airbnb.epoxy.Utils.isSubtypeOfType;
 

File: epoxy-processor/src/main/java/com/airbnb/epoxy/Utils.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
-
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.ParameterSpec;
@@ -29,6 +27,8 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
+import androidx.annotation.Nullable;
+
 import static com.airbnb.epoxy.KotlinUtilsKt.getParentClassElement;
 import static com.squareup.javapoet.TypeName.BOOLEAN;
 import static com.squareup.javapoet.TypeName.BYTE;

File: epoxy-processortest/src/test/resources/AbstractModelWithHolder.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.NonNull;
 import android.view.View;
+import androidx.annotation.NonNull;
 
 @EpoxyModelClass
 public abstract class AbstractModelWithHolder
@@ -19,4 +19,4 @@ protected void bindView(@NonNull View itemView) {
 
     }
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/AbstractModelWithHolder_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -265,4 +265,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/AutoLayoutModelViewMatchParentModel_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.ViewGroup;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -315,4 +315,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/AutoLayoutModelViewModel_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.ViewGroup;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -313,4 +313,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/BasicModelWithAttribute_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -258,4 +258,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/CustomPackageLayoutPatternViewModel_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -271,4 +271,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/DefaultPackageLayoutPatternViewModel_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -271,4 +271,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/EpoxyModelGroupWithAnnotations_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -264,4 +264,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$NoLayout_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -266,4 +266,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$StillNoLayout_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -251,4 +251,4 @@ public String toString() {
     return "GenerateDefaultLayoutMethodNextParentLayout$StillNoLayout_{" +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$WithLayout_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -250,4 +250,4 @@ public String toString() {
     return "GenerateDefaultLayoutMethodNextParentLayout$WithLayout_{" +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodParentLayout$NoLayout_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -266,4 +266,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodParentLayout$WithLayout_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -250,4 +250,4 @@ public String toString() {
     return "GenerateDefaultLayoutMethodParentLayout$WithLayout_{" +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethod_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -265,4 +265,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/GeneratedModelSuffixViewSuffix_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -270,4 +270,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/LayoutOverloadsViewModel_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -279,4 +279,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelDoNotHash_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -283,4 +283,4 @@ public String toString() {
         ", value3=" + value3 +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelDoNotUseInToString_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -288,4 +288,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelForRProcessingTest_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -264,4 +264,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelForTestingDuplicateRValues_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import com.airbnb.epoxy.othermodule.R;
 import java.lang.CharSequence;
 import java.lang.Number;
@@ -266,4 +266,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelNoValidation_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -247,4 +247,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelReturningClassTypeWithVarargs_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -271,4 +271,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelReturningClassType_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -277,4 +277,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelViewExtendingSuperClassModel_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.ViewGroup;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -350,4 +350,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelViewSuperClassModel_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.ViewGroup;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -315,4 +315,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelViewWithParisModel_.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.epoxy;
 
 import android.os.AsyncTask;
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.ViewGroup;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import com.airbnb.paris.StyleApplierUtils;
 import com.airbnb.paris.styles.Style;
 import com.airbnb.viewmodeladapter.R;
@@ -411,4 +411,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAbstractClassAndAnnotation_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -243,4 +243,4 @@ public String toString() {
     return "ModelWithAbstractClassAndAnnotation_{" +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAllFieldTypesBuilder.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.Boolean;
 import java.lang.Byte;
 import java.lang.CharSequence;
@@ -87,4 +87,4 @@ ModelWithAllFieldTypesBuilder onVisibilityChanged(
 
   ModelWithAllFieldTypesBuilder spanSizeOverride(
       @Nullable EpoxyModel.SpanSizeOverrideCallback arg0);
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAllFieldTypes_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.Boolean;
 import java.lang.Byte;
 import java.lang.CharSequence;
@@ -590,4 +590,4 @@ public String toString() {
         ", valueList=" + valueList +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAllPrivateFieldTypes_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.Boolean;
 import java.lang.Byte;
 import java.lang.CharSequence;
@@ -597,4 +597,4 @@ public String toString() {
         ", valueList=" + getValueList() +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClassAndSuperAttributes$SubModelWithAnnotatedClassAndSuperAttributes_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -270,4 +270,4 @@ public String toString() {
         "superValue=" + superValue +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClassAndSuperAttributes_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -259,4 +259,4 @@ public String toString() {
         "superValue=" + superValue +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClass_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -242,4 +242,4 @@ public String toString() {
     return "ModelWithAnnotatedClass_{" +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithAnnotation_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Deprecated;
 import java.lang.Number;
@@ -242,4 +242,4 @@ public String toString() {
     return "ModelWithAnnotation_{" +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithConstructors_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -266,4 +266,4 @@ public String toString() {
         "valueInt=" + valueInt +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithFieldAnnotation.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 public class ModelWithFieldAnnotation extends EpoxyModel<Object> {
   @EpoxyAttribute @Nullable String title;
@@ -9,4 +9,4 @@ public class ModelWithFieldAnnotation extends EpoxyModel<Object> {
   protected int getDefaultLayout() {
     return 0;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithFieldAnnotation_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -259,4 +259,4 @@ public String toString() {
         "title=" + title +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithFinalField_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -249,4 +249,4 @@ public String toString() {
         "valueInt=" + valueInt +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithIntDef.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.epoxy.models;
 
-import android.support.annotation.IntDef;
+import androidx.annotation.IntDef;
 
 import com.airbnb.epoxy.EpoxyAttribute;
 import com.airbnb.epoxy.EpoxyModel;

File: epoxy-processortest/src/test/resources/ModelWithIntDef_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy.models;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import com.airbnb.epoxy.EpoxyController;
 import com.airbnb.epoxy.EpoxyModel;
 import com.airbnb.epoxy.EpoxyViewHolder;
@@ -264,4 +264,4 @@ public String toString() {
         "type=" + type +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithPrivateFieldWithSameAsFieldGetterAndSetterName_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -260,4 +260,4 @@ public String toString() {
         "isValue=" + isValue() +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithPrivateViewClickListener_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.View;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -274,4 +274,4 @@ public String toString() {
         "clickListener=" + getClickListener() +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithSuperAttributes$SubModelWithSuperAttributes_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -276,4 +276,4 @@ public String toString() {
         ", superValue=" + superValue +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithSuperAttributes_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -258,4 +258,4 @@ public String toString() {
         "superValue=" + superValue +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithSuper_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -256,4 +256,4 @@ public String toString() {
         "valueInt=" + valueInt +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithType_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -255,4 +255,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithVarargsConstructors_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -280,4 +280,4 @@ public String toString() {
         ", varargs=" + varargs +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithViewClickListener_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.View;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -274,4 +274,4 @@ public String toString() {
         "clickListener=" + clickListener +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithViewLongClickListener_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.View;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -274,4 +274,4 @@ public String toString() {
         "clickListener=" + clickListener +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithoutHash_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -283,4 +283,4 @@ public String toString() {
         ", value3=" + value3 +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/ModelWithoutSetter_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -250,4 +250,4 @@ public String toString() {
         "value=" + value +
         "}" + super.toString();
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/NullOnRecycleView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 import com.airbnb.epoxy.ModelProp.Option;
@@ -17,4 +17,4 @@ public NullOnRecycleView(Context context) {
   public void setTitle(@Nullable CharSequence title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/NullOnRecycleViewModel_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -303,4 +303,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/NullOnRecycleView_throwsIfNotNullable.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 import com.airbnb.epoxy.ModelProp.Option;
@@ -17,4 +17,4 @@ public NullOnRecycleView_throwsIfNotNullable(Context context) {
   public void setTitle(CharSequence title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/PropDefaultsView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -42,4 +42,4 @@ public void objectWithDefault(String title) {
   public void objectWithDefaultAndNullable(@Nullable String title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/PropDefaultsView_throwsForNonFinalValue.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -15,4 +15,4 @@ public PropDefaultsView_throwsForNonFinalValue(Context context) {
   public void primitiveWithExplicitDefault(int title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/PropDefaultsView_throwsForNonStaticValue.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -15,4 +15,4 @@ public PropDefaultsView_throwsForNonStaticValue(Context context) {
   public void primitiveWithExplicitDefault(int title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/PropGroupsView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -79,4 +79,4 @@ public void requiredGroup(String title) {
   @ModelProp
   public void requiredGroup(CharSequence title) {
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/RLayoutInViewModelAnnotationWorksViewModel_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -271,4 +271,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TestAfterBindPropsViewModel_.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -334,4 +334,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TestCallbackPropView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -15,4 +15,4 @@ public TestCallbackPropView(Context context) {
   public void setListener(@Nullable View.OnClickListener clickListener) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TestCallbackPropViewModel_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.View;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -320,4 +320,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TestFieldPropCallbackPropView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 import com.airbnb.epoxy.AfterPropsSet;

File: epoxy-processortest/src/test/resources/TestFieldPropCallbackPropViewModel_.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -335,4 +335,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TestFieldPropModelPropViewModel_.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.epoxy;
 
-import android.support.annotation.LayoutRes;
-import android.support.annotation.Nullable;
 import android.view.ViewGroup;
+import androidx.annotation.LayoutRes;
+import androidx.annotation.Nullable;
 import java.lang.CharSequence;
 import java.lang.Number;
 import java.lang.Object;
@@ -316,4 +316,4 @@ public String toString() {
   public int getSpanSize(int totalSpanCount, int position, int itemCount) {
     return totalSpanCount;
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TestNullStringOverloadsView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -15,4 +15,4 @@ public TestNullStringOverloadsView(Context context) {
   public void setTitle(@Nullable CharSequence title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TestStringOverloadsView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 import java.util.List;
@@ -28,4 +28,4 @@ public void setTitle(@Nullable List<CharSequence> title) {
   public void setTitleViaValueShortcut(CharSequence title) {
      // test setting options via the value param shortcut
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TextPropDefaultView.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -20,4 +20,4 @@ public void textWithDefault(CharSequence title) {
   public void nullableTextWithDefault(@Nullable CharSequence title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-processortest/src/test/resources/TextPropDefaultView_throwsForNonStringRes.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.view.View;
 
 @ModelView(defaultLayout = 1)
@@ -15,4 +15,4 @@ public TextPropDefaultView_throwsForNonStringRes(Context context) {
   public void textWithDefault(CharSequence title) {
 
   }
-}
\ No newline at end of file
+}

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/ColorData.java
Patch:
@@ -2,7 +2,8 @@
 
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.annotation.ColorInt;
+
+import androidx.annotation.ColorInt;
 
 public class ColorData implements Parcelable {
   private final long id;

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/models/BaseEpoxyHolder.java
Patch:
@@ -1,11 +1,11 @@
 package com.airbnb.epoxy.sample.models;
 
-import android.support.annotation.CallSuper;
-import android.support.annotation.NonNull;
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyHolder;
 
+import androidx.annotation.CallSuper;
+import androidx.annotation.NonNull;
 import butterknife.ButterKnife;
 
 /**

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/models/BaseView.java
Patch:
@@ -1,11 +1,12 @@
 package com.airbnb.epoxy.sample.models;
 
 import android.content.Context;
-import android.support.v7.widget.AppCompatTextView;
 
 import com.airbnb.epoxy.ModelProp;
 import com.airbnb.epoxy.ModelView;
 
+import androidx.appcompat.widget.AppCompatTextView;
+
 @ModelView
 public abstract class BaseView extends AppCompatTextView {
 

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/models/ImageButtonModel.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.epoxy.sample.models;
 
-import android.support.annotation.DrawableRes;
-import android.support.annotation.NonNull;
 import android.view.View.OnClickListener;
 import android.widget.ImageView;
 
@@ -11,6 +9,8 @@
 import com.airbnb.epoxy.sample.R;
 import com.airbnb.epoxy.sample.models.ImageButtonModel.ImageButtonHolder;
 
+import androidx.annotation.DrawableRes;
+import androidx.annotation.NonNull;
 import butterknife.BindView;
 
 import static com.airbnb.epoxy.EpoxyAttribute.Option.DoNotHash;

File: epoxy-paging/src/main/java/com/airbnb/epoxy/paging/PagingEpoxyController.java
Patch:
@@ -33,7 +33,10 @@
  * for them.
  *
  * @param <T> The type of item in the list
+ *
+ * @deprecated Use {@link PagedListEpoxyController} instead.
  */
+@Deprecated()
 public abstract class PagingEpoxyController<T> extends EpoxyController {
 
   private static final Config DEFAULT_CONFIG = new Config.Builder()

File: epoxy-paging/src/main/java/com/airbnb/epoxy/paging/SimplePagingEpoxyController.java
Patch:
@@ -10,6 +10,8 @@
  * {@link #buildModel(Object)}
  *
  * @param <T> The list type
+ *
+ * @deprecated Use {@link PagedListEpoxyController} instead.
  */
 public abstract class SimplePagingEpoxyController<T> extends PagingEpoxyController<T> {
   @Override

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/AsyncEpoxyController.java
Patch:
@@ -25,7 +25,7 @@ public AsyncEpoxyController() {
    *                    both on the main thread.
    */
   public AsyncEpoxyController(boolean enableAsync) {
-    this(true, true);
+    this(enableAsync, enableAsync);
   }
 
   /**

File: kotlinsample/src/main/java/com/airbnb/epoxy/kotlinsample/package-info.java
Patch:
@@ -1,4 +1,4 @@
-@EpoxyDataBindingPattern(rClass = R.class, layoutPrefix = "view_holder")
+@EpoxyDataBindingPattern(rClass = R.class, layoutPrefix = "epoxy_layout")
 package com.airbnb.epoxy.kotlinsample;
 
 import com.airbnb.epoxy.EpoxyDataBindingPattern;

File: epoxy-processor/src/main/java/com/airbnb/epoxy/EpoxyProcessor.java
Patch:
@@ -222,8 +222,8 @@ private void validateAttributesImplementHashCode(
     for (GeneratedModelInfo generatedClass : generatedClasses) {
       for (AttributeInfo attributeInfo : generatedClass.getAttributeInfo()) {
         if (configManager.requiresHashCode(attributeInfo)
-            && attributeInfo.useInHash()
-            && !attributeInfo.ignoreRequireHashCode()) {
+            && attributeInfo.getUseInHash()
+            && !attributeInfo.getIgnoreRequireHashCode()) {
 
           try {
             hashCodeValidator.validate(attributeInfo);

File: epoxy-processor/src/main/java/com/airbnb/epoxy/EpoxyProcessor.java
Patch:
@@ -129,7 +129,7 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
         modelWriter, resourceProcessor);
 
     lithoSpecProcessor = new LithoSpecProcessor(
-        elementUtils, typeUtils, configManager, errorLogger, modelWriter);
+        elementUtils, typeUtils, errorLogger, modelWriter);
 
     kotlinExtensionWriter = new KotlinModelBuilderExtensionWriter(processingEnv);
   }

File: epoxy-processortest/src/test/resources/DoNotHashViewModel_.java
Patch:
@@ -152,8 +152,7 @@ public CharSequence title() {
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @NonNull
-  public DoNotHashViewModel_ clickListener(final OnModelClickListener<DoNotHashViewModel_, DoNotHashView> clickListener) {
+  public DoNotHashViewModel_ clickListener(@NonNull final OnModelClickListener<DoNotHashViewModel_, DoNotHashView> clickListener) {
     assignedAttributes_epoxyGeneratedModel.set(1);
     onMutation();
     if (clickListener == null) {

File: epoxy-processortest/src/test/resources/IgnoreRequireHashCodeViewModel_.java
Patch:
@@ -106,8 +106,7 @@ public IgnoreRequireHashCodeViewModel_ onUnbind(OnModelUnboundListener<IgnoreReq
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @NonNull
-  public IgnoreRequireHashCodeViewModel_ clickListener(final OnModelClickListener<IgnoreRequireHashCodeViewModel_, IgnoreRequireHashCodeView> clickListener) {
+  public IgnoreRequireHashCodeViewModel_ clickListener(@NonNull final OnModelClickListener<IgnoreRequireHashCodeViewModel_, IgnoreRequireHashCodeView> clickListener) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
     if (clickListener == null) {

File: epoxy-processortest/src/test/resources/TestCallbackPropViewModel_.java
Patch:
@@ -102,8 +102,7 @@ public TestCallbackPropViewModel_ onUnbind(OnModelUnboundListener<TestCallbackPr
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @Nullable
-  public TestCallbackPropViewModel_ listener(final OnModelClickListener<TestCallbackPropViewModel_, TestCallbackPropView> listener) {
+  public TestCallbackPropViewModel_ listener(@Nullable final OnModelClickListener<TestCallbackPropViewModel_, TestCallbackPropView> listener) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
     if (listener == null) {

File: epoxy-processortest/src/test/resources/TestFieldPropCallbackPropViewModel_.java
Patch:
@@ -117,8 +117,7 @@ public TestFieldPropCallbackPropViewModel_ onUnbind(OnModelUnboundListener<TestF
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @Nullable
-  public TestFieldPropCallbackPropViewModel_ value(final OnModelClickListener<TestFieldPropCallbackPropViewModel_, TestFieldPropCallbackPropView> value) {
+  public TestFieldPropCallbackPropViewModel_ value(@Nullable final OnModelClickListener<TestFieldPropCallbackPropViewModel_, TestFieldPropCallbackPropView> value) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
     if (value == null) {

File: epoxy-processortest/src/test/resources/TestFieldPropChildViewModel_.java
Patch:
@@ -196,8 +196,7 @@ public TestFieldPropChildViewModel_ textValueQuantityRes(@PluralsRes int pluralR
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @Nullable
-  public TestFieldPropChildViewModel_ value(final OnModelClickListener<TestFieldPropChildViewModel_, TestFieldPropChildView> value) {
+  public TestFieldPropChildViewModel_ value(@Nullable final OnModelClickListener<TestFieldPropChildViewModel_, TestFieldPropChildView> value) {
     assignedAttributes_epoxyGeneratedModel.set(1);
     onMutation();
     if (value == null) {

File: epoxy-processortest/src/test/resources/TestFieldPropDoNotHashOptionViewModel_.java
Patch:
@@ -121,8 +121,7 @@ public TestFieldPropDoNotHashOptionViewModel_ onUnbind(OnModelUnboundListener<Te
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @NonNull
-  public TestFieldPropDoNotHashOptionViewModel_ value(final OnModelClickListener<TestFieldPropDoNotHashOptionViewModel_, TestFieldPropDoNotHashOptionView> value) {
+  public TestFieldPropDoNotHashOptionViewModel_ value(@NonNull final OnModelClickListener<TestFieldPropDoNotHashOptionViewModel_, TestFieldPropDoNotHashOptionView> value) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
     if (value == null) {

File: epoxy-processortest/src/test/resources/TestFieldPropIgnoreRequireHashCodeOptionViewModel_.java
Patch:
@@ -123,8 +123,7 @@ public TestFieldPropIgnoreRequireHashCodeOptionViewModel_ onUnbind(OnModelUnboun
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @NonNull
-  public TestFieldPropIgnoreRequireHashCodeOptionViewModel_ value(final OnModelClickListener<TestFieldPropIgnoreRequireHashCodeOptionViewModel_, TestFieldPropIgnoreRequireHashCodeOptionView> value) {
+  public TestFieldPropIgnoreRequireHashCodeOptionViewModel_ value(@NonNull final OnModelClickListener<TestFieldPropIgnoreRequireHashCodeOptionViewModel_, TestFieldPropIgnoreRequireHashCodeOptionView> value) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
     if (value == null) {

File: epoxy-processortest/src/test/resources/TestFieldPropNullOnRecycleOptionViewModel_.java
Patch:
@@ -117,8 +117,7 @@ public TestFieldPropNullOnRecycleOptionViewModel_ onUnbind(OnModelUnboundListene
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @Nullable
-  public TestFieldPropNullOnRecycleOptionViewModel_ value(final OnModelClickListener<TestFieldPropNullOnRecycleOptionViewModel_, TestFieldPropNullOnRecycleOptionView> value) {
+  public TestFieldPropNullOnRecycleOptionViewModel_ value(@Nullable final OnModelClickListener<TestFieldPropNullOnRecycleOptionViewModel_, TestFieldPropNullOnRecycleOptionView> value) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
     if (value == null) {

File: epoxy-processortest/src/test/resources/TestManyTypesViewModelBuilder.java
Patch:
@@ -45,7 +45,7 @@ public interface TestManyTypesViewModelBuilder {
 
   TestManyTypesViewModelBuilder listValue(@NonNull List<String> listValue);
 
-  TestManyTypesViewModelBuilder clickListener(final OnModelClickListener<TestManyTypesViewModel_, TestManyTypesView> clickListener);
+  TestManyTypesViewModelBuilder clickListener(@NonNull final OnModelClickListener<TestManyTypesViewModel_, TestManyTypesView> clickListener);
 
   TestManyTypesViewModelBuilder clickListener(@NonNull View.OnClickListener clickListener);
 

File: epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java
Patch:
@@ -496,8 +496,7 @@ public List<String> listValue() {
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  @NonNull
-  public TestManyTypesViewModel_ clickListener(final OnModelClickListener<TestManyTypesViewModel_, TestManyTypesView> clickListener) {
+  public TestManyTypesViewModel_ clickListener(@NonNull final OnModelClickListener<TestManyTypesViewModel_, TestManyTypesView> clickListener) {
     assignedAttributes_epoxyGeneratedModel.set(12);
     onMutation();
     if (clickListener == null) {

File: epoxy-processor/src/main/java/com/airbnb/epoxy/ClassNames.java
Patch:
@@ -42,6 +42,7 @@ private ClassNames() {
   static final ClassName EPOXY_CONTROLLER = get(PKG_EPOXY, "EpoxyController");
   static final ClassName EPOXY_STYLE_BUILDER_CALLBACK = get(PKG_EPOXY, "StyleBuilderCallback");
   static final ClassName EPOXY_CONTROLLER_HELPER = get(PKG_EPOXY, "ControllerHelper");
+  static final ClassName EPOXY_MODEL_PROPERTIES = get(PKG_EPOXY, "ModelProperties");
 
   static final ClassName PARIS_STYLE_UTILS = get(PKG_PARIS, "StyleApplierUtils", "Companion");
   static final ClassName PARIS_STYLE = get(PKG_PARIS + ".styles", "Style");

File: epoxy-processor/src/main/java/com/airbnb/epoxy/Utils.java
Patch:
@@ -85,9 +85,9 @@ static Class<? extends Annotation> getAnnotationClass(ClassName name) {
     }
   }
 
-  static Element getElementByName(ClassName name, Elements elements, Types types) {
+  static TypeElement getElementByName(ClassName name, Elements elements, Types types) {
     String canonicalName = name.reflectionName().replace("$", ".");
-    return getElementByName(canonicalName, elements, types);
+    return (TypeElement) getElementByName(canonicalName, elements, types);
   }
 
   static Element getElementByName(String name, Elements elements, Types types) {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyController.java
Patch:
@@ -425,7 +425,7 @@ void clearModelFromStaging(EpoxyModel<?> model) {
     stagedModel = null;
   }
 
-  boolean isBuildingModels() {
+  protected boolean isBuildingModels() {
     return modelsBeingBuilt != null;
   }
 

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModelWithView.java
Patch:
@@ -1,6 +1,7 @@
 package com.airbnb.epoxy;
 
 import android.support.annotation.LayoutRes;
+import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -40,7 +41,7 @@ protected int getViewType() {
    * @param parent The parent ViewGroup that the returned view will be added to.
    */
   @Override
-  protected abstract T buildView(ViewGroup parent);
+  protected abstract T buildView(@NonNull ViewGroup parent);
 
   @Override
   protected final int getDefaultLayout() {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/SimpleEpoxyModel.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.support.annotation.CallSuper;
 import android.support.annotation.LayoutRes;
+import android.support.annotation.NonNull;
 import android.view.View;
 
 /**
@@ -31,15 +32,15 @@ public SimpleEpoxyModel span(int span) {
 
   @CallSuper
   @Override
-  public void bind(View view) {
+  public void bind(@NonNull View view) {
     super.bind(view);
     view.setOnClickListener(onClickListener);
     view.setClickable(onClickListener != null);
   }
 
   @CallSuper
   @Override
-  public void unbind(View view) {
+  public void unbind(@NonNull View view) {
     super.unbind(view);
     view.setOnClickListener(null);
   }

File: epoxy-adapter/src/test/java/com/airbnb/epoxy/ViewTypeManagerIntegrationTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.epoxy;
 
+import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
@@ -27,7 +28,7 @@ public void resetViewTypeMap() {
 
   static class TestModel extends EpoxyModelWithView<View> {
     @Override
-    protected View buildView(ViewGroup parent) {
+    protected View buildView(@NonNull ViewGroup parent) {
       return new FrameLayout(RuntimeEnvironment.application);
     }
   }

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelChangesDuringBind.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.epoxy.integrationtest;
 
+import android.support.annotation.NonNull;
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyAttribute;
@@ -14,7 +15,7 @@ protected int getDefaultLayout() {
   }
 
   @Override
-  public void bind(View view) {
+  public void bind(@NonNull View view) {
     super.bind(view);
     value = 3;
   }

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelGroupWithAnnotation.java
Patch:
@@ -1,5 +1,7 @@
 package com.airbnb.epoxy.integrationtest;
 
+import android.support.annotation.NonNull;
+
 import com.airbnb.epoxy.EpoxyAttribute;
 import com.airbnb.epoxy.EpoxyModel;
 import com.airbnb.epoxy.EpoxyModelClass;
@@ -16,7 +18,7 @@ public ModelGroupWithAnnotation(List<? extends EpoxyModel<?>> models) {
   }
 
   @Override
-  public void bind(Holder holder) {
+  public void bind(@NonNull Holder holder) {
     super.bind(holder);
     holder.getRootView().setBackgroundColor(backgroundColor);
   }

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelWithClickListener.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.epoxy.integrationtest;
 
+import android.support.annotation.NonNull;
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyAttribute;
@@ -15,7 +16,7 @@ protected int getDefaultLayout() {
   }
 
   @Override
-  public void bind(View view) {
+  public void bind(@NonNull View view) {
     view.setOnClickListener(clickListener);
   }
 }

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ModelWithLongClickListener.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.epoxy.integrationtest;
 
+import android.support.annotation.NonNull;
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyAttribute;
@@ -15,7 +16,7 @@ protected int getDefaultLayout() {
   }
 
   @Override
-  public void bind(View view) {
+  public void bind(@NonNull View view) {
     view.setOnLongClickListener(clickListener);
   }
 }

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/models/ImageButtonModel.java
Patch:
@@ -1,6 +1,7 @@
 package com.airbnb.epoxy.sample.models;
 
 import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
 import android.view.View.OnClickListener;
 import android.widget.ImageView;
 
@@ -20,13 +21,13 @@ public abstract class ImageButtonModel extends EpoxyModelWithHolder<ImageButtonH
   @EpoxyAttribute(DoNotHash) OnClickListener clickListener;
 
   @Override
-  public void bind(ImageButtonHolder holder) {
+  public void bind(@NonNull ImageButtonHolder holder) {
     holder.button.setImageResource(imageRes);
     holder.button.setOnClickListener(clickListener);
   }
 
   @Override
-  public void unbind(ImageButtonHolder holder) {
+  public void unbind(@NonNull ImageButtonHolder holder) {
     // Release resources and don't leak listeners as this view goes back to the view pool
     holder.button.setOnClickListener(null);
     holder.button.setImageDrawable(null);

File: epoxy-processortest/src/test/resources/AbstractModelWithHolder_.java
Patch:
@@ -175,13 +175,13 @@ public boolean equals(Object o) {
       return false;
     }
     AbstractModelWithHolder_ that = (AbstractModelWithHolder_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/BasicModelWithAttribute_.java
Patch:
@@ -169,13 +169,13 @@ public boolean equals(Object o) {
       return false;
     }
     BasicModelWithAttribute_ that = (BasicModelWithAttribute_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/CustomPackageLayoutPatternViewModel_.java
Patch:
@@ -180,10 +180,10 @@ public boolean equals(Object o) {
       return false;
     }
     CustomPackageLayoutPatternViewModel_ that = (CustomPackageLayoutPatternViewModel_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/DefaultPackageLayoutPatternViewModel_.java
Patch:
@@ -180,10 +180,10 @@ public boolean equals(Object o) {
       return false;
     }
     DefaultPackageLayoutPatternViewModel_ that = (DefaultPackageLayoutPatternViewModel_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$NoLayout_.java
Patch:
@@ -176,13 +176,13 @@ public boolean equals(Object o) {
       return false;
     }
     GenerateDefaultLayoutMethodNextParentLayout$NoLayout_ that = (GenerateDefaultLayoutMethodNextParentLayout$NoLayout_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$StillNoLayout_.java
Patch:
@@ -165,10 +165,10 @@ public boolean equals(Object o) {
       return false;
     }
     GenerateDefaultLayoutMethodNextParentLayout$StillNoLayout_ that = (GenerateDefaultLayoutMethodNextParentLayout$StillNoLayout_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodNextParentLayout$WithLayout_.java
Patch:
@@ -165,10 +165,10 @@ public boolean equals(Object o) {
       return false;
     }
     GenerateDefaultLayoutMethodNextParentLayout$WithLayout_ that = (GenerateDefaultLayoutMethodNextParentLayout$WithLayout_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodParentLayout$NoLayout_.java
Patch:
@@ -176,13 +176,13 @@ public boolean equals(Object o) {
       return false;
     }
     GenerateDefaultLayoutMethodParentLayout$NoLayout_ that = (GenerateDefaultLayoutMethodParentLayout$NoLayout_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethodParentLayout$WithLayout_.java
Patch:
@@ -165,10 +165,10 @@ public boolean equals(Object o) {
       return false;
     }
     GenerateDefaultLayoutMethodParentLayout$WithLayout_ that = (GenerateDefaultLayoutMethodParentLayout$WithLayout_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/GenerateDefaultLayoutMethod_.java
Patch:
@@ -175,13 +175,13 @@ public boolean equals(Object o) {
       return false;
     }
     GenerateDefaultLayoutMethod_ that = (GenerateDefaultLayoutMethod_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/LayoutOverloadsViewModel_.java
Patch:
@@ -190,10 +190,10 @@ public boolean equals(Object o) {
       return false;
     }
     LayoutOverloadsViewModel_ that = (LayoutOverloadsViewModel_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelForRProcessingTest_.java
Patch:
@@ -175,13 +175,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelForRProcessingTest_ that = (ModelForRProcessingTest_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelForTestingDuplicateRValues_.java
Patch:
@@ -176,13 +176,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelForTestingDuplicateRValues_ that = (ModelForTestingDuplicateRValues_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelNoValidation_.java
Patch:
@@ -161,13 +161,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelNoValidation_ that = (ModelNoValidation_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelReturningClassTypeWithVarargs_.java
Patch:
@@ -181,13 +181,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelReturningClassTypeWithVarargs_ that = (ModelReturningClassTypeWithVarargs_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelReturningClassType_.java
Patch:
@@ -188,13 +188,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelReturningClassType_ that = (ModelReturningClassType_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithAbstractClassAndAnnotation_.java
Patch:
@@ -158,10 +158,10 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithAbstractClassAndAnnotation_ that = (ModelWithAbstractClassAndAnnotation_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClassAndSuperAttributes$SubModelWithAnnotatedClassAndSuperAttributes_.java
Patch:
@@ -172,13 +172,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithAnnotatedClassAndSuperAttributes$SubModelWithAnnotatedClassAndSuperAttributes_ that = (ModelWithAnnotatedClassAndSuperAttributes$SubModelWithAnnotatedClassAndSuperAttributes_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (superValue != that.superValue) {
+    if ((superValue != that.superValue)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClassAndSuperAttributes_.java
Patch:
@@ -170,13 +170,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithAnnotatedClassAndSuperAttributes_ that = (ModelWithAnnotatedClassAndSuperAttributes_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (superValue != that.superValue) {
+    if ((superValue != that.superValue)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithAnnotatedClass_.java
Patch:
@@ -158,10 +158,10 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithAnnotatedClass_ that = (ModelWithAnnotatedClass_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithAnnotation_.java
Patch:
@@ -160,10 +160,10 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithAnnotation_ that = (ModelWithAnnotation_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithConstructors_.java
Patch:
@@ -177,13 +177,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithConstructors_ that = (ModelWithConstructors_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (valueInt != that.valueInt) {
+    if ((valueInt != that.valueInt)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithFieldAnnotation_.java
Patch:
@@ -170,13 +170,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithFieldAnnotation_ that = (ModelWithFieldAnnotation_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (title != null ? !title.equals(that.title) : that.title != null) {
+    if ((title != null ? !title.equals(that.title) : that.title != null)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithFinalField_.java
Patch:
@@ -162,13 +162,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithFinalField_ that = (ModelWithFinalField_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (valueInt != that.valueInt) {
+    if ((valueInt != that.valueInt)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithIntDef_.java
Patch:
@@ -176,13 +176,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithIntDef_ that = (ModelWithIntDef_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (type != that.type) {
+    if ((type != that.type)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithPrivateFieldWithSameAsFieldGetterAndSetterName_.java
Patch:
@@ -170,13 +170,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithPrivateFieldWithSameAsFieldGetterAndSetterName_ that = (ModelWithPrivateFieldWithSameAsFieldGetterAndSetterName_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (isValue() != that.isValue()) {
+    if ((isValue() != that.isValue())) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithPrivateViewClickListener_.java
Patch:
@@ -186,13 +186,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithPrivateViewClickListener_ that = (ModelWithPrivateViewClickListener_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((getClickListener() == null) != (that.getClickListener() == null)) {
+    if (((getClickListener() == null) != (that.getClickListener() == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithSuperAttributes_.java
Patch:
@@ -169,13 +169,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithSuperAttributes_ that = (ModelWithSuperAttributes_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (superValue != that.superValue) {
+    if ((superValue != that.superValue)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithSuper_.java
Patch:
@@ -170,13 +170,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithSuper_ that = (ModelWithSuper_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (valueInt != that.valueInt) {
+    if ((valueInt != that.valueInt)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithType_.java
Patch:
@@ -169,13 +169,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithType_ that = (ModelWithType_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithVarargsConstructors_.java
Patch:
@@ -185,13 +185,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithVarargsConstructors_ that = (ModelWithVarargsConstructors_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (valueInt != that.valueInt) {
+    if ((valueInt != that.valueInt)) {
       return false;
     }
     if (!Arrays.equals(varargs, that.varargs)) {

File: epoxy-processortest/src/test/resources/ModelWithViewClickListener_.java
Patch:
@@ -186,13 +186,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithViewClickListener_ that = (ModelWithViewClickListener_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((clickListener == null) != (that.clickListener == null)) {
+    if (((clickListener == null) != (that.clickListener == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithViewLongClickListener_.java
Patch:
@@ -186,13 +186,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithViewLongClickListener_ that = (ModelWithViewLongClickListener_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((clickListener == null) != (that.clickListener == null)) {
+    if (((clickListener == null) != (that.clickListener == null))) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/ModelWithoutSetter_.java
Patch:
@@ -163,13 +163,13 @@ public boolean equals(Object o) {
       return false;
     }
     ModelWithoutSetter_ that = (ModelWithoutSetter_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if (value != that.value) {
+    if ((value != that.value)) {
       return false;
     }
     return true;

File: epoxy-processortest/src/test/resources/RLayoutInViewModelAnnotationWorksViewModel_.java
Patch:
@@ -181,10 +181,10 @@ public boolean equals(Object o) {
       return false;
     }
     RLayoutInViewModelAnnotationWorksViewModel_ that = (RLayoutInViewModelAnnotationWorksViewModel_) o;
-    if ((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null)) {
+    if (((onModelBoundListener_epoxyGeneratedModel == null) != (that.onModelBoundListener_epoxyGeneratedModel == null))) {
       return false;
     }
-    if ((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null)) {
+    if (((onModelUnboundListener_epoxyGeneratedModel == null) != (that.onModelUnboundListener_epoxyGeneratedModel == null))) {
       return false;
     }
     return true;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/DataBindingModelIntegrationTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
+
 import java.util.Collections;
 import java.util.List;
 

File: epoxy-processor/src/main/java/com/airbnb/epoxy/GeneratedModelWriter.java
Patch:
@@ -138,7 +138,7 @@ void generateClassForModel(GeneratedModelInfo info) throws IOException {
   void generateClassForModel(GeneratedModelInfo info, BuilderHooks builderHooks)
       throws IOException {
     this.builderHooks = builderHooks;
-    if (!info.shouldGenerateModel()) {
+    if (!info.shouldGenerateModel) {
       return;
     }
 

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/ViewWithAnnotationsForIntegrationTest.java
Patch:
@@ -1,11 +1,13 @@
-package com.airbnb.epoxy;
+package com.airbnb.epoxy.integrationtest;
 
 import android.content.Context;
 import android.support.annotation.Nullable;
 import android.util.AttributeSet;
 import android.view.View;
 
+import com.airbnb.epoxy.ModelProp;
 import com.airbnb.epoxy.ModelProp.Option;
+import com.airbnb.epoxy.ModelView;
 
 @ModelView(defaultLayout = R.layout.view_with_annotations_for_integration_test)
 public class ViewWithAnnotationsForIntegrationTest extends View {

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/autoaddautomodels/ControllerWithImplicitlyAddedModels.java
Patch:
@@ -1,9 +1,9 @@
-package com.airbnb.epoxy.autoaddautomodels;
+package com.airbnb.epoxy.integrationtest.autoaddautomodels;
 
 import com.airbnb.epoxy.AutoModel;
 import com.airbnb.epoxy.EpoxyController;
 import com.airbnb.epoxy.EpoxyModel.AddPredicate;
-import com.airbnb.epoxy.Model_;
+import com.airbnb.epoxy.integrationtest.Model_;
 
 import java.util.ArrayList;
 import java.util.List;

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/autoaddautomodels/ControllerWithImplicitlyAddedModels2.java
Patch:
@@ -1,8 +1,8 @@
-package com.airbnb.epoxy.autoaddautomodels;
+package com.airbnb.epoxy.integrationtest.autoaddautomodels;
 
 import com.airbnb.epoxy.AutoModel;
 import com.airbnb.epoxy.EpoxyController;
-import com.airbnb.epoxy.Model_;
+import com.airbnb.epoxy.integrationtest.Model_;
 
 import java.util.ArrayList;
 import java.util.List;

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/autoaddautomodels/ControllerWithImplicitlyAddedModels3.java
Patch:
@@ -1,8 +1,8 @@
-package com.airbnb.epoxy.autoaddautomodels;
+package com.airbnb.epoxy.integrationtest.autoaddautomodels;
 
 import com.airbnb.epoxy.AutoModel;
 import com.airbnb.epoxy.EpoxyController;
-import com.airbnb.epoxy.Model_;
+import com.airbnb.epoxy.integrationtest.Model_;
 
 import java.util.ArrayList;
 import java.util.List;

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/integrationtest/autoaddautomodels/package-info.java
Patch:
@@ -1,4 +1,4 @@
 @PackageEpoxyConfig(implicitlyAddAutoModels = true)
-package com.airbnb.epoxy.autoaddautomodels;
+package com.airbnb.epoxy.integrationtest.autoaddautomodels;
 
 import com.airbnb.epoxy.PackageEpoxyConfig;

File: epoxy-integrationtest/src/main/java/com/airbnb/epoxy/package-info.java
Patch:
@@ -1,2 +0,0 @@
-@EpoxyDataBindingLayouts({R.layout.model_with_data_binding})
-package com.airbnb.epoxy;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/BindModelIntegrationTest.java
Patch:
@@ -2,6 +2,9 @@
 
 import android.widget.TextView;
 
+import com.airbnb.epoxy.integrationtest.BuildConfig;
+import com.airbnb.epoxy.integrationtest.Model_;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/EpoxyModelIntegrationTest.java
Patch:
@@ -3,6 +3,7 @@
 import android.view.View;
 
 import com.airbnb.epoxy.EpoxyModel.SpanSizeOverrideCallback;
+import com.airbnb.epoxy.integrationtest.BuildConfig;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/OnModelBindListenerTest.java
Patch:
@@ -3,6 +3,9 @@
 import android.support.v7.widget.RecyclerView.AdapterDataObserver;
 import android.view.View;
 
+import com.airbnb.epoxy.integrationtest.BuildConfig;
+import com.airbnb.epoxy.integrationtest.ModelWithClickListener_;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;

File: epoxy-processor/src/main/java/com/airbnb/epoxy/ClassNames.java
Patch:
@@ -34,8 +34,8 @@ private ClassNames() {
   // TODO: (eli_hart 9/8/17) Fix this package name
   static final ClassName EPOXY_R = get("com.airbnb.viewmodeladapter", "R");
   static final ClassName EPOXY_DATA_BINDING_MODEL = get(PKG_EPOXY, "DataBindingEpoxyModel");
-  static final ClassName EPOXY_DATA_BINDING_HOLDER = get(PKG_EPOXY,
-      "DataBindingEpoxyModel.DataBindingHolder");
+  static final ClassName EPOXY_DATA_BINDING_HOLDER =
+      get(PKG_EPOXY, "DataBindingEpoxyModel", "DataBindingHolder");
   static final ClassName EPOXY_STRING_ATTRIBUTE_DATA = get(PKG_EPOXY, "StringAttributeData");
   static final ClassName EPOXY_CONTROLLER = get(PKG_EPOXY, "EpoxyController");
   static final ClassName EPOXY_STYLE_BUILDER_CALLBACK = get(PKG_EPOXY, "StyleBuilderCallback");

File: epoxy-processor/src/main/java/com/airbnb/epoxy/GeneratedModelWriter.java
Patch:
@@ -830,7 +830,7 @@ static void addParameterNullCheckIfNeeded(ConfigManager configManager, Attribute
 
   private MethodSpec generateSetClickModelListener(GeneratedModelInfo classInfo,
       AttributeInfo attribute) {
-    String attributeName = attribute.getFieldName();
+    String attributeName = attribute.generatedSetterName();
 
     ParameterizedTypeName clickListenerType =
         isViewLongClickListenerType(attribute.getTypeMirror())

File: epoxy-processortest/src/test/resources/DoNotHashViewModel_.java
Patch:
@@ -150,14 +150,14 @@ public CharSequence title() {
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  public DoNotHashViewModel_ clickListener_OnClickListener(final OnModelClickListener<DoNotHashViewModel_, DoNotHashView> clickListener_OnClickListener) {
+  public DoNotHashViewModel_ clickListener(final OnModelClickListener<DoNotHashViewModel_, DoNotHashView> clickListener) {
     assignedAttributes_epoxyGeneratedModel.set(1);
     onMutation();
-    if (clickListener_OnClickListener == null) {
+    if (clickListener == null) {
       this.clickListener_OnClickListener = null;
     }
     else {
-      this.clickListener_OnClickListener = new WrappedEpoxyModelClickListener(this, clickListener_OnClickListener);
+      this.clickListener_OnClickListener = new WrappedEpoxyModelClickListener(this, clickListener);
     }
     return this;
   }

File: epoxy-processortest/src/test/resources/IgnoreRequireHashCodeViewModel_.java
Patch:
@@ -107,14 +107,14 @@ public IgnoreRequireHashCodeViewModel_ onUnbind(OnModelUnboundListener<IgnoreReq
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  public IgnoreRequireHashCodeViewModel_ clickListener_OnClickListener(final OnModelClickListener<IgnoreRequireHashCodeViewModel_, IgnoreRequireHashCodeView> clickListener_OnClickListener) {
+  public IgnoreRequireHashCodeViewModel_ clickListener(final OnModelClickListener<IgnoreRequireHashCodeViewModel_, IgnoreRequireHashCodeView> clickListener) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
-    if (clickListener_OnClickListener == null) {
+    if (clickListener == null) {
       this.clickListener_OnClickListener = null;
     }
     else {
-      this.clickListener_OnClickListener = new WrappedEpoxyModelClickListener(this, clickListener_OnClickListener);
+      this.clickListener_OnClickListener = new WrappedEpoxyModelClickListener(this, clickListener);
     }
     return this;
   }

File: epoxy-processortest/src/test/resources/TestCallbackPropViewModel_.java
Patch:
@@ -105,14 +105,14 @@ public TestCallbackPropViewModel_ onUnbind(OnModelUnboundListener<TestCallbackPr
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
   @Nullable
-  public TestCallbackPropViewModel_ listener_OnClickListener(final OnModelClickListener<TestCallbackPropViewModel_, TestCallbackPropView> listener_OnClickListener) {
+  public TestCallbackPropViewModel_ listener(final OnModelClickListener<TestCallbackPropViewModel_, TestCallbackPropView> listener) {
     assignedAttributes_epoxyGeneratedModel.set(0);
     onMutation();
-    if (listener_OnClickListener == null) {
+    if (listener == null) {
       this.listener_OnClickListener = null;
     }
     else {
-      this.listener_OnClickListener = new WrappedEpoxyModelClickListener(this, listener_OnClickListener);
+      this.listener_OnClickListener = new WrappedEpoxyModelClickListener(this, listener);
     }
     return this;
   }

File: epoxy-processortest/src/test/resources/TestManyTypesViewModel_.java
Patch:
@@ -487,14 +487,14 @@ public List<String> listValue() {
 
   /**
    * Set a click listener that will provide the parent view, model, and adapter position of the clicked view. This will clear the normal View.OnClickListener if one has been set */
-  public TestManyTypesViewModel_ clickListener_OnClickListener(final OnModelClickListener<TestManyTypesViewModel_, TestManyTypesView> clickListener_OnClickListener) {
+  public TestManyTypesViewModel_ clickListener(final OnModelClickListener<TestManyTypesViewModel_, TestManyTypesView> clickListener) {
     assignedAttributes_epoxyGeneratedModel.set(12);
     onMutation();
-    if (clickListener_OnClickListener == null) {
+    if (clickListener == null) {
       this.clickListener_OnClickListener = null;
     }
     else {
-      this.clickListener_OnClickListener = new WrappedEpoxyModelClickListener(this, clickListener_OnClickListener);
+      this.clickListener_OnClickListener = new WrappedEpoxyModelClickListener(this, clickListener);
     }
     return this;
   }

File: epoxy-processortest/src/test/resources/TestStringOverloadsView.java
Patch:
@@ -23,9 +23,9 @@ public void setTitle(@Nullable List<CharSequence> title) {
     // testing that a nullable overload works correctly
     // test setting options via the value param shortcut
   }
-  
+
   @ModelProp(ModelProp.Option.GenerateStringOverloads)
   public void setTitleViaValueShortcut(CharSequence title) {
-
+     // test setting options via the value param shortcut
   }
 }
\ No newline at end of file

File: epoxy-processor/src/main/java/com/airbnb/epoxy/ViewAttributeInfo.java
Patch:
@@ -56,6 +56,7 @@ class ViewAttributeInfo extends AttributeInfo {
       defaultConstant = propAnnotation.defaultValue();
       groupKey = propAnnotation.group();
       options.addAll(Arrays.asList(propAnnotation.options()));
+      options.addAll(Arrays.asList(propAnnotation.value()));
     } else if (textAnnotation != null) {
       int stringResValue = textAnnotation.defaultRes();
       if (stringResValue != 0) {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/StringAttributeData.java
Patch:
@@ -24,7 +24,7 @@ public StringAttributeData() {
     defaultStringRes = 0;
   }
 
-  public StringAttributeData(@Nullable String defaultString) {
+  public StringAttributeData(@Nullable CharSequence defaultString) {
     hasDefault = true;
     this.defaultString = defaultString;
     string = defaultString;

File: epoxy-processortest/src/test/resources/NullOnRecycleViewModel_.java
Patch:
@@ -21,7 +21,7 @@ public class NullOnRecycleViewModel_ extends EpoxyModel<NullOnRecycleView> imple
   /**
    * Bitset index: 0 */
   @Nullable
-  private CharSequence title_CharSequence = null;
+  private CharSequence title_CharSequence = (CharSequence) null;
 
   @Override
   public void addTo(EpoxyController controller) {
@@ -99,7 +99,7 @@ public NullOnRecycleViewModel_ onUnbind(OnModelUnboundListener<NullOnRecycleView
   }
 
   /**
-   * <i>Optional</i>: Default value is null
+   * <i>Optional</i>: Default value is (CharSequence) null
    *
    * @see NullOnRecycleView#setTitle(CharSequence)
    */
@@ -192,7 +192,7 @@ public NullOnRecycleViewModel_ reset() {
     onModelBoundListener_epoxyGeneratedModel = null;
     onModelUnboundListener_epoxyGeneratedModel = null;
     assignedAttributes_epoxyGeneratedModel.clear();
-    this.title_CharSequence = null;
+    this.title_CharSequence = (CharSequence) null;
     super.reset();
     return this;
   }

File: epoxy-processortest/src/test/resources/PropDefaultsViewModel_.java
Patch:
@@ -23,7 +23,7 @@ public class PropDefaultsViewModel_ extends EpoxyModel<PropDefaultsView> impleme
   /**
    * Bitset index: 0 */
   @Nullable
-  private CharSequence defaultsToNull_CharSequence = null;
+  private CharSequence defaultsToNull_CharSequence = (CharSequence) null;
 
   /**
    * Bitset index: 1 */
@@ -149,7 +149,7 @@ public PropDefaultsViewModel_ onUnbind(OnModelUnboundListener<PropDefaultsViewMo
   }
 
   /**
-   * <i>Optional</i>: Default value is null
+   * <i>Optional</i>: Default value is (CharSequence) null
    *
    * @see PropDefaultsView#defaultsToNull(CharSequence)
    */
@@ -329,7 +329,7 @@ public PropDefaultsViewModel_ reset() {
     onModelBoundListener_epoxyGeneratedModel = null;
     onModelUnboundListener_epoxyGeneratedModel = null;
     assignedAttributes_epoxyGeneratedModel.clear();
-    this.defaultsToNull_CharSequence = null;
+    this.defaultsToNull_CharSequence = (CharSequence) null;
     this.noDefaultSoItIsRequired_CharSequence = null;
     this.primitivesHaveImplicitDefaultsAndCannotBeRequired_Int = 0;
     this.primitiveWithExplicitDefault_Int = PropDefaultsView.PRIMITIVE_DEFAULT;

File: epoxy-processortest/src/test/resources/TestCallbackPropViewModel_.java
Patch:
@@ -22,7 +22,7 @@ public class TestCallbackPropViewModel_ extends EpoxyModel<TestCallbackPropView>
   /**
    * Bitset index: 0 */
   @Nullable
-  private View.OnClickListener listener_OnClickListener = null;
+  private View.OnClickListener listener_OnClickListener = (View.OnClickListener) null;
 
   @Override
   public void addTo(EpoxyController controller) {
@@ -118,7 +118,7 @@ public TestCallbackPropViewModel_ listener_OnClickListener(final OnModelClickLis
   }
 
   /**
-   * <i>Optional</i>: Default value is null
+   * <i>Optional</i>: Default value is (View.OnClickListener) null
    *
    * @see TestCallbackPropView#setListener(View.OnClickListener)
    */
@@ -211,7 +211,7 @@ public TestCallbackPropViewModel_ reset() {
     onModelBoundListener_epoxyGeneratedModel = null;
     onModelUnboundListener_epoxyGeneratedModel = null;
     assignedAttributes_epoxyGeneratedModel.clear();
-    this.listener_OnClickListener = null;
+    this.listener_OnClickListener = (View.OnClickListener) null;
     super.reset();
     return this;
   }

File: epoxy-annotations/src/main/java/com/airbnb/epoxy/TextProp.java
Patch:
@@ -1,5 +1,7 @@
 package com.airbnb.epoxy;
 
+import android.support.annotation.StringRes;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -17,6 +19,5 @@
 @Retention(RetentionPolicy.CLASS)
 public @interface TextProp {
 
-  // TODO: (eli_hart 8/10/17) support a default value from a string resource
-//  @StringRes int defaultRes() default 0;
+  @StringRes int defaultRes() default 0;
 }

File: epoxy-processor/src/main/java/com/airbnb/epoxy/DataBindingProcessor.java
Patch:
@@ -37,14 +37,14 @@ void process(RoundEnvironment roundEnv) {
         roundEnv.getElementsAnnotatedWith(EpoxyDataBindingLayouts.class);
 
     for (Element packageElement : dataBindingLayoutPackageElements) {
-      List<LayoutResource> layoutResources = layoutResourceProcessor
+      List<ResourceValue> layoutResources = layoutResourceProcessor
           .getLayoutsInAnnotation(packageElement, EpoxyDataBindingLayouts.class);
 
       // Get the module name after parsing resources so we can use the resource classes to figure
       // out the module name
       String moduleName = dataBindingModuleLookup.getModuleName(packageElement);
 
-      for (LayoutResource layoutResource : layoutResources) {
+      for (ResourceValue layoutResource : layoutResources) {
         modelInfoList.add(new DataBindingModelInfo(typeUtils, elementUtils, layoutResource,
             moduleName));
       }

File: epoxy-processor/src/main/java/com/airbnb/epoxy/EpoxyProcessor.java
Patch:
@@ -125,7 +125,7 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
 
     modelViewProcessor = new ModelViewProcessor(
         elementUtils, typeUtils, configManager, errorLogger,
-        modelWriter);
+        modelWriter, layoutResourceProcessor);
 
     lithoSpecProcessor = new LithoSpecProcessor(
         elementUtils, typeUtils, configManager, errorLogger, modelWriter);

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/views/HeaderView.java
Patch:
@@ -9,6 +9,7 @@
 import com.airbnb.epoxy.ModelProp.Option;
 import com.airbnb.epoxy.ModelView;
 import com.airbnb.epoxy.R;
+import com.airbnb.epoxy.TextProp;
 
 import butterknife.BindView;
 import butterknife.ButterKnife;
@@ -30,7 +31,7 @@ private void init() {
     ButterKnife.bind(this);
   }
 
-  @ModelProp(options = Option.GenerateStringOverloads)
+  @TextProp(defaultRes = R.string.app_name)
   public void setTitle(CharSequence title) {
     this.title.setText(title);
   }

File: epoxy-processor/src/main/java/com/airbnb/epoxy/GeneratedModelWriter.java
Patch:
@@ -885,7 +885,7 @@ private MethodSpec generateGetter(AttributeInfo data) {
         .addModifiers(PUBLIC)
         .returns(data.getTypeName())
         .addAnnotations(data.getGetterAnnotations())
-        .addStatement("return $L", data.getterCode())
+        .addStatement("return $L", data.superGetterCode())
         .build();
   }
 

File: epoxy-processortest/src/test/resources/ModelWithPrivateFieldWithSameAsFieldGetterAndSetterName_.java
Patch:
@@ -78,7 +78,7 @@ public ModelWithPrivateFieldWithSameAsFieldGetterAndSetterName_ isValue(boolean
   }
 
   public boolean isValue() {
-    return isValue();
+    return super.isValue();
   }
 
   @Override

File: epoxy-processortest/src/test/resources/ModelWithPrivateViewClickListener_.java
Patch:
@@ -110,7 +110,7 @@ public ModelWithPrivateViewClickListener_ clickListener(View.OnClickListener cli
   }
 
   public View.OnClickListener clickListener() {
-    return getClickListener();
+    return super.getClickListener();
   }
 
   @Override

File: epoxy-processor/src/main/java/com/airbnb/epoxy/ConfigManager.java
Patch:
@@ -68,7 +68,6 @@ private static boolean getBooleanOption(Map<String, String> options, String opti
    * Using a debug build flag is a great way to do this.
    */
   List<Exception> processConfigurations(RoundEnvironment roundEnv) {
-    configurationMap.clear();
 
     Set<? extends Element> annotatedElements =
         roundEnv.getElementsAnnotatedWith(PackageEpoxyConfig.class);

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/SampleController.java
Patch:
@@ -44,7 +44,7 @@ protected void buildModels(List<CarouselData> carousels) {
     header
         .title(R.string.epoxy)
         .caption(R.string.header_subtitle);
-    // "addTo" is not needed since implicit adding is enabled 
+    // "addTo" is not needed since implicit adding is enabled
     // (https://github.com/airbnb/epoxy/wiki/Epoxy-Controller#implicit-adding)
 
     addButton

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyControllerAdapter.java
Patch:
@@ -53,12 +53,12 @@ boolean diffPayloadsEnabled() {
 
   @Override
   public void onAttachedToRecyclerView(RecyclerView recyclerView) {
-    epoxyController.onAttachedToRecyclerView(recyclerView);
+    epoxyController.onAttachedToRecyclerViewInternal(recyclerView);
   }
 
   @Override
   public void onDetachedFromRecyclerView(RecyclerView recyclerView) {
-    epoxyController.onDetachedFromRecyclerView(recyclerView);
+    epoxyController.onDetachedFromRecyclerViewInternal(recyclerView);
   }
 
   @Override

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModelGroup.java
Patch:
@@ -235,6 +235,8 @@ private View createAndAddView(ViewGroup groupView, EpoxyModel<?> model) {
         View modelView = model.buildView(groupView);
         LayoutParams modelLayoutParams = modelView.getLayoutParams();
         ViewGroup.LayoutParams viewStubLayoutParams = stubData.viewStub.getLayoutParams();
+        // Carry over the stub id manually since we aren't actually inflating it
+        modelView.setId(stubData.viewStub.getInflatedId());
 
         // Use layout params off the view created by the model if they exist.
         // Otherwise we fallback to any layout params on the view stub.

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/SimpleEpoxyAdapter.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.List;
 
 /**
- * A non-abstract version of {@link com.airbnb.epoxy.EpoxyAdapter} that exposed all methods and
+ * A non-abstract version of {@link com.airbnb.epoxy.EpoxyAdapter} that exposes all methods and
  * models as public. Use this if you don't want to create your own adapter subclass and instead want
  * to modify the adapter from elsewhere, such as from an activity.
  */

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/SimpleEpoxyController.java
Patch:
@@ -8,14 +8,14 @@
  * models directly.
  */
 public class SimpleEpoxyController extends EpoxyController {
-  private List<EpoxyModel<?>> currentModels;
+  private List<? extends EpoxyModel<?>> currentModels;
   private boolean insideSetModels;
 
   /**
    * Set the models to add to this controller. Clears any previous models and adds this new list
    * .
    */
-  public void setModels(List<EpoxyModel<?>> models) {
+  public void setModels(List<? extends EpoxyModel<?>> models) {
     currentModels = models;
     insideSetModels = true;
     requestModelBuild();

File: epoxy-processor/src/main/java/com/airbnb/epoxy/GeneratedModelWriter.java
Patch:
@@ -90,7 +90,7 @@ void generateClassForModel(ClassToGenerateInfo info)
         .addFields(generateFields(info))
         .addMethods(generateConstructors(info));
 
-    generateDebugAddToMethodIfNeeded(builder, info);
+    generateDebugAddToMethodIfNeeded(builder);
 
     builder
         .addMethods(generateBindMethods(info))
@@ -191,8 +191,7 @@ private Iterable<MethodSpec> generateConstructors(ClassToGenerateInfo info) {
     return constructors;
   }
 
-  private void generateDebugAddToMethodIfNeeded(TypeSpec.Builder classBuilder,
-      ClassToGenerateInfo info) {
+  private void generateDebugAddToMethodIfNeeded(TypeSpec.Builder classBuilder) {
     if (!configManager.shouldValidateModeUsage()) {
       return;
     }

File: epoxy-integrationtest/src/test/java/com/airbnb/epoxy/Model.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.epoxy;
 
-import android.view.View;
+import android.widget.TextView;
 
 @EpoxyModelClass
-abstract class Model extends EpoxyModel<View> {
+abstract class Model extends EpoxyModel<TextView> {
   @EpoxyAttribute int value;
 
   @Override

File: epoxy-sample/src/main/java/com/airbnb/epoxy/sample/SampleController.java
Patch:
@@ -37,7 +37,6 @@ interface AdapterCallbacks {
   // TODO: (eli_hart 2/26/17) Carousel with shared view pools, model groups
   // TODO: (eli_hart 2/27/17) Save colors state
   // TODO: (eli_hart 2/27/17) Shuffle color on click square
-  // TODO: (eli_hart 3/21/17) addUnless method?
 
   @Override
   protected void buildModels(List<ColorData> colors) {

File: epoxy-sample/src/main/java/com/airbnb/epoxy/MainActivity.java
Patch:
@@ -7,7 +7,7 @@
 import android.support.v7.widget.RecyclerView;
 import android.util.DisplayMetrics;
 
-import com.airbnb.epoxy.SampleAdapter.AdapterCallbacks;
+import com.airbnb.epoxy.SampleController.AdapterCallbacks;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -25,7 +25,7 @@ public class MainActivity extends AppCompatActivity implements AdapterCallbacks
   private static final Random RANDOM = new Random();
 
   @BindView(R.id.recycler_view) RecyclerView recyclerView;
-  private final SampleAdapter controller = new SampleAdapter(this);
+  private final SampleController controller = new SampleController(this);
   private final List<ColorData> colors = new ArrayList<>();
 
   @Override

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyAdapter.java
Patch:
@@ -211,21 +211,21 @@ protected void onModelUnbound(EpoxyViewHolder holder, EpoxyModel<?> model) {
   @Override
   public boolean onFailedToRecycleView(EpoxyViewHolder holder) {
     //noinspection unchecked,rawtypes
-    return ((EpoxyModel) holder.getModel()).onFailedToRecycleView(holder.itemView);
+    return ((EpoxyModel) holder.getModel()).onFailedToRecycleView(holder.objectToBind());
   }
 
   @CallSuper
   @Override
   public void onViewAttachedToWindow(EpoxyViewHolder holder) {
     //noinspection unchecked,rawtypes
-    ((EpoxyModel) holder.getModel()).onViewAttachedToWindow(holder.itemView);
+    ((EpoxyModel) holder.getModel()).onViewAttachedToWindow(holder.objectToBind());
   }
 
   @CallSuper
   @Override
   public void onViewDetachedFromWindow(EpoxyViewHolder holder) {
     //noinspection unchecked,rawtypes
-    ((EpoxyModel) holder.getModel()).onViewDetachedFromWindow(holder.itemView);
+    ((EpoxyModel) holder.getModel()).onViewDetachedFromWindow(holder.objectToBind());
   }
 
   public void onSaveInstanceState(Bundle outState) {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyViewHolder.java
Patch:
@@ -37,7 +37,7 @@ public void bind(@SuppressWarnings("rawtypes") EpoxyModel model, List<Object> pa
     epoxyModel = model;
   }
 
-  private Object objectToBind() {
+  Object objectToBind() {
     return epoxyHolder != null ? epoxyHolder : itemView;
   }
 

File: epoxy-processortest/src/test/java/com/airbnb/epoxy/ProcessorTestModel.java
Patch:
@@ -1,9 +1,8 @@
 package com.airbnb.epoxy;
 
-import com.airbnb.epoxy.EpoxyAttribute;
-import com.airbnb.epoxy.EpoxyModel;
+import com.airbnb.epoxy.processortest2.ProcessorTest2Model;
 
-public class ProcessorTestModel extends EpoxyModel<Object> {
+public class ProcessorTestModel extends ProcessorTest2Model {
   @EpoxyAttribute public int publicValue;
   @EpoxyAttribute protected int protectedValue;
   @EpoxyAttribute int packagePrivateValue;

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/EpoxyModel.java
Patch:
@@ -167,7 +167,7 @@ public boolean shouldSaveViewState() {
 
   @Override
   public String toString() {
-    return "EpoxyModel{"
+    return "{" + getClass().getSimpleName()
         + "id=" + id
         + ", layout=" + getLayout()
         + ", shown=" + shown

File: epoxy-processor/src/test/resources/ModelWithFinalClass.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.epoxy;
 
 public final class ModelWithFinalClass extends EpoxyModel<Object> {
-  @EpoxyAttribute static int valueInt;
+  @EpoxyAttribute int valueInt;
 
   @Override
   protected int getDefaultLayout() {

File: epoxy-adapter/src/main/java/com/airbnb/epoxy/SimpleEpoxyModel.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.epoxy;
 
+import android.support.annotation.CallSuper;
 import android.support.annotation.LayoutRes;
 import android.view.View;
 
@@ -28,13 +29,15 @@ public SimpleEpoxyModel span(int span) {
     return this;
   }
 
+  @CallSuper
   @Override
   public void bind(View view) {
     super.bind(view);
     view.setOnClickListener(onClickListener);
     view.setClickable(onClickListener != null);
   }
 
+  @CallSuper
   @Override
   public void unbind(View view) {
     super.unbind(view);

